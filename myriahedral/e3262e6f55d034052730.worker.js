/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 217);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(215);
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ERR_CONTEXT */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return ERR_WEBGL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return ERR_WEBGL2; });
/* harmony export (immutable) */ __webpack_exports__["c"] = isWebGL;
/* harmony export (immutable) */ __webpack_exports__["b"] = isWebGL2;
/* unused harmony export isWebGLContext */
/* unused harmony export isWebGL2Context */
/* harmony export (immutable) */ __webpack_exports__["f"] = assertWebGLContext;
/* harmony export (immutable) */ __webpack_exports__["a"] = assertWebGL2Context;
/* unused harmony export setContextDefaults */
/* harmony export (immutable) */ __webpack_exports__["g"] = createGLContext;
/* harmony export (immutable) */ __webpack_exports__["h"] = deleteGLContext;
/* unused harmony export pollContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils_track_context_state__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_utils__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context_debug__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__context_limits__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__helpers_query_manager__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__init__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_assert__);
// WebGLRenderingContext related methods












// Heuristic testing of contexts (to indentify debug wrappers around gl contexts)
var GL_ARRAY_BUFFER = 0x8892;
var GL_TEXTURE_BINDING_3D = 0x806A;

var ERR_CONTEXT = 'Invalid WebGLRenderingContext';
var ERR_WEBGL = ERR_CONTEXT;
var ERR_WEBGL2 = 'Requires WebGL2';

var ERR_WEBGL_MISSING_NODE = 'WebGL API is missing. To run luma.gl under Node.js, please "npm install gl"\nand import \'luma.gl/headless\' before importing \'luma.gl\'.';

var ERR_HEADLESSGL_NOT_AVAILABLE = 'Cannot create headless WebGL context, headlessGL not available';

var ERR_HEADLESSGL_FAILED = 'headlessGL failed to create headless WebGL context';

function isWebGL(gl) {
  return Boolean(gl && (gl instanceof __WEBPACK_IMPORTED_MODULE_0__api__["b" /* WebGLRenderingContext */] || gl.ARRAY_BUFFER === GL_ARRAY_BUFFER));
}

function isWebGL2(gl) {
  return Boolean(gl && (gl instanceof __WEBPACK_IMPORTED_MODULE_0__api__["c" /* WebGL2RenderingContext */] || gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D));
}

function isWebGLContext(gl) {
  __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('isWebGLContext', 'isWebGL');
  return isWebGL(gl);
}

function isWebGL2Context(gl) {
  __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('isWebGL2Context', 'isWebGL2');
  return isWebGL2(gl);
}

function assertWebGLContext(gl) {
  // Need to handle debug context
  __WEBPACK_IMPORTED_MODULE_8_assert___default()(isWebGL(gl), ERR_CONTEXT);
}

function assertWebGL2Context(gl) {
  // Need to handle debug context
  __WEBPACK_IMPORTED_MODULE_8_assert___default()(isWebGL2(gl), ERR_WEBGL2);
}

var contextDefaults = {
  // COMMON CONTEXT PARAMETERS
  // Attempt to allocate WebGL2 context
  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)
  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)
  throwOnFailure: true,
  manageState: true,
  // BROWSER CONTEXT PARAMETERS
  canvas: null, // A canvas element or a canvas string id
  debug: false, // Instrument context (at the expense of performance)
  // HEADLESS CONTEXT PARAMETERS
  width: 800, // width are height are only used by headless gl
  height: 600
  // WEBGL/HEADLESS CONTEXT PARAMETERS
  // Remaining options are passed through to context creator
};

/*
 * Change default context creation parameters.
 * Main use case is regression test suite.
 */
function setContextDefaults() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  Object.assign(contextDefaults, { width: 1, height: 1 }, opts);
}

/*
 * Creates a context giving access to the WebGL API
 */
/* eslint-disable complexity, max-statements */
function createGLContext() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  opts = Object.assign({}, contextDefaults, opts);
  var _opts = opts,
      canvas = _opts.canvas,
      width = _opts.width,
      height = _opts.height,
      throwOnError = _opts.throwOnError,
      manageState = _opts.manageState,
      debug = _opts.debug;

  // Error reporting function, enables exceptions to be disabled

  function onError(message) {
    if (throwOnError) {
      throw new Error(message);
    }
    // log.log(0, message);
    return null;
  }

  var gl = void 0;
  if (__WEBPACK_IMPORTED_MODULE_6__utils__["isBrowser"]) {
    // Make sure we have a real canvas ("canvas" can a string, a canvas or null)
    var realCanvas = void 0;
    if (!canvas) {
      realCanvas = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_utils__["a" /* createCanvas */])({ id: 'lumagl-canvas', width: width, height: height, onError: onError });
    } else if (typeof canvas === 'string') {
      realCanvas = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_utils__["b" /* getCanvas */])({ id: canvas });
    } else {
      realCanvas = canvas;
    }
    // Create a WebGL context in the canvas
    gl = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_utils__["c" /* createContext */])({ canvas: realCanvas, opts: opts });
  } else {
    // Create a headless-gl context under Node.js
    gl = _createHeadlessContext({ width: width, height: height, opts: opts, onError: onError });
  }
  if (!gl) {
    return null;
  }

  // Install context state tracking
  if (manageState) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_track_context_state__["a" /* default */])(gl, {
      copyState: false,
      log: function log() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return __WEBPACK_IMPORTED_MODULE_6__utils__["log"].log.apply(__WEBPACK_IMPORTED_MODULE_6__utils__["log"], [1].concat(args));
      }
    });
  }

  // Add debug instrumentation to the context
  if (__WEBPACK_IMPORTED_MODULE_6__utils__["isBrowser"] && debug) {
    gl = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context_debug__["a" /* makeDebugContext */])(gl, { debug: debug });
    // Debug forces log level to at least 1
    __WEBPACK_IMPORTED_MODULE_6__utils__["log"].priority = Math.max(__WEBPACK_IMPORTED_MODULE_6__utils__["log"].priority, 1);
    // Log some debug info about the context
    logInfo(gl);
  }

  // Add to seer integration

  return gl;
}

function deleteGLContext(gl) {}
// Remove from seer integration


// POLLING FOR PENDING QUERIES
// Calling this function checks all pending queries for completion
function pollContext(gl) {
  __WEBPACK_IMPORTED_MODULE_5__helpers_query_manager__["a" /* default */].poll(gl);
}

function logInfo(gl) {
  var webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';
  var info = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__context_limits__["a" /* glGetDebugInfo */])(gl);
  var driver = info ? '(' + info.vendor + ' ' + info.renderer + ')' : '';
  var debug = gl.debug ? 'debug' : '';
  __WEBPACK_IMPORTED_MODULE_6__utils__["log"].log(0, 'luma.gl: Created ' + webGL + ' ' + debug + ' context ' + driver, gl);
}

// Create headless gl context (for running under Node.js)
function _createHeadlessContext(_ref) {
  var width = _ref.width,
      height = _ref.height,
      opts = _ref.opts,
      onError = _ref.onError;
  var webgl1 = opts.webgl1,
      webgl2 = opts.webgl2;

  if (webgl2 && !webgl1) {
    return onError('headless-gl does not support WebGL2');
  }
  if (!__WEBPACK_IMPORTED_MODULE_0__api__["d" /* webGLTypesAvailable */]) {
    return onError(ERR_WEBGL_MISSING_NODE);
  }
  if (!__WEBPACK_IMPORTED_MODULE_7__init__["default"].globals.headlessGL) {
    return onError(ERR_HEADLESSGL_NOT_AVAILABLE);
  }
  var gl = __WEBPACK_IMPORTED_MODULE_7__init__["default"].globals.headlessGL(width, height, opts);
  if (!gl) {
    return onError(ERR_HEADLESSGL_FAILED);
  }
  return gl;
}
//# sourceMappingURL=context.js.map

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__is_browser__ = __webpack_require__(76);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isNode", function() { return __WEBPACK_IMPORTED_MODULE_0__is_browser__["b"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isBrowser", function() { return __WEBPACK_IMPORTED_MODULE_0__is_browser__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__promise_utils__ = __webpack_require__(201);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "promisify", function() { return __WEBPACK_IMPORTED_MODULE_1__promise_utils__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(202);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "splat", function() { return __WEBPACK_IMPORTED_MODULE_2__utils__["c"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return __WEBPACK_IMPORTED_MODULE_2__utils__["d"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "uid", function() { return __WEBPACK_IMPORTED_MODULE_2__utils__["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return __WEBPACK_IMPORTED_MODULE_2__utils__["e"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isPowerOfTwo", function() { return __WEBPACK_IMPORTED_MODULE_2__utils__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__log__ = __webpack_require__(38);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "formatValue", function() { return __WEBPACK_IMPORTED_MODULE_3__log__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return __WEBPACK_IMPORTED_MODULE_3__log__["a"]; });





//# sourceMappingURL=index.js.map

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = glGet;
/* harmony export (immutable) */ __webpack_exports__["b"] = glKey;
/* unused harmony export glKeyType */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils_constants_to_keys__ = __webpack_require__(203);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a"]; });
// WEBGL BUILT-IN CONSTANTS




/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */]);

// Resolve a WebGL enumeration name (returns itself if already a number)
function glGet(name) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_constants_to_keys__["a" /* getKeyValue */])(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */], name);
}

function glKey(value) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_constants_to_keys__["b" /* getKey */])(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */], value);
}

function glKeyType(value) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_constants_to_keys__["c" /* getKeyType */])(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */], value);
}
//# sourceMappingURL=gl-constants.js.map

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__init__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_assert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__webgl_utils__ = __webpack_require__(11);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








var ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';

// TODO - Handle context loss
// function glGetContextLossCount(gl) {
//   return (gl.luma && gl.luma.glCount) || 0;
// }

var Resource = /*#__PURE__*/function () {
  function Resource(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Resource);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["f" /* assertWebGLContext */])(gl);

    var id = opts.id,
        _opts$userData = opts.userData,
        userData = _opts$userData === undefined ? {} : _opts$userData;

    this.gl = gl;
    this.ext = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__webgl_utils__["d" /* polyfillContext */])(gl);
    this.id = id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["uid"])(this.constructor.name);
    this.userData = userData;
    this.opts = opts;

    // Set the handle
    // If handle was provided, use it, otherwise create a new handle

    // TODO - Stores the handle with context loss information
    // this.glCount = glGetContextLossCount(this.gl);

    // Default VertexArray needs to be created with null handle, so compare against undefined
    this._handle = opts.handle;
    if (this._handle === undefined) {
      this._handle = this._createHandle();
    }

    this._addStats();
  }

  _createClass(Resource, [{
    key: 'toString',
    value: function toString() {
      return this.constructor.name + '(' + this.id + ')';
    }
  }, {
    key: 'delete',
    value: function _delete() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$deleteChildren = _ref.deleteChildren,
          deleteChildren = _ref$deleteChildren === undefined ? false : _ref$deleteChildren;

      // Delete this object, and get refs to any children
      var children = this._handle && this._deleteHandle(this._handle);
      this._handle = null;

      // Optionally, recursively delete the children
      if (children && deleteChildren) {
        children.filter(Boolean).forEach(function (child) {
          child.delete();
        });
      }

      return this;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      this.bind(null);
    }

    /**
     * Query a Resource parameter
     *
     * @todo - cache parameters to avoid issuing WebGL calls?
     *
     * @param {GLenum} pname
     * @return {GLint|GLfloat|GLenum} param
     */

  }, {
    key: 'getParameter',
    value: function getParameter(pname) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      pname = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__gl_constants__["c" /* glGet */])(pname);
      __WEBPACK_IMPORTED_MODULE_4_assert___default()(pname);

      var parameters = this.constructor.PARAMETERS || {};

      // Use parameter definitions to handle unsupported parameters
      var parameter = parameters[pname];
      if (parameter) {
        var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(this.gl);

        // Check if we can query for this parameter
        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));

        if (!parameterAvailable) {
          var webgl1Default = parameter.webgl1;
          var webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;
          var defaultValue = isWebgl2 ? webgl2Default : webgl1Default;
          return defaultValue;
        }
      }

      // If unknown parameter - Could be a valid parameter not covered by PARAMS
      // Attempt to query for it and let WebGL report errors
      return this._getParameter(pname, opts);
    }

    // Many resources support a getParameter call -
    // getParameters will get all parameters - slow but useful for debugging

  }, {
    key: 'getParameters',
    value: function getParameters() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _ref2 = {},
          parameters = _ref2.parameters,
          keys = _ref2.keys;

      // Get parameter definitions for this Resource

      var PARAMETERS = this.constructor.PARAMETERS || {};

      var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(this.gl);

      var values = {};

      // Query all parameters if no list provided
      var parameterKeys = parameters || Object.keys(PARAMETERS);

      // WEBGL limits
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = parameterKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pname = _step.value;

          var parameter = PARAMETERS[pname];

          // Check if this parameter is available on this platform
          var parameterAvailable = parameter && (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));

          if (parameterAvailable) {
            var key = keys ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__gl_constants__["b" /* glKey */])(pname) : pname;
            values[key] = this.getParameter(pname, opts);
            if (keys && parameter.type === 'GLenum') {
              values[key] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__gl_constants__["b" /* glKey */])(values[key]);
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return values;
    }

    /**
     * Update a Resource setting
     *
     * @todo - cache parameter to avoid issuing WebGL calls?
     *
     * @param {GLenum} pname - parameter (GL constant, value or key)
     * @param {GLint|GLfloat|GLenum} value
     * @return {Resource} returns self to enable chaining
     */

  }, {
    key: 'setParameter',
    value: function setParameter(pname, value) {
      pname = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__gl_constants__["c" /* glGet */])(pname);
      __WEBPACK_IMPORTED_MODULE_4_assert___default()(pname);

      var parameters = this.constructor.PARAMETERS || {};

      var parameter = parameters[pname];
      if (parameter) {
        var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(this.gl);

        // Check if this parameter is available on this platform
        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));

        if (!parameterAvailable) {
          throw new Error('Parameter not available on this platform');
        }

        // Handle string keys
        if (parameter.type === 'GLenum') {
          value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__gl_constants__["c" /* glGet */])(value);
        }
      }

      // If unknown parameter - Could be a valid parameter not covered by PARAMS
      // attempt to set it and let WebGL report errors
      this._setParameter(pname, value);
      return this;
    }

    /*
     * Batch update resource parameters
     * Assumes the subclass supports a setParameter call
     */

  }, {
    key: 'setParameters',
    value: function setParameters(parameters) {
      for (var pname in parameters) {
        this.setParameter(pname, parameters[pname]);
      }
      return this;
    }

    // PUBLIC VIRTUAL METHODS

  }, {
    key: 'initialize',
    value: function initialize(opts) {}

    // PROTECTED METHODS - These must be overridden by subclass

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
  }, {
    key: '_getOptsFromHandle',
    value: function _getOptsFromHandle() {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
  }, {
    key: '_getParameter',
    value: function _getParameter(pname, opts) {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }

    /**
     * @param {GLenum} pname
     * @param {GLint|GLfloat|GLenum} param
     * @return {Sampler} returns self to enable chaining
     */

  }, {
    key: '_setParameter',
    value: function _setParameter(pname, value) {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }

    // PRIVATE METHODS

  }, {
    key: '_context',
    value: function _context() {
      this.gl.luma = this.gl.luma || {};
      return this.gl.luma;
    }
  }, {
    key: '_addStats',
    value: function _addStats() {
      var name = this.constructor.name;

      var stats = __WEBPACK_IMPORTED_MODULE_0__init__["default"].stats;

      stats.resourceCount = stats.resourceCount || 0;
      stats.resourceMap = stats.resourceMap || {};

      // Resource creation stats
      stats.resourceCount++;
      stats.resourceMap[name] = stats.resourceMap[name] || { count: 0 };
      stats.resourceMap[name].count++;
    }
  }, {
    key: 'handle',
    get: function get() {
      // TODO - Add context loss handling
      // Will regenerate and reinitialize the handle if necessary
      // const glCount = glGetContextLossCount(this.gl);
      // if (this.glCount !== glCount) {
      //   this._handle = this._createHandle(this.opts);
      //   this._glCount = glCount;
      //   // Reinitialize object
      //   this.initialize(this.opts);
      // }
      return this._handle;
    }
  }]);

  return Resource;
}();

/* harmony default export */ __webpack_exports__["a"] = (Resource);
//# sourceMappingURL=resource.js.map

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__types__ = __webpack_require__(81);
/* unused harmony reexport Image */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__types__["a"]; });
/* unused harmony reexport WebGLProgram */
/* unused harmony reexport WebGLShader */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_0__types__["d"]; });
/* unused harmony reexport WebGLFramebuffer */
/* unused harmony reexport WebGLRenderbuffer */
/* unused harmony reexport WebGLTexture */
/* unused harmony reexport WebGLUniformLocation */
/* unused harmony reexport WebGLActiveInfo */
/* unused harmony reexport WebGLShaderPrecisionFormat */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_0__types__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__types__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils__ = __webpack_require__(11);
/* unused harmony reexport formatGLSLCompilerError */
/* unused harmony reexport getShaderName */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_utils_constants__ = __webpack_require__(9);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_2__webgl_utils_constants__["a"]; });
// Exports WebGL API constants and types, plus some basic type checks




// TODO - avoid importing GL as it is a big file


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_2__webgl_utils_constants__["a" /* default */]);
//# sourceMappingURL=index.js.map

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Geometry", function() { return __WEBPACK_IMPORTED_MODULE_0__geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__cone_geometry__ = __webpack_require__(63);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ConeGeometry", function() { return __WEBPACK_IMPORTED_MODULE_1__cone_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cube_geometry__ = __webpack_require__(64);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CubeGeometry", function() { return __WEBPACK_IMPORTED_MODULE_2__cube_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__cylinder_geometry__ = __webpack_require__(65);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CylinderGeometry", function() { return __WEBPACK_IMPORTED_MODULE_3__cylinder_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ico_sphere_geometry__ = __webpack_require__(66);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "IcoSphereGeometry", function() { return __WEBPACK_IMPORTED_MODULE_4__ico_sphere_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__plane_geometry__ = __webpack_require__(67);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PlaneGeometry", function() { return __WEBPACK_IMPORTED_MODULE_5__plane_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__sphere_geometry__ = __webpack_require__(68);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SphereGeometry", function() { return __WEBPACK_IMPORTED_MODULE_6__sphere_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__truncated_cone_geometry__ = __webpack_require__(21);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TruncatedConeGeometry", function() { return __WEBPACK_IMPORTED_MODULE_7__truncated_cone_geometry__["a"]; });









//# sourceMappingURL=index.js.map

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export DRAW_MODE */
/* harmony export (immutable) */ __webpack_exports__["b"] = getDrawMode;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





// Rendering primitives - specify how to extract primitives from vertices.
// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants
var DRAW_MODE = {
  POINTS: 0x0000, // draw single points.
  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.
  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.
  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last
  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.
  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.
  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.
  // Each vertex connects to the previous and the first vertex in the fan.
};

// Helper function to handle string draw modes - when using this library without WebGL constants
function getDrawMode(drawMode) {
  var mode = typeof drawMode === 'string' ? DRAW_MODE[drawMode] || DRAW_MODE.TRIANGLES : drawMode;
  __WEBPACK_IMPORTED_MODULE_1_assert___default()(mode >= 0 && mode <= DRAW_MODE.TRIANGLE_FAN, 'Illegal drawMode');
  return mode;
}

var Geometry = /*#__PURE__*/function () {
  function Geometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Geometry);

    var id = opts.id,
        _opts$drawMode = opts.drawMode,
        drawMode = _opts$drawMode === undefined ? DRAW_MODE.TRIANGLES : _opts$drawMode,
        _opts$vertexCount = opts.vertexCount,
        vertexCount = _opts$vertexCount === undefined ? undefined : _opts$vertexCount,
        attributes = opts.attributes;


    this.id = id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["uid"])(this.constructor.name);
    this.drawMode = getDrawMode(drawMode);
    this.vertexCount = vertexCount;
    this.attributes = {};
    this.needsRedraw = true;
    this.userData = {};
    Object.seal(this);

    if (attributes) {
      this.setAttributes(attributes);
    } else {
      __WEBPACK_IMPORTED_MODULE_0__utils__["log"].deprecated('inline attributes', 'attributes parameter');
      // TODO this is deprecated
      delete opts.id;
      delete opts.drawMode;
      delete opts.vertexCount;
      delete opts.attributes;
      this.setAttributes(opts);
    }
  }

  _createClass(Geometry, [{
    key: 'setNeedsRedraw',
    value: function setNeedsRedraw() {
      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this.needsRedraw = redraw;
      return this;
    }
  }, {
    key: 'getNeedsRedraw',
    value: function getNeedsRedraw() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$clearRedrawFlags = _ref.clearRedrawFlags,
          clearRedrawFlags = _ref$clearRedrawFlags === undefined ? false : _ref$clearRedrawFlags;

      var redraw = false;
      redraw = redraw || this.needsRedraw;
      this.needsRedraw = this.needsRedraw && !clearRedrawFlags;
      return redraw;
    }
  }, {
    key: 'setVertexCount',
    value: function setVertexCount(vertexCount) {
      this.vertexCount = vertexCount;
    }
  }, {
    key: 'getVertexCount',
    value: function getVertexCount() {
      if (this.vertexCount !== undefined) {
        return this.vertexCount;
      } else if (this.attributes.indices) {
        return this.attributes.indices.value.length;
      } else if (this.attributes.vertices) {
        return this.attributes.vertices.value.length / 3;
      } else if (this.attributes.positions) {
        return this.attributes.positions.value.length / 3;
      }
      return false;
    }
  }, {
    key: 'hasAttribute',
    value: function hasAttribute(attributeName) {
      return Boolean(this.attributes[attributeName]);
    }
  }, {
    key: 'getAttribute',
    value: function getAttribute(attributeName) {
      var attribute = this.attributes[attributeName];
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(attribute);
      return attribute.value;
    }
  }, {
    key: 'getArray',
    value: function getArray(attributeName) {
      var attribute = this.attributes[attributeName];
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(attribute);
      return attribute.value;
    }
  }, {
    key: 'getAttributes',
    value: function getAttributes() {
      return this.attributes;
    }

    // Attribute
    // value: typed array
    // type: indices, vertices, uvs
    // size: elements per vertex
    // target: WebGL buffer type (string or constant)

  }, {
    key: 'setAttributes',
    value: function setAttributes(attributes) {
      for (var attributeName in attributes) {
        var attribute = attributes[attributeName];

        // Wrap "unwrapped" arrays and try to autodetect their type
        attribute = ArrayBuffer.isView(attribute) ? { value: attribute } : attribute;

        __WEBPACK_IMPORTED_MODULE_1_assert___default()(ArrayBuffer.isView(attribute.value), this._print(attributeName) + ': must be typed array or object with value as typed array');

        this._autoDetectAttribute(attributeName, attribute);

        this.attributes[attributeName] = Object.assign({}, attribute, {
          instanced: attribute.instanced || 0
        });
      }
      this.setNeedsRedraw();
      return this;
    }

    // Check for well known attribute names
    /* eslint-disable default-case, complexity */

  }, {
    key: '_autoDetectAttribute',
    value: function _autoDetectAttribute(attributeName, attribute) {
      var category = void 0;
      switch (attributeName) {
        case 'indices':
          category = category || 'indices';
          break;
        case 'texCoords':
        case 'texCoord1':
        case 'texCoord2':
        case 'texCoord3':
          category = 'uvs';
          break;
        case 'vertices':
        case 'positions':
        case 'normals':
        case 'pickingColors':
          category = 'vectors';
          break;
      }

      // Check for categorys
      switch (category) {
        case 'vectors':
          attribute.size = attribute.size || 3;
          break;
        case 'uvs':
          attribute.size = attribute.size || 2;
          break;
        case 'indices':
          attribute.size = attribute.size || 1;
          attribute.isIndexed = attribute.isIndexed || true;
          __WEBPACK_IMPORTED_MODULE_1_assert___default()(attribute.value instanceof Uint16Array || attribute.value instanceof Uint32Array, 'attribute array for "indices" must be of integer type');
          break;
      }

      __WEBPACK_IMPORTED_MODULE_1_assert___default()(attribute.size, 'attribute ' + attributeName + ' needs size');
    }
    /* eslint-enable default-case, complexity */

  }, {
    key: '_print',
    value: function _print(attributeName) {
      return 'Geometry ' + this.id + ' attribute ' + attributeName;
    }
  }]);

  return Geometry;
}();

/* harmony default export */ __webpack_exports__["a"] = (Geometry);
//# sourceMappingURL=geometry.js.map

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return config; });
/* harmony export (immutable) */ __webpack_exports__["c"] = configure;
/* harmony export (immutable) */ __webpack_exports__["b"] = checkNumber;
/* harmony export (immutable) */ __webpack_exports__["d"] = formatValue;
/* harmony export (immutable) */ __webpack_exports__["e"] = isArray;
/* harmony export (immutable) */ __webpack_exports__["f"] = clone;
/* harmony export (immutable) */ __webpack_exports__["g"] = radians;
/* harmony export (immutable) */ __webpack_exports__["h"] = degrees;
/* harmony export (immutable) */ __webpack_exports__["i"] = sin;
/* harmony export (immutable) */ __webpack_exports__["j"] = cos;
/* harmony export (immutable) */ __webpack_exports__["k"] = tan;
/* harmony export (immutable) */ __webpack_exports__["l"] = asin;
/* harmony export (immutable) */ __webpack_exports__["m"] = acos;
/* harmony export (immutable) */ __webpack_exports__["n"] = atan;
/* harmony export (immutable) */ __webpack_exports__["o"] = clamp;
/* harmony export (immutable) */ __webpack_exports__["p"] = equals;
/* eslint-disable no-shadow */
// TODO - remove
var config = {};
config.EPSILON = 1e-12;
config.debug = true;
config.printRowMajor = true;
config.precision = 4;


function configure(options) {
  if ('epsilon' in options) {
    config.EPSILON = options.epsilon;
  }

  if ('debug' in options) {
    config.debug = options.debug;
  }
}

function checkNumber(value) {
  if (!Number.isFinite(value)) {
    throw new Error('Invalid number ' + value);
  }
  return value;
}

function formatValue(value) {
  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.precision || 4;

  return parseFloat(value.toPrecision(precision));
}

// Returns true if value is either an array or a typed array
// Note: does not return true for ArrayBuffers and DataViews
function isArray(value) {
  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;
}

// If the array has a clone function, calls it, otherwise returns a copy
function clone(array) {
  return array.clone ? array.clone() : new Array(array);
}

// If the argument value is an array, applies the func element wise,
// otherwise applies func to the argument value
function map(value, func) {
  if (isArray(value)) {
    var result = clone(value);
    for (var i = 0; i < result.length; ++i) {
      result[i] = func(result[i], i, result);
    }
    return result;
  }
  return func(value);
}

//
// GLSL math function equivalents
// Works on both single values and vectors
//

function radians(degrees) {
  return map(degrees, function (degrees) {
    return degrees / 180 * Math.PI;
  });
}

// GLSL equivalent: Works on single values and vectors
function degrees(radians) {
  return map(radians, function (radians) {
    return radians * 180 / Math.PI;
  });
}

// GLSL equivalent: Works on single values and vectors
function sin(radians) {
  return map(radians, function (angle) {
    return Math.sin(angle);
  });
}

// GLSL equivalent: Works on single values and vectors
function cos(radians) {
  return map(radians, function (angle) {
    return Math.cos(angle);
  });
}

// GLSL equivalent: Works on single values and vectors
function tan(radians) {
  return map(radians, function (angle) {
    return Math.tan(angle);
  });
}

// GLSL equivalent: Works on single values and vectors
function asin(radians) {
  return map(radians, function (angle) {
    return Math.asin(angle);
  });
}

// GLSL equivalent: Works on single values and vectors
function acos(radians) {
  return map(radians, function (angle) {
    return Math.acos(angle);
  });
}

// GLSL equivalent: Works on single values and vectors
function atan(radians) {
  return map(radians, function (angle) {
    return Math.atan(angle);
  });
}

function clamp(value, min, max) {
  return map(value, function (value) {
    return Math.max(min, Math.min(max, value));
  });
}

function equals(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a === b) {
      return true;
    }
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; ++i) {
      if (!equals(a[i], b[i])) {
        return false;
      }
    }
    return true;
  }
  return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
//# sourceMappingURL=common.js.map

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// GL constants, copied from Mozilla documentation
// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants

// Standard WebGL 1 constants
// These constants are defined on the WebGLRenderingContext interface.

/* eslint-disable key-spacing, max-len, no-inline-comments, camelcase */
/* harmony default export */ __webpack_exports__["a"] = ({
  // Clearing buffers
  // Constants passed to clear() to clear buffer masks.

  DEPTH_BUFFER_BIT: 0x00000100,
  STENCIL_BUFFER_BIT: 0x00000400,
  COLOR_BUFFER_BIT: 0x00004000,

  // Rendering primitives
  // Constants passed to drawElements() or drawArrays() to specify what kind of primitive to render.

  POINTS: 0x0000,
  LINES: 0x0001,
  LINE_LOOP: 0x0002,
  LINE_STRIP: 0x0003,
  TRIANGLES: 0x0004,
  TRIANGLE_STRIP: 0x0005,
  TRIANGLE_FAN: 0x0006,

  // Blending modes
  // Constants passed to blendFunc() or blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately).

  ZERO: 0,
  ONE: 1,
  SRC_COLOR: 0x0300,
  ONE_MINUS_SRC_COLOR: 0x0301,
  SRC_ALPHA: 0x0302,
  ONE_MINUS_SRC_ALPHA: 0x0303,
  DST_ALPHA: 0x0304,
  ONE_MINUS_DST_ALPHA: 0x0305,
  DST_COLOR: 0x0306,
  ONE_MINUS_DST_COLOR: 0x0307,
  SRC_ALPHA_SATURATE: 0x0308,
  CONSTANT_COLOR: 0x8001,
  ONE_MINUS_CONSTANT_COLOR: 0x8002,
  CONSTANT_ALPHA: 0x8003,
  ONE_MINUS_CONSTANT_ALPHA: 0x8004,

  // Blending equations
  // Constants passed to blendEquation() or blendEquationSeparate() to control
  // how the blending is calculated (for both, RBG and alpha, or separately).

  FUNC_ADD: 0x8006,
  FUNC_SUBTRACT: 0x800A,
  FUNC_REVERSE_SUBTRACT: 0x800B,

  // Getting GL parameter information
  // Constants passed to getParameter() to specify what information to return.

  BLEND_EQUATION: 0x8009,
  BLEND_EQUATION_RGB: 0x8009,
  BLEND_EQUATION_ALPHA: 0x883D,
  BLEND_DST_RGB: 0x80C8,
  BLEND_SRC_RGB: 0x80C9,
  BLEND_DST_ALPHA: 0x80CA,
  BLEND_SRC_ALPHA: 0x80CB,
  BLEND_COLOR: 0x8005,
  ARRAY_BUFFER_BINDING: 0x8894,
  ELEMENT_ARRAY_BUFFER_BINDING: 0x8895,
  LINE_WIDTH: 0x0B21,
  ALIASED_POINT_SIZE_RANGE: 0x846D,
  ALIASED_LINE_WIDTH_RANGE: 0x846E,
  CULL_FACE_MODE: 0x0B45,
  FRONT_FACE: 0x0B46,
  DEPTH_RANGE: 0x0B70,
  DEPTH_WRITEMASK: 0x0B72,
  DEPTH_CLEAR_VALUE: 0x0B73,
  DEPTH_FUNC: 0x0B74,
  STENCIL_CLEAR_VALUE: 0x0B91,
  STENCIL_FUNC: 0x0B92,
  STENCIL_FAIL: 0x0B94,
  STENCIL_PASS_DEPTH_FAIL: 0x0B95,
  STENCIL_PASS_DEPTH_PASS: 0x0B96,
  STENCIL_REF: 0x0B97,
  STENCIL_VALUE_MASK: 0x0B93,
  STENCIL_WRITEMASK: 0x0B98,
  STENCIL_BACK_FUNC: 0x8800,
  STENCIL_BACK_FAIL: 0x8801,
  STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802,
  STENCIL_BACK_PASS_DEPTH_PASS: 0x8803,
  STENCIL_BACK_REF: 0x8CA3,
  STENCIL_BACK_VALUE_MASK: 0x8CA4,
  STENCIL_BACK_WRITEMASK: 0x8CA5,
  VIEWPORT: 0x0BA2,
  SCISSOR_BOX: 0x0C10,
  COLOR_CLEAR_VALUE: 0x0C22,
  COLOR_WRITEMASK: 0x0C23,
  UNPACK_ALIGNMENT: 0x0CF5,
  PACK_ALIGNMENT: 0x0D05,
  MAX_TEXTURE_SIZE: 0x0D33,
  MAX_VIEWPORT_DIMS: 0x0D3A,
  SUBPIXEL_BITS: 0x0D50,
  RED_BITS: 0x0D52,
  GREEN_BITS: 0x0D53,
  BLUE_BITS: 0x0D54,
  ALPHA_BITS: 0x0D55,
  DEPTH_BITS: 0x0D56,
  STENCIL_BITS: 0x0D57,
  POLYGON_OFFSET_UNITS: 0x2A00,
  POLYGON_OFFSET_FACTOR: 0x8038,
  TEXTURE_BINDING_2D: 0x8069,
  SAMPLE_BUFFERS: 0x80A8,
  SAMPLES: 0x80A9,
  SAMPLE_COVERAGE_VALUE: 0x80AA,
  SAMPLE_COVERAGE_INVERT: 0x80AB,
  COMPRESSED_TEXTURE_FORMATS: 0x86A3,
  VENDOR: 0x1F00,
  RENDERER: 0x1F01,
  VERSION: 0x1F02,
  IMPLEMENTATION_COLOR_READ_TYPE: 0x8B9A,
  IMPLEMENTATION_COLOR_READ_FORMAT: 0x8B9B,
  BROWSER_DEFAULT_WEBGL: 0x9244,

  // Buffers
  // Constants passed to bufferData(), bufferSubData(), bindBuffer(), or
  // getBufferParameter().

  STATIC_DRAW: 0x88E4,
  STREAM_DRAW: 0x88E0,
  DYNAMIC_DRAW: 0x88E8,
  ARRAY_BUFFER: 0x8892,
  ELEMENT_ARRAY_BUFFER: 0x8893,
  BUFFER_SIZE: 0x8764,
  BUFFER_USAGE: 0x8765,

  // Vertex attributes
  // Constants passed to getVertexAttrib().

  CURRENT_VERTEX_ATTRIB: 0x8626,
  VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622,
  VERTEX_ATTRIB_ARRAY_SIZE: 0x8623,
  VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624,
  VERTEX_ATTRIB_ARRAY_TYPE: 0x8625,
  VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886A,
  VERTEX_ATTRIB_ARRAY_POINTER: 0x8645,
  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889F,

  // Culling
  // Constants passed to cullFace().

  CULL_FACE: 0x0B44,
  FRONT: 0x0404,
  BACK: 0x0405,
  FRONT_AND_BACK: 0x0408,

  // Enabling and disabling
  // Constants passed to enable() or disable().

  BLEND: 0x0BE2,
  DEPTH_TEST: 0x0B71,
  DITHER: 0x0BD0,
  POLYGON_OFFSET_FILL: 0x8037,
  SAMPLE_ALPHA_TO_COVERAGE: 0x809E,
  SAMPLE_COVERAGE: 0x80A0,
  SCISSOR_TEST: 0x0C11,
  STENCIL_TEST: 0x0B90,

  // Errors
  // Constants returned from getError().

  NO_ERROR: 0,
  INVALID_ENUM: 0x0500,
  INVALID_VALUE: 0x0501,
  INVALID_OPERATION: 0x0502,
  OUT_OF_MEMORY: 0x0505,
  CONTEXT_LOST_WEBGL: 0x9242,

  // Front face directions
  // Constants passed to frontFace().

  CW: 0x0900,
  CCW: 0x0901,

  // Hints
  // Constants passed to hint()

  DONT_CARE: 0x1100,
  FASTEST: 0x1101,
  NICEST: 0x1102,
  GENERATE_MIPMAP_HINT: 0x8192,

  // Data types

  BYTE: 0x1400,
  UNSIGNED_BYTE: 0x1401,
  SHORT: 0x1402,
  UNSIGNED_SHORT: 0x1403,
  INT: 0x1404,
  UNSIGNED_INT: 0x1405,
  FLOAT: 0x1406,

  // Pixel formats

  DEPTH_COMPONENT: 0x1902,
  ALPHA: 0x1906,
  RGB: 0x1907,
  RGBA: 0x1908,
  LUMINANCE: 0x1909,
  LUMINANCE_ALPHA: 0x190A,

  // Pixel types

  // UNSIGNED_BYTE: 0x1401,
  UNSIGNED_SHORT_4_4_4_4: 0x8033,
  UNSIGNED_SHORT_5_5_5_1: 0x8034,
  UNSIGNED_SHORT_5_6_5: 0x8363,

  // Shaders
  // Constants passed to createShader() or getShaderParameter()

  FRAGMENT_SHADER: 0x8B30,
  VERTEX_SHADER: 0x8B31,
  COMPILE_STATUS: 0x8B81,
  DELETE_STATUS: 0x8B80,
  LINK_STATUS: 0x8B82,
  VALIDATE_STATUS: 0x8B83,
  ATTACHED_SHADERS: 0x8B85,
  ACTIVE_ATTRIBUTES: 0x8B89,
  ACTIVE_UNIFORMS: 0x8B86,
  MAX_VERTEX_ATTRIBS: 0x8869,
  MAX_VERTEX_UNIFORM_VECTORS: 0x8DFB,
  MAX_VARYING_VECTORS: 0x8DFC,
  MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8B4D,
  MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8B4C,
  MAX_TEXTURE_IMAGE_UNITS: 0x8872,
  MAX_FRAGMENT_UNIFORM_VECTORS: 0x8DFD,
  SHADER_TYPE: 0x8B4F,
  SHADING_LANGUAGE_VERSION: 0x8B8C,
  CURRENT_PROGRAM: 0x8B8D,

  // Depth or stencil tests
  // Constants passed to depthFunc() or stencilFunc().

  NEVER: 0x0200,
  ALWAYS: 0x0207,
  LESS: 0x0201,
  EQUAL: 0x0202,
  LEQUAL: 0x0203,
  GREATER: 0x0204,
  GEQUAL: 0x0206,
  NOTEQUAL: 0x0205,

  // Stencil actions
  // Constants passed to stencilOp().

  KEEP: 0x1E00,
  REPLACE: 0x1E01,
  INCR: 0x1E02,
  DECR: 0x1E03,
  INVERT: 0x150A,
  INCR_WRAP: 0x8507,
  DECR_WRAP: 0x8508,

  // Textures
  // Constants passed to texParameteri(),
  // texParameterf(), bindTexture(), texImage2D(), and others.

  NEAREST: 0x2600,
  LINEAR: 0x2601,
  NEAREST_MIPMAP_NEAREST: 0x2700,
  LINEAR_MIPMAP_NEAREST: 0x2701,
  NEAREST_MIPMAP_LINEAR: 0x2702,
  LINEAR_MIPMAP_LINEAR: 0x2703,
  TEXTURE_MAG_FILTER: 0x2800,
  TEXTURE_MIN_FILTER: 0x2801,
  TEXTURE_WRAP_S: 0x2802,
  TEXTURE_WRAP_T: 0x2803,
  TEXTURE_2D: 0x0DE1,
  TEXTURE: 0x1702,
  TEXTURE_CUBE_MAP: 0x8513,
  TEXTURE_BINDING_CUBE_MAP: 0x8514,
  TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515,
  TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516,
  TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517,
  TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518,
  TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519,
  TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851A,
  MAX_CUBE_MAP_TEXTURE_SIZE: 0x851C,
  // TEXTURE0 - 31 0x84C0 - 0x84DF A texture unit.
  TEXTURE0: 0x84C0,
  ACTIVE_TEXTURE: 0x84E0,
  REPEAT: 0x2901,
  CLAMP_TO_EDGE: 0x812F,
  MIRRORED_REPEAT: 0x8370,

  // Emulation
  TEXTURE_WIDTH: 0x1000,
  TEXTURE_HEIGHT: 0x1001,

  // Uniform types

  FLOAT_VEC2: 0x8B50,
  FLOAT_VEC3: 0x8B51,
  FLOAT_VEC4: 0x8B52,
  INT_VEC2: 0x8B53,
  INT_VEC3: 0x8B54,
  INT_VEC4: 0x8B55,
  BOOL: 0x8B56,
  BOOL_VEC2: 0x8B57,
  BOOL_VEC3: 0x8B58,
  BOOL_VEC4: 0x8B59,
  FLOAT_MAT2: 0x8B5A,
  FLOAT_MAT3: 0x8B5B,
  FLOAT_MAT4: 0x8B5C,
  SAMPLER_2D: 0x8B5E,
  SAMPLER_CUBE: 0x8B60,

  // Shader precision-specified types

  LOW_FLOAT: 0x8DF0,
  MEDIUM_FLOAT: 0x8DF1,
  HIGH_FLOAT: 0x8DF2,
  LOW_INT: 0x8DF3,
  MEDIUM_INT: 0x8DF4,
  HIGH_INT: 0x8DF5,

  // Framebuffers and renderbuffers

  FRAMEBUFFER: 0x8D40,
  RENDERBUFFER: 0x8D41,
  RGBA4: 0x8056,
  RGB5_A1: 0x8057,
  RGB565: 0x8D62,
  DEPTH_COMPONENT16: 0x81A5,
  STENCIL_INDEX: 0x1901,
  STENCIL_INDEX8: 0x8D48,
  DEPTH_STENCIL: 0x84F9,
  RENDERBUFFER_WIDTH: 0x8D42,
  RENDERBUFFER_HEIGHT: 0x8D43,
  RENDERBUFFER_INTERNAL_FORMAT: 0x8D44,
  RENDERBUFFER_RED_SIZE: 0x8D50,
  RENDERBUFFER_GREEN_SIZE: 0x8D51,
  RENDERBUFFER_BLUE_SIZE: 0x8D52,
  RENDERBUFFER_ALPHA_SIZE: 0x8D53,
  RENDERBUFFER_DEPTH_SIZE: 0x8D54,
  RENDERBUFFER_STENCIL_SIZE: 0x8D55,
  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8CD0,
  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8CD1,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8CD2,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8CD3,
  COLOR_ATTACHMENT0: 0x8CE0,
  DEPTH_ATTACHMENT: 0x8D00,
  STENCIL_ATTACHMENT: 0x8D20,
  DEPTH_STENCIL_ATTACHMENT: 0x821A,
  NONE: 0,
  FRAMEBUFFER_COMPLETE: 0x8CD5,
  FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8CD6,
  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8CD7,
  FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8CD9,
  FRAMEBUFFER_UNSUPPORTED: 0x8CDD,
  FRAMEBUFFER_BINDING: 0x8CA6,
  RENDERBUFFER_BINDING: 0x8CA7,
  READ_FRAMEBUFFER: 0x8CA8,
  DRAW_FRAMEBUFFER: 0x8CA9,
  MAX_RENDERBUFFER_SIZE: 0x84E8,
  INVALID_FRAMEBUFFER_OPERATION: 0x0506,

  // Pixel storage modes
  // Constants passed to pixelStorei().

  UNPACK_FLIP_Y_WEBGL: 0x9240,
  UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241,
  UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243,

  // /////////////////////////////////////////////////////
  // Additional constants defined WebGL 2
  // These constants are defined on the WebGL2RenderingContext interface.
  // All WebGL 1 constants are also available in a WebGL 2 context.
  // /////////////////////////////////////////////////////

  // Getting GL parameter information
  // Constants passed to getParameter()
  // to specify what information to return.

  READ_BUFFER: 0x0C02,
  UNPACK_ROW_LENGTH: 0x0CF2,
  UNPACK_SKIP_ROWS: 0x0CF3,
  UNPACK_SKIP_PIXELS: 0x0CF4,
  PACK_ROW_LENGTH: 0x0D02,
  PACK_SKIP_ROWS: 0x0D03,
  PACK_SKIP_PIXELS: 0x0D04,
  TEXTURE_BINDING_3D: 0x806A,
  UNPACK_SKIP_IMAGES: 0x806D,
  UNPACK_IMAGE_HEIGHT: 0x806E,
  MAX_3D_TEXTURE_SIZE: 0x8073,
  MAX_ELEMENTS_VERTICES: 0x80E8,
  MAX_ELEMENTS_INDICES: 0x80E9,
  MAX_TEXTURE_LOD_BIAS: 0x84FD,
  MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8B49,
  MAX_VERTEX_UNIFORM_COMPONENTS: 0x8B4A,
  MAX_ARRAY_TEXTURE_LAYERS: 0x88FF,
  MIN_PROGRAM_TEXEL_OFFSET: 0x8904,
  MAX_PROGRAM_TEXEL_OFFSET: 0x8905,
  MAX_VARYING_COMPONENTS: 0x8B4B,
  FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8B8B,
  RASTERIZER_DISCARD: 0x8C89,
  VERTEX_ARRAY_BINDING: 0x85B5,
  MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122,
  MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125,
  MAX_SERVER_WAIT_TIMEOUT: 0x9111,
  MAX_ELEMENT_INDEX: 0x8D6B,

  // Textures
  // Constants passed to texParameteri(),
  // texParameterf(), bindTexture(), texImage2D(), and others.

  RED: 0x1903,
  RGB8: 0x8051,
  RGBA8: 0x8058,
  RGB10_A2: 0x8059,
  TEXTURE_3D: 0x806F,
  TEXTURE_WRAP_R: 0x8072,
  TEXTURE_MIN_LOD: 0x813A,
  TEXTURE_MAX_LOD: 0x813B,
  TEXTURE_BASE_LEVEL: 0x813C,
  TEXTURE_MAX_LEVEL: 0x813D,
  TEXTURE_COMPARE_MODE: 0x884C,
  TEXTURE_COMPARE_FUNC: 0x884D,
  SRGB: 0x8C40,
  SRGB8: 0x8C41,
  SRGB8_ALPHA8: 0x8C43,
  COMPARE_REF_TO_TEXTURE: 0x884E,
  RGBA32F: 0x8814,
  RGB32F: 0x8815,
  RGBA16F: 0x881A,
  RGB16F: 0x881B,
  TEXTURE_2D_ARRAY: 0x8C1A,
  TEXTURE_BINDING_2D_ARRAY: 0x8C1D,
  R11F_G11F_B10F: 0x8C3A,
  RGB9_E5: 0x8C3D,
  RGBA32UI: 0x8D70,
  RGB32UI: 0x8D71,
  RGBA16UI: 0x8D76,
  RGB16UI: 0x8D77,
  RGBA8UI: 0x8D7C,
  RGB8UI: 0x8D7D,
  RGBA32I: 0x8D82,
  RGB32I: 0x8D83,
  RGBA16I: 0x8D88,
  RGB16I: 0x8D89,
  RGBA8I: 0x8D8E,
  RGB8I: 0x8D8F,
  RED_INTEGER: 0x8D94,
  RGB_INTEGER: 0x8D98,
  RGBA_INTEGER: 0x8D99,
  R8: 0x8229,
  RG8: 0x822B,
  R16F: 0x822D,
  R32F: 0x822E,
  RG16F: 0x822F,
  RG32F: 0x8230,
  R8I: 0x8231,
  R8UI: 0x8232,
  R16I: 0x8233,
  R16UI: 0x8234,
  R32I: 0x8235,
  R32UI: 0x8236,
  RG8I: 0x8237,
  RG8UI: 0x8238,
  RG16I: 0x8239,
  RG16UI: 0x823A,
  RG32I: 0x823B,
  RG32UI: 0x823C,
  R8_SNORM: 0x8F94,
  RG8_SNORM: 0x8F95,
  RGB8_SNORM: 0x8F96,
  RGBA8_SNORM: 0x8F97,
  RGB10_A2UI: 0x906F,

  /* covered by extension
  COMPRESSED_R11_EAC : 0x9270,
  COMPRESSED_SIGNED_R11_EAC: 0x9271,
  COMPRESSED_RG11_EAC: 0x9272,
  COMPRESSED_SIGNED_RG11_EAC : 0x9273,
  COMPRESSED_RGB8_ETC2 : 0x9274,
  COMPRESSED_SRGB8_ETC2: 0x9275,
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : 0x9276,
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC : 0x9277,
  COMPRESSED_RGBA8_ETC2_EAC: 0x9278,
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 0x9279,
  */
  TEXTURE_IMMUTABLE_FORMAT: 0x912F,
  TEXTURE_IMMUTABLE_LEVELS: 0x82DF,

  // Pixel types

  UNSIGNED_INT_2_10_10_10_REV: 0x8368,
  UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,
  UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,
  FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,
  UNSIGNED_INT_24_8: 0x84FA,
  HALF_FLOAT: 0x140B,
  RG: 0x8227,
  RG_INTEGER: 0x8228,
  INT_2_10_10_10_REV: 0x8D9F,

  // Queries

  CURRENT_QUERY: 0x8865,
  QUERY_RESULT: 0x8866,
  QUERY_RESULT_AVAILABLE: 0x8867,
  ANY_SAMPLES_PASSED: 0x8C2F,
  ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8D6A,

  // Draw buffers

  MAX_DRAW_BUFFERS: 0x8824,
  DRAW_BUFFER0: 0x8825,
  DRAW_BUFFER1: 0x8826,
  DRAW_BUFFER2: 0x8827,
  DRAW_BUFFER3: 0x8828,
  DRAW_BUFFER4: 0x8829,
  DRAW_BUFFER5: 0x882A,
  DRAW_BUFFER6: 0x882B,
  DRAW_BUFFER7: 0x882C,
  DRAW_BUFFER8: 0x882D,
  DRAW_BUFFER9: 0x882E,
  DRAW_BUFFER10: 0x882F,
  DRAW_BUFFER11: 0x8830,
  DRAW_BUFFER12: 0x8831,
  DRAW_BUFFER13: 0x8832,
  DRAW_BUFFER14: 0x8833,
  DRAW_BUFFER15: 0x8834,
  MAX_COLOR_ATTACHMENTS: 0x8CDF,
  COLOR_ATTACHMENT1: 0x8CE1,
  COLOR_ATTACHMENT2: 0x8CE2,
  COLOR_ATTACHMENT3: 0x8CE3,
  COLOR_ATTACHMENT4: 0x8CE4,
  COLOR_ATTACHMENT5: 0x8CE5,
  COLOR_ATTACHMENT6: 0x8CE6,
  COLOR_ATTACHMENT7: 0x8CE7,
  COLOR_ATTACHMENT8: 0x8CE8,
  COLOR_ATTACHMENT9: 0x8CE9,
  COLOR_ATTACHMENT10: 0x8CEA,
  COLOR_ATTACHMENT11: 0x8CEB,
  COLOR_ATTACHMENT12: 0x8CEC,
  COLOR_ATTACHMENT13: 0x8CED,
  COLOR_ATTACHMENT14: 0x8CEE,
  COLOR_ATTACHMENT15: 0x8CEF,

  // Samplers

  SAMPLER_3D: 0x8B5F,
  SAMPLER_2D_SHADOW: 0x8B62,
  SAMPLER_2D_ARRAY: 0x8DC1,
  SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,
  SAMPLER_CUBE_SHADOW: 0x8DC5,
  INT_SAMPLER_2D: 0x8DCA,
  INT_SAMPLER_3D: 0x8DCB,
  INT_SAMPLER_CUBE: 0x8DCC,
  INT_SAMPLER_2D_ARRAY: 0x8DCF,
  UNSIGNED_INT_SAMPLER_2D: 0x8DD2,
  UNSIGNED_INT_SAMPLER_3D: 0x8DD3,
  UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,
  UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,
  MAX_SAMPLES: 0x8D57,
  SAMPLER_BINDING: 0x8919,

  // Buffers

  PIXEL_PACK_BUFFER: 0x88EB,
  PIXEL_UNPACK_BUFFER: 0x88EC,
  PIXEL_PACK_BUFFER_BINDING: 0x88ED,
  PIXEL_UNPACK_BUFFER_BINDING: 0x88EF,
  COPY_READ_BUFFER: 0x8F36,
  COPY_WRITE_BUFFER: 0x8F37,
  COPY_READ_BUFFER_BINDING: 0x8F36,
  COPY_WRITE_BUFFER_BINDING: 0x8F37,

  // Data types

  FLOAT_MAT2x3: 0x8B65,
  FLOAT_MAT2x4: 0x8B66,
  FLOAT_MAT3x2: 0x8B67,
  FLOAT_MAT3x4: 0x8B68,
  FLOAT_MAT4x2: 0x8B69,
  FLOAT_MAT4x3: 0x8B6A,
  UNSIGNED_INT_VEC2: 0x8DC6,
  UNSIGNED_INT_VEC3: 0x8DC7,
  UNSIGNED_INT_VEC4: 0x8DC8,
  UNSIGNED_NORMALIZED: 0x8C17,
  SIGNED_NORMALIZED: 0x8F9C,

  // Vertex attributes

  VERTEX_ATTRIB_ARRAY_INTEGER: 0x88FD,
  VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88FE,

  // Transform feedback

  TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8C7F,
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8C80,
  TRANSFORM_FEEDBACK_VARYINGS: 0x8C83,
  TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84,
  TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8C85,
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88,
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A,
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B,
  INTERLEAVED_ATTRIBS: 0x8C8C,
  SEPARATE_ATTRIBS: 0x8C8D,
  TRANSFORM_FEEDBACK_BUFFER: 0x8C8E,
  TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8C8F,
  TRANSFORM_FEEDBACK: 0x8E22,
  TRANSFORM_FEEDBACK_PAUSED: 0x8E23,
  TRANSFORM_FEEDBACK_ACTIVE: 0x8E24,
  TRANSFORM_FEEDBACK_BINDING: 0x8E25,

  // Framebuffers and renderbuffers

  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210,
  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211,
  FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212,
  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213,
  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214,
  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215,
  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216,
  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217,
  FRAMEBUFFER_DEFAULT: 0x8218,
  // DEPTH_STENCIL_ATTACHMENT : 0x821A,
  // DEPTH_STENCIL: 0x84F9,
  DEPTH24_STENCIL8: 0x88F0,
  DRAW_FRAMEBUFFER_BINDING: 0x8CA6,
  READ_FRAMEBUFFER_BINDING: 0x8CAA,
  RENDERBUFFER_SAMPLES: 0x8CAB,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8CD4,
  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8D56,

  // Uniforms

  UNIFORM_BUFFER: 0x8A11,
  UNIFORM_BUFFER_BINDING: 0x8A28,
  UNIFORM_BUFFER_START: 0x8A29,
  UNIFORM_BUFFER_SIZE: 0x8A2A,
  MAX_VERTEX_UNIFORM_BLOCKS: 0x8A2B,
  MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8A2D,
  MAX_COMBINED_UNIFORM_BLOCKS: 0x8A2E,
  MAX_UNIFORM_BUFFER_BINDINGS: 0x8A2F,
  MAX_UNIFORM_BLOCK_SIZE: 0x8A30,
  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8A31,
  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8A33,
  UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8A34,
  ACTIVE_UNIFORM_BLOCKS: 0x8A36,
  UNIFORM_TYPE: 0x8A37,
  UNIFORM_SIZE: 0x8A38,
  UNIFORM_BLOCK_INDEX: 0x8A3A,
  UNIFORM_OFFSET: 0x8A3B,
  UNIFORM_ARRAY_STRIDE: 0x8A3C,
  UNIFORM_MATRIX_STRIDE: 0x8A3D,
  UNIFORM_IS_ROW_MAJOR: 0x8A3E,
  UNIFORM_BLOCK_BINDING: 0x8A3F,
  UNIFORM_BLOCK_DATA_SIZE: 0x8A40,
  UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8A42,
  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8A43,
  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8A44,
  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8A46,

  // Sync objects

  OBJECT_TYPE: 0x9112,
  SYNC_CONDITION: 0x9113,
  SYNC_STATUS: 0x9114,
  SYNC_FLAGS: 0x9115,
  SYNC_FENCE: 0x9116,
  SYNC_GPU_COMMANDS_COMPLETE: 0x9117,
  UNSIGNALED: 0x9118,
  SIGNALED: 0x9119,
  ALREADY_SIGNALED: 0x911A,
  TIMEOUT_EXPIRED: 0x911B,
  CONDITION_SATISFIED: 0x911C,
  WAIT_FAILED: 0x911D,
  SYNC_FLUSH_COMMANDS_BIT: 0x00000001,

  // Miscellaneous constants

  COLOR: 0x1800,
  DEPTH: 0x1801,
  STENCIL: 0x1802,
  MIN: 0x8007,
  MAX: 0x8008,
  DEPTH_COMPONENT24: 0x81A6,
  STREAM_READ: 0x88E1,
  STREAM_COPY: 0x88E2,
  STATIC_READ: 0x88E5,
  STATIC_COPY: 0x88E6,
  DYNAMIC_READ: 0x88E9,
  DYNAMIC_COPY: 0x88EA,
  DEPTH_COMPONENT32F: 0x8CAC,
  DEPTH32F_STENCIL8: 0x8CAD,
  INVALID_INDEX: 0xFFFFFFFF,
  TIMEOUT_IGNORED: -1,
  MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247,

  // Constants defined in WebGL extensions

  // ANGLE_instanced_arrays

  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88FE,

  // WEBGL_debug_renderer_info

  UNMASKED_VENDOR_WEBGL: 0x9245,
  UNMASKED_RENDERER_WEBGL: 0x9246,

  // EXT_texture_filter_anisotropic

  MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84FF,
  TEXTURE_MAX_ANISOTROPY_EXT: 0x84FE,

  // WEBGL_compressed_texture_s3tc

  COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0,
  COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1,
  COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2,
  COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3,

  // WEBGL_compressed_texture_es3

  COMPRESSED_R11_EAC: 0x9270,
  COMPRESSED_SIGNED_R11_EAC: 0x9271,
  COMPRESSED_RG11_EAC: 0x9272,
  COMPRESSED_SIGNED_RG11_EAC: 0x9273,
  COMPRESSED_RGB8_ETC2: 0x9274,
  COMPRESSED_RGBA8_ETC2_EAC: 0x9275,
  COMPRESSED_SRGB8_ETC2: 0x9276,
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9277,
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9278,
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9279,

  // WEBGL_compressed_texture_pvrtc

  COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8C00,
  COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8C02,
  COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8C01,
  COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8C03,

  // WEBGL_compressed_texture_etc1

  COMPRESSED_RGB_ETC1_WEBGL: 0x8D64,

  // WEBGL_compressed_texture_atc

  COMPRESSED_RGB_ATC_WEBGL: 0x8C92,
  COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: 0x8C92,
  COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: 0x87EE,

  // WEBGL_depth_texture

  UNSIGNED_INT_24_8_WEBGL: 0x84FA,

  // OES_texture_half_float

  HALF_FLOAT_OES: 0x8D61,

  // WEBGL_color_buffer_float

  RGBA32F_EXT: 0x8814,
  RGB32F_EXT: 0x8815,
  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211,
  UNSIGNED_NORMALIZED_EXT: 0x8C17,

  // EXT_blend_minmax

  MIN_EXT: 0x8007,
  MAX_EXT: 0x8008,

  // EXT_sRGB

  SRGB_EXT: 0x8C40,
  SRGB_ALPHA_EXT: 0x8C42,
  SRGB8_ALPHA8_EXT: 0x8C43,
  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 0x8210,

  // OES_standard_derivatives

  FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8B8B,

  // WEBGL_draw_buffers

  COLOR_ATTACHMENT0_WEBGL: 0x8CE0,
  COLOR_ATTACHMENT1_WEBGL: 0x8CE1,
  COLOR_ATTACHMENT2_WEBGL: 0x8CE2,
  COLOR_ATTACHMENT3_WEBGL: 0x8CE3,
  COLOR_ATTACHMENT4_WEBGL: 0x8CE4,
  COLOR_ATTACHMENT5_WEBGL: 0x8CE5,
  COLOR_ATTACHMENT6_WEBGL: 0x8CE6,
  COLOR_ATTACHMENT7_WEBGL: 0x8CE7,
  COLOR_ATTACHMENT8_WEBGL: 0x8CE8,
  COLOR_ATTACHMENT9_WEBGL: 0x8CE9,
  COLOR_ATTACHMENT10_WEBGL: 0x8CEA,
  COLOR_ATTACHMENT11_WEBGL: 0x8CEB,
  COLOR_ATTACHMENT12_WEBGL: 0x8CEC,
  COLOR_ATTACHMENT13_WEBGL: 0x8CED,
  COLOR_ATTACHMENT14_WEBGL: 0x8CEE,
  COLOR_ATTACHMENT15_WEBGL: 0x8CEF,
  DRAW_BUFFER0_WEBGL: 0x8825,
  DRAW_BUFFER1_WEBGL: 0x8826,
  DRAW_BUFFER2_WEBGL: 0x8827,
  DRAW_BUFFER3_WEBGL: 0x8828,
  DRAW_BUFFER4_WEBGL: 0x8829,
  DRAW_BUFFER5_WEBGL: 0x882A,
  DRAW_BUFFER6_WEBGL: 0x882B,
  DRAW_BUFFER7_WEBGL: 0x882C,
  DRAW_BUFFER8_WEBGL: 0x882D,
  DRAW_BUFFER9_WEBGL: 0x882E,
  DRAW_BUFFER10_WEBGL: 0x882F,
  DRAW_BUFFER11_WEBGL: 0x8830,
  DRAW_BUFFER12_WEBGL: 0x8831,
  DRAW_BUFFER13_WEBGL: 0x8832,
  DRAW_BUFFER14_WEBGL: 0x8833,
  DRAW_BUFFER15_WEBGL: 0x8834,
  MAX_COLOR_ATTACHMENTS_WEBGL: 0x8CDF,
  MAX_DRAW_BUFFERS_WEBGL: 0x8824,

  // OES_vertex_array_object

  VERTEX_ARRAY_BINDING_OES: 0x85B5,

  // EXT_disjoint_timer_query

  QUERY_COUNTER_BITS_EXT: 0x8864,
  CURRENT_QUERY_EXT: 0x8865,
  QUERY_RESULT_EXT: 0x8866,
  QUERY_RESULT_AVAILABLE_EXT: 0x8867,
  TIME_ELAPSED_EXT: 0x88BF,
  TIMESTAMP_EXT: 0x8E28,
  GPU_DISJOINT_EXT: 0x8FBB // A Boolean indicating whether or not the GPU performed any disjoint operation.
});
//# sourceMappingURL=constants.js.map

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__animation_loop__ = __webpack_require__(59);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationLoop", function() { return __WEBPACK_IMPORTED_MODULE_0__animation_loop__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "requestAnimationFrame", function() { return __WEBPACK_IMPORTED_MODULE_0__animation_loop__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "cancelAnimationFrame", function() { return __WEBPACK_IMPORTED_MODULE_0__animation_loop__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(20);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Model", function() { return __WEBPACK_IMPORTED_MODULE_1__model__["a"]; });


//# sourceMappingURL=index.js.map

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__create_canvas__ = __webpack_require__(204);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_0__create_canvas__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__create_canvas__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__create_canvas__["b"]; });
/* unused harmony reexport resizeCanvas */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_0__create_canvas__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__create_context__ = __webpack_require__(205);
/* unused harmony reexport trackContextCreation */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__create_context__["a"]; });
/* unused harmony reexport resizeViewport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__polyfill_context__ = __webpack_require__(79);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_2__polyfill_context__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__track_context_state__ = __webpack_require__(39);
/* unused harmony reexport trackContextState */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__format_glsl_error__ = __webpack_require__(206);
/* unused harmony reexport formatGLSLCompilerError */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_4__format_glsl_error__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__get_shader_name__ = __webpack_require__(78);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_5__get_shader_name__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__constants__ = __webpack_require__(9);
/* unused harmony reexport GL */










// TODO - avoid uncondsitionally importing GL as it adds a lot to bundle size?

//# sourceMappingURL=index.js.map

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "GL", function() { return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__api_types__ = __webpack_require__(81);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Image", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLRenderingContext", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLProgram", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLShader", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["g"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLBuffer", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLFramebuffer", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["h"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLRenderbuffer", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["i"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLTexture", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["j"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLUniformLocation", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["k"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLActiveInfo", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["l"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLShaderPrecisionFormat", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["m"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGL2RenderingContext", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "webGLTypesAvailable", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context__ = __webpack_require__(1);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isWebGL", function() { return __WEBPACK_IMPORTED_MODULE_2__context__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isWebGL2", function() { return __WEBPACK_IMPORTED_MODULE_2__context__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "createGLContext", function() { return __WEBPACK_IMPORTED_MODULE_2__context__["g"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "deleteGLContext", function() { return __WEBPACK_IMPORTED_MODULE_2__context__["h"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context_state__ = __webpack_require__(15);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "withParameters", function() { return __WEBPACK_IMPORTED_MODULE_3__context_state__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "resetParameters", function() { return __WEBPACK_IMPORTED_MODULE_3__context_state__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__context_limits__ = __webpack_require__(40);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "getContextInfo", function() { return __WEBPACK_IMPORTED_MODULE_4__context_limits__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__buffer__ = __webpack_require__(18);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Buffer", function() { return __WEBPACK_IMPORTED_MODULE_5__buffer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shader__ = __webpack_require__(27);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Shader", function() { return __WEBPACK_IMPORTED_MODULE_6__shader__["default"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "VertexShader", function() { return __WEBPACK_IMPORTED_MODULE_6__shader__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "FragmentShader", function() { return __WEBPACK_IMPORTED_MODULE_6__shader__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__program__ = __webpack_require__(42);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Program", function() { return __WEBPACK_IMPORTED_MODULE_7__program__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__framebuffer__ = __webpack_require__(25);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Framebuffer", function() { return __WEBPACK_IMPORTED_MODULE_8__framebuffer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__renderbuffer__ = __webpack_require__(26);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Renderbuffer", function() { return __WEBPACK_IMPORTED_MODULE_9__renderbuffer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__texture_2d__ = __webpack_require__(43);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Texture2D", function() { return __WEBPACK_IMPORTED_MODULE_10__texture_2d__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__texture_cube__ = __webpack_require__(88);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TextureCube", function() { return __WEBPACK_IMPORTED_MODULE_11__texture_cube__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__draw__ = __webpack_require__(83);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "draw", function() { return __WEBPACK_IMPORTED_MODULE_12__draw__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__clear__ = __webpack_require__(23);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "clear", function() { return __WEBPACK_IMPORTED_MODULE_13__clear__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__functions__ = __webpack_require__(85);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "readPixels", function() { return __WEBPACK_IMPORTED_MODULE_14__functions__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "readPixelsFromBuffer", function() { return __WEBPACK_IMPORTED_MODULE_14__functions__["readPixelsFromBuffer"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__uniforms__ = __webpack_require__(44);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "parseUniformName", function() { return __WEBPACK_IMPORTED_MODULE_15__uniforms__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "getUniformSetter", function() { return __WEBPACK_IMPORTED_MODULE_15__uniforms__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkUniformValues", function() { return __WEBPACK_IMPORTED_MODULE_15__uniforms__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__vertex_array__ = __webpack_require__(45);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "VertexArray", function() { return __WEBPACK_IMPORTED_MODULE_16__vertex_array__["a"]; });
// luma.gl Base WebGL wrapper library
// Provides simple class/function wrappers around the low level webgl objects
// These classes are intentionally close to the WebGL API
// but make it easier to use.
// Higher level abstractions can be built on these classes




// Exports WebGL API constants and types, plus some basic type checks








// WebGL1 objects








// Functions








// WebGL2

//# sourceMappingURL=index.js.map

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export TEXTURE_FORMATS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context_state__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__buffer__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TEXTURE_FORMATS;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-inline-comments, max-len */










// Supported min filters for NPOT texture.
var NPOT_MIN_FILTERS = [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINEAR, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].NEAREST];

// const S3TC = 'WEBGL_compressed_texture_s3tc';
// const PVRTC = 'WEBGL_compressed_texture_pvrtc';
// const ES3 = 'WEBGL_compressed_texture_es3';
// const ETC1 = 'WEBGL_compressed_texture_etc1';
// const SRGB = 'EXT_sRGB';
// const DEPTH = 'WEBGL_depth_texture';

// Legal combinations for internalFormat, format and type
var TEXTURE_FORMATS = (_TEXTURE_FORMATS = {}, _defineProperty(_TEXTURE_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB, { dataFormat: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB, types: [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_SHORT_5_6_5] }), _defineProperty(_TEXTURE_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA, { dataFormat: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA, types: [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_SHORT_4_4_4_4, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_SHORT_5_5_5_1] }), _defineProperty(_TEXTURE_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].ALPHA, { dataFormat: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].ALPHA, types: [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE] }), _defineProperty(_TEXTURE_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LUMINANCE, { dataFormat: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LUMINANCE, types: [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE] }), _defineProperty(_TEXTURE_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LUMINANCE_ALPHA, { dataFormat: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LUMINANCE_ALPHA, types: [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE]

  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},
  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},

  // Sized texture format - more performance
  // R
  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},
  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},
  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
  // // RG
  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},
  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},
  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
  // // RGB
  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},
  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},
  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},
  // [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},
  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
  // // RGBA
  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},
  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},
  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true},
  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}

  // Compressed formats

  // WEBGL_compressed_texture_s3tc

  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},
  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},
  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},
  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},

  // WEBGL_compressed_texture_es3

  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED
  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED
  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG
  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG
  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB
  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG
  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB
  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA
  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA
  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA
  /* WebGL2 guaranteed availability compressed formats?
  COMPRESSED_R11_EAC RED
  COMPRESSED_SIGNED_R11_EAC RED
  COMPRESSED_RG11_EAC RG
  COMPRESSED_SIGNED_RG11_EAC RG
  COMPRESSED_RGB8_ETC2 RGB
  COMPRESSED_SRGB8_ETC2 RGB
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA
  COMPRESSED_RGBA8_ETC2_EAC RGBA
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
  */

  // WEBGL_compressed_texture_pvrtc

  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},
  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},
  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},
  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},

  // WEBGL_compressed_texture_etc1

  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},

  // WEBGL_compressed_texture_atc

  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},
  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},
  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}
}), _TEXTURE_FORMATS);

function isFormatSupported(gl, format) {
  __WEBPACK_IMPORTED_MODULE_7_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["c" /* isWebGL */])(gl), __WEBPACK_IMPORTED_MODULE_2__context__["d" /* ERR_WEBGL */]);
  var info = TEXTURE_FORMATS[format];
  if (!info) {
    return false;
  }
  if (info.gl1 === undefined && info.gl2 === undefined) {
    // No info - always supported
    return true;
  }
  var value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["b" /* isWebGL2 */])(gl) ? info.gl2 || info.gl1 : info.gl1;
  return typeof value === 'string' ? gl.getExtension(value) : value;
}

function isLinearFilteringSupported(gl, format) {
  var info = TEXTURE_FORMATS[format];
  switch (info && info.types[0]) {
    // Both WebGL1 and WebGL2?
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].FLOAT:
      return gl.getExtension('OES_texture_float_linear');
    // Not in WebGL2?
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].HALF_FLOAT:
      return gl.getExtension('OES_texture_half_float_linear');
    default:
      return true;
  }
}

var Texture = /*#__PURE__*/function (_Resource) {
  _inherits(Texture, _Resource);

  _createClass(Texture, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          format = _ref.format,
          linearFiltering = _ref.linearFiltering;

      __WEBPACK_IMPORTED_MODULE_7_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["c" /* isWebGL */])(gl), __WEBPACK_IMPORTED_MODULE_2__context__["d" /* ERR_WEBGL */]);
      var supported = true;
      if (format) {
        supported = supported && isFormatSupported(gl, format);
        supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));
      }
      return supported;
    }

    // target cannot be modified by bind:
    // textures are special because when you first bind them to a target,
    // they get special information. When you first bind a texture as a
    // GL_TEXTURE_2D, you are actually setting special state in the texture.
    // You are saying that this texture is a 2D texture.
    // And it will always be a 2D texture; this state cannot be changed ever.
    // If you have a texture that was first bound as a GL_TEXTURE_2D,
    // you must always bind it as a GL_TEXTURE_2D;
    // attempting to bind it as GL_TEXTURE_1D will give rise to an error
    // (while run-time).

  }]);

  function Texture(gl, opts) {
    _classCallCheck(this, Texture);

    var _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils__["uid"])('texture') : _opts$id,
        handle = opts.handle,
        target = opts.target;

    var _this = _possibleConstructorReturn(this, (Texture.__proto__ || Object.getPrototypeOf(Texture)).call(this, gl, { id: id, handle: handle }));

    _this.target = target;
    _this.hasFloatTexture = gl.getExtension('OES_texture_float');
    _this.textureUnit = undefined;
    return _this;
  }

  _createClass(Texture, [{
    key: 'toString',
    value: function toString() {
      return 'Texture(' + this.id + ',' + this.width + 'x' + this.height + ')';
    }

    /* eslint-disable max-len, max-statements */

  }, {
    key: 'initialize',
    value: function initialize() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = opts.data;

      var _opts$pixels = opts.pixels,
          pixels = _opts$pixels === undefined ? null : _opts$pixels,
          _opts$format = opts.format,
          format = _opts$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA : _opts$format,
          _opts$type = opts.type,
          type = _opts$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE : _opts$type,
          _opts$border = opts.border,
          border = _opts$border === undefined ? 0 : _opts$border,
          _opts$recreate = opts.recreate,
          recreate = _opts$recreate === undefined ? false : _opts$recreate,
          _opts$parameters = opts.parameters,
          parameters = _opts$parameters === undefined ? {} : _opts$parameters,
          _opts$pixelStore = opts.pixelStore,
          pixelStore = _opts$pixelStore === undefined ? {} : _opts$pixelStore,
          _opts$unpackFlipY = opts.unpackFlipY,
          unpackFlipY = _opts$unpackFlipY === undefined ? true : _opts$unpackFlipY,
          generateMipmaps = opts.generateMipmaps;
      var _opts$mipmaps = opts.mipmaps,
          mipmaps = _opts$mipmaps === undefined ? true : _opts$mipmaps;


      if (generateMipmaps !== undefined) {
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('generateMipmaps', 'mipmaps');
        mipmaps = generateMipmaps;
      }

      // pixels variable is  for API compatibility purpose
      if (!data) {
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('data', 'pixels');
        data = pixels;
      }

      var width = opts.width,
          height = opts.height,
          dataFormat = opts.dataFormat;

      // Deduce width and height

      // Store opts for accessors
      var _deduceParameters2 = this._deduceParameters({
        format: format, type: type, dataFormat: dataFormat, compressed: false, data: data, width: width, height: height
      });

      width = _deduceParameters2.width;
      height = _deduceParameters2.height;
      dataFormat = _deduceParameters2.dataFormat;
      this.width = width;
      this.height = height;
      this.format = format;
      this.type = type;
      this.dataFormat = dataFormat;
      this.border = border;
      this.mipmaps = mipmaps;

      // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;
      // TODO - compare v4 and v3
      var DEFAULT_TEXTURE_SETTINGS = _defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNPACK_FLIP_Y_WEBGL, unpackFlipY);
      var glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);

      if (this._isNPOT()) {

        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, disabling mipmaping');
        mipmaps = false;

        this._updateForNPOT(parameters);
      }

      this.setImageData({ data: data, width: width, height: height, format: format, type: type, dataFormat: dataFormat, border: border, mipmaps: mipmaps, parameters: glSettings });

      if (mipmaps) {
        this.generateMipmap();
      }

      // Append any v3 style parameters
      var updatedParameters = this._applyV3Options(parameters, opts);

      // Set texture sampler parameters
      this.setParameters(updatedParameters);

      // TODO - Store data to enable auto recreate on context loss
      if (recreate) {
        this.data = data;
      }
    }

    // If size has changed, reinitializes with current format
    // note clears image and mipmaps

  }, {
    key: 'resize',
    value: function resize(_ref2) {
      var width = _ref2.width,
          height = _ref2.height;

      if (width !== this.width || height !== this.height) {
        return this.initialize({
          width: width,
          height: height,
          format: this.format,
          type: this.type,
          dataFormat: this.dataFormat,
          border: this.border,
          mipmaps: false
        });
      }
      return this;
    }

    // Call to regenerate mipmaps after modifying texture(s)

  }, {
    key: 'generateMipmap',
    value: function generateMipmap() {
      var _this2 = this;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.gl.bindTexture(this.target, this.handle);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context_state__["a" /* withParameters */])(this.gl, params, function () {
        _this2.gl.generateMipmap(_this2.target);
      });
      this.gl.bindTexture(this.target, null);
      return this;
    }

    /*
     * Allocates storage
     * @param {*} pixels -
     *  null - create empty texture of specified format
     *  Typed array - init from image data in typed array
     *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer
     *  HTMLImageElement|Image - Inits with content of image. Auto width/height
     *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height
     *  HTMLVideoElement - Creates video texture. Auto width/height
     *
     * @param {GLint} width -
     * @param {GLint} height -
     * @param {GLint} mipMapLevel -
     * @param {GLenum} format - format of image data.
     * @param {GLenum} type
     *  - format of array (autodetect from type) or
     *  - (WEBGL2) format of buffer
     * @param {Number} offset - (WEBGL2) offset from start of buffer
     * @param {GLint} border - must be 0.
     * @parameters - temporary settings to be applied, can be used to supply pixel store settings.
     */
    /* eslint-disable max-len, max-statements, complexity */

  }, {
    key: 'setImageData',
    value: function setImageData(_ref3) {
      var _this3 = this;

      var _ref3$target = _ref3.target,
          target = _ref3$target === undefined ? this.target : _ref3$target,
          _ref3$pixels = _ref3.pixels,
          pixels = _ref3$pixels === undefined ? null : _ref3$pixels,
          _ref3$data = _ref3.data,
          data = _ref3$data === undefined ? null : _ref3$data,
          width = _ref3.width,
          height = _ref3.height,
          _ref3$level = _ref3.level,
          level = _ref3$level === undefined ? 0 : _ref3$level,
          _ref3$format = _ref3.format,
          format = _ref3$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA : _ref3$format,
          type = _ref3.type,
          dataFormat = _ref3.dataFormat,
          _ref3$offset = _ref3.offset,
          offset = _ref3$offset === undefined ? 0 : _ref3$offset,
          _ref3$border = _ref3.border,
          border = _ref3$border === undefined ? 0 : _ref3$border,
          _ref3$compressed = _ref3.compressed,
          compressed = _ref3$compressed === undefined ? false : _ref3$compressed,
          _ref3$parameters = _ref3.parameters,
          parameters = _ref3$parameters === undefined ? {} : _ref3$parameters;

      // pixels variable is  for API compatibility purpose
      if (!data) {
        data = pixels;
      }

      var _deduceParameters3 = this._deduceParameters({
        format: format, type: type, dataFormat: dataFormat, compressed: compressed, data: data, width: width, height: height });

      type = _deduceParameters3.type;
      dataFormat = _deduceParameters3.dataFormat;
      compressed = _deduceParameters3.compressed;
      width = _deduceParameters3.width;
      height = _deduceParameters3.height;
      var gl = this.gl;

      gl.bindTexture(this.target, this.handle);

      var dataType = null;

      var _getDataType2 = this._getDataType({ data: data, compressed: compressed });

      data = _getDataType2.data;
      dataType = _getDataType2.dataType;


      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context_state__["a" /* withParameters */])(this.gl, parameters, function () {
        switch (dataType) {
          case 'null':
            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);
            break;
          case 'typed-array':
            // Looks like this assert is not necessary, as offset is ignored under WebGL1
            // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');
            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);
            break;
          case 'buffer':
            // WebGL2 enables creating textures directly from a WebGL buffer
            __WEBPACK_IMPORTED_MODULE_7_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["b" /* isWebGL2 */])(gl), __WEBPACK_IMPORTED_MODULE_2__context__["e" /* ERR_WEBGL2 */]);
            gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].PIXEL_UNPACK_BUFFER, data.handle || data);
            gl.texImage2D(target, level, format, width, height, border, format, type, offset);
            break;
          case 'browser-object':
            gl.texImage2D(target, level, format, format, type, data);
            break;
          case 'compressed':
            gl.compressedTexImage2D(_this3.target, level, format, width, height, border, data);
            break;
          default:
            __WEBPACK_IMPORTED_MODULE_7_assert___default()(false, 'Unknown image data type');
        }
      });
    }
    /* eslint-enable max-len, max-statements, complexity */

    /**
     * Redefines an area of an existing texture
     * Note: does not allocate storage
     */
    /*
     * Redefines an area of an existing texture
     * @param {*} pixels, data -
     *  null - create empty texture of specified format
     *  Typed array - init from image data in typed array
     *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer
     *  HTMLImageElement|Image - Inits with content of image. Auto width/height
     *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height
     *  HTMLVideoElement - Creates video texture. Auto width/height
     *
     * @param {GLint} x - xOffset from where texture to be updated
     * @param {GLint} y - yOffset from where texture to be updated
     * @param {GLint} width - width of the sub image to be updated
     * @param {GLint} height - height of the sub image to be updated
     * @param {GLint} level - mip level to be updated
     * @param {GLenum} format - internal format of image data.
     * @param {GLenum} type
     *  - format of array (autodetect from type) or
     *  - (WEBGL2) format of buffer or ArrayBufferView
     * @param {GLenum} dataFormat - format of image data.
     * @param {Number} offset - (WEBGL2) offset from start of buffer
     * @param {GLint} border - must be 0.
     * @parameters - temporary settings to be applied, can be used to supply pixel store settings.
     */

  }, {
    key: 'setSubImageData',
    value: function setSubImageData(_ref4) {
      var _this4 = this;

      var _ref4$target = _ref4.target,
          target = _ref4$target === undefined ? this.target : _ref4$target,
          _ref4$pixels = _ref4.pixels,
          pixels = _ref4$pixels === undefined ? null : _ref4$pixels,
          _ref4$data = _ref4.data,
          data = _ref4$data === undefined ? null : _ref4$data,
          _ref4$x = _ref4.x,
          x = _ref4$x === undefined ? 0 : _ref4$x,
          _ref4$y = _ref4.y,
          y = _ref4$y === undefined ? 0 : _ref4$y,
          width = _ref4.width,
          height = _ref4.height,
          _ref4$level = _ref4.level,
          level = _ref4$level === undefined ? 0 : _ref4$level,
          _ref4$format = _ref4.format,
          format = _ref4$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA : _ref4$format,
          type = _ref4.type,
          dataFormat = _ref4.dataFormat,
          _ref4$compressed = _ref4.compressed,
          compressed = _ref4$compressed === undefined ? false : _ref4$compressed,
          _ref4$offset = _ref4.offset,
          offset = _ref4$offset === undefined ? 0 : _ref4$offset,
          _ref4$border = _ref4.border,
          border = _ref4$border === undefined ? 0 : _ref4$border,
          _ref4$parameters = _ref4.parameters,
          parameters = _ref4$parameters === undefined ? {} : _ref4$parameters;

      // pixels variable is  for API compatibility purpose
      var _deduceParameters4 = this._deduceParameters({
        format: format, type: type, dataFormat: dataFormat, compressed: compressed, data: data, width: width, height: height });

      type = _deduceParameters4.type;
      dataFormat = _deduceParameters4.dataFormat;
      compressed = _deduceParameters4.compressed;
      width = _deduceParameters4.width;
      height = _deduceParameters4.height;
      if (!data) {
        data = pixels;
      }

      // Support ndarrays
      if (data && data.data) {
        var ndarray = data;
        data = ndarray.data;
        width = ndarray.shape[0];
        height = ndarray.shape[1];
      }

      // Support buffers
      if (data instanceof __WEBPACK_IMPORTED_MODULE_5__buffer__["a" /* default */]) {
        data = data.handle;
      }

      this.gl.bindTexture(this.target, this.handle);

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context_state__["a" /* withParameters */])(this.gl, parameters, function () {
        // TODO - x,y parameters
        if (compressed) {
          _this4.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);
        } else if (data === null) {
          _this4.gl.texSubImage2D(target, level, format, width, height, border, dataFormat, type, null);
        } else if (ArrayBuffer.isView(data)) {
          _this4.gl.texSubImage2D(target, level, x, y, width, height, format, type, data, offset);
        } else if (data instanceof __WEBPACK_IMPORTED_MODULE_1__api__["e" /* WebGLBuffer */]) {
          // WebGL2 allows us to create texture directly from a WebGL buffer
          __WEBPACK_IMPORTED_MODULE_7_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["b" /* isWebGL2 */])(_this4.gl), __WEBPACK_IMPORTED_MODULE_2__context__["e" /* ERR_WEBGL2 */]);
          // This texImage2D signature uses currently bound GL_PIXEL_UNPACK_BUFFER
          _this4.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].PIXEL_UNPACK_BUFFER, data);
          _this4.gl.texSubImage2D(target, level, format, width, height, border, format, type, offset);
          _this4.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].GL_PIXEL_UNPACK_BUFFER, null);
        } else {
          // Assume data is a browser supported object (ImageData, Canvas, ...)
          _this4.gl.texSubImage2D(target, level, x, y, format, type, data);
        }
      });

      this.gl.bindTexture(this.target, null);
    }
    /* eslint-enable max-len, max-statements, complexity */

    /**
     * Defines a two-dimensional texture image or cube-map texture image with
     * pixels from the current framebuffer (rather than from client memory).
     * (gl.copyTexImage2D wrapper)
     *
     * Note that binding a texture into a Framebuffer's color buffer and
     * rendering can be faster.
     */

  }, {
    key: 'copyFramebuffer',
    value: function copyFramebuffer(_ref5) {
      var _ref5$target = _ref5.target,
          target = _ref5$target === undefined ? this.target : _ref5$target,
          framebuffer = _ref5.framebuffer,
          _ref5$offset = _ref5.offset,
          offset = _ref5$offset === undefined ? 0 : _ref5$offset,
          _ref5$x = _ref5.x,
          x = _ref5$x === undefined ? 0 : _ref5$x,
          _ref5$y = _ref5.y,
          y = _ref5$y === undefined ? 0 : _ref5$y,
          width = _ref5.width,
          height = _ref5.height,
          _ref5$level = _ref5.level,
          level = _ref5$level === undefined ? 0 : _ref5$level,
          _ref5$internalFormat = _ref5.internalFormat,
          internalFormat = _ref5$internalFormat === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA : _ref5$internalFormat,
          _ref5$border = _ref5.border,
          border = _ref5$border === undefined ? 0 : _ref5$border;

      if (framebuffer) {
        framebuffer.bind();
      }

      // target
      this.bind();
      this.gl.copyTexImage2D(this.target, level, internalFormat, x, y, width, height, border);
      this.unbind();

      if (framebuffer) {
        framebuffer.unbind();
      }
    }
  }, {
    key: 'getActiveUnit',
    value: function getActiveUnit() {
      return this.gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].ACTIVE_TEXTURE) - __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE0;
    }

    // target cannot be modified by bind:
    // textures are special because when you first bind them to a target,
    // they get special information. When you first bind a texture as a
    // GL_TEXTURE_2D, you are actually setting special state in the texture.
    // You are saying that this texture is a 2D texture.
    // And it will always be a 2D texture; this state cannot be changed ever.
    // If you have a texture that was first bound as a GL_TEXTURE_2D,
    // you must always bind it as a GL_TEXTURE_2D;
    // attempting to bind it as GL_TEXTURE_1D will give rise to an error
    // (while run-time).

  }, {
    key: 'bind',
    value: function bind() {
      var textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;

      if (textureUnit === undefined) {
        throw new Error('Texture.bind: must specify texture unit');
      }
      this.textureUnit = textureUnit;
      this.gl.activeTexture(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE0 + textureUnit);
      this.gl.bindTexture(this.target, this.handle);
      return textureUnit;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      if (this.textureUnit === undefined) {
        throw new Error('Texture.unbind: texture unit not specified');
      }
      this.gl.activeTexture(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE0 + this.textureUnit);
      this.gl.bindTexture(this.target, null);
      return this.textureUnit;
    }

    // PRIVATE METHODS

  }, {
    key: '_getDataType',
    value: function _getDataType(_ref6) {
      var data = _ref6.data,
          _ref6$compressed = _ref6.compressed,
          compressed = _ref6$compressed === undefined ? false : _ref6$compressed;

      if (compressed) {
        return { data: data, dataType: 'compressed' };
      }
      if (data === null) {
        return { data: data, dataType: 'null' };
      }
      if (ArrayBuffer.isView(data)) {
        return { data: data, dataType: 'typed-array' };
      }
      if (data instanceof __WEBPACK_IMPORTED_MODULE_5__buffer__["a" /* default */]) {
        return { data: data.handle, dataType: 'buffer' };
      }
      if (data instanceof __WEBPACK_IMPORTED_MODULE_1__api__["e" /* WebGLBuffer */]) {
        return { data: data, dataType: 'buffer' };
      }
      // Assume data is a browser supported object (ImageData, Canvas, ...)
      return { data: data, dataType: 'browser-object' };
    }

    // Image 3D copies from Typed Array or WebGLBuffer

  }, {
    key: 'setImage3D',
    value: function setImage3D(_ref7) {
      var _ref7$level = _ref7.level,
          level = _ref7$level === undefined ? 0 : _ref7$level,
          _ref7$internalformat = _ref7.internalformat,
          internalformat = _ref7$internalformat === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA : _ref7$internalformat,
          width = _ref7.width,
          height = _ref7.height,
          _ref7$depth = _ref7.depth,
          depth = _ref7$depth === undefined ? 1 : _ref7$depth,
          _ref7$border = _ref7.border,
          border = _ref7$border === undefined ? 0 : _ref7$border,
          format = _ref7.format,
          _ref7$type = _ref7.type,
          type = _ref7$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE : _ref7$type,
          _ref7$offset = _ref7.offset,
          offset = _ref7$offset === undefined ? 0 : _ref7$offset,
          pixels = _ref7.pixels;

      if (ArrayBuffer.isView(pixels)) {
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, pixels);
        return this;
      }

      if (pixels instanceof __WEBPACK_IMPORTED_MODULE_5__buffer__["a" /* default */]) {
        this.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].PIXEL_UNPACK_BUFFER, pixels.handle);
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, offset);
      }

      return this;
    }

    /* Copied from texture-2d.js
    // WebGL2
    setPixels(opts = {}) {
      const {
        buffer,
        width = null,
        height = null,
        mipmapLevel = 0,
        format = GL.RGBA,
        type = GL.UNSIGNED_BYTE,
        border = 0
      } = opts;
       const {gl} = this;
       // This signature of texImage2D uses currently bound GL_PIXEL_UNPACK_BUFFER
      gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);
      // And as always, we must also bind the texture itself
      this.bind();
       gl.texImage2D(gl.TEXTURE_2D,
        mipmapLevel, format, width, height, border, format, type, buffer.target);
       this.unbind();
      gl.bindBuffer(GL.GL_PIXEL_UNPACK_BUFFER, null);
      return this;
    }
     setImageDataFromCompressedBuffer(opts) {
      const {
        buffer,
        // offset = 0,
        width = null,
        height = null,
        mipmapLevel = 0,
        internalFormat = GL.RGBA,
        // format = GL.RGBA,
        // type = GL.UNSIGNED_BYTE,
        border = 0
      } = opts;
       const {gl} = this;
      gl.compressedTexImage2D(this.target,
        mipmapLevel, internalFormat, width, height, border, buffer);
      // gl.compressedTexSubImage2D(target,
      //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);
      return this;
    }
     copySubImage(opts) {
      const {
        // pixels,
        // offset = 0,
        // x,
        // y,
        // width,
        // height,
        // mipmapLevel = 0,
        // internalFormat = GL.RGBA,
        // type = GL.UNSIGNED_BYTE,
        // border = 0
      } = opts;
       // if (pixels instanceof ArrayBufferView) {
      //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);
      // }
      // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);
      // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);
      // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);
      // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);
      // // Additional signature in a WebGL 2 context:
      // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);
    }
    */

    // HELPER METHODS

  }, {
    key: '_deduceParameters',
    value: function _deduceParameters(opts) {
      var format = opts.format,
          data = opts.data;
      var width = opts.width,
          height = opts.height,
          dataFormat = opts.dataFormat,
          type = opts.type,
          compressed = opts.compressed;

      // Deduce format and type from format

      var textureFormat = TEXTURE_FORMATS[format];
      dataFormat = dataFormat || textureFormat && textureFormat.dataFormat;
      type = type || textureFormat && textureFormat.types[0];

      // Deduce compression from format
      compressed = compressed || textureFormat && textureFormat.compressed;

      var _deduceImageSize2 = this._deduceImageSize({ data: data, width: width, height: height });

      width = _deduceImageSize2.width;
      height = _deduceImageSize2.height;


      return { dataFormat: dataFormat, type: type, compressed: compressed, width: width, height: height, format: format, data: data };
    }

    // Convert and append any v3 style parameters

  }, {
    key: '_applyV3Options',
    value: function _applyV3Options(parameters, opts) {
      var v4Parameters = Object.assign({}, parameters);

      if ('magFilter' in opts) {
        v4Parameters[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_MAG_FILTER] = opts.magFilter;
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('magFilter', 'TEXTURE_MAG_FILTER');
      }
      if ('minFilter' in opts) {
        v4Parameters[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_MIN_FILTER] = opts.minFilter;
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('minFilter', 'TEXTURE_MIN_FILTER');
      }
      if ('wrapS' in opts) {
        v4Parameters[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WRAP_S] = opts.wrapS;
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('wrapS', 'TEXTURE_WRAP_S');
      }
      if ('wrapT' in opts) {
        v4Parameters[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WRAP_T] = opts.wrapT;
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('wrapT', 'TEXTURE_WRAP_T');
      }

      return v4Parameters;
    }

    /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement */

  }, {
    key: '_deduceImageSize',
    value: function _deduceImageSize(_ref8) {
      var data = _ref8.data,
          width = _ref8.width,
          height = _ref8.height;

      var size = void 0;

      if (typeof ImageData !== 'undefined' && data instanceof ImageData) {
        size = { width: data.width, height: data.height };
      } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {
        size = { width: data.naturalWidth, height: data.naturalHeight };
      } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {
        size = { width: data.width, height: data.height };
      } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {
        size = { width: data.videoWidth, height: data.videoHeight };
      } else if (!data) {
        size = { width: width >= 0 ? width : 1, height: height >= 0 ? height : 1 };
      } else {
        size = { width: width, height: height };
      }

      __WEBPACK_IMPORTED_MODULE_7_assert___default()(size, 'Could not deduced texture size');
      __WEBPACK_IMPORTED_MODULE_7_assert___default()(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');
      __WEBPACK_IMPORTED_MODULE_7_assert___default()(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');

      return size;
    }

    // RESOURCE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createTexture();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteTexture(this.handle);
    }
  }, {
    key: '_getParameter',
    value: function _getParameter(pname) {
      switch (pname) {
        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WIDTH:
          return this.width;
        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_HEIGHT:
          return this.height;
        default:
          this.gl.bindTexture(this.target, this.handle);
          var value = this.gl.getTexParameter(this.target, pname);
          this.gl.bindTexture(this.target, null);
          return value;
      }
    }
  }, {
    key: '_setParameter',
    value: function _setParameter(pname, param) {
      this.gl.bindTexture(this.target, this.handle);

      // NOTE: Apply NPOT workaround
      param = this._getNPOTParam(pname, param);

      // Apparently there are some integer/float conversion rules that made
      // the WebGL committe expose two parameter setting functions in JavaScript.
      // For now, pick the float version for parameters specified as GLfloat.
      switch (pname) {
        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_MIN_LOD:
        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_MAX_LOD:
          this.gl.texParameterf(this.handle, pname, param);
          break;

        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WIDTH:
        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_HEIGHT:
          throw new Error('Cannot set emulated parameter');

        default:
          this.gl.texParameteri(this.target, pname, param);
          break;
      }

      this.gl.bindTexture(this.target, null);
      return this;
    }
  }, {
    key: '_isNPOT',
    value: function _isNPOT() {
      return !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["b" /* isWebGL2 */])(this.gl) && (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils__["isPowerOfTwo"])(this.width) || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils__["isPowerOfTwo"])(this.height));
    }

    // Update default settings which are not supported by NPOT textures.

  }, {
    key: '_updateForNPOT',
    value: function _updateForNPOT(parameters) {
      if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR');
        parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;
      }
      if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE');
        parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;
      }
      if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE');
        parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;
      }
    }
  }, {
    key: '_getNPOTParam',
    value: function _getNPOTParam(pname, param) {
      if (this._isNPOT()) {
        switch (pname) {
          case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_MIN_FILTER:
            if (NPOT_MIN_FILTERS.indexOf(param) === -1) {
              __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR');
              param = __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINEAR;
            }
            break;
          case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WRAP_S:
          case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WRAP_T:
            if (param !== __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].CLAMP_TO_EDGE) {
              __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, ' + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["b" /* glKey */])(pname) + ' to CLAMP_TO_EDGE');
              param = __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].CLAMP_TO_EDGE;
            }
            break;
          default:
            break;
        }
      }
      return param;
    }
  }]);

  return Texture;
}(__WEBPACK_IMPORTED_MODULE_4__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Texture);
//# sourceMappingURL=texture.js.map

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_vector2__ = __webpack_require__(34);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Vector2", function() { return __WEBPACK_IMPORTED_MODULE_0__src_vector2__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_vector3__ = __webpack_require__(35);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Vector3", function() { return __WEBPACK_IMPORTED_MODULE_1__src_vector3__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_vector4__ = __webpack_require__(36);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Vector4", function() { return __WEBPACK_IMPORTED_MODULE_2__src_vector4__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_matrix4__ = __webpack_require__(70);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix4", function() { return __WEBPACK_IMPORTED_MODULE_3__src_matrix4__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_quaternion__ = __webpack_require__(71);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Quaternion", function() { return __WEBPACK_IMPORTED_MODULE_4__src_quaternion__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_common__ = __webpack_require__(8);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "config", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkNumber", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "formatValue", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "radians", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["g"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "degrees", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["h"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "sin", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["i"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "cos", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["j"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "tan", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["k"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "asin", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["l"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "acos", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["m"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "atan", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["n"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["o"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["p"]; });





// export {default as Euler} from './src/euler';


//# sourceMappingURL=index.js.map

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export LUMA_SETTERS */
/* unused harmony export setParameters */
/* harmony export (immutable) */ __webpack_exports__["a"] = withParameters;
/* unused harmony export withState */
/* unused harmony export glContextWithState */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils_track_context_state__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_assert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__webgl_utils_set_parameters__ = __webpack_require__(17);
/* unused harmony reexport getParameter */
/* unused harmony reexport getParameters */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_5__webgl_utils_set_parameters__["d"]; });
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/* eslint-disable no-inline-comments, max-len */






// map of parameter setter function names, parameter constants, default values and types
// - Uses gl function names, except when setter function exist that are named differently
// - When the WebGL api offers <setter> and <setter>Separate (e.g. blendEquation and
//   blendEquationSeparate, we use non-separate name, but accept both non-separate and
//   separate arguments. Thus, a `getParameter` call will always return all the separate values
//   in an array, in a form that can be accepted by the setter.
var LUMA_SETTERS = {
  bindFramebuffer: function bindFramebuffer(gl, args) {
    __WEBPACK_IMPORTED_MODULE_4_assert___default()(args.length === 2, 'bindFramebuffer needs two arguments, target and handle');

    var _args = _slicedToArray(args, 2),
        target = _args[0],
        handle = _args[1];

    if (target === __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER) {
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context__["b" /* isWebGL2 */])(gl)) {
        // NOTE: https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_blit.txt
        // As per above spec, under WebGL2, FRAMEBUFFER binding updates both READ_FRAMEBUFFER and DRAW_FRAMEBUFFER
        // This generates two bindFramebuffer calls so that our cache is correct
        gl.bindFramebuffer(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DRAW_FRAMEBUFFER, handle);
        gl.bindFramebuffer(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].READ_FRAMEBUFFER, handle);
      } else {
        gl.bindFramebuffer(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER, handle);
      }
    } else {
      // handle GL.DRAW_FRAMEBUFFER and GL.READ_FRAMEBUFFER
      gl.bindFramebuffer(target, handle);
    }
  },
  blend: function blend(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BLEND) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BLEND);
  },
  blendColor: function blendColor(gl, value) {
    return gl.blendColor.apply(gl, _toConsumableArray(value));
  },
  blendEquation: function blendEquation(gl, args) {
    args = isArray(args) ? args : [args, args];
    gl.blendEquationSeparate.apply(gl, _toConsumableArray(args));
  },
  blendFunc: function blendFunc(gl, args) {
    args = isArray(args) && args.length === 2 ? [].concat(_toConsumableArray(args), _toConsumableArray(args)) : args;
    gl.blendFuncSeparate.apply(gl, _toConsumableArray(args));
  },

  clearColor: function clearColor(gl, value) {
    return gl.clearColor.apply(gl, _toConsumableArray(value));
  },
  clearDepth: function clearDepth(gl, value) {
    return gl.clearDepth(value);
  },
  clearStencil: function clearStencil(gl, value) {
    return gl.clearStencil(value);
  },

  colorMask: function colorMask(gl, value) {
    return gl.colorMask.apply(gl, _toConsumableArray(value));
  },

  cull: function cull(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].CULL_FACE) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].CULL_FACE);
  },
  cullFace: function cullFace(gl, value) {
    return gl.cullFace(value);
  },

  depthTest: function depthTest(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DEPTH_TEST) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DEPTH_TEST);
  },
  depthFunc: function depthFunc(gl, value) {
    return gl.depthFunc(value);
  },
  depthMask: function depthMask(gl, value) {
    return gl.depthMask(value);
  },
  depthRange: function depthRange(gl, value) {
    return gl.depthRange.apply(gl, _toConsumableArray(value));
  },

  dither: function dither(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DITHER) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DITHER);
  },

  derivativeHint: function derivativeHint(gl, value) {
    // gl1: 'OES_standard_derivatives'
    gl.hint(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAGMENT_SHADER_DERIVATIVE_HINT, value);
  },

  frontFace: function frontFace(gl, value) {
    return gl.frontFace(value);
  },

  mipmapHint: function mipmapHint(gl, value) {
    return gl.hint(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].GENERATE_MIPMAP_HINT, value);
  },

  lineWidth: function lineWidth(gl, value) {
    return gl.lineWidth(value);
  },

  polygonOffsetFill: function polygonOffsetFill(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].POLYGON_OFFSET_FILL) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].POLYGON_OFFSET_FILL);
  },
  polygonOffset: function polygonOffset(gl, value) {
    return gl.polygonOffset.apply(gl, _toConsumableArray(value));
  },

  sampleCoverage: function sampleCoverage(gl, value) {
    return gl.sampleCoverage.apply(gl, _toConsumableArray(value));
  },

  scissorTest: function scissorTest(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].SCISSOR_TEST) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].SCISSOR_TEST);
  },
  scissor: function scissor(gl, value) {
    return gl.scissor.apply(gl, _toConsumableArray(value));
  },

  stencilTest: function stencilTest(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].STENCIL_TEST) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].STENCIL_TEST);
  },
  stencilMask: function stencilMask(gl, value) {
    value = isArray(value) ? value : [value, value];

    var _value = value,
        _value2 = _slicedToArray(_value, 2),
        mask = _value2[0],
        backMask = _value2[1];

    gl.stencilMaskSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRONT, mask);
    gl.stencilMaskSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BACK, backMask);
  },
  stencilFunc: function stencilFunc(gl, args) {
    args = isArray(args) && args.length === 3 ? [].concat(_toConsumableArray(args), _toConsumableArray(args)) : args;

    var _args2 = args,
        _args3 = _slicedToArray(_args2, 6),
        func = _args3[0],
        ref = _args3[1],
        mask = _args3[2],
        backFunc = _args3[3],
        backRef = _args3[4],
        backMask = _args3[5];

    gl.stencilFuncSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRONT, func, ref, mask);
    gl.stencilFuncSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BACK, backFunc, backRef, backMask);
  },
  stencilOp: function stencilOp(gl, args) {
    args = isArray(args) && args.length === 3 ? [].concat(_toConsumableArray(args), _toConsumableArray(args)) : args;

    var _args4 = args,
        _args5 = _slicedToArray(_args4, 6),
        sfail = _args5[0],
        dpfail = _args5[1],
        dppass = _args5[2],
        backSfail = _args5[3],
        backDpfail = _args5[4],
        backDppass = _args5[5];

    gl.stencilOpSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRONT, sfail, dpfail, dppass);
    gl.stencilOpSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BACK, backSfail, backDpfail, backDppass);
  },

  viewport: function viewport(gl, value) {
    return gl.viewport.apply(gl, _toConsumableArray(value));
  }
};

// HELPERS

function isArray(array) {
  return Array.isArray(array) || ArrayBuffer.isView(array);
}

// GETTERS AND SETTERS

// Get the parameter value(s) from the context


// Get the parameters from the context


// Resets gl state to default values.


// Get the parameter value(s) from the context


// Set the parameter value(s) by key to the context
// Sets value with key to context.
// Value may be "normalized" (in case a short form is supported). In that case
// the normalized value is retured.
function setParameters(gl, parameters) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__webgl_utils_set_parameters__["a" /* setParameters */])(gl, parameters);
  for (var key in parameters) {
    var setter = LUMA_SETTERS[key];
    if (setter) {
      setter(gl, parameters[key], key);
    }
  }
}

// VERY LIMITED / BASIC GL STATE MANAGEMENT
// Executes a function with gl states temporarily set, exception safe
// Currently support pixelStorage, scissor test and framebuffer binding
function withParameters(gl, parameters, func) {
  // assertWebGLContext(gl);

  var frameBuffer = parameters.frameBuffer,
      _parameters$nocatch = parameters.nocatch,
      nocatch = _parameters$nocatch === undefined ? true : _parameters$nocatch;
  var framebuffer = parameters.framebuffer;

  if (frameBuffer) {
    __WEBPACK_IMPORTED_MODULE_2__utils__["log"].deprecated('withParameters({frameBuffer})', 'withParameters({framebuffer})');
    framebuffer = frameBuffer;
  }

  // Define a helper function that will reset state after the function call
  function resetStateAfterCall() {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_track_context_state__["b" /* popContextState */])(gl);
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_track_context_state__["c" /* pushContextState */])(gl);

  setParameters(gl, parameters);

  if (framebuffer) {
    framebuffer.bind();
  }

  // Setup is done, call the function
  var value = void 0;

  if (nocatch) {
    // Avoid try catch to minimize debugging impact for safe execution paths
    value = func(gl);
    resetStateAfterCall();
  } else {
    // Wrap in a try-catch to ensure that parameters are restored on exceptions
    try {
      value = func(gl);
    } finally {
      resetStateAfterCall();
    }
  }
  return value;
}

// DEPRECATED

function withState() {
  __WEBPACK_IMPORTED_MODULE_2__utils__["log"].deprecated('withState', 'withParameters');
  return withParameters.apply(undefined, arguments);
}

function glContextWithState() {
  __WEBPACK_IMPORTED_MODULE_2__utils__["log"].deprecated('glContextWithState', 'withParameters');
  return withParameters.apply(undefined, arguments);
}
//# sourceMappingURL=context-state.js.map

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(8);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _extendableBuiltin(cls) {
  function ExtendableBuiltin() {
    var instance = Reflect.construct(cls, Array.from(arguments));
    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    return instance;
  }

  ExtendableBuiltin.prototype = Object.create(cls.prototype, {
    constructor: {
      value: cls,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ExtendableBuiltin, cls);
  } else {
    ExtendableBuiltin.__proto__ = cls;
  }

  return ExtendableBuiltin;
}



var MathArray = function (_extendableBuiltin2) {
  _inherits(MathArray, _extendableBuiltin2);

  function MathArray() {
    _classCallCheck(this, MathArray);

    return _possibleConstructorReturn(this, (MathArray.__proto__ || Object.getPrototypeOf(MathArray)).apply(this, arguments));
  }

  _createClass(MathArray, [{
    key: 'clone',
    value: function clone() {
      var Subclass = this.constructor;
      var clone = new Subclass().copy(this);
      clone.check();
      return clone;
    }
  }, {
    key: 'copy',
    value: function copy(array) {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = array[i];
      }
      this.check();
      return this;
    }
  }, {
    key: 'set',
    value: function set() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = args[i] || 0;
      }
      this.check();
      return this;
    }
  }, {
    key: 'fromArray',
    value: function fromArray(array) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = array[i + offset];
      }
      this.check();
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      var string = '';
      for (var i = 0; i < this.ELEMENTS; ++i) {
        string += (i > 0 ? ', ' : '') + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__common__["d" /* formatValue */])(this[i]);
      }
      return this.constructor.name + '(' + string + ')';
    }
  }, {
    key: 'toArray',
    value: function toArray() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      for (var i = 0; i < this.ELEMENTS; ++i) {
        array[offset + i] = this[i];
      }
      return array;
    }
  }, {
    key: 'toFloat32Array',
    value: function toFloat32Array() {
      return new Float32Array(this);
    }
  }, {
    key: 'equals',
    value: function equals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (var i = 0; i < this.ELEMENTS; ++i) {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__common__["p" /* equals */])(this[i], array[i])) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'exactEquals',
    value: function exactEquals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (var i = 0; i < this.ELEMENTS; ++i) {
        if (this[i] !== array[i]) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'validate',
    value: function validate() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;

      var valid = array && array.length === this.ELEMENTS;
      for (var i = 0; i < this.ELEMENTS; ++i) {
        valid = valid && Number.isFinite(array[i]);
      }
      return valid;
    }
  }, {
    key: 'check',
    value: function check() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;

      if (__WEBPACK_IMPORTED_MODULE_0__common__["a" /* config */].debug && !this.validate(array)) {
        throw new Error('Invalid ' + this.constructor.name);
      }
    }
  }, {
    key: 'normalize',
    value: function normalize() {
      var length = this.len();
      if (length !== 0) {
        for (var i = 0; i < this.ELEMENTS; ++i) {
          this[i] /= length;
        }
      }
      this.check();
      return this;
    }
  }]);

  return MathArray;
}(_extendableBuiltin(Array));

/* harmony default export */ __webpack_exports__["a"] = (MathArray);
//# sourceMappingURL=math-array.js.map

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return GL_PARAMETER_DEFAULTS; });
/* unused harmony export GL_PARAMETER_SETTERS */
/* unused harmony export GL_PARAMETER_GETTERS */
/* harmony export (immutable) */ __webpack_exports__["a"] = setParameters;
/* unused harmony export getParameter */
/* harmony export (immutable) */ __webpack_exports__["b"] = getParameters;
/* unused harmony export getDefaultParameters */
/* harmony export (immutable) */ __webpack_exports__["d"] = resetParameters;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(9);
var _GL_PARAMETER_DEFAULT, _GL_PARAMETER_SETTERS, _GL_PARAMETER_GETTERS;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Provides a unified API for getting and setting any WebGL parameter
// Also knows default values of all parameters, enabling fast cache initialization
// Provides base functionality for the state caching.


// DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS

var GL_PARAMETER_DEFAULTS = (_GL_PARAMETER_DEFAULT = {}, _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_COLOR, new Float32Array([0, 0, 0, 0])), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_RGB, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FUNC_ADD), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_ALPHA, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FUNC_ADD), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_RGB, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ONE), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_RGB, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ZERO), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_ALPHA, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ONE), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_ALPHA, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ZERO), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_CLEAR_VALUE, new Float32Array([0, 0, 0, 0])), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_WRITEMASK, [true, true, true, true]), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE_MODE, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BACK), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_TEST, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_CLEAR_VALUE, 1), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_FUNC, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].LESS), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_RANGE, new Float32Array([0, 1])), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_WRITEMASK, true), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DITHER, true), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRAMEBUFFER_BINDING, null), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT_FACE, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CCW), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].GENERATE_MIPMAP_HINT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DONT_CARE), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].LINE_WIDTH, 1), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FILL, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FACTOR, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_UNITS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_VALUE, 1.0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_INVERT, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_TEST, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_BOX, new Int32Array([0, 0, 1024, 1024])), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_TEST, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_CLEAR_VALUE, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_WRITEMASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_WRITEMASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FUNC, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ALWAYS), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_REF, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_VALUE_MASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FUNC, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ALWAYS), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_REF, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_VALUE_MASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FAIL, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_FAIL, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_PASS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FAIL, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_FAIL, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_PASS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].VIEWPORT, new Int32Array([0, 0, 1024, 1024])), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_ALIGNMENT, 4), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_ALIGNMENT, 4), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_FLIP_Y_WEBGL, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_PREMULTIPLY_ALPHA_WEBGL, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_COLORSPACE_CONVERSION_WEBGL, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BROWSER_DEFAULT_WEBGL), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRAGMENT_SHADER_DERIVATIVE_HINT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DONT_CARE), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].READ_FRAMEBUFFER_BINDING, null), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].RASTERIZER_DISCARD, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_ROW_LENGTH, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_SKIP_PIXELS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_SKIP_ROWS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_ROW_LENGTH, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_IMAGE_HEIGHT, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_PIXELS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_ROWS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_IMAGES, 0), _GL_PARAMETER_DEFAULT);

// SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API

var enable = function enable(gl, value, key) {
  return value ? gl.enable(key) : gl.disable(key);
};
var hint = function hint(gl, value, key) {
  return gl.hint(key, value);
};
var pixelStorei = function pixelStorei(gl, value, key) {
  return gl.pixelStorei(key, value);
};

// NOTE: When value type is a string, it will be handled by 'GL_PARAMETER_COMPOSITE_SETTERS'

var GL_PARAMETER_SETTERS = (_GL_PARAMETER_SETTERS = {}, _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_COLOR, function (gl, value) {
  return gl.blendColor.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_RGB, 'blendEquation'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_ALPHA, 'blendEquation'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_RGB, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_RGB, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_ALPHA, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_ALPHA, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_CLEAR_VALUE, function (gl, value) {
  return gl.clearColor.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_WRITEMASK, function (gl, value) {
  return gl.colorMask.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE_MODE, function (gl, value) {
  return gl.cullFace(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_TEST, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_CLEAR_VALUE, function (gl, value) {
  return gl.clearDepth(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_FUNC, function (gl, value) {
  return gl.depthFunc(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_RANGE, function (gl, value) {
  return gl.depthRange.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_WRITEMASK, function (gl, value) {
  return gl.depthMask(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DITHER, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRAGMENT_SHADER_DERIVATIVE_HINT, hint), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRAMEBUFFER_BINDING, function (gl, value) {
  return gl.bindFramebuffer(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRAMEBUFFER, value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT_FACE, function (gl, value) {
  return gl.frontFace(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].GENERATE_MIPMAP_HINT, hint), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].LINE_WIDTH, function (gl, value) {
  return gl.lineWidth(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FILL, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FACTOR, 'polygonOffset'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_UNITS, 'polygonOffset'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].RASTERIZER_DISCARD, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_VALUE, 'sampleCoverage'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_INVERT, 'sampleCoverage'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_TEST, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_BOX, function (gl, value) {
  return gl.scissor.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_TEST, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_CLEAR_VALUE, function (gl, value) {
  return gl.clearStencil(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_WRITEMASK, function (gl, value) {
  return gl.stencilMaskSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT, value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_WRITEMASK, function (gl, value) {
  return gl.stencilMaskSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BACK, value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FUNC, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_REF, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_VALUE_MASK, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FUNC, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_REF, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_VALUE_MASK, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FAIL, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_FAIL, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_PASS, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FAIL, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_FAIL, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_PASS, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].VIEWPORT, function (gl, value) {
  return gl.viewport.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_ALIGNMENT, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_ALIGNMENT, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_FLIP_Y_WEBGL, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_PREMULTIPLY_ALPHA_WEBGL, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_COLORSPACE_CONVERSION_WEBGL, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_ROW_LENGTH, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_SKIP_PIXELS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_SKIP_ROWS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].READ_FRAMEBUFFER_BINDING, function (gl, value) {
  return gl.bindFramebuffer(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].READ_FRAMEBUFFER, value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_ROW_LENGTH, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_IMAGE_HEIGHT, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_PIXELS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_ROWS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_IMAGES, pixelStorei), _GL_PARAMETER_SETTERS);

var GL_PARAMETER_COMPOSITE_SETTERS = {
  blendEquation: function blendEquation(gl, values) {
    return gl.blendEquationSeparate(values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_RGB], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_ALPHA]);
  },
  blendFunc: function blendFunc(gl, values) {
    return gl.blendFuncSeparate(values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_RGB], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_RGB], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_ALPHA], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_ALPHA]);
  },
  polygonOffset: function polygonOffset(gl, values) {
    return gl.polygonOffset(values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FACTOR], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_UNITS]);
  },
  sampleCoverage: function sampleCoverage(gl, values) {
    return gl.sampleCoverage(values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_VALUE], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_INVERT]);
  },
  stencilFuncFront: function stencilFuncFront(gl, values) {
    return gl.stencilFuncSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT, values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FUNC], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_REF], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_VALUE_MASK]);
  },
  stencilFuncBack: function stencilFuncBack(gl, values) {
    return gl.stencilFuncSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BACK, values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FUNC], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_REF], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_VALUE_MASK]);
  },
  stencilOpFront: function stencilOpFront(gl, values) {
    return gl.stencilOpSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT, values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FAIL], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_FAIL], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_PASS]);
  },
  stencilOpBack: function stencilOpBack(gl, values) {
    return gl.stencilOpSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BACK, values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FAIL], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_FAIL], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_PASS]);
  }
};

// GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT

var isEnabled = function isEnabled(gl, key) {
  return gl.isEnabled(key);
};

// Exceptions for any keys that cannot be queried by gl.getParameters
var GL_PARAMETER_GETTERS = (_GL_PARAMETER_GETTERS = {}, _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_TEST, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DITHER, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FILL, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_ALPHA_TO_COVERAGE, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_TEST, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_TEST, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].RASTERIZER_DISCARD, isEnabled), _GL_PARAMETER_GETTERS);

// PUBLIC METHODS

// Sets any GL parameter regardless of function (gl.blendMode, ...)
// Note: requires a `cache` object to be set on the context (gl.state.cache)
// This object is used to fill in any missing values for composite setter functions
function setParameters(gl, values) {
  var compositeSetters = {};

  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)

  for (var key in values) {
    var setter = GL_PARAMETER_SETTERS[key];
    if (setter) {
      // Composite setters should only be called once, so save them
      if (typeof setter === 'string') {
        compositeSetters[setter] = true;
        // only call setter if value has changed
        // TODO - deep equal on values?
      } else {
        // Note - the setter will automatically update this.state
        setter(gl, values[key], Number(key));
      }
    }
  }

  // HANDLE COMPOSITE SETTERS

  // NOTE: any non-provided values needed by composite setters are filled in from state cache
  // The cache parameter is automatically retrieved from the context
  // This depends on `trackContextState`, which is technically a "circular" dependency.
  // But it is too inconvenient to always require a cache parameter here.
  // This is the ONLY external dependency in this module/
  var cache = gl.state && gl.state.cache;
  if (cache) {
    var mergedValues = Object.assign({}, cache, values);

    for (var _key in compositeSetters) {
      // TODO - avoid calling composite setters if values have not changed.
      var compositeSetter = GL_PARAMETER_COMPOSITE_SETTERS[_key];
      // Note - if `trackContextState` has been called,
      // the setter will automatically update this.state.cache
      compositeSetter(gl, mergedValues);
    }
  }
  // Add a log for the else case?
}

// Queries any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)
function getParameter(gl, key) {
  var getter = GL_PARAMETER_GETTERS[key];
  return getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));
}

// Copies the state from a context (gl.getParameter should not be overriden)
// Reads the entire WebGL state from a context
// Caveat: This generates a huge amount of synchronous driver roundtrips and should be
// considered a very slow operation, to be used only if/when a context already manipulated
// by external code needs to be synchronized for the first time
// @return {Object} - a newly created map, with values keyed by GL parameters
function getParameters(gl, parameters) {
  // default to querying all parameters
  parameters = parameters || GL_PARAMETER_DEFAULTS;
  // support both arrays of parameters and objects (keys represent parameters)
  var parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);

  var state = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = parameterKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      state[key] = getParameter(gl, key);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return state;
}

function getDefaultParameters(gl) {
  // TODO - Query GL.VIEWPORT and GL.SCISSOR_BOX since these are dynamic
  return Object.assign({}, GL_PARAMETER_DEFAULTS, {
    // TODO: For viewport and scissor default values are set at the time of
    // context creation based on canvas size, we can query them here but it will
    // not match with what we have in GL_PARAMETER_DEFAULTS table, we should revisit.
    // [GL.VIEWPORT]: gl.constructor.prototype.getParameter.call(gl, GL.VIEWPORT),
    // [GL.SCISSOR_BOX]: gl.constructor.prototype.getParameter.call(gl, GL.SCISSOR_BOX)
  });
}

function resetParameters(gl) {
  setParameters(gl, getDefaultParameters(gl));
}
//# sourceMappingURL=set-parameters.js.map

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export BufferLayout */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_typed_array_utils__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }







var ERR_BUFFER_PARAMS = 'Illegal or missing parameter to Buffer';

var GL_COPY_READ_BUFFER = 0x8F36;
var GL_COPY_WRITE_BUFFER = 0x8F37;
var GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;

var BufferLayout = /*#__PURE__*/
/**
 * @classdesc
 * Store characteristics of a data layout
 * This data can be used when updating vertex attributes with
 * the associated buffer, freeing the application from keeping
 * track of this metadata.
 *
 * @class
 * @param {GLuint} size - number of values per element (1-4)
 * @param {GLuint} type - type of values (e.g. gl.FLOAT)
 * @param {GLbool} normalized=false - normalize integers to [-1,1] or [0,1]
 * @param {GLuint} integer=false - WebGL2 only, int-to-float conversion
 * @param {GLuint} stride=0 - supports strided arrays
 * @param {GLuint} offset=0 - supports strided arrays
 */
function BufferLayout() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref.type,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 1 : _ref$size,
      _ref$offset = _ref.offset,
      offset = _ref$offset === undefined ? 0 : _ref$offset,
      _ref$stride = _ref.stride,
      stride = _ref$stride === undefined ? 0 : _ref$stride,
      _ref$normalized = _ref.normalized,
      normalized = _ref$normalized === undefined ? false : _ref$normalized,
      _ref$integer = _ref.integer,
      integer = _ref$integer === undefined ? false : _ref$integer,
      _ref$instanced = _ref.instanced,
      instanced = _ref$instanced === undefined ? 0 : _ref$instanced;

  _classCallCheck(this, BufferLayout);

  this.type = type;
  this.size = size;
  this.offset = offset;
  this.stride = stride;
  this.normalized = normalized;
  this.integer = integer;
  this.instanced = instanced;
};

var Buffer = /*#__PURE__*/function (_Resource) {
  _inherits(Buffer, _Resource);

  function Buffer(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Buffer);

    // In WebGL1, we need to make sure we use GL.ELEMENT_ARRAY_BUFFER when
    // initializing element buffers, otherwise the buffer type will be locked
    // to a generic (non-element) buffer.
    // In WebGL2, we can use GL_COPY_READ_BUFFER which avoids locking the type here
    var _this = _possibleConstructorReturn(this, (Buffer.__proto__ || Object.getPrototypeOf(Buffer)).call(this, gl, opts));

    _this.target = opts.target || (_this.gl.webgl2 ? GL_COPY_READ_BUFFER : __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ARRAY_BUFFER);
    _this.index = null;
    _this.setData(opts);
    Object.seal(_this);
    return _this;
  }

  // Stores the layout of data with the buffer, makes it easy to e.g. set it as an attribute later


  _createClass(Buffer, [{
    key: 'setDataLayout',
    value: function setDataLayout(_ref2) {
      var layout = _ref2.layout,
          type = _ref2.type,
          _ref2$size = _ref2.size,
          size = _ref2$size === undefined ? 1 : _ref2$size,
          _ref2$offset = _ref2.offset,
          offset = _ref2$offset === undefined ? 0 : _ref2$offset,
          _ref2$stride = _ref2.stride,
          stride = _ref2$stride === undefined ? 0 : _ref2$stride,
          _ref2$normalized = _ref2.normalized,
          normalized = _ref2$normalized === undefined ? false : _ref2$normalized,
          _ref2$integer = _ref2.integer,
          integer = _ref2$integer === undefined ? false : _ref2$integer,
          _ref2$instanced = _ref2.instanced,
          instanced = _ref2$instanced === undefined ? 0 : _ref2$instanced;

      this.layout = layout || new BufferLayout({
        type: type || this.type, // Use autodeduced type if available
        size: size,
        offset: offset,
        stride: stride,
        normalized: normalized,
        integer: integer,
        instanced: instanced
      });
      return this;
    }

    // Creates and initializes the buffer object's data store.

  }, {
    key: 'initialize',
    value: function initialize() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          data = _ref3.data,
          bytes = _ref3.bytes,
          _ref3$usage = _ref3.usage,
          usage = _ref3$usage === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].STATIC_DRAW : _ref3$usage,
          layout = _ref3.layout,
          type = _ref3.type,
          _ref3$size = _ref3.size,
          size = _ref3$size === undefined ? 1 : _ref3$size,
          _ref3$offset = _ref3.offset,
          offset = _ref3$offset === undefined ? 0 : _ref3$offset,
          _ref3$stride = _ref3.stride,
          stride = _ref3$stride === undefined ? 0 : _ref3$stride,
          _ref3$normalized = _ref3.normalized,
          normalized = _ref3$normalized === undefined ? false : _ref3$normalized,
          _ref3$integer = _ref3.integer,
          integer = _ref3$integer === undefined ? false : _ref3$integer,
          _ref3$instanced = _ref3.instanced,
          instanced = _ref3$instanced === undefined ? 0 : _ref3$instanced;

      var opts = arguments[0];

      if (!data) {
        type = type || __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FLOAT;

        // Workaround needed for Safari (#291):
        // gl.bufferData with size (second argument) equal to 0 crashes.
        // hence create zero sized array.
        if (!bytes || bytes === 0) {
          bytes = 0;
          data = new Float32Array(0);
        }
      } else {
        type = type || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_typed_array_utils__["b" /* getGLTypeFromTypedArray */])(data);
        bytes = data.byteLength;
        __WEBPACK_IMPORTED_MODULE_4_assert___default()(type, ERR_BUFFER_PARAMS);
      }

      this.bytes = bytes;
      this.bytesUsed = bytes;
      this.data = data;
      this.type = type;
      this.usage = usage;

      // Call after type is set
      this.setDataLayout(Object.assign(opts));

      // Create the buffer - binding it here for the first time locks the type
      // In WebGL2, use GL_COPY_WRITE_BUFFER to avoid locking the type
      var target = this.gl.webgl2 ? GL_COPY_WRITE_BUFFER : this.target;
      this.gl.bindBuffer(target, this.handle);
      this.gl.bufferData(target, data || bytes, usage);
      this.gl.bindBuffer(target, null);

      return this;
    }

    // DEPRECATED - Can we change to call `subData`?

  }, {
    key: 'setData',
    value: function setData(options) {
      return this.initialize(options);
    }

    // Updates a subset of a buffer object's data store.

  }, {
    key: 'subData',
    value: function subData() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          data = _ref4.data,
          _ref4$offset = _ref4.offset,
          offset = _ref4$offset === undefined ? 0 : _ref4$offset,
          _ref4$srcOffset = _ref4.srcOffset,
          srcOffset = _ref4$srcOffset === undefined ? 0 : _ref4$srcOffset,
          length = _ref4.length;

      __WEBPACK_IMPORTED_MODULE_4_assert___default()(data, ERR_BUFFER_PARAMS);

      // Create the buffer - binding it here for the first time locks the type
      // In WebGL2, use GL_COPY_WRITE_BUFFER to avoid locking the type
      var target = this.gl.webgl2 ? GL_COPY_WRITE_BUFFER : this.target;
      this.gl.bindBuffer(target, this.handle);
      // WebGL2: subData supports additional srcOffset and length parameters
      if (srcOffset !== 0 || length !== undefined) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);
        this.gl.bufferSubData(this.target, offset, data, srcOffset, length || 0);
      } else {
        this.gl.bufferSubData(target, offset, data);
      }
      this.gl.bindBuffer(target, null);
      return this;
    }

    // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer

  }, {
    key: 'copyData',
    value: function copyData(_ref5) {
      var sourceBuffer = _ref5.sourceBuffer,
          _ref5$readOffset = _ref5.readOffset,
          readOffset = _ref5$readOffset === undefined ? 0 : _ref5$readOffset,
          _ref5$writeOffset = _ref5.writeOffset,
          writeOffset = _ref5$writeOffset === undefined ? 0 : _ref5$writeOffset,
          size = _ref5.size;

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);

      // Use GL_COPY_READ_BUFFER+GL_COPY_WRITE_BUFFER avoid disturbing other targets and locking type
      this.gl.bindBuffer(GL_COPY_READ_BUFFER, sourceBuffer.handle);
      this.gl.bindBuffer(GL_COPY_WRITE_BUFFER, this.handle);

      this.gl.copyBufferSubData(GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, readOffset, writeOffset, size);

      this.gl.bindBuffer(GL_COPY_READ_BUFFER, null);
      this.gl.bindBuffer(GL_COPY_WRITE_BUFFER, null);

      return this;
    }

    // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.

  }, {
    key: 'getData',
    value: function getData() {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref6$dstData = _ref6.dstData,
          dstData = _ref6$dstData === undefined ? null : _ref6$dstData,
          _ref6$srcByteOffset = _ref6.srcByteOffset,
          srcByteOffset = _ref6$srcByteOffset === undefined ? 0 : _ref6$srcByteOffset,
          _ref6$dstOffset = _ref6.dstOffset,
          dstOffset = _ref6$dstOffset === undefined ? 0 : _ref6$dstOffset,
          _ref6$length = _ref6.length,
          length = _ref6$length === undefined ? 0 : _ref6$length;

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);

      var ArrayType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_typed_array_utils__["a" /* getTypedArrayFromGLType */])(this.type, { clamped: false });
      var sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);
      var dstAvailableElementCount = void 0;
      var dstElementCount = void 0;
      var dstElementOffset = dstOffset;
      if (dstData) {
        dstElementCount = dstData.length;
        dstAvailableElementCount = dstElementCount - dstElementOffset;
      } else {
        // Allocate ArrayBufferView with enough size to copy all eligible data.
        dstAvailableElementCount = Math.min(sourceAvailableElementCount, length || sourceAvailableElementCount);
        dstElementCount = dstElementOffset + dstAvailableElementCount;
      }

      var copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);
      length = length || copyElementCount;
      __WEBPACK_IMPORTED_MODULE_4_assert___default()(length <= copyElementCount, 'Invalid srcByteOffset, dstOffset and length combination');
      dstData = dstData || new ArrayType(dstElementCount);
      // Use GL_COPY_READ_BUFFER to avoid disturbing other targets and locking type
      this.gl.bindBuffer(GL_COPY_READ_BUFFER, this.handle);
      this.gl.getBufferSubData(GL_COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);
      this.gl.bindBuffer(GL_COPY_READ_BUFFER, null);
      return dstData;
    }

    /**
     * Binds a buffer to a given binding point (target).
     *   GL_TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.
     *
     * @param {Glenum} target - target for the bind operation.
     *
     * @param {GLuint} index= - the index of the target.
     *   - GL_TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state
     * @param {GLuint} offset=0 - the index of the target.
     *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.
     * @param {GLuint} size= - the index of the target.
     *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.
     * @returns {Buffer} - Returns itself for chaining.
     */

  }, {
    key: 'bind',
    value: function bind() {
      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref7$target = _ref7.target,
          target = _ref7$target === undefined ? this.target : _ref7$target,
          _ref7$index = _ref7.index,
          index = _ref7$index === undefined ? this.index : _ref7$index,
          _ref7$offset = _ref7.offset,
          offset = _ref7$offset === undefined ? 0 : _ref7$offset,
          size = _ref7.size;

      // NOTE: While GL_TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could
      // be used as direct binding points, they will not affect transform feedback or
      // uniform buffer state. Instead indexed bindings need to be made.
      var type = target === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNIFORM_BUFFER || target === GL_TRANSFORM_FEEDBACK_BUFFER ? size !== undefined ? 'ranged' : ' indexed' : 'non-indexed';

      switch (type) {
        case 'non-indexed':
          this.gl.bindBuffer(target, this.handle);
          break;
        case 'indexed':
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);
          __WEBPACK_IMPORTED_MODULE_4_assert___default()(offset === 0, ERR_BUFFER_PARAMS); // Make sure offset wasn't supplied
          this.gl.bindBufferBase(target, index, this.handle);
          break;
        case 'ranged':
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);
          this.gl.bindBufferRange(target, index, this.handle, offset, size);
          break;
        default:
          throw new Error(ERR_BUFFER_PARAMS);
      }

      return this;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref8$target = _ref8.target,
          target = _ref8$target === undefined ? this.target : _ref8$target,
          _ref8$index = _ref8.index,
          index = _ref8$index === undefined ? this.index : _ref8$index;

      var isIndexedBuffer = target === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNIFORM_BUFFER || target === GL_TRANSFORM_FEEDBACK_BUFFER;
      if (isIndexedBuffer) {
        this.gl.bindBufferBase(target, index, null);
      } else {
        this.gl.bindBuffer(target, null);
      }
      return this;
    }

    // TODO - is this the right place?
    // gl.TRANSFORM_FEEDBACK_BUFFER_BINDING: Returns a WebGLBuffer.
    // gl.TRANSFORM_FEEDBACK_BUFFER_SIZE: Returns a GLsizeiptr.
    // gl.TRANSFORM_FEEDBACK_BUFFER_START: Returns a GLintptr.
    // gl.UNIFORM_BUFFER_BINDING: Returns a WebGLBuffer.
    // gl.UNIFORM_BUFFER_SIZE: Returns a GLsizeiptr.
    // gl.UNIFORM_BUFFER_START: Returns a GLintptr.

  }, {
    key: 'getIndexedParameter',
    value: function getIndexedParameter(binding, index) {
      // Create the buffer - if binding it here for the first time, this locks the type
      // In WebGL2, use GL_COPY_READ_BUFFER to avoid locking the type
      var target = this.gl.webgl2 ? GL_COPY_READ_BUFFER : this.target;
      this.gl.bindBuffer(target, index);
      return this.gl.getIndexedParameter(binding, index);
    }

    // RESOURCE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createBuffer();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteBuffer(this.handle);
    }
  }, {
    key: '_getParameter',
    value: function _getParameter(pname) {
      this.gl.bindBuffer(this.target, this.handle);
      var value = this.gl.getBufferParameter(this.target, pname);
      this.gl.bindBuffer(this.target, null);
      return value;
    }
  }, {
    key: '_getAvailableElementCount',
    value: function _getAvailableElementCount(srcByteOffset) {
      var ArrayType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_typed_array_utils__["a" /* getTypedArrayFromGLType */])(this.type, { clamped: false });
      var sourceElementCount = this.bytes / ArrayType.BYTES_PER_ELEMENT;
      var sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;
      return sourceElementCount - sourceElementOffset;
    }
  }]);

  return Buffer;
}(__WEBPACK_IMPORTED_MODULE_3__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Buffer);
//# sourceMappingURL=buffer.js.map

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export distance */
/* harmony export (immutable) */ __webpack_exports__["a"] = add;
/* harmony export (immutable) */ __webpack_exports__["b"] = prod;
/* harmony export (immutable) */ __webpack_exports__["c"] = sub;
/* harmony export (immutable) */ __webpack_exports__["g"] = cross;
/* harmony export (immutable) */ __webpack_exports__["h"] = dot;
/* harmony export (immutable) */ __webpack_exports__["e"] = norm;
/* harmony export (immutable) */ __webpack_exports__["f"] = normalize;
/* unused harmony export rotate */
/* harmony export (immutable) */ __webpack_exports__["d"] = angleBetweenVectors;
const abs = Math.abs;
const sin = Math.sin;
const cos = Math.cos;
const atan2 = Math.atan2;
const acos = Math.acos;
const min = Math.min;
const twoPI = Math.PI * 2;
const pow = Math.pow;

function distance(a, b) {
  const v1 = sub(a, b);
  const v2 = dot(v1, v1);
  return Math.sqrt(v2);
}

function add(a, b) {
  return [
    a[0] + b[0],
    a[1] + b[1],
    a[2] + b[2]
  ];
}

function prod(a, k) {
  return [
    a[0] * k,
    a[1] * k,
    a[2] * k
  ];
}

function sub(a, b) {
  return [
    a[0] - b[0],
    a[1] - b[1],
    a[2] - b[2]
  ];
}

function cross(a, b) {
  return [
    a[1] * b[2] - a[2] * b[1],
    a[2] * b[0] - a[0] * b[2],
    a[0] * b[1] - a[1] * b[0]
  ];
}

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function norm(a) {
  return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
}

function normalize(a) {
  const len = norm(a);
  return a.map(_ => _ / len);
}

function rotate([v1, v2, v3], [u1, u2, u3], theta) {
  const costheta = cos(theta);
  const sintheta = sin(theta);
  return [
    v1 * (costheta + u1 * u1 * (1 - costheta)) + v2 * (u1 * u2 * (1 - costheta) - u3 * sintheta) + v3 * (u1 * u3 * (1 - costheta) + u2 * sintheta),
    v1 * (u2 * u1 * (1 - costheta) + u3 * sintheta) + v2 * (costheta + u2 * u2 * (1 - costheta)) + v3 * (u2 * u3 * (1 - costheta) - u1 * sintheta),
    v1 * (u3 * u1 * (1 - costheta) - u2 * sintheta) + v2 * (u3 * u2 * (1 - costheta) + u1 * sintheta) + v3 * (costheta + u3 * u3 * (1 - costheta))
  ];
}

function angleBetweenVectors(a, b) {
  const s = norm(cross(a,b))
  const c = dot(a,b)
  return atan2(s, c)
}


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_uniforms__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__geometry_geometry__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_object_3d__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__ = __webpack_require__(198);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shadertools__ = __webpack_require__(180);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__debug_seer_integration__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_query__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint quotes: ["error", "single", { "allowTemplateLiterals": true }]*/
// A scenegraph object node

// import {withParameters} from '../webgl/context-state';












var MSG_INSTANCED_PARAM_DEPRECATED = 'Warning: Model constructor: parameter "instanced" renamed to "isInstanced".\nThis will become a hard error in a future version of luma.gl.';

var ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';

// Model abstract O3D Class

var Model = /*#__PURE__*/function (_Object3D) {
  _inherits(Model, _Object3D);

  function Model(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Model);

    var _this = _possibleConstructorReturn(this, (Model.__proto__ || Object.getPrototypeOf(Model)).call(this, opts));

    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["isWebGL"])(gl)) {
      // constructor signature 1: (gl, {...opts})
      _this.gl = gl;
    } else {
      // Warning that we are using v3 style construction
      __WEBPACK_IMPORTED_MODULE_4__utils__["log"].deprecated('Model({gl, ...opts})', 'Model(gl, {...opts}');
      // constructor signature 2: ({gl, ...opts})
      // Note: A Model subclass may still have supplied opts, just use those as overrides
      opts = Object.assign(gl, opts);
      // v3 compatibility: Auto extract gl from program if supplied
      _this.gl = opts.gl || opts.program && opts.program.gl;
      // Verify that we have a valid context
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["isWebGL"])(_this.gl), 'Not a WebGL context');
    }
    _this.init(opts);
    return _this;
  }

  /* eslint-disable max-statements  */
  /* eslint-disable complexity  */


  _createClass(Model, [{
    key: 'init',
    value: function init() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$vs = _ref.vs,
          vs = _ref$vs === undefined ? null : _ref$vs,
          _ref$fs = _ref.fs,
          fs = _ref$fs === undefined ? null : _ref$fs,
          _ref$modules = _ref.modules,
          modules = _ref$modules === undefined ? null : _ref$modules,
          _ref$defines = _ref.defines,
          defines = _ref$defines === undefined ? {} : _ref$defines,
          _ref$moduleSettings = _ref.moduleSettings,
          moduleSettings = _ref$moduleSettings === undefined ? {} : _ref$moduleSettings,
          defaultUniforms = _ref.defaultUniforms,
          _ref$program = _ref.program,
          program = _ref$program === undefined ? null : _ref$program,
          _ref$shaderCache = _ref.shaderCache,
          shaderCache = _ref$shaderCache === undefined ? null : _ref$shaderCache,
          _ref$isInstanced = _ref.isInstanced,
          isInstanced = _ref$isInstanced === undefined ? false : _ref$isInstanced,
          instanced = _ref.instanced,
          _ref$vertexCount = _ref.vertexCount,
          vertexCount = _ref$vertexCount === undefined ? undefined : _ref$vertexCount,
          _ref$instanceCount = _ref.instanceCount,
          instanceCount = _ref$instanceCount === undefined ? 0 : _ref$instanceCount,
          drawMode = _ref.drawMode,
          _ref$uniforms = _ref.uniforms,
          uniforms = _ref$uniforms === undefined ? {} : _ref$uniforms,
          _ref$attributes = _ref.attributes,
          attributes = _ref$attributes === undefined ? {} : _ref$attributes,
          _ref$geometry = _ref.geometry,
          geometry = _ref$geometry === undefined ? null : _ref$geometry,
          _ref$pickable = _ref.pickable,
          pickable = _ref$pickable === undefined ? true : _ref$pickable,
          _ref$pick = _ref.pick,
          pick = _ref$pick === undefined ? null : _ref$pick,
          _ref$render = _ref.render,
          render = _ref$render === undefined ? null : _ref$render,
          _ref$onBeforeRender = _ref.onBeforeRender,
          onBeforeRender = _ref$onBeforeRender === undefined ? function () {} : _ref$onBeforeRender,
          _ref$onAfterRender = _ref.onAfterRender,
          onAfterRender = _ref$onAfterRender === undefined ? function () {} : _ref$onAfterRender,
          _ref$timerQueryEnable = _ref.timerQueryEnabled,
          timerQueryEnabled = _ref$timerQueryEnable === undefined ? false : _ref$timerQueryEnable;

      this._initializeProgram({
        vs: vs,
        fs: fs,
        modules: modules,
        defines: defines,
        moduleSettings: moduleSettings,
        defaultUniforms: defaultUniforms,
        program: program,
        shaderCache: shaderCache
      });

      this.uniforms = {};

      // Make sure we have some reasonable default uniforms in place
      uniforms = Object.assign({}, this.program.defaultUniforms, uniforms);
      this.setUniforms(uniforms);
      // Get all default uniforms
      this.setUniforms(this.getModuleUniforms());
      // Get unforms for supplied parameters
      this.setUniforms(this.getModuleUniforms(moduleSettings));

      if (instanced) {
        /* global console */
        /* eslint-disable no-console */
        console.warn(MSG_INSTANCED_PARAM_DEPRECATED);
        isInstanced = isInstanced || instanced;
      }

      // TODO - remove?
      this.buffers = {};
      this.userData = {};
      this.drawParams = {};
      this.dynamic = false;
      this.needsRedraw = true;

      // Attributes and buffers
      this.setGeometry(geometry);

      this.attributes = {};
      this.setAttributes(attributes);

      // geometry might have set drawMode and vertexCount
      if (drawMode !== undefined) {
        this.drawMode = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__geometry_geometry__["b" /* getDrawMode */])(drawMode);
      }
      if (vertexCount !== undefined) {
        this.vertexCount = vertexCount;
      }
      this.isInstanced = isInstanced;
      this.instanceCount = instanceCount;

      // picking options
      this.pickable = Boolean(pickable);
      this.pick = pick || function () {
        return false;
      };

      this.onBeforeRender = onBeforeRender;
      this.onAfterRender = onAfterRender;

      // assert(program || program instanceof Program);
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);

      this.timerQueryEnabled = timerQueryEnabled && __WEBPACK_IMPORTED_MODULE_8__webgl_query__["a" /* default */].isSupported(this.gl, { timer: true });
      this.timeElapsedQuery = undefined;
      this.lastQueryReturned = true;

      this.stats = {
        accumulatedFrameTime: 0,
        averageFrameTime: 0,
        profileFrameCount: 0
      };
    }
    /* eslint-enable max-statements */

  }, {
    key: '_initializeProgram',
    value: function _initializeProgram(_ref2) {
      var vs = _ref2.vs,
          fs = _ref2.fs,
          modules = _ref2.modules,
          defines = _ref2.defines,
          moduleSettings = _ref2.moduleSettings,
          defaultUniforms = _ref2.defaultUniforms,
          program = _ref2.program,
          shaderCache = _ref2.shaderCache;


      this.getModuleUniforms = function (x) {};

      if (!program) {
        // Assign default shaders if none are provided
        if (!vs) {
          vs = __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__["a" /* MODULAR_SHADERS */].vs;
        }
        if (!fs) {
          fs = __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__["a" /* MODULAR_SHADERS */].fs;
        }

        // Assign default uniforms (if any default shaders are being used)
        if (vs === __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__["b" /* MONOLITHIC_SHADERS */].vs || fs === __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__["b" /* MONOLITHIC_SHADERS */].fs) {
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(0, 'luma.gl: default shaders are deprecated and will be removed in a future version. Use shader modules instead.');
          defaultUniforms = defaultUniforms || __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__["b" /* MONOLITHIC_SHADERS */].defaultUniforms;
        }

        var assembleResult = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__shadertools__["a" /* assembleShaders */])(this.gl, { vs: vs, fs: fs, modules: modules, defines: defines });


        // Retrive compiled shaders from cache if exist, otherwise add to the cache.
        vs = assembleResult.vs;
        fs = assembleResult.fs;
        if (shaderCache) {
          vs = shaderCache.getVertexShader(this.gl, vs);
          fs = shaderCache.getFragmentShader(this.gl, fs);
        }

        var getUniforms = assembleResult.getUniforms;

        this.getModuleUniforms = getUniforms || function (x) {};

        program = new __WEBPACK_IMPORTED_MODULE_0__webgl__["Program"](this.gl, { vs: vs, fs: fs });
      }

      this.program = program;
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(this.program instanceof __WEBPACK_IMPORTED_MODULE_0__webgl__["Program"], 'Model needs a program');
    }
    /* eslint-enable complexity */

  }, {
    key: 'destroy',
    value: function destroy() {
      this.delete();
    }
  }, {
    key: 'delete',
    value: function _delete() {
      this.program.delete();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__debug_seer_integration__["a" /* removeModel */])(this.id);
    }
  }, {
    key: 'setNeedsRedraw',
    value: function setNeedsRedraw() {
      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this.needsRedraw = redraw;
      return this;
    }
  }, {
    key: 'getNeedsRedraw',
    value: function getNeedsRedraw() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$clearRedrawFlag = _ref3.clearRedrawFlags,
          clearRedrawFlags = _ref3$clearRedrawFlag === undefined ? false : _ref3$clearRedrawFlag;

      var redraw = false;
      redraw = redraw || this.needsRedraw;
      this.needsRedraw = this.needsRedraw && !clearRedrawFlags;
      redraw = redraw || this.geometry.getNeedsRedraw({ clearRedrawFlags: clearRedrawFlags });
      return redraw;
    }
  }, {
    key: 'setDrawMode',
    value: function setDrawMode(drawMode) {
      this.drawMode = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__geometry_geometry__["b" /* getDrawMode */])(drawMode);
      return this;
    }
  }, {
    key: 'getDrawMode',
    value: function getDrawMode() {
      return this.drawMode;
    }
  }, {
    key: 'setVertexCount',
    value: function setVertexCount(vertexCount) {
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(Number.isFinite(vertexCount));
      this.vertexCount = vertexCount;
      return this;
    }
  }, {
    key: 'getVertexCount',
    value: function getVertexCount() {
      return this.vertexCount;
    }
  }, {
    key: 'setInstanceCount',
    value: function setInstanceCount(instanceCount) {
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(Number.isFinite(instanceCount));
      this.instanceCount = instanceCount;
      return this;
    }
  }, {
    key: 'getInstanceCount',
    value: function getInstanceCount() {
      return this.instanceCount;
    }
  }, {
    key: 'getProgram',
    value: function getProgram() {
      return this.program;
    }

    // TODO - just set attributes, don't hold on to geometry

  }, {
    key: 'setGeometry',
    value: function setGeometry(geometry) {
      this.geometry = geometry;
      this.vertexCount = geometry.getVertexCount();
      this.drawMode = geometry.drawMode;
      this._createBuffersFromAttributeDescriptors(this.geometry.getAttributes());
      this.setNeedsRedraw();
      return this;
    }
  }, {
    key: 'getAttributes',
    value: function getAttributes() {
      return this.attributes;
    }
  }, {
    key: 'setAttributes',
    value: function setAttributes() {
      var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      Object.assign(this.attributes, attributes);
      this._createBuffersFromAttributeDescriptors(attributes);
      this.setNeedsRedraw();
      return this;
    }
  }, {
    key: 'getUniforms',
    value: function getUniforms() {
      return this.uniforms;
    }

    // TODO - should actually set the uniforms

  }, {
    key: 'setUniforms',
    value: function setUniforms() {
      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["checkUniformValues"])(uniforms, this.id);
      Object.assign(this.uniforms, uniforms);
      this.setNeedsRedraw();
      return this;
    }

    // getModuleUniforms (already on object)

  }, {
    key: 'updateModuleSettings',
    value: function updateModuleSettings(opts) {
      var uniforms = this.getModuleUniforms(opts);
      return this.setUniforms(uniforms);
    }

    // TODO - uniform names are too strongly linked camera <=> default shaders
    // At least all special handling is collected here.

  }, {
    key: 'addViewUniforms',
    value: function addViewUniforms(uniforms) {
      // TODO - special treatment of these parameters should be removed
      var camera = uniforms.camera,
          viewMatrix = uniforms.viewMatrix,
          modelMatrix = uniforms.modelMatrix;
      // Camera exposes uniforms that can be used directly in shaders

      var cameraUniforms = camera ? camera.getUniforms() : {};

      var viewUniforms = viewMatrix ? this.getCoordinateUniforms(viewMatrix, modelMatrix) : {};

      return Object.assign({}, uniforms, cameraUniforms, viewUniforms);
    }
  }, {
    key: 'draw',
    value: function draw() {
      var _this2 = this;

      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref4$uniforms = _ref4.uniforms,
          uniforms = _ref4$uniforms === undefined ? {} : _ref4$uniforms,
          _ref4$attributes = _ref4.attributes,
          attributes = _ref4$attributes === undefined ? {} : _ref4$attributes,
          _ref4$samplers = _ref4.samplers,
          samplers = _ref4$samplers === undefined ? {} : _ref4$samplers,
          _ref4$parameters = _ref4.parameters,
          parameters = _ref4$parameters === undefined ? {} : _ref4$parameters,
          settings = _ref4.settings,
          _ref4$framebuffer = _ref4.framebuffer,
          framebuffer = _ref4$framebuffer === undefined ? null : _ref4$framebuffer;

      if (settings) {
        __WEBPACK_IMPORTED_MODULE_4__utils__["log"].deprecated('settings', 'parameters');
        parameters = settings;
      }
      var gl = this.program.gl;

      if (framebuffer) {
        parameters = Object.assign(parameters, { framebuffer: framebuffer });
      }
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["withParameters"])(gl, parameters, function () {
        return _this2.render(uniforms, attributes, samplers);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var samplers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__debug_seer_integration__["b" /* addModel */])(this);

      var resolvedUniforms = this.addViewUniforms(uniforms);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__debug_seer_integration__["c" /* getOverrides */])(this.id, resolvedUniforms);

      this.setUniforms(resolvedUniforms);

      __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, '>>> RENDERING MODEL ' + this.id, this);

      this.setProgramState();

      this._logAttributesAndUniforms(3, resolvedUniforms);

      this.onBeforeRender();

      var drawParams = this.drawParams;
      if (drawParams.isInstanced && !this.isInstanced) {
        __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(0, 'Found instanced attributes on non-instanced model');
      }
      var isIndexed = drawParams.isIndexed,
          indexType = drawParams.indexType;
      var isInstanced = this.isInstanced,
          instanceCount = this.instanceCount;


      this._timerQueryStart();

      this.program.draw({
        drawMode: this.getDrawMode(),
        vertexCount: this.getVertexCount(),
        isIndexed: isIndexed,
        indexType: indexType,
        isInstanced: isInstanced,
        instanceCount: instanceCount
      });

      this._timerQueryEnd();

      this.onAfterRender();

      this.unsetProgramState();

      this.setNeedsRedraw(false);

      __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, '<<< RENDERING MODEL ' + this.id + ' - complete');

      return this;
    }
  }, {
    key: 'setProgramState',
    value: function setProgramState() {
      var program = this.program;

      program.use();
      this.drawParams = {};
      program.setBuffers(this.buffers, { drawParams: this.drawParams });
      program.setUniforms(this.uniforms, this.samplers);
      return this;
    }
  }, {
    key: 'unsetProgramState',
    value: function unsetProgramState() {
      // Ensures all vertex attributes are disabled and ELEMENT_ARRAY_BUFFER
      // is unbound
      this.program.unsetBuffers();
      return this;
    }
  }, {
    key: '_timerQueryStart',
    value: function _timerQueryStart() {
      if (this.timerQueryEnabled === true) {
        if (!this.timeElapsedQuery) {
          this.timeElapsedQuery = new __WEBPACK_IMPORTED_MODULE_8__webgl_query__["a" /* default */](this.gl);
        }
        if (this.lastQueryReturned) {
          this.lastQueryReturned = false;
          this.timeElapsedQuery.beginTimeElapsedQuery();
        }
      }
    }
  }, {
    key: '_timerQueryEnd',
    value: function _timerQueryEnd() {
      if (this.timerQueryEnabled === true) {
        this.timeElapsedQuery.end();
        // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false
        // should this be incorporated into Query object?
        if (this.timeElapsedQuery.isResultAvailable()) {
          this.lastQueryReturned = true;
          var elapsedTime = this.timeElapsedQuery.getResult();

          // Update stats (e.g. for seer)
          this.stats.lastFrameTime = elapsedTime;
          this.stats.accumulatedFrameTime += elapsedTime;
          this.stats.profileFrameCount++;
          this.stats.averageFrameTime = this.stats.accumulatedFrameTime / this.stats.profileFrameCount;

          // Log stats
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, 'program.id: ', this.program.id);
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, 'last frame time: ' + this.stats.lastFrameTime + 'ms');
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, 'average frame time ' + this.stats.averageFrameTime + 'ms');
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, 'accumulated frame time: ' + this.stats.accumulatedFrameTime + 'ms');
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, 'profile frame count: ' + this.stats.profileFrameCount);
        }
      }
    }

    // Makes sure buffers are created for all attributes
    // and that the program is updated with those buffers
    // TODO - do we need the separation between "attributes" and "buffers"
    // couldn't apps just create buffers directly?

  }, {
    key: '_createBuffersFromAttributeDescriptors',
    value: function _createBuffersFromAttributeDescriptors(attributes) {
      var gl = this.program.gl;


      for (var attributeName in attributes) {
        var attribute = attributes[attributeName];

        if (attribute instanceof __WEBPACK_IMPORTED_MODULE_0__webgl__["Buffer"]) {
          this.buffers[attributeName] = attribute;
        } else {
          // Autocreate a buffer
          this.buffers[attributeName] = this.buffers[attributeName] || new __WEBPACK_IMPORTED_MODULE_0__webgl__["Buffer"](gl, {
            target: attribute.isIndexed ? __WEBPACK_IMPORTED_MODULE_0__webgl__["GL"].ELEMENT_ARRAY_BUFFER : __WEBPACK_IMPORTED_MODULE_0__webgl__["GL"].ARRAY_BUFFER
          });

          var buffer = this.buffers[attributeName];
          buffer.setData({ data: attribute.value }).setDataLayout(attribute);
        }
      }

      return this;
    }
  }, {
    key: '_logAttributesAndUniforms',
    value: function _logAttributesAndUniforms() {
      var priority = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
      var uniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (__WEBPACK_IMPORTED_MODULE_4__utils__["log"].priority >= priority) {
        var attributeTable = this._getAttributesTable({
          header: 'Attributes ' + this.id,
          program: this.program,
          attributes: Object.assign({}, this.geometry.attributes, this.attributes)
        });
        __WEBPACK_IMPORTED_MODULE_4__utils__["log"].table(priority, attributeTable);

        var _getUniformsTable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_uniforms__["c" /* getUniformsTable */])({
          header: 'Uniforms ' + this.id,
          program: this.program,
          uniforms: Object.assign({}, this.uniforms, uniforms)
        }),
            table = _getUniformsTable.table,
            unusedTable = _getUniformsTable.unusedTable,
            unusedCount = _getUniformsTable.unusedCount;

        __WEBPACK_IMPORTED_MODULE_4__utils__["log"].table(priority, table);
        __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(priority, (unusedCount || 'No') + ' unused uniforms ', unusedTable);
      }

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__debug_seer_integration__["d" /* logModel */])(this, uniforms);
    }

    // Todo move to attributes manager

  }, {
    key: '_getAttributesTable',
    value: function _getAttributesTable() {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          attributes = _ref5.attributes,
          _ref5$header = _ref5.header,
          header = _ref5$header === undefined ? 'Attributes' : _ref5$header,
          instanced = _ref5.instanced,
          program = _ref5.program;

      __WEBPACK_IMPORTED_MODULE_9_assert___default()(program);
      var attributeLocations = program._attributeLocations;
      var table = _defineProperty({}, header, {});

      // Add used attributes
      for (var attributeName in attributeLocations) {
        var attribute = attributes[attributeName];
        var location = attributeLocations[attributeName];
        table[attributeName] = this._getAttributeEntry(attribute, location);
      }

      // Add any unused attributes
      for (var _attributeName in attributes) {
        var _attribute = attributes[_attributeName];
        if (!table[_attributeName]) {
          table[_attributeName] = this._getAttributeEntry(_attribute, null);
        }
      }

      return table;
    }
  }, {
    key: '_getAttributeEntry',
    value: function _getAttributeEntry(attribute, location) {
      var round = function round(num) {
        return Math.round(num * 10) / 10;
      };

      var type = 'NOT PROVIDED';
      var instanced = 0;
      var size = 'N/A';
      var verts = 'N/A';
      var bytes = 'N/A';
      var value = 'N/A';

      if (attribute && location === null) {
        location = attribute.isIndexed ? 'ELEMENT_ARRAY_BUFFER' : 'NOT USED';
      }

      if (attribute instanceof __WEBPACK_IMPORTED_MODULE_0__webgl__["Buffer"]) {
        var buffer = attribute;
        type = buffer.layout.type;
        instanced = buffer.layout.instanced;
        size = buffer.layout.size;
        verts = round(buffer.data.length / buffer.layout.size);
        bytes = buffer.data.length * buffer.data.BYTES_PER_ELEMENT;
      } else if (attribute) {
        type = attribute.value.constructor.name;
        instanced = attribute.instanced;
        size = attribute.size;
        verts = round(attribute.value.length / attribute.size);
        bytes = attribute.value.length * attribute.value.BYTES_PER_ELEMENT;
        value = attribute.value;
      }

      // Generate a type name by dropping Array from Float32Array etc.
      type = String(type).replace('Array', '');
      // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array
      var isInteger = type.indexOf('nt') !== -1;

      return {
        Location: '' + location + (instanced ? ' [instanced]' : ''),
        'Type Size x Verts = Bytes': type + ' ' + size + ' x ' + verts + ' = ' + bytes,
        Value: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["formatValue"])(value, { size: size, isInteger: isInteger })
      };
    }

    // DEPRECATED / REMOVED

  }, {
    key: 'isPickable',
    value: function isPickable() {
      return this.pickable;
    }
  }, {
    key: 'setPickable',
    value: function setPickable() {
      var pickable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this.pickable = Boolean(pickable);
      return this;
    }
  }, {
    key: 'getGeometry',
    value: function getGeometry() {
      return this.geometry;
    }
  }]);

  return Model;
}(__WEBPACK_IMPORTED_MODULE_3__core_object_3d__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Model);
//# sourceMappingURL=model.js.map

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var TruncatedConeGeometry = /*#__PURE__*/function (_Geometry) {
  _inherits(TruncatedConeGeometry, _Geometry);

  // Primitives inspired by TDL http://code.google.com/p/webglsamples/,
  // copyright 2011 Google Inc. new BSD License
  // (http://www.opensource.org/licenses/bsd-license.php).
  /* eslint-disable max-statements, complexity */
  function TruncatedConeGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TruncatedConeGeometry);

    var _opts$bottomRadius = opts.bottomRadius,
        bottomRadius = _opts$bottomRadius === undefined ? 0 : _opts$bottomRadius,
        _opts$topRadius = opts.topRadius,
        topRadius = _opts$topRadius === undefined ? 0 : _opts$topRadius,
        _opts$height = opts.height,
        height = _opts$height === undefined ? 1 : _opts$height,
        _opts$nradial = opts.nradial,
        nradial = _opts$nradial === undefined ? 10 : _opts$nradial,
        _opts$nvertical = opts.nvertical,
        nvertical = _opts$nvertical === undefined ? 10 : _opts$nvertical,
        _opts$topCap = opts.topCap,
        topCap = _opts$topCap === undefined ? false : _opts$topCap,
        _opts$bottomCap = opts.bottomCap,
        bottomCap = _opts$bottomCap === undefined ? false : _opts$bottomCap;


    var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);
    var numVertices = (nradial + 1) * (nvertical + 1 + extra);

    var slant = Math.atan2(bottomRadius - topRadius, height);
    var msin = Math.sin;
    var mcos = Math.cos;
    var mpi = Math.PI;
    var cosSlant = mcos(slant);
    var sinSlant = msin(slant);
    var start = topCap ? -2 : 0;
    var end = nvertical + (bottomCap ? 2 : 0);
    var vertsAroundEdge = nradial + 1;

    var positions = new Float32Array(numVertices * 3);
    var normals = new Float32Array(numVertices * 3);
    var texCoords = new Float32Array(numVertices * 2);
    var indices = new Uint16Array(nradial * (nvertical + extra) * 6);

    var i3 = 0;
    var i2 = 0;
    for (var i = start; i <= end; i++) {
      var v = i / nvertical;
      var y = height * v;
      var ringRadius = void 0;

      if (i < 0) {
        y = 0;
        v = 1;
        ringRadius = bottomRadius;
      } else if (i > nvertical) {
        y = height;
        v = 1;
        ringRadius = topRadius;
      } else {
        ringRadius = bottomRadius + (topRadius - bottomRadius) * (i / nvertical);
      }
      if (i === -2 || i === nvertical + 2) {
        ringRadius = 0;
        v = 0;
      }
      y -= height / 2;
      for (var j = 0; j < vertsAroundEdge; j++) {
        var sin = msin(j * mpi * 2 / nradial);
        var cos = mcos(j * mpi * 2 / nradial);

        positions[i3 + 0] = sin * ringRadius;
        positions[i3 + 1] = y;
        positions[i3 + 2] = cos * ringRadius;

        normals[i3 + 0] = i < 0 || i > nvertical ? 0 : sin * cosSlant;
        normals[i3 + 1] = i < 0 ? -1 : i > nvertical ? 1 : sinSlant;
        normals[i3 + 2] = i < 0 || i > nvertical ? 0 : cos * cosSlant;

        texCoords[i2 + 0] = j / nradial;
        texCoords[i2 + 1] = v;

        i2 += 2;
        i3 += 3;
      }
    }

    for (var _i = 0; _i < nvertical + extra; _i++) {
      for (var _j = 0; _j < nradial; _j++) {
        var index = (_i * nradial + _j) * 6;
        indices[index + 0] = vertsAroundEdge * (_i + 0) + 0 + _j;
        indices[index + 1] = vertsAroundEdge * (_i + 0) + 1 + _j;
        indices[index + 2] = vertsAroundEdge * (_i + 1) + 1 + _j;
        indices[index + 3] = vertsAroundEdge * (_i + 0) + 0 + _j;
        indices[index + 4] = vertsAroundEdge * (_i + 1) + 1 + _j;
        indices[index + 5] = vertsAroundEdge * (_i + 1) + 0 + _j;
      }
    }

    return _possibleConstructorReturn(this, (TruncatedConeGeometry.__proto__ || Object.getPrototypeOf(TruncatedConeGeometry)).call(this, Object.assign({}, opts, {
      attributes: {
        positions: positions,
        normals: normals,
        texCoords: texCoords,
        indices: indices
      }
    })));
  }

  return TruncatedConeGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__geometry__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (TruncatedConeGeometry);
//# sourceMappingURL=truncated-cone-geometry.js.map

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_is_browser__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_globals__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_log__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__package_json__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__package_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__package_json__);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "global", function() { return __WEBPACK_IMPORTED_MODULE_1__utils_globals__["b"]; });



// Version detection
// TODO - this imports a rather large JSON file, we only need one field


var STARTUP_MESSAGE = 'Assign luma.log.priority in console to control logging: 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\nluma.log.break[], set to gl funcs, luma.log.profile[] set to model names';

if (__WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma && __WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma.VERSION !== __WEBPACK_IMPORTED_MODULE_3__package_json__["version"]) {
  throw new Error('luma.gl - multiple versions detected: ' + __WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma.VERSION + ' vs ' + __WEBPACK_IMPORTED_MODULE_3__package_json__["version"]);
}

if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma) {
  /* global console */
  /* eslint-disable no-console */
  if (__WEBPACK_IMPORTED_MODULE_0__utils_is_browser__["a" /* isBrowser */]) {
    console.log('luma.gl ' + __WEBPACK_IMPORTED_MODULE_3__package_json__["version"] + ' - ' + STARTUP_MESSAGE);
  }

  __WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma = __WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma || {
    VERSION: __WEBPACK_IMPORTED_MODULE_3__package_json__["version"],
    version: __WEBPACK_IMPORTED_MODULE_3__package_json__["version"],
    log: __WEBPACK_IMPORTED_MODULE_2__utils_log__["a" /* default */],

    // A global stats object that various components can add information to
    // E.g. see webgl/resource.js
    stats: {},

    // Keep some luma globals in a sub-object
    // This allows us to dynamically detect if certain modules have been
    // included (such as IO and headless) and enable related functionality,
    // without unconditionally requiring and thus bundling big dependencies
    // into the app.
    globals: {
      headlessGL: null,
      headlessTypes: null,
      modules: {},
      nodeIO: {}
    }
  };
}


/* harmony default export */ __webpack_exports__["default"] = (__WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma);
//# sourceMappingURL=init.js.map

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = clear;
/* harmony export (immutable) */ __webpack_exports__["a"] = clearBuffer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context_state__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();





// Should collapse during minification
var GL_DEPTH_BUFFER_BIT = 0x00000100;
var GL_STENCIL_BUFFER_BIT = 0x00000400;
var GL_COLOR_BUFFER_BIT = 0x00004000;

var GL_COLOR = 0x1800;
var GL_DEPTH = 0x1801;
var GL_STENCIL = 0x1802;
var GL_DEPTH_STENCIL = 0x84F9;

// Should disappear if asserts are removed
var ERR_ARGUMENTS = 'clear: bad arguments';

// Optionally clears depth, color and stencil buffers
function clear(gl) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$framebuffer = _ref.framebuffer,
      framebuffer = _ref$framebuffer === undefined ? null : _ref$framebuffer,
      _ref$color = _ref.color,
      color = _ref$color === undefined ? null : _ref$color,
      _ref$depth = _ref.depth,
      depth = _ref$depth === undefined ? null : _ref$depth,
      _ref$stencil = _ref.stencil,
      stencil = _ref$stencil === undefined ? null : _ref$stencil;

  var parameters = {
    nocatch: false,
    framebuffer: framebuffer
  };
  var clearFlags = 0;

  if (color) {
    clearFlags |= GL_COLOR_BUFFER_BIT;
    if (color !== true) {
      parameters.clearColor = color;
    }
  }

  if (depth) {
    clearFlags |= GL_DEPTH_BUFFER_BIT;
    if (depth !== true) {
      parameters.clearDepth = depth;
    }
  }

  if (stencil) {
    clearFlags |= GL_STENCIL_BUFFER_BIT;
    if (depth !== true) {
      parameters.clearStencil = depth;
    }
  }

  __WEBPACK_IMPORTED_MODULE_2_assert___default()(clearFlags !== 0, ERR_ARGUMENTS);

  // Temporarily set any clear "colors" and call clear
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context_state__["a" /* withParameters */])(gl, parameters, function () {
    gl.clear(clearFlags);
  });
}

// WebGL2 - clear a specific drawing buffer
function clearBuffer(gl) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$framebuffer = _ref2.framebuffer,
      framebuffer = _ref2$framebuffer === undefined ? null : _ref2$framebuffer,
      _ref2$buffer = _ref2.buffer,
      buffer = _ref2$buffer === undefined ? GL_COLOR : _ref2$buffer,
      _ref2$drawBuffer = _ref2.drawBuffer,
      drawBuffer = _ref2$drawBuffer === undefined ? 0 : _ref2$drawBuffer,
      _ref2$value = _ref2.value,
      value = _ref2$value === undefined ? [0, 0, 0, 0] : _ref2$value;

  __WEBPACK_IMPORTED_MODULE_2_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__context__["b" /* isWebGL2 */])(gl), __WEBPACK_IMPORTED_MODULE_0__context__["e" /* ERR_WEBGL2 */]);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context_state__["a" /* withParameters */])(gl, { framebuffer: framebuffer }, function () {

    // Method selection per OpenGL ES 3 docs
    switch (buffer) {
      case GL_COLOR:
        switch (value.constructor) {
          case Int32Array:
            gl.clearBufferiv(buffer, drawBuffer, value);
            break;
          case Uint32Array:
            gl.clearBufferuiv(buffer, drawBuffer, value);
            break;
          case Float32Array:
          default:
            gl.clearBufferfv(buffer, drawBuffer, value);
        }
        break;

      case GL_DEPTH:
        gl.clearBufferfv(GL_DEPTH, 0, [value]);
        break;

      case GL_STENCIL:
        gl.clearBufferiv(GL_STENCIL, 0, [value]);
        break;

      case GL_DEPTH_STENCIL:
        var _value = _slicedToArray(value, 2),
            depth = _value[0],
            stencil = _value[1];

        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);
        break;

      default:
        __WEBPACK_IMPORTED_MODULE_2_assert___default()(false, ERR_ARGUMENTS);
    }
  });
}
//# sourceMappingURL=clear.js.map

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return FEATURES; });
/* harmony export (immutable) */ __webpack_exports__["b"] = hasFeature;
/* harmony export (immutable) */ __webpack_exports__["d"] = hasFeatures;
/* harmony export (immutable) */ __webpack_exports__["a"] = getFeatures;
/* unused harmony export TEST_EXPORTS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_assert__);
// Feature detection for WebGL
//
// Provides a function that enables simple checking of which WebGL features are
// available in an WebGL1 or WebGL2 environment.

/* eslint-disable no-inline-comments, max-len */



// Defines luma.gl "feature" names and semantics
var WEBGL_FEATURES = {
  // API SUPPORT
  VERTEX_ARRAY_OBJECT: ['OES_vertex_array_object', true],
  TIMER_QUERY: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],
  INSTANCED_RENDERING: ['ANGLE_instanced_arrays', true],
  MULTIPLE_RENDER_TARGETS: ['WEBGL_draw_buffers', true],

  // FEATURES
  ELEMENT_INDEX_UINT32: ['OES_element_index_uint', true],
  BLEND_EQUATION_MINMAX: ['EXT_blend_minmax', true],

  // TEXTURES, RENDERBUFFERS
  COLOR_ENCODING_SRGB: ['EXT_sRGB', true],

  // TEXTURES
  TEXTURE_DEPTH: ['WEBGL_depth_texture', true],
  TEXTURE_FLOAT: ['OES_texture_float', true],
  TEXTURE_HALF_FLOAT: ['OES_texture_half_float', true],

  TEXTURE_FILTER_LINEAR_FLOAT: ['OES_texture_float_linear'],
  TEXTURE_FILTER_LINEAR_HALF_FLOAT: ['OES_texture_half_float_linear'],
  TEXTURE_FILTER_ANISOTROPIC: ['EXT_texture_filter_anisotropic'],

  // FRAMEBUFFERS, TEXTURES AND RENDERBUFFERS
  COLOR_ATTACHMENT_RGBA32F: ['WEBGL_color_buffer_float', 'EXT_color_buffer_float'],
  COLOR_ATTACHMENT_FLOAT: [false, 'EXT_color_buffer_float'],
  COLOR_ATTACHMENT_HALF_FLOAT: [false, 'EXT_color_buffer_half_float'],

  // GLSL extensions
  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true],
  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],
  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],
  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]
};

// Create a key-mirrored FEATURES array
var FEATURES = {};
Object.keys(WEBGL_FEATURES).forEach(function (key) {
  FEATURES[key] = key;
});


// TODO - cache the value
function getFeature(gl, cap) {
  var feature = WEBGL_FEATURES[cap];
  __WEBPACK_IMPORTED_MODULE_1_assert___default()(feature, cap);

  // Get extension name from table
  var extensionName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__context__["b" /* isWebGL2 */])(gl) ? feature[1] || feature[0] : feature[0];

  // Check if the value is dependent on checking an extension
  var value = typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;

  __WEBPACK_IMPORTED_MODULE_1_assert___default()(value === false || value === true);

  return value;
}

// capability can be a WebGL extension name or a luma capability name
function hasFeature(gl, feature) {
  return hasFeatures(gl, feature);
}

function hasFeatures(gl, features) {
  features = Array.isArray(features) ? features : [features];
  return features.every(function (feature) {
    return getFeature(gl, feature);
  });
}

function getFeatures(gl) {
  gl.luma = gl.luma || {};

  if (!gl.luma.caps) {
    gl.luma.caps = {};
    gl.luma.caps.webgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__context__["b" /* isWebGL2 */])(gl);
    for (var cap in WEBGL_FEATURES) {
      gl.luma.caps[cap] = getFeature(gl, cap);
    }
  }
  return gl.luma.caps;
}

var TEST_EXPORTS = {
  WEBGL_FEATURES: WEBGL_FEATURES
};
//# sourceMappingURL=context-features.js.map

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clear__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context_features__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__texture_2d__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__renderbuffer__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_typed_array_utils__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_assert__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }












// Local constants - will collapse during minification
var GL_FRAMEBUFFER = 0x8D40;
var GL_DRAW_FRAMEBUFFER = 0x8CA8;
var GL_READ_FRAMEBUFFER = 0x8CA9;

var GL_COLOR_ATTACHMENT0 = 0x8CE0;
var GL_DEPTH_ATTACHMENT = 0x8D00;
var GL_STENCIL_ATTACHMENT = 0x8D20;
// const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;

var GL_RENDERBUFFER = 0x8D41;

var GL_TEXTURE_3D = 0x806F;
var GL_TEXTURE_2D_ARRAY = 0x8C1A;
var GL_TEXTURE_2D = 0x0DE1;
var GL_TEXTURE_CUBE_MAP = 0x8513;

var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;

var GL_DEPTH_BUFFER_BIT = 0x00000100;
var GL_STENCIL_BUFFER_BIT = 0x00000400;
var GL_COLOR_BUFFER_BIT = 0x00004000;

var ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';

var Framebuffer = /*#__PURE__*/function (_Resource) {
  _inherits(Framebuffer, _Resource);

  _createClass(Framebuffer, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          colorBufferFloat = _ref.colorBufferFloat,
          colorBufferHalfFloat = _ref.colorBufferHalfFloat;

      var supported = true;
      supported = colorBufferFloat && gl.getExtension(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl) ? 'EXT_color_buffer_float' : 'WEBGL_color_buffer_float');
      supported = colorBufferHalfFloat && gl.getExtension(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');
      return supported;
    }
  }]);

  function Framebuffer(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Framebuffer);

    // Public members
    var _this = _possibleConstructorReturn(this, (Framebuffer.__proto__ || Object.getPrototypeOf(Framebuffer)).call(this, gl, opts));

    _this.width = null;
    _this.height = null;
    _this.attachments = {};
    _this.readBuffer = GL_COLOR_ATTACHMENT0;
    _this.drawBuffers = [GL_COLOR_ATTACHMENT0];
    _this.initialize(opts);

    Object.seal(_this);
    return _this;
  }

  _createClass(Framebuffer, [{
    key: 'initialize',
    value: function initialize(_ref2) {
      var _ref2$width = _ref2.width,
          width = _ref2$width === undefined ? 1 : _ref2$width,
          _ref2$height = _ref2.height,
          height = _ref2$height === undefined ? 1 : _ref2$height,
          _ref2$attachments = _ref2.attachments,
          attachments = _ref2$attachments === undefined ? null : _ref2$attachments,
          _ref2$color = _ref2.color,
          color = _ref2$color === undefined ? true : _ref2$color,
          _ref2$depth = _ref2.depth,
          depth = _ref2$depth === undefined ? true : _ref2$depth,
          _ref2$stencil = _ref2.stencil,
          stencil = _ref2$stencil === undefined ? false : _ref2$stencil,
          _ref2$check = _ref2.check,
          check = _ref2$check === undefined ? true : _ref2$check,
          readBuffer = _ref2.readBuffer,
          drawBuffers = _ref2.drawBuffers;

      __WEBPACK_IMPORTED_MODULE_9_assert___default()(width >= 0 && height >= 0, 'Width and height need to be integers');

      // Store actual width and height for diffing
      this.width = width;
      this.height = height;

      // Resize any provided attachments - note that resize only resizes if needed
      // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)
      if (attachments) {
        for (var attachment in attachments) {
          var target = attachments[attachment];
          var object = Array.isArray(target) ? target[0] : target;
          object.resize({ width: width, height: height });
        }
      } else {
        // Create any requested default attachments
        attachments = this._createDefaultAttachments({ color: color, depth: depth, stencil: stencil, width: width, height: height });
      }

      this.update({ clearAttachments: true, attachments: attachments, readBuffer: readBuffer, drawBuffers: drawBuffers });

      // Checks that framebuffer was properly set up, if not, throws an explanatory error
      if (attachments && check) {
        this.checkStatus();
      }
    }
  }, {
    key: 'update',
    value: function update(_ref3) {
      var _ref3$attachments = _ref3.attachments,
          attachments = _ref3$attachments === undefined ? {} : _ref3$attachments,
          readBuffer = _ref3.readBuffer,
          drawBuffers = _ref3.drawBuffers,
          _ref3$clearAttachment = _ref3.clearAttachments,
          clearAttachments = _ref3$clearAttachment === undefined ? false : _ref3$clearAttachment;

      this.attach(attachments, { clearAttachments: clearAttachments });

      var gl = this.gl;
      // Multiple render target support, set read buffer and draw buffers

      gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);
      if (readBuffer) {
        this._setReadBuffer(readBuffer);
      }
      if (drawBuffers) {
        this._setDrawBuffers(drawBuffers);
      }
      gl.bindFramebuffer(GL_FRAMEBUFFER, null);

      return this;
    }

    // Attachment resize is expected to be a noop if size is same

  }, {
    key: 'resize',
    value: function resize(_ref4) {
      var width = _ref4.width,
          height = _ref4.height;

      __WEBPACK_IMPORTED_MODULE_8__utils__["log"].log(2, 'Resizing framebuffer ' + this.id + ' to ' + width + 'x' + height);
      for (var attachmentPoint in this.attachments) {
        this.attachments[attachmentPoint].resize({ width: width, height: height });
      }
      this.width = width;
      this.height = height;
      return this;
    }

    // Attach from a map of attachments

  }, {
    key: 'attach',
    value: function attach(attachments) {
      var _this2 = this;

      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref5$clearAttachment = _ref5.clearAttachments,
          clearAttachments = _ref5$clearAttachment === undefined ? false : _ref5$clearAttachment;

      var newAttachments = {};

      // Any current attachments need to be removed, add null values to map
      if (clearAttachments) {
        Object.keys(this.attachments).forEach(function (key) {
          newAttachments[key] = null;
        });
      }

      // Overlay the new attachments
      Object.assign(newAttachments, attachments);

      this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);

      // Walk the attachments
      for (var attachment in newAttachments) {
        // Ensure key is not undefined
        __WEBPACK_IMPORTED_MODULE_9_assert___default()(attachment !== 'undefined', 'Misspelled framebuffer binding point?');

        var descriptor = newAttachments[attachment];
        var object = descriptor;
        if (!object) {
          this._unattach({ attachment: attachment });
        } else if (object instanceof __WEBPACK_IMPORTED_MODULE_6__renderbuffer__["a" /* default */]) {
          this._attachRenderbuffer({ attachment: attachment, renderbuffer: object });
        } else if (Array.isArray(descriptor)) {
          var _descriptor = _slicedToArray(descriptor, 3),
              texture = _descriptor[0],
              _descriptor$ = _descriptor[1],
              layer = _descriptor$ === undefined ? 0 : _descriptor$,
              _descriptor$2 = _descriptor[2],
              level = _descriptor$2 === undefined ? 0 : _descriptor$2;

          object = texture;
          this._attachTexture({ attachment: attachment, texture: texture, layer: layer, level: level });
        } else {
          this._attachTexture({ attachment: attachment, texture: object, layer: 0, level: 0 });
        }

        // Resize objects
        if (object) {
          object.resize({ width: this.width, height: this.height });
        }
      }

      this.gl.bindFramebuffer(GL_FRAMEBUFFER, null);

      // Assign to attachments and remove any nulls to get a clean attachment map
      Object.assign(this.attachments, attachments);
      Object.keys(this.attachments).filter(function (key) {
        return !_this2.attachments[key];
      }).forEach(function (key) {
        delete _this2.attachments[key];
      });
    }
  }, {
    key: 'checkStatus',
    value: function checkStatus() {
      var gl = this.gl;

      gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);
      var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER);
      gl.bindFramebuffer(GL_FRAMEBUFFER, null);
      if (status !== gl.FRAMEBUFFER_COMPLETE) {
        throw new Error(_getFrameBufferStatus(status));
      }
      return this;
    }
  }, {
    key: 'clear',
    value: function clear() {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          color = _ref6.color,
          depth = _ref6.depth,
          stencil = _ref6.stencil,
          _ref6$drawBuffers = _ref6.drawBuffers,
          drawBuffers = _ref6$drawBuffers === undefined ? [] : _ref6$drawBuffers;

      // Bind framebuffer and delegate to global clear functions
      this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);

      if (color || depth || stencil) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__clear__["b" /* clear */])(this.gl, { color: color, depth: depth, stencil: stencil });
      }

      drawBuffers.forEach(function (value, drawBuffer) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__clear__["a" /* clearBuffer */])({ drawBuffer: drawBuffer, value: value });
      });

      this.gl.bindFramebuffer(GL_FRAMEBUFFER, null);

      return this;
    }

    // NOTE: Slow requires roundtrip to GPU
    // App can provide pixelArray or have it auto allocated by this method
    // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,
    //  newly allocated by this method unless provided by app.

  }, {
    key: 'readPixels',
    value: function readPixels(_ref7) {
      var _ref7$x = _ref7.x,
          x = _ref7$x === undefined ? 0 : _ref7$x,
          _ref7$y = _ref7.y,
          y = _ref7$y === undefined ? 0 : _ref7$y,
          width = _ref7.width,
          height = _ref7.height,
          _ref7$format = _ref7.format,
          format = _ref7$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA : _ref7$format,
          type = _ref7.type,
          _ref7$pixelArray = _ref7.pixelArray,
          pixelArray = _ref7$pixelArray === undefined ? null : _ref7$pixelArray;
      var gl = this.gl;

      // Deduce type and allocated pixelArray if needed

      if (!pixelArray) {
        // Allocate pixel array if not already available, using supplied type
        type = type || gl.UNSIGNED_BYTE;
        var ArrayType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_typed_array_utils__["a" /* getTypedArrayFromGLType */])(type, { clamped: false });
        var components = glFormatToComponents(format);
        // TODO - check for composite type (components = 1).
        pixelArray = pixelArray || new ArrayType(width * height * components);
      }

      // Pixel array available, if necessary, deduce type from it.
      type = type || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_typed_array_utils__["b" /* getGLTypeFromTypedArray */])(pixelArray);

      this.bind();
      this.gl.readPixels(x, y, width, height, format, type, pixelArray);
      this.unbind();

      return pixelArray;
    }

    /**
     * Copy from framebuffer into a texture
     */

  }, {
    key: 'copyToTexture',
    value: function copyToTexture(_ref8) {
      var srcFramebuffer = _ref8.srcFramebuffer,
          x = _ref8.x,
          y = _ref8.y,
          width = _ref8.width,
          height = _ref8.height,
          texture = _ref8.texture,
          _ref8$xoffset = _ref8.xoffset,
          xoffset = _ref8$xoffset === undefined ? 0 : _ref8$xoffset,
          _ref8$yoffset = _ref8.yoffset,
          yoffset = _ref8$yoffset === undefined ? 0 : _ref8$yoffset,
          _ref8$zoffset = _ref8.zoffset,
          zoffset = _ref8$zoffset === undefined ? 0 : _ref8$zoffset,
          _ref8$mipmapLevel = _ref8.mipmapLevel,
          mipmapLevel = _ref8$mipmapLevel === undefined ? 0 : _ref8$mipmapLevel,
          _ref8$internalFormat = _ref8.internalFormat,
          internalFormat = _ref8$internalFormat === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA : _ref8$internalFormat,
          _ref8$border = _ref8.border,
          border = _ref8$border === undefined ? 0 : _ref8$border;
      var gl = this.gl;

      gl.bindFramebuffer(GL_FRAMEBUFFER, srcFramebuffer.handle);

      // target
      switch (texture.target) {
        case GL_TEXTURE_2D:
        case GL_TEXTURE_CUBE_MAP:
          gl.copyTexSubImage2D(texture.target, mipmapLevel, internalFormat, x, y, texture.width, texture.height);
          break;
        case GL_TEXTURE_2D_ARRAY:
        case GL_TEXTURE_3D:
          gl.copyTexSubImage3D(texture.target, mipmapLevel, internalFormat, x, y, texture.width, texture.height);
          break;
        default:
      }

      gl.bindFramebuffer(GL_FRAMEBUFFER, null);
      return this;
    }

    // WEBGL2 INTERFACE

    // Copies a rectangle of pixels between framebuffers

  }, {
    key: 'blit',
    value: function blit(_ref9) {
      var srcFramebuffer = _ref9.srcFramebuffer,
          srcX0 = _ref9.srcX0,
          srcY0 = _ref9.srcY0,
          srcX1 = _ref9.srcX1,
          srcY1 = _ref9.srcY1,
          dstX0 = _ref9.dstX0,
          dstY0 = _ref9.dstY0,
          dstX1 = _ref9.dstX1,
          dstY1 = _ref9.dstY1,
          color = _ref9.color,
          depth = _ref9.depth,
          stencil = _ref9.stencil,
          _ref9$mask = _ref9.mask,
          mask = _ref9$mask === undefined ? 0 : _ref9$mask,
          _ref9$filter = _ref9.filter,
          filter = _ref9$filter === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].NEAREST : _ref9$filter;
      var gl = this.gl;

      __WEBPACK_IMPORTED_MODULE_9_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl), __WEBPACK_IMPORTED_MODULE_1__context__["e" /* ERR_WEBGL2 */]);

      if (color) {
        mask |= GL_COLOR_BUFFER_BIT;
      }
      if (depth) {
        mask |= GL_DEPTH_BUFFER_BIT;
      }
      if (stencil) {
        mask |= GL_STENCIL_BUFFER_BIT;
      }

      gl.bindFramebuffer(GL_READ_FRAMEBUFFER, srcFramebuffer.handle);
      gl.bindFramebuffer(GL_DRAW_FRAMEBUFFER, this.handle);
      gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
      gl.bindFramebuffer(GL_DRAW_FRAMEBUFFER, null);
      gl.bindFramebuffer(GL_READ_FRAMEBUFFER, null);
      return this;
    }

    // signals to the GL that it need not preserve all pixels of a specified region
    // of the framebuffer

  }, {
    key: 'invalidate',
    value: function invalidate(_ref10) {
      var _ref10$attachments = _ref10.attachments,
          attachments = _ref10$attachments === undefined ? [] : _ref10$attachments,
          _ref10$x = _ref10.x,
          x = _ref10$x === undefined ? 0 : _ref10$x,
          _ref10$y = _ref10.y,
          y = _ref10$y === undefined ? 0 : _ref10$y,
          width = _ref10.width,
          height = _ref10.height;
      var gl = this.gl;

      __WEBPACK_IMPORTED_MODULE_9_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl, __WEBPACK_IMPORTED_MODULE_1__context__["e" /* ERR_WEBGL2 */]));
      gl.bindFramebuffer(GL_READ_FRAMEBUFFER, this.handle);
      var invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;
      if (invalidateAll) {
        gl.invalidateFramebuffer(GL_READ_FRAMEBUFFER, attachments);
      } else {
        gl.invalidateFramebuffer(GL_READ_FRAMEBUFFER, attachments, x, y, width, height);
      }
      gl.bindFramebuffer(GL_READ_FRAMEBUFFER, null);
      return this;
    }

    // Return the value for the passed pname given the target and attachment.
    // The type returned is the natural type for the requested pname:
    // pname returned type
    // If an OpenGL error is generated, returns null.

  }, {
    key: 'getAttachmentParameter',
    value: function getAttachmentParameter() {
      var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref11$target = _ref11.target,
          target = _ref11$target === undefined ? this.target : _ref11$target,
          _ref11$attachment = _ref11.attachment,
          attachment = _ref11$attachment === undefined ? GL_COLOR_ATTACHMENT0 : _ref11$attachment,
          pname = _ref11.pname;

      var fallback = this._getAttachmentParameterFallback(pname);
      return fallback !== null ? fallback : this.gl.getFramebufferAttachmentParameter(target, attachment, pname);
    }
  }, {
    key: 'getAttachmentParameters',
    value: function getAttachmentParameters() {
      var attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : GL_COLOR_ATTACHMENT0;
      var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.ATTACHMENT_PARAMETERS || {};

      var values = {};
      for (var pname in parameters) {
        values[pname] = this.getParameter(pname);
      }
      return this;
    }

    // WEBGL INTERFACE

  }, {
    key: 'bind',
    value: function bind() {
      var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref12$target = _ref12.target,
          target = _ref12$target === undefined ? GL_FRAMEBUFFER : _ref12$target;

      this.gl.bindFramebuffer(target, this.handle);
      return this;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref13$target = _ref13.target,
          target = _ref13$target === undefined ? GL_FRAMEBUFFER : _ref13$target;

      this.gl.bindFramebuffer(target, null);
      return this;
    }

    // PRIVATE METHODS

  }, {
    key: '_createDefaultAttachments',
    value: function _createDefaultAttachments(_ref14) {
      var color = _ref14.color,
          depth = _ref14.depth,
          stencil = _ref14.stencil,
          width = _ref14.width,
          height = _ref14.height;

      var defaultAttachments = null;

      // Add a color buffer if requested and not supplied
      if (color) {
        var _parameters;

        defaultAttachments = defaultAttachments || {};
        defaultAttachments[GL_COLOR_ATTACHMENT0] = new __WEBPACK_IMPORTED_MODULE_5__texture_2d__["a" /* default */](this.gl, {
          data: null, // reserves texture memory, but texels are undefined
          format: __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA,
          type: __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_BYTE,
          width: width,
          height: height,
          // Note: Mipmapping can be disabled by texture resource when we resize the texture
          // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant
          // behavior we always disable mipmaps.
          mipmaps: false,
          // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.
          // Set WRAP modes that support NPOT textures too.
          parameters: (_parameters = {}, _defineProperty(_parameters, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_MIN_FILTER, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].NEAREST), _defineProperty(_parameters, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_MAG_FILTER, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].NEAREST), _defineProperty(_parameters, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_WRAP_S, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].CLAMP_TO_EDGE), _defineProperty(_parameters, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_WRAP_T, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].CLAMP_TO_EDGE), _parameters)
        });
      }

      // Add a depth buffer if requested and not supplied
      if (depth) {
        defaultAttachments = defaultAttachments || {};
        defaultAttachments[GL_DEPTH_ATTACHMENT] = new __WEBPACK_IMPORTED_MODULE_6__renderbuffer__["a" /* default */](this.gl, {
          format: __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].DEPTH_COMPONENT16,
          width: width,
          height: height
        });
      }

      // TODO - handle stencil and combined depth and stencil

      return defaultAttachments;
    }
  }, {
    key: '_unattach',
    value: function _unattach(_ref15) {
      var attachment = _ref15.attachment;

      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);
      this.gl.framebufferRenderbuffer(GL_FRAMEBUFFER, attachment, GL_RENDERBUFFER, null);
      delete this.attachments[attachment];
    }
  }, {
    key: '_attachRenderbuffer',
    value: function _attachRenderbuffer(_ref16) {
      var _ref16$attachment = _ref16.attachment,
          attachment = _ref16$attachment === undefined ? GL_COLOR_ATTACHMENT0 : _ref16$attachment,
          renderbuffer = _ref16.renderbuffer;
      var gl = this.gl;
      // TODO - is the bind needed?
      // gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.handle);

      gl.framebufferRenderbuffer(GL_FRAMEBUFFER, attachment, GL_RENDERBUFFER, renderbuffer.handle);
      // TODO - is the unbind needed?
      // gl.bindRenderbuffer(GL_RENDERBUFFER, null);

      this.attachments[attachment] = renderbuffer;
    }

    // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`
    // level = 0 - mipmapLevel (must be 0 in WebGL1)

  }, {
    key: '_attachTexture',
    value: function _attachTexture(_ref17) {
      var _ref17$attachment = _ref17.attachment,
          attachment = _ref17$attachment === undefined ? GL_COLOR_ATTACHMENT0 : _ref17$attachment,
          texture = _ref17.texture,
          layer = _ref17.layer,
          level = _ref17.level;
      var gl = this.gl;

      gl.bindTexture(texture.target, texture.handle);

      switch (texture.target) {
        case GL_TEXTURE_2D_ARRAY:
        case GL_TEXTURE_3D:
          gl.framebufferTextureLayer(GL_FRAMEBUFFER, attachment, texture.target, level, layer);
          break;

        case GL_TEXTURE_CUBE_MAP:
          // layer must be a cubemap face (or if index, converted to cube map face)
          var face = mapIndexToCubeMapFace(layer);
          gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, face, texture.handle, level);
          break;

        case GL_TEXTURE_2D:
          gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, GL_TEXTURE_2D, texture.handle, level);
          break;

        default:
          __WEBPACK_IMPORTED_MODULE_9_assert___default()(false, 'Illegal texture type');
      }

      gl.bindTexture(texture.target, null);
      this.attachments[attachment] = texture;
    }

    // Expects framebuffer to be bound

  }, {
    key: '_setReadBuffer',
    value: function _setReadBuffer(gl, readBuffer) {
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl)) {
        gl.readBuffer(readBuffer);
      } else {
        // Setting to color attachment 0 is a noop, so allow it in WebGL1
        __WEBPACK_IMPORTED_MODULE_9_assert___default()(readBuffer === GL_COLOR_ATTACHMENT0 || readBuffer === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].BACK, ERR_MULTIPLE_RENDERTARGETS);
      }
      this.readBuffer = readBuffer;
    }

    // Expects framebuffer to be bound

  }, {
    key: '_setDrawBuffers',
    value: function _setDrawBuffers(gl, drawBuffers) {
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl)) {
        gl.drawBuffers(drawBuffers);
      } else {
        var ext = gl.getExtension('WEBGL_draw_buffers');
        if (ext) {
          ext.drawBuffersWEBGL(drawBuffers);
        } else {
          // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1
          __WEBPACK_IMPORTED_MODULE_9_assert___default()(drawBuffers.length === 1 && (drawBuffers[0] === GL_COLOR_ATTACHMENT0 || drawBuffers[0] === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].BACK), ERR_MULTIPLE_RENDERTARGETS);
        }
      }
      this.drawBuffers = drawBuffers;
    }

    // Attempt to provide workable defaults for WebGL2 symbols under WebGL1
    // null means OK to query
    /* eslint-disable complexity */

  }, {
    key: '_getAttachmentParameterFallback',
    value: function _getAttachmentParameterFallback(pname) {
      var caps = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context_features__["a" /* getFeatures */])(this.gl);

      switch (pname) {
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:
          // GLint
          return !caps.webgl2 ? 0 : null;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:
          // GLint
          return !caps.webgl2 ? 8 : null;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:
          // GLenum
          return !caps.webgl2 ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_INT : null;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:
          return !caps.webgl2 && !caps.EXT_sRGB ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].LINEAR : null;
        default:
          return null;
      }
    }
    /* eslint-enable complexity */

    // RESOURCE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createFramebuffer();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteFramebuffer(this.handle);
    }
  }, {
    key: 'color',
    get: function get() {
      return this.attachments[GL_COLOR_ATTACHMENT0] || null;
    }
  }, {
    key: 'texture',
    get: function get() {
      return this.attachments[GL_COLOR_ATTACHMENT0] || null;
    }
  }, {
    key: 'depth',
    get: function get() {
      return this.attachments[GL_DEPTH_ATTACHMENT] || null;
    }
  }, {
    key: 'stencil',
    get: function get() {
      return this.attachments[GL_STENCIL_ATTACHMENT] || null;
    }
  }]);

  return Framebuffer;
}(__WEBPACK_IMPORTED_MODULE_4__resource__["a" /* default */]);

// PUBLIC METHODS

// Map an index to a cube map face constant


/* harmony default export */ __webpack_exports__["a"] = (Framebuffer);
function mapIndexToCubeMapFace(layer) {
  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)
  // if smaller assume layer is index, otherwise assume it is already a cube map face constant
  return layer < GL_TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL_TEXTURE_CUBE_MAP_POSITIVE_X : layer;
}

// Returns number of components in a specific WebGL format
function glFormatToComponents(format) {
  switch (format) {
    case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ALPHA:
      return 1;
    case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGB:
      return 3;
    case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA:
      return 4;
    default:
      throw new Error('Unknown format');
  }
}

// Get a string describing the framebuffer error if installed
function _getFrameBufferStatus(status) {
  // Use error mapping if installed
  var STATUS = Framebuffer.STATUS || {};
  return STATUS[status] || 'Framebuffer error ' + status;
}
//# sourceMappingURL=framebuffer.js.map

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export RENDERBUFFER_FORMATS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _RENDERBUFFER_FORMATS;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-inline-comments */





// Define local GL constants to optimize minification
var GL_RENDERBUFFER = 0x8D41;
var GL_SAMPLES = 0x80A9;
var GL_RENDERBUFFER_WIDTH = 0x8D42;
var GL_RENDERBUFFER_HEIGHT = 0x8D43;
var GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
var GL_RENDERBUFFER_SAMPLES = 0x8CAB;

// Define local extension strings to optimize minification
// const SRGB = 'EXT_sRGB';
// const CB_FLOAT_WEBGL1 = 'WEBGL_color_buffer_float';
var CB_FLOAT_WEBGL2 = 'EXT_color_buffer_float';
// const CB_HALF_FLOAT_WEBGL1 = 'EXT_color_buffer_half_float';

var RENDERBUFFER_FORMATS = (_RENDERBUFFER_FORMATS = {}, _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH_COMPONENT16, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH_COMPONENT24, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH_COMPONENT32F, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].STENCIL_INDEX8, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH_STENCIL, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH24_STENCIL8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH32F_STENCIL8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA4, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB565, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB5_A1, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R8UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R8I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R16UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R16I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R32UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R32I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG8UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG8I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG16UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG16I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG32UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG32I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB10_A2, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA8UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA8I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB10_A2UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA16UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA16I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA32I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA32UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R16F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG16F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA16F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R32F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG32F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA32F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R11F_G11F_B10F, { gl2: CB_FLOAT_WEBGL2 }), _RENDERBUFFER_FORMATS);

function isFormatSupported(gl, format, formats) {
  // assert(isWebGL(gl), ERR_WEBGL);
  var info = formats[format];
  if (!info) {
    return false;
  }
  var value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl) ? info.gl2 || info.gl1 : info.gl1;
  if (typeof value === 'string') {
    return gl.getExtension(value);
  }
  return value;
}

var Renderbuffer = /*#__PURE__*/function (_Resource) {
  _inherits(Renderbuffer, _Resource);

  _createClass(Renderbuffer, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          format = _ref.format;

      return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);
    }
  }, {
    key: 'getSamplesForFormat',
    value: function getSamplesForFormat(gl, _ref2) {
      var format = _ref2.format;

      // Polyfilled to return [0] under WebGL1
      return gl.getInternalformatParameter(GL_RENDERBUFFER, format, GL_SAMPLES);
    }
  }]);

  function Renderbuffer(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Renderbuffer);

    var _this = _possibleConstructorReturn(this, (Renderbuffer.__proto__ || Object.getPrototypeOf(Renderbuffer)).call(this, gl, opts));

    _this.initialize(opts);
    Object.seal(_this);
    return _this;
  }

  // Creates and initializes a renderbuffer object's data store


  _createClass(Renderbuffer, [{
    key: 'initialize',
    value: function initialize(_ref3) {
      var format = _ref3.format,
          _ref3$width = _ref3.width,
          width = _ref3$width === undefined ? 1 : _ref3$width,
          _ref3$height = _ref3.height,
          height = _ref3$height === undefined ? 1 : _ref3$height,
          _ref3$samples = _ref3.samples,
          samples = _ref3$samples === undefined ? 0 : _ref3$samples;

      __WEBPACK_IMPORTED_MODULE_3_assert___default()(format, 'Needs format');
      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);

      if (samples !== 0 && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(this.gl)) {
        this.gl.renderbufferStorageMultisample(GL_RENDERBUFFER, samples, format, width, height);
      } else {
        this.gl.renderbufferStorage(GL_RENDERBUFFER, format, width, height);
      }

      // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);

      this.format = format;
      this.width = width;
      this.height = height;
      this.samples = samples;

      return this;
    }
  }, {
    key: 'resize',
    value: function resize(_ref4) {
      var width = _ref4.width,
          height = _ref4.height;

      // Don't resize if width/height haven't changed
      if (width !== this.width || height !== this.height) {
        return this.initialize({ width: width, height: height, format: this.format, samples: this.samples });
      }
      return this;
    }

    // PRIVATE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createRenderbuffer();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteRenderbuffer(this.handle);
    }
  }, {
    key: '_syncHandle',
    value: function _syncHandle(handle) {
      this.format = this.getParameter(GL_RENDERBUFFER_INTERNAL_FORMAT);
      this.width = this.getParameter(GL_RENDERBUFFER_WIDTH);
      this.height = this.getParameter(GL_RENDERBUFFER_HEIGHT);
      this.samples = this.getParameter(GL_RENDERBUFFER_SAMPLES);
    }

    // @param {Boolean} opt.autobind=true - method call will bind/unbind object
    // @returns {GLenum|GLint} - depends on pname

  }, {
    key: '_getParameter',
    value: function _getParameter(pname) {
      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);
      var value = this.gl.getRenderbufferParameter(GL_RENDERBUFFER, pname);
      // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);
      return value;
    }
  }]);

  return Renderbuffer;
}(__WEBPACK_IMPORTED_MODULE_2__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Renderbuffer);
//# sourceMappingURL=renderbuffer.js.map

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Shader */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VertexShader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return FragmentShader; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';

var GL_FRAGMENT_SHADER = 0x8B30;
var GL_VERTEX_SHADER = 0x8B31;
var GL_COMPILE_STATUS = 0x8B81;
var GL_SHADER_TYPE = 0x8B4F;

// For now this is an internal class
var Shader = /*#__PURE__*/function (_Resource) {
  _inherits(Shader, _Resource);

  _createClass(Shader, null, [{
    key: 'getTypeName',
    value: function getTypeName(shaderType) {
      switch (shaderType) {
        case GL_VERTEX_SHADER:
          return 'vertex-shader';
        case GL_FRAGMENT_SHADER:
          return 'fragment-shader';
        default:
          __WEBPACK_IMPORTED_MODULE_4_assert___default()(false);return 'unknown';
      }
    }

    /* eslint-disable max-statements */

  }]);

  function Shader(gl, source, shaderType) {
    _classCallCheck(this, Shader);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["f" /* assertWebGLContext */])(gl);
    __WEBPACK_IMPORTED_MODULE_4_assert___default()(typeof source === 'string', ERR_SOURCE);

    var _this = _possibleConstructorReturn(this, (Shader.__proto__ || Object.getPrototypeOf(Shader)).call(this, gl, { id: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl_utils__["e" /* getShaderName */])(source) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["uid"])(Shader.getTypeName(shaderType)) }));

    _this.shaderType = shaderType;
    _this.source = source;

    _this.opts.source = source;
    _this.initialize(_this.opts);
    return _this;
  }

  _createClass(Shader, [{
    key: 'initialize',
    value: function initialize(_ref) {
      var source = _ref.source;

      var shaderName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl_utils__["e" /* getShaderName */])(source);
      if (shaderName) {
        this.id = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["uid"])(shaderName);
      }
      this._compile(source);
      this.opts.source = source;
    }

    // Accessors

  }, {
    key: 'getParameter',
    value: function getParameter(pname) {
      return this.gl.getShaderParameter(this.handle, pname);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.getTypeName(this.shaderType) + ':' + this.id;
    }
  }, {
    key: 'getName',
    value: function getName() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl_utils__["e" /* getShaderName */])(this.opts.source) || 'unnamed-shader';
    }
  }, {
    key: 'getSource',
    value: function getSource() {
      return this.gl.getShaderSource(this.handle);
    }

    // Debug method - Returns translated source if available

  }, {
    key: 'getTranslatedSource',
    value: function getTranslatedSource() {
      var extension = this.gl.getExtension('WEBGL_debug_shaders');
      return extension ? extension.getTranslatedShaderSource(this.handle) : 'No translated source available. WEBGL_debug_shaders not implemented';
    }

    // PRIVATE METHODS

  }, {
    key: '_compile',
    value: function _compile() {
      this.gl.shaderSource(this.handle, this.source);
      this.gl.compileShader(this.handle);

      // TODO - For performance reasons, avoid checking shader compilation errors on production?
      // TODO - Load log even when no error reported, to catch warnings?
      // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings
      var compileStatus = this.getParameter(GL_COMPILE_STATUS);
      if (!compileStatus) {
        var infoLog = this.gl.getShaderInfoLog(this.handle);

        var _parseGLSLCompilerErr = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl_utils__["f" /* parseGLSLCompilerError */])(infoLog, this.source, this.shaderType),
            shaderName = _parseGLSLCompilerErr.shaderName,
            errors = _parseGLSLCompilerErr.errors,
            warnings = _parseGLSLCompilerErr.warnings;

        __WEBPACK_IMPORTED_MODULE_3__utils__["log"].error(0, 'GLSL compilation errors in ' + shaderName + '\n' + errors);
        __WEBPACK_IMPORTED_MODULE_3__utils__["log"].warn(0, 'GLSL compilation warnings in ' + shaderName + '\n' + warnings);
        throw new Error('GLSL compilation errors in ' + shaderName + '\n' + errors);
      }
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteShader(this.handle);
    }
  }, {
    key: '_getOptsFromHandle',
    value: function _getOptsFromHandle() {
      return {
        type: this.getParameter(GL_SHADER_TYPE),
        source: this.getSource()
      };
    }
  }]);

  return Shader;
}(__WEBPACK_IMPORTED_MODULE_2__resource__["a" /* default */]);

var VertexShader = /*#__PURE__*/function (_Shader) {
  _inherits(VertexShader, _Shader);

  function VertexShader(gl, source) {
    _classCallCheck(this, VertexShader);

    return _possibleConstructorReturn(this, (VertexShader.__proto__ || Object.getPrototypeOf(VertexShader)).call(this, gl, source, GL_VERTEX_SHADER));
  }

  // PRIVATE METHODS


  _createClass(VertexShader, [{
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createShader(GL_VERTEX_SHADER);
    }
  }]);

  return VertexShader;
}(Shader);

var FragmentShader = /*#__PURE__*/function (_Shader2) {
  _inherits(FragmentShader, _Shader2);

  function FragmentShader(gl, source) {
    _classCallCheck(this, FragmentShader);

    return _possibleConstructorReturn(this, (FragmentShader.__proto__ || Object.getPrototypeOf(FragmentShader)).call(this, gl, source, GL_FRAGMENT_SHADER));
  }

  // PRIVATE METHODS


  _createClass(FragmentShader, [{
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createShader(GL_FRAGMENT_SHADER);
    }
  }]);

  return FragmentShader;
}(Shader);
//# sourceMappingURL=shader.js.map

/***/ }),
/* 28 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = toSpherical;
/* harmony export (immutable) */ __webpack_exports__["b"] = toCartesian;
/* unused harmony export clean */
/* unused harmony export vertexOnSphere */
/* unused harmony export subdivide */
/* unused harmony export minSpanningTree */
/* unused harmony export spanningTrees */
/* unused harmony export triangulate */
/* unused harmony export setWeights */
/* unused harmony export graticule */
/* unused harmony export unfold */
/* unused harmony export getSpanningTrees */
/* harmony export (immutable) */ __webpack_exports__["a"] = getBestRotation;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__quad_edge_js__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__obj_js__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_js__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_luma_gl__ = __webpack_require__(46);





const abs = Math.abs;
const sin = Math.sin;
const cos = Math.cos;
const atan2 = Math.atan2;
const acos = Math.acos;
const min = Math.min;
const twoPI = Math.PI * 2;


function toSpherical([x, y, z]) {
  const r = Math.sqrt(x * x + y * y + z * z);
  return [
    r,
    atan2(y, x),
    acos(z / r)
  ];
}

function toCartesian(r, theta, phi) {
  return [
    r * sin(phi) * cos(theta),
    r * sin(phi) * sin(theta),
    r * cos(phi)
  ];
}

function clean(cell) {
  cell.eachFace(f => {
    f.data = {};

    f.eachEdge(e => {
      e.data = {
        w: 0
      };
    });

  });

  cell.eachVertex(v => {
    v.data = {
      iter: 0
    };
  });
}

function vertexOnSphere(cell) {
  cell.eachVertex(v => {
    const [r, theta, phi] = toSpherical(v.pos);
    v.pos = toCartesian(1, theta, phi);
  });
}

function subdivide(cell, iter) {
  const count = cell.getFace().edges();
  if (count == 4) {
    return subdivideSquares(cell, iter);
  } else if (count == 3) {
    return subdivideTriangles(cell, iter);
  } else {
    console.log('Cannot handle current subdivision');
    return cell;
  }
}

function setEdgeWeight(edge, w) {
  if (!edge.data) {
    edge.data = {};
  }
  if (!edge.Sym().data) {
    edge.Sym().data = {};
  }
  edge.data.wi = edge.Sym().data.wi = w;
}

function subdivideTriangles(cell, iter) {
  // get all faces
  // for each face iterate through edges
  // if origin and destination are iteration 0, then add intermediate node
  // store itermediate node
  // create edges/faces from new nodes
  //

  // Assign initial edge weights
  cell.eachFace(f => {
    f.eachEdge(e => setEdgeWeight(e, [0, 0, 1]));
  });

  for (let i = 0; i < iter; i++) {
    let faces = [];
    cell.eachFace(f => faces.push(f));

    faces.forEach(face => {
      let newVertices = [];
      face.eachEdge(edge => {
        const org = edge.Org();
        const dest = edge.Dest();
        const weights = edge.data.wi.slice();
        // will add itermediate vertex and new edge
        if (org.data.iter < i + 1 && dest.data.iter < i + 1) {
          setEdgeWeight(edge, [weights[2], weights[1], (weights[2] + weights[1]) / 2]);
          const newEdge = cell.makeVertexEdge(org, edge.Left(), edge.Right());
          setEdgeWeight(newEdge, [weights[0], weights[2], (weights[0] + weights[2]) / 2]);
          const newVertex = newEdge.Dest();
          // set position and data for new vertex
          newVertex.pos = org.pos.map((p, i) => (p + dest.pos[i]) / 2);
          newVertex.data = { iter: i + 1 };
          newVertices.push(newVertex);
        } else {
          // it's already a new node from another face
          // add it to new Vertices as we still need to create the edges
          if (dest.data.iter >= i + 1 && newVertices.length < 3) {
            newVertices.push(dest);
          }
        }
      });

      // add new faces from new nodes
      // here there should be three vertices
      let newEdge = cell.makeFaceEdge(face, newVertices[0], newVertices[1]);
      setEdgeWeight(newEdge, [iter + 1, iter + 1, iter + 2]);

      newEdge = cell.makeFaceEdge(face, newVertices[1], newVertices[2]);
      setEdgeWeight(newEdge, [iter + 1, iter + 1, iter + 2]);

      newEdge = cell.makeFaceEdge(face, newVertices[2], newVertices[0]);
      setEdgeWeight(newEdge, [iter + 1, iter + 1, iter + 2]);
    });
  }

  return cell;
}

function subdivideSquares(cell, iter) {
  // get all faces
  // for each face iterate through edges
  // if origin and destination are iteration 0, then add intermediate node
  // store itermediate node
  // create edges/faces from new nodes

  cell.eachFace(f => {
    f.eachEdge(e => setEdgeWeight(e, [0, 0, 1]));
  });

  for (let i = 0; i < iter; i++) {
    let faces = [];
    cell.eachFace(f => faces.push(f));

    faces.forEach(face => {
      let newVertices = [];
      face.eachEdge(edge => {
        let org = edge.Org();
        let dest = edge.Dest();
        const weights = edge.data.wi.slice();
        // will add itermediate vertex and new edge
        if (org.data.iter < i + 1 && dest.data.iter < i + 1) {
          setEdgeWeight(edge, [weights[2], weights[1], (weights[2] + weights[1]) / 2]);
          let newEdge = cell.makeVertexEdge(org, edge.Left(), edge.Right());
          setEdgeWeight(newEdge, [weights[0], weights[2], (weights[0] + weights[2]) / 2]);
          let newVertex = newEdge.Dest();
          // set position and data for new vertex
          newVertex.pos = org.pos.map((p, i) => (p + dest.pos[i]) / 2);
          newVertex.data = { iter: i + 1 };
          newVertices.push(newVertex);
        } else {
          // it's already a new node from another face
          // add it to new Vertices as we still need to create the edges
          if (dest.data.iter >= i + 1 && newVertices.length < 4) {
            newVertices.push(dest);
          }
        }
      });

      // divide main square into two rectangles
      let postEdge = cell.makeFaceEdge(face, newVertices[0], newVertices[2]);
      // add intermediate point
      let prevEdge = cell.makeVertexEdge(newVertices[0], postEdge.Left(), postEdge.Right());
      setEdgeWeight(postEdge, [iter + 1, iter + 1, iter + 2]);
      setEdgeWeight(prevEdge, [iter + 1, iter + 1, iter + 2]);

      let center = prevEdge.Dest(); // or postEdge.Org()
      center.pos = newVertices[0].pos.map((p, i) => (p + newVertices[2].pos[i]) / 2);
      center.data = { iter: i + 1 };
      // connect center Vertex to other two vertices
      let newEdge = cell.makeFaceEdge(postEdge.Right(), center, newVertices[1]);
      setEdgeWeight(newEdge, [iter + 1, iter + 1, iter + 2]);
      newEdge = cell.makeFaceEdge(postEdge.Left(), center, newVertices[3]);
      setEdgeWeight(newEdge, [iter + 1, iter + 1, iter + 2]);
    });
  }

  return cell;
}

function getMinEdge(vertices) {
  let ans;
  vertices.forEach(v => {
    v.eachEdge(e => {
      if (!e.Dest().data.flag) {
        if (!ans) {
          ans = e;
        } else {
          if (ans.data.w > e.data.w) {
            ans = e;
          }
        }
      }
    });
  });
  return ans;
}

function getMaxEdge(faces) {
  let ans;
  faces.forEach(f => {
    f.eachEdge(e => {
      if (!e.Right().data.flag) {
        if (!ans) {
          ans = e;
        } else {
          if (ans.data.w < e.data.w) {
            ans = e;
          }
        }
      }
    });
  });
  return [ans.Left(), ans.Right(), ans];
}

function minSpanningTree(cell, v) {
  let totalVertices = 0;
  cell.eachVertex(v => {
    totalVertices++;
    v.data.flag = false;
    v.eachEdge(e => e.data.cut = false);
  });
  const vertices = [v];
  const edges = [];
  let minEdge = false;
  while (vertices.length !== totalVertices) {
    v.data.flag = true;
    let minEdge = getMinEdge(vertices);
    edges.push(minEdge);
    minEdge.data.cut = true;
    if (!~vertices.indexOf(minEdge.Org())) {
      vertices.push(minEdge.Org());
      minEdge.Org().data.flag = true;
    } else {
      vertices.push(minEdge.Dest());
      minEdge.Dest().data.flag = true;
    }
  }
  return edges;
}

// creates both max spanning tree for dual graph
// and min spanning tree for regular graph
// creates a new unfoldable graph
function spanningTrees(cell, f, faceDegree=3) {
  //console.time('spanningB');
  // clean graph flags
  let totalFaces = 0;
  cell.eachFace(f => {
    totalFaces++;
    if (f.data) {
      f.data.flag = false;
    } else {
      f.data = { flag: false };
    }
    f.eachEdge(e => {
      if (e.data) {
        e.data.cut = true;
      } else {
        e.data = { cut: true };
      }
    });
  });
  // compute maxSpanTree
  // create unfoldable graph
  const faces = [f];
  let maxEdge = false;
  const maxSpanTreeDual = [];
  // initialize unfoldable graph
  const unfoldableGraph = { v: [], f: [] };
  const vertexIdToPos = {};
  const posToVertexId = {};
  const faceIdToPos = {};
  const posToFaceId = {};

  const folds = new Set();
  let fold = [];
  // add all vertices of first face
  let lastFace = [];
  faceIdToPos[f.id] = 0;
  posToFaceId[0] = f.id;
  f.eachEdge(e => {
    const org = e.Org();
    const oId = `${f.id} ${org.id}`;
    unfoldableGraph.v.push(org.pos);
    vertexIdToPos[oId] = lastFace.length + 1;
    posToVertexId[lastFace.length + 1] = oId;
    lastFace.push(lastFace.length + 1);
  });
  unfoldableGraph.f.push(lastFace);
  // use Prim's algo to get max spanning tree
  while (faces.length !== totalFaces) {
    f.data.flag = true;
    let [faceFrom, faceTo, maxEdge] = getMaxEdge(faces);
    maxSpanTreeDual.push([faceFrom, faceTo, maxEdge]);
    maxEdge.data.cut = false;
    let faceToAdd = (~faces.indexOf(faceFrom)) ? faceTo : faceFrom;
    faces.push(faceToAdd);
    faceToAdd.data.flag = true;
    const existingFace = faceTo == faceToAdd ? faceFrom : faceTo;
    lastFace = unfoldableGraph.f[faceIdToPos[existingFace.id]];
    let lastFaceVertIds = lastFace.map(i => +posToVertexId[i].split(' ')[1]);
    lastFace = [];
    fold = [];
    faceToAdd.eachEdge(e => {
      const org = e.Org();
      const fId = `${faceToAdd.id} ${org.id}`;
      const eId = `${existingFace.id} ${org.id}`;
      const moId = `${existingFace.id} ${maxEdge.Org().id}`
      const mdId = `${existingFace.id} ${maxEdge.Dest().id}`;
      if (!~lastFaceVertIds.indexOf(org.id)) {
        const id = unfoldableGraph.v.push(org.pos);
        lastFace.push(id);
        vertexIdToPos[fId] = id;
        posToVertexId[id] = fId;
      } else {
        lastFace.push(vertexIdToPos[eId]);
        vertexIdToPos[fId] = vertexIdToPos[eId];
      }
      if (org.id == maxEdge.Org().id || org.id == maxEdge.Dest().id) {
          folds.add(`${vertexIdToPos[moId]}-${vertexIdToPos[mdId]}`);
          folds.add(`${vertexIdToPos[mdId]}-${vertexIdToPos[moId]}`);
      }
    });
    posToFaceId[unfoldableGraph.f.push(lastFace) - 1] = faceToAdd.id;
    faceIdToPos[faceToAdd.id] = unfoldableGraph.f.length -1;
  }

  //console.timeEnd('spanningB');
  const unfoldable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__obj_js__["a" /* JSONReadCell */])(unfoldableGraph);
  const flagEdge = new Set();
  const foldsFrom = [];
  const foldsTo = [];
  const cutsFrom = [];
  const cutsTo = [];
  const faceIter = [];
  let outsideFace;
  unfoldable.eachFace(f => {
    if (f.edges() > faceDegree) {
      outsideFace = f;
    }
  });
  outsideFace.eachEdge(e => {
    if (!e.data) {
      e.data = {};
    }
    if (!e.Sym().data) {
      e.Sym().data = {};
    }
    e.data.cut = e.Sym().data.cut = true;
    cutsFrom.push.apply(cutsFrom, e.Org().pos);
    cutsTo.push.apply(cutsTo, e.Dest().pos);
  });
  unfoldable.eachFace(f => {
    if (f.edges() > faceDegree) {
      return;
    }
    faceIter.push(f);
    f.eachEdge(e => {
      if (!e.data) {
        e.data = {};
      }
      if (!e.Sym().data) {
        e.Sym().data = {};
      }
      if (!e.data.cut) {
        e.data.cut = e.Sym().data.cut = false;
        foldsFrom.push.apply(foldsFrom, e.Left().getCentroid());
        foldsTo.push.apply(foldsTo, e.Right().getCentroid());
      }
    });
  });
  /*
  // add intermediate edge with high weight
  if (faceDegree !== 3) {
    faceIter.forEach(face => {
      if (face.edges() !== faceDegree) {
        return;
      }
      if (faceDegree === 4) {
        const newEdge = unfoldable.makeFaceEdge(face, face.getEdge().Lnext().Dest(), face.getEdge().Org());
        newEdge.data = newEdge.Sym().data = {
          cube: true,
          w: Number.Infinity,
          wi: [0, 0, Number.Infinity]
        };
        let left = newEdge.Left();
        let right = newEdge.Right();
        let newFace = left == face ? right : left;
        newFace.data = {
          clone: true,
          ref: newFace == right ? left : right
        };
      // ASsuming degree 5 here (dodecahedron)
      } else {
        let vertices = [];
        face.eachEdge(e => vertices.push(e.Org()));
        // divide main pentagon into two areas
        let postEdge = unfoldable.makeFaceEdge(face, vertices[0], vertices[2]);
        // add intermediate point
        let prevEdge = unfoldable.makeVertexEdge(vertices[0], postEdge.Left(), postEdge.Right());

        let center = prevEdge.Dest(); // or postEdge.Org()
        let pos = [0, 0, 0];
        vertices.forEach(v => {
          pos = add(pos, v.pos);
        });
        pos = prod(pos, 0.2);
        center.pos = pos;
        // connect center Vertex to other two vertices
        let newEdge = unfoldable.makeFaceEdge(postEdge.Right(), center, vertices[1]);
        newEdge = unfoldable.makeFaceEdge(postEdge.Left(), center, vertices[4]);
        newEdge = unfoldable.makeFaceEdge(newEdge.Right(), center, vertices[3]);
      }
    });
  }*/

  if (faceDegree !== 3) {
    triangulate(unfoldable, faceDegree);
  }

  return [[foldsFrom, foldsTo], [cutsFrom, cutsTo], unfoldable];
}

function triangulate(unfoldable, faceDegree=3) {
  const faceIter = [];
  unfoldable.eachFace(f => {
    if (faceDegree == 'voronoi' || f.edges() === faceDegree) {
      faceIter.push(f);
    }
  });
  // add intermediate edge with high weight
  faceIter.forEach(face => {
    if (faceDegree !== 'voronoi' && face.edges() !== faceDegree) {
      return;
    }
    if (faceDegree === 4) {
      const newEdge = unfoldable.makeFaceEdge(face, face.getEdge().Lnext().Dest(), face.getEdge().Org());
      newEdge.data = newEdge.Sym().data = {
        cube: true,
        w: Number.Infinity,
        wi: [0, 0, Number.Infinity]
      };
      let left = newEdge.Left();
      let right = newEdge.Right();
      let newFace = left == face ? right : left;
      newFace.data = {
        clone: true,
        ref: newFace == right ? left : right
      };
    // ASsuming degree 5 here (dodecahedron)
    } else if (faceDegree === 5) {
      let vertices = [];
      face.eachEdge(e => vertices.push(e.Org()));
      // divide main pentagon into two areas
      let postEdge = unfoldable.makeFaceEdge(face, vertices[0], vertices[2]);
      // add intermediate point
      let prevEdge = unfoldable.makeVertexEdge(vertices[0], postEdge.Left(), postEdge.Right());

      let center = prevEdge.Dest(); // or postEdge.Org()
      let pos = [0, 0, 0];
      vertices.forEach(v => {
        pos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(pos, v.pos);
      });
      pos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(pos, 0.2);
      center.pos = pos;
      // connect center Vertex to other two vertices
      let newEdge = unfoldable.makeFaceEdge(postEdge.Right(), center, vertices[1]);
      newEdge = unfoldable.makeFaceEdge(postEdge.Left(), center, vertices[4]);
      newEdge = unfoldable.makeFaceEdge(newEdge.Right(), center, vertices[3]);
      // voronoi cell / convex hull
    } else if (faceDegree == 'voronoi') {
      if (face.edges() <= 3) {
        return;
      }
      let vertices = [];
      face.eachEdge(e => vertices.push(e.Org()));
      // divide cell into two areas
      let postEdge = unfoldable.makeFaceEdge(face, vertices[0], vertices[2]);
      postEdge.data = postEdge.Sym().data = {
        cube: true,
        w: Number.Infinity,
        wi: [0, 0, Number.Infinity]
      };
      // add intermediate point
      let prevEdge = unfoldable.makeVertexEdge(vertices[0], postEdge.Left(), postEdge.Right());
      prevEdge.data = prevEdge.Sym().data = {
        cube: true,
        w: Number.Infinity,
        wi: [0, 0, Number.Infinity]
      };

      let center = prevEdge.Dest(); // or postEdge.Org()
      let pos = [0, 0, 0];
      vertices.forEach(v => {
        pos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(pos, v.pos);
      });
      pos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(pos, 1 / face.edges());
      center.pos = pos;
      // connect center Vertex to other two vertices
      let newEdge = unfoldable.makeFaceEdge(postEdge.Right(), center, vertices[1]);
      newEdge.data = newEdge.Sym().data = {
        cube: true,
        w: Number.Infinity,
        wi: [0, 0, Number.Infinity]
      };

      if (vertices.length > 3) {
        newEdge = unfoldable.makeFaceEdge(postEdge.Left(), center, vertices[vertices.length -1]);
        newEdge.data = newEdge.Sym().data = {
          cube: true,
          w: Number.Infinity,
          wi: [0, 0, Number.Infinity]
        };
        for (let j = vertices.length -2; j > 2; j--) {
          newEdge = unfoldable.makeFaceEdge(newEdge.Right(), center, vertices[j]);
          newEdge.data = newEdge.Sym().data = {
            cube: true,
            w: Number.Infinity,
            wi: [0, 0, Number.Infinity]
          };
        }
      }
      //newEdge = unfoldable.makeFaceEdge(postEdge.Left(), center, vertices[4]);
      //newEdge = unfoldable.makeFaceEdge(newEdge.Right(), center, vertices[3]);
    }
  });
}

function setWeights(cell, f) {
  cell.eachFace(face => face.eachEdge(e => {
    if (!e.data) {
      e.data = {};
    }
    f(e);
  }));
}

function graticule(theta, phi, W_theta, W_phi, theta0, phi0) {
  let d1 = Math.min(abs(theta - theta0), abs(theta - theta0 + 2 * Math.PI));
  let d2 = abs(phi - phi0);
  return - (W_phi * d2 + W_theta * d1);
}

// Assuming triangles here
function unfold(faceStart, scale) {
  if (!faceStart.data) {
    faceStart.data = { visited: false };
  }
  const visited = !faceStart.data.visited;
  const queue = [ faceStart ];
  // This will be reference face and will stay fixed
  faceStart.eachEdge(e => {
    e.Org().npos = e.Org().pos.slice();
  });
  while (queue.length) {
    let current = queue.shift();
    if (!current.data) {
      current.data = {};
    }
    current.data.visited = visited;
    current.eachEdge(e => {
      const r = e.Org();
      const q = e.Dest();
      const p = e.Lnext().Dest();
      const face = e.Right();
      if (face.edges() !== 3) {
        return;
      }
      if (face.data.visited !== visited) {
        let sym = e.Sym();
        const s = sym.Lnext().Dest();
        const QS = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(s.pos, q.pos);
        const QR = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(r.pos, q.pos);
        const RQ = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(q.pos, r.pos);
        const RP = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(p.pos, r.pos);
        const a1 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["d" /* angleBetweenVectors */])(QS, QR);
        const nQS = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["e" /* norm */])(QS);
        const proj = [cos(a1) * nQS, sin(a1) * nQS];
        const a2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["d" /* angleBetweenVectors */])(RP, RQ);
        const nRP = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["e" /* norm */])(RP);
        const proj2 = [cos(a2) * nRP, sin(a2) * nRP];

        const uQpRp = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(r.npos, q.npos));
        const uRpQp = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(uQpRp, -1);
        const pi = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(r.npos, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(uRpQp, proj2[0]));
        const uPiP = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(pi, p.npos));
        const uQpPp = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(p.npos, q.npos));
        const si = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(q.npos, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(uQpRp, proj[0]));

        const rotationAxis = uQpRp;
        let sii = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(si, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(uPiP, proj[1]));
        s.npos = sii;
        //const n = current.getNormal('npos');
        //const n2 = face.getNormal('npos');
        const nPQR = current.getNormal();
        const nRQS = face.getNormal();
        const original = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["d" /* angleBetweenVectors */])(nPQR, nRQS);
        //const alpha = angleBetweenVectors(n, n2);
        //let theta = alpha - original * scale;
        let theta = - original * scale;
        //let mix = prod(add(r.npos, r.npos), 0.5);
        sii = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(sii, q.npos);
        //sii = sub(sii, mix);
        let temp1 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(sii, cos(theta));
        let temp2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["g" /* cross */])(rotationAxis, sii), sin(theta));
        let temp3 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(rotationAxis, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["h" /* dot */])(rotationAxis, sii) * (1 - cos(theta)));
        let rodriguesRot = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(temp1, temp2), temp3);
        s.npos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(rodriguesRot, q.npos);
        // TODO(nico): Hack for cube, should actually understand why the rotation axis is wrong.
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["e" /* norm */])(s.npos) < __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["e" /* norm */])(s.pos)) {
          s.npos = s.pos.slice();
        }
        //s.npos = add(rodriguesRot, mix);
        // add face to queue and flag it
        if (!face.data) {
          face.data = {};
        }
        face.data.visited = visited;
        queue.push(face);
      }
    });
  }
}

function getSpanningTrees(unfoldable, pos) {
  const flagEdge = new Set();
  const foldsFrom = [];
  const foldsTo = [];
  const cutsFrom = [];
  const cutsTo = [];
  unfoldable.eachFace(f => {
    if (f.edges() > 3) {
      return;
    }
    f.eachEdge(e => {
      if (flagEdge.has(e.id)) {
        return;
      }
      flagEdge.add(e.id);
      if (!e.data.cut) {
        foldsFrom.push.apply(foldsFrom, e.Left().getCentroid(pos));
        foldsTo.push.apply(foldsTo, e.Right().getCentroid(pos));
      } else {
        cutsFrom.push.apply(cutsFrom, e.Org()[pos]);
        cutsTo.push.apply(cutsTo, e.Dest()[pos]);
      }
    });
  });
  return [[foldsFrom, foldsTo], [cutsFrom, cutsTo]];
}



// creates both max spanning tree for dual graph
// and min spanning tree for regular graph
// creates a new unfoldable graph
function weightSpanningTrees(cell, f, faceDegree=3) {
  // clean graph flags
  let totalFaces = 0;
  cell.eachFace(f => {
    totalFaces++;
    if (f.data) {
      f.data.flag = false;
    } else {
      f.data = { flag: false };
    }
    f.eachEdge(e => {
      if (e.data) {
        e.data.cut = true;
      } else {
        e.data = { cut: true };
      }
    });
  });
  // compute maxSpanTree
  // create unfoldable graph
  const faces = [f];
  let maxEdge = false;
  // initialize unfoldable graph
  const unfoldableGraph = { v: [], f: [] };
  const vertexIdToPos = {};
  const posToVertexId = {};
  const faceIdToPos = {};
  const posToFaceId = {};

  const folds = new Set();
  let fold = [];
  // add all vertices of first face
  let lastFace = [];
  faceIdToPos[f.id] = 0;
  posToFaceId[0] = f.id;
  f.eachEdge(e => {
    const org = e.Org();
    const oId = `${f.id} ${org.id}`;
    unfoldableGraph.v.push(org.pos);
    vertexIdToPos[oId] = lastFace.length + 1;
    posToVertexId[lastFace.length + 1] = oId;
    lastFace.push(lastFace.length + 1);
  });
  unfoldableGraph.f.push(lastFace);
  // use Prim's algo to get max spanning tree
  while (faces.length !== totalFaces) {
    f.data.flag = true;
    let [faceFrom, faceTo, maxEdge] = getMaxEdge(faces);
    maxEdge.data.cut = false;
    maxEdge.Sym().data.cut = false;
    let faceToAdd = (~faces.indexOf(faceFrom)) ? faceTo : faceFrom;
    faces.push(faceToAdd);
    faceToAdd.data.flag = true;
    const existingFace = faceTo == faceToAdd ? faceFrom : faceTo;
    lastFace = unfoldableGraph.f[faceIdToPos[existingFace.id]];
    let lastFaceVertIds = lastFace.map(i => +posToVertexId[i].split(' ')[1]);
    lastFace = [];
    fold = [];
    faceToAdd.eachEdge(e => {
      const org = e.Org();
      const fId = `${faceToAdd.id} ${org.id}`;
      const eId = `${existingFace.id} ${org.id}`;
      const moId = `${existingFace.id} ${maxEdge.Org().id}`
      const mdId = `${existingFace.id} ${maxEdge.Dest().id}`;
      if (!~lastFaceVertIds.indexOf(org.id)) {
        const id = unfoldableGraph.v.push(org.pos);
        lastFace.push(id);
        vertexIdToPos[fId] = id;
        posToVertexId[id] = fId;
      } else {
        lastFace.push(vertexIdToPos[eId]);
        vertexIdToPos[fId] = vertexIdToPos[eId];
      }
      if (org.id == maxEdge.Org().id || org.id == maxEdge.Dest().id) {
          folds.add(`${vertexIdToPos[moId]}-${vertexIdToPos[mdId]}`);
          folds.add(`${vertexIdToPos[mdId]}-${vertexIdToPos[moId]}`);
      }
    });
    posToFaceId[unfoldableGraph.f.push(lastFace) - 1] = faceToAdd.id;
    faceIdToPos[faceToAdd.id] = unfoldableGraph.f.length -1;
  }

  let weightAcum = 0;
  cell.eachFace(f => {
    f.eachEdge(e => {
      if (e.data.cut) {
        weightAcum += e.data.w;
      }
    });
  });

  return weightAcum;
}

function getPixel(x, y, img) {
  return img.data[y * (img.width * 4) + x * 4];
}

function rotate(cell, x, y, z) {
  let mat = new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["a" /* Matrix4 */]();
  mat.rotateX(x);
  mat.rotateY(y);
  mat.rotateZ(z);

  cell.eachVertex(v => {
    let pos = v.pos.slice();
    pos.push(1);
    let posVec = mat.transformVector4(pos);
    v.posVec = posVec;
  });
}

function setSampledWeights(cell, img, ctx) {
  const samples = 25;
  cell.eachFace(f => {
    f.eachEdge(e => {
      if (!e.data) {
        e.data = e.Sym().data = {};
      }
      e.data.w = -1;
    })
  });

  cell.eachFace(f => {
    f.eachEdge(e => {
      if (e.data.w > -1) {
        return;
      }
      e.data.w = 0;
      let org = e.Org().posVec;
      let dest = e.Dest().posVec;
      for (let i = 0; i <= samples; i++) {
        let w1 = i / samples;
        let w2 = (samples - i) / samples;
        let midPoint = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(org, w1), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(dest, w2));
        let [r, theta, phi] = toSpherical(midPoint);
        // normalize to 0-1
        let x = (theta + Math.PI) / (Math.PI * 2);
        let y = phi / Math.PI;
        // set to with and height
        x = Math.round(x * img.width);
        y = Math.round(y * img.height);

        let pixel = getPixel(x, y, img);
        e.data.w += pixel;
        e.Sym().data.w = e.data.w;

        //if (ctx) {
          //ctx.fillStyle = 'red';
          //if (e.data.w == 0) {
            //ctx.fillStyle = 'green';
          //}
          //ctx.fillRect(x - 3, y - 3, 6, 6);
        //}
      }
    });
  });
}

function getFace(cell, faceDegree) {
  let face;
  cell.eachFace(f => {
    if (f.edges() == faceDegree) {
      face = f;
    }
  });
  return face;
}

function getBestRotation(obj, img, ctx) {
  const cell = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__obj_js__["a" /* JSONReadCell */])(obj);
  let minWeight = Infinity;
  let rot = [0, 0, 0];
  const step = 0.1;
  const twoPi = Math.PI * 2;
  const pi = Math.PI;
  let faceDegree = obj.f[0].length;
  let face = getFace(cell, faceDegree);

  for (let x = 0; x < twoPi && minWeight !== 0; x += step) {
    for (let y = 0; y < twoPi && minWeight !== 0; y += step) {
      for (let z = 0; z < twoPi && minWeight !== 0; z += step) {
        rotate(cell, x, y, z);
        setSampledWeights(cell, img);
        let weight = weightSpanningTrees(cell, face, faceDegree);
        if (weight < minWeight) {
          //console.log(weight);
          minWeight = weight;
          rot = [x, y, z];
        }
      }
    }
  }

  //console.log('minWeight', minWeight);
  // from the minimum angles recompute the weights
  let [x, y, z] = rot;
  rotate(cell, x, y, z);
  setSampledWeights(cell, img, ctx);
  let clone = JSON.parse(JSON.stringify(obj));
  clone.v = [];
  clone.w = {};
  cell.eachFace(f => {
    f.eachEdge(e => {
      const org = e.Org();
      const dest = e.Dest();
      clone.v[org.id] = [org.posVec[0], org.posVec[1], org.posVec[2]];
      clone.v[dest.id] = [dest.posVec[0], dest.posVec[1], dest.posVec[2]];
      const id = org.id < dest.id ? `${org.id}-${dest.id}` : `${dest.id}-${org.id}`;
      if (id in clone.w) {
        return;
      }
      clone.w[id] = e.data.w;
    });
  });

  console.log(JSON.stringify(clone, null, 2));

  return clone;
}




/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_js__ = __webpack_require__(19);


class QuadEdge {
  constructor() {
    const edges = [new Edge(),
                   new Edge(),
                   new Edge(),
                   new Edge()];

    // assign the quadedge parent since we cannot use memory addresses
    // to point to next edges (which is also pretty hacky TBH)
    edges.forEach((e) => e.quadEdge = this);

    edges[0].index = 0;
    edges[1].index = 1;
    edges[2].index = 2;
    edges[3].index = 3;

    edges[0].next = edges[0];
    edges[1].next = edges[3];
    edges[2].next = edges[2];
    edges[3].next = edges[1];

    const id = Edge.nextId;

    edges[0].id = id+0;
    edges[1].id = id+1;
    edges[2].id = id+2;
    edges[3].id = id+3;

    Edge.nextId = id+4;

    this.edges = edges;
  }

}
/* unused harmony export QuadEdge */


class Edge {
  constructor() {
    this.data = 0;
    this.vertex = 0;
    this.face = 0;
    this.index = 0;
    this.id = 0;
    this.quadEdge = 0;
  }

  static make() {
    return new QuadEdge().edges[0];
  }

  static kill(edge) {
    Edge.splice(edge, edge.Oprev());
    Edge.splice(edge.Sym(), edge.Sym().Oprev());

    // free the quad edge that the edge belongs to
    //delete (QuadEdge*)(edge-edge->index);
  }

  static splice(a, b) {
    const alpha = a.Onext().Rot();
    const beta  = b.Onext().Rot();

    const t1 = b.Onext();
    const t2 = a.Onext();
    const t3 = beta.Onext();
    const t4 = alpha.Onext();

    a.next     = t1;
    b.next     = t2;
    alpha.next = t3;
    beta.next  = t4;
  }

  getId() {
    return id;
  }

  Rot() {
    return this.index<3 ?
      this.quadEdge.edges[this.index+1]
      : this.quadEdge.edges[this.index-3];
  }

  InvRot() {
    return this.index>0 ?
      this.quadEdge.edges[this.index-1]
      : this.quadEdge.edges[this.index+3];
  }

  Sym() {
    return this.index<2 ?
      this.quadEdge.edges[this.index+2]
      : this.quadEdge.edges[this.index-2];
  }

  Onext() {
    return this.next;
  }

  Oprev() {
    return this.Rot().Onext().Rot();
  }

  Dnext() {
    return this.Sym().Onext().Sym();
  }

  Dprev() {
    return this.InvRot().Onext().InvRot();
  }

  Lnext() {
    return this.InvRot().Onext().Rot();
  }

  Lprev() {
    return this.Onext().Sym();
  }

  Rnext() {
    return this.Rot().Onext().InvRot();
  }

  Rprev() {
    return this.Sym().Onext();
  }

  Org() {
    return this.vertex;
  }

  Dest() {
  return this.Sym().vertex;
  }

  Left() {
    return this.Rot().face;
  }

  Right() {
    return this.InvRot().face;
  }

  setId(id) {
    this.id = id;
  }

  setOrg(org) {
    this.vertex = org;
    org.addEdge(this);
  }

  setDest(dest) {
    this.Sym().vertex = dest;
    dest.addEdge(this.Sym());
  }

  setLeft(left) {
    this.Rot().face = left;
    left.addEdge(this);
  }

  setRight(right) {
    this.InvRot().face = right;
    right.addEdge(this.Sym());
  }
}
/* unused harmony export Edge */


Edge.nextId = 0;

class Vertex {

  static make(cell) {
    return new Vertex(cell);
  }

  static kill() {
    this.cell.removeVertex(this);
  }

  constructor(cell) {
    this.pos = [0, 0, 0];
    this.cell = cell;
    this.id = cell.makeVertexId();
    this.data = 0;
    this.edge = 0;

    cell.addVertex(this);
  }

  setId(id) {
    this.id = id;
  }

  addEdge(edge) {
    this.edge = edge;
  }

  removeEdge(edge) {
    const next = edge.Onext();
    this.edge = next != edge ? next : 0;
  }

  getCell() {
    return this.cell;
  }

  getId() {
    return this.id;
  }

  getEdge() {
    return this.edge;
  }

  eachEdge(f) {
    let start = this.edge;
    let current = start;
    do {
      f(current);
      current = current.Onext();
    } while(current && current !== start);
  }
}
/* unused harmony export Vertex */


class Face {

  static make(cell) {
    return new Face(cell);
  }

  constructor(cell) {
    this.cell = cell;
    this.id = cell.makeFaceId();
    this.data = 0;
    this.edge = 0;

    cell.addFace(this);
  }

  getCell() {
    return this.cell;
  }

  getID() {
    return this.id;
  }

  getEdge() {
    return this.edge;
  }

  setId(id) {
    this.id = id;
  }

  addEdge(edge) {
    this.edge = edge;
  }

  removeEdge(edge) {
    const next = edge.Onext();
    this.edge = next != edge ? next : 0;
  }

  eachEdge(f) {
    let start = this.getEdge();
    let edge = start;
    let current = edge;

    do {
      f(current);
      current = current.Lnext();
    } while (current && current !== start);
  }

  edges() {
    let acum = 0;
    this.eachEdge(e => acum++);
    return acum;
  }

  getNormal(pos='pos') {
    const centroid = this.getCentroid(pos);
    const edge = this.getEdge();
    const org = edge.Org()[pos];
    const dest = edge.Dest()[pos];
    const u1 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["f" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["c" /* sub */])(org, centroid));
    const u2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["f" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["c" /* sub */])(dest, centroid));
    const ans = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["g" /* cross */])(u1, u2);
    return ans;
  }

  getCentroid(pos='pos') {
    let count = 0;
    const centroid = [0, 0, 0];
    this.eachEdge(e => {
      const ePos = e.Org()[pos];
      centroid[0] += ePos[0];
      centroid[1] += ePos[1];
      centroid[2] += ePos[2];
      count++;
    });
    centroid.forEach((p, i) => {
      centroid[i] = p / count;
    });
    return centroid;
  }
}
/* unused harmony export Face */


class Cell {
  static make() {
    // create a looping edge that connects to itself at a single vertex
    // the edge delimits two faces
    // this is the smallest cell that is consistent with our invariants
    const cell = new Cell();
    const vertex = Vertex.make(cell);
    const leftFace = Face.make(cell);
    const rightFace = Face.make(cell);
    //TODO(nico): assuming the first edge is taken
    const edge = Edge.make().InvRot();

    edge.setOrg(vertex);
    edge.setDest(vertex);
    edge.setLeft(leftFace);
    edge.setRight(rightFace);

    return cell;
  }

  static makeTetrahedron() {
    // use the Euler operators to construct a tetrahedron
    const cell = Cell.make();

    // grab the initial vertex

    let vertex1;

    cell.eachVertex((v) => vertex1 = v);

    // grab the initial edge and the initial faces

    const edge1 = vertex1.getEdge();
    const leftFace  = edge1.Left();
    const rightFace = edge1.Right();

    // drop in four vertices along the initial edge

    const vertex2 = cell.makeVertexEdge(vertex1, leftFace, rightFace).Dest();
    const vertex3 = cell.makeVertexEdge(vertex2, leftFace, rightFace).Dest();
    const vertex4 = cell.makeVertexEdge(vertex3, leftFace, rightFace).Dest();

    // cut each of the faces in half from complementary vertices

    cell.makeFaceEdge(leftFace, vertex2, vertex4).Right();
    cell.makeFaceEdge(rightFace, vertex1, vertex3).Right();

    return cell;
  }

  constructor() {
    this.vertices = [];
    this.vertexId = 1;
    this.faces    = [];
    this.faceId   = 1;
  }

  eachVertex(f) {
    this.vertices.forEach(f);
  }

  getFace() {
    return this.faces[0];
  }

  eachFace(f) {
    this.faces.forEach(f);
  }

  /* -- (Euler operators) ---------------------------- */

  makeVertexEdge(vertex, leftFace, rightFace) {

    // locate the edges to the right of each of the faces in the orbit of the
    // vertex

    const edge  = vertex.getEdge();
    const edge1 = this.getOrbitLeft(edge, rightFace);
    const edge2 = this.getOrbitLeft(edge, leftFace);

    if (edge1==0) {
      console.error(edge1);
      return;
    }

    if (edge2==0) {
      console.error(edge2);
      return;
    }

    // create a new vertex and copy the position of the vertex of origin

    const vertexNew = Vertex.make(this);

    vertexNew.pos = vertex.pos.slice();

    // create a new edge and rotate it to make a clockwise loop

    const edgeNew = Edge.make().Rot();

    // connect the origin (and destination) of the new edge to _vertex_ so that
    // the left face of the edge is _left_
    // this makes a loop on the inside of _left_

    Edge.splice(edge2, edgeNew);

    // split the origin and destination of the loop so that the right face of the
    // edge is now _right_
    // this results in a non-loop edge dividing _left_ from _right_

    Edge.splice(edge1, edgeNew.Sym());

    // initialize the secondary attributes of the new edge

    edgeNew.setOrg(edge1.Org());
    edgeNew.setLeft(edge2.Left());
    edgeNew.setRight(edge1.Left());

    // all edges leaving the destination orbit of the new edge now have the new
    // vertex as their vertex of origin

    this.setOrbitOrg(edgeNew.Sym(), vertexNew);

    return edgeNew;
  }

  killVertexEdge(edge) {
    // locate _edge1_ and _edge2_ as in _makeVertexEdge_

    let edge1 = edge.Oprev();
    let edge2 = edge.Lnext();

    // use _edge1_ for _edge2_ if the destination vertex is isolated

    if (edge2 === edge.Sym())
      edge2 = edge1;

    // inverse of _makeVertexEdge_

    Edge.splice(edge1, edge.Sym());
    Edge.splice(edge2, edge);

    // all edges leaving the destination orbit of the deleted edge now have its
    // origin vertex as their vertex of origin

    this.setOrbitOrg(edge2, edge1.Org());

    // don't use the deleted edge as a reference edge any more

    edge1.Org().addEdge(edge1);
    edge1.Left().addEdge(edge1);
    edge2.Left().addEdge(edge2);

    // reclaim the vertex and the edge

    Vertex.kill(edge.Dest());
    Edge.kill(edge);
  }

  makeFaceEdge(face, org, dest) {
    // locate the edges leaving each of the vertices in the orbit of the face

    let edge  = face.getEdge();
    let edge1 = this.getOrbitOrg(edge, org);
    let edge2 = this.getOrbitOrg(edge, dest);

    if (edge1==0) {
      console.error(edge1);
      return;
    }

    if (edge2==0) {
      console.error(edge2);
      return;
    }

    // create a new face

    let faceNew = Face.make(this);

    // create a new (non-loop) edge

    let edgeNew = Edge.make();

    // connect the destination of the new edge to the origin of _edge2_
    // both faces of the edge are now _face_

    Edge.splice(edge2, edgeNew.Sym());

    // connect the origin of the new edge to _edge1_
    // _face_ is split in half along the new edge, with the new face introduced
    // on the right

    Edge.splice(edge1, edgeNew);

    // initialize the secondary attributes of the new edge

    edgeNew.setOrg(edge1.Org());
    edgeNew.setDest(edge2.Org());
    edgeNew.setLeft(edge2.Left());

    // all edges in the right orbit of the new edge (i.e. the left orbit of its
    // Sym) now have the new face as their left face

    this.setOrbitLeft(edgeNew.Sym(), faceNew);

    return edgeNew;
  }

  killFaceEdge(edge) {

    // locate _edge1_ and _edge2_ as in _makeFaceEdge_

    let edge1 = edge.Oprev();
    let edge2 = edge.Lnext();

    // use _edge2_ for _edge1_ if the right face is inside a loop

    if (edge1 === edge.Sym())
      edge1 = edge2;

    // inverse of _makeFaceEdge_

    Edge.splice(edge2, edge.Sym());
    Edge.splice(edge1, edge);

    // all edges in the right orbit of the deleted edge now have its left face
    // as their left face

    this.setOrbitLeft(edge1, edge2.Left());

    // don't use the deleted edge as a reference edge any more

    edge1.Org().addEdge(edge1);
    edge2.Org().addEdge(edge2);
    edge2.Left().addEdge(edge2);

    // reclaim the face and the edge

    Face.kill(edge.Right());
    Edge.kill(edge);
  }

  addVertex(vertex) {
    // add the vertex to the end of the array
    this.vertices.push(vertex);
  }

  removeVertex(vertex) {
    this.vertices = this.vertices.splice(this.vertices.indexOf(vertex), 1);
  }

  addFace(face) {
    this.faces.push(face);
  }

  removeFace(face) {
     this.faces = this.vertices.splice(this.vertices.indexOf(face), 1);
  }

  getOrbitOrg(edge, org) {
    // traverse the Lnext orbit of _edge_ looking for an edge whose origin is
    // _org_

    let scan = edge;

    do {
      if (scan.Org() === org) {
        return scan;
      }

      scan = scan.Lnext();
    } while (scan !== edge);

    return 0;
  }

  setOrbitOrg(edge, org) {
    // traverse the Onext orbit of _edge_, setting the origin of each edge to
    // _org_

    let scan = edge;

    do {
      scan.setOrg(org);

      scan = scan.Onext();
    } while (scan !== edge);
  }

  getOrbitLeft(edge, left) {
    // traverse the Onext orbit of _edge_ looking for an edge whose left face is
    // _left

    let scan = edge;

    do {
      if (scan.Left() === left)
        return scan;

      scan = scan.Onext();
    } while (scan !== edge);

    return 0;
  }

  setOrbitLeft(edge, left) {
    // traverse the Lnext orbit of _edge_, setting the left face of each edge to
    // _left_

    let scan = edge;

    do {
      scan.setLeft(left);

      scan = scan.Lnext();
    } while (scan !== edge);
  }

  makeVertexId() {
    return this.vertexId++;
  }

  makeFaceId() {
    return this.faceId++;
  }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Cell;



/***/ }),
/* 31 */
/***/ (function(module, exports) {

module.exports = dot;

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
}

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = normalize;

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
function normalize(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2]
    var len = x*x + y*y + z*z
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len)
        out[0] = a[0] * len
        out[1] = a[1] * len
        out[2] = a[2] * len
    }
    return out
}

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defaultVertex = __webpack_require__(166);

var _defaultVertex2 = _interopRequireDefault(_defaultVertex);

var _defaultFragment = __webpack_require__(164);

var _defaultFragment2 = _interopRequireDefault(_defaultFragment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Default Shaders
var defaultUniforms = __webpack_require__(165);

exports.default = {
  vs: _defaultVertex2.default,
  fs: _defaultFragment2.default,
  defaultUniforms: defaultUniforms
};
//# sourceMappingURL=index.js.map

/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = validateVector2;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_array__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec2_set__ = __webpack_require__(134);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec2_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_gl_vec2_set__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec2_add__ = __webpack_require__(124);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec2_add___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_gl_vec2_add__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec2_subtract__ = __webpack_require__(135);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec2_subtract___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_gl_vec2_subtract__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec2_multiply__ = __webpack_require__(129);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec2_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_gl_vec2_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec2_divide__ = __webpack_require__(126);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec2_divide___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_vec2_divide__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec2_scale__ = __webpack_require__(132);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec2_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_vec2_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec2_scaleAndAdd__ = __webpack_require__(133);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec2_scaleAndAdd___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_vec2_scaleAndAdd__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec2_negate__ = __webpack_require__(130);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec2_negate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_vec2_negate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec2_normalize__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec2_normalize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_vec2_normalize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec2_dot__ = __webpack_require__(127);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec2_dot___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_vec2_dot__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec2_cross__ = __webpack_require__(125);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec2_cross___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_vec2_cross__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec2_lerp__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec2_lerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_vec2_lerp__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




// gl-matrix is too big. Cherry-pick individual imports from stack.gl version
/* eslint-disable camelcase */













function validateVector2(v) {
  return v.length === 2 && Number.isFinite(v[0]) && Number.isFinite(v[1]);
}

var Vector2 = function (_MathArray) {
  _inherits(Vector2, _MathArray);

  // Creates a new, empty vec2
  function Vector2() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    _classCallCheck(this, Vector2);

    var _this = _possibleConstructorReturn(this, (Vector2.__proto__ || Object.getPrototypeOf(Vector2)).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y);
    }
    return _this;
  }

  _createClass(Vector2, [{
    key: 'set',
    value: function set(x, y) {
      __WEBPACK_IMPORTED_MODULE_2_gl_vec2_set___default()(this, x, y);
      this.check();
      return this;
    }

    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

  }, {
    key: 'add',

    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

    value: function add() {
      for (var _len = arguments.length, vectors = Array(_len), _key = 0; _key < _len; _key++) {
        vectors[_key] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = vectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var vector = _step.value;

          __WEBPACK_IMPORTED_MODULE_3_gl_vec2_add___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this;
    }
  }, {
    key: 'subtract',
    value: function subtract() {
      for (var _len2 = arguments.length, vectors = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        vectors[_key2] = arguments[_key2];
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = vectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var vector = _step2.value;

          __WEBPACK_IMPORTED_MODULE_4_gl_vec2_subtract___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'multiply',
    value: function multiply() {
      for (var _len3 = arguments.length, vectors = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        vectors[_key3] = arguments[_key3];
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = vectors[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var vector = _step3.value;

          __WEBPACK_IMPORTED_MODULE_5_gl_vec2_multiply___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'divide',
    value: function divide() {
      for (var _len4 = arguments.length, vectors = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        vectors[_key4] = arguments[_key4];
      }

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = vectors[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var vector = _step4.value;

          __WEBPACK_IMPORTED_MODULE_6_gl_vec2_divide___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'scale',
    value: function scale(_scale) {
      if (Number.isFinite(_scale)) {
        __WEBPACK_IMPORTED_MODULE_7_gl_vec2_scale___default()(this, this, _scale);
      }
      this.check();
      return this;
    }
  }, {
    key: 'scaleAndAdd',
    value: function scaleAndAdd(vector, scale) {
      __WEBPACK_IMPORTED_MODULE_8_gl_vec2_scaleAndAdd___default()(this, this, vector, scale);
      this.check();
      return this;
    }
  }, {
    key: 'negate',
    value: function negate() {
      __WEBPACK_IMPORTED_MODULE_9_gl_vec2_negate___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'normalize',
    value: function normalize() {
      __WEBPACK_IMPORTED_MODULE_10_gl_vec2_normalize___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'dot',
    value: function dot(vector) {
      return __WEBPACK_IMPORTED_MODULE_11_gl_vec2_dot___default()(this, vector);
    }
  }, {
    key: 'cross',
    value: function cross(vector) {
      __WEBPACK_IMPORTED_MODULE_12_gl_vec2_cross___default()(this, this, vector);
      this.check();
      return this;
    }
  }, {
    key: 'lerp',
    value: function lerp(vector, coeff) {
      __WEBPACK_IMPORTED_MODULE_13_gl_vec2_lerp___default()(this, this, vector, coeff);
      this.check();
      return this;
    }
  }, {
    key: 'operation',
    value: function operation(_operation) {
      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }

      _operation.apply(undefined, [this, this].concat(args));
      this.check();
      return this;
    }
  }, {
    key: 'ELEMENTS',
    get: function get() {
      return 2;
    }
  }, {
    key: 'x',
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'y',
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }]);

  return Vector2;
}(__WEBPACK_IMPORTED_MODULE_0__math_array__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Vector2);
//# sourceMappingURL=vector2.js.map

/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = validateVector3;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_array__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec3_set__ = __webpack_require__(148);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec3_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_gl_vec3_set__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec3_length__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec3_length___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_gl_vec3_length__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec3_distance__ = __webpack_require__(139);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec3_distance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_gl_vec3_distance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec3_angle__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec3_angle___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_gl_vec3_angle__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec3_add__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec3_add___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_vec3_add__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec3_subtract__ = __webpack_require__(149);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec3_subtract___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_vec3_subtract__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec3_multiply__ = __webpack_require__(144);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec3_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_vec3_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec3_divide__ = __webpack_require__(140);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec3_divide___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_vec3_divide__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec3_scale__ = __webpack_require__(146);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec3_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_vec3_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec3_scaleAndAdd__ = __webpack_require__(147);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec3_scaleAndAdd___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_vec3_scaleAndAdd__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec3_negate__ = __webpack_require__(145);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec3_negate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_vec3_negate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec3_inverse__ = __webpack_require__(142);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec3_inverse___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_vec3_inverse__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_vec3_normalize__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_vec3_normalize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_gl_vec3_normalize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_vec3_dot__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_vec3_dot___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_gl_vec3_dot__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_vec3_cross__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_vec3_cross___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_gl_vec3_cross__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_vec3_lerp__ = __webpack_require__(143);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_vec3_lerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_gl_vec3_lerp__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




// gl-matrix is too big. Cherry-pick individual imports from stack.gl version
/* eslint-disable camelcase */

















function validateVector3(v) {
  return v.length === 3 && Number.isFinite(v[0]) && Number.isFinite(v[1]) && Number.isFinite(v[2]);
}

var Vector3 = function (_MathArray) {
  _inherits(Vector3, _MathArray);

  // Creates a new vec3, either empty, or from an array or from values
  function Vector3() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    _classCallCheck(this, Vector3);

    var _this = _possibleConstructorReturn(this, (Vector3.__proto__ || Object.getPrototypeOf(Vector3)).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y, z);
    }
    return _this;
  }

  // fromArray(array) {
  //   if (array instanceof Vector3) {
  //     return array;
  //   }
  //   return new Vector3(...array);
  // }

  _createClass(Vector3, [{
    key: 'set',
    value: function set(x, y, z) {
      __WEBPACK_IMPORTED_MODULE_2_gl_vec3_set___default()(this, x, y, z);
      this.check();
      return this;
    }

    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

  }, {
    key: 'length',

    /* eslint-enable no-multi-spaces, brace-style, no-return-assign */

    value: function length() {
      return __WEBPACK_IMPORTED_MODULE_3_gl_vec3_length___default()(this);
    }
  }, {
    key: 'distance',
    value: function distance(vector) {
      return __WEBPACK_IMPORTED_MODULE_4_gl_vec3_distance___default()(this, vector);
    }
  }, {
    key: 'angle',
    value: function angle(vector) {
      return __WEBPACK_IMPORTED_MODULE_5_gl_vec3_angle___default()(this, vector);
    }

    // MODIFIERS

  }, {
    key: 'add',
    value: function add() {
      for (var _len = arguments.length, vectors = Array(_len), _key = 0; _key < _len; _key++) {
        vectors[_key] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = vectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var vector = _step.value;

          __WEBPACK_IMPORTED_MODULE_6_gl_vec3_add___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'subtract',
    value: function subtract() {
      for (var _len2 = arguments.length, vectors = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        vectors[_key2] = arguments[_key2];
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = vectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var vector = _step2.value;

          __WEBPACK_IMPORTED_MODULE_7_gl_vec3_subtract___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'multiply',
    value: function multiply() {
      for (var _len3 = arguments.length, vectors = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        vectors[_key3] = arguments[_key3];
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = vectors[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var vector = _step3.value;

          __WEBPACK_IMPORTED_MODULE_8_gl_vec3_multiply___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'divide',
    value: function divide() {
      for (var _len4 = arguments.length, vectors = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        vectors[_key4] = arguments[_key4];
      }

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = vectors[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var vector = _step4.value;

          __WEBPACK_IMPORTED_MODULE_9_gl_vec3_divide___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'scale',
    value: function scale(_scale) {
      if (Number.isFinite(_scale)) {
        __WEBPACK_IMPORTED_MODULE_10_gl_vec3_scale___default()(this, this, _scale);
      } else {
        __WEBPACK_IMPORTED_MODULE_15_gl_vec3_dot___default()(this, this, _scale);
      }
      this.check();
      return this;
    }
  }, {
    key: 'scaleAndAdd',
    value: function scaleAndAdd(vector, scale) {
      __WEBPACK_IMPORTED_MODULE_11_gl_vec3_scaleAndAdd___default()(this, this, vector, scale);
      this.check();
      return this;
    }
  }, {
    key: 'negate',
    value: function negate() {
      __WEBPACK_IMPORTED_MODULE_12_gl_vec3_negate___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'inverse',
    value: function inverse() {
      __WEBPACK_IMPORTED_MODULE_13_gl_vec3_inverse___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'normalize',
    value: function normalize() {
      __WEBPACK_IMPORTED_MODULE_14_gl_vec3_normalize___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'dot',
    value: function dot(vector) {
      return __WEBPACK_IMPORTED_MODULE_15_gl_vec3_dot___default()(this, vector);
    }
  }, {
    key: 'cross',
    value: function cross(vector) {
      __WEBPACK_IMPORTED_MODULE_16_gl_vec3_cross___default()(this, this, vector);
      this.check();
      return this;
    }
  }, {
    key: 'lerp',
    value: function lerp(vector, coeff) {
      __WEBPACK_IMPORTED_MODULE_17_gl_vec3_lerp___default()(this, this, vector, coeff);
      this.check();
      return this;
    }
  }, {
    key: 'operation',
    value: function operation(_operation) {
      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }

      _operation.apply(undefined, [this, this].concat(args));
      this.check();
      return this;
    }
  }, {
    key: 'ELEMENTS',
    get: function get() {
      return 3;
    }
  }, {
    key: 'x',
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'y',
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'z',
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }]);

  return Vector3;
}(__WEBPACK_IMPORTED_MODULE_0__math_array__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Vector3);
//# sourceMappingURL=vector3.js.map

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = validateVector4;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_array__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec4_set__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec4_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_gl_vec4_set__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec4_distance__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec4_distance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_gl_vec4_distance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec4_add__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec4_add___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_gl_vec4_add__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec4_subtract__ = __webpack_require__(159);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec4_subtract___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_gl_vec4_subtract__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec4_multiply__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec4_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_vec4_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec4_divide__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec4_divide___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_vec4_divide__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec4_scale__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec4_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_vec4_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec4_scaleAndAdd__ = __webpack_require__(157);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec4_scaleAndAdd___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_vec4_scaleAndAdd__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec4_negate__ = __webpack_require__(156);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec4_negate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_vec4_negate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec4_inverse__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec4_inverse___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_vec4_inverse__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec4_normalize__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec4_normalize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_vec4_normalize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec4_dot__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec4_dot___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_vec4_dot__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_vec4_lerp__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_vec4_lerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_gl_vec4_lerp__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




// gl-matrix is too big. Cherry-pick individual imports from stack.gl version
/* eslint-disable camelcase */












// import vec4_cross from 'gl-vec4/cross';


function validateVector4(v) {
  return v.length === 4 && Number.isFinite(v[0]) && Number.isFinite(v[1]) && Number.isFinite(v[2]) && Number.isFinite(v[3]);
}

var Vector4 = function (_MathArray) {
  _inherits(Vector4, _MathArray);

  // Creates a new, empty vec4
  function Vector4() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    _classCallCheck(this, Vector4);

    var _this = _possibleConstructorReturn(this, (Vector4.__proto__ || Object.getPrototypeOf(Vector4)).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y, z, w);
    }
    return _this;
  }

  _createClass(Vector4, [{
    key: 'set',
    value: function set(x, y, z, w) {
      __WEBPACK_IMPORTED_MODULE_2_gl_vec4_set___default()(this, x, y, z, w);
      this.check();
      return this;
    }

    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

  }, {
    key: 'distance',

    /* eslint-enable no-multi-spaces, brace-style, no-return-assign */

    value: function distance(vector) {
      return __WEBPACK_IMPORTED_MODULE_3_gl_vec4_distance___default()(vector);
    }
  }, {
    key: 'add',
    value: function add() {
      for (var _len = arguments.length, vectors = Array(_len), _key = 0; _key < _len; _key++) {
        vectors[_key] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = vectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var vector = _step.value;

          __WEBPACK_IMPORTED_MODULE_4_gl_vec4_add___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'subtract',
    value: function subtract() {
      for (var _len2 = arguments.length, vectors = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        vectors[_key2] = arguments[_key2];
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = vectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var vector = _step2.value;

          __WEBPACK_IMPORTED_MODULE_5_gl_vec4_subtract___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'multiply',
    value: function multiply() {
      for (var _len3 = arguments.length, vectors = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        vectors[_key3] = arguments[_key3];
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = vectors[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var vector = _step3.value;

          __WEBPACK_IMPORTED_MODULE_6_gl_vec4_multiply___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'divide',
    value: function divide() {
      for (var _len4 = arguments.length, vectors = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        vectors[_key4] = arguments[_key4];
      }

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = vectors[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var vector = _step4.value;

          __WEBPACK_IMPORTED_MODULE_7_gl_vec4_divide___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'scale',
    value: function scale(_scale) {
      __WEBPACK_IMPORTED_MODULE_8_gl_vec4_scale___default()(this, this, _scale);
      this.check();
      return this;
    }
  }, {
    key: 'scaleAndAdd',
    value: function scaleAndAdd(vector, scale) {
      __WEBPACK_IMPORTED_MODULE_9_gl_vec4_scaleAndAdd___default()(this, this, vector, scale);
      this.check();
      return this;
    }
  }, {
    key: 'negate',
    value: function negate() {
      __WEBPACK_IMPORTED_MODULE_10_gl_vec4_negate___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'inverse',
    value: function inverse() {
      __WEBPACK_IMPORTED_MODULE_11_gl_vec4_inverse___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'normalize',
    value: function normalize() {
      __WEBPACK_IMPORTED_MODULE_12_gl_vec4_normalize___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'dot',
    value: function dot(vector) {
      return __WEBPACK_IMPORTED_MODULE_13_gl_vec4_dot___default()(this, vector);
    }

    // cross(scale) {
    //   vec4_cross(this, this, scale);
    //   this.check();
    //   return this;
    // }

  }, {
    key: 'lerp',
    value: function lerp(vector, coeff) {
      __WEBPACK_IMPORTED_MODULE_14_gl_vec4_lerp___default()(this, this, vector, coeff);
      this.check();
      return this;
    }

    /*
    multiply(...vectors) {
      for (const vector of vectors) {
        vec4_multiply(this, vector);
      }
      this.check();
      return this;
    }
     divide(...vectors) {
      for (const vector of vectors) {
        vec4_divide(this, vector);
      }
      this.check();
      return this;
    }
     ceil() {
      vec4_ceil(this, this);
      this.check();
      return this;
    }
     floor() {
      vec4_floor(this, this);
      this.check();
      return this;
    }
     min() {
      vec4_min(this, this);
      this.check();
      return this;
    }
     max() {
      vec4_max(this, this);
      this.check();
      return this;
    }
     hermite(scale) {
      vec4_hermite(this, this, scale);
      this.check();
      return this;
    }
     bezier(scale) {
      vec4_bezier(this, this, scale);
      this.check();
      return this;
    }
     random(scale) {
      vec4_random(this, this, scale);
      this.check();
      return this;
    }
     rotateX(origin, angle) {
      vec4_rotateX(this, this, origin, angle);
      this.check();
      return this;
    }
     rotateY(origin, angle) {
      vec4_rotateY(this, this, origin, angle);
      this.check();
      return this;
    }
     rotateZ(origin, angle) {
      vec4_rotateZ(this, this, origin, angle);
      this.check();
      return this;
    }
    */

  }, {
    key: 'ELEMENTS',
    get: function get() {
      return 4;
    }
  }, {
    key: 'x',
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'y',
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'z',
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'w',
    get: function get() {
      return this[3];
    },
    set: function set(value) {
      return this[3] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }]);

  return Vector4;
}(__WEBPACK_IMPORTED_MODULE_0__math_array__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Vector4);
//# sourceMappingURL=vector4.js.map

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export registerShaderModules */
/* unused harmony export setDefaultShaderModules */
/* harmony export (immutable) */ __webpack_exports__["a"] = getShaderModule;
/* harmony export (immutable) */ __webpack_exports__["b"] = resolveModules;
/* unused harmony export getShaderDependencies */
/* unused harmony export getDependencyGraph */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);


var shaderModules = {};
var defaultShaderModules = [];

/**
 * Registers an array of shader modules
 * @param {Object[]} shaderModuleList - Array of shader modules
 */
function registerShaderModules(shaderModuleList) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$ignoreMultipleRe = _ref.ignoreMultipleRegistrations,
      ignoreMultipleRegistrations = _ref$ignoreMultipleRe === undefined ? false : _ref$ignoreMultipleRe;

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = shaderModuleList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var shaderModule = _step.value;

      registerShaderModule(shaderModule, { ignoreMultipleRegistrations: ignoreMultipleRegistrations });
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

/**
 * Registers an array of default shader modules. These will be concatenated
 * automatically at the end of any shader module list passed to
 * `assembleShaders` (plus `resolveModules` and `getShaderDependencies`)
 * @param {Object[]} modules - Array of shader modules
 */
function setDefaultShaderModules(modules) {
  defaultShaderModules = modules;
}

// Looks up a moduleName among registered modules and returns definition.
// If "inline" module, returns it directly
function getShaderModule(moduleOrName) {
  // Check if "inline" module
  if (typeof moduleOrName !== 'string') {
    var _shaderModule = moduleOrName;
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(typeof _shaderModule.name === 'string');
    registerShaderModule(_shaderModule, { ignoreMultipleRegistrations: true });
    return _shaderModule;
  }

  // Look up module
  var shaderModule = shaderModules[moduleOrName];
  if (!shaderModule) {
    // console.log(`${moduleOrName} not in registered modules:`, shaderModules);
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false, 'Unknown shader module ' + moduleOrName);
  }
  return shaderModule;
}

// registers any supplied modules and returns a list of module names
function resolveModules(modules) {
  var moduleNames = modules.map(function (module) {
    if (typeof module !== 'string') {
      registerShaderModules([module], { ignoreMultipleRegistrations: true });
      return module.name;
    }
    return module;
  });

  return getShaderDependencies(moduleNames);
}

/**
 * Takes a list of shader module names and returns a new list of
 * shader module names that includes all dependencies, sorted so
 * that modules that are dependencies of other modules come first.
 *
 * If the shader glsl code from the returned modules is concatenated
 * in the reverse order, it is guaranteed that all functions be resolved and
 * that all function and variable definitions come before use.
 *
 * @param {String[]} modules - Array of modules (inline modules or module names)
 * @return {String[]} - Array of modules
 */
function getShaderDependencies(modules) {
  modules = modules.concat(defaultShaderModules);

  var result = {};
  getDependencyGraph({
    modules: modules,
    level: 0,
    result: result
  });

  // Return a reverse sort so that dependencies come before the modules that use them
  return Object.keys(result).sort(function (a, b) {
    return result[b] - result[a];
  });
}

/**
 * Recursively checks module dpendencies to calculate dependency
 * level of each module.
 *
 * @param {String[]} modules - Array of modules
 * @param {Number} level - Current level
 * @return {result} - Map of module name to its level
 */
// Adds another level of dependencies to the result map
function getDependencyGraph(_ref2) {
  var modules = _ref2.modules,
      level = _ref2.level,
      result = _ref2.result;

  if (level >= 5) {
    throw new Error('Possible loop in shader dependency graph');
  }

  // Update level on all current modules
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var moduleOrName = _step2.value;

      var shaderModule = getShaderModule(moduleOrName);
      if (result[shaderModule.name] === undefined || result[shaderModule.name] < level) {
        result[shaderModule.name] = level;
      }
    }

    // Recurse
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = modules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var _moduleOrName = _step3.value;

      var _shaderModule2 = getShaderModule(_moduleOrName);

      if (_shaderModule2.dependencies) {
        getDependencyGraph({
          modules: _shaderModule2.dependencies,
          level: level + 1,
          result: result
        });
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return result;
}

// PRIVATE API

function registerShaderModule(shaderModule, _ref3) {
  var _ref3$ignoreMultipleR = _ref3.ignoreMultipleRegistrations,
      ignoreMultipleRegistrations = _ref3$ignoreMultipleR === undefined ? false : _ref3$ignoreMultipleR;

  __WEBPACK_IMPORTED_MODULE_0_assert___default()(shaderModule.name, 'shader module has no name');
  if (!ignoreMultipleRegistrations && shaderModules[shaderModule.name]) {
    // TODO - instead verify that definition is not changing...
    throw new Error('shader module ' + shaderModule.name + ' already registered');
  }
  shaderModules[shaderModule.name] = shaderModule;
  shaderModule.dependencies = shaderModule.dependencies || [];
}
//# sourceMappingURL=shader-modules.js.map

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = formatValue;
/* eslint-disable no-console */
/* global console */
var cache = {};

var _log = {
  priority: 0,
  table: function table(priority, _table) {
    if (priority <= _log.priority && _table) {
      console.table(_table);
    }
  },
  log: function log(priority, arg) {
    if (priority <= _log.priority) {
      var _console;

      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      (_console = console).debug.apply(_console, ['luma.gl: ' + arg].concat(args));
    }
  },
  info: function info(priority, arg) {
    if (priority <= _log.priority) {
      var _console2;

      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      (_console2 = console).log.apply(_console2, ['luma.gl: ' + arg].concat(args));
    }
  },
  once: function once(priority, arg) {
    if (!cache[arg]) {
      for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        args[_key3 - 2] = arguments[_key3];
      }

      _log.log.apply(_log, [priority, arg].concat(args));
    }
    cache[arg] = true;
  },
  warn: function warn(priority, arg) {
    if (priority <= _log.priority && !cache[arg]) {
      var _console3;

      for (var _len4 = arguments.length, args = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
        args[_key4 - 2] = arguments[_key4];
      }

      (_console3 = console).warn.apply(_console3, ['luma.gl: ' + arg].concat(args));
    }
    cache[arg] = true;
  },
  error: function error(priority, arg) {
    var _console4;

    for (var _len5 = arguments.length, args = Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
      args[_key5 - 2] = arguments[_key5];
    }

    (_console4 = console).error.apply(_console4, ['luma.gl: ' + arg].concat(args));
  },
  deprecated: function deprecated(oldUsage, newUsage) {
    _log.warn(0, 'luma.gl: `' + oldUsage + '` is deprecated and will be removed in a later version. Use `' + newUsage + '` instead');
  }
};

function formatArrayValue(v, opts) {
  var _opts$maxElts = opts.maxElts,
      maxElts = _opts$maxElts === undefined ? 16 : _opts$maxElts,
      _opts$size = opts.size,
      size = _opts$size === undefined ? 1 : _opts$size;

  var string = '[';
  for (var i = 0; i < v.length && i < maxElts; ++i) {
    if (i > 0) {
      string += ',' + (i % size === 0 ? ' ' : '');
    }
    string += formatValue(v[i], opts);
  }
  var terminator = v.length > maxElts ? '...' : ']';
  return '' + string + terminator;
}

function formatValue(v) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _opts$isInteger = opts.isInteger,
      isInteger = _opts$isInteger === undefined ? false : _opts$isInteger;

  if (Array.isArray(v) || ArrayBuffer.isView(v)) {
    return formatArrayValue(v, opts);
  }
  if (!Number.isFinite(v)) {
    return String(v);
  }
  if (isInteger) {
    return v.toFixed(0);
  }
  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {
    return v.toFixed(0);
  }
  var string = v.toPrecision(2);
  var decimal = string.indexOf('.0');
  return decimal === string.length - 2 ? string.slice(0, -1) : string;
}

/* harmony default export */ __webpack_exports__["a"] = (_log);
//# sourceMappingURL=log.js.map

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export clone */
/* unused harmony export deepEqual */
/* unused harmony export GL_STATE_SETTERS */
/* harmony export (immutable) */ __webpack_exports__["a"] = trackContextState;
/* harmony export (immutable) */ __webpack_exports__["c"] = pushContextState;
/* harmony export (immutable) */ __webpack_exports__["b"] = popContextState;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__set_parameters__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__polyfill_context__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Support for listening to context state changes and intercepting state queries
//
// NOTE: this system does not handle buffer bindings





var clone = function clone(x) {
  return Array.isArray(x) || ArrayBuffer.isView(x) ? x.slice() : x;
};

var deepEqual = function deepEqual(x, y) {
  var isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);
  var isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);
  if (isArrayX && isArrayY && x.length === y.length) {
    for (var i = 0; i < x.length; ++i) {
      if (x[i] !== y[i]) {
        return false;
      }
    }
    return true;
  }
  return x === y;
};

// interceptors for WEBGL FUNCTIONS that set WebGLRenderingContext state

var GL_STATE_SETTERS = {

  // GENERIC SETTERS

  enable: function enable(setter, cap) {
    return setter(_defineProperty({}, cap, true));
  },
  disable: function disable(setter, cap) {
    return setter(_defineProperty({}, cap, false));
  },
  pixelStorei: function pixelStorei(setter, pname, param) {
    return setter(_defineProperty({}, pname, param));
  },
  hint: function hint(setter, pname, _hint) {
    return setter(_defineProperty({}, pname, _hint));
  },

  // SPECIFIC SETTERS

  bindFramebuffer: function bindFramebuffer(setter, target, fb) {
    return setter(_defineProperty({}, target === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].READ_FRAMEBUFFER ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].READ_FRAMEBUFFER_BINDING : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DRAW_FRAMEBUFFER_BINDING, fb));
  },

  blendColor: function blendColor(setter, r, g, b, a) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_COLOR, new Float32Array([r, g, b, a])));
  },

  blendEquation: function blendEquation(setter, mode) {
    var _setter7;

    return setter((_setter7 = {}, _defineProperty(_setter7, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_RGB, mode), _defineProperty(_setter7, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_ALPHA, mode), _setter7));
  },

  blendEquationSeparate: function blendEquationSeparate(setter, modeRGB, modeAlpha) {
    var _setter8;

    return setter((_setter8 = {}, _defineProperty(_setter8, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_RGB, modeRGB), _defineProperty(_setter8, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_ALPHA, modeAlpha), _setter8));
  },

  blendFunc: function blendFunc(setter, src, dst) {
    var _setter9;

    return setter((_setter9 = {}, _defineProperty(_setter9, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_RGB, src), _defineProperty(_setter9, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_RGB, dst), _defineProperty(_setter9, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_ALPHA, src), _defineProperty(_setter9, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_ALPHA, dst), _setter9));
  },

  blendFuncSeparate: function blendFuncSeparate(setter, srcRGB, dstRGB, srcAlpha, dstAlpha) {
    var _setter10;

    return setter((_setter10 = {}, _defineProperty(_setter10, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_RGB, srcRGB), _defineProperty(_setter10, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_RGB, dstRGB), _defineProperty(_setter10, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_ALPHA, srcAlpha), _defineProperty(_setter10, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_ALPHA, dstAlpha), _setter10));
  },

  clearColor: function clearColor(setter, r, g, b, a) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_CLEAR_VALUE, new Float32Array([r, g, b, a])));
  },

  clearDepth: function clearDepth(setter, depth) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_CLEAR_VALUE, depth));
  },

  clearStencil: function clearStencil(setter, s) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_CLEAR_VALUE, s));
  },

  colorMask: function colorMask(setter, r, g, b, a) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_WRITEMASK, [r, g, b, a]));
  },

  cullFace: function cullFace(setter, mode) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE_MODE, mode));
  },

  depthFunc: function depthFunc(setter, func) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_FUNC, func));
  },

  depthRange: function depthRange(setter, zNear, zFar) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_RANGE, new Float32Array([zNear, zFar])));
  },

  depthMask: function depthMask(setter, mask) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_WRITEMASK, mask));
  },

  frontFace: function frontFace(setter, face) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT_FACE, face));
  },

  lineWidth: function lineWidth(setter, width) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].LINE_WIDTH, width));
  },

  polygonOffset: function polygonOffset(setter, factor, units) {
    var _setter21;

    return setter((_setter21 = {}, _defineProperty(_setter21, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FACTOR, factor), _defineProperty(_setter21, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_UNITS, units), _setter21));
  },

  sampleCoverage: function sampleCoverage(setter, value, invert) {
    var _setter22;

    return setter((_setter22 = {}, _defineProperty(_setter22, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_VALUE, value), _defineProperty(_setter22, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_INVERT, invert), _setter22));
  },

  scissor: function scissor(setter, x, y, width, height) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_BOX, new Int32Array([x, y, width, height])));
  },

  stencilMask: function stencilMask(setter, mask) {
    var _setter24;

    return setter((_setter24 = {}, _defineProperty(_setter24, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_WRITEMASK, mask), _defineProperty(_setter24, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_WRITEMASK, mask), _setter24));
  },

  stencilMaskSeparate: function stencilMaskSeparate(setter, face, mask) {
    return setter(_defineProperty({}, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_WRITEMASK : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_WRITEMASK, mask));
  },

  stencilFunc: function stencilFunc(setter, func, ref, mask) {
    var _setter26;

    return setter((_setter26 = {}, _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FUNC, func), _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_REF, ref), _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_VALUE_MASK, mask), _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FUNC, func), _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_REF, ref), _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_VALUE_MASK, mask), _setter26));
  },

  stencilFuncSeparate: function stencilFuncSeparate(setter, face, func, ref, mask) {
    var _setter27;

    return setter((_setter27 = {}, _defineProperty(_setter27, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FUNC : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FUNC, func), _defineProperty(_setter27, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_REF : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_REF, ref), _defineProperty(_setter27, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_VALUE_MASK : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_VALUE_MASK, mask), _setter27));
  },

  stencilOp: function stencilOp(setter, fail, zfail, zpass) {
    var _setter28;

    return setter((_setter28 = {}, _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FAIL, fail), _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_FAIL, zfail), _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_PASS, zpass), _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FAIL, fail), _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_FAIL, zfail), _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_PASS, zpass), _setter28));
  },

  stencilOpSeparate: function stencilOpSeparate(setter, face, fail, zfail, zpass) {
    var _setter29;

    return setter((_setter29 = {}, _defineProperty(_setter29, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FAIL : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FAIL, fail), _defineProperty(_setter29, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_FAIL : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_FAIL, zfail), _defineProperty(_setter29, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_PASS : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_PASS, zpass), _setter29));
  },

  viewport: function viewport(setter, x, y, width, height) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].VIEWPORT, new Int32Array([x, y, width, height])));
  }
};

// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT

// Overrides a WebGLRenderingContext state "getter" function
// to return values directly from cache

function installGetterOverride(gl, functionName) {
  // Get the original function from the WebGLRenderingContext
  var originalGetterFunc = gl[functionName].bind(gl);

  // Wrap it with a spy so that we can update our state cache when it gets called
  gl[functionName] = function () {
    var pname = arguments.length <= 0 ? undefined : arguments[0];

    // WebGL limits are not prepopulated in the cache, we must
    // query first time. They are all primitive (single value)
    if (!(pname in gl.state.cache)) {
      gl.state.cache[pname] = originalGetterFunc.apply(undefined, arguments);
    }

    // Optionally call the original function to do a "hard" query from the WebGLRenderingContext
    return gl.state.enable ?
    // Call the getter the params so that it can e.g. serve from a cache
    gl.state.cache[pname] :
    // Optionally call the original function to do a "hard" query from the WebGLRenderingContext
    originalGetterFunc.apply(undefined, arguments);
  };

  // Set the name of this anonymous function to help in debugging and profiling
  Object.defineProperty(gl[functionName], 'name', { value: functionName + '-from-cache', configurable: false });
}

// Overrides a WebGLRenderingContext state "setter" function
// to call a setter spy before the actual setter. Allows us to keep a cache
// updated with a copy of the WebGL context state.
function installSetterSpy(gl, functionName, setter, updateCache) {
  // Get the original function from the WebGLRenderingContext
  var originalSetterFunc = gl[functionName].bind(gl);

  // Wrap it with a spy so that we can update our state cache when it gets called
  gl[functionName] = function () {
    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    // Update the value
    // Call the setter with the state cache and the params so that it can store the parameters
    var valueChanged = setter.apply(undefined, [updateCache].concat(params));

    // Call the original WebGLRenderingContext func to make sure the context actually gets updated
    if (valueChanged) {
      var _gl$state;

      (_gl$state = gl.state).log.apply(_gl$state, ['gl.' + functionName].concat(params)); // eslint-disable-line
      originalSetterFunc.apply(undefined, params);
    }
    // Note: if the original function fails to set the value, our state cache will be bad
    // No solution for this at the moment, but assuming that this is unlikely to be a real problem
    // We could call the setter after the originalSetterFunc. Concern is that this would
    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions
  };

  // Set the name of this anonymous function to help in debugging and profiling
  Object.defineProperty(gl[functionName], 'name', { value: functionName + '-to-cache', configurable: false });
}

// HELPER CLASS - GLState

/* eslint-disable no-shadow */

var GLState = /*#__PURE__*/function () {
  function GLState(gl) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$copyState = _ref.copyState,
        copyState = _ref$copyState === undefined ? false : _ref$copyState,
        _ref$log = _ref.log,
        log = _ref$log === undefined ? function () {} : _ref$log;

    _classCallCheck(this, GLState);

    this.gl = gl;
    this.stateStack = [];
    this.enable = true;
    this.cache = copyState ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__set_parameters__["b" /* getParameters */])(gl) : Object.assign({}, __WEBPACK_IMPORTED_MODULE_1__set_parameters__["c" /* GL_PARAMETER_DEFAULTS */]);
    this.log = log;

    this._updateCache = this._updateCache.bind(this);
    Object.seal(this);
  }

  _createClass(GLState, [{
    key: 'push',
    value: function push() {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.stateStack.push({});
    }
  }, {
    key: 'pop',
    value: function pop() {
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(this.stateStack.length > 0);
      // Use the saved values in the state stack to restore parameters
      var oldValues = this.stateStack[this.stateStack.length - 1];
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__set_parameters__["a" /* setParameters */])(this.gl, oldValues, this.cache);
      // Don't pop until we have reset parameters (to make sure other "stack frames" are not affected)
      this.stateStack.pop();
    }

    // interceptor for context set functions - update our cache and our stack
    // values (Object) - the key values for this setter

  }, {
    key: '_updateCache',
    value: function _updateCache(values) {
      var valueChanged = false;

      var oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];

      for (var key in values) {
        __WEBPACK_IMPORTED_MODULE_3_assert___default()(key !== undefined);
        // Check that value hasn't already been shadowed
        if (!deepEqual(values[key], this.cache[key])) {
          valueChanged = true;

          // First, save current value being shadowed
          // If a state stack frame is active, save the current parameter values for pop
          // but first check that value hasn't already been shadowed and saved
          if (oldValues && !(key in oldValues)) {
            oldValues[key] = this.cache[key];
          }

          // Save current value being shadowed
          this.cache[key] = values[key];
        }
      }

      return valueChanged;
    }
  }]);

  return GLState;
}();

// PUBLIC API

/**
 * Initialize WebGL state caching on a context
 * can be called multiple times to enable/disable
 * @param {WebGLRenderingContext} - context
 */
// After calling this function, context state will be cached
// gl.state.push() and gl.state.pop() will be available for saving,
// temporarily modifying, and then restoring state.


function trackContextState(gl) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$enable = _ref2.enable,
      enable = _ref2$enable === undefined ? true : _ref2$enable,
      copyState = _ref2.copyState;

  __WEBPACK_IMPORTED_MODULE_3_assert___default()(copyState !== undefined);
  if (!gl.state) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__polyfill_context__["a" /* default */])(gl);

    // Create a state cache
    gl.state = new GLState(gl, { copyState: copyState, enable: enable });

    // intercept all setter functions in the table
    for (var key in GL_STATE_SETTERS) {
      var setter = GL_STATE_SETTERS[key];
      installSetterSpy(gl, key, setter, gl.state._updateCache);
    }

    // intercept all getter functions in the table
    installGetterOverride(gl, 'getParameter');
    installGetterOverride(gl, 'isEnabled');
  }

  gl.state.enable = enable;

  return gl;
}

function pushContextState(gl) {
  __WEBPACK_IMPORTED_MODULE_3_assert___default()(gl.state);
  gl.state.push();
}

function popContextState(gl) {
  __WEBPACK_IMPORTED_MODULE_3_assert___default()(gl.state);
  gl.state.pop();
}
//# sourceMappingURL=track-context-state.js.map

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getContextLimits */
/* unused harmony export getGLContextInfo */
/* unused harmony export getGLContextInfo2 */
/* harmony export (immutable) */ __webpack_exports__["b"] = getContextInfo;
/* harmony export (immutable) */ __webpack_exports__["a"] = glGetDebugInfo;
/* unused harmony export TEST_EXPORTS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
var _WEBGL_LIMITS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-inline-comments, max-len */



var WEBGL_LIMITS = (_WEBGL_LIMITS = {}, _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].ALIASED_LINE_WIDTH_RANGE, { gl1: new Float32Array([1, 1]) }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].ALIASED_POINT_SIZE_RANGE, { gl1: new Float32Array([1, 1]) }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TEXTURE_SIZE, { gl1: 64, gl2: 2048 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_CUBE_MAP_TEXTURE_SIZE, { gl1: 16 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TEXTURE_IMAGE_UNITS, { gl1: 8 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_COMBINED_TEXTURE_IMAGE_UNITS, { gl1: 8 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_TEXTURE_IMAGE_UNITS, { gl1: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_RENDERBUFFER_SIZE, { gl1: 1 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VARYING_VECTORS, { gl1: 8 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_ATTRIBS, { gl1: 8 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_UNIFORM_VECTORS, { gl1: 128 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_FRAGMENT_UNIFORM_VECTORS, { gl1: 16 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VIEWPORT_DIMS, { gl1: new Int32Array([0, 0]) }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_3D_TEXTURE_SIZE, { gl1: 0, gl2: 256 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_ARRAY_TEXTURE_LAYERS, { gl1: 0, gl2: 256 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_CLIENT_WAIT_TIMEOUT_WEBGL, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_COLOR_ATTACHMENTS, { gl1: 0, gl2: 4 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_COMBINED_UNIFORM_BLOCKS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_DRAW_BUFFERS, { gl1: 0, gl2: 4 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_ELEMENT_INDEX, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_ELEMENTS_INDICES, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_ELEMENTS_VERTICES, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_FRAGMENT_INPUT_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_FRAGMENT_UNIFORM_BLOCKS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_FRAGMENT_UNIFORM_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_SAMPLES, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_SERVER_WAIT_TIMEOUT, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TEXTURE_LOD_BIAS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_UNIFORM_BLOCK_SIZE, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_UNIFORM_BUFFER_BINDINGS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VARYING_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_OUTPUT_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_UNIFORM_BLOCKS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_UNIFORM_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MIN_PROGRAM_TEXEL_OFFSET, { gl1: 0, gl2: -8, negative: true }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_PROGRAM_TEXEL_OFFSET, { gl1: 0, gl2: 7 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNIFORM_BUFFER_OFFSET_ALIGNMENT, { gl1: 0, gl2: 0 // GLint
}), _WEBGL_LIMITS);

function getContextLimits(gl) {
  gl.luma = gl.luma || {};

  if (!gl.luma.limits) {
    gl.luma.limits = {};
    gl.luma.webgl1MinLimits = {};
    gl.luma.webgl2MinLimits = {};

    var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl);

    // WEBGL limits
    for (var parameter in WEBGL_LIMITS) {
      var limit = WEBGL_LIMITS[parameter];

      var webgl1MinLimit = limit.gl1;
      var webgl2MinLimit = 'gl2' in limit ? limit.gl2 : limit.gl1;
      var minLimit = isWebgl2 ? webgl2MinLimit : webgl1MinLimit;

      // Check if we can query for this limit
      var limitNotAvailable = 'gl2' in limit && !isWebgl2 || 'extension' in limit && !gl.getExtension(limit.extension);

      var value = limitNotAvailable ? minLimit : gl.getParameter(parameter);
      gl.luma.limits[parameter] = value;
      gl.luma.webgl1MinLimits[parameter] = webgl1MinLimit;
      gl.luma.webgl2MinLimits[parameter] = webgl2MinLimit;
    }
  }

  return gl.luma.limits;
}

function getGLContextInfo(gl) {
  gl.luma = gl.luma || {};

  if (!gl.luma.info) {
    var _gl$luma$info;

    var info = gl.getExtension('WEBGL_debug_renderer_info');
    gl.luma.info = (_gl$luma$info = {}, _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR, gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR)), _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER, gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER)), _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNMASKED_VENDOR_WEBGL, gl.getParameter(info && info.UNMASKED_VENDOR_WEBGL || __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR)), _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNMASKED_RENDERER_WEBGL, gl.getParameter(info && info.UNMASKED_RENDERER_WEBGL || __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER)), _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VERSION, gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VERSION)), _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].SHADING_LANGUAGE_VERSION, gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].SHADING_LANGUAGE_VERSION)), _gl$luma$info);
  }

  return gl.luma.info;
}

var GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.
var GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.

function getGLContextInfo2(gl) {
  var vendorMasked = gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR);
  var rendererMasked = gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER);
  var ext = gl.getExtension('WEBGL_debug_renderer_info');
  var vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR);
  var rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER);
  return {
    vendor: vendorUnmasked || vendorMasked,
    renderer: rendererUnmasked || rendererMasked,
    vendorMasked: vendorMasked,
    rendererMasked: rendererMasked,
    version: gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VERSION),
    shadingLanguageVersion: gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].SHADING_LANGUAGE_VERSION)
  };
}

function getContextInfo(gl) {
  var limits = getContextLimits(gl);
  var info = getGLContextInfo(gl);
  return {
    // basic information
    vendor: info[GL_UNMASKED_VENDOR_WEBGL] || info[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR],
    renderer: info[GL_UNMASKED_RENDERER_WEBGL] || info[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER],
    version: info[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VERSION],
    shadingLanguageVersion: info[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].SHADING_LANGUAGE_VERSION],
    // info, caps and limits
    info: info,
    limits: limits,
    webgl1MinLimits: gl.luma.webgl1MinLimits,
    webgl2MinLimits: gl.luma.webgl2MinLimits
  };
}

// DEBUG INFO

/**
 * Provides strings identifying the GPU vendor and driver.
 * https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/
 * @param {WebGLRenderingContext} gl - context
 * @return {Object} - 'vendor' and 'renderer' string fields.
 */
function glGetDebugInfo(gl) {
  return getGLContextInfo2(gl);
  // const info = gl.getExtension('WEBGL_debug_renderer_info');
  // // We can't determine if 'WEBGL_debug_renderer_info' is supported by
  // // checking whether info is null here. Firefox doesn't follow the
  // // specs by returning null for unsupported extension. Instead,
  // // it returns an object without GL_UNMASKED_VENDOR_WEBGL and GL_UNMASKED_RENDERER_WEBGL.
  // return {
  //   vendor: (info && info.UNMASKED_VENDOR_WEBGL) ?
  //     gl.getParameter(info.UNMASKED_VENDOR_WEBGL) : 'unknown',
  //   renderer: (info && info.UNMASKED_RENDERER_WEBGL) ?
  //     gl.getParameter(info.UNMASKED_RENDERER_WEBGL) : 'unknown'
  // };
}

var TEST_EXPORTS = {
  WEBGL_LIMITS: WEBGL_LIMITS
};
//# sourceMappingURL=context-limits.js.map

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ERR_DELETED = 'Query was deleted before result was available';
var ERR_CANCEL = 'Query was canceled before result was available';

var noop = function noop(x) {
  return x;
};

var QueryManager = /*#__PURE__*/function () {

  /**
   * Internal class that helps "asynchronous WebGL query objects" manage
   * pending requests (e.g. for EXT_disjoint_timer_query and WebGL2 queries)
   *
   * Creates and manages promises for the queries.
   * Tracks pending queries enabling polling.
   * Tracks pending queries enabling invalidation.
   * Encapsulates some standard error messages.
   *
   * Remarks:
   * - Maintains a minimal list of pending queries only to minimize GC impact
   * - Exported as a singleton class instance.
   */
  function QueryManager() {
    _classCallCheck(this, QueryManager);

    this.pendingQueries = new Set();
    this.invalidQueryType = null;
    this.invalidErrorMessage = '';
    this.checkInvalid = function () {
      return false;
    };
  }

  // API THAT SHOULD BE EXPOSED TO APPLICATION

  // Checks invalidation callback and then all pending queries for completion
  // Should only be called once per tick


  _createClass(QueryManager, [{
    key: 'poll',
    value: function poll(gl) {
      this.cancelInvalidQueries(gl);

      // Now check availability of results and resolve promises as appropriate
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.pendingQueries.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var query = _step.value;

          var resultAvailable = query.isResultAvailable();
          if (resultAvailable) {
            var result = query.getResult();
            this.resolveQuery(query, result);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    // API FOR MANAGED QUERY CLASSES

    // Registers query invalidation method - used to detect disjoint timer queries

  }, {
    key: 'setInvalidator',
    value: function setInvalidator(_ref) {
      var queryType = _ref.queryType,
          errorMessage = _ref.errorMessage,
          checkInvalid = _ref.checkInvalid;

      this.invalidQueryType = queryType;
      this.invalidErrorMessage = errorMessage;
      this.checkInvalid = checkInvalid;
    }

    // Starts a query, sets up a new promise

  }, {
    key: 'beginQuery',
    value: function beginQuery(query) {
      var onComplete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
      var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;

      // Make sure disjoint state is cleared, so that this query starts fresh
      // Cancel other queries if needed
      this.cancelInvalidQueries(query.gl);

      // Cancel current promise - noop if already resolved or rejected
      this.cancelQuery(query);

      // Create a new promise with attached resolve and reject methods
      var resolvers = {};
      query.promise = new Promise(function (resolve, reject) {
        resolvers.resolve = resolve;
        resolvers.reject = reject;
      });
      Object.assign(query.promise, resolvers);

      // Add this query to the pending queries
      this.pendingQueries.add(query);
      // Register the callbacks
      return query.promise.then(onComplete).catch(onError);
    }

    // Resolves a query with a result

  }, {
    key: 'resolveQuery',
    value: function resolveQuery(query, result) {
      this.pendingQueries.delete(query);
      query.promise.resolve(result);
    }

    // Rejects the promise

  }, {
    key: 'rejectQuery',
    value: function rejectQuery(query, errorMessage) {
      this.pendingQueries.delete(query);
      if (query.promise) {
        query.promise.reject(new Error(errorMessage));
      }
    }

    // Rejects promise with standard message for Query.delete()

  }, {
    key: 'deleteQuery',
    value: function deleteQuery(query) {
      return this.rejectQuery(query, ERR_DELETED);
    }

    // Rejects promise with standard message for Query.cancel()

  }, {
    key: 'cancelQuery',
    value: function cancelQuery(query) {
      return this.rejectQuery(query, ERR_CANCEL);
    }

    // Rejects promise with registered message for invalidation

  }, {
    key: 'invalidateQuery',
    value: function invalidateQuery(query) {
      if (query instanceof this.invalidQueryType) {
        this.rejectQuery(query, this.invalidErrorMessage);
      }
    }

    // Checks all queries to see if need to be invalidated

  }, {
    key: 'cancelInvalidQueries',
    value: function cancelInvalidQueries(gl) {
      // We assume that we can cancel queries for all context.
      // Should be OK since this is used to check for "disjoint" GPU state
      if (this.checkInvalid(gl)) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.pendingQueries.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var query = _step2.value;

            this.invalidateQuery(query);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  }]);

  return QueryManager;
}();

/* harmony default export */ __webpack_exports__["a"] = (new QueryManager());
//# sourceMappingURL=query-manager.js.map

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getUniformDescriptors */
/* unused harmony export getVaryingMap */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vertex_array__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__texture__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__transform_feedback__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__uniforms__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shader__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-inline-comments */











// const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
// const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
// MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : 0x8C80,
// TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84,
// TRANSFORM_FEEDBACK_BUFFER_SIZE : 0x8C85,
// TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88,
// MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A,
// MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B,
// INTERLEAVED_ATTRIBS: 0x8C8C,
// SEPARATE_ATTRIBS : 0x8C8D,

var Program = /*#__PURE__*/function (_Resource) {
  _inherits(Program, _Resource);

  /*
   * @classdesc
   * Handles creation of programs, mapping of attributes and uniforms
   *
   * @class
   * @param {WebGLRenderingContext} gl - gl context
   * @param {Object} opts - options
   * @param {String} opts.vs - Vertex shader source
   * @param {String} opts.fs - Fragment shader source
   * @param {String} opts.id= - Id
   */
  function Program(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Program);

    var _this = _possibleConstructorReturn(this, (Program.__proto__ || Object.getPrototypeOf(Program)).call(this, gl, opts));

    _this.initialize(opts);
    _this.vertexAttributes = __WEBPACK_IMPORTED_MODULE_2__vertex_array__["a" /* default */].getDefaultArray(gl);
    Object.seal(_this);

    // If program is not named, name it after shader names
    if (!opts.id) {
      var programName = _this.vs.getName() || _this.fs.getName();
      programName = programName.replace(/shader/i, '');
      programName = programName ? programName + '-program' : 'program';
      // TODO - this.id will already have been initialized
      _this.id = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils__["uid"])(programName);
    }
    return _this;
  }

  _createClass(Program, [{
    key: 'initialize',
    value: function initialize() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          vs = _ref.vs,
          fs = _ref.fs,
          defaultUniforms = _ref.defaultUniforms,
          varyings = _ref.varyings,
          _ref$bufferMode = _ref.bufferMode,
          bufferMode = _ref$bufferMode === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SEPARATE_ATTRIBS : _ref$bufferMode;

      // Create shaders if needed
      this.vs = typeof vs === 'string' ? new __WEBPACK_IMPORTED_MODULE_7__shader__["a" /* VertexShader */](this.gl, vs) : vs;
      this.fs = typeof fs === 'string' ? new __WEBPACK_IMPORTED_MODULE_7__shader__["b" /* FragmentShader */](this.gl, fs) : fs;

      __WEBPACK_IMPORTED_MODULE_9_assert___default()(this.vs instanceof __WEBPACK_IMPORTED_MODULE_7__shader__["a" /* VertexShader */], 'Program: bad vertex shader');
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(this.fs instanceof __WEBPACK_IMPORTED_MODULE_7__shader__["b" /* FragmentShader */], 'Program: bad fragment shader');

      this.defaultUniforms = defaultUniforms;

      // Setup varyings if supplied
      if (varyings) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);
        this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);
        this.varyings = getVaryingMap(varyings, bufferMode);
      }

      this._compileAndLink();

      // determine attribute locations (i.e. indices)
      this._attributeLocations = this._getAttributeLocations();
      this._attributeCount = this.getAttributeCount();
      this._warn = [];
      this._filledLocations = {};

      // prepare uniform setters
      this._uniformSetters = this._getUniformSetters();
      this._uniformCount = this.getUniformCount();
      this._textureIndexCounter = 0;

      return this;
    }
  }, {
    key: 'use',
    value: function use() {
      this.gl.useProgram(this.handle);
      return this;
    }

    // A good thing about webGL is that there are so many ways to draw things,
    // e.g. depending on whether data is indexed and/or isInstanced.
    // This function unifies those into a single call with simple parameters
    // that have sane defaults.

  }, {
    key: 'draw',
    value: function draw(_ref2) {
      var _this2 = this;

      var _ref2$drawMode = _ref2.drawMode,
          drawMode = _ref2$drawMode === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TRIANGLES : _ref2$drawMode,
          vertexCount = _ref2.vertexCount,
          _ref2$offset = _ref2.offset,
          offset = _ref2$offset === undefined ? 0 : _ref2$offset,
          start = _ref2.start,
          end = _ref2.end,
          _ref2$isIndexed = _ref2.isIndexed,
          isIndexed = _ref2$isIndexed === undefined ? false : _ref2$isIndexed,
          _ref2$indexType = _ref2.indexType,
          indexType = _ref2$indexType === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_SHORT : _ref2$indexType,
          _ref2$isInstanced = _ref2.isInstanced,
          isInstanced = _ref2$isInstanced === undefined ? false : _ref2$isInstanced,
          _ref2$instanceCount = _ref2.instanceCount,
          instanceCount = _ref2$instanceCount === undefined ? 0 : _ref2$instanceCount,
          _ref2$vertexArray = _ref2.vertexArray,
          vertexArray = _ref2$vertexArray === undefined ? null : _ref2$vertexArray,
          _ref2$transformFeedba = _ref2.transformFeedback,
          transformFeedback = _ref2$transformFeedba === undefined ? null : _ref2$transformFeedba,
          _ref2$uniforms = _ref2.uniforms,
          uniforms = _ref2$uniforms === undefined ? {} : _ref2$uniforms,
          _ref2$samplers = _ref2.samplers,
          samplers = _ref2$samplers === undefined ? {} : _ref2$samplers,
          _ref2$parameters = _ref2.parameters,
          parameters = _ref2$parameters === undefined ? {} : _ref2$parameters,
          settings = _ref2.settings;

      if (settings) {
        __WEBPACK_IMPORTED_MODULE_8__utils__["log"].deprecated('settings', 'parameters');
        parameters = settings;
      }

      vertexArray = vertexArray || __WEBPACK_IMPORTED_MODULE_2__vertex_array__["a" /* default */].getDefaultArray(this.gl);
      vertexArray.bind(function () {

        _this2.gl.useProgram(_this2.handle);

        if (transformFeedback) {
          if (parameters[__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RASTERIZER_DISCARD]) {
            // bypass fragment shader
            _this2.gl.enable(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RASTERIZER_DISCARD);
          }

          var primitiveMode = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__transform_feedback__["a" /* getTransformFeedbackMode */])({ drawMode: drawMode });
          transformFeedback.begin(primitiveMode);
        }

        _this2.setUniforms(uniforms, samplers);

        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension
        if (isIndexed && isInstanced) {
          _this2.ext.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);
        } else if (isIndexed && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(_this2.gl) && !isNaN(start) && !isNaN(end)) {
          _this2.gl.drawElementsRange(drawMode, start, end, vertexCount, indexType, offset);
        } else if (isIndexed) {
          _this2.gl.drawElements(drawMode, vertexCount, indexType, offset);
        } else if (isInstanced) {
          _this2.ext.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);
        } else {
          _this2.gl.drawArrays(drawMode, offset, vertexCount);
        }

        // this.gl.useProgram(null);

        if (transformFeedback) {
          transformFeedback.end();

          if (parameters[__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RASTERIZER_DISCARD]) {
            // resume fragment shader
            _this2.gl.disable(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RASTERIZER_DISCARD);
          }
        }
      });

      return this;
    }

    /**
     * Attach a map of Buffers values to a program
     * Only attributes with names actually present in the linked program
     * will be updated. Other supplied buffers will be ignored.
     *
     * @param {Object} buffers - An object map with attribute names being keys
     *  and values are expected to be instances of Buffer.
     * @returns {Program} Returns itself for chaining.
     */
    /* eslint-disable max-statements */

  }, {
    key: 'setBuffers',
    value: function setBuffers(buffers) {
      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref3$clear = _ref3.clear,
          clear = _ref3$clear === undefined ? true : _ref3$clear,
          _ref3$check = _ref3.check,
          check = _ref3$check === undefined ? true : _ref3$check,
          _ref3$drawParams = _ref3.drawParams,
          drawParams = _ref3$drawParams === undefined ? {} : _ref3$drawParams;

      if (clear) {
        this._filledLocations = {};
      }

      // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER
      // index type is saved for drawElement calls
      drawParams.isInstanced = false;
      drawParams.isIndexed = false;
      drawParams.indexType = null;

      var _sortBuffersByLocatio = this._sortBuffersByLocation(buffers),
          locations = _sortBuffersByLocatio.locations,
          elements = _sortBuffersByLocatio.elements;

      // Process locations in order


      for (var location = 0; location < locations.length; ++location) {
        var bufferName = locations[location];
        var buffer = buffers[bufferName];
        // DISABLE MISSING ATTRIBUTE
        if (!buffer) {
          this.vertexAttributes.disable(location);
        } else {
          var divisor = buffer.layout.instanced ? 1 : 0;
          this.vertexAttributes.enable(location);
          this.vertexAttributes.setBuffer({ location: location, buffer: buffer });
          this.vertexAttributes.setDivisor(location, divisor);
          drawParams.isInstanced = buffer.layout.instanced > 0;
          this._filledLocations[bufferName] = true;
        }
      }

      // SET ELEMENTS ARRAY BUFFER
      if (elements) {
        var _buffer = buffers[elements];
        _buffer.bind();
        drawParams.isIndexed = true;
        drawParams.indexType = _buffer.layout.type;
      }

      if (check) {
        this._checkBuffers();
      }

      return this;
    }
    /* eslint-enable max-statements */

    /*
     * @returns {Program} Returns itself for chaining.
     */

  }, {
    key: 'unsetBuffers',
    value: function unsetBuffers() {
      var length = this._attributeCount;
      for (var i = 1; i < length; ++i) {
        // this.vertexAttributes.setDivisor(i, 0);
        this.vertexAttributes.disable(i);
      }

      // Clear elements buffer
      this.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ELEMENT_ARRAY_BUFFER, null);
      return this;
    }

    /**
     * Apply a set of uniform values to a program
     * Only uniforms with names actually present in the linked program
     * will be updated.
     * other uniforms will be ignored
     *
     * @param {Object} uniformMap - An object with names being keys
     * @returns {Program} - returns itself for chaining.
     */
    /* eslint-disable max-depth */

  }, {
    key: 'setUniforms',
    value: function setUniforms(uniforms) {
      var samplers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      for (var uniformName in uniforms) {
        var uniform = uniforms[uniformName];
        var uniformSetter = this._uniformSetters[uniformName];
        var sampler = samplers[uniformName];

        if (uniformSetter) {
          if (uniform instanceof __WEBPACK_IMPORTED_MODULE_4__texture__["a" /* default */]) {
            if (uniformSetter.textureIndex === undefined) {
              uniformSetter.textureIndex = this._textureIndexCounter++;
            }

            // Bind texture to index
            var texture = uniform;
            var textureIndex = uniformSetter.textureIndex;


            texture.bind(textureIndex);

            // Bind a sampler (if supplied) to index
            if (sampler) {
              sampler.bind(textureIndex);
            }

            // Set the uniform sampler to the texture index
            uniformSetter(textureIndex);
          } else {
            // Just set the value
            uniformSetter(uniform);
          }
        }
      }

      return this;
    }
    /* eslint-enable max-depth */

    // setTransformFeedbackBuffers(buffers) {
    //   for (const buffer of buffers) {
    //     buffer.bindBase()
    //   }
    // }

    /**
     * ATTRIBUTES API
     * (Locations are numeric indices)
     * @return {Number} count
     */

  }, {
    key: 'getAttributeCount',
    value: function getAttributeCount() {
      return this._getParameter(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ACTIVE_ATTRIBUTES);
    }

    /**
     * Returns location (index) of a name
     * @param {String} attributeName - name of an attribute
     *   (matches name in a linked shader)
     * @returns {Number} - // array of actual attribute names from shader linking
     */

  }, {
    key: 'getAttributeLocation',
    value: function getAttributeLocation(attributeName) {
      return this.gl.getAttribLocation(this.handle, attributeName);
    }

    /**
     * Returns an object with info about attribute at index "location"/
     * @param {int} location - index of an attribute
     * @returns {WebGLActiveInfo} - info about an active attribute
     *   fields: {name, size, type}
     */

  }, {
    key: 'getAttributeInfo',
    value: function getAttributeInfo(location) {
      return this.gl.getActiveAttrib(this.handle, location);
    }

    /**
     * UNIFORMS API
     * (Locations are numeric indices)
     * @return {Number} count
     */

  }, {
    key: 'getUniformCount',
    value: function getUniformCount() {
      return this._getParameter(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ACTIVE_UNIFORMS);
    }

    /*
     * @returns {WebGLActiveInfo} - object with {name, size, type}
     */

  }, {
    key: 'getUniformInfo',
    value: function getUniformInfo(index) {
      return this.gl.getActiveUniform(this.handle, index);
    }

    /*
     * @returns {WebGLUniformLocation} - opaque object representing location
     * of uniform, used by setter methods
     */

  }, {
    key: 'getUniformLocation',
    value: function getUniformLocation(name) {
      return this.gl.getUniformLocation(this.handle, name);
    }
  }, {
    key: 'getUniformValue',
    value: function getUniformValue(location) {
      return this.gl.getUniform(this.handle, location);
    }

    // WebGL2
    /**
     * @param {GLuint} index
     * @return {WebGLActiveInfo} - object with {name, size, type}
     */

  }, {
    key: 'getVarying',
    value: function getVarying(program, index) {
      var result = this.gl.getTransformFeedbackVarying(program, index);
      return result;
    }

    // Retrieves the assigned color number binding for the user-defined varying
    // out variable name for program. program must have previously been linked.

  }, {
    key: 'getFragDataLocation',
    value: function getFragDataLocation(varyingName) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);
      return this.gl.getFragDataLocation(this.handle, varyingName);
    }

    // @returns {WebGLShader[]} - array of attached WebGLShader objects

  }, {
    key: 'getAttachedShaders',
    value: function getAttachedShaders() {
      return this.gl.getAttachedShaders(this.handle);
    }

    // PRIVATE METHODS

  }, {
    key: '_compileAndLink',
    value: function _compileAndLink() {
      var gl = this.gl;

      gl.attachShader(this.handle, this.vs.handle);
      gl.attachShader(this.handle, this.fs.handle);
      gl.linkProgram(this.handle);

      // Avoid checking program linking error in production
      if (gl.debug || __WEBPACK_IMPORTED_MODULE_8__utils__["log"].priority > 0) {
        gl.validateProgram(this.handle);
        var linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);
        if (!linked) {
          throw new Error('Error linking ' + gl.getProgramInfoLog(this.handle));
        }
      }
    }
  }, {
    key: '_checkBuffers',
    value: function _checkBuffers() {
      for (var attributeName in this._attributeLocations) {
        if (!this._filledLocations[attributeName] && !this._warn[attributeName]) {
          var location = this._attributeLocations[attributeName];
          // throw new Error(`Program ${this.id}: ` +
          //   `Attribute ${location}:${attributeName} not supplied`);
          __WEBPACK_IMPORTED_MODULE_8__utils__["log"].warn(0, 'Program ' + this.id + ': Attribute ' + location + ':' + attributeName + ' not supplied');
          this._warn[attributeName] = true;
        }
      }
      return this;
    }
  }, {
    key: '_sortBuffersByLocation',
    value: function _sortBuffersByLocation(buffers) {
      var elements = null;
      var locations = new Array(this._attributeCount);

      for (var bufferName in buffers) {
        var buffer = buffers[bufferName];
        var location = this._attributeLocations[bufferName];
        if (location === undefined) {
          if (buffer.target === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ELEMENT_ARRAY_BUFFER && elements) {
            throw new Error(this._print(bufferName) + ' duplicate GL.ELEMENT_ARRAY_BUFFER');
          } else if (buffer.target === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ELEMENT_ARRAY_BUFFER) {
            elements = bufferName;
          } else if (!this._warn[bufferName]) {
            __WEBPACK_IMPORTED_MODULE_8__utils__["log"].warn(2, this._print(bufferName) + ' not used');
            this._warn[bufferName] = true;
          }
        } else {
          if (buffer.target === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ELEMENT_ARRAY_BUFFER) {
            throw new Error(this._print(bufferName) + ':' + location + ' ' + 'has both location and type gl.ELEMENT_ARRAY_BUFFER');
          }
          locations[location] = bufferName;
        }
      }
      return { locations: locations, elements: elements };
    }

    // Check that all active attributes are enabled

  }, {
    key: '_areAllAttributesEnabled',
    value: function _areAllAttributesEnabled() {
      var length = this._attributeCount;
      for (var i = 0; i < length; ++i) {
        if (!this.vertexAttributes.isEnabled(i)) {
          return false;
        }
      }
      return true;
    }

    // determine attribute locations (maps attribute name to index)

  }, {
    key: '_getAttributeLocations',
    value: function _getAttributeLocations() {
      var attributeLocations = {};
      var length = this.getAttributeCount();
      for (var location = 0; location < length; location++) {
        var name = this.getAttributeInfo(location).name;
        attributeLocations[name] = this.getAttributeLocation(name);
      }
      return attributeLocations;
    }

    // create uniform setters
    // Map of uniform names to setter functions

  }, {
    key: '_getUniformSetters',
    value: function _getUniformSetters() {
      var gl = this.gl;

      var uniformSetters = {};
      var length = this.getUniformCount();
      for (var i = 0; i < length; i++) {
        var info = this.getUniformInfo(i);
        var parsedName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__uniforms__["a" /* parseUniformName */])(info.name);
        var location = this.getUniformLocation(parsedName.name);
        uniformSetters[parsedName.name] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__uniforms__["b" /* getUniformSetter */])(gl, location, info, parsedName.isArray);
      }
      return uniformSetters;
    }
  }, {
    key: '_print',
    value: function _print(bufferName) {
      return 'Program ' + this.id + ': Attribute ' + bufferName;
    }
  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createProgram();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteProgram(this.handle);
    }
  }, {
    key: '_getOptionsFromHandle',
    value: function _getOptionsFromHandle(handle) {
      var shaderHandles = this.gl.getAttachedShaders(handle);
      var opts = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = shaderHandles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var shaderHandle = _step.value;

          var type = this.gl.getShaderParameter(this.handle, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SHADER_TYPE);
          switch (type) {
            case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].VERTEX_SHADER:
              opts.vs = new __WEBPACK_IMPORTED_MODULE_7__shader__["a" /* VertexShader */]({ handle: shaderHandle });
              break;
            case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAGMENT_SHADER:
              opts.fs = new __WEBPACK_IMPORTED_MODULE_7__shader__["b" /* FragmentShader */]({ handle: shaderHandle });
              break;
            default:
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return opts;
    }
  }, {
    key: '_getParameter',
    value: function _getParameter(pname) {
      return this.gl.getProgramParameter(this.handle, pname);
    }
  }]);

  return Program;
}(__WEBPACK_IMPORTED_MODULE_3__resource__["a" /* default */]);

// create uniform setters
// Map of uniform names to setter functions


/* harmony default export */ __webpack_exports__["a"] = (Program);
function getUniformDescriptors(gl, program) {
  var uniformDescriptors = {};
  var length = program.getUniformCount();
  for (var i = 0; i < length; i++) {
    var info = program.getUniformInfo(i);
    var location = program.getUniformLocation(info.name);
    var descriptor = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__uniforms__["b" /* getUniformSetter */])(gl, location, info);
    uniformDescriptors[descriptor.name] = descriptor;
  }
  return uniformDescriptors;
}

// Get a map of buffer indices
function getVaryingMap(varyings, bufferMode) {
  var varyingMap = {};
  var index = 0;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = varyings[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var varying = _step2.value;

      if (bufferMode === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SEPARATE_ATTRIBS) {
        varyingMap[varyings] = { index: index };
        index++;
      } else if (varying === 'gl_NextBuffer') {
        index++;
      } else {
        // Add a "safe" offset as fallback unless app specifies it
        // Could query
        varyingMap[varyings] = { index: index, offset: 16 };
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return varyingMap;
}
//# sourceMappingURL=program.js.map

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__texture__ = __webpack_require__(13);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Texture2D = /*#__PURE__*/function (_Texture) {
  _inherits(Texture2D, _Texture);

  _createClass(Texture2D, null, [{
    key: 'isSupported',
    value: function isSupported(gl, opts) {
      return __WEBPACK_IMPORTED_MODULE_2__texture__["a" /* default */].isSupported(gl, opts);
    }

    /**
     * @classdesc
     * 2D WebGL Texture
     * Note: Constructor will initialize your texture.
     *
     * @class
     * @param {WebGLRenderingContext} gl - gl context
     * @param {Image|ArrayBuffer|null} opts= - named options
     * @param {Image|ArrayBuffer|null} opts.data= - buffer
     * @param {GLint} width - width of texture
     * @param {GLint} height - height of texture
     */

  }]);

  function Texture2D(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Texture2D);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["f" /* assertWebGLContext */])(gl);

    var _this = _possibleConstructorReturn(this, (Texture2D.__proto__ || Object.getPrototypeOf(Texture2D)).call(this, gl, Object.assign({}, opts, { target: gl.TEXTURE_2D })));

    _this.initialize(opts);

    Object.seal(_this);
    return _this;
  }

  // target cannot be modified by bind:
  // textures are special because when you first bind them to a target,
  // they get special information. When you first bind a texture as a
  // GL_TEXTURE_2D, you are actually setting special state in the texture.
  // You are saying that this texture is a 2D texture.
  // And it will always be a 2D texture; this state cannot be changed ever.
  // If you have a texture that was first bound as a GL_TEXTURE_2D,
  // you must always bind it as a GL_TEXTURE_2D;
  // attempting to bind it as GL_TEXTURE_1D will give rise to an error
  // (while run-time).

  _createClass(Texture2D, [{
    key: 'bind',
    value: function bind() {
      var textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;
      var gl = this.gl;

      if (textureUnit === undefined) {
        throw new Error('Texture.bind: must specify texture unit');
      }
      this.textureUnit = textureUnit;
      gl.activeTexture(gl.TEXTURE0 + textureUnit);
      gl.bindTexture(this.target, this.handle);
      return textureUnit;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      var gl = this.gl;

      if (this.textureUnit === undefined) {
        throw new Error('Texture.unbind: texture unit not specified');
      }
      gl.activeTexture(gl.TEXTURE0 + this.textureUnit);
      gl.bindTexture(this.target, null);
      return this.textureUnit;
    }
  }, {
    key: 'getActiveUnit',
    value: function getActiveUnit() {
      return this.gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__api__["f" /* GL */].ACTIVE_TEXTURE) - __WEBPACK_IMPORTED_MODULE_0__api__["f" /* GL */].TEXTURE0;
    }
  }]);

  return Texture2D;
}(__WEBPACK_IMPORTED_MODULE_2__texture__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Texture2D);
//# sourceMappingURL=texture-2d.js.map

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = parseUniformName;
/* harmony export (immutable) */ __webpack_exports__["b"] = getUniformSetter;
/* harmony export (immutable) */ __webpack_exports__["d"] = checkUniformValues;
/* harmony export (immutable) */ __webpack_exports__["c"] = getUniformsTable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__texture__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _UNIFORM_SETTERS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





// Local constants, will be "collapsed" during minification

// WebGL1

var GL_FLOAT = 0x1406;
var GL_FLOAT_VEC2 = 0x8B50;
var GL_FLOAT_VEC3 = 0x8B51;
var GL_FLOAT_VEC4 = 0x8B52;

var GL_INT = 0x1404;
var GL_INT_VEC2 = 0x8B53;
var GL_INT_VEC3 = 0x8B54;
var GL_INT_VEC4 = 0x8B55;

var GL_BOOL = 0x8B56;
var GL_BOOL_VEC2 = 0x8B57;
var GL_BOOL_VEC3 = 0x8B58;
var GL_BOOL_VEC4 = 0x8B59;

var GL_FLOAT_MAT2 = 0x8B5A;
var GL_FLOAT_MAT3 = 0x8B5B;
var GL_FLOAT_MAT4 = 0x8B5C;

var GL_SAMPLER_2D = 0x8B5E;
var GL_SAMPLER_CUBE = 0x8B60;

// WebGL2

var GL_UNSIGNED_INT = 0x1405;
var GL_UNSIGNED_INT_VEC2 = 0x8DC6;
var GL_UNSIGNED_INT_VEC3 = 0x8DC7;
var GL_UNSIGNED_INT_VEC4 = 0x8DC8;

/* eslint-disable camelcase */
var GL_FLOAT_MAT2x3 = 0x8B65;
var GL_FLOAT_MAT2x4 = 0x8B66;
var GL_FLOAT_MAT3x2 = 0x8B67;
var GL_FLOAT_MAT3x4 = 0x8B68;
var GL_FLOAT_MAT4x2 = 0x8B69;
var GL_FLOAT_MAT4x3 = 0x8B6A;

var GL_SAMPLER_3D = 0x8B5F;
var GL_SAMPLER_2D_SHADOW = 0x8B62;
var GL_SAMPLER_2D_ARRAY = 0x8DC1;
var GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
var GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
var GL_INT_SAMPLER_2D = 0x8DCA;
var GL_INT_SAMPLER_3D = 0x8DCB;
var GL_INT_SAMPLER_CUBE = 0x8DCC;
var GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
var GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
var GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
var GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
var GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;

/* TODO - create static Float32...Arrays and copy into those instead of minting new ones?
const arrays = {};
function getTypedArray(type, data) {
  if (flatArrayLength > 1) {
    setter = val => {
      if (!(val instanceof TypedArray)) {
        const typedArray = new TypedArray(flatArrayLength);
        typedArray.set(val);
        val = typedArray;
      }
      assert(val.length === flatArrayLength);
    };
  }
}
// TODO - handle array uniforms
*/

var UNIFORM_SETTERS = (_UNIFORM_SETTERS = {}, _defineProperty(_UNIFORM_SETTERS, GL_FLOAT, function (gl, location, value) {
  return gl.uniform1f(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_VEC2, function (gl, location, value) {
  return gl.uniform2fv(location, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_VEC3, function (gl, location, value) {
  return gl.uniform3fv(location, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_VEC4, function (gl, location, value) {
  return gl.uniform4fv(location, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_INT, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_VEC2, function (gl, location, value) {
  return gl.uniform2iv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_VEC3, function (gl, location, value) {
  return gl.uniform3iv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_VEC4, function (gl, location, value) {
  return gl.uniform4iv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_BOOL, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_BOOL_VEC2, function (gl, location, value) {
  return gl.uniform2iv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_BOOL_VEC3, function (gl, location, value) {
  return gl.uniform3fv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_BOOL_VEC4, function (gl, location, value) {
  return gl.uniform4iv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT2, function (gl, location, value) {
  return gl.uniformMatrix2fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT3, function (gl, location, value) {
  return gl.uniformMatrix3fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT4, function (gl, location, value) {
  return gl.uniformMatrix4fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_2D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_CUBE, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT, function (gl, location, value) {
  return gl.uniform1ui(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_VEC2, function (gl, location, value) {
  return gl.uniform2uiv(location, new Uint32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_VEC3, function (gl, location, value) {
  return gl.uniform3uiv(location, new Uint32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_VEC4, function (gl, location, value) {
  return gl.uniform4uiv(location, new Uint32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT2x3, function (gl, location, value) {
  return gl.uniformMatrix2x3fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT2x4, function (gl, location, value) {
  return gl.uniformMatrix2x4fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT3x2, function (gl, location, value) {
  return gl.uniformMatrix3x2fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT3x4, function (gl, location, value) {
  return gl.uniformMatrix3x4fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT4x2, function (gl, location, value) {
  return gl.uniformMatrix4x2fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT4x3, function (gl, location, value) {
  return gl.uniformMatrix4x3fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_3D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_2D_SHADOW, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_2D_ARRAY, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_2D_ARRAY_SHADOW, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_CUBE_SHADOW, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_SAMPLER_2D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_SAMPLER_3D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_SAMPLER_CUBE, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_SAMPLER_2D_ARRAY, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_SAMPLER_2D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_SAMPLER_3D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_SAMPLER_CUBE, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_SAMPLER_2D_ARRAY, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _UNIFORM_SETTERS);

function parseUniformName(name) {
  // name = name[name.length - 1] === ']' ?
  // name.substr(0, name.length - 3) : name;

  // if array name then clean the array brackets
  var UNIFORM_NAME_REGEXP = /([^\[]*)(\[[0-9]+\])?/;
  var matches = name.match(UNIFORM_NAME_REGEXP);
  if (!matches || matches.length < 2) {
    throw new Error('Failed to parse GLSL uniform name ' + name);
  }

  return {
    name: matches[1],
    length: matches[2] || 1,
    isArray: Boolean(matches[2])
  };
}

// Returns a Magic Uniform Setter
/* eslint-disable complexity */
function getUniformSetter(gl, location, info) {
  var setter = UNIFORM_SETTERS[info.type];
  if (!setter) {
    throw new Error('Unknown GLSL uniform type ' + info.type);
  }
  return setter.bind(null, gl, location);
}

// Basic checks of uniform values without knowledge of program
// To facilitate early detection of e.g. undefined values in JavaScript
function checkUniformValues(uniforms, source) {
  for (var uniformName in uniforms) {
    var value = uniforms[uniformName];
    if (!checkUniformValue(value)) {
      // Add space to source
      source = source ? source + ' ' : '';
      // Value could be unprintable so write the object on console
      console.error(source + ' Bad uniform ' + uniformName, value); // eslint-disable-line
      /* eslint-enable no-console */
      throw new Error(source + ' Bad uniform ' + uniformName);
    }
  }
  return true;
}

function checkUniformValue(value) {
  var ok = true;

  // Test for texture (for sampler uniforms)
  // WebGL2: if (value instanceof Texture || value instanceof Sampler) {
  if (value instanceof __WEBPACK_IMPORTED_MODULE_0__texture__["a" /* default */]) {
    ok = true;
    // Check that every element in array is a number, and at least 1 element
  } else if (Array.isArray(value)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var element = _step.value;

        if (!isFinite(element)) {
          ok = false;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    ok = ok && value.length > 0;
    // Typed arrays can only contain numbers, but check length
  } else if (ArrayBuffer.isView(value)) {
    ok = value.length > 0;
    // Check that single value is a number
  } else if (!isFinite(value)) {
    ok = false;
  }

  return ok;
}

// Prepares a table suitable for console.table
/* eslint-disable max-statements */
function getUniformsTable() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$header = _ref.header,
      header = _ref$header === undefined ? 'Uniforms' : _ref$header,
      program = _ref.program,
      uniforms = _ref.uniforms;

  __WEBPACK_IMPORTED_MODULE_2_assert___default()(program);

  var uniformLocations = program._uniformSetters;
  var table = _defineProperty({}, header, {});

  // Add program's provided uniforms
  for (var uniformName in uniformLocations) {
    var uniform = uniforms[uniformName];
    if (uniform !== undefined) {
      table[uniformName] = {
        Type: uniform,
        Value: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["formatValue"])(uniform)
      };
    }
  }

  // Add program's unprovided uniforms
  for (var _uniformName in uniformLocations) {
    var _uniform = uniforms[_uniformName];
    if (_uniform === undefined) {
      table[_uniformName] = {
        Type: 'NOT PROVIDED',
        Value: 'N/A'
      };
    }
  }

  var unusedTable = {};
  var unusedCount = 0;

  // List any unused uniforms
  for (var _uniformName2 in uniforms) {
    var _uniform2 = uniforms[_uniformName2];
    if (!table[_uniformName2]) {
      unusedCount++;
      unusedTable[_uniformName2] = {
        Type: 'NOT USED: ' + _uniform2,
        Value: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["formatValue"])(_uniform2)
      };
    }
  }

  return { table: table, unusedTable: unusedTable, unusedCount: unusedCount };
}
//# sourceMappingURL=uniforms.js.map

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(2);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// WebGL2 VertexArray Objects Helper






/* eslint-disable camelcase */
var OES_vertex_array_object = 'OES_vertex_array_object';

var GL_ELEMENT_ARRAY_BUFFER = 0x8893;

// const GL_CURRENT_VERTEX_ATTRIB = 0x8626;

var GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
var GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
var GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
var GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
var GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
var GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
var GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;

var GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
var GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;

var PARAMETERS = [GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_POINTER, GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR];

var ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';

var VertexArray = /*#__PURE__*/function (_Resource) {
  _inherits(VertexArray, _Resource);

  _createClass(VertexArray, [{
    key: 'MAX_ATTRIBUTES',
    get: function get() {
      return this.gl.getParameter(this.gl.MAX_VERTEX_ATTRIBS);
    }

    // Create a VertexArray

  }], [{
    key: 'isSupported',
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl) || gl.getExtension(OES_vertex_array_object);
    }
  }, {
    key: 'getDefaultArray',
    value: function getDefaultArray(gl) {
      gl.luma = gl.luma || {};
      if (!gl.luma.defaultVertexArray) {
        gl.luma.defaultVertexArray = new VertexArray(gl, { handle: null });
      }
      return gl.luma.defaultVertexArray;
    }
  }, {
    key: 'getMaxAttributes',
    value: function getMaxAttributes(gl) {
      return gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    }
  }]);

  function VertexArray(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, VertexArray);

    var _this = _possibleConstructorReturn(this, (VertexArray.__proto__ || Object.getPrototypeOf(VertexArray)).call(this, gl, opts));

    _this.elements = null;
    _this.buffers = {}; // new Array(this.MAX_VERTEX_ATTRIBS).fill(null);
    _this.locations = {};
    _this.names = {};
    _this.drawParameters = {};

    _this._bound = false;
    Object.seal(_this);

    _this.initialize(opts);
    return _this;
  }

  _createClass(VertexArray, [{
    key: 'initialize',
    value: function initialize() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$buffers = _ref.buffers,
          buffers = _ref$buffers === undefined ? {} : _ref$buffers,
          _ref$elements = _ref.elements,
          elements = _ref$elements === undefined ? null : _ref$elements,
          _ref$locations = _ref.locations,
          locations = _ref$locations === undefined ? {} : _ref$locations;

      this.setLocations(locations);
      this.setBuffers(buffers, { clear: true });
      this.setElements(elements);
    }

    // Register an optional buffer name to location mapping

  }, {
    key: 'setLocations',
    value: function setLocations(locations) {
      this.locations = locations;
      this.names = {};
    }

    // Set (bind) an elements buffer, for indexed rendering. Must be GL.ELEMENT_ARRAY_BUFFER

  }, {
    key: 'setElements',
    value: function setElements(elements) {
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(!elements || elements.target === GL_ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);

      this.ext.bindVertexArray(this.handle);
      this.gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, elements && elements.handle);
      this.ext.bindVertexArray(null);

      this.elements = elements;
      return this;
    }

    // Set (bind) an array or map of vertex array buffers, either in numbered or
    // named locations. (named locations requires `locations` to have been provided).
    // For names that are not present in `location`, the supplied buffers will be ignored.
    // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements
    // @param {Object} buffers - An object map with attribute names being keys
    //   and values are expected to be instances of Buffer.

  }, {
    key: '_getBufferAndLayout',
    value: function _getBufferAndLayout(bufferData) {
      // Check if buffer was supplied
      var buffer = void 0;
      var layout = void 0;
      if (bufferData.handle) {
        buffer = bufferData;
        layout = bufferData.layout;
      } else {
        buffer = bufferData.buffer;
        layout = Object.assign({}, buffer.layout, bufferData.layout || {}, bufferData);
      }
      return { buffer: buffer, layout: layout };
    }
  }, {
    key: 'setBuffers',
    value: function setBuffers(buffers, _ref2) {
      var clear = _ref2.clear,
          check = _ref2.check;

      var _getLocations2 = this._getLocations(buffers),
          locations = _getLocations2.locations,
          elements = _getLocations2.elements;

      this.ext.bindVertexArray(this.handle);

      // Process locations in order
      for (var location in locations) {
        var bufferData = locations[location];
        if (bufferData) {
          var _getBufferAndLayout2 = this._getBufferAndLayout(bufferData),
              buffer = _getBufferAndLayout2.buffer,
              layout = _getBufferAndLayout2.layout;

          this.setBuffer({ location: location, buffer: buffer, layout: layout });
          this.setDivisor(location, layout.instanced ? 1 : 0);
          this.enable(location);
        } else {
          // DISABLE MISSING ATTRIBUTE
          this.disable(location);
        }
      }
      this.buffers = buffers;

      this.ext.bindVertexArray(null);

      if (elements) {
        this.setElements(elements);
      }

      if (check) {
        this._checkBuffers();
      }
    }

    // Enable an attribute

  }, {
    key: 'enable',
    value: function enable(location) {
      var _this2 = this;

      this.bind(function () {
        _this2.gl.enableVertexAttribArray(location);
      });
    }

    // Disable an attribute

  }, {
    key: 'disable',
    value: function disable(location) {
      var _this3 = this;

      // Don't disable location 0
      if (location > 0) {
        this.bind(function () {
          _this3.gl.disableVertexAttribArray(location);
        });
      }
    }

    // Set the frequency divisor used for instanced rendering.

  }, {
    key: 'setDivisor',
    value: function setDivisor(location, divisor) {
      var _this4 = this;

      this.bind(function () {
        _this4.ext.vertexAttribDivisor(location, divisor);
      });
    }

    // Set a location in vertex attributes array to a buffer

  }, {
    key: 'setBuffer',
    value: function setBuffer() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          location = _ref3.location,
          buffer = _ref3.buffer,
          target = _ref3.target,
          layout = _ref3.layout;

      var gl = this.gl;

      // Copy main data characteristics from buffer

      target = target !== undefined ? target : buffer.target;
      layout = layout !== undefined ? layout : buffer.layout;
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(target, 'setBuffer needs target');
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(layout, 'setBuffer called on uninitialized buffer');

      this.bind(function () {
        // a non-zero named buffer object must be bound to the GL_ARRAY_BUFFER target
        buffer.bind({ target: gl.ARRAY_BUFFER });

        var _layout = layout,
            size = _layout.size,
            type = _layout.type,
            normalized = _layout.normalized,
            stride = _layout.stride,
            offset = _layout.offset;
        // Attach _bound ARRAY_BUFFER with specified buffer format to location

        if (!layout.integer) {
          gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
        } else {
          // specifies *integer* data formats and locations of vertex attributes
          __WEBPACK_IMPORTED_MODULE_3_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl));
          gl.vertexAttribIPointer(location, size, type, stride, offset);
        }
      });
    }

    // Specify values for generic vertex attributes

  }, {
    key: 'setGeneric',
    value: function setGeneric(_ref4) {
      var location = _ref4.location,
          array = _ref4.array;

      __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(0, 'VertexAttributes.setGeneric is not well tested');
      // throw new Error('vertex attribute size must be between 1 and 4');

      var gl = this.gl;


      switch (array.constructor) {
        case Float32Array:
          gl.vertexAttrib4fv(location, array);
          break;
        case Int32Array:
          __WEBPACK_IMPORTED_MODULE_3_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl));
          gl.vertexAttribI4iv(location, array);
          break;
        case Uint32Array:
          __WEBPACK_IMPORTED_MODULE_3_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl));
          gl.vertexAttribI4uiv(location, array);
          break;
        default:
      }

      return this;
    }

    // Specify values for generic vertex attributes

  }, {
    key: 'setGenericValues',
    value: function setGenericValues(location, v0, v1, v2, v3) {
      __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(0, 'VertexAttributes.setGenericValues is not well tested');
      switch (arguments.length - 1) {
        case 1:
          this.gl.vertexAttrib1f(location, v0);break;
        case 2:
          this.gl.vertexAttrib2f(location, v0, v1);break;
        case 3:
          this.gl.vertexAttrib3f(location, v0, v1, v2);break;
        case 4:
          this.gl.vertexAttrib4f(location, v0, v1, v2, v3);break;
        default:
          throw new Error('vertex attribute size must be between 1 and 4');
      }

      // assert(gl instanceof WebGL2RenderingContext, 'WebGL2 required');
      // Looks like these will check how many arguments were supplied?
      // gl.vertexAttribI4i(location, v0, v1, v2, v3);
      // gl.vertexAttribI4ui(location, v0, v1, v2, v3);
    }
  }, {
    key: 'bind',
    value: function bind() {
      var funcOrHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.handle;

      if (typeof funcOrHandle !== 'function') {
        this.bindVertexArray(funcOrHandle);
        return this;
      }

      var value = void 0;

      if (!this._bound) {
        this.ext.bindVertexArray(this.handle);
        this._bound = true;

        value = funcOrHandle();

        this.ext.bindVertexArray(null);
        this._bound = false;
      } else {
        value = funcOrHandle();
      }

      return value;
    }

    // PRIVATE

    // Auto detect draw parameters from the complement of buffers provided

  }, {
    key: '_deduceDrawParameters',
    value: function _deduceDrawParameters() {
      // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER
      // index type is saved for drawElement calls
      var isInstanced = false;
      var isIndexed = false;
      var indexType = null;

      // Check if we have an elements array buffer
      if (this.elements) {
        isIndexed = true;
        indexType = this.elements.layout.type;
      }

      // Check if any instanced buffers
      this.buffers.forEach(function (buffer) {
        if (buffer.layout.instanced > 0) {
          isInstanced = true;
        }
      });

      return { isInstanced: isInstanced, isIndexed: isIndexed, indexType: indexType };
    }
    //         this._filledLocations[bufferName] = true;

  }, {
    key: '_getLocations',
    value: function _getLocations(buffers) {
      // Try to extract elements and locations
      var elements = null;
      var locations = {};

      for (var bufferName in buffers) {
        var buffer = buffers[bufferName];

        // Check if this is an elements array
        if (buffer && buffer.target === GL_ELEMENT_ARRAY_BUFFER) {
          __WEBPACK_IMPORTED_MODULE_3_assert___default()(!elements, 'Duplicate GL.ELEMENT_ARRAY_BUFFER');
          // assert(location === undefined, 'GL.ELEMENT_ARRAY_BUFFER assigned to location');
          elements = buffer;
        }
        // else if (!this._warn[bufferName]) {
        //   log.warn(2, `${this._print(bufferName)} not used`);
        //   this._warn[bufferName] = true;
        // }

        var location = Number(bufferName);
        // if key is a number, interpret as the location
        // if key is not a location number, assume it is a named buffer, look it up in supplied map
        if (!Number.isFinite(location)) {
          location = this.locations[bufferName];
        }
        __WEBPACK_IMPORTED_MODULE_3_assert___default()(Number.isFinite(location));

        __WEBPACK_IMPORTED_MODULE_3_assert___default()(!locations[location], 'Duplicate attribute for binding point ' + location);
        locations[location] = buffer;
      }

      return { locations: locations, elements: elements };
    }
  }, {
    key: '_sortBuffersByLocation',
    value: function _sortBuffersByLocation(buffers) {
      // Try to extract elements and locations
      var elements = null;
      var locations = new Array(this._attributeCount).fill(null);

      for (var bufferName in buffers) {
        var buffer = buffers[bufferName];

        // Check if this is an elements arrau
        if (buffer.target === GL_ELEMENT_ARRAY_BUFFER) {
          __WEBPACK_IMPORTED_MODULE_3_assert___default()(!elements, 'Duplicate GL.ELEMENT_ARRAY_BUFFER');
          // assert(location === undefined, 'GL.ELEMENT_ARRAY_BUFFER assigned to location');
          elements = buffer;
        } else if (!this._warn[bufferName]) {
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(2, this._print(bufferName) + ' not used');
          this._warn[bufferName] = true;
        }

        var location = Number(bufferName);
        // if key is a number, interpret as the location
        // if key is not a location number, assume it is a named buffer, look it up in supplied map
        if (!Number.isFinite(location)) {
          location = this.locations[bufferName];
        }
        locations[location] = bufferName;
        __WEBPACK_IMPORTED_MODULE_3_assert___default()(locations[location] === null, 'Duplicate attribute for binding point ' + location);
        locations[location] = location;
      }

      return { locations: locations, elements: elements };
    }
  }, {
    key: '_checkBuffers',
    value: function _checkBuffers() {
      for (var attributeName in this._attributeLocations) {
        if (!this._filledLocations[attributeName] && !this._warn[attributeName]) {
          var location = this._attributeLocations[attributeName];
          // throw new Error(`Program ${this.id}: ` +
          //   `Attribute ${location}:${attributeName} not supplied`);
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(0, 'Program ' + this.id + ': Attribute ' + location + ':' + attributeName + ' not supplied');
          this._warn[attributeName] = true;
        }
      }
      return this;
    }

    // RESOURCE IMPLEMENTATION

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.ext.createVertexArray();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle(handle) {
      this.ext.deleteVertexArray(handle);
      return [this.elements];
      // return [this.elements, ...this.buffers];
    }

    // Generic getter for information about a vertex attribute at a given position
    // @param {GLuint} location - index of the vertex attribute.
    // @param {GLenum} pname - specifies the information to query.
    // @returns {*} - requested vertex attribute information (specified by pname)

  }, {
    key: '_getParameter',
    value: function _getParameter(pname, _ref5) {
      var location = _ref5.location;

      __WEBPACK_IMPORTED_MODULE_3_assert___default()(Number.isFinite(location));

      this.ext.bindVertexArray(this.handle);

      // Let the polyfill intercept the query
      var result = void 0;
      switch (pname) {
        case GL_VERTEX_ATTRIB_ARRAY_POINTER:
          result = this.gl.getVertexAttribOffset(location, pname);
          break;
        default:
          result = this.ext.getVertexAttrib(location, pname);
      }

      this.ext.bindVertexArray(null);
      return result;
    }
  }, {
    key: '_getData',
    value: function _getData() {
      var _this5 = this;

      return new Array(this.MAX_ATTRIBUTES).fill(0).map(function (_, location) {
        var result = {};
        PARAMETERS.forEach(function (parameter) {
          result[__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["b" /* glKey */])(parameter)] = _this5.getParameter(parameter, { location: location });
        });
        return result;
      });
    }
  }, {
    key: '_bind',
    value: function _bind(handle) {
      this.ext.bindVertexArray(handle);
    }
  }]);

  return VertexArray;
}(__WEBPACK_IMPORTED_MODULE_2__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (VertexArray);
//# sourceMappingURL=vertex-array.js.map

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export experimental */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_gl_constants__ = __webpack_require__(3);
/* unused harmony reexport GL */
/* unused harmony reexport glGet */
/* unused harmony reexport glKey */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils__ = __webpack_require__(11);
/* unused harmony reexport trackContextCreation */
/* unused harmony reexport trackContextState */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_context__ = __webpack_require__(1);
/* unused harmony reexport isWebGL */
/* unused harmony reexport isWebGL2 */
/* unused harmony reexport setContextDefaults */
/* unused harmony reexport createGLContext */
/* unused harmony reexport deleteGLContext */
/* unused harmony reexport pollContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_context_state__ = __webpack_require__(15);
/* unused harmony reexport resetParameters */
/* unused harmony reexport getParameter */
/* unused harmony reexport getParameters */
/* unused harmony reexport setParameter */
/* unused harmony reexport setParameters */
/* unused harmony reexport withParameters */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_context_limits__ = __webpack_require__(40);
/* unused harmony reexport getContextInfo */
/* unused harmony reexport getGLContextInfo */
/* unused harmony reexport getContextLimits */
/* unused harmony reexport glGetDebugInfo */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__webgl_context_features__ = __webpack_require__(24);
/* unused harmony reexport FEATURES */
/* unused harmony reexport hasFeature */
/* unused harmony reexport hasFeatures */
/* unused harmony reexport getFeatures */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__webgl_context_debug__ = __webpack_require__(82);
/* unused harmony reexport makeDebugContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__webgl_api_debug_parameters__ = __webpack_require__(80);
/* unused harmony reexport installParameterDefinitions */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_buffer__ = __webpack_require__(18);
/* unused harmony reexport Buffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__webgl_shader__ = __webpack_require__(27);
/* unused harmony reexport Shader */
/* unused harmony reexport VertexShader */
/* unused harmony reexport FragmentShader */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__webgl_program__ = __webpack_require__(42);
/* unused harmony reexport Program */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__webgl_framebuffer__ = __webpack_require__(25);
/* unused harmony reexport Framebuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__webgl_renderbuffer__ = __webpack_require__(26);
/* unused harmony reexport Renderbuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__webgl_texture_2d__ = __webpack_require__(43);
/* unused harmony reexport Texture2D */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__webgl_texture_cube__ = __webpack_require__(88);
/* unused harmony reexport TextureCube */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__webgl_draw__ = __webpack_require__(83);
/* unused harmony reexport draw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__webgl_clear__ = __webpack_require__(23);
/* unused harmony reexport clear */
/* unused harmony reexport clearBuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__webgl_fence_sync__ = __webpack_require__(84);
/* unused harmony reexport FenceSync */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__webgl_query__ = __webpack_require__(86);
/* unused harmony reexport Query */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__webgl_sampler__ = __webpack_require__(87);
/* unused harmony reexport Sampler */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__webgl_texture_3d__ = __webpack_require__(209);
/* unused harmony reexport Texture3D */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__webgl_texture_2d_array__ = __webpack_require__(208);
/* unused harmony reexport Texture2DArray */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__webgl_transform_feedback__ = __webpack_require__(89);
/* unused harmony reexport TransformFeedback */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__webgl_vertex_array__ = __webpack_require__(45);
/* unused harmony reexport VertexArray */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__webgl_uniform_buffer_layout__ = __webpack_require__(210);
/* unused harmony reexport UniformBufferLayout */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__core_model__ = __webpack_require__(20);
/* unused harmony reexport Model */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__core_animation_loop__ = __webpack_require__(59);
/* unused harmony reexport AnimationLoop */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__core_pick_models__ = __webpack_require__(62);
/* unused harmony reexport pickModels */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__core_picking_colors__ = __webpack_require__(161);
/* unused harmony reexport encodePickingColor */
/* unused harmony reexport decodePickingColor */
/* unused harmony reexport getNullPickingColor */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__packages_events__ = __webpack_require__(179);
/* unused harmony reexport addEvents */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__geometry_geometry__ = __webpack_require__(7);
/* unused harmony reexport Geometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__geometry_cone_geometry__ = __webpack_require__(63);
/* unused harmony reexport ConeGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__geometry_cube_geometry__ = __webpack_require__(64);
/* unused harmony reexport CubeGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__geometry_cylinder_geometry__ = __webpack_require__(65);
/* unused harmony reexport CylinderGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__geometry_ico_sphere_geometry__ = __webpack_require__(66);
/* unused harmony reexport IcoSphereGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__geometry_plane_geometry__ = __webpack_require__(67);
/* unused harmony reexport PlaneGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__geometry_sphere_geometry__ = __webpack_require__(68);
/* unused harmony reexport SphereGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__geometry_truncated_cone_geometry__ = __webpack_require__(21);
/* unused harmony reexport TruncatedConeGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__models_cone__ = __webpack_require__(171);
/* unused harmony reexport Cone */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__models_cube__ = __webpack_require__(172);
/* unused harmony reexport Cube */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__models_cylinder__ = __webpack_require__(173);
/* unused harmony reexport Cylinder */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__models_ico_sphere__ = __webpack_require__(174);
/* unused harmony reexport IcoSphere */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__models_plane__ = __webpack_require__(175);
/* unused harmony reexport Plane */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__models_sphere__ = __webpack_require__(176);
/* unused harmony reexport Sphere */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__models_truncated_cone__ = __webpack_require__(177);
/* unused harmony reexport TruncatedCone */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__models_clip_space_quad__ = __webpack_require__(170);
/* unused harmony reexport ClipSpaceQuad */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__packages_math_src_common__ = __webpack_require__(8);
/* unused harmony reexport radians */
/* unused harmony reexport degrees */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__packages_math_src_vector2__ = __webpack_require__(34);
/* unused harmony reexport Vector2 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__packages_math_src_vector3__ = __webpack_require__(35);
/* unused harmony reexport Vector3 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__packages_math_src_vector4__ = __webpack_require__(36);
/* unused harmony reexport Vector4 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__packages_math_src_matrix4__ = __webpack_require__(70);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_50__packages_math_src_matrix4__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__packages_math_src_quaternion__ = __webpack_require__(71);
/* unused harmony reexport Quaternion */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__io__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__io___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_52__io__);
/* unused harmony reexport setPathPrefix */
/* unused harmony reexport loadFile */
/* unused harmony reexport loadImage */
/* unused harmony reexport loadFiles */
/* unused harmony reexport loadImages */
/* unused harmony reexport loadTextures */
/* unused harmony reexport loadProgram */
/* unused harmony reexport loadModel */
/* unused harmony reexport parseModel */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__shadertools_lib_shader_cache__ = __webpack_require__(73);
/* unused harmony reexport ShaderCache */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__shadertools_lib_assemble_shaders__ = __webpack_require__(72);
/* unused harmony reexport assembleShaders */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__shadertools_lib_shader_modules__ = __webpack_require__(37);
/* unused harmony reexport registerShaderModules */
/* unused harmony reexport setDefaultShaderModules */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__shadertools_modules_fp32_fp32__ = __webpack_require__(184);
/* unused harmony reexport fp32 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__shadertools_modules_fp64_fp64__ = __webpack_require__(187);
/* unused harmony reexport fp64 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__shadertools_modules_project_project__ = __webpack_require__(74);
/* unused harmony reexport project */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__shadertools_modules_lighting_lighting__ = __webpack_require__(192);
/* unused harmony reexport lighting */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__shadertools_modules_dirlight_dirlight__ = __webpack_require__(183);
/* unused harmony reexport dirlight */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__shadertools_modules_picking_picking__ = __webpack_require__(194);
/* unused harmony reexport picking */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__shadertools_modules_diffuse_diffuse__ = __webpack_require__(182);
/* unused harmony reexport diffuse */
/* unused harmony reexport FramebufferObject */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__deprecated_scene__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__deprecated_scene___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_63__deprecated_scene__);
/* unused harmony reexport Scene */
/* unused harmony reexport withState */
/* unused harmony reexport glContextWithState */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__webgl_functions__ = __webpack_require__(85);
/* unused harmony reexport readPixels */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__deprecated_shaderlib__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__deprecated_shaderlib___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_65__deprecated_shaderlib__);
/* unused harmony reexport Shaders */
// Export core modules for luma.gl

// Initialize any global state
__webpack_require__(22);

// WebGL




















// WebGL2 & Extensions









// Core Classes


// export {default as Object3D} from './core/object-3d';
// export {default as Group} from './core/group';



// Addons


// Geometry









// Models










// Math






// export {default as Euler} from './packages/math/src/euler';

// IO


// shadertools




// shader modules








// EXPERIMENTAL EXPORTS



var experimental = {
  clearBuffer: __WEBPACK_IMPORTED_MODULE_16__webgl_clear__["a" /* clearBuffer */]
};

// DEPRECATED EXPORTS
// Alias for FramebufferObject (deprecated in v3). Framebuffer API is fairly similar



// DEPRECATED IN V3.0


//# sourceMappingURL=index.js.map

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = JSONReadCell;
/* unused harmony export JSONWriteCell */
/* unused harmony export toJSONModel */
/* unused harmony export updateUVs */
/* unused harmony export JSON2OBJ */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__quad_edge_js__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__myriahedral_js__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_js__ = __webpack_require__(19);
// obj.cc - read Wavefront "obj" file format for 3-D models
// This understands only a subset of the file format, namely
//	# comment
//	v <X> <Y> <Z>
//	f <V1> <V2> ... <VN>
//
// Paul Heckbert	10 Feb 1999







// ---------------------------- some data structures used by objReadCell only

class Tface {			// a (temporary) face
  constructor() {
    this.vlist = [];
    this.no = 0;
    this.face = 0;
  }
}

class Tsector {

  constructor(p, f, q) {
    this.p = p; // first ccw vertex
    this.f = f; // intervening face
    this.q = q; // second ccw vertex
  }

};
// in counterclockwise order
// (a linked list of pointers to other vertex)

// (a linked list of pointers to Arcs)
// when done, this (linear) list contains
// the ccw cycle of edges about a vertex

// For example, for vertex v below,
//
//       c------ b------i
//      / \     /      /
//     /   \   /      /
//    /     \ /      /
//   d------ v -----a--h
//    \     / \        |
//     \   /   \       |
//      \ /     \      |
//       e-------f-----g
//
// some valid Arcs are the lists (a,b), (a,b,c), (b,c), (c,d),
// (f,a), (e,f,a,b), etc. because those are the other endpoints of
// edges emanating from v, in counterclockwise (ccw) order.
// An arc always consists of at least two vertices.
// A valid Arclist is any set of disjoint arcs, in arbitrary order.
// When done, the Arclist for this vertex would be a single Arc.
// It would be a cyclic permutation of (a,b,c,d,e,f).
/*
struct Tvert {			// a (temporary) vertex
    int no;			// ??for debugging
    int done;			// is topology fully set & arclist complete?
    Vec3 p;			// position
    Arclist arclist;		// info about the vertices adjacent to this one
    Vertex *vertex;             // final vertex in cell, null if not id. yet
    int instantiated;           // true if identified and instantiated
};
*/

function merge_arc(v, p, q, f) {
  // Merge the arc (p,q) into the list of arcs around vertex v.
  // Cases:
  //  1. ( bef &&  aft) it connects two existing arcs
  //  2. ( bef && !aft) it goes on the end of an existing arc
  //  3. (!bef &&  aft) it goes on the beginning of an existing arc
  //  4. (!bef && !aft) it does not connect with an existing arc
  //List_item<Arc> *a, *aft_item;
  let bef = 0;
  let aft = 0;
  let sector = new Tsector(p, f, q);
  let aft_item;
  v.arclist.forEach(a => {
    // a->obj is an Arc
    const first = a[0];
    const last = a[a.length - 1];
    if (last.q === p) {
      bef = a;
    }
    if (first.p === q) {
      aft = a;
      aft_item = a;
    }
  });
  // now concatenate the three arcs bef, (p,q), and aft
  // where bef and aft might be null
  if (bef) {
    if (aft) { // 1. ( bef &&  aft) it connects two existing arcs
      bef.push(sector); // insert new sector
      if (bef === aft) {
        // done with vertex! connecting these would make arc circular
        v.done = 1;
        return;
      }
      // now we'll merge two arcs in the arclist
      v.arclist.splice(v.arclist.indexOf(aft_item), 1);	// remove following arc
      bef.push.apply(bef, aft);			// and concat it into previous
    } else { // 2. ( bef && !aft) it goes on the end of existing arc
      bef.push(sector);
    }
  } else {
    if (aft) { // 3. (!bef &&  aft) it goes on beg. of existing arc
      aft.unshift(sector);
    } else {		// 4. (!bef && !aft) it doesn't connect w. existing arc
      let arc = [];
      arc.push(sector);
      v.arclist.push(arc);
    }
  }
}

function add_arcs(vlist, f) {
  // vlist is not a circular list, but we need to step through all
  // consecutive triples as if it were circular
  let i = 0;
  let u = vlist[vlist.length -1];
  let v = vlist[i];
  i++;
  let w = vlist[i];

  while (w) {
	  merge_arc(v, w, u, f);
    i++;
    u = v;
    v = w;
    w = vlist[i];
  }

  merge_arc(v, vlist[0], u, f);  // one more that we missed
}

/*
 * identified   <=> Tvert has been associated with a particular Vertex
 * instantiated <=> Tface has been associated with a particular Face AND
 *                  all vertices of the face have been identified
 * instantiated <=> Tvert has been identified AND
 *                  all adjacent Tfaces have been instantiated
 */

/*
 * Return true if a given pair of vertices is connected directly by an edge
 * along a given left face.
 * vertex1, vertex2 -> the vertices to check;
 *                     must be nonnull
 * left             -> the left face to check for;
 *                     must be nonnull
 * <- true if there is an edge from _vertex1_ to _vertex2_ with left face
 *    _left_
 */
function isConnected(vertex1, vertex2, leftFace) {
  // check the orbit of vertex1 for an edge to vertex2
  let ans = 0;
  vertex1.eachEdge(edge => {
    if (edge.Dest() === vertex2 && edge.Left() === leftFace) {
      ans = 1;
    }
  });
  return ans;
}

/*
 * Return the face to the right of a given face around a given vertex.
 * vertex -> the vertex to look for the face around;
 *           must be nonnull
 * left   -> the left face to return the right face of;
 *           must be nonnull
 * <- the face to the right of _left_ around _vertex_;
 *    null if none
 */
function RightFace(vertex, leftFace) {
  // check the left face of each edge in the orbit of the vertex

  let start = vertex.getEdge();
  let scan  = start;

  do {
    if (scan.Left() === leftFace) {
      return scan.Right();
    }

    scan = scan.Onext();
  } while (scan !== start);
}

/*
 * Return true if a given vertex is adjacent to a given face.
 * face   -> the face to look for the vertex in;
 *           must be nonnull
 * vertex -> the vertex to look for;
 *           must be nonnull
 * <- true if _vertex_ is on _face_
 */
function hasVertex(face, vertex) {
  // check the origin vertex of each edge on the face
  let ans = 0;
  face.eachEdge(e => {
    if (e.Org() === vertex) {
      ans = 1;
    }
  });
  return ans;
}

/*
 * Return true if a given face includes all the identified vertices on a given
 * Tvert list.
 * face  -> the face to check;
 *          must be nonnull
 * vlist -> the vertex list to check against;
 *          must be nonnull
 * <- true if _face_ is adjacent to all the vertices on _vlist_
 */
function hasVertices(face, vlist) {
  // check each vertex on the list
  let hasVertexCurr = (Tvert) => (Tvert.vertex == 0 || hasVertex(face, Tvert.vertex));
  return vlist.every(hasVertexCurr);
}

/*
 * Return a face that can be used to instantiate a given Tface.
 * cell -> the cell to get the face from;
 *         must be nonnull
 * f    -> Tface to get the face for;
 *         must be nonnull
 * <- a face that can be used to instantiate _f_;
 *    null if none are available
 */
function getFace(cell, f) {
  // locate all the unused faces in the cell
  let faces = [];
  let count = 0;

  cell.eachFace(face => {
    if (!face.data && hasVertices(face, f.vlist)) {
      faces.push(face);
    }
  });

  if (faces.length) {
    return faces[0];
  }

  return 0;
}

/*
 * Instantiate a given Tface in a given cell by identifying its vertices.
 * cell -> the cell to instantiate the face in;
 *         must be nonnull
 * f    -> the Tface to instantiate;
 *         must be nonnull
 */
function makeFace(cell, f) {
  // get the face to use for the Tface
  let face = getFace(cell, f);

  f.vlist.forEach((vi, i) => {
    let vertex1 = vi.vertex;
    let vertex2;

    if (vertex1) {
      let vj;
      while (true) {
        i++;
        vj = f.vlist[i];
        if (!vj) {
          i = 0;
          vj = f.vlist[i];
        }
        vertex2 = vj.vertex;

        if (vertex2) {
          break;
        }
      }

      if (!isConnected(vertex1, vertex2, face)) {
        if (vertex1 === vertex2) {
          //debugger;
          console.log('make face edge', vertex1.id, vertex2.id);
          //return;
        }
        let temp = cell.makeFaceEdge(face, vertex1, vertex2);
        if (temp) {
          temp.Right();
        } else {
          debugger;
        }
      }
    }
  });

  // find the first identified vertex

  let vi0 = f.vlist[0];
  let i = 0;

  while (vi0.vertex == 0) {
    i++;
    vi0 = f.vlist[i];
  }

  // identify all the following and preceding vertices

  let vi = vi0;
  let vertex = vi0.vertex;

  while (true) {
    i++
    vi = f.vlist[i];

    if (!vi) {
      i = 0;
      vi = f.vlist[0];
    }

    if (vi == vi0) {
      break;
    }

    let v = vi;

    if (!v.vertex) {
      let right = RightFace(vertex, face);

      v.vertex = cell.makeVertexEdge(vertex, face, right).Dest();
      v.vertex.pos = v.p.slice();
      v.vertex.setId(v.no);
    }

    vertex = v.vertex;
  }

  f.face = face;
  face.setId(f.no);
  face.data = f;
}

/*
 * Instantiate a given identified Tvert in a given cell by instantiating its
 * adjacent faces.
 * cell -> the cell to instantiate the Tvert in;
 *         must be nonnull
 * v    -> the Tvert to instantiate;
 *         must be nonnull
 */

function makeVertex(cell, v) {
  // find the first sector with an identified p vertex
  let i = 0;
  let wi0 = v.arclist[0][i];

  while (!wi0.p.vertex && !wi0.q.vertex) {
    i++;
    wi0 = v.arclist[0][i];
  }

  // instantiate all following sectors of the vertex in counterclockwise order
  let wi = wi0;

  do {
    if (wi.p.vertex || wi.q.vertex) {
      let f = wi.f;
      if (f.face == 0) {
        makeFace(cell, f);
      }
    }
    i++;
    wi = v.arclist[0][i];

    if (!wi) {
      i = 0;
      wi = v.arclist[0][i];
    }

  } while (wi !== wi0);

  v.instantiated = 1;
}


function print_quadedge(verts, faces) {
  // print vertices around each face and vertex currently
  console.log('VERTICES OF EACH FACE:');
  faces.forEach(f => {
    console.log('face', f);
    f.vlist.forEach(vi => {
      console.log(vi, vi.no);
    });
  });

  console.log('VERTICES AROUND EACH VERTEX:');
  verts.forEach(v => {
    console.log('vertex', v.no, v.done, v.arclist);
  });
}

function build_quadedge(verts, faces) {
  let cell = __WEBPACK_IMPORTED_MODULE_0__quad_edge_js__["a" /* Cell */].make();
  let vertex1;

  cell.eachVertex(v => {
    vertex1 = v;
  });

  let v = verts[0];
  v.vertex = vertex1;
  v.vertex.pos = v.p.slice();
  v.vertex.setId(v.no);

  makeFace(cell, v.arclist[0][0].f);

  while (true) {
    let instantiated = 1;
    verts.forEach(v => {
      if (v.vertex != 0 && !v.instantiated) {
        makeVertex(cell, v);
      }
      instantiated = v.instantiated && instantiated;
    });
    if (instantiated) {
      break;
    }
  }

  cell.eachFace(f => f.data = 0);

  return cell;
}

function JSONReadCell(json) {
  let verts = json.v.map((v, i) => {
    return {
      p: v,
      no: i,
      done: 0,
      vertex: 0,
      instantiated: 0,
      arclist: []
    };
  });
  let faces = json.f.map((face, i) => {
    let f = new Tface();
    f.face = 0;
    f.no = i;
    face.forEach(index => f.vlist.push(verts[index -1]));
    add_arcs(f.vlist, f);
    return f;
  });

  return build_quadedge(verts, faces);
}

// TODO(nico): build a function that retruns float arrays and normals.
function JSONWriteCell(cell, pos='pos', flatten=false) {
  let ans = { v: [], f: [], n: [] };

  let i = 1;
  cell.eachVertex(v => {
    v.setId(i++);
    if (flatten) {
      ans.v.push.apply(ans.v, v[pos]);
    } else {
      ans.v.push(v.pos);
    }
  });
  cell.eachFace(f => {
    let indices = [];
    f.eachEdge(e => indices.push(e.Org().id + (flatten ? -1 : 0)));
    if (flatten) {
      ans.f.push.apply(ans.f, indices);
    } else {
      ans.f.push(indices);
    }
  });
  return ans;
}

function toJSONModel(cell, pos) {
  let ans = { v: [], n: [], uvs: [] };
  let abs = Math.abs;

  cell.eachFace(f => {
    if (f.edges() > 3) {
      return;
    }
    let n = f.getNormal(pos);
    if (f.data && f.data.clone) {
      n = f.data.ref.getNormal(pos);
    }
    f.eachEdge(e => {
      const vert = e.Org()[pos];
      const vOrg = e.Org().pos;
      const vOrgInSphere = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(vOrg);
      const qPos = e.Dest().pos;
      const qPosInSphere = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(qPos);
      const rPos = e.Lnext().Dest().pos;
      const rPosInSphere = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(rPos);
      ans.v.push.apply(ans.v, vert);
      ans.n.push.apply(ans.n, n);

      // compute uvs
      const [r, theta, phi] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["c" /* toSpherical */])([vOrgInSphere[0], vOrgInSphere[1], vOrgInSphere[2]]);
      const [rQ, thetaQ, phiQ] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["c" /* toSpherical */])([qPosInSphere[0], qPosInSphere[1], qPosInSphere[2]]);
      const [rR, thetaR, phiR] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["c" /* toSpherical */])([rPosInSphere[0], rPosInSphere[1], rPosInSphere[2]]);
      let u = (theta + Math.PI) / (Math.PI * 2);
      let v = 1 - phi / Math.PI;
      let uQ = (thetaQ + Math.PI) / (Math.PI * 2);
      let uR = (thetaR + Math.PI) / (Math.PI * 2);
      if (abs(u - uQ) > 0.5) {
        if (u < uQ) {
          u += 1;
        }
      } else if (abs(u - uR) > 0.5) {
        if (u < uR) {
          u +=1;
        }
      }
      ans.uvs.push.apply(ans.uvs, [u, v]);
    });
  });
  return ans;
}

function updateUVs(mesh, mat) {
  const verts = mesh.v;
  const uvs = mesh.uvs;
  let uvi = 0;
  const abs = Math.abs;

  // one face at a time
  for (let i = 0; i < verts.length; i+=9) {
    let vOrg = [verts[i], verts[i + 1], verts[i + 2]];
    let qPos = [verts[i + 3], verts[i + 4], verts[i + 5]];
    let rPos = [verts[i + 6], verts[i + 7], verts[i + 8]];
    let points = [vOrg, qPos, rPos];
    for (let j = 0; j < 3; j++) {
      let [vOrgInSphere, qPosInSphere, rPosInSphere] = [vOrg, qPos, rPos].map(p => {
        let pos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(p).slice();
        pos.push(1);
        let posVec = mat.transformVector4(pos);
        return posVec;
      });

      // compute uvs
      const [r, theta, phi] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["c" /* toSpherical */])([vOrgInSphere[0], vOrgInSphere[1], vOrgInSphere[2]]);
      const [rQ, thetaQ, phiQ] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["c" /* toSpherical */])([qPosInSphere[0], qPosInSphere[1], qPosInSphere[2]]);
      const [rR, thetaR, phiR] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["c" /* toSpherical */])([rPosInSphere[0], rPosInSphere[1], rPosInSphere[2]]);
      let u = (theta + Math.PI) / (Math.PI * 2);
      let v = 1 - phi / Math.PI;
      let uQ = (thetaQ + Math.PI) / (Math.PI * 2);
      let uR = (thetaR + Math.PI) / (Math.PI * 2);
      if (abs(u - uQ) > 0.5) {
        if (u < uQ) {
          u += 1;
        }
      } else if (abs(u - uR) > 0.5) {
        if (u < uR) {
          u +=1;
        }
      }
      uvs[uvi] = u;
      uvs[uvi + 1] = v;
      uvi += 2;
      let last = points.shift();
      points.push(last);
      [vOrg, qPos, rPos] = points;
    }
  }
  return uvs;
}

function precisionRound(number, precision) {
  var factor = Math.pow(10, precision);
  return Math.round(number * factor) / factor;
}

function JSON2OBJ(json) {
  let aux3 = [];
  let aux2 = [];
  let vertArray = [];
  json.v.forEach((v, i) => {
    if (!(i % 3) && aux3.length) {
      vertArray.push(aux3.join(' '));
      aux3 = [];
    }
    aux3.push(v);
  });
  if (aux3.length) {
    vertArray.push(aux3.join(' '));
  }
  aux3 = [];
  //const faceArray = json.f.map(f => f.join(' '));
  let faceArray = [];
  let normalArray = [];
  let uvArray = [];

  if (json.f) {
    faceArray = json.f.map(f => f.join(' '));
  } else {
    for (let i = 0; i < vertArray.length; i += 3) {
      faceArray.push(`${i+1}/${i+1}/${i+1} ${i+2}/${i+2}/${i+2} ${i+3}/${i+3}/${i+3}`);
    }
  }

  if (json.n) {
    json.n.forEach((v, i) => {
      if (!(i % 3) && aux3.length) {
        normalArray.push(aux3.join(' '));
        aux3 = [];
      }
      aux3.push(v);
    });
    if (aux3.length) {
      normalArray.push(aux3.join(' '));
    }
    aux3 = [];
  }

  if (json.uvs) {
    json.uvs.forEach((v, i) => {
      if (!(i % 2) && aux2.length) {
        uvArray.push(aux2.join(' '));
        aux2 = [];
      }
      aux2.push(v);
    });
    if (aux2.length) {
      uvArray.push(aux2.join(' '));
    }
    aux2 = [];
  }

  const verts = 'v ' + vertArray.join('\nv ') + '\n';
  const faces = 'f ' + faceArray.join('\nf ');

  let normals = '';
  if (normalArray.length) {
    normals = 'vn ' + normalArray.join('\nvn ') + '\n';
  }

  let uvs = '';
  if (uvArray.length) {
    uvs = 'vt ' + uvArray.join('\nvt ') + '\n';
  }
  return verts + normals + uvs + faces;
}


/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = rotateZ;

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(56)


/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = setAxisAngle

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
function setAxisAngle (out, axis, rad) {
  rad = rad * 0.5
  var s = Math.sin(rad)
  out[0] = s * axis[0]
  out[1] = s * axis[1]
  out[2] = s * axis[2]
  out[3] = Math.cos(rad)
  return out
}


/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = cross;

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2]

    out[0] = ay * bz - az * by
    out[1] = az * bx - ax * bz
    out[2] = ax * by - ay * bx
    return out
}

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = length;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
    var x = a[0],
        y = a[1],
        z = a[2]
    return Math.sqrt(x*x + y*y + z*z)
}

/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = add

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function add (out, a, b) {
  out[0] = a[0] + b[0]
  out[1] = a[1] + b[1]
  out[2] = a[2] + b[2]
  out[3] = a[3] + b[3]
  return out
}


/***/ }),
/* 54 */
/***/ (function(module, exports) {

module.exports = dot

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot (a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3]
}


/***/ }),
/* 55 */
/***/ (function(module, exports) {

module.exports = lerp

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
function lerp (out, a, b, t) {
  var ax = a[0],
    ay = a[1],
    az = a[2],
    aw = a[3]
  out[0] = ax + t * (b[0] - ax)
  out[1] = ay + t * (b[1] - ay)
  out[2] = az + t * (b[2] - az)
  out[3] = aw + t * (b[3] - aw)
  return out
}


/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = normalize

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
function normalize (out, a) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3]
  var len = x * x + y * y + z * z + w * w
  if (len > 0) {
    len = 1 / Math.sqrt(len)
    out[0] = x * len
    out[1] = y * len
    out[2] = z * len
    out[3] = w * len
  }
  return out
}


/***/ }),
/* 57 */
/***/ (function(module, exports) {

module.exports = scale

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
function scale (out, a, b) {
  out[0] = a[0] * b
  out[1] = a[1] * b
  out[2] = a[2] * b
  out[3] = a[3] * b
  return out
}


/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = set

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
function set (out, x, y, z, w) {
  out[0] = x
  out[1] = y
  out[2] = z
  out[3] = w
  return out
}


/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = requestAnimationFrame;
/* harmony export (immutable) */ __webpack_exports__["c"] = cancelAnimationFrame;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl__ = __webpack_require__(12);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* global window, setTimeout, clearTimeout */





// Node.js polyfills for requestAnimationFrame and cancelAnimationFrame
function requestAnimationFrame(callback) {
  return __WEBPACK_IMPORTED_MODULE_0__utils__["isBrowser"] ? window.requestAnimationFrame(callback) : setTimeout(callback, 1000 / 60);
}

function cancelAnimationFrame(timerId) {
  return __WEBPACK_IMPORTED_MODULE_0__utils__["isBrowser"] ? window.cancelAnimationFrame(timerId) : clearTimeout(timerId);
}

var AnimationLoop = /*#__PURE__*/function () {
  /*
   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context
   */
  function AnimationLoop() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$onCreateContext = _ref.onCreateContext,
        onCreateContext = _ref$onCreateContext === undefined ? function (opts) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl__["createGLContext"])(opts);
    } : _ref$onCreateContext,
        _ref$onDeleteContext = _ref.onDeleteContext,
        onDeleteContext = _ref$onDeleteContext === undefined ? function (gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl__["deleteGLContext"])(gl);
    } : _ref$onDeleteContext,
        _ref$onInitialize = _ref.onInitialize,
        onInitialize = _ref$onInitialize === undefined ? function () {} : _ref$onInitialize,
        _ref$onRender = _ref.onRender,
        onRender = _ref$onRender === undefined ? function () {} : _ref$onRender,
        _ref$onFinalize = _ref.onFinalize,
        onFinalize = _ref$onFinalize === undefined ? function () {} : _ref$onFinalize,
        _ref$gl = _ref.gl,
        gl = _ref$gl === undefined ? null : _ref$gl,
        _ref$glOptions = _ref.glOptions,
        glOptions = _ref$glOptions === undefined ? {
      preserveDrawingBuffer: true
    } : _ref$glOptions,
        _ref$width = _ref.width,
        width = _ref$width === undefined ? null : _ref$width,
        _ref$height = _ref.height,
        height = _ref$height === undefined ? null : _ref$height,
        _ref$autoResizeViewpo = _ref.autoResizeViewport,
        autoResizeViewport = _ref$autoResizeViewpo === undefined ? true : _ref$autoResizeViewpo,
        _ref$autoResizeCanvas = _ref.autoResizeCanvas,
        autoResizeCanvas = _ref$autoResizeCanvas === undefined ? true : _ref$autoResizeCanvas,
        _ref$autoResizeDrawin = _ref.autoResizeDrawingBuffer,
        autoResizeDrawingBuffer = _ref$autoResizeDrawin === undefined ? true : _ref$autoResizeDrawin,
        _ref$useDevicePixelRa = _ref.useDevicePixelRatio,
        useDevicePixelRatio = _ref$useDevicePixelRa === undefined ? true : _ref$useDevicePixelRa;

    _classCallCheck(this, AnimationLoop);

    this.start = this.start.bind(this);
    this.stop = this.stop.bind(this);
    this._renderFrame = this._renderFrame.bind(this);

    this.setViewParameters({
      autoResizeViewport: autoResizeViewport,
      autoResizeCanvas: autoResizeCanvas,
      autoResizeDrawingBuffer: autoResizeDrawingBuffer,
      useDevicePixelRatio: useDevicePixelRatio
    });

    this._onCreateContext = onCreateContext;
    this.glOptions = glOptions;

    this._onInitialize = onInitialize;
    this._onRender = onRender;
    this._onFinalize = onFinalize;

    this.width = width;
    this.height = height;

    this.gl = gl;

    return this;
  }

  // Update parameters (TODO - should these be specified in `start`?)


  _createClass(AnimationLoop, [{
    key: 'setViewParameters',
    value: function setViewParameters(_ref2) {
      var _ref2$autoResizeDrawi = _ref2.autoResizeDrawingBuffer,
          autoResizeDrawingBuffer = _ref2$autoResizeDrawi === undefined ? true : _ref2$autoResizeDrawi,
          _ref2$autoResizeCanva = _ref2.autoResizeCanvas,
          autoResizeCanvas = _ref2$autoResizeCanva === undefined ? true : _ref2$autoResizeCanva,
          _ref2$autoResizeViewp = _ref2.autoResizeViewport,
          autoResizeViewport = _ref2$autoResizeViewp === undefined ? true : _ref2$autoResizeViewp,
          _ref2$useDevicePixelR = _ref2.useDevicePixelRatio,
          useDevicePixelRatio = _ref2$useDevicePixelR === undefined ? true : _ref2$useDevicePixelR;

      this.autoResizeViewport = autoResizeViewport;
      this.autoResizeCanvas = autoResizeCanvas;
      this.autoResizeDrawingBuffer = autoResizeDrawingBuffer;
      this.useDevicePixelRatio = useDevicePixelRatio;
      return this;
    }

    // Starts a render loop if not already running
    // @param {Object} context - contains frame specific info (E.g. tick, width, height, etc)

  }, {
    key: 'start',
    value: function start() {
      var _this = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._stopped = false;
      // console.debug(`Starting ${this.constructor.name}`);
      if (!this._animationFrameId) {
        // Wait for start promise before rendering frame
        this._startPromise = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils__["g" /* getPageLoadPromise */])().then(function () {
          if (_this._stopped) {
            return null;
          }

          // Create the WebGL context
          _this._createWebGLContext(opts);

          // Initialize the callback data
          _this._initializeCallbackData();
          _this._updateCallbackData();

          // Default viewport setup, in case onInitialize wants to render
          _this._resizeCanvasDrawingBuffer();
          _this._resizeViewport();

          // Note: onIntialize can return a promise (in case it needs to load resources)
          return _this._onInitialize(_this._callbackData);
        }).then(function (appContext) {
          if (!_this._stopped) {
            _this._addCallbackData(appContext || {});
            if (appContext !== false && !_this._animationFrameId) {
              _this._animationFrameId = requestAnimationFrame(_this._renderFrame);
            }
          }
        });
      }
      return this;
    }

    // Stops a render loop if already running, finalizing

  }, {
    key: 'stop',
    value: function stop() {
      // console.debug(`Stopping ${this.constructor.name}`);
      if (this._animationFrameId) {
        this._finalizeCallbackData();
        cancelAnimationFrame(this._animationFrameId);
        this._animationFrameId = null;
        this._stopped = true;
      }
      return this;
    }

    // PRIVATE METHODS

  }, {
    key: '_setupFrame',
    value: function _setupFrame() {
      if (this._onSetupFrame) {
        // call callback
        this._onSetupFrame(this._callbackData);
        // end callback
      } else {
        this._resizeCanvasDrawingBuffer();
        this._resizeViewport();
        this._resizeFramebuffer();
      }
    }

    /**
     * @private
     * Handles a render loop frame- updates context and calls the application
     * callback
     */

  }, {
    key: '_renderFrame',
    value: function _renderFrame() {
      this._setupFrame();
      this._updateCallbackData();

      // call callback
      this._onRender(this._callbackData);
      // end callback

      // Increment tick
      this._callbackData.tick++;

      // Request another render frame (now )
      this._animationFrameId = requestAnimationFrame(this._renderFrame);
    }

    // Initialize the  object that will be passed to app callbacks

  }, {
    key: '_initializeCallbackData',
    value: function _initializeCallbackData() {
      this._callbackData = {
        gl: this.gl,
        canvas: this.gl.canvas,
        framebuffer: this.framebuffer,
        stop: this.stop,
        // Initial values
        tick: 0,
        tock: 0
      };
    }

    // Update the context object that will be passed to app callbacks

  }, {
    key: '_updateCallbackData',
    value: function _updateCallbackData() {
      // CallbackData width and height represent drawing buffer width and height
      var canvas = this.gl.canvas;

      this._callbackData.width = canvas.width;
      this._callbackData.height = canvas.height;
      this._callbackData.aspect = canvas.width / canvas.height;
    }
  }, {
    key: '_finalizeCallbackData',
    value: function _finalizeCallbackData() {
      // call callback
      this._onFinalize(this._callbackData);
      // end callback
    }

    // Add application's data to the app context object

  }, {
    key: '_addCallbackData',
    value: function _addCallbackData(appContext) {
      if ((typeof appContext === 'undefined' ? 'undefined' : _typeof(appContext)) === 'object' && appContext !== null) {
        this._callbackData = Object.assign({}, this._callbackData, appContext);
      }
    }

    // Either uses supplied or existing context, or calls provided callback to create one

  }, {
    key: '_createWebGLContext',
    value: function _createWebGLContext(opts) {
      // Create the WebGL context if necessary
      opts = Object.assign({}, opts, this.glOptions);
      if (opts.gl) {
        this.gl = opts.gl;
      } else {
        this.gl = this._onCreateContext(opts);
      }
      if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl__["isWebGL"])(this.gl)) {
        throw new Error('AnimationLoop.onCreateContext - illegal context returned');
      }

      // Setup default framebuffer
      this.framebuffer = new __WEBPACK_IMPORTED_MODULE_2__webgl__["Framebuffer"](this.gl);
      // Reset the WebGL context.
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl__["resetParameters"])(this.gl);
    }

    // Default viewport setup

  }, {
    key: '_resizeViewport',
    value: function _resizeViewport() {
      if (this.autoResizeViewport) {
        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);
      }
    }
  }, {
    key: '_resizeFramebuffer',
    value: function _resizeFramebuffer() {
      this.framebuffer.resize({ width: this.gl.canvas.width, height: this.gl.canvas.height });
    }

    // Resize the render buffer of the canvas to match canvas client size
    // Optionally multiplying with devicePixel ratio

  }, {
    key: '_resizeCanvasDrawingBuffer',
    value: function _resizeCanvasDrawingBuffer() {
      if (this.autoResizeDrawingBuffer) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils__["h" /* resizeDrawingBuffer */])(this.gl.canvas, { useDevicePixelRatio: this.useDevicePixelRatio });
      }
    }
  }]);

  return AnimationLoop;
}();

/* harmony default export */ __webpack_exports__["a"] = (AnimationLoop);
//# sourceMappingURL=animation-loop.js.map

/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__object_3d__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__packages_math__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Group = /*#__PURE__*/function (_Object3D) {
  _inherits(Group, _Object3D);

  function Group() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Group);

    var _opts$children = opts.children,
        children = _opts$children === undefined ? [] : _opts$children;

    children.every(function (child) {
      return __WEBPACK_IMPORTED_MODULE_2_assert___default()(child instanceof __WEBPACK_IMPORTED_MODULE_0__object_3d__["a" /* default */]);
    });

    var _this = _possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).call(this, opts));

    _this.children = children;
    return _this;
  }

  // Unpacks arrays and nested arrays of children


  _createClass(Group, [{
    key: 'add',
    value: function add() {
      for (var _len = arguments.length, children = Array(_len), _key = 0; _key < _len; _key++) {
        children[_key] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var child = _step.value;

          if (Array.isArray(child)) {
            this.add.apply(this, _toConsumableArray(child));
          } else {
            this.children.push(child);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this;
    }
  }, {
    key: 'remove',
    value: function remove(child) {
      var children = this.children;
      var indexOf = children.indexOf(child);
      if (indexOf > -1) {
        children.splice(indexOf, 1);
      }
      return this;
    }
  }, {
    key: 'removeAll',
    value: function removeAll() {
      this.children = [];
      return this;
    }

    // If visitor returns a truthy value, traversal will be aborted and that value
    // will be returned from `traverse`. Otherwise `traverse` will return null.

  }, {
    key: 'traverse',
    value: function traverse(visitor) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$modelMatrix = _ref.modelMatrix,
          modelMatrix = _ref$modelMatrix === undefined ? new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Matrix4"]() : _ref$modelMatrix;

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var child = _step2.value;
          var matrix = child.matrix;

          modelMatrix = modelMatrix.multiplyRight(matrix);
          var result = void 0;
          if (child instanceof Group) {
            result = child.traverse(visitor, { modelMatrix: modelMatrix });
          } else {
            // child.setUniforms({modelMatrix});
            result = visitor(child, {});
          }
          // Abort if a result was returned
          if (result) {
            return result;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return null;
    }

    // If visitor returns a truthy value, traversal will be aborted and that value
    // will be returned from `traverseReverse`. Otherwise `traverseReverse` will return null.

  }, {
    key: 'traverseReverse',
    value: function traverseReverse(visitor) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref2$modelMatrix = _ref2.modelMatrix,
          modelMatrix = _ref2$modelMatrix === undefined ? new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Matrix4"]() : _ref2$modelMatrix;

      for (var i = this.children.length - 1; i >= 0; --i) {
        var child = this.children[i];
        var matrix = child.matrix;

        modelMatrix = modelMatrix.multiplyRight(matrix);
        var result = void 0;
        if (child instanceof Group) {
          result = child.traverseReverse(visitor, { modelMatrix: modelMatrix });
        } else {
          // child.setUniforms({modelMatrix});
          result = visitor(child, {});
        }
        // Abort if a result was returned
        if (result) {
          return result;
        }
      }
      return null;
    }
  }]);

  return Group;
}(__WEBPACK_IMPORTED_MODULE_0__object_3d__["a" /* default */]);

/* harmony default export */ __webpack_exports__["default"] = (Group);
//# sourceMappingURL=group.js.map

/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__packages_math__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





var Object3D = /*#__PURE__*/function () {
  function Object3D(_ref) {
    var id = _ref.id,
        _ref$display = _ref.display,
        display = _ref$display === undefined ? true : _ref$display;

    _classCallCheck(this, Object3D);

    // model position, rotation, scale and all in all matrix
    this.position = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Vector3"]();
    this.rotation = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Vector3"]();
    this.scale = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Vector3"](1, 1, 1);
    this.matrix = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Matrix4"]();

    // whether to display the object at all
    this.id = id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["uid"])(this.constructor.name);
    this.display = true;
    this.userData = {};
  }

  _createClass(Object3D, [{
    key: 'setPosition',
    value: function setPosition(position) {
      __WEBPACK_IMPORTED_MODULE_2_assert___default()(position.length === 3, 'setPosition requires vector argument');
      this.position = position;
      return this;
    }
  }, {
    key: 'setRotation',
    value: function setRotation(rotation) {
      __WEBPACK_IMPORTED_MODULE_2_assert___default()(rotation.length === 3, 'setRotation requires vector argument');
      this.rotation = rotation;
      return this;
    }
  }, {
    key: 'setScale',
    value: function setScale(scale) {
      __WEBPACK_IMPORTED_MODULE_2_assert___default()(scale.length === 3, 'setScale requires vector argument');
      this.scale = scale;
      return this;
    }
  }, {
    key: 'setMatrixComponents',
    value: function setMatrixComponents(_ref2) {
      var position = _ref2.position,
          rotation = _ref2.rotation,
          scale = _ref2.scale,
          _ref2$update = _ref2.update,
          update = _ref2$update === undefined ? true : _ref2$update;

      if (position) {
        this.setPosition(position);
      }
      if (rotation) {
        this.setRotation(rotation);
      }
      if (scale) {
        this.setScale(scale);
      }
      if (update) {
        this.updateMatrix();
      }
      return this;
    }
  }, {
    key: 'updateMatrix',
    value: function updateMatrix() {
      var pos = this.position;
      var rot = this.rotation;
      var scale = this.scale;

      this.matrix.identity();
      this.matrix.translate(pos);
      this.matrix.rotateXYZ(rot);
      this.matrix.scale(scale);
      return this;
    }
  }, {
    key: 'update',
    value: function update() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          position = _ref3.position,
          rotation = _ref3.rotation,
          scale = _ref3.scale;

      if (position) {
        this.setPosition(position);
      }
      if (rotation) {
        this.setRotation(rotation);
      }
      if (scale) {
        this.setScale(scale);
      }
      this.updateMatrix();
      return this;
    }
  }, {
    key: 'getCoordinateUniforms',
    value: function getCoordinateUniforms(viewMatrix, modelMatrix) {
      // TODO - solve multiple class problem
      // assert(viewMatrix instanceof Matrix4);
      __WEBPACK_IMPORTED_MODULE_2_assert___default()(viewMatrix);
      modelMatrix = modelMatrix || this.matrix;
      var worldMatrix = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Matrix4"](viewMatrix).multiplyRight(modelMatrix);
      var worldInverse = worldMatrix.invert();
      var worldInverseTranspose = worldInverse.transpose();

      return {
        viewMatrix: viewMatrix,
        modelMatrix: modelMatrix,
        objectMatrix: modelMatrix,
        worldMatrix: worldMatrix,
        worldInverseMatrix: worldInverse,
        worldInverseTransposeMatrix: worldInverseTranspose
      };
    }

    // TODO - copied code, not yet vetted

  }, {
    key: 'transform',
    value: function transform() {

      if (!this.parent) {
        this.endPosition.set(this.position);
        this.endRotation.set(this.rotation);
        this.endScale.set(this.scale);
      } else {
        var parent = this.parent;
        this.endPosition.set(this.position.add(parent.endPosition));
        this.endRotation.set(this.rotation.add(parent.endRotation));
        this.endScale.set(this.scale.add(parent.endScale));
      }

      var ch = this.children;
      for (var i = 0; i < ch.length; ++i) {
        ch[i].transform();
      }

      return this;
    }
  }]);

  return Object3D;
}();

/* harmony default export */ __webpack_exports__["a"] = (Object3D);
//# sourceMappingURL=object-3d.js.map

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["default"] = pickModels;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__group__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/* global window */




var ILLEGAL_ARG = 'Illegal argument to pick';

function getDevicePixelRatio() {
  return typeof window !== 'undefined' ? window.devicePixelRatio : 1;
}

function pickModels(gl, _ref) {
  var models = _ref.models,
      position = _ref.position,
      _ref$uniforms = _ref.uniforms,
      uniforms = _ref$uniforms === undefined ? {} : _ref$uniforms,
      _ref$parameters = _ref.parameters,
      parameters = _ref$parameters === undefined ? {} : _ref$parameters,
      settings = _ref.settings,
      _ref$useDevicePixelRa = _ref.useDevicePixelRatio,
      useDevicePixelRatio = _ref$useDevicePixelRa === undefined ? true : _ref$useDevicePixelRa,
      framebuffer = _ref.framebuffer;

  __WEBPACK_IMPORTED_MODULE_2_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["isWebGL"])(gl), ILLEGAL_ARG);
  __WEBPACK_IMPORTED_MODULE_2_assert___default()(framebuffer, ILLEGAL_ARG);
  __WEBPACK_IMPORTED_MODULE_2_assert___default()(position, ILLEGAL_ARG);

  var _position = _slicedToArray(position, 2),
      x = _position[0],
      y = _position[1];

  // Match our picking framebuffer with the size of the canvas drawing buffer


  framebuffer.resize({ width: gl.canvas.width, height: gl.canvas.height });

  // Compensate for devicePixelRatio
  // Note: this assumes the canvas framebuffer has been matched
  var dpr = useDevicePixelRatio ? getDevicePixelRatio() : 1;
  // Reverse the y coordinate
  var deviceX = x * dpr;
  var deviceY = gl.canvas.height - y * dpr;

  // return withParameters(gl, {
  //   // framebuffer,
  //   // // We are only interested in one pixel, no need to render anything else
  //   // scissorTest: {x: deviceX, y: deviceY, w: 1, h: 1}
  // }, () => {
  var group = new __WEBPACK_IMPORTED_MODULE_1__group__["default"]({ children: models });
  return group.traverseReverse(function (model) {

    if (model.isPickable()) {
      // Clear the frame buffer
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["clear"])(gl, { framebuffer: framebuffer, color: true, depth: true });

      // Render picking colors
      /* eslint-disable camelcase */
      model.setUniforms({ picking_uActive: 1 });
      model.draw({ uniforms: uniforms, parameters: parameters, settings: settings, framebuffer: framebuffer });
      model.setUniforms({ picking_uActive: 0 });

      // Sample Read color in the central pixel, to be mapped as a picking color
      var color = framebuffer.readPixels({
        x: deviceX,
        y: deviceY,
        width: 1,
        height: 1,
        format: gl.RGBA,
        type: gl.UNSIGNED_BYTE });

      var isPicked = color[0] !== 0 || color[1] !== 0 || color[2] !== 0;

      // Add the information to the stack
      if (isPicked) {
        return {
          model: model,
          color: color,
          x: x,
          y: y,
          deviceX: deviceX,
          deviceY: deviceY
        };
      }
    }

    return null;
  });
  // });
}
//# sourceMappingURL=pick-models.js.map

/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__truncated_cone_geometry__ = __webpack_require__(21);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var ConeGeometry = /*#__PURE__*/function (_TruncatedConeGeometr) {
  _inherits(ConeGeometry, _TruncatedConeGeometr);

  function ConeGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ConeGeometry);

    var _opts$radius = opts.radius,
        radius = _opts$radius === undefined ? 1 : _opts$radius,
        _opts$cap = opts.cap,
        cap = _opts$cap === undefined ? true : _opts$cap;
    return _possibleConstructorReturn(this, (ConeGeometry.__proto__ || Object.getPrototypeOf(ConeGeometry)).call(this, Object.assign({}, opts, {
      topRadius: 0,
      topCap: Boolean(cap),
      bottomCap: Boolean(cap),
      bottomRadius: radius
    })));
  }

  return ConeGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__truncated_cone_geometry__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (ConeGeometry);
//# sourceMappingURL=cone-geometry.js.map

/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var CubeGeometry = /*#__PURE__*/function (_Geometry) {
  _inherits(CubeGeometry, _Geometry);

  function CubeGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CubeGeometry);

    var _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["uid"])('cube-geometry') : _opts$id;
    return _possibleConstructorReturn(this, (CubeGeometry.__proto__ || Object.getPrototypeOf(CubeGeometry)).call(this, Object.assign({}, opts, { id: id, attributes: getCubeAttributes() })));
  }

  return CubeGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__geometry__["a" /* default */]);

/* eslint-disable no-multi-spaces, indent */


/* harmony default export */ __webpack_exports__["a"] = (CubeGeometry);
var CUBE_INDICES = new Uint16Array([0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23]);

var CUBE_POSITIONS = new Float32Array([-1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1]);

var CUBE_NORMALS = new Float32Array([
// Front face
0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,

// Back face
0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0,

// Top face
0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,

// Bottom face
0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0,

// Right face
1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,

// Left face
-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0]);

var CUBE_TEX_COORDS = new Float32Array([
// Front face
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0,

// Back face
1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,

// Top face
0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,

// Bottom face
1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,

// Right face
1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,

// Left face
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]);
/* eslint-enable no-multi-spaces, indent */

function getCubeAttributes() {
  return {
    indices: new Uint16Array(CUBE_INDICES),
    positions: new Float32Array(CUBE_POSITIONS),
    normals: new Float32Array(CUBE_NORMALS),
    texCoords: new Float32Array(CUBE_TEX_COORDS)
  };
}
//# sourceMappingURL=cube-geometry.js.map

/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__truncated_cone_geometry__ = __webpack_require__(21);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var CylinderGeometry = /*#__PURE__*/function (_TruncatedConeGeometr) {
  _inherits(CylinderGeometry, _TruncatedConeGeometr);

  function CylinderGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CylinderGeometry);

    var _opts$radius = opts.radius,
        radius = _opts$radius === undefined ? 1 : _opts$radius;
    return _possibleConstructorReturn(this, (CylinderGeometry.__proto__ || Object.getPrototypeOf(CylinderGeometry)).call(this, Object.assign({}, opts, {
      bottomRadius: radius,
      topRadius: radius
    })));
  }

  return CylinderGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__truncated_cone_geometry__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (CylinderGeometry);
//# sourceMappingURL=cylinder-geometry.js.map

/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__packages_math__ = __webpack_require__(14);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/* eslint-disable comma-spacing, max-statements, complexity */

var ICO_POSITIONS = [-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0];
var ICO_INDICES = [3, 4, 5, 3, 5, 1, 3, 1, 0, 3, 0, 4, 4, 0, 2, 4, 2, 5, 2, 0, 1, 5, 2, 1];

var IcoSphereGeometry = /*#__PURE__*/function (_Geometry) {
  _inherits(IcoSphereGeometry, _Geometry);

  function IcoSphereGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, IcoSphereGeometry);

    var _opts$iterations = opts.iterations,
        iterations = _opts$iterations === undefined ? 0 : _opts$iterations;


    var PI = Math.PI;
    var PI2 = PI * 2;

    var positions = [].concat(ICO_POSITIONS);
    var indices = [].concat(ICO_INDICES);

    positions.push();
    indices.push();

    var getMiddlePoint = function () {
      var pointMemo = {};

      return function (i1, i2) {
        i1 *= 3;
        i2 *= 3;
        var mini = i1 < i2 ? i1 : i2;
        var maxi = i1 > i2 ? i1 : i2;
        var key = mini + '|' + maxi;

        if (key in pointMemo) {
          return pointMemo[key];
        }

        var x1 = positions[i1];
        var y1 = positions[i1 + 1];
        var z1 = positions[i1 + 2];
        var x2 = positions[i2];
        var y2 = positions[i2 + 1];
        var z2 = positions[i2 + 2];
        var xm = (x1 + x2) / 2;
        var ym = (y1 + y2) / 2;
        var zm = (z1 + z2) / 2;
        var len = Math.sqrt(xm * xm + ym * ym + zm * zm);

        xm /= len;
        ym /= len;
        zm /= len;

        positions.push(xm, ym, zm);

        return pointMemo[key] = positions.length / 3 - 1;
      };
    }();

    for (var i = 0; i < iterations; i++) {
      var indices2 = [];
      for (var j = 0; j < indices.length; j += 3) {
        var a = getMiddlePoint(indices[j + 0], indices[j + 1]);
        var b = getMiddlePoint(indices[j + 1], indices[j + 2]);
        var c = getMiddlePoint(indices[j + 2], indices[j + 0]);

        indices2.push(c, indices[j + 0], a, a, indices[j + 1], b, b, indices[j + 2], c, a, b, c);
      }
      indices = indices2;
    }

    // Calculate texCoords and normals
    var normals = new Array(indices.length * 3);
    var texCoords = new Array(indices.length * 2);

    var l = indices.length;
    for (var _i = l - 3; _i >= 0; _i -= 3) {
      var i1 = indices[_i + 0];
      var i2 = indices[_i + 1];
      var i3 = indices[_i + 2];
      var in1 = i1 * 3;
      var in2 = i2 * 3;
      var in3 = i3 * 3;
      var iu1 = i1 * 2;
      var iu2 = i2 * 2;
      var iu3 = i3 * 2;
      var x1 = positions[in1 + 0];
      var y1 = positions[in1 + 1];
      var z1 = positions[in1 + 2];
      var theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));
      var phi1 = Math.atan2(y1, x1) + PI;
      var v1 = theta1 / PI;
      var u1 = 1 - phi1 / PI2;
      var x2 = positions[in2 + 0];
      var y2 = positions[in2 + 1];
      var z2 = positions[in2 + 2];
      var theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));
      var phi2 = Math.atan2(y2, x2) + PI;
      var v2 = theta2 / PI;
      var u2 = 1 - phi2 / PI2;
      var x3 = positions[in3 + 0];
      var y3 = positions[in3 + 1];
      var z3 = positions[in3 + 2];
      var theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));
      var phi3 = Math.atan2(y3, x3) + PI;
      var v3 = theta3 / PI;
      var u3 = 1 - phi3 / PI2;
      var vec1 = [x3 - x2, y3 - y2, z3 - z2];
      var vec2 = [x1 - x2, y1 - y2, z1 - z2];
      var normal = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Vector3"](vec1).cross(vec2).normalize();
      var newIndex = void 0;

      if ((u1 === 0 || u2 === 0 || u3 === 0) && (u1 === 0 || u1 > 0.5) && (u2 === 0 || u2 > 0.5) && (u3 === 0 || u3 > 0.5)) {

        positions.push(positions[in1 + 0], positions[in1 + 1], positions[in1 + 2]);
        newIndex = positions.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v1;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;

        positions.push(positions[in2 + 0], positions[in2 + 1], positions[in2 + 2]);
        newIndex = positions.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v2;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;

        positions.push(positions[in3 + 0], positions[in3 + 1], positions[in3 + 2]);
        newIndex = positions.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v3;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;
      }

      normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;
      normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;
      normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;

      texCoords[iu1 + 0] = u1;
      texCoords[iu1 + 1] = v1;

      texCoords[iu2 + 0] = u2;
      texCoords[iu2 + 1] = v2;

      texCoords[iu3 + 0] = u3;
      texCoords[iu3 + 1] = v3;
    }

    return _possibleConstructorReturn(this, (IcoSphereGeometry.__proto__ || Object.getPrototypeOf(IcoSphereGeometry)).call(this, Object.assign({}, opts, {
      attributes: {
        positions: new Float32Array(positions),
        normals: new Float32Array(normals),
        texCoords: new Float32Array(texCoords),
        indices: new Uint16Array(indices)
      }
    })));
  }

  return IcoSphereGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__geometry__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (IcoSphereGeometry);
//# sourceMappingURL=ico-sphere-geometry.js.map

/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var PlaneGeometry = /*#__PURE__*/function (_Geometry) {
  _inherits(PlaneGeometry, _Geometry);

  // Primitives inspired by TDL http://code.google.com/p/webglsamples/,
  // copyright 2011 Google Inc. new BSD License
  // (http://www.opensource.org/licenses/bsd-license.php).
  /* eslint-disable max-statements, complexity */
  /* eslint-disable complexity, max-statements */
  function PlaneGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, PlaneGeometry);

    var _opts$type = opts.type,
        type = _opts$type === undefined ? 'x,y' : _opts$type,
        _opts$offset = opts.offset,
        offset = _opts$offset === undefined ? 0 : _opts$offset,
        _opts$flipCull = opts.flipCull,
        flipCull = _opts$flipCull === undefined ? false : _opts$flipCull,
        _opts$unpack = opts.unpack,
        unpack = _opts$unpack === undefined ? false : _opts$unpack,
        _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["uid"])('plane-geometry') : _opts$id;


    var coords = type.split(',');
    // width, height
    var c1len = opts[coords[0] + 'len'];
    var c2len = opts[coords[1] + 'len'];
    // subdivisionsWidth, subdivisionsDepth
    var subdivisions1 = opts['n' + coords[0]] || 1;
    var subdivisions2 = opts['n' + coords[1]] || 1;
    var numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);

    var positions = new Float32Array(numVertices * 3);
    var normals = new Float32Array(numVertices * 3);
    var texCoords = new Float32Array(numVertices * 2);

    if (flipCull) {
      c1len = -c1len;
    }

    var i2 = 0;
    var i3 = 0;
    for (var z = 0; z <= subdivisions2; z++) {
      for (var x = 0; x <= subdivisions1; x++) {
        var u = x / subdivisions1;
        var v = z / subdivisions2;
        texCoords[i2 + 0] = flipCull ? 1 - u : u;
        texCoords[i2 + 1] = v;

        switch (type) {
          case 'x,y':
            positions[i3 + 0] = c1len * u - c1len * 0.5;
            positions[i3 + 1] = c2len * v - c2len * 0.5;
            positions[i3 + 2] = offset;

            normals[i3 + 0] = 0;
            normals[i3 + 1] = 0;
            normals[i3 + 2] = flipCull ? 1 : -1;
            break;

          case 'x,z':
            positions[i3 + 0] = c1len * u - c1len * 0.5;
            positions[i3 + 1] = offset;
            positions[i3 + 2] = c2len * v - c2len * 0.5;

            normals[i3 + 0] = 0;
            normals[i3 + 1] = flipCull ? 1 : -1;
            normals[i3 + 2] = 0;
            break;

          case 'y,z':
            positions[i3 + 0] = offset;
            positions[i3 + 1] = c1len * u - c1len * 0.5;
            positions[i3 + 2] = c2len * v - c2len * 0.5;

            normals[i3 + 0] = flipCull ? 1 : -1;
            normals[i3 + 1] = 0;
            normals[i3 + 2] = 0;
            break;

          default:
            break;
        }

        i2 += 2;
        i3 += 3;
      }
    }

    var numVertsAcross = subdivisions1 + 1;
    var indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);

    for (var _z = 0; _z < subdivisions2; _z++) {
      for (var _x2 = 0; _x2 < subdivisions1; _x2++) {
        var index = (_z * subdivisions1 + _x2) * 6;
        // Make triangle 1 of quad.
        indices[index + 0] = (_z + 0) * numVertsAcross + _x2;
        indices[index + 1] = (_z + 1) * numVertsAcross + _x2;
        indices[index + 2] = (_z + 0) * numVertsAcross + _x2 + 1;

        // Make triangle 2 of quad.
        indices[index + 3] = (_z + 1) * numVertsAcross + _x2;
        indices[index + 4] = (_z + 1) * numVertsAcross + _x2 + 1;
        indices[index + 5] = (_z + 0) * numVertsAcross + _x2 + 1;
      }
    }

    // Optionally, unpack indexed geometry
    if (unpack) {
      var positions2 = new Float32Array(indices.length * 3);
      var normals2 = new Float32Array(indices.length * 3);
      var texCoords2 = new Float32Array(indices.length * 2);

      for (var _x3 = 0; _x3 < indices.length; ++_x3) {
        var _index = indices[_x3];
        positions2[_x3 * 3 + 0] = positions[_index * 3 + 0];
        positions2[_x3 * 3 + 1] = positions[_index * 3 + 1];
        positions2[_x3 * 3 + 2] = positions[_index * 3 + 2];
        normals2[_x3 * 3 + 0] = normals[_index * 3 + 0];
        normals2[_x3 * 3 + 1] = normals[_index * 3 + 1];
        normals2[_x3 * 3 + 2] = normals[_index * 3 + 2];
        texCoords2[_x3 * 2 + 0] = texCoords[_index * 2 + 0];
        texCoords2[_x3 * 2 + 1] = texCoords[_index * 2 + 1];
      }

      positions = positions2;
      normals = normals2;
      texCoords = texCoords2;
      indices = undefined;
    }

    var attributes = {
      positions: positions,
      normals: normals,
      texCoords: texCoords
    };

    if (indices) {
      attributes.indices = indices;
    }

    return _possibleConstructorReturn(this, (PlaneGeometry.__proto__ || Object.getPrototypeOf(PlaneGeometry)).call(this, Object.assign({}, opts, { attributes: attributes, id: id })));
  }

  return PlaneGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__geometry__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (PlaneGeometry);
//# sourceMappingURL=plane-geometry.js.map

/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var SphereGeometry = /*#__PURE__*/function (_Geometry) {
  _inherits(SphereGeometry, _Geometry);

  function SphereGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SphereGeometry);

    var _opts$nlat = opts.nlat,
        nlat = _opts$nlat === undefined ? 10 : _opts$nlat,
        _opts$nlong = opts.nlong,
        nlong = _opts$nlong === undefined ? 10 : _opts$nlong,
        _opts$radius = opts.radius,
        radius = _opts$radius === undefined ? 1 : _opts$radius,
        _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["uid"])('sphere-geometry') : _opts$id;
    return _possibleConstructorReturn(this, (SphereGeometry.__proto__ || Object.getPrototypeOf(SphereGeometry)).call(this, Object.assign({}, opts, { id: id, attributes: getSphereAttributes(nlat, nlong, radius) })));
  }

  return SphereGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__geometry__["a" /* default */]);

// Primitives inspired by TDL http://code.google.com/p/webglsamples/,
// copyright 2011 Google Inc. new BSD License
// (http://www.opensource.org/licenses/bsd-license.php).
/* eslint-disable max-statements, complexity */


/* harmony default export */ __webpack_exports__["a"] = (SphereGeometry);
function getSphereAttributes(nlat, nlong, radius) {
  var startLat = 0;
  var endLat = Math.PI;
  var latRange = endLat - startLat;
  var startLong = 0;
  var endLong = 2 * Math.PI;
  var longRange = endLong - startLong;
  var numVertices = (nlat + 1) * (nlong + 1);

  if (typeof radius === 'number') {
    var value = radius;
    radius = function radius(n1, n2, n3, u, v) {
      return value;
    };
  }

  var positions = new Float32Array(numVertices * 3);
  var normals = new Float32Array(numVertices * 3);
  var texCoords = new Float32Array(numVertices * 2);
  var indices = new Uint16Array(nlat * nlong * 6);

  // Create positions, normals and texCoords
  for (var y = 0; y <= nlat; y++) {
    for (var x = 0; x <= nlong; x++) {

      var u = x / nlong;
      var v = y / nlat;

      var index = x + y * (nlong + 1);
      var i2 = index * 2;
      var i3 = index * 3;

      var theta = longRange * u;
      var phi = latRange * v;
      var sinTheta = Math.sin(theta);
      var cosTheta = Math.cos(theta);
      var sinPhi = Math.sin(phi);
      var cosPhi = Math.cos(phi);
      var ux = cosTheta * sinPhi;
      var uy = cosPhi;
      var uz = sinTheta * sinPhi;

      var r = radius(ux, uy, uz, u, v);

      positions[i3 + 0] = r * ux;
      positions[i3 + 1] = r * uy;
      positions[i3 + 2] = r * uz;

      normals[i3 + 0] = ux;
      normals[i3 + 1] = uy;
      normals[i3 + 2] = uz;

      texCoords[i2 + 0] = u;
      texCoords[i2 + 1] = v;
    }
  }

  // Create indices
  var numVertsAround = nlat + 1;
  for (var _x2 = 0; _x2 < nlat; _x2++) {
    for (var _y = 0; _y < nlong; _y++) {
      var _index = (_x2 * nlong + _y) * 6;

      indices[_index + 0] = _y * numVertsAround + _x2;
      indices[_index + 1] = _y * numVertsAround + _x2 + 1;
      indices[_index + 2] = (_y + 1) * numVertsAround + _x2;

      indices[_index + 3] = (_y + 1) * numVertsAround + _x2;
      indices[_index + 4] = _y * numVertsAround + _x2 + 1;
      indices[_index + 5] = (_y + 1) * numVertsAround + _x2 + 1;
    }
  }

  return {
    positions: positions,
    indices: indices,
    normals: normals,
    texCoords: texCoords
  };
}
//# sourceMappingURL=sphere-geometry.js.map

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setPathPrefix = setPathPrefix;
exports.loadFile = loadFile;
exports.loadImage = loadImage;

var _browserRequestFile = __webpack_require__(167);

var pathPrefix = '';

/*
 * Set a relative path prefix
 */
function setPathPrefix(prefix) {
  pathPrefix = prefix;
}

function loadFile(url, opts) {
  if (typeof url !== 'string' && !opts) {
    // TODO - warn for deprecated mode
    opts = url;
    url = opts.url;
  }
  opts.url = pathPrefix ? pathPrefix + url : url;
  return (0, _browserRequestFile.requestFile)(opts);
}

/* global Image */

/*
 * Loads images asynchronously
 * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'
 * returns a promise tracking the load
 */
function loadImage(url, opts) {
  url = pathPrefix ? pathPrefix + url : url;

  return new Promise(function (resolve, reject) {
    try {
      var image = new Image();
      image.onload = function () {
        return resolve(image);
      };
      image.onerror = function () {
        return reject(new Error('Could not load image ' + url + '.'));
      };
      image.crossOrigin = opts && opts.crossOrigin || 'anonymous';
      image.src = url;
    } catch (error) {
      reject(error);
    }
  });
}
//# sourceMappingURL=browser-load.js.map

/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export validateMatrix4 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_array__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vector2__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__vector3__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__vector4__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_assert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_mat4_determinant__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_mat4_determinant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_mat4_determinant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_mat4_fromQuat__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_mat4_fromQuat___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_mat4_fromQuat__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_mat4_frustum__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_mat4_frustum___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_mat4_frustum__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_mat4_lookAt__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_mat4_lookAt___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_mat4_lookAt__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_mat4_ortho__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_mat4_ortho___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_mat4_ortho__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_mat4_perspective__ = __webpack_require__(100);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_mat4_perspective___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_mat4_perspective__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_mat4_transpose__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_mat4_transpose___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_mat4_transpose__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_mat4_invert__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_mat4_invert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_mat4_invert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_mat4_multiply__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_mat4_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_gl_mat4_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_mat4_rotateX__ = __webpack_require__(101);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_mat4_rotateX___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_gl_mat4_rotateX__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_mat4_rotateY__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_mat4_rotateY___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_gl_mat4_rotateY__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_mat4_rotateZ__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_mat4_rotateZ___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_gl_mat4_rotateZ__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_mat4_scale__ = __webpack_require__(103);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_mat4_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_gl_mat4_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_mat4_translate__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_mat4_translate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_gl_mat4_translate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_vec2_transformMat4__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_vec2_transformMat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20_gl_vec2_transformMat4__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_vec3_transformMat4__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_vec3_transformMat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21_gl_vec3_transformMat4__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_gl_vec4_transformMat4__ = __webpack_require__(160);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_gl_vec4_transformMat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_22_gl_vec4_transformMat4__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }








// gl-matrix is too big. Cherry-pick individual imports from stack.gl version
/* eslint-disable camelcase */



















var IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];

function validateMatrix4(m) {
  return m.length === 16 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]) && Number.isFinite(m[6]) && Number.isFinite(m[7]) && Number.isFinite(m[8]) && Number.isFinite(m[9]) && Number.isFinite(m[10]) && Number.isFinite(m[11]) && Number.isFinite(m[12]) && Number.isFinite(m[13]) && Number.isFinite(m[14]) && Number.isFinite(m[15]);
}

var Matrix4 = function (_MathArray) {
  _inherits(Matrix4, _MathArray);

  function Matrix4() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _classCallCheck(this, Matrix4);

    var _this = _possibleConstructorReturn(this, (Matrix4.__proto__ || Object.getPrototypeOf(Matrix4)).call(this));

    if (Array.isArray(args[0]) && arguments.length === 1) {
      _this.copy(args[0]);
    } else {
      _this.identity();
    }
    return _this;
  }

  _createClass(Matrix4, [{
    key: 'setRowMajor',


    /* eslint-disable max-params */
    value: function setRowMajor() {
      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var m10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var m20 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var m30 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var m01 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
      var m21 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var m31 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var m02 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
      var m12 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
      var m32 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
      var m03 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
      var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
      var m23 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;

      return this.set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
  }, {
    key: 'setColumnMajor',
    value: function setColumnMajor() {
      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var m10 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
      var m12 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var m13 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var m20 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
      var m21 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
      var m23 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
      var m30 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
      var m31 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
      var m32 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;

      return this.set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
  }, {
    key: 'set',
    value: function set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      this[0] = m00;
      this[1] = m01;
      this[2] = m02;
      this[3] = m03;
      this[4] = m10;
      this[5] = m11;
      this[6] = m12;
      this[7] = m13;
      this[8] = m20;
      this[9] = m21;
      this[10] = m22;
      this[11] = m23;
      this[12] = m30;
      this[13] = m31;
      this[14] = m32;
      this[15] = m33;
      this.check();
      return this;
    }
    /* eslint-enable max-params */

    // toString() {
    //   if (config.printRowMajor) {
    //     mat4_str(this);
    //   } else {
    //     mat4_str(this);
    //   }
    // }

    // Row major setters and getters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

  }, {
    key: 'determinant',

    /* eslint-enable no-multi-spaces, brace-style, no-return-assign */

    // Accessors

    value: function determinant() {
      return __WEBPACK_IMPORTED_MODULE_6_gl_mat4_determinant___default()(this);
    }

    // Constructors

  }, {
    key: 'identity',
    value: function identity() {
      for (var i = 0; i < IDENTITY.length; ++i) {
        this[i] = IDENTITY[i];
      }
      this.check();
      return this;
    }

    // Calculates a 4x4 matrix from the given quaternion
    // q quat  Quaternion to create matrix from

  }, {
    key: 'fromQuaternion',
    value: function fromQuaternion(q) {
      __WEBPACK_IMPORTED_MODULE_7_gl_mat4_fromQuat___default()(this, q);
      this.check();
      return this;
    }

    // Generates a frustum matrix with the given bounds
    // left  Number  Left bound of the frustum
    // right Number  Right bound of the frustum
    // bottom  Number  Bottom bound of the frustum
    // top Number  Top bound of the frustum
    // near  Number  Near bound of the frustum
    // far Number  Far bound of the frustum

  }, {
    key: 'frustum',
    value: function frustum(_ref) {
      var left = _ref.left,
          right = _ref.right,
          bottom = _ref.bottom,
          top = _ref.top,
          near = _ref.near,
          far = _ref.far;

      __WEBPACK_IMPORTED_MODULE_8_gl_mat4_frustum___default()(this, left, right, bottom, top, near, far);
      this.check();
      return this;
    }

    // Generates a look-at matrix with the given eye position, focal point,
    // and up axis
    // eye vec3  Position of the viewer
    // center  vec3  Point the viewer is looking at
    // up  vec3  vec3 pointing up

  }, {
    key: 'lookAt',
    value: function lookAt() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          eye = _ref2.eye,
          _ref2$center = _ref2.center,
          center = _ref2$center === undefined ? [0, 0, 0] : _ref2$center,
          _ref2$up = _ref2.up,
          up = _ref2$up === undefined ? [0, 1, 0] : _ref2$up;

      __WEBPACK_IMPORTED_MODULE_9_gl_mat4_lookAt___default()(this, eye, center, up);
      this.check();
      return this;
    }

    // Generates a orthogonal projection matrix with the given bounds
    // left  number  Left bound of the frustum
    // right number  Right bound of the frustum
    // bottom  number  Bottom bound of the frustum
    // top number  Top bound of the frustum
    // near  number  Near bound of the frustum
    // far number  Far bound of the frustum

  }, {
    key: 'ortho',
    value: function ortho(_ref3) {
      var left = _ref3.left,
          right = _ref3.right,
          bottom = _ref3.bottom,
          top = _ref3.top,
          _ref3$near = _ref3.near,
          near = _ref3$near === undefined ? 0.1 : _ref3$near,
          _ref3$far = _ref3.far,
          far = _ref3$far === undefined ? 500 : _ref3$far;

      __WEBPACK_IMPORTED_MODULE_10_gl_mat4_ortho___default()(this, left, right, bottom, top, near, far);
      this.check();
      return this;
    }

    // Generates a perspective projection matrix with the given bounds
    // fovy  number  Vertical field of view in radians
    // aspect  number  Aspect ratio. typically viewport width/height
    // near  number  Near bound of the frustum
    // far number  Far bound of the frustum

  }, {
    key: 'perspective',
    value: function perspective() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref4$fov = _ref4.fov,
          fov = _ref4$fov === undefined ? 45 * Math.PI / 180 : _ref4$fov,
          _ref4$aspect = _ref4.aspect,
          aspect = _ref4$aspect === undefined ? 1 : _ref4$aspect,
          _ref4$near = _ref4.near,
          near = _ref4$near === undefined ? 0.1 : _ref4$near,
          _ref4$far = _ref4.far,
          far = _ref4$far === undefined ? 500 : _ref4$far;

      if (fov > Math.PI * 2) {
        throw Error('radians');
      }
      __WEBPACK_IMPORTED_MODULE_11_gl_mat4_perspective___default()(this, fov, aspect, near, far);
      this.check();
      return this;
    }

    // Modifiers

  }, {
    key: 'transpose',
    value: function transpose() {
      __WEBPACK_IMPORTED_MODULE_12_gl_mat4_transpose___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'invert',
    value: function invert() {
      __WEBPACK_IMPORTED_MODULE_13_gl_mat4_invert___default()(this, this);
      this.check();
      return this;
    }

    // Operations

  }, {
    key: 'multiplyLeft',
    value: function multiplyLeft(a) {
      __WEBPACK_IMPORTED_MODULE_14_gl_mat4_multiply___default()(this, a, this);
      this.check();
      return this;
    }
  }, {
    key: 'multiplyRight',
    value: function multiplyRight(a) {
      __WEBPACK_IMPORTED_MODULE_14_gl_mat4_multiply___default()(this, this, a);
      this.check();
      return this;
    }

    // Rotates a matrix by the given angle around the X axis

  }, {
    key: 'rotateX',
    value: function rotateX(radians) {
      __WEBPACK_IMPORTED_MODULE_15_gl_mat4_rotateX___default()(this, this, radians);
      this.check();
      return this;
    }

    // Rotates a matrix by the given angle around the Y axis.

  }, {
    key: 'rotateY',
    value: function rotateY(radians) {
      __WEBPACK_IMPORTED_MODULE_16_gl_mat4_rotateY___default()(this, this, radians);
      this.check();
      return this;
    }

    // Rotates a matrix by the given angle around the Z axis.

  }, {
    key: 'rotateZ',
    value: function rotateZ(radians) {
      __WEBPACK_IMPORTED_MODULE_17_gl_mat4_rotateZ___default()(this, this, radians);
      this.check();
      return this;
    }
  }, {
    key: 'rotateXYZ',
    value: function rotateXYZ(_ref5) {
      var _ref6 = _slicedToArray(_ref5, 3),
          rx = _ref6[0],
          ry = _ref6[1],
          rz = _ref6[2];

      return this.rotateX(rx).rotateY(ry).rotateZ(rz);
    }
  }, {
    key: 'rotateAxis',
    value: function rotateAxis(radians, axis) {
      __WEBPACK_IMPORTED_MODULE_17_gl_mat4_rotateZ___default()(this, this, radians, axis);
      this.check();
      return this;
    }
  }, {
    key: 'scale',
    value: function scale(vec) {
      __WEBPACK_IMPORTED_MODULE_18_gl_mat4_scale___default()(this, this, vec);
      this.check();
      return this;
    }
  }, {
    key: 'translate',
    value: function translate(vec) {
      __WEBPACK_IMPORTED_MODULE_19_gl_mat4_translate___default()(this, this, vec);
      this.check();
      return this;
    }
  }, {
    key: 'transformVector2',
    value: function transformVector2(vector, out) {
      out = out || new __WEBPACK_IMPORTED_MODULE_2__vector2__["a" /* default */]();
      __WEBPACK_IMPORTED_MODULE_20_gl_vec2_transformMat4___default()(out, vector, this);
      __WEBPACK_IMPORTED_MODULE_5_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__vector2__["b" /* validateVector2 */])(out));
      return out;
    }
  }, {
    key: 'transformVector3',
    value: function transformVector3(vector) {
      var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new __WEBPACK_IMPORTED_MODULE_3__vector3__["a" /* default */]();

      out = out || new __WEBPACK_IMPORTED_MODULE_3__vector3__["a" /* default */]();
      __WEBPACK_IMPORTED_MODULE_21_gl_vec3_transformMat4___default()(out, vector, this);
      __WEBPACK_IMPORTED_MODULE_5_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__vector3__["b" /* validateVector3 */])(out));
      return out;
    }
  }, {
    key: 'transformVector4',
    value: function transformVector4(vector) {
      var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new __WEBPACK_IMPORTED_MODULE_4__vector4__["a" /* default */]();

      out = out || new __WEBPACK_IMPORTED_MODULE_4__vector4__["a" /* default */]();
      __WEBPACK_IMPORTED_MODULE_22_gl_vec4_transformMat4___default()(out, vector, this);
      __WEBPACK_IMPORTED_MODULE_5_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__vector4__["b" /* validateVector4 */])(out));
      return out;
    }

    // Transforms any 2, 3 or 4 element vector
    // returns a newly minted Vector2, Vector3 or Vector4

  }, {
    key: 'transformVector',
    value: function transformVector(vector, out) {
      switch (vector.length) {
        case 2:
          return this.transformVector2(vector, out);
        case 3:
          return this.transformVector3(vector, out);
        case 4:
          return this.transformVector4(vector, out);
        default:
          throw new Error('Illegal vector');
      }
    }
  }, {
    key: 'ELEMENTS',
    get: function get() {
      return 16;
    }
  }, {
    key: 'm00',
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm01',
    get: function get() {
      return this[4];
    },
    set: function set(value) {
      return this[4] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm02',
    get: function get() {
      return this[8];
    },
    set: function set(value) {
      return this[8] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm03',
    get: function get() {
      return this[12];
    },
    set: function set(value) {
      return this[12] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm10',
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm11',
    get: function get() {
      return this[5];
    },
    set: function set(value) {
      return this[5] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm12',
    get: function get() {
      return this[9];
    },
    set: function set(value) {
      return this[9] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm13',
    get: function get() {
      return this[13];
    },
    set: function set(value) {
      return this[13] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm20',
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm21',
    get: function get() {
      return this[6];
    },
    set: function set(value) {
      return this[6] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm22',
    get: function get() {
      return this[10];
    },
    set: function set(value) {
      return this[10] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm23',
    get: function get() {
      return this[14];
    },
    set: function set(value) {
      return this[14] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm30',
    get: function get() {
      return this[3];
    },
    set: function set(value) {
      return this[3] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm31',
    get: function get() {
      return this[7];
    },
    set: function set(value) {
      return this[7] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm32',
    get: function get() {
      return this[11];
    },
    set: function set(value) {
      return this[11] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'm33',
    get: function get() {
      return this[15];
    },
    set: function set(value) {
      return this[15] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }]);

  return Matrix4;
}(__WEBPACK_IMPORTED_MODULE_0__math_array__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Matrix4);
//# sourceMappingURL=matrix4.js.map

/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export validateQuaternion */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_array__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_quat_fromMat3__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_quat_fromMat3___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_gl_quat_fromMat3__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_quat_identity__ = __webpack_require__(111);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_quat_identity___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_gl_quat_identity__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_quat_length__ = __webpack_require__(113);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_quat_length___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_gl_quat_length__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_quat_squaredLength__ = __webpack_require__(123);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_quat_squaredLength___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_gl_quat_squaredLength__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_quat_dot__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_quat_dot___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_quat_dot__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_quat_rotationTo__ = __webpack_require__(119);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_quat_rotationTo___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_quat_rotationTo__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_quat_add__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_quat_add___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_quat_add__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_quat_calculateW__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_quat_calculateW___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_quat_calculateW__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_quat_conjugate__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_quat_conjugate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_quat_conjugate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_quat_invert__ = __webpack_require__(112);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_quat_invert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_quat_invert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_quat_lerp__ = __webpack_require__(114);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_quat_lerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_quat_lerp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_quat_multiply__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_quat_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_quat_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_quat_normalize__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_quat_normalize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_gl_quat_normalize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_quat_rotateX__ = __webpack_require__(116);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_quat_rotateX___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_gl_quat_rotateX__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_quat_rotateY__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_quat_rotateY___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_gl_quat_rotateY__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_quat_rotateZ__ = __webpack_require__(118);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_quat_rotateZ___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_gl_quat_rotateZ__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_quat_scale__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_quat_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_gl_quat_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_quat_set__ = __webpack_require__(121);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_quat_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_gl_quat_set__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_quat_setAxisAngle__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_quat_setAxisAngle___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20_gl_quat_setAxisAngle__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_quat_slerp__ = __webpack_require__(122);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_quat_slerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21_gl_quat_slerp__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




// gl-matrix is too big. Cherry-pick individual imports from stack.gl version
/* eslint-disable camelcase */





// import quat_getAxisAngle from 'gl-quat/getAxisAngle';
















function validateQuaternion(q) {
  return q.length === 4 && Number.isFinite(q[0]) && Number.isFinite(q[1]) && Number.isFinite(q[2]) && Number.isFinite(q[3]);
}

var Quaternion = function (_MathArray) {
  _inherits(Quaternion, _MathArray);

  // Creates a new identity quat
  function Quaternion() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

    _classCallCheck(this, Quaternion);

    var _this = _possibleConstructorReturn(this, (Quaternion.__proto__ || Object.getPrototypeOf(Quaternion)).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y, z, w);
    }
    return _this;
  }

  // Creates a quaternion from the given 3x3 rotation matrix.
  // NOTE: The resultant quaternion is not normalized, so you should
  // be sure to renormalize the quaternion yourself where necessary.


  _createClass(Quaternion, [{
    key: 'fromMatrix3',
    value: function fromMatrix3(m) {
      __WEBPACK_IMPORTED_MODULE_2_gl_quat_fromMat3___default()(this, m);
      this.check();
      return this;
    }

    // Creates a new quat initialized with the given values

  }, {
    key: 'fromValues',
    value: function fromValues(x, y, z, w) {
      return this.set(x, y, z, w);
    }

    // Set a quat to the identity quaternion

  }, {
    key: 'identity',
    value: function identity() {
      __WEBPACK_IMPORTED_MODULE_3_gl_quat_identity___default()(this);
      this.check();
      return this;
    }

    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

  }, {
    key: 'length',

    /* eslint-enable no-multi-spaces, brace-style, no-return-assign */

    // Calculates the length of a quat
    value: function length() {
      return __WEBPACK_IMPORTED_MODULE_4_gl_quat_length___default()(this);
    }

    // Calculates the squared length of a quat

  }, {
    key: 'squaredLength',
    value: function squaredLength(a) {
      return __WEBPACK_IMPORTED_MODULE_5_gl_quat_squaredLength___default()(this);
    }

    // Calculates the dot product of two quat's
    // @return {Number}

  }, {
    key: 'dot',
    value: function dot(a, b) {
      if (b !== undefined) {
        throw new Error('Quaternion.dot only takes one argument');
      }
      return __WEBPACK_IMPORTED_MODULE_6_gl_quat_dot___default()(this, a);
    }

    // Gets the rotation axis and angle for a given quaternion.
    // If a quaternion is created with setAxisAngle, this method will
    // return the same values as providied in the original parameter
    // list OR functionally equivalent values.
    // Example: The quaternion formed by axis [0, 0, 1] and angle -90
    // is the same as the quaternion formed by [0, 0, 1] and 270.
    // This method favors the latter.
    // @return {{[x,y,z], Number}}
    // getAxisAngle() {
    //   const axis = [];
    //   const angle = quat_getAxisAngle(axis, this);
    //   return {axis, angle};
    // }

    // MODIFIERS

    // Sets a quaternion to represent the shortest rotation from one vector
    // to another. Both vectors are assumed to be unit length.

  }, {
    key: 'rotationTo',
    value: function rotationTo(vectorA, vectorB) {
      __WEBPACK_IMPORTED_MODULE_7_gl_quat_rotationTo___default()(this, vectorA, vectorB);
      this.check();
      return this;
    }

    // Sets the specified quaternion with values corresponding to the given axes.
    // Each axis is a vec3 and is expected to be unit length and perpendicular
    // to all other specified axes.
    // setAxes() {
    //   Number
    // }

    // Performs a spherical linear interpolation with two control points
    // sqlerp() {
    //   Number;
    // }

    // Adds two quat's

  }, {
    key: 'add',
    value: function add(a, b) {
      if (b !== undefined) {
        throw new Error('Quaternion.add only takes one argument');
      }
      __WEBPACK_IMPORTED_MODULE_8_gl_quat_add___default()(this, a);
      this.check();
      return this;
    }

    // Calculates the W component of a quat from the X, Y, and Z components.
    // Any existing W component will be ignored.

  }, {
    key: 'calculateW',
    value: function calculateW() {
      __WEBPACK_IMPORTED_MODULE_9_gl_quat_calculateW___default()(this, this);
      this.check();
      return this;
    }

    // Calculates the conjugate of a quat If the quaternion is normalized,
    // this function is faster than quat_inverse and produces the same result.

  }, {
    key: 'conjugate',
    value: function conjugate() {
      __WEBPACK_IMPORTED_MODULE_10_gl_quat_conjugate___default()(this, this);
      this.check();
      return this;
    }

    // Calculates the inverse of a quat

  }, {
    key: 'invert',
    value: function invert() {
      __WEBPACK_IMPORTED_MODULE_11_gl_quat_invert___default()(this, this);
      this.check();
      return this;
    }

    // Performs a linear interpolation between two quat's

  }, {
    key: 'lerp',
    value: function lerp(a, b, t) {
      __WEBPACK_IMPORTED_MODULE_12_gl_quat_lerp___default()(this, a, b, t);
      this.check();
      return this;
    }

    // Multiplies two quat's

  }, {
    key: 'multiply',
    value: function multiply(a, b) {
      if (b !== undefined) {
        throw new Error('Quaternion.multiply only takes one argument');
      }
      __WEBPACK_IMPORTED_MODULE_13_gl_quat_multiply___default()(this, this, b);
      this.check();
      return this;
    }

    // Normalize a quat

  }, {
    key: 'normalize',
    value: function normalize() {
      __WEBPACK_IMPORTED_MODULE_14_gl_quat_normalize___default()(this, this);
      this.check();
      return this;
    }

    // Rotates a quaternion by the given angle about the X axis

  }, {
    key: 'rotateX',
    value: function rotateX(rad) {
      __WEBPACK_IMPORTED_MODULE_15_gl_quat_rotateX___default()(this, this, rad);
      this.check();
      return this;
    }

    // Rotates a quaternion by the given angle about the Y axis

  }, {
    key: 'rotateY',
    value: function rotateY(rad) {
      __WEBPACK_IMPORTED_MODULE_16_gl_quat_rotateY___default()(this, this, rad);
      this.check();
      return this;
    }

    // Rotates a quaternion by the given angle about the Z axis

  }, {
    key: 'rotateZ',
    value: function rotateZ(rad) {
      __WEBPACK_IMPORTED_MODULE_17_gl_quat_rotateZ___default()(this, this, rad);
      this.check();
      return this;
    }

    // Scales a quat by a scalar number

  }, {
    key: 'scale',
    value: function scale(b) {
      __WEBPACK_IMPORTED_MODULE_18_gl_quat_scale___default()(this, this, b);
      this.check();
      return this;
    }

    // Set the components of a quat to the given values

  }, {
    key: 'set',
    value: function set(i, j, k, l) {
      __WEBPACK_IMPORTED_MODULE_19_gl_quat_set___default()(this, i, j, k, l);
      this.check();
      return this;
    }

    // Sets a quat from the given angle and rotation axis, then returns it.

  }, {
    key: 'setAxisAngle',
    value: function setAxisAngle(axis, rad) {
      __WEBPACK_IMPORTED_MODULE_20_gl_quat_setAxisAngle___default()(this, axis, rad);
      this.check();
      return this;
    }

    // Performs a spherical linear interpolation between two quat

  }, {
    key: 'slerp',
    value: function slerp(a, b, t) {
      __WEBPACK_IMPORTED_MODULE_21_gl_quat_slerp___default()(this, a, b, t);
      this.check();
      return this;
    }
  }, {
    key: 'ELEMENTS',
    get: function get() {
      return 4;
    }
  }, {
    key: 'x',
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'y',
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'z',
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }, {
    key: 'w',
    get: function get() {
      return this[3];
    },
    set: function set(value) {
      return this[3] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["b" /* checkNumber */])(value);
    }
  }]);

  return Quaternion;
}(__WEBPACK_IMPORTED_MODULE_0__math_array__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Quaternion);
//# sourceMappingURL=quaternion.js.map

/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = assembleShaders;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_modules__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__platform_defines__ = __webpack_require__(181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__modules_module_injectors__ = __webpack_require__(193);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);
var _SHADER_TYPE, _MODULE_INJECTORS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






var VERTEX_SHADER = 'vs';
var FRAGMENT_SHADER = 'fs';

var SHADER_TYPE = (_SHADER_TYPE = {}, _defineProperty(_SHADER_TYPE, VERTEX_SHADER, 'vertex'), _defineProperty(_SHADER_TYPE, FRAGMENT_SHADER, 'fragment'), _SHADER_TYPE);

var MODULE_INJECTORS = (_MODULE_INJECTORS = {}, _defineProperty(_MODULE_INJECTORS, VERTEX_SHADER, __WEBPACK_IMPORTED_MODULE_2__modules_module_injectors__["a" /* MODULE_INJECTORS_VS */]), _defineProperty(_MODULE_INJECTORS, FRAGMENT_SHADER, __WEBPACK_IMPORTED_MODULE_2__modules_module_injectors__["b" /* MODULE_INJECTORS_FS */]), _MODULE_INJECTORS);

// Precision prologue to inject before functions are injected in shader
// TODO - extract any existing prologue in the fragment source and move it up...
var FRAGMENT_SHADER_PROLOGUE = '#ifdef GL_ES\nprecision highp float;\n#endif\n\n';

// Generate "glslify-compatible" SHADER_NAME defines
// These are understood by the GLSL error parsing function
// If id is provided and no SHADER_NAME constant is present in source, create one
function getShaderName(_ref) {
  var id = _ref.id,
      source = _ref.source,
      type = _ref.type;

  var injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;
  return injectShaderName ? '\n#define SHADER_NAME ' + id + '_' + SHADER_TYPE[type] + '\n\n' : '';
}

// Generates application defines from an object
function getApplicationDefines() {
  var defines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var count = 0;
  var sourceText = '';
  for (var define in defines) {
    if (count === 0) {
      sourceText += '\n// APPLICATION DEFINES\n';
    }
    count++;
    sourceText += '#define ' + define.toUpperCase() + ' ' + defines[define] + '\n';
  }
  if (count === 0) {
    sourceText += '\n';
  }
  return sourceText;
}

// Extracts the source code chunk for the specified shader type from the named shader module
function getModuleSource(moduleName, type) {
  var shaderModule = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__shader_modules__["a" /* getShaderModule */])(moduleName);
  var moduleSource = void 0;
  switch (type) {
    case VERTEX_SHADER:
      moduleSource = shaderModule.vs || shaderModule.vertexShader;
      break;
    case FRAGMENT_SHADER:
      moduleSource = shaderModule.fs || shaderModule.fragmentShader;
      break;
    default:
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(false);
  }

  if (typeof moduleSource !== 'string') {
    return '';
  }

  return '#define MODULE_' + moduleName.toUpperCase() + '\n' + moduleSource + '// END MODULE_' + moduleName + '\n\n';
}

// Pulls together complete source code for either a vertex or a fragment shader
// adding prologues, requested module chunks, and any final injections.
function assembleShader(gl, _ref2) {
  var id = _ref2.id,
      source = _ref2.source,
      type = _ref2.type,
      _ref2$modules = _ref2.modules,
      modules = _ref2$modules === undefined ? [] : _ref2$modules,
      _ref2$defines = _ref2.defines,
      defines = _ref2$defines === undefined ? {} : _ref2$defines;

  __WEBPACK_IMPORTED_MODULE_3_assert___default()(typeof source === 'string', 'shader source must be a string');

  var sourceLines = source.split('\n');
  var versionLine = '';
  var coreSource = source;
  // Extract any version directive string from source.
  // TODO : keep all pre-processor statements at the begining of the shader.
  if (sourceLines[0].indexOf('#version ') === 0) {
    versionLine = sourceLines[0];
    coreSource = sourceLines.slice(1).join('\n');
  }

  // Add platform defines (use these to work around platform-specific bugs and limitations)
  // Add common defines (GLSL version compatibility, feature detection)
  // Add precision declaration for fragment shaders
  var assembledSource = getShaderName({ id: id, source: source, type: type }) + '\n' + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__platform_defines__["a" /* getPlatformShaderDefines */])(gl) + '\n' + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__platform_defines__["b" /* getVersionDefines */])(gl) + '\n' + getApplicationDefines(defines) + '\n' + (type === FRAGMENT_SHADER ? FRAGMENT_SHADER_PROLOGUE : '') + '\n';

  // Add source of dependent modules in resolved order
  var inject = false;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var moduleName = _step.value;

      switch (moduleName) {
        case 'inject':
          inject = true;
          break;
        default:
          // Add the module source, and a #define that declares it presence
          assembledSource += getModuleSource(moduleName, type);
      }
    }

    // Add the version directive and actual source of this shader
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  assembledSource = versionLine + assembledSource + coreSource;

  // Finally, if requested, insert an automatic module injector chunk
  if (inject) {
    assembledSource.replace('}\s*$', MODULE_INJECTORS);
  }

  return assembledSource;
}

// Returns a combined `getUniforms` covering the options for all the modules,
// the created function will pass on options to the inidividual `getUniforms`
// function of each shader module and combine the results into one object that
// can be passed to setUniforms.
function assembleGetUniforms(modules) {

  return function getUniforms(opts) {
    var uniforms = {};
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var moduleName = _step2.value;

        var shaderModule = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__shader_modules__["a" /* getShaderModule */])(moduleName);
        var moduleUniforms = shaderModule.getUniforms ? shaderModule.getUniforms(opts) : {};
        Object.assign(uniforms, moduleUniforms);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return uniforms;
  };
}

// Returns a map with module names as keys, resolving to their module definitions
// The presence of a key indicates that the module is available in this program,
// whether directly included, or through a dependency of some other module
function assembleModuleMap(modules) {
  var result = {};
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = modules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var moduleName = _step3.value;

      var shaderModule = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__shader_modules__["a" /* getShaderModule */])(moduleName);
      result[moduleName] = shaderModule;
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return result;
}

/**
 * Apply set of modules
 */
function assembleShaders(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var vs = opts.vs,
      fs = opts.fs;

  var modules = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__shader_modules__["b" /* resolveModules */])(opts.modules || []);
  return {
    gl: gl,
    vs: assembleShader(gl, Object.assign({}, opts, { source: vs, type: VERTEX_SHADER, modules: modules })),
    fs: assembleShader(gl, Object.assign({}, opts, { source: fs, type: FRAGMENT_SHADER, modules: modules })),
    getUniforms: assembleGetUniforms(modules),
    modules: assembleModuleMap(modules)
  };
}
//# sourceMappingURL=assemble-shaders.js.map

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_shader__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var ERR_SOURCE = 'ShaderCache expects source strings';
var ERR_CONTEXT = 'ShaderCache does not support caching across multiple contexts';

var ShaderCache = /*#__PURE__*/function () {

  /**
   * A cache of compiled shaders, keyed by shader source strings.
   * Compilation of long shaders can be time consuming.
   * By using this class, the application can ensure that each shader
   * is only compiled once.
   */
  function ShaderCache() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        gl = _ref.gl;

    _classCallCheck(this, ShaderCache);

    this.gl = gl;
    this.vertexShaders = {};
    this.fragmentShaders = {};
  }

  /**
   * Deletes shader references
   * @return {ShaderCache} - returns this for chaining
   */


  _createClass(ShaderCache, [{
    key: 'delete',
    value: function _delete() {
      // TODO - requires reference counting to avoid deleting shaders in use
      return this;
    }

    /**
     * Returns a compiled `VertexShader` object corresponding to the supplied
     * GLSL source code string, if possible from cache.
     *
     * @param {WebGLRenderingContext} gl - gl context
     * @param {String} source - Source code for shader
     * @return {VertexShader} - a compiled vertex shader
     */

  }, {
    key: 'getVertexShader',
    value: function getVertexShader(gl, source) {
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(typeof source === 'string', ERR_SOURCE);

      var shader = this.vertexShaders[source];
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(!shader || shader.gl === gl, ERR_CONTEXT);

      if (!shader) {
        shader = new __WEBPACK_IMPORTED_MODULE_0__webgl_shader__["a" /* VertexShader */](gl, source);
        this.vertexShaders[source] = shader;
      }
      return shader;
    }

    /**
     * Returns a compiled `VertexShader` object corresponding to the supplied
     * GLSL source code string, if possible from cache.
     *
     * @param {WebGLRenderingContext} gl - gl context
     * @param {String} source - Source code for shader
     * @return {FragmentShader} - a compiled fragment shader, possibly from chache
     */

  }, {
    key: 'getFragmentShader',
    value: function getFragmentShader(gl, source) {
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(typeof source === 'string', ERR_SOURCE);

      var shader = this.fragmentShaders[source];
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(!shader || shader.gl === gl, ERR_CONTEXT);

      if (!shader) {
        shader = new __WEBPACK_IMPORTED_MODULE_0__webgl_shader__["b" /* FragmentShader */](gl, source);
        this.fragmentShaders[source] = shader;
      }
      return shader;
    }
  }]);

  return ShaderCache;
}();

/* unused harmony default export */ var _unused_webpack_default_export = (ShaderCache);
//# sourceMappingURL=shader-cache.js.map

/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__packages_math__ = __webpack_require__(14);


var IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];

var DEFAULT_MODULE_OPTIONS = {
  modelMatrix: IDENTITY_MATRIX,
  viewMatrix: IDENTITY_MATRIX,
  projectionMatrix: IDENTITY_MATRIX,
  cameraPositionWorld: [0, 0, 0]
};

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;
  var prevUniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // const viewProjectionInverse = viewProjection.invert();
  // viewInverseMatrix: view.invert(),
  // viewProjectionInverseMatrix: viewProjectionInverse

  var uniforms = {};
  if (opts.modelMatrix !== undefined) {
    uniforms.modelMatrix = opts.modelMatrix;
  }
  if (opts.viewMatrix !== undefined) {
    uniforms.viewMatrix = opts.viewMatrix;
  }
  if (opts.projectionMatrix !== undefined) {
    uniforms.projectionMatrix = opts.projectionMatrix;
  }
  if (opts.cameraPositionWorld !== undefined) {
    uniforms.cameraPositionWorld = opts.cameraPositionWorld;
  }

  // COMPOSITE UNIFORMS
  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {
    uniforms.viewProjectionMatrix = new __WEBPACK_IMPORTED_MODULE_0__packages_math__["Matrix4"](opts.projectionMatrix).multiplyRight(opts.viewMatrix);
  }

  return uniforms;
}

var common = 'varying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n';

var vs = common + '\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n';

var fs = '\n' + common;

/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'project',
  getUniforms: getUniforms,
  vs: vs,
  fs: fs
});
//# sourceMappingURL=project.js.map

/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return window_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return global_; });
/* unused harmony export document */
/* global window, global, document */
var window_ = typeof window !== 'undefined' ? window : global;
var global_ = typeof global !== 'undefined' ? global : window;
var document_ = typeof document !== 'undefined' ? document : {};


//# sourceMappingURL=globals.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(28)))

/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isBrowser; });
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// This function is needed in initialization stages,
// make sure it can be imported in isolation
/* global process */

var isNode = (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' && String(process) === '[object process]' && !process.browser;

var isBrowser = !isNode;

/* unused harmony default export */ var _unused_webpack_default_export = (isBrowser);
//# sourceMappingURL=is-browser.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(90)))

/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = getGLTypeFromTypedArray;
/* harmony export (immutable) */ __webpack_exports__["a"] = getTypedArrayFromGLType;
// GL Constants
var GL_BYTE = 0x1400;
var GL_UNSIGNED_BYTE = 0x1401;
var GL_SHORT = 0x1402;
var GL_UNSIGNED_SHORT = 0x1403;
var GL_INT = 0x1404;
var GL_UNSIGNED_INT = 0x1405;
var GL_FLOAT = 0x1406;
var GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
var GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
var GL_UNSIGNED_SHORT_5_6_5 = 0x8363;

var ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';

// Converts TYPED ARRAYS to corresponding GL constant
// Used to auto deduce gl parameter types
function getGLTypeFromTypedArray(arrayOrType) {
  // If typed array, look up constructor
  var type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
  switch (type) {
    case Float32Array:
      return GL_FLOAT;
    case Uint16Array:
      return GL_UNSIGNED_SHORT;
    case Uint32Array:
      return GL_UNSIGNED_INT;
    case Uint8Array:
      return GL_UNSIGNED_BYTE;
    case Uint8ClampedArray:
      return GL_UNSIGNED_BYTE;
    case Int8Array:
      return GL_BYTE;
    case Int16Array:
      return GL_SHORT;
    case Int32Array:
      return GL_INT;
    default:
      throw new Error(ERR_TYPE_DEDUCTION);
  }
}

// Converts GL constant to corresponding TYPED ARRAY
// Used to auto deduce gl parameter types

/* eslint-disable complexity */
function getTypedArrayFromGLType(glType) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$clamped = _ref.clamped,
      clamped = _ref$clamped === undefined ? true : _ref$clamped;

  // Sorted in some order of likelihood to reduce amount of comparisons
  switch (glType) {
    case GL_FLOAT:
      return Float32Array;
    case GL_UNSIGNED_SHORT:
    case GL_UNSIGNED_SHORT_5_6_5:
    case GL_UNSIGNED_SHORT_4_4_4_4:
    case GL_UNSIGNED_SHORT_5_5_5_1:
      return Uint16Array;
    case GL_UNSIGNED_INT:
      return Uint32Array;
    case GL_UNSIGNED_BYTE:
      return clamped ? Uint8ClampedArray : Uint8Array;
    case GL_BYTE:
      return Int8Array;
    case GL_SHORT:
      return Int16Array;
    case GL_INT:
      return Int32Array;
    default:
      throw new Error('Failed to deduce typed array type from GL constant');
  }
}
/* eslint-enable complexity */
//# sourceMappingURL=typed-array-utils.js.map

/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getShaderName;
/* harmony export (immutable) */ __webpack_exports__["b"] = getShaderTypeName;
var GL_FRAGMENT_SHADER = 0x8B30;
var GL_VERTEX_SHADER = 0x8B31;

// Supports GLSLIFY style naming of shaders
// #define SHADER_NAME ...
function getShaderName(shader) {
  var SHADER_NAME_REGEXP = /#define[\s*]SHADER_NAME[\s*]([A-Za-z0-9_-]+)[\s*]/;
  var match = shader.match(SHADER_NAME_REGEXP);
  return match ? match[1] : 'unnamed';
}

function getShaderTypeName(type) {
  switch (type) {
    case GL_FRAGMENT_SHADER:
      return 'fragment';
    case GL_VERTEX_SHADER:
      return 'vertex';
    default:
      return 'unknown type';
  }
}
//# sourceMappingURL=get-shader-name.js.map

/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = polyfillContext;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__polyfill_get_parameter__ = __webpack_require__(207);
var _WEBGL_CONTEXT_POLYFI;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// WebGL1/WebGL2 extension polyfill support
//
// Provides a function that creates polyfills for WebGL2 functions based
// on available extensions and installs them on a supplied target (could be
// the WebGLContext or its prototype, or a separate object).
//
// This is intended to be a stand-alone file with minimal dependencies,
// easy to reuse or repurpose in other projects.

/* eslint-disable camelcase, brace-style */



var OES_vertex_array_object = 'OES_vertex_array_object';
var ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';
var WEBGL_draw_buffers = 'WEBGL_draw_buffers';
var EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';
var EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';
var EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';

var ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';

// Return true if WebGL2 context
function isWebGL2(gl) {
  var GL_TEXTURE_BINDING_3D = 0x806A;
  return gl && gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D;
}

// Return object with webgl2 flag and an extension
function getExtensionData(gl, extension) {
  return {
    webgl2: isWebGL2(gl),
    ext: gl.getExtension(extension)
  };
}

// function mapExtensionConstant(gl, constant) {
//   switch (constant) {
//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;
//   }
// }

var WEBGL_CONTEXT_POLYFILLS = (_WEBGL_CONTEXT_POLYFI = {}, _defineProperty(_WEBGL_CONTEXT_POLYFI, OES_vertex_array_object, {
  meta: { suffix: 'OES' },
  // NEW METHODS
  createVertexArray: function createVertexArray() {
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false, ERR_VAO_NOT_SUPPORTED);
  },
  deleteVertexArray: function deleteVertexArray() {},
  bindVertexArray: function bindVertexArray() {},
  isVertexArray: function isVertexArray() {
    return false;
  }
}), _defineProperty(_WEBGL_CONTEXT_POLYFI, ANGLE_instanced_arrays, {
  meta: {
    suffix: 'ANGLE'
    // constants: {
    //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'
    // }
  },
  vertexAttribDivisor: function vertexAttribDivisor(location, divisor) {
    // Accept divisor 0 even if instancing is not supported (0 = no instancing)
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(divisor === 0, 'WebGL instanced rendering not supported');
  },

  drawElementsInstanced: function drawElementsInstanced() {},
  drawArraysInstanced: function drawArraysInstanced() {}
}), _defineProperty(_WEBGL_CONTEXT_POLYFI, WEBGL_draw_buffers, {
  meta: {
    suffix: 'WEBGL'
  },
  drawBuffers: function drawBuffers() {
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false);
  }
}), _defineProperty(_WEBGL_CONTEXT_POLYFI, EXT_disjoint_timer_query, {
  meta: { suffix: 'EXT' },
  // WebGL1: Polyfills the WebGL2 Query API
  createQuery: function createQuery() {
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false);
  },
  deleteQuery: function deleteQuery() {
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false);
  },
  beginQuery: function beginQuery() {
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false);
  },
  endQuery: function endQuery() {},
  getQuery: function getQuery(handle, pname) {
    return this.getQueryObject(handle, pname);
  },

  // The WebGL1 extension uses getQueryObject rather then getQueryParameter
  getQueryParameter: function getQueryParameter(handle, pname) {
    return this.getQueryObject(handle, pname);
  },

  // plus the additional `queryCounter` method
  queryCounter: function queryCounter() {},
  getQueryObject: function getQueryObject() {}
}), _defineProperty(_WEBGL_CONTEXT_POLYFI, EXT_disjoint_timer_query_webgl2, {
  meta: { suffix: 'EXT' },
  // install `queryCounter`
  // `null` avoids overwriting WebGL1 `queryCounter` if the WebGL2 extension is not available
  queryCounter: null
}), _defineProperty(_WEBGL_CONTEXT_POLYFI, 'OVERRIDES', {
  // Override for getVertexAttrib that returns sane values for non-WebGL1 constants
  getVertexAttrib: function getVertexAttrib(gl, originalFunc, location, pname) {
    // const gl = this; // eslint-disable-line
    var _getExtensionData = getExtensionData(gl, ANGLE_instanced_arrays),
        webgl2 = _getExtensionData.webgl2,
        ext = _getExtensionData.ext;

    var GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
    var GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;

    var result = void 0;
    switch (pname) {
      // WebGL1 attributes will never be integer
      case GL_VERTEX_ATTRIB_ARRAY_INTEGER:
        result = !webgl2 ? false : undefined;break;
      // if instancing is not available, return 0 meaning divisor has not been set
      case GL_VERTEX_ATTRIB_ARRAY_DIVISOR:
        result = !webgl2 && !ext ? 0 : undefined;break;
      default:
    }

    return result !== undefined ? result : originalFunc(location, pname);
  },
  // Handle transform feedback and uniform block queries in WebGL1
  getProgramParameter: function getProgramParameter(gl, originalFunc, program, pname) {
    var GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
    var GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
    var GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
    var GL_SEPARATE_ATTRIBS = 0x8C8D;

    if (!isWebGL2(gl)) {
      switch (pname) {
        case GL_TRANSFORM_FEEDBACK_BUFFER_MODE:
          return GL_SEPARATE_ATTRIBS;
        case GL_TRANSFORM_FEEDBACK_VARYINGS:
          return 0;
        case GL_ACTIVE_UNIFORM_BLOCKS:
          return 0;
        default:
      }
    }
    return originalFunc(program, pname);
  },
  getInternalformatParameter: function getInternalformatParameter(gl, originalFunc, target, format, pname) {
    var GL_SAMPLES = 0x80A9;
    if (!isWebGL2(gl)) {
      switch (pname) {
        case GL_SAMPLES:
          return new Int32Array([0]);
        default:
      }
    }
    return gl.getInternalformatParameter(target, format, pname);
  },
  getTexParameter: function getTexParameter(gl, originalFunc, target, pname) {
    var GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
    switch (pname) {
      case GL_TEXTURE_MAX_ANISOTROPY_EXT:
        var extensions = gl.luma.extensions;

        var ext = extensions[EXT_texture_filter_anisotropic];
        pname = ext && ext.TEXTURE_MAX_ANISOTROPY_EXT || GL_TEXTURE_MAX_ANISOTROPY_EXT;
        break;
      default:
    }
    return originalFunc(target, pname);
  },

  getParameter: __WEBPACK_IMPORTED_MODULE_1__polyfill_get_parameter__["a" /* getParameterPolyfill */],
  hint: function hint(gl, originalFunc, pname, value) {
    // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:
    // switch (pname) {
    // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:
    // }
    return originalFunc(pname, value);
  }
}), _WEBGL_CONTEXT_POLYFI);

function initializeExtensions(gl) {
  gl.luma.extensions = {};
  var EXTENSIONS = gl.getSupportedExtensions();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = EXTENSIONS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var extension = _step.value;

      gl.luma[extension] = gl.getExtension(extension);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

// Polyfills a single WebGL extension into the `target` object
function polyfillExtension(gl, _ref) {
  var extension = _ref.extension,
      target = _ref.target,
      target2 = _ref.target2;

  var defaults = WEBGL_CONTEXT_POLYFILLS[extension];
  __WEBPACK_IMPORTED_MODULE_0_assert___default()(defaults);

  var _defaults$meta = defaults.meta,
      meta = _defaults$meta === undefined ? {} : _defaults$meta;
  var _meta$suffix = meta.suffix,
      suffix = _meta$suffix === undefined ? '' : _meta$suffix;


  var ext = gl.getExtension(extension);

  Object.keys(defaults).forEach(function (key) {
    var extKey = '' + key + suffix;

    var polyfill = null;
    if (key === 'meta') {
      // ignore
    } else if (typeof gl[key] === 'function') {
      // WebGL2 implementation is already
    } else if (ext && typeof ext[extKey] === 'function') {
      // pick extension implemenentation,if available
      polyfill = function polyfill() {
        return ext[extKey].apply(ext, arguments);
      };
    } else if (typeof defaults[key] === 'function') {
      // pick the mock implementation, if no implementation was detected
      polyfill = defaults[key].bind(target);
    }

    if (polyfill) {
      target[key] = polyfill;
      target2[key] = polyfill;
    }
  });
}

// Install simple overrides (mostly get* functions)
function installOverrides(gl, _ref2) {
  var target = _ref2.target,
      target2 = _ref2.target2;
  var OVERRIDES = WEBGL_CONTEXT_POLYFILLS.OVERRIDES;

  Object.keys(OVERRIDES).forEach(function (key) {
    if (typeof OVERRIDES[key] === 'function') {
      // install an override, if no implementation was detected
      var originalFunc = gl[key] ? gl[key].bind(gl) : function () {};
      var polyfill = OVERRIDES[key].bind(null, gl, originalFunc);
      target[key] = polyfill;
      target2[key] = polyfill;
    }
  });
}

// Registers polyfill or mock functions for all known extensions
function polyfillContext(gl) {
  gl.luma = gl.luma || {};
  initializeExtensions(gl);
  if (!gl.luma.polyfilled) {
    for (var extension in WEBGL_CONTEXT_POLYFILLS) {
      if (extension !== 'overrides') {
        polyfillExtension(gl, { extension: extension, target: gl.luma, target2: gl });
      }
    }
    installOverrides(gl, { target: gl.luma, target2: gl });
    gl.luma.polyfilled = true;
  }
  return gl;
}
//# sourceMappingURL=polyfill-context.js.map

/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export GLenum */
/* unused harmony export GLfloat */
/* unused harmony export GLint */
/* unused harmony export GLuint */
/* unused harmony export GLboolean */
/* harmony export (immutable) */ __webpack_exports__["a"] = installParameterDefinitions;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__buffer__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fence_sync__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__framebuffer__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__program__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__renderbuffer__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__sampler__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__texture__ = __webpack_require__(13);
var _BUFFER_PARAMETERS, _FRAMEBUFFER_STATUS, _PROGRAM_PARAMETERS, _RENDERBUFFER_PARAMET, _SAMPLER_PARAMETERS, _TEXTURE_PARAMETERS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Parameter support.
// Installs definitions that enable querying an object for all its parameters
// with resource.getParameters(). This is mainly useful during debugging.
// Note: Kept separate to avoid bundling in production applications



// TODO - separate install parameter definitions function from api metadata






// import Shader from './shader';


// WebGL specification 'types'
var GLenum = 'GLenum';
var GLfloat = 'GLfloat';
var GLint = 'GLint';
var GLuint = 'GLint';
var GLboolean = 'GLboolean';

/*
 TODO - will most likely remove some of these fields from the main struct
 but they can be useful for debugging/seer integration, so keep them here for now
export const DBG_PARAMETERS = {
  blend: {
    type: GLboolean,
    params: GL.BLEND,
    value: false,
    setter: (gl, value) => value ? gl.enable(GL.BLEND) : gl.disable(GL.BLEND)
  },

  blendColor: {
    type: new Float32Array(4),
    value: new Float32Array([0, 0, 0, 0]),
    params: GL.BLEND_COLOR,
    setter: (gl, value) => gl.blendColor(...value)
  },

  blendEquation: {
    type: [GLenum, GLenum],
    object: ['rgb', 'alpha'],
    alias: 'blendEquationSeparate',
    value: [GL.FUNC_ADD, GL.FUNC_ADD],
    params: [GL.BLEND_EQUATION_RGB, GL.BLEND_EQUATION_ALPHA],
    setter: (gl, value) => gl.blendEquationSeparate(...value),
    normalizeArgs: args => isArray(args) ? args : [args, args]
  },

  // blend func
  blendFunc: {
    type: [GLenum, GLenum, GLenum, GLenum],
    object: ['srcRgb', 'dstRgb', 'srcAlpha', 'dstAlpha'],
    value: [GL.ONE, GL.ZERO, GL.ONE, GL.ZERO],
    params: [GL.BLEND_SRC_RGB, GL.BLEND_DST_RGB, GL.BLEND_SRC_ALPHA, GL.BLEND_DST_ALPHA],
    setter: (gl, value) => gl.blendFuncSeparate(...value),
    normalizeArgs: args => isArray(args) && args.length === 3 ? [...args, ...args] : args
  },

  clearColor: {
    type: new Float32Array(4),
    params: GL.COLOR_CLEAR_VALUE,
    value: new Float32Array([0, 0, 0, 0]), // TBD
    setter: (gl, value) => gl.clearColor(...value)
  },

  colorMask: {
    type: [GLboolean, GLboolean, GLboolean, GLboolean],
    params: GL.COLOR_WRITEMASK,
    value: [true, true, true, true],
    setter: (gl, value) => gl.colorMask(...value)
  },

  // TODO - We have a name clash here
  cullFace: {
    type: GLboolean,
    params: GL.CULL_FACE,
    value: false,
    setter: (gl, value) => value ? gl.enable(GL.CULL_FACE) : gl.disable(GL.CULL_FACE)
  },

  cullFaceMode: {
    type: GLenum,
    params: GL.CULL_FACE_MODE,
    value: GL.BACK,
    setter: (gl, value) => gl.cullFace(value)
  },

  depthTest: {
    type: GLboolean,
    params: GL.DEPTH_TEST,
    value: false,
    setter: (gl, value) => value ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST)
  },

  depthClearValue: {
    type: GLfloat,
    params: GL.DEPTH_CLEAR_VALUE,
    value: 1,
    setter: (gl, value) => gl.clearDepth(value)
  },

  depthFunc: {
    type: GLenum,
    params: GL.DEPTH_FUNC,
    value: GL.LESS,
    setter: (gl, value) => gl.depthFunc(value)
  },

  depthRange: {
    type: new Float32Array(2),
    object: ['min', 'max'],
    params: GL.DEPTH_RANGE,
    value: new Float32Array([0, 1]), // TBD
    setter: (gl, value) => gl.depthRange(...value)
  },

  depthWritemask: {
    type: GLboolean,
    params: GL.DEPTH_WRITEMASK,
    value: true,
    setter: (gl, value) => gl.depthMask(value)
  },

  dither: {
    type: GLboolean,
    params: GL.DITHER,
    value: true,
    setter: (gl, value) => value ? gl.enable(GL.DITHER) : gl.disable(GL.DITHER)
  },

  fragmentShaderDerivativeHint: {
    type: GLenum,
    params: GL.FRAGMENT_SHADER_DERIVATIVE_HINT,
    value: GL.DONT_CARE,
    setter: (gl, value) => gl.hint(GL.FRAGMENT_SHADER_DERIVATIVE_HINT, value),
    gl1: 'OES_standard_derivatives'
  },

  frontFace: {
    type: GLenum,
    params: GL.FRONT_FACE,
    value: GL.CCW,
    setter: (gl, value) => gl.frontFace(value)
  },

  // Hint for quality of images generated with glGenerateMipmap
  generateMipmapHint: {
    type: GLenum,
    params: GL.GENERATE_MIPMAP_HINT,
    value: GL.DONT_CARE,
    setter: (gl, value) => gl.hint(GL.GENERATE_MIPMAP_HINT, value)
  },

  lineWidth: {
    type: GLfloat,
    params: GL.LINE_WIDTH,
    value: 1,
    setter: (gl, value) => gl.lineWidth(value)
  },

  polygonOffsetFill: {
    type: GLboolean,
    params: GL.POLYGON_OFFSET_FILL,
    value: false,
    setter: (gl, value) =>
      value ? gl.enable(GL.POLYGON_OFFSET_FILL) : gl.disable(GL.POLYGON_OFFSET_FILL)
  },

  // Add small offset to fragment depth values (by factor × DZ + r × units)
  // Useful for rendering hidden-line images, for applying decals to surfaces,
  // and for rendering solids with highlighted edges.
  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPolygonOffset.xml
  polygonOffset: {
    type: [GLfloat, GLfloat],
    object: ['factor', 'units'],
    params: [GL.POLYGON_OFFSET_FACTOR, GL.POLYGON_OFFSET_UNITS],
    value: [0, 0],
    setter: (gl, value) => gl.polygonOffset(...value)
  },

  // TODO - enabling multisampling
  // glIsEnabled with argument GL_SAMPLE_ALPHA_TO_COVERAGE
  // glIsEnabled with argument GL_SAMPLE_COVERAGE

  // specify multisample coverage parameters
  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glSampleCoverage.xml
  sampleCoverage: {
    type: [GLfloat, GLboolean],
    object: ['value', 'invert'],
    params: [GL.SAMPLE_COVERAGE_VALUE, GL.SAMPLE_COVERAGE_INVERT],
    value: [1.0, false],
    setter: (gl, value) => gl.sampleCoverage(...value)
  },

  scissorTest: {
    type: GLboolean,
    params: GL.SCISSOR_TEST,
    value: false,
    setter: (gl, value) => value ? gl.enable(GL.SCISSOR_TEST) : gl.disable(GL.SCISSOR_TEST)
  },

  scissorBox: {
    type: new Int32Array(4),
    object: ['x', 'y', 'width', 'height'],
    // When scissor test enabled we expect users to set correct scissor box,
    // otherwise we default to following value array.
    params: GL.SCISSOR_BOX,
    value: new Int32Array([0, 0, 1024, 1024]),
    setter: (gl, value) => gl.scissor(...value)
  },

  stencilTest: {
    type: GLboolean,
    params: GL.STENCIL_TEST,
    value: false,
    setter: (gl, value) => value ? gl.enable(GL.STENCIL_TEST) : gl.disable(GL.STENCIL_TEST)
  },

  // Sets index used when stencil buffer is cleared.
  stencilClearValue: {
    type: GLint,
    params: GL.STENCIL_CLEAR_VALUE,
    value: 0,
    setter: (gl, value) => gl.clearStencil(value)
  },

  // Sets bit mask enabling writing of individual bits in the stencil planes
  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMaskSeparate.xml
  stencilMask: {
    type: [GLuint, GLuint],
    object: ['mask', 'backMask'],
    value: [0xFFFFFFFF, 0xFFFFFFFF],
    params: [GL.STENCIL_WRITEMASK, GL.STENCIL_BACK_WRITEMASK],
    setter: (gl, value) => {
      value = isArray(value) ? value : [value, value];
      const [mask, backMask] = value;
      gl.stencilMaskSeparate(GL.FRONT, mask);
      gl.stencilMaskSeparate(GL.BACK, backMask);
    }
  },

  // Set stencil testing function, reference value and mask for front and back
  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFuncSeparate.xml
  stencilFunc: {
    type: [GLenum, GLint, GLuint, GLenum, GLint, GLuint],
    object: [
      'func', 'ref', 'valueMask', 'backFunc', 'backRef', 'backValueMask'
    ],
    value: [GL.ALWAYS, 0, 0xFFFFFFFF, GL.ALWAYS, 0, 0xFFFFFFFF],
    params: [
      // front
      GL.STENCIL_FUNC,
      GL.STENCIL_REF,
      GL.STENCIL_VALUE_MASK,
      // back
      GL.STENCIL_BACK_FUNC,
      GL.STENCIL_BACK_REF,
      GL.STENCIL_BACK_VALUE_MASK
    ],
    setter: (gl, value) => {
      const [func, ref, mask, backFunc, backRef, backMask] = value;
      gl.stencilFuncSeparate(GL.FRONT, func, ref, mask);
      gl.stencilFuncSeparate(GL.BACK, backFunc, backRef, backMask);
    }
  },

  // Specifies the action to take when the stencil test fails, front and back.
  // Stencil test fail action, depth test fail action, pass action
  // GL.KEEP, GL.ZERO, GL.REPLACE, GL.INCR, GL.INCR_WRAP, GL.DECR, GL.DECR_WRAP,
  // and GL.INVERT
  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOpSeparate.xml
  stencilOp: {
    type: [GLenum, GLenum, GLenum, GLenum, GLenum, GLenum],
    object: [
      'fail', 'passDepthFail', 'passDepthPass',
      'backFail', 'backPassDepthFail', 'backPassDepthPass'
    ],
    params: [
      // front
      GL.STENCIL_FAIL,
      GL.STENCIL_PASS_DEPTH_FAIL,
      GL.STENCIL_PASS_DEPTH_PASS,
      // back
      GL.STENCIL_BACK_FAIL,
      GL.STENCIL_BACK_PASS_DEPTH_FAIL,
      GL.STENCIL_BACK_PASS_DEPTH_PASS
    ],
    value: [GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP],
    setter: (gl, value) => {
      const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = value;
      gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);
      gl.stencilOpSeparate(GL.BACK, backSfail, backDpfail, backDppass);
    }
  },

  viewport: {
    type: new Int32Array(4),
    object: ['x', 'y', 'width', 'height'],
    // We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.
    params: GL.VIEWPORT,
    value: new Int32Array([0, 0, 1024, 1024]),
    setter: (gl, value) => gl.viewport(...value)
  },

  // WEBGL1 PIXEL PACK/UNPACK MODES

  // Packing of pixel data in memory (1,2,4,8)
  [GL.PACK_ALIGNMENT]: {
    type: GLint,
    params: GL.PACK_ALIGNMENT,
    value: 4,
    setter: (gl, value) => gl.pixelStorei(GL.PACK_ALIGNMENT, value)
  },
  // Unpacking pixel data from memory(1,2,4,8)
  [GL.UNPACK_ALIGNMENT]: {
    type: GLint,
    params: GL.UNPACK_ALIGNMENT,
    value: 4,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_ALIGNMENT, value)
  },
  // Flip source data along its vertical axis
  [GL.UNPACK_FLIP_Y_WEBGL]: {
    type: GLboolean,
    params: GL.UNPACK_FLIP_Y_WEBGL,
    value: false,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, value)
  },
  // Multiplies the alpha channel into the other color channels
  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: {
    type: GLboolean,
    params: GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
    value: false,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL, value)
  },
  // Default color space conversion or no color space conversion.
  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: {
    type: GLenum,
    params: GL.UNPACK_COLORSPACE_CONVERSION_WEBGL,
    value: GL.BROWSER_DEFAULT_WEBGL,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_COLORSPACE_CONVERSION_WEBGL, value)
  },

  // WEBGL2 PIXEL PACK/UNPACK MODES

  // Number of pixels in a row.
  [GL.PACK_ROW_LENGTH]: {
    type: GLint,
    params: GL.PACK_ROW_LENGTH,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.PACK_ROW_LENGTH, value),
    webgl2: true
  },
  // Number of pixels skipped before the first pixel is written into memory.
  [GL.PACK_SKIP_PIXELS]: {
    type: GLint,
    params: GL.PACK_SKIP_PIXELS,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.PACK_SKIP_PIXELS, value),
    webgl2: true
  },
  // Number of rows of pixels skipped before first pixel is written to memory.
  [GL.PACK_SKIP_ROWS]: {
    type: GLint,
    params: GL.PACK_SKIP_ROWS,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.PACK_SKIP_ROWS, value),
    webgl2: true
  },
  // Number of pixels in a row.
  [GL.UNPACK_ROW_LENGTH]: {
    type: GLint,
    params: GL.UNPACK_ROW_LENGTH,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_ROW_LENGTH, value),
    webgl2: true
  },
  // Image height used for reading pixel data from memory
  [GL.UNPACK_IMAGE_HEIGHT]: {
    type: GLint,
    params: GL.UNPACK_IMAGE_HEIGHT,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_IMAGE_HEIGHT, value),
    webgl2: true
  },
  // Number of pixel images skipped before first pixel is read from memory
  [GL.UNPACK_SKIP_PIXELS]: {
    type: GLint,
    params: GL.UNPACK_SKIP_PIXELS,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_PIXELS, value),
    webgl2: true
  },
  // Number of rows of pixels skipped before first pixel is read from memory
  [GL.UNPACK_SKIP_ROWS]: {
    type: GLint,
    params: GL.UNPACK_SKIP_ROWS,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_ROWS, value),
    webgl2: true
  },
  // Number of pixel images skipped before first pixel is read from memory
  [GL.UNPACK_SKIP_IMAGES]: {
    type: GLint,
    params: GL.UNPACK_SKIP_IMAGES,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_IMAGES, value),
    webgl2: true
  }
};
*/

var BUFFER_PARAMETERS = (_BUFFER_PARAMETERS = {}, _defineProperty(_BUFFER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BUFFER_SIZE, { webgl1: 0 }), _defineProperty(_BUFFER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BUFFER_USAGE, { webgl1: 0 // GLenum indicating the usage pattern of the buffer.
}), _BUFFER_PARAMETERS);

var FENCE_SYNC_PARAMETERS = [__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].OBJECT_TYPE, // GLenum, type of sync object (always GL.SYNC_FENCE).
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].SYNC_STATUS, // GLenum, status of sync object (GL.SIGNALED/GL.UNSIGNALED)
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].SYNC_CONDITION, // GLenum. object condition (always GL.SYNC_GPU_COMMANDS_COMPLETE).
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].SYNC_FLAGS // GLenum, flags sync object was created with (always 0)
];

var FRAMEBUFFER_ATTACHMENT_PARAMETERS = [__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint
// EXT_sRGB or WebGL2
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG
// WebGL2
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
// GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.
];

var FRAMEBUFFER_STATUS = (_FRAMEBUFFER_STATUS = {}, _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_COMPLETE, 'Success. Framebuffer is correctly set up'), _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_INCOMPLETE_ATTACHMENT, 'Framebuffer attachment types mismatched or some attachment point not attachment complete'), _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, 'Framebuffer has no attachment'), _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_INCOMPLETE_DIMENSIONS, 'Framebuffer attachments do not have the same size'), _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_UNSUPPORTED, 'Framebuffer attachment format not supported or depth and stencil attachments are not same'), _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_INCOMPLETE_MULTISAMPLE, 'Framebuffer attachement SAMPLES differs among renderbuffers, or are mixed with textures'), _FRAMEBUFFER_STATUS);

var PROGRAM_PARAMETERS = (_PROGRAM_PARAMETERS = {}, _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DELETE_STATUS, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].LINK_STATUS, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].VALIDATE_STATUS, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].ATTACHED_SHADERS, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].ACTIVE_ATTRIBUTES, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].ACTIVE_UNIFORMS, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TRANSFORM_FEEDBACK_BUFFER_MODE, { webgl2: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TRANSFORM_FEEDBACK_VARYINGS, { webgl2: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].ACTIVE_UNIFORM_BLOCKS, { webgl2: 0 // GLint
}), _PROGRAM_PARAMETERS);

//  parameters
var RENDERBUFFER_PARAMETERS = (_RENDERBUFFER_PARAMET = {}, _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_WIDTH, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_HEIGHT, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_INTERNAL_FORMAT, { type: 'GLenum', webgl1: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RGBA4 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_GREEN_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_BLUE_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_RED_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_ALPHA_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_DEPTH_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_STENCIL_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_SAMPLES, { webgl2: 1 }), _RENDERBUFFER_PARAMET);

var SAMPLER_PARAMETERS = (_SAMPLER_PARAMETERS = {}, _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAG_FILTER, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MIN_FILTER, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_S, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_T, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_R, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_BASE_LEVEL, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAX_LEVEL, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_COMPARE_FUNC, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_COMPARE_MODE, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MIN_LOD, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAX_LOD, { webgl2: true // maximum level-of-detail value

  // [GL.TEXTURE_MAX_ANISOTROPY_EXT]: {webgl2: 'EXT_texture_filter_anisotropic'}
}), _SAMPLER_PARAMETERS);

// const SHADER_PARAMETERS = [
//   GL.DELETE_STATUS, // GLboolean - whether shader is flagged for deletion.
//   GL.COMPILE_STATUS, // GLboolean - was last shader compilation successful.
//   GL.SHADER_TYPE // GLenum - GL.VERTEX_SHADER or GL.FRAGMENT_SHADER.
// ];

var TEXTURE_PARAMETERS = (_TEXTURE_PARAMETERS = {}, _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAG_FILTER, { type: 'GLenum', webgl1: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].LINEAR }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MIN_FILTER, { type: 'GLenum', webgl1: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].NEAREST_MIPMAP_LINEAR }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_S, { type: 'GLenum', webgl1: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].REPEAT }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_T, { type: 'GLenum', webgl1: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].REPEAT }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_R, { type: 'GLenum', webgl2: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].REPEAT }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_BASE_LEVEL, { webgl2: 0 }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAX_LEVEL, { webgl2: 1000 }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_COMPARE_FUNC, { type: 'GLenum', webgl2: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].LEQUAL }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_COMPARE_MODE, { type: 'GLenum', webgl2: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].NONE }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MIN_LOD, { webgl2: -1000 }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAX_LOD, { webgl2: 1000 }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WIDTH, { webgl1: 0 }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_HEIGHT, { webgl1: 0 }), _TEXTURE_PARAMETERS);

function installParameterDefinitions() {
  __WEBPACK_IMPORTED_MODULE_1__buffer__["a" /* default */].PARAMETERS = BUFFER_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_2__fence_sync__["a" /* default */].PARAMETERS = FENCE_SYNC_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_3__framebuffer__["a" /* default */].ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_3__framebuffer__["a" /* default */].STATUS = FRAMEBUFFER_STATUS;
  __WEBPACK_IMPORTED_MODULE_4__program__["a" /* default */].PARAMETERS = PROGRAM_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_5__renderbuffer__["a" /* default */].PARAMETERS = RENDERBUFFER_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_6__sampler__["a" /* default */].PARAMETERS = SAMPLER_PARAMETERS;
  // Shader.PARAMETERS = SHADER_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_7__texture__["a" /* default */].PARAMETERS = TEXTURE_PARAMETERS;
}
//# sourceMappingURL=debug-parameters.js.map

/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return webGLTypesAvailable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return Image; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return WebGLRenderingContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return WebGLProgram; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return WebGLShader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return WebGLBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return WebGLFramebuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return WebGLRenderbuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return WebGLTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return WebGLUniformLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return WebGLActiveInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return WebGLShaderPrecisionFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return WebGL2RenderingContext; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__init__ = __webpack_require__(22);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// WEBGL BUILT-IN TYPES
// 1) Exports all WebGL constants as {GL}
// 2) Enables app to "import" WebGL types
//    - Importing these types makes them known to eslint etc.
//    - Provides dummy types for WebGL2 when not available to streamline
//      library code.
//    - Exports types from headless gl when running under Node.js



var DummyType = /*#__PURE__*/function DummyType() {
  _classCallCheck(this, DummyType);
};

var _ref = __WEBPACK_IMPORTED_MODULE_0__init__["default"].globals.headlessTypes || __WEBPACK_IMPORTED_MODULE_0__init__["global"],
    _ref$WebGLRenderingCo = _ref.WebGLRenderingContext,
    WebGLRenderingContext = _ref$WebGLRenderingCo === undefined ? DummyType : _ref$WebGLRenderingCo,
    _ref$WebGLProgram = _ref.WebGLProgram,
    WebGLProgram = _ref$WebGLProgram === undefined ? DummyType : _ref$WebGLProgram,
    _ref$WebGLShader = _ref.WebGLShader,
    WebGLShader = _ref$WebGLShader === undefined ? DummyType : _ref$WebGLShader,
    _ref$WebGLBuffer = _ref.WebGLBuffer,
    WebGLBuffer = _ref$WebGLBuffer === undefined ? DummyType : _ref$WebGLBuffer,
    _ref$WebGLFramebuffer = _ref.WebGLFramebuffer,
    WebGLFramebuffer = _ref$WebGLFramebuffer === undefined ? DummyType : _ref$WebGLFramebuffer,
    _ref$WebGLRenderbuffe = _ref.WebGLRenderbuffer,
    WebGLRenderbuffer = _ref$WebGLRenderbuffe === undefined ? DummyType : _ref$WebGLRenderbuffe,
    _ref$WebGLTexture = _ref.WebGLTexture,
    WebGLTexture = _ref$WebGLTexture === undefined ? DummyType : _ref$WebGLTexture,
    _ref$WebGLUniformLoca = _ref.WebGLUniformLocation,
    WebGLUniformLocation = _ref$WebGLUniformLoca === undefined ? DummyType : _ref$WebGLUniformLoca,
    _ref$WebGLActiveInfo = _ref.WebGLActiveInfo,
    WebGLActiveInfo = _ref$WebGLActiveInfo === undefined ? DummyType : _ref$WebGLActiveInfo,
    _ref$WebGLShaderPreci = _ref.WebGLShaderPrecisionFormat,
    WebGLShaderPrecisionFormat = _ref$WebGLShaderPreci === undefined ? DummyType : _ref$WebGLShaderPreci;

var webGLTypesAvailable = WebGLRenderingContext !== DummyType && WebGLProgram !== DummyType && WebGLShader !== DummyType && WebGLBuffer !== DummyType && WebGLFramebuffer !== DummyType && WebGLRenderbuffer !== DummyType && WebGLTexture !== DummyType && WebGLUniformLocation !== DummyType && WebGLActiveInfo !== DummyType && WebGLShaderPrecisionFormat !== DummyType;

// Ensures that WebGL2RenderingContext is defined in non-WebGL2 environments
// so that apps can test their gl contexts with instanceof
// E.g. if (gl instanceof WebGL2RenderingContext) { }
function getWebGL2RenderingContext() {
  var WebGL2RenderingContextNotSupported = /*#__PURE__*/function WebGL2RenderingContextNotSupported() {
    _classCallCheck(this, WebGL2RenderingContextNotSupported);
  };

  return __WEBPACK_IMPORTED_MODULE_0__init__["global"].WebGL2RenderingContext || WebGL2RenderingContextNotSupported;
}

// Ensure that Image is defined under Node.js
function getImage() {
  var ImageNotSupported = /*#__PURE__*/function ImageNotSupported() {
    _classCallCheck(this, ImageNotSupported);
  };

  return __WEBPACK_IMPORTED_MODULE_0__init__["global"].Image || ImageNotSupported;
}

var WebGL2RenderingContext = getWebGL2RenderingContext();
var Image = getImage();

// Export the standard WebGL types

//# sourceMappingURL=types.js.map

/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export enableDebug */
/* harmony export (immutable) */ __webpack_exports__["a"] = makeDebugContext;
/* unused harmony export getRealContext */
/* unused harmony export getDebugContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_webgl_debug__ = __webpack_require__(216);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_webgl_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_webgl_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__api_debug_parameters__ = __webpack_require__(80);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Khronos Debug support module




__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__api_debug_parameters__["a" /* installParameterDefinitions */])();

// Helper to get shared context data
function getContextData(gl) {
  gl.luma = gl.luma || {};
  return gl.luma;
}

// Enable or disable debug checks in debug contexts
// Non-debug contexts do not have checks (to ensure performance)
// Turning off debug for debug contexts removes most of the performance penalty
function enableDebug(debug) {
  __WEBPACK_IMPORTED_MODULE_1__utils__["log"].debug = debug;
}

// Returns (a potentially new) context with debug instrumentation turned off or on.
// Note that this actually returns a new context
function makeDebugContext(gl) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      debug = _ref.debug;

  if (gl === null) {
    // Return to ensure we don't create a context in this case.
    return null;
  }

  return debug ? getDebugContext(gl) : getRealContext(gl);
}

// Returns the real context from either of the real/debug contexts
function getRealContext(gl) {
  if (gl === null) {
    // Return to ensure we don't create a context in this case.
    return null;
  }

  var data = getContextData(gl);
  // If the context has a realContext member, it is a debug context so return the realContext
  return data.realContext ? data.realContext : gl;
}

// Returns the debug context from either of the real/debug contexts
function getDebugContext(gl) {
  if (gl === null) {
    // Return to ensure we don't create a context in this case.
    return null;
  }

  var data = getContextData(gl);
  // If this *is* a debug context, return itself
  if (data.realContext) {
    return gl;
  }

  // If this already has a debug context, return it.
  if (data.debugContext) {
    return data.debugContext;
  }

  // Create a new debug context

  var WebGLDebugContext = /*#__PURE__*/function WebGLDebugContext() {
    _classCallCheck(this, WebGLDebugContext);
  };

  var debugContext = __WEBPACK_IMPORTED_MODULE_0_webgl_debug___default.a.makeDebugContext(gl, throwOnError, validateArgsAndLog);
  Object.assign(WebGLDebugContext.prototype, debugContext);

  // Store the debug context
  data.debugContext = debugContext;
  debugContext.debug = true;

  // Return it
  return debugContext;
}

// DEBUG TRACING

function getFunctionString(functionName, functionArgs) {
  var args = __WEBPACK_IMPORTED_MODULE_0_webgl_debug___default.a.glFunctionArgsToString(functionName, functionArgs);
  args = '' + args.slice(0, 100) + (args.length > 100 ? '...' : '');
  return 'gl.' + functionName + '(' + args + ')';
}

function throwOnError(err, functionName, args) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils__["log"].nothrow) {
    var errorMessage = __WEBPACK_IMPORTED_MODULE_0_webgl_debug___default.a.glEnumToString(err);
    var functionArgs = __WEBPACK_IMPORTED_MODULE_0_webgl_debug___default.a.glFunctionArgsToString(functionName, args);
    throw new Error(errorMessage + ' in gl.' + functionName + '(' + functionArgs + ')');
  }
}

// Don't generate function string until it is needed
function validateArgsAndLog(functionName, functionArgs) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils__["log"].debug) {
    return;
  }

  var functionString = void 0;
  if (__WEBPACK_IMPORTED_MODULE_1__utils__["log"].priority >= 4) {
    functionString = getFunctionString(functionName, functionArgs);
    __WEBPACK_IMPORTED_MODULE_1__utils__["log"].info(4, '' + functionString);
  }

  if (__WEBPACK_IMPORTED_MODULE_1__utils__["log"].break) {
    functionString = functionString || getFunctionString(functionName, functionArgs);
    var isBreakpoint = __WEBPACK_IMPORTED_MODULE_1__utils__["log"].break && __WEBPACK_IMPORTED_MODULE_1__utils__["log"].break.every(function (breakOn) {
      return functionString.indexOf(breakOn) !== -1;
    });
    if (isBreakpoint) {
      /* eslint-disable no-debugger */
      debugger;
      /* eslint-enable no-debugger */
    }
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = functionArgs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var arg = _step.value;

      if (arg === undefined) {
        functionString = functionString || getFunctionString(functionName, functionArgs);
        throw new Error('Undefined argument: ' + functionString);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}
//# sourceMappingURL=context-debug.js.map

/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = draw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
/* eslint-disable */
// TODO - generic draw call
// One of the good things about GL is that there are so many ways to draw things





// A good thing about webGL is that there are so many ways to draw things,
// e.g. depending on whether data is indexed and/or isInstanced.
// This function unifies those into a single call with simple parameters
// that have sane defaults.
function draw(gl, _ref) {
  var _ref$drawMode = _ref.drawMode,
      drawMode = _ref$drawMode === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES : _ref$drawMode,
      vertexCount = _ref.vertexCount,
      _ref$offset = _ref.offset,
      offset = _ref$offset === undefined ? 0 : _ref$offset,
      _ref$isIndexed = _ref.isIndexed,
      isIndexed = _ref$isIndexed === undefined ? false : _ref$isIndexed,
      _ref$indexType = _ref.indexType,
      indexType = _ref$indexType === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_SHORT : _ref$indexType,
      _ref$isInstanced = _ref.isInstanced,
      isInstanced = _ref$isInstanced === undefined ? false : _ref$isInstanced,
      _ref$instanceCount = _ref.instanceCount,
      instanceCount = _ref$instanceCount === undefined ? 0 : _ref$instanceCount;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["f" /* assertWebGLContext */])(gl);

  var extension = gl.getExtension('ANGLE_instanced_arrays');

  // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension
  if (isInstanced) {
    var webgl2 = isWebGL2(gl);
    var _extension = gl.getExtension('ANGLE_instanced_arrays');
    var context = webgl2 ? gl : _extension;
    var suffix = webgl2 ? '' : 'ANGLE';
    var drawElements = 'drawElementsInstanced' + suffix;
    var drawArrays = 'drawArraysInstanced' + suffix;

    if (isIndexed) {
      context[drawElements](drawMode, vertexCount, indexType, offset, instanceCount);
    } else {
      context[drawArrays](drawMode, offset, vertexCount, instanceCount);
    }
  } else if (isIndexed) {
    gl.drawElements(drawMode, vertexCount, indexType, offset);
  } else {
    gl.drawArrays(drawMode, offset, vertexCount);
  }
}
//# sourceMappingURL=draw.js.map

/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_query_manager__ = __webpack_require__(41);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var FenceSync = /*#__PURE__*/function (_Resource) {
  _inherits(FenceSync, _Resource);

  /*
   * @class
   * @param {WebGL2RenderingContext} gl
   */
  function FenceSync(gl, opts) {
    _classCallCheck(this, FenceSync);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(gl);

    // query manager needs a promise field
    var _this = _possibleConstructorReturn(this, (FenceSync.__proto__ || Object.getPrototypeOf(FenceSync)).call(this, gl, opts));

    _this.promise = null;
    Object.seal(_this);
    return _this;
  }

  /**
   * The method is a no-op in the absence of the possibility of
   * synchronizing between multiple GL contexts.
   * Prevent commands from being added to GPU command queue.
   * Note: commands can still be buffered in driver.
   *
   * @param {GLbitfield} flags
   * @param {GLint64} timeout
   * @return {Sync} status
   */


  _createClass(FenceSync, [{
    key: 'wait',
    value: function wait() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$flags = _ref.flags,
          flags = _ref$flags === undefined ? 0 : _ref$flags,
          _ref$timeout = _ref.timeout,
          timeout = _ref$timeout === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TIMEOUT_IGNORED : _ref$timeout;

      this.gl.waitSync(this.handle, flags, timeout);
      return this;
    }

    /**
     * Block all CPU operations until fence is signalled
     * @param {GLbitfield} flags
     * @param {GLint64} timeout
     * @return {GLenum} result
     */

  }, {
    key: 'clientWait',
    value: function clientWait(_ref2) {
      var _ref2$flags = _ref2.flags,
          flags = _ref2$flags === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SYNC_FLUSH_COMMANDS_BIT : _ref2$flags,
          timeout = _ref2.timeout;

      var result = this.gl.clientWaitSync(this.handle, flags, timeout);
      // TODO - map to boolean?
      switch (result) {
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ALREADY_SIGNALED:
          // Indicates that sync object was signaled when this method was called.
          break;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TIMEOUT_EXPIRED:
          // Indicates that timeout time passed, sync object did not become signaled
          break;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].CONDITION_SATISFIED:
          // Indicates that sync object was signaled before timeout expired.
          break;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].WAIT_FAILED:
          // Indicates that an error occurred during execution.
          break;
        default:
      }
      return result;
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      __WEBPACK_IMPORTED_MODULE_3__helpers_query_manager__["a" /* default */].cancelQuery(this);
    }
  }, {
    key: 'isSignaled',
    value: function isSignaled() {
      return this.getParameter(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SYNC_STATUS) === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SIGNALED;
    }

    // TODO - Query manager needs these?

  }, {
    key: 'isResultAvailable',
    value: function isResultAvailable() {
      return this.isSignaled();
    }
  }, {
    key: 'getResult',
    value: function getResult() {
      return this.isSignaled();
    }
  }, {
    key: 'getParameter',
    value: function getParameter(pname) {
      return this.gl.getSyncParameter(this.handle, pname);
    }

    // PRIVATE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.fenceSync(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SYNC_GPU_COMMANDS_COMPLETE, 0);
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      __WEBPACK_IMPORTED_MODULE_3__helpers_query_manager__["a" /* default */].deleteQuery(this);
      this.gl.deleteSync(this.handle);
    }
  }]);

  return FenceSync;
}(__WEBPACK_IMPORTED_MODULE_2__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (FenceSync);
//# sourceMappingURL=fence-sync.js.map

/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = readPixels;
/* unused harmony export readPixelsToBuffer */
/* unused harmony export blitFramebuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/* eslint-disable */
// TODO - generic draw call
// One of the good things about GL is that there are so many ways to draw things





/**
 * Read pixels from a target
 *
 * Will read from the currently bound framebuffer, or the currently bound
 *  drawing buffer - if context has been created with
 *  preserveDrawingBuffers
 *
 * @param {WebGLRenderingContext} gl
 * @param {Object} opts
 * @param {Number} opts.x - leftmost coord to be read
 * @param {Number} opts.y - bottommost (or topmost if sourceHeight supplied)
 * @param {Number} opts.width=1 - width of area to be read
 * @param {Number} opts.height=1 - height of area to be read
 * @param {Number} opts.sourceHeight= - target height, implies top left coords
 * @param {Number} opts.dataOffset=0 - WebGL2 only - offset into data array
 * @param {Number} opts.format=GL.RBGA - Can be set to GL.RGB or GL.ALPHA
 *
 * @return {ArrayView} - types array, either passed in or autoallocated
 */
function readPixels(gl, _ref) {
  var x = _ref.x,
      y = _ref.y,
      _ref$width = _ref.width,
      width = _ref$width === undefined ? 1 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === undefined ? 1 : _ref$height,
      data = _ref.data,
      _ref$dataOffset = _ref.dataOffset,
      dataOffset = _ref$dataOffset === undefined ? 0 : _ref$dataOffset,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_BYTE : _ref$type,
      sourceHeight = _ref.sourceHeight,
      _ref$format = _ref.format,
      format = _ref$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA : _ref$format;

  // Read color in the central pixel, to be mapped with picking colors
  data = data || new Uint8Array(4 * width * height);
  // If source height is specified, a top left coordinate system is used
  y = sourceHeight ? sourceHeight - y : y;
  if (dataOffset) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(gl);
    gl.readPixels(x, y, width, height, format, type, data, dataOffset);
  } else {
    gl.readPixels(x, y, width, height, format, type, data);
  }
  return data;
}

/**
 * Read pixels directly into webgl buffer
 * NOTE: WebGL2 only
 *
 * @param {WebGLRenderingContext} gl
 * @param {Object} options
 * @return {WebGLBuffer} the passed in buffer
 */
function readPixelsToBuffer(gl, _ref2) {
  var x = _ref2.x,
      y = _ref2.y,
      _ref2$width = _ref2.width,
      width = _ref2$width === undefined ? 1 : _ref2$width,
      _ref2$height = _ref2.height,
      height = _ref2$height === undefined ? 1 : _ref2$height,
      buffer = _ref2.buffer,
      _ref2$dataOffset = _ref2.dataOffset,
      dataOffset = _ref2$dataOffset === undefined ? 0 : _ref2$dataOffset,
      _ref2$type = _ref2.type,
      type = _ref2$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_BYTE : _ref2$type,
      sourceHeight = _ref2.sourceHeight,
      _ref2$format = _ref2.format,
      format = _ref2$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA : _ref2$format;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(gl);

  // If source height is specified, a top left coordinate system is used
  y = sourceHeight ? sourceHeight - y : y;

  gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].PIXEL_PACK_BUFFER, buffer.handle);

  gl.readPixels(x, y, width, height, format, type, dataOffset);

  gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].PIXEL_PACK_BUFFER, null);

  return buffer;
}

/*
* @param {} opt.filter
 */
function blitFramebuffer(gl, _ref3) {
  var _ref3$source = _slicedToArray(_ref3.source, 4),
      sourceX = _ref3$source[0],
      sourceY = _ref3$source[1],
      sourceWidth = _ref3$source[2],
      sourceHeight = _ref3$source[3],
      _ref3$dest = _slicedToArray(_ref3.dest, 4),
      destX = _ref3$dest[0],
      destY = _ref3$dest[1],
      destWidth = _ref3$dest[2],
      destHeight = _ref3$dest[3],
      _ref3$mask = _ref3.mask,
      mask = _ref3$mask === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].COLOR_BUFFER_BIT | __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].DEPTH_BUFFER_BIT | __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].STENCIL_BUFFER_BIT : _ref3$mask,
      _ref3$filter = _ref3.filter,
      filter = _ref3$filter === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].LINEAR : _ref3$filter;
}
//# sourceMappingURL=functions.js.map

/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context_features__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_utils__ = __webpack_require__(11);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// WebGL2 Query (also handles disjoint timer extensions)







var noop = function noop(x) {
  return x;
};

var ERR_GPU_DISJOINT = 'Disjoint GPU operation invalidated timer queries';
var ERR_TIMER_QUERY_NOT_SUPPORTED = 'Timer queries require "EXT_disjoint_timer_query" extension';

var GL_QUERY_COUNTER_BITS_EXT = 0x8864; // # bits in query result for the given target.

var GL_QUERY_RESULT = 0x8866; // Returns a GLuint containing the query result.
var GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.

var GL_TIME_ELAPSED_EXT = 0x88BF; // Elapsed time (in nanoseconds).
var GL_TIMESTAMP_EXT = 0x8E28; // The current time.
var GL_GPU_DISJOINT_EXT = 0x8FBB; // Whether GPU performed any disjoint operation.

var GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88; // #primitives written to feedback buffers
var GL_ANY_SAMPLES_PASSED = 0x8C2F; // Occlusion query (if drawing passed depth test)
var GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A; // Occlusion query less accurate/faster version

var Query = /*#__PURE__*/function (_Resource) {
  _inherits(Query, _Resource);

  _createClass(Query, null, [{
    key: 'isSupported',


    // Returns true if Query is supported by the WebGL implementation
    // Can also check whether timestamp queries are available.
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$queries = _ref.queries,
          queries = _ref$queries === undefined ? false : _ref$queries,
          _ref$timers = _ref.timers,
          timers = _ref$timers === undefined ? false : _ref$timers,
          _ref$timestamps = _ref.timestamps,
          timestamps = _ref$timestamps === undefined ? false : _ref$timestamps;

      var webgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context__["b" /* isWebGL2 */])(gl);
      var hasTimerQueries = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context_features__["d" /* hasFeatures */])(gl, __WEBPACK_IMPORTED_MODULE_2__context_features__["c" /* FEATURES */].TIMER_QUERY);

      var supported = webgl2 || hasTimerQueries;
      if (queries) {
        supported = supported && webgl2;
      }

      if (timers) {
        supported = supported && hasTimerQueries;
      }

      if (timestamps) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils__["d" /* polyfillContext */])(gl);
        var queryCounterBits = gl.getQuery(GL_TIMESTAMP_EXT, GL_QUERY_COUNTER_BITS_EXT);
        supported = supported && queryCounterBits > 0;
      }

      return supported;
    }

    // Create a query class

  }]);

  function Query(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Query);

    var _this = _possibleConstructorReturn(this, (Query.__proto__ || Object.getPrototypeOf(Query)).call(this, gl, opts));

    var _opts$onComplete = opts.onComplete,
        onComplete = _opts$onComplete === undefined ? noop : _opts$onComplete,
        _opts$onError = opts.onError,
        onError = _opts$onError === undefined ? noop : _opts$onError;


    _this.target = null;
    _this.onComplete = onComplete;
    _this.onError = onError;

    // query manager needs a promise field
    _this.promise = null;

    Object.seal(_this);
    return _this;
  }

  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)
  // Measures GPU time delta between this call and a matching `end` call in the
  // GPU instruction stream.


  _createClass(Query, [{
    key: 'beginTimeElapsedQuery',
    value: function beginTimeElapsedQuery() {
      return this.begin(GL_TIME_ELAPSED_EXT);
    }

    // Shortcut for occlusion queries

  }, {
    key: 'beginOcclusionQuery',
    value: function beginOcclusionQuery() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$conservative = _ref2.conservative,
          conservative = _ref2$conservative === undefined ? false : _ref2$conservative;

      return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);
    }

    // Shortcut for transformFeedbackQuery

  }, {
    key: 'beginTransformFeedbackQuery',
    value: function beginTransformFeedbackQuery() {
      return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
    }

    // Generates a GPU time stamp when the GPU instruction stream reaches this instruction.
    // To measure time deltas, two timestamp queries are needed.
    // Note: timestamp() queries may not be available even when the timer query extension is.

  }, {
    key: 'getTimestamp',
    value: function getTimestamp() {
      __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].beginQuery(this, this.onComplete, this.onError);
      try {
        this.gl.queryCounter(this.handle, GL_TIMESTAMP_EXT);
      } catch (error) {
        __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].rejectQuery(this, ERR_TIMER_QUERY_NOT_SUPPORTED);
      }
      return this;
    }

    // Due to OpenGL API limitations, after calling `begin()` on one Query
    // instance, `end()` must be called on that same instance before
    // calling `begin()` on another query. While there can be multiple
    // outstanding queries representing disjoint `begin()`/`end()` intervals.
    // It is not possible to interleave or overlap `begin` and `end` calls.

  }, {
    key: 'begin',
    value: function begin(target) {
      // - Triggering a new query when a Query is already tracking an
      //   unresolved query causes that query to be cancelled.
      __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].beginQuery(this, this.onComplete, this.onError);
      this.target = target;

      try {
        this.gl.beginQuery(this.target, this.handle);
      } catch (error) {
        __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].rejectQuery(this, 'Query not supported');
      }
      return this;
    }

    // ends the current query

  }, {
    key: 'end',
    value: function end() {
      // Note: calling end does not affect the pending promise
      if (this.target) {
        this.ext.endQuery(this.target);
        this.target = null;
      }
      return this;
    }

    // Cancels a pending query

  }, {
    key: 'cancel',
    value: function cancel() {
      this.end();
      __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].cancelQuery(this);
      return this;
    }

    // Returns true if the query result is available

  }, {
    key: 'isResultAvailable',
    value: function isResultAvailable() {
      return this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);
    }

    // Returns the query result, converted to milliseconds to match JavaScript conventions.
    // TODO - what about non-timer queries

  }, {
    key: 'getResult',
    value: function getResult() {
      var result = this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT);
      return Number.isFinite(result) ? result / 1e6 : 0;
    }
  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return Query.isSupported(this.gl) ? this.gl.createQuery() : null;
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].deleteQuery(this);
      this.gl.deleteQuery(this.handle);
    }
  }], [{
    key: 'poll',
    value: function poll(gl) {
      __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].poll(gl);
    }
  }]);

  return Query;
}(__WEBPACK_IMPORTED_MODULE_0__resource__["a" /* default */]);

// NOTE: This call lets the queryManager know how to detect disjoint GPU state
// It will check dsjoint state on polls and before adding a new query
// and reject any outstanding TimerQueries with our supplied error message.


/* harmony default export */ __webpack_exports__["a"] = (Query);
__WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].setInvalidator({
  queryType: Query,
  errorMessage: ERR_GPU_DISJOINT,
  // Note: Querying the disjoint state resets it
  checkInvalid: function checkInvalid(gl) {
    return gl.getParameter(GL_GPU_DISJOINT_EXT);
  }
});
//# sourceMappingURL=query.js.map

/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource__ = __webpack_require__(4);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-inline-comments */




var Sampler = /*#__PURE__*/function (_Resource) {
  _inherits(Sampler, _Resource);

  _createClass(Sampler, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl);
    }
  }, {
    key: 'isHandle',
    value: function isHandle(handle) {
      return this.gl.isSampler(this.handle);
    }
  }]);

  function Sampler(gl, opts) {
    _classCallCheck(this, Sampler);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(gl);

    var _this = _possibleConstructorReturn(this, (Sampler.__proto__ || Object.getPrototypeOf(Sampler)).call(this, gl, opts));

    Object.seal(_this);
    return _this;
  }

  /**
   * Bind to the same texture unit as a texture to control sampling for that texture
   * @param {GLuint} unit - texture unit index
   * @return {Sampler} - returns self to enable chaining
   */


  _createClass(Sampler, [{
    key: 'bind',
    value: function bind(unit) {
      this.gl.bindSampler(unit, this.handle);
      return this;
    }

    /**
     * Bind to the same texture unit as a texture to control sampling for that texture
     * @param {GLuint} unit - texture unit index
     * @return {Sampler} - returns self to enable chaining
     */

  }, {
    key: 'unbind',
    value: function unbind(unit) {
      this.gl.bindSampler(unit, null);
      return this;
    }

    // RESOURCE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createSampler();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteSampler(this.handle);
    }
  }, {
    key: '_getParameter',
    value: function _getParameter(pname) {
      var value = this.gl.getSamplerParameter(this.handle, pname);
      return value;
    }
  }, {
    key: '_setParameter',
    value: function _setParameter(pname, param) {
      // Apparently there are some conversion integer/float rules that made
      // the WebGL committe expose two parameter setting functions in JavaScript.
      // For now, pick the float version for parameters specified as GLfloat.
      switch (pname) {
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_MIN_LOD:
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_MAX_LOD:
          this.gl.samplerParameterf(this.handle, pname, param);
          break;
        default:
          this.gl.samplerParameteri(this.handle, pname, param);
          break;
      }
      return this;
    }
  }]);

  return Sampler;
}(__WEBPACK_IMPORTED_MODULE_2__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Sampler);
//# sourceMappingURL=sampler.js.map

/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__texture__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



// import {withParameters} from './context';


var FACES = [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_POSITIVE_X, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_NEGATIVE_X, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_POSITIVE_Y, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_NEGATIVE_Y, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_POSITIVE_Z, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_NEGATIVE_Z];

var TextureCube = /*#__PURE__*/function (_Texture) {
  _inherits(TextureCube, _Texture);

  function TextureCube(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, TextureCube);

    var _this = _possibleConstructorReturn(this, (TextureCube.__proto__ || Object.getPrototypeOf(TextureCube)).call(this, gl, Object.assign({}, opts, { target: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP })));

    _this.initialize(opts);
    Object.seal(_this);
    return _this;
  }

  /* eslint-disable max-len, max-statements */


  _createClass(TextureCube, [{
    key: 'initialize',
    value: function initialize() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _opts$format = opts.format,
          format = _opts$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].RGBA : _opts$format,
          _opts$mipmaps = opts.mipmaps,
          mipmaps = _opts$mipmaps === undefined ? true : _opts$mipmaps;
      var _opts$width = opts.width,
          width = _opts$width === undefined ? 1 : _opts$width,
          _opts$height = opts.height,
          height = _opts$height === undefined ? 1 : _opts$height,
          _opts$type = opts.type,
          type = _opts$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].UNSIGNED_BYTE : _opts$type,
          dataFormat = opts.dataFormat;

      // Deduce width and height based on one of the faces

      var _deduceParameters = this._deduceParameters({ format: format, type: type, dataFormat: dataFormat });

      type = _deduceParameters.type;
      dataFormat = _deduceParameters.dataFormat;

      // Enforce cube
      var _deduceImageSize = this._deduceImageSize({
        data: opts[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_POSITIVE_X], width: width, height: height
      });

      width = _deduceImageSize.width;
      height = _deduceImageSize.height;
      __WEBPACK_IMPORTED_MODULE_2_assert___default()(width === height);

      // Temporarily apply any pixel store paramaters and build textures
      // withParameters(this.gl, opts, () => {
      //   for (const face of CUBE_MAP_FACES) {
      //     this.setImageData({
      //       target: face,
      //       data: opts[face],
      //       width, height, format, type, dataFormat, border, mipmaps
      //     });
      //   }
      // });

      this.setCubeMapImageData(opts);

      // Called here so that GL.
      // TODO - should genMipmap() be called on the cubemap or on the faces?
      if (mipmaps) {
        this.generateMipmap(opts);
      }

      // Store opts for accessors
      this.opts = opts;
    }
  }, {
    key: 'subImage',
    value: function subImage(_ref) {
      var face = _ref.face,
          data = _ref.data,
          _ref$x = _ref.x,
          x = _ref$x === undefined ? 0 : _ref$x,
          _ref$y = _ref.y,
          y = _ref$y === undefined ? 0 : _ref$y,
          _ref$mipmapLevel = _ref.mipmapLevel,
          mipmapLevel = _ref$mipmapLevel === undefined ? 0 : _ref$mipmapLevel;

      return this._subImage({ target: face, data: data, x: x, y: y, mipmapLevel: mipmapLevel });
    }

    /* eslint-disable max-statements, max-len */

  }, {
    key: 'setCubeMapImageData',
    value: function setCubeMapImageData(_ref2) {
      var width = _ref2.width,
          height = _ref2.height,
          pixels = _ref2.pixels,
          data = _ref2.data,
          _ref2$border = _ref2.border,
          border = _ref2$border === undefined ? 0 : _ref2$border,
          _ref2$format = _ref2.format,
          format = _ref2$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].RGBA : _ref2$format,
          _ref2$type = _ref2.type,
          type = _ref2$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].UNSIGNED_BYTE : _ref2$type,
          _ref2$generateMipmap = _ref2.generateMipmap,
          generateMipmap = _ref2$generateMipmap === undefined ? false : _ref2$generateMipmap;
      var gl = this.gl;

      pixels = pixels || data;
      this.bind();
      if (this.width || this.height) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = FACES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var face = _step.value;

            gl.texImage2D(face, 0, format, width, height, border, format, type, pixels[face]);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = FACES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _face = _step2.value;

            gl.texImage2D(_face, 0, format, format, type, pixels[_face]);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  }, {
    key: 'bind',
    value: function bind() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          index = _ref3.index;

      if (index !== undefined) {
        this.gl.activeTexture(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE0 + index);
      }
      this.gl.bindTexture(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP, this.handle);
      return index;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      this.gl.bindTexture(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP, null);
      return this;
    }
  }]);

  return TextureCube;
}(__WEBPACK_IMPORTED_MODULE_1__texture__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (TextureCube);


TextureCube.FACES = FACES;
//# sourceMappingURL=texture-cube.js.map

/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getPrimitiveCount */
/* unused harmony export getVertexCount */
/* harmony export (immutable) */ __webpack_exports__["a"] = getTransformFeedbackMode;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
var GL_TRANSFORM_FEEDBACK = 0x8E22;

var TranformFeedback = /*#__PURE__*/function (_Resource) {
  _inherits(TranformFeedback, _Resource);

  _createClass(TranformFeedback, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["b" /* isWebGL2 */])(gl);
    }
  }, {
    key: 'isHandle',
    value: function isHandle(handle) {
      return this.gl.isTransformFeedback(this.handle);
    }

    /**
     * @class
     * @param {WebGL2RenderingContext} gl - context
     * @param {Object} opts - options
     */

  }]);

  function TranformFeedback(gl, opts) {
    _classCallCheck(this, TranformFeedback);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["a" /* assertWebGL2Context */])(gl);

    var _this = _possibleConstructorReturn(this, (TranformFeedback.__proto__ || Object.getPrototypeOf(TranformFeedback)).call(this, gl, opts));

    _this.buffers = {};
    Object.seal(_this);

    _this.initialize(opts);
    return _this;
  }

  _createClass(TranformFeedback, [{
    key: 'initialize',
    value: function initialize(_ref) {
      var _ref$buffers = _ref.buffers,
          buffers = _ref$buffers === undefined ? {} : _ref$buffers;

      this.bindBuffers(buffers, { clear: true });
    }
  }, {
    key: 'bindBuffers',
    value: function bindBuffers() {
      var buffers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _ref2 = arguments[1];
      var clear = _ref2.clear,
          _ref2$varyingMap = _ref2.varyingMap,
          varyingMap = _ref2$varyingMap === undefined ? {} : _ref2$varyingMap;

      if (clear) {
        this._unbindBuffers();
        this.buffers = {};
      }
      var bufferIndex = 0;
      for (var bufferName in buffers) {
        var buffer = buffers[bufferName];
        var index = bufferIndex++;
        __WEBPACK_IMPORTED_MODULE_3_assert___default()(Number.isFinite(index));
        this.buffers[index] = buffer;
      }
    }

    // TODO: Activation is tightly coupled to the current program. Since we try to encapsulate
    // program.use, should we move these methods (begin/pause/resume/end) to the Program?

  }, {
    key: 'begin',
    value: function begin(primitiveMode) {
      this._bindBuffers();
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      this.gl.beginTransformFeedback(primitiveMode);
      return this;
    }
  }, {
    key: 'pause',
    value: function pause() {
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      this.gl.pauseTransformFeedback();
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);
      this._unbindBuffers();
      return this;
    }
  }, {
    key: 'resume',
    value: function resume() {
      this._bindBuffers();
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      this.gl.resumeTransformFeedback();
      return this;
    }
  }, {
    key: 'end',
    value: function end() {
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      this.gl.endTransformFeedback();
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);
      this._unbindBuffers();
      return this;
    }
  }, {
    key: 'bindBuffer',
    value: function bindBuffer(_ref3) {
      var index = _ref3.index,
          buffer = _ref3.buffer,
          _ref3$offset = _ref3.offset,
          offset = _ref3$offset === undefined ? 0 : _ref3$offset,
          size = _ref3.size;

      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      if (size === undefined) {
        this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle);
      } else {
        this.gl.bindBufferRange(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle, offset, size);
      }
      return this;
    }
  }, {
    key: 'unbindBuffer',
    value: function unbindBuffer(_ref4) {
      var index = _ref4.index;

      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, null);
      return this;
    }

    // PRIVATE METHODS

    // See https://github.com/KhronosGroup/WebGL/issues/2346
    // If it was true that having a buffer on an unused TF was a problem
    // it would make the entire concept of transform feedback objects pointless.
    // The whole point of them is like VertexArrayObjects.
    // You set them up with all in outputs at init time and
    // then in one call you can setup all the outputs just before drawing.
    // Since the point of transform feedback is to generate data that will
    // then be used as inputs to attributes it makes zero sense you'd
    // have to unbind them from every unused transform feedback object
    // before you could use them in an attribute. If that was the case
    // there would be no reason to setup transform feedback objects ever.
    // You'd always use the default because you'd always have to bind and
    // unbind all the buffers.

  }, {
    key: '_bindBuffers',
    value: function _bindBuffers() {
      for (var bufferIndex in this.buffers) {
        this.bindBuffer({ buffer: this.buffers[bufferIndex], index: Number(bufferIndex) });
      }
    }
  }, {
    key: '_unbindBuffers',
    value: function _unbindBuffers() {
      for (var bufferIndex in this.buffers) {
        this.unbindBuffer({ buffer: this.buffers[bufferIndex], index: Number(bufferIndex) });
      }
    }

    // RESOURCE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createTransformFeedback();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteTransformFeedback(this.handle);
    }
  }]);

  return TranformFeedback;
}(__WEBPACK_IMPORTED_MODULE_1__resource__["a" /* default */]);

// Counts the number of complete "primitives" given a number of vertices and a drawMode


/* unused harmony default export */ var _unused_webpack_default_export = (TranformFeedback);
function getPrimitiveCount(_ref5) {
  var drawMode = _ref5.drawMode,
      vertexCount = _ref5.vertexCount,
      countVertices = _ref5.countVertices;

  switch (drawMode) {
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].POINTS:
      return vertexCount;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES:
      return vertexCount / 2;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_STRIP:
      return vertexCount - 1;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_LOOP:
      return vertexCount;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES:
      return vertexCount / 3;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_STRIP:
      return vertexCount - 2;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_FAN:
      return vertexCount - 2;
    default:
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(false);return 0;
  }
}

// Counts the number of vertices after splitting the vertex stream into separate "primitives"
function getVertexCount(_ref6) {
  var drawMode = _ref6.drawMode,
      vertexCount = _ref6.vertexCount;

  var primitiveCount = getPrimitiveCount({ drawMode: drawMode, vertexCount: vertexCount });
  switch (drawMode) {
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].POINTS:
      return primitiveCount;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES:
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_STRIP:
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_LOOP:
      return vertexCount * 2;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES:
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_STRIP:
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_FAN:
      return vertexCount * 3;
    default:
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(false);return 0;
  }
}

// Counts the number of complete primitives given a number of vertices and a drawMode
function getTransformFeedbackMode(_ref7) {
  var drawMode = _ref7.drawMode;

  switch (drawMode) {
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].POINTS:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].POINTS;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_STRIP:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_LOOP:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_STRIP:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_FAN:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES;
    default:
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(false);return 0;
  }
}
//# sourceMappingURL=transform-feedback.js.map

/***/ }),
/* 90 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__myriahedral_js__ = __webpack_require__(29);


const TETRAHEDRON = {
  name: 'TETRAHEDRON',
  v: [[-1, -1, -1], [1, 1, -1], [-1, 1, 1], [1, -1, 1]],
  f: [[2, 3, 4], [1, 4, 3], [1, 3, 2], [1, 2, 4]]
};
/* harmony export (immutable) */ __webpack_exports__["TETRAHEDRON"] = TETRAHEDRON;


const ROT_TETRAHEDRON = {
  "name": "ROT_TETRAHEDRON",
  "v": [
    [
      -0.08671178767679688,
      1.726285173734457,
      -0.1114475877822868
    ],
    [
      0.645542784074652,
      -0.641979322665092,
      -1.4734778801188764
    ],
    [
      1.0281795343970843,
      -0.4422968819433293,
      1.3218246151703346
    ],
    [
      -1.5870105307949396,
      -0.6420089691260358,
      0.2631008527308284
    ]
  ],
  "f": [
    [
      2,
      3,
      4
    ],
    [
      1,
      4,
      3
    ],
    [
      1,
      3,
      2
    ],
    [
      1,
      2,
      4
    ]
  ],
  "w": {
    "2-3": 766,
    "0-2": 3060,
    "0-3": 831,
    "1-2": 0,
    "0-1": 0,
    "1-3": 0
  }
};
/* harmony export (immutable) */ __webpack_exports__["ROT_TETRAHEDRON"] = ROT_TETRAHEDRON;


const CUBE = {
  name: 'CUBE',
  v: [[-1.0, -1.0, -1.0],
      [-1.0, -1.0, 1.0],
      [-1.0, 1.0, -1.0],
      [-1.0, 1.0, 1.0],
      [1.0, -1.0, -1.0],
      [1.0, -1.0, 1.0],
      [1.0, 1.0, -1.0],
      [1.0, 1.0, 1.0]],

  f: [[1, 2, 4, 3],
      [5, 7, 8, 6],
      [1, 5, 6, 2],
      [4, 8, 7, 3],
      [1, 3, 7, 5],
      [2, 6, 8, 4]]
};
/* harmony export (immutable) */ __webpack_exports__["CUBE"] = CUBE;


const ROT_CUBE = {
  "name": "CUBE",
  "v": [
    [
      -1.1507094868266083,
      0.24712546697255144,
      -1.2707465052089821
    ],
    [
      -0.559669073503929,
      -1.533696429258986,
      -0.5783993352706147
    ],
    [
      -1.3414584983401976,
      0.913224906595052,
      0.6054001711308978
    ],
    [
      -0.7504180850175184,
      -0.8675969896364857,
      1.2977473410692653
    ],
    [
      0.7504180850175184,
      0.8675969896364857,
      -1.2977473410692653
    ],
    [
      1.3414584983401976,
      -0.913224906595052,
      -0.6054001711308978
    ],
    [
      0.559669073503929,
      1.533696429258986,
      0.5783993352706147
    ],
    [
      1.1507094868266083,
      -0.24712546697255144,
      1.2707465052089821
    ]
  ],
  "f": [
    [
      1,
      2,
      4,
      3
    ],
    [
      5,
      7,
      8,
      6
    ],
    [
      1,
      5,
      6,
      2
    ],
    [
      4,
      8,
      7,
      3
    ],
    [
      1,
      3,
      7,
      5
    ],
    [
      2,
      6,
      8,
      4
    ]
  ],
  "w": {
    "1-5": 2548,
    "0-1": 0,
    "0-4": 0,
    "4-5": 0,
    "2-3": 0,
    "0-2": 1,
    "1-3": 0,
    "2-6": 3570,
    "4-6": 0,
    "5-7": 0,
    "3-7": 2810,
    "6-7": 4590
  }
};
/* harmony export (immutable) */ __webpack_exports__["ROT_CUBE"] = ROT_CUBE;



const OCTAHEDRON = {
  name: 'OCTAHEDRON',
  v: [[1, 0, 0],
      [-1, 0, 0],
      [0, 1, 0],
      [0, -1, 0],
      [0, 0, 1],
      [0, 0, -1]],

  f: [[5, 2, 4],
      [5, 4, 1],
      [5, 1, 3],
      [5, 3, 2],
      [6, 1, 4],
      [6, 4, 2],
      [6, 2, 3],
      [6, 3, 1]]
};
/* harmony export (immutable) */ __webpack_exports__["OCTAHEDRON"] = OCTAHEDRON;


const ROT_OCTAHEDRON = {
  "name": "OCTAHEDRON",
  "v": [
    [
      -0.4515601194247348,
      -0.7896097425411768,
      -0.4154634918126693
    ],
    [
      0.4515601194247348,
      0.7896097425411768,
      0.4154634918126693
    ],
    [
      0.8027744472880923,
      -0.1563197846694946,
      -0.575427937888126
    ],
    [
      -0.8027744472880923,
      0.1563197846694946,
      0.575427937888126
    ],
    [
      0.3894183423086505,
      -0.5933637833613874,
      0.7044663052755917
    ],
    [
      -0.3894183423086505,
      0.5933637833613874,
      -0.7044663052755917
    ]
  ],
  "f": [
    [
      5,
      2,
      4
    ],
    [
      5,
      4,
      1
    ],
    [
      5,
      1,
      3
    ],
    [
      5,
      3,
      2
    ],
    [
      6,
      1,
      4
    ],
    [
      6,
      4,
      2
    ],
    [
      6,
      2,
      3
    ],
    [
      6,
      3,
      1
    ]
  ],
  "w": {
    "2-4": 0,
    "0-4": 514,
    "0-2": 507,
    "3-4": 2808,
    "0-3": 0,
    "3-5": 1785,
    "0-5": 0,
    "2-5": 0,
    "1-5": 0,
    "1-2": 3819,
    "1-4": 3066,
    "1-3": 4333
  }
};
/* harmony export (immutable) */ __webpack_exports__["ROT_OCTAHEDRON"] = ROT_OCTAHEDRON;


const DODECAHEDRON = {
  name: 'DODECAHEDRON',
  v: [[0.57735, 0.187592, -0.794654],
      [0, 0.607062, -0.794654],
      [-0.57735, 0.187592, -0.794654],
      [-0.356822, -0.491123, -0.794654],
      [0.356822, -0.491123, -0.794654],
      [0.934172, 0.303531, -0.187592],
      [0, 0.982247, -0.187592],
      [-0.934172, 0.303531, -0.187592],
      [-0.57735, -0.794654, -0.187592],
      [0.57735, -0.794654, -0.187592],
      [0.57735, -0.187592, 0.794654],
      [0, -0.607062, 0.794654],
      [-0.57735, -0.187592, 0.794654],
      [-0.356822, 0.491123, 0.794654],
      [0.356822, 0.491123, 0.794654],
      [0.934172, -0.303531, 0.187592],
      [0, -0.982247, 0.187592],
      [-0.934172, -0.303531, 0.187592],
      [-0.57735, 0.794654, 0.187592],
      [0.57735, 0.794654, 0.187592]],

  f: [[5, 4, 3, 2, 1],
      [6, 16, 10, 5, 1],
      [7, 20, 6, 1, 2],
      [8, 19, 7, 2, 3],
      [9, 18, 8, 3, 4],
      [10, 17, 9, 4, 5],
      [15, 14, 13, 12, 11],
      [16, 6, 20, 15, 11],
      [17, 10, 16, 11, 12],
      [18, 9, 17, 12, 13],
      [19, 8, 18, 13, 14],
      [20, 7, 19, 14, 15]]
};
/* harmony export (immutable) */ __webpack_exports__["DODECAHEDRON"] = DODECAHEDRON;


const ROT_DODECAHEDRON = {
  "name": "DODECAHEDRON",
  "v": [
    [
      -0.5647370281148928,
      -0.48288828055124994,
      0.669245663611066
    ],
    [
      -0.28640299686113146,
      0.11042813574946209,
      0.9517238054098789
    ],
    [
      0.4241676425688507,
      0.06543423250746477,
      0.9032158838803394
    ],
    [
      0.5849895987250783,
      -0.5556886023274521,
      0.5907588908817494
    ],
    [
      -0.026187230585937176,
      -0.8945706249387566,
      0.44615731135992953
    ],
    [
      -0.9502010914105499,
      -0.29562727539544204,
      0.09859793067537996
    ],
    [
      -0.49984673347330827,
      0.6643783429041414,
      0.5556568977246754
    ],
    [
      0.6498804085842089,
      0.5915772602745772,
      0.47716973046647315
    ],
    [
      0.9100961748594032,
      -0.4134215004136415,
      -0.028396763583476176
    ],
    [
      -0.07880849582434032,
      -0.9617440134723562,
      -0.2623669838527496
    ],
    [
      -0.4241676425688507,
      -0.06543423250746477,
      -0.9032158838803394
    ],
    [
      0.28640299686113146,
      -0.11042813574946209,
      -0.9517238054098789
    ],
    [
      0.5647370281148928,
      0.48288828055124994,
      -0.669245663611066
    ],
    [
      0.026187230585937176,
      0.8945706249387566,
      -0.44615731135992953
    ],
    [
      -0.5849895987250783,
      0.5556886023274521,
      -0.5907588908817494
    ],
    [
      -0.6498804085842089,
      -0.5915772602745772,
      -0.47716973046647315
    ],
    [
      0.49984673347330827,
      -0.6643783429041414,
      -0.5556568977246754
    ],
    [
      0.9502010914105499,
      0.29562727539544204,
      -0.09859793067537996
    ],
    [
      0.07880849582434032,
      0.9617440134723562,
      0.2623669838527496
    ],
    [
      -0.9100961748594032,
      0.4134215004136415,
      0.028396763583476176
    ]
  ],
  "f": [
    [
      5,
      4,
      3,
      2,
      1
    ],
    [
      6,
      16,
      10,
      5,
      1
    ],
    [
      7,
      20,
      6,
      1,
      2
    ],
    [
      8,
      19,
      7,
      2,
      3
    ],
    [
      9,
      18,
      8,
      3,
      4
    ],
    [
      10,
      17,
      9,
      4,
      5
    ],
    [
      15,
      14,
      13,
      12,
      11
    ],
    [
      16,
      6,
      20,
      15,
      11
    ],
    [
      17,
      10,
      16,
      11,
      12
    ],
    [
      18,
      9,
      17,
      12,
      13
    ],
    [
      19,
      8,
      18,
      13,
      14
    ],
    [
      20,
      7,
      19,
      14,
      15
    ]
  ],
  "w": {
    "4-9": 765,
    "0-4": 3825,
    "0-5": 0,
    "5-15": 0,
    "9-15": 0,
    "1-2": 1,
    "0-1": 889,
    "3-4": 298,
    "2-3": 0,
    "6-19": 0,
    "5-19": 0,
    "1-6": 5487,
    "7-18": 2573,
    "6-18": 4082,
    "2-7": 5583,
    "8-17": 1019,
    "7-17": 6126,
    "3-8": 0,
    "9-16": 2471,
    "8-16": 0,
    "10-14": 2,
    "10-15": 0,
    "14-19": 2735,
    "13-18": 0,
    "13-14": 257,
    "12-17": 4335,
    "12-13": 0,
    "11-16": 0,
    "11-12": 0,
    "10-11": 3475
  }
};
/* harmony export (immutable) */ __webpack_exports__["ROT_DODECAHEDRON"] = ROT_DODECAHEDRON;


const ICOSAHEDRON = {
  name: 'ICOSAHEDRON',
  v: [[0, 1, 0.618034],
      [0, -1, 0.618034],
      [0, 1, -0.618034],
      [0, -1, -0.618034],
      [0.618034, 0, 1],
      [0.618034, 0, -1],
      [-0.618034, 0, 1],
      [-0.618034, 0, -1],
      [1, 0.618034, 0],
      [-1, 0.618034, 0],
      [1, -0.618034, 0],
      [-1, -0.618034, 0]],
  f: [[7, 5, 1],
      [5, 7, 2],
      [8, 6, 4],
      [6, 8, 3],
      [11, 9, 5],
      [9, 11, 6],
      [10, 12, 7],
      [12, 10, 8],
      [2, 4, 11],
      [4, 2, 12],
      [3, 1, 9],
      [1, 3, 10],
      [1, 5, 9],
      [1, 10, 7],
      [3, 9, 6],
      [3, 8, 10],
      [2, 11, 5],
      [2, 7, 12],
      [4, 6, 11],
      [4, 12, 8]]
};
/* harmony export (immutable) */ __webpack_exports__["ICOSAHEDRON"] = ICOSAHEDRON;


const ROT_ICOSAHEDRON = {
  "name": "ICOSAHEDRON",
  "v": [
    [
      -0.464358512460375,
      0.8050743152558342,
      0.7198559189010936
    ],
    [
      1.1622950052648295,
      -0.16107443410776418,
      0.0713538546211307
    ],
    [
      -1.1622950052648295,
      0.16107443410776418,
      -0.0713538546211307
    ],
    [
      0.464358512460375,
      -0.8050743152558342,
      -0.7198559189010936
    ],
    [
      0.65134024360808,
      0.9559161931599437,
      0.20963335580762954
    ],
    [
      -0.4779447031819907,
      -0.08609748432069642,
      -1.0705709266788102
    ],
    [
      0.4779447031819907,
      0.08609748432069642,
      1.0705709266788102
    ],
    [
      -0.65134024360808,
      -0.9559161931599437,
      -0.20963335580762954
    ],
    [
      -0.36238365368687814,
      1.0022544927488628,
      -0.4961149508544048
    ],
    [
      -0.642943526486901,
      -0.4051417165846808,
      0.8969112756496073
    ],
    [
      0.642943526486901,
      0.4051417165846808,
      -0.8969112756496073
    ],
    [
      0.36238365368687814,
      -1.0022544927488628,
      0.4961149508544048
    ]
  ],
  "f": [
    [
      7,
      5,
      1
    ],
    [
      5,
      7,
      2
    ],
    [
      8,
      6,
      4
    ],
    [
      6,
      8,
      3
    ],
    [
      11,
      9,
      5
    ],
    [
      9,
      11,
      6
    ],
    [
      10,
      12,
      7
    ],
    [
      12,
      10,
      8
    ],
    [
      2,
      4,
      11
    ],
    [
      4,
      2,
      12
    ],
    [
      3,
      1,
      9
    ],
    [
      1,
      3,
      10
    ],
    [
      1,
      5,
      9
    ],
    [
      1,
      10,
      7
    ],
    [
      3,
      9,
      6
    ],
    [
      3,
      8,
      10
    ],
    [
      2,
      11,
      5
    ],
    [
      2,
      7,
      12
    ],
    [
      4,
      6,
      11
    ],
    [
      4,
      12,
      8
    ]
  ],
  "w": {
    "4-6": 4436,
    "0-4": 4205,
    "0-6": 5163,
    "4-8": 0,
    "0-8": 2552,
    "2-8": 3825,
    "0-2": 15,
    "2-9": 0,
    "0-9": 2044,
    "6-9": 1529,
    "5-8": 0,
    "2-5": 1,
    "5-7": 0,
    "2-7": 0,
    "7-9": 0,
    "4-10": 1024,
    "8-10": 0,
    "1-6": 4641,
    "1-4": 4335,
    "1-10": 0,
    "3-5": 1020,
    "3-7": 1275,
    "5-10": 2805,
    "3-10": 255,
    "9-11": 3479,
    "6-11": 0,
    "1-11": 0,
    "7-11": 766,
    "3-11": 4986,
    "1-3": 510
  }
};
/* harmony export (immutable) */ __webpack_exports__["ROT_ICOSAHEDRON"] = ROT_ICOSAHEDRON;


const GRATICULE = (degrees) => {
  const vertices = [];
  const faces = [];

  const pointsPerDisk = Math.round(360 / degrees);
  const levels = Math.round(180 / degrees) - 1;
  let levelBefore = [];
  let levelAfter = [];

  const northPole = vertices.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__myriahedral_js__["b" /* toCartesian */])(1, 0, 0));
  // first level connected to north pole
  for (let ppd = 0; ppd < pointsPerDisk; ppd++) {
    levelBefore.push(vertices.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__myriahedral_js__["b" /* toCartesian */])(1, ppd / pointsPerDisk * Math.PI * 2, degrees / 180 * Math.PI)));
    if (ppd !== 0) {
      faces.push([northPole, levelBefore[ppd - 1], levelBefore[ppd]]);
    }
  }
  // Connect last item
  faces.push([northPole, levelBefore[pointsPerDisk -1], levelBefore[0]]);

  // for each new level add the vertices
  // and connect them with the previous level
  for (let l = 1; l < levels; l++) {
    for (let ppd = 0; ppd < pointsPerDisk; ppd++) {
      levelAfter.push(vertices.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__myriahedral_js__["b" /* toCartesian */])(1, ppd / pointsPerDisk * Math.PI * 2, degrees / 180 * Math.PI * (l + 1))));
      if (ppd !== 0) {
        faces.push([levelBefore[ppd - 1], levelAfter[ppd - 1], levelAfter[ppd], levelBefore[ppd]]);
      }
    }
    // Connect last item
    faces.push([levelBefore[pointsPerDisk - 1], levelAfter[pointsPerDisk - 1], levelAfter[0], levelBefore[0]]);
    levelBefore = levelAfter;
    levelAfter = [];
  }

  // create south pole
  const southPole = vertices.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__myriahedral_js__["b" /* toCartesian */])(1, 0, Math.PI));
  // connect south pole to last row
  for (let ppd = 1; ppd < pointsPerDisk; ppd++) {
    faces.push([southPole, levelBefore[ppd], levelBefore[ppd - 1]]);
  }
  // Connect last item
  faces.push([southPole, levelBefore[0], levelBefore[pointsPerDisk -1]]);

  return {
    name: 'GRATICULE',
    v: vertices,
    f: faces
  };
};
/* harmony export (immutable) */ __webpack_exports__["GRATICULE"] = GRATICULE;


const IMG_COASTLINE_50 = {
  "name": "IMG_COASTLINE_50",
  "v": [
    [
      0.9047379038132853,
      -0.2722445166187478,
      0.32761600781183886
    ],
    [
      0.8898259440302001,
      -0.3214327435557585,
      0.3238684620351001
    ],
    [
      0.8851443917693677,
      -0.3252451961134804,
      0.33276864053624405
    ],
    [
      0.8758602412571288,
      -0.3185084560855918,
      0.3625206217403043
    ],
    [
      0.8843870561129088,
      -0.2878944151421743,
      0.36739126379091847
    ],
    [
      0.8951775829782908,
      -0.26947740926148545,
      0.35501974709988043
    ],
    [
      0.9076555233130447,
      -0.26928540634272136,
      0.3219422633488161
    ],
    [
      0.914993586004996,
      -0.2712367405925378,
      0.29869276543373807
    ],
    [
      0.9011913960841786,
      -0.3214250413375112,
      0.2907576489536057
    ],
    [
      0.8959255029018753,
      -0.32610179508361725,
      0.30162080911844324
    ],
    [
      0.911793338629166,
      -0.3183281277435099,
      0.2594226488161562
    ],
    [
      0.9054095142791365,
      -0.32460876004170963,
      0.2736106071719479
    ],
    [
      0.920774167952024,
      -0.26488384680089483,
      0.2863764643545588
    ],
    [
      0.9257968492571741,
      -0.2657299340049251,
      0.26886389880240036
    ],
    [
      0.9336268022168157,
      -0.2594147174089365,
      0.24707286086101052
    ],
    [
      0.924027211958067,
      -0.3096318125612992,
      0.22428074418238875
    ],
    [
      0.9144475118442923,
      -0.3205326762226459,
      0.24707195623002504
    ],
    [
      0.931391692456343,
      -0.259243758832785,
      0.25554292932804384
    ],
    [
      0.9442879250326452,
      -0.2491882555893949,
      0.21500122770313623
    ],
    [
      0.9327920444594755,
      -0.3018041818890285,
      0.19701075500440593
    ],
    [
      0.9255287289401378,
      -0.3108311442282402,
      0.21628816815585614
    ],
    [
      0.9418151373848934,
      -0.24897178944720902,
      0.22582580687806442
    ],
    [
      0.9521438547206038,
      -0.23788975339335794,
      0.1919128582149643
    ],
    [
      0.9427850630205757,
      -0.28970925858522445,
      0.1649996073791951
    ],
    [
      0.9336925968381957,
      -0.3025265539880846,
      0.19156152730034567
    ],
    [
      0.9570193089993612,
      -0.2255919080258595,
      0.18226994605704339
    ],
    [
      0.9546688313956141,
      -0.266113134943762,
      0.13338373878451457
    ],
    [
      0.9504447579381746,
      -0.2778341567056876,
      0.13950965369996526
    ],
    [
      0.9429100127273947,
      -0.28982027062679844,
      0.16408814287520423
    ],
    [
      0.9590942827390734,
      -0.2182495134402609,
      0.18029228131096378
    ],
    [
      0.9660374908188405,
      -0.2064124135199938,
      0.1554525068221476
    ],
    [
      0.9623883941730996,
      -0.24898982504832184,
      0.10868599626138067
    ],
    [
      0.9614289540376386,
      -0.2526420039340929,
      0.10874918016361254
    ],
    [
      0.9717154639143942,
      -0.18865289426352952,
      0.14205330927376247
    ],
    [
      0.9763038826024916,
      -0.1790281687130138,
      0.12157155762169534
    ],
    [
      0.9751868595602496,
      -0.20387341288730854,
      0.08629148543569627
    ],
    [
      0.9743132137221155,
      -0.20794037295631562,
      0.08645555425345104
    ],
    [
      0.9840693789817571,
      -0.13537804306480672,
      0.11523993581394673
    ],
    [
      0.9849396522663437,
      -0.16476539313089375,
      0.05240464311371587
    ],
    [
      0.9787481246843173,
      -0.19328863711087735,
      0.0684953370000597
    ],
    [
      0.9855293446927382,
      -0.12109195817031164,
      0.11861133342131126
    ],
    [
      0.9887348675482356,
      -0.11120184681794126,
      0.10018737923836665
    ],
    [
      0.9902249823497368,
      -0.13355641871791832,
      0.040214019317990866
    ],
    [
      0.9867509868237829,
      -0.1571378187993818,
      0.04037568457950046
    ],
    [
      0.9938458721833155,
      -0.08009681238812175,
      0.07651720714615089
    ],
    [
      0.9932533324229015,
      -0.11244027577721322,
      0.02837255740932406
    ],
    [
      0.9947313878320813,
      -0.06979206087302042,
      0.07509017446216307
    ],
    [
      0.9964032368083283,
      -0.055144811107119274,
      0.0643400301977428
    ],
    [
      0.9965672413629796,
      -0.08208910462653525,
      0.010729042072561966
    ],
    [
      0.9933652245827265,
      -0.11172453211535646,
      0.027260952171812094
    ],
    [
      0.9982172359644484,
      -0.029412489547431243,
      0.05193510645140865
    ],
    [
      0.9985755522641161,
      -0.05268544427234159,
      -0.008432697210355772
    ],
    [
      0.9968089661781349,
      -0.07953525297608942,
      0.006784429298599135
    ],
    [
      0.997067712204942,
      -0.04396445263300857,
      0.06263468833707797
    ],
    [
      0.998662380470386,
      -0.014030063959536045,
      0.0497655215838563
    ],
    [
      0.9993819801202726,
      0.0062287087298817856,
      0.034595678898403225
    ],
    [
      0.9993004379647638,
      -0.03296780774103334,
      -0.017656679647701158
    ],
    [
      0.9987753384833248,
      -0.04657030180014995,
      -0.016704197908397604
    ],
    [
      0.9992153634704253,
      0.03441972991493331,
      0.019594376674165553
    ],
    [
      0.9994400380981044,
      -0.005084550128317498,
      -0.0330720062356703
    ],
    [
      0.9991384774297838,
      0.02793693808875151,
      0.030689255603857823
    ],
    [
      0.9982731511408505,
      0.058716343306582715,
      0.0017625946840899537
    ],
    [
      0.9981385871069997,
      0.060950363296773113,
      -0.0021009859670391576
    ],
    [
      0.9986106526441915,
      0.020118997132287625,
      -0.04870308388524102
    ],
    [
      0.9993467804325648,
      -0.003187991310794706,
      -0.03599790480666354
    ],
    [
      0.996284750546405,
      0.0839755956594266,
      -0.019099611575424686
    ],
    [
      0.9957698901977745,
      0.0881059317963687,
      -0.026070492089823673
    ],
    [
      0.9968580172294546,
      0.04098620239403965,
      -0.06778071037305165
    ],
    [
      0.9978442167113073,
      0.02660978028990486,
      -0.05999032229218869
    ],
    [
      0.9946960681714676,
      0.09739760848545514,
      -0.03306717141724152
    ],
    [
      0.9930927169848783,
      0.10664473029404327,
      -0.048926035728465725
    ],
    [
      0.9937503701735776,
      0.0628025392794717,
      -0.09228240807395469
    ],
    [
      0.9950161592059286,
      0.050845921124830294,
      -0.08577607605882696
    ],
    [
      0.9916998726037527,
      0.11588747837680977,
      -0.055690708678961816
    ],
    [
      0.988377616673194,
      0.12941594669134326,
      -0.07975712884376042
    ],
    [
      0.9904825491591135,
      0.07685943225782724,
      -0.11417945298637953
    ],
    [
      0.9908674563908616,
      0.07420223266787616,
      -0.11258646691590599
    ],
    [
      0.9838416586613682,
      0.14690239059925791,
      -0.10234880711894463
    ],
    [
      0.9821686515477569,
      0.14824936047035453,
      -0.11561516785003446
    ],
    [
      0.9868735774612375,
      0.08860374999850497,
      -0.135018212086597
    ],
    [
      0.9868348333293103,
      0.1372928704090216,
      -0.08548496629679302
    ],
    [
      0.9794845013792903,
      0.15538242692082302,
      -0.12832152181905412
    ],
    [
      0.9762009454950499,
      0.15736856702267654,
      -0.1492208032675072
    ],
    [
      0.9819208122422532,
      0.09675032478601021,
      -0.16269878038668684
    ],
    [
      0.9851238471560847,
      0.08815250028558608,
      -0.1475131941820628
    ],
    [
      0.9793233650732376,
      0.09588917300202844,
      -0.17813201038167573
    ],
    [
      0.9734619198628266,
      0.16342538477376767,
      -0.16019998186181442
    ],
    [
      0.9702527775796873,
      0.1650820678748685,
      -0.17708037289620523
    ],
    [
      0.9752429803172513,
      0.10544909966177918,
      -0.19437493851431975
    ],
    [
      0.9720598751667258,
      0.10440021353204593,
      -0.210238422999491
    ],
    [
      0.967585231785687,
      0.17025560885736246,
      -0.18652572713394547
    ],
    [
      0.9624752073365082,
      0.17234071762093425,
      -0.20961906476379225
    ],
    [
      0.9682316005388739,
      0.11213663866984293,
      -0.22350154806121506
    ],
    [
      0.9640189360069399,
      0.11082607788221518,
      -0.24163003017276796
    ],
    [
      0.9601424003887957,
      0.17633264486327163,
      -0.2168717808548747
    ],
    [
      0.9534032744844565,
      0.17856897448880885,
      -0.24317754327308078
    ],
    [
      0.9605001205515509,
      0.1171377638495145,
      -0.25242476641722666
    ],
    [
      0.945568463863786,
      0.18346396625892059,
      -0.26877733020257805
    ],
    [
      0.9503018768643117,
      0.12182230515002512,
      -0.28650596642321574
    ],
    [
      0.9545001996767472,
      0.11519118696443281,
      -0.2750642820556223
    ],
    [
      0.9512600652488796,
      0.18178700549939045,
      -0.24911397571044036
    ],
    [
      0.9415550839730302,
      0.1889978166294039,
      -0.2788437719474081
    ],
    [
      0.9345853696824069,
      0.19067357420944658,
      -0.3003227844732951
    ],
    [
      0.9401048270158139,
      0.12778845913200165,
      -0.31602693545683
    ],
    [
      0.9451206198521204,
      0.12070438107609466,
      -0.30360742138389957
    ],
    [
      0.931813386742988,
      0.19417549556505834,
      -0.30662630221268833
    ],
    [
      0.922684968542807,
      0.1959494709776335,
      -0.3320485712192491
    ],
    [
      0.9287402452155842,
      0.13460918546407113,
      -0.3454300567489688
    ],
    [
      0.9346941449828216,
      0.12677343478125144,
      -0.3320773276943124
    ],
    [
      0.916293342938775,
      0.20336426107220945,
      -0.3450354865874503
    ],
    [
      0.9119718107158226,
      0.2042882952093655,
      -0.3557719900444035
    ],
    [
      0.9143655609281942,
      0.14125845519427185,
      -0.37944916632481457
    ],
    [
      0.9213067708987916,
      0.13299933422299365,
      -0.36538337536385207
    ],
    [
      0.8955101645588318,
      0.21556909792696893,
      -0.389347542936599
    ],
    [
      0.9020595217480835,
      0.14646119964345292,
      -0.4060021381995661
    ],
    [
      0.9076867931386831,
      0.14045886153212025,
      -0.3954440463311016
    ],
    [
      0.9028411538142761,
      0.21413447844387687,
      -0.372859593038553
    ],
    [
      0.8878706822687013,
      0.22302225762402703,
      -0.402426048078393
    ],
    [
      0.8840269532061372,
      0.22384596876035137,
      -0.4103526876661268
    ],
    [
      0.8840941875254114,
      0.15587988887757168,
      -0.44054390000010046
    ],
    [
      0.8942399059270782,
      0.14564409882463808,
      -0.4232290008081785
    ],
    [
      0.8693789589419476,
      0.23725977851973154,
      -0.4334605209771511
    ],
    [
      0.8661893411566006,
      0.16540753781274914,
      -0.4715467863334645
    ],
    [
      0.8769298242519834,
      0.15560188135878741,
      -0.4547330402059999
    ],
    [
      0.8687246616930205,
      0.23828506861249235,
      -0.4342092677991648
    ],
    [
      0.8498462855315769,
      0.2545388904671848,
      -0.4614880759108689
    ],
    [
      0.8503426112654122,
      0.17826330244189667,
      -0.4951157828920717
    ],
    [
      0.8649069211193543,
      0.16548705151331514,
      -0.4738671265041164
    ],
    [
      0.8374806095220986,
      0.26506452129583713,
      -0.4778776289226175
    ],
    [
      0.8285429225274776,
      0.20164964244124844,
      -0.5223543311134146
    ],
    [
      0.8356365212607945,
      0.18891086802187326,
      -0.5157754242675587
    ],
    [
      0.8483399150701368,
      0.17832554112358825,
      -0.49851719115971554
    ],
    [
      0.8494815703992147,
      0.25506372644760983,
      -0.46186963204214126
    ],
    [
      0.8117185899419728,
      0.2923243309306185,
      -0.5056277447773033
    ],
    [
      0.798136581441214,
      0.22753225992557946,
      -0.557859362257631
    ],
    [
      0.8040156689199033,
      0.21904020710798847,
      -0.5527930822662037
    ],
    [
      0.8257356337724473,
      0.28101793293062116,
      -0.48907012226245805
    ],
    [
      0.7922743723674606,
      0.32700337358223874,
      -0.5151408667108264
    ],
    [
      0.7640982836012798,
      0.26090967442529506,
      -0.5899830122883748
    ],
    [
      0.7870403649013942,
      0.22930274163031342,
      -0.5727021186417088
    ],
    [
      0.7772912949385443,
      0.3610786062654259,
      -0.5152091642334969
    ],
    [
      0.7548375270572911,
      0.37770230180609937,
      -0.5362474046150784
    ],
    [
      0.7145855529397083,
      0.35724618744838205,
      -0.6014504543879294
    ],
    [
      0.7105434821769067,
      0.3221112639068264,
      -0.6255975492281463
    ],
    [
      0.7551789269837723,
      0.2669502208591161,
      -0.5987005660786595
    ],
    [
      0.6658836871997099,
      0.4622844943357267,
      -0.5855697750209451
    ],
    [
      0.6593373930202786,
      0.4447311596765994,
      -0.606208213222099
    ],
    [
      0.7136522503205601,
      0.3584670845606619,
      -0.6018320487469738
    ],
    [
      0.7378872628517799,
      0.42780587946655596,
      -0.5220196517516892
    ],
    [
      0.7324953620591258,
      0.4553111994905724,
      -0.5061049853343931
    ],
    [
      0.7293951534065729,
      0.4630286549831055,
      -0.5035743985267106
    ],
    [
      0.6638345059271102,
      0.48600683947906326,
      -0.5684374202320617
    ],
    [
      0.7255641182497311,
      0.4803015200098674,
      -0.49281554377342957
    ],
    [
      0.7236096776500378,
      0.4848637078803332,
      -0.49121911525483564
    ],
    [
      0.6606862430687405,
      0.5171058164447709,
      -0.5441463615781145
    ],
    [
      0.6605565603021509,
      0.5168668892483009,
      -0.5445306689623418
    ],
    [
      0.6628804767841672,
      0.48827641144813483,
      -0.567605161641195
    ],
    [
      0.6581787235988669,
      0.5455207707931897,
      -0.5188524418704903
    ],
    [
      0.6580180306670008,
      0.5452371412787866,
      -0.5193541480408705
    ],
    [
      0.717985847260856,
      0.5087518341232424,
      -0.47504514986403923
    ],
    [
      0.7184442408155515,
      0.5192899669691324,
      -0.46279131694983544
    ],
    [
      0.7135149379920758,
      0.5373169337950607,
      -0.4496520275938257
    ],
    [
      0.6553889587869811,
      0.5683102960398749,
      -0.49748238171334913
    ],
    [
      0.713538640580141,
      0.5386174788454486,
      -0.4480555990959348
    ],
    [
      0.7073160518552782,
      0.5597679703014894,
      -0.4316987632741286
    ],
    [
      0.6502502964686484,
      0.5955060186694497,
      -0.4717490155484121
    ],
    [
      0.6538093182710017,
      0.5713457632756809,
      -0.49608204374774295
    ],
    [
      0.7076030761347659,
      0.569382174465504,
      -0.4184517009710334
    ],
    [
      0.7036095190296724,
      0.5813881616971487,
      -0.408560216087229
    ],
    [
      0.6454739633857187,
      0.6202428914090202,
      -0.4457152883262028
    ],
    [
      0.6498891776141899,
      0.596169681515511,
      -0.4714082812824209
    ],
    [
      0.7037500228646046,
      0.5935055648801059,
      -0.3904959023785204
    ],
    [
      0.6962471913717835,
      0.6132373157632038,
      -0.37306814801379634
    ],
    [
      0.6418474793667046,
      0.6341021187982597,
      -0.4312149303609113
    ],
    [
      0.6445872983113332,
      0.6218162494575673,
      -0.44480531332957407
    ],
    [
      0.632571013503343,
      0.6648184885821167,
      -0.39732894447138295
    ],
    [
      0.6317087647541323,
      0.6631341096841883,
      -0.4014936974675536
    ],
    [
      0.6363076698015249,
      0.6434246923151037,
      -0.4255786821152673
    ],
    [
      0.695818919404363,
      0.6181480820298345,
      -0.36568973198844607
    ],
    [
      0.6941416187587075,
      0.6222608715757197,
      -0.3618823300644381
    ],
    [
      0.6926193549003736,
      0.6360382247939981,
      -0.3401967163543615
    ],
    [
      0.6886165819797475,
      0.6448687567204032,
      -0.3315893388340629
    ],
    [
      0.6276987595947026,
      0.6827314085515337,
      -0.37399477400160375
    ],
    [
      0.6863187313663455,
      0.6588041768925667,
      -0.3081292837180491
    ],
    [
      0.6217514660092879,
      0.7039458492104439,
      -0.3433443692485552
    ],
    [
      0.6206501909755727,
      0.7011448145902879,
      -0.35098331785874953
    ],
    [
      0.6254033546907922,
      0.6862073988386551,
      -0.37147011955282483
    ],
    [
      0.6864642903560038,
      0.6590982819784043,
      -0.30717459653940143
    ],
    [
      0.683868384588014,
      0.6717564482566603,
      -0.28472321083216423
    ],
    [
      0.6197002979293931,
      0.7211575303285633,
      -0.3096826717732667
    ],
    [
      0.6175189281716095,
      0.7157611414238236,
      -0.326123230968681
    ],
    [
      0.684409387650541,
      0.6796749984167627,
      -0.26386679712117056
    ],
    [
      0.6452788059101169,
      0.7219864770900943,
      -0.2497014007614865
    ],
    [
      0.6180831654839887,
      0.7359971163212805,
      -0.27619095805629035
    ],
    [
      0.6160206202061056,
      0.7301827899778223,
      -0.2955531909844459
    ],
    [
      0.6855309417856006,
      0.6752033083928751,
      -0.27230097353822197
    ],
    [
      0.8974238125344641,
      -0.23637585433338884,
      0.37250094789713956
    ],
    [
      0.9088613183239073,
      -0.21559118440649905,
      0.3570595822278579
    ],
    [
      0.9194627166642446,
      -0.21326602021195085,
      0.3303118485421963
    ],
    [
      0.9208337962743132,
      -0.2113631735308891,
      0.3277052463937493
    ],
    [
      0.9290296845984237,
      -0.20918798584382386,
      0.3051953992339292
    ],
    [
      0.9327497001084146,
      -0.2035861778897804,
      0.29754103098546475
    ],
    [
      0.939863028020352,
      -0.20146461220452333,
      0.27580699517904905
    ],
    [
      0.9430479449688496,
      -0.19619292401334187,
      0.2686427182283648
    ],
    [
      0.9495092505941792,
      -0.19411076410609257,
      0.24648163074401494
    ],
    [
      0.956123687368278,
      -0.18152313767381673,
      0.22994965740861642
    ],
    [
      0.9607228552302608,
      -0.17885742916086916,
      0.21218297639579833
    ],
    [
      0.9659531487850344,
      -0.1595991389782796,
      0.2036237441696548
    ],
    [
      0.9723333605900131,
      -0.14447583673984676,
      0.18356080322893764
    ],
    [
      0.9780181228475044,
      -0.1182793568608182,
      0.1717281139546898
    ],
    [
      0.9840584938819316,
      -0.10913241888453108,
      0.14042434179028881
    ],
    [
      0.9887054122902081,
      -0.04242704582391555,
      0.14374127274622672
    ],
    [
      0.9876601829699563,
      -0.010932777345847439,
      0.156230078266827
    ],
    [
      0.9890613497252247,
      -0.0005520799850484611,
      0.14750370058885523
    ],
    [
      0.989747343527409,
      0.009388231294993098,
      0.14252037431044198
    ],
    [
      0.9928896869744347,
      0.01770009523017865,
      0.11771480845098263
    ],
    [
      0.9959534642154859,
      0.05066361783637149,
      0.07422866659790496
    ],
    [
      0.9949104231923566,
      0.06761025271026114,
      0.07471347637247704
    ],
    [
      0.9936138647502388,
      0.09421693059712101,
      0.062085890224361805
    ],
    [
      0.993503029664568,
      0.0997742533641743,
      0.054743295598147036
    ],
    [
      0.9922142345894632,
      0.11528568069765556,
      0.04711819716546615
    ],
    [
      0.9916723009226253,
      0.12369634835656054,
      0.035850536761374716
    ],
    [
      0.9898870659860631,
      0.1389904111476569,
      0.028377142254088026
    ],
    [
      0.9880997947603062,
      0.15360196394811773,
      0.008076649424228562
    ],
    [
      0.9846768761814196,
      0.17342000533750293,
      -0.018356232247978523
    ],
    [
      0.9846521867699393,
      0.1735087800161967,
      -0.018835454506531728
    ],
    [
      0.9878680685053344,
      0.15512567797713467,
      0.007259701073335667
    ],
    [
      0.9812970465473334,
      0.1882317541104187,
      -0.04031021188229353
    ],
    [
      0.9813628514807555,
      0.18807807006719127,
      -0.03941564782368986
    ],
    [
      0.9766371914230083,
      0.2050757258459819,
      -0.06421637640136471
    ],
    [
      0.9754139350740471,
      0.20651747261375925,
      -0.0769297651665973
    ],
    [
      0.9720635099063405,
      0.21631280048462662,
      -0.0911114979300859
    ],
    [
      0.9697613229776184,
      0.21822589120845134,
      -0.10927230602021842
    ],
    [
      0.9671636173465844,
      0.22464374430145087,
      -0.11886852159968159
    ],
    [
      0.9641721227986487,
      0.2265712088066354,
      -0.1379768276119124
    ],
    [
      0.9609119719557214,
      0.23365137138629796,
      -0.14850999562813672
    ],
    [
      0.9566742997685964,
      0.2356874782274071,
      -0.17095524785472685
    ],
    [
      0.9546934665767027,
      0.23944932403108063,
      -0.17670428997853055
    ],
    [
      0.9491904498803837,
      0.24154661434437688,
      -0.20172437372475244
    ],
    [
      0.9469183388373321,
      0.2454235959337409,
      -0.20763650481670945
    ],
    [
      0.9410210707456254,
      0.247239286172269,
      -0.2309806913700443
    ],
    [
      0.9365295767362818,
      0.2542036462153752,
      -0.24143913963765126
    ],
    [
      0.9308592110835168,
      0.25579694068023623,
      -0.26090046814753787
    ],
    [
      0.9268158680725469,
      0.26141090820447754,
      -0.26958613421435773
    ],
    [
      0.9191024316903416,
      0.26329879300734454,
      -0.2931287527039554
    ],
    [
      0.9154820719540191,
      0.26776877900299206,
      -0.3003205902398683
    ],
    [
      0.9103007573968422,
      0.26898806673498005,
      -0.31463939841811506
    ],
    [
      0.901213110541346,
      0.27953724402691316,
      -0.3311704373736124
    ],
    [
      0.8966308770997355,
      0.280421201642232,
      -0.3426616697281526
    ],
    [
      0.8816993254077677,
      0.29623197888379416,
      -0.36722324853156896
    ],
    [
      0.8682459772087269,
      0.3184290538479654,
      -0.3804626929494565
    ],
    [
      0.8549871089989005,
      0.34643731293266716,
      -0.3859769833211502
    ],
    [
      0.8539118861981067,
      0.34736988430013205,
      -0.38751600494805954
    ],
    [
      0.8458523363993482,
      0.35684352100693845,
      -0.39648017166452926
    ],
    [
      0.8403671114693437,
      0.3648855445774245,
      -0.4008012691086542
    ],
    [
      0.8102901670391387,
      0.38599179942731493,
      -0.4409537118276116
    ],
    [
      0.7903903844722711,
      0.43641012598228446,
      -0.42991771546878843
    ],
    [
      0.7860798649674522,
      0.45547816309317785,
      -0.41787329280299385
    ],
    [
      0.7811213445377581,
      0.46647202681440564,
      -0.41503408692200855
    ],
    [
      0.7771856303691876,
      0.48134857622531096,
      -0.4053221485602711
    ],
    [
      0.7772105976174931,
      0.4861374243493077,
      -0.39951732327657624
    ],
    [
      0.7693501574720888,
      0.512541953387565,
      -0.38131493704722796
    ],
    [
      0.769229908077604,
      0.5152255397019478,
      -0.3779259077620339
    ],
    [
      0.764276812793916,
      0.5301773208834293,
      -0.36714161007224794
    ],
    [
      0.7634766087158948,
      0.541373414563239,
      -0.35216231193558434
    ],
    [
      0.7603804002044188,
      0.5498204771083719,
      -0.3457153307813963
    ],
    [
      0.7592740822465682,
      0.5606176565605269,
      -0.33047043919421115
    ],
    [
      0.7552961685731475,
      0.5704261209631591,
      -0.32270999095417996
    ],
    [
      0.7531173898633566,
      0.5864503047170591,
      -0.29814465814881475
    ],
    [
      0.7513637389587596,
      0.5903551445205009,
      -0.2948445948564964
    ],
    [
      0.7488212387648454,
      0.6039670576501227,
      -0.27292956169703503
    ],
    [
      0.7499055591096176,
      0.6059346540521302,
      -0.2654898254834205
    ],
    [
      0.7474872294221805,
      0.616289233480031,
      -0.2478919574075539
    ],
    [
      0.7487900909744211,
      0.6187072997477137,
      -0.23772815756113302
    ],
    [
      0.7455235434316211,
      0.6298628059571313,
      -0.2178703556268473
    ],
    [
      0.6936145172199463,
      0.6794831819388084,
      -0.23916836530789987
    ],
    [
      0.7470123303091749,
      0.6326094546880491,
      -0.20439632140854508
    ],
    [
      0.743156811401246,
      0.6432329990176207,
      -0.18430752193746894
    ],
    [
      0.6948063154926736,
      0.6875508264852817,
      -0.21099299739778396
    ],
    [
      0.7413213832221078,
      0.6510562933871684,
      -0.16299788225195494
    ],
    [
      0.6927679767000157,
      0.6999020150113335,
      -0.17380937788865522
    ],
    [
      0.6920733337485178,
      0.6924094169816372,
      -0.20396985068720844
    ],
    [
      0.7438774765469401,
      0.6449402564101182,
      -0.17520949046158235
    ],
    [
      0.7425900917970465,
      0.6541424833615017,
      -0.1437274052729731
    ],
    [
      0.7397385093426175,
      0.6598133401089313,
      -0.132035199889491
    ],
    [
      0.6925138934832874,
      0.7071441219348796,
      -0.1427294578759626
    ],
    [
      0.6925530925783964,
      0.7002462695089321,
      -0.17327831947166109
    ],
    [
      0.7407253402604135,
      0.6624767641278148,
      -0.11158184120561189
    ],
    [
      0.7379069918178972,
      0.6672396520028042,
      -0.10141261371958893
    ],
    [
      0.6915201663814485,
      0.713737308283689,
      -0.11126056916863233
    ],
    [
      0.692244520841438,
      0.7075364171948166,
      -0.14209061090772448
    ],
    [
      0.7385792981104969,
      0.6695829897751873,
      -0.07848082699823718
    ],
    [
      0.7359248660193158,
      0.6734507342562539,
      -0.06984769218925264
    ],
    [
      0.6899350037971753,
      0.7193777280477743,
      -0.08053182553633058
    ],
    [
      0.6913054353167566,
      0.714022027933569,
      -0.11076704711755787
    ],
    [
      0.7360942590250205,
      0.6751735194078683,
      -0.04802041774911
    ],
    [
      0.7316745474143995,
      0.6807551187463227,
      -0.03499749943372738
    ],
    [
      0.6877590854131086,
      0.7239737172781558,
      -0.05338068116999995
    ],
    [
      0.6894793312379381,
      0.7199265155480754,
      -0.0795239838444505
    ],
    [
      0.7313312181442767,
      0.6817808086778548,
      -0.01815429112299767
    ],
    [
      0.7253958695183977,
      0.6883297754293188,
      -0.0017183547570928295
    ],
    [
      0.6825224386203858,
      0.730411829441423,
      -0.025723145058787245
    ],
    [
      0.6843052926797205,
      0.727718494734293,
      -0.04639028812345001
    ],
    [
      0.7249762487470282,
      0.6887439568670308,
      0.006418771832107496
    ],
    [
      0.7175676158189982,
      0.6960148385234708,
      0.02569165784813516
    ],
    [
      0.6739350683459525,
      0.7387713025227068,
      0.005337248583253955
    ],
    [
      0.675998880912954,
      0.7367776157731044,
      -0.013574162962540754
    ],
    [
      0.7170509932663692,
      0.696212259371844,
      0.03356133126182073
    ],
    [
      0.7078726894590042,
      0.7041465661714404,
      0.05562255717822885
    ],
    [
      0.6659132671900968,
      0.7452386041560224,
      0.0343357460352086
    ],
    [
      0.6684119514953182,
      0.7436334593928098,
      0.015321265277476938
    ],
    [
      0.7072407178233779,
      0.7040702652824341,
      0.06399709835450221
    ],
    [
      0.6956561205996059,
      0.7127463945120651,
      0.08975042608454945
    ],
    [
      0.6569639254973928,
      0.7516834759939224,
      0.05805473721196764
    ],
    [
      0.6587414519313113,
      0.7509181476437028,
      0.046707976265066606
    ],
    [
      0.6951514743836201,
      0.7126532448599281,
      0.09428563121120001
    ],
    [
      0.6848017458630665,
      0.7194132931898427,
      0.11615111899866166
    ],
    [
      0.6448941091588916,
      0.7591234246295678,
      0.08856192269161887
    ],
    [
      0.6472545107408267,
      0.7586882249514024,
      0.0738496827734772
    ],
    [
      0.6832673228511011,
      0.7190480256018151,
      0.12694763645700785
    ],
    [
      0.6747082140381542,
      0.7238314635379196,
      0.14434970835439026
    ],
    [
      0.6320424169731053,
      0.7658941085229721,
      0.11801948007255966
    ],
    [
      0.6345169265507276,
      0.7658305520857295,
      0.10436395648252032
    ],
    [
      0.6220185941421609,
      0.7716727664135724,
      0.13271778372559495
    ],
    [
      0.6732708900061416,
      0.7234693466251554,
      0.15263817728245074
    ],
    [
      0.6620505484836223,
      0.7289097189230592,
      0.17429771344467396
    ],
    [
      0.6193654829681975,
      0.7714706441982604,
      0.14566895224409496
    ],
    [
      0.6065937498791458,
      0.7780068190642361,
      0.16355247505649445
    ],
    [
      0.6574651603600162,
      0.7274390459705662,
      0.196397549145122
    ],
    [
      0.6367684508160139,
      0.7401781159716266,
      0.21601457516118436
    ],
    [
      0.6006165588048582,
      0.7771886551263798,
      0.18771665784436767
    ],
    [
      0.6258936332035027,
      0.7363533043683766,
      0.2569843790215513
    ],
    [
      0.6213903183527075,
      0.7386013295491829,
      0.26142331236081473
    ],
    [
      0.6138363690612354,
      0.7440115314924249,
      0.26391618560447405
    ],
    [
      0.5712966095641112,
      0.7908585798190998,
      0.21946045344678383
    ],
    [
      0.5914983707252388,
      0.7828412222977809,
      0.1931043710036214
    ],
    [
      0.577338089205152,
      0.7627397680194973,
      0.29139110664964973
    ],
    [
      0.5467527034844921,
      0.7947524443298725,
      0.26349579401594253
    ],
    [
      0.5591984610091745,
      0.7975984097222911,
      0.2261279682247265
    ],
    [
      0.5738067997853951,
      0.7598093798623917,
      0.30567214919447827
    ],
    [
      0.5509185786367414,
      0.7625394165054428,
      0.33914946260964557
    ],
    [
      0.5056599573993312,
      0.7898101772268505,
      0.34714246561289125
    ],
    [
      0.4848772642661716,
      0.8041692777677786,
      0.34381072015311354
    ],
    [
      0.4949987681378369,
      0.8122480533771881,
      0.3085924809955559
    ],
    [
      0.5270910342968381,
      0.8044998731416451,
      0.2737791001500418
    ],
    [
      0.26893130204838644,
      0.8901545484208774,
      0.36783261778176135
    ],
    [
      0.3078911899907371,
      0.9034217546154608,
      0.298382553802346
    ],
    [
      0.3448457626616686,
      0.8893926970208105,
      0.30010336629291745
    ],
    [
      0.3601909664990254,
      0.8684192496257513,
      0.34074987091992426
    ],
    [
      0.30904762060082563,
      0.8714673028665784,
      0.38083370154887736
    ],
    [
      0.2817783045546661,
      0.882812207639365,
      0.3758238857832331
    ],
    [
      0.24157431609815966,
      0.9002551717379922,
      0.362191214085467
    ],
    [
      0.27809494395967693,
      0.9162232973923511,
      0.28844075901223043
    ],
    [
      0.29065274470102004,
      0.912148961579283,
      0.2889727563068865
    ],
    [
      0.20663185511278317,
      0.9077769770526317,
      0.36502635026232777
    ],
    [
      0.19638618960865836,
      0.9123174277920484,
      0.35931793091619124
    ],
    [
      0.2377158018494579,
      0.9343773349541487,
      0.26538687509945147
    ],
    [
      0.1561736697246127,
      0.9209563145752787,
      0.35700035228087346
    ],
    [
      0.20508955081822627,
      0.9578450810863177,
      0.2011742448324926
    ],
    [
      0.21933944325190954,
      0.951758291291126,
      0.21458416435640926
    ],
    [
      0.11467214262753102,
      0.9250342060293713,
      0.362162970747731
    ],
    [
      0.1046979168657899,
      0.9275005557525724,
      0.3588607881653183
    ],
    [
      0.04933642697214724,
      0.9525546676401639,
      0.3003423415546982
    ],
    [
      0.04877386261712519,
      0.9537040376488829,
      0.29676542739615736
    ],
    [
      0.1557502809736731,
      0.9720447395621805,
      0.17570109352566496
    ],
    [
      0.15781235595476392,
      0.9718533396328854,
      0.1749181138487787
    ],
    [
      0.19807430460820571,
      0.9612526760139136,
      0.19172861734771304
    ],
    [
      -0.07507757524055171,
      0.9713092423606767,
      0.2256583998009546
    ],
    [
      -0.005672313201646894,
      0.963122047571525,
      0.26900510468125993
    ],
    [
      -0.1513468035397555,
      0.9377260354846104,
      0.3126723963393853
    ],
    [
      -0.18862206403100965,
      0.9431156119782799,
      0.2737784860129011
    ],
    [
      -0.20069751543828196,
      0.9494117956754536,
      0.2415320879908325
    ],
    [
      -0.19734783695778876,
      0.9534164843600313,
      0.22814652878937247
    ],
    [
      -0.12161616572949951,
      0.9681825284038214,
      0.21870550959415389
    ],
    [
      -0.3464481758229625,
      0.8999585638442784,
      0.2646662895653423
    ],
    [
      -0.32701802749489667,
      0.9141792859514379,
      0.23944820490174096
    ],
    [
      -0.2942285973544041,
      0.9266678280405709,
      0.23391508923844742
    ],
    [
      -0.23352498200503502,
      0.9402037140937335,
      0.24795777621179202
    ],
    [
      -0.29579647064751363,
      0.9098683953060932,
      0.2909363352618396
    ],
    [
      -0.30402786028338613,
      0.9016468131519745,
      0.30757126735830553
    ],
    [
      -0.3216900041021153,
      0.8919286119304689,
      0.31777176161605036
    ],
    [
      -0.35573883199739786,
      0.8899759464295591,
      0.28529405564423843
    ],
    [
      -0.35596786526275115,
      0.8953841677833275,
      0.2675333081753331
    ],
    [
      -0.32852017516940596,
      0.88362477940697,
      0.33358918406424154
    ],
    [
      -0.33613650880920626,
      0.8790446785094365,
      0.3380720346757476
    ],
    [
      -0.3734903845232234,
      0.8736656152962832,
      0.31179051511818245
    ],
    [
      -0.373648754407717,
      0.8744227705452731,
      0.3094695892676535
    ],
    [
      -0.3445354052264784,
      0.8677919270690501,
      0.35809569371776995
    ],
    [
      -0.35565083971505734,
      0.8606781423367508,
      0.3643427171136189
    ],
    [
      -0.3881109792834362,
      0.8599238562333801,
      0.33151293977817103
    ],
    [
      -0.41600605669837637,
      0.8387796646809837,
      0.3512657610811559
    ],
    [
      -0.41603583829818586,
      0.8419340377109734,
      0.3436004327634397
    ],
    [
      -0.4112454348806364,
      0.847720754639947,
      0.3350324080481096
    ],
    [
      -0.3636351070222286,
      0.849623183198126,
      0.3819816167215588
    ],
    [
      -0.3662954664503618,
      0.8477559035171013,
      0.3835851395841803
    ],
    [
      -0.3765009238030963,
      0.8326421414362322,
      0.40614544030421024
    ],
    [
      -0.42633790636536145,
      0.8199926436788392,
      0.38190058118388426
    ],
    [
      -0.4269445463178851,
      0.8248874565773701,
      0.37051185993262425
    ],
    [
      -0.4331238429905438,
      0.8037977661202493,
      0.40781477145047057
    ],
    [
      -0.43421718073398974,
      0.8092528752067809,
      0.39568323685112555
    ],
    [
      -0.37615175939083617,
      0.8316595738260808,
      0.4084754670363941
    ],
    [
      -0.38767016928816284,
      0.8131752410499915,
      0.4341173426475558
    ],
    [
      -0.3872187694777313,
      0.8119911907797033,
      0.43672866938215893
    ],
    [
      -0.39695602428174775,
      0.7952724858060051,
      0.45822220385569046
    ],
    [
      -0.4424798896278863,
      0.7836542867804616,
      0.4360017271588492
    ],
    [
      -0.44378574124307424,
      0.7886743629597728,
      0.4254961399112002
    ],
    [
      -0.4511664560483289,
      0.7704810643568196,
      0.45034182395639605
    ],
    [
      -0.39548101121424994,
      0.7916243409043984,
      0.4657528020920876
    ],
    [
      -0.40419025976539097,
      0.7755850272909516,
      0.48486915694121
    ],
    [
      -0.44907920372459775,
      0.7638379753168416,
      0.46355087773182907
    ],
    [
      -0.4019780945983816,
      0.7698671458280727,
      0.49569969662850466
    ],
    [
      -0.4075961318742373,
      0.7587656431595147,
      0.508074888222088
    ],
    [
      -0.4536447053107525,
      0.7406013176704126,
      0.4956976594743706
    ],
    [
      -0.4574216597494775,
      0.7505500478770245,
      0.4769067527555355
    ],
    [
      -0.40340489801231094,
      0.749093813636642,
      0.5254740208906516
    ],
    [
      -0.4096815131472972,
      0.7363123006422492,
      0.5385213586370173
    ],
    [
      -0.4551932373640935,
      0.7205852352613904,
      0.523025845806192
    ],
    [
      -0.4589253979385122,
      0.731284774440794,
      0.5045889988872679
    ],
    [
      -0.45962908702029126,
      0.6968774389050765,
      0.5505478521527398
    ],
    [
      -0.46243109096866203,
      0.7071240508368892,
      0.5349140705137241
    ],
    [
      -0.40512115158673356,
      0.7258576970756329,
      0.555884390978104
    ],
    [
      -0.410480175037602,
      0.7141883087241581,
      0.5669577458530981
    ],
    [
      -0.4061338038564226,
      0.7036309400743203,
      0.5830598884636475
    ],
    [
      -0.41172381765995486,
      0.6910698293459766,
      0.5940589103272799
    ],
    [
      -0.46016360526421235,
      0.6721821528039158,
      0.5800177668331682
    ],
    [
      -0.46441082537402056,
      0.687279788544226,
      0.5585419210175948
    ],
    [
      -0.45928932713753146,
      0.6443935219821969,
      0.611400280344173
    ],
    [
      -0.4643066536813718,
      0.6633637150789569,
      0.5868286912411927
    ],
    [
      -0.40497926993093175,
      0.6761181774291827,
      0.6155127952171667
    ],
    [
      -0.40780725717657673,
      0.6692952643816416,
      0.6210773623876706
    ],
    [
      -0.39937945996454455,
      0.6510319225475191,
      0.6454870120943641
    ],
    [
      -0.4034348636578391,
      0.6412819936799772,
      0.6526850047053436
    ],
    [
      -0.45549058187832,
      0.6214687429289578,
      0.637420529464223
    ],
    [
      -0.4604729157782332,
      0.6415775249038499,
      0.613467988873863
    ],
    [
      -0.4529537173415308,
      0.5943612615791717,
      0.6645055460118479
    ],
    [
      -0.4581530326680594,
      0.6150524660969677,
      0.6417213278402849
    ],
    [
      -0.3944975970681484,
      0.6199894214815552,
      0.6782217654708697
    ],
    [
      -0.3965335883223269,
      0.6142667625349165,
      0.6822297690493225
    ],
    [
      -0.3890950703760809,
      0.5925656999367126,
      0.7053161826213451
    ],
    [
      -0.44388710724245006,
      0.5610614014321448,
      0.6986947401025194
    ],
    [
      -0.44793534117372935,
      0.5629520562038302,
      0.6945782263672353
    ],
    [
      -0.455223472726437,
      0.5888604526085521,
      0.6678435125330887
    ],
    [
      -0.38579509569022197,
      0.590893353967866,
      0.7085246561538835
    ],
    [
      -0.3779292120501167,
      0.5674443326619889,
      0.7315575438808406
    ],
    [
      -0.3809547674497966,
      0.5591867180498379,
      0.7363312294843419
    ],
    [
      -0.4320350723769928,
      0.533840612860993,
      0.7268836882861012
    ],
    [
      -0.43714483299378454,
      0.5361422129194705,
      0.7221190500967617
    ],
    [
      -0.36982409116595616,
      0.5315352850451189,
      0.7620369953914827
    ],
    [
      -0.37220354495969876,
      0.5254500647426681,
      0.7650926418293142
    ],
    [
      -0.4212151695919042,
      0.502226967100738,
      0.755212456479935
    ],
    [
      -0.42373230779277454,
      0.5033664869914563,
      0.7530425692525552
    ],
    [
      -0.35958131248429404,
      0.4943237691050054,
      0.7914197944263801
    ],
    [
      -0.36058127386468025,
      0.49187740330627144,
      0.7924883374881955
    ],
    [
      -0.40627913018889683,
      0.46783615296365627,
      0.7848991032948883
    ],
    [
      -0.412802002493151,
      0.4703845587957206,
      0.7799569690593191
    ],
    [
      -0.3463227986784746,
      0.45631229348106256,
      0.8196582275153232
    ],
    [
      -0.3839749268003387,
      0.4323536295180566,
      0.8158637108189318
    ],
    [
      -0.39845069517832854,
      0.4362046145613948,
      0.8068225193605169
    ],
    [
      -0.2753231753968031,
      0.43680147941302894,
      0.8563887065299323
    ],
    [
      -0.29193998208781174,
      0.37824884844300544,
      0.87846391816062
    ],
    [
      -0.37672674556484886,
      0.39873336137905957,
      0.8361152227411446
    ],
    [
      0.8704096049264126,
      -0.36633750164399503,
      0.3289132933480834
    ],
    [
      0.8560968426935294,
      -0.37871253960180057,
      0.35167457724226386
    ],
    [
      0.8543098935840233,
      -0.3767287728131608,
      0.35809221921056095
    ],
    [
      0.8704205647447293,
      -0.3251256208393127,
      0.3696773879253611
    ],
    [
      0.8812298899542318,
      -0.36725252814174847,
      0.29758941786418863
    ],
    [
      0.8767635699631787,
      -0.3715134659169516,
      0.30539054836028606
    ],
    [
      0.89216030881166,
      -0.36645398142717167,
      0.26412395362264585
    ],
    [
      0.8867844962499303,
      -0.3720162812627201,
      0.2742574405302693
    ],
    [
      0.9030060891589375,
      -0.3631404139501071,
      0.22958450012582704
    ],
    [
      0.8966752632270126,
      -0.36999163398344187,
      0.24306308460774204
    ],
    [
      0.9114345342140082,
      -0.3590721417803357,
      0.2008837644992161
    ],
    [
      0.9079256192017516,
      -0.3656338501869418,
      0.20489743188871082
    ],
    [
      0.9237821713835871,
      -0.34321991021453446,
      0.1697839599790037
    ],
    [
      0.932893832711084,
      -0.33117992897328963,
      0.14152367835408697
    ],
    [
      0.9243275522395431,
      -0.34369978586042743,
      0.165798170588071
    ],
    [
      0.9419559724385151,
      -0.31707829357074263,
      0.11036440428723922
    ],
    [
      0.9332980915055087,
      -0.33151563857919564,
      0.13802917724018887
    ],
    [
      0.9578016479713892,
      -0.2760472928137623,
      0.08008679837204008
    ],
    [
      0.9430949420023624,
      -0.31745662462256324,
      0.098960708631303
    ],
    [
      0.9669651078273682,
      -0.2512720708370847,
      0.04290485592155425
    ],
    [
      0.9647268333730452,
      -0.2590156631317026,
      0.04704278076879608
    ],
    [
      0.9585159053190296,
      -0.275442997513288,
      0.073337673615515
    ],
    [
      0.9751275649925366,
      -0.2207025505661252,
      0.02041117746072984
    ],
    [
      0.9691428236544113,
      -0.24438614557886423,
      0.0322117867908762
    ],
    [
      0.9842546310112351,
      -0.17674668248635958,
      0.0018524478409577539
    ],
    [
      0.9810797004279037,
      -0.19359715018422452,
      0.0016627834619891513
    ],
    [
      0.9763531896261444,
      -0.2157922607505524,
      0.012967239761014918
    ],
    [
      0.990019734739239,
      -0.13841035447333866,
      -0.026523548054733427
    ],
    [
      0.9860444284892931,
      -0.165980565406094,
      -0.012916537953216387
    ],
    [
      0.9919385037046422,
      -0.11967272611927278,
      -0.04167065503897481
    ],
    [
      0.9909966690180348,
      -0.1272506040187729,
      -0.04162794460475935
    ],
    [
      0.9957012911056541,
      -0.06904140923620336,
      -0.06174319963536466
    ],
    [
      0.9949964157134197,
      -0.07853605240735767,
      -0.06175938139033053
    ],
    [
      0.9951504854391,
      -0.031859424572375616,
      -0.0930617450741217
    ],
    [
      0.9951845766529178,
      -0.05396673484972415,
      -0.08182450685346238
    ],
    [
      0.994101844484408,
      -0.014602069995200475,
      -0.10746302780283683
    ],
    [
      0.9944582640381946,
      -0.024457590045131667,
      -0.10224767662555907
    ],
    [
      0.9918836752141642,
      0.0015009325692666839,
      -0.12713977365508003
    ],
    [
      0.988979892795643,
      0.017171852839329434,
      -0.14705066853293386
    ],
    [
      0.9916977002291499,
      0.00195486563360367,
      -0.12857624143118174
    ],
    [
      0.9855779736068767,
      0.02612908693527141,
      -0.1671924901330551
    ],
    [
      0.9865867464207397,
      0.021694651943416306,
      -0.16178978294068205
    ],
    [
      0.9797765042879569,
      0.03515826321451826,
      -0.19698197423370967
    ],
    [
      0.9735928984026645,
      0.04187050893876318,
      -0.22441864597467798
    ],
    [
      0.9789769444646343,
      0.034749742472362136,
      -0.20098904846979276
    ],
    [
      0.9659980418089242,
      0.03868509760115829,
      -0.2556388985364172
    ],
    [
      0.9582666130732277,
      0.053242417086306,
      -0.28087424818230056
    ],
    [
      0.9650872112892246,
      0.03700432016805524,
      -0.25930166774413077
    ],
    [
      0.9472817343064298,
      0.0629413331839235,
      -0.3141587248930591
    ],
    [
      0.9485629125309994,
      0.06005748681100583,
      -0.3108399897835754
    ],
    [
      0.9353296413811969,
      0.07361714258551731,
      -0.3460332040010977
    ],
    [
      0.9374072387772331,
      0.06904648397926344,
      -0.3413213320877334
    ],
    [
      0.9242377494614978,
      0.07952754984812194,
      -0.37344337092188407
    ],
    [
      0.9107018529004688,
      0.08390787825743769,
      -0.40445222596740393
    ],
    [
      0.9227346932447883,
      0.07797174027535363,
      -0.37746667879546575
    ],
    [
      0.8948766321584184,
      0.09237413961932206,
      -0.4366495523258858
    ],
    [
      0.8957509599755916,
      0.09066788887505885,
      -0.4352120766129383
    ],
    [
      0.9106981645381874,
      0.08390423375287671,
      -0.40446128697950695
    ],
    [
      0.8797476108618864,
      0.09869912718759745,
      -0.465083458612763
    ],
    [
      0.8591859199597,
      0.10889864992612587,
      -0.4999406354631232
    ],
    [
      0.8626531205889427,
      0.10276753595059174,
      -0.4952458249120357
    ],
    [
      0.8779240058969454,
      0.09677335748402252,
      -0.4689182840870354
    ],
    [
      0.840489485534176,
      0.12347297734325301,
      -0.5275716525482474
    ],
    [
      0.8459109460721673,
      0.11442997965497277,
      -0.5209034949695127
    ],
    [
      0.816560299026188,
      0.14139706697773707,
      -0.5596750374139942
    ],
    [
      0.8239150504934318,
      0.13062387757887778,
      -0.551453889438332
    ],
    [
      0.8108133028712857,
      0.14472645307476692,
      -0.5671296515501141
    ],
    [
      0.7702193233508026,
      0.18145569727696823,
      -0.6114213145309552
    ],
    [
      0.7881190710403763,
      0.15436927534041156,
      -0.5958510356568414
    ],
    [
      0.8070965770301918,
      0.14383225420339898,
      -0.5726319917686372
    ],
    [
      0.7396757473199295,
      0.20418196401346544,
      -0.6412406056998479
    ],
    [
      0.7555150297024463,
      0.1814830329738652,
      -0.6294926120585679
    ],
    [
      0.6690885646087742,
      0.28234354359242647,
      -0.6874609924217094
    ],
    [
      0.7218726153345008,
      0.2149938984000514,
      -0.6577822974821353
    ],
    [
      0.6430347597336306,
      0.39270382948769006,
      -0.6574876425302724
    ],
    [
      0.6301519901992344,
      0.37641245104874854,
      -0.6791333712485477
    ],
    [
      0.6372253521379333,
      0.3167744995873455,
      -0.7025651336380662
    ],
    [
      0.643434483038077,
      0.2977049261762493,
      -0.705240273217516
    ],
    [
      0.6520491186149805,
      0.2803449772851839,
      -0.7044420775510196
    ],
    [
      0.642970444328962,
      0.44814413338441844,
      -0.6210924596487594
    ],
    [
      0.6312891695736621,
      0.4344901691143767,
      -0.6424112991860873
    ],
    [
      0.6244667895525426,
      0.5104056214920709,
      -0.5912083645342252
    ],
    [
      0.6164006274657048,
      0.4993242583800536,
      -0.6088723605593334
    ],
    [
      0.63361155066433,
      0.4594404243541277,
      -0.6224555400460681
    ],
    [
      0.6232624997091202,
      0.53774628935182,
      -0.5677788167452952
    ],
    [
      0.6167795373493523,
      0.5272546623326994,
      -0.5844531832025129
    ],
    [
      0.6178692196780938,
      0.5648907038519175,
      -0.5469333780965179
    ],
    [
      0.6147343432356391,
      0.5560216066590347,
      -0.5594118877669234
    ],
    [
      0.6177111408170757,
      0.5888693858144697,
      -0.5212156875622187
    ],
    [
      0.6119578249462414,
      0.5773530494113462,
      -0.5405285161973278
    ],
    [
      0.6122636763044531,
      0.6139263461273556,
      -0.4982244797366646
    ],
    [
      0.6085806360560712,
      0.6054449539083518,
      -0.5128996170835983
    ],
    [
      0.6051886193176812,
      0.637637060070536,
      -0.4766190456464812
    ],
    [
      0.6026863640457905,
      0.6305656944852372,
      -0.48903583869857165
    ],
    [
      0.5967661327336633,
      0.6626443137029527,
      -0.452518172385652
    ],
    [
      0.5944013201340637,
      0.6552955332037477,
      -0.4661274876963365
    ],
    [
      0.5902905729132258,
      0.6854519300522327,
      -0.4262777159522235
    ],
    [
      0.5878018598599861,
      0.6769062339395889,
      -0.4430428015427673
    ],
    [
      0.5830844125920139,
      0.7052990435860981,
      -0.40319452737947886
    ],
    [
      0.5818011553576883,
      0.6985086917748281,
      -0.4166449605353184
    ],
    [
      0.5740514747782997,
      0.7183925687761312,
      -0.3929084135419994
    ],
    [
      0.5761670997721247,
      0.7268939954368484,
      -0.3737065593992613
    ],
    [
      0.5703267978623807,
      0.7350677969805485,
      -0.3666097072940191
    ],
    [
      0.572743024338672,
      0.7446414095910262,
      -0.3427456771334701
    ],
    [
      0.5730430208117994,
      0.7577202568788762,
      -0.31222060888784625
    ],
    [
      0.5704151026880588,
      0.7478014346566091,
      -0.33973463902123463
    ],
    [
      0.5734240944313832,
      0.7833902268351992,
      -0.2397593802641373
    ],
    [
      0.5688001942028942,
      0.7862342977891421,
      -0.2414580047436086
    ],
    [
      0.5668294115428174,
      0.7651498687795,
      -0.30536878772516557
    ],
    [
      0.9086560953648161,
      -0.1875233125092184,
      0.3730671623473932
    ],
    [
      0.923186282533869,
      -0.14417835240175914,
      0.3562859672229729
    ],
    [
      0.9270891841723344,
      -0.1475463761550136,
      0.3445804862063413
    ],
    [
      0.9385525315261577,
      -0.1421737642569758,
      0.3144928716566444
    ],
    [
      0.9442158529127466,
      -0.13230374993557903,
      0.30158272639731587
    ],
    [
      0.9500340402826263,
      -0.12849498350635324,
      0.28447207511102235
    ],
    [
      0.950424447331609,
      -0.12779405455092555,
      0.28348200919254235
    ],
    [
      0.9548857993272363,
      -0.12469040829968198,
      0.2695281289981502
    ],
    [
      0.9621316995424483,
      -0.11003164989414639,
      0.24939051456928368
    ],
    [
      0.9625451934552226,
      -0.10973304873151833,
      0.24792218249348777
    ],
    [
      0.9727778133136208,
      -0.0861628947805053,
      0.21512619898053775
    ],
    [
      0.973644205906655,
      -0.07734858387695547,
      0.2145557197481081
    ],
    [
      0.9831721809893607,
      -0.01572479537304699,
      0.1820032783745926
    ],
    [
      0.9817367906613894,
      0.09628698360634788,
      0.1640783064572097
    ],
    [
      0.983664041940318,
      0.1013024200182245,
      0.1488048127316037
    ],
    [
      0.9854269300778437,
      0.12378941252830121,
      0.11666167675485706
    ],
    [
      0.9836234214726414,
      0.14794199530311838,
      0.10294722315918249
    ],
    [
      0.9836314809112391,
      0.15354103619422796,
      0.0943093842879147
    ],
    [
      0.9821169223226862,
      0.16731497536824072,
      0.0863252564719013
    ],
    [
      0.9816977441123497,
      0.17673265438114819,
      0.0709584954752933
    ],
    [
      0.9792267601482196,
      0.19316747194572378,
      0.06165452125934546
    ],
    [
      0.9781632185537713,
      0.2026854464205917,
      0.04599269156955712
    ],
    [
      0.9766089740533802,
      0.21110018695068575,
      0.04088548480560802
    ],
    [
      0.9746626348559343,
      0.22261558870589182,
      0.021795593151299208
    ],
    [
      0.9736028623289531,
      0.22747549122262054,
      0.01877145060715851
    ],
    [
      0.9703847208156943,
      0.24151196210625922,
      -0.005046361761895409
    ],
    [
      0.9703034027660538,
      0.2417231089085083,
      -0.00901361194099319
    ],
    [
      0.965950332857468,
      0.25586505280767813,
      -0.038380062588158126
    ],
    [
      0.9662040512843657,
      0.2556629343088736,
      -0.03295747718281251
    ],
    [
      0.96122244686708,
      0.2689145570686128,
      -0.06112584261550375
    ],
    [
      0.9606379448847578,
      0.26913746468032135,
      -0.06884594362079423
    ],
    [
      0.9564547968716178,
      0.27886601677098216,
      -0.08618564980063985
    ],
    [
      0.954994185774228,
      0.27900631051345415,
      -0.1007054309910314
    ],
    [
      0.9507352022237897,
      0.2874842305277799,
      -0.11599738122190471
    ],
    [
      0.9488138919558823,
      0.2874869934306963,
      -0.13078007126359165
    ],
    [
      0.9433241506363231,
      0.2969922121765326,
      -0.14810527584373542
    ],
    [
      0.94090352544176,
      0.2970448174438482,
      -0.16268046053849902
    ],
    [
      0.9351890892339748,
      0.3055600611477767,
      -0.1790374720808349
    ],
    [
      0.9325430049134827,
      0.3058138454903593,
      -0.191941230311079
    ],
    [
      0.92629243495813,
      0.3139715338206762,
      -0.20833674877378372
    ],
    [
      0.9243633365496338,
      0.31421875254152726,
      -0.21637698027765095
    ],
    [
      0.9120357131150034,
      0.32851606061045857,
      -0.2454955313723508
    ],
    [
      0.9115291690498308,
      0.32937231757339674,
      -0.24622845162095813
    ],
    [
      0.8995638114890341,
      0.3419666018683746,
      -0.27174214296998195
    ],
    [
      0.8948894412206081,
      0.34895960945220883,
      -0.27820869677784993
    ],
    [
      0.8871404341365061,
      0.35662154397978885,
      -0.29292136229637306
    ],
    [
      0.8791956466131042,
      0.367462775181672,
      -0.30329214271449484
    ],
    [
      0.8305522717308438,
      0.42177560805336756,
      -0.36371453143082805
    ],
    [
      0.824379075362806,
      0.4356991522472998,
      -0.36133833014911276
    ],
    [
      0.8155456377082992,
      0.46134954304949044,
      -0.34934497555137356
    ],
    [
      0.8213820810680021,
      0.449322348086085,
      -0.35134157797050547
    ],
    [
      0.8106934413926546,
      0.4821943250157699,
      -0.3320614054742291
    ],
    [
      0.809454806031049,
      0.4845686371896216,
      -0.33162652614866267
    ],
    [
      0.8035664165349404,
      0.5068232357926911,
      -0.31210770877666677
    ],
    [
      0.8038558787758938,
      0.5074628097325997,
      -0.31031793840468
    ],
    [
      0.7967090070827797,
      0.5309857338642022,
      -0.28863282638304655
    ],
    [
      0.7973680838711942,
      0.5323482997167582,
      -0.28426998894054356
    ],
    [
      0.7917493533479448,
      0.5487224086485324,
      -0.2683964972201841
    ],
    [
      0.7934281295205116,
      0.5517347060743705,
      -0.25702260094904167
    ],
    [
      0.7882236398472314,
      0.565108862014763,
      -0.24362977580411108
    ],
    [
      0.790446893028418,
      0.5679712652442619,
      -0.22935202453554512
    ],
    [
      0.7838788859481101,
      0.5823723743726738,
      -0.21535159561118694
    ],
    [
      0.7865791276068136,
      0.5845284347882906,
      -0.19904719273894594
    ],
    [
      0.7809821507552006,
      0.5956644474044948,
      -0.18775182102999483
    ],
    [
      0.7844960661321287,
      0.5975536556218993,
      -0.16581782436191603
    ],
    [
      0.7804322941402214,
      0.6052452908536664,
      -0.15685525863831154
    ],
    [
      0.7826013118999576,
      0.607022394045461,
      -0.13805433618609214
    ],
    [
      0.7774492338710182,
      0.6159370298902496,
      -0.12725668533851067
    ],
    [
      0.7793752525081573,
      0.6173969795903197,
      -0.10674823357131713
    ],
    [
      0.7748644048528309,
      0.6245758620412836,
      -0.09741738370258012
    ],
    [
      0.7762969595836229,
      0.6257276263419509,
      -0.07634113028827094
    ],
    [
      0.7720217019361852,
      0.6319626963185399,
      -0.06786488194461796
    ],
    [
      0.7732045317699809,
      0.6326222753754001,
      -0.044088646488817905
    ],
    [
      0.7692993809326955,
      0.6378413196998646,
      -0.036563826114162847
    ],
    [
      0.7697669458036602,
      0.6381536885739062,
      -0.014789148306202508
    ],
    [
      0.7646557587058067,
      0.6444141681747951,
      -0.005652480308150437
    ],
    [
      0.7646815136149009,
      0.6442671255173656,
      0.013492728160583603
    ],
    [
      0.7565389533283364,
      0.6534253928576487,
      0.026154694907276132
    ],
    [
      0.7561455863703006,
      0.6529271420301198,
      0.04393175859323137
    ],
    [
      0.7478388514796299,
      0.6614536616245501,
      0.05671071980766272
    ],
    [
      0.7467704972853801,
      0.6611511861251765,
      0.07220064729223788
    ],
    [
      0.7383181557627335,
      0.6690648533970011,
      0.08507950881361008
    ],
    [
      0.729181342417711,
      0.6748435635645247,
      0.11349332396858446
    ],
    [
      0.7365926147299218,
      0.6685553827962819,
      0.10229868063398435
    ],
    [
      0.7266449222211364,
      0.6739628757196461,
      0.13327114902312276
    ],
    [
      0.7210383423380314,
      0.6782599559829964,
      0.1416585365884016
    ],
    [
      0.7178909138134508,
      0.6768870126472573,
      0.16265487380819654
    ],
    [
      0.7100056607611739,
      0.6824604411244969,
      0.17360791452939558
    ],
    [
      0.7036988565655405,
      0.6795331750193707,
      0.20746706561872413
    ],
    [
      0.6880865534511234,
      0.6927064660280857,
      0.21608944185830758
    ],
    [
      0.6737347564031043,
      0.6852878646236381,
      0.27651766781532067
    ],
    [
      0.6749204705372907,
      0.6829356826022989,
      0.27943015563509666
    ],
    [
      0.6458839115709453,
      0.6923554202908528,
      0.3216798793329972
    ],
    [
      0.6219395240515936,
      0.7215700162855119,
      0.3041840561571289
    ],
    [
      0.6043012687579484,
      0.7252441439917604,
      0.32991045479522524
    ],
    [
      0.6428109971906987,
      0.6886542261717209,
      0.33548379791955363
    ],
    [
      0.6313362303157747,
      0.6912870258542226,
      0.35147803939405725
    ],
    [
      0.631209806791465,
      0.6913897760923178,
      0.3515029976049937
    ],
    [
      0.6042529097138476,
      0.7244932017061195,
      0.33164442070380873
    ],
    [
      0.5783555372803557,
      0.7282968398559366,
      0.3675439913166959
    ],
    [
      0.5908921255127886,
      0.710389866266144,
      0.38235158416482196
    ],
    [
      0.588275282199716,
      0.7123760277966895,
      0.38269124287531675
    ],
    [
      0.5693969018360546,
      0.7066865626398712,
      0.4199777022220891
    ],
    [
      0.5608272802212478,
      0.7094390519169249,
      0.4268125974884675
    ],
    [
      0.541891227284823,
      0.740682933266615,
      0.3971683398249557
    ],
    [
      0.5665712089118092,
      0.7389247620868105,
      0.3646741850023959
    ],
    [
      0.5312958554714358,
      0.7469136601329202,
      0.3998058257025774
    ],
    [
      0.5586891502544127,
      0.7090301943013794,
      0.430282020257587
    ],
    [
      0.5323867819916364,
      0.7168895077818057,
      0.450148584350712
    ],
    [
      0.5310772658845268,
      0.7176639719133262,
      0.45046127589195073
    ],
    [
      0.519222534974644,
      0.747539754650283,
      0.41423697854235475
    ],
    [
      0.5087458869627736,
      0.7237722355461793,
      0.46618813107043683
    ],
    [
      0.47912230885597495,
      0.7397593620188236,
      0.472438249363896
    ],
    [
      0.4590216062735706,
      0.760669326712198,
      0.4590003707768028
    ],
    [
      0.45670381405737753,
      0.7808234358296922,
      0.42630551050222065
    ],
    [
      0.44596176533178267,
      0.7986628039690772,
      0.4040492908277547
    ],
    [
      0.43259681302344005,
      0.7599239656733879,
      0.48515519553766945
    ],
    [
      0.37720631558209095,
      0.7859239304864438,
      0.4899377215256276
    ],
    [
      0.35375200596790396,
      0.8123277247114595,
      0.46366279335179256
    ],
    [
      0.353471534369607,
      0.8159992927920727,
      0.4573871757638521
    ],
    [
      0.31958402211748344,
      0.838510503855522,
      0.4413232236481223
    ],
    [
      0.24472112763717938,
      0.8574572134841822,
      0.4526352800345207
    ],
    [
      0.24362499047132377,
      0.8575043548783647,
      0.4531370050906093
    ],
    [
      0.21091709831791525,
      0.8917050554762724,
      0.40046981368788437
    ],
    [
      -0.12186519125813625,
      0.9166075837778396,
      0.38076162164872734
    ],
    [
      -0.20480907634898876,
      0.8909491548316918,
      0.4052935303576512
    ],
    [
      -0.24087247995417693,
      0.9075603771765911,
      0.343968908740032
    ],
    [
      -0.2655269519529254,
      0.8953640804149059,
      0.357517274113236
    ],
    [
      -0.2145165498390522,
      0.8846827307838928,
      0.413907134147146
    ],
    [
      -0.23832726920527036,
      0.8755200312042754,
      0.42031510526416177
    ],
    [
      -0.27761488218845276,
      0.8818495241738599,
      0.38114484635349377
    ],
    [
      -0.27608991960176477,
      0.885985290495774,
      0.37256465387823645
    ],
    [
      -0.2978924128047121,
      0.8706324013416401,
      0.39148350173088536
    ],
    [
      -0.24326595049915667,
      0.8671093442099052,
      0.43467581312008874
    ],
    [
      -0.2582977042608942,
      0.8560025549627128,
      0.4478190726966187
    ],
    [
      -0.3121136665806617,
      0.8527510732386194,
      0.4188086272081296
    ],
    [
      -0.3119804240372397,
      0.855419017541023,
      0.4134326056888776
    ],
    [
      -0.2618061516857489,
      0.8476902821159388,
      0.4613878244445759
    ],
    [
      -0.27692047398259645,
      0.836005722448465,
      0.473718780631161
    ],
    [
      -0.3245474947391581,
      0.8373121573965805,
      0.43997417507669717
    ],
    [
      -0.3245149962160139,
      0.8384359647419382,
      0.43785288654772625
    ],
    [
      -0.281041609311979,
      0.8245231173984948,
      0.49109799705435675
    ],
    [
      -0.28610101383166925,
      0.820251929030593,
      0.49531099604802054
    ],
    [
      -0.3372155584534118,
      0.8153199894578564,
      0.4706792771382594
    ],
    [
      -0.33785559186712755,
      0.8209126715327542,
      0.4603867773525532
    ],
    [
      -0.34708250856958744,
      0.8024385803686137,
      0.4854132847183377
    ],
    [
      -0.2916770275753746,
      0.803991671547616,
      0.5181909914952832
    ],
    [
      -0.345213130565258,
      0.7922449746758732,
      0.5031657724708222
    ],
    [
      -0.28920668095499574,
      0.8006116043537423,
      0.5247671432789233
    ],
    [
      -0.29418853360096753,
      0.785216851209389,
      0.5448739333777352
    ],
    [
      -0.34840912666099305,
      0.7694664869307886,
      0.5352872181826451
    ],
    [
      -0.3511396923281949,
      0.7839023870476887,
      0.5120526965582707
    ],
    [
      -0.2896702981456296,
      0.7793407580401305,
      0.5556249645486214
    ],
    [
      -0.2947744682800176,
      0.7629958098145151,
      0.5752785473626886
    ],
    [
      -0.3494527912168949,
      0.7476395912480193,
      0.5647280658062038
    ],
    [
      -0.3521710094551739,
      0.7636795297033953,
      0.5410814689224951
    ],
    [
      -0.2790818212602205,
      0.7427672510559807,
      0.6086132990666734
    ],
    [
      -0.34911093770004337,
      0.7248289673906266,
      0.593922992659515
    ],
    [
      -0.35221484173977774,
      0.7431101948920299,
      0.5689744664796064
    ],
    [
      -0.2604389084227113,
      0.7352209328925143,
      0.6257968958186414
    ],
    [
      -0.26156245051719323,
      0.7278956761678403,
      0.6338398607657958
    ],
    [
      -0.34789263750712535,
      0.6963546314408918,
      0.6277427339596657
    ],
    [
      -0.3498419149855914,
      0.6976565075341752,
      0.6252087907366879
    ],
    [
      -0.353041889662472,
      0.7181924076301723,
      0.5996341299208436
    ],
    [
      -0.2467233251334046,
      0.6857526501546009,
      0.6847414867240468
    ],
    [
      -0.32497383463078827,
      0.6582293829806172,
      0.6790626526222135
    ],
    [
      -0.34417621784182906,
      0.6723013373709977,
      0.6554034199188021
    ],
    [
      0.6461391657929872,
      0.7322684703111675,
      -0.21514429068995825
    ],
    [
      0.6459830763681695,
      0.7322856481775202,
      -0.21555415681249285
    ],
    [
      0.6463032041795198,
      0.7406169573943558,
      -0.18378980028068173
    ],
    [
      0.6460931922941311,
      0.7406561584118685,
      -0.18436930839419036
    ],
    [
      0.6460499818825076,
      0.7478639665238787,
      -0.1527052994652853
    ],
    [
      0.6457137948907364,
      0.747955329294615,
      -0.15367667509283334
    ],
    [
      0.6450753622682777,
      0.7543837927624266,
      -0.12158482722702897
    ],
    [
      0.6448338753235408,
      0.7544714815777791,
      -0.12231948626876778
    ],
    [
      0.6436150666978191,
      0.7599906991626593,
      -0.09040897690945411
    ],
    [
      0.6432658524693043,
      0.7601540545451548,
      -0.09151424154469522
    ],
    [
      0.641318321606218,
      0.7647859790003602,
      -0.06175124854320155
    ],
    [
      0.637888273648465,
      0.7693956951660418,
      -0.03359783626581456
    ],
    [
      0.6404872027781187,
      0.7655964320286209,
      -0.06031787747016894
    ],
    [
      0.6293574686138675,
      0.7771085905828963,
      -0.0033786302267925237
    ],
    [
      0.6318607931288605,
      0.7746871727349973,
      -0.024733024611315282
    ],
    [
      0.6212942538135131,
      0.7831852473272044,
      0.024785450315368794
    ],
    [
      0.6240509117913123,
      0.7813724324057415,
      0.004193014281700817
    ],
    [
      0.6097886368157448,
      0.790703281839159,
      0.05427834281902274
    ],
    [
      0.6126878102356764,
      0.7894965858573596,
      0.03617717661986452
    ],
    [
      0.5979691304961452,
      0.7974582969133618,
      0.08058029323429274
    ],
    [
      0.6008139164751672,
      0.7966547542067771,
      0.06605937003567491
    ],
    [
      0.5823457418187896,
      0.8058354494564566,
      0.10725047964850398
    ],
    [
      0.5848152687724608,
      0.8052945135683344,
      0.09742611470921973
    ],
    [
      0.5681928131865059,
      0.8124562533850928,
      0.13065895827941593
    ],
    [
      0.5706209748602882,
      0.8120714999458395,
      0.12219485269522938
    ],
    [
      0.5522088220459177,
      0.8190649294466937,
      0.15555725057078681
    ],
    [
      0.5547333591978402,
      0.8188907265246672,
      0.14727144395633152
    ],
    [
      0.5283574328248529,
      0.8259850787909234,
      0.19643592541458138
    ],
    [
      0.5354778870845318,
      0.8261539902593701,
      0.1753083478389036
    ],
    [
      0.49581581748723996,
      0.8421894603430352,
      0.21185747099540053
    ],
    [
      0.4490707813097684,
      0.8654246202098475,
      0.22220634578804344
    ],
    [
      0.4597197738850599,
      0.8619843818842092,
      0.21363673580816392
    ],
    [
      0.42751544344476566,
      0.8313523284114757,
      0.35508287998866284
    ],
    [
      0.4458037952473221,
      0.8669161053158968,
      0.22296959991667162
    ],
    [
      0.45159128462120063,
      0.8122418606940642,
      0.3692268562691749
    ],
    [
      0.401030364847394,
      0.8474919560508977,
      0.3477528301817101
    ],
    [
      0.41699110671979017,
      0.8812215723970449,
      0.22263637900999983
    ],
    [
      0.3834288791536205,
      0.8556038934710861,
      0.3477416743907994
    ],
    [
      0.37608522913229414,
      0.89802979495441,
      0.2282594747270092
    ],
    [
      0.41013372701426615,
      0.8848894726688796,
      0.22081881062350547
    ],
    [
      0.3129309398556176,
      0.9238647217736691,
      0.22033656696776596
    ],
    [
      0.342042061359397,
      0.915906714554601,
      0.21005265648120514
    ],
    [
      0.35367818245257465,
      0.9106578928473944,
      0.21357421532522797
    ],
    [
      -0.04952067626588023,
      0.9843678952245671,
      0.16901937602927483
    ],
    [
      -0.013625224572024556,
      0.9796465981082612,
      0.20026706187057533
    ],
    [
      0.01376975879955811,
      0.9622975270556886,
      0.2716502589085976
    ],
    [
      -0.05946318664991777,
      0.9877150782362981,
      0.14450970091347015
    ],
    [
      -0.05847440856581712,
      0.98768703620132,
      0.14510362525702203
    ],
    [
      -0.1975500819430271,
      0.9536454725817629,
      0.22701162469928599
    ],
    [
      -0.16763443266287656,
      0.972206378855316,
      0.16344250946075617
    ],
    [
      -0.08181480865669118,
      0.9886809054257557,
      0.12576328689636257
    ],
    [
      -0.06822825470943718,
      0.988628531589175,
      0.13400944663394435
    ],
    [
      -0.23968162156068845,
      0.9541655243198085,
      0.17922296863277287
    ],
    [
      -0.22624129044656077,
      0.9690188743564336,
      0.09908228720646949
    ],
    [
      -0.19386524892266985,
      0.9767853050221151,
      0.09114128127805138
    ],
    [
      -0.18003498429930279,
      0.9781700501957626,
      0.10378225921788875
    ],
    [
      -0.16925396409698998,
      0.976826880819,
      0.1310051164912194
    ],
    [
      -0.2687954880412467,
      0.9503386790220376,
      0.15686102372264663
    ],
    [
      -0.2753307185668827,
      0.9594931290858432,
      0.05971541384350742
    ],
    [
      -0.26752762913666106,
      0.9615643944596587,
      0.061829466728631585
    ],
    [
      -0.2944344599130941,
      0.9432172841643309,
      0.1537839512736889
    ],
    [
      -0.3288932732798923,
      0.9402327709088708,
      0.08826976436053721
    ],
    [
      -0.2755460695936193,
      0.9594458159045275,
      0.05948184491762003
    ],
    [
      -0.33853630198322665,
      0.9264081609388396,
      0.16480622435284
    ],
    [
      -0.3680179742223793,
      0.9233387615979494,
      0.10958239813045449
    ],
    [
      -0.32893062511350196,
      0.9402196920901367,
      0.08826989559509761
    ],
    [
      -0.3437289972306899,
      0.9226546007808776,
      0.17481093821801827
    ],
    [
      -0.3555733813268055,
      0.9162253679192612,
      0.1846581860439347
    ],
    [
      -0.41701463813332357,
      0.8973948320801649,
      0.1441572299204782
    ],
    [
      -0.41871401894896093,
      0.8979278356814265,
      0.13566197788650436
    ],
    [
      -0.3976277760760368,
      0.91088977968614,
      0.11032661037193453
    ],
    [
      -0.3693242799781823,
      0.9228709538228632,
      0.109127351331717
    ],
    [
      -0.36278911683862314,
      0.9101892507981547,
      0.19984890401237074
    ],
    [
      -0.3643354785997419,
      0.9093043309196954,
      0.20106042077987887
    ],
    [
      -0.4196518034606265,
      0.8881470310043335,
      0.18731581665847513
    ],
    [
      -0.4223218386540887,
      0.8884998350692146,
      0.17947787517632482
    ],
    [
      -0.3771471254802949,
      0.8972892863545318,
      0.22941661303254793
    ],
    [
      -0.4199195450763634,
      0.8807366376026041,
      0.21902180450201608
    ],
    [
      -0.423243102965427,
      0.8811115281324358,
      0.21096860141812765
    ],
    [
      -0.3902156370132781,
      0.8826624194604902,
      0.26199009504650234
    ],
    [
      -0.4238832721581994,
      0.8723648842171283,
      0.2435210060124056
    ],
    [
      -0.37273572631948254,
      0.8920972577211462,
      0.2554027429208594
    ],
    [
      -0.406792540678896,
      0.8669095150574402,
      0.28807589547007006
    ],
    [
      -0.44411814777398767,
      0.8571235271725199,
      0.26095656723895777
    ],
    [
      -0.4013962053568701,
      0.8698717433773211,
      0.28671281171026397
    ],
    [
      -0.41801469576529615,
      0.8522705783376018,
      0.3144814389186377
    ],
    [
      -0.45926570731670996,
      0.8411828643508391,
      0.285458226025105
    ],
    [
      -0.4509969558200111,
      0.8531645274872972,
      0.2621298053988897
    ],
    [
      -0.46922508402217644,
      0.8237535293140558,
      0.31821053324335213
    ],
    [
      -0.4698935531874983,
      0.8248722513320973,
      0.3143021120755398
    ],
    [
      -0.4608047628546921,
      0.8398753836001631,
      0.2868245292036748
    ],
    [
      -0.4770660685518473,
      0.808088219609834,
      0.3455450702358418
    ],
    [
      -0.47741247567107875,
      0.8086668188109234,
      0.3437081672405136
    ],
    [
      -0.4833613093006377,
      0.7902816781557201,
      0.376585599621855
    ],
    [
      -0.4847635738484052,
      0.7924303579028033,
      0.37021399938921395
    ],
    [
      -0.48778014063079866,
      0.7752553034834654,
      0.40131004077515703
    ],
    [
      -0.48917044589058917,
      0.777216747387039,
      0.3957858037478271
    ],
    [
      -0.4962572407434521,
      0.7543574912932081,
      0.4297365778468398
    ],
    [
      -0.5013695943519665,
      0.7341263846799233,
      0.4579159105950893
    ],
    [
      -0.5037750834327334,
      0.7382854524869066,
      0.4484922027845592
    ],
    [
      -0.4982587586848568,
      0.7522584770894817,
      0.4310978926425406
    ],
    [
      -0.503588701066139,
      0.7132506325956962,
      0.48751610769323095
    ],
    [
      -0.5070466573245862,
      0.7186348112176635,
      0.475886221067722
    ],
    [
      -0.5067655970261679,
      0.6940507020845236,
      0.5113533539605382
    ],
    [
      -0.5089565098545469,
      0.6974320348392581,
      0.5045312952202771
    ],
    [
      -0.5096709878101221,
      0.6684811180864061,
      0.5416350052817883
    ],
    [
      -0.5132749729160472,
      0.6733113782898662,
      0.5321659422054663
    ],
    [
      -0.5170933901106198,
      0.6421405486402473,
      0.5659239716568901
    ],
    [
      -0.5105241981426113,
      0.6181689571500214,
      0.5976890358095075
    ],
    [
      -0.52227926226884,
      0.6353872439007002,
      0.5687771290164438
    ],
    [
      -0.5076648407627731,
      0.5928102141217318,
      0.6251819411069507
    ],
    [
      -0.5143237744241037,
      0.602752485818646,
      0.610049584789291
    ],
    [
      -0.5049682630676477,
      0.563700400371081,
      0.6536428014718174
    ],
    [
      -0.5118360184116485,
      0.5750240145059763,
      0.6382564320067142
    ],
    [
      -0.49687265067745967,
      0.5341428576684979,
      0.6839656253134991
    ],
    [
      -0.5076161030830568,
      0.5515973572782432,
      0.661865732104654
    ],
    [
      -0.48500162517658957,
      0.5034159784053024,
      0.7150844539369451
    ],
    [
      -0.4985767658217394,
      0.5258815113803065,
      0.6891080064627743
    ],
    [
      -0.4720123306278849,
      0.4760340467083593,
      0.7420215267158332
    ],
    [
      -0.4856738868059251,
      0.4998518446842252,
      0.7171255183303705
    ],
    [
      -0.45777174069197624,
      0.44233612739525663,
      0.7712222661624892
    ],
    [
      -0.4733819191158149,
      0.4693484312718146,
      0.7454003009906253
    ],
    [
      -0.43612731810234745,
      0.4071007800672662,
      0.8025346829100144
    ],
    [
      -0.44026718418349614,
      0.40785024248046886,
      0.7998893587489199
    ],
    [
      -0.45839860244701924,
      0.4394251449471059,
      0.7725129534595744
    ],
    [
      -0.4117620162709062,
      0.37253425025549336,
      0.8316671656035817
    ],
    [
      -0.41827073059086334,
      0.373720678513651,
      0.8278782823472794
    ],
    [
      -0.2892403796434233,
      0.346662311864176,
      0.8922809223090635
    ],
    [
      -0.333694129637506,
      0.33073793073553076,
      0.8827574123269918
    ],
    [
      -0.39425667922983326,
      0.33707521792369083,
      0.8549514420973631
    ],
    [
      0.3434681550703082,
      0.8241334747541833,
      0.4503705610296865
    ],
    [
      0.3228649167137268,
      0.8359306870133517,
      0.4438221851877439
    ],
    [
      0.01566882825202666,
      0.9619957654159377,
      0.27261444412028624
    ],
    [
      -0.03448439588895529,
      0.9263377433594834,
      0.3751122654190793
    ],
    [
      -0.1078758750836993,
      0.9130687368165366,
      0.39327887996074806
    ],
    [
      -0.32797742638451655,
      0.6533455670175286,
      0.6823271780024106
    ],
    [
      -0.3300245845605083,
      0.6190797196813148,
      0.7126177616822139
    ],
    [
      -0.318855437140732,
      0.6088620499965681,
      0.7263733298241128
    ],
    [
      -0.32199924183428297,
      0.5823207901372386,
      0.7464710212942557
    ],
    [
      -0.317384486566219,
      0.551033157160961,
      0.7717703981083501
    ],
    [
      -0.3142456379953493,
      0.5733676549892956,
      0.7566367762757582
    ],
    [
      -0.30889429185695333,
      0.5409195464114227,
      0.7822981278056672
    ],
    [
      -0.31286413034987837,
      0.5140983958771439,
      0.7986356336258492
    ],
    [
      -0.2558082932385649,
      0.4599595968375097,
      0.8502936471522341
    ],
    [
      0.8490205664291658,
      -0.436512269424889,
      0.2976929902127887
    ],
    [
      0.8436895278219227,
      -0.43654478529697416,
      0.31243660328719447
    ],
    [
      0.8630218514684103,
      -0.42856687873236987,
      0.26743917877085926
    ],
    [
      0.852144260514993,
      -0.44098828840419974,
      0.2817436578908035
    ],
    [
      0.876428200443504,
      -0.41873893492704667,
      0.2377631465209099
    ],
    [
      0.8963989306442014,
      -0.40207020920637765,
      0.18657037280520217
    ],
    [
      0.889113237234606,
      -0.413234973934675,
      0.19676002564394943
    ],
    [
      0.8801177042046857,
      -0.4212768463434831,
      0.2189032788250614
    ],
    [
      0.9095261021336499,
      -0.39050915258886704,
      0.1423547374761179
    ],
    [
      0.8987299408120046,
      -0.4028301620661655,
      0.17324074006363874
    ],
    [
      0.9138810038100761,
      -0.3915341971418626,
      0.10734283089039891
    ],
    [
      0.9134159163710623,
      -0.39246403806234337,
      0.10790432126570286
    ],
    [
      0.9346718039631682,
      -0.3484103769608657,
      0.07070239106440727
    ],
    [
      0.9250488064031264,
      -0.3709050383181843,
      0.08193996779556008
    ],
    [
      0.945813771950422,
      -0.3228973925168631,
      0.03425759324187491
    ],
    [
      0.9454735073391142,
      -0.32384738424843496,
      0.034680234072459626
    ],
    [
      0.9361382426628635,
      -0.346061138699508,
      0.06234483864832258
    ],
    [
      0.9528083760300728,
      -0.30339651949210095,
      0.01033201466387866
    ],
    [
      0.9629505732978569,
      -0.2694607798814928,
      -0.01082042009287137
    ],
    [
      0.9536772440279214,
      -0.3008304446257419,
      -0.0008705225941776376
    ],
    [
      0.967204516009781,
      -0.2517891583928735,
      -0.03343118194281859
    ],
    [
      0.9748569183974638,
      -0.21763199856223026,
      -0.04785709826567128
    ],
    [
      0.967223127676646,
      -0.25159808790595367,
      -0.034319432534276766
    ],
    [
      0.979551793244289,
      -0.1907877381159471,
      -0.06386175174937163
    ],
    [
      0.9756291147143477,
      -0.21239382654424954,
      -0.0551061971795305
    ],
    [
      0.9849144194418447,
      -0.150579314742889,
      -0.08526110688406595
    ],
    [
      0.9801214793527827,
      -0.18523872335100985,
      -0.0710528048890459
    ],
    [
      0.9848620448731521,
      -0.12513890878813294,
      -0.11994584642908118
    ],
    [
      0.9845240112621515,
      -0.14721351185122084,
      -0.09508234944885043
    ],
    [
      0.988319980258644,
      -0.0882044767089144,
      -0.12427222903794795
    ],
    [
      0.9844742153885057,
      -0.12304872222360158,
      -0.12517799804408541
    ],
    [
      0.9880853620910232,
      -0.06331519502480522,
      -0.14028008875254702
    ],
    [
      0.985491326981856,
      -0.046132227527051206,
      -0.16333604019607198
    ],
    [
      0.986249871575738,
      -0.05924675941282041,
      -0.1542757671052701
    ],
    [
      0.9810535914466967,
      -0.037947653464074485,
      -0.1899837527424609
    ],
    [
      0.9754846640280234,
      -0.04436812301468265,
      -0.21554846301073072
    ],
    [
      0.9607600401128663,
      -0.02581987232939522,
      -0.27617653686585547
    ],
    [
      0.9622080205271161,
      -0.07747209938155096,
      -0.2610628258689929
    ],
    [
      0.9425422580159102,
      0.0013095809905040903,
      -0.3340843858247472
    ],
    [
      0.9309937387801291,
      0.0075560266332154085,
      -0.36495693556050557
    ],
    [
      0.9374656449885057,
      0.00018918432246080224,
      -0.3480777623973947
    ],
    [
      0.9221679121541375,
      0.016768178315787724,
      -0.3864261507574882
    ],
    [
      0.9268114001481684,
      0.0071890732759461555,
      -0.37545831430509635
    ],
    [
      0.9071203986910009,
      0.028137735314129726,
      -0.41992957758423205
    ],
    [
      0.9092399943994945,
      0.02380296083783823,
      -0.41559120736579536
    ],
    [
      0.8925555660120916,
      0.03556623746798785,
      -0.4495326510201516
    ],
    [
      0.8786158278285091,
      0.037039607733084005,
      -0.4760906369045741
    ],
    [
      0.8822577896111113,
      0.029100767917096853,
      -0.46986629797970325
    ],
    [
      0.8589045079360761,
      0.05215648956708911,
      -0.5094730089446595
    ],
    [
      0.8385829300752192,
      0.0615677097159087,
      -0.541283739370395
    ],
    [
      0.853895615360664,
      0.05018780440039082,
      -0.5180187857185305
    ],
    [
      0.8214469912383292,
      0.06953826966859564,
      -0.5660293893756702
    ],
    [
      0.8340952572070222,
      0.06044867698121777,
      -0.5482983306157077
    ],
    [
      0.7975491734546958,
      0.08704938083068342,
      -0.5969402995432007
    ],
    [
      0.8035309549183177,
      0.07550364607561207,
      -0.5904550820488763
    ],
    [
      0.8142819906855406,
      0.06792703254383511,
      -0.5764813595381743
    ],
    [
      0.7741326551174861,
      0.1040668740984871,
      -0.6244106965740744
    ],
    [
      0.777441556321241,
      0.09801757060790345,
      -0.6212706192609879
    ],
    [
      0.73961548679718,
      0.12397296340465731,
      -0.6615131412409264
    ],
    [
      0.7051672660873392,
      0.15110113371797088,
      -0.6927536172608928
    ],
    [
      0.7384683420424247,
      0.12323534574611306,
      -0.6629310351461519
    ],
    [
      0.6386724435028385,
      0.2581709178049794,
      -0.7248760494800806
    ],
    [
      0.6260107951856648,
      0.22343436850003653,
      -0.7471195133872502
    ],
    [
      0.6226733553611035,
      0.20588180354215072,
      -0.7549109718990552
    ],
    [
      0.6350711089661114,
      0.16036021768420206,
      -0.7556250969500872
    ],
    [
      0.34533533912543285,
      -0.45198617377204653,
      -0.8224670219954279
    ],
    [
      0.29661632790467757,
      -0.4371915698368811,
      -0.8490478698423949
    ],
    [
      0.27999909932261113,
      -0.4484098603128769,
      -0.848839856246579
    ],
    [
      0.298771443559099,
      -0.4943816765056008,
      -0.8162857235362649
    ],
    [
      0.31509116867331366,
      -0.4991523799143576,
      -0.8071954268019104
    ],
    [
      0.3445820392052604,
      -0.4587448135856279,
      -0.8190338297441883
    ],
    [
      0.3204755753619904,
      -0.5055738301956902,
      -0.8010558705968395
    ],
    [
      0.336067695755512,
      -0.5106606084437345,
      -0.7913812272561533
    ],
    [
      0.39224314012223904,
      -0.47437008706983447,
      -0.7881106137595174
    ],
    [
      0.35702109491848005,
      -0.4347010424171982,
      -0.8267834913111237
    ],
    [
      0.32154471843272353,
      -0.40522045293536335,
      -0.8558068582167822
    ],
    [
      0.4130128736168186,
      -0.4673894611580609,
      -0.7816440736199279
    ],
    [
      0.3671945545347191,
      -0.4300485195952601,
      -0.8247584069980581
    ],
    [
      0.4026401016902446,
      -0.36924670612459043,
      -0.8375785446911888
    ],
    [
      0.37455936031050246,
      -0.37205322612614017,
      -0.8492830402951176
    ],
    [
      0.32406759811767877,
      -0.39418831043752417,
      -0.8599975393945315
    ],
    [
      0.42350296150165756,
      -0.4669846684052942,
      -0.7762541858655082
    ],
    [
      0.43657876171222704,
      -0.4544043507771109,
      -0.7764764457577904
    ],
    [
      0.4610814006840496,
      -0.36608014889449897,
      -0.8083249758164203
    ],
    [
      0.46195641737323095,
      -0.3378988008333593,
      -0.8200126028562409
    ],
    [
      0.4808041465090767,
      -0.30061546050958926,
      -0.8236854482156923
    ],
    [
      0.5275047551568764,
      -0.2872688747812751,
      -0.7995094288804754
    ],
    [
      0.5995807142667451,
      -0.22392697258465172,
      -0.768348669569
    ],
    [
      0.6149376763404756,
      -0.18761793913437713,
      -0.7659315655670197
    ],
    [
      0.449163121866497,
      -0.13704000015295983,
      -0.8828774140916842
    ],
    [
      0.44060764812074965,
      -0.15304066822297654,
      -0.8845583385437992
    ],
    [
      0.4619422409502999,
      -0.2690585133361413,
      -0.8451135322707598
    ],
    [
      0.46750441432210577,
      -0.28712076445796736,
      -0.8360629696418909
    ],
    [
      0.6348299418041146,
      -0.05640460527496213,
      -0.7705903357120178
    ],
    [
      0.5663564072004784,
      -0.05032073550643136,
      -0.8226227832980665
    ],
    [
      0.47190774232323257,
      -0.07698026060802667,
      -0.8782807764104311
    ],
    [
      0.45963220030589474,
      -0.101724981212616,
      -0.8822642850298626
    ],
    [
      0.6512629464449059,
      -0.11232428814344923,
      -0.7504930571837203
    ],
    [
      0.6425976324619938,
      -0.008386967804838722,
      -0.766157909001324
    ],
    [
      0.6249774126140167,
      0.06729531820254168,
      -0.7777368281560978
    ],
    [
      0.5514249563515478,
      0.09784415992210413,
      -0.8284666787999571
    ],
    [
      0.5152710230576091,
      0.08597056890318705,
      -0.8527044236308542
    ],
    [
      0.5062933761917449,
      0.052758185475083694,
      -0.8607459503766143
    ],
    [
      0.5138963591146624,
      0.02015962261068797,
      -0.8576153693264181
    ],
    [
      0.5241871325628711,
      0.21382860549493657,
      -0.8243210403281028
    ],
    [
      0.5276341148599735,
      0.14913771148908778,
      -0.8362775758369525
    ],
    [
      0.5078939337625216,
      0.31889934099542194,
      -0.8002168220925607
    ],
    [
      0.4782200405555415,
      0.24364619116798106,
      -0.8437666302600452
    ],
    [
      0.5380455483130904,
      0.33465141559518624,
      -0.7736377821568721
    ],
    [
      0.5079856920973747,
      0.32110280068038116,
      -0.799276878196515
    ],
    [
      0.553862581893422,
      0.3608937210359168,
      -0.7503279033164115
    ],
    [
      0.5736358807786268,
      0.396638642680139,
      -0.7166726333662993
    ],
    [
      0.553439932840099,
      0.36921032862349856,
      -0.7465842042098634
    ],
    [
      0.5921640661061489,
      0.42141877792594507,
      -0.6868390877229074
    ],
    [
      0.5736325162240196,
      0.3968471477079929,
      -0.7165598912069601
    ],
    [
      0.5974148467154021,
      0.43110093580483716,
      -0.6762007720139087
    ],
    [
      0.592209704651722,
      0.4243383761724946,
      -0.6849997140317728
    ],
    [
      0.5786115047628999,
      0.48977297616111465,
      -0.6521741779450462
    ],
    [
      0.5784474544614766,
      0.48957913822281823,
      -0.6524651790280004
    ],
    [
      0.5814943678221245,
      0.5163396261910455,
      -0.6286952287205935
    ],
    [
      0.5792401880475733,
      0.5140211675333224,
      -0.6326634523016895
    ],
    [
      0.5852857537540531,
      0.541231753540123,
      -0.6037456214436949
    ],
    [
      0.5823842379838351,
      0.5392373649159596,
      -0.6083187187868543
    ],
    [
      0.5867013786925416,
      0.5636000810690127,
      -0.5814950050166151
    ],
    [
      0.5736969479917586,
      0.600514151436343,
      -0.5570049961980864
    ],
    [
      0.5678484090744296,
      0.5927265277842104,
      -0.5711597391032678
    ],
    [
      0.5711338018767802,
      0.6197372547311878,
      -0.5382675129078717
    ],
    [
      0.5671968243490298,
      0.643090771463997,
      -0.5145114402092699
    ],
    [
      0.5701097557011187,
      0.6214396557750791,
      -0.5373896358179623
    ],
    [
      0.5640054542036503,
      0.6479864325346801,
      -0.5118705215965388
    ],
    [
      0.5615427602478058,
      0.6660212030642622,
      -0.4910045676794749
    ],
    [
      0.5460064501943108,
      0.6938074418302119,
      -0.46958299586678476
    ],
    [
      0.548874175800347,
      0.6836943255448806,
      -0.4809357632337405
    ],
    [
      0.5391606240728126,
      0.714926551184581,
      -0.44518069124877374
    ],
    [
      0.5452425939041146,
      0.6948506762812786,
      -0.46892755460109475
    ],
    [
      0.5301070113316992,
      0.7382198481378547,
      -0.4171546623882999
    ],
    [
      0.5245573693349614,
      0.7333737339567191,
      -0.43243789452216624
    ],
    [
      0.5286338664951068,
      0.757251116253772,
      -0.38355831646159116
    ],
    [
      0.5281913629221512,
      0.7569637790148382,
      -0.3847333120409715
    ],
    [
      0.5256637992549688,
      0.7763734080715289,
      -0.347738265642755
    ],
    [
      0.5153092091858741,
      0.7899504433313503,
      -0.33231719186468844
    ],
    [
      0.5287552082532081,
      0.8145501276847097,
      -0.2385917417555137
    ],
    [
      0.5014174269713015,
      0.8207472802569112,
      -0.27377813258250333
    ],
    [
      0.5039423635220726,
      0.800082517071688,
      -0.3254382585437971
    ],
    [
      0.9196671203750982,
      -0.12918187682301427,
      0.37084286483827383
    ],
    [
      0.9304450558408404,
      -0.0782021059754682,
      0.3579894253778135
    ],
    [
      0.937284056115382,
      -0.07318970972201104,
      0.3407959280019424
    ],
    [
      0.9484179173032339,
      -0.047572002971828856,
      0.3134331805528009
    ],
    [
      0.9508918581965259,
      -0.047975118543443204,
      0.3057827039194674
    ],
    [
      0.9580396321210938,
      -0.04019147825427809,
      0.28380399637957016
    ],
    [
      0.9583217870657942,
      -0.0394364545761331,
      0.28295603631215793
    ],
    [
      0.9614898183194193,
      -0.035821797595183794,
      0.27249610655042344
    ],
    [
      0.9734913097453329,
      0.004906920747237399,
      0.22867136239393132
    ],
    [
      0.9727388148582635,
      0.011191831851971286,
      0.23163320350920824
    ],
    [
      0.972121846336723,
      0.032271907348879504,
      0.23224478437834944
    ],
    [
      0.9742751273240166,
      0.10176796978940292,
      0.2010752510944957
    ],
    [
      0.9776109133587794,
      0.10612679934446397,
      0.1816975633923395
    ],
    [
      0.9719190078540448,
      0.15298824308695727,
      0.1787960839872483
    ],
    [
      0.9704512967325625,
      0.17090442763216873,
      0.1703407094202932
    ],
    [
      0.9705638918951653,
      0.1855782349075938,
      0.15351368172867025
    ],
    [
      0.9672689092899238,
      0.2102954613658953,
      0.14200942239860812
    ],
    [
      0.9682965282565528,
      0.2144811551283027,
      0.12806118639594052
    ],
    [
      0.9668643088314519,
      0.23148174227053897,
      0.10765505702601445
    ],
    [
      0.9645578183910662,
      0.24333854334472263,
      0.10205179226028044
    ],
    [
      0.962402245429083,
      0.25842552820078135,
      0.08365503192998185
    ],
    [
      0.9623198285643915,
      0.2587926313516298,
      0.08346808677512525
    ],
    [
      0.9585886420560655,
      0.27865403817685774,
      0.05881957436804872
    ],
    [
      0.9585158157625827,
      0.2797092098151248,
      0.05486518821246363
    ],
    [
      0.9548446889781802,
      0.29497963343127587,
      0.0354772573758522
    ],
    [
      0.9542983047796019,
      0.29787127313356265,
      0.02423737066120704
    ],
    [
      0.9500064810552349,
      0.3121834287988926,
      0.00540303029940474
    ],
    [
      0.9493135919889594,
      0.3143210506168261,
      -0.002445650047375104
    ],
    [
      0.947352289275689,
      0.3200309222685238,
      -0.010190622948043983
    ],
    [
      0.9449798564138585,
      0.3255842731761317,
      -0.031748260305303116
    ],
    [
      0.9421697712177495,
      0.3326029700650051,
      -0.041126469668950026
    ],
    [
      0.9386739790330413,
      0.338502241915913,
      -0.06563073444795774
    ],
    [
      0.9361134534679358,
      0.3439949576702758,
      -0.07320567828904918
    ],
    [
      0.9322482758216155,
      0.3491412882346713,
      -0.09493952326328232
    ],
    [
      0.9305243589326438,
      0.3524119750062419,
      -0.09965047568974425
    ],
    [
      0.926085786312989,
      0.357338742818228,
      -0.12113686173143623
    ],
    [
      0.9230845004211822,
      0.36247505462170326,
      -0.1285567573454222
    ],
    [
      0.9182770731970663,
      0.3668886986801036,
      -0.1488620153748091
    ],
    [
      0.90652347526215,
      0.38450703328235736,
      -0.17426855756284368
    ],
    [
      0.8987761203450849,
      0.39809256349568617,
      -0.18364039965887266
    ],
    [
      0.8884115835742132,
      0.41816958764160583,
      -0.1893648704031665
    ],
    [
      0.8838296291724171,
      0.4277551099109158,
      -0.18939575639926068
    ],
    [
      0.8801874536305534,
      0.4334289793057894,
      -0.1934150107135016
    ],
    [
      0.8669611214701038,
      0.4026030484507011,
      -0.2937502327445925
    ],
    [
      0.8791993930447501,
      0.4353069525517944,
      -0.19369120870553944
    ],
    [
      0.8406908678955747,
      0.46132270261485486,
      -0.2835846058747044
    ],
    [
      0.8410363958680556,
      0.45896520236153227,
      -0.28637165335715264
    ],
    [
      0.8475480902859175,
      0.4406839477531215,
      -0.29573618791994055
    ],
    [
      0.8622740142077232,
      0.41045611416865807,
      -0.2966636188744159
    ],
    [
      0.8689552103903354,
      0.4564113928673127,
      -0.19132559367843976
    ],
    [
      0.8309624232324755,
      0.4903369150199926,
      -0.2628139283681308
    ],
    [
      0.8319792362932411,
      0.4837392490641691,
      -0.27167423376490624
    ],
    [
      0.8594863585759331,
      0.4774920036129799,
      -0.18244063666723045
    ],
    [
      0.8232203342760298,
      0.5154172193314821,
      -0.2380196866880229
    ],
    [
      0.8250736498237644,
      0.5040435678202261,
      -0.2553302843486244
    ],
    [
      0.8546298443844702,
      0.4899393071002351,
      -0.17195145956204522
    ],
    [
      0.8158747572952691,
      0.5394920758975134,
      -0.20807854394958022
    ],
    [
      0.8187380111910773,
      0.5247594261636995,
      -0.23301419202105322
    ],
    [
      0.8511180495654962,
      0.5022572895520047,
      -0.152760206846218
    ],
    [
      0.8118613852148236,
      0.5567559280683121,
      -0.1757951300743572
    ],
    [
      0.8106829785921742,
      0.5564710912391434,
      -0.1820248137920691
    ],
    [
      0.8142047768083274,
      0.5427364955108208,
      -0.20617390199327987
    ],
    [
      0.851133983438226,
      0.5025633006246849,
      -0.1516610401579792
    ],
    [
      0.8464713531980974,
      0.516527501844549,
      -0.12917270630133693
    ],
    [
      0.8118593526861018,
      0.5662882575475517,
      -0.14213374272093682
    ],
    [
      0.8089578126843097,
      0.5661548784267693,
      -0.15829059015174504
    ],
    [
      0.8467110837436949,
      0.5189591893386175,
      -0.11731027434365152
    ],
    [
      0.8403564883607999,
      0.5339682777898713,
      -0.09316034984918982
    ],
    [
      0.8090123234496078,
      0.575709088016977,
      -0.1185668861079172
    ],
    [
      0.808269559300404,
      0.5756352938401036,
      -0.12387222446516497
    ],
    [
      0.8403889041830824,
      0.5361343931763086,
      -0.07941285903069543
    ],
    [
      0.8370434185302271,
      0.5429286016963557,
      -0.06772627965030269
    ],
    [
      0.8055773197196191,
      0.5863116036894265,
      -0.08534568139330483
    ],
    [
      0.8040196203068783,
      0.5867567618719565,
      -0.096275399553153
    ],
    [
      0.8366423296187012,
      0.5455066861392647,
      -0.049518356874498515
    ],
    [
      0.8334185920017507,
      0.5512459689387733,
      -0.0392598043114395
    ],
    [
      0.8020998054814629,
      0.5947614184512874,
      -0.05380294758107651
    ],
    [
      0.8005843125486718,
      0.5955838936418821,
      -0.06591345943997988
    ],
    [
      0.8286305337228353,
      0.5596945181815076,
      -0.010652929164270011
    ],
    [
      0.7990671463534127,
      0.6008428019398397,
      -0.02190029624676829
    ],
    [
      0.7973639213707409,
      0.6023585787594955,
      -0.03707990683800973
    ],
    [
      0.8326610808950549,
      0.5533432049572901,
      -0.022064040660618043
    ],
    [
      0.8274082895033371,
      0.5615195203021163,
      0.009557760241977976
    ],
    [
      0.822623443577955,
      0.5681805090054082,
      0.02148439578630283
    ],
    [
      0.7944737351019218,
      0.6072576737862936,
      0.007042858855661884
    ],
    [
      0.7935377085985295,
      0.6085049334280128,
      -0.0044329477737827545
    ],
    [
      0.787042370760778,
      0.6162439622460153,
      0.028419810389684032
    ],
    [
      0.8208254941723483,
      0.5695699566498135,
      0.04284358293431976
    ],
    [
      0.8166191054037147,
      0.5747683329131892,
      0.052674473607525196
    ],
    [
      0.7873570841988905,
      0.6154435577265771,
      0.036028450073164096
    ],
    [
      0.779793299816918,
      0.623485492393991,
      0.05646459363941915
    ],
    [
      0.8145587740664844,
      0.5757349481223475,
      0.07087505274681713
    ],
    [
      0.8080727697085686,
      0.5829216215608434,
      0.08497518445051905
    ],
    [
      0.7799418284945403,
      0.6226150192451854,
      0.0635710781323593
    ],
    [
      0.7705763693040576,
      0.6314253789303798,
      0.0866836196337173
    ],
    [
      0.8037056164236793,
      0.5840635717059685,
      0.11369708147134051
    ],
    [
      0.7706445815755916,
      0.6301135111828146,
      0.09520447422808717
    ],
    [
      0.7619161472278727,
      0.6373089163817426,
      0.11541719843144622
    ],
    [
      0.8041858517619264,
      0.5820978998579486,
      0.12019630113656055
    ],
    [
      0.7921822614061522,
      0.5941502976951807,
      0.1394011781232958
    ],
    [
      0.7617611690850767,
      0.6352791862716314,
      0.1270443889520151
    ],
    [
      0.7538278341690562,
      0.640982543730316,
      0.1445163487810403
    ],
    [
      0.7839735671661148,
      0.5970991560309507,
      0.16987655474480254
    ],
    [
      0.7533365186140342,
      0.638454718817826,
      0.1576694699101183
    ],
    [
      0.7444806744655182,
      0.6440321667063292,
      0.1759860607972067
    ],
    [
      0.7840237172716582,
      0.5963286287244756,
      0.17233391227241804
    ],
    [
      0.7747404790334508,
      0.5987477250544524,
      0.203170745652855
    ],
    [
      0.7455416098547619,
      0.6202500216312099,
      0.24383932956283635
    ],
    [
      0.7398970004281613,
      0.6325368100473939,
      0.22901880423335688
    ],
    [
      0.743793302086574,
      0.6155951392367672,
      0.2604114980549352
    ],
    [
      0.7336013176301617,
      0.6221760090177998,
      0.2733607882889818
    ],
    [
      0.7011799133357908,
      0.6511922740043294,
      0.29033661741413735
    ],
    [
      0.6812197576782173,
      0.6460659572757586,
      0.34429409027485297
    ],
    [
      0.6354764576151429,
      0.6788903922567827,
      0.36780090690255396
    ],
    [
      0.6807487367311282,
      0.6371204766426521,
      0.3614673646148608
    ],
    [
      0.6752290850731666,
      0.634248704563163,
      0.37655579059576805
    ],
    [
      0.6745054885863476,
      0.6295135138805354,
      0.3856878034222413
    ],
    [
      0.6590799666682773,
      0.6203537244897107,
      0.42517626232926803
    ],
    [
      0.6258811399433937,
      0.6735321572629704,
      0.39322669262887966
    ],
    [
      0.6514848281043591,
      0.6153425398107597,
      0.4437579040975805
    ],
    [
      0.6224385595560874,
      0.6294270682575264,
      0.4651793259835162
    ],
    [
      0.6125643046577788,
      0.6359313738886504,
      0.4694211971814071
    ],
    [
      0.6023902695769418,
      0.6739351538342281,
      0.4277117856050435
    ],
    [
      0.6127695424342193,
      0.6806930792195769,
      0.40146035889926707
    ],
    [
      0.658874030883988,
      0.6198373773788171,
      0.4262471548653849
    ],
    [
      0.5880045135742445,
      0.6432905748610173,
      0.4903345065476202
    ],
    [
      0.5661247721674648,
      0.6434702039565628,
      0.515217273544313
    ],
    [
      0.559927757047534,
      0.6414142141370965,
      0.5244699350683589
    ],
    [
      0.528620301441973,
      0.6688760794603604,
      0.5226522431111678
    ],
    [
      0.47361599114815794,
      0.6989723271396615,
      0.5358410014376594
    ],
    [
      0.453645560623687,
      0.6984428113046561,
      0.5535190553750335
    ],
    [
      0.45119801502785184,
      0.6990377566086908,
      0.5547671277846364
    ],
    [
      0.4500692490384731,
      0.6995905170721791,
      0.5549871885842286
    ],
    [
      0.43750458574785733,
      0.7129719024162103,
      0.5479605860046921
    ],
    [
      0.431999551863693,
      0.759123969312496,
      0.4869365322142188
    ],
    [
      0.41877575066928363,
      0.7252950609060174,
      0.5464192028806405
    ],
    [
      0.40013902576000515,
      0.7506744099720055,
      0.5257154080650625
    ],
    [
      0.39241536176024067,
      0.7542199781139349,
      0.5264621624280277
    ],
    [
      0.3755770070870528,
      0.776008822480394,
      0.5067072322161231
    ],
    [
      0.9104315880030591,
      -0.12968077273770942,
      0.39280684916174596
    ],
    [
      0.9010874726182405,
      -0.11720350245935836,
      0.41749815053689865
    ],
    [
      0.8960988966706145,
      -0.09619989364742842,
      0.43330399011309706
    ],
    [
      0.911671852085059,
      -0.05496121764891274,
      0.4072268393295647
    ],
    [
      0.9192092421367216,
      -0.05129205707161026,
      0.3904145156776278
    ],
    [
      0.8903196450294459,
      -0.09517832272921245,
      0.4452774601943099
    ],
    [
      0.8830185436018967,
      -0.0857176730629773,
      0.46144418100118434
    ],
    [
      0.8854505007944301,
      -0.04931295560138704,
      0.46210999021093313
    ],
    [
      0.899461225293393,
      -0.020699315573661243,
      0.4365100715086539
    ],
    [
      0.8976536937430033,
      0.0024360246631397408,
      0.4406948058388969
    ],
    [
      0.8701335822402121,
      -0.0210783835831102,
      0.49236495692051363
    ],
    [
      0.882355942046172,
      0.01856223673086246,
      0.47021637030558583
    ],
    [
      0.772191496461133,
      0.4340356498525019,
      0.46404024335205274
    ],
    [
      0.7722636836833557,
      0.42212424416730016,
      0.47478408287346713
    ],
    [
      0.7624881723074954,
      0.4274007766741074,
      0.48573692796568896
    ],
    [
      0.7183184832378482,
      0.4858088572672019,
      0.49800432813341367
    ],
    [
      0.7208412442249839,
      0.5246581998191886,
      0.45290360341541286
    ],
    [
      0.7425705244764597,
      0.520331819936187,
      0.4217153226296751
    ],
    [
      0.76606339327179,
      0.4659681548566462,
      0.4427420876180663
    ],
    [
      0.6769353837172672,
      0.548288778784414,
      0.49105794090988103
    ],
    [
      0.6797424144566097,
      0.5540003083867777,
      0.4806598675737906
    ],
    [
      0.6957504446430834,
      0.5015307058912275,
      0.5141967228864832
    ],
    [
      0.6347866185788525,
      0.5670187984211396,
      0.5249148798712736
    ],
    [
      0.6734144784300976,
      0.5774630438992634,
      0.46157271710026043
    ],
    [
      0.6469175145213166,
      0.5537663635219985,
      0.5242523667444753
    ],
    [
      0.5942921718649123,
      0.5874516269825586,
      0.5492880850843483
    ],
    [
      0.5576005046348821,
      0.6186426439148476,
      0.5535006380854244
    ],
    [
      0.5574250544055295,
      0.6191647093441147,
      0.5530934563198254
    ],
    [
      0.49617159340544187,
      0.6428525842525871,
      0.583570308375328
    ],
    [
      0.4736556871474976,
      0.6359949326981578,
      0.6092296247024579
    ],
    [
      0.4551024225079464,
      0.6420355283228483,
      0.6169863575465828
    ],
    [
      0.4538882444994645,
      0.6438071905196806,
      0.616033897557878
    ],
    [
      0.40495016123297345,
      0.6921389579575771,
      0.5974604838772085
    ],
    [
      0.3529897156336755,
      0.7367884094811237,
      0.5766637671218238
    ],
    [
      0.35091395395563724,
      0.7378309449668596,
      0.5765976877932584
    ],
    [
      0.34966535984707103,
      0.7442941584861966,
      0.5689994215870019
    ],
    [
      0.33559579164164877,
      0.7655263689767605,
      0.5489488528393804
    ],
    [
      0.32583151080510514,
      0.7731692881629113,
      0.5440984087535267
    ],
    [
      0.3125957655471708,
      0.7930474850232317,
      0.5228379996330655
    ],
    [
      0.3075351872853257,
      0.7950619969356054,
      0.5227796185871701
    ],
    [
      0.2733571423047455,
      0.8192455958114433,
      0.5040957513156964
    ],
    [
      0.27119983618375554,
      0.8199177251275322,
      0.5041681989927534
    ],
    [
      0.2518422861233819,
      0.8324555655105025,
      0.49355161267160114
    ],
    [
      0.23780828411339372,
      0.854568446497602,
      0.46169252783396714
    ],
    [
      0.16995124069628972,
      0.8577748264300165,
      0.4851174321014931
    ],
    [
      0.1663291909702012,
      0.871701806349224,
      0.4609452907219013
    ],
    [
      0.12641207637100543,
      0.9066206859044429,
      0.40256542181082633
    ],
    [
      0.030283997736079718,
      0.8834288080417625,
      0.4675857360987736
    ],
    [
      0.16198133707355555,
      0.8530340956470184,
      0.4960795078447977
    ],
    [
      0.09150961422653557,
      0.8552314279489465,
      0.5101031220768176
    ],
    [
      0.019762634969688393,
      0.8438344893947438,
      0.5362394919874579
    ],
    [
      0.01711456066147761,
      0.8420918381985105,
      0.5390625453997135
    ],
    [
      -0.027608198775035724,
      0.838315553783791,
      0.5444858305269055
    ],
    [
      -0.07960044628457089,
      0.8578505880909847,
      0.5076968952665054
    ],
    [
      -0.10383917698016087,
      0.8789018497767404,
      0.46556306101655753
    ],
    [
      -0.17841445514347817,
      0.8670270274045102,
      0.46522297443909044
    ],
    [
      -0.2006108277814736,
      0.856519714897169,
      0.4755305182312743
    ],
    [
      -0.21327236427780535,
      0.8409166105483105,
      0.4973672212151664
    ],
    [
      -0.21325491769477622,
      0.8405177925388942,
      0.49804837165132726
    ],
    [
      -0.2237382044928725,
      0.8276037524406492,
      0.5147943713721647
    ],
    [
      -0.22333120514807772,
      0.8183764533133966,
      0.5295121844389354
    ],
    [
      -0.22849194113092172,
      0.8116506522461221,
      0.5376008291908301
    ],
    [
      -0.22705371720164566,
      0.7913580072075009,
      0.5676258573510266
    ],
    [
      -0.20709376710708818,
      0.7735796861022226,
      0.5989045340247324
    ],
    [
      0.5831253492612635,
      0.7799138900893708,
      -0.22737447326952573
    ],
    [
      0.5969680871175012,
      0.778478745377324,
      -0.19390705494906374
    ],
    [
      0.5987282580937254,
      0.7844559018501348,
      -0.16172016266546665
    ],
    [
      0.5969245564436736,
      0.7848974178387774,
      -0.1661839865466683
    ],
    [
      0.5979252765247706,
      0.7908576034860497,
      -0.13049756588181616
    ],
    [
      0.593579042974115,
      0.7954536517898443,
      -0.12213683963544696
    ],
    [
      0.5986142907752795,
      0.7949648877978832,
      -0.09844672695477472
    ],
    [
      0.5960684188990423,
      0.8001103488515204,
      -0.06727458399644062
    ],
    [
      0.593988629764981,
      0.800586869235223,
      -0.07898210251736823
    ],
    [
      0.5918248336963134,
      0.8048936994802146,
      -0.04346836501853877
    ],
    [
      0.5911753307489983,
      0.8051281285397798,
      -0.04775379511456893
    ],
    [
      0.5834208237834645,
      0.8120695696557109,
      -0.01277326955060231
    ],
    [
      0.5831589351675617,
      0.8122621925356577,
      -0.012481462710824199
    ],
    [
      0.5757126311558438,
      0.8175489243897958,
      0.0129893247208378
    ],
    [
      0.5666031134249851,
      0.8229435878615806,
      0.041530266729487064
    ],
    [
      0.5752820419324717,
      0.8178446423483096,
      0.01344296143606884
    ],
    [
      0.5512703832172589,
      0.8320078569367961,
      0.062160200956371175
    ],
    [
      0.5551483851977137,
      0.8301438357763483,
      0.051686384424740314
    ],
    [
      0.53667837471665,
      0.8387483275289752,
      0.09207369428257993
    ],
    [
      0.5456183603805858,
      0.8353385387564463,
      0.06715750504483016
    ],
    [
      0.519836561221879,
      0.8459531220111207,
      0.11888340917322911
    ],
    [
      0.5273379573936617,
      0.8438831107013056,
      0.09887352610769251
    ],
    [
      0.5044395225085365,
      0.8513915528422832,
      0.14378175085929842
    ],
    [
      0.5118922358329148,
      0.8499787296758652,
      0.1245090277553476
    ],
    [
      0.47236387654133005,
      0.8660444380845199,
      0.16382734631835794
    ],
    [
      0.23242852428450525,
      0.9577744831094711,
      0.1692483991159524
    ],
    [
      0.27441282570626874,
      0.9492916765217,
      0.153437003276658
    ],
    [
      0.3181188527138282,
      0.9351640942056486,
      0.15578354359997837
    ],
    [
      0.08850185505275586,
      0.985564158391152,
      0.14432848418438132
    ],
    [
      0.03131715637577133,
      0.9863582297333822,
      0.16160655417947584
    ],
    [
      0.007813396749754998,
      0.988176946339651,
      0.1531184951404417
    ],
    [
      -0.0050683112092404295,
      0.9908125763941797,
      0.13514714455220225
    ],
    [
      0.010239590208424324,
      0.9946397609965587,
      0.10289264617586659
    ],
    [
      0.05578299951134517,
      0.9930265844563638,
      0.10385788139782841
    ],
    [
      -0.02503532417412967,
      0.9964058919794231,
      0.0809229940881224
    ],
    [
      -0.023359502005991076,
      0.9964505706419976,
      0.08087393852947673
    ],
    [
      0.008907216528925286,
      0.9948610397902795,
      0.10085719112245183
    ],
    [
      -0.08687681718635402,
      0.9902392922132268,
      0.10898881957621302
    ],
    [
      -0.05256201943977042,
      0.996597979854052,
      0.06347992330836434
    ],
    [
      -0.10397147597596303,
      0.9906538822037311,
      0.0882882656872126
    ],
    [
      -0.07885057145894432,
      0.9961732950099477,
      0.03770084468047988
    ],
    [
      -0.056134347386779755,
      0.9969916784855066,
      0.05344649730443247
    ],
    [
      -0.12030392007137469,
      0.9893656044187024,
      0.08174758472686489
    ],
    [
      -0.1367081984615399,
      0.9888168954358774,
      0.05959879003766423
    ],
    [
      -0.09332175909022027,
      0.9952729751797161,
      0.026884087435188556
    ],
    [
      -0.07935394845323687,
      0.9961716846559321,
      0.0366732266734635
    ],
    [
      -0.1448822025426242,
      0.9878642245849261,
      0.05597697001107421
    ],
    [
      -0.15926644725637357,
      0.9865348171507402,
      0.0371921137835486
    ],
    [
      -0.11415445852686514,
      0.9934584341978075,
      0.0030164747104464078
    ],
    [
      -0.09991344440589983,
      0.9949156790123793,
      0.012652876443146405
    ],
    [
      -0.16892189117776116,
      0.9850986230996589,
      0.03234342975141727
    ],
    [
      -0.18911660592982332,
      0.9819306394477705,
      0.0068650327950034885
    ],
    [
      -0.12948274694853493,
      0.9914309103761929,
      -0.017290696726709756
    ],
    [
      -0.12039185755482426,
      0.9926609453697264,
      -0.011403866545171783
    ],
    [
      -0.1390180265643003,
      0.9893539555538845,
      -0.04304345385828098
    ],
    [
      -0.18951856666096523,
      0.9818548556508238,
      0.006614780848485704
    ],
    [
      -0.19335036795718968,
      0.9811281992423413,
      0.0017583692160306392
    ],
    [
      -0.1537294491743062,
      0.9867692753533106,
      -0.05151362611257899
    ],
    [
      -0.2129999254835577,
      0.976995046763207,
      -0.010569311432525444
    ],
    [
      -0.17971285759916167,
      0.9806970342322847,
      -0.07704943777565368
    ],
    [
      -0.15961388897587508,
      0.985083246932746,
      -0.06429932393451525
    ],
    [
      -0.24745524324658602,
      0.9687317067185732,
      -0.01802173653933326
    ],
    [
      -0.2502811942192356,
      0.9678516013348858,
      -0.024951986167251923
    ],
    [
      -0.19325661192170818,
      0.9759428795676568,
      -0.10093254068798839
    ],
    [
      -0.27824619520653554,
      0.9586323013497512,
      -0.06002637471950391
    ],
    [
      -0.21535224669075703,
      0.9706153407595793,
      -0.10737443889217234
    ],
    [
      -0.1940951439230008,
      0.9752322297692685,
      -0.1060621191791417
    ],
    [
      -0.2603270970432443,
      0.9564334650258032,
      -0.13215456679121285
    ],
    [
      -0.25661667931067916,
      0.9574379762865529,
      -0.1321378123924798
    ],
    [
      -0.28727899161073567,
      0.9555751446928487,
      -0.06593120523970508
    ],
    [
      -0.3060632901111221,
      0.947808808286761,
      -0.08935169489374561
    ],
    [
      -0.3313839906765797,
      0.9383925188515442,
      -0.09800066982790884
    ],
    [
      -0.28918778060886424,
      0.9408665945410903,
      -0.1764666507393706
    ],
    [
      -0.2748243173153228,
      0.9450678104929806,
      -0.17697013358804542
    ],
    [
      -0.38198530061945674,
      0.9185862518047082,
      -0.1014225226763781
    ],
    [
      -0.3964774771210385,
      0.9104607816686665,
      -0.1177572722977961
    ],
    [
      -0.39496741789860584,
      0.9087842391681104,
      -0.13458062801958817
    ],
    [
      -0.38330662690862166,
      0.9064685481172221,
      -0.17717449320427084
    ],
    [
      -0.368276520224028,
      0.9065264056346601,
      -0.20635474440580423
    ],
    [
      -0.3625210788687832,
      0.9071938911536478,
      -0.21348937029584644
    ],
    [
      -0.34232609687866483,
      0.9161335491676972,
      -0.20859569383191365
    ],
    [
      -0.1975197403646412,
      0.9773165702334663,
      0.07640859711694012
    ],
    [
      -0.22244601981661463,
      0.9732525093388726,
      0.05742230693148825
    ],
    [
      -0.2799304403018106,
      0.9593749302987774,
      0.03519505230356194
    ],
    [
      -0.33594988945104926,
      0.9418291025579587,
      0.009778208051480799
    ],
    [
      -0.37153372966464987,
      0.9283919472969229,
      0.007147021456707185
    ],
    [
      -0.37901427499086277,
      0.9253885380087782,
      0.002057443833147774
    ],
    [
      -0.383536874421083,
      0.9233762690179079,
      -0.016605173105833936
    ],
    [
      -0.3679004433554067,
      0.9298273901847242,
      0.008383808273104426
    ],
    [
      -0.5516334933908656,
      0.8291939122655442,
      -0.09021055831304163
    ],
    [
      -0.5297799781424145,
      0.8413968897487366,
      -0.10669793194141677
    ],
    [
      -0.5252460685058636,
      0.8440280410585029,
      -0.10832005089585038
    ],
    [
      -0.456968059433485,
      0.8845685637638062,
      -0.09337370431996378
    ],
    [
      -0.46734111500810105,
      0.8818497269901496,
      -0.06271635536591211
    ],
    [
      -0.4985375948867532,
      0.8666250887254658,
      -0.02052369547888442
    ],
    [
      -0.556871411361272,
      0.8291364990440213,
      -0.049263547999797326
    ],
    [
      -0.5679817574136848,
      0.8224022937102832,
      -0.03242206880085559
    ],
    [
      -0.6438319151211007,
      0.7651178236506375,
      -0.008670697988500793
    ],
    [
      -0.683402720418411,
      0.7266656444565116,
      -0.07012676301753497
    ],
    [
      -0.6765357239852717,
      0.7319826346054138,
      -0.0806277669778927
    ],
    [
      -0.6166652515490229,
      0.7739743116759449,
      -0.14383230651605225
    ],
    [
      -0.8035560932156387,
      0.5909087241070041,
      -0.07158550712436215
    ],
    [
      -0.7902018268654358,
      0.6052468991028943,
      -0.0962146763485622
    ],
    [
      -0.7788416766831197,
      0.6196788940998265,
      -0.09697273260377352
    ],
    [
      -0.7529326975316738,
      0.6543925403415768,
      -0.06973346494312954
    ],
    [
      -0.7794046444229381,
      0.6254428419534198,
      -0.036737606089441585
    ],
    [
      -0.7960398346875331,
      0.6031786505325032,
      -0.049960956080055206
    ],
    [
      -0.8195101259661325,
      0.5685105008290724,
      -0.07210384099374097
    ],
    [
      -0.8244516611323988,
      0.559274903769734,
      -0.08655079704649206
    ],
    [
      -0.8055465861133293,
      0.5754332094128286,
      -0.14131991758422535
    ],
    [
      -0.7958921199276767,
      0.5883299226330948,
      -0.14291128566899536
    ],
    [
      -0.8191815095660163,
      0.5530947644045452,
      -0.15174925361735214
    ],
    [
      -0.8342195553968319,
      0.5430056727469591,
      -0.09603422701378159
    ],
    [
      -0.8374922604563262,
      0.5353507199406865,
      -0.1095733559527217
    ],
    [
      -0.8466139198771081,
      0.5190916495658601,
      -0.11742542323241542
    ],
    [
      -0.8493699254068438,
      0.5104254567469694,
      -0.13430034593782827
    ],
    [
      -0.8262842767257971,
      0.5375844509704617,
      -0.16809893548298824
    ],
    [
      -0.8234533613337407,
      0.5426825646879538,
      -0.16559044565393438
    ],
    [
      -0.8554244178638595,
      0.4987066995100257,
      -0.1397880294806894
    ],
    [
      -0.8581764640977204,
      0.4876240723552912,
      -0.16048651198270739
    ],
    [
      -0.8318689970215671,
      0.5222663454895103,
      -0.1877014548781215
    ],
    [
      -0.858738304752758,
      0.4864258626758614,
      -0.16111611983412186
    ],
    [
      -0.8612641808082735,
      0.47333156910330115,
      -0.18488168256174134
    ],
    [
      -0.8388328693957604,
      0.4995781462572157,
      -0.21628937330224735
    ],
    [
      -0.8318097544331924,
      0.5220121576065154,
      -0.18866859765414792
    ],
    [
      -0.8433797518433158,
      0.48184008804029366,
      -0.2377829340765001
    ],
    [
      -0.8387599843452105,
      0.49935471926633357,
      -0.21708651042306495
    ],
    [
      -0.8758154143553726,
      0.4405386926312684,
      -0.19716242104483278
    ],
    [
      -0.8751015117086722,
      0.4405347459382088,
      -0.20031595499698612
    ],
    [
      -0.8737733575257769,
      0.42573915041536364,
      -0.23508784630800308
    ],
    [
      -0.8454368279326964,
      0.46649540439105663,
      -0.26003578149386464
    ],
    [
      -0.8425765466985569,
      0.4796504616029615,
      -0.24494937770404857
    ],
    [
      -0.8459641067472975,
      0.4516055602039518,
      -0.2835439085717097
    ],
    [
      -0.8438775719138103,
      0.4630032603036577,
      -0.2711062975458802
    ],
    [
      -0.8769908054697108,
      0.4137180044443942,
      -0.24438604690148782
    ],
    [
      -0.8756732344270811,
      0.40349436628021473,
      -0.2653086558862
    ],
    [
      -0.8771784711115806,
      0.3959416104097816,
      -0.2716397816308549
    ],
    [
      -0.8757530252635909,
      0.3860293710221651,
      -0.2898930206988433
    ],
    [
      -0.8441572976717198,
      0.4345912304234703,
      -0.31389316530723266
    ],
    [
      -0.8423850688002988,
      0.44596092817482835,
      -0.30249999405580386
    ],
    [
      -0.8770779092114254,
      0.37717324717538503,
      -0.2974469411315078
    ],
    [
      -0.8759517693740192,
      0.3702150478807298,
      -0.30927223614995586
    ],
    [
      -0.8740093645815713,
      0.3688993815324962,
      -0.31626077361674143
    ],
    [
      -0.8426345558773558,
      0.41596686226180973,
      -0.3419628265490796
    ],
    [
      -0.8407795739459797,
      0.4299784832535569,
      -0.32895016639939173
    ],
    [
      -0.8377940308911513,
      0.4105219947593144,
      -0.3599622947226417
    ],
    [
      -0.8714028124621737,
      0.3554742871630587,
      -0.33807568619900635
    ],
    [
      -0.8457359417339626,
      0.3417542219124083,
      -0.40979844883114425
    ],
    [
      -0.8406462603427778,
      0.3677335517470933,
      -0.39760017591944113
    ],
    [
      -0.41253920851743014,
      0.9075912143439341,
      0.0780358192211459
    ],
    [
      -0.4108433083790562,
      0.9105196328387785,
      0.04649488332373636
    ],
    [
      -0.392945587252504,
      0.9194405962202123,
      0.0149249951760511
    ],
    [
      -0.4538770505986576,
      0.8528445201691977,
      0.2581701906828797
    ],
    [
      -0.4641157825710095,
      0.8602809719573076,
      0.2109814912656786
    ],
    [
      -0.4718750896021827,
      0.8580405856381874,
      0.20273197382408248
    ],
    [
      -0.4750439335232802,
      0.858915911373208,
      0.1913026879389329
    ],
    [
      -0.47260267019159946,
      0.8628056616544074,
      0.17948010013611676
    ],
    [
      -0.48003830565354605,
      0.8642148899205017,
      0.15065141600717796
    ],
    [
      -0.47878438180593397,
      0.8662444447234279,
      0.14277982253984506
    ],
    [
      -0.45042034684934995,
      0.8837508084189097,
      0.12690949437703514
    ],
    [
      -0.5026011110364477,
      0.8319272782190781,
      0.2351364007122781
    ],
    [
      -0.5151293592807976,
      0.8161217757370864,
      0.26189118040648074
    ],
    [
      -0.5164989973761046,
      0.8175677656321623,
      0.25458148854288787
    ],
    [
      -0.5119285734047856,
      0.8258329806495934,
      0.23649317918948387
    ],
    [
      -0.5189236588167322,
      0.8033192666943277,
      0.2922266108312918
    ],
    [
      -0.5207767867634464,
      0.8049031735130028,
      0.28446866195951487
    ],
    [
      -0.5241761646627624,
      0.7892942970779399,
      0.3197715762848181
    ],
    [
      -0.5250194247742647,
      0.7899482886538535,
      0.31675906437314244
    ],
    [
      -0.5306745457748131,
      0.7725607218100867,
      0.3486179249306805
    ],
    [
      -0.5308596988698693,
      0.7727053453523317,
      0.34801498441838
    ],
    [
      -0.5341583933367285,
      0.7550461201436585,
      0.3802369883164089
    ],
    [
      -0.5363581663933393,
      0.7566373678994448,
      0.3739248732584865
    ],
    [
      -0.5374099194800002,
      0.7425501761495864,
      0.39976219724320866
    ],
    [
      -0.5379880789707814,
      0.7428873720523667,
      0.3983555940745114
    ],
    [
      -0.5418976473214915,
      0.7203425782286015,
      0.43295901632649214
    ],
    [
      -0.54305034011959,
      0.7206445894558211,
      0.43100777694149395
    ],
    [
      -0.5454452950910885,
      0.6999207687870328,
      0.46108605214597875
    ],
    [
      -0.5463492869564751,
      0.7002877579602746,
      0.45945566999779536
    ],
    [
      -0.5470361069073216,
      0.6796012266847835,
      0.48876750140349845
    ],
    [
      -0.5493498341393016,
      0.6806414577972097,
      0.4847081241931179
    ],
    [
      -0.5508222877874898,
      0.6574727810502486,
      0.514124838394925
    ],
    [
      -0.5509074107408239,
      0.6575255866076842,
      0.5139660764555009
    ],
    [
      -0.545301352765968,
      0.625242749061873,
      0.5583170599374131
    ],
    [
      -0.5547374933805248,
      0.6329628827897347,
      0.5400225017982131
    ],
    [
      -0.5578460593464106,
      0.5800814847367026,
      0.5935598075487789
    ],
    [
      -0.5685196400050637,
      0.5931107690129248,
      0.5700921281770253
    ],
    [
      -0.5560824366490007,
      0.5554334016480805,
      0.6182766856223452
    ],
    [
      -0.5607752283557672,
      0.5613965870536763,
      0.6085762198007914
    ],
    [
      -0.5507575613097818,
      0.5258045004971014,
      0.6482250657889556
    ],
    [
      -0.5589999865201399,
      0.5351202383145631,
      0.63337614860101
    ],
    [
      -0.54105917613667,
      0.4982173607049997,
      0.677520796293702
    ],
    [
      -0.5527016489886754,
      0.5108062391530531,
      0.6584814904365294
    ],
    [
      -0.5286357136259011,
      0.4699763254313583,
      0.7068709470711554
    ],
    [
      -0.5427412875145979,
      0.48480552902405716,
      0.6858538429247886
    ],
    [
      -0.5141019730507294,
      0.44165344197806694,
      0.735283209718727
    ],
    [
      -0.5301313465587422,
      0.458088470872786,
      0.7135234461804654
    ],
    [
      -0.49759368310534696,
      0.4103333732516864,
      0.7642166246095068
    ],
    [
      -0.5159466500108773,
      0.4286322760440595,
      0.7416693510425265
    ],
    [
      -0.478375946638824,
      0.3768925339346863,
      0.7931635843517404
    ],
    [
      -0.49933913496282367,
      0.3986580407502251,
      0.7692413111889993
    ],
    [
      -0.45559469014855325,
      0.3424407850754162,
      0.8216859418448003
    ],
    [
      -0.47960569108106854,
      0.3687836574158119,
      0.796226723431001
    ],
    [
      -0.4261375093072361,
      0.30580612381875266,
      0.8514043914594139
    ],
    [
      -0.42762622912196735,
      0.30559673128945264,
      0.8507328875693762
    ],
    [
      -0.4564006451843302,
      0.33764519738597615,
      0.8232218241504001
    ],
    [
      -0.38490605693777513,
      0.2714906490676841,
      0.8821225282246349
    ],
    [
      -0.39583397593160674,
      0.2690632004080714,
      0.8780207615337704
    ],
    [
      -0.2732085127707818,
      0.32968072403758425,
      0.9036967017465715
    ],
    [
      -0.2733585916697315,
      0.3288952758971381,
      0.9039374855889574
    ],
    [
      -0.34302948605046385,
      0.24978941948260583,
      0.9055031847622058
    ],
    [
      -0.37294487083194094,
      0.254991622895367,
      0.8921274547806125
    ],
    [
      -0.2598429320358878,
      0.24147731064037006,
      0.9349707798198226
    ],
    [
      -0.27721430657367796,
      0.20943426673541937,
      0.9377043863328528
    ],
    [
      -0.3278471574964686,
      0.21425499094878303,
      0.9201146885986673
    ],
    [
      -0.272673052196397,
      0.28913914287990533,
      0.9176317140664738
    ],
    [
      -0.34055900000459927,
      0.20758732380947906,
      0.9170207579490695
    ],
    [
      -0.3442676758205272,
      0.20237168082015047,
      0.9168017616623342
    ],
    [
      -0.3529076096126385,
      0.19659157467759686,
      0.9147720873765642
    ],
    [
      -0.37618004436190466,
      0.19666171434493743,
      0.9054351132658738
    ],
    [
      -0.27856022665980706,
      0.1727039689555806,
      0.9447632186057132
    ],
    [
      -0.2847232377733153,
      0.1673695331965353,
      0.9438856483862089
    ],
    [
      -0.30942284576991474,
      0.1171607198892232,
      0.9436794308612891
    ],
    [
      -0.3110689206272868,
      0.1161003201169949,
      0.9432692310727123
    ],
    [
      -0.3243320267727965,
      0.11837831255922074,
      0.9385069586982727
    ],
    [
      -0.333367711326379,
      0.1240368447674101,
      0.9346019635037995
    ],
    [
      -0.2363296418822709,
      0.6813470671479848,
      0.69275859753354
    ],
    [
      -0.2236531201460107,
      0.6712279176456227,
      0.7067052882369532
    ],
    [
      -0.22324808052069578,
      0.6653959014556636,
      0.7123261815136586
    ],
    [
      -0.25080190782284956,
      0.6293086126074592,
      0.7355739752944592
    ],
    [
      -0.2556223589366173,
      0.5922588548248401,
      0.7641247663132299
    ],
    [
      -0.22848744261374718,
      0.5560938183635417,
      0.7990952094373273
    ],
    [
      -0.2142814297562862,
      0.5484748869686819,
      0.8082442497328969
    ],
    [
      -0.184920157287123,
      0.5009069248332104,
      0.845515693575845
    ],
    [
      0.916580842084559,
      -0.3978433863089932,
      0.040002498593887485
    ],
    [
      0.8913407323737719,
      -0.4510923707274679,
      0.04502634654133794
    ],
    [
      0.8876198649747894,
      -0.45266256264360716,
      0.08501517325194911
    ],
    [
      0.8876395729298713,
      -0.4520781963701843,
      0.08787088787281443
    ],
    [
      0.9244860329286986,
      -0.3809792544947756,
      0.01343065762954457
    ],
    [
      0.9290660632597769,
      -0.3696502303839549,
      -0.01396271019785554
    ],
    [
      0.9246479611777849,
      -0.38077996972053096,
      0.0057238579120336835
    ],
    [
      0.9413987355739456,
      -0.3330913310700829,
      -0.05309035529865026
    ],
    [
      0.9334666905724747,
      -0.3551513831726733,
      -0.05007427106018334
    ],
    [
      0.9294729738615,
      -0.36798339304662564,
      -0.025849822106780156
    ],
    [
      0.9589256950586189,
      -0.2750534592191634,
      -0.0693332959545175
    ],
    [
      0.9508530541749954,
      -0.3019436171888617,
      -0.06861866659291169
    ],
    [
      0.941643013262143,
      -0.33227626811319244,
      -0.05386016360318134
    ],
    [
      0.96607868501908,
      -0.23929657497418974,
      -0.09710367427356764
    ],
    [
      0.9613331345293606,
      -0.2609475503319116,
      -0.08800557045851559
    ],
    [
      0.9694602752773742,
      -0.21527553228853408,
      -0.11748710506692242
    ],
    [
      0.9670818646341107,
      -0.22875260642322795,
      -0.11146708998799289
    ],
    [
      0.9700712240089665,
      -0.20344266884127263,
      -0.13256281848424056
    ],
    [
      0.9675655958318201,
      -0.1435129382543734,
      -0.20789625854308047
    ],
    [
      0.9514275086884905,
      -0.16703369888563713,
      -0.258622193841508
    ],
    [
      0.9522178123921239,
      -0.1767432132972283,
      -0.24908447225093824
    ],
    [
      0.9513945532516604,
      -0.1435733720629335,
      -0.27246117315601476
    ],
    [
      0.9486431364302627,
      -0.16200097705957175,
      -0.27172022952937874
    ],
    [
      0.8574973701886287,
      -0.47129593316326934,
      0.20634535008899266
    ],
    [
      0.8485827220261924,
      -0.4841927334877889,
      0.21322467192199115
    ],
    [
      0.8448443744193791,
      -0.46815711922927683,
      0.25897276831140537
    ],
    [
      0.8466971941155186,
      -0.45760298964123597,
      0.2714836373491241
    ],
    [
      0.8727673254596923,
      -0.45542324026702347,
      0.17568969188492717
    ],
    [
      0.878536259274578,
      -0.4578992039250439,
      0.13602338102194927
    ],
    [
      0.8745475570400387,
      -0.46130567614354734,
      0.1495447880504195
    ],
    [
      0.8832135537440529,
      -0.45835514900039737,
      0.09921882819114855
    ],
    [
      0.8803436586592736,
      -0.46075189586995735,
      0.1127064022611157
    ],
    [
      0.8985184913169946,
      -0.07691930426317424,
      -0.43214342687712054
    ],
    [
      0.8756971779827152,
      -0.18966784238346687,
      -0.44405017964044224
    ],
    [
      0.912461472599619,
      -0.2005843583711826,
      -0.3566230169214485
    ],
    [
      0.9149280764089961,
      -0.20045439593540082,
      -0.35032078178250803
    ],
    [
      0.9155523228518789,
      -0.1999910985206629,
      -0.34895200906862167
    ],
    [
      0.9359212589084089,
      -0.05293914338691947,
      -0.3482080473233754
    ],
    [
      0.9171318898089327,
      -0.04432343144722691,
      -0.3961117646829475
    ],
    [
      0.8961214599291805,
      -0.0530321040213649,
      -0.4406290106171647
    ],
    [
      0.8790139952288423,
      -0.002962480545239198,
      -0.4767867656519506
    ],
    [
      0.8493295892057933,
      -0.007131120107178959,
      -0.5278147364611331
    ],
    [
      0.8637849400529692,
      -0.014024093541908094,
      -0.5036654664934019
    ],
    [
      0.8293460930072183,
      -0.0034732322594653816,
      -0.5587244353626698
    ],
    [
      0.8446830367077454,
      -0.009920089536613486,
      -0.5351748866695515
    ],
    [
      0.8053842570108877,
      -0.0066920905062930825,
      -0.592715289564624
    ],
    [
      0.807544456551881,
      -0.014484787354036348,
      -0.5896288168226139
    ],
    [
      0.7795382189000867,
      0.03030804486236306,
      -0.625620961677837
    ],
    [
      0.7644578098365755,
      0.035652941817336886,
      -0.6436871326348195
    ],
    [
      0.7237796788235714,
      0.04927081788488289,
      -0.6882698330066505
    ],
    [
      0.7621521113691536,
      0.034839128536033326,
      -0.6464598937740771
    ],
    [
      0.5005479540049451,
      0.41505981637927647,
      -0.7597217217959907
    ],
    [
      0.4758595227506587,
      0.41581609623447724,
      -0.7750191537761085
    ],
    [
      0.505203547628539,
      0.32536758445841785,
      -0.7993155262142935
    ],
    [
      0.5302555407979614,
      0.43337001912442136,
      -0.728710839755496
    ],
    [
      0.5509477170993525,
      0.45800669562154195,
      -0.6976291850179779
    ],
    [
      0.5316994926810967,
      0.4492979893180288,
      -0.7179324245898362
    ],
    [
      0.550266602811044,
      0.48848229313413744,
      -0.6771940010995428
    ],
    [
      0.49346886327163264,
      0.563011999314471,
      -0.6629524640646002
    ],
    [
      0.4675938493657974,
      0.5561089189291945,
      -0.6870945075625904
    ],
    [
      0.4634940520224977,
      0.5526023593572669,
      -0.6926787828225637
    ],
    [
      0.522633455626507,
      0.5834442995188265,
      -0.6216486309957432
    ],
    [
      0.5275520986264635,
      0.596817466074436,
      -0.6045640540284408
    ],
    [
      0.5143000933905166,
      0.6453267083886176,
      -0.5648440965247118
    ],
    [
      0.5147122415112279,
      0.6218141977602514,
      -0.5902697789166089
    ],
    [
      0.5115638837974966,
      0.6687941928191964,
      -0.5394596559941632
    ],
    [
      0.5122391137260592,
      0.6490486943135023,
      -0.5624472266613814
    ],
    [
      0.5056516689578286,
      0.6789172539425118,
      -0.5323417623851442
    ],
    [
      0.4819065437263518,
      0.7158742554980272,
      -0.5052624401525084
    ],
    [
      0.4877227193634868,
      0.6958674580441219,
      -0.5271575000432961
    ],
    [
      0.4713058895376656,
      0.7543389280841206,
      -0.45699402628919517
    ],
    [
      0.4693798654079962,
      0.7391977567425275,
      -0.48297952169464353
    ],
    [
      0.4743291954956593,
      0.7259249694073567,
      -0.49804091507763587
    ],
    [
      0.44378551695106233,
      0.01740924679293838,
      -0.8959639128171295
    ],
    [
      0.44222389183897215,
      -0.004263190283616458,
      -0.896894561637765
    ],
    [
      0.44939632331767676,
      -0.04214093559762148,
      -0.892337988732695
    ],
    [
      0.43949684145537576,
      0.04579766784949953,
      -0.8970758607666885
    ],
    [
      0.438008119395521,
      0.04410045985522775,
      -0.8978886550035904
    ],
    [
      0.513049365318038,
      0.08725062130192394,
      -0.8539131559059074
    ],
    [
      0.4537188209440079,
      0.07716070167865065,
      -0.8877980950856099
    ],
    [
      0.4757283323455594,
      0.13446635230435341,
      -0.8692533312571626
    ],
    [
      0.47135184119674906,
      0.136662373139458,
      -0.8712926245345626
    ],
    [
      0.4530081842037131,
      0.1248226350967583,
      -0.8827246993326721
    ],
    [
      0.4710098045136831,
      0.24222952841895665,
      -0.8482184975664655
    ],
    [
      0.4689057925721015,
      0.2407327661815586,
      -0.8498088567312677
    ],
    [
      0.4377927754082773,
      0.3539770295366608,
      -0.8264609781234197
    ],
    [
      0.42962416026444167,
      0.3136402236489138,
      -0.8467897560944705
    ],
    [
      0.3446998076623438,
      0.4988644477196985,
      -0.7951831898366963
    ],
    [
      0.3430881615242546,
      0.4935063706691064,
      -0.7992133479434096
    ],
    [
      -0.10146790243074401,
      0.4835771964801984,
      -0.8694005750059386
    ],
    [
      -0.015899186790085718,
      0.5662742137330734,
      -0.8240635477439853
    ],
    [
      0.015205605575485682,
      0.624934274078926,
      -0.7805292708416057
    ],
    [
      -0.08416051318284798,
      0.6535953553927423,
      -0.7521503303395104
    ],
    [
      -0.08614669666080917,
      0.6536916851579486,
      -0.751841690390864
    ],
    [
      -0.14063909108456588,
      0.6195751644020169,
      -0.7722352372917989
    ],
    [
      -0.1547090402780791,
      0.5099574314159795,
      -0.846172872999278
    ],
    [
      -0.12421704805986263,
      0.6666095383908943,
      -0.7349842503738244
    ],
    [
      -0.1917573631142376,
      0.6342747988361747,
      -0.7489489924239198
    ],
    [
      -0.23908226119277348,
      0.6664171483892622,
      -0.7062066671419029
    ],
    [
      -0.23840401691390026,
      0.6253400969731621,
      -0.7430432610803445
    ],
    [
      -0.14208708223732647,
      0.6885103065702363,
      -0.7111714412206402
    ],
    [
      -0.19418062184866214,
      0.7035101255129453,
      -0.6836427352054775
    ],
    [
      -0.2371009841152133,
      0.672135807575315,
      -0.7014389349805702
    ],
    [
      -0.4689153820910474,
      0.331206426491302,
      -0.818792200432606
    ],
    [
      -0.47398775436584223,
      0.3443024169328621,
      -0.8104267113104155
    ],
    [
      -0.5446314602358194,
      0.31537829552031815,
      -0.7771184615205701
    ],
    [
      -0.5595246533960959,
      0.2883107251502944,
      -0.7770515349738975
    ],
    [
      -0.5611309711860217,
      0.28399100415078976,
      -0.7774838536826718
    ],
    [
      -0.4739188274785226,
      0.23985253107149376,
      -0.8472731013669562
    ],
    [
      -0.47021032841971305,
      0.2433130064928006,
      -0.848351948143493
    ],
    [
      -0.45938757791818696,
      0.2677309029626684,
      -0.8469257445923202
    ],
    [
      -0.49130363286560863,
      0.19820899639176542,
      -0.8481355635052833
    ],
    [
      -0.5706226877782237,
      0.2659349839957302,
      -0.7769609594310043
    ],
    [
      -0.5800483946979813,
      0.21510087569984165,
      -0.7856688062290981
    ],
    [
      -0.5090921456040809,
      0.18878798274818062,
      -0.8397525140504826
    ],
    [
      -0.5849171017564473,
      0.15264261174197352,
      -0.7966004124737992
    ],
    [
      -0.573796948749809,
      0.14145491029046736,
      -0.8066892648102644
    ],
    [
      -0.5162051702999495,
      0.1272571354995829,
      -0.8469579940115335
    ],
    [
      -0.5065835842391682,
      0.1368093419356568,
      -0.851267452765892
    ],
    [
      -0.5849521804668062,
      0.20788934901779166,
      -0.7839725538130068
    ],
    [
      -0.5918482599161252,
      0.19352412241338235,
      -0.7824730354960385
    ],
    [
      -0.5929023336097006,
      0.18020720275995641,
      -0.7848516973757548
    ],
    [
      -0.5400222761991793,
      0.07339167443719787,
      -0.8384447527010719
    ],
    [
      -0.5332086990569177,
      0.0793378172499758,
      -0.8422553021525235
    ],
    [
      -0.5444518046553816,
      0.07727040654258832,
      -0.8352254286599764
    ],
    [
      -0.46225598657576816,
      0.07895124510215352,
      -0.8832248319491945
    ],
    [
      -0.47836454924578037,
      0.1243038501651937,
      -0.8693192226443577
    ],
    [
      -0.46872722320660104,
      0.07428536252648289,
      -0.8802138803378065
    ],
    [
      -0.24947678907862122,
      -0.05655616685613406,
      -0.9667278477945912
    ],
    [
      -0.1722185586414227,
      -0.03658775736068217,
      -0.9843790449165335
    ],
    [
      -0.2230998582092864,
      0.0022002265315129305,
      -0.9747931125475838
    ],
    [
      -0.22465500234926014,
      0.0016670487341404019,
      -0.9744369404266097
    ],
    [
      0.5153311172284563,
      -0.486761477340266,
      -0.7053347459140183
    ],
    [
      0.5188470283126265,
      -0.49827867051085545,
      -0.6946338083660275
    ],
    [
      0.5421580498367862,
      -0.5042500324333489,
      -0.6721581315346409
    ],
    [
      0.553062750264648,
      -0.498959655037342,
      -0.6672037596677048
    ],
    [
      0.5596434348416305,
      -0.44571454021037216,
      -0.6986685727036234
    ],
    [
      0.5538531244521522,
      -0.44272319809714256,
      -0.7051545124305928
    ],
    [
      0.5482201711529059,
      -0.4241588583434992,
      -0.7207939420041056
    ],
    [
      0.5183588017483928,
      -0.4323211327057027,
      -0.7378364255483926
    ],
    [
      0.48621876908778494,
      -0.4685267295433559,
      -0.7376137283769644
    ],
    [
      0.49148954817273466,
      -0.4801538879306904,
      -0.7265605741725896
    ],
    [
      0.30072851760318353,
      -0.2987163772109671,
      -0.9057211958909579
    ],
    [
      0.2955584288814537,
      -0.3654535875775634,
      -0.8826601217024675
    ],
    [
      0.29850273966609386,
      -0.2833184746009345,
      -0.9113872702433559
    ],
    [
      0.3375761274944862,
      -0.1966214018760824,
      -0.9205337486861145
    ],
    [
      0.32678291223181233,
      -0.20273885064549724,
      -0.9230979832673444
    ],
    [
      0.3128975170364636,
      -0.2263098761671958,
      -0.9224310184407312
    ],
    [
      0.2948108996851686,
      -0.27975100530909475,
      -0.9136880805041577
    ],
    [
      0.3773491569158191,
      -0.15670993771651998,
      -0.9127155138353927
    ],
    [
      0.24587478572913715,
      -0.40048622892670593,
      -0.8826983460858624
    ],
    [
      0.2747262750127466,
      -0.4474801657301224,
      -0.851050512658187
    ],
    [
      0.25836387751588236,
      -0.28270113589103746,
      -0.9237576384316805
    ],
    [
      0.24900795040369367,
      -0.2914823705620929,
      -0.9235978931803897
    ],
    [
      0.20354886510494016,
      -0.3770408028611457,
      -0.903553038007351
    ],
    [
      0.2143925473666749,
      -0.3958777243242842,
      -0.8929259000709152
    ],
    [
      0.47173716731942217,
      0.7858071032992642,
      -0.39996405010183994
    ],
    [
      0.45512277240166144,
      0.7790060285526637,
      -0.43129209304140054
    ],
    [
      0.4658501873915231,
      0.7604888402849417,
      -0.4523718898310851
    ],
    [
      0.4905972622443792,
      0.8027841893920654,
      -0.3388980252825976
    ],
    [
      0.4733886356694767,
      0.7988880426119173,
      -0.3710540324409519
    ],
    [
      0.9384743583688734,
      0.0008464658751123071,
      0.3453478857321319
    ],
    [
      0.9281515811487415,
      -0.001621850614323888,
      0.3721988877088107
    ],
    [
      0.9435646817660482,
      0.023096223794733167,
      0.3303819846331815
    ],
    [
      0.9557750177297578,
      0.011232374418064349,
      0.29388424464168467
    ],
    [
      0.9601631526575664,
      0.02405460063035515,
      0.27840275944608933
    ],
    [
      0.9529399288924445,
      0.07681721593937177,
      0.29326542117642657
    ],
    [
      0.9432263862732135,
      0.06592022499460026,
      0.325543404440385
    ],
    [
      0.9524450560487976,
      0.07687585261222293,
      0.2948533847412074
    ],
    [
      0.9545020270808997,
      0.07879524642281414,
      0.287605962107223
    ],
    [
      0.962691337947169,
      0.11407577368988642,
      0.24538155125955077
    ],
    [
      0.9480085883829931,
      0.18158019902915198,
      0.26135865716026757
    ],
    [
      0.9507316982008425,
      0.18736777118796338,
      0.24698695584220073
    ],
    [
      0.9468990548901768,
      0.1737161284521354,
      0.2705640156482219
    ],
    [
      0.9517583067974756,
      0.2031228767021022,
      0.22999396166479022
    ],
    [
      0.9559282072549092,
      0.20832637772893287,
      0.2068849509190003
    ],
    [
      0.9529914105749143,
      0.2458302503112258,
      0.1771294989615087
    ],
    [
      0.952050061493635,
      0.24894672015574987,
      0.17783759707570437
    ],
    [
      0.9508852485366469,
      0.2549620431815074,
      0.17553233506140797
    ],
    [
      0.9483306121018515,
      0.27822454942127006,
      0.15251278716835176
    ],
    [
      0.9485660100591259,
      0.2793093393676771,
      0.1490262309209426
    ],
    [
      0.9452903019145021,
      0.2998799142968836,
      0.12844563872581696
    ],
    [
      0.9458408112907812,
      0.30187821522778113,
      0.11939306038328282
    ],
    [
      0.9432516953636989,
      0.3144656173179166,
      0.10671276736346655
    ],
    [
      0.9441685404031918,
      0.3166858515364134,
      0.09086164619663903
    ],
    [
      0.9389176321637314,
      0.3361715101601723,
      0.07363691851701264
    ],
    [
      0.9390234071070429,
      0.3375504719272695,
      0.06553411177973123
    ],
    [
      0.9334644741470325,
      0.3553472901205302,
      0.04870707247823344
    ],
    [
      0.9332801004645934,
      0.35653743001313487,
      0.04323557651318298
    ],
    [
      0.9242910840471272,
      0.38121322208388514,
      0.019038677984800422
    ],
    [
      0.9234820277938532,
      0.3834416828867131,
      0.0123862894669101
    ],
    [
      0.9144942009322583,
      0.4044667892110365,
      -0.01034276977338962
    ],
    [
      0.908031855190463,
      0.41851750976785346,
      -0.017923280310267166
    ],
    [
      0.908035015388776,
      0.4184540005547405,
      -0.019200527275018916
    ],
    [
      0.9100161698080771,
      0.41296135108218096,
      -0.03651702616885241
    ],
    [
      0.9078581189483306,
      0.41264678948484634,
      -0.07427154897703342
    ],
    [
      0.899078961143962,
      0.4256946954921299,
      -0.10218144576270687
    ],
    [
      0.8932750219273615,
      0.4357273700613161,
      -0.11045992114844475
    ],
    [
      0.8833375540699077,
      0.45815557966026077,
      -0.09903651041895317
    ],
    [
      0.8779718473933021,
      0.47196628814987535,
      -0.0800828198480863
    ],
    [
      0.8764669309184224,
      0.47502303575163357,
      -0.07847824228245379
    ],
    [
      0.8709467343000136,
      0.48763235272585737,
      -0.06055142101707
    ],
    [
      0.8703457959328986,
      0.49161972310479807,
      -0.028429621107058156
    ],
    [
      0.8748460565844893,
      0.4843899446887551,
      -0.0032800553338795647
    ],
    [
      0.870867941744471,
      0.4914384183266962,
      0.008792555618456802
    ],
    [
      0.870717939520448,
      0.49170101654582776,
      0.008965496364680933
    ],
    [
      0.8598332301650126,
      0.5095386154650845,
      0.03251485282029315
    ],
    [
      0.8559064380299309,
      0.5145207416667337,
      0.05189003501280672
    ],
    [
      0.852797903322286,
      0.5190404574199632,
      0.057729885244892455
    ],
    [
      0.8475749441998067,
      0.5243953366712468,
      0.08140174962581852
    ],
    [
      0.8430717809905979,
      0.5304662690387134,
      0.08851841339229209
    ],
    [
      0.8304688418835404,
      0.5394798419215262,
      0.13886325223375784
    ],
    [
      0.8223249622489563,
      0.5387832200517495,
      0.18301447552836006
    ],
    [
      0.8360485151056309,
      0.524112209708618,
      0.16226297182049604
    ],
    [
      0.8345990686908985,
      0.5252250507389898,
      0.16608142766881054
    ],
    [
      0.8096688918567545,
      0.5469604300879916,
      0.21276882637598613
    ],
    [
      0.8071759118964222,
      0.5441604261274446,
      0.22881537948961597
    ],
    [
      0.7811337585846457,
      0.5574563610001473,
      0.2811982517369159
    ],
    [
      0.7381560641301074,
      0.5460054474397839,
      0.3962368942363019
    ],
    [
      0.7428590924671572,
      0.53824117188139,
      0.39806633822846627
    ],
    [
      0.734500809563953,
      0.5542005930820538,
      0.3916251567218293
    ],
    [
      0.7296262586402102,
      0.5742690133026547,
      0.37129586997849096
    ],
    [
      0.7255097563714819,
      0.5989916781563593,
      0.33888724217536054
    ],
    [
      0.7313293542476376,
      0.5812956838460137,
      0.35672496906963025
    ],
    [
      0.3247171943083238,
      0.725633891389146,
      0.6066417389101868
    ],
    [
      0.29288082938405446,
      0.7231660334934017,
      0.6255011652912635
    ],
    [
      0.2490153833044215,
      0.7659604535483346,
      0.5927022207464567
    ],
    [
      0.24254372889429096,
      0.769715633889659,
      0.5905170467648612
    ],
    [
      0.24210711032248258,
      0.7701983618004148,
      0.5900666323486312
    ],
    [
      0.2437261969698166,
      0.7881570758724614,
      0.5651601230295724
    ],
    [
      0.23876706512800255,
      0.7974601057874334,
      0.5541188214522726
    ],
    [
      0.21042039546705837,
      0.8197458004484026,
      0.5326725821916258
    ],
    [
      0.18439649619823395,
      0.8287920977004963,
      0.5283006634285307
    ],
    [
      0.4009483142118753,
      0.678113907276858,
      0.615956149484984
    ],
    [
      0.44644287585692666,
      0.6290201868746047,
      0.6364136729367418
    ],
    [
      0.41471152682548096,
      0.6252442895000521,
      0.6611232320571206
    ],
    [
      0.3868948536717537,
      0.671195790923602,
      0.6323041850634492
    ],
    [
      0.3895313070910973,
      0.615114535357972,
      0.685492136488266
    ],
    [
      0.34929194074451375,
      0.6563431002005242,
      0.6687367755328667
    ],
    [
      0.35334615629738775,
      0.6640732948781553,
      0.6589029919946735
    ],
    [
      0.3818754972543794,
      0.6721469354031971,
      0.6343418651049376
    ],
    [
      0.4144667064180224,
      0.6247343775289708,
      0.6617584958309839
    ],
    [
      0.3748398228492628,
      0.582603170387957,
      0.7211578558542051
    ],
    [
      0.32537570884228056,
      0.6430472491770116,
      0.6932682622342248
    ],
    [
      0.3290578140960913,
      0.6504392219671461,
      0.6845799978885418
    ],
    [
      0.30092445733435924,
      0.63556078908305,
      0.7109901225461238
    ],
    [
      0.37484477199445876,
      0.5650219967073221,
      0.7350112517133959
    ],
    [
      0.36128926589087623,
      0.5621877404545635,
      0.7439186856334663
    ],
    [
      0.35847560775775733,
      0.5630965817793212,
      0.7445921556336399
    ],
    [
      0.28682556461840897,
      0.6025334505559897,
      0.7447714659158362
    ],
    [
      0.5554645062167821,
      0.6109788115838826,
      0.5640603461766239
    ],
    [
      0.5379187601325385,
      0.5913862889460205,
      0.6007542465468941
    ],
    [
      0.5207354458182916,
      0.5873597704717555,
      0.6195507206837805
    ],
    [
      0.5056883746513859,
      0.5906030248695787,
      0.62886193616512
    ],
    [
      0.4842325025839405,
      0.5825171836600279,
      0.6528342930499924
    ],
    [
      0.4798925789164826,
      0.5833439485200774,
      0.6552960784453793
    ],
    [
      0.4550654753744637,
      0.5737629427562666,
      0.6809636544206178
    ],
    [
      0.4547012631621139,
      0.5738292299739124,
      0.6811510670228189
    ],
    [
      0.40076198873512536,
      0.5522910862253257,
      0.731002314949219
    ],
    [
      0.6848741348124081,
      0.4932243486110256,
      0.5363554431551757
    ],
    [
      0.6531689694758837,
      0.5120295785050303,
      0.5578494492690418
    ],
    [
      0.6423757573366088,
      0.5240510123669839,
      0.559217241171405
    ],
    [
      0.6250927915206368,
      0.5273222388474451,
      0.5754913191403116
    ],
    [
      0.6216846488279689,
      0.5295062299053008,
      0.5771753199012581
    ],
    [
      0.5942481439668291,
      0.5348841057889868,
      0.6006397728807965
    ],
    [
      0.598019190136735,
      0.5324493093421501,
      0.5990582452560611
    ],
    [
      0.5676334943822862,
      0.5360187596340338,
      0.6248808729475941
    ],
    [
      0.5650473242113794,
      0.5325049861106086,
      0.6302062846155224
    ],
    [
      0.5361735553342255,
      0.5333446679155925,
      0.6542640015821309
    ],
    [
      0.5347869256509922,
      0.5320776207746555,
      0.6564269568074897
    ],
    [
      0.5149770309843613,
      0.5334291850190473,
      0.6710081684513587
    ],
    [
      0.48449988010745526,
      0.5305035355633201,
      0.6955759231965111
    ],
    [
      0.511007352012499,
      0.5296635451392472,
      0.6769992726286332
    ],
    [
      0.45630606048357425,
      0.4867008703390916,
      0.7449208293349915
    ],
    [
      0.44879728360854226,
      0.49183126556397383,
      0.7461119248740993
    ],
    [
      0.8597301055195683,
      -0.03256889365929828,
      0.5097091453261569
    ],
    [
      0.8692388147981343,
      -0.08758204087309562,
      0.4865729842118634
    ],
    [
      0.8593372987828147,
      -0.04069892994161539,
      0.5097872144554656
    ],
    [
      0.8481301688935061,
      -0.017947785202655105,
      0.5294837992035185
    ],
    [
      0.8420378773886398,
      0.005635224149859117,
      0.5393889666016677
    ],
    [
      0.877237675183861,
      0.04052313686544553,
      0.4783429069366444
    ],
    [
      0.8318126909293219,
      0.01915625373511279,
      0.5547257747317644
    ],
    [
      0.8270033249960103,
      0.09301048864547602,
      0.5544497717985581
    ],
    [
      0.860294659343086,
      0.09970985001270131,
      0.49995104251937333
    ],
    [
      0.8666282798509576,
      0.08613992558010257,
      0.4914624479892892
    ],
    [
      0.8766527449260398,
      0.04805595988191104,
      0.4787176511613792
    ],
    [
      0.862473614433952,
      0.16800496666025186,
      0.47740296980928215
    ],
    [
      0.86312508170208,
      0.11653606203786322,
      0.4913597862885047
    ],
    [
      0.8235195871105446,
      0.09597656142986917,
      0.5591099974972515
    ],
    [
      0.826138922432257,
      0.17614076012946822,
      0.535227907963965
    ],
    [
      0.82317173700372,
      0.18194932055540075,
      0.5378501056499908
    ],
    [
      0.8225773728422608,
      0.20684420344491272,
      0.5296998595328903
    ],
    [
      0.8657660293806042,
      0.1986186294715102,
      0.45934716979361223
    ],
    [
      0.8434887624173965,
      0.2783887248567212,
      0.4593761264456586
    ],
    [
      0.8698861727675491,
      0.21538271121646277,
      0.4437435454593919
    ],
    [
      0.8193538430463865,
      0.21291459437050153,
      0.5322843745491334
    ],
    [
      0.8102169171787613,
      0.3143405603334336,
      0.4947105812963851
    ],
    [
      0.8172284788607871,
      0.32097950970506756,
      0.4786541211442543
    ],
    [
      0.7180742853649732,
      0.4302075679402195,
      0.5470747382072623
    ],
    [
      0.7023318551565482,
      0.44123732699782303,
      0.5586050362252184
    ],
    [
      0.6935429244135696,
      0.45146568651857666,
      0.5614062218146357
    ],
    [
      0.7423936754598423,
      0.4238017491385785,
      0.5188869896849485
    ],
    [
      0.9167199918665659,
      0.025564549909515816,
      0.3987115627870443
    ],
    [
      0.9122334843446577,
      0.06459451359640912,
      0.4045461887765704
    ],
    [
      0.9165042640997046,
      0.044903448475726075,
      0.3974966845170492
    ],
    [
      0.9098338199023562,
      0.09043441041423371,
      0.40499881181914216
    ],
    [
      0.9110317981285758,
      0.08546072759359845,
      0.4033826060178929
    ],
    [
      0.9070583697287152,
      0.12246777748389137,
      0.4027986561338573
    ],
    [
      0.9088545050675387,
      0.19073718032464163,
      0.3709485364039657
    ],
    [
      0.8079040368606247,
      0.363520675134727,
      0.4638359472635757
    ],
    [
      0.8111736584895409,
      0.4559468572488548,
      0.36620999322463343
    ],
    [
      0.8313146891574709,
      0.4297861578679696,
      0.3524198435050249
    ],
    [
      0.8360802311783968,
      0.40842384880511307,
      0.366278318713921
    ],
    [
      0.795303364560426,
      0.4837537527446743,
      0.36534212051761944
    ],
    [
      0.7844895836049608,
      0.5107848695529915,
      0.35167443786981245
    ],
    [
      0.7827697499983661,
      0.5137509092694174,
      0.35118587914712984
    ],
    [
      0.784134063647961,
      0.5464711974422238,
      0.2941139245139498
    ],
    [
      0.784309752062239,
      0.5467596813019411,
      0.29310759751782123
    ],
    [
      -0.14219088006094277,
      0.8399730193937898,
      0.5236669555337389
    ],
    [
      -0.17025627712492247,
      0.8221305021766158,
      0.543244178514954
    ],
    [
      -0.17860000092942074,
      0.7769636462132941,
      0.603679991494628
    ],
    [
      0.553132813877213,
      0.8231467634701588,
      -0.12834911764744883
    ],
    [
      0.550049418260293,
      0.8242249930712945,
      -0.1345317741953107
    ],
    [
      0.5473777583239302,
      0.8202216275200659,
      -0.16617482192138314
    ],
    [
      0.5231255831628997,
      0.8257935628559763,
      -0.21072402754813918
    ],
    [
      0.5509636884650043,
      0.8297420529609142,
      -0.08925883452771123
    ],
    [
      0.5476415463823516,
      0.8303588132905791,
      -0.1029221932656291
    ],
    [
      0.5498891752026863,
      0.8332437704632171,
      -0.05767767314265496
    ],
    [
      0.546362824548833,
      0.8345069971068095,
      -0.07131434449531478
    ],
    [
      0.5421158138079665,
      0.8396870469744081,
      -0.032188624741114544
    ],
    [
      0.5257865607543611,
      0.850415878450799,
      -0.01847501580125053
    ],
    [
      0.525318023713511,
      0.8509045914941341,
      -0.0015330153071414817
    ],
    [
      0.520368721099172,
      0.853887108361071,
      0.00965402902319661
    ],
    [
      0.4984976797179809,
      0.8655279832283063,
      0.048593966338734855
    ],
    [
      0.5124659627709371,
      0.8585465182246172,
      0.016628681416258756
    ],
    [
      0.4822453079045726,
      0.8737491113693255,
      0.06326099418550049
    ],
    [
      0.44457222406373276,
      0.8923717590973107,
      0.07764136240817371
    ],
    [
      0.440666673000732,
      0.8942648195989518,
      0.07812372068789475
    ],
    [
      0.4075651137269015,
      0.9103317885647711,
      0.07201883643355124
    ],
    [
      0.4189856023166512,
      0.9052518879648431,
      0.0704988254330537
    ],
    [
      0.3844758728685862,
      0.9204143186910739,
      0.07082220788979295
    ],
    [
      0.393814974063806,
      0.9166384543228266,
      0.06843763774256845
    ],
    [
      0.3541987294792388,
      0.931055410409595,
      0.08763037591105956
    ],
    [
      0.3816908603860955,
      0.9215603033377726,
      0.07098376159175213
    ],
    [
      0.29789858759735494,
      0.95044186764148,
      0.08897577053151413
    ],
    [
      0.2708198630753863,
      0.959296829154178,
      0.0800387114999285
    ],
    [
      0.27881770307084214,
      0.9570227775547949,
      0.07980032390664459
    ],
    [
      0.17502977676380954,
      0.9833982199261319,
      0.04788024949941663
    ],
    [
      0.18172135545281007,
      0.9826680485715175,
      0.036617690929919074
    ],
    [
      0.06877225273795991,
      0.996482784798478,
      0.04787939905237273
    ],
    [
      0.06516786393175353,
      0.9968963794938838,
      0.044167386865863446
    ],
    [
      0.02418664497785022,
      0.9993813257143438,
      0.02553374273693703
    ],
    [
      0.005005408114113354,
      0.9999341655512918,
      0.010325233791684341
    ],
    [
      0.008025665962160472,
      0.9999213827176564,
      0.00963416160720816
    ],
    [
      0.0017873286995614755,
      0.9999473353475872,
      0.010106037174858768
    ],
    [
      -0.03753699343926384,
      0.9992816602692417,
      -0.00520937357928233
    ],
    [
      -0.059808043546740026,
      0.9978296209160128,
      -0.02755078129050877
    ],
    [
      -0.056004555570043746,
      0.9980901585490003,
      -0.02606770344762444
    ],
    [
      -0.08066710008385324,
      0.9954278573179995,
      -0.051148800957187525
    ],
    [
      -0.08704792179247058,
      0.9934431774701209,
      -0.07411688370190428
    ],
    [
      -0.10237004425207709,
      0.9890073653695124,
      -0.10669960302027164
    ],
    [
      -0.08370153852920136,
      0.9904412783011071,
      -0.1096363383423292
    ],
    [
      -0.1850367063650737,
      0.9753180438292318,
      -0.12048290616799572
    ],
    [
      -0.21106201694157714,
      0.9616024383503242,
      -0.17542398799270462
    ],
    [
      -0.19451345875416945,
      0.968194584025537,
      -0.1573650591049592
    ],
    [
      -0.1848167022345464,
      0.9749601167488785,
      -0.12367520901199279
    ],
    [
      -0.24179481492230476,
      0.9475388489450135,
      -0.2090583583993892
    ],
    [
      -0.21112381694141494,
      0.9615528796554288,
      -0.17562116485902346
    ],
    [
      -0.24178110802693195,
      0.9467729006287859,
      -0.21251581220281912
    ],
    [
      -0.248351491766964,
      0.9407668738911653,
      -0.23082293110990534
    ],
    [
      -0.35605394733861734,
      0.9012082622318912,
      -0.24708147374816233
    ],
    [
      -0.34559749400528084,
      0.8985611473140753,
      -0.2704630042628428
    ],
    [
      -0.2897575850923562,
      0.910875892173815,
      -0.29384630495890585
    ],
    [
      -0.25888140251737124,
      0.929831041821201,
      -0.2615237142141006
    ],
    [
      -0.24833463363673042,
      0.9405170265661764,
      -0.23185692242335398
    ],
    [
      -0.38258909791903967,
      0.8388042902325614,
      -0.38734086389244343
    ],
    [
      -0.39136862479173745,
      0.8202403503186666,
      -0.41717666190444463
    ],
    [
      -0.3755971179122563,
      0.8108139883891953,
      -0.44889584677117766
    ],
    [
      -0.3740862285703597,
      0.8106045124572646,
      -0.4505328156504527
    ],
    [
      -0.3630805790528358,
      0.8185153460719622,
      -0.44520233754929184
    ],
    [
      -0.34115259915268187,
      0.8426839789741652,
      -0.4165316502639846
    ],
    [
      -0.3440731429633589,
      0.8553602981418817,
      -0.3872627436947002
    ],
    [
      -0.3334583015843584,
      0.8672527012276187,
      -0.36970030202567306
    ],
    [
      -0.3498399153437873,
      0.868732916454621,
      -0.35059257479373446
    ],
    [
      -0.39685102866375305,
      0.8439692547720782,
      -0.36086723049895236
    ],
    [
      -0.3576463655667196,
      0.8780424470365763,
      -0.31801028033530215
    ],
    [
      -0.4059066193629693,
      0.8519681303950929,
      -0.3307417741205601
    ],
    [
      -0.40904944810082816,
      0.8414804231065866,
      -0.3529720194813861
    ],
    [
      -0.34742873243880706,
      0.896835535989121,
      -0.27382347829043036
    ],
    [
      -0.4188133790211988,
      0.8557147152232754,
      -0.3038876103153839
    ],
    [
      -0.4329703779473876,
      0.8590713036965225,
      -0.27300759510543565
    ],
    [
      -0.4188995283956732,
      0.855693739035707,
      -0.30382792841503853
    ],
    [
      -0.445860811742397,
      0.8602632669312537,
      -0.24729587162178276
    ],
    [
      -0.435178681340984,
      0.8584704859020166,
      -0.2713815397949498
    ],
    [
      -0.46486345410203156,
      0.8572644037457247,
      -0.22135878367667183
    ],
    [
      -0.45672742503540914,
      0.8569579213035431,
      -0.23879526866258266
    ],
    [
      -0.48601039034956145,
      0.8501192866027718,
      -0.20270939548590572
    ],
    [
      -0.43394678678425175,
      0.8946087323997883,
      -0.1066086401454735
    ],
    [
      -0.49725351626475156,
      0.8484920958731342,
      -0.18110798934104622
    ],
    [
      -0.49671650911235016,
      0.8449033932228633,
      -0.19852195267962733
    ],
    [
      -0.49720797517087384,
      0.8588604213580516,
      0.1230569219960809
    ],
    [
      -0.5052703763291663,
      0.8583502050521449,
      0.08908856431171987
    ],
    [
      -0.46032402243818665,
      0.883267348956122,
      0.08910995810992144
    ],
    [
      -0.4564369857579183,
      0.886325960648197,
      0.0780485074378525
    ],
    [
      -0.5121316403636154,
      0.8551754635595856,
      0.07997568045425069
    ],
    [
      -0.5134339606468095,
      0.8548272615525853,
      0.0752058572256086
    ],
    [
      -0.46395738686034504,
      0.8846353357921156,
      0.04651737144004362
    ],
    [
      -0.4639528871780242,
      0.8846387350053121,
      0.046497602168034585
    ],
    [
      -0.5202872025670396,
      0.8514537254149439,
      0.06578586719028248
    ],
    [
      -0.48798129657884637,
      0.8728182992558798,
      0.00790383914950832
    ],
    [
      -0.4702347370000405,
      0.8823501574398565,
      0.018370949468209764
    ],
    [
      -0.5327709099907559,
      0.8442415050873805,
      0.05840752139422074
    ],
    [
      -0.550806056609809,
      0.8340315696051166,
      0.03168641513294485
    ],
    [
      -0.5507683909416097,
      0.8340909757605096,
      0.030763999975153618
    ],
    [
      -0.4948133053961677,
      0.8689965222592408,
      -0.0021993417796019737
    ],
    [
      -0.550194241805008,
      0.8092847104815585,
      -0.2057779231729983
    ],
    [
      -0.5113632537770301,
      0.8339512845486874,
      -0.20744367352648543
    ],
    [
      -0.6038406289899851,
      0.7728022827249129,
      -0.19532825345080743
    ],
    [
      -0.5672055648929402,
      0.7960315511589934,
      -0.2112146223960063
    ],
    [
      -0.7019085250945953,
      0.7079148319517458,
      -0.07861941937117954
    ],
    [
      -0.7558321202286293,
      0.6382240484286823,
      -0.14624592315000695
    ],
    [
      -0.7272780001892243,
      0.6711392407891138,
      -0.1436622076740246
    ],
    [
      -0.783743699969263,
      0.6000275682663333,
      -0.16035189452850368
    ],
    [
      -0.7707944279949274,
      0.6167079905799391,
      -0.159834927743677
    ],
    [
      -0.5291340319974612,
      0.826702385138126,
      0.19125988233041225
    ],
    [
      -0.5314953688014095,
      0.823548520586273,
      0.19819310579032468
    ],
    [
      -0.5303058780807696,
      0.830617559787759,
      0.16985330448717437
    ],
    [
      -0.5438379793355489,
      0.8272238566281356,
      0.14121240475787122
    ],
    [
      -0.5447095353465821,
      0.8267908258552221,
      0.14038679561892695
    ],
    [
      -0.5505464389380621,
      0.8249897321590486,
      0.12763447968617173
    ],
    [
      -0.563286460737326,
      0.8181336326365465,
      0.11561021710448116
    ],
    [
      -0.5684528709442523,
      0.8162292709666215,
      0.10310727778646306
    ],
    [
      -0.5853641828246661,
      0.806076732533221,
      0.08711529564076129
    ],
    [
      -0.5599480733143786,
      0.8276721825112636,
      0.03764191132975522
    ],
    [
      -0.590453635189044,
      0.8024934370386149,
      0.08584164608157269
    ],
    [
      -0.6110204811214415,
      0.7888861301271449,
      0.06567073429724685
    ],
    [
      -0.6221871043530769,
      0.7819643647736181,
      0.037615680253389114
    ],
    [
      -0.6367384513092645,
      0.7708657076563945,
      0.018171554245177645
    ],
    [
      -0.6428799676528176,
      0.76595535962539,
      0.004211205510474528
    ],
    [
      -0.6937186526927002,
      0.716693779950445,
      -0.07144548051884057
    ],
    [
      -0.7452644033289454,
      0.6666470878433318,
      0.012752623289189592
    ],
    [
      -0.762612747862387,
      0.6467171474917192,
      0.013368916857894205
    ],
    [
      -0.7764094623418526,
      0.6302093577172849,
      0.004950982892566619
    ],
    [
      -0.7827328306941711,
      0.6222831071672063,
      0.009646257710503911
    ],
    [
      -0.8180324533007365,
      0.5750959877301736,
      0.00935469098552636
    ],
    [
      -0.8309623425652807,
      0.5560482343786576,
      0.017662001098368504
    ],
    [
      -0.831167402975209,
      0.5557472517590774,
      0.017485433757257404
    ],
    [
      -0.8383709994316573,
      0.5446625068149725,
      -0.021836230947540627
    ],
    [
      -0.8627132012769112,
      0.5033220327150343,
      -0.04891690634279321
    ],
    [
      -0.8634441489072388,
      0.5013485919589848,
      -0.055801353555245355
    ],
    [
      -0.8706380732070741,
      0.48581550868586587,
      -0.07728283769742735
    ],
    [
      -0.876332758183161,
      0.47424871634482474,
      -0.0844337135294858
    ],
    [
      -0.8792933478454205,
      0.4668929251867635,
      -0.0940967844580234
    ],
    [
      -0.8796342448473243,
      0.46507766750824303,
      -0.09973143174029815
    ],
    [
      -0.8862932249302089,
      0.4464376385190841,
      -0.12319802902771548
    ],
    [
      -0.8864266603966674,
      0.4423838091297462,
      -0.13617760887116392
    ],
    [
      -0.8897913701865136,
      0.430884433028075,
      -0.15036596328850838
    ],
    [
      -0.8893999942883274,
      0.4231858329614287,
      -0.1728623757231891
    ],
    [
      -0.7970488020018236,
      0.5697569204781427,
      -0.20022551983880896
    ],
    [
      -0.7859204468012523,
      0.5905178319782347,
      -0.18335141508983613
    ],
    [
      -0.8069842080112969,
      0.5476734705122868,
      -0.2209756948567134
    ],
    [
      -0.7971136099304248,
      0.5677863839993393,
      -0.20549577856647422
    ],
    [
      -0.812543655929048,
      0.5299412335353016,
      -0.24276551692639534
    ],
    [
      -0.8064118054562236,
      0.5438620159927874,
      -0.23219411616381458
    ],
    [
      -0.8184050596283623,
      0.5094432867066861,
      -0.2658584134538267
    ],
    [
      -0.8115001252257836,
      0.5258667961872909,
      -0.2548169135403922
    ],
    [
      -0.8208068582693524,
      0.49052321384547326,
      -0.292682555162933
    ],
    [
      -0.8151630977470041,
      0.5049648764130464,
      -0.283759753419446
    ],
    [
      -0.8206378287103635,
      0.4740783731918636,
      -0.31906621595100937
    ],
    [
      -0.8167869900390049,
      0.4854507690362082,
      -0.31176363441744886
    ],
    [
      -0.8158127568649495,
      0.46829908997490816,
      -0.3393309712730092
    ],
    [
      -0.8199008711964421,
      0.4552528537509508,
      -0.34714175859860286
    ],
    [
      -0.8141423552187136,
      0.4481170673954281,
      -0.36927404369634115
    ],
    [
      -0.8158281863550606,
      0.44101949192680934,
      -0.3740670769918566
    ],
    [
      -0.8090326669072871,
      0.43238813946485755,
      -0.3981289247555388
    ],
    [
      -0.7851732787905352,
      0.44644961409612205,
      -0.42916857334472225
    ],
    [
      -0.8449437966260575,
      0.33731669975483,
      -0.4150752035591304
    ],
    [
      -0.8395166509734128,
      0.3393670158895209,
      -0.4243133526824565
    ],
    [
      -0.8357853256051496,
      0.34347320484468513,
      -0.428356215149045
    ],
    [
      -0.8325504744340726,
      0.345924506154745,
      -0.43266146530653316
    ],
    [
      -0.7641692269232843,
      0.4136915556487224,
      -0.49487845922853635
    ],
    [
      -0.7614256334963623,
      0.41719952496015905,
      -0.4961608217379533
    ],
    [
      -0.7578188751855119,
      0.430430903918512,
      -0.49034660125716995
    ],
    [
      -0.7709290428855119,
      0.46062305278191173,
      -0.43988045430719097
    ],
    [
      -0.893619485219382,
      0.4129144193510053,
      -0.17591446196452626
    ],
    [
      -0.9005763121135008,
      0.3877399792316585,
      -0.1965197561709237
    ],
    [
      -0.8998841089929432,
      0.3821181012723624,
      -0.21022451584432555
    ],
    [
      -0.9057828307647894,
      0.3562265379016917,
      -0.22947792309130613
    ],
    [
      -0.9188075255182565,
      0.31674413733841955,
      -0.23551195832220256
    ],
    [
      -0.9229430889360634,
      0.3056881488727103,
      -0.23394616950045005
    ],
    [
      -0.9097476297488307,
      0.29952841321666634,
      -0.28747518126316635
    ],
    [
      -0.9059712761325567,
      0.28675186747695786,
      -0.31143123369569714
    ],
    [
      -0.9041574822544395,
      0.2858606221712255,
      -0.31746330807700096
    ],
    [
      -0.9007527333617035,
      0.2759679440866565,
      -0.3353896348696603
    ],
    [
      -0.8866089763275444,
      0.26943070719188067,
      -0.375940975576628
    ],
    [
      -0.8702904617082001,
      0.2837582722809789,
      -0.40258633256960136
    ],
    [
      -0.8669534403484678,
      0.23843632891048874,
      -0.4376526583075269
    ],
    [
      -0.8640188486192477,
      0.23200533219571298,
      -0.4468164668669076
    ],
    [
      -0.8447042640555045,
      0.23651593588233127,
      -0.4801405193900567
    ],
    [
      -0.8246096094442059,
      0.299165593941634,
      -0.4801238792372479
    ],
    [
      -0.7911969107443715,
      0.26956669574398284,
      -0.5489455756031137
    ],
    [
      -0.803720636668002,
      0.2918894415682179,
      -0.5184917473740304
    ],
    [
      -0.8175569445028193,
      0.21150143093118404,
      -0.5356003988135888
    ],
    [
      -0.8114932991053014,
      0.21342885323903435,
      -0.5439914981985146
    ],
    [
      -0.8072729820497807,
      0.21654456016033577,
      -0.5490161982286326
    ],
    [
      -0.5599155449117393,
      0.7919078242009094,
      0.24367310178920384
    ],
    [
      -0.5688442138896392,
      0.7920702042278925,
      0.2214521435856134
    ],
    [
      -0.567818904801713,
      0.7970036511851986,
      0.20583214362009994
    ],
    [
      -0.5574110325593324,
      0.7832157677472087,
      0.2754378367858877
    ],
    [
      -0.5637325872186124,
      0.7830951648833638,
      0.2626167032846669
    ],
    [
      -0.5639048505204831,
      0.7685546401440242,
      0.302216949677812
    ],
    [
      -0.5763686701691825,
      0.7501622968191541,
      0.32412294654716967
    ],
    [
      -0.5755879568573051,
      0.756989357240883,
      0.3092985886564433
    ],
    [
      -0.581041033228842,
      0.7324762805724169,
      0.354781363804749
    ],
    [
      -0.5804614643823673,
      0.7441807527661742,
      0.3305442414858377
    ],
    [
      -0.5829488931443778,
      0.7125583083506057,
      0.39042444234738655
    ],
    [
      -0.5838409006266924,
      0.7129942527292966,
      0.3882898380467926
    ],
    [
      -0.5837580052254313,
      0.728185235411531,
      0.3591279079435049
    ],
    [
      -0.5826871110275283,
      0.7010167447730917,
      0.4111584295501321
    ],
    [
      -0.5869678986833066,
      0.6820467065705763,
      0.43621207682907387
    ],
    [
      -0.5874299006882854,
      0.692002587992242,
      0.4195932911634676
    ],
    [
      -0.5908360631979328,
      0.6586000243858091,
      0.4660029552521957
    ],
    [
      -0.5920195425780637,
      0.6718305192116393,
      0.44514785707838644
    ],
    [
      -0.5964225551063599,
      0.6379755032377203,
      0.48710100906175346
    ],
    [
      -0.5967573398002799,
      0.6454236131769264,
      0.47676937501074307
    ],
    [
      -0.6013162899239954,
      0.6263533271610249,
      0.49608490102638253
    ],
    [
      -0.6006160315269443,
      0.6158717926340578,
      0.5098649994954908
    ],
    [
      -0.6008077066244844,
      0.5799818619854942,
      0.550137382322331
    ],
    [
      -0.6045153913845758,
      0.6061017150644314,
      0.5169157112867705
    ],
    [
      -0.6041628673843039,
      0.5371583809152056,
      0.5885984229392148
    ],
    [
      -0.6114295019797179,
      0.5650626800645486,
      0.5539477698367452
    ],
    [
      -0.6007611986963384,
      0.5100565431314004,
      0.6155715270785228
    ],
    [
      -0.6064978178445808,
      0.5303190085908542,
      0.5923868213228374
    ],
    [
      -0.5938786926714896,
      0.48101081562138914,
      0.6449315418290908
    ],
    [
      -0.5949090428107952,
      0.4814687315294834,
      0.6436389448606523
    ],
    [
      -0.6021260486896557,
      0.5058228521178045,
      0.6177276614858622
    ],
    [
      -0.5826570006008367,
      0.4540877051384576,
      0.6740290614602058
    ],
    [
      -0.5866087511262336,
      0.4559270349026914,
      0.6693434932431632
    ],
    [
      -0.5675436160369913,
      0.4274200629296197,
      0.7037089836721541
    ],
    [
      -0.5761564950638095,
      0.43115156005401883,
      0.6943716767400384
    ],
    [
      -0.5504681367824823,
      0.40097609988006,
      0.7322588324576211
    ],
    [
      -0.5613217740440544,
      0.4051904036881309,
      0.7216222022243254
    ],
    [
      -0.5336547650903463,
      0.3710633451927384,
      0.7599503836111552
    ],
    [
      -0.5434278066674825,
      0.37516140108292856,
      0.7509594809828711
    ],
    [
      -0.512376141937923,
      0.34022058813401007,
      0.7884926382551442
    ],
    [
      -0.5272308590200665,
      0.3459113910200237,
      0.7761268780679839
    ],
    [
      -0.4862287461531512,
      0.3087817029229782,
      0.8174567061039503
    ],
    [
      -0.5065998456217098,
      0.31555565271526786,
      0.8023597861654714
    ],
    [
      -0.4567305936387942,
      0.2748708404012778,
      0.8460751656510489
    ],
    [
      -0.48114405037935387,
      0.28376120258672727,
      0.8294455875409092
    ],
    [
      -0.42410259301174963,
      0.23480036210225186,
      0.8746460887452489
    ],
    [
      -0.4528136858276132,
      0.25123778052330836,
      0.8554760917553065
    ],
    [
      -0.3769032547879152,
      0.1963845807132976,
      0.9051944724689487
    ],
    [
      -0.42279730667959214,
      0.22391985648997884,
      0.8781243279479223
    ],
    [
      0.3817270707373362,
      -0.8084099075241765,
      0.44806011302396126
    ],
    [
      0.3059439771471159,
      -0.8365884283581614,
      0.4544426084607677
    ],
    [
      0.3027795202852743,
      -0.8334942618858648,
      0.4621816498944506
    ],
    [
      0.30350873282377655,
      -0.8196414295658816,
      0.48587074005223163
    ],
    [
      0.31223473077948843,
      -0.8086752683028858,
      0.49855168571605085
    ],
    [
      0.3862768460204431,
      -0.7895793007944839,
      0.4768172878424112
    ],
    [
      0.3921416017548577,
      -0.802079312662598,
      0.45043727684532153
    ],
    [
      0.31143715677926426,
      -0.7964322742384885,
      0.5183652476088236
    ],
    [
      0.3197788611504151,
      -0.7857171849214395,
      0.529518635442108
    ],
    [
      0.38977156722395856,
      -0.7721142596320965,
      0.5019140319382979
    ],
    [
      0.3920051204812355,
      -0.7687459411866275,
      0.5053332201880045
    ],
    [
      0.3189381198395365,
      -0.7757209400062254,
      0.5445507312905561
    ],
    [
      0.3295729436312906,
      -0.7616783401411261,
      0.5578779265987005
    ],
    [
      0.39485043045534807,
      -0.7524557147685842,
      0.5271655668585775
    ],
    [
      0.32832927438638676,
      -0.7498278873561507,
      0.5744197306185789
    ],
    [
      0.3363168176295751,
      -0.7387218441498172,
      0.5841070408370441
    ],
    [
      0.40074382788548085,
      -0.7279757541902978,
      0.5562874128746391
    ],
    [
      0.39815430184337736,
      -0.7473305180593076,
      0.5319494794628713
    ],
    [
      0.401053350440413,
      -0.72748630315259,
      0.5567044896764326
    ],
    [
      0.335187825942075,
      -0.7253692169590709,
      0.6012392372661731
    ],
    [
      0.3429012710012774,
      -0.7143190865728072,
      0.6100548835174576
    ],
    [
      0.40344677027459774,
      -0.7025077797655679,
      0.5862708613975696
    ],
    [
      0.4067671187624252,
      -0.6972994274959453,
      0.590181344594644
    ],
    [
      0.3411231979424288,
      -0.6963604003200984,
      0.6314405408995869
    ],
    [
      0.3448545201591952,
      -0.6908081957491525,
      0.6354993285689385
    ],
    [
      0.4079150618642699,
      -0.671945027978567,
      0.6181384809888085
    ],
    [
      0.4086521230066436,
      -0.6730050577394421,
      0.616496256776384
    ],
    [
      0.4099303455197541,
      -0.6472790915006812,
      0.6426405601330403
    ],
    [
      0.3422502158165344,
      -0.6684732216377182,
      0.6603092773290601
    ],
    [
      0.3470211034402459,
      -0.661464975725731,
      0.6648612183420479
    ],
    [
      0.40864932632674317,
      -0.6453504336053111,
      0.6453902276438155
    ],
    [
      0.410631987332817,
      -0.6198142789814258,
      0.6687388358319237
    ],
    [
      0.3437726518246916,
      -0.6354617299520986,
      0.6913817712550032
    ],
    [
      0.34530603300130114,
      -0.6331309513816107,
      0.6927546044419488
    ],
    [
      0.40703790154189007,
      -0.6146466806958842,
      0.6756697452290626
    ],
    [
      0.408586439140138,
      -0.5950656158091902,
      0.6920650508676274
    ],
    [
      0.3422345981489113,
      -0.6041001692754827,
      0.7196794184296134
    ],
    [
      0.39754982931575666,
      -0.5818040855860108,
      0.7095478413795919
    ],
    [
      0.39972047173048825,
      -0.5582817405831588,
      0.727011033348872
    ],
    [
      0.3369481215531289,
      -0.6008425945873658,
      0.724882155878692
    ],
    [
      0.3342064525875596,
      -0.5703385465668198,
      0.7503465794876969
    ],
    [
      0.3925081080318401,
      -0.5479117789849103,
      0.73873545168677
    ],
    [
      0.3948312425807878,
      -0.5279163345115979,
      0.7519392486351206
    ],
    [
      0.3286139954874368,
      -0.5665927124794725,
      0.7556358515415588
    ],
    [
      0.32668364488660334,
      -0.5365457998524114,
      0.7780722336803568
    ],
    [
      0.38093221770335184,
      -0.506967549771029,
      0.773223479334898
    ],
    [
      0.3632711372643116,
      -0.47105527288059235,
      0.8038289685760798
    ],
    [
      0.3818577947774048,
      -0.4996918415402698,
      0.7774912784500102
    ],
    [
      0.2799867952855714,
      -0.5103287718571747,
      0.8131247992039495
    ],
    [
      0.27560738320480344,
      -0.5099994438048772,
      0.814825832703969
    ],
    [
      0.2726828596674857,
      -0.48686227758241635,
      0.8298247891638478
    ],
    [
      0.2818221668969124,
      -0.46161169394872326,
      0.8411247887533211
    ],
    [
      0.34102093349327656,
      -0.42520656889584,
      0.838393759928592
    ],
    [
      0.34385300854619766,
      -0.4258105212119374,
      0.8369292135771977
    ],
    [
      0.36514089251032505,
      -0.46011008480529875,
      0.8093026865624653
    ],
    [
      0.25698611560000034,
      -0.41081616443348606,
      0.8747503732088271
    ],
    [
      0.31392118123966595,
      -0.3802943941826458,
      0.8699595770622606
    ],
    [
      0.2536098885286554,
      -0.40998062027430776,
      0.876126654907826
    ],
    [
      0.22674485357245852,
      -0.34584377513784453,
      0.9104827590771878
    ],
    [
      0.23082184567925745,
      -0.3378457898390582,
      0.9124590389958576
    ],
    [
      0.2847919248507399,
      -0.3234058246176101,
      0.9023869636376703
    ],
    [
      0.3002659301643394,
      -0.3306911582589041,
      0.8946975628847597
    ],
    [
      0.31568314457738356,
      -0.3746349379051755,
      0.8717756681225509
    ],
    [
      0.20324981534868533,
      -0.2807539296069098,
      0.938012123360356
    ],
    [
      0.20752280806173462,
      -0.2729079600571868,
      0.9393910418306092
    ],
    [
      0.23313997716959997,
      -0.24642760391714366,
      0.9407014335446788
    ],
    [
      0.24986287318282646,
      -0.2369578152487757,
      0.9388394635918059
    ],
    [
      0.2868620942805647,
      -0.30308278138730016,
      0.9087634271313445
    ],
    [
      0.13887113306394808,
      0.025700573542085284,
      0.9899769133273478
    ],
    [
      0.1620550684559894,
      0.013900993523149958,
      0.9866837979650795
    ],
    [
      0.16608219236094054,
      -0.0024905707041736488,
      0.9861087680566232
    ],
    [
      0.15286107378788105,
      -0.04867670357249632,
      0.9870481602483899
    ],
    [
      0.05219885054935299,
      -0.06875490724560991,
      0.9962670539222773
    ],
    [
      -0.10033361720501237,
      0.03849995430642534,
      0.9942086897512822
    ],
    [
      -0.11127918477599236,
      0.07371596278519423,
      0.99105141131338
    ],
    [
      -0.11002552658527731,
      0.1314418066291827,
      0.9851991854288599
    ],
    [
      -0.1029067850229795,
      0.1469201102210737,
      0.9837808062819999
    ],
    [
      -0.07215768144524229,
      0.17140424441887717,
      0.9825547587812299
    ],
    [
      -0.00609815025019676,
      0.10129784273144453,
      0.9948374538694659
    ],
    [
      -0.021369908797785515,
      0.06311786905822905,
      0.9977772605163552
    ],
    [
      -0.2182992997186524,
      0.16496428391965925,
      0.9618379285374538
    ],
    [
      -0.19579348924113726,
      0.19788003803988483,
      0.9604730085307522
    ],
    [
      -0.21464261239489724,
      0.11649867722273959,
      0.9697198601398478
    ],
    [
      -0.19594465632693256,
      0.20662123827880866,
      0.9585996847219657
    ],
    [
      -0.18382060556472204,
      0.6102061326202399,
      0.7706221257415784
    ],
    [
      -0.20975240897003888,
      0.6557384593467198,
      0.7252661579481396
    ],
    [
      0.33358287587011154,
      -0.8585351244846765,
      0.3894096877997603
    ],
    [
      0.3105001088201235,
      -0.8575236457792311,
      0.4101742061029524
    ],
    [
      0.3007333169972572,
      -0.8524414143784941,
      0.4276717281984159
    ],
    [
      0.2999515704158933,
      -0.8500591406975011,
      0.43293014762391563
    ],
    [
      0.4019886920837013,
      -0.8022473417593614,
      0.44136639436739367
    ],
    [
      0.3710140563360243,
      -0.8504211881910223,
      0.3730045209871578
    ],
    [
      0.34299975875110517,
      -0.8623830053916604,
      0.3723529474951571
    ],
    [
      0.42054304447611063,
      -0.7986108206622805,
      0.430539550870629
    ],
    [
      0.4046185840147839,
      -0.8415285416048214,
      0.35792948346613424
    ],
    [
      0.4360227433568735,
      -0.7928033202430853,
      0.4258486382355658
    ],
    [
      0.4552396770786118,
      -0.7881042226313278,
      0.414304924764396
    ],
    [
      0.42412655605404426,
      -0.840892710523441,
      0.3361786933139519
    ],
    [
      0.4566133918105611,
      -0.7875345828075088,
      0.41387617870742244
    ],
    [
      0.4737698802791365,
      -0.7829491725736629,
      0.40315343692756644
    ],
    [
      0.45701875001212694,
      -0.8324127385938782,
      0.3134053202547664
    ],
    [
      0.43175256515597005,
      -0.8435831941711625,
      0.3193072454442879
    ],
    [
      0.4935850141171191,
      -0.8101625828140715,
      0.3162442461880314
    ],
    [
      0.47273607652961297,
      -0.8270048689824037,
      0.30427544860994843
    ],
    [
      0.4921687726068851,
      -0.7746337879106133,
      0.3971301976655605
    ],
    [
      0.5034156846874562,
      -0.7675686405756637,
      0.39675058968511595
    ],
    [
      0.5358400236286419,
      -0.7561421726559999,
      0.37566538808988054
    ],
    [
      0.5105013968482767,
      -0.7994457993587608,
      0.3166618665131475
    ],
    [
      0.5374105958884576,
      -0.7552796048704639,
      0.3751567271068572
    ],
    [
      0.5589032202834852,
      -0.7516618377956173,
      0.3501880522782938
    ],
    [
      0.5362141801004954,
      -0.7880938182111757,
      0.30229536343861413
    ],
    [
      0.5355044162917663,
      -0.7886002258579877,
      0.3022328637139672
    ],
    [
      0.5789685370673477,
      -0.7424421350132745,
      0.33700906403689784
    ],
    [
      0.5644469763779357,
      -0.7741632166021181,
      0.2864802347773195
    ],
    [
      0.5623922506387594,
      -0.7757832620844408,
      0.28613857952239613
    ],
    [
      0.5878820117873053,
      -0.7364273962615479,
      0.3347677258224691
    ],
    [
      0.5926619113406254,
      -0.7340472011294363,
      0.3315517536676854
    ],
    [
      0.5951558517450645,
      -0.7573212973515292,
      0.26880097602390457
    ],
    [
      0.5917503426892871,
      -0.7600464454334875,
      0.26862787031697216
    ],
    [
      0.6343307058610084,
      -0.7036177022603338,
      0.3202291127735938
    ],
    [
      0.6099547336434806,
      -0.7487874817581393,
      0.25936948561504886
    ],
    [
      0.6465519499409363,
      -0.6938967472220083,
      0.3169824604332063
    ],
    [
      0.6381868354516186,
      -0.7345007146722341,
      0.23070817757987258
    ],
    [
      0.6299881008281857,
      -0.7429318052073688,
      0.22620195760915957
    ],
    [
      0.6444672046966796,
      -0.6940021209634147,
      0.32097208316102793
    ],
    [
      0.6845772547028406,
      -0.678387412896921,
      0.26672926417351517
    ],
    [
      0.6963583492512893,
      -0.6782361127912444,
      0.23469304364177876
    ],
    [
      0.6852066128500125,
      -0.691279036094547,
      0.2294018133380969
    ],
    [
      0.7597791687870887,
      -0.6037104888268855,
      0.2413902656645535
    ],
    [
      0.7437484946057519,
      -0.6498137346334182,
      0.15678101624063875
    ],
    [
      0.7398367288483693,
      -0.6546487922392105,
      0.15516627683452178
    ],
    [
      0.7078677762821848,
      -0.6733882372356154,
      0.21324045876433848
    ],
    [
      0.7024534310539984,
      -0.6734708195466224,
      0.23020910585740606
    ],
    [
      0.7492668618480365,
      -0.6119321508908774,
      0.25325523181656084
    ],
    [
      0.7875234456538672,
      -0.5750998917232558,
      0.2215105800754443
    ],
    [
      0.8089447381090906,
      -0.5665139289336256,
      0.15706807126148126
    ],
    [
      0.8086462710849894,
      -0.5672166003466169,
      0.15606580840007225
    ],
    [
      0.7904007047350574,
      -0.5939840483166061,
      0.14983216043206615
    ],
    [
      0.823245975023056,
      -0.5450293136030316,
      0.15877377592583133
    ],
    [
      0.85365790873941,
      -0.5110444812475168,
      0.10050727850814309
    ],
    [
      0.8426471833686624,
      -0.5348978418385536,
      0.06188718088035293
    ],
    [
      0.8390710711022635,
      -0.540422806318311,
      0.06247341875023034
    ],
    [
      0.8173570553197421,
      -0.5644743246518111,
      0.11530906698053618
    ],
    [
      0.8093898813831171,
      -0.5678278021078548,
      0.14986529640976423
    ],
    [
      0.8474820348880296,
      -0.5277612475179925,
      0.05694090059260254
    ],
    [
      0.8876745660064864,
      -0.46035348198649223,
      0.010418084666021598
    ],
    [
      0.8714530381192827,
      -0.4903221449447891,
      0.01240147287274677
    ],
    [
      0.8594903858262514,
      -0.5105884419206675,
      0.023994158648861213
    ],
    [
      0.8886331476626806,
      -0.4585830896979033,
      0.0057165302624294
    ],
    [
      0.8942894064284288,
      -0.44674200675219333,
      -0.02584641083229308
    ],
    [
      0.8887508118239724,
      -0.4583733775741986,
      0.0039801021910374525
    ],
    [
      0.8974736905422809,
      -0.4373119730413541,
      -0.05743877626739952
    ],
    [
      0.8943094801627163,
      -0.4458269409872477,
      -0.038064319001465195
    ],
    [
      0.9304632259475969,
      -0.361859735803701,
      -0.057408333569849285
    ],
    [
      0.9135466432080058,
      -0.3887768643511824,
      -0.11952020928967101
    ],
    [
      0.9029838676703967,
      -0.4121937520688154,
      -0.12131135759871473
    ],
    [
      0.89975381270847,
      -0.421666383026415,
      -0.11243014694463425
    ],
    [
      0.8959430152367709,
      -0.4363161383175043,
      -0.08315251584975507
    ],
    [
      0.9349569920064328,
      -0.3299169810372085,
      -0.13042319088865115
    ],
    [
      0.9196179872238434,
      -0.36734537231689746,
      -0.1391407022108447
    ],
    [
      0.9435556448869323,
      -0.29962632310554377,
      -0.14116235866638666
    ],
    [
      0.9452822470637561,
      -0.2896257982544192,
      -0.15019444187980618
    ],
    [
      0.9452971505448664,
      -0.28114240800272955,
      -0.16544559103881507
    ],
    [
      0.9419568126604316,
      -0.2747859233883018,
      -0.1928990912115422
    ],
    [
      0.8248649816820054,
      -0.542261611854459,
      0.15984400615521638
    ],
    [
      0.8386199946222858,
      -0.5141860748298651,
      0.1798031842620526
    ],
    [
      0.8446590874766131,
      -0.4933840461079457,
      0.20766128428122482
    ],
    [
      0.7707437622947603,
      -0.1446296717636678,
      -0.6205129417902995
    ],
    [
      0.822621279350594,
      -0.2123613928737422,
      -0.5274437122350742
    ],
    [
      0.8227669858831336,
      -0.2126473018425504,
      -0.5271011401617974
    ],
    [
      0.842431467320109,
      -0.2086966817063207,
      -0.4967443184513123
    ],
    [
      0.844249002929388,
      -0.20867680907469888,
      -0.49365738159895484
    ],
    [
      0.7413863918670494,
      -0.13827876967432473,
      -0.6566773940160517
    ],
    [
      0.7546949687209911,
      -0.139371503938003,
      -0.6411014647286977
    ],
    [
      0.4395982323356266,
      0.5454165742872663,
      -0.7136344684921934
    ],
    [
      0.33999581232658166,
      0.5347253617526403,
      -0.7736094848816785
    ],
    [
      0.454917696642195,
      0.6445632357680966,
      -0.6144819967891012
    ],
    [
      0.4305431266654639,
      0.6764036432092057,
      -0.5975874225035529
    ],
    [
      0.4182966049796938,
      0.6865703107296218,
      -0.5946840830954638
    ],
    [
      0.34404145274752157,
      0.7182130186748642,
      -0.6048185997448442
    ],
    [
      0.3634034399041923,
      0.7605673088613497,
      -0.5380290963853204
    ],
    [
      0.3109864387908749,
      0.7356655627036226,
      -0.6017338404478609
    ],
    [
      0.313594763414358,
      0.7267768294360992,
      -0.6111086356400997
    ],
    [
      0.3815350302850343,
      0.7771503002963406,
      -0.500468212192049
    ],
    [
      0.4478084822453203,
      0.7838472804596327,
      -0.43017555038051686
    ],
    [
      0.3835323032641646,
      0.7954514752655882,
      -0.4692120233441212
    ],
    [
      0.4090430158101951,
      0.8178288167295203,
      -0.404771340072013
    ],
    [
      0.38357356997848396,
      0.8217224494771935,
      -0.42147779590289497
    ],
    [
      0.37842249102920755,
      0.8026948076294353,
      -0.4609527785879948
    ],
    [
      0.25092272308123087,
      0.922794982367812,
      -0.29238195491221664
    ],
    [
      0.23836949487147882,
      0.9235392550409026,
      -0.3004250793679027
    ],
    [
      0.19097056303206703,
      0.9040923655910351,
      -0.38229208536827086
    ],
    [
      0.19250550696827298,
      0.9030435946703262,
      -0.3839972602920284
    ],
    [
      0.4128211943507912,
      0.8318584237471217,
      -0.37093156287345047
    ],
    [
      0.40176803639808656,
      0.8508272938890779,
      -0.3386375066383144
    ],
    [
      0.37766113541808827,
      0.8733103758992504,
      -0.3077353638135051
    ],
    [
      0.049375714500421844,
      0.8911093988698646,
      -0.45109431171691944
    ],
    [
      0.10664225970223497,
      0.9047666743568614,
      -0.41234050664326694
    ],
    [
      -0.0007181780368650141,
      0.9704744019924366,
      -0.24120306651808926
    ],
    [
      -0.05217360894285847,
      0.9561847689311828,
      -0.2880774239573421
    ],
    [
      -0.06209419476949267,
      0.9084418170520049,
      -0.41337365180569974
    ],
    [
      -0.033013064698620254,
      0.9772976236504264,
      -0.20928328257754952
    ],
    [
      -0.033779056335889554,
      0.9772240857495592,
      -0.20950432354487347
    ],
    [
      -0.07987771786959519,
      0.968473937020555,
      -0.23596140256374853
    ],
    [
      -0.09689256642708671,
      0.9602480544533369,
      -0.26179286562042486
    ],
    [
      -0.09746672602956992,
      0.9582718067680774,
      -0.2687291976516904
    ],
    [
      -0.0033747722666573284,
      0.9738273611805197,
      -0.2272639028273822
    ],
    [
      -0.11417746845859393,
      0.9489638772324192,
      -0.2939916077108341
    ],
    [
      -0.12666225775515702,
      0.9145644257498644,
      -0.38409449828549613
    ],
    [
      -0.10136978915254105,
      0.908450704098395,
      -0.4055138518846178
    ],
    [
      0.02266203743606858,
      0.06145537158796552,
      -0.9978525288649778
    ],
    [
      -0.04532687958535653,
      0.02653088643318181,
      -0.9986198406060858
    ],
    [
      -0.07414954432039932,
      -0.04167791321759672,
      -0.9963758310130287
    ],
    [
      -0.03083516581340987,
      -0.06305923692701303,
      -0.9975333203394473
    ],
    [
      -0.006635658266940344,
      -0.062804351061927,
      -0.9980037983530196
    ],
    [
      0.007643026049113088,
      -0.05949904029428942,
      -0.9981991025626457
    ],
    [
      0.02023878279598358,
      -0.05364219173106908,
      -0.9983551006216296
    ],
    [
      0.02955413601591082,
      -0.04676377089601683,
      -0.9984686789158376
    ],
    [
      0.040182384936170434,
      -0.025318388338120147,
      -0.9988715408663926
    ],
    [
      0.15925894694923215,
      -0.02365635400189998,
      -0.9869533751560701
    ],
    [
      0.15407829569380244,
      -0.03534501169232788,
      -0.9874262549398626
    ],
    [
      0.14728488244381246,
      -0.08256909605539439,
      -0.9856416731145794
    ],
    [
      0.15029023415472095,
      -0.09314030261999086,
      -0.9842447508346568
    ],
    [
      0.18106259126106167,
      -0.10725330366858975,
      -0.9776057829708267
    ],
    [
      0.22496676652342865,
      -0.07573710831351661,
      -0.9714184702713347
    ],
    [
      0.22978126872215526,
      -0.052759865168063344,
      -0.9718111777356156
    ],
    [
      0.22908476659106866,
      -0.04466429274793999,
      -0.972381237308311
    ],
    [
      0.17184751689746147,
      -0.011803827427220326,
      -0.9850528415238672
    ],
    [
      0.2442481599988155,
      -0.09744843595360585,
      -0.9648039379414809
    ],
    [
      0.27952512488591363,
      -0.10711029312960609,
      -0.9541452141383954
    ],
    [
      0.2886773841053389,
      -0.10066033849794398,
      -0.9521201941769631
    ],
    [
      0.2994837014071725,
      -0.06876417644542526,
      -0.9516201976782764
    ],
    [
      0.3166950275808116,
      -0.05532605602340145,
      -0.9469125023097352
    ],
    [
      0.3123860969943552,
      -0.018244820398595762,
      -0.949780002386477
    ],
    [
      0.29461593034425465,
      -0.012366655937827669,
      -0.9555357237740014
    ],
    [
      0.24897733472432176,
      -0.019646472739317685,
      -0.968310024167093
    ],
    [
      0.36344447924748413,
      -0.0035037296743771983,
      -0.9316092713057841
    ],
    [
      0.34991517730126503,
      0.01104365280192823,
      -0.9367162891863334
    ],
    [
      0.3430046379607039,
      -0.074907755706937,
      -0.9363421631393068
    ],
    [
      0.3609713238544736,
      -0.07690606599524191,
      -0.9294004305830099
    ],
    [
      0.378491505693362,
      -0.04706226343919284,
      -0.9244075526941306
    ],
    [
      0.39861770324903756,
      0.062109469425861444,
      -0.9150116613814822
    ],
    [
      0.35263191986875375,
      0.03503854577280629,
      -0.935105892078434
    ],
    [
      0.42812787632215243,
      0.1335587569738541,
      -0.8937944841804981
    ],
    [
      0.38976201187647097,
      0.11027820653894814,
      -0.9142889539202357
    ],
    [
      0.4328812466193608,
      0.23390904191766265,
      -0.8705747448866348
    ],
    [
      0.411100011477426,
      0.19042975557234837,
      -0.891478148221209
    ],
    [
      0.3709811426143244,
      0.3374183427869286,
      -0.8651715747616151
    ],
    [
      0.3657495800824665,
      0.2755292026306616,
      -0.8889943212232636
    ],
    [
      0.37067239433029714,
      0.26398556229577186,
      -0.890456960768363
    ],
    [
      0.32375330586237633,
      0.45897589655776366,
      -0.8273602137655518
    ],
    [
      0.3235627340531407,
      0.4447986810288602,
      -0.8351414793237387
    ],
    [
      0.14130799956917642,
      0.49323126594377276,
      -0.8583443175982823
    ],
    [
      0.15219343278617722,
      0.46523589246650626,
      -0.8720050019223816
    ],
    [
      0.1613586212356692,
      0.4585496615472684,
      -0.8738967921029402
    ],
    [
      0.23456082411807516,
      0.43933445166621665,
      -0.8671599964067728
    ],
    [
      0.33179262747894367,
      0.5441925436731592,
      -0.7705635131260471
    ],
    [
      0.18195736418369485,
      0.6501835249875131,
      -0.7376672023711872
    ],
    [
      0.1385909724108736,
      0.49522352325664354,
      -0.8576399036772281
    ],
    [
      0.2589403576745136,
      0.6377705249706401,
      -0.7253955118733979
    ],
    [
      0.1435137253008569,
      0.6576138290687181,
      -0.739559235266418
    ],
    [
      0.10973249893212199,
      0.5028202608828541,
      -0.8573975530194906
    ],
    [
      0.10652397855974134,
      0.502429628322949,
      -0.8580309496603646
    ],
    [
      0.09042159636058311,
      0.6701043677616407,
      -0.7367388080034711
    ],
    [
      0.07382637337296469,
      0.5104118046085668,
      -0.8567551904195397
    ],
    [
      -0.23914434790752162,
      0.6239584774441553,
      -0.7439662621983995
    ],
    [
      -0.25857667202846357,
      0.5367141924236092,
      -0.8031662221070788
    ],
    [
      -0.08441341406048641,
      0.7375665505700322,
      -0.6699775809733316
    ],
    [
      -0.09320908412653187,
      0.7238670744931007,
      -0.683614310193323
    ],
    [
      0.008634632514524173,
      0.7939235496199764,
      -0.607956281717819
    ],
    [
      -0.18809156884821396,
      0.718305168953231,
      -0.6698203087271151
    ],
    [
      0.007523822945046923,
      0.7988271670493245,
      -0.6015135487021404
    ],
    [
      -0.13602779575758697,
      0.8002271355366269,
      -0.584065895539345
    ],
    [
      -0.14002718780619347,
      0.7978409150542016,
      -0.5863806450937507
    ],
    [
      -0.17950556392158992,
      0.7611999417291389,
      -0.6231792689369148
    ],
    [
      -0.19017873777204275,
      0.7372532834302892,
      -0.6482974963476955
    ],
    [
      -0.2394994499924036,
      0.8650370429392463,
      -0.4408525011795449
    ],
    [
      -0.23455257499197266,
      0.86184920850908,
      -0.449667689918797
    ],
    [
      -0.15149653591208928,
      0.8752881225248019,
      -0.45925973280230464
    ],
    [
      -0.1759022281008534,
      0.9145480271365692,
      -0.36422563365277344
    ],
    [
      -0.2224407746586531,
      0.9035270032430349,
      -0.36627729410914767
    ],
    [
      -0.16668988819772537,
      0.8555222370097942,
      -0.4902001460162852
    ],
    [
      -0.23977789112426934,
      0.8482545023404185,
      -0.47219790574208054
    ],
    [
      -0.2344693618276152,
      0.8448506907387292,
      -0.4808860870543491
    ],
    [
      -0.24059385001322342,
      0.828493126806919,
      -0.5056814591909702
    ],
    [
      -0.23715423473674538,
      0.8260074065138512,
      -0.5113410147159038
    ],
    [
      -0.16824648172089535,
      0.835588691163905,
      -0.5229576087863458
    ],
    [
      -0.24419155990457303,
      0.8059517360669501,
      -0.5392701375025696
    ],
    [
      -0.24382971736551762,
      0.8055907260025253,
      -0.5399728244163553
    ],
    [
      -0.1542347144917543,
      0.8138895692576098,
      -0.5601744566644479
    ],
    [
      -0.24601086375426295,
      0.7818032330827454,
      -0.5729418466618127
    ],
    [
      -0.250685098173895,
      0.7863383699652916,
      -0.5646494040321596
    ],
    [
      -0.2527400852230235,
      0.7617796522365409,
      -0.5965016435516616
    ],
    [
      -0.25492503025492996,
      0.760126847046835,
      -0.5976791826290763
    ],
    [
      -0.2629246558173257,
      0.735379514852589,
      -0.6245699276290139
    ],
    [
      -0.26848759571886105,
      0.7309929673858195,
      -0.6273465490281902
    ],
    [
      -0.28051668485713527,
      0.7011772803072897,
      -0.6554851722942596
    ],
    [
      -0.334688388620036,
      0.6919045142559838,
      -0.6397279309793461
    ],
    [
      -0.34803085592603367,
      0.674359914642169,
      -0.6512397629500205
    ],
    [
      -0.35513258537240683,
      0.646977020471889,
      -0.6747603884254226
    ],
    [
      -0.3700356195531,
      0.625302703841209,
      -0.6870736269358813
    ],
    [
      -0.3780403517190824,
      0.6178281107476541,
      -0.6894736528991496
    ],
    [
      -0.3787618501526851,
      0.6161946484602585,
      -0.6905386419874366
    ],
    [
      -0.3817068511726385,
      0.5876229206626018,
      -0.7134417866089866
    ],
    [
      -0.36907650734628056,
      0.5433772116110639,
      -0.7540051310348332
    ],
    [
      -0.3628440416264666,
      0.5332008983098077,
      -0.7642257542753875
    ],
    [
      -0.3316497779119479,
      0.503372347527079,
      -0.7978876515876363
    ],
    [
      -0.2922764328714993,
      0.8554227178120879,
      -0.42758210982090095
    ],
    [
      -0.282248807214945,
      0.8838813759175218,
      -0.3729468113979383
    ],
    [
      -0.2929821842006888,
      0.8399527947042632,
      -0.4567720902260683
    ],
    [
      -0.2892747842129497,
      0.8525586072768534,
      -0.4352745344913984
    ],
    [
      -0.373896330203843,
      0.8074669621075246,
      -0.456287890881343
    ],
    [
      -0.34447318219717865,
      0.8070717216992916,
      -0.4795554845690854
    ],
    [
      -0.29239238853544636,
      0.8222159565446605,
      -0.4883314570349585
    ],
    [
      -0.2888005533122871,
      0.8357321602596869,
      -0.4670610203326691
    ],
    [
      -0.29401822701512,
      0.8022303889754668,
      -0.5195956939651795
    ],
    [
      -0.28973537441839586,
      0.8193674206857802,
      -0.49466194792945584
    ],
    [
      -0.3327942861482213,
      0.79306631623024,
      -0.5101899461652422
    ],
    [
      -0.2989824408031694,
      0.797506009680997,
      -0.5240168552766912
    ],
    [
      -0.36182830103391406,
      0.7683218171469989,
      -0.5279790392305785
    ],
    [
      -0.35696238966585225,
      0.7664225723172874,
      -0.5340171280086405
    ],
    [
      -0.3033264515966157,
      0.7783103694405481,
      -0.5497508822940838
    ],
    [
      -0.30197814370973286,
      0.7767620590944844,
      -0.552675224949446
    ],
    [
      -0.35396264287450196,
      0.7493370479387077,
      -0.5596467064459512
    ],
    [
      -0.31442658219154607,
      0.7487078847948073,
      -0.5835858357237849
    ],
    [
      -0.30624223037723397,
      0.7570882645616426,
      -0.5770901627966096
    ],
    [
      -0.36914143253906273,
      0.7342335732276032,
      -0.5697680780180955
    ],
    [
      -0.36759715945056043,
      0.7265866673893374,
      -0.5804688993701004
    ],
    [
      -0.3317464289700378,
      0.7230338433607737,
      -0.6059425453131476
    ],
    [
      -0.31700787898255733,
      0.7386532653363014,
      -0.5948927283729394
    ],
    [
      -0.38525657096188176,
      0.7016692940731635,
      -0.5993643101533165
    ],
    [
      -0.3373241918303497,
      0.6987779469928468,
      -0.630810407652302
    ],
    [
      -0.3858148851255828,
      0.7079569654259036,
      -0.5915604867809202
    ],
    [
      -0.40992354134480874,
      0.6750701361035362,
      -0.6133865026168117
    ],
    [
      -0.4174222462061266,
      0.6711128211978106,
      -0.6126714042585532
    ],
    [
      -0.4256809582810625,
      0.6464345067427711,
      -0.6331809774852262
    ],
    [
      -0.4473455082542583,
      0.6345270651564606,
      -0.630283586831093
    ],
    [
      -0.47334059494844055,
      0.6033365861215995,
      -0.6418205707368612
    ],
    [
      -0.45534290143368356,
      0.5982829492034938,
      -0.6593332653570002
    ],
    [
      -0.4506093902390881,
      0.5697955871449257,
      -0.6872293403941122
    ],
    [
      -0.4577867198711945,
      0.5625789559910145,
      -0.6884302705326318
    ],
    [
      -0.4568599458066205,
      0.542012044134627,
      -0.7053381699089984
    ],
    [
      -0.49944796344778286,
      0.4966032045229899,
      -0.7098851942852166
    ],
    [
      -0.3396639735836838,
      0.4889254975360733,
      -0.8034800824590773
    ],
    [
      -0.5297331209105117,
      0.47545362188416196,
      -0.7023721763051562
    ],
    [
      -0.5269488441675644,
      0.4683235627400648,
      -0.7092234881988332
    ],
    [
      -0.42231381408731644,
      0.41972331349089564,
      -0.8034198046745218
    ],
    [
      -0.3871839917636536,
      0.3487167705346371,
      -0.8535134272346606
    ],
    [
      -0.43132421856588826,
      0.39345618344313016,
      -0.8118815493585821
    ],
    [
      -0.39848989579499633,
      0.2814631795412086,
      -0.8729171103328461
    ],
    [
      -0.3784755463915371,
      0.2842124754443187,
      -0.8808970028246434
    ],
    [
      -0.37390344685874066,
      0.2909506011299687,
      -0.8806497374832192
    ],
    [
      -0.42527684014549283,
      0.2643215184214077,
      -0.8656059982089231
    ],
    [
      -0.42670237812157635,
      0.23701020970420697,
      -0.8727836163685471
    ],
    [
      -0.3993334947791032,
      0.22180826775833073,
      -0.8895694758148779
    ],
    [
      -0.3866836054246595,
      0.23631512471319946,
      -0.8914207486521566
    ],
    [
      -0.37739657600595755,
      0.2706975963900429,
      -0.8856041077861105
    ],
    [
      -0.44179601047905437,
      0.17998131476853135,
      -0.8788759932203075
    ],
    [
      -0.4015960706538386,
      0.21260627162066797,
      -0.8907969293295503
    ],
    [
      -0.44090831097147215,
      0.2281505110504431,
      -0.8680709680802056
    ],
    [
      -0.4120121649782011,
      0.14213936830694704,
      -0.9000235418516994
    ],
    [
      -0.3740826547204937,
      0.17762223872967836,
      -0.9102266243886328
    ],
    [
      -0.4426605611196968,
      0.17858468713122047,
      -0.8787258600675407
    ],
    [
      -0.4407145921113085,
      0.16839192601077296,
      -0.8817112949001762
    ],
    [
      -0.3749432524889018,
      0.10356786249164306,
      -0.9212444058293954
    ],
    [
      -0.35704256369528553,
      0.12439779112228658,
      -0.9257676799682488
    ],
    [
      -0.3495751305345492,
      0.14472573797722685,
      -0.9256628375811032
    ],
    [
      -0.3687414938799247,
      0.17800535487099306,
      -0.912328780828739
    ],
    [
      -0.41100154122789206,
      0.13565607902839788,
      -0.9014849756545799
    ],
    [
      -0.3655485341113167,
      0.0268056473614815,
      -0.9304062158426283
    ],
    [
      -0.362963965112981,
      0.025401293841172387,
      -0.9314568880526125
    ],
    [
      -0.3195130113444199,
      0.06556227299598129,
      -0.9453110725794028
    ],
    [
      -0.3085654495894292,
      0.08552636026191314,
      -0.9473503074470514
    ],
    [
      -0.30546383504754915,
      0.09639957630523414,
      -0.9473114414838528
    ],
    [
      -0.311176802438208,
      0.11338074343264659,
      -0.9435644146760691
    ],
    [
      -0.23893080853318674,
      0.07717643840700265,
      -0.9679648062241146
    ],
    [
      -0.2625941381107411,
      0.05388284031848905,
      -0.9634007256324282
    ],
    [
      -0.23777893222419935,
      0.06967938977759605,
      -0.9688167845524465
    ],
    [
      -0.27657735499475894,
      0.0020523376942868984,
      -0.9609894664428387
    ],
    [
      -0.3336664778372905,
      -0.023383311567198396,
      -0.9424011366227273
    ],
    [
      -0.12546350644568874,
      -0.03474619302506297,
      -0.9914895917863271
    ],
    [
      -0.1276861794647831,
      0.05414632834956443,
      -0.9903355061290837
    ],
    [
      -0.17494629274474643,
      0.058182968464834756,
      -0.9828573329000957
    ],
    [
      -0.21430363696730872,
      0.04633358871508449,
      -0.975667540578944
    ],
    [
      -0.14507548448495902,
      -0.05045263453117468,
      -0.9881334097531154
    ],
    [
      -0.5610561368691865,
      0.3616945156030679,
      -0.7445757776506611
    ],
    [
      -0.6093724119233965,
      0.37038288304619205,
      -0.701057617841111
    ],
    [
      -0.6412940374338675,
      0.335899409325334,
      -0.6898648739910309
    ],
    [
      -0.64264412450826,
      0.3329520445928829,
      -0.6900372926418042
    ],
    [
      -0.6416838001636274,
      0.33064552315873275,
      -0.6920371656368275
    ],
    [
      -0.6410397111870839,
      0.27599787356656225,
      -0.7161656669150762
    ],
    [
      -0.6768340694066498,
      0.31496005792506154,
      -0.6653538941061939
    ],
    [
      -0.6627262409760852,
      0.2606831555066085,
      -0.7020243741899744
    ],
    [
      -0.6805010710129061,
      0.3150508832035049,
      -0.6615596974899387
    ],
    [
      -0.6994096437106709,
      0.3040744557793768,
      -0.6468113137747269
    ],
    [
      -0.6892163723920751,
      0.2249931710583628,
      -0.6887371523330295
    ],
    [
      -0.674505593128601,
      0.23971622526895972,
      -0.6982680976394636
    ],
    [
      -0.7051718042926509,
      0.3038638476378334,
      -0.6406242959249819
    ],
    [
      -0.7192466860699775,
      0.2955440305246549,
      -0.6287590401724631
    ],
    [
      -0.7253776343038438,
      0.15871388974256762,
      -0.6698038435650716
    ],
    [
      -0.7244428556658726,
      0.15737279673212423,
      -0.6711306517537291
    ],
    [
      -0.7227942884208405,
      0.15920435425859172,
      -0.6724748249647087
    ],
    [
      -0.7326933209238544,
      0.295679773536428,
      -0.6129714259205077
    ],
    [
      -0.7468387637855226,
      0.28729095977955027,
      -0.599746417526822
    ],
    [
      -0.7493064733946009,
      0.18082855917402407,
      -0.6370563877051958
    ],
    [
      -0.793009198556582,
      0.19867085402997592,
      -0.5759047688321807
    ],
    [
      -0.7623125777341295,
      0.2875303115683704,
      -0.5798326083946491
    ],
    [
      -0.7901414736483355,
      0.27071146299764787,
      -0.5499015870339982
    ],
    [
      -0.45541429679498474,
      0.07793359190082634,
      -0.8868619811042556
    ],
    [
      -0.39737051646701343,
      0.02547744372948234,
      -0.9173045145990235
    ],
    [
      -0.7261049336184087,
      0.1410385787545431,
      -0.6729634051550686
    ],
    [
      -0.6337369231233045,
      0.12309702193616445,
      -0.7636914530493675
    ],
    [
      -0.7387432818998646,
      0.0672175503410929,
      -0.6706266952440529
    ],
    [
      -0.6716840057227279,
      -0.014568365359187346,
      -0.740694511379038
    ],
    [
      -0.6479102174625321,
      0.0271799341267737,
      -0.7612316344507226
    ],
    [
      -0.6174996235191862,
      0.0536423910166914,
      -0.7847398988452643
    ],
    [
      -0.5972052636828655,
      0.08475735247736547,
      -0.7975976831902828
    ],
    [
      -0.543898128548285,
      0.047248605462381556,
      -0.8378200254491017
    ],
    [
      -0.6521110549557346,
      -0.08032173381452078,
      -0.7538564791003312
    ],
    [
      -0.5347815179721296,
      -0.00443472979451012,
      -0.844978734174461
    ],
    [
      -0.6519758711119349,
      -0.10729277762332753,
      -0.7506102339814618
    ],
    [
      -0.48691449401892867,
      -0.08012935883541084,
      -0.8697663832127088
    ],
    [
      -0.5156564992326443,
      -0.010410317459872306,
      -0.8567321635666065
    ],
    [
      -0.6531021426179962,
      -0.12632776276397067,
      -0.7466584812769708
    ],
    [
      -0.5018953582539746,
      -0.33306106831451876,
      -0.7982301511070012
    ],
    [
      -0.4204664231195516,
      -0.2752991763249427,
      -0.864533602900349
    ],
    [
      -0.46398903150929666,
      -0.10824790548899989,
      -0.8792022347539328
    ],
    [
      -0.5042637775336293,
      -0.0028650562033757545,
      -0.8635449230471255
    ],
    [
      -0.4297225020872548,
      -0.0024415378918586726,
      -0.9029577011646736
    ],
    [
      -0.43989972257625687,
      -0.06605618755339072,
      -0.8956142105634789
    ],
    [
      -0.33097063242668373,
      -0.04969918608314345,
      -0.9423313808707392
    ],
    [
      -0.37627509942043746,
      -0.2660168991716191,
      -0.8874976388201021
    ],
    [
      -0.3227939312864883,
      -0.20961703818968797,
      -0.9229652080253062
    ],
    [
      -0.302287334823897,
      -0.1756439242043978,
      -0.9368946467427087
    ],
    [
      -0.3096459834308656,
      -0.11960312380093921,
      -0.9432997708693612
    ],
    [
      -0.14300329433736206,
      -0.2198123351701653,
      -0.9650039352850851
    ],
    [
      -0.16741043713456719,
      -0.20125598562469219,
      -0.9651268174642371
    ],
    [
      -0.29124628218956,
      -0.1728056035170957,
      -0.9409111682320768
    ],
    [
      -0.17431493281628987,
      -0.26794188633855437,
      -0.9475344055719505
    ],
    [
      -0.16422528847921375,
      -0.27856155773819347,
      -0.9462734875153114
    ],
    [
      -0.07368050480872271,
      -0.30909768619334227,
      -0.9481718217712726
    ],
    [
      -0.052019705818348014,
      -0.2903676631340239,
      -0.9555001676675199
    ],
    [
      -0.05845759104238828,
      -0.27864111770950284,
      -0.9586145406633053
    ],
    [
      -0.1375953476797507,
      -0.22080440690682152,
      -0.9655635319270376
    ],
    [
      -0.005618606145609399,
      -0.2893763282343596,
      -0.957198919724934
    ],
    [
      -0.09793187669119506,
      -0.35399795904708287,
      -0.9301047212643534
    ],
    [
      -0.09598081534230277,
      -0.3583566249393086,
      -0.9286378263070778
    ],
    [
      -0.04671458389176664,
      -0.4241710487284431,
      -0.9043763978966014
    ],
    [
      -0.011757079046140474,
      -0.4455381868865056,
      -0.8951857321909169
    ],
    [
      -0.008575560127849179,
      -0.44166899014679045,
      -0.8971370925957793
    ],
    [
      0.018280057279484698,
      -0.2891415500973043,
      -0.957111803037235
    ],
    [
      0.0042232066623614775,
      -0.28756486803565556,
      -0.9577518526200421
    ],
    [
      0.02623833739291219,
      -0.415020228316044,
      -0.909433757752237
    ],
    [
      0.043026797065138254,
      -0.2932398706785643,
      -0.9550701926972354
    ],
    [
      0.035817972158707,
      -0.28833868689805225,
      -0.9568583356528515
    ],
    [
      0.05945969845093625,
      -0.40523477166919053,
      -0.9122769996499652
    ],
    [
      0.10849856297233378,
      -0.4122820917525792,
      -0.9045725723528524
    ],
    [
      0.1327453125437836,
      -0.36340013719010894,
      -0.9221274436258056
    ],
    [
      0.1282900180539391,
      -0.3519955723476535,
      -0.9271681553609182
    ],
    [
      0.08326979018119962,
      -0.31124754008007394,
      -0.9466737087493672
    ],
    [
      0.12344065482467115,
      -0.48028735601452716,
      -0.8683815177610767
    ],
    [
      0.1606148827216831,
      -0.4925100539742684,
      -0.8553576481113402
    ],
    [
      0.17557713872299846,
      -0.3075573257179426,
      -0.9351904403676677
    ],
    [
      0.15459480503071724,
      -0.2708027090028154,
      -0.9501401681090275
    ],
    [
      0.15358384214254847,
      -0.2707356037505813,
      -0.9503232272729847
    ],
    [
      0.22933525252503917,
      -0.2546668080576996,
      -0.9394414078711771
    ],
    [
      0.18293349594474875,
      -0.2537816556810186,
      -0.9498053523229028
    ],
    [
      0.20728937511383955,
      -0.17496072036156418,
      -0.962507070776873
    ],
    [
      0.17366152482673533,
      -0.14657743777790547,
      -0.9738360896625866
    ],
    [
      0.15139223215254427,
      -0.16987345734577702,
      -0.9737676316931378
    ],
    [
      0.141295381156081,
      -0.19932332756835217,
      -0.9696936765551465
    ],
    [
      0.14464507098884888,
      -0.2006645388372974,
      -0.9689228794346048
    ],
    [
      0.18193861624486452,
      -0.20202868980573926,
      -0.9623319325546047
    ],
    [
      0.20606373543482703,
      -0.18408337416151688,
      -0.9610676606233073
    ],
    [
      0.1819674763428466,
      -0.11878413387008631,
      -0.9761035637134765
    ],
    [
      0.225391186709805,
      -0.16110118213629993,
      -0.9608565044104309
    ],
    [
      0.22665795246776685,
      -0.14795703666256188,
      -0.9626707058413863
    ],
    [
      0.2418133539277068,
      -0.1358996668547125,
      -0.9607588575761411
    ],
    [
      0.12672155861188508,
      -0.7381760119291824,
      -0.6625992921783891
    ],
    [
      0.11804673949834822,
      -0.7080955814569464,
      -0.6961792978931205
    ],
    [
      0.08225362007325025,
      -0.7073930021706273,
      -0.7020181496691325
    ],
    [
      0.0614913377548818,
      -0.7392594748393099,
      -0.6706073696593431
    ],
    [
      0.07820938471677856,
      -0.7603075791796096,
      -0.6448377138352445
    ],
    [
      0.1167873349576414,
      -0.7556960172976748,
      -0.644425517677508
    ],
    [
      0.1423669477173399,
      -0.6909286402334336,
      -0.7087660166111428
    ],
    [
      0.13823034063349998,
      -0.6602565332916955,
      -0.7382097826322668
    ],
    [
      0.07442472787262917,
      -0.6570923211504661,
      -0.7501270834773117
    ],
    [
      0.05866508891410471,
      -0.6946650130315842,
      -0.7169371848443412
    ],
    [
      0.14663316152527592,
      -0.6469037894459346,
      -0.7483409671677692
    ],
    [
      0.14509461395362555,
      -0.6365223517343207,
      -0.7574871937823492
    ],
    [
      0.08566031695860798,
      -0.6155803440518,
      -0.7834048443273877
    ],
    [
      0.07070446897973076,
      -0.6501046801141359,
      -0.7565479383092596
    ],
    [
      0.09952261326469243,
      -0.5860109645544528,
      -0.8041681409201227
    ],
    [
      0.0850015813370526,
      -0.6130675162879934,
      -0.7854444293791073
    ],
    [
      0.16395918810203955,
      -0.6028210183498988,
      -0.7808483876352125
    ],
    [
      0.1963122553117678,
      -0.5830421888850867,
      -0.7883674932380801
    ],
    [
      0.20671420822481268,
      -0.5398880761785685,
      -0.8159596199066428
    ],
    [
      0.17126363149048132,
      -0.5054497990312403,
      -0.8456886360759328
    ],
    [
      0.09940684773089987,
      -0.5850973661025242,
      -0.8048474083974517
    ],
    [
      0.16962088958814378,
      -0.5013733293659747,
      -0.8484418297183399
    ],
    [
      0.2113613526414664,
      -0.5396343523879401,
      -0.8149362823757561
    ],
    [
      0.2303397341323514,
      -0.20576990596173805,
      -0.9511058577678592
    ],
    [
      0.22933231521755468,
      -0.2546557082261054,
      -0.9394451338235867
    ],
    [
      0.2501517913993758,
      -0.1809276771217898,
      -0.9511515425582805
    ],
    [
      0.31630309387084893,
      -0.18502445121636163,
      -0.9304398450516902
    ],
    [
      0.2674856972529357,
      -0.15646825877294043,
      -0.9507728886341232
    ],
    [
      0.25008030840489254,
      -0.17874804202045663,
      -0.9515823541985039
    ],
    [
      0.30809326384320307,
      -0.14219370046199253,
      -0.9406697041594183
    ],
    [
      0.2821413312354651,
      -0.13021615416450064,
      -0.9504946198707737
    ],
    [
      0.26700647622605883,
      -0.15005826013235826,
      -0.9519401557973025
    ],
    [
      0.32202959031469003,
      -0.12114272450379063,
      -0.9389469544450056
    ],
    [
      0.3197466462936314,
      -0.11149403251402222,
      -0.9409203807430986
    ],
    [
      0.9431751964055691,
      0.06599675047392027,
      0.3256761855159188
    ],
    [
      0.9354436739293135,
      0.08775072084310541,
      0.3424104903433065
    ],
    [
      0.9146108778173452,
      0.19046822881622202,
      0.3566634211547302
    ],
    [
      0.9294075230784452,
      0.17834195432996464,
      0.32310339424239787
    ],
    [
      0.9394306161605059,
      0.25410021731697996,
      0.23000694985098968
    ],
    [
      0.923823486450913,
      0.27979727622789524,
      0.2612731331329932
    ],
    [
      0.9030942796170747,
      0.3193081668047009,
      0.2871637455089662
    ],
    [
      0.9032352029369568,
      0.319559986248231,
      0.2864394933741939
    ],
    [
      0.91284854322164,
      0.19294726108650398,
      0.35983175454279503
    ],
    [
      0.9028472613784375,
      0.29769172288776374,
      0.3102361370723441
    ],
    [
      0.8731898368846295,
      0.39501391805668884,
      0.2854882016877365
    ],
    [
      0.9031825953647904,
      0.32399054245063924,
      0.28158715850099025
    ],
    [
      0.8739982226243612,
      0.3538751399747712,
      0.3330157536172932
    ],
    [
      0.8328460678676863,
      0.43159826404223844,
      0.3465405686396027
    ],
    [
      0.8421475491107367,
      0.4632110799273364,
      0.27608513353552716
    ],
    [
      0.861503708899908,
      0.42880580071725366,
      0.2719134877547223
    ],
    [
      0.8347368538536786,
      0.46314625908765206,
      0.29784211843118474
    ],
    [
      0.83838755508029,
      0.46701911023742787,
      0.2810684225585205
    ],
    [
      0.8258837031056421,
      0.4918682593742819,
      0.27564782670034965
    ],
    [
      0.826625877581967,
      0.5100798176266622,
      0.23771461495203416
    ],
    [
      0.8385648189447005,
      0.499568113693184,
      0.21734935980875508
    ],
    [
      0.8462941119815753,
      0.4837563438383099,
      0.22308311415593002
    ],
    [
      0.8451376383908443,
      0.46432581782487103,
      0.264846950287163
    ],
    [
      0.9102798490237222,
      0.3416298102776496,
      0.23383684310007027
    ],
    [
      0.9108071397235667,
      0.35743877889693854,
      0.20656203322305056
    ],
    [
      0.9101341221728271,
      0.36240703141649044,
      0.20079099391303523
    ],
    [
      0.9252613203845218,
      0.3442560553092002,
      0.15930868583740268
    ],
    [
      0.9314767017435874,
      0.3444266889482529,
      0.11713842259921102
    ],
    [
      0.9270357234510685,
      0.36118411590837013,
      0.10075118788899247
    ],
    [
      0.9122738405142975,
      0.39798849896737626,
      0.09675533371855471
    ],
    [
      0.9122419494896806,
      0.39826536014736597,
      0.09591312995599693
    ],
    [
      0.9090109903467357,
      0.40875126058799627,
      0.08137214754798319
    ],
    [
      0.8989412573419698,
      0.4332026810574153,
      0.06511568914712963
    ],
    [
      0.9063412591520378,
      0.4222845334548821,
      -0.014875979412845929
    ],
    [
      0.8901963954406473,
      0.4505008096173887,
      0.0678188622623239
    ],
    [
      0.8798461809594296,
      0.4672737503656089,
      0.08675217617077513
    ],
    [
      0.8722692931916315,
      0.47465072545604525,
      0.11769863626661793
    ],
    [
      0.8696515531530138,
      0.4703305977651435,
      0.1499843488649189
    ],
    [
      0.262547964002232,
      0.6974710825185326,
      0.6667853145118816
    ],
    [
      0.20100734109232432,
      0.7387704179119191,
      0.6432840107178496
    ],
    [
      0.29139133591184135,
      0.7193125985708835,
      0.6306191203037816
    ],
    [
      0.2698175782811315,
      0.6999248212954209,
      0.6612894366199105
    ],
    [
      0.24768064027655787,
      0.6838571763109603,
      0.686289780515632
    ],
    [
      0.1882151464161676,
      0.6621225762766852,
      0.7253749048900614
    ],
    [
      0.11059252042833762,
      0.7138818579761949,
      0.6914781177143379
    ],
    [
      0.10062003758656517,
      0.7219114194106381,
      0.6846309301810691
    ],
    [
      0.10390618830959922,
      0.7308074229149668,
      0.6746287976682842
    ],
    [
      0.022361380938815827,
      0.7182399700499902,
      0.6954360603715471
    ],
    [
      -0.0615425833277308,
      0.6984056979501834,
      0.7130511843535965
    ],
    [
      -0.06882619119236603,
      0.7810625017305712,
      0.6206483092672799
    ],
    [
      -0.08693369909504572,
      0.6831956687401874,
      0.7250422126857857
    ],
    [
      -0.09024934614903975,
      0.6849098455369872,
      0.7230169838988371
    ],
    [
      -0.10257871273981763,
      0.7784784410735266,
      0.6192325286000193
    ],
    [
      -0.0763163155410655,
      0.7881430034787587,
      0.6107425202568738
    ],
    [
      -0.1307827215309868,
      0.7712269493541248,
      0.6229806356050552
    ],
    [
      -0.14806166359177883,
      0.6981688576422508,
      0.7004555588993133
    ],
    [
      -0.14087520250027724,
      0.7712066283121297,
      0.6208015091540471
    ],
    [
      0.15395415350517186,
      0.7903394217917372,
      0.5930107224835048
    ],
    [
      0.09953542637165956,
      0.7788345421457307,
      0.6192814019956211
    ],
    [
      0.238276954382545,
      0.6009323632822943,
      0.7629576579143401
    ],
    [
      0.21884257016114028,
      0.610211086262576,
      0.7614133960520483
    ],
    [
      0.19333225596148781,
      0.6432135862336904,
      0.740877129684293
    ],
    [
      0.6572308931803454,
      0.4653153623951439,
      0.592898951397657
    ],
    [
      0.6673723066592931,
      0.45719593837487366,
      0.5878656974494881
    ],
    [
      0.6467873242320873,
      0.4674621809098061,
      0.602615355456318
    ],
    [
      0.6313954429551908,
      0.47921948168061873,
      0.6096625976662644
    ],
    [
      0.6056488967842207,
      0.48175564090471873,
      0.6333252847317404
    ],
    [
      0.5986759620177317,
      0.4772370296167384,
      0.6432976838639604
    ],
    [
      0.5900930069995924,
      0.47804999236010154,
      0.650583159860971
    ],
    [
      0.5891219358464422,
      0.4775229577144599,
      0.6518490389347633
    ],
    [
      0.5571324091763923,
      0.48833591386673275,
      0.6716632443965145
    ],
    [
      0.5272218520487861,
      0.47237829834965706,
      0.7063256061976871
    ],
    [
      0.5170227509757649,
      0.4529434919767421,
      0.7263123763570102
    ],
    [
      0.5066278500591672,
      0.4496527183980657,
      0.7356226304170201
    ],
    [
      0.4583468928575403,
      0.48408869883914935,
      0.745369879632963
    ],
    [
      0.7795338567683716,
      0.186388025048687,
      0.597985342855724
    ],
    [
      0.802562100182472,
      0.10451762023365826,
      0.5873415892063091
    ],
    [
      0.7655099414123862,
      0.21309156904348533,
      0.6071132619218516
    ],
    [
      0.7658607424202251,
      0.2180859584514282,
      0.6048932450820257
    ],
    [
      0.7837148300812912,
      0.303249520425428,
      0.5420616140923473
    ],
    [
      0.764256166412354,
      0.2375837038816951,
      0.5995552482887188
    ],
    [
      0.8156984356681183,
      0.3366118217089354,
      0.47045567648225545
    ],
    [
      0.7400282806933622,
      0.34399375682718464,
      0.5779502046352661
    ],
    [
      0.7364144361151036,
      0.3491320311551008,
      0.5794830481582596
    ],
    [
      0.7141492079301655,
      0.3671916467286246,
      0.5959540279127562
    ],
    [
      0.7071265319287263,
      0.36923894587646977,
      0.6030212837790102
    ],
    [
      0.6879452998916374,
      0.4021442791216159,
      0.6041616034859886
    ],
    [
      0.6715542139855324,
      0.4140664347622278,
      0.6144623058264611
    ],
    [
      0.6407564880102109,
      0.4226850725849063,
      0.6409122034153454
    ],
    [
      0.6553158348013537,
      0.41278832114354314,
      0.6325875106150136
    ],
    [
      0.637956321930872,
      0.42303396613087385,
      0.6434702749995653
    ],
    [
      0.6267920648566446,
      0.41289753269525875,
      0.6607929591989549
    ],
    [
      0.6036905711764792,
      0.4173013090637005,
      0.6792770507873339
    ],
    [
      0.5881517925711497,
      0.4586253591984128,
      0.6661383105598041
    ],
    [
      0.5883383507430262,
      0.40267051343655463,
      0.7012235325869471
    ],
    [
      0.55340377498382,
      0.43678674168102777,
      0.709197859645197
    ],
    [
      0.8983138402537563,
      -0.186138497017683,
      0.3979757584785121
    ],
    [
      0.8966667190854006,
      -0.17589122451814995,
      0.40626478068142824
    ],
    [
      0.8880076161228646,
      -0.17449667064247246,
      0.42543317412077736
    ],
    [
      0.8856108820274895,
      -0.15850805196119153,
      0.43654159377768365
    ],
    [
      0.8768365076618918,
      -0.15723476571382028,
      0.45435114975337865
    ],
    [
      0.8741369485949373,
      -0.1423590824762688,
      0.464347377227057
    ],
    [
      0.8576426918056179,
      -0.10669640228911088,
      0.5030555545175645
    ],
    [
      0.8640899985530527,
      -0.14105429678488582,
      0.48316887292033484
    ],
    [
      0.8574325619436074,
      -0.1093744212394209,
      0.5028385801600386
    ],
    [
      0.8411764939537042,
      -0.09568003656550007,
      0.5322287446414169
    ],
    [
      0.8364415172114152,
      -0.07878284065943843,
      0.542364132573952
    ],
    [
      0.8252179672472787,
      -0.0626518335510655,
      0.561328829016432
    ],
    [
      0.8267411692273131,
      -0.048998347284007475,
      0.5604446458554947
    ],
    [
      0.828159482853542,
      -0.07223186257479937,
      0.5558187015464028
    ],
    [
      0.8156040914543187,
      -0.01639676433586994,
      0.5783780010704844
    ],
    [
      0.8169193170085355,
      0.0007044609593651078,
      0.5767515350938086
    ],
    [
      0.8024963994398129,
      0.008668701638091787,
      0.5965939846311277
    ],
    [
      0.7897089762899341,
      0.04390764486330522,
      0.6119083685403087
    ],
    [
      0.7888361552845542,
      0.08942060437121237,
      0.6080637101733418
    ],
    [
      0.7858207722915826,
      0.0892252204007417,
      0.6119841287807223
    ],
    [
      0.7464642825715909,
      0.10432401074309693,
      0.6571967556427485
    ],
    [
      0.7346799825554541,
      0.1338195311328927,
      0.6650846986058921
    ],
    [
      0.7515598998432143,
      0.20436118203771172,
      0.6272114669103293
    ],
    [
      0.7132199615110022,
      0.2918099689169704,
      0.637310150980605
    ],
    [
      0.7048007987421581,
      0.2955746302412927,
      0.6448964816543343
    ],
    [
      0.700413995200025,
      0.3024398114188547,
      0.6464908319511321
    ],
    [
      0.7070946634174542,
      0.36920666022989024,
      0.6030784186226925
    ],
    [
      0.6681996712532476,
      0.36377326738828847,
      0.648982441419412
    ],
    [
      0.6948124524498656,
      0.307072807641199,
      0.6503398701663264
    ],
    [
      0.6674684046551324,
      0.36246784139390853,
      0.6504636751905312
    ],
    [
      0.663034852479233,
      0.31056546828343135,
      0.6811269149782108
    ],
    [
      0.6564838637963446,
      0.3179144694144579,
      0.684075527052347
    ],
    [
      0.6477672890577838,
      0.3597659358920411,
      0.671540029036582
    ],
    [
      0.6405368379203895,
      0.3640433570823779,
      0.6761545632702193
    ],
    [
      0.6018347891057712,
      0.31341253822083126,
      0.7345525627945136
    ],
    [
      0.5948050393558838,
      0.3204308380664461,
      0.7372455786051758
    ],
    [
      0.5892304274697867,
      0.3498661277543852,
      0.7282864793430704
    ],
    [
      0.5928537826910706,
      0.3568331768328195,
      0.7219380002883118
    ],
    [
      0.9023506377789651,
      0.2978157559621937,
      0.3115591468735302
    ],
    [
      0.8298292356122975,
      0.3359914577694856,
      0.44552573441839033
    ],
    [
      0.4955863090205618,
      0.8671555784293908,
      -0.049349904864800814
    ],
    [
      0.4961647141527852,
      0.8660582637174238,
      -0.061348677870400894
    ],
    [
      0.5020173682734383,
      0.8619132755972849,
      -0.07130264582026266
    ],
    [
      0.5040512157174155,
      0.8575189967846863,
      -0.10292493423452062
    ],
    [
      0.5009695227712717,
      0.8584968244849163,
      -0.10960264414529004
    ],
    [
      0.5021554699472225,
      0.8542449816868034,
      -0.13455629032117716
    ],
    [
      0.4989291710525753,
      0.8550564998273521,
      -0.14123761671660826
    ],
    [
      0.49992898013515963,
      0.8484279338043611,
      -0.1738995571054788
    ],
    [
      0.5191967739133012,
      0.8291409032677131,
      -0.20726811739006365
    ],
    [
      0.4635726663795097,
      0.8859856377820448,
      -0.01139441221543603
    ],
    [
      0.47207398501468834,
      0.8810112165828512,
      -0.031070708513907842
    ],
    [
      0.45588085616637825,
      0.8900272899676823,
      -0.004905924356655317
    ],
    [
      0.2990904457546743,
      0.9542245042581634,
      -0.0007076238637453219
    ],
    [
      0.18328346521596972,
      0.9826499937217277,
      0.02839297830652953
    ],
    [
      0.2282613175662361,
      0.9735988123032876,
      0.001457252398747161
    ],
    [
      0.23152487050373138,
      0.9728288565812669,
      0.0005001409951492514
    ],
    [
      0.29906294872920597,
      0.9542330895997878,
      -0.0007506065785379509
    ],
    [
      0.09324668069926957,
      0.9948278346598213,
      -0.040281955322700395
    ],
    [
      0.1479674962815222,
      0.9884337369200706,
      -0.03323202916467877
    ],
    [
      0.024984220697658432,
      0.9994165981334145,
      -0.02328630695416362
    ],
    [
      0.08590768978781159,
      0.9953423365483085,
      -0.04374359278654262
    ],
    [
      0.020908455551270366,
      0.9995818393104405,
      -0.019974558999316973
    ],
    [
      -0.018256692286858604,
      0.997804946710867,
      -0.0636551765849946
    ],
    [
      -0.01932835209766798,
      0.9971681156822572,
      -0.07267849662647868
    ],
    [
      -0.08132394764637271,
      0.9903117178698271,
      -0.1125571720901075
    ],
    [
      -0.059253792286266656,
      0.9908639812706842,
      -0.12115097490365205
    ],
    [
      -0.12441833099306933,
      0.9780672008808591,
      -0.16704678827795624
    ],
    [
      -0.13657405379205156,
      0.9715201081886206,
      -0.1936393741365042
    ],
    [
      -0.12714937496905773,
      0.975200964476571,
      -0.18115218830845942
    ],
    [
      -0.1565744476420753,
      0.9616431999290214,
      -0.22522610500528376
    ],
    [
      -0.13824165887798806,
      0.969743522020172,
      -0.2012131835903751
    ],
    [
      -0.16431775124114778,
      0.9577143741927646,
      -0.2361839412229657
    ],
    [
      -0.1569098143721801,
      0.9612770381642886,
      -0.2265519058665828
    ],
    [
      -0.16734237326761434,
      0.953884173532834,
      -0.2492017527882677
    ],
    [
      -0.18405432192499538,
      0.9452651809724243,
      -0.26943968568475596
    ],
    [
      -0.1898487432411267,
      0.9347227602341254,
      -0.30041773614429357
    ],
    [
      -0.25608902525356314,
      0.8984202704200562,
      -0.35673439537425156
    ],
    [
      -0.4526049743678013,
      0.812776558796799,
      -0.36680103959497645
    ],
    [
      -0.4487818416984747,
      0.8091500675223213,
      -0.3793033440273735
    ],
    [
      -0.45803578451722404,
      0.8300302406929058,
      -0.31820279640029553
    ],
    [
      -0.4696580988470913,
      0.8152036708135901,
      -0.3389162806348841
    ],
    [
      -0.46473176262759364,
      0.8108376845423055,
      -0.35576205268567174
    ],
    [
      -0.4601396188380738,
      0.8403997930413334,
      -0.28635593067306336
    ],
    [
      -0.48058623105096093,
      0.8355265554941641,
      -0.2663310901646483
    ],
    [
      -0.4793001837045147,
      0.8343765630255388,
      -0.2721894284767643
    ],
    [
      -0.5015863036710105,
      0.8282195847842202,
      -0.24992698803751992
    ],
    [
      -0.46499067043680387,
      0.8851895513186104,
      0.014937692026837543
    ],
    [
      -0.4476401114564478,
      0.894059061392908,
      -0.016635064066345174
    ],
    [
      -0.500529042369828,
      0.8109875116961516,
      -0.30293552716250916
    ],
    [
      -0.49783225441169426,
      0.8099553894887817,
      -0.3100569520353413
    ],
    [
      -0.5222425427824282,
      0.8055437381192532,
      -0.2799321569327179
    ],
    [
      -0.5436437254694063,
      0.7939121854366278,
      -0.2723140495328559
    ],
    [
      -0.674614259746516,
      0.7007117699560558,
      -0.23216075463288757
    ],
    [
      -0.6717896395248381,
      0.7026113177069998,
      -0.2345975627689288
    ],
    [
      -0.6161809790732579,
      0.7576122691798743,
      -0.2152780774171927
    ],
    [
      -0.7132723486340278,
      0.6678987359000802,
      -0.21249431817621134
    ],
    [
      -0.6850296852841549,
      0.7251393609441681,
      -0.07005167727453301
    ],
    [
      -0.7250229713648415,
      0.6510311675797105,
      -0.22472229491773832
    ],
    [
      -0.7488489552907047,
      0.627103274377394,
      -0.21439852010956337
    ],
    [
      -0.7647906266231032,
      0.6055565514345116,
      -0.2199921826888015
    ],
    [
      -0.7746858630311749,
      0.5850286270053968,
      -0.24000691490834988
    ],
    [
      -0.7710352903447225,
      0.5905345271153623,
      -0.2382720154102557
    ],
    [
      -0.7832238599280902,
      0.5666402390533595,
      -0.2558890867639632
    ],
    [
      -0.7794541762383762,
      0.5725475170776376,
      -0.25424501535484756
    ],
    [
      -0.7948608784323479,
      0.540243592175523,
      -0.27628435542216917
    ],
    [
      -0.7883984144535978,
      0.5501723788249145,
      -0.27520591139215694
    ],
    [
      -0.7986627443747402,
      0.5227306536912061,
      -0.2981450728074721
    ],
    [
      -0.7982881971580694,
      0.5073258002297117,
      -0.3245866397426144
    ],
    [
      -0.7959393929930583,
      0.5225820896327159,
      -0.3055952262011731
    ],
    [
      -0.7974511981007018,
      0.48947904432358863,
      -0.3528198574567788
    ],
    [
      -0.7954408010571017,
      0.5068010435723301,
      -0.3323050319324604
    ],
    [
      -0.7956432668482794,
      0.47334607844036825,
      -0.3780149229119432
    ],
    [
      -0.7944390275301696,
      0.48879410833559667,
      -0.36048155458126746
    ],
    [
      -0.7684400273250566,
      0.47005686557407084,
      -0.4342193771946921
    ],
    [
      -0.580828475260161,
      0.7912677130922737,
      0.191137878361877
    ],
    [
      -0.586251092232626,
      0.7909762488239571,
      0.17511776224139716
    ],
    [
      -0.5965242161263832,
      0.785823233705101,
      0.1632198056121323
    ],
    [
      -0.6011604556703638,
      0.7853317233474726,
      0.14785192201080524
    ],
    [
      -0.6116752798730145,
      0.7794281779342362,
      0.13544396418588006
    ],
    [
      -0.6125399454005419,
      0.7793026281542673,
      0.13222038057936805
    ],
    [
      -0.6317351413276232,
      0.7674504258931665,
      0.10922708001299576
    ],
    [
      -0.6501842241153422,
      0.7523248976924752,
      0.10614953143343203
    ],
    [
      -0.6627549124511255,
      0.7401821385838597,
      0.11351796220565673
    ],
    [
      -0.6793999815169907,
      0.726785594472822,
      0.10098695352123174
    ],
    [
      -0.6507854993020509,
      0.7590923250214104,
      0.01603358948488515
    ],
    [
      -0.6918293739561737,
      0.7152433761220117,
      0.09899005124251238
    ],
    [
      -0.7001086098209689,
      0.7113771877029711,
      0.06156647846322005
    ],
    [
      -0.7077320580413673,
      0.7045410115462016,
      0.05231918453096898
    ],
    [
      -0.7346411451883005,
      0.6766958609681024,
      0.0488374809450821
    ],
    [
      -0.6958757648129111,
      0.7107451001367119,
      0.10294815480474144
    ],
    [
      -0.7228450251937604,
      0.6822547341741778,
      0.10965193682536634
    ],
    [
      -0.7410194255899409,
      0.666264318018184,
      0.08355877831872753
    ],
    [
      -0.7528927943152282,
      0.6524451270328284,
      0.0864164132519038
    ],
    [
      -0.7706266197561956,
      0.6326296450038177,
      0.07690477999112497
    ],
    [
      -0.7913423641979707,
      0.6057565744430833,
      0.08268152843620939
    ],
    [
      -0.8059915130359199,
      0.5837522076989392,
      0.098035916483109
    ],
    [
      -0.880177028373566,
      0.47458546980524124,
      -0.0075518589246093394
    ],
    [
      -0.845434189441209,
      0.5332811519922839,
      0.029193222735228605
    ],
    [
      -0.8559589288152751,
      0.5161399595744778,
      0.0305590299561891
    ],
    [
      -0.8714776732094103,
      0.4900685456849777,
      0.01896010621603563
    ],
    [
      -0.8795449665670075,
      0.475813542317774,
      -0.0014576466147207677
    ],
    [
      -0.8942737377362775,
      0.44703534336550327,
      -0.020829877034541984
    ],
    [
      -0.8974414500165868,
      0.4400240104166476,
      -0.031268419355253124
    ],
    [
      -0.9151656391610051,
      0.39992483978428345,
      -0.05031873828450023
    ],
    [
      -0.9154692534743823,
      0.3985015710936691,
      -0.05579017636586621
    ],
    [
      -0.9197221481257842,
      0.3848631084568366,
      -0.07740515484019395
    ],
    [
      -0.9222800221965516,
      0.3773532479792834,
      -0.08369042296830617
    ],
    [
      -0.923431181206247,
      0.37296225228749963,
      -0.09041024247656258
    ],
    [
      -0.9236446936018018,
      0.36867645403643823,
      -0.10468119325051606
    ],
    [
      -0.9273289597920821,
      0.3506019082213806,
      -0.13091715809037957
    ],
    [
      -0.9331121508327569,
      0.32748454654125675,
      -0.14851123103972277
    ],
    [
      -0.9328009262531505,
      0.3262684795245363,
      -0.15307289521666428
    ],
    [
      -0.9331817399210921,
      0.3006138077242164,
      -0.19698522503830365
    ],
    [
      -0.9318593852864726,
      0.29715750148967957,
      -0.20817181692517486
    ],
    [
      -0.9290431518044977,
      0.29618678458294684,
      -0.22170297860782112
    ],
    [
      -0.9380173075006413,
      0.25351828395261106,
      -0.23633029964642865
    ],
    [
      -0.9399989932252613,
      0.20359413839858526,
      -0.2737723863818866
    ],
    [
      -0.9400167401799095,
      0.20342782197045958,
      -0.2738350770626207
    ],
    [
      -0.9312634399231244,
      0.19015678999829277,
      -0.3107873882256072
    ],
    [
      -0.9217152334060886,
      0.15576411735374168,
      -0.35521622746176634
    ],
    [
      -0.9191955132618952,
      0.15704611847425826,
      -0.3611317281427514
    ],
    [
      -0.9159791083650268,
      0.15468609774947312,
      -0.3702087035738771
    ],
    [
      -0.9141516206483368,
      0.15634293278848727,
      -0.3740102964266012
    ],
    [
      -0.8757510195573999,
      0.16815382490212252,
      -0.45253115131995164
    ],
    [
      -0.8725475960245143,
      0.1719131951073364,
      -0.4572816921983955
    ],
    [
      -0.9034346315424595,
      0.09351358378404437,
      -0.41840300689359883
    ],
    [
      -0.8884661714844343,
      0.07879774428262673,
      -0.45212694857059943
    ],
    [
      -0.8633299264040527,
      0.031265359740457216,
      -0.5036704433014436
    ],
    [
      -0.8522855632882235,
      0.04235605556978142,
      -0.5213590731607585
    ],
    [
      -0.8546802035407242,
      0.16049925738352425,
      -0.49372232890049
    ],
    [
      -0.4738121767167873,
      0.6031205704937878,
      -0.6416756179271175
    ],
    [
      -0.49827418245566696,
      0.5586576184829741,
      -0.6630418572074229
    ],
    [
      -0.49839966024694093,
      0.5573974049386048,
      -0.6640074635374537
    ],
    [
      -0.5358903771765624,
      0.4887678398212028,
      -0.688423926375367
    ],
    [
      -0.531750093443129,
      0.4768509555635333,
      -0.6998964239809836
    ],
    [
      -0.6036758973353811,
      0.4265881755605387,
      -0.6734967998797422
    ],
    [
      -0.6164183935084374,
      0.40936453781517,
      -0.6726433225148745
    ],
    [
      -0.658118625919078,
      0.3840394932258069,
      -0.6476060082034834
    ],
    [
      -0.6254278004897827,
      0.40749201002642205,
      -0.6654249229921726
    ],
    [
      -0.6616655248259483,
      0.3835327480888881,
      -0.6442836055652726
    ],
    [
      -0.6733127571537988,
      0.3743868157466333,
      -0.6375613250888468
    ],
    [
      -0.6898499693581278,
      0.3732661744957051,
      -0.6203058783809259
    ],
    [
      -0.7016804924408677,
      0.36324520536995913,
      -0.612941601870584
    ],
    [
      -0.7143952424848723,
      0.36255891917487515,
      -0.5984901566790608
    ],
    [
      -0.7261849261901552,
      0.35188353468967914,
      -0.5906212246342797
    ],
    [
      -0.7419516260368869,
      0.35237066862224864,
      -0.5703881980861184
    ],
    [
      -0.7477028079775848,
      0.3468826709165141,
      -0.5662269187880954
    ],
    [
      -0.7698384127754268,
      0.34325349172049574,
      -0.5380760714221543
    ],
    [
      -0.7652341740924412,
      0.34824228932511503,
      -0.541427711450626
    ],
    [
      -0.790501743098471,
      0.34357229830842906,
      -0.5070158478719801
    ],
    [
      -0.7884721077537503,
      0.345868230757867,
      -0.5086127232450849
    ],
    [
      -0.5874868718332852,
      0.7541358730052163,
      0.29349320344805496
    ],
    [
      -0.5898074021261083,
      0.7636474676810792,
      0.2626209692723078
    ],
    [
      -0.6003763062599621,
      0.759731652908544,
      0.2497120470672085
    ],
    [
      -0.601181394562024,
      0.7618028250073415,
      0.24132423550752982
    ],
    [
      -0.6138261888161164,
      0.7574730260618522,
      0.22237811203484492
    ],
    [
      -0.6143409830548453,
      0.7600200411850313,
      0.21202521910449673
    ],
    [
      -0.6269493544771352,
      0.7547942892641913,
      0.19292508342584114
    ],
    [
      -0.6269741021956289,
      0.757314755923915,
      0.1826960197592878
    ],
    [
      -0.6440202253093275,
      0.7488015767359879,
      0.1566338024508807
    ],
    [
      -0.6565874848670803,
      0.738959816356838,
      0.15110018042937548
    ],
    [
      -0.6243948359462078,
      0.7276432648895972,
      0.28401825276646503
    ],
    [
      -0.6302987236765876,
      0.7270375370181208,
      0.27228650113123404
    ],
    [
      -0.6224483820776965,
      0.7181768231795362,
      0.31109494096916307
    ],
    [
      -0.6202588530366859,
      0.7055853817431816,
      0.3426780184078682
    ],
    [
      -0.6232930233574917,
      0.7168169238453825,
      0.31253688537950236
    ],
    [
      -0.6367168560354561,
      0.6791574869146907,
      0.36515305449639307
    ],
    [
      -0.6370990455354503,
      0.6807124948731779,
      0.3615733749895755
    ],
    [
      -0.6336315794349174,
      0.6666981520790201,
      0.39245967379748936
    ],
    [
      -0.6373896940851137,
      0.6774320915173717,
      0.3671786203695478
    ],
    [
      -0.6430956319568292,
      0.6427292366933746,
      0.41632575761967766
    ],
    [
      -0.6447186599339223,
      0.6271937757001963,
      0.43699635840123335
    ],
    [
      -0.6475083839938347,
      0.6365697669827837,
      0.41894131381516586
    ],
    [
      -0.6535870969467986,
      0.5991743231992755,
      0.46240029965750035
    ],
    [
      -0.6546469877963317,
      0.5736106758960101,
      0.4923495850179138
    ],
    [
      -0.6600028488230567,
      0.589412424845044,
      0.46582103106636863
    ],
    [
      -0.6515510630153969,
      0.5413003302420832,
      0.5314839270978173
    ],
    [
      -0.6580209721016796,
      0.5603708821834275,
      0.5029839705948173
    ],
    [
      -0.6519010649813249,
      0.500955159968717,
      0.5692705237204292
    ],
    [
      -0.6604761439191777,
      0.5244055925518459,
      0.5373732760512017
    ],
    [
      -0.6475624948370674,
      0.47455858265760714,
      0.5962021191730169
    ],
    [
      -0.653912828648149,
      0.4907393086979734,
      0.5758237086366031
    ],
    [
      -0.6458662813705984,
      0.4438692685076342,
      0.621157644292504
    ],
    [
      -0.6503782036872917,
      0.4583866884445698,
      0.605714318821433
    ],
    [
      -0.6356328410855957,
      0.41722840154735463,
      0.6495316407040485
    ],
    [
      -0.6380855123063018,
      0.41884205471192126,
      0.6460791067582207
    ],
    [
      -0.6459109150838341,
      0.4435800748171519,
      0.62131779871558
    ],
    [
      -0.6190263380565284,
      0.3910365058081856,
      0.6810997312564802
    ],
    [
      -0.6289734575866727,
      0.3965942593051349,
      0.6686593924694976
    ],
    [
      -0.6014365860162472,
      0.3641964780263195,
      0.711080135001918
    ],
    [
      -0.6123477423503306,
      0.37045932186776004,
      0.6984197400415688
    ],
    [
      -0.58499812639141,
      0.3398017081502091,
      0.7364183534219798
    ],
    [
      -0.5956698779799017,
      0.34615518303771037,
      0.7248130695038123
    ],
    [
      -0.5630074673045712,
      0.31115330646153494,
      0.7656410462072591
    ],
    [
      -0.5783725937772888,
      0.3188829703770849,
      0.7508653634113233
    ],
    [
      -0.5379879073984297,
      0.28175940487985074,
      0.7944687843174274
    ],
    [
      -0.556793768119018,
      0.29061243284425914,
      0.7781549419364797
    ],
    [
      -0.5121582452572276,
      0.25159240365943675,
      0.8212156807050779
    ],
    [
      -0.5324187286873199,
      0.26187955686267705,
      0.8049530390279833
    ],
    [
      -0.4876362581427719,
      0.2202508654695113,
      0.8448079284692155
    ],
    [
      -0.5070462778887238,
      0.23127563857018044,
      0.8303105750760653
    ],
    [
      -0.45225520647497613,
      0.18208196685347508,
      0.8731044528365702
    ],
    [
      -0.4826381517231235,
      0.19841234766001087,
      0.8530492100678191
    ],
    [
      -0.4068688184117159,
      0.14548409875515775,
      0.9018271129288882
    ],
    [
      -0.4506332630257543,
      0.17343603433762633,
      0.8756994942604449
    ],
    [
      -0.4035349771168293,
      0.12341467708493736,
      0.9066026360668387
    ],
    [
      0.2691196583841589,
      0.5302386392707882,
      0.8040034794050687
    ],
    [
      0.34623423038394263,
      0.48391776622114735,
      0.8037073181488233
    ],
    [
      0.2515456315156172,
      0.5156733137891518,
      0.8190273674982566
    ],
    [
      0.26598848550441145,
      0.5307929595443979,
      0.8046794142248008
    ],
    [
      0.3503873761775964,
      0.4720041229646571,
      0.8089751507430524
    ],
    [
      0.3351209569763402,
      0.45179288392559264,
      0.8267872363730937
    ],
    [
      0.33336689515970014,
      0.4511627816893263,
      0.8278397535936112
    ],
    [
      0.2686797280037784,
      0.45944797592544656,
      0.8465924410115093
    ],
    [
      0.25823602596401457,
      0.44960410339787976,
      0.8550849695218022
    ],
    [
      0.24115138659068058,
      0.445771715564031,
      0.8620519626730704
    ],
    [
      0.23069417493028546,
      0.4467148976181434,
      0.8644223492594616
    ],
    [
      0.227629728653956,
      0.44814572736261626,
      0.8644941374466099
    ],
    [
      0.18180762408972423,
      0.5080863104695854,
      0.8418992154267954
    ],
    [
      0.18064421921718274,
      0.5141923058184591,
      0.8384354111680343
    ],
    [
      0.1831061689679565,
      0.5160540398694787,
      0.8367558537711395
    ],
    [
      0.17674869841906238,
      0.44047940012439246,
      0.8801919084343043
    ],
    [
      0.161845796586105,
      0.452989975753053,
      0.8767017850983637
    ],
    [
      0.10482594382330625,
      0.4489142863505927,
      0.8874049160399615
    ],
    [
      0.17931466414265826,
      0.40484680576606547,
      0.8966299766818079
    ],
    [
      0.14277285967469774,
      0.40230559231304563,
      0.9043042192392772
    ],
    [
      0.10332751733991571,
      0.44256267352393586,
      0.8907646738413663
    ],
    [
      0.060296889603364774,
      0.3999048136595209,
      0.9145711700661154
    ],
    [
      0.1341761974690834,
      0.3731766619216851,
      0.9180064961805695
    ],
    [
      0.09366671295488081,
      0.3719683397519865,
      0.9235074992150192
    ],
    [
      0.06969152576298722,
      0.3878889049979556,
      0.9190676191751692
    ],
    [
      0.06545004552373877,
      0.3148628967122513,
      0.9468778420762156
    ],
    [
      0.057402166006506564,
      0.31948881981005445,
      0.9458498217762374
    ],
    [
      0.10596708809722039,
      0.3120729506567853,
      0.944129996191501
    ],
    [
      0.03134547684090504,
      0.3208882610972247,
      0.946598217287364
    ],
    [
      0.028548466754216555,
      0.3224152839823868,
      0.946167728101387
    ],
    [
      0.035516462467704686,
      0.4011091184393846,
      0.9153414969280917
    ],
    [
      -0.015107196352344381,
      0.32421499287373523,
      0.9458627865680389
    ],
    [
      -0.023889948585250162,
      0.33569644325086173,
      0.9416672280297935
    ],
    [
      0.008153014717449782,
      0.403407402838065,
      0.9149841505110698
    ],
    [
      0.030854580911113764,
      0.4025687617760013,
      0.9148696010246141
    ],
    [
      -0.05333561953319994,
      0.2159452642646616,
      0.9749476675856378
    ],
    [
      0.027282099071615024,
      0.18606694153256292,
      0.9821582257146576
    ],
    [
      0.04760186787865959,
      0.11476952447523939,
      0.9922509856010172
    ],
    [
      -0.19107208390879243,
      0.21376187512070868,
      0.9580173899755838
    ],
    [
      -0.1156155405918213,
      0.2537081080824834,
      0.9603464180528127
    ],
    [
      -0.053581156652293606,
      0.2177744428520289,
      0.9745272452283162
    ],
    [
      -0.10362997995037462,
      0.016801134180699392,
      0.9944740062695089
    ],
    [
      -0.10121419907556321,
      0.035390861124804635,
      0.9942349686338421
    ],
    [
      0.03085966333221579,
      0.002606397726838646,
      0.9995203288927703
    ],
    [
      0.02158703483581715,
      -0.03577597678079869,
      0.9991266583433639
    ],
    [
      -0.024548099146690112,
      -0.029948173658486853,
      0.9992499675870925
    ],
    [
      -0.08576958283882154,
      0.0002095311783941384,
      0.9963149776834331
    ],
    [
      -0.21820082813566857,
      0.08023126320841893,
      0.9726002997145795
    ],
    [
      -0.22131631809046728,
      0.10249215384601054,
      0.9698012403306591
    ],
    [
      -0.33057097614157027,
      -0.24215818414284745,
      0.912185421712849
    ],
    [
      -0.3282491969127867,
      -0.2177125465077848,
      0.9191592418178726
    ],
    [
      -0.31404302860271244,
      -0.21191372178237722,
      0.9254564012995843
    ],
    [
      -0.23304292111955158,
      -0.2144934666800954,
      0.9485164994177071
    ],
    [
      -0.2827026649867781,
      -0.27399050585404294,
      0.9192433877440833
    ],
    [
      -0.30232448718237254,
      -0.2699756250724106,
      0.9141734333903369
    ],
    [
      -0.3335791272618636,
      -0.31777673437564274,
      0.887548822851321
    ],
    [
      -0.3694062421202583,
      -0.28000034088233544,
      0.8860806043404658
    ],
    [
      -0.3602386676601415,
      -0.2558251435040019,
      0.8970962034662743
    ],
    [
      -0.05108686238823174,
      -0.062324916374495436,
      0.996747579525648
    ],
    [
      -0.08141213138570919,
      -0.07211972459157599,
      0.9940678096528783
    ],
    [
      0.039630186068404086,
      -0.07317116632183625,
      0.9965316998326174
    ],
    [
      0.035585086512828955,
      -0.118984876503314,
      0.9922581825217496
    ],
    [
      -0.04772445764779219,
      -0.1071305891565998,
      0.9930988938716949
    ],
    [
      0.4496324458561473,
      -0.7509889742383811,
      0.4835764926108411
    ],
    [
      0.48305737152459755,
      -0.7180254505967024,
      0.5010938316434851
    ],
    [
      0.48731122554257017,
      -0.7193919040303828,
      0.4949778357419036
    ],
    [
      0.48681816406902806,
      -0.7202994450354024,
      0.49414247400335076
    ],
    [
      0.46905575884289613,
      -0.6992362608826015,
      0.5394954555538288
    ],
    [
      0.4726238610022566,
      -0.6790246317855136,
      0.5617403630146824
    ],
    [
      0.48201362444793655,
      -0.6501270410098313,
      0.5873650452609219
    ],
    [
      0.48821425372378785,
      -0.6538054107392778,
      0.5780876467707722
    ],
    [
      0.4881898736549607,
      -0.6555438676544384,
      0.5761361686627682
    ],
    [
      0.47325660532614405,
      -0.6256209238170416,
      0.6201827514511232
    ],
    [
      0.4791980997496824,
      -0.6083394026948075,
      0.6326866146246641
    ],
    [
      0.4752527067549402,
      -0.5950537315004385,
      0.6481094979627338
    ],
    [
      0.47646449238247884,
      -0.5914521612720486,
      0.6505120509455067
    ],
    [
      0.4638704645657788,
      -0.5633041572098817,
      0.6837489441115018
    ],
    [
      0.4671322528461704,
      -0.564528136264995,
      0.6805111620804121
    ],
    [
      0.45561854077751035,
      -0.5392961287148552,
      0.7082170789051493
    ],
    [
      0.4599356259510137,
      -0.5282558177036987,
      0.713726145691221
    ],
    [
      0.45113549847330375,
      -0.5031070860208184,
      0.7371295829180136
    ],
    [
      0.43691811188686674,
      -0.46434636629262566,
      0.7703797866092088
    ],
    [
      0.4469981099826749,
      -0.4689453399756545,
      0.7617630588227774
    ],
    [
      0.4541018430917132,
      -0.4954050767730104,
      0.7405169316148259
    ],
    [
      0.4198879299628428,
      -0.4287099497449601,
      0.7999386884388031
    ],
    [
      0.42957029121956075,
      -0.4337532411760877,
      0.7920400814799592
    ],
    [
      0.3941185868409189,
      -0.3851737783133148,
      0.8344529345663316
    ],
    [
      0.41323838614962005,
      -0.39573759788933016,
      0.8201376651692326
    ],
    [
      0.37629417001390014,
      -0.35009741669358424,
      0.8578079601157994
    ],
    [
      0.3905099745009776,
      -0.3595657187327452,
      0.8474753410733851
    ],
    [
      0.3466393013340345,
      -0.3041383079980262,
      0.8873224241383456
    ],
    [
      0.37072265613994976,
      -0.31478565208717835,
      0.873770396308201
    ],
    [
      0.32989760805192375,
      -0.23788508304147862,
      0.9135525466375584
    ],
    [
      0.34500351957462594,
      -0.2351019474808334,
      0.9086801669299491
    ],
    [
      -0.32499581308571474,
      -0.3862402246210274,
      0.8632474792094406
    ],
    [
      -0.33340744364498853,
      -0.38741080384029736,
      0.8595070363818602
    ],
    [
      -0.3715835097750502,
      -0.3608274721419077,
      0.8554117316304096
    ],
    [
      -0.3743275658347781,
      -0.34211693709807184,
      0.8618786891476339
    ],
    [
      -0.3328096094563035,
      -0.3212641750972492,
      0.886581690343663
    ],
    [
      -0.3106084321673979,
      -0.34295846846010736,
      0.88651107763976
    ],
    [
      -0.26345242302393784,
      -0.3067262815124608,
      0.9146101951281512
    ],
    [
      -0.2802842901208747,
      -0.34172672648746627,
      0.8970304125923478
    ],
    [
      -0.28064485225450975,
      -0.34193595246284947,
      0.8968379292360289
    ],
    [
      -0.2289100643100701,
      -0.2122342628227313,
      0.950029894341042
    ],
    [
      -0.2199031723946156,
      -0.2120441723920725,
      0.952197386955743
    ],
    [
      -0.20088731268741913,
      -0.24813021534469565,
      0.9476685516752268
    ],
    [
      -0.2017766247045248,
      -0.25049407594252776,
      0.9468573871711349
    ],
    [
      -0.24777691857610482,
      -0.30760079543154234,
      0.9186883852922125
    ],
    [
      -0.20457719329187254,
      -0.33221763978584457,
      0.9207494837359088
    ],
    [
      -0.11908494182783297,
      -0.20865612750763174,
      0.970711799188297
    ],
    [
      -0.15568701351357908,
      -0.27278889206606516,
      0.9493933716793009
    ],
    [
      -0.15761244111332043,
      -0.2728123277946099,
      0.9490688869674248
    ],
    [
      -0.20674642610442104,
      -0.19586804226720333,
      0.958588350289874
    ],
    [
      -0.12072215651507626,
      -0.20525771574242355,
      0.971233973383629
    ],
    [
      -0.07757650342180561,
      -0.2451832414806815,
      0.9663679755734212
    ],
    [
      -0.07475724113957562,
      -0.2502163364442119,
      0.9652995078594189
    ],
    [
      -0.08667850351515691,
      -0.290117415616457,
      0.9530575649898598
    ],
    [
      -0.09476055908337774,
      -0.2944822353804151,
      0.9509472380145806
    ],
    [
      -0.04116867765551922,
      -0.31210905254329274,
      0.9491538754599405
    ],
    [
      -0.005866934442917314,
      -0.23380460709486117,
      0.9722659023032023
    ],
    [
      -0.02704624222301737,
      -0.3104569736265541,
      0.9502025932969531
    ],
    [
      0.0025215939706931026,
      -0.3186538549959967,
      0.9478677978811377
    ],
    [
      -0.013547257432964076,
      -0.3833100486791411,
      0.9235203724865194
    ],
    [
      -0.015686658718662358,
      -0.3845168364709163,
      0.9229846863348508
    ],
    [
      -0.047514588061226874,
      -0.3665090976148886,
      0.9292004333225916
    ],
    [
      0.07279616552161874,
      -0.3240957360277697,
      0.9432193128715969
    ],
    [
      0.04885916998879465,
      -0.3308912839592411,
      0.9424031725900602
    ],
    [
      0.018072180811663802,
      -0.3154961902066045,
      0.9487547366131189
    ],
    [
      0.033314231897769976,
      -0.2165160271212493,
      0.9757104959734173
    ],
    [
      0.05141596155997964,
      -0.22890895126073463,
      0.9720890344662743
    ],
    [
      0.09877735330198856,
      -0.24566864067386027,
      0.9643080179403839
    ],
    [
      0.1177720874715982,
      -0.29291034504658814,
      0.9488589279641473
    ],
    [
      0.08119357860533073,
      -0.32464081159725966,
      0.9423459801149111
    ],
    [
      0.1512754613177449,
      -0.2974920401251482,
      0.9426633656111182
    ],
    [
      0.1362827791647791,
      -0.22576166287197683,
      0.9646028590463559
    ],
    [
      0.17266675968255787,
      -0.2860341932234298,
      0.942534153443655
    ],
    [
      0.1926144047831359,
      -0.3643679603513139,
      0.9111178192415411
    ],
    [
      0.14917858657420324,
      -0.35487713832387746,
      0.922934432125478
    ],
    [
      0.22387245331499064,
      -0.42609478718932053,
      0.8765411325070918
    ],
    [
      0.1790325424817522,
      -0.41285900151268323,
      0.8930256399468438
    ],
    [
      0.21047507691671893,
      -0.464661069360897,
      0.8601106513799773
    ],
    [
      0.2321625981217839,
      -0.8860508749793431,
      0.40126596539163856
    ],
    [
      0.22134680338915522,
      -0.8857074961287525,
      0.40807820810567463
    ],
    [
      0.2208511382686831,
      -0.885252505854299,
      0.4093321091780013
    ],
    [
      0.2217615979281431,
      -0.8700476931611191,
      0.4402712860377926
    ],
    [
      0.2290222808173484,
      -0.862511168280558,
      0.4512463622906302
    ],
    [
      0.22901341887546223,
      -0.8553664160141903,
      0.4646516419103791
    ],
    [
      0.24060619639365483,
      -0.8431863155541812,
      0.48077593067783964
    ],
    [
      0.23922799885734006,
      -0.8349660998045432,
      0.49558205853309717
    ],
    [
      0.25266877865919196,
      -0.8205498065348616,
      0.5126953318360461
    ],
    [
      0.25144333281054815,
      -0.811550287290584,
      0.5274110176927426
    ],
    [
      0.25947284441580365,
      -0.8021598839676337,
      0.5377856111535568
    ],
    [
      0.2585996140455922,
      -0.793031821482563,
      0.5515675568155898
    ],
    [
      0.27065189967021824,
      -0.778602678124452,
      0.5661496434886565
    ],
    [
      0.2770382954721469,
      -0.7572030669727586,
      0.591517791963129
    ],
    [
      0.26929917009117577,
      -0.7669791943892956,
      0.5824267098632676
    ],
    [
      0.2751571034481009,
      -0.7407305779859734,
      0.6128676686354215
    ],
    [
      0.28221064404559343,
      -0.7314440517113497,
      0.620763039817494
    ],
    [
      0.2810502067221803,
      -0.7154352817162376,
      0.6396586112740354
    ],
    [
      0.28758298657865045,
      -0.7066924405449538,
      0.6464377930683823
    ],
    [
      0.2851038583251151,
      -0.6837037856901101,
      0.6717625498650134
    ],
    [
      0.2891916140470658,
      -0.6780843639822762,
      0.6756994936268673
    ],
    [
      0.2870022686232872,
      -0.6507106098928639,
      0.7029974395244578
    ],
    [
      0.28404989439220013,
      -0.6207489800997226,
      0.7307437041815237
    ],
    [
      0.28577500578465476,
      -0.6497693466905863,
      0.7043666958126777
    ],
    [
      0.2777967685686736,
      -0.6163160841130734,
      0.7368741003972998
    ],
    [
      0.27628855045626527,
      -0.58491350785688,
      0.7625882409356542
    ],
    [
      0.23212895369242081,
      -0.5535205965535465,
      0.7998319186233241
    ],
    [
      0.23217650422605618,
      -0.5496899559709058,
      0.8024556206981617
    ],
    [
      -0.23418860261681884,
      0.329951283291153,
      0.9144877522738635
    ],
    [
      -0.1957318095496855,
      0.3010619653180099,
      0.9333009974114798
    ],
    [
      0.13116612316634646,
      0.5208685302800986,
      0.843499509364031
    ],
    [
      0.12494648932787186,
      0.5779308281203,
      0.8064640926370028
    ],
    [
      0.18543934532619297,
      0.5743372268426327,
      0.7973386978365639
    ],
    [
      0.09657866700565378,
      0.6006215008731822,
      0.7936790117977525
    ],
    [
      0.09312555065794272,
      0.6011314406370722,
      0.7937056273532732
    ],
    [
      0.04189198382032668,
      0.5955618809889555,
      0.8022163720621106
    ],
    [
      0.003319542279819229,
      0.612010602317266,
      0.7908425907159463
    ],
    [
      0.05703642673421173,
      0.7109769275058537,
      0.7008984623893313
    ],
    [
      -0.05699398726783853,
      0.6002955729118772,
      0.797744890649708
    ],
    [
      -0.07234686441820008,
      0.6162006571108263,
      0.7842593202411052
    ],
    [
      -0.08092121568675534,
      0.6334076869005848,
      0.7695755057348358
    ],
    [
      -0.0692923777965077,
      0.5765787832213027,
      0.8140979505675886
    ],
    [
      -0.17977101660708336,
      0.5004862652491007,
      0.8468741818505643
    ],
    [
      0.9133197630255828,
      -0.3444154079573235,
      -0.21731322377730183
    ],
    [
      0.913489170003883,
      -0.35869485516876476,
      -0.19203004233993187
    ],
    [
      0.2575906288164708,
      -0.8946137835612753,
      0.36512086520509207
    ],
    [
      0.31586738571819467,
      -0.9041852798981098,
      0.2875356921412194
    ],
    [
      0.26794264513633276,
      -0.9100413082632276,
      0.31627765676996294
    ],
    [
      0.38878852189035196,
      -0.8783607455036025,
      0.2780753243361786
    ],
    [
      0.33007198476823757,
      -0.9063029323047699,
      0.2639459788800203
    ],
    [
      0.3285916598764846,
      -0.9063018603723886,
      0.26579025366849734
    ],
    [
      0.5287705031766033,
      -0.8076462867669026,
      0.26097745198004313
    ],
    [
      0.5153403921533279,
      -0.8164022492613416,
      0.26059863318190335
    ],
    [
      0.4932368919072262,
      -0.8253577750158122,
      0.27477611192141005
    ],
    [
      0.47281015878568194,
      -0.8270326559894055,
      0.3040847573887383
    ],
    [
      0.5529001017758036,
      -0.7950513088605465,
      0.24938904092890263
    ],
    [
      0.5452944272291722,
      -0.8003012424966846,
      0.24934295436420867
    ],
    [
      0.571854006463857,
      -0.7858622198019792,
      0.23537962269308838
    ],
    [
      0.629527564761991,
      -0.7438806140072953,
      0.22435836803864992
    ],
    [
      0.588701785750371,
      -0.7840834628420695,
      0.19657906997417915
    ],
    [
      0.6676486894173289,
      -0.7244058488815106,
      0.17170146657958762
    ],
    [
      0.665873650584537,
      -0.7260228618910235,
      0.1717646222852367
    ],
    [
      0.6448794625404373,
      -0.7404812623713646,
      0.1892563839622513
    ],
    [
      0.6886805179186656,
      -0.7080980142772696,
      0.15593699501999558
    ],
    [
      0.6857405375941146,
      -0.710922968502838,
      0.15603989219186093
    ],
    [
      0.7354132713412702,
      -0.6631883831036632,
      0.13909884561519675
    ],
    [
      0.7065012867574709,
      -0.6937787440862095,
      0.13973899264056389
    ],
    [
      0.7649362658319052,
      -0.6379961483472083,
      0.08850663200725604
    ],
    [
      0.7392078844790875,
      -0.6636441493259497,
      0.11466536787273073
    ],
    [
      0.7828211804126906,
      -0.6186800336814526,
      0.06652830541354915
    ],
    [
      0.7664228521301756,
      -0.6367724542052234,
      0.08436144438132641
    ],
    [
      0.801455398315582,
      -0.596294194640883,
      0.0458527856121371
    ],
    [
      0.799634871414375,
      -0.598689033715589,
      0.04642750614463847
    ],
    [
      0.7832923351694746,
      -0.6182249941469121,
      0.06519949598579758
    ],
    [
      0.8287921836789743,
      -0.5579578407549025,
      0.04226776801256605
    ],
    [
      0.809025693413191,
      -0.5866161359555362,
      0.03686375501629597
    ],
    [
      0.8420645175651743,
      -0.5393632976337983,
      0.0038185629921507393
    ],
    [
      0.8360583135016278,
      -0.5485751891166691,
      0.008471027707684969
    ],
    [
      0.8527226630060453,
      -0.5218027939093881,
      -0.02420545938905294
    ],
    [
      0.8457220639782209,
      -0.5332900826374042,
      -0.0188647359114471
    ],
    [
      0.8615929886836855,
      -0.5051361461744739,
      -0.049949931722829743
    ],
    [
      0.8560835412205314,
      -0.5149403294398599,
      -0.04424282504184287
    ],
    [
      0.8657219052395001,
      -0.4949204235839108,
      -0.07469509427005398
    ],
    [
      0.8660228666302584,
      -0.4943230450305373,
      -0.07516063880281357
    ],
    [
      0.8688145589275096,
      -0.48607714130720303,
      -0.09428825427493266
    ],
    [
      0.8671667226829988,
      -0.48186188478021136,
      -0.12582129814657517
    ],
    [
      0.8658928204231912,
      -0.487351363870201,
      -0.11277531500034103
    ],
    [
      0.8927207858792452,
      -0.42437811107592344,
      -0.15150187226161332
    ],
    [
      0.8643546868405676,
      -0.4795172232301215,
      -0.15150646178436813
    ],
    [
      0.8639335362397517,
      -0.48248296547784086,
      -0.1443226696814691
    ],
    [
      0.8890382268569021,
      -0.4226275105896919,
      -0.17605970146485883
    ],
    [
      0.8861806546527063,
      -0.4256682276611691,
      -0.18300384498446975
    ],
    [
      0.8596986361330051,
      -0.4768999786963061,
      -0.18298815631213355
    ],
    [
      0.8594624286632702,
      -0.48001652951041646,
      -0.1758080348363198
    ],
    [
      0.8806564361413194,
      -0.4224305900060807,
      -0.21446826830555796
    ],
    [
      0.8523234322317964,
      -0.4770382217035695,
      -0.2144278477775365
    ],
    [
      0.8388723004269498,
      -0.48849740406237174,
      -0.2401323589204943
    ],
    [
      0.8825511545884799,
      -0.38911880664260956,
      -0.2639886623542242
    ],
    [
      0.8682779565455377,
      -0.40171735693783794,
      -0.29106108519000407
    ],
    [
      0.8510938120230136,
      -0.4421195114026565,
      -0.2831424743361752
    ],
    [
      0.793376789434118,
      -0.5611186823381835,
      0.23600655566799794
    ],
    [
      0.8093816949241818,
      -0.5301849441519967,
      0.2525969059909542
    ],
    [
      0.8106890316187649,
      -0.5250493037464653,
      0.25904926683621615
    ],
    [
      0.8055561149879327,
      -0.5167285594844597,
      0.2899498946691718
    ],
    [
      0.8076863796378639,
      -0.50839434426494,
      0.2986266948330339
    ],
    [
      0.8021867745163909,
      -0.49954980323375014,
      0.3270265629579811
    ],
    [
      0.8049170461874292,
      -0.47846105255274357,
      0.3509751699864604
    ],
    [
      0.8183772908227819,
      -0.45674315403786653,
      0.348775430764705
    ],
    [
      0.7879479450496648,
      -0.48584603330944515,
      0.3782745931324069
    ],
    [
      0.7785020381171361,
      -0.47366385030397534,
      0.4117974423945326
    ],
    [
      0.8042240424817122,
      -0.42860503815945405,
      0.4117297788097263
    ],
    [
      0.8089260855364501,
      -0.42709982662905416,
      0.40401030461129045
    ],
    [
      0.8185279832764298,
      -0.4374202854274452,
      0.3723915070057224
    ],
    [
      0.7989514312799889,
      -0.4830493764755141,
      0.3582456005902573
    ],
    [
      0.7588823904444185,
      -0.4809240476693574,
      0.4391008743406084
    ],
    [
      0.7633154783943032,
      -0.4379112070659492,
      0.47495605604068203
    ],
    [
      0.7706243257508828,
      -0.4272706834351425,
      0.4728402601702434
    ],
    [
      0.7961658567554477,
      -0.42023976246109285,
      0.4353371918220496
    ],
    [
      0.7509443998228813,
      -0.44395125560488513,
      0.488865821081305
    ],
    [
      0.7309556936086972,
      -0.4412501620345773,
      0.5205785901143914
    ],
    [
      0.7245079026525776,
      -0.42956423467457,
      0.5390388365251748
    ],
    [
      0.7575412767007468,
      -0.3822101137959795,
      0.5291943338761925
    ],
    [
      0.7708419788956693,
      -0.3938622045661931,
      0.5006747520960758
    ],
    [
      0.7709538318465724,
      -0.42601147611707246,
      0.4734389204297002
    ],
    [
      0.7432658655930453,
      -0.3641055634560368,
      0.5612334556176984
    ],
    [
      0.7573895985852585,
      -0.3767223737417877,
      0.5333303376681416
    ],
    [
      0.7159319830945844,
      -0.42783191276005655,
      0.5517257017815347
    ],
    [
      0.7111821431552569,
      -0.41979775778083783,
      0.5639058448174453
    ],
    [
      0.7408357748075753,
      -0.3647227217460225,
      0.5640387318326934
    ],
    [
      0.7252303363218678,
      -0.3510333712508682,
      0.5922976714007245
    ],
    [
      0.6973688942176897,
      -0.4170043879117298,
      0.5829099122848748
    ],
    [
      0.6922181749754536,
      -0.4083129017007169,
      0.5950752662801514
    ],
    [
      0.7226940176995479,
      -0.35146237409581904,
      0.5951365863196584
    ],
    [
      0.6772538323469248,
      -0.4052955701318372,
      0.614054352156967
    ],
    [
      0.6664259806506797,
      -0.3870895530822686,
      0.6372111817979573
    ],
    [
      0.7114698699845208,
      -0.34166292100261547,
      0.6140660164153117
    ],
    [
      0.6602779977818571,
      -0.384822296553133,
      0.6449377998851937
    ],
    [
      0.6533345144308039,
      -0.373098539485937,
      0.6587499465555396
    ],
    [
      0.6896935538344819,
      -0.3219146634792188,
      0.6486090896959615
    ],
    [
      0.7107444869070307,
      -0.33655873018063104,
      0.6177139268872467
    ],
    [
      0.6471315405165224,
      -0.3396146944337352,
      0.6825559527199168
    ],
    [
      0.6662774971524628,
      -0.30053841403907217,
      0.682459492186261
    ],
    [
      0.6893087008254939,
      -0.3162613372273684,
      0.65179159364127
    ],
    [
      0.6529523893014667,
      -0.37294388071273843,
      0.659216230947349
    ],
    [
      0.6173103167398505,
      -0.33100003852128057,
      0.7136994797149963
    ],
    [
      0.6061419499728224,
      -0.3006086349246208,
      0.736360227804232
    ],
    [
      0.6541120048114594,
      -0.2546278774747684,
      0.712251450805281
    ],
    [
      0.6589291686334837,
      -0.25529994791740024,
      0.7075551478982813
    ],
    [
      0.48682577642053376,
      -0.7230984938189069,
      0.4900298273058209
    ],
    [
      0.5077440305412911,
      -0.7541690713862039,
      0.4164432869121022
    ],
    [
      0.5421059656890903,
      -0.70770795453599,
      0.45306795632750724
    ],
    [
      0.5021234139153423,
      -0.7112542900034955,
      0.4919241934989834
    ],
    [
      0.5395200751310378,
      -0.7065989917525337,
      0.4578601897794809
    ],
    [
      0.5632357328592431,
      -0.7041797519687717,
      0.4323151467942229
    ],
    [
      0.5678003810904119,
      -0.7059573292073621,
      0.4233520716519423
    ],
    [
      0.5689318613167196,
      -0.710677065561465,
      0.41382924698918766
    ],
    [
      0.5931371015077814,
      -0.7046169417184246,
      0.38949113501891425
    ],
    [
      0.6574172267089364,
      -0.6556739425688496,
      0.37134117878650597
    ],
    [
      0.7201374144355166,
      -0.6112608682849031,
      0.32827161807520794
    ],
    [
      0.6626203993726738,
      -0.646133796252933,
      0.3787417638378049
    ],
    [
      0.68551223883334,
      -0.6152793316260361,
      0.38923555141266364
    ],
    [
      0.7374485071457351,
      -0.6022813114734058,
      0.30565817698599357
    ],
    [
      0.23952540454754528,
      0.8562904481113044,
      -0.45759616371826844
    ],
    [
      0.28602784377404367,
      0.7716422304569014,
      -0.5681164852048121
    ],
    [
      0.3069492770581097,
      0.7405286933756476,
      -0.5978289016105359
    ],
    [
      0.45138804116671893,
      0.8876167184668876,
      -0.09157181547696
    ],
    [
      0.45153620093091446,
      0.8854978398866163,
      -0.10958391672601141
    ],
    [
      0.44983100673592863,
      0.8858800484260007,
      -0.11343987473409725
    ],
    [
      0.4497322108146689,
      0.8819295021825566,
      -0.14121363863231515
    ],
    [
      0.4479498770966641,
      0.8822103522051303,
      -0.14507171354603648
    ],
    [
      0.44743666214040123,
      0.8772471281964349,
      -0.17389050993014044
    ],
    [
      0.4459845425055902,
      0.8774213686903577,
      -0.176718786810058
    ],
    [
      0.444067064799797,
      0.8716389097398878,
      -0.20748506690254293
    ],
    [
      0.4361715215995407,
      0.8571630872170697,
      -0.27390846218772336
    ],
    [
      0.44355997303274547,
      0.8716828518661178,
      -0.20838319530552793
    ],
    [
      -0.04879565717898564,
      0.9899658547131202,
      -0.13261444243592904
    ],
    [
      -0.3186384925032327,
      0.3600338608838204,
      -0.8768381436230732
    ],
    [
      -0.3048630661387301,
      0.3783456118174053,
      -0.874021229103164
    ],
    [
      -0.29720750550111097,
      0.3993220865138585,
      -0.867300161360544
    ],
    [
      -0.35459256945720863,
      0.29618552843463497,
      -0.8868699129137434
    ],
    [
      -0.32207150952699387,
      0.31948282167298125,
      -0.8911793699401225
    ],
    [
      -0.09424827300247093,
      0.10031838202001783,
      -0.9904814411511896
    ],
    [
      -0.10232005088784606,
      0.09332049118165527,
      -0.9903645253702917
    ],
    [
      -0.11475305861124306,
      0.0757051696389234,
      -0.99050515537745
    ],
    [
      -0.11749390182226321,
      0.06877193829254544,
      -0.9906894586791901
    ],
    [
      0.02666211669726653,
      0.09467809441172988,
      -0.995150837798866
    ],
    [
      0.026263258043840977,
      0.10191207316953692,
      -0.994446665547836
    ],
    [
      0.004166705790126595,
      0.11834858124629069,
      -0.9929633688509605
    ],
    [
      -0.029314688563960602,
      0.12136666615950896,
      -0.992174773605802
    ],
    [
      0.16839291605723522,
      0.017610347722927928,
      -0.985562631939147
    ],
    [
      0.23853002128414436,
      0.0420573161447354,
      -0.9702240004786974
    ],
    [
      0.17737657595832604,
      0.04562497051399424,
      -0.9830848958085447
    ],
    [
      0.17166798891042026,
      0.03303009561169749,
      -0.9846009924671689
    ],
    [
      0.34175137945307665,
      0.045641862733389396,
      -0.9386814235980947
    ],
    [
      0.28508587023114174,
      0.03807402380393419,
      -0.9577454856619947
    ],
    [
      0.3185563705893818,
      0.09212085384067123,
      -0.9434169741130303
    ],
    [
      0.31851619140534476,
      0.09215647271901839,
      -0.9434270614883923
    ],
    [
      0.2732848216029049,
      0.08597782033820969,
      -0.9580830969656854
    ],
    [
      0.25761639667646247,
      0.05996516355832802,
      -0.96438476311214
    ],
    [
      0.3875295548832997,
      0.11206667572937354,
      -0.9150201660525953
    ],
    [
      0.32035726626468086,
      0.148763544314117,
      -0.9355429599085882
    ],
    [
      0.3705003596034546,
      0.14071949992883281,
      -0.9181108352881421
    ],
    [
      0.3230757587843438,
      0.15048561790065224,
      -0.9343319179451055
    ],
    [
      0.38436334868483535,
      0.17804479809666307,
      -0.9058503552234762
    ],
    [
      0.3309600170988429,
      0.22457253173721994,
      -0.9165329481644776
    ],
    [
      0.3370907390833127,
      0.20592310367719519,
      -0.9186759542930343
    ],
    [
      0.1207018635081303,
      -0.2127716785491153,
      -0.9696181067580456
    ],
    [
      0.09610471837144112,
      -0.22356763204364344,
      -0.9699388625110059
    ],
    [
      0.06298694316182638,
      -0.2519107825193225,
      -0.9656985050426615
    ],
    [
      0.130114675078823,
      -0.2043612335624686,
      -0.9702095946474445
    ],
    [
      0.36855683845455184,
      -0.13864558067864796,
      -0.9192079524170066
    ],
    [
      0.3628888509918467,
      -0.08031391518013976,
      -0.928364883466762
    ],
    [
      0.03396292575823578,
      -0.050309883641895425,
      -0.9981560175052192
    ],
    [
      0.07974705268513949,
      -0.07339934608882827,
      -0.9941091205605982
    ],
    [
      0.12489327276090513,
      -0.07001617860684028,
      -0.989696622785167
    ],
    [
      0.10958606891882114,
      -0.04621913786881051,
      -0.9929021526784919
    ],
    [
      0.05463759947916506,
      -0.023044012510576594,
      -0.9982403048417584
    ],
    [
      0.0811382870972566,
      -0.012052296460878804,
      -0.9966299817469582
    ],
    [
      0.10605366166831724,
      0.011090976408026873,
      -0.9942985522915432
    ],
    [
      0.11078244910250691,
      0.04117630472238481,
      -0.9929913196500056
    ],
    [
      0.10905840194907851,
      0.040535500231014335,
      -0.9932085069034269
    ],
    [
      0.1110053619016678,
      0.11055197463882231,
      -0.9876517961976968
    ],
    [
      0.056677947816463355,
      0.11469675653733569,
      -0.9917823673927306
    ],
    [
      0.13675727489383768,
      0.08807519522059148,
      -0.986681411475085
    ],
    [
      0.3300949080791827,
      0.2247704694532223,
      -0.916796372005242
    ],
    [
      0.27195742984314036,
      0.18518310243816802,
      -0.9443232364632824
    ],
    [
      0.280461295848695,
      0.16587860101505242,
      -0.9454235829807504
    ],
    [
      0.28967451191078103,
      0.15769555733861107,
      -0.9440449080128104
    ],
    [
      0.26915390358045127,
      0.261631254452753,
      -0.9268793140861888
    ],
    [
      0.25665143380908045,
      0.2571885838536969,
      -0.9316566287313546
    ],
    [
      0.25842489546827024,
      0.19676040487280583,
      -0.9457811144638612
    ],
    [
      0.2917745148198673,
      0.3064054745726268,
      -0.906081297485802
    ],
    [
      0.2809290953935136,
      0.3540230661568861,
      -0.8920462499165944
    ],
    [
      0.1396897889158401,
      0.3969710755983321,
      -0.9071387589619084
    ],
    [
      0.15639342151950095,
      0.38032095297036,
      -0.9115355563208387
    ],
    [
      0.16993151338692367,
      0.3766960433982326,
      -0.9106170279794611
    ],
    [
      0.10668905758891929,
      0.44373527999444995,
      -0.8897844942900699
    ],
    [
      0.12819075982106196,
      0.402291624993863,
      -0.9064924586317836
    ],
    [
      0.09507072501523112,
      0.4484093598422173,
      -0.8887578991215612
    ],
    [
      0.06563486134484549,
      0.45377832465110157,
      -0.8886941527055764
    ],
    [
      0.08210570380227697,
      0.4474235983400748,
      -0.8905452133673799
    ],
    [
      -0.0971687350674711,
      0.4552636133768247,
      -0.885038575012674
    ],
    [
      -0.08645131968021219,
      0.441645738176671,
      -0.8930146758457741
    ],
    [
      -0.057644778992065555,
      0.4392036674129628,
      -0.8965362335042346
    ],
    [
      0.01070933121215838,
      0.8027616693294951,
      -0.5962038346742755
    ],
    [
      0.023415039153216483,
      0.8245750934194261,
      -0.5652677695161807
    ],
    [
      -0.26386433446590385,
      0.395050998643334,
      -0.8799490448132609
    ],
    [
      -0.12253014819253644,
      0.439857414356966,
      -0.8896694992069355
    ],
    [
      -0.3912530213487324,
      0.7835133045414857,
      -0.4827297120459537
    ],
    [
      -0.39394786041073704,
      0.7654862044834823,
      -0.5087592299145784
    ],
    [
      -0.4074750547012646,
      0.7532933703217273,
      -0.5162491433654243
    ],
    [
      -0.4199163294099556,
      0.733623430520437,
      -0.5342910615818827
    ],
    [
      -0.4203150743922498,
      0.7313786611427538,
      -0.5370479422394897
    ],
    [
      -0.4300656301401503,
      0.7153832421591197,
      -0.5506998916016432
    ],
    [
      -0.4357203455941365,
      0.709764921260808,
      -0.5535174224746363
    ],
    [
      -0.4486924584351283,
      0.6863958728698231,
      -0.5723074204050778
    ],
    [
      -0.4742015157608958,
      0.6692471351955355,
      -0.5720499929924285
    ],
    [
      -0.48020337519256856,
      0.6548457056388468,
      -0.5835938829871558
    ],
    [
      -0.4977981156195685,
      0.6341274297940008,
      -0.5916751125985116
    ],
    [
      -0.5040867031204577,
      0.6109127998409059,
      -0.6104769829630703
    ],
    [
      -0.5349417138588829,
      0.5789374153289323,
      -0.6153607331524952
    ],
    [
      -0.5166018204661172,
      0.6025193361462432,
      -0.6083527008742411
    ],
    [
      -0.5712524245084009,
      0.511878029379858,
      -0.6416007719224369
    ],
    [
      -0.5436906295426122,
      0.5728136544760826,
      -0.613420750051148
    ],
    [
      -0.5584474088818505,
      0.5531524804560374,
      -0.6181899585713768
    ],
    [
      -0.5868238245465301,
      0.5082492833333269,
      -0.6303336139979707
    ],
    [
      -0.6267410353280009,
      0.47322343850834564,
      -0.6190761276953939
    ],
    [
      -0.6289249138502059,
      0.4697854711531606,
      -0.6194796718471995
    ],
    [
      -0.6530136916067358,
      0.4466176661460782,
      -0.6116418714087297
    ],
    [
      -0.6522576541172533,
      0.44786045564368904,
      -0.6115398310135528
    ],
    [
      -0.6638671050850551,
      0.43591186909058044,
      -0.6076687495436516
    ],
    [
      -0.6796222917367175,
      0.42857035165194013,
      -0.5953494723769094
    ],
    [
      -0.687921587879917,
      0.41992323614931487,
      -0.591969901828345
    ],
    [
      -0.7114551799376979,
      0.40997587104143135,
      -0.5707462764693585
    ],
    [
      -0.7142867576234361,
      0.4069017485115981,
      -0.5694079336837544
    ],
    [
      -0.7342654580200633,
      0.39774470233157105,
      -0.5501394268053841
    ],
    [
      -0.7538344303841237,
      0.40441525659934596,
      -0.5178628696837889
    ],
    [
      -0.2744099114218272,
      0.27293280105854506,
      -0.9220666389257349
    ],
    [
      -0.27137659509913314,
      0.2965680390146062,
      -0.9156430209789359
    ],
    [
      -0.3072017483982543,
      0.25660073002841927,
      -0.9163968305979336
    ],
    [
      -0.3252531983099856,
      0.2332963905833044,
      -0.916396830597928
    ],
    [
      -0.3382321668126885,
      0.20670485006617692,
      -0.9180806643712267
    ],
    [
      -0.33036715491854357,
      0.20950343910000163,
      -0.9203074768555882
    ],
    [
      -0.3068619371298003,
      0.15737052579641997,
      -0.9386534339954788
    ],
    [
      -0.2949457020162176,
      0.17225610306515446,
      -0.9398589616633803
    ],
    [
      -0.2950337532987209,
      0.1806715796804867,
      -0.938249894596438
    ],
    [
      -0.24183725895388847,
      0.127688290474068,
      -0.9618785997502387
    ],
    [
      -0.23476329966955528,
      0.1258831301343551,
      -0.9638670191866924
    ],
    [
      -0.21016845278896815,
      0.1386528478081154,
      -0.9677833483001197
    ],
    [
      -0.21087392199603572,
      0.13947498782822848,
      -0.9675117140336469
    ],
    [
      -0.6803203892153558,
      0.6361206211821414,
      0.36402571794409455
    ],
    [
      -0.6868849485664902,
      0.6496056714689313,
      0.3258857760446272
    ],
    [
      -0.6659328243580938,
      0.6766908007485,
      0.3140430442229317
    ],
    [
      -0.7180053614864766,
      0.6315910874802211,
      0.2925081179937165
    ],
    [
      -0.6841026798198445,
      0.6783762088842773,
      0.267972466277979
    ],
    [
      -0.6691868142313113,
      0.6822631831635693,
      0.29445875187954995
    ],
    [
      -0.6656778461313877,
      0.6776902328020231,
      0.3124243164905963
    ],
    [
      -0.7109180805224333,
      0.6313399490758703,
      0.3098473035015416
    ],
    [
      -0.7362043500547356,
      0.6205686639962554,
      0.26999571890381324
    ],
    [
      -0.7369311045759079,
      0.620698279801641,
      0.2677054212372546
    ],
    [
      -0.6988912675736338,
      0.6741079335690033,
      0.23901776086443335
    ],
    [
      -0.6843587646330631,
      0.6787097941273884,
      0.26646969175774127
    ],
    [
      -0.7177030125230806,
      0.6668857373852102,
      0.20041406908567938
    ],
    [
      -0.6989698536329949,
      0.6742101742348908,
      0.2384990244643107
    ],
    [
      -0.7462969421679635,
      0.6160364306545171,
      0.25207139904636083
    ],
    [
      -0.7637482303041059,
      0.6011281996578741,
      0.23523079790586404
    ],
    [
      -0.7785087231961977,
      0.6017148433087347,
      0.17850326397399766
    ],
    [
      -0.7768293375935669,
      0.6069018869183176,
      0.16794725335332533
    ],
    [
      -0.7625422953391136,
      0.6258225588587847,
      0.16393709965227188
    ],
    [
      -0.7306446031765733,
      0.6614644533352965,
      0.1691840442322651
    ],
    [
      -0.7212016399727904,
      0.6689648071015405,
      0.1798729589464645
    ],
    [
      -0.8265056351188874,
      0.5505079279022632,
      0.1175987093189418
    ],
    [
      -0.8065537692363433,
      0.5817295120718422,
      0.10517505462467741
    ],
    [
      -0.8069528045099408,
      0.5568734647957764,
      0.19677173450444713
    ],
    [
      -0.8163252737546561,
      0.5438277707548599,
      0.19458777758427037
    ],
    [
      -0.8374256611680895,
      0.5190670291653618,
      0.171136440452154
    ],
    [
      -0.8644543804057812,
      0.4685449160063953,
      0.18216554526533546
    ],
    [
      -0.8663126948299587,
      0.4706673764828247,
      0.16725589822553327
    ],
    [
      -0.8508601108722167,
      0.5159899687174502,
      0.09895162408714607
    ],
    [
      -0.8840324068331944,
      0.4596848678132477,
      0.0847143787808575
    ],
    [
      -0.8708509359516093,
      0.48461335483728435,
      0.08227115937895993
    ],
    [
      -0.8508848276837886,
      0.5159592309067127,
      0.0988993531813176
    ],
    [
      -0.9058824472581994,
      0.4191310015787656,
      0.06087852876898579
    ],
    [
      -0.9060387672591225,
      0.4182567417405777,
      0.06445967896387121
    ],
    [
      -0.9302648938044147,
      0.3651018089317677,
      0.036164851303604896
    ],
    [
      -0.9303254459833056,
      0.3663787047207209,
      0.0161619702737731
    ],
    [
      -0.9180559453946895,
      0.39612734813232814,
      -0.01601265709094727
    ],
    [
      -0.9078317779725947,
      0.41849253559901906,
      0.026560507356243615
    ],
    [
      -0.937870984382709,
      0.3466607120338625,
      -0.014978897996316904
    ],
    [
      -0.9169358808418898,
      0.39681051620481317,
      -0.0420714232463962
    ],
    [
      -0.9466800902343482,
      0.3213460903789963,
      -0.023097552944420247
    ],
    [
      -0.9579889152324624,
      0.2861808248021316,
      -0.018914909656183206
    ],
    [
      -0.9616952030170643,
      0.2706834790245426,
      -0.04327575160684773
    ],
    [
      -0.9574198035710525,
      0.28267076379391537,
      -0.058690365701126575
    ],
    [
      -0.9424100014020103,
      0.3088084191031306,
      -0.12845524336705094
    ],
    [
      -0.9706616601183524,
      0.23348018296919756,
      -0.05747126009541046
    ],
    [
      -0.9709930523374423,
      0.23061640073832548,
      -0.06315511082182476
    ],
    [
      -0.9634218489151588,
      0.23519706372638502,
      -0.12845498140353948
    ],
    [
      -0.9633694471786294,
      0.23486387458941216,
      -0.12945373171751623
    ],
    [
      -0.9648625120661394,
      0.20575577868944578,
      -0.1634163160315363
    ],
    [
      -0.9667160313887199,
      0.1887020030975151,
      -0.17277635452523293
    ],
    [
      -0.9749708290143717,
      0.12199297809474717,
      -0.18587521584816902
    ],
    [
      -0.9749970506008759,
      0.11804130825044419,
      -0.18827373918344703
    ],
    [
      -0.9803601435627792,
      0.004639701868482075,
      -0.197161005475572
    ],
    [
      -0.9659196012690103,
      0.0009705153285342301,
      -0.25884045662205313
    ],
    [
      -0.949923530367594,
      -0.026874446417465316,
      -0.31132467069559616
    ],
    [
      -0.8995368348119257,
      -0.11794696823532645,
      -0.420620964171589
    ],
    [
      -0.8083185019674081,
      0.03973140452030545,
      -0.5874032812914899
    ],
    [
      -0.8176390151233126,
      0.04379606418354852,
      -0.5740630154523193
    ],
    [
      -0.8387719736384849,
      0.04580142730405131,
      -0.5425530439464077
    ],
    [
      -0.8808614390923052,
      -0.18744875325307264,
      -0.43467929560090823
    ],
    [
      -0.8001937075021437,
      -0.11360135198247084,
      -0.5888843377962505
    ],
    [
      -0.7717665866299849,
      0.04908551739051901,
      -0.6340086338087259
    ],
    [
      -0.7836243742761702,
      -0.11794322943946206,
      -0.6099362545952415
    ],
    [
      -0.7633945624445474,
      -0.1130544489381363,
      -0.635961817726027
    ],
    [
      -0.6705411809265358,
      -0.1334684155908086,
      -0.7297675703409449
    ],
    [
      -0.1678570292254802,
      -0.4845262534744191,
      -0.8585210116436518
    ],
    [
      -0.20311868452958862,
      -0.495429986418611,
      -0.8445661185201692
    ],
    [
      -0.2062380763752129,
      -0.5016589146901471,
      -0.8401215323778789
    ],
    [
      -0.15284614263910642,
      -0.563586148334689,
      -0.8117935144392421
    ],
    [
      -0.049384273526511466,
      -0.5410110930583112,
      -0.839564286231918
    ],
    [
      -0.06176613654672083,
      -0.5018218014016371,
      -0.8627629013895461
    ],
    [
      -0.14551343437991418,
      -0.48143816156544816,
      -0.8643165722138179
    ],
    [
      -0.038584911639230425,
      -0.590626585246276,
      -0.8060219856766416
    ],
    [
      -0.03568174389644194,
      -0.5851609494013545,
      -0.8101317648680455
    ],
    [
      -0.04453305144408246,
      -0.5453223501119691,
      -0.8370426164762687
    ],
    [
      -0.14141223982931703,
      -0.5922514245583158,
      -0.7932470160896297
    ],
    [
      -0.14578892730405882,
      -0.6353033762045199,
      -0.7583766932459555
    ],
    [
      -0.03085397210604766,
      -0.6313616514918959,
      -0.774874504310669
    ],
    [
      -0.018783604179924633,
      -0.6700671132140826,
      -0.7420628275307676
    ],
    [
      -0.015310560972129642,
      -0.6464538247080253,
      -0.7627994751198276
    ],
    [
      -0.172754121128433,
      -0.6767301729214005,
      -0.7156761045968448
    ],
    [
      -0.034803608363746616,
      -0.7120799429078157,
      -0.7012352413799985
    ],
    [
      -0.009138075401732162,
      -0.6883242578459802,
      -0.7253455808362886
    ],
    [
      -0.17697878347455587,
      -0.6801082922910064,
      -0.7114289992380669
    ],
    [
      -0.1755128753684089,
      -0.6948839604425142,
      -0.6973747286069661
    ],
    [
      -0.03628679200008058,
      -0.7424257998105711,
      -0.6689448411505816
    ],
    [
      -0.1809452357167711,
      -0.7245043488866806,
      -0.6650956849323931
    ],
    [
      -0.036286792000069464,
      -0.7424257998105737,
      -0.6689448411505793
    ],
    [
      -0.2377420916172551,
      -0.8304198405873644,
      -0.5038666353632766
    ],
    [
      -0.039399750957340565,
      -0.8061167715448073,
      -0.5904434014015877
    ],
    [
      0.005601314414758667,
      -0.9458992774976341,
      -0.3244120560433608
    ],
    [
      0.00548348472767179,
      -0.9357664762044718,
      -0.3525776983972569
    ],
    [
      0.0025329667716138715,
      -0.9297220940283294,
      -0.36825319001321916
    ],
    [
      -0.013287932551074083,
      -0.9118849436505387,
      -0.4102307648043623
    ],
    [
      -0.26719828124277883,
      -0.8439593831697894,
      -0.46512110042501126
    ],
    [
      -0.2800226642545974,
      -0.8437586248031781,
      -0.4578850189447201
    ],
    [
      -0.11594169314992676,
      -0.9649628057995545,
      -0.2353811955381726
    ],
    [
      -0.09140251954882951,
      -0.9706704819001721,
      -0.22236095652747462
    ],
    [
      -0.07186045138823087,
      -0.9689184593451514,
      -0.2367131062414959
    ],
    [
      -0.15861751444025218,
      -0.0941127732349574,
      -0.9828444790641202
    ],
    [
      -0.12085257425268482,
      -0.13858923567871365,
      -0.9829484620520494
    ],
    [
      -0.12170336987722635,
      -0.14630827132242832,
      -0.9817240852210817
    ],
    [
      -0.1125992547020581,
      -0.18069224048549587,
      -0.9770730382468205
    ],
    [
      -0.06744600565238186,
      -0.21158370940151175,
      -0.975029932995616
    ],
    [
      -0.24745337149260138,
      -0.36615062988209507,
      -0.8970510270736496
    ],
    [
      -0.21215785434339307,
      -0.3598655416566478,
      -0.9085625112057921
    ],
    [
      -0.12497291962374926,
      -0.3607394984317896,
      -0.9242557998908618
    ],
    [
      -0.1227652157309464,
      -0.4583596025141378,
      -0.880247224698616
    ],
    [
      -0.010563687536289102,
      -0.45113140952197556,
      -0.8923950133479855
    ],
    [
      0.058361645670725354,
      -0.49899331119558665,
      -0.864638417893092
    ],
    [
      0.04065562385201569,
      -0.16259861971808126,
      -0.9858543549201262
    ],
    [
      0.020873812480960336,
      -0.16249739329940135,
      -0.9864881555920524
    ],
    [
      0.000799031709538875,
      -0.17281819464109843,
      -0.9849534167407709
    ],
    [
      0.06582424034581963,
      -0.15312639997868535,
      -0.9860119040926755
    ],
    [
      0.0578237481732803,
      -0.15325983866654252,
      -0.9864926943465412
    ],
    [
      0.089228660219096,
      -0.14014467668962527,
      -0.9861022846495517
    ],
    [
      0.11147415829701524,
      -0.12508237975874167,
      -0.985864042505792
    ],
    [
      0.09188460787299678,
      -0.13611029754845314,
      -0.9864234413968969
    ],
    [
      0.12035587100249386,
      -0.1107757833310421,
      -0.9865308865629221
    ],
    [
      0.2825129898915392,
      -0.5641313198989966,
      -0.7758493825811548
    ],
    [
      0.2897717555592543,
      -0.5751900436747304,
      -0.7649763024679717
    ],
    [
      0.318007694267099,
      -0.5701305728610706,
      -0.7575105519238863
    ],
    [
      0.35091229200180907,
      -0.534350177898032,
      -0.7689801367411117
    ],
    [
      0.34147563680456167,
      -0.5873082696212003,
      -0.7338006445237497
    ],
    [
      0.35263501997916485,
      -0.5848857005412854,
      -0.7304500393501419
    ],
    [
      0.3789959514181097,
      -0.5526258677305428,
      -0.7422713244654857
    ],
    [
      0.37036498339828505,
      -0.5381645724822639,
      -0.7571054563251873
    ],
    [
      0.3695912419851423,
      -0.5997431801062985,
      -0.7097256031480506
    ],
    [
      0.4087840721679713,
      -0.5895294598109047,
      -0.6966710833361994
    ],
    [
      0.4135620997666402,
      -0.5828239278280134,
      -0.6994874257538403
    ],
    [
      0.4014420970460639,
      -0.5565813861680929,
      -0.7273660724081532
    ],
    [
      0.40845761554943094,
      -0.5950561253790414,
      -0.6921492497637745
    ],
    [
      0.43633882799788926,
      -0.6281954066745689,
      -0.6441886045362815
    ],
    [
      0.46261119940284096,
      -0.5846040167295492,
      -0.6665050801087279
    ],
    [
      0.462579733089637,
      -0.5844984346752042,
      -0.6666195094631991
    ],
    [
      0.42987391907913297,
      -0.5767848095787216,
      -0.6946421360202567
    ],
    [
      0.43630557907230294,
      -0.6287135474317459,
      -0.6437054582230698
    ],
    [
      0.4368121852568376,
      -0.6291286956111031,
      -0.6429558298746643
    ],
    [
      0.4670990967887795,
      -0.6313441589245119,
      -0.6190500680647786
    ],
    [
      0.4886176308265295,
      -0.5919915291073825,
      -0.640935909674729
    ],
    [
      0.5219200814464603,
      -0.6110691367147026,
      -0.5951419483935477
    ],
    [
      0.5199900648591211,
      -0.5970061790560058,
      -0.610896026027961
    ],
    [
      0.4948615794261131,
      -0.5888415089282537,
      -0.639044360409346
    ],
    [
      0.4838670653682653,
      -0.6473658883112147,
      -0.5888888432488213
    ],
    [
      0.48838246736681373,
      -0.6463936436726718,
      -0.5862233558877282
    ],
    [
      0.5085659474150246,
      -0.6325474081629662,
      -0.5841613249404417
    ],
    [
      0.5434824385652476,
      -0.6357724235814061,
      -0.5481060703774381
    ],
    [
      0.5508817573910602,
      -0.6321955720848041,
      -0.5448468115076974
    ],
    [
      0.5677273610130739,
      -0.6001033027662953,
      -0.5635261037131422
    ],
    [
      0.5510212400780299,
      -0.595320701603764,
      -0.5847810318613902
    ],
    [
      0.5920344404846422,
      -0.5995787146989405,
      -0.5385170249490756
    ],
    [
      0.5768385336926889,
      -0.5948740932953157,
      -0.5598054297462152
    ],
    [
      0.5679750704466348,
      -0.6336739862319538,
      -0.5252252835917611
    ],
    [
      0.5783669217929035,
      -0.62820062465941,
      -0.5204379684009696
    ],
    [
      0.5942294402537364,
      -0.6296406242645008,
      -0.5004438596001962
    ],
    [
      0.6035329203582585,
      -0.6244786560401988,
      -0.4957564141733913
    ],
    [
      0.6168234364142123,
      -0.5959250297511034,
      -0.5142005515422058
    ],
    [
      0.6039320865399943,
      -0.5921078962850218,
      -0.5335487550396635
    ],
    [
      0.6406791537947772,
      -0.593503470499336,
      -0.48711790400071714
    ],
    [
      0.6278557623907617,
      -0.5886615502159507,
      -0.5091902600502775
    ],
    [
      0.6176419739694254,
      -0.6253746784845816,
      -0.4768908716902198
    ],
    [
      0.6263410507936817,
      -0.6202673859910788,
      -0.4721919715184286
    ],
    [
      0.6406724972947401,
      -0.6213748654413598,
      -0.451034397588314
    ],
    [
      0.6489004464855073,
      -0.616156713711153,
      -0.4464068936514997
    ],
    [
      0.6630398980969997,
      -0.5904215343473207,
      -0.46019615959987725
    ],
    [
      0.6512008079437389,
      -0.5861764782002102,
      -0.4820110415106901
    ],
    [
      0.6848620813648205,
      -0.5836766130829862,
      -0.43621730920336
    ],
    [
      0.6748530597413607,
      -0.5819092534196136,
      -0.4538226179272595
    ],
    [
      0.6611774311319815,
      -0.6172563354125504,
      -0.4264258680647586
    ],
    [
      0.6726439635914628,
      -0.6091360866488997,
      -0.42012298935672515
    ],
    [
      0.6842566110031175,
      -0.61046199177141,
      -0.39890982301895156
    ],
    [
      0.6940306143748348,
      -0.6033380944070961,
      -0.392816305857717
    ],
    [
      0.7050512783726605,
      -0.577638385419682,
      -0.41138375096109486
    ],
    [
      0.6953492102160094,
      -0.5759963669657003,
      -0.42978792571951835
    ],
    [
      0.7053852236280224,
      -0.6034086816903648,
      -0.37192694060519577
    ],
    [
      0.7105964154960522,
      -0.599629278315163,
      -0.3680998001512616
    ],
    [
      0.7264375598030424,
      -0.5706880498990969,
      -0.3828885234761772
    ],
    [
      0.716613777580352,
      -0.5684505171291995,
      -0.40413946028266445
    ],
    [
      0.7347275394314224,
      -0.5639518721956528,
      -0.37700627136437087
    ],
    [
      0.7224028525793347,
      -0.5992338429551571,
      -0.34504046145696327
    ],
    [
      0.7305335689911657,
      -0.5929195554547176,
      -0.33877294067916575
    ],
    [
      0.7434686027448802,
      -0.5656555041335168,
      -0.35677484128793663
    ],
    [
      0.7535784959736178,
      -0.5566629831630856,
      -0.3496366307784617
    ],
    [
      0.7396573114139855,
      -0.5919603445818448,
      -0.32014061303492586
    ],
    [
      0.7447519974274357,
      -0.587792973358478,
      -0.31598082663073745
    ],
    [
      0.7625303691692682,
      -0.5589558904666683,
      -0.3257541229319952
    ],
    [
      0.7565199646632803,
      -0.5868534965645988,
      -0.28858363889135075
    ],
    [
      0.7605035218497369,
      -0.5832748416771422,
      -0.28535040269929773
    ],
    [
      0.7766841575978886,
      -0.5552161448076961,
      -0.29748403634705756
    ],
    [
      0.7683266531836525,
      -0.5538793626034973,
      -0.3207675259273466
    ],
    [
      0.7716293136682836,
      -0.5818419219887438,
      -0.2569984048671477
    ],
    [
      0.7718346695175795,
      -0.5816534533064559,
      -0.2568083004643019
    ],
    [
      0.7924383772323633,
      -0.5484801678662191,
      -0.26685374973341264
    ],
    [
      0.7843015585917786,
      -0.5482188785217237,
      -0.2903913332434192
    ],
    [
      0.8141871981078984,
      -0.5277970559101045,
      -0.24192865520610798
    ],
    [
      0.782958705209459,
      -0.5795646599270693,
      -0.226009891156002
    ],
    [
      0.7829268394910698,
      -0.5797502310410793,
      -0.22564404182769762
    ],
    [
      0.8023683558395197,
      -0.5738615886489421,
      -0.16397529881265127
    ],
    [
      0.8090995834163698,
      -0.5652398602384093,
      -0.16081593364191374
    ],
    [
      0.8155531102207396,
      -0.555621969444741,
      -0.1617323451868105
    ],
    [
      0.8198531019330706,
      -0.5449481012837454,
      -0.175705600815577
    ],
    [
      0.8209510183072491,
      -0.5190714916777464,
      -0.23791639722333147
    ],
    [
      0.23195175897167886,
      -0.6240029559014872,
      -0.7462028494559309
    ],
    [
      0.2645910561781544,
      -0.6281568162537783,
      -0.7317175597076004
    ],
    [
      0.31351368864840995,
      -0.6243739520407078,
      -0.7154483454751543
    ],
    [
      0.2710515759615431,
      -0.6351278373994172,
      -0.7232867158527821
    ],
    [
      0.3483201863818629,
      -0.6317966119844607,
      -0.6924637816116169
    ],
    [
      0.355740128324658,
      -0.6426894655268052,
      -0.6785272374786626
    ],
    [
      0.38190963177591497,
      -0.6344174842811977,
      -0.6720561649111636
    ],
    [
      0.4012947797522944,
      -0.6418324694914181,
      -0.6534627616399464
    ],
    [
      0.04593068787452792,
      -0.5242368145854952,
      -0.8503329548739281
    ],
    [
      0.04925299462381768,
      -0.5539024591941895,
      -0.8311234614780258
    ],
    [
      0.0697903384079015,
      -0.827834999023262,
      -0.5566134413190779
    ],
    [
      0.08155616414697323,
      -0.8549031996265821,
      -0.5123369119611274
    ],
    [
      0.16143839091701734,
      -0.8479837607212074,
      -0.5048377833435631
    ],
    [
      0.16267264187146246,
      -0.8472362758024607,
      -0.5056958617103127
    ],
    [
      0.18375610858653985,
      -0.8213604279263509,
      -0.5400006851789851
    ],
    [
      0.1802678647736548,
      -0.8086900277595331,
      -0.5599320815351025
    ],
    [
      0.09729611335487036,
      -0.8146784178537313,
      -0.5716926987546522
    ],
    [
      0.121697128118055,
      -0.7921686071399626,
      -0.5980457397806201
    ],
    [
      0.18900371350086012,
      -0.7970837977620365,
      -0.5735285656601016
    ],
    [
      0.18649679083409185,
      -0.7834628690299141,
      -0.592794129407504
    ],
    [
      0.19139509887317532,
      -0.7762905872781802,
      -0.6006170495670478
    ],
    [
      0.1891444955054573,
      -0.7607840799369727,
      -0.6208316547458257
    ],
    [
      0.12492503332564636,
      -0.7646547783389718,
      -0.6322157907012163
    ],
    [
      0.19737299500074143,
      -0.7484442234473185,
      -0.6331470170764272
    ],
    [
      0.19601564927696608,
      -0.7325949053422327,
      -0.6518301695266449
    ],
    [
      0.20547040550914647,
      -0.7178637986879173,
      -0.6651717665334723
    ],
    [
      0.20609366662141937,
      -0.69978514999978,
      -0.683978175396207
    ],
    [
      0.1907264598917193,
      -0.6935749625454766,
      -0.6946777589841301
    ],
    [
      0.20169442513756042,
      -0.643587442330398,
      -0.7383187407502574
    ],
    [
      0.018955614420833586,
      -0.6976903858754067,
      -0.716148595012903
    ],
    [
      0.003309223811013711,
      -0.6412309067541039,
      -0.767340845557617
    ],
    [
      0.03706750106967401,
      -0.6082993839840184,
      -0.7928416360214148
    ],
    [
      0.025305119483307534,
      -0.5803957831698446,
      -0.8139412668040601
    ],
    [
      0.8933903880286427,
      0.4138959437682269,
      0.17476773818482635
    ],
    [
      0.8940029617002552,
      0.41265367614060894,
      0.17457275858166868
    ],
    [
      0.8866605181865012,
      0.4285748272254944,
      0.17365696921771623
    ],
    [
      0.8826026826942461,
      0.4381007249943501,
      0.17052935014344212
    ],
    [
      0.8880647911826746,
      -0.23462082686892474,
      0.3953403524319452
    ],
    [
      0.8849229649981883,
      -0.22560888379475208,
      0.4074456743808934
    ],
    [
      0.8779515729969005,
      -0.2241691838637225,
      0.42302389114344435
    ],
    [
      0.8724564010672551,
      -0.20937908720164158,
      0.44156565319256924
    ],
    [
      0.8678232413108946,
      -0.20812031088338606,
      0.45118594618899155
    ],
    [
      0.8618340812135815,
      -0.19337573780887862,
      0.4688793453390901
    ],
    [
      0.8494433627985767,
      -0.17654280903420766,
      0.4972711634267133
    ],
    [
      0.8560826167352642,
      -0.19177676810958447,
      0.479941897042908
    ],
    [
      0.8443769574088983,
      -0.17515797621622647,
      0.5063074531988715
    ],
    [
      0.8357514878346052,
      -0.15646175661122025,
      0.526345104755782
    ],
    [
      0.8292344242330544,
      -0.15475651368406035,
      0.537048127395702
    ],
    [
      0.8210045180033974,
      -0.13803238073514704,
      0.5539843348747296
    ],
    [
      0.8158584115381938,
      -0.13632280586879286,
      0.5619529739421569
    ],
    [
      0.8059019042666107,
      -0.11693123191666493,
      0.5803871188283746
    ],
    [
      0.8002359271916208,
      -0.1149406844163964,
      0.5885669884538695
    ],
    [
      0.790255535099427,
      -0.09675370553042303,
      0.6050908276538742
    ],
    [
      0.8066570866147755,
      -0.06292390417238121,
      0.5876605541448799
    ],
    [
      0.7926569321885166,
      -0.03806183999019305,
      0.6084786637097889
    ],
    [
      0.7984579303894217,
      -0.039615379077604033,
      0.6007458323940159
    ],
    [
      0.78250879687827,
      -0.09391569539411274,
      0.6155159014735223
    ],
    [
      0.7720502867563379,
      -0.07549610889565016,
      0.6310615598030612
    ],
    [
      0.7585994956257471,
      -0.0696067325953565,
      0.647828455699316
    ],
    [
      0.755140670493629,
      -0.0638689248043117,
      0.6524441188414326
    ],
    [
      0.7738414635305229,
      -0.010221841841187733,
      0.6332968524083411
    ],
    [
      0.7836599552444083,
      -0.014751718061041266,
      0.6210148640415778
    ],
    [
      0.7316643244369249,
      -0.042699079182508044,
      0.680326469412461
    ],
    [
      0.7556712481324462,
      0.010679131063070234,
      0.6548640476508759
    ],
    [
      0.7678712133463138,
      0.003495295883151842,
      0.6405947101098705
    ],
    [
      0.7401038087526876,
      -0.05657342923749685,
      0.6701087966696717
    ],
    [
      0.7144348749947336,
      -0.0339263348732148,
      0.6988789689161707
    ],
    [
      0.7086679989477637,
      -0.024634555573489585,
      0.7051119102235255
    ],
    [
      0.7360482205764116,
      0.0346917575501035,
      0.6760395690670651
    ],
    [
      0.7482679788473646,
      0.026474644746181032,
      0.6628681052948945
    ],
    [
      0.7071912221715243,
      0.06507354183916733,
      0.7040213131973009
    ],
    [
      0.7218245841581352,
      0.06288859461858241,
      0.6892128077537697
    ],
    [
      0.6901508070294271,
      -0.013887190826305167,
      0.7235323140590089
    ],
    [
      0.6818916881712558,
      -0.01473995224621313,
      0.7313046283257985
    ],
    [
      0.6651063790713457,
      -0.004577517052946029,
      0.7467345919777879
    ],
    [
      0.6703712313984095,
      0.07996767029967126,
      0.7377042658275897
    ],
    [
      0.6947446110521569,
      0.07580112202403086,
      0.7152510855034653
    ],
    [
      0.643494617640527,
      -0.0074435286655846495,
      0.7654144439117128
    ],
    [
      0.6307760422427561,
      0.0004190239444704691,
      0.7759648245581102
    ],
    [
      0.6341402731203652,
      0.08771227547270219,
      0.7682269656411636
    ],
    [
      0.6694928702189514,
      0.08071751642267323,
      0.738419920687779
    ],
    [
      0.607190815004815,
      -0.002671761622815045,
      0.7945515564540915
    ],
    [
      0.5929889622268497,
      0.006659389611181068,
      0.8051830495031116
    ],
    [
      0.5943132356257725,
      0.07254671167762662,
      0.800954900468677
    ],
    [
      0.6234273196219987,
      0.09678019483464065,
      0.7758685269017549
    ],
    [
      0.548952113626835,
      0.011850538538105622,
      0.835769789882948
    ],
    [
      0.5534085082326046,
      0.07843357388018067,
      0.8292087779951111
    ],
    [
      0.5544652351938466,
      0.07928962101315493,
      0.8284210638081474
    ],
    [
      0.5629438046163421,
      0.0020296884930297117,
      0.8264926818845397
    ],
    [
      0.5037437384255885,
      0.01829522529633641,
      0.8636593835120235
    ],
    [
      0.5050985064359832,
      0.08038061573036102,
      0.8593104534514561
    ],
    [
      0.5101087883820082,
      0.08454397257558306,
      0.8559447065766448
    ],
    [
      0.5174479755910755,
      0.007703267809584911,
      0.855679994052538
    ],
    [
      0.46343756576302314,
      0.08886392195990593,
      0.8816625352216955
    ],
    [
      0.46481045186967174,
      0.012765434435368494,
      0.8853181843362238
    ],
    [
      0.45175655423124045,
      0.024429330784354768,
      0.8918067186933192
    ],
    [
      0.4506003462725526,
      0.07583511581231292,
      0.8894989393747408
    ],
    [
      0.3903630098106501,
      0.02892210259228445,
      0.9202066249235612
    ],
    [
      0.3888605561841094,
      0.0707364878008523,
      0.9185770610775043
    ],
    [
      0.40531174230182915,
      0.08778178667703335,
      0.9099542568063756
    ],
    [
      0.4026572943998102,
      0.015440060776008463,
      0.9152205787622226
    ],
    [
      0.30293079716822563,
      0.010426949628782576,
      0.9529555135726233
    ],
    [
      0.3123166331559153,
      0.05146449745563454,
      0.9485830096284629
    ],
    [
      0.3196448517960945,
      0.06103212014487014,
      0.9455698012473087
    ],
    [
      0.38291431328969777,
      0.07311261934168067,
      0.9208860806695244
    ],
    [
      0.33304847027788104,
      0.11549850324069362,
      0.9358091750964632
    ],
    [
      0.3438993611370027,
      0.11513030463057933,
      0.9319218005633474
    ],
    [
      0.2991550942308875,
      0.005514378054542046,
      0.9541885669145174
    ],
    [
      0.2432991513164639,
      0.04514806670534858,
      0.9688999819596746
    ],
    [
      0.24390524273095393,
      0.10556141014709955,
      0.9640368360473112
    ],
    [
      0.25412830113921525,
      0.13199395887136653,
      0.9581212874065372
    ],
    [
      0.09395463458362667,
      0.0589308138520349,
      0.9938308134783274
    ],
    [
      0.0939151525249778,
      0.05922948315138386,
      0.9938167901841013
    ],
    [
      0.17236794265193262,
      0.10870731591931881,
      0.9790158383864673
    ],
    [
      0.18715407983674254,
      0.08099968808027648,
      0.9789853936251348
    ],
    [
      0.18234574602857284,
      0.032868222235297055,
      0.9826849489395746
    ],
    [
      0.08655151091628205,
      0.07885634566634632,
      0.9931216001609563
    ],
    [
      0.17451808212296696,
      0.15900194073132554,
      0.9717313527183289
    ],
    [
      0.15644997549631862,
      0.20340668144891694,
      0.9665139042502907
    ],
    [
      0.1845926558483035,
      0.1915819902661865,
      0.9639615616882846
    ],
    [
      0.07423877495975638,
      0.09652071086295952,
      0.9925584903001856
    ],
    [
      0.05743105113788586,
      0.11047623831665934,
      0.9922180582576585
    ],
    [
      0.10159574062105349,
      0.19543287177288501,
      0.9754405661639579
    ],
    [
      0.14369002012835141,
      0.21177610978418773,
      0.9666975004830568
    ],
    [
      0.04313616465070916,
      0.19385898008047,
      0.9800805921664743
    ],
    [
      0.7068844404232832,
      0.14338885849883432,
      0.6926427817756156
    ],
    [
      0.697347379111393,
      0.15577282930450714,
      0.6996009280275005
    ],
    [
      0.6739374454862201,
      0.15546786820445627,
      0.7222451533430112
    ],
    [
      0.6880740911047577,
      0.16021405002750896,
      0.7077326496101084
    ],
    [
      0.6437926021472071,
      0.170331692003937,
      0.7460014746095371
    ],
    [
      0.6189232805046081,
      0.11545125271344515,
      0.7769201896567693
    ],
    [
      0.722707679647723,
      0.210430849873018,
      0.6583406923469972
    ],
    [
      0.6763117176021836,
      0.23863638285329983,
      0.6968896163759922
    ],
    [
      0.6843123542145866,
      0.23975478264283173,
      0.6886466772367226
    ],
    [
      0.6573788360481427,
      0.24643256593847584,
      0.712126432848106
    ],
    [
      0.6263912615207409,
      0.21693638346553515,
      0.7487139594126379
    ],
    [
      0.6408817652575218,
      0.24590297146931114,
      0.7271879341566153
    ],
    [
      0.44476054628188777,
      0.8919024753196769,
      -0.08184149919001991
    ],
    [
      0.4437443750575138,
      0.8939998328704951,
      -0.06209048584399585
    ],
    [
      0.422450985206773,
      0.9054293131620077,
      -0.041628403341970564
    ],
    [
      0.3842765784781502,
      0.922289163962979,
      -0.04140301039290828
    ],
    [
      0.33888787486563277,
      0.935613346557522,
      -0.09890740120177793
    ],
    [
      0.3571781583300885,
      0.9304602407736924,
      -0.08165478278269125
    ],
    [
      0.3163922855622869,
      0.9374031080635973,
      -0.1455037272009895
    ],
    [
      0.3173138260872099,
      0.9372852735856487,
      -0.14425065578142568
    ],
    [
      0.3340987510844755,
      0.9357417443274202,
      -0.11298412475596147
    ],
    [
      0.2897442363819295,
      0.9490963479902166,
      -0.12354917933797195
    ],
    [
      0.22731569480374633,
      0.969565464873872,
      -0.09094165283192643
    ],
    [
      0.1632930784073524,
      0.9824037655420019,
      -0.09065435451838735
    ],
    [
      0.02489565427690139,
      0.9958737719627287,
      -0.0872676154988304
    ],
    [
      0.04905591232643043,
      0.9914958619701655,
      -0.12053826430582139
    ],
    [
      0.05565443191623996,
      0.9908571666263739,
      -0.12290101526527376
    ],
    [
      -0.5090830983347566,
      0.7774649967282423,
      -0.3693001189442521
    ],
    [
      -0.5038372465658079,
      0.7573107722479552,
      -0.415485767758886
    ],
    [
      -0.4549598980208306,
      0.787761936856392,
      -0.41526211244603256
    ],
    [
      -0.5397860387164571,
      0.7733710705905038,
      -0.332457846321144
    ],
    [
      -0.5163853787780273,
      0.7745934112539286,
      -0.3651728191230497
    ],
    [
      -0.5595979806999025,
      0.7706084225469712,
      -0.304979932284503
    ],
    [
      -0.541254733129833,
      0.7727244406511385,
      -0.3315723943348397
    ],
    [
      -0.6116247713318204,
      0.7544574053865154,
      -0.23813685676674629
    ],
    [
      -0.5860166247030069,
      0.7567980092827034,
      -0.2895536024943092
    ],
    [
      -0.5610116610298586,
      0.769625804139656,
      -0.30486396604208066
    ],
    [
      -0.7468271679875759,
      0.609954982522117,
      -0.2649605639564144
    ],
    [
      -0.7360833208701372,
      0.624642269687706,
      -0.26077457632250467
    ],
    [
      -0.7260879939777956,
      0.6453257947884752,
      -0.237383326250863
    ],
    [
      -0.7605980958170298,
      0.5832631172785744,
      -0.2851222065395619
    ],
    [
      -0.7510417019212307,
      0.5965409983910458,
      -0.2829756159351468
    ],
    [
      -0.7693895198674584,
      0.5600080184287891,
      -0.3072959258004941
    ],
    [
      -0.7647267856070581,
      0.5675965065253267,
      -0.30500352318512874
    ],
    [
      -0.7719580397284246,
      0.5506179356833314,
      -0.31764866409678927
    ],
    [
      -0.7694481856742651,
      0.5479458485095793,
      -0.32818415053701017
    ],
    [
      -0.7743256600746082,
      0.5296837629093465,
      -0.3462006404676594
    ],
    [
      -0.7702556985162573,
      0.5274178760639671,
      -0.3585199337713405
    ],
    [
      -0.7740945288708541,
      0.5112185483207652,
      -0.3734076274328366
    ],
    [
      -0.7526099260291063,
      0.5011867173825358,
      -0.4270716257980402
    ],
    [
      -0.6326096705233404,
      0.7257367682440918,
      0.2703907320508082
    ],
    [
      -0.6480626975440945,
      0.7222291370955087,
      0.24166053377030447
    ],
    [
      -0.6486622120807608,
      0.7232345194310112,
      0.23700034709233733
    ],
    [
      -0.6612601823933089,
      0.7196135799315592,
      0.211875592646377
    ],
    [
      -0.6617626776567126,
      0.7202894340541768,
      0.20797425237401795
    ],
    [
      -0.6752118557166358,
      0.7155163133837716,
      0.17923547411545876
    ],
    [
      -0.6889259359133582,
      0.7036467686716333,
      0.17396056956641784
    ],
    [
      -0.8879831356641469,
      0.4529718595649737,
      0.07938794126515031
    ],
    [
      -0.9014987503013889,
      0.4268778237278873,
      0.07124132799419851
    ],
    [
      -0.9058334603461257,
      0.418546866965439,
      0.065454276184059
    ],
    [
      -0.6808069219460635,
      0.617788224727216,
      0.393496689209352
    ],
    [
      -0.683497705427553,
      0.6275442847026973,
      0.3728525947505933
    ],
    [
      -0.6908741764415575,
      0.5732918124342794,
      0.44048765036266196
    ],
    [
      -0.6947912154741206,
      0.5839978960049508,
      0.41977568338552523
    ],
    [
      -0.6876784129474127,
      0.6072849349593323,
      0.3978736082445871
    ],
    [
      -0.7007380354324984,
      0.5326874562573246,
      0.47456325146844613
    ],
    [
      -0.7033188674887971,
      0.5372886964805345,
      0.4654711884408355
    ],
    [
      -0.6976311903864405,
      0.5620685559851333,
      0.4442855619675089
    ],
    [
      -0.6890506703442278,
      0.5042668066060688,
      0.5205037573865225
    ],
    [
      -0.70302501450978,
      0.5213165716918269,
      0.48371981668420827
    ],
    [
      -0.7004596116408394,
      0.45556441361692784,
      0.5493791018102429
    ],
    [
      -0.7143520739940986,
      0.4598158344392389,
      0.5275135190488263
    ],
    [
      -0.6932201946306589,
      0.43943896762186413,
      0.5712610222058404
    ],
    [
      -0.6822229733543046,
      0.41301208643939935,
      0.6033181839482262
    ],
    [
      -0.6955982095337615,
      0.4274498936091584,
      0.5774337358926515
    ],
    [
      -0.6829661609606313,
      0.378083620309895,
      0.6249879991136311
    ],
    [
      -0.69102025255618,
      0.38068072769041744,
      0.6144698480172054
    ],
    [
      -0.6656112241558806,
      0.35419066053293097,
      0.6568947208411376
    ],
    [
      -0.6743985607182339,
      0.3560130922834331,
      0.6468703575091088
    ],
    [
      -0.6506277806729507,
      0.3309012388224317,
      0.6835114199209629
    ],
    [
      -0.6571094844653255,
      0.33261753258173066,
      0.6764412039822498
    ],
    [
      -0.6319047439125156,
      0.3058129079929955,
      0.7121621022813035
    ],
    [
      -0.6416018638234449,
      0.3080678595105191,
      0.7024537296326988
    ],
    [
      -0.6117667312767964,
      0.2784365098092205,
      0.7404151379517872
    ],
    [
      -0.622456994774736,
      0.2817375661544191,
      0.7301857527187096
    ],
    [
      -0.5949132824615495,
      0.24460887866961528,
      0.7656661693106324
    ],
    [
      -0.60061807055306,
      0.24884907260074207,
      0.7598237113902606
    ],
    [
      -0.5724262617771224,
      0.21519568407350156,
      0.7912136199434431
    ],
    [
      -0.5911290523454117,
      0.23120401448673955,
      0.772729672756541
    ],
    [
      -0.5467170783527037,
      0.18756380622496843,
      0.8160393708834679
    ],
    [
      -0.570594268409999,
      0.20827120479554131,
      0.7943835887722452
    ],
    [
      -0.54534713208754,
      0.1819360197639835,
      0.8182272240865214
    ],
    [
      -0.5174543958946362,
      0.1596747395709499,
      0.8406812271677454
    ],
    [
      -0.4819445637906085,
      0.12612382629332558,
      0.8670768235132404
    ],
    [
      -0.5157150195676032,
      0.15150984211133883,
      0.8432572480185294
    ],
    [
      -0.4480416582037255,
      0.08638611044246951,
      0.8898292602722601
    ],
    [
      -0.4777159561859641,
      0.10390667814515198,
      0.8723479050483068
    ],
    [
      -0.41989565046919225,
      0.0907272106814527,
      0.9030261435634171
    ],
    [
      -0.04915707489487758,
      0.43683400539632555,
      0.8981979924922914
    ],
    [
      -0.07460390514007681,
      0.34553672236728517,
      0.9354349955146665
    ],
    [
      -0.09944240635432242,
      0.3809482719011565,
      0.9192331706123231
    ],
    [
      -0.09810902042736569,
      0.42399065028732696,
      0.9003369083735889
    ],
    [
      -0.07708432689256244,
      0.3383974564125405,
      0.9378406943831363
    ],
    [
      -0.03197889977049196,
      0.2433174690193068,
      0.9694193928530146
    ],
    [
      -0.05069082226940853,
      0.222530908823155,
      0.9736069202486145
    ],
    [
      -0.12731418931759134,
      0.27937976104662027,
      0.9517027089989488
    ],
    [
      -0.14490245703681456,
      0.2927177152621981,
      0.9451558692175449
    ],
    [
      0.24418319983761433,
      0.3892640186182759,
      0.8881712046256702
    ],
    [
      0.24151788425254722,
      0.38797390457893305,
      0.8894635242391619
    ],
    [
      0.20841902348485913,
      0.40358142014564913,
      0.8908891894971219
    ],
    [
      0.18732167155135274,
      0.398266501881657,
      0.8979389649893557
    ],
    [
      0.1905206026173768,
      0.37145074077314943,
      0.9086948041875171
    ],
    [
      0.17351985320448562,
      0.3447630508954215,
      0.922512492750735
    ],
    [
      0.1576672267840528,
      0.34554110092888884,
      0.9250634535895781
    ],
    [
      0.11528512782012562,
      0.30619344896030776,
      0.944962915207411
    ],
    [
      0.12716818824617526,
      0.27221247410123633,
      0.953796949482367
    ],
    [
      0.12662097484959398,
      0.2442082483671246,
      0.9614205428206739
    ],
    [
      0.05693149572015528,
      0.2558568149053788,
      0.9650368361163943
    ],
    [
      0.05366505135298088,
      0.25816839982311995,
      0.9646082829812584
    ],
    [
      0.02563584542981544,
      0.2624379237706414,
      0.9646082829812596
    ],
    [
      -0.12634386065704728,
      0.35900220832283924,
      0.9247457181807318
    ],
    [
      -0.10294780034386086,
      0.4268137668112925,
      0.8984607720233067
    ],
    [
      -0.2275740432801755,
      0.33459666051194753,
      0.9144698625976503
    ],
    [
      -0.2015807593825694,
      0.36599894973003055,
      0.9085207571889931
    ],
    [
      -0.1669959085865119,
      0.48526795049987,
      0.8582699940770511
    ],
    [
      0.09228461419742869,
      0.4780963119939521,
      0.8734457432721355
    ],
    [
      0.125552351884895,
      0.5189597698516624,
      0.8455278612864754
    ],
    [
      0.037901489938992346,
      0.494511849575151,
      0.8683441182447013
    ],
    [
      -0.01365429203832861,
      0.4947066019002439,
      0.8689527825752361
    ],
    [
      0.03516103252137686,
      0.4962219234784751,
      0.8674834318022178
    ],
    [
      0.3658371071171826,
      0.46819807511054207,
      0.8043343667399239
    ],
    [
      0.2813035369485201,
      0.40435957553594415,
      0.870265277816278
    ],
    [
      0.31723296210278196,
      0.40598560250561677,
      0.85705247115544
    ],
    [
      0.27406296756105253,
      0.3857527336433005,
      0.8809564792305863
    ],
    [
      0.2323313886473621,
      0.362276500571117,
      0.9026504655641262
    ],
    [
      -0.16459184178499253,
      -0.03279090512259715,
      0.9858165560382239
    ],
    [
      -0.23938208302614844,
      0.01922416149242903,
      0.9707351080191625
    ],
    [
      -0.22355971569179028,
      0.05602127445433772,
      0.9730789640765634
    ],
    [
      -0.37461637350891935,
      0.055625378802970527,
      0.9255098000194552
    ],
    [
      -0.297954302728644,
      0.011618156165738348,
      0.9545094299863129
    ],
    [
      -0.3167820280238325,
      0.00799947847718808,
      0.9484646303712125
    ],
    [
      -0.3258513390657712,
      0.008842459751461166,
      0.9453796675064403
    ],
    [
      -0.282054162019222,
      0.005344452640193281,
      0.9593835971672703
    ],
    [
      -0.4011719449792188,
      0.06109379652407763,
      0.9139631385279524
    ],
    [
      -0.35944152377873845,
      -0.4208408558862985,
      0.8328834042052383
    ],
    [
      -0.3084958671792369,
      -0.39977396339702137,
      0.863140242442193
    ],
    [
      -0.30168287376504294,
      -0.4377887898614223,
      0.8469524302748865
    ],
    [
      -0.34126656994256827,
      -0.4504549466630478,
      0.8250014965237487
    ],
    [
      -0.35441902924496566,
      -0.43979752253779064,
      0.8252062111246362
    ],
    [
      -0.2673006087287501,
      -0.3986930426600595,
      0.8772652063701738
    ],
    [
      -0.1969901823912261,
      -0.34147769513547455,
      0.9190146091148037
    ],
    [
      -0.22538358793198865,
      -0.3664543330533189,
      0.9027255729607702
    ],
    [
      -0.1778356517291579,
      -0.34460280661905635,
      0.9217501758309216
    ],
    [
      -0.12477088247770085,
      -0.1321197963943298,
      0.9833496765070178
    ],
    [
      -0.12233101944474127,
      -0.10102422013403851,
      0.9873344056741463
    ],
    [
      -0.09073992080736927,
      -0.09195740488354985,
      0.9916199385142249
    ],
    [
      -0.052662751841310224,
      -0.10774022011073099,
      0.992783299385617
    ],
    [
      -0.07970788165638949,
      -0.1630705653228259,
      0.9833893655755817
    ],
    [
      -0.10308837430588783,
      -0.16240213229614706,
      0.9813247854347886
    ],
    [
      -0.05529217161280365,
      -0.17475283451254264,
      0.983058605876665
    ],
    [
      0.0426557240682659,
      -0.1426267731172314,
      0.9888569627576972
    ],
    [
      0.02919006135822006,
      -0.1741007138104127,
      0.9842951192445324
    ],
    [
      0.15449826656363072,
      -0.05276335742071814,
      0.986583150952076
    ],
    [
      0.1560599736821269,
      -0.07696506573664191,
      0.9847444659760665
    ],
    [
      0.14288497427005312,
      -0.14907234431414149,
      0.9784484249507136
    ],
    [
      -0.35364187864101276,
      -0.09224435113789987,
      0.9308213584541359
    ],
    [
      -0.3834874419202146,
      -0.08004249646261329,
      0.9200709650073317
    ],
    [
      -0.40776497159377356,
      -0.03559283560861356,
      0.9123929405658876
    ],
    [
      -0.3461042350586414,
      -0.08596781865183142,
      0.9342491063044794
    ],
    [
      -0.4152357419060148,
      -0.1322860333219586,
      0.900044267817813
    ],
    [
      -0.44453614818742176,
      -0.12084974475501616,
      0.8875713786210876
    ],
    [
      -0.4656703664048154,
      -0.07810303366697924,
      0.8815049778557236
    ],
    [
      -0.44962627429348806,
      -0.029213285726450412,
      0.8927389301481267
    ],
    [
      -0.42632605055854744,
      -0.026811500799135874,
      0.9041721307583246
    ],
    [
      -0.5077414784357795,
      -0.1200904387892888,
      0.8530983985374986
    ],
    [
      -0.4947282604750941,
      -0.0930006870117623,
      0.86405718589838
    ],
    [
      -0.47340981943319527,
      -0.15604190661460468,
      0.8669106449019462
    ],
    [
      -0.4710102505582575,
      -0.18632063199280788,
      0.862226168683628
    ],
    [
      -0.47351459612114455,
      -0.19205818815100956,
      0.8595915190509855
    ],
    [
      -0.482591444556459,
      -0.19781533756301448,
      0.8532142696097743
    ],
    [
      -0.5315786442406462,
      -0.17914687946157543,
      0.827846930637818
    ],
    [
      -0.5330688625827635,
      -0.1540612427384437,
      0.8319271129315386
    ],
    [
      -0.5143672113985446,
      -0.1224650651947468,
      0.848780701739225
    ],
    [
      -0.4880478223909617,
      -0.237925885725394,
      0.8397622258480236
    ],
    [
      -0.5147933401050463,
      -0.2594595929566328,
      0.8171098681366348
    ],
    [
      -0.5616132390048384,
      -0.23473877683431815,
      0.7934029722813133
    ],
    [
      -0.5684846014266115,
      -0.21308312511270347,
      0.7946199341402345
    ],
    [
      -0.5653625431822364,
      -0.2850729761131026,
      0.7740145948601566
    ],
    [
      -0.5642169195563833,
      -0.24262120686293764,
      0.7891731227472698
    ],
    [
      -0.5092799773331136,
      -0.27479509929373974,
      0.8155498501573812
    ],
    [
      -0.5218617305921446,
      -0.3166053416595189,
      0.7920993572627308
    ],
    [
      -0.5295953610398165,
      -0.3199424371806987,
      0.7855988737619098
    ],
    [
      -0.5344242852015081,
      -0.3414095505618569,
      0.7731948022148157
    ],
    [
      -0.5837295182529406,
      -0.329636615318104,
      0.7420239560565509
    ],
    [
      -0.5827509261826586,
      -0.3034988094452134,
      0.7538500054378137
    ],
    [
      -0.5318504156018169,
      -0.3490911024485955,
      0.7715377745874785
    ],
    [
      -0.5475419312852103,
      -0.3782030932573319,
      0.7464316805542541
    ],
    [
      -0.5886435682179503,
      -0.3508178347996157,
      0.7283032310666684
    ],
    [
      -0.5887579801540771,
      -0.3378709590190398,
      0.734307330656889
    ],
    [
      -0.5448730139999554,
      -0.3854378662066484,
      0.7446818447556448
    ],
    [
      -0.5602977720593884,
      -0.4103935254629737,
      0.7194745032892808
    ],
    [
      -0.5958000528156421,
      -0.38269397038499714,
      0.7060932106286287
    ],
    [
      -0.5997187719581203,
      -0.3687403073988231,
      0.7101886934191965
    ],
    [
      -0.5892622306784433,
      -0.4270550183939576,
      0.6858527792175239
    ],
    [
      -0.5979617400076918,
      -0.3899575942597826,
      0.7002676860787569
    ],
    [
      -0.5588807121879953,
      -0.414386416045945,
      0.7182870232301541
    ],
    [
      -0.5766493182512739,
      -0.43740330068552363,
      0.6900390686836149
    ],
    [
      -0.573032796816129,
      -0.44642479378752076,
      0.6872687372963029
    ],
    [
      -0.5849981696534187,
      -0.46680242055284815,
      0.6632289511685628
    ],
    [
      -0.6308792224936041,
      -0.43091684106528527,
      0.6452147570477456
    ],
    [
      -0.5739544987939241,
      -0.4956788103996055,
      0.6518272395620233
    ],
    [
      -0.6584171992832882,
      -0.4612709548062906,
      0.5947401936476496
    ],
    [
      -0.6484474587498685,
      -0.4231981099650641,
      0.6327868937982479
    ],
    [
      -0.5723622762639939,
      -0.5186003480410506,
      0.6351811581915829
    ],
    [
      -0.5871759771770739,
      -0.5362520990596451,
      0.6063481327424642
    ],
    [
      -0.6034889024589212,
      -0.5381557514642311,
      0.5883787315793251
    ],
    [
      -0.6741406179758748,
      -0.48634555017227055,
      0.5558798728347135
    ],
    [
      -0.5734579668158168,
      -0.49626808195728395,
      0.6518158874451497
    ],
    [
      0.528897903880855,
      -0.59380452286645,
      0.6063523694138462
    ],
    [
      0.5078474938321759,
      -0.6367627178610714,
      0.5801932127753303
    ],
    [
      0.530208690228645,
      -0.5560480066288437,
      0.6400698080132464
    ],
    [
      0.532133049042002,
      -0.5581003206488585,
      0.6366776658631145
    ],
    [
      0.5329240447850809,
      -0.5902212779331462,
      0.6063256596622585
    ],
    [
      0.5206793177998752,
      -0.5275124741440026,
      0.6712850643638137
    ],
    [
      0.5306560528919354,
      -0.5395888899241141,
      0.6536420912086474
    ],
    [
      0.5140295300800074,
      -0.50504592733068,
      0.6933269455981214
    ],
    [
      0.5209094682583402,
      -0.5142384340284298,
      0.6813311667954149
    ],
    [
      0.5066467756290284,
      -0.4757157847855917,
      0.7190295799551905
    ],
    [
      0.5143102022624378,
      -0.48429361270516236,
      0.707774478588874
    ],
    [
      0.506126914014147,
      -0.4273701179291547,
      0.7491263773301116
    ],
    [
      0.4906293360984012,
      -0.3941206455010094,
      0.7771433402851173
    ],
    [
      0.5111620228918412,
      -0.4156941101404101,
      0.752271090198004
    ],
    [
      0.47699278608936463,
      -0.3547007286543103,
      0.8041550068928297
    ],
    [
      0.48406388615431273,
      -0.35795830634712267,
      0.798466032488724
    ],
    [
      0.4198006671288056,
      -0.337689377521405,
      0.8424566957342174
    ],
    [
      0.47647869820570615,
      -0.35386384605662263,
      0.8048281981952488
    ],
    [
      0.39026707213578044,
      -0.29881940803598456,
      0.8708608234313847
    ],
    [
      0.4265515952830818,
      -0.3053352550223923,
      0.8513660309184697
    ],
    [
      0.3617824567879789,
      -0.22134574935791096,
      0.9056045015356533
    ],
    [
      0.3791031188653844,
      -0.21510587524112623,
      0.9000057153725677
    ],
    [
      0.4032865884930915,
      -0.22550744314691132,
      0.886851915838798
    ],
    [
      0.262791642260699,
      -0.22233589452279512,
      0.9388862033093646
    ],
    [
      0.2609025390725689,
      -0.1720744907897251,
      0.9499053819854605
    ],
    [
      0.3275401889232818,
      -0.17811235771976036,
      0.9278973071776904
    ],
    [
      0.16133660083746157,
      -0.16237768728310767,
      0.9734495302288675
    ],
    [
      0.21756225783876434,
      -0.10299412148697568,
      0.9705971743742227
    ],
    [
      0.20187642614993878,
      -0.15083466354916894,
      0.9677266209198429
    ],
    [
      0.296802557495843,
      -0.110285503483709,
      0.9485490760025396
    ],
    [
      0.3338378093717344,
      -0.12433931006711058,
      0.934393949576899
    ],
    [
      0.26061065077804946,
      -0.17124181328395055,
      0.9501359534741679
    ],
    [
      0.23344772205499975,
      -0.07972572037087616,
      0.9690954393550082
    ],
    [
      0.2779405823083275,
      -0.05024492182106678,
      0.959283316094522
    ],
    [
      0.2810968967785604,
      -0.05594092067945093,
      0.9580475708517813
    ],
    [
      0.36644648702728866,
      -0.12243909174120733,
      0.9223478958391716
    ],
    [
      0.38507977308043106,
      -0.16563964624970384,
      0.9078970624220549
    ],
    [
      0.27794904139904364,
      -0.049729084775285835,
      0.9593077444244704
    ],
    [
      0.39328952115371624,
      -0.07826830590828392,
      0.9160771937129141
    ],
    [
      0.4051284778768354,
      -0.0671912906365691,
      0.9117873912682664
    ],
    [
      0.2983281873813679,
      -0.004932178143671499,
      0.9544506096349389
    ],
    [
      0.3968281481334575,
      -0.04591826190358427,
      0.9167436577761117
    ],
    [
      0.5191609785677357,
      -0.6603733266303797,
      0.5425669984506216
    ],
    [
      0.5152003009824542,
      -0.6933879542948778,
      0.5037675998973664
    ],
    [
      0.15336945864289597,
      -0.20169226931842144,
      0.967366547722615
    ],
    [
      0.16138526727373428,
      -0.17058329165427696,
      0.972037106346963
    ],
    [
      0.11603366113153703,
      -0.372720975563828,
      0.9206602325826613
    ],
    [
      0.11014700163592396,
      -0.38971107312967307,
      0.9143264829975857
    ],
    [
      0.14725715498349626,
      -0.43157136092602644,
      0.8899783653182947
    ],
    [
      0.17505783727650115,
      -0.4821293278638241,
      0.8584323297859018
    ],
    [
      0.14557296084968932,
      -0.43999583561669814,
      0.886121988052107
    ],
    [
      0.2004861056246125,
      -0.5373175228510856,
      0.8192040045609212
    ],
    [
      0.17213077675793304,
      -0.49335625773085734,
      0.8526257084151958
    ],
    [
      0.030036125174510316,
      -0.21188099402681182,
      0.9768338013985344
    ],
    [
      0.037305598911793546,
      -0.3785267442912221,
      0.9248382540456035
    ],
    [
      -0.12457201928898014,
      -0.3778588809992164,
      0.9174445367760854
    ],
    [
      -0.12619356615592772,
      -0.37939157266975804,
      0.9165899947348417
    ],
    [
      -0.02125489817243819,
      -0.4168259507798256,
      0.9087377817941619
    ],
    [
      -0.08722576917920463,
      -0.4329658500783501,
      0.8971801590856922
    ],
    [
      -0.12151309982588387,
      -0.4098878090441152,
      0.904005835472161
    ],
    [
      -0.12690551720539733,
      -0.3959696213838438,
      0.9094520595633208
    ],
    [
      0.0010864907903103955,
      -0.4407876776153227,
      0.897610741246033
    ],
    [
      -0.004154776724398542,
      -0.4638686187077918,
      0.8858942614152637
    ],
    [
      -0.06640260282511805,
      -0.4858214534992638,
      0.8715321047775074
    ],
    [
      0.019692596615303593,
      -0.49906120124308284,
      0.8663429569473963
    ],
    [
      -0.04493312204506462,
      -0.5326917531181062,
      0.8451156788885424
    ],
    [
      -0.05040194690885049,
      -0.5283200956721652,
      0.8475479456979125
    ],
    [
      -0.06652487237020133,
      -0.48627794885492226,
      0.871268154940589
    ],
    [
      0.02139757139561825,
      -0.49513010563757753,
      0.8685553076400436
    ],
    [
      0.0384314722264451,
      -0.5446241250468232,
      0.8377992506319699
    ],
    [
      0.0335679271605443,
      -0.5500876731003197,
      0.8344319901401313
    ],
    [
      -0.03266626260173556,
      -0.5597344437536336,
      0.8280279389993099
    ],
    [
      0.049049569731845766,
      -0.5912692115241994,
      0.8049812787963906
    ],
    [
      0.04800335589421739,
      -0.5926912893373253,
      0.8039979560711283
    ],
    [
      -0.021883446157780307,
      -0.6062448677758444,
      0.7949769022303154
    ],
    [
      -0.035230917859654834,
      -0.5705057605902911,
      0.820537603989031
    ],
    [
      -0.015594036191804838,
      -0.6394382343598858,
      0.7686843113228997
    ],
    [
      -0.024235768391348052,
      -0.6146818770068776,
      0.7884027001537874
    ],
    [
      0.06357839021777348,
      -0.6359514728417189,
      0.769105657558027
    ],
    [
      0.08788931742863892,
      -0.648561620371291,
      0.7560709572938862
    ],
    [
      0.08853965759799483,
      -0.6650799216726928,
      0.7415048393775152
    ],
    [
      -0.00960846844044342,
      -0.6812452540987317,
      0.7319922001648538
    ],
    [
      -0.018859196548229255,
      -0.6716207154064415,
      0.7406550785233941
    ],
    [
      -0.02233362775215094,
      -0.6607882061297399,
      0.7502400653865859
    ],
    [
      0.09051698039830437,
      -0.6866320846934636,
      0.7213480827790986
    ],
    [
      0.0654867228086497,
      -0.7060535012507358,
      0.7051240617844212
    ],
    [
      -0.002095998716143408,
      -0.7095458132902555,
      0.7046561896639041
    ],
    [
      -0.004105163443369453,
      -0.7074474067994576,
      0.7067540691399137
    ],
    [
      0.08883068231736992,
      -0.6655163474919413,
      0.7410783366824428
    ],
    [
      0.02842916545842832,
      -0.7580491295296077,
      0.6515775470124345
    ],
    [
      0.007894866106982718,
      -0.7632731220787874,
      0.6460277178273803
    ],
    [
      0.006978867585949588,
      -0.7632285611881664,
      0.6460909059829422
    ],
    [
      0.06438963607763383,
      -0.734973353570561,
      0.6750319579894222
    ],
    [
      -0.20009970110237937,
      -0.16262888749212376,
      0.9661842239303086
    ],
    [
      -0.19840817294245458,
      -0.16091044342095887,
      0.9668205759641793
    ],
    [
      0.21182764022116446,
      -0.9258538208805613,
      0.31292771241805734
    ],
    [
      0.1582236393686665,
      -0.9483609193195119,
      0.27491243451758307
    ],
    [
      0.11087923031875609,
      -0.9289295558401202,
      0.3532643154503398
    ],
    [
      0.11437201927703959,
      -0.9244315061415993,
      0.363793116563888
    ],
    [
      0.11883259381682838,
      -0.9216184829497194,
      0.369456609809897
    ],
    [
      0.18981955068033832,
      -0.9137663526727435,
      0.35916513041032483
    ],
    [
      0.1348357608340796,
      -0.9039047666407012,
      0.40592547400294343
    ],
    [
      0.1944402994079128,
      -0.9020418473194898,
      0.38537446159625505
    ],
    [
      0.12755913754788994,
      -0.9085771146388006,
      0.39776411751523066
    ],
    [
      0.14703441002555617,
      -0.8889890357504848,
      0.43368119233356184
    ],
    [
      0.14109834469729166,
      -0.8929563210705528,
      0.4274579111255611
    ],
    [
      0.16162484133516059,
      -0.8718247148058663,
      0.4623841231238958
    ],
    [
      0.1525323803756414,
      -0.8780107858112949,
      0.45368594086214864
    ],
    [
      0.16627800084224245,
      -0.8602988818030148,
      0.48191022027384883
    ],
    [
      0.17870931345311933,
      -0.8516293965755409,
      0.49273760986299264
    ],
    [
      0.18245863211389782,
      -0.8415246283161494,
      0.5084733498468645
    ],
    [
      0.19183345403974947,
      -0.8346537595721581,
      0.5162877371614025
    ],
    [
      0.2011184125927711,
      -0.8173423336178316,
      0.5399100793579622
    ],
    [
      0.1961921109940109,
      -0.8210505568647439,
      0.5360826789365681
    ],
    [
      0.2059600701071198,
      -0.7967510245431925,
      0.5681269703251584
    ],
    [
      0.2117318292774891,
      -0.7924137671938534,
      0.572057736624944
    ],
    [
      0.21688451227973465,
      -0.7725784947440804,
      0.5967273898457759
    ],
    [
      0.21781215334930787,
      -0.7718347543964879,
      0.5973516366086653
    ],
    [
      0.22382030445538734,
      -0.7475372695858464,
      0.6253738896801139
    ],
    [
      0.2215093439078701,
      -0.7451238380327881,
      0.6290660351320775
    ],
    [
      0.2278656624842566,
      -0.7191880608955503,
      0.6563884314382065
    ],
    [
      0.22626301296766116,
      -0.7172315850462386,
      0.6590780700151205
    ],
    [
      0.23266267485718617,
      -0.6930290577214316,
      0.6823333531947884
    ],
    [
      0.22582214740474235,
      -0.6850046986649184,
      0.6926564231626638
    ],
    [
      0.23144895757881823,
      -0.663919710045539,
      0.7110850853791871
    ],
    [
      0.20720333844206368,
      -0.6358371206996841,
      0.7434903714768597
    ],
    [
      0.19789271417548113,
      -0.6326483891517664,
      0.7487285819173305
    ],
    [
      0.1892743536099731,
      -0.6145078763063238,
      0.7658689764072042
    ],
    [
      0.0547240624543353,
      0.5605971923543012,
      0.8262784427255553
    ],
    [
      0.9043347579327704,
      -0.27437832436648674,
      -0.32694828446180396
    ],
    [
      0.8642707515801633,
      -0.39289227262126675,
      -0.31412056614866185
    ],
    [
      0.8960126548107697,
      -0.3673011841727815,
      -0.24950182869916757
    ],
    [
      0.9095141768252423,
      -0.34843678060175415,
      -0.22666224228527151
    ],
    [
      0.8174880356375349,
      -0.5756704442529181,
      -0.017800314691942667
    ],
    [
      0.8098170222150942,
      -0.5865584495878545,
      -0.012065477519348845
    ],
    [
      0.8269093452599041,
      -0.5608358763804764,
      -0.0410372329279104
    ],
    [
      0.8331224719046462,
      -0.5489552124725384,
      -0.06749164027286854
    ],
    [
      0.8272134004731043,
      -0.5595717383291692,
      -0.050965279759806914
    ],
    [
      0.8366511429433645,
      -0.540318770152513,
      -0.08983591504758788
    ],
    [
      0.8333382276445448,
      -0.5470170512934897,
      -0.07949681717166138
    ],
    [
      0.8363624137012902,
      -0.5364526736284653,
      -0.11276720225590152
    ],
    [
      0.8264975858368385,
      -0.5441408483742318,
      -0.14426530330072096
    ],
    [
      0.8241707170947874,
      -0.5124003236990827,
      -0.24122300337351604
    ],
    [
      0.4368953558223277,
      -0.8667029651644805,
      0.24072477694657649
    ],
    [
      0.45410315814630764,
      -0.8584189673773664,
      0.238552296589921
    ],
    [
      0.4820261432004542,
      -0.8467424904608246,
      0.2251176406226208
    ],
    [
      0.46724275911912516,
      -0.8544332908137507,
      0.22721785933313363
    ],
    [
      0.5113538206818639,
      -0.8359344713775292,
      0.19932593819378105
    ],
    [
      0.5326001950521388,
      -0.8231341853796222,
      0.19694452287344633
    ],
    [
      0.5156854055103637,
      -0.8350632751343117,
      0.1916713047526124
    ],
    [
      0.586949136151812,
      -0.7868046078578633,
      0.19086440376423125
    ],
    [
      0.5764025672226581,
      -0.7952219316394733,
      0.18810146181971568
    ],
    [
      0.6255123049474045,
      -0.7662920165586998,
      0.14673411913316753
    ],
    [
      0.6186645225810611,
      -0.7714770528253627,
      0.14858453978607733
    ],
    [
      0.5989631575449637,
      -0.783141304109101,
      0.16713118710182012
    ],
    [
      0.647491517583827,
      -0.7512534731007325,
      0.12795684354921982
    ],
    [
      0.6430444337563817,
      -0.7548466127099386,
      0.12923021123277076
    ],
    [
      0.6690897106797208,
      -0.7356617152938166,
      0.10545520240124184
    ],
    [
      0.6916841983135829,
      -0.7160886521405228,
      0.09375506428383285
    ],
    [
      0.6713183513480108,
      -0.7343721178976546,
      0.10014621110108064
    ],
    [
      0.7192205144307405,
      -0.6910343645787663,
      0.07206496092555315
    ],
    [
      0.7068706937490191,
      -0.7031588129768743,
      0.07682126041489658
    ],
    [
      0.7425353437085124,
      -0.6686563356078187,
      0.03924242850800016
    ],
    [
      0.7221723386611401,
      -0.6887310480876504,
      0.06416117730205917
    ],
    [
      0.7592855593201416,
      -0.650467025546746,
      0.01944448724622205
    ],
    [
      0.747119124893994,
      -0.6642549597164231,
      0.024049151955225844
    ],
    [
      0.7746601572771593,
      -0.6323762057698306,
      -0.0014053837482323648
    ],
    [
      0.7900677375422002,
      -0.612452933564714,
      -0.026350982200387358
    ],
    [
      0.7756599618320913,
      -0.6311273952370428,
      -0.005462105083611575
    ],
    [
      0.7687162909516734,
      -0.5566361894796741,
      0.31501018489415655
    ],
    [
      0.7783023882958399,
      -0.5504572561200144,
      0.30206324099071796
    ],
    [
      0.7704485108586128,
      -0.5472085718777567,
      0.3270655453869333
    ],
    [
      0.7618871322319923,
      -0.539475727988151,
      0.35846050919308386
    ],
    [
      0.7223850436673059,
      -0.555464190921686,
      0.4118487359328681
    ],
    [
      0.701032186501866,
      -0.567631884759551,
      0.4316803411006028
    ],
    [
      0.8462597693563157,
      -0.38094446438502483,
      0.3724590149578901
    ],
    [
      0.8349365695109565,
      -0.37371750099654283,
      0.4040001910174977
    ],
    [
      0.8366260761557957,
      -0.37297262024787,
      0.4011835405915789
    ],
    [
      0.8224539602356936,
      -0.3661721971300115,
      0.4353015108423171
    ],
    [
      0.8241959960071628,
      -0.3655119195546526,
      0.4325528832746743
    ],
    [
      0.8116359419503708,
      -0.35815432593292,
      0.46148951943665006
    ],
    [
      0.7997202559834836,
      -0.3437400789871654,
      0.4922298957475142
    ],
    [
      0.8105649921664252,
      -0.3519055901547379,
      0.46813123063099377
    ],
    [
      0.788102894318462,
      -0.3312634107444534,
      0.51880476160962
    ],
    [
      0.7987828344680188,
      -0.33929954018374825,
      0.49681163974924625
    ],
    [
      0.7729111030090565,
      -0.3134605823722279,
      0.5516800613980781
    ],
    [
      0.786287335703962,
      -0.3230033758006373,
      0.5267077414780963
    ],
    [
      0.7577094939213659,
      -0.2968092754783706,
      0.5811889338342844
    ],
    [
      0.7712518303500133,
      -0.30677241551527595,
      0.5577286968237131
    ],
    [
      0.7353179415188434,
      -0.27922733985331066,
      0.6175270176752873
    ],
    [
      0.7374666645944007,
      -0.27890998315822213,
      0.615103357092684
    ],
    [
      0.7566054742977293,
      -0.2927712235686193,
      0.5846650040089979
    ],
    [
      0.7189111509430496,
      -0.2672781619206313,
      0.6416612355519605
    ],
    [
      0.6627280964340501,
      -0.25321118407999454,
      0.7047521312161513
    ],
    [
      0.6971751577339946,
      -0.2492345468442742,
      0.6721822223905576
    ],
    [
      0.7178417815939973,
      -0.26410452068742607,
      0.6441676635398743
    ],
    [
      0.5956235410548615,
      -0.3019190044316452,
      0.7443638304648286
    ],
    [
      0.5675806870857311,
      -0.2624478211492687,
      0.7803674165553627
    ],
    [
      0.6240548708726991,
      -0.21605818218084896,
      0.7509156943710565
    ],
    [
      0.6453184204945915,
      -0.23210572923721656,
      0.7277987816873738
    ],
    [
      0.6948081601369859,
      -0.5731591043013645,
      0.43443096317310753
    ],
    [
      0.6850863691368858,
      -0.564967702170025,
      0.4598566758540758
    ],
    [
      0.6774368737619691,
      -0.5509622016832741,
      0.4873601690576786
    ],
    [
      0.6629105334245475,
      -0.5397414559104194,
      0.5188726100368786
    ],
    [
      0.6660388656086642,
      -0.5024994713156394,
      0.5512590233512978
    ],
    [
      0.65710449956097,
      -0.5380716831928529,
      0.527913383428321
    ],
    [
      0.66286695514713,
      -0.46978960167973194,
      0.583013833392975
    ],
    [
      0.6435742245348072,
      -0.4567722119031996,
      0.6141427879145698
    ],
    [
      0.6068335085052388,
      -0.4651891894955094,
      0.6444781694764635
    ],
    [
      0.6017663851753738,
      -0.4680727195713252,
      0.6471361115453743
    ],
    [
      0.5960198505016294,
      -0.4640931901954945,
      0.6552692947347555
    ],
    [
      0.5869936796729406,
      -0.4460328397145111,
      0.6756427502165849
    ],
    [
      0.629182077059241,
      -0.3830943180442757,
      0.6762903647026258
    ],
    [
      0.6054279969553102,
      -0.3709753423733074,
      0.70415497999637
    ],
    [
      0.576276939674024,
      -0.4396803396790257,
      0.6889020886161383
    ],
    [
      0.557359182932579,
      -0.3995754315584552,
      0.7277981970955976
    ],
    [
      0.5584471032029348,
      -0.3976334552158241,
      0.7280277935747892
    ],
    [
      0.5643109926442927,
      -0.3408038573631697,
      0.7519347274778557
    ],
    [
      0.5704604798992503,
      -0.6331059918480256,
      0.5232128094372737
    ],
    [
      0.5749511856435573,
      -0.644954556482802,
      0.5034528321492887
    ],
    [
      0.5762054241262056,
      -0.6456430049058361,
      0.5011311399461242
    ],
    [
      0.5769003055888469,
      -0.6474630591835754,
      0.49797351777392845
    ],
    [
      0.5925983324876087,
      -0.6558631299434498,
      0.4676224664338606
    ],
    [
      0.5926285528420665,
      -0.6565161601125828,
      0.46666682961974854
    ],
    [
      0.6124871421142395,
      -0.6674378367847411,
      0.42354012179820305
    ],
    [
      0.6923150060675405,
      -0.5812084906304665,
      0.4276641471911767
    ],
    [
      0.309702839108867,
      0.9344768919724055,
      -0.1756049253793878
    ],
    [
      0.29797571890588037,
      0.9318970869993538,
      -0.20682913282379414
    ],
    [
      0.17558763839148567,
      0.958086497424767,
      -0.22636087271532326
    ],
    [
      -0.003225330514649714,
      0.973850705027892,
      -0.22716602201858668
    ],
    [
      0.13890014879100568,
      0.9762178013619267,
      -0.16644985121628178
    ],
    [
      0.07226819585067663,
      0.9865018691192626,
      -0.1469400220929931
    ],
    [
      0.17035340997027304,
      0.06862152362034146,
      -0.9829907437038881
    ],
    [
      0.2569153865658459,
      0.059631315687998974,
      -0.9645924477907963
    ],
    [
      0.2107140674167311,
      0.10365418477275323,
      -0.9720367234687141
    ],
    [
      0.2098444727081972,
      0.10374574264410345,
      -0.9722150575654762
    ],
    [
      0.186384517096179,
      0.09231928807609584,
      -0.9781298282109319
    ],
    [
      0.26483801689693476,
      0.10578181119739351,
      -0.9584732824789108
    ],
    [
      -0.06920224072471662,
      -0.14152155108057415,
      -0.9875133925463628
    ],
    [
      -0.05222947907524713,
      -0.1638482044407922,
      -0.9851019477277754
    ],
    [
      -0.017300741310397744,
      -0.1637458993784994,
      -0.9863508325067897
    ],
    [
      0.1762680255440159,
      0.13119705174528107,
      -0.9755597966214886
    ],
    [
      0.20767448142352216,
      0.13630860623131283,
      -0.9686543623154484
    ],
    [
      0.19131199581373964,
      0.14239434370918963,
      -0.9711454943196682
    ],
    [
      0.1893373734017312,
      0.1609389158600598,
      -0.9686330700503272
    ],
    [
      0.1572326202915458,
      0.17129288091153064,
      -0.9725927472818635
    ],
    [
      0.14937371659342072,
      0.16893565712182154,
      -0.9742423910628641
    ],
    [
      0.1451970268207564,
      0.14460398805727762,
      -0.9787785807016535
    ],
    [
      0.21724386470816973,
      0.18465975013396602,
      -0.9584914605394874
    ],
    [
      0.2177913620485379,
      0.18443115627667903,
      -0.9584112223943801
    ],
    [
      0.2350155990106378,
      0.263397824719737,
      -0.935622388656119
    ],
    [
      0.22748146855006396,
      0.2631946552941099,
      -0.9375397350997562
    ],
    [
      0.19852342845410445,
      0.20555643966849355,
      -0.9582979695614726
    ],
    [
      0.23346039736812887,
      0.34094826755099245,
      -0.9106319353694402
    ],
    [
      0.1897295518061736,
      0.34595566500797864,
      -0.9188674414845244
    ],
    [
      0.14517240804769277,
      0.26873883201069143,
      -0.9522102772555879
    ],
    [
      0.16232046149292953,
      0.22787091745258878,
      -0.9600660981203523
    ],
    [
      0.18983716575819135,
      0.20681303260414072,
      -0.9597865492087163
    ],
    [
      0.17222877421612348,
      0.2877315367073324,
      -0.9420975597654675
    ],
    [
      0.14431589877122425,
      0.27640922876600743,
      -0.9501425469974675
    ],
    [
      0.09646685696342609,
      0.328736610018622,
      -0.9394819778692204
    ],
    [
      0.08874783571173112,
      0.31242329584260997,
      -0.9457882986542626
    ],
    [
      0.09062086917856511,
      0.30355991602147997,
      -0.9484931393818057
    ],
    [
      0.11240097918582231,
      0.28841069810929254,
      -0.9508865805626762
    ],
    [
      0.08286025235971396,
      0.39312070029848145,
      -0.9157457581532749
    ],
    [
      0.07290329614111762,
      0.3972763593728863,
      -0.9147986683938635
    ],
    [
      0.057400835114143976,
      0.39598053991584015,
      -0.9164630686155109
    ],
    [
      -0.2424777167259513,
      0.3518552161162408,
      -0.9041031267411714
    ],
    [
      -0.20180016917219182,
      0.3558099469186915,
      -0.912510807276162
    ],
    [
      -0.204800908415464,
      0.3104443208538774,
      -0.9282676939125779
    ],
    [
      -0.26318097965430426,
      0.326616700498287,
      -0.907776020229557
    ],
    [
      -0.2687774928262682,
      0.29955242057726306,
      -0.9154381501097317
    ],
    [
      -0.24680739174778066,
      0.23857066960810064,
      -0.9392391319474503
    ],
    [
      -0.1683738749227933,
      0.2738099733006477,
      -0.9469310095062797
    ],
    [
      -0.17526334556208484,
      0.21144212542665217,
      -0.9615482241143422
    ],
    [
      -0.14914087801782144,
      0.270092117508555,
      -0.9512135651702084
    ],
    [
      -0.24844731754378713,
      0.22152509017019495,
      -0.9429743182241941
    ],
    [
      -0.2109815080036955,
      0.18454996928049452,
      -0.9599104708872881
    ],
    [
      -0.1224007051295985,
      0.17832342752633346,
      -0.9763292593070422
    ],
    [
      -0.1445220890706974,
      0.1743550973890412,
      -0.9740193354267149
    ],
    [
      -0.16726655406993554,
      0.15255462491100025,
      -0.9740374665832077
    ],
    [
      -0.20894623697316572,
      0.14286164065334078,
      -0.9674357971899683
    ],
    [
      -0.449079049683838,
      0.7843522496979937,
      -0.4279247077801856
    ],
    [
      -0.4506067361845,
      0.7695340512605732,
      -0.4525162022023543
    ],
    [
      -0.46157140946464015,
      0.7563316985147244,
      -0.4635883904787278
    ],
    [
      -0.46207189017168504,
      0.7534100433178861,
      -0.46782782617209434
    ],
    [
      -0.47547899562582335,
      0.7364677503649268,
      -0.4811808156931052
    ],
    [
      -0.47588371891066933,
      0.7294458997893412,
      -0.49136886893276976
    ],
    [
      -0.4936299023175779,
      0.7056348542432483,
      -0.5083394259892184
    ],
    [
      -0.5120011960685141,
      0.6731888677327702,
      -0.533546177556434
    ],
    [
      -0.5064375591887982,
      0.6957686597926167,
      -0.5093397399509275
    ],
    [
      -0.5313829862900653,
      0.6569166755622896,
      -0.5348762504071778
    ],
    [
      -0.5474298548411088,
      0.6333183462758023,
      -0.5470177568407861
    ],
    [
      -0.5634823543605951,
      0.6180433632264626,
      -0.5481879581821947
    ],
    [
      -0.5775491560838213,
      0.608485827711077,
      -0.5442260282103673
    ],
    [
      -0.6037866362926019,
      0.5959543870867123,
      -0.5294148338935795
    ],
    [
      -0.6093039287047104,
      0.590879992801684,
      -0.5287811991473288
    ],
    [
      -0.6104802193130121,
      0.5891350556619037,
      -0.5293711250321291
    ],
    [
      -0.6119020829349233,
      0.579314827593706,
      -0.5384887848692643
    ],
    [
      -0.6242487237519705,
      0.5420258894004337,
      -0.5626024050017071
    ],
    [
      -0.6507940374372944,
      0.5108412478993927,
      -0.5617012909729304
    ],
    [
      -0.66908986229542,
      0.49691112278604704,
      -0.552628349096394
    ],
    [
      -0.6708753101475036,
      0.494708705191886,
      -0.5524396937601954
    ],
    [
      -0.6907684235170856,
      0.4786248734432587,
      -0.5419937412859532
    ],
    [
      -0.7044758943409969,
      0.46984379385970143,
      -0.5319403384440544
    ],
    [
      -0.6977138919202452,
      0.47556790431834894,
      -0.5357522686874578
    ],
    [
      -0.7254240048364299,
      0.46052534072011214,
      -0.511543178785232
    ],
    [
      -0.9745435244061469,
      0.21209451428904352,
      -0.0726693611265461
    ],
    [
      -0.9795381184216975,
      0.1486573966354459,
      -0.13566890942457052
    ],
    [
      -0.9536198660559557,
      0.2944253617713692,
      0.06263271836045015
    ],
    [
      -0.9560405318704817,
      0.2870139624034771,
      0.06007900470432276
    ],
    [
      -0.8700479280597605,
      0.4486056760621668,
      0.20437600222072067
    ],
    [
      -0.8903055247633823,
      0.4215776058889206,
      0.17212900623882194
    ],
    [
      -0.9165644885481419,
      0.37272305253098814,
      0.14486912867987148
    ],
    [
      -0.9133410757655319,
      0.397699263880275,
      0.08742639663481656
    ],
    [
      -0.9258178426982118,
      0.3460457168428465,
      0.15203185191383278
    ],
    [
      -0.9441930052484508,
      0.3175881205328977,
      0.08739195921983073
    ],
    [
      -0.7117215406065821,
      0.6097341994873153,
      0.34882180925532175
    ],
    [
      -0.7224525721523762,
      0.5899963919684583,
      0.36050872174555904
    ],
    [
      -0.7517200457217328,
      0.5727846733767624,
      0.32685576452740067
    ],
    [
      -0.751831443894555,
      0.5733529784988608,
      0.3256007401986571
    ],
    [
      -0.7173163169017357,
      0.6159094521157972,
      0.3257496712215487
    ],
    [
      -0.7559422536693635,
      0.5741935071727627,
      0.31440916881975023
    ],
    [
      -0.7913563551109531,
      0.5467832812426505,
      0.2734651030369829
    ],
    [
      -0.7916837489845032,
      0.5463363778594706,
      0.2734106871013562
    ],
    [
      -0.8242837556662285,
      0.4880800424164287,
      0.28693930079296287
    ],
    [
      -0.8309752121795113,
      0.472492841779605,
      0.2936506618590349
    ],
    [
      -0.8534999740962051,
      0.43242420559135336,
      0.2907698413461481
    ],
    [
      -0.8576533231185198,
      0.4272444708000284,
      0.2861694244928402
    ],
    [
      -0.7558611678458781,
      -0.23749856959217955,
      -0.6101379552071269
    ],
    [
      -0.8276856236482519,
      -0.41039956759568136,
      -0.3827645533788128
    ],
    [
      -0.7221840487562816,
      -0.21511158370364403,
      -0.6574018605681723
    ],
    [
      -0.5275592268553595,
      -0.5097093061818503,
      -0.6796158365954932
    ],
    [
      -0.3627375581529762,
      -0.5520464262089528,
      -0.750777068919356
    ],
    [
      -0.7460243529922306,
      -0.6111198950203137,
      -0.26453759402565885
    ],
    [
      -0.6497607114494904,
      -0.6598069286388033,
      -0.37744646610728905
    ],
    [
      -0.5600145550969644,
      -0.5419212503208822,
      -0.6266618358654057
    ],
    [
      0.02012649611558103,
      -0.7428589078232595,
      -0.6691454006579911
    ],
    [
      0.02165431280479354,
      -0.7415820928089417,
      -0.6705125579450861
    ],
    [
      0.019982956481363032,
      -0.8066594681671254,
      -0.5906785791499419
    ],
    [
      0.026329760108359055,
      -0.7974522600616685,
      -0.6028072964515055
    ],
    [
      0.04204768454442619,
      -0.8965926339058492,
      -0.4408555784497054
    ],
    [
      0.052590485800240776,
      -0.8891466564389668,
      -0.45459043560847223
    ],
    [
      0.42108756667419445,
      -0.4845790724529477,
      -0.7667257552300214
    ],
    [
      0.4348826164906694,
      -0.5204666385373342,
      -0.7348411992014855
    ],
    [
      0.46333922843967823,
      -0.5331744451296322,
      -0.7078430408287083
    ],
    [
      0.46033027043585234,
      -0.5268607446638108,
      -0.7145024827477857
    ],
    [
      0.4884194931559859,
      -0.539701472305831,
      -0.6856885003382865
    ],
    [
      0.490632994519331,
      -0.5447360788555735,
      -0.6801043075014659
    ],
    [
      0.5162741177489641,
      -0.5518249300256128,
      -0.6549429608330455
    ],
    [
      0.5456404885615415,
      -0.554395226980917,
      -0.6284285079013362
    ],
    [
      0.5234713030105215,
      -0.5491996343559175,
      -0.6514273225370527
    ],
    [
      0.5686813153993804,
      -0.5577802138477619,
      -0.604551730256043
    ],
    [
      0.5488320033063417,
      -0.5532449864155294,
      -0.6266605278400965
    ],
    [
      0.5740566671381141,
      -0.5557218805620433,
      -0.6013585738798994
    ],
    [
      0.5941680128886587,
      -0.5615480845411213,
      -0.5758716186860925
    ],
    [
      0.6180376002296261,
      -0.5590371140393223,
      -0.5527269034785539
    ],
    [
      0.6060919309644878,
      -0.5563201417946595,
      -0.5684720494917129
    ],
    [
      0.644205736761477,
      -0.5562744263810614,
      -0.5249359306410868
    ],
    [
      0.6309095276976435,
      -0.5531334107419125,
      -0.544055693639314
    ],
    [
      0.6671044613334589,
      -0.5529466078242448,
      -0.49922107984805325
    ],
    [
      0.6556651587922436,
      -0.5507869145868027,
      -0.516465850048086
    ],
    [
      0.6859798386704039,
      -0.5502876341543728,
      -0.4760411543496107
    ],
    [
      0.6763214100745241,
      -0.5483458794745051,
      -0.4918395538568843
    ],
    [
      0.7133482730651536,
      -0.5348142657365862,
      -0.45288844374702164
    ],
    [
      0.72969969046615,
      -0.5390580196160866,
      -0.4206599734003553
    ],
    [
      0.7136916990744818,
      -0.534461289301269,
      -0.4527640543490664
    ],
    [
      0.7502406570676675,
      -0.5319622478297854,
      -0.39262593313044947
    ],
    [
      0.743244309667416,
      -0.5303692389847018,
      -0.40779451502661807
    ],
    [
      0.7680353708098216,
      -0.5260159096207162,
      -0.3652792520947642
    ],
    [
      0.761036217587456,
      -0.5247358956744943,
      -0.38141331297014885
    ],
    [
      0.7854761276107266,
      -0.5200423895792491,
      -0.33553415026545663
    ],
    [
      0.7781247824935227,
      -0.5188312919454854,
      -0.35402812510814224
    ],
    [
      0.7991576062501368,
      -0.5160107636127383,
      -0.3083504697715737
    ],
    [
      0.7923372037932465,
      -0.5148710332998101,
      -0.32727599141074387
    ],
    [
      0.8077211926881319,
      -0.5088032693237695,
      -0.29783503488996266
    ],
    [
      0.09534388399384049,
      -0.995092602992895,
      -0.0264623365142546
    ],
    [
      0.10367011171819433,
      -0.9946100745417328,
      0.0018186688609345828
    ],
    [
      0.14492774110013626,
      -0.9894422265493481,
      -0.00017372587707980107
    ],
    [
      0.14382871188525298,
      -0.9886646923477582,
      -0.04307467634633464
    ],
    [
      0.10166112696298839,
      -0.9937401304249561,
      -0.04632028116933631
    ],
    [
      0.09800419197497173,
      -0.9934823661483349,
      -0.058206241139922794
    ],
    [
      0.14802135409428852,
      -0.9877850446448585,
      -0.04868659269293934
    ],
    [
      0.14751169722073615,
      -0.9865033171064966,
      -0.07107393700180777
    ],
    [
      0.10545060461969978,
      -0.991079832467516,
      -0.08149193617469212
    ],
    [
      0.15411128515742226,
      -0.9829756601359654,
      -0.10004280767446841
    ],
    [
      0.11270971030378149,
      -0.9869803156357697,
      -0.11474483757779275
    ],
    [
      0.1039469542148682,
      -0.9907739960634091,
      -0.08695929757073591
    ],
    [
      0.1547752682070236,
      -0.9846758519209821,
      -0.08036219879478276
    ],
    [
      0.16316689105925436,
      -0.9778305346602115,
      -0.13124028020460135
    ],
    [
      0.1200984883705589,
      -0.9823137650089977,
      -0.1436524283294733
    ],
    [
      0.11202054136511823,
      -0.9867216062899724,
      -0.11760897071568388
    ],
    [
      0.16417837018463535,
      -0.9800583498204596,
      -0.1119423678091298
    ],
    [
      0.17202883712856185,
      -0.9748429308516688,
      -0.1417298111362714
    ],
    [
      0.1705946120408223,
      -0.9716394104234765,
      -0.1637508303934978
    ],
    [
      0.12444013730157139,
      -0.9772678584138129,
      -0.17164552175820297
    ],
    [
      0.11837773303168542,
      -0.9813828990106241,
      -0.15124257949328335
    ],
    [
      0.17927639009914179,
      -0.9654113738009291,
      -0.18931681195504874
    ],
    [
      0.13655600623348754,
      -0.968742499126517,
      -0.20710004236520563
    ],
    [
      0.13264018623613816,
      -0.9700137522125585,
      -0.20366615210622435
    ],
    [
      0.12383277864899957,
      -0.9768574655121819,
      -0.17439878154730395
    ],
    [
      0.17957516645597987,
      -0.9680642983907911,
      -0.17494077218719611
    ],
    [
      0.19172022131107572,
      -0.9598584802941538,
      -0.20473166474150964
    ],
    [
      0.19157632820442633,
      -0.9570925485741731,
      -0.21742208704615043
    ],
    [
      0.14621949575168205,
      -0.9602986508694564,
      -0.237584427520883
    ],
    [
      0.14549524711100223,
      -0.9605755014602004,
      -0.23690892567101168
    ],
    [
      0.2020415514276326,
      -0.951885738612183,
      -0.23041864534679976
    ],
    [
      0.2009845543243044,
      -0.94702883438726,
      -0.2504827254765651
    ],
    [
      0.1538591489706001,
      -0.9525276402973248,
      -0.2627136402009854
    ],
    [
      0.2088474428185264,
      -0.942672031427667,
      -0.2602925023741525
    ],
    [
      0.2076364110144181,
      -0.937201723390612,
      -0.28024997858112016
    ],
    [
      0.15978408671708014,
      -0.9421363663791034,
      -0.294700038646025
    ],
    [
      0.15944900530798473,
      -0.9422944499017551,
      -0.2943759235919998
    ],
    [
      0.15217722278339715,
      -0.9507261284074787,
      -0.27011464534389584
    ],
    [
      0.16893537801726066,
      -0.9304138759263776,
      -0.32525506535305554
    ],
    [
      0.216352944566679,
      -0.9320352526838942,
      -0.29069174589553964
    ],
    [
      0.2148630551818351,
      -0.9261224393316793,
      -0.3100501489828183
    ],
    [
      0.2255328791696178,
      -0.9194365471054223,
      -0.32213561780765715
    ],
    [
      0.22389070464549327,
      -0.9115028665357894,
      -0.34501518324616315
    ],
    [
      0.1752445108084284,
      -0.9210148892856409,
      -0.34788063347314013
    ],
    [
      0.16870906629332008,
      -0.9301101079998715,
      -0.3262398472702309
    ],
    [
      0.22876252292254093,
      -0.9077316940528002,
      -0.3516971420386402
    ],
    [
      0.2277285157570286,
      -0.899473326526887,
      -0.37294430948568824
    ],
    [
      0.1640384499366087,
      -0.9080578241780456,
      -0.38538600764873193
    ],
    [
      0.23280335278058176,
      -0.8951803244616522,
      -0.38007207952025535
    ],
    [
      0.23137204128430816,
      -0.8848895075808815,
      -0.40427408757574057
    ],
    [
      0.17813411798854178,
      -0.8925937564427456,
      -0.41417945623590857
    ],
    [
      0.1609108418109609,
      -0.906981749837648,
      -0.3892194836453154
    ],
    [
      0.2373315115578937,
      -0.8795434966173346,
      -0.4124039175126713
    ],
    [
      0.23585517692666405,
      -0.8673442868595121,
      -0.43827642369748354
    ],
    [
      0.17899072490434506,
      -0.8790094869580952,
      -0.4419328481069078
    ],
    [
      0.2381826719361473,
      -0.8649448142366841,
      -0.4417459486112188
    ],
    [
      0.23669765202777737,
      -0.8514783500665262,
      -0.4679303803906343
    ],
    [
      0.1791201265922329,
      -0.8612521602174449,
      -0.4755635570251016
    ],
    [
      0.1782457755608025,
      -0.8784992474126143,
      -0.4432465632017899
    ],
    [
      0.23702794169451047,
      -0.8320828721726607,
      -0.5014537353465015
    ],
    [
      0.239057381573741,
      -0.8488954695460053,
      -0.4714107021476858
    ],
    [
      0.23887156282187558,
      -0.8299143868531088,
      -0.504165138589791
    ],
    [
      0.23721271697040233,
      -0.8150573423556091,
      -0.5285940366479093
    ],
    [
      0.2437896737111785,
      -0.8072242383367704,
      -0.537545927371251
    ],
    [
      0.24277479455954,
      -0.7959138024642337,
      -0.554600413066469
    ],
    [
      0.25282139196122444,
      -0.7700199663855489,
      -0.5857905727599131
    ],
    [
      0.25365757901647074,
      -0.7826885000043601,
      -0.5683806335268891
    ],
    [
      0.2703042372510705,
      -0.7470290335891615,
      -0.6073575901385939
    ],
    [
      0.2785651533295424,
      -0.7413382460569666,
      -0.6105891092082046
    ],
    [
      0.28372173502748493,
      -0.726479819541366,
      -0.6258826158890644
    ],
    [
      0.29358388548052916,
      -0.714884445663934,
      -0.6346248746574036
    ],
    [
      0.23512939363270127,
      -0.6853826109102245,
      -0.6891769329510399
    ],
    [
      0.3255580022223745,
      -0.6915486138826828,
      -0.6448042352729365
    ],
    [
      0.32645673372447365,
      -0.6905402985243791,
      -0.6454301644018581
    ],
    [
      0.2693616499179397,
      -0.6493794470377173,
      -0.7111614692307744
    ],
    [
      0.3321760216634171,
      -0.6877094246570794,
      -0.6455345365429288
    ],
    [
      0.38075967572540237,
      -0.685969389412978,
      -0.6200548896104865
    ],
    [
      0.40494296425638426,
      -0.6938059439350266,
      -0.5955287632513475
    ],
    [
      0.41093150251968463,
      -0.6993459851814615,
      -0.5848508299109144
    ],
    [
      0.4263319077101608,
      -0.6939209832557851,
      -0.580271292987633
    ],
    [
      0.4953461301521932,
      -0.6662769054526929,
      -0.5574112454944103
    ],
    [
      0.5193009042085062,
      -0.6712761512424303,
      -0.5288807991044652
    ],
    [
      0.5282715226227953,
      -0.666148240796106,
      -0.5264748044019263
    ],
    [
      0.5426754352778349,
      -0.668388714701282,
      -0.5086844778504456
    ],
    [
      0.5560363895512206,
      -0.6599206522734732,
      -0.5053001743496601
    ],
    [
      0.5694513752693794,
      -0.6626988270546743,
      -0.4863696082447703
    ],
    [
      0.5807486075708107,
      -0.6552265349743585,
      -0.4831244587785432
    ],
    [
      0.5940288975072064,
      -0.6584324947555082,
      -0.4621648177613807
    ],
    [
      0.6051996259883166,
      -0.6506431887794928,
      -0.4586903678936969
    ],
    [
      0.6172945653872486,
      -0.653065606110336,
      -0.4386943510681523
    ],
    [
      0.6284604438274441,
      -0.6448738028131696,
      -0.43494281117118516
    ],
    [
      0.6399533749213204,
      -0.6473461466951762,
      -0.4140080244218934
    ],
    [
      0.6515583810294591,
      -0.6383533279268699,
      -0.40984961246164475
    ],
    [
      0.6667492234213414,
      -0.6402426146162455,
      -0.3814903242500285
    ],
    [
      0.6666846493281415,
      -0.6482978934575399,
      -0.36775184525536936
    ],
    [
      0.6792521869319751,
      -0.6446931766077866,
      -0.35069527311255644
    ],
    [
      0.679578648415982,
      -0.6444704682192866,
      -0.350472076220518
    ],
    [
      0.6993042314476412,
      -0.6383156840843675,
      -0.3217556205124159
    ],
    [
      0.6999620974583908,
      -0.6388146814678242,
      -0.31932564078509695
    ],
    [
      0.7171004876982462,
      -0.6326492456911826,
      -0.29244114359869927
    ],
    [
      0.7178738197876422,
      -0.6320544440386219,
      -0.2918293313471562
    ],
    [
      0.7316511449050328,
      -0.6263546009756644,
      -0.26901025258486166
    ],
    [
      0.7338223677996151,
      -0.6277142194791576,
      -0.25976834137484583
    ],
    [
      0.7430101427049987,
      -0.6234392135484882,
      -0.24343269058928835
    ],
    [
      0.7465411547420768,
      -0.6256913779156852,
      -0.226244566516718
    ],
    [
      0.7529714869547383,
      -0.6223194539738814,
      -0.21389819316399197
    ],
    [
      0.7617512827669431,
      -0.6274706191053966,
      -0.16129353788173598
    ],
    [
      0.7665227694779484,
      -0.6227868628555886,
      -0.15677808305483892
    ],
    [
      0.5339762776051531,
      0.26679999814070465,
      0.8023011254803676
    ],
    [
      0.5279963099859266,
      0.28069732776331524,
      0.8015166291648472
    ],
    [
      0.5458810399240343,
      0.31416515320420324,
      0.7767329957994796
    ],
    [
      0.5808318824285108,
      0.3098054799829413,
      0.7527648297623183
    ],
    [
      0.5681178067339377,
      0.26823002066813206,
      0.7780069496374654
    ],
    [
      0.5303051222641916,
      0.2556582966366248,
      0.8083410868322978
    ],
    [
      0.48465850154409684,
      0.25486551463828067,
      0.8367494883949407
    ],
    [
      0.46145093937861814,
      0.28144029067401927,
      0.8413408306577748
    ],
    [
      0.47005369125181423,
      0.32427811374350146,
      0.8209100025505237
    ],
    [
      0.47279896458656984,
      0.32773346795525515,
      0.8179559358962372
    ],
    [
      0.4927772559179871,
      0.353444806998342,
      0.79513982698381
    ],
    [
      0.4742687355927601,
      0.3332962729577101,
      0.8148513734858304
    ],
    [
      0.510876219207509,
      0.3927900896055251,
      0.7646708011660474
    ],
    [
      0.5013728753841689,
      0.38213631130974635,
      0.7762712666378883
    ],
    [
      0.39882176376572714,
      0.3370986766320269,
      0.8528221871877694
    ],
    [
      0.3852726091104912,
      0.38337073765706325,
      0.8393997225264457
    ],
    [
      0.4127121497997982,
      0.3947616145019034,
      0.8208726753422113
    ],
    [
      0.4270632488894521,
      0.42127268485212876,
      0.8000914363030421
    ],
    [
      0.4204816419412789,
      0.418934404536794,
      0.8047913726462083
    ],
    [
      0.8726812082323859,
      -0.2782587041271663,
      0.4012475574698658
    ],
    [
      0.8727347647187049,
      -0.27554544504716616,
      0.40299967514273005
    ],
    [
      0.8621341301042281,
      -0.2674762015933394,
      0.43032687958181876
    ],
    [
      0.8625391267895371,
      -0.25939697624673147,
      0.43444155357331476
    ],
    [
      0.8509020483059183,
      -0.2516427232750348,
      0.4611308317728461
    ],
    [
      0.8510958138269776,
      -0.2443721170279198,
      0.4646699733202988
    ],
    [
      0.838534186232605,
      -0.23568196353459747,
      0.49123765183839446
    ],
    [
      0.8384549180146212,
      -0.22913802088568927,
      0.4944584086065119
    ],
    [
      0.8250010264841408,
      -0.21922517317450715,
      0.5208777493296496
    ],
    [
      0.8246250777732838,
      -0.21179548787846578,
      0.5245342242616094
    ],
    [
      0.8105654236703225,
      -0.20000678756723766,
      0.5504370798530787
    ],
    [
      0.8102778175579118,
      -0.19737655286108427,
      0.5518082590486145
    ],
    [
      0.7950544468915908,
      -0.18440604236698704,
      0.5778259582404132
    ],
    [
      0.7942092404537713,
      -0.17674335715984285,
      0.5813720564988585
    ],
    [
      0.7777402955097831,
      -0.16235289564465716,
      0.6072574166003659
    ],
    [
      0.777274560397367,
      -0.15929531618365836,
      0.608661860149811
    ],
    [
      0.7594177879442177,
      -0.14193668175211802,
      0.6349319662193023
    ],
    [
      0.7547354669336673,
      -0.1426666208653818,
      0.6403285174371609
    ],
    [
      0.7416222647534477,
      -0.12885655278720332,
      0.6583254553985938
    ],
    [
      0.7295480223718086,
      -0.13025236867883022,
      0.6714119476945113
    ],
    [
      0.7134957197589481,
      -0.11352591045240452,
      0.6914012767862185
    ],
    [
      0.7046436377255421,
      -0.11334368788617183,
      0.7004502496460951
    ],
    [
      0.6909006656141935,
      -0.09864069997125983,
      0.7161887199356356
    ],
    [
      0.6756436121614046,
      -0.09751544956732625,
      0.7307506048175204
    ],
    [
      0.6657451136322396,
      -0.0868111579950518,
      0.7411121821440763
    ],
    [
      0.6387139403634927,
      -0.08495610242654016,
      0.7647398008772865
    ],
    [
      0.6350543185977487,
      -0.08111791313083185,
      0.7681965221215519
    ],
    [
      0.602491731216844,
      -0.07892190428363208,
      0.7942134768685152
    ],
    [
      0.5962149787335373,
      -0.07182585065889874,
      0.7996053691108466
    ],
    [
      0.5559170074261769,
      -0.06903476962936995,
      0.828366151793121
    ],
    [
      0.5164211293017346,
      -0.09865895686437595,
      0.8506324867068941
    ],
    [
      0.5036850467890597,
      -0.08781670861152154,
      0.859412356979897
    ],
    [
      0.46104412600072475,
      -0.07881916362996072,
      0.883869816955473
    ],
    [
      0.4524261041253512,
      -0.07415846947194298,
      0.888713194293601
    ],
    [
      0.44002093563900835,
      -0.07502631876211543,
      0.8948478237624412
    ],
    [
      0.5563093824400578,
      0.13592712286180753,
      0.8197827079657588
    ],
    [
      0.5937892024780784,
      0.1385093938090007,
      0.7926093179159015
    ],
    [
      0.5510298440956918,
      0.14122256230665417,
      0.822448964259437
    ],
    [
      0.5100056347502664,
      0.13551572058570854,
      0.8494290682553276
    ],
    [
      0.4583263642888106,
      0.12646109057668506,
      0.8797411757829435
    ],
    [
      0.501065776036847,
      0.14501210983832563,
      0.8531732391987161
    ],
    [
      0.4031940933883091,
      0.11597436804722362,
      0.9077359026792026
    ],
    [
      0.4432287026099099,
      0.14280566068075126,
      0.8849603722541876
    ],
    [
      0.38112867363334685,
      0.14058360195671327,
      0.9137708602244669
    ],
    [
      0.2996533288241779,
      0.1497304988352285,
      0.942225376565046
    ],
    [
      0.25463667653824745,
      0.14747889546975573,
      0.9557249281841386
    ],
    [
      0.18953820294216864,
      0.1920434607068649,
      0.9629094343837244
    ],
    [
      0.22286531919763045,
      0.1786502263211122,
      0.9583397863672121
    ],
    [
      0.6263233531787644,
      0.2169306293706644,
      0.7487724349251621
    ],
    [
      0.5878804771226123,
      0.19398490562052964,
      0.7853447656981511
    ],
    [
      0.545184807286423,
      0.17983728613861336,
      0.8187991673288172
    ],
    [
      0.5739349634978937,
      0.1996213647926744,
      0.7941976884837814
    ],
    [
      0.4910989222540851,
      0.19289083833658094,
      0.8494792363834958
    ],
    [
      0.49618313908909395,
      0.19846049717601977,
      0.8452311657436324
    ],
    [
      0.5171140486999791,
      0.19997382355551505,
      0.8322280519963883
    ],
    [
      0.44758245074034114,
      0.19342663121571185,
      0.8730727851249351
    ],
    [
      0.4364159350967866,
      0.1805267751527306,
      0.8814483620987408
    ],
    [
      0.3790019619788434,
      0.1743876627963446,
      0.9088159637025616
    ],
    [
      0.38865640025131454,
      0.18463435220506896,
      0.9026939451051528
    ],
    [
      0.328112339794836,
      0.18102253693337664,
      0.9271316700429137
    ],
    [
      0.5358822338323539,
      0.23601442727812447,
      0.8106339627596573
    ],
    [
      0.5631323319420731,
      0.22144303778579302,
      0.7961438046846075
    ],
    [
      0.5739577553062897,
      0.25519273423231426,
      0.7781061389802812
    ],
    [
      0.42715263890082433,
      0.26131384283373266,
      0.8655955745170658
    ],
    [
      0.3753074392660911,
      0.2439019526224533,
      0.8942349599174055
    ],
    [
      0.40999141701860137,
      0.2653009378589419,
      0.8726525370055628
    ],
    [
      0.35161857610272573,
      0.2511950637213927,
      0.9018122958251884
    ],
    [
      0.3191632166407712,
      0.229487532552073,
      0.9194945968012413
    ],
    [
      0.29108114826990505,
      0.23983104038420747,
      0.9261494680612316
    ],
    [
      0.3844251706106537,
      0.31695322996738967,
      0.8670397558441071
    ],
    [
      0.3323493301096615,
      0.29802395275191634,
      0.8948327477030458
    ],
    [
      0.3544461009448853,
      0.3209435835904814,
      0.8782728378340456
    ],
    [
      0.2727444337731565,
      0.28320041395644174,
      0.9194607111675084
    ],
    [
      0.30627673664987215,
      0.3038592309257607,
      0.9021441838022956
    ],
    [
      0.21800444192807394,
      0.26639611853990175,
      0.9388861333125033
    ],
    [
      0.2642079845318638,
      0.2861895700604749,
      0.9210264224756046
    ],
    [
      0.3811077962295407,
      0.38496200366248556,
      0.8405718906727891
    ],
    [
      0.3335000470630991,
      0.366991630229534,
      0.8683863552304237
    ],
    [
      0.3332857827863541,
      0.36654027471470296,
      0.8686592047544062
    ],
    [
      0.2913724141361302,
      0.35680130315425485,
      0.8875781353480431
    ],
    [
      0.29009125981225464,
      0.3538832894988824,
      0.8891645957830244
    ],
    [
      0.24427420156482715,
      0.3382870614565021,
      0.9087859915849226
    ],
    [
      0.24201598165088423,
      0.3317217129948959,
      0.911805335449015
    ],
    [
      0.19403963467465418,
      0.3217890502527998,
      0.926714857608708
    ],
    [
      0.19378901206421947,
      0.3051488363518554,
      0.9323786819078835
    ],
    [
      -0.556675374282988,
      0.7356907809743878,
      -0.38583882963770094
    ],
    [
      -0.5083486246040401,
      0.7505574542840258,
      -0.4221909327328849
    ],
    [
      -0.5622139599393977,
      0.7321201432940314,
      -0.3845979186532192
    ],
    [
      -0.5716790308748294,
      0.7328189762283689,
      -0.3689978776871504
    ],
    [
      -0.5693402295274655,
      0.7312167371477807,
      -0.3757310026555781
    ],
    [
      -0.5900960694224542,
      0.7314892126153553,
      -0.34162868831457605
    ],
    [
      -0.5887807050561759,
      0.7300203125831055,
      -0.34699801810618075
    ],
    [
      -0.6112210095092613,
      0.7268758887464548,
      -0.313145844445573
    ],
    [
      -0.6239027274646459,
      0.7187297800973754,
      -0.3068760170872827
    ],
    [
      -0.6625516054118062,
      0.6860600659313977,
      -0.300577703931021
    ],
    [
      -0.6538252472811735,
      0.6904029858241899,
      -0.3096066265162224
    ],
    [
      -0.6982223906101922,
      0.6512624536309077,
      -0.2972250153355839
    ],
    [
      -0.6732357947251374,
      0.6741671834890669,
      -0.3037304288464219
    ],
    [
      -0.7173592554779515,
      0.6248973334275691,
      -0.30805684744091044
    ],
    [
      -0.724811471049053,
      0.6092958627793706,
      -0.3215694062494908
    ],
    [
      -0.7221530771513599,
      0.6121955980948603,
      -0.32204267238069295
    ],
    [
      -0.7368485951769725,
      0.5910251057063378,
      -0.32824300786236754
    ],
    [
      -0.7423186436214745,
      0.5688293269566703,
      -0.3541132984314422
    ],
    [
      -0.7449659056868717,
      0.5512479578543616,
      -0.375701328618272
    ],
    [
      -0.7414760796084964,
      0.5680519691383359,
      -0.35711368459703974
    ],
    [
      -0.7258697130252254,
      0.5345196053475013,
      -0.4328994700988075
    ],
    [
      -0.7200899513767935,
      0.5862070893112692,
      0.37125693308997865
    ],
    [
      -0.7290655470117949,
      0.5607306760342567,
      0.39248507884320616
    ],
    [
      -0.7301326366284646,
      0.564837549384313,
      0.38453202172964773
    ],
    [
      -0.7409985951609068,
      0.5316745929365027,
      0.41017460817969525
    ],
    [
      -0.749428340791976,
      0.5032803734668373,
      0.43019301214788086
    ],
    [
      -0.7514853745348283,
      0.5157128964215959,
      0.41147289136065485
    ],
    [
      -0.7326873824878092,
      0.48764636612688494,
      0.4747317359798131
    ],
    [
      -0.751039832271353,
      0.49510820089976637,
      0.4368146514754449
    ],
    [
      -0.7154602558821477,
      0.4590709163933965,
      0.5266597725047726
    ],
    [
      -0.7313211731897296,
      0.4695429687162852,
      0.4946703368643558
    ],
    [
      -0.7248103886073772,
      0.38747114508787994,
      0.5696630690953294
    ],
    [
      -0.7473413154930006,
      0.40425823266171973,
      0.5273103824906296
    ],
    [
      -0.7146095096686385,
      0.3675563305708093,
      0.5951769422184213
    ],
    [
      -0.7220234033895742,
      0.3741055890177248,
      0.5820027604946882
    ],
    [
      -0.7010892230510005,
      0.3211393036642883,
      0.6366658848750736
    ],
    [
      -0.7099218913818747,
      0.32232363550868115,
      0.6261935660235168
    ],
    [
      -0.7187177127439662,
      0.3452420223317642,
      0.6035335909494642
    ],
    [
      -0.6863793094891948,
      0.29889376509217963,
      0.6629826247302089
    ],
    [
      -0.6928296947532567,
      0.3002034896251043,
      0.6556408154508221
    ],
    [
      -0.671452655684957,
      0.2709067463891913,
      0.68975420689869
    ],
    [
      -0.6758583919728297,
      0.2727127316916395,
      0.6847212571354746
    ],
    [
      -0.6571217168000247,
      0.24431648272577203,
      0.7130922139375072
    ],
    [
      -0.6630959204829132,
      0.2478484935323377,
      0.7063107846356793
    ],
    [
      -0.6471470114915506,
      0.22531062117050463,
      0.7283102838113137
    ],
    [
      -0.6512723522284495,
      0.22728700247628442,
      0.7240061752003003
    ],
    [
      -0.6326282576880473,
      0.19389679974132362,
      0.7497903164383084
    ],
    [
      -0.6258308375920466,
      0.1929388578337256,
      0.7557184395372756
    ],
    [
      -0.6081628370172286,
      0.15457849182326105,
      0.7786163712232115
    ],
    [
      -0.5750959363122295,
      0.13314458800304765,
      0.8071785321244976
    ],
    [
      -0.6088294581697167,
      0.14775711977248757,
      0.7794193508127111
    ],
    [
      -0.5470800779257904,
      0.10426458889023354,
      0.8305614268916308
    ],
    [
      -0.5612591900980712,
      0.09467856920048018,
      0.8222068414119448
    ],
    [
      -0.5613708613283019,
      0.09473557792991724,
      0.8221240334194135
    ],
    [
      -0.4914992411673288,
      0.0936717829580372,
      0.8658256712580208
    ],
    [
      -0.5224436632892938,
      0.03530228434736145,
      0.8519427019516753
    ],
    [
      -0.5504103799046923,
      0.061272647583819846,
      0.8326428263975144
    ],
    [
      -0.47989960537959087,
      -0.0032365176596776063,
      0.8773174418133676
    ],
    [
      -0.5120078092280184,
      0.0032219941186815613,
      0.8589747505272924
    ],
    [
      -0.2742794519138093,
      -0.07038882063921344,
      0.9590704855154708
    ],
    [
      -0.27482221423447195,
      -0.07089469333272648,
      0.9588778300808298
    ],
    [
      -0.16534826760575255,
      -0.046702662011566864,
      0.9851288300323008
    ],
    [
      -0.2658423596115816,
      -0.07508724493502225,
      0.9610877928078239
    ],
    [
      -0.1644850910221852,
      -0.05145275151667165,
      0.9850366841863236
    ],
    [
      -0.18328290622390442,
      -0.0793756824080528,
      0.979850436203595
    ],
    [
      -0.24077911746861833,
      -0.10427599143006702,
      0.9649621413311041
    ],
    [
      -0.23714338903217702,
      -0.12161895803485614,
      0.963831853636748
    ],
    [
      -0.24279922056514242,
      -0.4470366056042327,
      0.8609336860309306
    ],
    [
      -0.2436237082289007,
      -0.4771801592646054,
      0.8443616431322573
    ],
    [
      -0.2656561029790451,
      -0.4849259337008535,
      0.8332308646313712
    ],
    [
      -0.2850286468160772,
      -0.4789885619750988,
      0.830258169481772
    ],
    [
      -0.29279125024577524,
      -0.442882847781137,
      0.8474243723901184
    ],
    [
      -0.25552960881657893,
      -0.4387964766172503,
      0.8614884045222739
    ],
    [
      -0.20837552315815885,
      -0.4115846573256133,
      0.8872303597165287
    ],
    [
      -0.2153856063071002,
      -0.43880124766657513,
      0.8723889646493586
    ],
    [
      -0.26682156501580684,
      -0.3989805138429373,
      0.8772803440270055
    ],
    [
      -0.22754036751610754,
      -0.38929358502937,
      0.8925670203439153
    ],
    [
      -0.16215507808089955,
      -0.5027682173847262,
      0.849075880142854
    ],
    [
      -0.1643523140518136,
      -0.47632610337114956,
      0.8637718217869063
    ],
    [
      -0.17442063508490108,
      -0.5506848463667936,
      0.8162864950729988
    ],
    [
      -0.1748277421865119,
      -0.5312019029172795,
      0.8290113382210328
    ],
    [
      -0.1655501423185407,
      -0.5891576169676634,
      0.7908770149317117
    ],
    [
      -0.17792828989308632,
      -0.5608870588711931,
      0.8085463690145078
    ],
    [
      -0.1621115733723015,
      -0.6209980154401428,
      0.766864592087913
    ],
    [
      -0.16722683400693433,
      -0.6428170923653511,
      0.7475435584305259
    ],
    [
      -0.1116050544308089,
      -0.7041978820561356,
      0.7011773347257804
    ],
    [
      -0.13760225137944787,
      -0.6999593575268378,
      0.700801340057169
    ],
    [
      -0.17534188406939732,
      -0.6557809362594805,
      0.734306875447611
    ],
    [
      -0.07246460335288789,
      -0.7201081707212534,
      0.6900674631667535
    ],
    [
      -0.031083869181484716,
      -0.7785986638830171,
      0.6267518756862951
    ],
    [
      -0.3466873554871704,
      -0.10666983442648048,
      0.9318956078707205
    ],
    [
      -0.3494498283311726,
      -0.10312198776007091,
      0.9312629452092066
    ],
    [
      -0.2958038842190131,
      -0.12937796128438156,
      0.9464467260310228
    ],
    [
      -0.3770406273811505,
      -0.14972149743851693,
      0.9140152288166739
    ],
    [
      -0.4126224202514696,
      -0.13860518987365675,
      0.9002951402989506
    ],
    [
      -0.4164044841161304,
      -0.17392469729471258,
      0.8923886514736289
    ],
    [
      -0.5516202840175762,
      -0.0358000747233802,
      0.8333267167865008
    ],
    [
      -0.5614407463089081,
      -0.08126047535291038,
      0.8235174700815493
    ],
    [
      -0.5588003542839749,
      -0.0390186751581609,
      0.828383792116315
    ],
    [
      -0.5789129580245761,
      -0.11539624746102611,
      0.807182441027522
    ],
    [
      -0.6134416913015766,
      -0.17540980420637628,
      0.7700134362213051
    ],
    [
      -0.5858895021014802,
      -0.11975021628574758,
      0.8014944647511899
    ],
    [
      -0.28928968232308955,
      -0.1483621781655296,
      0.9456744385841174
    ],
    [
      -0.28957846722946506,
      -0.1522771695891066,
      0.9449634780979443
    ],
    [
      -0.2940798251210335,
      -0.15502674357864685,
      0.9431244696391791
    ],
    [
      -0.3276934860233612,
      -0.16056693338118574,
      0.9310398697813209
    ],
    [
      -0.34050057387240895,
      -0.14811618872219348,
      0.928504687026927
    ],
    [
      -0.36856788835565063,
      -0.16018644400058568,
      0.9156953722890074
    ],
    [
      -0.3652241462725992,
      -0.18816725749015084,
      0.9117041220637792
    ],
    [
      -0.40936465287363893,
      -0.18422824359987203,
      0.8935773806659115
    ],
    [
      -0.4088924106618131,
      -0.22439363034711127,
      0.8845645794190582
    ],
    [
      -0.42439871346057645,
      -0.2366375590973552,
      0.8740070924411616
    ],
    [
      -0.42648895430651484,
      -0.2551811484793791,
      0.8677498218468734
    ],
    [
      -0.4497815990575521,
      -0.2691765786456351,
      0.8516105228670332
    ],
    [
      -0.45448624559826645,
      -0.29673382297982004,
      0.8398757591821382
    ],
    [
      -0.47111566250156817,
      -0.3028573843846568,
      0.8284488139103059
    ],
    [
      -0.47976533056220777,
      -0.3358990712482144,
      0.8105535401965267
    ],
    [
      -0.48274908741716016,
      -0.33658603380554575,
      0.8084943787342933
    ],
    [
      -0.5005964044528717,
      -0.3734935048676044,
      0.7809646865707627
    ],
    [
      -0.5005705546357665,
      -0.37355725550676555,
      0.7809507645747549
    ],
    [
      -0.5151376759049995,
      -0.4056977052015293,
      0.7550116203459445
    ],
    [
      -0.5145133580828007,
      -0.4072803216273985,
      0.7545851469313735
    ],
    [
      -0.5310874767460011,
      -0.43828507471569145,
      0.7251567315587897
    ],
    [
      -0.5326786367187167,
      -0.43828640408297004,
      0.7239879128683772
    ],
    [
      -0.5451917050844581,
      -0.46270137608357426,
      0.699051815874523
    ],
    [
      -0.5411811076783583,
      -0.47293484493265736,
      0.6953097447472951
    ],
    [
      -0.5526867874922193,
      -0.4957898783723561,
      0.6698729069271683
    ],
    [
      -0.6245545310973902,
      -0.2685672280187706,
      0.733350722178708
    ],
    [
      -0.70526235460551,
      -0.2409576094876677,
      0.6667416603200077
    ],
    [
      -0.7266923240387719,
      -0.2280960684649844,
      0.6479895444634471
    ],
    [
      -0.7568065255156033,
      -0.2027772322726848,
      0.6213897947414571
    ],
    [
      -0.7847300410132894,
      -0.16237387676492027,
      0.5981918478846161
    ],
    [
      -0.6135282156267575,
      -0.3634154563932753,
      0.7010794068322891
    ],
    [
      -0.6611129310472198,
      -0.39160164348517235,
      0.6399826913455284
    ],
    [
      -0.6485108621452933,
      -0.4229229375951298,
      0.6329058781015344
    ],
    [
      0.46637183823689116,
      -0.2795404032327616,
      0.8392582865006506
    ],
    [
      0.5331070477432984,
      -0.26598405659046576,
      0.8031496481267388
    ],
    [
      0.5193079219905353,
      -0.3310998869360035,
      0.787840178607843
    ],
    [
      0.5361955220753462,
      -0.26263425562484133,
      0.802195493554241
    ],
    [
      0.45958581271769955,
      -0.27487573004969834,
      0.8445260290708967
    ],
    [
      0.4521574987130735,
      -0.25094313201944063,
      0.855909540109123
    ],
    [
      0.48195144110846394,
      -0.21751680427785117,
      0.848769255021779
    ],
    [
      0.5295007030713407,
      -0.238976981851295,
      0.8139527059923086
    ],
    [
      0.49495474101047615,
      -0.17148885013575402,
      0.8518282565343612
    ],
    [
      0.5247114642420477,
      -0.1446368953994516,
      0.838902883403183
    ],
    [
      0.5372647945849748,
      -0.154276504689169,
      0.8291835144287769
    ],
    [
      0.5677120712580142,
      -0.15940484937682078,
      0.8076466418818867
    ],
    [
      0.5821158666554216,
      -0.1920767345965696,
      0.7900934411920697
    ],
    [
      0.5607351268029707,
      -0.2586530778380462,
      0.7865587726890865
    ],
    [
      0.6176842820427392,
      -0.20134223935520382,
      0.7602153841963327
    ],
    [
      0.5768220505950927,
      -0.6063696126625944,
      0.5473501756523766
    ],
    [
      0.5864201404374206,
      -0.587606437467286,
      0.5575213839274332
    ],
    [
      0.6052103874802343,
      -0.5377330326614874,
      0.5869953768733656
    ],
    [
      0.6169826809238368,
      -0.5537591382405961,
      0.5591808189262819
    ],
    [
      0.5967236636796796,
      -0.4990056767772216,
      0.6284219949594442
    ],
    [
      0.40637384587036685,
      -0.22553363804367488,
      0.8854348510778824
    ],
    [
      0.4528736821687111,
      -0.171332971903338,
      0.8749573936699565
    ],
    [
      0.417261806868013,
      -0.1474514923119519,
      0.8967444685885826
    ],
    [
      0.4464150801478524,
      -0.1577536421376266,
      0.8808106292551766
    ],
    [
      0.06386800013965209,
      -0.40733261728957726,
      0.9110439163125915
    ],
    [
      0.08044958674379157,
      -0.47422282624916323,
      0.8767214922978729
    ],
    [
      0.05548344207737384,
      -0.42825431952468374,
      0.9019533388505732
    ],
    [
      0.10107730874192133,
      -0.5192219512437913,
      0.8486412333866887
    ],
    [
      0.0790421421060229,
      -0.4791008106732307,
      0.8741937731324472
    ],
    [
      0.11570351509896147,
      -0.5658473455329048,
      0.8163513202948286
    ],
    [
      0.09803359246480668,
      -0.5304212756277958,
      0.8420467238282126
    ],
    [
      0.13119041272203927,
      -0.6098914392438995,
      0.7815507072140783
    ],
    [
      0.11406575738222051,
      -0.5725323327561219,
      0.8119086961855094
    ],
    [
      -0.3425482474576258,
      -0.19957943951512389,
      0.9180570491459331
    ],
    [
      -0.3620315902991509,
      -0.1916080538238905,
      0.912260643311597
    ],
    [
      -0.3875372410216667,
      -0.22963685467172595,
      0.8927943782292713
    ],
    [
      -0.3342776530744386,
      -0.4721565842564139,
      0.8156755547387461
    ],
    [
      -0.3527291071445286,
      -0.4965245262368833,
      0.7931239321936152
    ],
    [
      -0.38657392251704187,
      -0.4817105985851871,
      0.7864575650602446
    ],
    [
      -0.38747804631423,
      -0.45164247492300974,
      0.8036664970433481
    ],
    [
      -0.3999216892082677,
      -0.5147599348036552,
      0.7583434921074633
    ],
    [
      -0.4001474746394638,
      -0.48833780306840757,
      0.7755051183802599
    ],
    [
      -0.3476660787166211,
      -0.5117988296764395,
      0.7856145719445605
    ],
    [
      -0.36515868185984823,
      -0.5319161593872385,
      0.7640185445688528
    ],
    [
      -0.4118769290937798,
      -0.5212013704136761,
      0.7474667395671752
    ],
    [
      -0.3606366109992058,
      -0.5460993893618045,
      0.7561194956788722
    ],
    [
      -0.37821209836901337,
      -0.564809585174883,
      0.7334478448682527
    ],
    [
      -0.412041394094295,
      -0.5456570647217701,
      0.7297124483466428
    ],
    [
      -0.42581043301794025,
      -0.5522554300604466,
      0.7167282714542698
    ],
    [
      -0.3743839337462191,
      -0.57758691200899,
      0.7254171415321159
    ],
    [
      -0.38913605977085985,
      -0.5938678773233846,
      0.7041974661055144
    ],
    [
      -0.42624727605055923,
      -0.5746555321426158,
      0.6986302878041901
    ],
    [
      -0.43648682335383227,
      -0.602111484518783,
      0.6685364711435479
    ],
    [
      -0.4359732869456894,
      -0.5798552188345402,
      0.6882551984984342
    ],
    [
      -0.38541098141632,
      -0.6064927985856654,
      0.695431420535078
    ],
    [
      -0.39942444057728405,
      -0.6213215024367283,
      0.6741065990474283
    ],
    [
      -0.3955711795109796,
      -0.6338947431103431,
      0.6646058204660599
    ],
    [
      -0.40773990778966096,
      -0.6464264990516225,
      0.6448883228277137
    ],
    [
      -0.4461918693764083,
      -0.6282834071122241,
      0.637316856869361
    ],
    [
      -0.4456713202442604,
      -0.6069254981957218,
      0.6580414226715615
    ],
    [
      -0.40257471413408086,
      -0.6618663001821968,
      0.6323500614556727
    ],
    [
      -0.41091735183642725,
      -0.6710902133133562,
      0.61707767384242
    ],
    [
      -0.4514745250803564,
      -0.6547086013370866,
      0.6062403818112931
    ],
    [
      -0.45097514333959837,
      -0.6310315049734225,
      0.6312057190970358
    ],
    [
      -0.40461300579116527,
      -0.6892365415410241,
      0.6010335309691188
    ],
    [
      -0.4110187517695082,
      -0.6975698394580101,
      0.5869070665551417
    ],
    [
      -0.45286726405987154,
      -0.6782030153113505,
      0.578750301222832
    ],
    [
      -0.45233932098739904,
      -0.6552180093299957,
      0.6050442123831087
    ],
    [
      -0.45432233784462045,
      -0.7006205551384505,
      0.5502018275622937
    ],
    [
      -0.45343216905602046,
      -0.6784626943786144,
      0.5780031491278081
    ],
    [
      -0.4058747205556314,
      -0.7128804759090626,
      0.5718978390250803
    ],
    [
      -0.40972896218315585,
      -0.7191016863086187,
      0.5612619195138888
    ],
    [
      -0.451160896141687,
      -0.7042722043132755,
      0.5481373076377395
    ],
    [
      -0.4521703362278429,
      -0.7224738383041726,
      0.523042579530229
    ],
    [
      -0.40362636829595794,
      -0.7365279998321352,
      0.5427819638487353
    ],
    [
      -0.4057506738872686,
      -0.7403614358793307,
      0.5359396746861752
    ],
    [
      -0.4464917145596122,
      -0.7284535723489907,
      0.5196157635807553
    ],
    [
      -0.39799038961900335,
      -0.761147813337008,
      0.5121109801822307
    ],
    [
      -0.43823309224910356,
      -0.7517332367445884,
      0.49279701463309744
    ],
    [
      -0.44728036635019597,
      -0.7430920606520235,
      0.497749398064492
    ],
    [
      -0.3894337006556924,
      -0.7791625025341843,
      0.4911692044889214
    ],
    [
      -0.42739686868208326,
      -0.7744125049972834,
      0.4664945752574007
    ],
    [
      -0.43915337342100014,
      -0.7640442380585154,
      0.4726316926556432
    ],
    [
      -0.39618097142425607,
      -0.7629297493422547,
      0.5108608768049254
    ],
    [
      -0.3832016700489393,
      -0.7850280899298749,
      0.48671077458050593
    ],
    [
      -0.37635433394227186,
      -0.8002773040260688,
      0.46681222347281787
    ],
    [
      -0.41724141763456035,
      -0.7942214533132814,
      0.4417260265223698
    ],
    [
      -0.427339660228422,
      -0.785334863765195,
      0.4479173657615426
    ],
    [
      -0.3683304767069539,
      -0.80747248446997,
      0.4607828629112874
    ],
    [
      -0.36316793167140976,
      -0.8175644259852768,
      0.4468752205805053
    ],
    [
      -0.4066274918439508,
      -0.8143686445830451,
      0.41407462322227834
    ],
    [
      -0.41621858571314235,
      -0.8058491065075671,
      0.4211523553868686
    ],
    [
      -0.34593412631060505,
      -0.8321269448338999,
      0.4334677934231309
    ],
    [
      -0.38934928764016213,
      -0.8350986294880495,
      0.388609587171083
    ],
    [
      -0.40465596190058056,
      -0.822116358336576,
      0.40047252821351237
    ],
    [
      -0.33992875727020233,
      -0.8352579956611398,
      0.43219500305402786
    ],
    [
      -0.33288464558141395,
      -0.849416235482441,
      0.40948732780755837
    ],
    [
      -0.3700166101567262,
      -0.8531688033139575,
      0.3676828813800757
    ],
    [
      -0.3877414392095786,
      -0.8389647084144354,
      0.3818308452112875
    ],
    [
      -0.3677767560177188,
      -0.8572823798527359,
      0.36028763360281013
    ],
    [
      -0.3000463711930202,
      -0.8732731415161732,
      0.3838830491704135
    ],
    [
      -0.33568627143785607,
      -0.8771957583940166,
      0.34328170446980716
    ],
    [
      -0.35073003051336404,
      -0.8701485630762824,
      0.3461645907258217
    ],
    [
      -0.2940810449596805,
      -0.8747763375494044,
      0.385074925513299
    ],
    [
      -0.2656621573492073,
      -0.892939262184144,
      0.3634323763819089
    ],
    [
      -0.30528698478032806,
      -0.9011980134904636,
      0.30763939507900784
    ],
    [
      -0.32967215466206456,
      -0.8853401335281003,
      0.32785533151821344
    ],
    [
      -0.2588089459041849,
      -0.9236010036241699,
      0.2828057913558187
    ],
    [
      -0.2992461081990473,
      -0.9077693512530572,
      0.2939499475307451
    ],
    [
      -0.2222027848437818,
      -0.9079698615047626,
      0.3552698312644778
    ],
    [
      -0.19906037553481917,
      -0.9208689137806813,
      0.33522441815047543
    ],
    [
      -0.2396172623525899,
      -0.9285327757452094,
      0.2835673675681788
    ],
    [
      -0.0755790351821136,
      -0.9496925205743137,
      0.3039275009046527
    ],
    [
      -0.03607486769717079,
      -0.9355642759602109,
      0.3513091081479072
    ],
    [
      -0.009668905401017785,
      -0.9336257560508693,
      0.35811933752143144
    ],
    [
      0.02378457044614895,
      -0.9519466160993832,
      0.30533904811803164
    ],
    [
      0.01622022429010841,
      -0.9547740453533731,
      0.29688958662023435
    ],
    [
      -0.06429710197705114,
      -0.9567086411142575,
      0.28385640506189674
    ],
    [
      0.05193884559412921,
      -0.9492229039540628,
      0.3102873425187775
    ],
    [
      0.003893338987719502,
      -0.9302713343451299,
      0.36685158634965503
    ],
    [
      0.060079621819691904,
      -0.9441287401549909,
      0.3240545649352165
    ],
    [
      0.05611402035526364,
      -0.9478763919704628,
      0.31365835277356585
    ],
    [
      0.019896810234285252,
      -0.9221682328550985,
      0.3862769307833509
    ],
    [
      0.09015157643586158,
      -0.9332464612494319,
      0.34774090330523594
    ],
    [
      0.017003101944234746,
      -0.9229675664715488,
      0.3845019710818934
    ],
    [
      0.0375343042047382,
      -0.9113237871520015,
      0.4099757687703014
    ],
    [
      0.04338032816748304,
      -0.9095929332475007,
      0.4132297701210421
    ],
    [
      0.059806245379967635,
      -0.8984339017162587,
      0.4350169390500227
    ],
    [
      0.060370938193580435,
      -0.8968655719571696,
      0.4381637772107204
    ],
    [
      0.07683657389266532,
      -0.8849076336929748,
      0.4593850462785407
    ],
    [
      0.07728021915253601,
      -0.8833591889659299,
      0.46228163601552513
    ],
    [
      0.09622634642915058,
      -0.8685416393919245,
      0.4861850582805743
    ],
    [
      0.09650239442336588,
      -0.8672335674690409,
      0.48846005704200385
    ],
    [
      0.11410081519308406,
      -0.8525899361197572,
      0.5099719647192207
    ],
    [
      0.11472902381000072,
      -0.8483227239856127,
      0.5169001906221686
    ],
    [
      0.12995788878923037,
      -0.8350099874783354,
      0.5346674367799821
    ],
    [
      0.13058453406320145,
      -0.8300445970279681,
      0.5421933662524604
    ],
    [
      0.1458692356432275,
      -0.8160886225547037,
      0.5592150983562827
    ],
    [
      0.14663552713710054,
      -0.8048447921553751,
      0.5750851091113348
    ],
    [
      0.1546307422860362,
      -0.7971377481766835,
      0.5836614977637945
    ],
    [
      0.15558982456543943,
      -0.7820034248482501,
      0.6035415893020986
    ],
    [
      0.1640168885940347,
      -0.7737688004302389,
      0.61186624660679
    ],
    [
      0.16474223362211152,
      -0.7537844242503945,
      0.6361360217899148
    ],
    [
      0.16826236187307805,
      -0.750207064778675,
      0.6394350143158085
    ],
    [
      0.16904567605379042,
      -0.7236722293039926,
      0.6691203658099988
    ],
    [
      0.1701772805788922,
      -0.7224830579805832,
      0.6701178434468061
    ],
    [
      0.17145182300389414,
      -0.6950642959732689,
      0.6982047671362789
    ],
    [
      0.16977901056811354,
      -0.663634000469487,
      0.7285362043106557
    ],
    [
      0.1696088047317338,
      -0.6934236906668524,
      0.7002831131616941
    ],
    [
      0.7900536875311194,
      -0.6124650189164256,
      -0.026490968690913354
    ],
    [
      0.800426038755072,
      -0.5954792397938315,
      -0.06872140465258536
    ],
    [
      0.7954479936702546,
      -0.6028197819562237,
      -0.06221575241221152
    ],
    [
      0.8027578941686195,
      -0.5889895343229963,
      -0.09311869741326599
    ],
    [
      0.8061550546863261,
      -0.5836168063895009,
      -0.09749590300831354
    ],
    [
      0.06978455372981135,
      -0.9964920897230914,
      0.046191245707788806
    ],
    [
      0.15159392834757504,
      -0.9873602752423163,
      0.0462489757893931
    ],
    [
      0.1555086107303925,
      -0.9873707144149944,
      0.030267875781544266
    ],
    [
      0.14580376372271475,
      -0.98931344575504,
      0.0004105271980388809
    ],
    [
      0.06978636794434906,
      -0.9965547268486057,
      0.04481672951964322
    ],
    [
      0.06665194026027449,
      -0.9961303239906599,
      0.05728783889974829
    ],
    [
      0.06643556097601148,
      -0.9942488769186325,
      0.08399694627687745
    ],
    [
      0.07648956766154127,
      -0.9930981473628117,
      0.08891240489100334
    ],
    [
      0.15594036810338632,
      -0.9851738439859282,
      0.07151991835684839
    ],
    [
      0.15736008066645948,
      -0.9854000641307412,
      0.06499629700049432
    ],
    [
      0.16561250165675656,
      -0.9807759975439416,
      0.10320340079995957
    ],
    [
      0.10269258738865415,
      -0.9882803564907338,
      0.11294321347461099
    ],
    [
      0.16545232356476733,
      -0.9807020718880766,
      0.104158412149251
    ],
    [
      0.11636574343028176,
      -0.9819261278225349,
      0.14926517763819103
    ],
    [
      0.17210868777818514,
      -0.9769464307461931,
      0.1263102174946462
    ],
    [
      0.11834811436694606,
      -0.9723281008509657,
      0.20142439802899395
    ],
    [
      0.1838628853743691,
      -0.972832001441779,
      0.14068523857389606
    ],
    [
      0.18298825862888363,
      -0.9733770226359554,
      0.13803068140211275
    ],
    [
      0.11203611187678633,
      -0.9783046164245238,
      0.17426413032519839
    ],
    [
      0.12488129904267511,
      -0.9636642732131532,
      0.23612672377767666
    ],
    [
      0.20518254516881182,
      -0.9649586883238832,
      0.1635691076771507
    ],
    [
      0.11715510593879007,
      -0.968531198316967,
      0.21959507972441178
    ],
    [
      0.11922173198173722,
      -0.965601430670202,
      0.23108452070819027
    ],
    [
      0.1343270188811849,
      -0.9590528427582785,
      0.2493469406184052
    ],
    [
      0.15534912118910857,
      -0.9508641898442803,
      0.2678132614669258
    ],
    [
      0.22326252398727525,
      -0.958096644222375,
      0.1794565844784057
    ],
    [
      0.21013020431775953,
      -0.9635525748479513,
      0.16556488980837653
    ],
    [
      0.2425940738427571,
      -0.9519137241200075,
      0.18710525692335084
    ],
    [
      0.15651565241185042,
      -0.9502252291209805,
      0.26939722435851676
    ],
    [
      0.22118548171625094,
      -0.9453964226897533,
      0.2393795869395871
    ],
    [
      0.3338015916068004,
      -0.9240823572103675,
      0.18614052361938224
    ],
    [
      0.3290220512310711,
      -0.9262400533893171,
      0.18391262409376152
    ],
    [
      0.42352764138366844,
      -0.8907394685137887,
      0.16494707095235098
    ],
    [
      0.3868913960565864,
      -0.912107117751133,
      0.135556827216878
    ],
    [
      0.4495320834311457,
      -0.8759376631234507,
      0.17508316963055506
    ],
    [
      0.5111026565387531,
      -0.8415480086703319,
      0.1748457136507162
    ],
    [
      0.49804242002885235,
      -0.8503540192503269,
      0.16985814610026448
    ],
    [
      0.5525099962409482,
      -0.8233400194860286,
      0.12978411446156718
    ],
    [
      0.5467168215099121,
      -0.82701021666341,
      0.1309764047927666
    ],
    [
      0.5236802778323091,
      -0.8384915386731536,
      0.15063500981844472
    ],
    [
      0.5684032290330774,
      -0.814561359715559,
      0.11579102073611174
    ],
    [
      0.5753584684870845,
      -0.8098675371478579,
      0.11435560770797273
    ],
    [
      0.598263670130976,
      -0.7958611123367606,
      0.09319694668554691
    ],
    [
      0.6183895697201732,
      -0.7817302095213473,
      0.0805743109372301
    ],
    [
      0.6020984462612258,
      -0.793925488236024,
      0.08461548403814004
    ],
    [
      0.65476943890394,
      -0.7533744216953403,
      0.060860189061742384
    ],
    [
      0.6338131415951523,
      -0.7707028061979398,
      0.06555978996232459
    ],
    [
      0.6779601153477482,
      -0.7345208536157832,
      0.029140995199359466
    ],
    [
      0.6594408041650941,
      -0.7501803397704561,
      0.048654738967310866
    ],
    [
      0.7005557202172381,
      -0.7135533464651685,
      0.007956420003109511
    ],
    [
      0.6836115944008359,
      -0.7297427594343382,
      0.012275709914489
    ],
    [
      0.7140555927687862,
      -0.7000507337409438,
      -0.00731987871372112
    ],
    [
      0.7281897403477964,
      -0.6852823552613482,
      -0.011304672470628448
    ],
    [
      0.7458141189086612,
      -0.6646531067295742,
      -0.04469393416586442
    ],
    [
      0.7332459019238156,
      -0.6793366641125402,
      -0.02919150740156945
    ],
    [
      0.7586524201274967,
      -0.6478965636629489,
      -0.06838529248628365
    ],
    [
      0.7482308551038572,
      -0.6611584062570132,
      -0.05495588509192555
    ],
    [
      0.7621244221351436,
      -0.6418150926863174,
      -0.08508673213390694
    ],
    [
      0.7669310643255499,
      -0.6350983897583943,
      -0.0920150960374116
    ],
    [
      0.7715604897425036,
      -0.625383788686028,
      -0.11657412884949017
    ],
    [
      0.8587166532841662,
      -0.32522429332711583,
      0.3960238230237157
    ],
    [
      0.8477311178801389,
      -0.3144011078317066,
      0.42720474619541127
    ],
    [
      0.8557821023011335,
      -0.3149646373169403,
      0.4104074446460011
    ],
    [
      0.8391592176106029,
      -0.30152815697342544,
      0.4526506136650761
    ],
    [
      0.8433921333384911,
      -0.30230393046419873,
      0.44418694605835246
    ],
    [
      0.8269042781814153,
      -0.2866129897469452,
      0.4838205337039654
    ],
    [
      0.8335734664028283,
      -0.28765585997939774,
      0.47160299228131086
    ],
    [
      0.8137421523891396,
      -0.27232628588249347,
      0.5134803827241474
    ],
    [
      0.8209479608845417,
      -0.2733579915301966,
      0.5013181165548379
    ],
    [
      0.8002165385148797,
      -0.25720735058953687,
      0.5417544372591471
    ],
    [
      0.8067280562859643,
      -0.2580247567316698,
      0.5316136455308805
    ],
    [
      0.7829025099201748,
      -0.24091051491617396,
      0.5736076915135591
    ],
    [
      0.7919147274280635,
      -0.2414732973360991,
      0.5608580133653862
    ],
    [
      0.7732566706812942,
      -0.22410611192226407,
      0.5931699350489421
    ],
    [
      0.7661504039478217,
      -0.22323105760131792,
      0.6026453795166661
    ],
    [
      0.74637304488766,
      -0.20620253006355485,
      0.6327778397356467
    ],
    [
      0.7564108250224751,
      -0.2074175551712711,
      0.6203391182213088
    ],
    [
      0.7220658367338754,
      -0.19231489405017216,
      0.6645569267927913
    ],
    [
      0.7377410388598012,
      -0.1930666963215501,
      0.6468874788968663
    ],
    [
      0.7133633269158711,
      -0.1795783643360913,
      0.6773952870177751
    ],
    [
      0.6966454416469865,
      -0.17910493819730428,
      0.6946988914240578
    ],
    [
      0.6652106814140859,
      -0.16445169028693116,
      0.7283202529755567
    ],
    [
      0.6870713713023968,
      -0.1646353768401604,
      0.7076921106168573
    ],
    [
      0.6343581219258971,
      -0.1528563160468055,
      0.7577761673418133
    ],
    [
      0.6576638452232336,
      -0.15388967220987007,
      0.7374254101082559
    ],
    [
      0.5873623213505016,
      -0.1431939077847797,
      0.7965557157105045
    ],
    [
      0.6278434015938067,
      -0.14365636283838848,
      0.7649676545391728
    ],
    [
      0.23938871507331666,
      0.14158625715177925,
      -0.9605448323120044
    ],
    [
      0.2450694079099451,
      0.12055421833511608,
      -0.9619811150684187
    ],
    [
      0.22793651190704758,
      0.14960773242000913,
      -0.9621135447231742
    ],
    [
      0.13339873615309336,
      0.18726962771442576,
      -0.9732085407190268
    ],
    [
      0.1099863476361853,
      0.19481731318059783,
      -0.9746533834234328
    ],
    [
      0.08605352533186145,
      0.17740848909115092,
      -0.980367797704695
    ],
    [
      0.051915808634447384,
      0.2218289967569142,
      -0.9737025444208577
    ],
    [
      0.10917454634044858,
      0.20210066405451516,
      -0.9732606228652638
    ],
    [
      0.08893807770158076,
      0.22820702510080942,
      -0.9695419392833845
    ],
    [
      0.057252234766108294,
      0.2261526163812401,
      -0.9724079266019
    ],
    [
      0.049372256778713985,
      0.3405952693409669,
      -0.9389127982742226
    ],
    [
      -0.07045423509063585,
      0.3599229344257108,
      -0.9303180542331633
    ],
    [
      -0.08625363127206742,
      0.2852559498104752,
      -0.9545623888411411
    ],
    [
      -0.07830298209724315,
      0.2926353369908594,
      -0.9530126979945887
    ],
    [
      -0.09162654974761582,
      0.22308237646716997,
      -0.9704838116584468
    ],
    [
      -0.5083476654977049,
      0.7502021425239971,
      -0.42282312653808063
    ],
    [
      -0.5224635207704925,
      0.7252368146142789,
      -0.4484009725594216
    ],
    [
      -0.5260376265485762,
      0.7216340380435435,
      -0.4500319217479025
    ],
    [
      -0.5374364431639296,
      0.7005543784907736,
      -0.46945248144696206
    ],
    [
      -0.559290532745672,
      0.684689710720803,
      -0.46732654537713275
    ],
    [
      -0.5666753956379074,
      0.6690052338966159,
      -0.480948014859772
    ],
    [
      -0.5848846064637974,
      0.647540133936788,
      -0.4884688035717486
    ],
    [
      -0.6745107037667512,
      0.548009383922085,
      -0.49469285990139267
    ],
    [
      -0.658432725320488,
      0.5631468361237457,
      -0.4993315403525496
    ],
    [
      -0.6941859112721039,
      0.5363587034058437,
      -0.480026313728863
    ],
    [
      -0.7119958602603228,
      0.5326231402871372,
      -0.4575745681337977
    ],
    [
      -0.7237161350551006,
      0.5361691242095005,
      -0.43446245649690457
    ],
    [
      -0.9162613445275632,
      -0.2792588942941796,
      0.28719265046678055
    ],
    [
      -0.8091101983846298,
      -0.5796461754162742,
      -0.09670055943618355
    ],
    [
      -0.8087521106999989,
      -0.5799837884353345,
      -0.09766692679968074
    ],
    [
      -0.9828811218140394,
      -0.0038229409861712826,
      -0.18420120928971023
    ],
    [
      -0.9977031184695324,
      0.010883404248305957,
      0.06685834957683466
    ],
    [
      -0.9874899283808791,
      0.005717198205876412,
      0.15757840902547807
    ],
    [
      -0.9725845834047065,
      -0.012622253678550032,
      0.23220660377251884
    ],
    [
      -0.9644503115810856,
      -0.05177153073445937,
      0.25914340643079836
    ],
    [
      -0.9553821091011002,
      -0.08935454608363122,
      0.28153293005210195
    ],
    [
      -0.944507836351753,
      -0.12924647288511085,
      0.3019938680120651
    ],
    [
      -0.9316352359861325,
      -0.17141478750312364,
      0.32042590047360725
    ],
    [
      -0.9257098347555753,
      -0.1897140635630037,
      0.3272153357090982
    ],
    [
      -0.9860599256542436,
      0.14964716402309602,
      -0.07274303622060485
    ],
    [
      -0.9727005935038128,
      -0.0005684899543003055,
      0.23206299191491558
    ],
    [
      -0.9250629006000304,
      0.25692464259828257,
      0.2797290795737961
    ],
    [
      -0.7515502639503842,
      0.5560103665582362,
      0.3549995394868616
    ],
    [
      -0.7544904788413622,
      0.5634078121509615,
      0.33662405520847544
    ],
    [
      -0.7638194057091731,
      0.5130192296382604,
      0.3916518677134727
    ],
    [
      -0.7660306484040135,
      0.5147524620942608,
      0.38500253047690886
    ],
    [
      -0.7769694706343393,
      0.45071159593884624,
      0.4395196229845178
    ],
    [
      -0.8032537039163847,
      0.44877319495520185,
      0.3916453837776072
    ],
    [
      -0.7948483035610379,
      0.5049741266729886,
      0.3364777937947656
    ],
    [
      -0.8281142007407547,
      0.43003284840801187,
      0.3595811727852181
    ],
    [
      -0.9093834567373241,
      0.2903491829506038,
      0.29785748366020975
    ],
    [
      0.5750402057800477,
      -0.5026361338212423,
      -0.645511950868204
    ],
    [
      0.5717100354631404,
      -0.4989839243848821,
      -0.6512777276678492
    ],
    [
      0.599767180837245,
      -0.501986629189443,
      -0.6231281994145058
    ],
    [
      0.6045436806600458,
      -0.5069774797501755,
      -0.6144109155932737
    ],
    [
      0.6230470795553826,
      -0.5096997592292573,
      -0.5933114629763578
    ],
    [
      0.6200967571665932,
      -0.5064043508022944,
      -0.5991949976760336
    ],
    [
      0.6490435239173967,
      -0.5089802139518808,
      -0.5654039669708599
    ],
    [
      0.6727338406524832,
      -0.5061126247197847,
      -0.5397028726440223
    ],
    [
      0.6518839981143005,
      -0.5070562514260977,
      -0.5638627589158806
    ],
    [
      0.6977656647983841,
      -0.5032588229494779,
      -0.509758407632454
    ],
    [
      0.675440923138075,
      -0.504199838982744,
      -0.538109730185359
    ],
    [
      0.7011715701253253,
      -0.5007675617937288,
      -0.507533524314552
    ],
    [
      0.7256206672212703,
      -0.5057324822276975,
      -0.46659329583821735
    ],
    [
      0.7202891630947622,
      -0.4988887314973383,
      -0.4819684171325168
    ],
    [
      0.7577425378534527,
      -0.48998451776235585,
      -0.4309772832535382
    ],
    [
      0.7433131097986048,
      -0.49203440890213734,
      -0.4531972652806411
    ],
    [
      0.7775581225944393,
      -0.4836159193397965,
      -0.40189427533685296
    ],
    [
      0.762732833589835,
      -0.48579657007119653,
      -0.4268961431906854
    ],
    [
      0.7952692195637567,
      -0.47833891903602244,
      -0.372476505232079
    ],
    [
      0.7807899776170487,
      -0.48071929685817555,
      -0.39909393440761515
    ],
    [
      0.8118456906474012,
      -0.4744087819758185,
      -0.34035699223236826
    ],
    [
      0.7963578711650725,
      -0.47729649802600266,
      -0.37148646544059694
    ],
    [
      0.82619453425877,
      -0.46980855087035023,
      -0.31093812421450623
    ],
    [
      0.8132569471138273,
      -0.4729613990987042,
      -0.33899948810240665
    ],
    [
      0.1998136827536832,
      -0.9790184352008456,
      -0.039967433258818484
    ],
    [
      0.20249263308987903,
      -0.9791010456621123,
      -0.018917608931517598
    ],
    [
      0.2060752969367345,
      -0.9767163860624336,
      -0.059649586667268405
    ],
    [
      0.20472441167163527,
      -0.9763392166891537,
      -0.06963942289043122
    ],
    [
      0.21195756051177428,
      -0.9728897983769118,
      -0.0925172024870479
    ],
    [
      0.21123829264059552,
      -0.9725467907625077,
      -0.0976274730792169
    ],
    [
      0.22032838115230455,
      -0.9671757332789648,
      -0.12659583490423953
    ],
    [
      0.2199925645369763,
      -0.9669377225234103,
      -0.1289756268047757
    ],
    [
      0.22739703527058383,
      -0.9614989790631782,
      -0.154305870305102
    ],
    [
      0.22753170335694242,
      -0.961608079581595,
      -0.15342498248618244
    ],
    [
      0.23604912351912835,
      -0.9544160509880535,
      -0.18267679902554868
    ],
    [
      0.2502209952144,
      -0.9480975580821509,
      -0.1962153763408406
    ],
    [
      0.23739386730058276,
      -0.9462264756675478,
      -0.21977171909471155
    ],
    [
      0.2439124985908355,
      -0.9367934472002529,
      -0.25084802234389403
    ],
    [
      0.24540465915451118,
      -0.9361447812091289,
      -0.251812433926862
    ],
    [
      0.2514761372501229,
      -0.9262301463868934,
      -0.28081571949923223
    ],
    [
      0.2527728565196265,
      -0.925612992534329,
      -0.2816850565055811
    ],
    [
      0.25844941763332313,
      -0.9152902398972687,
      -0.3089460717889069
    ],
    [
      0.2623653463291034,
      -0.9133578151282106,
      -0.3113549848482133
    ],
    [
      0.2679848915629779,
      -0.9015714275970416,
      -0.33963665708314134
    ],
    [
      0.26868364953927815,
      -0.9011980552196732,
      -0.3400752295280166
    ],
    [
      0.2744847892587623,
      -0.8875236758935325,
      -0.37008083602640734
    ],
    [
      0.27329099518378164,
      -0.8871078252809477,
      -0.37195663494117975
    ],
    [
      0.2788043094605262,
      -0.87262671290642,
      -0.4009872528502316
    ],
    [
      0.2798077766326899,
      -0.872017771651778,
      -0.4016125173090828
    ],
    [
      0.28573863826378443,
      -0.8551833531177548,
      -0.43245215128778297
    ],
    [
      0.2857248744881956,
      -0.8551749498458512,
      -0.43247786215579953
    ],
    [
      0.2921664350758121,
      -0.8361674338672882,
      -0.4641797030837144
    ],
    [
      0.3217913471402943,
      -0.811365454225135,
      -0.48799224235194044
    ],
    [
      0.35473673838854636,
      -0.7908881845377629,
      -0.4986559194434751
    ],
    [
      0.356281674841471,
      -0.7893565043532692,
      -0.49997967679431093
    ],
    [
      0.3645648516738881,
      -0.7828945375851293,
      -0.5041513780040302
    ],
    [
      0.3646383727027875,
      -0.7789773234753075,
      -0.5101305584494122
    ],
    [
      0.3632720618607821,
      -0.7750889541691418,
      -0.5169821294748999
    ],
    [
      0.36333892810550317,
      -0.7681059256986704,
      -0.5272552609787147
    ],
    [
      0.3610460355840927,
      -0.7669321096444939,
      -0.5305288864758035
    ],
    [
      0.4729402741488743,
      -0.7083690047993354,
      -0.5239664589719335
    ],
    [
      0.47577046745244733,
      -0.7097525018542499,
      -0.519513087815613
    ],
    [
      0.49837958353320116,
      -0.7049958426481924,
      -0.5045776972538899
    ],
    [
      0.47339788720993486,
      -0.7092008872412585,
      -0.5224256329099688
    ],
    [
      0.5031275547921686,
      -0.7064025072728769,
      -0.4978535540974338
    ],
    [
      0.5298093431874399,
      -0.7001428597820144,
      -0.47864604434546
    ],
    [
      0.5474292598219891,
      -0.7044128539158346,
      -0.451800549721775
    ],
    [
      0.5802611490803281,
      -0.6828331990683207,
      -0.4438871716079441
    ],
    [
      0.5495568537256182,
      -0.7071303645324618,
      -0.44492011876221915
    ],
    [
      0.5514894181655858,
      -0.70676937885107,
      -0.4430987099618505
    ],
    [
      0.6076932826697674,
      -0.6712387232173456,
      -0.4244378053986118
    ],
    [
      0.6105847304826117,
      -0.6742052905479858,
      -0.4154918929396607
    ],
    [
      0.6299378185427619,
      -0.6654773723564474,
      -0.4003975669895419
    ],
    [
      0.6596078372524449,
      -0.6548147810232468,
      -0.36896490834309664
    ],
    [
      0.6324516913620282,
      -0.6681117144171861,
      -0.39195866510620503
    ],
    [
      0.1375950180766425,
      -0.909807429422016,
      -0.39155849163182727
    ],
    [
      0.05081513204953646,
      -0.9985069811821357,
      0.020040730658496337
    ],
    [
      0.049958479680653735,
      -0.9982543339841097,
      -0.03150293621139583
    ],
    [
      0.042879591657940384,
      -0.998995988011003,
      -0.012975228597916848
    ],
    [
      0.05351687749038574,
      -0.996601322017585,
      -0.06262386746665276
    ],
    [
      0.04665197320800304,
      -0.9979099139462273,
      -0.04471461778471349
    ],
    [
      0.05976016937782156,
      -0.9936199713466486,
      -0.09564556809920373
    ],
    [
      0.0507363843916049,
      -0.9960164929090668,
      -0.07332779249363815
    ],
    [
      0.06444866896684139,
      -0.9898282249449744,
      -0.12683238612706055
    ],
    [
      0.05662378741749989,
      -0.9926638861447126,
      -0.10682769230201954
    ],
    [
      0.07088030563701199,
      -0.9852430952348187,
      -0.15579481879997792
    ],
    [
      0.062384632209248995,
      -0.9889476493726834,
      -0.13450168944797986
    ],
    [
      0.07629103800309962,
      -0.9784168418555905,
      -0.1920420815700088
    ],
    [
      0.06666664121439955,
      -0.9834573860408163,
      -0.16842543985679623
    ],
    [
      0.08866721215471554,
      -0.9710728757358387,
      -0.22171061205733716
    ],
    [
      0.0844706825836162,
      -0.9720068174881492,
      -0.2192429030559892
    ],
    [
      0.07520690113664352,
      -0.9776949505347248,
      -0.19610330369559134
    ],
    [
      0.09875772653827482,
      -0.9636721240189419,
      -0.24815911999725584
    ],
    [
      0.10736472381971314,
      -0.9548162384513679,
      -0.27712590436243495
    ],
    [
      0.09750151872106452,
      -0.962943225808882,
      -0.25146331286267276
    ],
    [
      0.11245319336819509,
      -0.9436073661400876,
      -0.31138307254483527
    ],
    [
      0.11191840790328934,
      -0.9437586108289453,
      -0.31111726801740247
    ],
    [
      0.10265314066529915,
      -0.9526154815832873,
      -0.2863321095500676
    ],
    [
      0.12279198666820984,
      -0.9324773445143986,
      -0.33971772102357234
    ],
    [
      0.120722284608133,
      -0.931228976515042,
      -0.3438585803753346
    ],
    [
      0.5574271256421816,
      -0.7103372533421428,
      -0.4297627090763413
    ],
    [
      0.5831420703257645,
      -0.7086138077904757,
      -0.3972553300144179
    ],
    [
      0.5923409175544724,
      -0.7039442670557132,
      -0.39191160517407536
    ],
    [
      0.6081567054737879,
      -0.7022252836310654,
      -0.3701689784632663
    ],
    [
      0.6140058996467636,
      -0.6990913678718478,
      -0.3664260014873907
    ],
    [
      0.6273449520365234,
      -0.6969648704385843,
      -0.34738779559567073
    ],
    [
      0.6307084394017112,
      -0.6950636079150084,
      -0.34509918200370965
    ],
    [
      0.6472595250120796,
      -0.6919325828962953,
      -0.3198193365129733
    ],
    [
      0.6533815272957432,
      -0.6881405964419273,
      -0.3155235321132652
    ],
    [
      0.666352944984904,
      -0.6849133710200472,
      -0.2947328059580417
    ],
    [
      0.6684196961536305,
      -0.6835636427215019,
      -0.29318229166032367
    ],
    [
      0.6849507852287186,
      -0.6786362913316965,
      -0.2651324308758221
    ],
    [
      0.6981378742888411,
      -0.6744900600205542,
      -0.24013885028651086
    ],
    [
      0.6852780807277438,
      -0.6790177895763758,
      -0.26330361469777175
    ],
    [
      0.7101270122209903,
      -0.6710081574123259,
      -0.21323151549478986
    ],
    [
      0.6989772411505566,
      -0.6756195159420715,
      -0.23445486992544523
    ],
    [
      0.7147790281633045,
      -0.6818405965292207,
      -0.15551315642928198
    ],
    [
      -0.6238496951380293,
      0.6745323408541054,
      -0.39473748114166823
    ],
    [
      -0.6157312792630121,
      0.6695871451384081,
      -0.41536495615606644
    ],
    [
      -0.5866767650419004,
      0.6856771635156271,
      -0.4308795664604377
    ],
    [
      -0.5633145454938234,
      0.7184224797581867,
      -0.40810031047915796
    ],
    [
      -0.635615000420947,
      0.6809038513765436,
      -0.3638179715468567
    ],
    [
      -0.6248663727382273,
      0.6744502442246042,
      -0.39326693769797466
    ],
    [
      -0.636995771234947,
      0.6806929518596903,
      -0.3617920572889026
    ],
    [
      -0.6913802002893268,
      0.6254939510172486,
      -0.36159471219684924
    ],
    [
      -0.6966045231275333,
      0.6197979217543045,
      -0.36137608463663856
    ],
    [
      -0.703154919528218,
      0.5999295690546086,
      -0.3816512430442443
    ],
    [
      -0.697663181190101,
      0.5813008799511823,
      -0.4187545493241711
    ],
    [
      -0.7711625746572393,
      0.4345725160179498,
      0.4652472587451177
    ],
    [
      -0.7771160707338216,
      0.4354343225732906,
      0.454409026464446
    ],
    [
      -0.7512060723663312,
      0.40160901623251155,
      0.5238316856784292
    ],
    [
      -0.7545228309099599,
      0.40299383835673075,
      0.517968400466794
    ],
    [
      -0.7695133074396341,
      0.3231898804985896,
      0.550815369081712
    ],
    [
      -0.7651616846934225,
      0.3709567178839285,
      0.5262306620997174
    ],
    [
      -0.7629687247450929,
      0.29446211812171125,
      0.575474400866035
    ],
    [
      -0.7798485000395382,
      0.29037552514503695,
      0.5545433899911048
    ],
    [
      -0.736198343781233,
      0.28393567108777507,
      0.6143228249851249
    ],
    [
      -0.730130686567563,
      0.26668070962509044,
      0.6291188915032176
    ],
    [
      -0.7218806484867911,
      0.2632546960945236,
      0.6399885110878709
    ],
    [
      -0.7132808332115748,
      0.24077426078376704,
      0.6582235245849484
    ],
    [
      -0.7020373738418376,
      0.21109018039502137,
      0.6801356199097744
    ],
    [
      -0.7025640792202865,
      0.2113554472107634,
      0.6795090797948835
    ],
    [
      -0.7135312000524078,
      0.23781264676120384,
      0.6590283541640691
    ],
    [
      -0.6844173163429306,
      0.17213979129590365,
      0.708477825582808
    ],
    [
      -0.6721505079150258,
      0.14663287253159993,
      0.7257496093024813
    ],
    [
      -0.6837448899560046,
      0.1463716905476915,
      0.7148903787751393
    ],
    [
      -0.6310939832720157,
      0.12320227060119884,
      0.7658600295070698
    ],
    [
      -0.6273234454001134,
      0.09985098282488138,
      0.7723309368918457
    ],
    [
      -0.6304981998464059,
      0.10660323336012272,
      0.7688353338834063
    ],
    [
      -0.5702441405596625,
      0.09076567806048536,
      0.8164454738949761
    ],
    [
      -0.6041055021254057,
      0.05302468602766516,
      0.7951383055629246
    ],
    [
      -0.6249592743972076,
      0.07196430125152524,
      0.777333290609823
    ],
    [
      -0.5990244512191306,
      0.008052049892726749,
      0.8006902468084299
    ],
    [
      -0.6035855496269753,
      -0.014943409740906037,
      0.7971581893117686
    ],
    [
      -0.26164050025524493,
      -0.5304808858411129,
      0.8063090464477087
    ],
    [
      -0.23826674132848796,
      -0.5513950164891975,
      0.7994951505591394
    ],
    [
      -0.18766232398452934,
      -0.6573171990833233,
      0.7298746138522564
    ],
    [
      -0.24918782270579976,
      -0.6505101682999848,
      0.7174551902059587
    ],
    [
      -0.2512415007405934,
      -0.6487491896845379,
      0.7183329292112883
    ],
    [
      -0.2821453977656977,
      -0.6014386900693,
      0.7474392795454096
    ],
    [
      -0.2743898559884753,
      -0.5677346140154511,
      0.7761363378810133
    ],
    [
      -0.14875694092863256,
      -0.788141029566233,
      0.5972479301260352
    ],
    [
      -0.16499320639274556,
      -0.7936104927385581,
      0.585627550290715
    ],
    [
      -0.19456030379325892,
      -0.7844364718882909,
      0.5889021223932933
    ],
    [
      -0.22794652858419,
      -0.7641680928597734,
      0.6033966406614092
    ],
    [
      -0.23745991479828593,
      -0.7494301060577155,
      0.6180350354132942
    ],
    [
      -0.2266440673927742,
      -0.7312153258746146,
      0.64339460203031
    ],
    [
      -0.1422222635385269,
      -0.7530681081557762,
      0.6423871513601886
    ],
    [
      -0.13190291343825628,
      -0.777332679546323,
      0.615106110143472
    ],
    [
      -0.22884671385317962,
      -0.7265656941061125,
      0.6478668641833012
    ],
    [
      -0.7676047107036341,
      0.2113058114036081,
      0.6050891357251863
    ],
    [
      -0.7870678090047278,
      0.22436473341202634,
      0.5746170293590747
    ],
    [
      -0.7922244339313086,
      0.23460028476283454,
      0.5633321867880572
    ],
    [
      -0.7864037480290689,
      0.28258807587679585,
      0.5492841927983028
    ],
    [
      -0.7522621617317877,
      0.20045529101344847,
      0.6276299198821957
    ],
    [
      -0.7664187124399789,
      0.2088217298137178,
      0.6074502797591351
    ],
    [
      -0.7396454376621908,
      0.17187253887132317,
      0.6506799957947313
    ],
    [
      -0.6980690054654743,
      0.1280863147503625,
      0.7044810569363201
    ],
    [
      -0.7391859439948999,
      0.1334625815477641,
      0.6601453472735949
    ],
    [
      -0.6931912363420721,
      0.04814248935777226,
      0.7191440819314209
    ],
    [
      -0.6942171813358076,
      -0.03324607459316968,
      0.7189973599828529
    ],
    [
      -0.7007881623737177,
      -0.0350096954399924,
      0.7125098404247248
    ],
    [
      -0.6536138887187987,
      -0.032205868490455314,
      0.7561426231265271
    ],
    [
      -0.7620442517649006,
      -0.10953464808539637,
      0.6381933243311787
    ],
    [
      -0.7851202982387074,
      -0.1620112286025002,
      0.5977779513333287
    ],
    [
      -0.3928774890074855,
      -0.2872592195360822,
      0.8735727899967433
    ],
    [
      -0.4219333998937083,
      -0.325257398545561,
      0.8462740872468624
    ],
    [
      -0.4015193270638555,
      -0.3190222107848044,
      0.8584911525578842
    ],
    [
      -0.4304099419055031,
      -0.35863173156874795,
      0.8283299843787516
    ],
    [
      -0.44620505231701396,
      -0.3632817967182842,
      0.817879812356257
    ],
    [
      -0.45702084242338953,
      -0.3976527516788887,
      0.7956156350102878
    ],
    [
      -0.46016456918246407,
      -0.39888490786764663,
      0.7931830807225633
    ],
    [
      -0.472683548854885,
      -0.433302351100008,
      0.7673456425712971
    ],
    [
      -0.4767515307345251,
      -0.4346239512508558,
      0.7640746029946166
    ],
    [
      -0.4897413710186516,
      -0.468400512857507,
      0.735360013236779
    ],
    [
      -0.4896909444362842,
      -0.4685712275048109,
      0.7352848316752731
    ],
    [
      -0.49877278412995574,
      -0.49464695285022375,
      0.711723332375187
    ],
    [
      -0.5136518651252241,
      -0.5272291694139055,
      0.6768981935066025
    ],
    [
      -0.4979151873225054,
      -0.4975955538810554,
      0.7102669434736493
    ],
    [
      -0.5104884280395072,
      -0.5264398842468839,
      0.6798989727245366
    ],
    [
      -0.5240525720650414,
      -0.5510031883327834,
      0.6494338982214601
    ],
    [
      -0.5352040074809556,
      -0.5774790413304838,
      0.616501927977805
    ],
    [
      -0.5234153417560553,
      -0.5531619966540879,
      0.648111244673362
    ],
    [
      -0.5344664397021932,
      -0.577314632222483,
      0.6172952618106516
    ],
    [
      -0.5429986391009126,
      -0.5946569651615763,
      0.5929043529266593
    ],
    [
      -0.5896957020721671,
      -0.5706715666584784,
      0.5714831073314168
    ],
    [
      -0.5390223664222038,
      -0.6062116383137138,
      0.5847754595309301
    ],
    [
      -0.5463913165598925,
      -0.6205971885617214,
      0.5624194686683903
    ],
    [
      -0.5914502011876164,
      -0.5931312356272325,
      0.5462435325369451
    ],
    [
      -0.5998138923010609,
      -0.5987846663011618,
      0.5307355443205756
    ],
    [
      -0.5433254576957114,
      -0.6290846867928588,
      0.5559225700243483
    ],
    [
      -0.550050981635214,
      -0.6416533216238398,
      0.5345324428425561
    ],
    [
      -0.6012935711034655,
      -0.6131520766560641,
      0.5123383376656462
    ],
    [
      -0.5502284705550962,
      -0.6635705270023516,
      0.5068755132026215
    ],
    [
      -0.5927461948024084,
      -0.6412001354721805,
      0.48735442423119824
    ],
    [
      -0.6042575657932686,
      -0.6158108020409617,
      0.5056182851433098
    ],
    [
      -0.5450473903426117,
      -0.6539861730362542,
      0.5246193169890938
    ],
    [
      -0.5444329502264694,
      -0.6768212487241779,
      0.4954853781729054
    ],
    [
      -0.5505965959697302,
      -0.6880768245643396,
      0.4726453977391515
    ],
    [
      -0.5944163151680262,
      -0.6563972815573903,
      0.4645555435318082
    ],
    [
      -0.5474898027782356,
      -0.6956327830409544,
      0.4651343322230096
    ],
    [
      -0.5508517868090986,
      -0.7031981194960439,
      0.44952721130811535
    ],
    [
      -0.6037466019374061,
      -0.6749132056068665,
      0.42424309722905185
    ],
    [
      -0.6019801601791535,
      -0.6594328370955719,
      0.4502979237246887
    ],
    [
      -0.6038580570846379,
      -0.6749822410178271,
      0.4239745525435675
    ],
    [
      -0.5434031246919896,
      -0.7198897728358313,
      0.4318237592367484
    ],
    [
      -0.5446353684474488,
      -0.7239224352236597,
      0.4234484894481948
    ],
    [
      -0.5957960464794938,
      -0.6976663527227159,
      0.3978551636940104
    ],
    [
      -0.53907542256525,
      -0.7429701456036755,
      0.3967279313682747
    ],
    [
      -0.5888519822492189,
      -0.7182413933103539,
      0.3706516476919631
    ],
    [
      -0.5963242381636265,
      -0.6990929708973842,
      0.3945458414689473
    ],
    [
      -0.5378457413584676,
      -0.7381412179523682,
      0.40727079549404827
    ],
    [
      -0.5308096374801438,
      -0.758923750503869,
      0.37719473707799744
    ],
    [
      -0.5794892133756852,
      -0.7408167715087949,
      0.3396803830551827
    ],
    [
      -0.5890556425060546,
      -0.7186635917185495,
      0.3695079051522079
    ],
    [
      -0.5264098492079441,
      -0.7634277626744647,
      0.37426023277223935
    ],
    [
      -0.5218716957295145,
      -0.771436717303668,
      0.36405401301474705
    ],
    [
      -0.5585964758441603,
      -0.767743316255969,
      0.3139110981134175
    ],
    [
      -0.5808522475384118,
      -0.7439485623952805,
      0.3303803914271715
    ],
    [
      -0.5402348491616185,
      -0.7912150847858124,
      0.28657459300974897
    ],
    [
      -0.5484240473012612,
      -0.7858982070797207,
      0.28564851207486563
    ],
    [
      -0.5194254438833186,
      -0.7738392198414551,
      0.36245009322910315
    ],
    [
      -0.5111811228763036,
      -0.7887029021036004,
      0.3415283177545895
    ],
    [
      -0.48144650959624746,
      -0.8117587816541897,
      0.3305403739407578
    ],
    [
      -0.4850204881248162,
      -0.8152522209825294,
      0.3164157743890436
    ],
    [
      -0.537604172462163,
      -0.793313930180575,
      0.2857179762155727
    ],
    [
      -0.49265015246237503,
      -0.8362253007056129,
      0.2408797910548039
    ],
    [
      -0.467481766888116,
      -0.8424704878035089,
      0.2677765389411161
    ],
    [
      -0.431404708726303,
      -0.8576121979256118,
      0.27998445538632094
    ],
    [
      -0.41598678244137377,
      -0.8792893911177481,
      0.23195940054641664
    ],
    [
      -0.46539358493062466,
      -0.8620394822635521,
      0.2007404845172202
    ],
    [
      -0.4965903510711545,
      -0.8385958364650319,
      0.22395322343413804
    ],
    [
      -0.39535626419486813,
      -0.896495467102356,
      0.19997325277848146
    ],
    [
      -0.456085563757554,
      -0.8715712567432785,
      0.17985967572220385
    ],
    [
      -0.403754636080856,
      -0.8876821676538323,
      0.22136522552697635
    ],
    [
      -0.3927936903954482,
      -0.8981910488647894,
      0.19739796484435757
    ],
    [
      -0.38965637344536586,
      -0.9011982313615425,
      0.18976211008584737
    ],
    [
      -0.44724408150847733,
      -0.8843534809667056,
      0.13375968098687038
    ],
    [
      -0.45826629481937703,
      -0.8778870644319419,
      0.13894713072095927
    ],
    [
      -0.36481743712755643,
      -0.9195308953119224,
      0.14618881672185408
    ],
    [
      -0.3830614865028934,
      -0.9163664323938396,
      0.11634628975596947
    ],
    [
      -0.41910816752066526,
      -0.9021459227978892,
      0.10237713561442735
    ],
    [
      -0.37771975162229565,
      -0.9086942976146153,
      0.17777081514430979
    ],
    [
      -0.34965288681697976,
      -0.9253712616962991,
      0.14639291911548097
    ],
    [
      -0.32698432372205766,
      -0.9350642098272026,
      0.1368801502784744
    ],
    [
      -0.30789983894629347,
      -0.9446934420515538,
      0.1129247081981361
    ],
    [
      -0.30634636076155813,
      -0.9459996430273738,
      0.10600274826734708
    ],
    [
      -0.3584103546475298,
      -0.9301836672489915,
      0.07937482513145776
    ],
    [
      -0.3408886294168735,
      -0.9386420238200696,
      0.0524031817092197
    ],
    [
      -0.3582848083794899,
      -0.9303712741878564,
      0.07772572450956607
    ],
    [
      -0.29441678534478577,
      -0.9513603896656385,
      0.09073128171962881
    ],
    [
      -0.33426349387790133,
      -0.9411440602962966,
      0.050157496244718304
    ],
    [
      -0.2893267256382083,
      -0.9531642484828983,
      0.08813603829027442
    ],
    [
      -0.2511789105114457,
      -0.967113172430998,
      0.04001582967694082
    ],
    [
      -0.28033499962678926,
      -0.9595612350889764,
      -0.02558366859475268
    ],
    [
      -0.20315316513201892,
      -0.978201146854351,
      0.04302682639557415
    ],
    [
      -0.1756870484126314,
      -0.9840485700403935,
      0.027972715662133434
    ],
    [
      -0.16114094314085445,
      -0.9869029307082186,
      0.00749678619177174
    ],
    [
      -0.16094786036182798,
      -0.9869401710995039,
      0.0066996205139861
    ],
    [
      -0.22131634482170376,
      -0.972097763116728,
      -0.07774969104899661
    ],
    [
      -0.27813327328451243,
      -0.9572999911190735,
      -0.07885815934616133
    ],
    [
      -0.2840040000723842,
      -0.9565620246195109,
      -0.06580897354242249
    ],
    [
      -0.28498643567234366,
      -0.956497387456246,
      -0.062413774698774696
    ],
    [
      -0.24082241656163528,
      -0.9694830527488264,
      0.04590396621459368
    ],
    [
      -0.30465113124594917,
      -0.4876047712719692,
      0.8181865772935744
    ],
    [
      -0.29869989657848334,
      -0.516366652872083,
      0.8025857284961433
    ],
    [
      -0.31666640773267557,
      -0.5262989367377752,
      0.7891335852708148
    ],
    [
      -0.32868945681937745,
      -0.5619590453755967,
      0.7590555133166024
    ],
    [
      -0.31218857988422943,
      -0.5524806598957125,
      0.7728540683926469
    ],
    [
      -0.3252466515860809,
      -0.5863163808515012,
      0.7419216381648671
    ],
    [
      -0.33783742242306525,
      -0.5948305820838422,
      0.7294124036704729
    ],
    [
      -0.335305919532162,
      -0.6164505430317772,
      0.7124315183387933
    ],
    [
      -0.347874880694756,
      -0.625143655520753,
      0.6986977009721438
    ],
    [
      -0.34599411847274664,
      -0.6437511597499074,
      0.6825485435505054
    ],
    [
      -0.3580377103999226,
      -0.6519798473410108,
      0.668379590197646
    ],
    [
      -0.3558760548148793,
      -0.6718601673942897,
      0.6495815184242191
    ],
    [
      -0.3621202207544606,
      -0.6766096284446252,
      0.6411461271947035
    ],
    [
      -0.3594489161707031,
      -0.7000683095565366,
      0.6170095936193861
    ],
    [
      -0.36003930257240485,
      -0.700577163938802,
      0.6160871188157089
    ],
    [
      -0.35733142862531636,
      -0.7242900970521471,
      0.5896762717193068
    ],
    [
      -0.35842172804917266,
      -0.7250970824991523,
      0.5880204807772111
    ],
    [
      -0.3558738507312952,
      -0.7478035019220327,
      0.5604852583956371
    ],
    [
      -0.351458511474639,
      -0.7521676730822314,
      0.5574232738970382
    ],
    [
      -0.3490408594012491,
      -0.7670230572125947,
      0.538373576777949
    ],
    [
      -0.3398891247572368,
      -0.775570282531302,
      0.5319455984648016
    ],
    [
      -0.33791355186843575,
      -0.7881770170195536,
      0.5143845072567955
    ],
    [
      -0.3263620997953706,
      -0.7983091034588206,
      0.5061525018726379
    ],
    [
      -0.3247465190315004,
      -0.8071956574255698,
      0.49292481070668964
    ],
    [
      -0.3092828525758404,
      -0.8199223648694647,
      0.4817379294693489
    ],
    [
      -0.3053894098068487,
      -0.8364898632449945,
      0.4549967220389562
    ],
    [
      -0.2529586752887699,
      -0.8580238172299162,
      0.4469978049860582
    ],
    [
      -0.23062472023173253,
      -0.8596307452674852,
      0.4559026433449396
    ],
    [
      -0.12502863493835265,
      -0.939903748176272,
      0.31772438466326
    ],
    [
      -0.13693826654022634,
      -0.9361168570108306,
      0.3239338530890557
    ],
    [
      -0.15861094936639902,
      -0.9262325809355112,
      0.3419587296072894
    ],
    [
      -0.15041446952897747,
      -0.9185222796820873,
      0.3656395890544919
    ],
    [
      -0.07836089176873166,
      -0.9106424507650541,
      0.40569680489969984
    ],
    [
      -0.06286073185364696,
      -0.9116971026132532,
      0.40602576454878225
    ],
    [
      -0.05262161543449197,
      -0.9063358921133429,
      0.4192686683454599
    ],
    [
      -0.0337142740973176,
      -0.903031746163355,
      0.42824877482983287
    ],
    [
      -0.02223127073483475,
      -0.8954417342492536,
      0.4446232912997292
    ],
    [
      -0.011083058095679024,
      -0.8931697259200869,
      0.44958314750787143
    ],
    [
      0.002734721989890812,
      -0.8831732537994493,
      0.46903893768953914
    ],
    [
      0.007017886828940433,
      -0.8821739756864113,
      0.4708713474889794
    ],
    [
      0.02254762380947353,
      -0.8700539059437475,
      0.49244066181883783
    ],
    [
      0.029546208057836094,
      -0.8683522043068065,
      0.49506713773478583
    ],
    [
      0.04710373385145836,
      -0.8533865816345465,
      0.5191460108132919
    ],
    [
      0.047070720493004,
      -0.8518440129783422,
      0.5216762643874298
    ],
    [
      0.06322609998792386,
      -0.837784439698572,
      0.5423280306966134
    ],
    [
      0.0632314505984576,
      -0.836889737237002,
      0.5437070455333429
    ],
    [
      0.08232556650894594,
      -0.8191655692328444,
      0.5676180681430173
    ],
    [
      0.08191365485318866,
      -0.8126346004152265,
      0.5769880062501973
    ],
    [
      0.09298156899112243,
      -0.8020151258409991,
      0.5900221739478912
    ],
    [
      0.10355436518760118,
      -0.7780313986599435,
      0.6196318553381878
    ],
    [
      0.09202040585779286,
      -0.7896913512300968,
      0.606563941145656
    ],
    [
      0.10227373171953204,
      -0.7644160843346206,
      0.6365596074294122
    ],
    [
      0.11105781297905859,
      -0.7549397722378726,
      0.6463219804940395
    ],
    [
      0.10836767167914793,
      -0.7372969354309853,
      0.666820573122124
    ],
    [
      0.11643245851031592,
      -0.728306046395608,
      0.6752879277677353
    ],
    [
      0.1092002981620166,
      -0.6990793082204423,
      0.7066565047456611
    ],
    [
      -0.05934334642140536,
      -0.9636873879898858,
      0.2603554982418084
    ],
    [
      0.030027359594873574,
      -0.9675271023032304,
      0.250977417279871
    ],
    [
      0.01957855862065184,
      -0.9687097743596677,
      0.2474228225172028
    ],
    [
      0.0529306537132102,
      -0.9673489707192313,
      0.24785946571784578
    ],
    [
      0.06457634021929769,
      -0.9683536725814692,
      0.24108309995074761
    ],
    [
      -0.18683246340921866,
      -0.9562764477300687,
      0.2250088578994266
    ],
    [
      -0.18702447638069933,
      -0.9562316796611452,
      0.2250395966201289
    ],
    [
      -0.21577156130807507,
      -0.94574048734565,
      0.24293530810873934
    ],
    [
      -0.23782304940427126,
      -0.9309284413385117,
      0.2771505624730043
    ],
    [
      -0.1762501825898545,
      -0.9598051201543978,
      0.21842619912099656
    ],
    [
      -0.14868428686252358,
      -0.9654066722364868,
      0.21420303462242377
    ],
    [
      -0.06906141751355326,
      -0.9744272375702797,
      0.21382721831462995
    ],
    [
      -0.115413229059039,
      -0.9742875861285822,
      0.19350319396306143
    ],
    [
      -0.003059780286874724,
      -0.9863618799444777,
      0.16456269181376412
    ],
    [
      -0.008829358994448675,
      -0.986087016043583,
      0.1659952987587588
    ],
    [
      -0.03640477273956503,
      -0.9827813003977484,
      0.18115078832368153
    ],
    [
      0.005899497203136067,
      -0.9871548493945541,
      0.15965744345180127
    ],
    [
      0.011903556539373616,
      -0.9880042474867936,
      0.15396724421047722
    ],
    [
      0.02500146926999241,
      -0.9908549573967569,
      0.1325947960389565
    ],
    [
      0.02593499485980931,
      -0.9912529746208154,
      0.12940214970009892
    ],
    [
      0.036279363719262284,
      -0.9930021580173898,
      0.11238559489958024
    ],
    [
      -0.3957600931523974,
      -0.39624718151363997,
      0.8284697458631197
    ],
    [
      -0.398843884948168,
      -0.38389460441528495,
      0.8327955860475513
    ],
    [
      -0.4143870295661879,
      -0.43503129342674707,
      0.799394247831921
    ],
    [
      -0.41852661111221157,
      -0.4207584993687078,
      0.8048588453883828
    ],
    [
      -0.4350835941027538,
      -0.4574294738743762,
      0.7755388723807733
    ],
    [
      -0.43128508932127824,
      -0.4695486564940451,
      0.7704006950371828
    ],
    [
      -0.44238438876402536,
      -0.5043255342182857,
      0.7415873570344362
    ],
    [
      -0.4479772845725159,
      -0.48932393177803624,
      0.7482502537896788
    ],
    [
      -0.45664671563483716,
      -0.532265593372579,
      0.7128584117562565
    ],
    [
      -0.45996373774538946,
      -0.5232672477343523,
      0.7173735062070572
    ],
    [
      -0.4704121615189782,
      -0.5602793973128711,
      0.6817619784365865
    ],
    [
      -0.4735905791426356,
      -0.5521966732110023,
      0.6861419659531434
    ],
    [
      -0.48157580318431187,
      -0.5855482957367261,
      0.6520873707925959
    ],
    [
      -0.4840088775478246,
      -0.5794609488896092,
      0.6557136685832077
    ],
    [
      -0.49111922364883176,
      -0.6117378510044031,
      0.6201441040686297
    ],
    [
      -0.49391786427787915,
      -0.6049802753933667,
      0.6245350348316295
    ],
    [
      -0.49486353342150824,
      -0.6379907179551249,
      0.5899812938498001
    ],
    [
      -0.49927424654744157,
      -0.6279535845548115,
      0.5969920622414068
    ],
    [
      -0.4975401132149123,
      -0.6621990025379286,
      0.5603091260901117
    ],
    [
      -0.5012670599657741,
      -0.653716251562739,
      0.5669095139755821
    ],
    [
      -0.4967226108510105,
      -0.6859386154304787,
      0.5317469922159158
    ],
    [
      -0.5014981142452135,
      -0.6755584783999102,
      0.5404816219544314
    ],
    [
      -0.49419141178039033,
      -0.7087959979986689,
      0.5033717132930451
    ],
    [
      -0.4994076757097992,
      -0.6980719927284712,
      0.5131154513462222
    ],
    [
      -0.4897425758414458,
      -0.7323714845178225,
      0.4730583664552891
    ],
    [
      -0.49593246656557594,
      -0.7203539652343254,
      0.48491355247855067
    ],
    [
      -0.4899918310732178,
      -0.7370635916862426,
      0.4654516809423842
    ],
    [
      -0.48036614428597907,
      -0.754448631653082,
      0.4472757869822759
    ],
    [
      -0.47269147576310955,
      -0.7732223514489149,
      0.42271735706107966
    ],
    [
      -0.48041011323521987,
      -0.7603216541831328,
      0.437169424001208
    ],
    [
      -0.46155447244241316,
      -0.7914741168819763,
      0.4006696785062495
    ],
    [
      -0.47266788603432075,
      -0.7738044854634227,
      0.4216772317644549
    ],
    [
      -0.4538014449431956,
      -0.8127863447657179,
      0.3652979692386088
    ],
    [
      -0.46187437768219547,
      -0.800976640491964,
      0.38093107070294446
    ],
    [
      -0.45329004264406303,
      -0.8171805017508057,
      0.3560114672282973
    ],
    [
      -0.43350962127613724,
      -0.833649983728987,
      0.34219455414965266
    ],
    [
      -0.42193982223963117,
      -0.8487670297650041,
      0.3186868613424173
    ],
    [
      -0.39735725547641243,
      -0.8693802792188197,
      0.2937433260955223
    ],
    [
      -0.4204635096982207,
      -0.8585036890850498,
      0.29356745875456697
    ],
    [
      -0.3706801424388492,
      -0.8852330090439117,
      0.2809959994387398
    ],
    [
      -0.33761317664506957,
      -0.9059045771830841,
      0.25564475350447247
    ],
    [
      -0.3625604053825144,
      -0.8926034515021847,
      0.26797207096123643
    ],
    [
      -0.30915643639550683,
      -0.9266949019094035,
      0.21367933126615687
    ],
    [
      -0.3185871105590188,
      -0.9222209478008903,
      0.21911361532977147
    ],
    [
      -0.33668285358349587,
      -0.9084884014452727,
      0.24757520179187448
    ],
    [
      -0.2797021289676636,
      -0.9405276467940376,
      0.1928068065889446
    ],
    [
      -0.3049073703587807,
      -0.9295066854294693,
      0.20748208896869857
    ],
    [
      -0.26088558226187786,
      -0.9488508000198629,
      0.17782258649999166
    ],
    [
      -0.2748058637224888,
      -0.9432934585320306,
      0.18622349034001354
    ],
    [
      -0.24149390173311397,
      -0.9571380786856756,
      0.15989807302031692
    ],
    [
      -0.2521266591438251,
      -0.9532576544466489,
      0.16652925264903712
    ],
    [
      -0.19686910122426496,
      -0.9712451387487131,
      0.1338859120301433
    ],
    [
      -0.21028792549214073,
      -0.9685576701211598,
      0.13294746346464187
    ],
    [
      -0.2302997162971312,
      -0.962149003931383,
      0.14570976256692011
    ],
    [
      -0.14157687839424662,
      -0.9823476943547137,
      0.12226608237822459
    ],
    [
      -0.14934792829259727,
      -0.9812108350255737,
      0.12214947213609036
    ],
    [
      -0.10593141643277315,
      -0.9900054979226574,
      0.09310020996462677
    ],
    [
      -0.12425822477574705,
      -0.9867660985728134,
      0.10417562230660497
    ],
    [
      -0.08078735940757975,
      -0.994011359673568,
      0.0735854564425278
    ],
    [
      -0.08858579519791296,
      -0.9931691652651019,
      0.07594449325510219
    ],
    [
      -0.09105746199084774,
      -0.9928281202390341,
      0.0774652327073993
    ],
    [
      -0.07006752959799868,
      -0.9952973564090163,
      0.0668858252640822
    ],
    [
      -0.0418619725000052,
      -0.9984917154548164,
      0.03552280150138367
    ],
    [
      -0.04126197677828055,
      -0.9985052428726868,
      0.03584311967596022
    ],
    [
      -0.030689309843927207,
      -0.9994936416149467,
      0.008403965290027914
    ],
    [
      -0.04094219989407298,
      -0.9987219569542757,
      0.029634253242753532
    ],
    [
      -0.024579575443945175,
      -0.9994424782032496,
      -0.02259595614136011
    ],
    [
      -0.027533330019245576,
      -0.9994826030337743,
      -0.01662654416534118
    ],
    [
      -0.01883150437330652,
      -0.9984254735631981,
      -0.052838888927963935
    ],
    [
      -0.021457535951356615,
      -0.9986325053415043,
      -0.04767277447607582
    ],
    [
      -0.011319906523681453,
      -0.9960008969460403,
      -0.08862320801561085
    ],
    [
      -0.015401791585593023,
      -0.9966116029547164,
      -0.08079664394010891
    ],
    [
      -0.008058448347179593,
      -0.9933719339996673,
      -0.11466151120579446
    ],
    [
      0.008601508240575413,
      -0.9887600390538305,
      -0.1492635227584244
    ],
    [
      -0.011801863651645194,
      -0.991290937590219,
      -0.13116018094624748
    ],
    [
      0.01971889112561032,
      -0.9844173985976646,
      -0.17473852085611524
    ],
    [
      0.025782999226469067,
      -0.9775504810209553,
      -0.2091178949936775
    ],
    [
      0.01790120742917426,
      -0.981308695456147,
      -0.19160582192285452
    ],
    [
      0.035911074140810816,
      -0.9680595672880662,
      -0.2481351827857052
    ],
    [
      0.024552870299741784,
      -0.9746065886378324,
      -0.2225739291646055
    ],
    [
      0.03533682596371422,
      -0.9609473961990881,
      -0.27446568176914715
    ],
    [
      0.027558801016297867,
      -0.9551170402944813,
      -0.29494398082628237
    ],
    [
      0.21437678413504005,
      -0.9764137465766829,
      0.02566690320244622
    ],
    [
      0.21757694915319606,
      -0.9760418263677423,
      -0.0016199931819341972
    ],
    [
      0.22224369697020865,
      -0.9736084695288213,
      0.05190652385548873
    ],
    [
      0.22227369958151091,
      -0.9736211132468482,
      0.051539599477646976
    ],
    [
      0.22829647223181412,
      -0.9709204622062675,
      0.07207063781927066
    ],
    [
      0.24180145322445568,
      -0.9662419556169127,
      0.08892997483495349
    ],
    [
      0.2552761254016732,
      -0.9610659733840818,
      0.10576528070787902
    ],
    [
      0.241866925745388,
      -0.9662220982833968,
      0.08896767401312015
    ],
    [
      0.27524759104882696,
      -0.9542678930144831,
      0.11666855610453342
    ],
    [
      0.39433133544775,
      -0.9119668416920809,
      0.11322224842390731
    ],
    [
      0.47666030753783717,
      -0.8716927444925902,
      0.11378361225110772
    ],
    [
      0.5004389308292786,
      -0.8599170849772788,
      0.10051608565114328
    ],
    [
      0.4978193822587185,
      -0.8614413011601336,
      0.10047261966866271
    ],
    [
      0.5242180422584463,
      -0.8473331530317326,
      0.08498218603933588
    ],
    [
      0.5491914839398614,
      -0.8329375224342652,
      0.06785129098993545
    ],
    [
      0.5244789255385546,
      -0.8472243098571859,
      0.08445605634256449
    ],
    [
      0.5847426886586102,
      -0.8096266888074949,
      0.05079973258700868
    ],
    [
      0.5707840122877353,
      -0.8195121173897928,
      0.051044106104552935
    ],
    [
      0.5504193947816308,
      -0.832331869904354,
      0.0652851299282217
    ],
    [
      0.6100328109230978,
      -0.7923747416416519,
      0.0014961302047064972
    ],
    [
      0.6066847505098534,
      -0.7949425206801644,
      0.00004809847546821754
    ],
    [
      0.6328387216639849,
      -0.7742831607192046,
      0.000859877533078913
    ],
    [
      0.6639566903374587,
      -0.747403944034859,
      -0.02342771429878216
    ],
    [
      0.6852810015043891,
      -0.7254036461642543,
      -0.06464904569092096
    ],
    [
      0.6750104125307017,
      -0.7358228305485279,
      -0.05408978663929272
    ],
    [
      0.6641368413722422,
      -0.7471378217699787,
      -0.026595699143144434
    ],
    [
      0.6971877329173852,
      -0.7120044893193548,
      -0.08353964483167133
    ],
    [
      0.6894937585419673,
      -0.720395065918871,
      -0.07502870071790371
    ],
    [
      0.706034384479272,
      -0.7002007014817696,
      -0.10599257321819043
    ],
    [
      0.7080825121592916,
      -0.6948892903547718,
      -0.12549115556256643
    ],
    [
      0.7058845069489782,
      -0.6932469892955446,
      -0.14538113592230892
    ],
    [
      0.0076560661099634745,
      0.21745825303737978,
      -0.976039595937404
    ],
    [
      -0.02418121101247078,
      0.26487819738451396,
      -0.9639786354397596
    ],
    [
      0.07418573919468077,
      0.29304181898908466,
      -0.9532171675036636
    ],
    [
      -0.6230545142721343,
      0.6512785808725298,
      -0.4331735014307529
    ],
    [
      -0.6415893224633981,
      0.6240428391752177,
      -0.44601981589957546
    ],
    [
      -0.6728909503374585,
      0.5998689830473022,
      -0.43286830807041915
    ],
    [
      -0.6646957663523644,
      0.6084483748602633,
      -0.4335552021636318
    ],
    [
      -0.7999520626278909,
      -0.5892354782649964,
      -0.11348237154379515
    ],
    [
      -0.7644414253717098,
      -0.610797041739708,
      -0.206291737541012
    ],
    [
      -0.7966806092783894,
      0.37824527029075256,
      0.47141332427339167
    ],
    [
      -0.7976542832515618,
      0.37845151163717944,
      0.46959780424313197
    ],
    [
      -0.8018031336401216,
      0.39397312896211595,
      0.4493293987050939
    ],
    [
      -0.7894838900617822,
      0.35568741117051844,
      0.5002016122202431
    ],
    [
      -0.8013076566410972,
      0.2894110011302547,
      0.5235907866197965
    ],
    [
      -0.8112487554908377,
      0.30373013311390235,
      0.49962332106615903
    ],
    [
      -0.8270723157149003,
      0.30957113652550944,
      0.46916638414137984
    ],
    [
      -0.8462702408688443,
      0.3035221537284566,
      0.4378367065651617
    ],
    [
      -0.8096007063416868,
      0.3902170914590122,
      0.4384943760463877
    ],
    [
      -0.822768300273778,
      0.3965637017885805,
      0.40717263474886917
    ],
    [
      -0.8511597895991329,
      0.2996849996198576,
      0.43094769238552133
    ],
    [
      -0.861804221217859,
      0.3035335240427744,
      0.4063999065861777
    ],
    [
      0.5932994986703011,
      -0.4481921281990465,
      -0.6686699642558942
    ],
    [
      0.5894149106601357,
      -0.4441398760165135,
      -0.674781322817652
    ],
    [
      0.61982721732643,
      -0.45259099343768894,
      -0.6410737970939542
    ],
    [
      0.6160483755420791,
      -0.4475723214946632,
      -0.6482001357789454
    ],
    [
      0.6506939768106739,
      -0.4564500599062558,
      -0.6068366265757907
    ],
    [
      0.6471359473032131,
      -0.4519777682132841,
      -0.6139471986652532
    ],
    [
      0.669567951576121,
      -0.45572476703588805,
      -0.5865097568943273
    ],
    [
      0.7003454558259589,
      -0.44059880717021205,
      -0.5615949907398714
    ],
    [
      0.698699004734251,
      -0.43655992168225166,
      -0.5667760894428711
    ],
    [
      0.7157773038300939,
      -0.4506620431770716,
      -0.5334478176552875
    ],
    [
      0.7411931765040484,
      -0.444022143895391,
      -0.5034650045776561
    ],
    [
      0.7643650094022911,
      -0.4273687130729726,
      -0.48280649901154676
    ],
    [
      0.759535385812232,
      -0.4278916723004866,
      -0.48991296622457026
    ],
    [
      0.7872053845707934,
      -0.4172927656441611,
      -0.45406434592885236
    ],
    [
      0.7838301634526014,
      -0.4155546929330166,
      -0.46143750610804746
    ],
    [
      0.8061139605521648,
      -0.41399545330194726,
      -0.42283335635710934
    ],
    [
      0.8255368747610824,
      -0.4089335156600801,
      -0.388924476189905
    ],
    [
      0.8081902004549696,
      -0.4126094691807824,
      -0.42021664154446453
    ],
    [
      0.8400236524690728,
      -0.3983612172055691,
      -0.3683321923468213
    ],
    [
      0.8477782313785064,
      -0.39028254591464356,
      -0.3590983218494843
    ],
    [
      0.8470078173464138,
      -0.3905693617935944,
      -0.360601346339983
    ],
    [
      0.27349357690303516,
      -0.9416057833542953,
      -0.19641744359024585
    ],
    [
      0.28082248917232283,
      -0.9294674133863247,
      -0.23922595391803905
    ],
    [
      0.2847417043297459,
      -0.9274196336096413,
      -0.24251800966268489
    ],
    [
      0.28903633731717243,
      -0.9186764810809751,
      -0.2692424907382759
    ],
    [
      0.2918161972798811,
      -0.9171229150849041,
      -0.2715305979650865
    ],
    [
      0.2959004539463533,
      -0.9072735100801596,
      -0.29882720636041266
    ],
    [
      0.3011965763755028,
      -0.9042055617093648,
      -0.30280839577780516
    ],
    [
      0.3051163267040818,
      -0.8934703405125248,
      -0.3295675618185758
    ],
    [
      0.30838769001281763,
      -0.8913745661463105,
      -0.33218731986039884
    ],
    [
      0.3124983748430686,
      -0.8792135042587403,
      -0.3596225516420058
    ],
    [
      0.32899380274017137,
      -0.8673226625574654,
      -0.3735163674764337
    ],
    [
      0.3251646400014034,
      -0.8635187133932073,
      -0.38549110043228946
    ],
    [
      0.3314117449156307,
      -0.8480021444333667,
      -0.4135923335464385
    ],
    [
      0.3367638670832417,
      -0.8436201762432504,
      -0.418204610283588
    ],
    [
      0.27729533323745414,
      -0.9606147167774595,
      -0.01807385059389546
    ],
    [
      0.27133489311134923,
      -0.9612593722610486,
      -0.04855713151070019
    ],
    [
      0.27638824751712954,
      -0.9583228540188621,
      -0.07229691625202744
    ],
    [
      0.2751930342511342,
      -0.9582359360842129,
      -0.07779900189890843
    ],
    [
      0.2808482474940109,
      -0.9540156902055124,
      -0.10477750102594886
    ],
    [
      0.2820741744418447,
      -0.953479046028987,
      -0.10635727006935006
    ],
    [
      0.28818524759091846,
      -0.947726024541551,
      -0.13698410666069433
    ],
    [
      0.2877059155307745,
      -0.9476186188190551,
      -0.13872368015614808
    ],
    [
      0.28809904055419117,
      -0.9393051003696824,
      -0.18629243476656657
    ],
    [
      0.29344157373298113,
      -0.941063266978373,
      -0.16820217105942137
    ],
    [
      0.43572663810806134,
      -0.786174368811219,
      -0.4382603777063674
    ],
    [
      0.4422696109374536,
      -0.7801602673311928,
      -0.4424336656708608
    ],
    [
      0.4802828808935592,
      -0.7505262563012522,
      -0.4539148520625979
    ],
    [
      0.5364442998698243,
      -0.7190052989928689,
      -0.44188108486033795
    ],
    [
      0.3117289473927142,
      -0.9290533934164281,
      -0.1992105808908002
    ],
    [
      0.32217001949295715,
      -0.918450690857782,
      -0.2294663526593181
    ],
    [
      0.33412296526406154,
      -0.9062239872632479,
      -0.25907514159380723
    ],
    [
      0.32388663140691587,
      -0.9176023046596672,
      -0.23044188091392584
    ],
    [
      0.3372974394259892,
      -0.9044132638816252,
      -0.2612797073476181
    ],
    [
      0.34535507404603044,
      -0.8950921120303535,
      -0.282028338667769
    ],
    [
      0.34503577845703176,
      -0.8944801375970627,
      -0.284351182569881
    ],
    [
      0.3541836579871071,
      -0.8830896818386449,
      -0.30774429360264816
    ],
    [
      0.35318540554960937,
      -0.8812489223392745,
      -0.3141025408726032
    ],
    [
      0.36265766173535746,
      -0.8684604146581785,
      -0.3380176453328845
    ],
    [
      0.3596346791062542,
      -0.8622976823750813,
      -0.3565187295987478
    ],
    [
      0.39941644301190893,
      -0.8331726439997896,
      -0.3824785619379395
    ],
    [
      0.4483611001757491,
      -0.8016705598541531,
      -0.3953436951720877
    ],
    [
      0.4423147835177883,
      -0.8081116374959083,
      -0.3889899916775415
    ],
    [
      0.4529763499218313,
      -0.8002838186779274,
      -0.3928845071694338
    ],
    [
      0.5039225884078257,
      -0.7705934452482398,
      -0.3901893989241701
    ],
    [
      0.5379054567493601,
      -0.7553031083028036,
      -0.37439943133955994
    ],
    [
      0.5481889613196922,
      -0.7533624242298292,
      -0.3632270921142747
    ],
    [
      0.5570283729719844,
      -0.7490117964279351,
      -0.35874882650119067
    ],
    [
      0.5703069560671702,
      -0.7461776083290022,
      -0.3434660866662223
    ],
    [
      0.5767137084150173,
      -0.7427572513428767,
      -0.3401660831178983
    ],
    [
      0.5982962351843544,
      -0.7376799961108552,
      -0.312841554628084
    ],
    [
      0.5985779983493279,
      -0.7378536049603056,
      -0.31189170803212024
    ],
    [
      0.6162099316375126,
      -0.7328643882614256,
      -0.28843562292043334
    ],
    [
      0.6169840061482157,
      -0.733267228106658,
      -0.2857444808602204
    ],
    [
      0.634334651979253,
      -0.7274615448993689,
      -0.26157073611354814
    ],
    [
      0.636444479303243,
      -0.7283414937742959,
      -0.2538840152728234
    ],
    [
      0.6472876689419692,
      -0.7242277190095626,
      -0.23772438800820922
    ],
    [
      0.6500357033117626,
      -0.7251519133304217,
      -0.22717457387042794
    ],
    [
      0.661858060734041,
      -0.7200238111326288,
      -0.20858959428365365
    ],
    [
      0.671747478033406,
      -0.7222197524274783,
      -0.16478457136319125
    ],
    [
      -0.6909059725746374,
      0.6258463269087176,
      -0.36189129881161985
    ],
    [
      -0.6647585023149091,
      0.6349211833435298,
      -0.3936638471357144
    ],
    [
      -0.29879471668227314,
      -0.713824752727725,
      0.6333845117114582
    ],
    [
      -0.29106388919312726,
      -0.6992819406002534,
      0.6529062566388184
    ],
    [
      -0.2945804041568638,
      -0.7340421634669496,
      0.6118860087790361
    ],
    [
      -0.29209701320633863,
      -0.6932679952843502,
      0.658831406044334
    ],
    [
      -0.281934953119612,
      -0.671928330004106,
      0.684854000168894
    ],
    [
      -0.041273767069639866,
      -0.7848532054609341,
      0.6183056865576912
    ],
    [
      -0.04960882503703925,
      -0.7870034719006659,
      0.6149508107928163
    ],
    [
      -0.03658892406639055,
      -0.7827355699275482,
      0.621277939577658
    ],
    [
      -0.7518170140119702,
      0.120052240886089,
      0.6483507051745633
    ],
    [
      -0.8162171255345033,
      0.15131192543978259,
      0.557578967684308
    ],
    [
      -0.8267918772771201,
      0.17856916878969353,
      0.5334118892810071
    ],
    [
      -0.8242841166837955,
      0.200713941805674,
      0.5294049570486127
    ],
    [
      -0.8035930901510152,
      0.15249113562765446,
      0.5753126098188103
    ],
    [
      -0.7822232665860911,
      0.13718565106144504,
      0.6077062270161732
    ],
    [
      -0.7965611605917516,
      0.139700218714978,
      0.5881956871039679
    ],
    [
      -0.7761786034746896,
      0.12799209764214553,
      0.6173854537071991
    ],
    [
      -0.682392073882844,
      -0.48713681858324553,
      0.5450126397455982
    ],
    [
      -0.6616295550334984,
      -0.5302711577677314,
      0.5301498195282582
    ],
    [
      -0.6395262549326075,
      -0.6001886839175997,
      0.4803953714901228
    ],
    [
      -0.6568446558643128,
      -0.6050021099520191,
      0.4500306045327334
    ],
    [
      -0.6738366697665181,
      -0.6004566912363438,
      0.4305762469382983
    ],
    [
      -0.8001494155070796,
      -0.426972663991243,
      0.42125438522097286
    ],
    [
      -0.6714760683057702,
      -0.6099384950970383,
      0.4208264747985618
    ],
    [
      -0.6395802051247346,
      -0.6535872528171313,
      0.40467377499358353
    ],
    [
      -0.6479143506094902,
      -0.6746022519061604,
      0.3537213536067902
    ],
    [
      -0.6711713999092774,
      -0.6775584997481289,
      0.30073814417676664
    ],
    [
      -0.7212849342760997,
      -0.6647837998732936,
      0.19444933276395485
    ],
    [
      -0.7102970106414171,
      -0.6660415829749353,
      0.22774276370964908
    ],
    [
      -0.7892818138401749,
      -0.6064066775475667,
      -0.09646325604542409
    ],
    [
      -0.6511317039199647,
      -0.7573918591931829,
      0.048837237618208275
    ],
    [
      -0.11879771353823626,
      -0.9928174219046693,
      -0.014165804624266339
    ],
    [
      -0.11443311147252405,
      -0.9932399487625532,
      -0.019479917373479302
    ],
    [
      -0.10164375813290437,
      -0.9941979922797637,
      -0.03519799112885037
    ],
    [
      -0.11433694130678389,
      -0.9932444539333319,
      -0.019812081750441336
    ],
    [
      -0.08484538035050623,
      -0.994367795734917,
      -0.06351337054873114
    ],
    [
      -0.09855988461758214,
      -0.9939357631819192,
      -0.0487611301360476
    ],
    [
      -0.0810816891894508,
      -0.9922803744032003,
      -0.09383719013498841
    ],
    [
      -0.08382215251457265,
      -0.9819961553610865,
      -0.1692849597686351
    ],
    [
      -0.10275969300756685,
      -0.984917962938993,
      -0.1392014790621667
    ],
    [
      -0.43947347498633654,
      -0.8978915483075901,
      0.025570143942347523
    ],
    [
      -0.507997028536325,
      -0.8606739002347653,
      -0.03434321553001918
    ],
    [
      -0.5509562199754233,
      -0.8319954058581104,
      -0.06504527885551059
    ],
    [
      -0.40774206913385,
      -0.9127363021793967,
      0.025668029576259695
    ],
    [
      -0.37683940697533036,
      -0.9261651461795766,
      0.014497701633185514
    ],
    [
      -0.3308506043612435,
      -0.9430486667102658,
      -0.034598985675735876
    ],
    [
      -0.1993242349298356,
      -0.8524238578834117,
      0.4833667509053522
    ],
    [
      -0.15681339038661987,
      -0.8838185637905731,
      0.4407655917771058
    ],
    [
      -0.11173224076188959,
      -0.8875300614069479,
      0.44699697591069504
    ],
    [
      -0.08239538233627708,
      -0.8806701342841854,
      0.4665095020999397
    ],
    [
      -0.07365147140771341,
      -0.8730739667002786,
      0.48199305952442906
    ],
    [
      -0.06637552175474455,
      -0.8730247291874593,
      0.48313777780147626
    ],
    [
      -0.04015393528757001,
      -0.865673499214147,
      0.4989960463162567
    ],
    [
      -0.032289592894983433,
      -0.8570970768504034,
      0.5141419872420165
    ],
    [
      -0.01737576110631873,
      -0.8523263097185422,
      0.5227216703825738
    ],
    [
      -0.011199885389276819,
      -0.8452893810399402,
      0.5341913747603773
    ],
    [
      0.0009921477623212403,
      -0.841074219355492,
      0.540918823094896
    ],
    [
      0.02959551087497193,
      -0.8249985816342327,
      0.5643593235143314
    ],
    [
      0.006207535241351528,
      -0.833042218923156,
      0.5531745908823109
    ],
    [
      0.031531639788739164,
      -0.8151827913513069,
      0.5783448559267428
    ],
    [
      0.049213866030763165,
      -0.8086090202150068,
      0.5862844427555902
    ],
    [
      0.0426816188284148,
      -0.7837973859831483,
      0.6195481717672723
    ],
    [
      -0.2995124533064082,
      -0.7400955066516995,
      0.6021220236366884
    ],
    [
      -0.2980743036734685,
      -0.7572323402462335,
      0.5811633955909381
    ],
    [
      -0.28433875264062425,
      -0.7792489991729348,
      0.5585001978824657
    ],
    [
      -0.2853711951167941,
      -0.7736993376878242,
      0.5656435413394506
    ],
    [
      -0.271466050971081,
      -0.7982135811781094,
      0.5377371681341957
    ],
    [
      -0.27253702011809366,
      -0.7937540321320324,
      0.5437629162965146
    ],
    [
      -0.2573776984491231,
      -0.8147362630943359,
      0.5195782346674168
    ],
    [
      -0.1985533498337619,
      -0.8502014594369351,
      0.48757978387244216
    ],
    [
      -0.08688811379659905,
      -0.9744456222306496,
      -0.20713808195595365
    ],
    [
      0.28926272746183873,
      -0.9570195212474194,
      0.02099310488465558
    ],
    [
      0.2878052511509378,
      -0.9576428777625814,
      -0.009394470743322936
    ],
    [
      0.2982026666050821,
      -0.9536616105122171,
      0.040058735188005914
    ],
    [
      0.3125919362410768,
      -0.9484508200686199,
      0.052223781060134825
    ],
    [
      0.39428831986316465,
      -0.9154600009156206,
      0.08043449224713665
    ],
    [
      0.39196537641008355,
      -0.9170730812703469,
      0.07307603783055985
    ],
    [
      0.4814976964212266,
      -0.8749657581100028,
      0.05094006749151931
    ],
    [
      0.5039705398634958,
      -0.8628956910356061,
      0.03774548107893621
    ],
    [
      0.4873602491788363,
      -0.8720987898793566,
      0.04385987016971654
    ],
    [
      0.5201446398698605,
      -0.8538946699591939,
      0.017704412724859113
    ],
    [
      0.5350685059059275,
      -0.8445045942650821,
      -0.02266460352107692
    ],
    [
      0.5321469981388017,
      -0.8463821371833113,
      -0.021374055040454885
    ],
    [
      0.5306953507310415,
      -0.847323519569873,
      -0.020132011727094213
    ],
    [
      0.5356971925000308,
      -0.8441141816473747,
      -0.022355453235570165
    ],
    [
      0.6004593630221265,
      -0.799562655040202,
      -0.012170210520983353
    ],
    [
      0.6192197557545907,
      -0.7828574885334763,
      -0.06083622876447071
    ],
    [
      0.6071141311664243,
      -0.7934557772698925,
      -0.04289943187349391
    ],
    [
      0.6322903207461756,
      -0.7698789650100146,
      -0.08657557118383313
    ],
    [
      0.6206156905807338,
      -0.7810723019132321,
      -0.06900886746617177
    ],
    [
      0.6365229400191743,
      -0.7616844437260211,
      -0.12114187969124728
    ],
    [
      0.6320359762918746,
      -0.7613084591107944,
      -0.14470644339187205
    ],
    [
      0.5654747270839958,
      -0.38115292705424625,
      -0.7314101306567068
    ],
    [
      0.6090485036152468,
      -0.39166405464871695,
      -0.6896804974335258
    ],
    [
      0.601431835680948,
      -0.38282484239871123,
      -0.7012309798289341
    ],
    [
      0.6380087667685059,
      -0.4031607818806792,
      -0.6560535019949895
    ],
    [
      0.6308509497734708,
      -0.3916407060067766,
      -0.6698094031651267
    ],
    [
      0.660416387009849,
      -0.4088966928271313,
      -0.629804485823888
    ],
    [
      0.6574135129480014,
      -0.40247158477846984,
      -0.6370432453446743
    ],
    [
      0.7077652314395343,
      -0.40773601205843096,
      -0.5769052969387864
    ],
    [
      0.7398031271365654,
      -0.34618555109620924,
      -0.5769288494183427
    ],
    [
      0.8140924039860191,
      -0.23189718483818814,
      -0.5324258196560225
    ],
    [
      0.7438264428573957,
      -0.32986592864147496,
      -0.5813008618844553
    ],
    [
      0.8456159846113953,
      -0.2546277344759307,
      -0.4691463773763531
    ],
    [
      0.3345321736885163,
      -0.9421009657410122,
      -0.023108334364221772
    ],
    [
      0.3400767168239549,
      -0.9386833920408072,
      -0.056756639972814354
    ],
    [
      0.33728346806554804,
      -0.9390869653245166,
      -0.06599646753627472
    ],
    [
      0.3408485465227723,
      -0.9359604950540862,
      -0.08831885433712995
    ],
    [
      0.33870849700025235,
      -0.9361032059558083,
      -0.09480159207042747
    ],
    [
      0.34342227561585237,
      -0.9309674069547513,
      -0.1239388066699693
    ],
    [
      0.3424083892615727,
      -0.9310638491423117,
      -0.12600239594387888
    ],
    [
      0.343480686948589,
      -0.9259149674120812,
      -0.15717026059534886
    ],
    [
      0.35316784792095995,
      -0.9198727451331252,
      -0.17060657653245964
    ],
    [
      0.3540587454358531,
      -0.9175339884580983,
      -0.1810353136947714
    ],
    [
      0.3662341295618499,
      -0.9081182039927653,
      -0.20296277964451587
    ],
    [
      0.365689162887755,
      -0.909426144680391,
      -0.19802909765540408
    ],
    [
      0.3801758753932078,
      -0.8974990867406077,
      -0.2235211244352158
    ],
    [
      0.3815209703732613,
      -0.8967649608078577,
      -0.22417482961458052
    ],
    [
      0.3988175693633498,
      -0.8822864813747477,
      -0.25003022047439943
    ],
    [
      0.3993467634374879,
      -0.8805328698976381,
      -0.2553116283325776
    ],
    [
      0.41695846759042055,
      -0.8639573701333096,
      -0.2823531457182362
    ],
    [
      0.41711845420770854,
      -0.8635968435994711,
      -0.2832184437574688
    ],
    [
      0.42173863470918527,
      -0.8590068152089534,
      -0.2902478517029947
    ],
    [
      0.4252150280354714,
      -0.8506942607698221,
      -0.3090492754013168
    ],
    [
      0.4306383654209107,
      -0.8448856769861021,
      -0.3173622394856427
    ],
    [
      0.5243198541585834,
      -0.7895714438677761,
      -0.3188504752445525
    ],
    [
      0.46116011997319384,
      -0.800883860368578,
      -0.38199003383260377
    ],
    [
      0.5298945751700139,
      -0.7920106261593938,
      -0.30320110035419623
    ],
    [
      0.5481688391896303,
      -0.7823280059180472,
      -0.29575972494202984
    ],
    [
      0.5615217319238222,
      -0.7779977997153545,
      -0.2818027115116855
    ],
    [
      0.5643869775667104,
      -0.7784603735346984,
      -0.27471218827953636
    ],
    [
      0.5814976297323471,
      -0.772137623021352,
      -0.2562498736206492
    ],
    [
      0.5836900461035318,
      -0.7725612106432916,
      -0.24991019564841363
    ],
    [
      0.598230045743981,
      -0.7664870849663654,
      -0.23370571441220278
    ],
    [
      0.6010154522294575,
      -0.767474699103026,
      -0.22307624799189277
    ],
    [
      0.6168819632733983,
      -0.7596939309662925,
      -0.20572256716495604
    ],
    [
      0.6252944713186175,
      -0.7661082649167721,
      -0.1486100621242836
    ],
    [
      -0.18610486137731835,
      -0.8450418350042405,
      0.5012676706754539
    ],
    [
      -0.0883235955266496,
      -0.8399404220723105,
      0.5354428352702405
    ],
    [
      -0.10545923760868316,
      -0.8526798668918008,
      0.5116789948789929
    ],
    [
      -0.05419150002080251,
      -0.819728488084838,
      0.5701828541333395
    ],
    [
      -0.0736763658610769,
      -0.8369842791360675,
      0.5422445108920717
    ],
    [
      -0.8554916215847639,
      0.2511809494040412,
      0.45281587434050463
    ],
    [
      -0.8474879928442135,
      0.226549081102404,
      0.48004126472267217
    ],
    [
      -0.8368206651504441,
      0.20428524539279497,
      0.5079357369707058
    ],
    [
      -0.8458664061151521,
      0.22587099628191515,
      0.4832104262580141
    ],
    [
      -0.9147428148810811,
      -0.18353512812774475,
      0.35994505048210956
    ],
    [
      -0.8939750136513981,
      -0.1757721428681123,
      0.41220483834925375
    ],
    [
      -0.8710184150989608,
      -0.1707322075228069,
      0.4606272179028106
    ],
    [
      -0.1854917230227773,
      -0.9783393656374377,
      -0.09189617148813765
    ],
    [
      -0.1572967117738034,
      -0.9816300580688965,
      -0.1079822835506081
    ],
    [
      -0.16524538844531128,
      -0.9805522343613308,
      -0.10588331920826824
    ],
    [
      -0.4437464389749757,
      -0.8019454800176461,
      -0.39996567974801955
    ],
    [
      -0.309974751598968,
      -0.9349540575377187,
      -0.1725588701426688
    ],
    [
      -0.3247923430999724,
      -0.9236584289664438,
      -0.20338397297444746
    ],
    [
      0.39574472358417284,
      -0.9179258173216482,
      0.028254338599065846
    ],
    [
      0.452631814240279,
      -0.8913303333952846,
      -0.02558666658641665
    ],
    [
      0.4328965420126609,
      -0.9008150543420844,
      -0.03365741796614781
    ],
    [
      0.5432788976423714,
      -0.8377152187266722,
      -0.055509023502612026
    ],
    [
      0.5652924911941434,
      -0.8206039928412823,
      -0.0839850363604382
    ],
    [
      0.5603085735877622,
      -0.8242872842161622,
      -0.08126976955542002
    ],
    [
      0.5824761007518213,
      -0.805885685340198,
      -0.10615956959555577
    ],
    [
      0.5776494660752114,
      -0.8096655820068497,
      -0.10374362465487932
    ],
    [
      0.60720721095003,
      -0.7804624406441059,
      -0.14892206590741103
    ],
    [
      0.6973397077076963,
      -0.33051349816198705,
      -0.6359859743633274
    ],
    [
      0.6785496240949679,
      -0.3197451556635467,
      -0.661311910576448
    ],
    [
      0.6713948343395378,
      -0.3191071358129764,
      -0.6688793705111731
    ],
    [
      0.6468687039106599,
      -0.3019282632547336,
      -0.7002858014760284
    ],
    [
      0.39689857742157536,
      -0.9136041329257707,
      -0.08831198979572608
    ],
    [
      0.3961977340746149,
      -0.9119908911185505,
      -0.1063013171646191
    ],
    [
      0.3867105867630019,
      -0.9140266989380961,
      -0.12251577740740865
    ],
    [
      0.4123755705452142,
      -0.9092465627520582,
      -0.05671928191608911
    ],
    [
      0.4327537853589198,
      -0.9008414290333029,
      -0.0347689659720067
    ],
    [
      0.389740433615618,
      -0.9096285753403167,
      -0.14379933702717762
    ],
    [
      0.4121413621364267,
      -0.8961884006843661,
      -0.1642736987321123
    ],
    [
      0.42122977184529503,
      -0.8916559906011915,
      -0.16587668231601632
    ],
    [
      0.42685384758181205,
      -0.8850040418605342,
      -0.1859129868920431
    ],
    [
      0.42616368324806836,
      -0.8846551462195588,
      -0.1891290230178625
    ],
    [
      0.4344125751473526,
      -0.8739578581073414,
      -0.21790680761801348
    ],
    [
      0.4557591891804275,
      -0.860124939902463,
      -0.2290603615542937
    ],
    [
      0.45593103183341377,
      -0.8600413606681252,
      -0.22903220767271654
    ],
    [
      0.4729209060902951,
      -0.8410501723158935,
      -0.26264124624692914
    ],
    [
      0.5005060054410138,
      -0.8206625510115921,
      -0.2756931553097134
    ],
    [
      0.4937256188777129,
      -0.8218678466749333,
      -0.2841975648483423
    ],
    [
      0.5002120118856348,
      -0.8225079966317527,
      -0.2706816185893427
    ],
    [
      0.5034098096732416,
      -0.822711255920623,
      -0.2640544506465703
    ],
    [
      0.5258580749101712,
      -0.8158074240460768,
      -0.24068970049230046
    ],
    [
      0.5351523425164976,
      -0.8106890458621394,
      -0.2374768224864045
    ],
    [
      0.5557107246832516,
      -0.803466323261448,
      -0.2136058469629183
    ],
    [
      0.5640099254890809,
      -0.8055361164293973,
      -0.18167104633828146
    ],
    [
      0.5687162822114101,
      -0.8025439013972668,
      -0.18023616917168978
    ],
    [
      -0.15915171489163252,
      -0.9657097373790181,
      -0.20512297476977182
    ],
    [
      -0.17801784250504174,
      -0.968567312434938,
      -0.17374409064026117
    ],
    [
      0.4724586659276715,
      -0.8746807122190317,
      -0.10824260095661219
    ],
    [
      0.4912030238190911,
      -0.8613182212908884,
      -0.12980951838475244
    ],
    [
      0.47411801898357,
      -0.8726825130700798,
      -0.11677900263653994
    ],
    [
      0.506692784564043,
      -0.8486040389536472,
      -0.1520973607341469
    ],
    [
      0.5339323018088773,
      -0.829987604375225,
      -0.16135945484708605
    ],
    [
      0.5081585992432739,
      -0.8469758293744436,
      -0.15622670216895462
    ],
    [
      0.445676987655726,
      -0.8851586905004417,
      -0.13366418856844656
    ],
    [
      0.4893340803319595,
      -0.8520697384110094,
      -0.18582066276350767
    ],
    [
      0.4818880124202227,
      -0.8521668777076157,
      -0.20394988605964243
    ],
    [
      0.5011805527330263,
      -0.8481695507073294,
      -0.1715414434331989
    ]
  ],
  "f": [
    [
      1,
      2,
      3,
      4,
      5,
      6
    ],
    [
      1,
      7,
      8,
      9,
      10,
      2
    ],
    [
      11,
      12,
      9,
      8,
      13,
      14
    ],
    [
      15,
      16,
      17,
      11,
      14,
      18
    ],
    [
      19,
      20,
      21,
      16,
      15,
      22
    ],
    [
      19,
      23,
      24,
      25,
      20
    ],
    [
      26,
      27,
      28,
      29,
      24,
      23
    ],
    [
      26,
      30,
      31,
      32,
      33,
      27
    ],
    [
      31,
      34,
      35,
      36,
      37,
      32
    ],
    [
      38,
      39,
      40,
      36,
      35
    ],
    [
      38,
      41,
      42,
      43,
      44,
      39
    ],
    [
      42,
      45,
      46,
      43
    ],
    [
      46,
      45,
      47,
      48,
      49,
      50
    ],
    [
      51,
      52,
      53,
      49,
      48,
      54
    ],
    [
      51,
      55,
      56,
      57,
      58,
      52
    ],
    [
      59,
      60,
      57,
      56,
      61
    ],
    [
      59,
      62,
      63,
      64,
      65,
      60
    ],
    [
      63,
      66,
      67,
      68,
      69,
      64
    ],
    [
      68,
      67,
      70,
      71,
      72,
      73
    ],
    [
      72,
      71,
      74,
      75,
      76,
      77
    ],
    [
      78,
      79,
      80,
      76,
      75,
      81
    ],
    [
      82,
      83,
      84,
      85,
      80,
      79
    ],
    [
      86,
      84,
      83,
      87,
      88,
      89
    ],
    [
      90,
      89,
      88,
      91,
      92,
      93
    ],
    [
      94,
      93,
      92,
      95,
      96,
      97
    ],
    [
      98,
      99,
      100,
      97,
      96,
      101
    ],
    [
      98,
      102,
      103,
      104,
      105,
      99
    ],
    [
      106,
      107,
      108,
      109,
      104,
      103
    ],
    [
      108,
      107,
      110,
      111,
      112,
      113
    ],
    [
      114,
      115,
      116,
      112,
      111,
      117
    ],
    [
      114,
      118,
      119,
      120,
      121,
      115
    ],
    [
      122,
      123,
      124,
      120,
      119
    ],
    [
      122,
      125,
      126,
      127,
      128,
      123
    ],
    [
      129,
      130,
      131,
      132,
      127,
      126,
      133
    ],
    [
      134,
      135,
      136,
      130,
      129,
      137
    ],
    [
      138,
      139,
      140,
      135,
      134
    ],
    [
      138,
      141,
      142,
      143,
      144,
      145,
      139
    ],
    [
      146,
      147,
      148,
      143,
      142,
      149
    ],
    [
      146,
      149,
      150,
      151,
      152
    ],
    [
      153,
      154,
      155,
      156,
      157,
      152,
      151
    ],
    [
      158,
      159,
      155,
      154,
      160
    ],
    [
      158,
      160,
      161,
      162,
      163
    ],
    [
      163,
      162,
      164,
      165,
      166,
      167
    ],
    [
      166,
      165,
      168,
      169,
      170,
      171
    ],
    [
      170,
      169,
      172,
      173,
      174,
      175
    ],
    [
      176,
      177,
      178,
      174,
      173,
      179,
      180
    ],
    [
      176,
      180,
      181,
      182,
      183
    ],
    [
      182,
      184,
      185,
      186,
      187,
      183
    ],
    [
      188,
      189,
      190,
      191,
      185,
      184
    ],
    [
      192,
      193,
      194,
      195,
      190,
      189,
      196
    ],
    [
      1,
      6,
      197,
      198,
      199,
      7
    ],
    [
      7,
      199,
      200,
      201,
      13,
      8
    ],
    [
      18,
      14,
      13,
      201,
      202,
      203
    ],
    [
      22,
      15,
      18,
      203,
      204,
      205
    ],
    [
      19,
      22,
      205,
      206,
      207,
      30,
      26,
      23
    ],
    [
      31,
      30,
      207,
      208,
      209,
      34
    ],
    [
      38,
      35,
      34,
      209,
      210,
      211,
      41
    ],
    [
      42,
      41,
      211,
      212,
      47,
      45
    ],
    [
      48,
      47,
      212,
      213,
      214,
      54
    ],
    [
      51,
      54,
      214,
      215,
      216,
      55
    ],
    [
      216,
      217,
      61,
      56,
      55
    ],
    [
      59,
      61,
      217,
      218,
      219,
      220,
      62
    ],
    [
      63,
      62,
      220,
      221,
      222,
      66
    ],
    [
      223,
      224,
      70,
      67,
      66,
      222
    ],
    [
      225,
      226,
      74,
      71,
      70,
      224,
      227
    ],
    [
      228,
      81,
      75,
      74,
      226,
      229
    ],
    [
      78,
      81,
      228,
      230,
      231
    ],
    [
      82,
      79,
      78,
      231,
      232,
      233
    ],
    [
      82,
      233,
      234,
      235,
      87,
      83
    ],
    [
      91,
      88,
      87,
      235,
      236,
      237
    ],
    [
      91,
      237,
      238,
      239,
      95,
      92
    ],
    [
      239,
      240,
      241,
      101,
      96,
      95
    ],
    [
      98,
      101,
      241,
      242,
      243,
      102
    ],
    [
      106,
      103,
      102,
      243,
      244,
      245
    ],
    [
      106,
      245,
      246,
      247,
      110,
      107
    ],
    [
      110,
      247,
      248,
      249,
      117,
      111
    ],
    [
      114,
      117,
      249,
      250,
      118
    ],
    [
      122,
      119,
      118,
      250,
      251,
      125
    ],
    [
      125,
      251,
      252,
      253,
      133,
      126
    ],
    [
      137,
      129,
      133,
      253,
      254
    ],
    [
      138,
      134,
      137,
      254,
      255,
      256,
      141
    ],
    [
      149,
      142,
      141,
      256,
      257,
      150
    ],
    [
      153,
      151,
      150,
      257,
      258,
      259
    ],
    [
      153,
      259,
      260,
      161,
      160,
      154
    ],
    [
      162,
      161,
      260,
      261,
      262,
      164
    ],
    [
      165,
      164,
      262,
      263,
      264,
      168
    ],
    [
      169,
      168,
      264,
      265,
      266,
      172
    ],
    [
      173,
      172,
      266,
      267,
      268,
      179
    ],
    [
      180,
      179,
      268,
      269,
      270,
      181
    ],
    [
      188,
      184,
      182,
      181,
      270,
      271
    ],
    [
      188,
      271,
      272,
      273,
      196,
      189
    ],
    [
      192,
      196,
      273,
      274,
      275,
      276
    ],
    [
      276,
      275,
      277,
      278,
      279
    ],
    [
      280,
      281,
      282,
      279,
      278,
      283
    ],
    [
      280,
      284,
      285,
      286,
      287,
      281
    ],
    [
      285,
      288,
      289,
      290,
      291,
      286
    ],
    [
      290,
      289,
      292,
      293,
      294,
      295
    ],
    [
      294,
      293,
      296,
      297,
      298,
      299
    ],
    [
      298,
      297,
      300,
      301,
      302,
      303
    ],
    [
      302,
      301,
      304,
      305,
      306,
      307
    ],
    [
      306,
      305,
      308,
      309,
      310,
      311
    ],
    [
      310,
      309,
      312,
      313,
      314,
      315
    ],
    [
      314,
      313,
      316,
      317,
      318,
      319
    ],
    [
      318,
      317,
      320,
      321,
      322,
      323
    ],
    [
      324,
      322,
      321,
      325,
      326,
      327
    ],
    [
      328,
      327,
      326,
      329,
      330,
      331
    ],
    [
      330,
      332,
      333,
      334,
      335,
      336,
      331
    ],
    [
      337,
      338,
      339,
      335,
      334
    ],
    [
      337,
      340,
      341,
      342,
      343,
      344,
      345,
      338
    ],
    [
      346,
      347,
      348,
      349,
      350,
      351
    ],
    [
      346,
      352,
      353,
      354,
      347
    ],
    [
      352,
      355,
      356,
      357,
      353
    ],
    [
      357,
      356,
      358,
      359,
      360
    ],
    [
      358,
      361,
      362,
      363,
      364,
      365,
      366,
      367,
      359
    ],
    [
      368,
      369,
      370,
      371,
      372,
      373,
      374
    ],
    [
      375,
      376,
      377,
      378,
      379
    ],
    [
      380,
      381,
      382,
      383,
      375,
      379
    ],
    [
      382,
      381,
      384,
      385,
      386,
      387
    ],
    [
      385,
      388,
      389,
      390,
      386
    ],
    [
      391,
      392,
      393,
      390,
      389,
      394,
      395
    ],
    [
      391,
      395,
      396,
      397,
      398
    ],
    [
      399,
      400,
      397,
      396,
      401,
      402
    ],
    [
      399,
      402,
      403,
      404,
      405,
      406
    ],
    [
      407,
      405,
      404,
      408,
      409,
      410
    ],
    [
      411,
      412,
      413,
      414,
      410,
      409
    ],
    [
      415,
      416,
      417,
      418,
      413,
      412
    ],
    [
      419,
      420,
      417,
      416,
      421,
      422
    ],
    [
      419,
      422,
      423,
      424,
      425,
      426
    ],
    [
      427,
      428,
      425,
      424,
      429,
      430
    ],
    [
      427,
      430,
      431,
      432,
      433,
      434
    ],
    [
      435,
      436,
      433,
      432,
      437,
      438
    ],
    [
      435,
      438,
      439,
      440,
      441,
      442
    ],
    [
      440,
      439,
      443,
      444,
      445,
      446,
      447
    ],
    [
      446,
      445,
      448,
      449,
      450,
      451
    ],
    [
      450,
      449,
      452,
      453,
      454,
      455
    ],
    [
      454,
      453,
      456,
      457,
      458
    ],
    [
      456,
      459,
      460,
      461,
      457
    ],
    [
      3,
      462,
      463,
      464,
      465,
      4
    ],
    [
      3,
      2,
      10,
      466,
      467,
      462
    ],
    [
      10,
      9,
      12,
      468,
      469,
      466
    ],
    [
      11,
      17,
      470,
      471,
      468,
      12
    ],
    [
      17,
      16,
      21,
      472,
      473,
      470
    ],
    [
      20,
      25,
      474,
      472,
      21
    ],
    [
      29,
      475,
      476,
      474,
      25,
      24
    ],
    [
      28,
      477,
      478,
      475,
      29
    ],
    [
      28,
      27,
      33,
      479,
      480,
      477
    ],
    [
      37,
      481,
      482,
      483,
      479,
      33,
      32
    ],
    [
      36,
      40,
      484,
      485,
      481,
      37
    ],
    [
      39,
      44,
      486,
      487,
      488,
      484,
      40
    ],
    [
      43,
      46,
      50,
      489,
      490,
      486,
      44
    ],
    [
      49,
      53,
      491,
      492,
      489,
      50
    ],
    [
      52,
      58,
      493,
      494,
      491,
      53
    ],
    [
      57,
      60,
      65,
      495,
      496,
      493,
      58
    ],
    [
      64,
      69,
      497,
      498,
      495,
      65
    ],
    [
      68,
      73,
      499,
      497,
      69
    ],
    [
      73,
      72,
      77,
      500,
      501,
      499
    ],
    [
      77,
      76,
      80,
      85,
      502,
      503,
      500
    ],
    [
      86,
      504,
      502,
      85,
      84
    ],
    [
      86,
      89,
      90,
      505,
      506,
      504
    ],
    [
      90,
      93,
      94,
      507,
      505
    ],
    [
      94,
      97,
      100,
      508,
      509,
      507
    ],
    [
      100,
      99,
      105,
      510,
      511,
      508
    ],
    [
      105,
      104,
      109,
      512,
      513,
      510
    ],
    [
      108,
      113,
      514,
      512,
      109
    ],
    [
      112,
      116,
      515,
      516,
      514,
      113
    ],
    [
      116,
      115,
      121,
      517,
      518,
      519,
      515
    ],
    [
      121,
      120,
      124,
      520,
      517
    ],
    [
      123,
      128,
      521,
      522,
      523,
      520,
      124
    ],
    [
      128,
      127,
      132,
      524,
      525,
      521
    ],
    [
      131,
      526,
      527,
      524,
      132
    ],
    [
      131,
      130,
      136,
      528,
      526
    ],
    [
      136,
      135,
      140,
      529,
      530,
      531,
      528
    ],
    [
      139,
      145,
      532,
      533,
      529,
      140
    ],
    [
      145,
      144,
      534,
      535,
      532
    ],
    [
      144,
      143,
      148,
      536,
      537,
      538,
      539,
      540,
      534
    ],
    [
      148,
      147,
      541,
      542,
      536
    ],
    [
      146,
      152,
      157,
      543,
      544,
      545,
      541,
      147
    ],
    [
      157,
      156,
      546,
      547,
      543
    ],
    [
      155,
      159,
      548,
      549,
      546,
      156
    ],
    [
      158,
      163,
      167,
      550,
      551,
      548,
      159
    ],
    [
      166,
      171,
      552,
      553,
      550,
      167
    ],
    [
      170,
      175,
      554,
      555,
      552,
      171
    ],
    [
      178,
      556,
      557,
      554,
      175,
      174
    ],
    [
      178,
      177,
      558,
      559,
      556
    ],
    [
      176,
      183,
      187,
      560,
      561,
      558,
      177
    ],
    [
      562,
      560,
      187,
      186,
      563
    ],
    [
      564,
      563,
      186,
      185,
      191,
      565
    ],
    [
      191,
      190,
      195,
      566,
      567,
      565
    ],
    [
      194,
      568,
      569,
      570,
      566,
      195
    ],
    [
      199,
      198,
      571,
      572,
      573,
      200
    ],
    [
      200,
      573,
      574,
      202,
      201
    ],
    [
      203,
      202,
      574,
      575,
      576,
      204
    ],
    [
      204,
      576,
      577,
      578,
      206,
      205
    ],
    [
      208,
      207,
      206,
      578,
      579,
      580
    ],
    [
      210,
      209,
      208,
      580,
      581
    ],
    [
      210,
      581,
      582,
      583,
      213,
      212,
      211
    ],
    [
      216,
      215,
      584,
      585,
      218,
      217
    ],
    [
      585,
      586,
      219,
      218
    ],
    [
      586,
      587,
      588,
      221,
      220,
      219
    ],
    [
      223,
      222,
      221,
      588,
      589,
      590
    ],
    [
      223,
      590,
      591,
      592,
      227,
      224
    ],
    [
      225,
      227,
      592,
      593,
      594
    ],
    [
      595,
      596,
      597,
      229,
      226,
      225,
      594
    ],
    [
      598,
      230,
      228,
      229,
      597,
      599
    ],
    [
      598,
      600,
      601,
      232,
      231,
      230
    ],
    [
      232,
      601,
      602,
      603,
      234,
      233
    ],
    [
      234,
      603,
      604,
      605,
      236,
      235
    ],
    [
      238,
      237,
      236,
      605,
      606,
      607
    ],
    [
      238,
      607,
      608,
      609,
      240,
      239
    ],
    [
      609,
      610,
      611,
      242,
      241,
      240
    ],
    [
      242,
      611,
      612,
      244,
      243
    ],
    [
      245,
      244,
      612,
      613,
      614,
      246
    ],
    [
      247,
      246,
      614,
      615,
      616,
      248
    ],
    [
      249,
      248,
      616,
      617,
      252,
      251,
      250
    ],
    [
      256,
      255,
      618,
      619,
      258,
      257
    ],
    [
      620,
      261,
      260,
      259,
      258,
      619,
      621
    ],
    [
      620,
      622,
      623,
      263,
      262,
      261
    ],
    [
      623,
      624,
      265,
      264,
      263
    ],
    [
      266,
      265,
      624,
      625,
      626,
      267
    ],
    [
      268,
      267,
      626,
      627,
      628,
      269
    ],
    [
      270,
      269,
      628,
      629,
      630,
      272,
      271
    ],
    [
      630,
      631,
      632,
      274,
      273,
      272
    ],
    [
      274,
      632,
      633,
      634,
      277,
      275
    ],
    [
      634,
      635,
      636,
      283,
      278,
      277
    ],
    [
      280,
      283,
      636,
      637,
      638,
      284
    ],
    [
      285,
      284,
      638,
      639,
      640,
      288
    ],
    [
      289,
      288,
      640,
      641,
      642,
      292
    ],
    [
      293,
      292,
      642,
      643,
      644,
      296
    ],
    [
      297,
      296,
      644,
      645,
      646,
      300
    ],
    [
      301,
      300,
      646,
      647,
      648,
      304
    ],
    [
      305,
      304,
      648,
      649,
      650,
      308
    ],
    [
      651,
      652,
      312,
      309,
      308,
      650
    ],
    [
      653,
      316,
      313,
      312,
      652,
      654
    ],
    [
      653,
      655,
      656,
      320,
      317,
      316
    ],
    [
      321,
      320,
      656,
      657,
      658,
      325
    ],
    [
      326,
      325,
      658,
      659,
      660,
      329
    ],
    [
      330,
      329,
      660,
      661,
      332
    ],
    [
      333,
      332,
      661,
      662,
      663,
      664
    ],
    [
      665,
      664,
      663,
      666,
      667,
      668,
      669
    ],
    [
      670,
      669,
      668,
      671,
      672
    ],
    [
      673,
      674,
      675,
      676,
      670,
      672
    ],
    [
      677,
      675,
      674,
      678,
      679,
      680,
      681
    ],
    [
      682,
      683,
      684,
      685,
      681,
      680
    ],
    [
      686,
      685,
      684,
      687,
      688,
      689,
      690
    ],
    [
      350,
      691,
      692,
      351
    ],
    [
      346,
      351,
      692,
      693,
      694,
      355,
      352
    ],
    [
      695,
      696,
      697,
      371,
      370
    ],
    [
      698,
      697,
      696,
      699,
      700,
      701,
      702
    ],
    [
      703,
      701,
      700,
      704,
      705,
      706,
      707
    ],
    [
      706,
      705,
      708,
      709,
      710,
      711
    ],
    [
      710,
      709,
      712,
      713,
      714,
      715
    ],
    [
      716,
      714,
      713,
      717,
      718
    ],
    [
      718,
      717,
      719,
      720,
      721,
      722
    ],
    [
      721,
      720,
      723,
      724,
      725,
      726
    ],
    [
      725,
      724,
      727,
      728,
      729
    ],
    [
      728,
      727,
      730,
      731,
      732,
      733,
      734
    ],
    [
      732,
      731,
      735,
      736,
      737
    ],
    [
      192,
      276,
      279,
      282,
      738,
      739,
      193
    ],
    [
      282,
      281,
      287,
      740,
      741,
      738
    ],
    [
      286,
      291,
      742,
      743,
      740,
      287
    ],
    [
      291,
      290,
      295,
      744,
      745,
      742
    ],
    [
      294,
      299,
      746,
      747,
      744,
      295
    ],
    [
      298,
      303,
      748,
      746,
      299
    ],
    [
      302,
      307,
      749,
      750,
      748,
      303
    ],
    [
      306,
      311,
      751,
      752,
      749,
      307
    ],
    [
      310,
      315,
      753,
      754,
      751,
      311
    ],
    [
      314,
      319,
      755,
      756,
      753,
      315
    ],
    [
      318,
      323,
      757,
      758,
      755,
      319
    ],
    [
      324,
      759,
      760,
      757,
      323,
      322
    ],
    [
      324,
      327,
      328,
      761,
      762,
      759
    ],
    [
      328,
      331,
      336,
      763,
      764,
      761
    ],
    [
      336,
      335,
      339,
      765,
      766,
      763
    ],
    [
      339,
      338,
      345,
      767,
      765
    ],
    [
      345,
      344,
      768,
      769,
      767
    ],
    [
      770,
      771,
      768,
      344,
      343,
      772
    ],
    [
      770,
      773,
      774,
      771
    ],
    [
      773,
      775,
      349,
      348,
      776,
      777,
      774
    ],
    [
      354,
      778,
      779,
      780,
      776,
      348,
      347
    ],
    [
      354,
      353,
      357,
      360,
      778
    ],
    [
      368,
      781,
      782,
      783,
      369
    ],
    [
      368,
      374,
      784,
      785,
      781
    ],
    [
      374,
      373,
      786,
      787,
      788,
      789,
      784
    ],
    [
      786,
      790,
      791,
      792,
      793,
      794,
      787
    ],
    [
      790,
      795,
      796,
      797,
      791
    ],
    [
      795,
      798,
      799,
      800,
      796
    ],
    [
      801,
      802,
      803,
      799,
      798
    ],
    [
      804,
      805,
      806,
      807,
      808,
      809,
      802,
      801
    ],
    [
      805,
      810,
      811,
      812,
      813,
      806
    ],
    [
      812,
      811,
      814,
      815,
      816
    ],
    [
      817,
      818,
      815,
      814,
      819
    ],
    [
      820,
      821,
      818,
      817,
      822
    ],
    [
      820,
      823,
      824,
      825,
      821
    ],
    [
      393,
      392,
      826,
      827,
      828,
      824,
      823
    ],
    [
      391,
      398,
      829,
      830,
      826,
      392
    ],
    [
      398,
      397,
      400,
      831,
      832,
      829
    ],
    [
      399,
      406,
      833,
      834,
      831,
      400
    ],
    [
      407,
      835,
      833,
      406,
      405
    ],
    [
      407,
      410,
      414,
      836,
      837,
      838,
      835
    ],
    [
      414,
      413,
      418,
      839,
      840,
      836
    ],
    [
      418,
      417,
      420,
      841,
      842,
      839
    ],
    [
      419,
      426,
      843,
      844,
      841,
      420
    ],
    [
      426,
      425,
      428,
      845,
      843
    ],
    [
      427,
      434,
      846,
      847,
      845,
      428
    ],
    [
      434,
      433,
      436,
      848,
      849,
      846
    ],
    [
      435,
      442,
      850,
      851,
      848,
      436
    ],
    [
      442,
      441,
      852,
      853,
      850
    ],
    [
      441,
      440,
      447,
      854,
      855,
      852
    ],
    [
      447,
      446,
      451,
      856,
      857,
      854
    ],
    [
      451,
      450,
      455,
      858,
      859,
      856
    ],
    [
      455,
      454,
      458,
      860,
      861,
      862,
      858
    ],
    [
      458,
      457,
      461,
      863,
      864,
      860
    ],
    [
      863,
      461,
      460,
      865,
      866,
      867
    ],
    [
      665,
      340,
      337,
      334,
      333,
      664
    ],
    [
      665,
      669,
      670,
      676,
      341,
      340
    ],
    [
      341,
      676,
      675,
      677,
      342
    ],
    [
      686,
      772,
      343,
      342,
      677,
      681,
      685
    ],
    [
      770,
      772,
      686,
      690,
      868,
      775,
      773
    ],
    [
      350,
      349,
      775,
      868,
      869,
      691
    ],
    [
      870,
      364,
      363,
      871,
      872,
      695,
      370,
      369,
      783
    ],
    [
      380,
      379,
      378,
      372,
      371,
      697,
      698
    ],
    [
      380,
      698,
      702,
      384,
      381
    ],
    [
      385,
      384,
      702,
      701,
      703,
      388
    ],
    [
      389,
      388,
      703,
      707,
      394
    ],
    [
      395,
      394,
      707,
      706,
      711,
      401,
      396
    ],
    [
      401,
      711,
      710,
      715,
      403,
      402
    ],
    [
      716,
      408,
      404,
      403,
      715,
      714
    ],
    [
      716,
      718,
      722,
      411,
      409,
      408
    ],
    [
      411,
      722,
      721,
      726,
      415,
      412
    ],
    [
      415,
      726,
      725,
      729,
      421,
      416
    ],
    [
      421,
      729,
      728,
      734,
      423,
      422
    ],
    [
      423,
      734,
      733,
      429,
      424
    ],
    [
      733,
      732,
      737,
      431,
      430,
      429
    ],
    [
      431,
      737,
      736,
      873,
      437,
      432
    ],
    [
      437,
      873,
      874,
      443,
      439,
      438
    ],
    [
      875,
      876,
      444,
      443,
      874
    ],
    [
      877,
      448,
      445,
      444,
      876,
      878
    ],
    [
      877,
      879,
      880,
      452,
      449,
      448
    ],
    [
      881,
      459,
      456,
      453,
      452,
      880
    ],
    [
      377,
      804,
      801,
      798,
      795,
      790,
      786,
      373,
      372,
      378
    ],
    [
      377,
      376,
      810,
      805,
      804
    ],
    [
      375,
      383,
      819,
      814,
      811,
      810,
      376
    ],
    [
      382,
      387,
      822,
      817,
      819,
      383
    ],
    [
      393,
      823,
      820,
      822,
      387,
      386,
      390
    ],
    [
      462,
      467,
      882,
      883,
      463
    ],
    [
      469,
      884,
      885,
      882,
      467,
      466
    ],
    [
      469,
      468,
      471,
      886,
      884
    ],
    [
      471,
      470,
      473,
      887,
      888,
      889,
      886
    ],
    [
      472,
      474,
      476,
      890,
      891,
      887,
      473
    ],
    [
      478,
      892,
      893,
      890,
      476,
      475
    ],
    [
      477,
      480,
      894,
      895,
      892,
      478
    ],
    [
      483,
      896,
      897,
      898,
      894,
      480,
      479
    ],
    [
      483,
      482,
      899,
      896
    ],
    [
      481,
      485,
      900,
      901,
      899,
      482
    ],
    [
      484,
      488,
      902,
      900,
      485
    ],
    [
      903,
      904,
      902,
      488,
      487
    ],
    [
      490,
      905,
      906,
      903,
      487,
      486
    ],
    [
      490,
      489,
      492,
      907,
      908,
      905
    ],
    [
      491,
      494,
      909,
      910,
      907,
      492
    ],
    [
      496,
      911,
      912,
      909,
      494,
      493
    ],
    [
      496,
      495,
      498,
      913,
      911
    ],
    [
      499,
      501,
      914,
      915,
      913,
      498,
      497
    ],
    [
      500,
      503,
      916,
      914,
      501
    ],
    [
      917,
      916,
      503,
      502,
      504,
      506
    ],
    [
      917,
      506,
      505,
      507,
      509,
      918,
      919
    ],
    [
      509,
      508,
      511,
      920,
      918
    ],
    [
      513,
      921,
      922,
      920,
      511,
      510
    ],
    [
      513,
      512,
      514,
      516,
      923,
      924,
      921
    ],
    [
      519,
      925,
      926,
      923,
      516,
      515
    ],
    [
      519,
      518,
      927,
      925
    ],
    [
      518,
      517,
      520,
      523,
      928,
      929,
      927
    ],
    [
      523,
      522,
      930,
      928
    ],
    [
      522,
      521,
      525,
      931,
      932,
      930
    ],
    [
      524,
      527,
      933,
      934,
      931,
      525
    ],
    [
      526,
      528,
      531,
      935,
      936,
      937,
      933,
      527
    ],
    [
      531,
      530,
      938,
      939,
      935
    ],
    [
      529,
      533,
      940,
      938,
      530
    ],
    [
      533,
      532,
      535,
      941,
      942,
      940
    ],
    [
      535,
      534,
      540,
      943,
      944,
      945,
      946,
      941
    ],
    [
      947,
      948,
      949,
      950,
      951,
      952
    ],
    [
      953,
      954,
      955,
      952,
      951
    ],
    [
      947,
      956,
      957,
      948
    ],
    [
      947,
      952,
      955,
      958,
      959,
      956
    ],
    [
      960,
      961,
      962,
      957,
      956,
      959
    ],
    [
      960,
      959,
      958,
      963,
      964,
      965,
      966
    ],
    [
      967,
      968,
      969,
      970,
      971,
      972,
      973,
      974
    ],
    [
      975,
      976,
      977,
      978,
      971,
      970,
      979
    ],
    [
      975,
      980,
      981,
      982,
      983,
      984,
      985,
      976
    ],
    [
      981,
      946,
      945,
      986,
      987,
      982
    ],
    [
      945,
      944,
      988,
      989,
      986
    ],
    [
      944,
      943,
      990,
      991,
      988
    ],
    [
      943,
      540,
      539,
      992,
      990
    ],
    [
      539,
      538,
      993,
      994,
      992
    ],
    [
      538,
      537,
      995,
      996,
      993
    ],
    [
      537,
      536,
      542,
      997,
      998,
      995
    ],
    [
      545,
      999,
      1000,
      997,
      542,
      541
    ],
    [
      1001,
      1002,
      999,
      545,
      544
    ],
    [
      1001,
      544,
      543,
      547,
      1003,
      1004
    ],
    [
      546,
      549,
      1005,
      1003,
      547
    ],
    [
      551,
      1006,
      1007,
      1005,
      549,
      548
    ],
    [
      553,
      1008,
      1006,
      551,
      550
    ],
    [
      553,
      552,
      555,
      1009,
      1010,
      1008
    ],
    [
      1011,
      1009,
      555,
      554,
      557,
      1012
    ],
    [
      1012,
      557,
      556,
      559,
      1013,
      1014
    ],
    [
      561,
      1015,
      1016,
      1013,
      559,
      558
    ],
    [
      561,
      560,
      562,
      1017,
      1018,
      1015
    ],
    [
      564,
      1019,
      1020,
      1017,
      562,
      563
    ],
    [
      564,
      565,
      567,
      1021,
      1019
    ],
    [
      570,
      1022,
      1021,
      567,
      566
    ],
    [
      570,
      569,
      1023,
      1024,
      1025,
      1022
    ],
    [
      572,
      1026,
      1027,
      1028,
      575,
      574,
      573
    ],
    [
      575,
      1028,
      1029,
      1030,
      577,
      576
    ],
    [
      578,
      577,
      1030,
      1031,
      579
    ],
    [
      581,
      580,
      579,
      1031,
      1032,
      1033,
      582
    ],
    [
      1033,
      1034,
      583,
      582
    ],
    [
      213,
      583,
      1034,
      1035,
      1036,
      1037,
      1038,
      584,
      215,
      214
    ],
    [
      585,
      584,
      1038,
      1039,
      1040,
      1041,
      587,
      586
    ],
    [
      588,
      587,
      1041,
      1042,
      1043,
      589
    ],
    [
      591,
      590,
      589,
      1043,
      1044
    ],
    [
      591,
      1044,
      1045,
      1046,
      593,
      592
    ],
    [
      595,
      594,
      593,
      1046,
      1047,
      1048,
      1049
    ],
    [
      595,
      1049,
      1050,
      1051,
      596
    ],
    [
      599,
      597,
      596,
      1051,
      1052,
      1053
    ],
    [
      598,
      599,
      1053,
      1054,
      1055,
      600
    ],
    [
      1056,
      1057,
      602,
      601,
      600,
      1055
    ],
    [
      602,
      1057,
      1058,
      1059,
      604,
      603
    ],
    [
      604,
      1059,
      1060,
      1061,
      606,
      605
    ],
    [
      607,
      606,
      1061,
      1062,
      1063,
      608
    ],
    [
      609,
      608,
      1063,
      1064,
      610
    ],
    [
      612,
      611,
      610,
      1064,
      1065,
      613
    ],
    [
      614,
      613,
      1065,
      1066,
      615
    ],
    [
      617,
      616,
      615,
      1066,
      1067,
      1068,
      1069
    ],
    [
      1070,
      1071,
      1072,
      1073,
      1074,
      1069,
      1068
    ],
    [
      1070,
      1075,
      1076,
      1077,
      1071
    ],
    [
      1075,
      1078,
      1079,
      1080,
      1076
    ],
    [
      1081,
      1082,
      1083,
      1079,
      1078
    ],
    [
      1081,
      1084,
      1085,
      1086,
      1087,
      1082
    ],
    [
      1085,
      1084,
      1088,
      1089,
      1090,
      1091
    ],
    [
      1090,
      1089,
      1092,
      1093,
      1094,
      1095
    ],
    [
      1096,
      1097,
      1098,
      1099,
      1094,
      1093
    ],
    [
      1098,
      1097,
      1100,
      1101,
      1102,
      1103
    ],
    [
      1104,
      1105,
      1106,
      1102,
      1101,
      1107
    ],
    [
      1104,
      1108,
      1109,
      1110,
      1111,
      1105
    ],
    [
      1112,
      1110,
      1109,
      1113,
      1114,
      1115
    ],
    [
      1116,
      1115,
      1114,
      1117,
      1118,
      1119
    ],
    [
      1120,
      1119,
      1118,
      1121,
      1122
    ],
    [
      1123,
      1122,
      1121,
      1124,
      1125,
      1126
    ],
    [
      1127,
      1126,
      1125,
      1128,
      1129
    ],
    [
      1130,
      1129,
      1128,
      1131,
      1132,
      1133,
      1134
    ],
    [
      617,
      1069,
      1074,
      618,
      255,
      254,
      253,
      252
    ],
    [
      1073,
      621,
      619,
      618,
      1074
    ],
    [
      620,
      621,
      1073,
      1072,
      622
    ],
    [
      623,
      622,
      1072,
      1071,
      1077,
      625,
      624
    ],
    [
      1076,
      1080,
      627,
      626,
      625,
      1077
    ],
    [
      629,
      628,
      627,
      1080,
      1079,
      1083
    ],
    [
      630,
      629,
      1083,
      1082,
      1087,
      631
    ],
    [
      632,
      631,
      1087,
      1086,
      633
    ],
    [
      634,
      633,
      1086,
      1085,
      1091,
      635
    ],
    [
      635,
      1091,
      1090,
      1095,
      637,
      636
    ],
    [
      638,
      637,
      1095,
      1094,
      1099,
      639
    ],
    [
      639,
      1099,
      1098,
      1103,
      641,
      640
    ],
    [
      1106,
      643,
      642,
      641,
      1103,
      1102
    ],
    [
      1106,
      1105,
      1111,
      645,
      644,
      643
    ],
    [
      1112,
      647,
      646,
      645,
      1111,
      1110
    ],
    [
      1112,
      1115,
      1116,
      649,
      648,
      647
    ],
    [
      651,
      650,
      649,
      1116,
      1119,
      1120
    ],
    [
      651,
      1120,
      1122,
      1123,
      654,
      652
    ],
    [
      653,
      654,
      1123,
      1126,
      1127,
      655
    ],
    [
      655,
      1127,
      1129,
      1130,
      657,
      656
    ],
    [
      657,
      1130,
      1134,
      659,
      658
    ],
    [
      1134,
      1133,
      1135,
      1136,
      1137,
      662,
      661,
      660,
      659
    ],
    [
      663,
      662,
      1137,
      1138,
      666
    ],
    [
      1139,
      667,
      666,
      1138,
      1140,
      1141
    ],
    [
      1139,
      1141,
      1142,
      1143,
      1144
    ],
    [
      1145,
      1146,
      1147,
      1148,
      1149,
      1144,
      1143,
      1150
    ],
    [
      668,
      667,
      1139,
      1144,
      1149,
      671
    ],
    [
      673,
      672,
      671,
      1149,
      1148
    ],
    [
      673,
      1148,
      1147,
      1151,
      678,
      674
    ],
    [
      679,
      678,
      1151,
      1152
    ],
    [
      682,
      680,
      679,
      1152,
      1153,
      1154
    ],
    [
      682,
      1154,
      1155,
      683
    ],
    [
      687,
      684,
      683,
      1155,
      1156,
      1157,
      1158,
      1159,
      1160
    ],
    [
      1160,
      1159,
      1161,
      1162
    ],
    [
      687,
      1160,
      1162,
      1163,
      1164,
      688
    ],
    [
      1026,
      1165,
      1166,
      1167,
      1168,
      1169,
      1027
    ],
    [
      1167,
      1170,
      1171,
      1172,
      1173,
      1168
    ],
    [
      1174,
      1173,
      1172,
      1175,
      1176
    ],
    [
      1177,
      1178,
      1179,
      1180,
      1181,
      1182,
      1183
    ],
    [
      1184,
      1185,
      1181,
      1180,
      1186
    ],
    [
      1187,
      1146,
      1145,
      1188,
      1185,
      1184,
      1189
    ],
    [
      1187,
      1190,
      1191,
      1192,
      1153,
      1152,
      1151,
      1147,
      1146
    ],
    [
      1154,
      1153,
      1192,
      1193,
      1156,
      1155
    ],
    [
      1194,
      1195,
      1196,
      1157,
      1156,
      1193
    ],
    [
      1161,
      1159,
      1158,
      1197,
      1198
    ],
    [
      1161,
      1198,
      1199,
      1200,
      1163,
      1162
    ],
    [
      1163,
      1200,
      1201,
      1164
    ],
    [
      688,
      1164,
      1201,
      1202,
      1203,
      689
    ],
    [
      868,
      690,
      689,
      1203,
      1204,
      1205,
      869
    ],
    [
      693,
      692,
      691,
      869,
      1205,
      1206,
      1207,
      1208
    ],
    [
      693,
      1208,
      1209,
      1210,
      694
    ],
    [
      358,
      356,
      355,
      694,
      1210,
      1211,
      361
    ],
    [
      363,
      362,
      1212,
      871
    ],
    [
      1209,
      1213,
      1214,
      1211,
      1210
    ],
    [
      362,
      361,
      1211,
      1214,
      1215,
      1212
    ],
    [
      1212,
      1215,
      1216,
      1217,
      1218,
      1219,
      872,
      871
    ],
    [
      1220,
      699,
      696,
      695,
      872,
      1219
    ],
    [
      1220,
      1221,
      704,
      700,
      699
    ],
    [
      705,
      704,
      1221,
      1222,
      708
    ],
    [
      709,
      708,
      1222,
      1223,
      1224,
      712
    ],
    [
      712,
      1224,
      1225,
      1226,
      719,
      717,
      713
    ],
    [
      719,
      1226,
      1227,
      723,
      720
    ],
    [
      723,
      1227,
      1228,
      730,
      727,
      724
    ],
    [
      194,
      193,
      739,
      1229,
      568
    ],
    [
      739,
      738,
      741,
      1230,
      1229
    ],
    [
      741,
      740,
      743,
      1231,
      1232,
      1230
    ],
    [
      743,
      742,
      745,
      1233,
      1231
    ],
    [
      1234,
      1233,
      745,
      744,
      747,
      1235
    ],
    [
      746,
      748,
      750,
      1236,
      1237,
      1235,
      747
    ],
    [
      750,
      749,
      752,
      1238,
      1239,
      1236
    ],
    [
      751,
      754,
      1240,
      1238,
      752
    ],
    [
      1241,
      1240,
      754,
      753,
      756,
      1242
    ],
    [
      755,
      758,
      1243,
      1244,
      1242,
      756
    ],
    [
      758,
      757,
      760,
      1245,
      1246,
      1243
    ],
    [
      760,
      759,
      762,
      1247,
      1248,
      1245
    ],
    [
      761,
      764,
      1249,
      1250,
      1247,
      762
    ],
    [
      763,
      766,
      1251,
      1252,
      1249,
      764
    ],
    [
      767,
      769,
      1253,
      1251,
      766,
      765
    ],
    [
      360,
      359,
      367,
      1254,
      1255,
      1256,
      779,
      778
    ],
    [
      1257,
      1258,
      1259,
      1260,
      1261,
      1262
    ],
    [
      784,
      789,
      1263,
      1264,
      1265,
      1261,
      1260,
      785
    ],
    [
      788,
      1266,
      1267,
      1263,
      789
    ],
    [
      1268,
      1269,
      1270,
      1267,
      1266
    ],
    [
      1268,
      1271,
      1272,
      1273,
      1274,
      1269
    ],
    [
      1275,
      1276,
      1277,
      1278,
      1273,
      1272
    ],
    [
      1279,
      1280,
      1281,
      1282,
      1277,
      1276
    ],
    [
      1283,
      1281,
      1280,
      1284,
      1285,
      1286
    ],
    [
      1287,
      1288,
      1289,
      1286,
      1285
    ],
    [
      1287,
      1290,
      1291,
      1292,
      1288
    ],
    [
      1291,
      1293,
      1294,
      1295,
      1292
    ],
    [
      1296,
      1297,
      1294,
      1293,
      1298,
      1299
    ],
    [
      1296,
      1299,
      1300,
      1301,
      1302
    ],
    [
      1300,
      1303,
      1304,
      1305,
      1306,
      1307,
      1308,
      1309,
      1301
    ],
    [
      870,
      1258,
      1257,
      365,
      364
    ],
    [
      870,
      783,
      782,
      1259,
      1258
    ],
    [
      781,
      785,
      1260,
      1259,
      782
    ],
    [
      1268,
      1266,
      788,
      787,
      794,
      1271
    ],
    [
      1271,
      794,
      793,
      1275,
      1272
    ],
    [
      792,
      1310,
      1279,
      1276,
      1275,
      793
    ],
    [
      1279,
      1310,
      1311,
      1284,
      1280
    ],
    [
      797,
      796,
      800,
      1312,
      1290,
      1287,
      1285,
      1284,
      1311
    ],
    [
      1312,
      1313,
      1298,
      1293,
      1291,
      1290
    ],
    [
      1314,
      1315,
      1316,
      1303,
      1300,
      1299,
      1298,
      1313,
      1317
    ],
    [
      1318,
      1319,
      1320,
      1321,
      1322,
      1323,
      1324
    ],
    [
      1318,
      1324,
      1325,
      1326,
      1327,
      1328,
      1329
    ],
    [
      1330,
      1331,
      1332,
      1333,
      1334,
      1335
    ],
    [
      1336,
      1337,
      1338,
      1339,
      1331,
      1330
    ],
    [
      1340,
      1338,
      1337,
      1341,
      1342
    ],
    [
      1340,
      1342,
      1343,
      1344,
      1345,
      1346
    ],
    [
      1345,
      1344,
      1347,
      1348,
      1349
    ],
    [
      1348,
      1350,
      1351,
      1352,
      1353,
      1349
    ],
    [
      1354,
      1355,
      1352,
      1351,
      1356,
      1357
    ],
    [
      1354,
      1357,
      1358,
      1359,
      1360
    ],
    [
      1361,
      1362,
      1359,
      1358,
      1363,
      1364
    ],
    [
      1361,
      1364,
      1365,
      1366,
      1367,
      1368
    ],
    [
      1366,
      1369,
      1370,
      1371,
      1372,
      1373,
      1367
    ],
    [
      1374,
      1372,
      1371,
      1375,
      1376,
      1377
    ],
    [
      792,
      791,
      797,
      1311,
      1310
    ],
    [
      1312,
      800,
      799,
      803,
      1317,
      1313
    ],
    [
      802,
      809,
      1314,
      1317,
      803
    ],
    [
      1314,
      809,
      808,
      1378,
      1379,
      1380,
      1315
    ],
    [
      815,
      818,
      821,
      825,
      1381,
      1382,
      816
    ],
    [
      812,
      816,
      1382,
      1383,
      1384,
      1385,
      813
    ],
    [
      806,
      813,
      1385,
      1386,
      1387,
      1388,
      807
    ],
    [
      1382,
      1381,
      1389,
      1383
    ],
    [
      824,
      828,
      1390,
      1391,
      1392,
      1389,
      1381,
      825
    ],
    [
      828,
      827,
      1393,
      1394,
      1390
    ],
    [
      826,
      830,
      1395,
      1396,
      1393,
      827
    ],
    [
      832,
      1397,
      1398,
      1395,
      830,
      829
    ],
    [
      834,
      1399,
      1400,
      1397,
      832,
      831
    ],
    [
      834,
      833,
      835,
      838,
      1401,
      1402,
      1399
    ],
    [
      837,
      1403,
      1404,
      1401,
      838
    ],
    [
      837,
      836,
      840,
      1405,
      1406,
      1403
    ],
    [
      842,
      1407,
      1408,
      1405,
      840,
      839
    ],
    [
      842,
      841,
      844,
      1409,
      1410,
      1407
    ],
    [
      845,
      847,
      1411,
      1412,
      1409,
      844,
      843
    ],
    [
      847,
      846,
      849,
      1413,
      1414,
      1411
    ],
    [
      848,
      851,
      1415,
      1416,
      1413,
      849
    ],
    [
      850,
      853,
      1417,
      1418,
      1415,
      851
    ],
    [
      852,
      855,
      1419,
      1420,
      1417,
      853
    ],
    [
      855,
      854,
      857,
      1421,
      1422,
      1419
    ],
    [
      859,
      1423,
      1424,
      1421,
      857,
      856
    ],
    [
      859,
      858,
      862,
      1425,
      1426,
      1423
    ],
    [
      861,
      1427,
      1428,
      1425,
      862
    ],
    [
      861,
      860,
      864,
      1429,
      1430,
      1427
    ],
    [
      864,
      863,
      867,
      1431,
      1432,
      1433,
      1429
    ],
    [
      866,
      1434,
      1435,
      1431,
      867
    ],
    [
      866,
      865,
      1436,
      1437,
      1438,
      1439,
      1434
    ],
    [
      1440,
      1441,
      1442,
      1443
    ],
    [
      1444,
      1445,
      1446,
      1447,
      1439,
      1438
    ],
    [
      1444,
      1442,
      1441,
      1448,
      1449,
      1445
    ],
    [
      1446,
      1445,
      1449,
      1450,
      1451,
      1452,
      1453
    ],
    [
      875,
      874,
      873,
      736,
      735,
      1454,
      1455,
      1456,
      1457
    ],
    [
      875,
      1457,
      1458,
      878,
      876
    ],
    [
      877,
      878,
      1458,
      1459,
      879
    ],
    [
      881,
      880,
      879,
      1459,
      1460,
      1461
    ],
    [
      892,
      895,
      1462,
      1463,
      1464,
      1465,
      893
    ],
    [
      898,
      1466,
      1462,
      895,
      894
    ],
    [
      898,
      897,
      1467,
      1468,
      1466
    ],
    [
      896,
      899,
      901,
      1469,
      1470,
      1471,
      1467,
      897
    ],
    [
      902,
      904,
      1472,
      1473,
      1474,
      1469,
      901,
      900
    ],
    [
      903,
      906,
      1475,
      1476,
      1472,
      904
    ],
    [
      905,
      908,
      1477,
      1478,
      1475,
      906
    ],
    [
      908,
      907,
      910,
      1479,
      1477
    ],
    [
      910,
      909,
      912,
      1480,
      1481,
      1482,
      1479
    ],
    [
      913,
      915,
      1480,
      912,
      911
    ],
    [
      917,
      919,
      1483,
      1484,
      1481,
      1480,
      915,
      914,
      916
    ],
    [
      884,
      886,
      889,
      1485,
      1486,
      1487,
      1488,
      885
    ],
    [
      889,
      888,
      1489,
      1485
    ],
    [
      887,
      891,
      1490,
      1491,
      1489,
      888
    ],
    [
      890,
      893,
      1465,
      1492,
      1493,
      1490,
      891
    ],
    [
      1494,
      1495,
      1496,
      1497,
      1498,
      1484,
      1483,
      1499,
      1500
    ],
    [
      921,
      924,
      1500,
      1499,
      922
    ],
    [
      920,
      922,
      1499,
      1483,
      919,
      918
    ],
    [
      923,
      926,
      1501,
      1494,
      1500,
      924
    ],
    [
      927,
      929,
      1502,
      1501,
      926,
      925
    ],
    [
      929,
      928,
      930,
      932,
      1503,
      1504,
      1502
    ],
    [
      931,
      934,
      1505,
      1506,
      1503,
      932
    ],
    [
      934,
      933,
      937,
      1507,
      1508,
      1505
    ],
    [
      937,
      936,
      1509,
      1507
    ],
    [
      936,
      935,
      939,
      1510,
      1509
    ],
    [
      940,
      942,
      1511,
      1512,
      1510,
      939,
      938
    ],
    [
      980,
      1511,
      942,
      941,
      946,
      981
    ],
    [
      1513,
      1514,
      1515,
      991,
      990,
      992,
      994
    ],
    [
      1513,
      994,
      993,
      996,
      1516
    ],
    [
      996,
      995,
      998,
      1517,
      1518,
      1516
    ],
    [
      998,
      997,
      1000,
      1519,
      1517
    ],
    [
      999,
      1002,
      1520,
      1521,
      1522,
      1519,
      1000
    ],
    [
      1001,
      1004,
      1523,
      1520,
      1002
    ],
    [
      1524,
      1523,
      1004,
      1003,
      1005,
      1007
    ],
    [
      1008,
      1010,
      1525,
      1526,
      1524,
      1007,
      1006
    ],
    [
      1010,
      1009,
      1011,
      1527,
      1528,
      1525
    ],
    [
      1011,
      1012,
      1014,
      1529,
      1527
    ],
    [
      1529,
      1014,
      1013,
      1016,
      1530,
      1531
    ],
    [
      1018,
      1532,
      1533,
      1534,
      1530,
      1016,
      1015
    ],
    [
      976,
      985,
      1535,
      1536,
      1537,
      977
    ],
    [
      1535,
      985,
      984,
      1538,
      1539
    ],
    [
      984,
      983,
      1540,
      1541,
      1538
    ],
    [
      1542,
      1543,
      1544,
      1541,
      1540
    ],
    [
      982,
      987,
      1542,
      1540,
      983
    ],
    [
      989,
      1545,
      1546,
      1543,
      1542,
      987,
      986
    ],
    [
      989,
      988,
      991,
      1515,
      1547,
      1548,
      1545
    ],
    [
      1514,
      1549,
      1550,
      1547,
      1515
    ],
    [
      1551,
      1552,
      1553,
      1554,
      1555,
      1556,
      1557
    ],
    [
      1556,
      1555,
      1558,
      1559
    ],
    [
      1560,
      1561,
      1559,
      1558,
      1562,
      1563,
      1564
    ],
    [
      1565,
      1566,
      1567,
      1568,
      1569,
      1570,
      1571,
      1572
    ],
    [
      1573,
      1570,
      1569,
      1574,
      1575,
      1576
    ],
    [
      1577,
      1578,
      1579,
      1580,
      1576,
      1575,
      1581,
      1582,
      1583
    ],
    [
      1584,
      1585,
      1579,
      1578,
      1586
    ],
    [
      1587,
      1588,
      1580,
      1579,
      1585,
      1589
    ],
    [
      1590,
      1591,
      1592,
      1593
    ],
    [
      1594,
      1595,
      1596,
      1597,
      1598,
      1599
    ],
    [
      1594,
      1599,
      1600,
      1601,
      1602,
      1603
    ],
    [
      964,
      1602,
      1601,
      965
    ],
    [
      961,
      1604,
      1605,
      962
    ],
    [
      960,
      966,
      967,
      974,
      1606,
      1604,
      961
    ],
    [
      974,
      973,
      1607,
      1608,
      1609,
      1610,
      1606
    ],
    [
      973,
      972,
      1611,
      1607
    ],
    [
      957,
      962,
      1605,
      1612,
      1613,
      949,
      948
    ],
    [
      1612,
      1605,
      1604,
      1606,
      1610,
      1614,
      1615,
      1616,
      1617
    ],
    [
      1618,
      1619,
      1620,
      1532,
      1018,
      1017,
      1020
    ],
    [
      1618,
      1020,
      1019,
      1021,
      1022,
      1025,
      1621,
      1622
    ],
    [
      1623,
      1029,
      1028,
      1027,
      1169,
      1624
    ],
    [
      1625,
      1626,
      1032,
      1031,
      1030,
      1029,
      1623
    ],
    [
      1033,
      1032,
      1626,
      1627,
      1035,
      1034
    ],
    [
      1628,
      1627,
      1626,
      1625,
      1629,
      1630
    ],
    [
      1628,
      1631,
      1036,
      1035,
      1627
    ],
    [
      1036,
      1631,
      1632,
      1037
    ],
    [
      1633,
      1634,
      1039,
      1038,
      1037,
      1632,
      1635
    ],
    [
      1040,
      1039,
      1634,
      1636,
      1637
    ],
    [
      1040,
      1637,
      1638,
      1042,
      1041
    ],
    [
      1044,
      1043,
      1042,
      1638,
      1639,
      1640,
      1641,
      1642,
      1045
    ],
    [
      1642,
      1643,
      1644,
      1047,
      1046,
      1045
    ],
    [
      1645,
      1646,
      1048,
      1047,
      1644
    ],
    [
      1049,
      1048,
      1646,
      1647,
      1648,
      1050
    ],
    [
      1050,
      1648,
      1649,
      1650,
      1052,
      1051
    ],
    [
      1052,
      1650,
      1651,
      1652,
      1054,
      1053
    ],
    [
      1056,
      1055,
      1054,
      1652,
      1653
    ],
    [
      1056,
      1653,
      1654,
      1655,
      1656,
      1058,
      1057
    ],
    [
      1657,
      1060,
      1059,
      1058,
      1656
    ],
    [
      1062,
      1061,
      1060,
      1657,
      1658
    ],
    [
      1066,
      1065,
      1064,
      1063,
      1062,
      1658,
      1659,
      1067
    ],
    [
      1070,
      1068,
      1067,
      1659,
      1660,
      1088,
      1084,
      1081,
      1078,
      1075
    ],
    [
      1661,
      1662,
      1092,
      1089,
      1088,
      1660
    ],
    [
      1663,
      1096,
      1093,
      1092,
      1662
    ],
    [
      1663,
      1664,
      1100,
      1097,
      1096
    ],
    [
      1101,
      1100,
      1664,
      1665,
      1666,
      1667,
      1107
    ],
    [
      1104,
      1107,
      1667,
      1668,
      1108
    ],
    [
      1668,
      1669,
      1670,
      1113,
      1109,
      1108
    ],
    [
      1113,
      1670,
      1671,
      1672,
      1117,
      1114
    ],
    [
      1118,
      1117,
      1672,
      1673,
      1124,
      1121
    ],
    [
      1674,
      1131,
      1128,
      1125,
      1124,
      1673,
      1675,
      1676
    ],
    [
      1674,
      1677,
      1132,
      1131
    ],
    [
      1133,
      1132,
      1677,
      1678,
      1679,
      1135
    ],
    [
      1182,
      1181,
      1185,
      1188,
      1680,
      1681
    ],
    [
      1145,
      1150,
      1682,
      1680,
      1188
    ],
    [
      1683,
      1682,
      1150,
      1143,
      1142
    ],
    [
      1683,
      1142,
      1141,
      1140,
      1684,
      1685
    ],
    [
      1140,
      1138,
      1137,
      1136,
      1684
    ],
    [
      1686,
      1687,
      1688,
      1202,
      1201,
      1200,
      1199
    ],
    [
      1204,
      1203,
      1202,
      1688,
      1689,
      1690,
      1691
    ],
    [
      1692,
      1206,
      1205,
      1204,
      1691
    ],
    [
      1207,
      1206,
      1692,
      1693
    ],
    [
      1208,
      1207,
      1693,
      1694,
      1213,
      1209
    ],
    [
      1196,
      1695,
      1197,
      1158,
      1157
    ],
    [
      1696,
      1697,
      1698,
      1695,
      1196,
      1195
    ],
    [
      1699,
      1700,
      1701,
      1702,
      1698,
      1697,
      1703
    ],
    [
      1699,
      1704,
      1705,
      1706,
      1700
    ],
    [
      1707,
      1705,
      1704,
      1708,
      1709,
      1710,
      1711
    ],
    [
      1194,
      1193,
      1192,
      1191,
      1712,
      1713,
      1714,
      1715
    ],
    [
      1194,
      1715,
      1716,
      1717,
      1696,
      1195
    ],
    [
      1696,
      1717,
      1718,
      1719,
      1703,
      1697
    ],
    [
      1720,
      1708,
      1704,
      1699,
      1703,
      1719
    ],
    [
      1189,
      1184,
      1186,
      1721,
      1722,
      1723
    ],
    [
      1187,
      1189,
      1723,
      1724,
      1725,
      1190
    ],
    [
      1726,
      1712,
      1191,
      1190,
      1725,
      1727
    ],
    [
      1726,
      1728,
      1713,
      1712
    ],
    [
      1728,
      1729,
      1730,
      1714,
      1713
    ],
    [
      1716,
      1715,
      1714,
      1730,
      1731,
      1732
    ],
    [
      1733,
      1718,
      1717,
      1716,
      1732,
      1734
    ],
    [
      1733,
      1735,
      1736,
      1720,
      1719,
      1718
    ],
    [
      1737,
      1175,
      1172,
      1171,
      1738,
      1739
    ],
    [
      1737,
      1740,
      1741,
      1742,
      1176,
      1175
    ],
    [
      1743,
      1744,
      1745,
      1746,
      1747,
      1742,
      1741
    ],
    [
      1748,
      1749,
      1745,
      1744,
      1750,
      1751
    ],
    [
      1748,
      1751,
      1752,
      1753,
      1754
    ],
    [
      1755,
      1756,
      1754,
      1753,
      1757,
      1758,
      1759
    ],
    [
      1760,
      1761,
      1762,
      1721,
      1186,
      1180,
      1179,
      1763
    ],
    [
      1174,
      1764,
      1624,
      1169,
      1168,
      1173
    ],
    [
      1765,
      1766,
      1764,
      1174,
      1176,
      1742,
      1747
    ],
    [
      1765,
      1747,
      1746,
      1767,
      1768
    ],
    [
      1767,
      1746,
      1745,
      1749,
      1769
    ],
    [
      1748,
      1754,
      1756,
      1770,
      1769,
      1749
    ],
    [
      1771,
      1178,
      1177,
      1772,
      1773,
      1774
    ],
    [
      1177,
      1183,
      1775,
      1772
    ],
    [
      1776,
      1775,
      1183,
      1182,
      1681,
      1777
    ],
    [
      1778,
      1777,
      1681,
      1680,
      1682,
      1683,
      1685
    ],
    [
      1778,
      1685,
      1684,
      1136,
      1135,
      1679,
      1779
    ],
    [
      1220,
      1219,
      1218,
      1780,
      1223,
      1222,
      1221
    ],
    [
      1223,
      1780,
      1781,
      1225,
      1224
    ],
    [
      1781,
      1782,
      1228,
      1227,
      1226,
      1225
    ],
    [
      1234,
      1783,
      1784,
      1785,
      1232,
      1231,
      1233
    ],
    [
      1785,
      1786,
      1023,
      569,
      568,
      1229,
      1230,
      1232
    ],
    [
      1234,
      1235,
      1237,
      1787,
      1788,
      1783
    ],
    [
      1787,
      1237,
      1236,
      1239,
      1789,
      1790
    ],
    [
      1239,
      1238,
      1240,
      1241,
      1791,
      1789
    ],
    [
      1792,
      1791,
      1241,
      1242,
      1244,
      1793
    ],
    [
      1244,
      1243,
      1246,
      1794,
      1793
    ],
    [
      1245,
      1248,
      1795,
      1796,
      1794,
      1246
    ],
    [
      1250,
      1797,
      1795,
      1248,
      1247
    ],
    [
      1250,
      1249,
      1252,
      1798,
      1797
    ],
    [
      1799,
      1798,
      1252,
      1251,
      1253
    ],
    [
      1799,
      1253,
      769,
      768,
      771,
      774,
      777,
      1800,
      1801
    ],
    [
      1800,
      777,
      776,
      780,
      1802,
      1803
    ],
    [
      1802,
      780,
      779,
      1256,
      1804,
      1805
    ],
    [
      1255,
      1806,
      1804,
      1256
    ],
    [
      1254,
      1807,
      1808,
      1806,
      1255
    ],
    [
      1809,
      1810,
      1807,
      1254,
      367,
      366
    ],
    [
      365,
      1257,
      1262,
      1811,
      1809,
      366
    ],
    [
      1812,
      1811,
      1262,
      1261,
      1265,
      1813
    ],
    [
      1814,
      1815,
      1813,
      1265,
      1264
    ],
    [
      1263,
      1267,
      1270,
      1816,
      1814,
      1264
    ],
    [
      1817,
      1816,
      1270,
      1269,
      1274
    ],
    [
      1817,
      1274,
      1273,
      1278,
      1818,
      1819
    ],
    [
      1818,
      1278,
      1277,
      1282,
      1820
    ],
    [
      1283,
      1821,
      1820,
      1282,
      1281
    ],
    [
      1283,
      1286,
      1289,
      1822,
      1823,
      1821
    ],
    [
      1292,
      1295,
      1824,
      1822,
      1289,
      1288
    ],
    [
      1297,
      1825,
      1826,
      1827,
      1824,
      1295,
      1294
    ],
    [
      1296,
      1302,
      1828,
      1829,
      1825,
      1297
    ],
    [
      1830,
      1828,
      1302,
      1301,
      1309,
      1831
    ],
    [
      1309,
      1308,
      1832,
      1833,
      1834,
      1835,
      1836,
      1831
    ],
    [
      1837,
      1838,
      1839,
      1840,
      1841,
      1842,
      1843
    ],
    [
      1837,
      1843,
      1844,
      1845,
      1846
    ],
    [
      1846,
      1845,
      1847,
      1848,
      1849
    ],
    [
      1850,
      1851,
      1848,
      1847
    ],
    [
      1850,
      1833,
      1832,
      1852,
      1853,
      1851
    ],
    [
      1308,
      1307,
      1854,
      1855,
      1852,
      1832
    ],
    [
      1856,
      1857,
      1854,
      1307,
      1306
    ],
    [
      1856,
      1306,
      1305,
      1858
    ],
    [
      1858,
      1305,
      1304,
      1859,
      1860,
      1861
    ],
    [
      1859,
      1321,
      1320,
      1860
    ],
    [
      1387,
      1862,
      1863,
      1864,
      1388
    ],
    [
      1865,
      1864,
      1863,
      1866,
      1867,
      1868
    ],
    [
      1869,
      1868,
      1867,
      1870,
      1871,
      1872
    ],
    [
      1873,
      1874,
      1875,
      1876,
      1871,
      1870
    ],
    [
      1324,
      1323,
      1876,
      1875,
      1325
    ],
    [
      1877,
      1878,
      1861,
      1860,
      1320,
      1319
    ],
    [
      1877,
      1319,
      1318,
      1329,
      1879,
      1880
    ],
    [
      1881,
      1333,
      1332,
      1882,
      1883
    ],
    [
      1884,
      1885,
      1882,
      1332,
      1331,
      1339
    ],
    [
      1886,
      1384,
      1383,
      1389,
      1392,
      1887
    ],
    [
      1886,
      1888,
      1386,
      1385,
      1384
    ],
    [
      1387,
      1386,
      1888,
      1889,
      1862
    ],
    [
      1862,
      1889,
      1890,
      1891,
      1866,
      1863
    ],
    [
      1867,
      1866,
      1891,
      1892,
      1893,
      1873,
      1870
    ],
    [
      1873,
      1893,
      1894,
      1895,
      1874
    ],
    [
      1895,
      1894,
      1896,
      1897,
      1898
    ],
    [
      1895,
      1898,
      1899,
      1900,
      1326,
      1325,
      1875,
      1874
    ],
    [
      1881,
      1901,
      1902,
      1903,
      1904,
      1334,
      1333
    ],
    [
      1904,
      1905,
      1906,
      1335,
      1334
    ],
    [
      1336,
      1330,
      1335,
      1906,
      1907,
      1908,
      1909
    ],
    [
      1336,
      1909,
      1910,
      1911,
      1341,
      1337
    ],
    [
      1341,
      1911,
      1912,
      1343,
      1342
    ],
    [
      1344,
      1343,
      1912,
      1913,
      1914,
      1915,
      1347
    ],
    [
      1348,
      1347,
      1915,
      1916,
      1917,
      1350
    ],
    [
      1351,
      1350,
      1917,
      1918,
      1919,
      1356
    ],
    [
      1920,
      1921,
      1884,
      1339,
      1338,
      1340,
      1346
    ],
    [
      1920,
      1346,
      1345,
      1349,
      1353,
      1922,
      1923
    ],
    [
      1922,
      1353,
      1352,
      1355,
      1924,
      1925
    ],
    [
      1354,
      1360,
      1926,
      1927,
      1924,
      1355
    ],
    [
      1360,
      1359,
      1362,
      1928,
      1929,
      1926
    ],
    [
      1361,
      1368,
      1930,
      1931,
      1928,
      1362
    ],
    [
      1932,
      1930,
      1368,
      1367,
      1373,
      1933
    ],
    [
      1934,
      1933,
      1373,
      1372,
      1374,
      1935
    ],
    [
      1374,
      1377,
      1936,
      1935
    ],
    [
      1937,
      1936,
      1377,
      1376,
      1938,
      1939,
      1940
    ],
    [
      1941,
      1942,
      1943,
      1944,
      1945,
      1937,
      1940
    ],
    [
      1358,
      1357,
      1356,
      1919,
      1946,
      1947,
      1948,
      1363
    ],
    [
      1364,
      1363,
      1948,
      1949,
      1365
    ],
    [
      1366,
      1365,
      1949,
      1950,
      1369
    ],
    [
      1370,
      1369,
      1950,
      1951,
      1952
    ],
    [
      1371,
      1370,
      1952,
      1953,
      1954,
      1375
    ],
    [
      1376,
      1375,
      1954,
      1955,
      1956,
      1957,
      1938
    ],
    [
      1939,
      1938,
      1957,
      1958,
      1959,
      1960,
      1961
    ],
    [
      1962,
      1963,
      1961,
      1960,
      1964,
      1965,
      1966
    ],
    [
      1391,
      1967,
      1968,
      1969,
      1887,
      1392
    ],
    [
      1391,
      1390,
      1394,
      1970,
      1971,
      1967
    ],
    [
      1972,
      1970,
      1394,
      1393,
      1396
    ],
    [
      1972,
      1396,
      1395,
      1398,
      1973,
      1974
    ],
    [
      1400,
      1975,
      1976,
      1973,
      1398,
      1397
    ],
    [
      1400,
      1399,
      1402,
      1977,
      1978,
      1979,
      1975
    ],
    [
      1402,
      1401,
      1404,
      1980,
      1977
    ],
    [
      1403,
      1406,
      1981,
      1982,
      1980,
      1404
    ],
    [
      1406,
      1405,
      1408,
      1983,
      1984,
      1981
    ],
    [
      1407,
      1410,
      1985,
      1986,
      1983,
      1408
    ],
    [
      1987,
      1985,
      1410,
      1409,
      1412,
      1988
    ],
    [
      1414,
      1989,
      1990,
      1988,
      1412,
      1411
    ],
    [
      1414,
      1413,
      1416,
      1991,
      1992,
      1989
    ],
    [
      1418,
      1993,
      1994,
      1991,
      1416,
      1415
    ],
    [
      1420,
      1995,
      1996,
      1997,
      1993,
      1418,
      1417
    ],
    [
      1420,
      1419,
      1422,
      1998,
      1999,
      1995
    ],
    [
      1422,
      1421,
      1424,
      2000,
      2001,
      1998
    ],
    [
      1423,
      1426,
      2002,
      2003,
      2000,
      1424
    ],
    [
      1426,
      1425,
      1428,
      2004,
      2005,
      2002
    ],
    [
      1427,
      1430,
      2006,
      2007,
      2004,
      1428
    ],
    [
      1429,
      1433,
      2008,
      2009,
      2006,
      1430
    ],
    [
      1433,
      1432,
      2010,
      2011,
      2008
    ],
    [
      1431,
      1435,
      2012,
      2013,
      2010,
      1432
    ],
    [
      1439,
      1447,
      2014,
      2015,
      2012,
      1435,
      1434
    ],
    [
      2016,
      2017,
      2018,
      2019,
      2020,
      2021,
      2022
    ],
    [
      2021,
      2020,
      2023,
      2024,
      2025
    ],
    [
      2026,
      2025,
      2024,
      2027,
      2028,
      2029
    ],
    [
      2029,
      2028,
      2030,
      2031,
      2032,
      2033
    ],
    [
      2034,
      2032,
      2031,
      2035,
      2036,
      2037
    ],
    [
      2038,
      2037,
      2036,
      2039,
      2040,
      2041,
      2042
    ],
    [
      2043,
      2041,
      2040,
      2044,
      2045,
      2046
    ],
    [
      2047,
      2046,
      2045,
      2048,
      2049,
      2050
    ],
    [
      2051,
      2050,
      2049,
      2052,
      2053
    ],
    [
      2054,
      2053,
      2052,
      2055,
      2056,
      2057
    ],
    [
      2058,
      2057,
      2056,
      2059,
      2060,
      2061
    ],
    [
      2062,
      2063,
      2061,
      2060,
      2064
    ],
    [
      2062,
      2064,
      2065,
      2066,
      2067,
      2068,
      2069,
      2070
    ],
    [
      2071,
      2072,
      2068,
      2067
    ],
    [
      2071,
      2073,
      2074,
      2075,
      2076,
      2077,
      2078,
      2072
    ],
    [
      2079,
      2080,
      2081,
      2082,
      2083,
      2076,
      2075
    ],
    [
      2084,
      2085,
      2086,
      2087,
      2088
    ],
    [
      2089,
      2090,
      2091,
      2092,
      2093,
      2094,
      2095
    ],
    [
      2096,
      2097,
      2092,
      2091,
      2098
    ],
    [
      1440,
      2099,
      2097,
      2096,
      1448,
      1441
    ],
    [
      1444,
      1438,
      1437,
      1443,
      1442
    ],
    [
      2100,
      1460,
      1459,
      1458,
      1457,
      1456,
      2101
    ],
    [
      2016,
      2102,
      2103,
      2104,
      2105,
      2017
    ],
    [
      2016,
      2022,
      2106,
      2107,
      2108,
      2102
    ],
    [
      2106,
      2109,
      2110,
      2107
    ],
    [
      2111,
      2112,
      2113,
      2110,
      2109
    ],
    [
      2112,
      2114,
      2115,
      2116,
      2117,
      2113
    ],
    [
      2118,
      2119,
      2116,
      2115,
      2120
    ],
    [
      2118,
      2120,
      2121,
      2122,
      2123
    ],
    [
      2124,
      2125,
      2126,
      2127,
      2123,
      2122
    ],
    [
      2128,
      2129,
      2130,
      2126,
      2125
    ],
    [
      2128,
      2131,
      2132,
      2133,
      2134,
      2129
    ],
    [
      2133,
      2132,
      2135,
      2136
    ],
    [
      2137,
      2138,
      2139,
      2136,
      2135,
      2140
    ],
    [
      2137,
      2141,
      2142,
      2143,
      2138
    ],
    [
      2144,
      2145,
      2146,
      2147,
      2148,
      2149
    ],
    [
      2144,
      2150,
      2151,
      2152,
      2153,
      2145
    ],
    [
      2151,
      2154,
      2155,
      2156,
      2157,
      2158,
      2159,
      2152
    ],
    [
      2155,
      1492,
      1465,
      1464,
      2160,
      2156
    ],
    [
      1464,
      1463,
      2161,
      2162,
      2163,
      2160
    ],
    [
      2164,
      2161,
      1463,
      1462,
      1466,
      1468
    ],
    [
      2164,
      1468,
      1467,
      1471,
      2165,
      2166
    ],
    [
      2167,
      2168,
      2165,
      1471,
      1470,
      2169
    ],
    [
      2167,
      2169,
      2170,
      2171,
      2172,
      2173
    ],
    [
      2169,
      1470,
      1469,
      1474,
      2174,
      2175,
      2170
    ],
    [
      1474,
      1473,
      2176,
      2174
    ],
    [
      1476,
      2177,
      2176,
      1473,
      1472
    ],
    [
      1476,
      1475,
      1478,
      2178,
      2177
    ],
    [
      1477,
      1479,
      1482,
      2179,
      2178,
      1478
    ],
    [
      2154,
      2180,
      1493,
      1492,
      2155
    ],
    [
      1491,
      1490,
      1493,
      2180,
      2181
    ],
    [
      1491,
      2181,
      2182,
      1486,
      1485,
      1489
    ],
    [
      1505,
      1508,
      2183,
      2184,
      1506
    ],
    [
      1504,
      1503,
      1506,
      2184,
      2185,
      2186
    ],
    [
      1501,
      1502,
      1504,
      2186,
      2187,
      1495,
      1494
    ],
    [
      975,
      979,
      2188,
      2189,
      1512,
      1511,
      980
    ],
    [
      1508,
      1507,
      1509,
      1510,
      1512,
      2189,
      2183
    ],
    [
      2190,
      1518,
      1517,
      1519,
      1522
    ],
    [
      1513,
      1516,
      1518,
      2190,
      2191,
      1549,
      1514
    ],
    [
      1524,
      1526,
      2192,
      1521,
      1520,
      1523
    ],
    [
      1528,
      2193,
      2192,
      1526,
      1525
    ],
    [
      2194,
      2193,
      1528,
      1527,
      1529,
      1531
    ],
    [
      2194,
      1531,
      1530,
      1534,
      2195
    ],
    [
      1533,
      2196,
      2197,
      2198,
      2195,
      1534
    ],
    [
      1620,
      2199,
      2196,
      1533,
      1532
    ],
    [
      2200,
      2201,
      2199,
      1620,
      1619
    ],
    [
      2200,
      2202,
      2203,
      2204,
      2201
    ],
    [
      2205,
      2206,
      2207,
      2208,
      2203,
      2202,
      2209,
      2210,
      2211
    ],
    [
      2212,
      2213,
      2214,
      2215,
      2216
    ],
    [
      2217,
      2218,
      2219,
      2220,
      2221,
      2215,
      2214,
      2222
    ],
    [
      2223,
      2224,
      2225,
      2216,
      2215,
      2221
    ],
    [
      2226,
      2227,
      2228,
      2229,
      2230,
      2231,
      2232,
      2233,
      2234
    ],
    [
      2235,
      2236,
      2237,
      2238,
      2239,
      2240,
      2241,
      2242,
      2243
    ],
    [
      2240,
      2244,
      2245,
      2246,
      2247,
      2241
    ],
    [
      2247,
      2248,
      2249,
      2250,
      2251,
      2242,
      2241
    ],
    [
      2252,
      2253,
      2249,
      2248,
      2254,
      2255,
      2256
    ],
    [
      1536,
      2252,
      2256,
      1537
    ],
    [
      1535,
      1539,
      2257,
      2258,
      2253,
      2252,
      1536
    ],
    [
      2259,
      2260,
      2257,
      1539,
      1538,
      1541,
      1544
    ],
    [
      2259,
      1544,
      1543,
      1546,
      2261,
      2262
    ],
    [
      1548,
      2263,
      2264,
      2265,
      2261,
      1546,
      1545
    ],
    [
      1548,
      1547,
      1550,
      2266,
      2267,
      2263
    ],
    [
      2268,
      2269,
      2270,
      2271,
      2266,
      1550,
      1549,
      2191,
      2272
    ],
    [
      2273,
      2274,
      2268,
      2272,
      2275
    ],
    [
      2273,
      2276,
      2277,
      2274
    ],
    [
      2278,
      2277,
      2276,
      2279,
      1553,
      1552,
      2280
    ],
    [
      1556,
      1559,
      1561,
      2281,
      2282,
      1557
    ],
    [
      2283,
      2284,
      1554,
      1553,
      2279,
      2285
    ],
    [
      2284,
      1562,
      1558,
      1555,
      1554
    ],
    [
      2286,
      1563,
      1562,
      2284,
      2283
    ],
    [
      2286,
      2283,
      2285,
      2287,
      2288,
      2289,
      2290,
      2291
    ],
    [
      2292,
      2293,
      2294,
      2225,
      2224,
      2295,
      2296
    ],
    [
      2297,
      2294,
      2293,
      2298,
      2299
    ],
    [
      2297,
      2299,
      2300,
      2301,
      2302
    ],
    [
      2301,
      2303,
      2304,
      2305,
      2302
    ],
    [
      2306,
      2289,
      2288,
      2305,
      2304,
      2307
    ],
    [
      2306,
      2308,
      2290,
      2289
    ],
    [
      2290,
      2308,
      2309,
      2310,
      2291
    ],
    [
      2286,
      2291,
      2310,
      2311,
      2312,
      1564,
      1563
    ],
    [
      1560,
      1564,
      2312,
      2313,
      2314,
      2315
    ],
    [
      1560,
      2315,
      2316,
      2281,
      1561
    ],
    [
      2281,
      2316,
      2317,
      2318,
      2319,
      2320,
      2321,
      2322,
      2282
    ],
    [
      1842,
      2323,
      2324,
      1844,
      1843
    ],
    [
      1842,
      1841,
      2325,
      2326,
      2323
    ],
    [
      2327,
      2328,
      2329,
      2330,
      2325,
      1841,
      1840
    ],
    [
      2331,
      2332,
      2329,
      2328,
      2333,
      2334
    ],
    [
      2335,
      2336,
      2337,
      2334,
      2333
    ],
    [
      2338,
      2337,
      2336,
      2339,
      2340,
      2341
    ],
    [
      2340,
      2339,
      2342,
      2343,
      2344,
      2345
    ],
    [
      2346,
      2347,
      2344,
      2343,
      2348
    ],
    [
      2346,
      2349,
      2314,
      2313,
      2347
    ],
    [
      2316,
      2315,
      2314,
      2349,
      2350,
      2351,
      2317
    ],
    [
      2352,
      2353,
      2354,
      2318,
      2317,
      2351
    ],
    [
      2355,
      2319,
      2318,
      2354
    ],
    [
      2355,
      2356,
      2357,
      2320,
      2319
    ],
    [
      2321,
      2320,
      2357,
      2358
    ],
    [
      2359,
      2322,
      2321,
      2358,
      2360,
      2361,
      2362
    ],
    [
      2363,
      2364,
      1566,
      1565,
      2365,
      2366,
      2367
    ],
    [
      1565,
      1572,
      2368,
      2365
    ],
    [
      2369,
      2370,
      2371,
      2372,
      2366,
      2365,
      2368
    ],
    [
      2373,
      2374,
      2370,
      2369,
      2375
    ],
    [
      2376,
      2377,
      2374,
      2373,
      2378,
      2379
    ],
    [
      2380,
      2381,
      2382,
      2383,
      2377,
      2376,
      2384
    ],
    [
      2380,
      2385,
      2386,
      2387,
      2388,
      2389,
      2390,
      2381
    ],
    [
      2391,
      2388,
      2387,
      2392,
      2393
    ],
    [
      2394,
      2392,
      2387,
      2386,
      2395
    ],
    [
      2396,
      2397,
      2398,
      2399,
      1592,
      1591,
      2400
    ],
    [
      2401,
      1567,
      1566,
      2364,
      2362,
      2361
    ],
    [
      2401,
      2402,
      2403,
      2404,
      2405,
      1568,
      1567
    ],
    [
      2406,
      1574,
      1569,
      1568,
      2405
    ],
    [
      2407,
      2408,
      2406,
      2405,
      2404
    ],
    [
      2407,
      2409,
      2410,
      2411,
      2412,
      2408
    ],
    [
      2413,
      2414,
      2415,
      2416,
      2417,
      2411,
      2410
    ],
    [
      2418,
      2419,
      2420,
      2415,
      2414
    ],
    [
      1962,
      1966,
      2421,
      2420,
      2419,
      2422,
      2423
    ],
    [
      2369,
      2368,
      1572,
      1571,
      2375
    ],
    [
      2373,
      2375,
      1571,
      1570,
      1573,
      2378
    ],
    [
      2379,
      2378,
      1573,
      1576,
      1580,
      1588
    ],
    [
      2376,
      2379,
      1588,
      1587,
      2424,
      2384
    ],
    [
      2380,
      2384,
      2424,
      2425,
      2385
    ],
    [
      2426,
      2427,
      1583,
      1582,
      2417,
      2416
    ],
    [
      2426,
      2428,
      2429,
      2430,
      2427
    ],
    [
      1577,
      1583,
      2427,
      2430,
      2431,
      2432
    ],
    [
      1577,
      2432,
      1586,
      1578
    ],
    [
      1584,
      1586,
      2432,
      2431,
      2433
    ],
    [
      2434,
      2435,
      2433,
      2431,
      2430,
      2429
    ],
    [
      2436,
      2437,
      2438,
      2435,
      2434
    ],
    [
      2436,
      2439,
      2440,
      2441,
      2442,
      2437
    ],
    [
      1584,
      2433,
      2435,
      2438,
      2443,
      1589,
      1585
    ],
    [
      1587,
      1589,
      2443,
      2444,
      2425,
      2424
    ],
    [
      2443,
      2438,
      2437,
      2442,
      2445,
      2444
    ],
    [
      2386,
      2385,
      2425,
      2444,
      2445,
      2446,
      2395
    ],
    [
      2446,
      2445,
      2442,
      2441,
      2447,
      2448,
      2449,
      2450
    ],
    [
      2451,
      2452,
      2453,
      2449,
      2448,
      2454
    ],
    [
      2451,
      2454,
      2455,
      2456,
      2457,
      2458,
      2459
    ],
    [
      2460,
      2457,
      2456,
      2461,
      2462,
      2463,
      2464,
      2465
    ],
    [
      2466,
      2467,
      2460,
      2465,
      2468
    ],
    [
      2469,
      2470,
      2466,
      2468,
      2471
    ],
    [
      2469,
      2471,
      2472,
      2473,
      2474,
      2475
    ],
    [
      2476,
      2477,
      1617,
      1616,
      2473,
      2472
    ],
    [
      2474,
      2478,
      2479,
      2480,
      2475
    ],
    [
      2478,
      1615,
      1614,
      2481,
      2482,
      2479
    ],
    [
      2483,
      2484,
      2485,
      2486,
      2487,
      2488,
      2489
    ],
    [
      2490,
      2484,
      2483,
      2491,
      2492
    ],
    [
      2240,
      2239,
      2490,
      2492,
      2493,
      2244
    ],
    [
      2394,
      1593,
      1592,
      2399,
      2393,
      2392
    ],
    [
      2394,
      2395,
      2446,
      2450,
      1590,
      1593
    ],
    [
      2494,
      2495,
      2496,
      2497,
      2498,
      2499
    ],
    [
      2500,
      2501,
      2502,
      2503,
      2496,
      2495
    ],
    [
      2502,
      2501,
      2504,
      2505,
      2506,
      2507
    ],
    [
      2508,
      2509,
      2506,
      2505,
      2510
    ],
    [
      2508,
      2510,
      2511,
      2512,
      2513,
      2514
    ],
    [
      950,
      949,
      1613,
      2515,
      2513,
      2512,
      2516
    ],
    [
      1612,
      1617,
      2477,
      2515,
      1613
    ],
    [
      2474,
      2473,
      1616,
      1615,
      2478
    ],
    [
      2517,
      2518,
      2481,
      1614,
      1610,
      1609,
      2519
    ],
    [
      1609,
      1608,
      2520,
      2521,
      2522,
      2519
    ],
    [
      2523,
      2524,
      2525,
      2521,
      2520
    ],
    [
      2523,
      2526,
      2527,
      2246,
      2245,
      2524
    ],
    [
      2247,
      2246,
      2527,
      2254,
      2248
    ],
    [
      1625,
      1623,
      1624,
      1764,
      1766,
      2528,
      1629
    ],
    [
      1630,
      1629,
      2528,
      2529,
      2530,
      2531
    ],
    [
      1628,
      1630,
      2531,
      1635,
      1632,
      1631
    ],
    [
      1639,
      1638,
      1637,
      1636,
      2532
    ],
    [
      2532,
      1636,
      1634,
      1633,
      2533
    ],
    [
      2534,
      2535,
      2533,
      1633,
      1635,
      2531,
      2530,
      2536,
      2537
    ],
    [
      2538,
      2539,
      2535,
      2534,
      2540,
      1774,
      1773,
      2541
    ],
    [
      2542,
      2543,
      2538,
      2541,
      2544,
      2545
    ],
    [
      2542,
      2545,
      2546,
      2547,
      2548,
      2549,
      2550
    ],
    [
      1674,
      1676,
      2548,
      2547,
      1678,
      1677
    ],
    [
      2547,
      2546,
      1779,
      1679,
      1678
    ],
    [
      1639,
      2532,
      2533,
      2535,
      2539,
      2551,
      1640
    ],
    [
      2552,
      1641,
      1640,
      2551
    ],
    [
      2552,
      2553,
      2554,
      1643,
      1642,
      1641
    ],
    [
      1645,
      1644,
      1643,
      2554,
      2555
    ],
    [
      1645,
      2555,
      2556,
      1647,
      1646
    ],
    [
      1649,
      1648,
      1647,
      2556,
      2557,
      2558
    ],
    [
      1650,
      1649,
      2558,
      2559,
      1651
    ],
    [
      1654,
      1653,
      1652,
      1651,
      2559,
      2560,
      2561
    ],
    [
      2562,
      1666,
      1665,
      2561,
      2560
    ],
    [
      1657,
      1656,
      1655,
      1661,
      1660,
      1659,
      1658
    ],
    [
      1663,
      1662,
      1661,
      1655,
      1654,
      2561,
      1665,
      1664
    ],
    [
      1668,
      1667,
      1666,
      2562,
      2563,
      1669
    ],
    [
      1670,
      1669,
      2563,
      2564,
      1671
    ],
    [
      2564,
      2565,
      1675,
      1673,
      1672,
      1671
    ],
    [
      2566,
      2567,
      1689,
      1688,
      1687,
      2568,
      2569
    ],
    [
      2566,
      2570,
      2571,
      2572,
      2573,
      2574,
      2567
    ],
    [
      2575,
      2576,
      2577
    ],
    [
      2576,
      2578,
      2579,
      2580,
      2581,
      2577
    ],
    [
      2582,
      2580,
      2579,
      2583
    ],
    [
      2582,
      2583,
      1455,
      1454,
      2584
    ],
    [
      2584,
      1454,
      735,
      731,
      730,
      1228,
      1782
    ],
    [
      1692,
      1691,
      1690,
      2585,
      1694,
      1693
    ],
    [
      1214,
      1213,
      1694,
      2585,
      2586,
      1216,
      1215
    ],
    [
      1686,
      1199,
      1198,
      1197,
      1695,
      1698,
      1702
    ],
    [
      1686,
      1702,
      1701,
      2568,
      1687
    ],
    [
      2569,
      2568,
      1701,
      1700,
      1706
    ],
    [
      2566,
      2569,
      1706,
      1705,
      1707,
      2570
    ],
    [
      1707,
      1711,
      2587,
      2588,
      2589,
      2571,
      2570
    ],
    [
      2590,
      1722,
      1721,
      1762,
      2591
    ],
    [
      1724,
      1723,
      1722,
      2590,
      2592,
      2593
    ],
    [
      1724,
      2593,
      2594,
      1727,
      1725
    ],
    [
      1726,
      1727,
      2594,
      2595,
      2596,
      1729,
      1728
    ],
    [
      2597,
      2598,
      1731,
      1730,
      1729,
      2596
    ],
    [
      2598,
      2599,
      1734,
      1732,
      1731
    ],
    [
      1733,
      1734,
      2599,
      2600,
      2601,
      2602,
      1735
    ],
    [
      2603,
      1752,
      1751,
      1750,
      2604
    ],
    [
      2603,
      2605,
      2606,
      1757,
      1753,
      1752
    ],
    [
      2607,
      1758,
      1757,
      2606,
      2608
    ],
    [
      1771,
      2609,
      1759,
      1758,
      2607,
      2610,
      2611,
      1763,
      1179,
      1178
    ],
    [
      2612,
      1760,
      1763,
      2611
    ],
    [
      2612,
      2613,
      2614,
      1761,
      1760
    ],
    [
      2591,
      1762,
      1761,
      2614,
      2615
    ],
    [
      2616,
      2592,
      2590,
      2591,
      2615,
      2617
    ],
    [
      2616,
      2618,
      2595,
      2594,
      2593,
      2592
    ],
    [
      2597,
      2596,
      2595,
      2618,
      2619,
      2620,
      2621
    ],
    [
      2622,
      2623,
      2621,
      2620
    ],
    [
      2597,
      2621,
      2623,
      2600,
      2599,
      2598
    ],
    [
      572,
      571,
      2624,
      2625,
      1165,
      1026
    ],
    [
      2626,
      2627,
      1166,
      1165,
      2625
    ],
    [
      1167,
      1166,
      2627,
      2628,
      2629,
      1170
    ],
    [
      2630,
      1738,
      1171,
      1170,
      2629,
      2631,
      2632
    ],
    [
      2630,
      2633,
      2634,
      1739,
      1738
    ],
    [
      2635,
      2636,
      1740,
      1737,
      1739,
      2634,
      2637
    ],
    [
      1743,
      1741,
      1740,
      2636,
      2638,
      2639
    ],
    [
      1743,
      2639,
      2640,
      2641,
      2642,
      2604,
      1750,
      1744
    ],
    [
      2603,
      2604,
      2642,
      2643,
      2644,
      2645,
      2646,
      2605
    ],
    [
      2607,
      2608,
      2647,
      2610
    ],
    [
      2612,
      2611,
      2610,
      2647,
      2648,
      2649,
      2650,
      2613
    ],
    [
      2651,
      2650,
      2649,
      2652,
      2653
    ],
    [
      2652,
      2654,
      2655,
      2656,
      2653
    ],
    [
      2657,
      2656,
      2655,
      2658,
      2659,
      2660,
      2661
    ],
    [
      1765,
      1768,
      2529,
      2528,
      1766
    ],
    [
      1767,
      1769,
      1770,
      2536,
      2530,
      2529,
      1768
    ],
    [
      1755,
      2662,
      2537,
      2536,
      1770,
      1756
    ],
    [
      1755,
      1759,
      2609,
      2663,
      2662
    ],
    [
      2534,
      2537,
      2662,
      2663,
      2540
    ],
    [
      1771,
      1774,
      2540,
      2663,
      2609
    ],
    [
      1776,
      2544,
      2541,
      1773,
      1772,
      1775
    ],
    [
      1778,
      1779,
      2546,
      2545,
      2544,
      1776,
      1777
    ],
    [
      2582,
      2584,
      1782,
      1781,
      1780,
      1218,
      1217,
      2581,
      2580
    ],
    [
      1792,
      2664,
      2665,
      2666,
      1790,
      1789,
      1791
    ],
    [
      2667,
      1788,
      1787,
      1790,
      2666
    ],
    [
      2668,
      2669,
      1784,
      1783,
      1788,
      2667
    ],
    [
      1785,
      1784,
      2669,
      2670,
      2671,
      2672,
      1786
    ],
    [
      1792,
      1793,
      1794,
      1796,
      2673,
      2674,
      2664
    ],
    [
      1799,
      1801,
      2675,
      2673,
      1796,
      1795,
      1797,
      1798
    ],
    [
      1808,
      2676,
      1805,
      1804,
      1806
    ],
    [
      2677,
      2678,
      2679,
      2680,
      2676,
      1808,
      1807,
      1810
    ],
    [
      1809,
      1811,
      1812,
      2681,
      2682,
      2677,
      1810
    ],
    [
      2683,
      2684,
      2681,
      1812,
      1813,
      1815,
      2685
    ],
    [
      1817,
      1819,
      2686,
      2685,
      1815,
      1814,
      1816
    ],
    [
      2687,
      2686,
      1819,
      1818,
      1820,
      1821,
      1823,
      2688,
      2689
    ],
    [
      1823,
      1822,
      1824,
      1827,
      2690,
      2688
    ],
    [
      2691,
      2692,
      2690,
      1827,
      1826
    ],
    [
      1829,
      2693,
      2694,
      2691,
      1826,
      1825
    ],
    [
      1829,
      1828,
      1830,
      2695,
      2696,
      2693
    ],
    [
      2697,
      2695,
      1830,
      1831,
      1836,
      2698
    ],
    [
      2698,
      1836,
      1835,
      2699
    ],
    [
      2700,
      2296,
      2295,
      2699,
      1835,
      1834
    ],
    [
      1837,
      1846,
      1849,
      2701,
      2702,
      1838
    ],
    [
      2703,
      2704,
      2705,
      2701,
      1849,
      1848,
      1851,
      1853
    ],
    [
      2703,
      1853,
      1852,
      1855,
      2706
    ],
    [
      1855,
      1854,
      1857,
      2707,
      2708,
      2706
    ],
    [
      1856,
      1858,
      1861,
      1878,
      2709,
      2707,
      1857
    ],
    [
      2700,
      1834,
      1833,
      1850,
      1847,
      1845,
      1844,
      2324
    ],
    [
      1378,
      808,
      807,
      1388,
      1864,
      1865
    ],
    [
      1378,
      1865,
      1868,
      1869,
      1379
    ],
    [
      1869,
      1872,
      2710,
      1380,
      1379
    ],
    [
      1315,
      1380,
      2710,
      2711,
      1316
    ],
    [
      1303,
      1316,
      2711,
      1322,
      1321,
      1859,
      1304
    ],
    [
      1872,
      1871,
      1876,
      1323,
      1322,
      2711,
      2710
    ],
    [
      2703,
      2706,
      2708,
      2712,
      2713,
      2704
    ],
    [
      2712,
      2708,
      2707,
      2709,
      2714
    ],
    [
      1877,
      1880,
      2715,
      2714,
      2709,
      1878
    ],
    [
      1879,
      1329,
      1328,
      2716,
      2717,
      2718
    ],
    [
      1881,
      1883,
      2719,
      2716,
      1328,
      1327,
      2720,
      1901
    ],
    [
      2721,
      2719,
      1883,
      1882,
      1885,
      2722
    ],
    [
      1884,
      1921,
      2723,
      2722,
      1885
    ],
    [
      1920,
      1923,
      2724,
      2725,
      2723,
      1921
    ],
    [
      1922,
      1925,
      2726,
      2727,
      2724,
      1923
    ],
    [
      1925,
      1924,
      1927,
      2728,
      2729,
      2726
    ],
    [
      2730,
      2728,
      1927,
      1926,
      1929
    ],
    [
      1931,
      2731,
      2732,
      2730,
      1929,
      1928
    ],
    [
      1932,
      2733,
      2734,
      2731,
      1931,
      1930
    ],
    [
      1932,
      1933,
      1934,
      2735,
      2736,
      2733
    ],
    [
      2735,
      1934,
      1935,
      1936,
      1937,
      1945,
      2737
    ],
    [
      1886,
      1887,
      1969,
      2738,
      2739,
      1890,
      1889,
      1888
    ],
    [
      1890,
      2739,
      2740,
      2741,
      1892,
      1891
    ],
    [
      1893,
      1892,
      2741,
      2742,
      2743,
      1896,
      1894
    ],
    [
      1896,
      2743,
      2744,
      1897
    ],
    [
      1898,
      1897,
      2744,
      2745,
      1899
    ],
    [
      2745,
      2746,
      2747,
      2748,
      1900,
      1899
    ],
    [
      2749,
      2750,
      2748,
      2747
    ],
    [
      2751,
      2720,
      1327,
      1326,
      1900,
      2748,
      2750
    ],
    [
      2752,
      1902,
      1901,
      2720,
      2751
    ],
    [
      2749,
      2753,
      2754,
      2755,
      2752,
      2751,
      2750
    ],
    [
      2756,
      2757,
      1903,
      1902,
      2752,
      2755
    ],
    [
      1904,
      1903,
      2757,
      2758,
      1905
    ],
    [
      1906,
      1905,
      2758,
      2759,
      1907
    ],
    [
      2760,
      1910,
      1909,
      1908,
      2761,
      2762,
      2763,
      2764
    ],
    [
      2760,
      2765,
      2766,
      1913,
      1912,
      1911,
      1910
    ],
    [
      1913,
      2766,
      2767,
      2768,
      1914
    ],
    [
      1915,
      1914,
      2768,
      2769,
      1916
    ],
    [
      1916,
      2769,
      2770,
      2771,
      2772,
      1918,
      1917
    ],
    [
      1919,
      1918,
      2772,
      2773,
      1946
    ],
    [
      1947,
      1946,
      2773,
      2774,
      2775
    ],
    [
      1948,
      1947,
      2775,
      2776,
      2777,
      2778,
      1951,
      1950,
      1949
    ],
    [
      1952,
      1951,
      2778,
      2779,
      2780,
      1953
    ],
    [
      1953,
      2780,
      2781,
      2782,
      1955,
      1954
    ],
    [
      1956,
      1955,
      2782,
      2783,
      2784
    ],
    [
      1957,
      1956,
      2784,
      2785,
      2786,
      1958
    ],
    [
      1959,
      1958,
      2786,
      2787,
      2788
    ],
    [
      2786,
      2785,
      2789,
      2790,
      2787
    ],
    [
      2788,
      2787,
      2790,
      2791,
      2792,
      2793
    ],
    [
      2355,
      2354,
      2353,
      2794,
      2795,
      2796,
      2356
    ],
    [
      2357,
      2356,
      2796,
      2797,
      2798,
      2360,
      2358
    ],
    [
      2401,
      2361,
      2360,
      2798,
      2799,
      2800,
      2402
    ],
    [
      2801,
      2403,
      2402,
      2800,
      2802
    ],
    [
      2407,
      2404,
      2403,
      2801,
      2803,
      2804,
      2409
    ],
    [
      2413,
      2410,
      2409,
      2804,
      2805,
      2806
    ],
    [
      2418,
      2414,
      2413,
      2806,
      2807,
      2808
    ],
    [
      2418,
      2808,
      2809,
      2810,
      2422,
      2419
    ],
    [
      2811,
      2423,
      2422,
      2810,
      2812
    ],
    [
      2813,
      1963,
      1962,
      2423,
      2811,
      2814
    ],
    [
      1941,
      1940,
      1939,
      1961,
      1963,
      2813
    ],
    [
      1972,
      1974,
      2815,
      2816,
      1971,
      1970
    ],
    [
      1971,
      2816,
      2817,
      2818,
      1968,
      1967
    ],
    [
      1969,
      1968,
      2818,
      2819,
      2820,
      2738
    ],
    [
      2820,
      2821,
      2822,
      2740,
      2739,
      2738
    ],
    [
      2741,
      2740,
      2822,
      2823,
      2742
    ],
    [
      2823,
      2824,
      2746,
      2745,
      2744,
      2743,
      2742
    ],
    [
      2816,
      2815,
      2825,
      2826,
      2817
    ],
    [
      1974,
      1973,
      1976,
      2827,
      2825,
      2815
    ],
    [
      1976,
      1975,
      1979,
      2828,
      2829,
      2827
    ],
    [
      1978,
      2830,
      2831,
      2828,
      1979
    ],
    [
      1982,
      2832,
      2833,
      2830,
      1978,
      1977,
      1980
    ],
    [
      2834,
      2832,
      1982,
      1981,
      1984
    ],
    [
      2834,
      1984,
      1983,
      1986,
      2835,
      2836
    ],
    [
      2837,
      2835,
      1986,
      1985,
      1987
    ],
    [
      2837,
      1987,
      1988,
      1990,
      2838,
      2839
    ],
    [
      2840,
      2841,
      2838,
      1990,
      1989,
      1992
    ],
    [
      2840,
      1992,
      1991,
      1994,
      2842,
      2843
    ],
    [
      2844,
      2845,
      2842,
      1994,
      1993,
      1997
    ],
    [
      2844,
      1997,
      1996,
      2846,
      2847
    ],
    [
      1995,
      1999,
      2848,
      2849,
      2850,
      2846,
      1996
    ],
    [
      1998,
      2001,
      2851,
      2852,
      2848,
      1999
    ],
    [
      2853,
      2854,
      2851,
      2001,
      2000,
      2003
    ],
    [
      2853,
      2003,
      2002,
      2005,
      2855,
      2856
    ],
    [
      2005,
      2004,
      2007,
      2857,
      2858,
      2855
    ],
    [
      2006,
      2009,
      2859,
      2860,
      2857,
      2007
    ],
    [
      2008,
      2011,
      2861,
      2862,
      2859,
      2009
    ],
    [
      2010,
      2013,
      2863,
      2864,
      2861,
      2011
    ],
    [
      2013,
      2012,
      2015,
      2865,
      2866,
      2863
    ],
    [
      2014,
      2867,
      2868,
      2865,
      2015
    ],
    [
      1447,
      1446,
      1453,
      2869,
      2867,
      2014
    ],
    [
      2870,
      1710,
      1709,
      2871
    ],
    [
      2872,
      2873,
      2870,
      2871,
      2874,
      2875,
      2876,
      2877
    ],
    [
      2872,
      2877,
      2878,
      2879,
      2880,
      2881,
      2882,
      2883,
      2884
    ],
    [
      2885,
      2886,
      2882,
      2881
    ],
    [
      2887,
      2886,
      2885,
      2888,
      2889,
      2890
    ],
    [
      2891,
      2890,
      2889,
      2892,
      2893,
      2894
    ],
    [
      2895,
      2896,
      2894,
      2893,
      2897
    ],
    [
      2891,
      2894,
      2896,
      2898,
      2899,
      2900
    ],
    [
      2899,
      2901,
      2902,
      2903,
      2904,
      2900
    ],
    [
      2905,
      2906,
      2907,
      2094,
      2093
    ],
    [
      2092,
      2097,
      2099,
      2908,
      2909,
      2910,
      2905,
      2093
    ],
    [
      2911,
      2912,
      2089,
      2095,
      2913,
      2914,
      2915,
      2916
    ],
    [
      2091,
      2090,
      2917,
      2918,
      2098
    ],
    [
      1448,
      2096,
      2098,
      2918,
      1450,
      1449
    ],
    [
      2919,
      2920,
      2921,
      2922,
      2923,
      2924
    ],
    [
      2919,
      2924,
      2925,
      2926,
      2927
    ],
    [
      2915,
      2928,
      2929,
      2916
    ],
    [
      2915,
      2914,
      2930,
      2931,
      2932,
      2928
    ],
    [
      2111,
      2109,
      2106,
      2022,
      2021,
      2025,
      2026,
      2933
    ],
    [
      2026,
      2029,
      2033,
      2934,
      2935,
      2936,
      2933
    ],
    [
      2034,
      2937,
      2934,
      2033,
      2032
    ],
    [
      2034,
      2037,
      2038,
      2938,
      2937
    ],
    [
      2038,
      2042,
      2939,
      2940,
      2941,
      2938
    ],
    [
      2939,
      2042,
      2041,
      2043,
      2942
    ],
    [
      2943,
      2942,
      2043,
      2046,
      2047,
      2944
    ],
    [
      2945,
      2944,
      2047,
      2050,
      2051,
      2946,
      2947
    ],
    [
      2946,
      2051,
      2053,
      2054,
      2948
    ],
    [
      2949,
      2948,
      2054,
      2057,
      2058,
      2950
    ],
    [
      2058,
      2061,
      2063,
      2951,
      2952,
      2953,
      2950
    ],
    [
      2062,
      2070,
      2954,
      2955,
      2951,
      2063
    ],
    [
      2070,
      2069,
      2956,
      2957,
      2954
    ],
    [
      2068,
      2072,
      2078,
      2958,
      2959,
      2956,
      2069
    ],
    [
      2078,
      2077,
      2960,
      2961,
      2958
    ],
    [
      2077,
      2076,
      2083,
      2962,
      2963,
      2960
    ],
    [
      2964,
      2965,
      2966,
      2967,
      2968,
      2969
    ],
    [
      2968,
      2925,
      2924,
      2923,
      2970,
      2971,
      2972,
      2969
    ],
    [
      2973,
      2974,
      2975,
      2976,
      2977,
      2970,
      2923,
      2922
    ],
    [
      2977,
      2976,
      2978
    ],
    [
      2979,
      2980,
      2981,
      2975,
      2974,
      2982,
      2983
    ],
    [
      2979,
      2984,
      2985,
      2986,
      2987,
      2980
    ],
    [
      2988,
      2986,
      2985,
      2989,
      2990
    ],
    [
      2988,
      2990,
      2991,
      2992,
      2993,
      2994
    ],
    [
      2995,
      2996,
      2997,
      2998,
      2999
    ],
    [
      2995,
      2999,
      3000,
      3001,
      3002
    ],
    [
      3003,
      3001,
      3000,
      3004,
      3005
    ],
    [
      3003,
      3005,
      2079,
      2075,
      2074,
      3006,
      3007
    ],
    [
      2074,
      2073,
      3008,
      3009,
      3006
    ],
    [
      2071,
      2067,
      2066,
      3010,
      3008,
      2073
    ],
    [
      2105,
      2104,
      3011,
      3012,
      3013,
      3014,
      3015
    ],
    [
      2105,
      3015,
      3016,
      3017,
      2018,
      2017
    ],
    [
      2018,
      3017,
      3018,
      3019,
      2019
    ],
    [
      2020,
      2019,
      3019,
      3020,
      3021,
      2023
    ],
    [
      2024,
      2023,
      3021,
      3022,
      3023,
      2027
    ],
    [
      3024,
      2030,
      2028,
      2027,
      3023,
      3025
    ],
    [
      3024,
      3026,
      3027,
      2035,
      2031,
      2030
    ],
    [
      3028,
      3029,
      2039,
      2036,
      2035,
      3027
    ],
    [
      3029,
      3030,
      3031,
      2044,
      2040,
      2039
    ],
    [
      2045,
      2044,
      3031,
      3032,
      2048
    ],
    [
      3033,
      2055,
      2052,
      2049,
      2048,
      3032,
      3034
    ],
    [
      2056,
      2055,
      3033,
      3035,
      3036,
      2059
    ],
    [
      2064,
      2060,
      2059,
      3036,
      3037,
      3038,
      2065
    ],
    [
      1440,
      1443,
      1437,
      1436,
      3039,
      3040,
      2908,
      2099
    ],
    [
      2883,
      3041,
      3042,
      3043,
      2884
    ],
    [
      3044,
      2589,
      2588,
      3043,
      3042
    ],
    [
      3044,
      3045,
      2572,
      2571,
      2589
    ],
    [
      2573,
      2572,
      3045,
      3046,
      3047,
      3048
    ],
    [
      2575,
      3048,
      3047,
      3049,
      3050,
      3051,
      2578,
      2576
    ],
    [
      2579,
      2578,
      3051,
      2101,
      1456,
      1455,
      2583
    ],
    [
      2100,
      2101,
      3051,
      3050
    ],
    [
      2100,
      3050,
      3049,
      3052,
      3053,
      1461,
      1460
    ],
    [
      2178,
      2179,
      3054,
      3055,
      2175,
      2174,
      2176,
      2177
    ],
    [
      2104,
      2103,
      3056,
      3011
    ],
    [
      3057,
      3058,
      3056,
      2103,
      2102,
      2108
    ],
    [
      3057,
      2108,
      2107,
      2110,
      2113,
      2117,
      3059,
      3060,
      3061
    ],
    [
      2118,
      2123,
      2127,
      3062,
      3063,
      3064,
      3065,
      2119
    ],
    [
      2130,
      3066,
      3067,
      3062,
      2127,
      2126
    ],
    [
      2130,
      2129,
      2134,
      3068,
      3066
    ],
    [
      2134,
      2133,
      2136,
      2139,
      3069,
      3070,
      3068
    ],
    [
      2138,
      2143,
      3071,
      3072,
      3073,
      3069,
      2139
    ],
    [
      2142,
      2148,
      2147,
      3074,
      3075,
      3071,
      2143
    ],
    [
      2147,
      2146,
      3076,
      3077,
      3074
    ],
    [
      2153,
      3078,
      3079,
      3076,
      2146,
      2145
    ],
    [
      2153,
      2152,
      2159,
      3080,
      3081,
      3078
    ],
    [
      2159,
      2158,
      3082,
      3083,
      3084,
      3080
    ],
    [
      2158,
      2157,
      3085,
      3086,
      3082
    ],
    [
      2156,
      2160,
      2163,
      3087,
      3088,
      3085,
      2157
    ],
    [
      2163,
      2162,
      3089,
      3090,
      3087
    ],
    [
      2164,
      2166,
      3091,
      3092,
      3089,
      2162,
      2161
    ],
    [
      3093,
      3091,
      2166,
      2165,
      2168,
      3094
    ],
    [
      2167,
      2173,
      3095,
      3094,
      2168
    ],
    [
      2173,
      2172,
      3096,
      3097,
      3095
    ],
    [
      3098,
      3099,
      3100,
      3096,
      2172,
      2171
    ],
    [
      3098,
      3101,
      3102,
      3103,
      3104,
      3099
    ],
    [
      3103,
      3102,
      3105,
      3106
    ],
    [
      3107,
      3106,
      3105,
      3108,
      3109,
      3110
    ],
    [
      3111,
      3112,
      2182,
      2181,
      2180,
      2154,
      2151,
      2150
    ],
    [
      3113,
      1487,
      1486,
      2182,
      3112
    ],
    [
      3113,
      3114,
      3115,
      1488,
      1487
    ],
    [
      882,
      885,
      1488,
      3115,
      3116,
      3117,
      3118,
      883
    ],
    [
      3119,
      3120,
      3121,
      3122,
      3123,
      3118,
      3117,
      3124
    ],
    [
      3121,
      3120,
      3125,
      3126,
      3127,
      3128
    ],
    [
      3129,
      3130,
      3131,
      3132,
      3133,
      3134,
      3127,
      3126
    ],
    [
      3135,
      3136,
      3132,
      3131,
      3137,
      3138,
      3139
    ],
    [
      3140,
      3139,
      3138,
      3141,
      3142,
      3143
    ],
    [
      3144,
      3145,
      3146,
      3143,
      3142
    ],
    [
      3145,
      3147,
      3148,
      3149,
      3150,
      3146
    ],
    [
      3151,
      3152,
      3153,
      3149,
      3148,
      3154
    ],
    [
      3151,
      3155,
      3156,
      3157,
      3158,
      3152
    ],
    [
      2111,
      2933,
      2936,
      3159,
      2114,
      2112
    ],
    [
      3160,
      2121,
      2120,
      2115,
      2114,
      3159
    ],
    [
      3161,
      3160,
      3159,
      2936,
      2935,
      3162,
      3163
    ],
    [
      3161,
      3164,
      3165,
      3166,
      2124,
      2122,
      2121,
      3160
    ],
    [
      2124,
      3166,
      3167,
      2131,
      2128,
      2125
    ],
    [
      2131,
      3167,
      3168,
      2140,
      2135,
      2132
    ],
    [
      3169,
      2141,
      2137,
      2140,
      3168,
      3170,
      3171
    ],
    [
      3169,
      3172,
      2149,
      2148,
      2142,
      2141
    ],
    [
      2194,
      2195,
      2198,
      2275,
      2272,
      2191,
      2190,
      1522,
      1521,
      2192,
      2193
    ],
    [
      2204,
      2203,
      2208,
      3173
    ],
    [
      2199,
      2201,
      2204,
      3173,
      3174,
      3175,
      2197,
      2196
    ],
    [
      2668,
      2667,
      2666,
      2665,
      3176,
      3177
    ],
    [
      2668,
      3177,
      3178,
      3179,
      2670,
      2669
    ],
    [
      3179,
      3180,
      3181,
      2671,
      2670
    ],
    [
      2672,
      2671,
      3181,
      3182,
      3183
    ],
    [
      3184,
      1024,
      1023,
      1786,
      2672,
      3183,
      3185
    ],
    [
      3184,
      2211,
      2210,
      1621,
      1025,
      1024
    ],
    [
      1622,
      1621,
      2210,
      2209
    ],
    [
      1618,
      1622,
      2209,
      2202,
      2200,
      1619
    ],
    [
      3186,
      2689,
      2688,
      2690,
      2692,
      2218,
      2217
    ],
    [
      2694,
      2219,
      2218,
      2692,
      2691
    ],
    [
      2696,
      2220,
      2219,
      2694,
      2693
    ],
    [
      2696,
      2695,
      2697,
      2223,
      2221,
      2220
    ],
    [
      2697,
      2698,
      2699,
      2295,
      2224,
      2223
    ],
    [
      2363,
      3187,
      3188,
      3189,
      2359,
      2362,
      2364
    ],
    [
      2363,
      2367,
      3190,
      3191,
      3187
    ],
    [
      3192,
      3193,
      3194,
      3195,
      2227,
      2226,
      3196,
      3197,
      3198,
      3199
    ],
    [
      3195,
      2397,
      2396,
      2228,
      2227
    ],
    [
      3200,
      2243,
      2242,
      2251,
      3201,
      3202,
      3203
    ],
    [
      2253,
      2258,
      3204,
      3205,
      2250,
      2249
    ],
    [
      3205,
      3204,
      3206,
      3207,
      3208,
      3209
    ],
    [
      3204,
      2258,
      2257,
      2260,
      3210,
      3206
    ],
    [
      3211,
      3207,
      3206,
      3210,
      3212,
      3213
    ],
    [
      2259,
      2262,
      3214,
      3212,
      3210,
      2260
    ],
    [
      2261,
      2265,
      3215,
      3216,
      3214,
      2262
    ],
    [
      2469,
      2475,
      2480,
      3217,
      3218,
      3219,
      2470
    ],
    [
      3220,
      3217,
      2480,
      2479,
      2482,
      2487,
      2486
    ],
    [
      2482,
      2481,
      2518,
      2488,
      2487
    ],
    [
      2517,
      2489,
      2488,
      2518
    ],
    [
      2483,
      2489,
      2517,
      2519,
      2522,
      2491
    ],
    [
      2491,
      2522,
      2521,
      2525,
      2493,
      2492
    ],
    [
      2524,
      2245,
      2244,
      2493,
      2525
    ],
    [
      2523,
      2520,
      1608,
      1607,
      1611,
      3221,
      2526
    ],
    [
      2526,
      3221,
      3222,
      2255,
      2254,
      2527
    ],
    [
      972,
      971,
      978,
      3222,
      3221,
      1611
    ],
    [
      977,
      1537,
      2256,
      2255,
      3222,
      978
    ],
    [
      2234,
      2233,
      3223,
      3224,
      3225,
      3226,
      3227
    ],
    [
      2235,
      3228,
      3227,
      3226,
      2236
    ],
    [
      2235,
      2243,
      3200,
      3229,
      3228
    ],
    [
      3200,
      3203,
      3230,
      3231,
      3229
    ],
    [
      3232,
      3233,
      3197,
      3196,
      3231,
      3230,
      3234
    ],
    [
      3211,
      3213,
      3216,
      3215,
      3235,
      3236,
      3237,
      3238
    ],
    [
      3236,
      3235,
      3239,
      3240,
      3241
    ],
    [
      3215,
      2265,
      2264,
      3242,
      3239,
      3235
    ],
    [
      2267,
      3243,
      3242,
      2264,
      2263
    ],
    [
      2270,
      3244,
      3245,
      3246,
      2271
    ],
    [
      2270,
      2269,
      3247,
      3248,
      3244
    ],
    [
      2278,
      3249,
      3247,
      2269,
      2268,
      2274,
      2277
    ],
    [
      2278,
      2280,
      3250,
      3251,
      3249
    ],
    [
      1551,
      3252,
      3253,
      3254,
      3250,
      2280,
      1552
    ],
    [
      2292,
      2296,
      2700,
      2324,
      2323,
      2326
    ],
    [
      2292,
      2326,
      2325,
      2330,
      2298,
      2293
    ],
    [
      2330,
      2329,
      2332,
      2300,
      2299,
      2298
    ],
    [
      2301,
      2300,
      2332,
      2331,
      2303
    ],
    [
      2338,
      2307,
      2304,
      2303,
      2331,
      2334,
      2337
    ],
    [
      2306,
      2307,
      2338,
      2341,
      2309,
      2308
    ],
    [
      2311,
      2310,
      2309,
      2341,
      2340,
      2345
    ],
    [
      2311,
      2345,
      2344,
      2347,
      2313,
      2312
    ],
    [
      2212,
      2216,
      2225,
      2294,
      2297,
      2302,
      2305,
      2288,
      2287,
      3255,
      3256
    ],
    [
      1551,
      1557,
      2282,
      2322,
      2359,
      3189,
      3257,
      3258,
      3252
    ],
    [
      2327,
      3259,
      3260,
      2335,
      2333,
      2328
    ],
    [
      3260,
      3261,
      3262,
      3263,
      2342,
      2339,
      2336,
      2335
    ],
    [
      2348,
      2343,
      2342,
      3263,
      3264
    ],
    [
      2346,
      2348,
      3264,
      3265,
      3266,
      2350,
      2349
    ],
    [
      2350,
      3266,
      3267,
      3268,
      2352,
      2351
    ],
    [
      3269,
      3270,
      2794,
      2353,
      2352,
      3268
    ],
    [
      3271,
      2795,
      2794,
      3270,
      3272
    ],
    [
      3273,
      2797,
      2796,
      2795,
      3271,
      3274,
      3275
    ],
    [
      3273,
      3276,
      3277,
      3278,
      2799,
      2798,
      2797
    ],
    [
      3279,
      2802,
      2800,
      2799,
      3278,
      3280
    ],
    [
      2801,
      2802,
      3279,
      3281,
      2803
    ],
    [
      2804,
      2803,
      3281,
      3282,
      3283,
      2805
    ],
    [
      2806,
      2805,
      3283,
      3284,
      3285,
      2807
    ],
    [
      3285,
      3286,
      2809,
      2808,
      2807
    ],
    [
      3287,
      2812,
      2810,
      2809,
      3286
    ],
    [
      1943,
      1942,
      2814,
      2811,
      2812,
      3287
    ],
    [
      1941,
      2813,
      2814,
      1942
    ],
    [
      3288,
      3289,
      3191,
      3190,
      3290
    ],
    [
      2366,
      2372,
      3291,
      3290,
      3190,
      2367
    ],
    [
      2372,
      2371,
      3292,
      3293,
      3291
    ],
    [
      2377,
      2383,
      3292,
      2371,
      2370,
      2374
    ],
    [
      2382,
      3294,
      3295,
      3296,
      3293,
      3292,
      2383
    ],
    [
      2390,
      2389,
      3297,
      3295,
      3294
    ],
    [
      3298,
      2391,
      2393,
      2399,
      2398,
      3299,
      3300
    ],
    [
      2381,
      2390,
      3294,
      2382
    ],
    [
      3298,
      3297,
      2389,
      2388,
      2391
    ],
    [
      3301,
      3302,
      3303,
      2831,
      2830,
      2833
    ],
    [
      3304,
      3305,
      3306,
      3307,
      3303,
      3302,
      3308
    ],
    [
      3304,
      3309,
      3310,
      3311,
      3312,
      3305
    ],
    [
      3313,
      3314,
      3311,
      3310,
      3315
    ],
    [
      3313,
      3315,
      3316,
      3317,
      3318,
      3319,
      3320,
      3321
    ],
    [
      3322,
      3323,
      3318,
      3317,
      3324,
      3325,
      3326
    ],
    [
      3322,
      3326,
      3327,
      3328,
      3329
    ],
    [
      3330,
      3331,
      3332,
      3329,
      3328
    ],
    [
      3333,
      3334,
      3335,
      3336,
      3337,
      3338
    ],
    [
      3337,
      3336,
      3339,
      3340
    ],
    [
      3339,
      3341,
      2770,
      2769,
      2768,
      2767,
      3340
    ],
    [
      2771,
      2770,
      3341,
      3342,
      3343,
      3344
    ],
    [
      2771,
      3344,
      3345,
      2774,
      2773,
      2772
    ],
    [
      3343,
      3346,
      3347,
      3348,
      3345,
      3344
    ],
    [
      3349,
      2776,
      2775,
      2774,
      3345,
      3348
    ],
    [
      3349,
      3350,
      2777,
      2776
    ],
    [
      3351,
      2779,
      2778,
      2777,
      3350
    ],
    [
      3351,
      3352,
      3353,
      2781,
      2780,
      2779
    ],
    [
      2782,
      2781,
      3353,
      3354,
      3355,
      2783
    ],
    [
      2785,
      2784,
      2783,
      3355,
      3356,
      2789
    ],
    [
      2790,
      2789,
      3356,
      3357,
      2791
    ],
    [
      3358,
      3359,
      3360,
      2792,
      2791,
      3357,
      3361,
      3362
    ],
    [
      3363,
      3358,
      3362,
      3364,
      3365
    ],
    [
      2436,
      2434,
      2429,
      2428,
      3363,
      3365,
      3366,
      2439
    ],
    [
      2406,
      2408,
      2412,
      1581,
      1575,
      1574
    ],
    [
      1581,
      2412,
      2411,
      2417,
      1582
    ],
    [
      3367,
      3368,
      3369,
      3370,
      3371,
      3372,
      3373
    ],
    [
      3374,
      3375,
      3376,
      3371,
      3370,
      3377
    ],
    [
      3374,
      3377,
      3378,
      3379
    ],
    [
      3380,
      3381,
      3379,
      3378,
      3382
    ],
    [
      3383,
      3384,
      3380,
      3382,
      3385,
      3386
    ],
    [
      3387,
      3383,
      3386,
      3388,
      3389
    ],
    [
      3390,
      3391,
      3389,
      3388
    ],
    [
      3392,
      3393,
      3394,
      3395,
      3396,
      3397,
      3398,
      3399,
      3400
    ],
    [
      3401,
      2400,
      1591,
      1590,
      2450,
      2449,
      2453
    ],
    [
      3402,
      3401,
      2453,
      2452,
      3403
    ],
    [
      2451,
      2459,
      3404,
      3403,
      2452
    ],
    [
      2459,
      2458,
      3405,
      3404
    ],
    [
      2454,
      2448,
      2447,
      3406,
      3407,
      2455
    ],
    [
      2461,
      2456,
      2455,
      3407,
      3408
    ],
    [
      3367,
      3408,
      3407,
      3406,
      3368
    ],
    [
      3367,
      3373,
      3409,
      2462,
      2461,
      3408
    ],
    [
      2463,
      2462,
      3409
    ],
    [
      2476,
      2472,
      2471,
      2468,
      2465,
      2464,
      3410,
      3411
    ],
    [
      2466,
      2470,
      3219,
      3412,
      3413,
      3414,
      2467
    ],
    [
      3218,
      3415,
      3416,
      3412,
      3219
    ],
    [
      3218,
      3217,
      3220,
      3417,
      3415
    ],
    [
      2485,
      3418,
      3419,
      3417,
      3220,
      2486
    ],
    [
      2490,
      2239,
      2238,
      3420,
      3418,
      2485,
      2484
    ],
    [
      953,
      951,
      950,
      2516,
      3421
    ],
    [
      953,
      3421,
      3422,
      3423,
      3424,
      954
    ],
    [
      3424,
      3423,
      3425,
      3426,
      3427,
      3428
    ],
    [
      3427,
      3426,
      3429,
      3430,
      3431,
      3432
    ],
    [
      3430,
      3433,
      3434,
      3435,
      3436,
      3437,
      3431
    ],
    [
      3435,
      3434,
      3438,
      3439,
      3440,
      3441
    ],
    [
      3442,
      3443,
      3444,
      3441,
      3440,
      3445,
      3446,
      3447
    ],
    [
      3442,
      3447,
      3448,
      3449,
      3450,
      3451
    ],
    [
      3452,
      3453,
      3450,
      3449,
      3454,
      3455
    ],
    [
      3456,
      3457,
      3458,
      3459,
      3452,
      3455
    ],
    [
      3460,
      3461,
      3458,
      3457,
      3462,
      3463
    ],
    [
      3460,
      3463,
      3464,
      3465,
      3466,
      3467
    ],
    [
      3468,
      3469,
      3466,
      3465,
      3470,
      3471
    ],
    [
      3468,
      3471,
      3472,
      3473,
      3474,
      3475
    ],
    [
      3476,
      3477,
      3478,
      3479,
      3474,
      3473
    ],
    [
      3480,
      3478,
      3477,
      3481,
      3482,
      3483
    ],
    [
      3484,
      3483,
      3482,
      3485,
      3486,
      3487
    ],
    [
      3486,
      3488,
      3489,
      3490,
      3491,
      3487
    ],
    [
      3490,
      3489,
      3492,
      3493,
      3494,
      3495
    ],
    [
      3496,
      3494,
      3493,
      3497
    ],
    [
      3496,
      3497,
      3498,
      3499,
      3500,
      3501,
      3502,
      3503
    ],
    [
      2516,
      2512,
      2511,
      3504,
      3505,
      3422,
      3421
    ],
    [
      3506,
      3425,
      3423,
      3422,
      3505,
      3507
    ],
    [
      3506,
      3508,
      3429,
      3426,
      3425
    ],
    [
      3430,
      3429,
      3508,
      3509,
      3510,
      3433
    ],
    [
      3511,
      3438,
      3434,
      3433,
      3510
    ],
    [
      2476,
      3411,
      3512,
      3513,
      2514,
      2513,
      2515,
      2477
    ],
    [
      3514,
      3515,
      3516,
      3517,
      3518,
      3519,
      3520
    ],
    [
      3521,
      3520,
      3519,
      3522,
      3523
    ],
    [
      3521,
      3523,
      3524,
      3525,
      3526
    ],
    [
      2494,
      2499,
      3526,
      3525,
      3527,
      3528
    ],
    [
      2494,
      3528,
      3529,
      3530,
      3531,
      2500,
      2495
    ],
    [
      2500,
      3531,
      3532,
      2504,
      2501
    ],
    [
      2505,
      2504,
      3532,
      3504,
      2511,
      2510
    ],
    [
      3380,
      3384,
      3533,
      2503,
      2502,
      2507,
      3534,
      3381
    ],
    [
      3534,
      2507,
      2506,
      2509,
      3535
    ],
    [
      3513,
      3536,
      3535,
      2509,
      2508,
      2514
    ],
    [
      2552,
      2551,
      2539,
      2538,
      2543,
      3537,
      3538,
      2553
    ],
    [
      2542,
      2550,
      3539,
      3537,
      2543
    ],
    [
      3540,
      3539,
      2550,
      2549
    ],
    [
      3540,
      2549,
      2548,
      1676,
      1675,
      2565
    ],
    [
      2556,
      2555,
      2554,
      2553,
      3538,
      2557
    ],
    [
      3540,
      2565,
      2564,
      2563,
      2562,
      2560,
      2559,
      2558,
      2557,
      3538,
      3537,
      3539
    ],
    [
      1689,
      2567,
      2574,
      2586,
      2585,
      1690
    ],
    [
      2575,
      2577,
      2581,
      1217,
      1216,
      2586,
      2574,
      2573,
      3048
    ],
    [
      571,
      198,
      197,
      3541,
      3542,
      2624
    ],
    [
      2626,
      2625,
      2624,
      3542,
      3543,
      3544
    ],
    [
      2626,
      3544,
      3545,
      3546,
      2628,
      2627
    ],
    [
      3547,
      2631,
      2629,
      2628,
      3546,
      3548
    ],
    [
      3547,
      3549,
      3550,
      2632,
      2631
    ],
    [
      2630,
      2632,
      3550,
      3551,
      3552,
      2633
    ],
    [
      2634,
      2633,
      3552,
      3553,
      3554,
      2637
    ],
    [
      2635,
      2637,
      3554,
      3555,
      3556,
      3557
    ],
    [
      3558,
      3559,
      3557,
      3556,
      3560,
      3561
    ],
    [
      3558,
      3561,
      3562,
      3563,
      3564,
      3565
    ],
    [
      3566,
      3567,
      3568,
      3564,
      3563,
      3569
    ],
    [
      3566,
      3570,
      3571,
      3572,
      3573,
      3567
    ],
    [
      3574,
      3575,
      3572,
      3571,
      3576
    ],
    [
      3574,
      3576,
      3577,
      3578,
      3579,
      3580
    ],
    [
      3581,
      3582,
      3583,
      3584,
      3579,
      3578
    ],
    [
      3585,
      3586,
      3587,
      3588,
      3583,
      3582
    ],
    [
      3589,
      3590,
      3591,
      3587,
      3586,
      3592
    ],
    [
      3593,
      3594,
      3595,
      3590,
      3589,
      3596
    ],
    [
      3597,
      3594,
      3593,
      3598,
      3599,
      3600
    ],
    [
      3601,
      3602,
      3603,
      3600,
      3599,
      3604
    ],
    [
      3601,
      3605,
      3606,
      3607,
      3608,
      3602
    ],
    [
      3608,
      3607,
      3609,
      3610
    ],
    [
      3605,
      3611,
      3612,
      3613,
      3614,
      3606
    ],
    [
      2084,
      3615,
      3616,
      3617,
      3618,
      3619,
      2085
    ],
    [
      3616,
      3620,
      3621,
      3617
    ],
    [
      3622,
      3623,
      3621,
      3620,
      3624
    ],
    [
      3625,
      3626,
      3627,
      3622,
      3624
    ],
    [
      2907,
      2906,
      3628,
      3626,
      3625
    ],
    [
      2635,
      3557,
      3559,
      2638,
      2636
    ],
    [
      3558,
      3565,
      2640,
      2639,
      2638,
      3559
    ],
    [
      3564,
      3568,
      2641,
      2640,
      3565
    ],
    [
      2643,
      2642,
      2641,
      3568,
      3567,
      3573
    ],
    [
      2643,
      3573,
      3572,
      3575,
      2644
    ],
    [
      3574,
      3580,
      3629,
      2645,
      2644,
      3575
    ],
    [
      3630,
      3629,
      3580,
      3579,
      3584,
      3631,
      3632
    ],
    [
      3633,
      3631,
      3584,
      3583,
      3588,
      3634
    ],
    [
      3630,
      3635,
      2646,
      2645,
      3629
    ],
    [
      3630,
      3632,
      3636,
      3637,
      3635
    ],
    [
      3638,
      3636,
      3632,
      3631,
      3633,
      3639,
      3640
    ],
    [
      2647,
      2608,
      2606,
      2605,
      2646,
      3635,
      3637,
      2648
    ],
    [
      2652,
      2649,
      2648,
      3637,
      3636,
      3638,
      2654
    ],
    [
      3638,
      3640,
      2658,
      2655,
      2654
    ],
    [
      2651,
      2617,
      2615,
      2614,
      2613,
      2650
    ],
    [
      2616,
      2617,
      2651,
      2653,
      2656,
      2657,
      2619,
      2618
    ],
    [
      2622,
      2620,
      2619,
      2657,
      2661
    ],
    [
      3641,
      3176,
      2665,
      2664,
      2674,
      3642
    ],
    [
      2673,
      2675,
      3643,
      3642,
      2674
    ],
    [
      1800,
      1803,
      3644,
      3643,
      2675,
      1801
    ],
    [
      1802,
      1805,
      2676,
      2680,
      3645,
      3646,
      3644,
      1803
    ],
    [
      3647,
      3648,
      3649,
      3645,
      2680,
      2679,
      3650
    ],
    [
      3651,
      3650,
      2679,
      2678
    ],
    [
      3651,
      2678,
      2677,
      2682,
      3652
    ],
    [
      2683,
      3653,
      3654,
      3655,
      2684
    ],
    [
      2683,
      2685,
      2686,
      2687,
      3653
    ],
    [
      3186,
      3654,
      3653,
      2687,
      2689
    ],
    [
      2702,
      2701,
      2705,
      3656,
      3657,
      3658
    ],
    [
      3656,
      2705,
      2704,
      2713,
      3659,
      3660
    ],
    [
      2712,
      2714,
      2715,
      3661,
      3662,
      3659,
      2713
    ],
    [
      3663,
      3664,
      3665,
      3661,
      2715,
      1880,
      1879,
      2718
    ],
    [
      2723,
      2725,
      3666,
      3667,
      3668,
      2721,
      2722
    ],
    [
      2725,
      2724,
      2727,
      3669,
      3670,
      3666
    ],
    [
      3671,
      3672,
      3669,
      2727,
      2726,
      2729
    ],
    [
      2730,
      2732,
      3673,
      3671,
      2729,
      2728
    ],
    [
      3674,
      3673,
      2732,
      2731,
      2734,
      3675
    ],
    [
      3676,
      3675,
      2734,
      2733,
      2736,
      3677
    ],
    [
      2735,
      2737,
      3678,
      3677,
      2736
    ],
    [
      2818,
      2817,
      2826,
      3679,
      3680,
      3681,
      2819
    ],
    [
      2820,
      2819,
      3681,
      3682,
      3683,
      2821
    ],
    [
      2822,
      2821,
      3683,
      3684,
      2824,
      2823
    ],
    [
      2749,
      2747,
      2746,
      2824,
      3684,
      3685,
      2753
    ],
    [
      3320,
      2754,
      2753,
      3685,
      3321
    ],
    [
      2756,
      2755,
      2754,
      3320,
      3319
    ],
    [
      2756,
      3319,
      3318,
      3323,
      2759,
      2758,
      2757
    ],
    [
      3322,
      3329,
      3332,
      2761,
      1908,
      1907,
      2759,
      3323
    ],
    [
      3331,
      2762,
      2761,
      3332
    ],
    [
      3330,
      3686,
      2763,
      2762,
      3331
    ],
    [
      3333,
      2764,
      2763,
      3686,
      3687,
      3688,
      3334
    ],
    [
      2760,
      2764,
      3333,
      3338,
      2765
    ],
    [
      2765,
      3338,
      3337,
      3340,
      2767,
      2766
    ],
    [
      1959,
      2788,
      2793,
      1964,
      1960
    ],
    [
      1965,
      1964,
      2793,
      2792,
      3360
    ],
    [
      1966,
      1965,
      3360,
      3359,
      2421
    ],
    [
      2426,
      2416,
      2415,
      2420,
      2421,
      3359,
      3358,
      3363,
      2428
    ],
    [
      3301,
      2833,
      2832,
      2834,
      2836,
      3689,
      3690
    ],
    [
      2837,
      2839,
      3691,
      3692,
      3693,
      3689,
      2836,
      2835
    ],
    [
      3694,
      3695,
      3696,
      3691,
      2839,
      2838,
      2841
    ],
    [
      2840,
      2843,
      3697,
      3698,
      3694,
      2841
    ],
    [
      3697,
      2843,
      2842,
      2845,
      3699,
      3700
    ],
    [
      2844,
      2847,
      3701,
      3699,
      2845
    ],
    [
      2850,
      3702,
      3703,
      3701,
      2847,
      2846
    ],
    [
      3704,
      3705,
      3702,
      2850,
      2849
    ],
    [
      3704,
      2849,
      2848,
      2852,
      3706,
      3707
    ],
    [
      2852,
      2851,
      2854,
      3708,
      3709,
      3706
    ],
    [
      2853,
      2856,
      3710,
      3711,
      3708,
      2854
    ],
    [
      2855,
      2858,
      3712,
      3713,
      3710,
      2856
    ],
    [
      2857,
      2860,
      3714,
      3715,
      3712,
      2858
    ],
    [
      2859,
      2862,
      3716,
      3717,
      3714,
      2860
    ],
    [
      2861,
      2864,
      3718,
      3719,
      3716,
      2862
    ],
    [
      3720,
      3718,
      2864,
      2863,
      2866,
      3721
    ],
    [
      2868,
      3722,
      3723,
      3721,
      2866,
      2865
    ],
    [
      3724,
      3725,
      3722,
      2868,
      2867,
      2869,
      3726
    ],
    [
      3727,
      2903,
      2902,
      3728,
      3729,
      3730
    ],
    [
      3731,
      3728,
      2902,
      2901,
      3732,
      3733
    ],
    [
      3731,
      3733,
      2910,
      2909,
      3734
    ],
    [
      2908,
      3040,
      3735,
      3734,
      2909
    ],
    [
      3736,
      3737,
      3738,
      2880,
      2879
    ],
    [
      3739,
      2888,
      2885,
      2881,
      2880,
      3738
    ],
    [
      3739,
      3740,
      3741,
      3742,
      2892,
      2889,
      2888
    ],
    [
      3742,
      3743,
      2897,
      2893,
      2892
    ],
    [
      2895,
      2897,
      3743,
      3744,
      3745,
      3746,
      3747
    ],
    [
      2898,
      2896,
      2895,
      3747,
      3748
    ],
    [
      2899,
      2898,
      3748,
      3732,
      2901
    ],
    [
      3731,
      3734,
      3735,
      3749,
      3729,
      3728
    ],
    [
      3750,
      3730,
      3729,
      3749,
      3751,
      3752
    ],
    [
      881,
      1461,
      3053,
      3753,
      3752,
      3751,
      3039,
      1436,
      865,
      460,
      459
    ],
    [
      2883,
      2882,
      2886,
      2887,
      3754,
      3755,
      3041
    ],
    [
      2891,
      2900,
      2904,
      3756,
      3754,
      2887,
      2890
    ],
    [
      3727,
      3757,
      3758,
      3756,
      2904,
      2903
    ],
    [
      1711,
      1710,
      2870,
      2873,
      2587
    ],
    [
      2872,
      2884,
      3043,
      2588,
      2587,
      2873
    ],
    [
      1736,
      3759,
      2874,
      2871,
      1709,
      1708,
      1720
    ],
    [
      3760,
      2878,
      2877,
      2876,
      3761
    ],
    [
      3736,
      2879,
      2878,
      3760,
      3762
    ],
    [
      3739,
      3738,
      3737,
      3763,
      3740
    ],
    [
      2911,
      3764,
      3765,
      3766,
      2912
    ],
    [
      3767,
      1452,
      1451,
      3768,
      3769,
      3770
    ],
    [
      2912,
      3766,
      2917,
      2090,
      2089
    ],
    [
      3768,
      1451,
      1450,
      2918,
      2917,
      3766,
      3765,
      3771
    ],
    [
      3767,
      3772,
      3726,
      2869,
      1453,
      1452
    ],
    [
      3773,
      2965,
      2964,
      3774,
      3775,
      3776,
      3777
    ],
    [
      2964,
      2969,
      2972,
      3778,
      3774
    ],
    [
      2970,
      2977,
      2978,
      3779,
      3780,
      2971
    ],
    [
      2981,
      3781,
      3779,
      2978,
      2976,
      2975
    ],
    [
      3782,
      3783,
      3784,
      3785,
      3786,
      3787
    ],
    [
      3788,
      3786,
      3785,
      2932,
      2931,
      3789,
      3790
    ],
    [
      2931,
      2930,
      2088,
      2087,
      3791,
      3792,
      3793,
      3789
    ],
    [
      3794,
      3795,
      3796,
      3770,
      3769,
      3797
    ],
    [
      3796,
      3795,
      3798,
      3799,
      3800,
      3801,
      3802
    ],
    [
      3803,
      3804,
      3800,
      3799,
      3805
    ],
    [
      3803,
      3805,
      3806,
      3807,
      3808,
      3809,
      3810,
      3811
    ],
    [
      3809,
      3808,
      3812,
      3813,
      3814,
      3815
    ],
    [
      3816,
      3817,
      3814,
      3813,
      3818,
      3819,
      3820
    ],
    [
      3821,
      3822,
      3823,
      3816,
      3820
    ],
    [
      3821,
      3824,
      3825,
      3826,
      3827,
      3822
    ],
    [
      3826,
      3825,
      3828,
      3829,
      3830,
      3831
    ],
    [
      3832,
      3833,
      3830,
      3829,
      3834,
      3835
    ],
    [
      3832,
      3835,
      3836,
      3837,
      3838
    ],
    [
      3838,
      3837,
      3839,
      3840,
      3841
    ],
    [
      3842,
      3843,
      3844,
      3845,
      3840,
      3839,
      3846
    ],
    [
      2940,
      2939,
      2942,
      2943,
      3847,
      3848
    ],
    [
      2943,
      2944,
      2945,
      3849,
      3850,
      3851,
      3847
    ],
    [
      2945,
      2947,
      3852,
      3853,
      3849
    ],
    [
      2946,
      2948,
      2949,
      3854,
      3855,
      3852,
      2947
    ],
    [
      2949,
      2950,
      2953,
      3856,
      3857,
      3854
    ],
    [
      3856,
      2953,
      2952,
      3858
    ],
    [
      3859,
      3860,
      3858,
      2952,
      2951,
      2955
    ],
    [
      3859,
      2955,
      2954,
      2957,
      3861,
      3862
    ],
    [
      2956,
      2959,
      3863,
      3864,
      3861,
      2957
    ],
    [
      2958,
      2961,
      3865,
      3866,
      3863,
      2959
    ],
    [
      2961,
      2960,
      2963,
      3867,
      3868,
      3869,
      3865
    ],
    [
      3870,
      3871,
      3872,
      3867,
      2963,
      2962
    ],
    [
      3873,
      3793,
      3792,
      3874,
      3875
    ],
    [
      3876,
      3877,
      3872,
      3871,
      3878
    ],
    [
      3876,
      3878,
      3875,
      3874,
      3879,
      3880,
      3881
    ],
    [
      3872,
      3877,
      3882,
      3883,
      3868,
      3867
    ],
    [
      3879,
      3874,
      3792,
      3791
    ],
    [
      3879,
      3791,
      2087,
      2086,
      3884,
      3880
    ],
    [
      3876,
      3881,
      3885,
      3882,
      3877
    ],
    [
      3886,
      3885,
      3881,
      3880,
      3884,
      3887,
      3888
    ],
    [
      2941,
      3889,
      3890,
      3162,
      2935,
      2934,
      2937,
      2938
    ],
    [
      3005,
      3004,
      3891,
      2080,
      2079
    ],
    [
      3892,
      2081,
      2080,
      3891
    ],
    [
      3892,
      3873,
      3875,
      3878,
      3871,
      3870,
      2082,
      2081
    ],
    [
      3870,
      2962,
      2083,
      2082
    ],
    [
      3003,
      3007,
      3893,
      3002,
      3001
    ],
    [
      3894,
      3893,
      3007,
      3006,
      3009,
      3895
    ],
    [
      3896,
      3897,
      3895,
      3009,
      3008,
      3010
    ],
    [
      3896,
      3010,
      2066,
      2065,
      3038,
      3898,
      3899
    ],
    [
      3900,
      2998,
      2997,
      2991,
      2990,
      2989
    ],
    [
      3901,
      2992,
      2991,
      2997,
      2996
    ],
    [
      3900,
      3790,
      3789,
      3793,
      3873,
      3892,
      3891,
      3004,
      3000,
      2999,
      2998
    ],
    [
      3902,
      2987,
      2986,
      2988,
      2994
    ],
    [
      3903,
      3902,
      2994,
      2993,
      3904,
      3905,
      3906,
      3907
    ],
    [
      3905,
      3904,
      3908,
      3909,
      3910
    ],
    [
      3911,
      3912,
      3913,
      3914,
      3910,
      3909,
      3915
    ],
    [
      3911,
      3916,
      3917,
      3918,
      3912
    ],
    [
      3919,
      3920,
      3921,
      3922,
      3918,
      3917
    ],
    [
      3923,
      3924,
      3921,
      3920,
      3925
    ],
    [
      3923,
      3925,
      3926,
      3927,
      3928,
      3929,
      3930
    ],
    [
      3931,
      3932,
      3933,
      3934,
      3928,
      3927,
      3935
    ],
    [
      3936,
      3937,
      3938,
      3933,
      3932,
      3939
    ],
    [
      3903,
      3781,
      2981,
      2980,
      2987,
      3902
    ],
    [
      3788,
      2984,
      2979,
      2983,
      3787,
      3786
    ],
    [
      3788,
      3790,
      3900,
      2989,
      2985,
      2984
    ],
    [
      3782,
      3787,
      2983,
      2982,
      3940,
      3941
    ],
    [
      3784,
      2929,
      2928,
      2932,
      3785
    ],
    [
      3942,
      3943,
      3944,
      3945,
      3946,
      3947
    ],
    [
      3948,
      3949,
      3947,
      3946,
      3950
    ],
    [
      3951,
      3013,
      3012,
      3949,
      3948,
      3952
    ],
    [
      3953,
      3014,
      3013,
      3951,
      3954
    ],
    [
      3953,
      3955,
      3956,
      3016,
      3015,
      3014
    ],
    [
      3017,
      3016,
      3956,
      3957,
      3958,
      3018
    ],
    [
      3959,
      3020,
      3019,
      3018,
      3958,
      3960
    ],
    [
      3021,
      3020,
      3959,
      3961,
      3962,
      3022
    ],
    [
      3023,
      3022,
      3962,
      3963,
      3964,
      3025
    ],
    [
      3024,
      3025,
      3964,
      3965,
      3026
    ],
    [
      3026,
      3965,
      3966,
      3967,
      3028,
      3027
    ],
    [
      3028,
      3967,
      3968,
      3969,
      3030,
      3029
    ],
    [
      3970,
      3971,
      3034,
      3032,
      3031,
      3030,
      3969
    ],
    [
      3971,
      3972,
      3035,
      3033,
      3034
    ],
    [
      3035,
      3972,
      3973,
      3974,
      3037,
      3036
    ],
    [
      3044,
      3042,
      3041,
      3755,
      3975,
      3046,
      3045
    ],
    [
      3975,
      3755,
      3754,
      3756,
      3758
    ],
    [
      3047,
      3046,
      3975,
      3758,
      3757,
      3052,
      3049
    ],
    [
      3727,
      3730,
      3750,
      3753,
      3053,
      3052,
      3757
    ],
    [
      3976,
      3977,
      3109,
      3108,
      3978
    ],
    [
      1498,
      1497,
      3976,
      3978,
      3979
    ],
    [
      1482,
      1481,
      1484,
      1498,
      3979,
      3054,
      2179
    ],
    [
      3085,
      3088,
      3980,
      3981,
      3086
    ],
    [
      3090,
      3982,
      3980,
      3088,
      3087
    ],
    [
      3090,
      3089,
      3092,
      3983,
      3984,
      3982
    ],
    [
      3093,
      3985,
      3986,
      3983,
      3092,
      3091
    ],
    [
      3093,
      3094,
      3095,
      3097,
      3987,
      3985
    ],
    [
      3100,
      3988,
      3987,
      3097,
      3096
    ],
    [
      3501,
      3988,
      3100,
      3099,
      3104,
      3502
    ],
    [
      3107,
      3989,
      3503,
      3502,
      3104,
      3103,
      3106
    ],
    [
      3056,
      3058,
      3942,
      3947,
      3949,
      3012,
      3011
    ],
    [
      3990,
      3059,
      2117,
      2116,
      2119,
      3065,
      3991
    ],
    [
      3065,
      3064,
      3992,
      3993,
      3991
    ],
    [
      3063,
      3994,
      3992,
      3064
    ],
    [
      3063,
      3062,
      3067,
      3995,
      3996,
      3994
    ],
    [
      3066,
      3068,
      3070,
      3997,
      3998,
      3995,
      3067
    ],
    [
      3069,
      3073,
      3999,
      4000,
      4001,
      3997,
      3070
    ],
    [
      3999,
      3073,
      3072,
      4002,
      4003
    ],
    [
      3071,
      3075,
      4004,
      4002,
      3072
    ],
    [
      3074,
      3077,
      4005,
      4006,
      4004,
      3075
    ],
    [
      3076,
      3079,
      4007,
      4008,
      4005,
      3077
    ],
    [
      3081,
      4009,
      4010,
      4007,
      3079,
      3078
    ],
    [
      3081,
      3080,
      3084,
      4011,
      4012,
      4009
    ],
    [
      3084,
      3083,
      4013,
      4011
    ],
    [
      3083,
      3082,
      3086,
      3981,
      4014,
      4015,
      4013
    ],
    [
      3105,
      3102,
      3101,
      3055,
      3054,
      3979,
      3978,
      3108
    ],
    [
      3098,
      2171,
      2170,
      2175,
      3055,
      3101
    ],
    [
      3111,
      2150,
      2144,
      2149,
      3172,
      4016,
      4017
    ],
    [
      3113,
      3112,
      3111,
      4017,
      3114
    ],
    [
      3115,
      3114,
      4017,
      4016,
      4018,
      3116
    ],
    [
      4019,
      3124,
      3117,
      3116,
      4018
    ],
    [
      4019,
      4020,
      3119,
      3124
    ],
    [
      3119,
      4020,
      4021,
      3125,
      3120
    ],
    [
      464,
      463,
      883,
      3118,
      3123,
      4022
    ],
    [
      3122,
      4023,
      4024,
      4022,
      3123
    ],
    [
      3121,
      3128,
      4025,
      4026,
      4023,
      3122
    ],
    [
      3127,
      3134,
      4027,
      4025,
      3128
    ],
    [
      3133,
      4028,
      4029,
      4027,
      3134
    ],
    [
      3136,
      4030,
      4031,
      4028,
      3133,
      3132
    ],
    [
      3135,
      4032,
      4033,
      4030,
      3136
    ],
    [
      3135,
      3139,
      3140,
      4034,
      4035,
      4032
    ],
    [
      3140,
      3143,
      3146,
      3150,
      4036,
      4037,
      4038,
      4034
    ],
    [
      3153,
      4039,
      4036,
      3150,
      3149
    ],
    [
      3152,
      3158,
      4040,
      4041,
      4042,
      4039,
      3153
    ],
    [
      3156,
      4043,
      4044,
      4045,
      4046,
      3157
    ],
    [
      3129,
      3126,
      3125,
      4021,
      4047,
      4048,
      4049
    ],
    [
      3129,
      4049,
      4050,
      3130
    ],
    [
      4051,
      3137,
      3131,
      3130,
      4050,
      4052
    ],
    [
      4051,
      4053,
      3141,
      3138,
      3137
    ],
    [
      4054,
      3144,
      3142,
      3141,
      4053
    ],
    [
      4055,
      3147,
      3145,
      3144,
      4054
    ],
    [
      4055,
      4056,
      4057,
      4058,
      4059,
      3154,
      3148,
      3147
    ],
    [
      4060,
      4059,
      4058,
      4061,
      4062,
      4063
    ],
    [
      4060,
      4063,
      4064,
      4043,
      3156,
      3155
    ],
    [
      4060,
      3155,
      3151,
      3154,
      4059
    ],
    [
      3889,
      4065,
      4066,
      3890
    ],
    [
      3890,
      4066,
      4067,
      4068,
      3163,
      3162
    ],
    [
      3161,
      3163,
      4068,
      4069,
      4070,
      3164
    ],
    [
      3164,
      4070,
      4071,
      3165
    ],
    [
      3165,
      4071,
      3170,
      3168,
      3167,
      3166
    ],
    [
      3169,
      3171,
      4072,
      4047,
      4021,
      4020,
      4019,
      4018,
      4016,
      3172
    ],
    [
      3644,
      3646,
      3641,
      3642,
      3643
    ],
    [
      3641,
      3646,
      3645,
      3649,
      3178,
      3177,
      3176
    ],
    [
      3179,
      3178,
      3649,
      3648,
      3180
    ],
    [
      3647,
      4073,
      3182,
      3181,
      3180,
      3648
    ],
    [
      4074,
      3185,
      3183,
      3182,
      4073
    ],
    [
      2205,
      2211,
      3184,
      3185,
      4074
    ],
    [
      2206,
      4075,
      4076,
      2222,
      2214,
      2213,
      2207
    ],
    [
      4077,
      4078,
      4076,
      4075
    ],
    [
      2226,
      2234,
      3227,
      3228,
      3229,
      3231,
      3196
    ],
    [
      4079,
      3202,
      3201,
      4080,
      4081,
      4082,
      4083
    ],
    [
      3211,
      3238,
      4084,
      3208,
      3207
    ],
    [
      3213,
      3212,
      3214,
      3216
    ],
    [
      2250,
      3205,
      3209,
      4080,
      3201,
      2251
    ],
    [
      3402,
      4085,
      2229,
      2228,
      2396,
      2400,
      3401
    ],
    [
      4086,
      4087,
      2230,
      2229,
      4085
    ],
    [
      3413,
      2231,
      2230,
      4087,
      3414
    ],
    [
      3413,
      3412,
      3416,
      2232,
      2231
    ],
    [
      3417,
      3419,
      3223,
      2233,
      2232,
      3416,
      3415
    ],
    [
      3223,
      3419,
      3418,
      3420,
      3224
    ],
    [
      3225,
      3224,
      3420,
      2238,
      2237
    ],
    [
      3225,
      2237,
      2236,
      3226
    ],
    [
      4088,
      4083,
      4082,
      4089,
      4090
    ],
    [
      4088,
      4090,
      4091,
      4092,
      4093,
      4094
    ],
    [
      4095,
      4096,
      3241,
      3240,
      4097,
      4098,
      4099
    ],
    [
      3243,
      4100,
      4097,
      3240,
      3239,
      3242
    ],
    [
      2267,
      2266,
      2271,
      3246,
      4101,
      4100,
      3243
    ],
    [
      4102,
      4103,
      4104,
      4099,
      4098,
      4105,
      4106
    ],
    [
      4107,
      4108,
      4109,
      4110,
      4106,
      4105,
      4101,
      3246,
      3245
    ],
    [
      4107,
      3245,
      3244,
      3248,
      4111
    ],
    [
      4111,
      3248,
      3247,
      3249,
      3251,
      4112
    ],
    [
      4113,
      4112,
      3251,
      3250,
      3254
    ],
    [
      2212,
      3256,
      3174,
      3173,
      2208,
      2207,
      2213
    ],
    [
      3255,
      3175,
      3174,
      3256
    ],
    [
      2273,
      2275,
      2198,
      2197,
      3175,
      3255,
      2287,
      2285,
      2279,
      2276
    ],
    [
      3257,
      4114,
      4115,
      3258
    ],
    [
      4116,
      4115,
      4114,
      4117,
      4118
    ],
    [
      4116,
      4118,
      3289,
      3288,
      4119,
      4120
    ],
    [
      4121,
      4122,
      4120,
      4119,
      4123,
      4124
    ],
    [
      3192,
      4125,
      4126,
      4127,
      3193
    ],
    [
      3194,
      3193,
      4127,
      4128,
      3300,
      3299
    ],
    [
      3195,
      3194,
      3299,
      2398,
      2397
    ],
    [
      2702,
      3658,
      4129,
      1839,
      1838
    ],
    [
      2327,
      1840,
      1839,
      4129,
      4130,
      3259
    ],
    [
      3260,
      3259,
      4130,
      4131,
      4132,
      3261
    ],
    [
      4132,
      4133,
      4134,
      3262,
      3261
    ],
    [
      4135,
      3265,
      3264,
      3263,
      3262,
      4134
    ],
    [
      4136,
      3267,
      3266,
      3265,
      4135,
      4137
    ],
    [
      4136,
      4138,
      4139,
      3269,
      3268,
      3267
    ],
    [
      4140,
      3272,
      3270,
      3269,
      4139
    ],
    [
      4141,
      3274,
      3271,
      3272,
      4140
    ],
    [
      4141,
      4142,
      4143,
      4144,
      4145,
      3275,
      3274
    ],
    [
      3273,
      3275,
      4145,
      4146,
      3276
    ],
    [
      4147,
      3277,
      3276,
      4146
    ],
    [
      4148,
      4149,
      3280,
      3278,
      3277,
      4147
    ],
    [
      3279,
      3280,
      4149,
      4150,
      3282,
      3281
    ],
    [
      4151,
      3284,
      3283,
      3282,
      4150,
      4152
    ],
    [
      4151,
      4153,
      1944,
      1943,
      3287,
      3286,
      3285,
      3284
    ],
    [
      3288,
      3290,
      3291,
      3293,
      3296,
      4123,
      4119
    ],
    [
      3298,
      3300,
      4128,
      4124,
      4123,
      3296,
      3295,
      3297
    ],
    [
      3349,
      3348,
      3347,
      4154,
      4155,
      3352,
      3351,
      3350
    ],
    [
      3339,
      3336,
      3335,
      4156,
      4157,
      3342,
      3341
    ],
    [
      3330,
      3328,
      3327,
      4158,
      4159,
      3687,
      3686
    ],
    [
      4159,
      4160,
      4161,
      3688,
      3687
    ],
    [
      4161,
      4160,
      4162,
      4163
    ],
    [
      4161,
      4163,
      4156,
      3335,
      3334,
      3688
    ],
    [
      4164,
      4165,
      4166,
      4167,
      4168
    ],
    [
      4168,
      4167,
      4169,
      3309,
      3304,
      3308
    ],
    [
      3315,
      3310,
      3309,
      4169,
      4170,
      3316
    ],
    [
      3317,
      3316,
      4170,
      4171,
      3324
    ],
    [
      3324,
      4171,
      4172,
      3325
    ],
    [
      3326,
      3325,
      4172,
      4173,
      4174,
      4175,
      4158,
      3327
    ],
    [
      2828,
      2831,
      3303,
      3307,
      2829
    ],
    [
      2825,
      2827,
      2829,
      3307,
      3306,
      3679,
      2826
    ],
    [
      3680,
      3679,
      3306,
      3305,
      3312
    ],
    [
      3682,
      3681,
      3680,
      3312,
      3311,
      3314
    ],
    [
      3313,
      3321,
      3685,
      3684,
      3683,
      3682,
      3314
    ],
    [
      4176,
      3364,
      3362,
      3361,
      4177
    ],
    [
      4176,
      4178,
      3366,
      3365,
      3364
    ],
    [
      3406,
      2447,
      2441,
      2440,
      4179,
      4180,
      3369,
      3368
    ],
    [
      2463,
      3409,
      3373,
      3372,
      3410,
      2464
    ],
    [
      3411,
      3410,
      3372,
      3371,
      3376,
      3512
    ],
    [
      3513,
      3512,
      3376,
      3375,
      3536
    ],
    [
      3374,
      3379,
      3381,
      3534,
      3535,
      3536,
      3375
    ],
    [
      4181,
      4182,
      4183,
      4178,
      4176,
      4177
    ],
    [
      2439,
      3366,
      4178,
      4183,
      4179,
      2440
    ],
    [
      3387,
      4184,
      4185,
      3533,
      3384,
      3383
    ],
    [
      3387,
      3389,
      3391,
      4186,
      4187,
      4184
    ],
    [
      3390,
      3396,
      3395,
      4188,
      4189,
      3515,
      3514,
      4186,
      3391
    ],
    [
      3424,
      3428,
      4190,
      963,
      958,
      955,
      954
    ],
    [
      3427,
      3432,
      4191,
      4190,
      3428
    ],
    [
      4191,
      3432,
      3431,
      3437,
      4192,
      4193
    ],
    [
      4194,
      4192,
      3437,
      3436,
      4195
    ],
    [
      3435,
      3441,
      3444,
      4196,
      4195,
      3436
    ],
    [
      4196,
      3444,
      3443,
      4197,
      4198
    ],
    [
      4199,
      4200,
      4197,
      3443,
      3442,
      3451
    ],
    [
      4201,
      4199,
      3451,
      3450,
      3453,
      4202
    ],
    [
      3452,
      3459,
      4203,
      4204,
      4202,
      3453
    ],
    [
      4205,
      4206,
      4203,
      3459,
      3458,
      3461
    ],
    [
      4205,
      3461,
      3460,
      3467,
      4207,
      4208
    ],
    [
      3466,
      3469,
      4209,
      4210,
      4207,
      3467
    ],
    [
      3468,
      3475,
      4211,
      4209,
      3469
    ],
    [
      3475,
      3474,
      3479,
      4212,
      4213,
      4211
    ],
    [
      4214,
      4215,
      4212,
      3479,
      3478,
      3480
    ],
    [
      4214,
      3480,
      3483,
      3484,
      4216,
      4217
    ],
    [
      3484,
      3487,
      3491,
      4218,
      4219,
      4216
    ],
    [
      3490,
      3495,
      4220,
      4221,
      4218,
      3491
    ],
    [
      3496,
      3503,
      3989,
      4222,
      4220,
      3495,
      3494
    ],
    [
      4223,
      4224,
      4225,
      4226,
      4227
    ],
    [
      4228,
      4227,
      4226,
      4229,
      4230,
      4231
    ],
    [
      4232,
      4233,
      4234,
      4231,
      4230,
      4235
    ],
    [
      4236,
      4237,
      4238,
      4233,
      4232,
      4239
    ],
    [
      4236,
      4240,
      4241,
      4242,
      4243,
      4237
    ],
    [
      4244,
      4245,
      4246,
      4247,
      4242,
      4241,
      4248
    ],
    [
      4244,
      4249,
      4250,
      4251,
      4252,
      4245
    ],
    [
      4250,
      4253,
      4254,
      4255,
      4251
    ],
    [
      4254,
      4256,
      4257,
      4258,
      4259,
      4260,
      4255
    ],
    [
      4261,
      4258,
      4257,
      4262,
      4263
    ],
    [
      4264,
      4265,
      4266,
      4267,
      4261,
      4263
    ],
    [
      4265,
      4268,
      4269,
      4270,
      4266
    ],
    [
      4271,
      4272,
      4273,
      4274,
      4270,
      4269
    ],
    [
      4272,
      4275,
      4276,
      4277,
      4273
    ],
    [
      4278,
      4279,
      4280,
      4281,
      4277,
      4276
    ],
    [
      4282,
      3517,
      3516,
      4280,
      4279,
      4283
    ],
    [
      4284,
      4285,
      3518,
      3517,
      4282
    ],
    [
      3522,
      3519,
      3518,
      4285,
      4286,
      4287
    ],
    [
      4288,
      3524,
      3523,
      3522,
      4287,
      4289
    ],
    [
      3527,
      3525,
      3524,
      4288,
      4290
    ],
    [
      3527,
      4290,
      4291,
      4292,
      3529,
      3528
    ],
    [
      3529,
      4292,
      4293,
      4294,
      3530
    ],
    [
      4294,
      4293,
      4295,
      4296,
      4297
    ],
    [
      3506,
      3507,
      4297,
      4296,
      4298,
      3509,
      3508
    ],
    [
      4298,
      4299,
      3511,
      3510,
      3509
    ],
    [
      3511,
      4299,
      4300,
      3439,
      3438
    ],
    [
      3440,
      3439,
      4300,
      4301,
      4302,
      3445
    ],
    [
      3447,
      3446,
      4303,
      4304,
      4305,
      3448
    ],
    [
      4306,
      4307,
      3454,
      3449,
      3448,
      4305
    ],
    [
      3456,
      3455,
      3454,
      4307,
      4308,
      4309
    ],
    [
      3456,
      4309,
      4310,
      4311,
      3462,
      3457
    ],
    [
      3464,
      3463,
      3462,
      4311,
      4312,
      4313
    ],
    [
      3464,
      4313,
      4314,
      4315,
      3470,
      3465
    ],
    [
      3471,
      3470,
      4315,
      4316,
      3472
    ],
    [
      3476,
      3473,
      3472,
      4316,
      4317,
      4318,
      4319
    ],
    [
      3476,
      4319,
      4320,
      3481,
      3477
    ],
    [
      3485,
      3482,
      3481,
      4320,
      4321,
      4322,
      4323
    ],
    [
      3486,
      3485,
      4323,
      4324,
      3488
    ],
    [
      3492,
      3489,
      3488,
      4324,
      4325,
      4326
    ],
    [
      3492,
      4326,
      4327,
      4328,
      3498,
      3497,
      3493
    ],
    [
      3499,
      3498,
      4328,
      4329,
      4330
    ],
    [
      3504,
      3532,
      3531,
      3530,
      4294,
      4297,
      3507,
      3505
    ],
    [
      3521,
      3526,
      2499,
      2498,
      4187,
      4186,
      3514,
      3520
    ],
    [
      4331,
      4332,
      4333,
      4334,
      4335
    ],
    [
      4331,
      4336,
      4337,
      4338,
      4339,
      4340,
      4332
    ],
    [
      4341,
      4333,
      4332,
      4340,
      4342
    ],
    [
      4343,
      2660,
      2659,
      4334,
      4333,
      4341,
      4344
    ],
    [
      2622,
      2661,
      2660,
      4343,
      2601,
      2600,
      2623
    ],
    [
      4342,
      4340,
      4339,
      4345,
      4346,
      4347
    ],
    [
      4348,
      4344,
      4341,
      4342,
      4347,
      4349
    ],
    [
      2601,
      4343,
      4344,
      4348,
      2602
    ],
    [
      197,
      6,
      5,
      4350,
      4351,
      3541
    ],
    [
      3542,
      3541,
      4351,
      4352,
      4353,
      3543
    ],
    [
      4354,
      4355,
      3545,
      3544,
      3543,
      4353
    ],
    [
      3548,
      3546,
      3545,
      4355,
      4356,
      4357
    ],
    [
      3547,
      3548,
      4357,
      4358,
      4359,
      3549
    ],
    [
      3550,
      3549,
      4359,
      4360,
      4361,
      3551
    ],
    [
      3552,
      3551,
      4361,
      4362,
      4363,
      3553
    ],
    [
      3554,
      3553,
      4363,
      4364,
      4365,
      3555
    ],
    [
      3556,
      3555,
      4365,
      4366,
      3560
    ],
    [
      3562,
      3561,
      3560,
      4366,
      4367,
      4368
    ],
    [
      3562,
      4368,
      4369,
      4370,
      3569,
      3563
    ],
    [
      3566,
      3569,
      4370,
      4371,
      4372,
      3570
    ],
    [
      3571,
      3570,
      4372,
      4373,
      4374,
      3577,
      3576
    ],
    [
      3577,
      4374,
      4375,
      4376,
      3581,
      3578
    ],
    [
      3581,
      4376,
      4377,
      4378,
      3585,
      3582
    ],
    [
      4379,
      3592,
      3586,
      3585,
      4378
    ],
    [
      3596,
      3589,
      3592,
      4379,
      4380,
      4381
    ],
    [
      3593,
      3596,
      4381,
      4382,
      4383,
      3598
    ],
    [
      3598,
      4383,
      4384,
      3886,
      3888,
      3604,
      3599
    ],
    [
      3601,
      3604,
      3888,
      3887,
      3611,
      3605
    ],
    [
      3587,
      3591,
      4385,
      4386,
      3634,
      3588
    ],
    [
      4387,
      4385,
      3591,
      3590,
      3595,
      4388
    ],
    [
      3597,
      4389,
      4390,
      4388,
      3595,
      3594
    ],
    [
      3597,
      3600,
      3603,
      4391,
      4392,
      4389
    ],
    [
      3603,
      3602,
      3608,
      3610,
      4393,
      4391
    ],
    [
      4394,
      3609,
      3607,
      3606,
      3614,
      4395
    ],
    [
      3619,
      3618,
      3613,
      3612
    ],
    [
      4396,
      4397,
      4395,
      3614,
      3613,
      3618,
      3617,
      3621,
      3623
    ],
    [
      4398,
      3639,
      3633,
      3634,
      4386,
      4399
    ],
    [
      4400,
      4401,
      4399,
      4386,
      4385,
      4387
    ],
    [
      4400,
      4387,
      4388,
      4390,
      4402,
      4403,
      4404
    ],
    [
      4405,
      4402,
      4390,
      4389,
      4392,
      4406
    ],
    [
      4406,
      4392,
      4391,
      4393,
      4407,
      4408
    ],
    [
      4393,
      3610,
      3609,
      4394,
      4409,
      4407
    ],
    [
      2084,
      2088,
      2930,
      2914,
      2913,
      3615
    ],
    [
      3611,
      3887,
      3884,
      2086,
      2085,
      3619,
      3612
    ],
    [
      4400,
      4404,
      4410,
      4411,
      4401
    ],
    [
      4412,
      4398,
      4399,
      4401,
      4411
    ],
    [
      4412,
      4335,
      4334,
      2659,
      2658,
      3640,
      3639,
      4398
    ],
    [
      4412,
      4411,
      4410,
      4336,
      4331,
      4335
    ],
    [
      4403,
      4337,
      4336,
      4410,
      4404
    ],
    [
      4405,
      4413,
      4338,
      4337,
      4403,
      4402
    ],
    [
      4405,
      4406,
      4408,
      4414,
      4415,
      4413
    ],
    [
      4416,
      4414,
      4408,
      4407,
      4409,
      4417
    ],
    [
      4417,
      4409,
      4394,
      4395,
      4397,
      4418
    ],
    [
      4413,
      4415,
      4419,
      4345,
      4339,
      4338
    ],
    [
      4416,
      4420,
      4421,
      4419,
      4415,
      4414
    ],
    [
      4416,
      4417,
      4418,
      4422,
      4423,
      4420
    ],
    [
      4424,
      4425,
      4422,
      4418,
      4397,
      4396
    ],
    [
      4348,
      4349,
      3759,
      1736,
      1735,
      2602
    ],
    [
      2874,
      3759,
      4349,
      4347,
      4346,
      4426,
      2875
    ],
    [
      3761,
      2876,
      2875,
      4426,
      4427
    ],
    [
      3762,
      3760,
      3761,
      4427,
      4428,
      4429
    ],
    [
      3736,
      3762,
      4429,
      4430,
      4431,
      3763,
      3737
    ],
    [
      4431,
      4432,
      4433,
      3741,
      3740,
      3763
    ],
    [
      3742,
      3741,
      4433,
      4434,
      3744,
      3743
    ],
    [
      3651,
      3652,
      4077,
      4075,
      2206,
      2205,
      4074,
      4073,
      3647,
      3650
    ],
    [
      3652,
      2682,
      2681,
      2684,
      3655,
      4078,
      4077
    ],
    [
      3186,
      2217,
      2222,
      4076,
      4078,
      3655,
      3654
    ],
    [
      3656,
      3660,
      4435,
      4436,
      3657
    ],
    [
      4437,
      4435,
      3660,
      3659,
      3662,
      4438,
      4439
    ],
    [
      3662,
      3661,
      3665,
      4440,
      4441,
      4438
    ],
    [
      3664,
      4442,
      4440,
      3665
    ],
    [
      3663,
      4443,
      4442,
      3664
    ],
    [
      3663,
      2718,
      2717,
      4444,
      4445,
      4443
    ],
    [
      2721,
      3668,
      4446,
      4447,
      4444,
      2717,
      2716,
      2719
    ],
    [
      4446,
      3668,
      3667,
      4448
    ],
    [
      3670,
      4449,
      4450,
      4448,
      3667,
      3666
    ],
    [
      4451,
      4449,
      3670,
      3669,
      3672
    ],
    [
      3674,
      4452,
      4451,
      3672,
      3671,
      3673
    ],
    [
      3674,
      3675,
      3676,
      4453,
      4454,
      4452
    ],
    [
      3676,
      3677,
      3678,
      4455,
      4453
    ],
    [
      3301,
      3690,
      4164,
      4168,
      3308,
      3302
    ],
    [
      4164,
      3690,
      3689,
      3693,
      4456,
      4165
    ],
    [
      3693,
      3692,
      4457,
      4458,
      4456
    ],
    [
      4459,
      4457,
      3692,
      3691,
      3696
    ],
    [
      4459,
      3696,
      3695,
      4460,
      4461
    ],
    [
      3694,
      3698,
      4462,
      4463,
      4460,
      3695
    ],
    [
      3698,
      3697,
      3700,
      4464,
      4465,
      4462
    ],
    [
      3701,
      3703,
      4466,
      4467,
      4464,
      3700,
      3699
    ],
    [
      3702,
      3705,
      4468,
      4469,
      4466,
      3703
    ],
    [
      3704,
      3707,
      4470,
      4471,
      4472,
      4468,
      3705
    ],
    [
      3707,
      3706,
      3709,
      4473,
      4474,
      4470
    ],
    [
      3711,
      4475,
      4476,
      4473,
      3709,
      3708
    ],
    [
      4477,
      4478,
      4475,
      3711,
      3710,
      3713
    ],
    [
      4477,
      3713,
      3712,
      3715,
      4479,
      4480
    ],
    [
      4481,
      4479,
      3715,
      3714,
      3717,
      4482
    ],
    [
      4483,
      4482,
      3717,
      3716,
      3719
    ],
    [
      3720,
      4484,
      4485,
      4483,
      3719,
      3718
    ],
    [
      3720,
      3721,
      3723,
      4486,
      4487,
      4488,
      4484
    ],
    [
      4489,
      4486,
      3723,
      3722,
      3725
    ],
    [
      4489,
      4490,
      4491,
      4487,
      4486
    ],
    [
      4489,
      3725,
      3724,
      4492,
      4493,
      4490
    ],
    [
      3724,
      3726,
      3772,
      3802,
      3801,
      4492
    ],
    [
      3767,
      3770,
      3796,
      3802,
      3772
    ],
    [
      3768,
      3771,
      4494,
      4495,
      3797,
      3769
    ],
    [
      4494,
      3771,
      3765,
      3764,
      4496,
      4497
    ],
    [
      4498,
      4499,
      4500,
      4497,
      4496
    ],
    [
      3941,
      3940,
      4501,
      4500,
      4499
    ],
    [
      3784,
      3783,
      4498,
      4496,
      3764,
      2911,
      2916,
      2929
    ],
    [
      3626,
      3628,
      3746,
      3745,
      3627
    ],
    [
      2905,
      2910,
      3733,
      3732,
      3748,
      3747,
      3746,
      3628,
      2906
    ],
    [
      3750,
      3752,
      3753
    ],
    [
      3040,
      3039,
      3751,
      3749,
      3735
    ],
    [
      4502,
      4503,
      4504,
      4505,
      4506,
      4507
    ],
    [
      4508,
      4509,
      4502,
      4507,
      4510,
      4511
    ],
    [
      4508,
      4511,
      3780,
      3779,
      3781,
      3903,
      3907
    ],
    [
      3905,
      3910,
      3914,
      4512,
      4513,
      3906
    ],
    [
      3913,
      4514,
      4515,
      4512,
      3914
    ],
    [
      3913,
      3912,
      3918,
      3922,
      4516,
      4517,
      4514
    ],
    [
      3922,
      3921,
      3924,
      4518,
      4516
    ],
    [
      3923,
      3930,
      4519,
      4518,
      3924
    ],
    [
      3930,
      3929,
      4520,
      4521,
      4522,
      4519
    ],
    [
      3928,
      3934,
      4523,
      4520,
      3929
    ],
    [
      3938,
      4524,
      4523,
      3934,
      3933
    ],
    [
      4525,
      4526,
      3794,
      3797,
      4495,
      4527
    ],
    [
      3794,
      4526,
      4528,
      4529,
      3798,
      3795
    ],
    [
      3798,
      4529,
      4530,
      3806,
      3805,
      3799
    ],
    [
      3804,
      4531,
      4493,
      4492,
      3801,
      3800
    ],
    [
      4532,
      4533,
      4531,
      3804,
      3803,
      3811
    ],
    [
      4532,
      3811,
      3810,
      4534
    ],
    [
      3809,
      3815,
      4535,
      4536,
      4534,
      3810
    ],
    [
      4525,
      4527,
      4537,
      4538,
      4539,
      4540,
      4541
    ],
    [
      4542,
      4543,
      4544,
      4530,
      4529,
      4528
    ],
    [
      4544,
      4545,
      4546,
      3807,
      3806,
      4530
    ],
    [
      3812,
      3808,
      3807,
      4546,
      4547,
      4548
    ],
    [
      3812,
      4548,
      4549,
      4550,
      3818,
      3813
    ],
    [
      3819,
      3818,
      4550,
      4551,
      4552
    ],
    [
      3821,
      3820,
      3819,
      4552,
      4553,
      3824
    ],
    [
      3824,
      4553,
      4554,
      4555,
      3828,
      3825
    ],
    [
      4555,
      4556,
      4557,
      4558,
      3834,
      3829,
      3828
    ],
    [
      4559,
      3836,
      3835,
      3834,
      4558
    ],
    [
      4560,
      4561,
      3846,
      3839,
      3837,
      3836,
      4559
    ],
    [
      3815,
      3814,
      3817,
      4562,
      4563,
      4564,
      4565,
      4566,
      4535
    ],
    [
      3816,
      3823,
      4562,
      3817
    ],
    [
      3827,
      4563,
      4562,
      3823,
      3822
    ],
    [
      3827,
      3826,
      3831,
      4567,
      4564,
      4563
    ],
    [
      4568,
      4565,
      4564,
      4567
    ],
    [
      4569,
      4568,
      4567,
      3831,
      3830,
      3833
    ],
    [
      3832,
      3838,
      3841,
      4569,
      3833
    ],
    [
      3864,
      4570,
      4571,
      4572,
      3862,
      3861
    ],
    [
      4573,
      4571,
      4570,
      4574,
      4575,
      4576,
      4577
    ],
    [
      4576,
      4578,
      4579,
      4580,
      4577
    ],
    [
      4581,
      4582,
      4583,
      4573,
      4577,
      4580
    ],
    [
      4045,
      4044,
      4583,
      4582,
      4584
    ],
    [
      2940,
      3848,
      4585,
      4065,
      3889,
      2941
    ],
    [
      3848,
      3847,
      3851,
      4586,
      4585
    ],
    [
      3850,
      4587,
      4588,
      4586,
      3851
    ],
    [
      3849,
      3853,
      4589,
      4587,
      3850
    ],
    [
      4589,
      3853,
      3852,
      3855,
      4057,
      4056
    ],
    [
      4057,
      3855,
      3854,
      3857,
      4061,
      4058
    ],
    [
      3856,
      3858,
      3860,
      4062,
      4061,
      3857
    ],
    [
      3859,
      3862,
      4572,
      4064,
      4063,
      4062,
      3860
    ],
    [
      3863,
      3866,
      4574,
      4570,
      3864
    ],
    [
      3869,
      4590,
      4575,
      4574,
      3866,
      3865
    ],
    [
      4576,
      4575,
      4590,
      4591,
      4578
    ],
    [
      3869,
      3868,
      3883,
      4592,
      4593,
      4591,
      4590
    ],
    [
      4592,
      4384,
      4383,
      4382,
      4593
    ],
    [
      3894,
      4594,
      3901,
      2996,
      2995,
      3002,
      3893
    ],
    [
      3897,
      4595,
      4596,
      4594,
      3894,
      3895
    ],
    [
      3896,
      3899,
      4597,
      4598,
      4595,
      3897
    ],
    [
      4599,
      4600,
      4597,
      3899,
      3898
    ],
    [
      4599,
      3898,
      3038,
      3037,
      3974,
      4601,
      4602
    ],
    [
      3901,
      4594,
      4596,
      3908,
      3904,
      2993,
      2992
    ],
    [
      3915,
      3909,
      3908,
      4596,
      4595,
      4598
    ],
    [
      3911,
      3915,
      4598,
      4597,
      4600,
      3916
    ],
    [
      4599,
      4602,
      3919,
      3917,
      3916,
      4600
    ],
    [
      3919,
      4602,
      4601,
      3926,
      3925,
      3920
    ],
    [
      4540,
      4603,
      4604,
      4543,
      4542,
      4541
    ],
    [
      4543,
      4604,
      4605,
      4545,
      4544
    ],
    [
      4540,
      4539,
      2921,
      2920,
      4603
    ],
    [
      4603,
      2920,
      2919,
      2927,
      4605,
      4604
    ],
    [
      2973,
      2922,
      2921,
      4539,
      4538
    ],
    [
      3782,
      3941,
      4499,
      4498,
      3783
    ],
    [
      3777,
      3776,
      4606,
      4607,
      4608,
      4609
    ],
    [
      4610,
      4611,
      4608,
      4607,
      4612,
      4613
    ],
    [
      4614,
      4610,
      4613,
      4615,
      4616,
      4617
    ],
    [
      4618,
      4617,
      4616,
      4619,
      4620,
      4621
    ],
    [
      4622,
      4623,
      4621,
      4620,
      4624,
      4625
    ],
    [
      4622,
      4625,
      4626,
      4627,
      4628,
      4629
    ],
    [
      4630,
      4631,
      4632,
      4633,
      4628,
      4627
    ],
    [
      4632,
      4631,
      4634,
      4635,
      4636,
      4637
    ],
    [
      4638,
      4639,
      4636,
      4635,
      4640,
      4641,
      4642
    ],
    [
      4643,
      4642,
      4641,
      4644,
      4645,
      4646
    ],
    [
      4645,
      4647,
      4648,
      4649,
      4646
    ],
    [
      4650,
      4651,
      4652,
      4648,
      4647,
      4653
    ],
    [
      4650,
      4654,
      4655,
      4656,
      4657,
      4651
    ],
    [
      4656,
      4655,
      4658,
      4659,
      4660,
      4661
    ],
    [
      4662,
      4663,
      4664,
      4660,
      4659
    ],
    [
      4662,
      4665,
      4666,
      4667,
      4668,
      4663
    ],
    [
      4669,
      4667,
      4666,
      4670,
      4671,
      4672
    ],
    [
      4673,
      4674,
      4675,
      4676,
      4671,
      4670
    ],
    [
      4677,
      4678,
      4675,
      4674,
      4679,
      4680,
      4681
    ],
    [
      4682,
      4683,
      4684,
      4685,
      4686,
      4687
    ],
    [
      4688,
      4685,
      4684,
      4689,
      4690,
      4691
    ],
    [
      4692,
      4693,
      4690,
      4689,
      4694
    ],
    [
      4692,
      4695,
      4696,
      3945,
      3944,
      4693
    ],
    [
      4697,
      3950,
      3946,
      3945,
      4696
    ],
    [
      4698,
      4699,
      3952,
      3948,
      3950,
      4697
    ],
    [
      3951,
      3952,
      4699,
      4700,
      4701,
      3954
    ],
    [
      3953,
      3954,
      4701,
      4702,
      4703,
      3955
    ],
    [
      3957,
      3956,
      3955,
      4703,
      4704,
      4705
    ],
    [
      3957,
      4705,
      4706,
      4707,
      3960,
      3958
    ],
    [
      3959,
      3960,
      4707,
      4708,
      4709,
      3961
    ],
    [
      3963,
      3962,
      3961,
      4709,
      4710,
      4711
    ],
    [
      4712,
      4713,
      3966,
      3965,
      3964,
      3963,
      4711
    ],
    [
      3967,
      3966,
      4713,
      4714,
      4715,
      3968
    ],
    [
      3970,
      3969,
      3968,
      4715,
      4716
    ],
    [
      4717,
      3973,
      3972,
      3971,
      3970,
      4716,
      4718
    ],
    [
      4719,
      4014,
      3981,
      3980,
      3982,
      3984,
      4720,
      4721
    ],
    [
      4722,
      4720,
      3984,
      3983,
      3986,
      4723
    ],
    [
      3501,
      3500,
      4723,
      3986,
      3985,
      3987,
      3988
    ],
    [
      4724,
      4725,
      4726,
      4727,
      4225,
      4224,
      4728
    ],
    [
      4724,
      4729,
      4730,
      4731,
      4732,
      4733,
      4725
    ],
    [
      4734,
      4732,
      4731,
      4735,
      4736
    ],
    [
      4736,
      4735,
      4737,
      4738
    ],
    [
      4739,
      4740,
      4741,
      4738,
      4737,
      4742
    ],
    [
      4743,
      4744,
      4740,
      4739,
      4745,
      4746
    ],
    [
      4743,
      4747,
      4748,
      4749,
      4750,
      4744
    ],
    [
      4751,
      4749,
      4748,
      4752,
      4753
    ],
    [
      3060,
      4754,
      4755,
      4751,
      4753,
      3061
    ],
    [
      3990,
      4756,
      4757,
      4754,
      3060,
      3059
    ],
    [
      3990,
      3991,
      3993,
      4758,
      4756
    ],
    [
      3993,
      3992,
      3994,
      3996,
      4759,
      4760,
      4758
    ],
    [
      4761,
      4762,
      4763,
      4759,
      3996,
      3995,
      3998
    ],
    [
      4764,
      4761,
      3998,
      3997,
      4001,
      4765
    ],
    [
      4000,
      4766,
      4765,
      4001
    ],
    [
      3999,
      4003,
      4767,
      4768,
      4766,
      4000
    ],
    [
      4004,
      4006,
      4769,
      4770,
      4767,
      4003,
      4002
    ],
    [
      4005,
      4008,
      4771,
      4772,
      4769,
      4006
    ],
    [
      4007,
      4010,
      4773,
      4774,
      4771,
      4008
    ],
    [
      4775,
      4773,
      4010,
      4009,
      4012,
      4776
    ],
    [
      4012,
      4011,
      4013,
      4015,
      4777,
      4778,
      4776
    ],
    [
      4719,
      4779,
      4780,
      4777,
      4015,
      4014
    ],
    [
      4781,
      4779,
      4719,
      4721,
      4782
    ],
    [
      4722,
      4783,
      4782,
      4721,
      4720
    ],
    [
      3500,
      3499,
      4330,
      4783,
      4722,
      4723
    ],
    [
      464,
      4022,
      4024,
      4784,
      465
    ],
    [
      4024,
      4023,
      4026,
      4785,
      4786,
      4784
    ],
    [
      4026,
      4025,
      4027,
      4029,
      4787,
      4788,
      4785
    ],
    [
      4028,
      4031,
      4789,
      4790,
      4787,
      4029
    ],
    [
      4030,
      4033,
      4791,
      4792,
      4789,
      4031
    ],
    [
      4032,
      4035,
      4793,
      4794,
      4791,
      4033
    ],
    [
      4034,
      4038,
      4795,
      4796,
      4793,
      4035
    ],
    [
      4797,
      4795,
      4038,
      4037,
      4798
    ],
    [
      4042,
      4799,
      4800,
      4798,
      4037,
      4036,
      4039
    ],
    [
      4042,
      4041,
      4801,
      4802,
      4799
    ],
    [
      4803,
      4801,
      4041,
      4040,
      4804
    ],
    [
      3158,
      3157,
      4046,
      4805,
      4806,
      4804,
      4040
    ],
    [
      4045,
      4584,
      4807,
      4808,
      4805,
      4046
    ],
    [
      4581,
      4809,
      4810,
      4807,
      4584,
      4582
    ],
    [
      4055,
      4054,
      4053,
      4051,
      4052,
      4588,
      4587,
      4589,
      4056
    ],
    [
      3171,
      3170,
      4071,
      4070,
      4069,
      4072
    ],
    [
      4069,
      4068,
      4067,
      4048,
      4047,
      4072
    ],
    [
      4586,
      4588,
      4052,
      4050,
      4049,
      4048,
      4067,
      4066,
      4065,
      4585
    ],
    [
      3237,
      4811,
      4812,
      4084,
      3238
    ],
    [
      4813,
      4811,
      3237,
      3236,
      3241,
      4096
    ],
    [
      3402,
      3403,
      3404,
      3405,
      4086,
      4085
    ],
    [
      2460,
      2467,
      3414,
      4087,
      4086,
      3405,
      2458,
      2457
    ],
    [
      3232,
      3234,
      4079,
      4083,
      4088,
      4094
    ],
    [
      3232,
      4094,
      4093,
      4814,
      4815,
      4816,
      3233
    ],
    [
      4097,
      4100,
      4101,
      4105,
      4098
    ],
    [
      4817,
      4816,
      4815,
      4818,
      4819,
      4820
    ],
    [
      4113,
      4821,
      4108,
      4107,
      4111,
      4112
    ],
    [
      4113,
      3254,
      3253,
      4822,
      4821
    ],
    [
      4822,
      3253,
      3252,
      3258,
      4115,
      4116,
      4120,
      4122,
      4823,
      4824
    ],
    [
      3257,
      3189,
      3188,
      4117,
      4114
    ],
    [
      4118,
      4117,
      3188,
      3187,
      3191,
      3289
    ],
    [
      4126,
      4125,
      4825,
      4823,
      4122,
      4121
    ],
    [
      4126,
      4121,
      4124,
      4128,
      4127
    ],
    [
      3658,
      3657,
      4436,
      4826,
      4131,
      4130,
      4129
    ],
    [
      4132,
      4131,
      4826,
      4827,
      4133
    ],
    [
      4135,
      4134,
      4133,
      4827,
      4828,
      4829,
      4137
    ],
    [
      4136,
      4137,
      4829,
      4830,
      4831,
      4138
    ],
    [
      4832,
      4142,
      4141,
      4140,
      4139,
      4138,
      4831
    ],
    [
      4833,
      4148,
      4147,
      4146,
      4145,
      4144,
      4834
    ],
    [
      4833,
      4835,
      4152,
      4150,
      4149,
      4148
    ],
    [
      4151,
      4152,
      4835,
      4836,
      4153
    ],
    [
      3678,
      2737,
      1945,
      1944,
      4153,
      4836,
      4837,
      4455
    ],
    [
      4838,
      4839,
      4840,
      4841,
      4842,
      4843,
      4844,
      4845,
      4846,
      4847,
      4848,
      4849
    ],
    [
      4843,
      4842,
      4850,
      4154,
      3347,
      3346
    ],
    [
      4155,
      4154,
      4850
    ],
    [
      4155,
      4850,
      4842,
      4841,
      3354,
      3353,
      3352
    ],
    [
      3343,
      3342,
      4157,
      4851,
      4844,
      4843,
      3346
    ],
    [
      4163,
      4162,
      4852,
      4851,
      4157,
      4156
    ],
    [
      4165,
      4456,
      4458,
      4853,
      4854,
      4166
    ],
    [
      4459,
      4461,
      4855,
      4856,
      4853,
      4458,
      4457
    ],
    [
      4463,
      4857,
      4858,
      4855,
      4461,
      4460
    ],
    [
      4173,
      4859,
      4856,
      4855,
      4858,
      4860,
      4174
    ],
    [
      4158,
      4175,
      4861,
      4852,
      4162,
      4160,
      4159
    ],
    [
      4859,
      4854,
      4853,
      4856
    ],
    [
      4173,
      4172,
      4171,
      4170,
      4169,
      4167,
      4166,
      4854,
      4859
    ],
    [
      3370,
      3369,
      4180,
      3385,
      3382,
      3378,
      3377
    ],
    [
      2503,
      3533,
      4185,
      2497,
      2496
    ],
    [
      2498,
      2497,
      4185,
      4184,
      4187
    ],
    [
      964,
      963,
      4190,
      4191,
      4193,
      1603,
      1602
    ],
    [
      1594,
      1603,
      4193,
      4192,
      4194,
      1595
    ],
    [
      4194,
      4195,
      4196,
      4198,
      1596,
      1595
    ],
    [
      1597,
      1596,
      4198,
      4197,
      4200,
      4862,
      4863
    ],
    [
      4864,
      4862,
      4200,
      4199,
      4201,
      4865
    ],
    [
      4201,
      4202,
      4204,
      4866,
      4867,
      4865
    ],
    [
      4866,
      4204,
      4203,
      4206,
      4868
    ],
    [
      4205,
      4208,
      4869,
      4870,
      4868,
      4206
    ],
    [
      4869,
      4208,
      4207,
      4210,
      4871,
      4872
    ],
    [
      4873,
      4871,
      4210,
      4209,
      4211,
      4213,
      4874,
      4875
    ],
    [
      4876,
      4877,
      4874,
      4213,
      4212,
      4215
    ],
    [
      4214,
      4217,
      4878,
      4879,
      4876,
      4215
    ],
    [
      4216,
      4219,
      4880,
      4881,
      4878,
      4217
    ],
    [
      4218,
      4221,
      4882,
      4883,
      4880,
      4219
    ],
    [
      4222,
      4884,
      4885,
      4882,
      4221,
      4220
    ],
    [
      3107,
      3110,
      4884,
      4222,
      3989
    ],
    [
      4886,
      4229,
      4226,
      4225,
      4727,
      4887
    ],
    [
      4886,
      4888,
      4889,
      4235,
      4230,
      4229
    ],
    [
      4232,
      4235,
      4889,
      4890,
      4891,
      4239
    ],
    [
      4236,
      4239,
      4891,
      4892,
      4893,
      4240
    ],
    [
      4894,
      4248,
      4241,
      4240,
      4893,
      4895
    ],
    [
      4244,
      4248,
      4894,
      4896,
      4249
    ],
    [
      4250,
      4249,
      4896,
      4897,
      4898,
      4253
    ],
    [
      4899,
      4256,
      4254,
      4253,
      4898
    ],
    [
      4899,
      4900,
      4901,
      4262,
      4257,
      4256
    ],
    [
      4264,
      4263,
      4262,
      4901,
      4902,
      4903
    ],
    [
      4264,
      4903,
      4904,
      4905,
      4268,
      4265
    ],
    [
      4268,
      4905,
      4906,
      4907,
      4908,
      4271,
      4269
    ],
    [
      4271,
      4908,
      4909,
      4275,
      4272
    ],
    [
      4909,
      4910,
      4911,
      4912,
      4278,
      4276,
      4275
    ],
    [
      4912,
      4913,
      4283,
      4279,
      4278
    ],
    [
      4284,
      4282,
      4283,
      4913,
      4914
    ],
    [
      4284,
      4914,
      4915,
      4916,
      4286,
      4285
    ],
    [
      4287,
      4286,
      4916,
      4917,
      4918,
      4919,
      4289
    ],
    [
      4288,
      4289,
      4919,
      4920,
      4921,
      4291,
      4290
    ],
    [
      4292,
      4291,
      4921,
      4295,
      4293
    ],
    [
      4298,
      4296,
      4295,
      4921,
      4920,
      4301,
      4300,
      4299
    ],
    [
      3446,
      3445,
      4302,
      4922,
      4303
    ],
    [
      4923,
      4924,
      4304,
      4303,
      4922,
      4925
    ],
    [
      4306,
      4305,
      4304,
      4924,
      4926,
      4927
    ],
    [
      4306,
      4927,
      4928,
      4308,
      4307
    ],
    [
      4929,
      4310,
      4309,
      4308,
      4928,
      4930,
      4931
    ],
    [
      4929,
      4932,
      4312,
      4311,
      4310
    ],
    [
      4932,
      4933,
      4934,
      4314,
      4313,
      4312
    ],
    [
      4935,
      4317,
      4316,
      4315,
      4314,
      4934,
      4936
    ],
    [
      4189,
      4188,
      4937,
      4274,
      4273,
      4277,
      4281
    ],
    [
      4189,
      4281,
      4280,
      3516,
      3515
    ],
    [
      4938,
      4728,
      4224,
      4223,
      4939,
      4940
    ],
    [
      4223,
      4227,
      4228,
      4941,
      4942,
      4939
    ],
    [
      4228,
      4231,
      4234,
      4943,
      4944,
      4941
    ],
    [
      4233,
      4238,
      4945,
      4946,
      4943,
      4234
    ],
    [
      4243,
      4947,
      4948,
      4945,
      4238,
      4237
    ],
    [
      4242,
      4247,
      4949,
      4950,
      4947,
      4243
    ],
    [
      4247,
      4246,
      4951,
      4952,
      4953,
      4949
    ],
    [
      4245,
      4252,
      4954,
      4951,
      4246
    ],
    [
      4252,
      4251,
      4255,
      4260,
      4955,
      4956,
      4954
    ],
    [
      4260,
      4259,
      4957,
      4958,
      4959,
      4955
    ],
    [
      4261,
      4267,
      4960,
      4957,
      4259,
      4258
    ],
    [
      4266,
      4270,
      4274,
      4937,
      4961,
      4960,
      4267
    ],
    [
      4929,
      4931,
      4962,
      4963,
      4964,
      4933,
      4932
    ],
    [
      4964,
      4965,
      4966,
      4936,
      4934,
      4933
    ],
    [
      4935,
      4936,
      4966,
      4967,
      4968
    ],
    [
      4935,
      4968,
      4969,
      4970,
      4318,
      4317
    ],
    [
      4318,
      4970,
      4971,
      4972,
      4321,
      4320,
      4319
    ],
    [
      4322,
      4321,
      4972,
      4973
    ],
    [
      4974,
      4325,
      4324,
      4323,
      4322,
      4973,
      4975
    ],
    [
      4976,
      4327,
      4326,
      4325,
      4974,
      4977
    ],
    [
      4976,
      4978,
      4329,
      4328,
      4327
    ],
    [
      4,
      465,
      4784,
      4786,
      4350,
      5
    ],
    [
      4352,
      4351,
      4350,
      4786,
      4785,
      4788
    ],
    [
      4354,
      4353,
      4352,
      4788,
      4787,
      4790
    ],
    [
      4354,
      4790,
      4789,
      4792,
      4356,
      4355
    ],
    [
      4358,
      4357,
      4356,
      4792,
      4791,
      4794
    ],
    [
      4358,
      4794,
      4793,
      4796,
      4360,
      4359
    ],
    [
      4362,
      4361,
      4360,
      4796,
      4795,
      4797
    ],
    [
      4362,
      4797,
      4798,
      4800,
      4364,
      4363
    ],
    [
      4365,
      4364,
      4800,
      4799,
      4802,
      4367,
      4366
    ],
    [
      4803,
      4369,
      4368,
      4367,
      4802,
      4801
    ],
    [
      4803,
      4804,
      4806,
      4371,
      4370,
      4369
    ],
    [
      4372,
      4371,
      4806,
      4805,
      4808,
      4373
    ],
    [
      4374,
      4373,
      4808,
      4807,
      4810,
      4375
    ],
    [
      4376,
      4375,
      4810,
      4809,
      4377
    ],
    [
      4581,
      4580,
      4579,
      4380,
      4379,
      4378,
      4377,
      4809
    ],
    [
      4421,
      4428,
      4427,
      4426,
      4346,
      4345,
      4419
    ],
    [
      4421,
      4420,
      4423,
      4430,
      4429,
      4428
    ],
    [
      4431,
      4430,
      4423,
      4422,
      4425,
      4432
    ],
    [
      4424,
      4434,
      4433,
      4432,
      4425
    ],
    [
      4424,
      4396,
      3623,
      3622,
      3627,
      3745,
      3744,
      4434
    ],
    [
      4437,
      4439,
      4979,
      4980,
      4981,
      4982
    ],
    [
      4438,
      4441,
      4983,
      4984,
      4979,
      4439
    ],
    [
      4983,
      4441,
      4440,
      4442,
      4443,
      4445,
      4985
    ],
    [
      4986,
      4447,
      4446,
      4448,
      4450,
      4987
    ],
    [
      4451,
      4452,
      4454,
      4988,
      4987,
      4450,
      4449
    ],
    [
      4989,
      4988,
      4454,
      4453,
      4455,
      4837
    ],
    [
      4465,
      4990,
      4991,
      4857,
      4463,
      4462
    ],
    [
      4465,
      4464,
      4467,
      4992,
      4993,
      4990
    ],
    [
      4992,
      4467,
      4466,
      4469,
      4994,
      4995
    ],
    [
      4996,
      4997,
      4994,
      4469,
      4468,
      4472
    ],
    [
      4996,
      4472,
      4471,
      4998
    ],
    [
      4999,
      4998,
      4471,
      4470,
      4474,
      5000
    ],
    [
      4476,
      5001,
      5000,
      4474,
      4473
    ],
    [
      5002,
      5003,
      5004,
      5001,
      4476,
      4475,
      4478
    ],
    [
      4477,
      4480,
      5005,
      5002,
      4478
    ],
    [
      4481,
      5006,
      5007,
      5005,
      4480,
      4479
    ],
    [
      4481,
      4482,
      4483,
      4485,
      5008,
      5006
    ],
    [
      5009,
      5010,
      5008,
      4485,
      4484,
      4488,
      5011
    ],
    [
      5009,
      5011,
      5012,
      5013
    ],
    [
      5011,
      4488,
      4487,
      4491,
      5014,
      5012
    ],
    [
      4490,
      4493,
      4531,
      4533,
      5015,
      5014,
      4491
    ],
    [
      2913,
      2095,
      2094,
      2907,
      3625,
      3624,
      3620,
      3616,
      3615
    ],
    [
      5016,
      4504,
      4503,
      4515,
      4514,
      4517,
      5017
    ],
    [
      4502,
      4509,
      4513,
      4512,
      4515,
      4503
    ],
    [
      4508,
      3907,
      3906,
      4513,
      4509
    ],
    [
      4517,
      4516,
      4518,
      4519,
      4522,
      5018,
      5019,
      5020,
      5021,
      5022,
      5017
    ],
    [
      5023,
      5024,
      5025,
      5026,
      5027,
      5028,
      5029,
      5030
    ],
    [
      5029,
      5028,
      5031,
      5018,
      4522,
      4521
    ],
    [
      4996,
      4998,
      4999,
      5032,
      5033,
      5034,
      5035,
      4997
    ],
    [
      4999,
      5000,
      5001,
      5004,
      5036,
      5037,
      5032
    ],
    [
      5004,
      5003,
      5038,
      5036
    ],
    [
      5002,
      5005,
      5007,
      5039,
      5040,
      5038,
      5003
    ],
    [
      5041,
      5039,
      5007,
      5006,
      5008,
      5010
    ],
    [
      5041,
      5010,
      5009,
      5013,
      5042,
      5043
    ],
    [
      5042,
      5013,
      5012,
      5014,
      5015,
      5044
    ],
    [
      4532,
      4534,
      4536,
      5044,
      5015,
      4533
    ],
    [
      5045,
      5043,
      5042,
      5044,
      4536,
      4535,
      4566,
      5046
    ],
    [
      2927,
      2926,
      5047,
      4547,
      4546,
      4545,
      4605
    ],
    [
      5048,
      4549,
      4548,
      4547,
      5047,
      5049
    ],
    [
      5048,
      5050,
      5051,
      4551,
      4550,
      4549
    ],
    [
      4551,
      5051,
      5052,
      5053,
      4554,
      4553,
      4552
    ],
    [
      4555,
      4554,
      5053,
      5054,
      5055,
      4556
    ],
    [
      5056,
      4557,
      4556,
      5055
    ],
    [
      4560,
      4559,
      4558,
      4557,
      5056,
      5057,
      5058
    ],
    [
      5059,
      4561,
      4560,
      5058,
      5060,
      5061
    ],
    [
      5059,
      5062,
      3842,
      3846,
      4561
    ],
    [
      5063,
      3843,
      3842,
      5062,
      5064,
      5065
    ],
    [
      5066,
      5067,
      3844,
      3843,
      5063
    ],
    [
      5066,
      5068,
      5069,
      5070,
      5067
    ],
    [
      5071,
      5070,
      5069,
      5072,
      5073,
      5074
    ],
    [
      5075,
      5076,
      5077,
      5074,
      5073,
      5078
    ],
    [
      5075,
      5079,
      5080,
      5081,
      5076
    ],
    [
      5082,
      5083,
      5084,
      5085,
      5081,
      5080
    ],
    [
      5086,
      5084,
      5083,
      5087,
      5088,
      5089
    ],
    [
      5090,
      5091,
      5092,
      5089,
      5088,
      5093
    ],
    [
      5094,
      5095,
      5096,
      5091,
      5090
    ],
    [
      5094,
      5097,
      5098,
      5099,
      5100,
      5095
    ],
    [
      5101,
      5102,
      5099,
      5098,
      5103,
      5104
    ],
    [
      5101,
      5104,
      5105,
      5106,
      5107
    ],
    [
      5108,
      5107,
      5106,
      5109
    ],
    [
      5108,
      5109,
      5110,
      5111,
      5112,
      5113
    ],
    [
      5114,
      5115,
      5112,
      5111,
      5116
    ],
    [
      5114,
      5117,
      5118,
      5119,
      5120,
      5115
    ],
    [
      5121,
      5122,
      5123,
      5119,
      5118,
      5124
    ],
    [
      5125,
      5126,
      5127,
      5128,
      5129,
      5122,
      5121
    ],
    [
      5130,
      5131,
      5129,
      5128,
      5132,
      5133
    ],
    [
      5134,
      5135,
      5136,
      5133,
      5132
    ],
    [
      5137,
      5138,
      5139,
      5140,
      5141,
      5142,
      5143,
      5144,
      5136,
      5135,
      5145
    ],
    [
      4573,
      4583,
      4044,
      4043,
      4064,
      4572,
      4571
    ],
    [
      3886,
      4384,
      4592,
      3883,
      3882,
      3885
    ],
    [
      4579,
      4578,
      4591,
      4593,
      4382,
      4381,
      4380
    ],
    [
      4525,
      4541,
      4542,
      4528,
      4526
    ],
    [
      4494,
      4497,
      4500,
      4501,
      4537,
      4527,
      4495
    ],
    [
      2973,
      4538,
      4537,
      4501,
      3940,
      2982,
      2974
    ],
    [
      3778,
      2972,
      2971,
      3780,
      4511,
      4510
    ],
    [
      3775,
      3774,
      3778,
      4510,
      4507,
      4506
    ],
    [
      3775,
      4506,
      4505,
      5146,
      4606,
      3776
    ],
    [
      5147,
      5148,
      4612,
      4607,
      4606,
      5146
    ],
    [
      5149,
      4615,
      4613,
      4612,
      5148,
      5150
    ],
    [
      4619,
      4616,
      4615,
      5149,
      5151,
      5152
    ],
    [
      4619,
      5152,
      5153,
      5154,
      4624,
      4620
    ],
    [
      5154,
      5155,
      5156,
      4626,
      4625,
      4624
    ],
    [
      4630,
      4627,
      4626,
      5156,
      5157,
      5158
    ],
    [
      4630,
      5158,
      5159,
      5160,
      4634,
      4631
    ],
    [
      4635,
      4634,
      5160,
      5161,
      5162,
      4640
    ],
    [
      4644,
      4641,
      4640,
      5162,
      5163
    ],
    [
      4653,
      4647,
      4645,
      4644,
      5163,
      5164,
      5165
    ],
    [
      4650,
      4653,
      5165,
      5166,
      5167,
      4654
    ],
    [
      4658,
      4655,
      4654,
      5167,
      5168,
      5169
    ],
    [
      4662,
      4659,
      4658,
      5169,
      5170,
      5171,
      4665
    ],
    [
      4673,
      4670,
      4666,
      4665,
      5171,
      5172
    ],
    [
      5173,
      4679,
      4674,
      4673,
      5172
    ],
    [
      4682,
      5174,
      5175,
      5176,
      5177,
      5178,
      5179,
      4683
    ],
    [
      4694,
      4689,
      4684,
      4683,
      5179,
      5180,
      5181
    ],
    [
      4692,
      4694,
      5181,
      5182,
      5183,
      4695
    ],
    [
      4698,
      4697,
      4696,
      4695,
      5183,
      5184,
      5185
    ],
    [
      4698,
      5185,
      5186,
      5187,
      4700,
      4699
    ],
    [
      4701,
      4700,
      5187,
      5188,
      4702
    ],
    [
      4702,
      5188,
      5189,
      5190,
      4704,
      4703
    ],
    [
      4706,
      4705,
      4704,
      5190,
      5191,
      5192
    ],
    [
      5193,
      5194,
      4708,
      4707,
      4706,
      5192
    ],
    [
      5195,
      4710,
      4709,
      4708,
      5194,
      5196
    ],
    [
      5197,
      5198,
      4712,
      4711,
      4710,
      5195
    ],
    [
      5198,
      5199,
      5200,
      4714,
      4713,
      4712
    ],
    [
      4718,
      4716,
      4715,
      4714,
      5200,
      5201
    ],
    [
      4717,
      4718,
      5201,
      3931,
      3935
    ],
    [
      4717,
      3935,
      3927,
      3926,
      4601,
      3974,
      3973
    ],
    [
      5202,
      4687,
      4686,
      5203,
      5204
    ],
    [
      4688,
      5205,
      5203,
      4686,
      4685
    ],
    [
      4743,
      4746,
      5206,
      5205,
      4688,
      4691,
      4747
    ],
    [
      4691,
      4690,
      4693,
      3944,
      3943,
      4752,
      4748,
      4747
    ],
    [
      4680,
      5176,
      5175,
      5207,
      5208,
      5209,
      5210,
      4681
    ],
    [
      5211,
      5207,
      5175,
      5174,
      5212
    ],
    [
      4682,
      4687,
      5202,
      5213,
      5214,
      5212,
      5174
    ],
    [
      5202,
      5204,
      5215,
      5216,
      5217,
      5213
    ],
    [
      5215,
      5204,
      5203,
      5205,
      5206,
      5218
    ],
    [
      4745,
      5219,
      5218,
      5206,
      4746
    ],
    [
      4745,
      4739,
      4742,
      5220,
      5219
    ],
    [
      5221,
      5220,
      4742,
      4737,
      4735,
      4731,
      4730,
      5222
    ],
    [
      3773,
      5223,
      5224,
      2966,
      2965
    ],
    [
      3773,
      3777,
      4609,
      5225,
      5226,
      5223
    ],
    [
      5227,
      5225,
      4609,
      4608,
      4611,
      5228
    ],
    [
      4614,
      5229,
      5230,
      5228,
      4611,
      4610
    ],
    [
      4618,
      5231,
      5232,
      5229,
      4614,
      4617
    ],
    [
      4618,
      4621,
      4623,
      5233,
      5234,
      5231
    ],
    [
      4622,
      4629,
      5235,
      5236,
      5233,
      4623
    ],
    [
      4628,
      4633,
      5237,
      5238,
      5235,
      4629
    ],
    [
      5239,
      5240,
      5237,
      4633,
      4632,
      4637
    ],
    [
      5239,
      4637,
      4636,
      4639,
      5241,
      5242
    ],
    [
      4638,
      5243,
      5244,
      5241,
      4639
    ],
    [
      4643,
      5245,
      5246,
      5243,
      4638,
      4642
    ],
    [
      4643,
      4646,
      4649,
      5247,
      5248,
      5245
    ],
    [
      5249,
      5247,
      4649,
      4648,
      4652,
      5250
    ],
    [
      4651,
      4657,
      5251,
      5252,
      5250,
      4652
    ],
    [
      4656,
      4661,
      5253,
      5254,
      5251,
      4657
    ],
    [
      5255,
      5256,
      5253,
      4661,
      4660,
      4664
    ],
    [
      5257,
      5255,
      4664,
      4663,
      4668,
      5258
    ],
    [
      4669,
      5259,
      5258,
      4668,
      4667
    ],
    [
      4669,
      4672,
      5260,
      5261,
      5259
    ],
    [
      4672,
      4671,
      4676,
      5262,
      5260
    ],
    [
      4678,
      5263,
      5264,
      5262,
      4676,
      4675
    ],
    [
      4677,
      5265,
      5266,
      5267,
      5263,
      4678
    ],
    [
      4677,
      4681,
      5210,
      5268,
      5269,
      5265
    ],
    [
      5210,
      5209,
      5270,
      5271,
      5268
    ],
    [
      5209,
      5208,
      5272,
      5273,
      5270
    ],
    [
      5211,
      5274,
      5275,
      5276,
      5272,
      5208,
      5207
    ],
    [
      5211,
      5212,
      5214,
      5277,
      5278,
      5274
    ],
    [
      5213,
      5217,
      5279,
      5280,
      5277,
      5214
    ],
    [
      5281,
      5282,
      5283,
      5279,
      5217,
      5216
    ],
    [
      5215,
      5218,
      5219,
      5220,
      5221,
      5284,
      5281,
      5216
    ],
    [
      5285,
      5284,
      5221,
      5222,
      5286
    ],
    [
      4729,
      5286,
      5222,
      4730
    ],
    [
      4938,
      5287,
      5288,
      5285,
      5286,
      4729,
      4724,
      4728
    ],
    [
      4938,
      4940,
      5289,
      5290,
      5287
    ],
    [
      5289,
      4940,
      4939,
      4942,
      5291,
      5292
    ],
    [
      5293,
      5294,
      5291,
      4942,
      4941,
      4944
    ],
    [
      5293,
      4944,
      4943,
      4946,
      5295
    ],
    [
      5296,
      5297,
      5295,
      4946,
      4945,
      4948
    ],
    [
      5296,
      4948,
      4947,
      4950,
      5298
    ],
    [
      5299,
      5300,
      5298,
      4950,
      4949,
      4953
    ],
    [
      5299,
      4953,
      4952,
      5301,
      5302
    ],
    [
      4952,
      4951,
      4954,
      4956,
      5303,
      5301
    ],
    [
      4956,
      4955,
      4959,
      5304,
      5303
    ],
    [
      3392,
      5304,
      4959,
      4958,
      3393
    ],
    [
      4960,
      4961,
      3394,
      3393,
      4958,
      4957
    ],
    [
      4961,
      4937,
      4188,
      3395,
      3394
    ],
    [
      4726,
      5305,
      5306,
      4887,
      4727
    ],
    [
      4725,
      4733,
      5307,
      5308,
      5305,
      4726
    ],
    [
      5309,
      5307,
      4733,
      4732,
      4734
    ],
    [
      5310,
      5309,
      4734,
      4736,
      4738,
      4741
    ],
    [
      5310,
      4741,
      4740,
      4744,
      4750,
      5311,
      5312
    ],
    [
      5313,
      5311,
      4750,
      4749,
      4751,
      4755
    ],
    [
      5314,
      4757,
      4756,
      4758,
      4760,
      5315
    ],
    [
      4759,
      4763,
      5316,
      5317,
      5315,
      4760
    ],
    [
      5318,
      5316,
      4763,
      4762
    ],
    [
      4764,
      5319,
      5320,
      5318,
      4762,
      4761
    ],
    [
      4764,
      4765,
      4766,
      4768,
      5321,
      5322,
      5323,
      5319
    ],
    [
      5321,
      4768,
      4767,
      4770,
      5324,
      5325
    ],
    [
      5326,
      5324,
      4770,
      4769,
      4772
    ],
    [
      5326,
      4772,
      4771,
      4774,
      5327
    ],
    [
      4775,
      5328,
      5329,
      5330,
      5327,
      4774,
      4773
    ],
    [
      4775,
      4776,
      4778,
      5331,
      5332,
      5328
    ],
    [
      4777,
      4780,
      5333,
      5331,
      4778
    ],
    [
      4781,
      5334,
      5333,
      4780,
      4779
    ],
    [
      4781,
      4782,
      4783,
      4330,
      4329,
      4978,
      5335,
      5334
    ],
    [
      3057,
      3061,
      4753,
      4752,
      3943,
      3942,
      3058
    ],
    [
      3233,
      4816,
      4817,
      5336,
      3198,
      3197
    ],
    [
      4824,
      4823,
      4825,
      3199,
      3198,
      5336,
      5337
    ],
    [
      4822,
      4824,
      5337,
      5338,
      4109,
      4108,
      4821
    ],
    [
      3192,
      3199,
      4825,
      4125
    ],
    [
      4437,
      4982,
      4828,
      4827,
      4826,
      4436,
      4435
    ],
    [
      4829,
      4828,
      4982,
      4981,
      4830
    ],
    [
      4832,
      4831,
      4830,
      4981,
      4980,
      5339
    ],
    [
      4832,
      5339,
      5340,
      4143,
      4142
    ],
    [
      5341,
      4834,
      4144,
      4143,
      5340,
      5342
    ],
    [
      5341,
      4989,
      4837,
      4836,
      4835,
      4833,
      4834
    ],
    [
      5343,
      5344,
      4181,
      4177,
      3361,
      3357,
      3356,
      3355,
      3354,
      4841,
      4840
    ],
    [
      4993,
      5345,
      5346,
      5347,
      4991,
      4990
    ],
    [
      4993,
      4992,
      4995,
      5348,
      5345
    ],
    [
      5348,
      4995,
      4994,
      4997,
      5035,
      5349,
      5350
    ],
    [
      5348,
      5350,
      5351,
      5346,
      5345
    ],
    [
      5347,
      5346,
      5351,
      5352,
      5353
    ],
    [
      5354,
      5353,
      5352,
      5355,
      5356
    ],
    [
      4174,
      4860,
      5354,
      5356,
      4861,
      4175
    ],
    [
      1597,
      4863,
      5357,
      5358,
      1598
    ],
    [
      4864,
      5359,
      5360,
      5357,
      4863,
      4862
    ],
    [
      4864,
      4865,
      4867,
      5361,
      5362,
      5359
    ],
    [
      4866,
      4868,
      4870,
      5363,
      5361,
      4867
    ],
    [
      4869,
      4872,
      5364,
      5365,
      5363,
      4870
    ],
    [
      4873,
      5366,
      5364,
      4872,
      4871
    ],
    [
      4873,
      4875,
      5367,
      5366
    ],
    [
      4875,
      4874,
      4877,
      5368,
      5369,
      5367
    ],
    [
      5368,
      4877,
      4876,
      4879,
      5370,
      5371
    ],
    [
      5372,
      5370,
      4879,
      4878,
      4881
    ],
    [
      5372,
      4881,
      4880,
      4883,
      5373,
      5374
    ],
    [
      4882,
      4885,
      5375,
      5373,
      4883
    ],
    [
      3110,
      3109,
      3977,
      5376,
      5377,
      5375,
      4885,
      4884
    ],
    [
      4899,
      4898,
      4897,
      5378,
      5379,
      4900
    ],
    [
      4901,
      4900,
      5379,
      5380,
      5381,
      4902
    ],
    [
      4903,
      4902,
      5381,
      5382,
      5383,
      4904
    ],
    [
      4905,
      4904,
      5383,
      5384,
      5385,
      4906
    ],
    [
      4906,
      5385,
      5386,
      5387,
      4907
    ],
    [
      5388,
      5389,
      4910,
      4909,
      4908,
      4907,
      5387
    ],
    [
      5389,
      5390,
      4911,
      4910
    ],
    [
      4912,
      4911,
      5390,
      5391,
      4915,
      4914,
      4913
    ],
    [
      4925,
      4922,
      4302,
      4301,
      4920,
      4919,
      4918
    ],
    [
      4886,
      4887,
      5306,
      5392,
      5393,
      4888
    ],
    [
      4889,
      4888,
      5393,
      5394,
      5395,
      4890
    ],
    [
      5396,
      4892,
      4891,
      4890,
      5395
    ],
    [
      5396,
      5397,
      5398,
      5399,
      4895,
      4893,
      4892
    ],
    [
      5400,
      5378,
      4897,
      4896,
      4894,
      4895,
      5399,
      5401
    ],
    [
      4923,
      4925,
      4918,
      4917,
      5402,
      5403
    ],
    [
      4923,
      5403,
      5404,
      4926,
      4924
    ],
    [
      4926,
      5404,
      5405,
      4930,
      4928,
      4927
    ],
    [
      5400,
      5406,
      5407,
      5380,
      5379,
      5378
    ],
    [
      5408,
      5382,
      5381,
      5380,
      5407,
      5409
    ],
    [
      5408,
      5410,
      5411,
      5412,
      5384,
      5383,
      5382
    ],
    [
      5413,
      5414,
      5386,
      5385,
      5384,
      5412
    ],
    [
      5415,
      5416,
      5388,
      5387,
      5386,
      5414
    ],
    [
      5388,
      5416,
      5417,
      5391,
      5390,
      5389
    ],
    [
      5418,
      5402,
      4917,
      4916,
      4915,
      5391,
      5417,
      5419
    ],
    [
      5418,
      5420,
      5421,
      5405,
      5404,
      5403,
      5402
    ],
    [
      4931,
      4930,
      5405,
      5421,
      5422,
      4962
    ],
    [
      4962,
      5422,
      5423,
      5424,
      4963
    ],
    [
      5425,
      5426,
      4965,
      4964,
      4963,
      5424
    ],
    [
      5426,
      5427,
      4967,
      4966,
      4965
    ],
    [
      4968,
      4967,
      5427,
      5428,
      5429,
      4969
    ],
    [
      5430,
      5431,
      4971,
      4970,
      4969,
      5429
    ],
    [
      5432,
      5433,
      4975,
      4973,
      4972,
      4971,
      5431
    ],
    [
      4974,
      4975,
      5433,
      5434,
      5435,
      4977
    ],
    [
      4976,
      4977,
      5435,
      5436,
      5335,
      4978
    ],
    [
      4986,
      5437,
      4985,
      4445,
      4444,
      4447
    ],
    [
      5437,
      5438,
      4984,
      4983,
      4985
    ],
    [
      5438,
      5342,
      5340,
      5339,
      4980,
      4979,
      4984
    ],
    [
      5341,
      5342,
      5438,
      5437,
      4986,
      4987,
      4988,
      4989
    ],
    [
      5439,
      5440,
      5031,
      5028,
      5027,
      5441
    ],
    [
      5440,
      5442,
      5443,
      5019,
      5018,
      5031
    ],
    [
      5444,
      5445,
      5030,
      5029,
      4521,
      4520,
      4523,
      4524,
      5446
    ],
    [
      5041,
      5043,
      5045,
      5447,
      5040,
      5039
    ],
    [
      5448,
      5449,
      5450,
      5034,
      5033,
      5451
    ],
    [
      5452,
      5453,
      5451,
      5033,
      5032,
      5037
    ],
    [
      5452,
      5037,
      5036,
      5038,
      5040,
      5447,
      5454
    ],
    [
      2967,
      5049,
      5047,
      2926,
      2925,
      2968
    ],
    [
      2967,
      2966,
      5224,
      5050,
      5048,
      5049
    ],
    [
      5223,
      5226,
      5052,
      5051,
      5050,
      5224
    ],
    [
      5227,
      5054,
      5053,
      5052,
      5226,
      5225
    ],
    [
      5227,
      5228,
      5230,
      5057,
      5056,
      5055,
      5054
    ],
    [
      5229,
      5232,
      5060,
      5058,
      5057,
      5230
    ],
    [
      5231,
      5234,
      5061,
      5060,
      5232
    ],
    [
      5059,
      5061,
      5234,
      5233,
      5236,
      5064,
      5062
    ],
    [
      5064,
      5236,
      5235,
      5238,
      5065
    ],
    [
      5066,
      5063,
      5065,
      5238,
      5237,
      5240,
      5068
    ],
    [
      5239,
      5242,
      5072,
      5069,
      5068,
      5240
    ],
    [
      5078,
      5073,
      5072,
      5242,
      5241,
      5244
    ],
    [
      5075,
      5078,
      5244,
      5243,
      5246,
      5079
    ],
    [
      5082,
      5080,
      5079,
      5246,
      5245,
      5248
    ],
    [
      5082,
      5248,
      5247,
      5249,
      5087,
      5083
    ],
    [
      5249,
      5250,
      5252,
      5093,
      5088,
      5087
    ],
    [
      5094,
      5090,
      5093,
      5252,
      5251,
      5254,
      5097
    ],
    [
      5097,
      5254,
      5253,
      5256,
      5103,
      5098
    ],
    [
      5257,
      5105,
      5104,
      5103,
      5256,
      5255
    ],
    [
      5257,
      5258,
      5259,
      5261,
      5110,
      5109,
      5106,
      5105
    ],
    [
      5455,
      5456,
      5457,
      5458,
      5459,
      5460
    ],
    [
      5071,
      5074,
      5077,
      5457,
      5456
    ],
    [
      5455,
      3845,
      3844,
      5067,
      5070,
      5071,
      5456
    ],
    [
      5461,
      5459,
      5458,
      5085,
      5084,
      5086,
      5462
    ],
    [
      5077,
      5076,
      5081,
      5085,
      5458,
      5457
    ],
    [
      5086,
      5089,
      5092,
      5463,
      5462
    ],
    [
      5464,
      5463,
      5092,
      5091,
      5096
    ],
    [
      5100,
      5465,
      5466,
      5464,
      5096,
      5095
    ],
    [
      5343,
      4840,
      4839,
      5465,
      5100,
      5099,
      5102,
      5467
    ],
    [
      5468,
      5467,
      5102,
      5101,
      5107,
      5108,
      5113
    ],
    [
      5110,
      5261,
      5260,
      5262,
      5264,
      5116,
      5111
    ],
    [
      5114,
      5116,
      5264,
      5263,
      5267,
      5117
    ],
    [
      5266,
      5124,
      5118,
      5117,
      5267
    ],
    [
      5125,
      5121,
      5124,
      5266,
      5265,
      5269
    ],
    [
      5125,
      5269,
      5268,
      5271,
      5126
    ],
    [
      5271,
      5270,
      5273,
      5127,
      5126
    ],
    [
      5134,
      5132,
      5128,
      5127,
      5273,
      5272,
      5276
    ],
    [
      5134,
      5276,
      5275,
      5145,
      5135
    ],
    [
      5137,
      5145,
      5275,
      5274,
      5278
    ],
    [
      5137,
      5278,
      5277,
      5280,
      5138
    ],
    [
      5279,
      5283,
      5139,
      5138,
      5280
    ],
    [
      5140,
      5139,
      5283,
      5282,
      5469
    ],
    [
      5285,
      5288,
      5470,
      5469,
      5282,
      5281,
      5284
    ],
    [
      5470,
      5288,
      5287,
      5290,
      5471,
      5472
    ],
    [
      5289,
      5292,
      5473,
      5474,
      5471,
      5290
    ],
    [
      5292,
      5291,
      5294,
      5475,
      5473
    ],
    [
      5293,
      5295,
      5297,
      5476,
      5477,
      5475,
      5294
    ],
    [
      5468,
      5113,
      5112,
      5115,
      5120
    ],
    [
      5343,
      5467,
      5468,
      5120,
      5119,
      5123,
      5478,
      5479,
      5480,
      5344
    ],
    [
      5478,
      5123,
      5122,
      5129,
      5131,
      5481
    ],
    [
      5130,
      5482,
      5481,
      5131
    ],
    [
      5483,
      5482,
      5130,
      5133,
      5136,
      5144
    ],
    [
      5484,
      5485,
      5177,
      5176,
      4680,
      4679,
      5173
    ],
    [
      5177,
      5485,
      5486,
      5178
    ],
    [
      5179,
      5178,
      5486,
      5487,
      5180
    ],
    [
      5182,
      5181,
      5180,
      5487,
      5488,
      5489
    ],
    [
      5490,
      5184,
      5183,
      5182,
      5489
    ],
    [
      5490,
      5491,
      5492,
      5186,
      5185,
      5184
    ],
    [
      5493,
      5494,
      5189,
      5188,
      5187,
      5186,
      5492
    ],
    [
      5495,
      5191,
      5190,
      5189,
      5494,
      5496
    ],
    [
      5193,
      5192,
      5191,
      5495,
      5497,
      5498
    ],
    [
      5193,
      5498,
      5499,
      5196,
      5194
    ],
    [
      5197,
      5195,
      5196,
      5499,
      3937,
      3936
    ],
    [
      5197,
      3936,
      3939,
      5199,
      5198
    ],
    [
      3931,
      5201,
      5200,
      5199,
      3939,
      3932
    ],
    [
      5016,
      5147,
      5146,
      4505,
      4504
    ],
    [
      5016,
      5017,
      5022,
      5150,
      5148,
      5147
    ],
    [
      5021,
      5151,
      5149,
      5150,
      5022
    ],
    [
      5021,
      5020,
      5153,
      5152,
      5151
    ],
    [
      5020,
      5019,
      5443,
      5155,
      5154,
      5153
    ],
    [
      5442,
      5157,
      5156,
      5155,
      5443
    ],
    [
      5439,
      5159,
      5158,
      5157,
      5442,
      5440
    ],
    [
      5439,
      5441,
      5500,
      5161,
      5160,
      5159
    ],
    [
      5163,
      5162,
      5161,
      5500,
      5501,
      5164
    ],
    [
      5502,
      5166,
      5165,
      5164,
      5501,
      5503
    ],
    [
      5504,
      5168,
      5167,
      5166,
      5502,
      5505
    ],
    [
      5504,
      5506,
      5170,
      5169,
      5168
    ],
    [
      5484,
      5173,
      5172,
      5171,
      5170,
      5506,
      5507
    ],
    [
      5296,
      5298,
      5300,
      5508,
      5476,
      5297
    ],
    [
      5299,
      5302,
      3400,
      3399,
      5508,
      5300
    ],
    [
      3392,
      3400,
      5302,
      5301,
      5303,
      5304
    ],
    [
      5306,
      5305,
      5308,
      5509,
      5510,
      5392
    ],
    [
      5511,
      5509,
      5308,
      5307,
      5309,
      5310,
      5312
    ],
    [
      5313,
      5512,
      5511,
      5312,
      5311
    ],
    [
      5313,
      4755,
      4754,
      4757,
      5314,
      5513,
      5514,
      5512
    ],
    [
      5515,
      5513,
      5314,
      5315,
      5317
    ],
    [
      5318,
      5320,
      5516,
      5517,
      5515,
      5317,
      5316
    ],
    [
      5516,
      5320,
      5319,
      5323,
      5518
    ],
    [
      5519,
      5520,
      5521,
      5518,
      5323,
      5322,
      5522
    ],
    [
      5321,
      5325,
      5523,
      5522,
      5322
    ],
    [
      5326,
      5327,
      5330,
      5524,
      5525,
      5523,
      5325,
      5324
    ],
    [
      5524,
      5330,
      5329,
      5526,
      5527
    ],
    [
      5528,
      5526,
      5329,
      5328,
      5332
    ],
    [
      5528,
      5332,
      5331,
      5333,
      5334,
      5335,
      5436,
      5529
    ],
    [
      4079,
      3234,
      3230,
      3203,
      3202
    ],
    [
      4084,
      4812,
      4081,
      4080,
      3209,
      3208
    ],
    [
      4813,
      4089,
      4082,
      4081,
      4812,
      4811
    ],
    [
      4813,
      4096,
      4095,
      4091,
      4090,
      4089
    ],
    [
      4095,
      4099,
      4104,
      4092,
      4091
    ],
    [
      4103,
      4814,
      4093,
      4092,
      4104
    ],
    [
      4102,
      4818,
      4815,
      4814,
      4103
    ],
    [
      4102,
      4106,
      4110,
      4819,
      4818
    ],
    [
      4109,
      5338,
      4820,
      4819,
      4110
    ],
    [
      4817,
      4820,
      5338,
      5337,
      5336
    ],
    [
      4860,
      4858,
      4857,
      4991,
      5347,
      5353,
      5354
    ],
    [
      966,
      965,
      1601,
      1600,
      5530,
      968,
      967
    ],
    [
      1599,
      1598,
      5358,
      5531,
      5532,
      5530,
      1600
    ],
    [
      5357,
      5360,
      5533,
      5534,
      5531,
      5358
    ],
    [
      5359,
      5362,
      5535,
      5536,
      5533,
      5360
    ],
    [
      5537,
      5535,
      5362,
      5361,
      5363,
      5365
    ],
    [
      5537,
      5365,
      5364,
      5366,
      5367,
      5369,
      5538
    ],
    [
      5368,
      5371,
      5539,
      5540,
      5538,
      5369
    ],
    [
      5372,
      5374,
      5541,
      2187,
      2186,
      2185,
      5539,
      5371,
      5370
    ],
    [
      5377,
      5541,
      5374,
      5373,
      5375
    ],
    [
      5393,
      5392,
      5510,
      5542,
      5543,
      5544,
      5394
    ],
    [
      5396,
      5395,
      5394,
      5544,
      5545,
      5546,
      5397
    ],
    [
      5546,
      5547,
      5548,
      5398,
      5397
    ],
    [
      5549,
      5401,
      5399,
      5398,
      5548
    ],
    [
      5550,
      5551,
      5406,
      5400,
      5401,
      5549
    ],
    [
      5552,
      5409,
      5407,
      5406,
      5551,
      5553
    ],
    [
      5552,
      5554,
      5410,
      5408,
      5409
    ],
    [
      5555,
      5556,
      5557,
      5411,
      5410,
      5554
    ],
    [
      5413,
      5412,
      5411,
      5557,
      5558,
      5559
    ],
    [
      5415,
      5414,
      5413,
      5559,
      5560,
      5561
    ],
    [
      5415,
      5561,
      5562,
      5419,
      5417,
      5416
    ],
    [
      5563,
      5423,
      5422,
      5421,
      5420,
      5564
    ],
    [
      5425,
      5424,
      5423,
      5563,
      5565,
      5566
    ],
    [
      5425,
      5566,
      5567,
      5428,
      5427,
      5426
    ],
    [
      5430,
      5429,
      5428,
      5567,
      5568,
      5569
    ],
    [
      5432,
      5431,
      5430,
      5569,
      5570,
      5571
    ],
    [
      5572,
      5573,
      5434,
      5433,
      5432,
      5571
    ],
    [
      5434,
      5573,
      5574,
      5529,
      5436,
      5435
    ],
    [
      5027,
      5026,
      5503,
      5501,
      5500,
      5441
    ],
    [
      5505,
      5502,
      5503,
      5026,
      5025
    ],
    [
      5504,
      5505,
      5025,
      5024,
      5575,
      5507,
      5506
    ],
    [
      5023,
      5576,
      5577,
      5575,
      5024
    ],
    [
      5023,
      5030,
      5445,
      5578,
      5579,
      5576
    ],
    [
      4861,
      5356,
      5355,
      5580,
      4845,
      4844,
      4851,
      4852
    ],
    [
      4845,
      5580,
      5581,
      4846
    ],
    [
      5582,
      4847,
      4846,
      5581,
      5583
    ],
    [
      5582,
      5450,
      5449,
      4848,
      4847
    ],
    [
      5448,
      5584,
      4849,
      4848,
      5449
    ],
    [
      5585,
      5584,
      5448,
      5451,
      5453
    ],
    [
      5585,
      5453,
      5452,
      5454,
      5586
    ],
    [
      5045,
      5046,
      5586,
      5454,
      5447
    ],
    [
      5461,
      5462,
      5463,
      5464,
      5466
    ],
    [
      5140,
      5469,
      5470,
      5472,
      5587,
      5141
    ],
    [
      5588,
      5589,
      5587,
      5472,
      5471,
      5474
    ],
    [
      5588,
      5474,
      5473,
      5475,
      5477
    ],
    [
      3386,
      3385,
      4180,
      4179,
      4183,
      4182,
      5590,
      3397,
      3396,
      3390,
      3388
    ],
    [
      4181,
      5344,
      5480,
      5143,
      5142,
      5591,
      5592,
      5590,
      4182
    ],
    [
      5483,
      5144,
      5143,
      5480,
      5479
    ],
    [
      5483,
      5479,
      5478,
      5481,
      5482
    ],
    [
      5484,
      5507,
      5575,
      5577,
      5488,
      5487,
      5486,
      5485
    ],
    [
      5490,
      5489,
      5488,
      5577,
      5576,
      5579,
      5491
    ],
    [
      5579,
      5578,
      5493,
      5492,
      5491
    ],
    [
      5444,
      5496,
      5494,
      5493,
      5578,
      5445
    ],
    [
      5495,
      5496,
      5444,
      5446,
      5497
    ],
    [
      3937,
      5499,
      5498,
      5497,
      5446,
      4524,
      3938
    ],
    [
      5511,
      5512,
      5514,
      5593,
      5542,
      5510,
      5509
    ],
    [
      5593,
      5514,
      5513,
      5515,
      5517,
      5594,
      5595
    ],
    [
      5516,
      5518,
      5521,
      5594,
      5517
    ],
    [
      5596,
      5519,
      5522,
      5523,
      5525,
      5597,
      5598
    ],
    [
      5597,
      5525,
      5524,
      5527,
      5599,
      5600
    ],
    [
      5527,
      5526,
      5528,
      5529,
      5574,
      5601,
      5599
    ],
    [
      5537,
      5538,
      5540,
      5602,
      5536,
      5535
    ],
    [
      5533,
      5536,
      5602,
      5603,
      5604,
      5534
    ],
    [
      5531,
      5534,
      5604,
      5605,
      5532
    ],
    [
      969,
      968,
      5530,
      5532,
      5605
    ],
    [
      1496,
      5376,
      3977,
      3976,
      1497
    ],
    [
      5377,
      5376,
      1496,
      1495,
      2187,
      5541
    ],
    [
      2189,
      2188,
      5603,
      5602,
      5540,
      5539,
      2185,
      2184,
      2183
    ],
    [
      979,
      970,
      969,
      5605,
      5604,
      5603,
      2188
    ],
    [
      5545,
      5606,
      5607,
      5608,
      5547,
      5546
    ],
    [
      5545,
      5544,
      5543,
      5609,
      5606
    ],
    [
      5593,
      5595,
      5610,
      5609,
      5543,
      5542
    ],
    [
      5550,
      5549,
      5548,
      5547,
      5608,
      5611
    ],
    [
      5550,
      5611,
      5612,
      5553,
      5551
    ],
    [
      5552,
      5553,
      5612,
      5613,
      5614,
      5615,
      5555,
      5554
    ],
    [
      5555,
      5615,
      5616,
      5556
    ],
    [
      5616,
      5617,
      5558,
      5557,
      5556
    ],
    [
      5618,
      5619,
      5560,
      5559,
      5558,
      5617
    ],
    [
      5620,
      5621,
      5562,
      5561,
      5560,
      5619,
      5622
    ],
    [
      5418,
      5419,
      5562,
      5621,
      5564,
      5420
    ],
    [
      5563,
      5564,
      5621,
      5620,
      5565
    ],
    [
      5566,
      5565,
      5620,
      5622,
      5623,
      5624,
      5625,
      5568,
      5567
    ],
    [
      5626,
      5570,
      5569,
      5568,
      5625
    ],
    [
      5572,
      5571,
      5570,
      5626,
      5627,
      5628
    ],
    [
      5572,
      5628,
      5601,
      5574,
      5573
    ],
    [
      5352,
      5351,
      5350,
      5349,
      5583,
      5581,
      5580,
      5355
    ],
    [
      5034,
      5450,
      5582,
      5583,
      5349,
      5035
    ],
    [
      3398,
      3397,
      5590,
      5592,
      5629
    ],
    [
      5630,
      5629,
      5592,
      5591
    ],
    [
      5630,
      5591,
      5142,
      5141,
      5587,
      5589
    ],
    [
      5631,
      5610,
      5595,
      5594,
      5521,
      5520
    ],
    [
      5631,
      5520,
      5519,
      5596,
      5632,
      5633
    ],
    [
      5596,
      5598,
      5634,
      5632
    ],
    [
      5635,
      5636,
      5634,
      5598,
      5597,
      5600
    ],
    [
      5635,
      5600,
      5599,
      5601,
      5628,
      5627
    ],
    [
      5607,
      5637,
      5613,
      5612,
      5611,
      5608
    ],
    [
      5631,
      5633,
      5637,
      5607,
      5606,
      5609,
      5610
    ],
    [
      5618,
      5617,
      5616,
      5615,
      5614,
      5638,
      5639
    ],
    [
      5640,
      5638,
      5614,
      5613,
      5637,
      5633,
      5632,
      5634,
      5636
    ],
    [
      5618,
      5639,
      5623,
      5622,
      5619
    ],
    [
      5640,
      5624,
      5623,
      5639,
      5638
    ],
    [
      5635,
      5627,
      5626,
      5625,
      5624,
      5640,
      5636
    ],
    [
      4838,
      5460,
      5459,
      5461,
      5466,
      5465,
      4839
    ],
    [
      5630,
      5589,
      5588,
      5477,
      5476,
      5508,
      3399,
      3398,
      5629
    ],
    [
      5455,
      5460,
      4838,
      4849,
      5584,
      5585,
      5586,
      5046,
      4566,
      4565,
      4568,
      4569,
      3841,
      3840,
      3845
    ]
  ]
};
/* harmony export (immutable) */ __webpack_exports__["IMG_COASTLINE_50"] = IMG_COASTLINE_50;


const TECTONIC = {
  "name": "TECTONIC",
  "v": [
    [
      0.9086147973539106,
      -0.37679881918545216,
      0.1801160733803644
    ],
    [
      0.9017192155830396,
      -0.4042282240164405,
      0.15330361755947594
    ],
    [
      0.8982024829432661,
      -0.41264617431050743,
      0.15151050940926145
    ],
    [
      0.8760893167319282,
      -0.4568627444810503,
      0.15409069346792412
    ],
    [
      0.8585148386703505,
      -0.4809607117316578,
      0.1778456228120314
    ],
    [
      0.8457512983075147,
      -0.49254969492827644,
      0.2051817229609277
    ],
    [
      0.8392093922255588,
      -0.49353342827647967,
      0.22836889274608507
    ],
    [
      0.8366055783555242,
      -0.48766397947462636,
      0.24954949286141637
    ],
    [
      0.8427190509376511,
      -0.4683958016312235,
      0.26538646197760013
    ],
    [
      0.9077446090062529,
      -0.37206327014798257,
      0.1938263341934592
    ],
    [
      0.9085500703266897,
      -0.3247254388767409,
      0.26285006953713247
    ],
    [
      0.9522620333945111,
      -0.2451055623782,
      0.18198978830312823
    ],
    [
      0.950440952259888,
      -0.283606061330435,
      0.12739544043628392
    ],
    [
      0.939896488176588,
      -0.3147836943892235,
      0.13230955090237834
    ],
    [
      0.956412831244577,
      -0.22796130884012464,
      0.18250517226267732
    ],
    [
      0.9662413357673979,
      -0.19371066226659475,
      0.16986424102403594
    ],
    [
      0.9676662567129354,
      -0.23401200764110913,
      0.09412967597390785
    ],
    [
      0.9583960863685441,
      -0.26875817944868896,
      0.09615603263906124
    ],
    [
      0.9816622703999746,
      -0.1749335511949156,
      0.07574588793791474
    ],
    [
      0.9738990249415871,
      -0.2132353658889487,
      0.07779053896221719
    ],
    [
      0.9722850085584352,
      -0.1611626219089437,
      0.169376714550608
    ],
    [
      0.9765850670466731,
      -0.14551887406557662,
      0.15844830107051325
    ],
    [
      0.9892805195959438,
      -0.08900338396774383,
      0.11576895607316282
    ],
    [
      0.9901513733669709,
      -0.1329037945780582,
      0.0440095354014854
    ],
    [
      0.981849390755055,
      -0.17435394353265954,
      0.07464902041244442
    ],
    [
      0.9778139758894294,
      -0.13745461096847852,
      0.1580697898993054
    ],
    [
      0.9924489225358807,
      -0.06079321889086813,
      0.10653319057578434
    ],
    [
      0.9965144952526864,
      -0.05238416038022078,
      0.06492118677706749
    ],
    [
      0.9968626002717524,
      -0.07595348716244078,
      0.02227159552670377
    ],
    [
      0.9916877274016356,
      -0.12545300677161622,
      0.028583114122505728
    ],
    [
      0.998831935747814,
      0.007838585602423604,
      0.04767935303701504
    ],
    [
      0.9992285360300178,
      0.027775290008203585,
      0.02776447457215317
    ],
    [
      0.9995579717216028,
      -0.021026238394067684,
      -0.021018050975082313
    ],
    [
      0.9993797401615319,
      -0.02940821398319166,
      -0.019372452219270878
    ],
    [
      0.9975760418967037,
      -0.06897154003872707,
      0.009217770793013355
    ],
    [
      0.995668808870358,
      0.0887006423524176,
      0.027853529200998112
    ],
    [
      0.9971604852331329,
      0.022028848037069747,
      -0.0720117805902812
    ],
    [
      0.9986332010914458,
      -0.006005643644837291,
      -0.05191976427395498
    ],
    [
      0.9941781197971543,
      0.10306771043494879,
      0.03141517439538668
    ],
    [
      0.9850765100274825,
      0.17163684644754365,
      0.012847658682316368
    ],
    [
      0.9857589555970692,
      0.16815796747673006,
      -0.0014762907133665543
    ],
    [
      0.9953658930637429,
      0.03775154354118298,
      -0.08843958325136832
    ],
    [
      0.9964419714678991,
      0.026324381538560163,
      -0.08006512620222839
    ],
    [
      0.9845014636824757,
      0.1631732764735904,
      -0.06427557741425863
    ],
    [
      0.991516266904617,
      0.05698532793089803,
      -0.11682536053503208
    ],
    [
      0.9924530528115196,
      0.05005226310732638,
      -0.11194511567250262
    ],
    [
      0.9810433271559232,
      0.1680477682979659,
      -0.09650874474838712
    ],
    [
      0.984863718481546,
      0.07788300532052735,
      -0.1548473231959297
    ],
    [
      0.9853116972253979,
      0.07548422899473708,
      -0.1531763378719964
    ],
    [
      0.9735678036354068,
      0.18494990209276987,
      -0.13401218392521164
    ],
    [
      0.9660421397321818,
      0.1716548422670115,
      -0.1931248285124291
    ],
    [
      0.9622664487093523,
      0.15313300066605884,
      -0.2249301353649625
    ],
    [
      0.9652998275651501,
      0.1401340744106348,
      -0.2203603505437538
    ],
    [
      0.977621378405864,
      0.09483625108763326,
      -0.18778318871363797
    ],
    [
      0.9914412894891739,
      0.0077805856413974755,
      0.13032126450860163
    ],
    [
      0.9917435473935673,
      -0.037219582856924185,
      0.12271690533573516
    ],
    [
      0.9875570098641029,
      0.041956464404272316,
      0.15156123304778638
    ],
    [
      0.9799207113434227,
      0.055689263467316195,
      0.19145261924211995
    ],
    [
      0.9706968474611763,
      0.15559059567296746,
      0.18313709855478408
    ],
    [
      0.9635258161335107,
      0.21256934295098512,
      0.16258006052907803
    ],
    [
      0.9673015403789003,
      0.21764613977331562,
      0.1302224551388175
    ],
    [
      0.9748370856505302,
      0.2154644132002174,
      0.057164176585226774
    ],
    [
      0.979162677404394,
      0.20067449540817212,
      0.03114800267969347
    ],
    [
      0.9379201979403664,
      -0.33947920818233174,
      0.07113065096989425
    ],
    [
      0.9273663468034354,
      -0.3661723841657109,
      0.07687290739167776
    ],
    [
      0.9133908152114341,
      -0.3922549292887278,
      0.10887281173960324
    ],
    [
      0.9570050347291919,
      -0.283998435116396,
      0.05904449470032264
    ],
    [
      0.9532648642284187,
      -0.2972056905193453,
      0.054358772525632516
    ],
    [
      0.9413344182029444,
      -0.3317420687421525,
      0.06194120545485878
    ],
    [
      0.9712300686165326,
      -0.23666545850180115,
      0.02648800798960715
    ],
    [
      0.9647849048838198,
      -0.261092177361633,
      0.03195249957171086
    ],
    [
      0.9796122816053022,
      -0.2006910401134956,
      0.009104073056466691
    ],
    [
      0.9738664450805861,
      -0.22662478500412614,
      0.015011794294337697
    ],
    [
      0.9881200499791427,
      -0.15308594151179536,
      -0.013544790166841365
    ],
    [
      0.9821002877468926,
      -0.18830858988557359,
      -0.004347388040828297
    ],
    [
      0.9924743879758124,
      -0.10917450993709739,
      -0.055457331273970546
    ],
    [
      0.9912294794630876,
      -0.12155352807774246,
      -0.051854207690310544
    ],
    [
      0.988375580434945,
      -0.15044431426320334,
      -0.021913929491538295
    ],
    [
      0.9933531244501786,
      -0.08630666913601222,
      -0.07616251707838229
    ],
    [
      0.993152771355174,
      -0.0894091680528373,
      -0.07519024815517684
    ],
    [
      0.992871736753089,
      -0.058377108874495244,
      -0.10391259556165448
    ],
    [
      0.9910217528571375,
      -0.032643420143523845,
      -0.12965451201288794
    ],
    [
      0.99281493018608,
      -0.05816809685155845,
      -0.10457048775001813
    ],
    [
      0.9867472769794976,
      -0.010409563732144978,
      -0.1619303935536902
    ],
    [
      0.9872193185384986,
      -0.02418417352478052,
      -0.157521880560466
    ],
    [
      0.9829842238936942,
      0.011885864621802984,
      -0.18330505120782672
    ],
    [
      0.9755015914280382,
      0.02927694422762379,
      -0.21803556053556364
    ],
    [
      0.9779901912748709,
      0.01831111505088963,
      -0.2078458294884323
    ],
    [
      0.9672266707753081,
      0.03944550305143398,
      -0.2508318552934074
    ],
    [
      0.9678702329221184,
      0.03721401709375527,
      -0.24868117973628406
    ],
    [
      0.9601483417760484,
      0.15518167869926458,
      -0.232451733443274
    ],
    [
      0.9496461629142909,
      0.15538637557398974,
      -0.27207947285332484
    ],
    [
      0.9496374838763142,
      0.15537668791664816,
      -0.2721152955442155
    ],
    [
      0.9582030337722202,
      0.04763995364843811,
      -0.28209463108341537
    ],
    [
      0.9374277113774674,
      0.155207954741391,
      -0.3116725472777446
    ],
    [
      0.9456547509944727,
      0.053173003100221036,
      -0.32079545455458924
    ],
    [
      0.9558933234852911,
      0.044734858547504135,
      -0.2902873516827411
    ],
    [
      0.9329522412122279,
      0.15850371521670983,
      -0.3232285381577269
    ],
    [
      0.9227839641506379,
      0.15809296996407096,
      -0.3513920436697075
    ],
    [
      0.9315009153562638,
      0.055452361500089954,
      -0.359487246358624
    ],
    [
      0.9416012446031741,
      0.048062126810835146,
      -0.33328235496073405
    ],
    [
      0.9182698051230701,
      0.16100161516398528,
      -0.36174444697027025
    ],
    [
      0.9064850577179556,
      0.16041887128347282,
      -0.39057729820127934
    ],
    [
      0.9153732175813252,
      0.05894387592551848,
      -0.3982681157533061
    ],
    [
      0.9273791025997933,
      0.05068970955268218,
      -0.3706731085561329
    ],
    [
      0.8971603129806294,
      0.1657383960865419,
      -0.4094315044975897
    ],
    [
      0.8878164439587791,
      0.1653494596968593,
      -0.4294665505185994
    ],
    [
      0.8980730509699475,
      0.04002518574599314,
      -0.4380214374063544
    ],
    [
      0.8788836126553725,
      0.16993288409141352,
      -0.44574253814305786
    ],
    [
      0.8702191922514492,
      0.16962242689510257,
      -0.4625438246603785
    ],
    [
      0.8455607538921525,
      0.15372031378743353,
      -0.5112700623021336
    ],
    [
      0.840381521583252,
      0.14703737532095973,
      -0.521669347805812
    ],
    [
      0.8604528840399905,
      0.04675355759592352,
      -0.5073804678930667
    ],
    [
      0.8866199939641961,
      0.009469344171847404,
      -0.46240168449507635
    ],
    [
      0.976898643509493,
      -0.09810415035682063,
      0.18985419666701905
    ],
    [
      0.9782925273723423,
      -0.05298252550399078,
      0.2003411662106769
    ],
    [
      0.9664459414342566,
      0.015153751797707922,
      0.2564227097815382
    ],
    [
      0.8430859978361281,
      -0.4559468602370807,
      0.2851639193386992
    ],
    [
      0.858816307155438,
      -0.41697241107935645,
      0.2976047025209191
    ],
    [
      0.9049296986074085,
      -0.3215022225761274,
      0.2788163579435664
    ],
    [
      0.9038236268123254,
      -0.3119516537885546,
      0.29289762258236274
    ],
    [
      0.9408074411626238,
      -0.20817212601302437,
      0.26748032563957613
    ],
    [
      0.9474659425519564,
      -0.15704869881465996,
      0.27864671881210995
    ],
    [
      0.9415070145939464,
      -0.12454859419669258,
      0.31313286182389416
    ],
    [
      0.9453661896317167,
      -0.1051048270579106,
      0.30860288856447177
    ],
    [
      0.9496801811620227,
      -0.056775227980477926,
      0.30803267196164874
    ],
    [
      0.9546087019512479,
      -0.01620589785260432,
      0.29742157795584423
    ],
    [
      0.9590587571727873,
      0.012173463770472947,
      0.2829454135871752
    ],
    [
      0.9313417913879021,
      0.10198823803135716,
      0.34957240582979765
    ],
    [
      0.9029588998203798,
      0.15146078225257006,
      0.4021502911532069
    ],
    [
      0.9037592753455134,
      0.17620722201330635,
      0.39008997313095084
    ],
    [
      0.9120084714698937,
      0.21233368690344306,
      0.35093440038437185
    ],
    [
      0.9463889965736261,
      0.23577269059206032,
      0.22081464067254633
    ],
    [
      0.9614130579888671,
      0.2167211357519234,
      0.16946055956148445
    ],
    [
      0.9076786076547219,
      0.23576060887568867,
      0.34718364089995646
    ],
    [
      0.8988299713026769,
      0.32781028809889934,
      0.29093830566727646
    ],
    [
      0.9229582234324013,
      0.30643987864850936,
      0.23290066245589044
    ],
    [
      0.9105343545956156,
      0.35058033137903627,
      0.21913607724724593
    ],
    [
      0.8946360068405473,
      0.3384174332366869,
      0.2917191391491013
    ],
    [
      0.8896876300624355,
      0.3647763960070132,
      0.27457986421080066
    ],
    [
      0.8931267555962168,
      0.3781988274469833,
      0.2434958836528917
    ],
    [
      0.8921246748219475,
      0.38086772405081293,
      0.24300893265513543
    ],
    [
      0.8806005720433003,
      0.42491054741278345,
      0.2097466548347812
    ],
    [
      0.8886828213566105,
      0.4190294722696105,
      0.18616429409289662
    ],
    [
      0.9169773915031504,
      0.3599237918131558,
      0.17206779930863964
    ],
    [
      0.8900865048290062,
      0.4319093611005893,
      0.14560328881918988
    ],
    [
      0.9208749173458157,
      0.36552362139846106,
      0.1355797507118655
    ],
    [
      0.9174804247401366,
      0.3594450965707732,
      0.1703786746335529
    ],
    [
      0.8795790525492414,
      0.4613089220108705,
      0.11633902522261114
    ],
    [
      0.9038776675645137,
      0.4237066582886698,
      0.058973127778531365
    ],
    [
      0.9251570458210239,
      0.37447778031440443,
      0.06205507729841648
    ],
    [
      0.9220413094124469,
      0.36427715433897284,
      0.13092737896895582
    ],
    [
      0.9318154674985522,
      0.35941864174912563,
      0.05038029866593072
    ],
    [
      0.797672234804955,
      -0.5639566110278156,
      0.21370995928896228
    ],
    [
      0.7944137370196414,
      -0.5668104641806567,
      0.21824919731764575
    ],
    [
      0.7848024427559986,
      -0.56437077437601,
      0.25606787161696043
    ],
    [
      0.7883584166422712,
      -0.5431209406738543,
      0.2889820941007226
    ],
    [
      0.8154674365903809,
      -0.5527197898354462,
      0.1717954998973294
    ],
    [
      0.803434284158367,
      -0.5650487623637976,
      0.1876519309521562
    ],
    [
      0.8318666841128154,
      -0.5383277988359455,
      0.1349110850286032
    ],
    [
      0.8188596448481655,
      -0.5531568598804353,
      0.15325263588712848
    ],
    [
      0.8626961182191922,
      -0.49723140272463406,
      0.0922840167853037
    ],
    [
      0.8508191799622399,
      -0.516517667903912,
      0.09652057682942976
    ],
    [
      0.8339789784530511,
      -0.5380281703193448,
      0.12249388328085355
    ],
    [
      0.8896700523001777,
      -0.4536892083146065,
      0.05151019606897716
    ],
    [
      0.8780538427902705,
      -0.47523988106906906,
      0.05628947150840788
    ],
    [
      0.8666336785186126,
      -0.49312826568980117,
      0.07596433923274022
    ],
    [
      0.9063638782880007,
      -0.420871184666201,
      0.037040060102583636
    ],
    [
      0.8945937255119392,
      -0.44487728658478304,
      0.042264242044902756
    ],
    [
      0.9215389328075352,
      -0.38767056467297745,
      0.021852427921952314
    ],
    [
      0.9111979242754736,
      -0.4110862675762666,
      0.02695224306588205
    ],
    [
      0.9334488342630324,
      -0.3586952083063285,
      -0.0033198420241513597
    ],
    [
      0.9322899461018207,
      -0.36169002462171196,
      -0.003972717786287562
    ],
    [
      0.9476745990205977,
      -0.31897745989602194,
      -0.012893193918928951
    ],
    [
      0.9568261655524885,
      -0.2894150314639624,
      -0.026881749884180597
    ],
    [
      0.9509144201948713,
      -0.30866419612627766,
      -0.02209478434316131
    ],
    [
      0.9659105063510964,
      -0.255099898630489,
      -0.04405604883875487
    ],
    [
      0.9605228151967096,
      -0.27543260796732766,
      -0.03915098919445118
    ],
    [
      0.9718990820478217,
      -0.2270804390221494,
      -0.06202135541980257
    ],
    [
      0.9696105058126754,
      -0.23731402383821323,
      -0.0594770637086572
    ],
    [
      0.9768610584696364,
      -0.19688772970146964,
      -0.08353259446816372
    ],
    [
      0.9755484317593277,
      -0.20397720049517312,
      -0.08184472475406179
    ],
    [
      0.9802725868701238,
      -0.1668718646439748,
      -0.1059218401520612
    ],
    [
      0.9795382941257895,
      -0.17178905395827837,
      -0.10484870662653933
    ],
    [
      0.9818583791795448,
      -0.1368134283140271,
      -0.13128674368678594
    ],
    [
      0.9822448319272437,
      -0.10787925755143986,
      -0.1534834060814748
    ],
    [
      0.9802270603661721,
      -0.129236060974092,
      -0.14984308682683162
    ],
    [
      0.9799647191598552,
      -0.062494340725965845,
      -0.18911268222721897
    ],
    [
      0.9798960636237566,
      -0.06586070814961492,
      -0.18832437871050595
    ],
    [
      0.9703140349610124,
      -0.04253660088502713,
      -0.2380783718501684
    ],
    [
      0.9714388796252641,
      -0.04892029259666033,
      -0.2321923946314106
    ],
    [
      0.9626018101082674,
      -0.032244091204483925,
      -0.2689945608347573
    ],
    [
      0.9526083649821342,
      -0.02287037541820488,
      -0.30333850545932206
    ],
    [
      0.9613231584065073,
      -0.03304038222100973,
      -0.2734339376413008
    ],
    [
      0.9413582894159377,
      -0.017765944035023233,
      -0.3369405617916074
    ],
    [
      0.9485878288461718,
      -0.025166533910956614,
      -0.31551192772352477
    ],
    [
      0.9256733842375813,
      -0.014242126199633746,
      -0.378055482112688
    ],
    [
      0.9338900716355497,
      -0.021867316990407865,
      -0.3568909561031055
    ],
    [
      0.8919181187133257,
      -0.029374245787215227,
      -0.45124186773316377
    ],
    [
      0.7558589145283894,
      0.2024968048411192,
      -0.622633395632697
    ],
    [
      0.7374187436414252,
      0.1916157342857373,
      -0.6476858859821168
    ],
    [
      0.7212117824187397,
      0.14305728509713808,
      -0.6777818071334023
    ],
    [
      0.7207334350012827,
      0.10662283784248304,
      -0.6849634195500278
    ],
    [
      0.7428390097010326,
      0.08857236946621175,
      -0.6635850669157121
    ],
    [
      0.7759760404395183,
      0.09252346154843756,
      -0.6239395753812238
    ],
    [
      0.8402041702256119,
      0.14709588872726878,
      -0.5219384560032208
    ],
    [
      0.8255506017302797,
      0.1643292550933184,
      -0.5398722996257986
    ],
    [
      0.7563871232097927,
      0.2032802388265777,
      -0.6217360085639431
    ],
    [
      0.7759760404395187,
      0.09252346154839985,
      -0.623939575381229
    ],
    [
      0.8052175718009035,
      0.09601007397140798,
      -0.5851553022566417
    ],
    [
      0.7863554975256715,
      -0.543728892825372,
      0.29326425390430544
    ],
    [
      0.7857791294261682,
      -0.5426770720108486,
      0.29673684515406124
    ],
    [
      0.7885183080186549,
      -0.519210781191869,
      0.32963471087482105
    ],
    [
      0.8084524165576517,
      -0.47019793868270576,
      0.35400365622494323
    ],
    [
      0.7928448613507385,
      -0.43018047030777157,
      0.43167324308498967
    ],
    [
      0.8091333998534532,
      -0.39285037069128464,
      0.4370031206860109
    ],
    [
      0.8314495549558721,
      -0.31297511113201054,
      0.4590623240645957
    ],
    [
      0.8564255284508885,
      -0.2712862344245121,
      0.439248327520305
    ],
    [
      0.8685696963633436,
      -0.2045694262111135,
      0.4513734954768002
    ],
    [
      0.8766968083564417,
      0.32308723564522224,
      0.3563949275463347
    ],
    [
      0.8713267374978868,
      0.3516039329411517,
      0.3422928437195302
    ],
    [
      0.8714903816522329,
      0.35249490496245695,
      0.34095726515672564
    ],
    [
      0.8642316703455775,
      0.3850168369179215,
      0.3238296701375769
    ],
    [
      0.8658662117470319,
      0.3908593491283993,
      0.31225738190436436
    ],
    [
      0.8598586693755352,
      0.4132052250234195,
      0.29984080895214915
    ],
    [
      0.8625983166825996,
      0.4217149593271277,
      0.27942912721487123
    ],
    [
      0.857810480382402,
      0.4372253747518921,
      0.2701761488717685
    ],
    [
      0.8626872846304311,
      0.45496261614573735,
      0.2208611936189788
    ],
    [
      0.8602225666181882,
      0.4604054107735452,
      0.2191894012293022
    ],
    [
      0.862932150254898,
      0.48980430789152446,
      0.12425716891738225
    ],
    [
      0.7499963040312989,
      -0.6132367844987985,
      0.24788342033497443
    ],
    [
      0.736798860259098,
      -0.6168120782552531,
      0.27689402239725175
    ],
    [
      0.7345150213682917,
      -0.6095217528257286,
      0.298279929288897
    ],
    [
      0.7610258949227824,
      -0.6146384577437156,
      0.20750699631435263
    ],
    [
      0.7506831121781614,
      -0.6183111741130484,
      0.2327362392440283
    ],
    [
      0.7764162598008073,
      -0.6096906250534898,
      0.15954664909928476
    ],
    [
      0.7615794315894486,
      -0.6234482123525699,
      0.17694376477931434
    ],
    [
      0.7891436780484926,
      -0.6020280235052791,
      0.12171488943602651
    ],
    [
      0.7992905304617842,
      -0.5960464138177587,
      0.07657232195192235
    ],
    [
      0.7937873756781492,
      -0.6029783794033023,
      0.07949010118350679
    ],
    [
      0.7902744183992414,
      -0.6066490436862475,
      0.08627445403073918
    ],
    [
      0.8218796853842203,
      -0.5675477111343269,
      0.049024262757554574
    ],
    [
      0.836103084198051,
      -0.5485321063422554,
      0.006645367276203648
    ],
    [
      0.8644518371243534,
      -0.5026200479691991,
      -0.009803503035674803
    ],
    [
      0.8379260326648835,
      -0.5456473600021189,
      -0.012203372698018659
    ],
    [
      0.8835273344573593,
      -0.46777334125849995,
      -0.02382331787414454
    ],
    [
      0.8809296307653128,
      -0.4726270461208151,
      -0.02422108409635236
    ],
    [
      0.8989405310281977,
      -0.4363680335740277,
      -0.03858576096797799
    ],
    [
      0.9180582974169312,
      -0.3911743516445864,
      -0.06443282672180936
    ],
    [
      0.9097810429757166,
      -0.40852293187697286,
      -0.07353548784539038
    ],
    [
      0.9376953122113305,
      -0.3371326404160537,
      -0.08407784620811304
    ],
    [
      0.9434031220259383,
      -0.30961183434334766,
      -0.11887414094856684
    ],
    [
      0.9463069902417627,
      -0.28795643115687675,
      -0.14691553347066963
    ],
    [
      0.9433649080448326,
      -0.30892969719725544,
      -0.12093424849552221
    ],
    [
      0.9481194212885039,
      -0.263262172811271,
      -0.17822062546810033
    ],
    [
      0.9458659326965535,
      -0.28230728125565885,
      -0.1601256891136374
    ],
    [
      0.9488274243456438,
      -0.2367040846912663,
      -0.20903993661518658
    ],
    [
      0.9478599198112578,
      -0.25328361525554444,
      -0.1934140187744346
    ],
    [
      0.9619184983256319,
      -0.17224991118717659,
      -0.21223282186073641
    ],
    [
      0.9482540017615088,
      -0.229066378791629,
      -0.21987028505592662
    ],
    [
      0.9634336409525515,
      -0.13722979903169089,
      -0.23013822311522217
    ],
    [
      0.9599258945979018,
      -0.11629125756595109,
      -0.2549874904659984
    ],
    [
      0.9511088696455606,
      -0.10921533060435389,
      -0.2889012454845525
    ],
    [
      0.9402053104607222,
      -0.10458048050244742,
      -0.32415566828197545
    ],
    [
      0.9491960680252786,
      -0.11085566062656868,
      -0.294512897769177
    ],
    [
      0.9257745692370726,
      -0.11235877326929303,
      -0.36099439472564143
    ],
    [
      0.9280069867758043,
      -0.11314205201348183,
      -0.35496747535720913
    ],
    [
      0.8875043188873974,
      -0.06081572401945823,
      -0.45676857561374085
    ],
    [
      0.8960151110956737,
      -0.09924523136043778,
      -0.43279013937521826
    ],
    [
      0.9030465560610254,
      -0.10826299962256594,
      -0.41567540280734155
    ],
    [
      0.9222977894547901,
      -0.11458643406224103,
      -0.36910260998224786
    ],
    [
      0.9754394383109454,
      0.21995110520762182,
      0.011807349642194714
    ],
    [
      0.9496270979935252,
      0.2960215110904905,
      -0.10285737566211878
    ],
    [
      0.9540924259824737,
      0.26779343699764346,
      -0.1341429006092651
    ],
    [
      0.9447036543355837,
      0.27378391353391346,
      -0.18049203355009455
    ],
    [
      0.9436824634101327,
      0.2684239456537179,
      -0.1934218024212196
    ],
    [
      0.9362100699079787,
      0.27190279940364176,
      -0.22266470910173616
    ],
    [
      0.9349384959497873,
      0.2675434539409516,
      -0.23304615217697866
    ],
    [
      0.9263576615742191,
      0.2706145142113473,
      -0.2619718831113395
    ],
    [
      0.9245927488038103,
      0.2660057901760073,
      -0.27270711111419926
    ],
    [
      0.9148826136513858,
      0.268708602776993,
      -0.30130630599449015
    ],
    [
      0.9138548065733628,
      0.2665393494220396,
      -0.30631057394813765
    ],
    [
      0.8989313148406801,
      0.27030687581853735,
      -0.3447559775899872
    ],
    [
      0.898803746942509,
      0.27007999188030896,
      -0.34526601696089154
    ],
    [
      0.8841618149617763,
      0.27315273590184125,
      -0.3790058941927376
    ],
    [
      0.8836090698941844,
      0.27381948711818827,
      -0.3798129803930701
    ],
    [
      0.8659190096225917,
      0.27667645234043114,
      -0.41669462378886407
    ],
    [
      0.8655009845820013,
      0.275765438868127,
      -0.41816440357048057
    ],
    [
      0.8456558785154782,
      0.27829971227001277,
      -0.45542881472590524
    ],
    [
      0.8432443132282648,
      0.2714567505417952,
      -0.4639507094438823
    ],
    [
      0.8259917585070129,
      0.27305999234244605,
      -0.4931286398704052
    ],
    [
      0.8237344342453693,
      0.2669293840379852,
      -0.5002102415740437
    ],
    [
      0.7963502216879539,
      0.2697434584471578,
      -0.5413545890103021
    ],
    [
      0.7626125660063404,
      0.3051490651016435,
      -0.5703561363190703
    ],
    [
      0.745413249233294,
      0.2854013986951078,
      -0.6024160767196863
    ],
    [
      0.7143043396077446,
      0.10090367985480786,
      -0.692522748947139
    ],
    [
      0.6916112367000667,
      0.05303334112723651,
      -0.7203203190241732
    ],
    [
      0.7168729877011074,
      0.012963266022516948,
      -0.6970832613386418
    ],
    [
      0.7480825530329398,
      0.013560865057628992,
      -0.6634671030176308
    ],
    [
      0.7497302745670406,
      0.015368183123249038,
      -0.6615650643323907
    ],
    [
      0.7804352673532075,
      0.016034677610024844,
      -0.6250309453021267
    ],
    [
      0.7813128729224103,
      0.016978758036179438,
      -0.6239085801471868
    ],
    [
      0.8107524225177181,
      0.017618510696852958,
      -0.5851240017829352
    ],
    [
      0.8246580516701546,
      0.0036777010852400917,
      -0.5656196357361651
    ],
    [
      0.726991227284341,
      -0.611810656632718,
      0.31172339643063346
    ],
    [
      0.7171816671798797,
      -0.6016346297259308,
      0.3516905295506695
    ],
    [
      0.7244571074920825,
      -0.5821849333169359,
      0.36908346322066515
    ],
    [
      0.7270070872974757,
      -0.5778202023920633,
      0.3709238583952717
    ],
    [
      0.7379108799199304,
      -0.5444792334544923,
      0.39878552836406006
    ],
    [
      0.7379104389820499,
      -0.5441082496779209,
      0.3992923699167664
    ],
    [
      0.7559357116835973,
      -0.4743704372034534,
      0.4511473020076898
    ],
    [
      0.862791416156809,
      -0.16935888724118844,
      0.4763491781440947
    ],
    [
      0.8786779875635141,
      -0.0525304666296239,
      0.47451611589808723
    ],
    [
      0.877699529077083,
      -0.014900250630874355,
      0.4789796646925669
    ],
    [
      0.8776992763011751,
      -0.014898387068382606,
      0.4789801858565281
    ],
    [
      0.8816901628949364,
      0.10399439972446195,
      0.46022562019106394
    ],
    [
      0.8840240874750831,
      0.11130572951729198,
      0.45399608736251246
    ],
    [
      0.8996534133434594,
      0.1470293681014456,
      0.41110351588760724
    ],
    [
      0.8434427919184666,
      0.304984604992643,
      0.4422540530942183
    ],
    [
      0.8409647453586454,
      0.3395380621626705,
      0.4212982333296536
    ],
    [
      0.840313462670409,
      0.34163765406625207,
      0.4209002230683363
    ],
    [
      0.8365926692611177,
      0.3774316164489899,
      0.3970618096005464
    ],
    [
      0.8377238160425317,
      0.38059518441292045,
      0.3916198585833378
    ],
    [
      0.8339930392761823,
      0.4062614683387484,
      0.37337277589845835
    ],
    [
      0.8366367468212562,
      0.4119742299321193,
      0.3609933347586662
    ],
    [
      0.8315670724364151,
      0.4374131520714154,
      0.342295104309832
    ],
    [
      0.8343990764952041,
      0.44276085514343694,
      0.32823925160864426
    ],
    [
      0.8314873217354888,
      0.4549867187784802,
      0.3187725200332301
    ],
    [
      0.8381825724763664,
      0.46279903252023874,
      0.2885602722053606
    ],
    [
      0.8328284298399913,
      0.47790665424075873,
      0.2792884463823351
    ],
    [
      0.8431089749542457,
      0.48635969509084653,
      0.22939377354832416
    ],
    [
      0.810423148437829,
      0.5439360761493347,
      0.21759564687599287
    ],
    [
      0.841857852292984,
      0.5207436296899206,
      0.1417795072286931
    ],
    [
      0.8553760491692998,
      0.5035854415553196,
      0.12138170192023799
    ],
    [
      0.9085441497145658,
      -0.4102511788517881,
      -0.0790031535456334
    ],
    [
      0.9167642927555417,
      -0.3763483581741817,
      -0.13381010734630303
    ],
    [
      0.9073154288038682,
      -0.3804741310321669,
      -0.17893615696602677
    ],
    [
      0.8920342527960201,
      -0.4145125836746164,
      -0.18015051988279168
    ],
    [
      0.886944783869103,
      -0.44693316087430823,
      -0.11653197019826667
    ],
    [
      0.9098681113233339,
      -0.37076333956754715,
      -0.18621107923437066
    ],
    [
      0.7224163600208966,
      -0.6772318203176888,
      0.13954090555585463
    ],
    [
      0.6582461689395078,
      -0.742493737553769,
      0.1241572823876861
    ],
    [
      0.6493585109701787,
      -0.7411843532196952,
      0.17023301316987333
    ],
    [
      0.6712508461648123,
      -0.713732915014561,
      0.2000190679606345
    ],
    [
      0.7224606070175743,
      -0.6732126992580283,
      0.15759229951211892
    ],
    [
      0.7326109205891451,
      -0.6738872448575924,
      0.09569336576674779
    ],
    [
      0.7175155366363793,
      -0.6940807634318321,
      0.058509388300457404
    ],
    [
      0.6377038986997589,
      -0.7699381858843763,
      0.022998423863456706
    ],
    [
      0.7727443724769194,
      -0.6346894925792025,
      0.005948345552050059
    ],
    [
      0.7578914574574681,
      -0.6523730069101689,
      -0.0031620512297314976
    ],
    [
      0.8333941634434494,
      -0.5520985442299421,
      -0.025325200839712885
    ],
    [
      0.8052911425011838,
      -0.5923636762044038,
      -0.024727533697119566
    ],
    [
      0.8656251804636276,
      -0.49091123605549575,
      -0.09848454326328414
    ],
    [
      0.8522350673528017,
      -0.5153926330617905,
      -0.0898099312982706
    ],
    [
      0.8336785247281473,
      -0.5501619795574774,
      -0.04797826233303909
    ],
    [
      0.8833156266304844,
      -0.4538980809382117,
      -0.11717523574119011
    ],
    [
      0.8690584044847307,
      -0.4830739428705611,
      -0.10666328006368439
    ],
    [
      0.6637458625022525,
      -0.6742567442658683,
      0.32375804673109254
    ],
    [
      0.6500601970816339,
      -0.6651882527520625,
      0.3673504165927208
    ],
    [
      0.6577184794832559,
      -0.6441811971195602,
      0.39043179561076236
    ],
    [
      0.6604443271093974,
      -0.6407392719306387,
      0.3914926259775657
    ],
    [
      0.7014934176644873,
      -0.6175673453604914,
      0.35569306841403714
    ],
    [
      0.6718844595504588,
      -0.6791408871762672,
      0.2955316030139936
    ],
    [
      0.6637364233386257,
      -0.6743248074617814,
      0.3236356197566639
    ],
    [
      0.6946255780912218,
      -0.6727676621622507,
      0.25471352341439524
    ],
    [
      0.6824582713365672,
      -0.6830719958928004,
      0.26012181052601197
    ],
    [
      0.671384753472313,
      -0.6855102935867694,
      0.28163478157270055
    ],
    [
      0.7185975565651502,
      -0.6575942916756052,
      0.22624610329076333
    ],
    [
      0.7256930944711407,
      -0.6686307870069874,
      0.16218015693455345
    ],
    [
      0.8960198346162912,
      -0.18739807443073328,
      -0.4025300208355241
    ],
    [
      0.8719061970822456,
      -0.16696800466043782,
      -0.4603273497298289
    ],
    [
      0.8822835060293425,
      -0.19658474226915384,
      -0.42770346514324803
    ],
    [
      0.9109641091402798,
      -0.19083745145447284,
      -0.3656849176280289
    ],
    [
      0.9004448819117952,
      -0.1967290343355704,
      -0.387939043779106
    ],
    [
      0.9176739388982196,
      -0.2044202661578773,
      -0.34071527211290287
    ],
    [
      0.9300176682242396,
      -0.2007622289846681,
      -0.30783382563301254
    ],
    [
      0.9337056674587164,
      -0.20521430908567423,
      -0.29339532017733727
    ],
    [
      0.9352360083342401,
      -0.21317716918918633,
      -0.2826466048823551
    ],
    [
      0.9452134028622746,
      -0.22982891764164998,
      -0.23184109140785847
    ],
    [
      0.946113503646142,
      -0.23017745532815684,
      -0.22778844851545021
    ],
    [
      0.9404349778109361,
      0.32422595938923526,
      -0.10227208694396629
    ],
    [
      0.9214517536863241,
      0.3635413250486257,
      -0.13698310337515104
    ],
    [
      0.9217284254293808,
      0.3432930333449338,
      -0.18046219275047162
    ],
    [
      0.9139209376206014,
      0.34312895560555773,
      -0.2168202933392534
    ],
    [
      0.9139079251700533,
      0.3430118943495531,
      -0.217060232760631
    ],
    [
      0.9040050631504022,
      0.34232252324473317,
      -0.2561057123099687
    ],
    [
      0.9039248106190023,
      0.34185630786389876,
      -0.257010119491556
    ],
    [
      0.8932040593512589,
      0.340931316852363,
      -0.2931763045468485
    ],
    [
      0.8928049631398914,
      0.33905180401043183,
      -0.29655214042398836
    ],
    [
      0.8811299023951593,
      0.33776699313907177,
      -0.33094342938165017
    ],
    [
      0.8782737356521965,
      0.3405489644637764,
      -0.3356510808357176
    ],
    [
      0.8641001171912337,
      0.3383489828111325,
      -0.372627096841827
    ],
    [
      0.8608858849530625,
      0.3412508804452012,
      -0.37739015578570345
    ],
    [
      0.8453503027141142,
      0.33871892785889024,
      -0.41310090003687916
    ],
    [
      0.8446192122780849,
      0.3392992542579562,
      -0.41411882631769126
    ],
    [
      0.8275924859710228,
      0.33633534358201617,
      -0.4494098506061807
    ],
    [
      0.8268907514891906,
      0.3344551974667769,
      -0.45209667770190576
    ],
    [
      0.8083175133999702,
      0.3310206560586001,
      -0.48687588027486334
    ],
    [
      0.806548241982713,
      0.3262536843615959,
      -0.49298931712064414
    ],
    [
      0.7673667966937521,
      0.31851132420205197,
      -0.5565058271815534
    ],
    [
      0.7631712776039657,
      0.30998674079291794,
      -0.5669901423948347
    ],
    [
      0.7119105769977978,
      -0.0058064063566880455,
      -0.7022461220995695
    ],
    [
      0.7306718540559165,
      -0.11844223624274802,
      -0.6723764409646626
    ],
    [
      0.7458297181774904,
      -0.09301860920013341,
      -0.6596101650412599
    ],
    [
      0.780040333081803,
      -0.06123665497858042,
      -0.6227255823014373
    ],
    [
      0.821335940951413,
      -0.061168506602051705,
      -0.5671557862717543
    ],
    [
      0.8233939457141984,
      -0.05963474620199238,
      -0.5643280138417972
    ],
    [
      0.8396019849937469,
      -0.07631504328943386,
      -0.5378145786070622
    ],
    [
      0.8602443976453987,
      -0.07892574350487554,
      -0.5037363430723534
    ],
    [
      0.6648131975874652,
      -0.6202793151286665,
      0.4162655204758645
    ],
    [
      0.6751264206001062,
      -0.6059554344547025,
      0.42074021398304823
    ],
    [
      0.6784301041452397,
      -0.5812755594174089,
      0.4492786638751694
    ],
    [
      0.6753011028020337,
      -0.5789440852521605,
      0.45693781492222363
    ],
    [
      0.67804309737578,
      -0.5472455724045842,
      0.4906932255336704
    ],
    [
      0.6973554647718189,
      -0.5006787572520943,
      0.5128509898492729
    ],
    [
      0.7106721863301452,
      -0.4908131917674829,
      0.5040312037599929
    ],
    [
      0.8282125369534455,
      0.10699152870690923,
      0.55010617740405
    ],
    [
      0.7946040996219434,
      0.14687434106525502,
      0.5890944345354552
    ],
    [
      0.7721920824533675,
      0.19341411537057807,
      0.6052357951837849
    ],
    [
      0.7993655564636807,
      0.22103776629460595,
      0.5587101332632165
    ],
    [
      0.8167276237675809,
      0.254779309919797,
      0.5177291683996113
    ],
    [
      0.8396104654201954,
      0.3054526410827425,
      0.44916917794129657
    ],
    [
      0.8066533308079218,
      0.2580943004159389,
      0.5316932724694686
    ],
    [
      0.7768961221246149,
      0.31946725037942303,
      0.5425616014451692
    ],
    [
      0.7732203658097012,
      0.3308383024614711,
      0.5409956409450302
    ],
    [
      0.7865479689242921,
      0.3420566917998181,
      0.5141395843309821
    ],
    [
      0.7329083077791152,
      0.4380199237410368,
      0.5205611960127743
    ],
    [
      0.7353431573610019,
      0.35916084980128304,
      0.5746946362133312
    ],
    [
      0.7017666495102134,
      0.35780124150842046,
      0.6160372076508386
    ],
    [
      0.6610324873230387,
      0.3895851047177691,
      0.6412951714191848
    ],
    [
      0.6448292739417901,
      0.4360188666229161,
      0.6277601097685098
    ],
    [
      0.6515639687696423,
      0.46362053808168746,
      0.6004335027877767
    ],
    [
      0.731159509039008,
      0.4782441041723144,
      0.48650626837303684
    ],
    [
      0.7348002569752585,
      0.44279718241492616,
      0.5138085612312202
    ],
    [
      0.6479521481031415,
      0.50304667532768,
      0.5719283663277178
    ],
    [
      0.6742698987144157,
      0.5293355962866307,
      0.5149407055103806
    ],
    [
      0.7243010802147598,
      0.49664934225127116,
      0.4782545096923937
    ],
    [
      0.7895261962868614,
      0.38393547379389403,
      0.47879216507735217
    ],
    [
      0.7927705996039017,
      0.3880248428378436,
      0.4700547816418175
    ],
    [
      0.7934013164915404,
      0.4139854880296629,
      0.446240256689524
    ],
    [
      0.795543647312527,
      0.4162197188086938,
      0.4403083588753381
    ],
    [
      0.7950468051604422,
      0.44958181352704685,
      0.4071569360208732
    ],
    [
      0.7822989743278398,
      0.48227106857947155,
      0.39423715093433875
    ],
    [
      0.7912520443628561,
      0.47836093075031766,
      0.38090815457704597
    ],
    [
      0.8111242527136424,
      0.48660381766767347,
      0.3244906335951483
    ],
    [
      0.8019460114126212,
      0.5171460359703274,
      0.299069510748864
    ],
    [
      0.8020064030555974,
      0.5180814369633158,
      0.2972832893585654
    ],
    [
      0.7903788688741209,
      0.5500335937454854,
      0.26974856698171995
    ],
    [
      0.7858529301380883,
      0.5712185878837969,
      0.2369483003725113
    ],
    [
      0.9029191468566429,
      -0.35730065224194835,
      -0.23890010076839752
    ],
    [
      0.8988178980640044,
      -0.3409873279758067,
      -0.2754161002550953
    ],
    [
      0.8974909247911685,
      -0.3567808164623687,
      -0.25926335823239366
    ],
    [
      0.8984659507468058,
      -0.3598132039128996,
      -0.25158178320095514
    ],
    [
      0.8966439406843878,
      -0.30681913862987986,
      -0.31920473023498686
    ],
    [
      0.8954453500372337,
      -0.33370447721226243,
      -0.294650550627666
    ],
    [
      0.8955838464426832,
      -0.2810959189625974,
      -0.3448400474618651
    ],
    [
      0.8955839320970773,
      -0.3046302512807424,
      -0.32423730595687084
    ],
    [
      0.8924445642553374,
      -0.26232449984329625,
      -0.3670538877509207
    ],
    [
      0.8929832841660756,
      -0.2762445933491175,
      -0.35534459169283916
    ],
    [
      0.8848184354457311,
      -0.2508082444160963,
      -0.3926723326493532
    ],
    [
      0.8715506845173286,
      -0.23433136141909697,
      -0.43068343057615815
    ],
    [
      0.8836823829277339,
      -0.25109075089817945,
      -0.39504288490814543
    ],
    [
      0.8696499321308406,
      -0.1691957732318662,
      -0.463769108355974
    ],
    [
      0.8550417280721164,
      -0.21974461267930953,
      -0.4696977202987782
    ],
    [
      0.8673822847395816,
      -0.23635108982545036,
      -0.4379339384636288
    ],
    [
      0.8471511415166405,
      -0.16444552202052692,
      -0.5052648945993076
    ],
    [
      0.8302651193689353,
      -0.23121386538111557,
      -0.5071488736207653
    ],
    [
      0.8316318552762765,
      -0.23382484968865894,
      -0.5037007017642664
    ],
    [
      0.8233864759684508,
      -0.158643505704901,
      -0.5448549800542479
    ],
    [
      0.8079129187333155,
      -0.22398627789224512,
      -0.5450750985504595
    ],
    [
      0.8087885682375353,
      -0.2256947085273643,
      -0.5430680900504335
    ],
    [
      0.8463968394439394,
      -0.1624473192505563,
      -0.5071718235939553
    ],
    [
      0.8211067524875476,
      -0.15320071524538392,
      -0.5498301936667864
    ],
    [
      0.7981184918306895,
      -0.14973178330033232,
      -0.5835985487195868
    ],
    [
      0.7823335962628754,
      -0.21660144201968431,
      -0.5839845541393964
    ],
    [
      0.727720624237676,
      -0.12574466767151457,
      -0.6742484494689679
    ],
    [
      0.7230815100100274,
      -0.1312852331727286,
      -0.6781720411756894
    ],
    [
      0.7139121436173131,
      -0.21508379124869567,
      -0.6663845841087715
    ],
    [
      0.714743722148334,
      -0.22210764213166295,
      -0.6631814283861229
    ],
    [
      0.7501280207159511,
      -0.23489109100740965,
      -0.6181699830160945
    ],
    [
      0.7930160620009957,
      -0.1397579676286911,
      -0.5929529794956179
    ],
    [
      0.7695159896898153,
      -0.6324561041965677,
      -0.08856871838411343
    ],
    [
      0.7364622241137802,
      -0.6720982353928971,
      -0.07685931586436466
    ],
    [
      0.8016481893894558,
      -0.5865748169212681,
      -0.11528297620372115
    ],
    [
      0.7876111872485716,
      -0.6061338654609079,
      -0.11077163383426926
    ],
    [
      0.8242006367298619,
      -0.5456452454130171,
      -0.15154067629603155
    ],
    [
      0.8047630934979427,
      -0.5799723985994665,
      -0.12644516679732268
    ],
    [
      0.8323543808091932,
      -0.5221861638019785,
      -0.1857627386789876
    ],
    [
      0.830184669847386,
      -0.526106061105262,
      -0.18440668756499315
    ],
    [
      0.8582503180709915,
      -0.4780518223429163,
      -0.18674272860183505
    ],
    [
      0.8405538269450966,
      -0.5031036891698177,
      -0.20088788403403524
    ],
    [
      0.8843167535457815,
      -0.4246012367582758,
      -0.19415887603092521
    ],
    [
      0.8829565216069197,
      -0.4012160909995232,
      -0.24374870107319851
    ],
    [
      0.8807769181343882,
      -0.42455475122756636,
      -0.20972668807709802
    ],
    [
      0.18386954296550315,
      -0.9709425310384466,
      -0.15317503905764795
    ],
    [
      0.0416967471537746,
      -0.9853179944667217,
      -0.16555914670253494
    ],
    [
      0.020673926650311945,
      -0.9893341234957361,
      -0.144189392272043
    ],
    [
      0.02542214145488474,
      -0.9959304193411876,
      -0.08646568426106448
    ],
    [
      0.02564301488461276,
      -0.9959998151731513,
      -0.08559675205681508
    ],
    [
      0.11897979134678527,
      -0.9901259568594157,
      -0.07412421199784691
    ],
    [
      0.1859587725041173,
      -0.9703619074501939,
      -0.15432790900670984
    ],
    [
      0.18432856493792357,
      -0.9665689763863394,
      -0.17823409896927558
    ],
    [
      0.17603496202855287,
      -0.9649777648742996,
      -0.19449834303100597
    ],
    [
      0.06458763723876478,
      -0.977281745755995,
      -0.20186338580344015
    ],
    [
      0.17540584686073596,
      -0.9600333351231013,
      -0.2181026921876096
    ],
    [
      0.1694413299178304,
      -0.9588527084956242,
      -0.22779622280951567
    ],
    [
      0.10030751869768868,
      -0.9635508562508784,
      -0.24800836500189258
    ],
    [
      0.07208530411114222,
      -0.9710096087408439,
      -0.22791237058167219
    ],
    [
      0.17083589287258297,
      -0.9504807102789238,
      -0.25961802151256724
    ],
    [
      0.13184268557474002,
      -0.9471162610718172,
      -0.2925547714083324
    ],
    [
      0.12116765628525414,
      -0.9504154487424067,
      -0.28640683277831935
    ],
    [
      0.2263758415384833,
      -0.9284128909874746,
      -0.29462430689952074
    ],
    [
      0.21571577912324416,
      -0.9208295389250905,
      -0.3248686855950525
    ],
    [
      0.17845157229846612,
      -0.9247638262868223,
      -0.3361054922722348
    ],
    [
      0.14569855543046928,
      -0.9371539851910168,
      -0.31703996433583914
    ],
    [
      0.24449585527259285,
      -0.9355691788366702,
      -0.25481775520046085
    ],
    [
      0.23569143580941326,
      -0.9297317912114624,
      -0.28292815960385226
    ],
    [
      0.2614812792664928,
      -0.9402342176713849,
      -0.21814480629397764
    ],
    [
      0.25466318543871364,
      -0.9362251295865289,
      -0.24213460866405384
    ],
    [
      0.2056715500464158,
      -0.9684373218641498,
      -0.1408132348967874
    ],
    [
      0.27897171788103153,
      -0.942127784856954,
      -0.1859301417818938
    ],
    [
      0.27489767187724723,
      -0.9401749960035672,
      -0.2012517003311069
    ],
    [
      0.23068697822943962,
      -0.9676731785060804,
      -0.1019418347652699
    ],
    [
      0.23508514056083218,
      -0.9666979364725834,
      -0.10114383968953665
    ],
    [
      0.29732196467531136,
      -0.9409530416183488,
      -0.1618858325820729
    ],
    [
      0.29715306077654224,
      -0.940891452791859,
      -0.16255255314622857
    ],
    [
      0.2879947686551647,
      -0.9553296848676094,
      -0.0663641954521581
    ],
    [
      0.2910695626825113,
      -0.9543744508061648,
      -0.06669270820894113
    ],
    [
      0.3279136624357443,
      -0.9375165853435795,
      -0.1163412317009384
    ],
    [
      0.3262144463408911,
      -0.937191047209005,
      -0.12351953703683681
    ],
    [
      0.3361710361025439,
      -0.9415017490833294,
      -0.023737964503587165
    ],
    [
      0.3767801185246082,
      -0.9216296763279243,
      -0.09292729414046098
    ],
    [
      0.3628983933534173,
      -0.931538432279225,
      0.023257370622494698
    ],
    [
      0.41029658041151273,
      -0.9071573469800075,
      -0.09339306142756822
    ],
    [
      0.35582752014051455,
      -0.9341232577449845,
      0.028293378210261955
    ],
    [
      0.49975141932557793,
      -0.8657855171243845,
      -0.025767367341904678
    ],
    [
      0.5205515350080828,
      -0.8529343650956209,
      -0.03910330215798344
    ],
    [
      0.4366718923760587,
      -0.8942937642519643,
      -0.09775644034417381
    ],
    [
      0.4285775837248298,
      -0.897907566112682,
      -0.10041542434400298
    ],
    [
      0.7105560525414855,
      -0.6972391999169213,
      -0.0946973827297949
    ],
    [
      0.615207245205826,
      -0.7852204552288183,
      -0.07034829163885879
    ],
    [
      0.5964274184291266,
      -0.8007403580456487,
      -0.05558069397636107
    ],
    [
      0.5874241102455928,
      -0.808640570708948,
      -0.032145638983853454
    ],
    [
      -0.33532859501765583,
      -0.9295839070345007,
      0.15306368983517218
    ],
    [
      -0.35019700719252633,
      -0.9196433046399681,
      0.17781520852918212
    ],
    [
      -0.34952414755869315,
      -0.9106641583771448,
      0.2202808682582663
    ],
    [
      -0.273500471269223,
      -0.9405589572128707,
      0.20136121826744582
    ],
    [
      -0.2673184838584784,
      -0.948527302784532,
      0.16981396897754059
    ],
    [
      -0.2579237626883445,
      -0.931835076772289,
      0.25526206599780665
    ],
    [
      -0.3495620404591616,
      -0.9106282733865873,
      0.2203690712849475
    ],
    [
      -0.34783463563982076,
      -0.8967036996510813,
      0.273739915396671
    ],
    [
      -0.33752736974131936,
      -0.8960759923317098,
      0.2883107536014713
    ],
    [
      -0.29934353086177895,
      -0.9111338749171619,
      0.28324638128251656
    ],
    [
      -0.26222739180781973,
      -0.9289506695243381,
      0.26131867245941687
    ],
    [
      -0.2587594845990991,
      -0.9522110084215295,
      0.16228901555823932
    ],
    [
      -0.2029808539232674,
      -0.9465072358122715,
      0.25084422555760466
    ],
    [
      -0.22150653922976257,
      -0.9605323969831167,
      0.16826279275086894
    ],
    [
      -0.19661564820366872,
      -0.9472695328828228,
      0.2530271111035532
    ],
    [
      -0.14248636710072837,
      -0.9664315210809331,
      0.21379370956983382
    ],
    [
      -0.10871109599360873,
      -0.9815045663969879,
      0.157577548368189
    ],
    [
      -0.14448964199781308,
      -0.9787908571814763,
      0.145228100770115
    ],
    [
      0.5391866557470844,
      -0.8290689235075128,
      0.14806238664282356
    ],
    [
      0.5353916001652548,
      -0.8357901423221916,
      0.12169910628077224
    ],
    [
      0.4339162324303181,
      -0.8914722170873183,
      0.1303609964479383
    ],
    [
      0.3849145259930802,
      -0.9029926954916265,
      0.19090573477056463
    ],
    [
      0.35432696381811296,
      -0.9008842396815245,
      0.2507189450458005
    ],
    [
      0.49238676438923384,
      -0.839299819977082,
      0.23050181439793213
    ],
    [
      0.5117394850071771,
      -0.8305143425765961,
      0.21992868448466077
    ],
    [
      0.5841779603259825,
      -0.8110821164530724,
      -0.029696987042117064
    ],
    [
      0.597971426897907,
      -0.7788838193735053,
      0.1891300307508614
    ],
    [
      0.6712171253944015,
      -0.7136812170587229,
      0.20031647709276548
    ],
    [
      0.6047567974191753,
      -0.7558392173592886,
      0.25095077899261575
    ],
    [
      0.6192962464485425,
      -0.7444568946169191,
      0.2495117055211627
    ],
    [
      0.6608086192714343,
      -0.6957748311126705,
      0.28147709158422735
    ],
    [
      0.9086396149855138,
      0.39560302654398893,
      -0.13368730481318372
    ],
    [
      0.8966318170793559,
      0.4174657485677878,
      -0.147559253771863
    ],
    [
      0.8847824025007354,
      0.4160430691774264,
      -0.20992442643592937
    ],
    [
      0.8847885733963483,
      0.41472980695462336,
      -0.21248145239205116
    ],
    [
      0.8754774196420455,
      0.41319751483433065,
      -0.2506134502209308
    ],
    [
      0.8754371818872362,
      0.41247600862296757,
      -0.25193904596112077
    ],
    [
      0.8640981472081162,
      0.41018537155891194,
      -0.2916887946949248
    ],
    [
      0.8639962705362632,
      0.4093423758547803,
      -0.2931710487565108
    ],
    [
      0.8524758976034854,
      0.40666480545033595,
      -0.32849441397559925
    ],
    [
      0.8488578437075962,
      0.4094173276736378,
      -0.33439170590292355
    ],
    [
      0.8381143851676354,
      0.4068240725844227,
      -0.3633984745990285
    ],
    [
      0.8309701433706675,
      0.411830715182568,
      -0.374010805804788
    ],
    [
      0.8185752474842339,
      0.4086696216783817,
      -0.4036380860664335
    ],
    [
      0.8113972106401502,
      0.4131193900693211,
      -0.41348148219011654
    ],
    [
      0.7960225577907251,
      0.40940301567371445,
      -0.4457995718319838
    ],
    [
      0.7954604133451484,
      0.4096967284201287,
      -0.44653255370981526
    ],
    [
      0.7805122127775852,
      0.40597369957777146,
      -0.4753798911987916
    ],
    [
      0.7823750340120057,
      0.3883026810673385,
      -0.4869397642733952
    ],
    [
      0.7634515032657126,
      0.36297488534903305,
      -0.534220024678203
    ],
    [
      0.6918037249686496,
      -0.5009579328511199,
      0.5200468783033255
    ],
    [
      0.6661068784329053,
      -0.4891256654776619,
      0.5630787776816003
    ],
    [
      0.6512644884567319,
      -0.46024312174958515,
      0.6033496788408755
    ],
    [
      0.6510994297225052,
      -0.44788749109226067,
      0.6127530725652124
    ],
    [
      0.6808968584582475,
      -0.39878814291324866,
      0.6142861590606544
    ],
    [
      0.6999601174740032,
      -0.39197704247251,
      0.5970006969177537
    ],
    [
      0.7230406165210173,
      -0.39934015855940885,
      0.5636840468051704
    ],
    [
      0.8130564024680559,
      -0.3173556247366996,
      0.4880826711261954
    ],
    [
      0.5838291653636033,
      -0.7602251847594609,
      0.28495819715930576
    ],
    [
      0.601469768158605,
      -0.734494934526458,
      0.31424721024411356
    ],
    [
      0.5836866638672304,
      -0.7606703757270197,
      0.2840606588650697
    ],
    [
      0.6015057735176758,
      -0.7313678390025433,
      0.32139055446240544
    ],
    [
      0.6141120757421439,
      -0.7109644327719779,
      0.34263090018399545
    ],
    [
      0.6067969717617546,
      -0.697138767348502,
      0.38183108061101523
    ],
    [
      0.599037043892578,
      -0.6978121784519792,
      0.39269935529428185
    ],
    [
      0.616576055104212,
      -0.6642791570129652,
      0.4225720883237227
    ],
    [
      0.6235703098849725,
      -0.632516994552032,
      0.45943696002044054
    ],
    [
      0.6133692181429864,
      -0.6559358498596747,
      0.4399163137501584
    ],
    [
      0.6221742718245762,
      -0.6240085134837188,
      0.47277113974881974
    ],
    [
      0.6212972370332034,
      -0.6236263985172753,
      0.47442581962544983
    ],
    [
      0.6166606619827303,
      -0.5988223163101912,
      0.511020020597939
    ],
    [
      0.616026610969867,
      -0.5985751177432173,
      0.5120732789315156
    ],
    [
      0.6098584224304553,
      -0.5730918745363633,
      0.5473923710931982
    ],
    [
      0.6077068110807866,
      -0.57235317835229,
      0.550549063205136
    ],
    [
      0.6008483699785061,
      -0.54645530645759,
      0.5834105195644946
    ],
    [
      0.5962489060219229,
      -0.5450033636799041,
      0.5894561694012969
    ],
    [
      0.5893137173061426,
      -0.5200933210030505,
      0.618233192284945
    ],
    [
      0.5807016174773447,
      -0.5176980716827561,
      0.6283107018308313
    ],
    [
      0.5736291462726699,
      -0.4927846127542772,
      0.6543033913859113
    ],
    [
      0.620041067039847,
      -0.44523272380459183,
      0.646000694146401
    ],
    [
      0.5611486297377585,
      -0.48988661364743535,
      0.6671756298850284
    ],
    [
      0.5536535571850003,
      -0.462990935370388,
      0.6921756513929458
    ],
    [
      0.5870275251446391,
      -0.43054283061014337,
      0.6855884740372795
    ],
    [
      0.6092642167646952,
      -0.4302536416041134,
      0.6660922744308791
    ],
    [
      0.49003750869963925,
      -0.4479267754660444,
      0.7478133750395501
    ],
    [
      0.49040082230240406,
      -0.4447858711016266,
      0.7494481718928222
    ],
    [
      0.56196914932696,
      -0.366509673647647,
      0.7415263544388887
    ],
    [
      0.4892268874153349,
      -0.4435291990578934,
      0.7509586554617815
    ],
    [
      0.47303609888907394,
      -0.36356192862323183,
      0.8025332224921049
    ],
    [
      0.5278996798276705,
      -0.3022842152283438,
      0.7936914899768218
    ],
    [
      0.5579960671219547,
      -0.3103839974023663,
      0.7696116963982285
    ],
    [
      0.5668887735943317,
      -0.3557384987310192,
      0.7430257323224515
    ],
    [
      0.44510869140707343,
      -0.36040982924519815,
      0.8197456970410578
    ],
    [
      0.438687093716954,
      -0.3225361607352818,
      0.8387634105183158
    ],
    [
      0.4937910320103301,
      -0.2657978913160163,
      0.8279624977486193
    ],
    [
      0.40659541952250594,
      -0.3185804108935415,
      0.8562632110620073
    ],
    [
      0.40179560109887735,
      -0.27642553834229755,
      0.8730115787833302
    ],
    [
      0.44803713922795074,
      -0.22374469854375426,
      0.8655639963318705
    ],
    [
      0.4657677598250694,
      -0.22974997019731802,
      0.8545614928733145
    ],
    [
      0.4931151955893262,
      -0.263071328087773,
      0.8292351175734395
    ],
    [
      0.35795702499909,
      -0.2739395838149675,
      0.8926499160774527
    ],
    [
      0.35638549662793656,
      -0.22284924072445875,
      0.9073740098227363
    ],
    [
      0.3825274288624516,
      -0.188211516905612,
      0.904571274732937
    ],
    [
      0.4302040222964689,
      -0.19896156042858734,
      0.8805332456368475
    ],
    [
      0.29475373810829325,
      -0.22903492081333562,
      0.9277193750909899
    ],
    [
      0.3001805637814164,
      -0.18879130347377415,
      0.9350130869996122
    ],
    [
      0.33495570501629507,
      -0.15388265823974362,
      0.9295831340822116
    ],
    [
      0.365064663304644,
      -0.15652767491075592,
      0.9177291967641106
    ],
    [
      0.2647417963018048,
      -0.16650294801963875,
      0.9498360645878126
    ],
    [
      0.23571014571017304,
      -0.18048463296531747,
      0.9549167631121906
    ],
    [
      0.20557084468924405,
      -0.14662015590434452,
      0.9675965883033778
    ],
    [
      0.2305496627486058,
      -0.11157854175515165,
      0.9666421685537508
    ],
    [
      0.2864255128519144,
      -0.10126784430152931,
      0.9527356660155213
    ],
    [
      0.28876400402408114,
      -0.1084417981264245,
      0.9512390479785238
    ],
    [
      0.6870897078512817,
      -0.26464968200205036,
      0.6766596479627363
    ],
    [
      0.6546326862262724,
      -0.19721853770652564,
      0.7297676990036449
    ],
    [
      0.6695578685571238,
      -0.19024229110551363,
      0.7179833781698335
    ],
    [
      0.7108183758841514,
      -0.21064703845434485,
      0.671092439009583
    ],
    [
      0.695437410009003,
      -0.26047134844131475,
      0.6697174668478738
    ],
    [
      0.7264361306558016,
      -0.27537679737249604,
      0.6296492416788053
    ],
    [
      0.7193506577241812,
      -0.20353020910233793,
      0.6641611891811705
    ],
    [
      0.7437411310066335,
      -0.21382408821109666,
      0.6333469739010891
    ],
    [
      0.7444007494674999,
      -0.29963882337228964,
      0.5967278271710598
    ],
    [
      0.7330607124562538,
      -0.2938548777546519,
      0.613409571716099
    ],
    [
      0.7581708627231382,
      -0.20267425194318503,
      0.6197580903198625
    ],
    [
      0.7705486890780683,
      -0.20461011268622395,
      0.6036467671963474
    ],
    [
      0.7602871369564266,
      -0.29639849271223145,
      0.5780237044417098
    ],
    [
      0.82918397017275,
      -0.1558731168475998,
      0.5368030505248368
    ],
    [
      0.7853827121098923,
      -0.0938583394892407,
      0.6118534200502866
    ],
    [
      0.7853096432599553,
      -0.09347928179670495,
      0.6120052189954708
    ],
    [
      0.7914698742953741,
      -0.07077563866683793,
      0.6070965714399694
    ],
    [
      0.8449498127112656,
      -0.01297464556786208,
      0.5346882012646115
    ],
    [
      0.817106402168284,
      0.008375409581363793,
      0.5764260403988934
    ],
    [
      0.7920398856971652,
      -0.02731207444443438,
      0.609858073697777
    ],
    [
      0.7771917842338734,
      0.003783026496294328,
      0.6292524288629301
    ],
    [
      0.777192076733157,
      0.006034835537595034,
      0.6292345005029816
    ],
    [
      0.8038782260461297,
      0.04913048424063327,
      0.5927613290416377
    ],
    [
      0.80377980510121,
      0.05599931727469805,
      0.592285489756611
    ],
    [
      0.7588176815038906,
      0.03910453016612244,
      0.6501281119575948
    ],
    [
      0.7784028661357334,
      0.06963410669506688,
      0.6238910715633422
    ],
    [
      0.7685406651377594,
      0.09486919146086606,
      0.632728284922661
    ],
    [
      0.7372813172496879,
      0.042798592203928926,
      0.6742288481961648
    ],
    [
      0.7284853892918459,
      0.05143857380038235,
      0.6831274483679384
    ],
    [
      0.7556938340049761,
      0.1005918814682715,
      0.6471538477282917
    ],
    [
      0.7378351046698424,
      0.1409306058622872,
      0.6601044785851187
    ],
    [
      0.7234173524241513,
      0.05258678490960926,
      0.6884053778584982
    ],
    [
      0.706104262666933,
      0.08372521096256465,
      0.7031407108771763
    ],
    [
      0.6779685230763141,
      0.10216415361026768,
      0.7279568444865527
    ],
    [
      0.7210711549638517,
      0.19633490760603067,
      0.6644614311865126
    ],
    [
      0.7325724641992556,
      0.19633430515123715,
      0.651759484256126
    ],
    [
      0.6661609925379225,
      0.10297410226106778,
      0.7386649215201823
    ],
    [
      0.6435700360038683,
      0.13674193447756935,
      0.7530732050161603
    ],
    [
      0.6982074810976352,
      0.2058828553870953,
      0.6856519256860232
    ],
    [
      0.6278267122702049,
      0.14839843443373532,
      0.7640756009830453
    ],
    [
      0.6157125621416554,
      0.16872431375842736,
      0.7696948400292846
    ],
    [
      0.6726045515365473,
      0.22927233458803986,
      0.7035888812686496
    ],
    [
      0.6560537546241353,
      0.2583919511647207,
      0.7091030042362418
    ],
    [
      0.5798280525198432,
      0.20129105770128106,
      0.7894816904783452
    ],
    [
      0.655145603782501,
      0.26208040552521633,
      0.708588808043283
    ],
    [
      0.48347133412833654,
      0.24833878282688673,
      0.839394614004776
    ],
    [
      0.47860824875747715,
      0.25702779310897295,
      0.8395658745987904
    ],
    [
      0.6059863338964262,
      0.3402382650095205,
      0.7190399753519134
    ],
    [
      0.6066989756271549,
      0.3426895348935573,
      0.7172727763183252
    ],
    [
      0.39534509511918287,
      0.31582324299481357,
      0.8625299617691221
    ],
    [
      0.4109883376752197,
      0.3602727640324851,
      0.8374318609841358
    ],
    [
      0.5536705748812589,
      0.41636493686780046,
      0.7211720556550488
    ],
    [
      0.43309537437626666,
      0.499691681598376,
      0.750157730104322
    ],
    [
      0.4362196109002332,
      0.5029555468593184,
      0.7461555929894871
    ],
    [
      0.46899276601395246,
      0.49301740603899646,
      0.732788934666157
    ],
    [
      0.5436223493864892,
      0.448806240376966,
      0.7092585564138136
    ],
    [
      0.3466976336585708,
      0.5338397859888976,
      0.7712430445137742
    ],
    [
      0.31359119249555734,
      0.6168572111453936,
      0.7219056344475652
    ],
    [
      0.3383339164203224,
      0.6214770472380813,
      0.7066091145434807
    ],
    [
      0.3666733960130791,
      0.6162961062854239,
      0.6969431325679746
    ],
    [
      0.4038013270949904,
      0.5974640815455429,
      0.6928067259339112
    ],
    [
      0.4374201340662581,
      0.5541930742915422,
      0.7081904141689196
    ],
    [
      0.3109448990527693,
      0.5328818899950535,
      0.786988031083296
    ],
    [
      0.265307917977423,
      0.6088943152483326,
      0.7475690078626513
    ],
    [
      0.2691426023805743,
      0.6116645513809932,
      0.7439279105986684
    ],
    [
      0.30341674897085297,
      0.6184920114699071,
      0.7248488864528018
    ],
    [
      0.28274788595400774,
      0.5148111269582282,
      0.8093349964931323
    ],
    [
      0.21575526198387518,
      0.5873873758082894,
      0.7800164983302089
    ],
    [
      0.23750484310609213,
      0.6035610191073154,
      0.7611212424543736
    ],
    [
      0.17385637157756648,
      0.5656235996170834,
      0.8061289633911539
    ],
    [
      0.2032838031290582,
      0.5851022478897983,
      0.7850675479853256
    ],
    [
      0.26311523757251626,
      0.4667145108376018,
      0.8443624441735766
    ],
    [
      0.26059816832978194,
      0.37747605469723217,
      0.8885946335609813
    ],
    [
      0.14858172828987645,
      0.43004289074170826,
      0.890497940559611
    ],
    [
      0.1289334285511292,
      0.5308921926587137,
      0.8375736688650581
    ],
    [
      0.14041385492148337,
      0.5483600651280793,
      0.8243695702285578
    ],
    [
      0.16797810727315854,
      0.564609133011726,
      0.8080840812667172
    ],
    [
      0.04334511874026994,
      0.5003384406168452,
      0.8647442659668207
    ],
    [
      0.04449658666959559,
      0.5138881221630386,
      0.8567024288949466
    ],
    [
      0.0868710787600677,
      0.5357602763808977,
      0.8398894819720784
    ],
    [
      0.11775430978090244,
      0.4258361303473618,
      0.89710507334359
    ],
    [
      0.07862639200434308,
      0.40890185197479356,
      0.90918489095011
    ],
    [
      0.052543540989007376,
      0.40862405451800654,
      0.9111890903482118
    ],
    [
      0.003396048230634041,
      0.4780626965074087,
      0.878319147613486
    ],
    [
      0.744763420675983,
      0.2082486039220911,
      0.634003127900414
    ],
    [
      0.7442770982902972,
      0.21154014623189088,
      0.633484307219023
    ],
    [
      0.7121781885426465,
      0.30040112950725595,
      0.6344772566096278
    ],
    [
      0.5866554329218444,
      0.47205508271749713,
      0.658026900592871
    ],
    [
      0.5605537397067257,
      0.5151449055141116,
      0.6483866371414987
    ],
    [
      0.5599305431712408,
      0.5177370791360287,
      0.6468586427587195
    ],
    [
      0.60962730572141,
      0.5360511082215151,
      0.5839552701135079
    ],
    [
      0.5150948843180833,
      0.5861884526438083,
      0.6253481895203649
    ],
    [
      0.5806400133845925,
      0.576903894747392,
      0.574490270659156
    ],
    [
      0.5147340279168597,
      0.5849883104795056,
      0.6267675463094902
    ],
    [
      0.4287530591302075,
      0.667721009239774,
      0.6085387975357911
    ],
    [
      0.4470947271279022,
      0.7140457421827522,
      0.5387438937427591
    ],
    [
      0.5073229571711397,
      0.6921233866222573,
      0.5134088378842612
    ],
    [
      0.518716572041067,
      0.6466489073171171,
      0.5592658657164256
    ],
    [
      0.5021229695056082,
      0.6171981255065729,
      0.6057548987552992
    ],
    [
      0.42344623449628865,
      0.6673414566012993,
      0.612657054796703
    ],
    [
      0.4002160622486296,
      0.6781743823818618,
      0.6163656468356923
    ],
    [
      0.37044836558534205,
      0.7207570898715928,
      0.5858986480911025
    ],
    [
      0.37716083495068814,
      0.7341978040368933,
      0.5645381201714401
    ],
    [
      0.41723772020942657,
      0.7352355749181473,
      0.5341735057162811
    ],
    [
      0.4280577894345736,
      0.7319398181882368,
      0.5301232228972402
    ],
    [
      0.3283205031063098,
      0.6954556772462712,
      0.6391768520730001
    ],
    [
      0.3233352574777987,
      0.7226501573843532,
      0.6109263959792006
    ],
    [
      0.3575521903984735,
      0.6819587269874398,
      0.6380350506256881
    ],
    [
      0.31130747649445745,
      0.6890434335675779,
      0.6544515274151751
    ],
    [
      0.2677349341655509,
      0.6920724184740789,
      0.6703385507449258
    ],
    [
      0.2623298963438993,
      0.6940786897611017,
      0.670401221585784
    ],
    [
      0.24335708484100418,
      0.7356914332173047,
      0.6320881618479786
    ],
    [
      0.244633498525991,
      0.7443051741619281,
      0.6214211608198708
    ],
    [
      0.31309387504555825,
      0.7340603620841712,
      0.6026007054640841
    ],
    [
      0.2285049819117746,
      0.6821809516012582,
      0.6945607406943625
    ],
    [
      0.19111183683973018,
      0.6839830939064704,
      0.7040194550364903
    ],
    [
      0.1697967525236259,
      0.7219385948921128,
      0.6708008109995339
    ],
    [
      0.14094629185611582,
      0.6604873295550697,
      0.7374894103031063
    ],
    [
      0.1262925965603368,
      0.6604580564881356,
      0.7401657487846642
    ],
    [
      0.11634812303068888,
      0.7177271901445426,
      0.6865353558225937
    ],
    [
      0.16221033617148778,
      0.7272622596213074,
      0.6669163460057362
    ],
    [
      0.18118394128191445,
      0.6741378553963174,
      0.7160380795343257
    ],
    [
      0.11639872387612765,
      0.6576008968196508,
      0.7443200908090549
    ],
    [
      0.05721964962392232,
      0.717908773647938,
      0.6937815970579138
    ],
    [
      0.08162486942403899,
      0.7281023600697546,
      0.6805911650560577
    ],
    [
      0.1010377480731133,
      0.6461234775805962,
      0.7565155815867052
    ],
    [
      0.09191864430105019,
      0.6434500700395732,
      0.7599493208075953
    ],
    [
      0.0159518023116832,
      0.692221365039664,
      0.721508920101223
    ],
    [
      0.03661678713917328,
      0.7171652077182391,
      0.6959405691135268
    ],
    [
      0.06058642613061811,
      0.6175536777187177,
      0.7841917750810737
    ],
    [
      -0.012370530809974703,
      0.6624555855894998,
      0.7489990434498247
    ],
    [
      -0.01250336777994557,
      0.6637595484247668,
      0.7478415124002605
    ],
    [
      0.00696566899472923,
      0.6884547384402144,
      0.7252458566408165
    ],
    [
      0.05959425707380475,
      0.6150158041699034,
      0.7862595532933564
    ],
    [
      0.030435143226607543,
      0.5907332601510987,
      0.8062926995874576
    ],
    [
      -0.03655191489283895,
      0.6260715025445824,
      0.7789084870632978
    ],
    [
      -0.0049814880379409334,
      0.5613592862137259,
      0.8275572104444164
    ],
    [
      -0.06380381535490756,
      0.5901161374738005,
      0.8047931519584144
    ],
    [
      -0.04203790120280974,
      0.6240033246710132,
      0.7802901163426236
    ],
    [
      0.02836743070504094,
      0.5847170580549516,
      0.8107411738000957
    ],
    [
      0.0020756369915367915,
      0.5618798728805281,
      0.8272162354444218
    ],
    [
      -0.04719864666573601,
      0.5323997761166102,
      0.8451761746191775
    ],
    [
      -0.0986451193289941,
      0.5487988436968829,
      0.830113829296641
    ],
    [
      -0.09819050337788475,
      0.5526828384490429,
      0.8275870377974192
    ],
    [
      -0.07194332079559917,
      0.5870586032607914,
      0.8063413389690437
    ],
    [
      -0.03871310382323812,
      0.4832360877750099,
      0.8746337399530584
    ],
    [
      -0.098117109193316,
      0.43553949200688086,
      0.8948063387046021
    ],
    [
      -0.10589943738865584,
      0.43841098048797106,
      0.892513933419721
    ],
    [
      -0.1273440015564088,
      0.46611290746351375,
      0.8755125714480125
    ],
    [
      -0.11625728908194718,
      0.5306763005464585,
      0.8395635215834722
    ],
    [
      0.7356795932971466,
      0.5072647534547536,
      0.44884073557179827
    ],
    [
      0.7775041487445793,
      0.4883558377083833,
      0.3962270491285399
    ],
    [
      0.7717926255702313,
      0.5195041334107693,
      0.36667642204610656
    ],
    [
      0.7541894718060149,
      0.5524893344978307,
      0.3548996701648344
    ],
    [
      0.7212386672104695,
      0.5889638928869788,
      0.3646043304678112
    ],
    [
      0.7168672183330291,
      0.6372827356312522,
      0.28279339834199246
    ],
    [
      0.72949363271363,
      0.6445243988359597,
      0.22897017084200347
    ],
    [
      0.7449298722136151,
      0.628941019416278,
      0.22251444802398787
    ],
    [
      0.8516227929201731,
      -0.460610203950879,
      -0.2501536699614332
    ],
    [
      0.8476248424231029,
      -0.47012002555233723,
      -0.2460066830024744
    ],
    [
      0.8402986621918148,
      -0.5003593986698832,
      -0.20865912508529083
    ],
    [
      0.8566856702389617,
      -0.43391098150931784,
      -0.2789460925211918
    ],
    [
      0.8553001164627323,
      -0.43761211137694117,
      -0.2774118792608785
    ],
    [
      0.8593683109385647,
      -0.4086299046865944,
      -0.30742105840430517
    ],
    [
      0.8594418994240227,
      -0.38327893956876286,
      -0.3383147587638953
    ],
    [
      0.8581517278221702,
      -0.4069187889400402,
      -0.313037875094045
    ],
    [
      0.8576369841476972,
      -0.3807289607879441,
      -0.34569388458486633
    ],
    [
      0.8576889532429024,
      -0.3576355257067151,
      -0.36941371149102736
    ],
    [
      0.8532542043112177,
      -0.3336118940297063,
      -0.4008246087594208
    ],
    [
      0.8541942126048937,
      -0.3527793021432649,
      -0.381967290656696
    ],
    [
      0.846328697195471,
      -0.3156763934914583,
      -0.4290409664538372
    ],
    [
      0.8472916949530105,
      -0.32518665178976724,
      -0.4199409781879061
    ],
    [
      0.8452191283649657,
      -0.28299891745062444,
      -0.45333898769876635
    ],
    [
      0.8404700037619042,
      -0.30755821865011684,
      -0.4461144639184339
    ],
    [
      0.8314858960869089,
      -0.23603480208160038,
      -0.502910306928432
    ],
    [
      0.8081305274820723,
      -0.3011714677840055,
      -0.5061825733313775
    ],
    [
      0.8082860880510943,
      -0.30215638856179566,
      -0.505346531317226
    ],
    [
      0.827765236563642,
      -0.31412056135842426,
      -0.46490104976070584
    ],
    [
      0.786247567487831,
      -0.2893585358601956,
      -0.5459728934153347
    ],
    [
      0.7609142754358034,
      -0.27929176475681133,
      -0.5856667786182109
    ],
    [
      0.7844560818089646,
      -0.2905201599166125,
      -0.547929459323874
    ],
    [
      0.2850893717520951,
      -0.8817745557321469,
      -0.37576280148169355
    ],
    [
      0.2702798882051926,
      -0.8801405521014304,
      -0.3902581076395184
    ],
    [
      0.23244249189430705,
      -0.9013853768321924,
      -0.3653421552395115
    ],
    [
      0.21572544377363073,
      -0.9208236279277229,
      -0.32487902234323573
    ],
    [
      0.2903081013195245,
      -0.8968202637121695,
      -0.3338182453124564
    ],
    [
      0.315548734272793,
      -0.8955614821175338,
      -0.3136855560051886
    ],
    [
      0.3148834144702836,
      -0.9005046952686546,
      -0.29989953166126004
    ],
    [
      0.3270141832853773,
      -0.9070652186514093,
      -0.2651309356583434
    ],
    [
      0.3274765149064114,
      -0.9042299859221815,
      -0.27409353283855914
    ],
    [
      0.3421022715713003,
      -0.9103693244645394,
      -0.2327954657198775
    ],
    [
      0.35818914853503847,
      -0.9118637629532819,
      -0.20051187417314012
    ],
    [
      0.34477175878578314,
      -0.9099095949899275,
      -0.23064466889356863
    ],
    [
      0.3828397382893124,
      -0.906008175344516,
      -0.18050739872778523
    ],
    [
      0.39261007517849394,
      -0.9023455288517662,
      -0.17784789970523576
    ],
    [
      0.7523861018527607,
      -0.6318885057027834,
      -0.18609693737273167
    ],
    [
      0.7470366593027581,
      -0.6369222467367193,
      -0.1904370795554918
    ],
    [
      0.7199557689009047,
      -0.6804256225421605,
      -0.13669185423579688
    ],
    [
      0.7845233176917434,
      -0.5933044553647939,
      -0.1803135803044939
    ],
    [
      0.799007170833002,
      -0.5623860899701721,
      -0.21286011078993533
    ],
    [
      0.17745437730425373,
      -0.9835943240094976,
      -0.032436857922107126
    ],
    [
      0.18082374889099348,
      -0.9832638011025289,
      -0.022250152323377726
    ],
    [
      0.23898032986763534,
      -0.9709420544197549,
      0.012646299676274267
    ],
    [
      0.2544658058860644,
      -0.9661027989009496,
      0.04350328252565957
    ],
    [
      0.2742832784478841,
      -0.9600977263593241,
      0.054598891962538816
    ],
    [
      0.32474307320284596,
      -0.9439901503402435,
      0.05851950501649399
    ],
    [
      0.32667230640892314,
      -0.943368281181804,
      0.057805625033929414
    ],
    [
      0.3513596044007681,
      -0.9353665862236898,
      0.04044474961693272
    ],
    [
      0.41220207722044083,
      -0.9068428998695929,
      0.08789426881919717
    ],
    [
      -0.4028594134261215,
      -0.708811143516779,
      -0.5790432245008981
    ],
    [
      -0.3317335376392512,
      -0.739286643151107,
      -0.5860103405774639
    ],
    [
      -0.3171991494316557,
      -0.7352739645123977,
      -0.5989631847701956
    ],
    [
      -0.3167904698773876,
      -0.7011847156381112,
      -0.6387360900640929
    ],
    [
      -0.3477763793315796,
      -0.6744574131785309,
      -0.6512747406337372
    ],
    [
      -0.3907408709813841,
      -0.6807874391893892,
      -0.619556320592941
    ],
    [
      -0.40353586877613773,
      -0.7075195446356877,
      -0.5801507533129617
    ],
    [
      -0.4133121762340772,
      -0.7313387652107037,
      -0.5425095902163707
    ],
    [
      -0.4107143502737904,
      -0.7364071206841557,
      -0.5376041992812643
    ],
    [
      -0.34846830315967364,
      -0.7585519103570958,
      -0.5506077015322418
    ],
    [
      -0.41764099880731803,
      -0.753140476676262,
      -0.508286748309533
    ],
    [
      -0.40660123801129294,
      -0.7737105881966772,
      -0.48584705305274384
    ],
    [
      -0.39582270694427385,
      -0.7788721754039848,
      -0.48650027651458927
    ],
    [
      -0.341926359562558,
      -0.7834794397587382,
      -0.5188895182132993
    ],
    [
      -0.4222121272951652,
      -0.7767013838655349,
      -0.46740975585267164
    ],
    [
      -0.42936364341133176,
      -0.7935389582139569,
      -0.43121083417889045
    ],
    [
      -0.4215973794240296,
      -0.8054102824945062,
      -0.416617242219895
    ],
    [
      -0.4189871965039421,
      -0.8073714078754411,
      -0.41545293224503194
    ],
    [
      -0.36342476532751405,
      -0.8180604347884192,
      -0.44575729380507495
    ],
    [
      -0.40449915341264947,
      -0.828799089445248,
      -0.38661674074356606
    ],
    [
      -0.335578547196525,
      -0.8454453322314213,
      -0.41546266844275115
    ],
    [
      -0.3413070013918187,
      -0.8300414509304214,
      -0.44106770516355653
    ],
    [
      -0.3907113464970165,
      -0.8548140340974021,
      -0.34152248949170816
    ],
    [
      -0.3703000410067628,
      -0.8684198100006256,
      -0.3297346102987478
    ],
    [
      -0.32677351671778004,
      -0.8631139158465285,
      -0.3850369294547814
    ],
    [
      -0.33297570721701464,
      -0.8479739321302241,
      -0.41239227542588025
    ],
    [
      -0.4069756342876507,
      -0.833348839315114,
      -0.37403281287651297
    ],
    [
      -0.30066220031109675,
      -0.8765368828751913,
      -0.37587941452483586
    ],
    [
      -0.36596046700236845,
      -0.8798645940487699,
      -0.3031686539383676
    ],
    [
      -0.33114723919983524,
      -0.8929583765280678,
      -0.3049046469942443
    ],
    [
      -0.2804915400493381,
      -0.8941817858095763,
      -0.3489461704721055
    ],
    [
      -0.27267711119945626,
      -0.8977025045866659,
      -0.346088726032424
    ],
    [
      -0.2670155499924557,
      -0.9264912421336493,
      -0.2651729139860893
    ],
    [
      -0.2583399193746162,
      -0.9272862360147267,
      -0.2709256771794753
    ],
    [
      -0.24383573248542156,
      -0.9257252408755567,
      -0.28909672078595133
    ],
    [
      -0.2487414482984806,
      -0.9160427154146378,
      -0.31463222249819095
    ],
    [
      -0.13287214951045237,
      -0.9465263686079878,
      -0.293994600995065
    ],
    [
      -0.1632326636591554,
      -0.9718606616209917,
      -0.1698291845012081
    ],
    [
      -0.14023136351907436,
      -0.9714190667624268,
      -0.19152065532468518
    ],
    [
      -0.11390634598336459,
      -0.9408963875185539,
      -0.31896603627855646
    ],
    [
      -0.035888841685468555,
      -0.9840603461044346,
      -0.1741758486911884
    ],
    [
      -0.05357030378026536,
      -0.9548199665285202,
      -0.29231670166339374
    ],
    [
      0.008935031308483832,
      -0.9881957092431634,
      -0.15293595211368
    ],
    [
      -0.014005796773074003,
      -0.9570646648440302,
      -0.2895359476191781
    ],
    [
      0.02846499823478331,
      -0.9527981056191231,
      -0.3022672886769326
    ],
    [
      0.022224137910970648,
      -0.9528863758385471,
      -0.3025122186547072
    ],
    [
      0.05675950653993526,
      -0.9425520040210306,
      -0.32920218427781145
    ],
    [
      0.057513895330848,
      -0.9417787171333712,
      -0.3312778287155567
    ],
    [
      0.08461942214257505,
      -0.9304007984627422,
      -0.3566425488022268
    ],
    [
      0.16578650244606902,
      -0.9178513265566819,
      -0.36064356079769255
    ],
    [
      0.10664349904853997,
      -0.9191893728331317,
      -0.37910164993220213
    ],
    [
      0.08546297074420185,
      -0.9291623264029905,
      -0.3596574089671426
    ],
    [
      0.16710981865413063,
      -0.9069667723304037,
      -0.3866336539903805
    ],
    [
      0.13481709684238175,
      -0.8985879168447829,
      -0.4175692829933081
    ],
    [
      0.10838506830295686,
      -0.9109442609715972,
      -0.39803671987879957
    ],
    [
      0.13734294850064024,
      -0.8887642473058257,
      -0.437304273027442
    ],
    [
      0.19823985086954543,
      -0.888121402437739,
      -0.414658095374061
    ],
    [
      0.20043401838484018,
      -0.8801053141802513,
      -0.4303961433676967
    ],
    [
      0.20745432227543734,
      -0.8603350023871231,
      -0.4656032515315888
    ],
    [
      0.1340912788076111,
      -0.8677226844275658,
      -0.4786197570906977
    ],
    [
      0.12197676817512994,
      -0.8788173815839997,
      -0.46130432238533503
    ],
    [
      0.20268439012354092,
      -0.8784123691442851,
      -0.4327941170286082
    ],
    [
      0.23625726586175874,
      -0.8344310842281943,
      -0.4979028720556714
    ],
    [
      0.13700475305014276,
      -0.8448445439602832,
      -0.5171724994450212
    ],
    [
      0.13301986943427846,
      -0.8487759204822969,
      -0.5117471554831713
    ],
    [
      0.2417666152226401,
      -0.83120181416999,
      -0.5006520227506381
    ],
    [
      0.24285096191088448,
      -0.8131061149972647,
      -0.5290386148978287
    ],
    [
      0.2387343249116674,
      -0.8066476619054226,
      -0.5406713157284058
    ],
    [
      0.13661892060856073,
      -0.8219880070424128,
      -0.552875200031792
    ],
    [
      0.2404533159606525,
      -0.7692817877139384,
      -0.5919355825891646
    ],
    [
      0.18700625438268742,
      -0.7528945484259602,
      -0.6310138348500983
    ],
    [
      0.13786736461543783,
      -0.7618879172419815,
      -0.6328660137301334
    ],
    [
      0.13302984575181964,
      -0.7638010444317921,
      -0.631594034696458
    ],
    [
      0.10216496875491896,
      -0.7918821173644516,
      -0.6020672980304604
    ],
    [
      0.5326714821316387,
      -0.8012471529956481,
      0.2725143885009593
    ],
    [
      -0.2978583690597984,
      -0.2783756970850092,
      0.9131195777407646
    ],
    [
      -0.35033141822118313,
      -0.15590665372495574,
      0.923558884279406
    ],
    [
      -0.33406980332116626,
      -0.11797945433250069,
      0.9351353992146606
    ],
    [
      -0.23004335572721749,
      -0.08468929425936833,
      0.9694884104122189
    ],
    [
      -0.1920035672903958,
      -0.08685472577816837,
      0.9775432915005665
    ],
    [
      -0.1286945219484892,
      -0.1202767186683967,
      0.9843633632794412
    ],
    [
      -0.044666860872871965,
      -0.15326177487896606,
      0.987175617557845
    ],
    [
      -0.04271636867046808,
      -0.15848289480419991,
      0.986437268102787
    ],
    [
      -0.01495056470697295,
      -0.3118502001151596,
      0.9500136490088327
    ],
    [
      -0.1935903348152312,
      -0.34251058651689226,
      0.9193526420204496
    ],
    [
      -0.20596082928846365,
      -0.33953937806227463,
      0.9177653009042628
    ],
    [
      -0.29775024762837654,
      -0.2823336605198785,
      0.9119388653712959
    ],
    [
      -0.3027134064932898,
      -0.35941736593800133,
      0.8827138554432106
    ],
    [
      -0.3335769534964108,
      -0.34479991560828366,
      0.877404943166252
    ],
    [
      -0.329148045672145,
      -0.3023864234281447,
      0.8945524104022873
    ],
    [
      -0.2886190197527133,
      -0.4099329308103994,
      0.8652479723606287
    ],
    [
      -0.32243385111846967,
      -0.41622325378151126,
      0.8501732850804266
    ],
    [
      -0.35628872893883706,
      -0.3979720614869116,
      0.8453854623229605
    ],
    [
      -0.3482390947859141,
      -0.35431830236710565,
      0.8678640869804323
    ],
    [
      -0.33770447637160633,
      -0.46846222536065807,
      0.8163937959396306
    ],
    [
      -0.3762274316595783,
      -0.45048436894460664,
      0.8096398909412856
    ],
    [
      -0.36578374827692706,
      -0.40301025847278094,
      0.8389189359301553
    ],
    [
      -0.31319873850933655,
      -0.461588157271152,
      0.8299656157113875
    ],
    [
      -0.33109948441853815,
      -0.5096766955730745,
      0.7941050292042544
    ],
    [
      -0.34992756293323224,
      -0.5157032317329895,
      0.7820491528540641
    ],
    [
      -0.40980053022828583,
      -0.4884223930709214,
      0.7703941143151927
    ],
    [
      -0.4099848895681643,
      -0.4880615016837065,
      0.7705247308815114
    ],
    [
      -0.4128135272348705,
      -0.4681651006722623,
      0.7812851145672977
    ],
    [
      -0.34496957589819116,
      -0.5536452640749764,
      0.7579399140248334
    ],
    [
      -0.359602418661729,
      -0.5586124007578562,
      0.7474210902912619
    ],
    [
      -0.4062091436707797,
      -0.5394084451502498,
      0.7375856973252951
    ],
    [
      -0.4091964221880997,
      -0.5340980600822652,
      0.739795613858868
    ],
    [
      -0.41109625377027936,
      -0.5796373376984013,
      0.7035768805766373
    ],
    [
      -0.3554962398373524,
      -0.5944981021019307,
      0.721245055483021
    ],
    [
      -0.3681183211913334,
      -0.598805277659674,
      0.7112813374820086
    ],
    [
      -0.3646952583122655,
      -0.6322825246705028,
      0.6835321335247122
    ],
    [
      -0.3725037438150127,
      -0.635866630178883,
      0.6759545764833248
    ],
    [
      -0.4222594192925545,
      -0.6155039757126153,
      0.6654711403965455
    ],
    [
      -0.41832637665720057,
      -0.5835849797431815,
      0.6960112168715447
    ],
    [
      -0.3692418086018019,
      -0.6671818940591244,
      0.6469380240951599
    ],
    [
      -0.373771264718646,
      -0.6696730548347262,
      0.6417421922384017
    ],
    [
      -0.4322707782292896,
      -0.6491126875318853,
      0.6259350550769442
    ],
    [
      -0.42872816127261537,
      -0.6193584202085313,
      0.6577136999094627
    ],
    [
      -0.3702967881921423,
      -0.70057629713884,
      0.6099779836533573
    ],
    [
      -0.3707856942507012,
      -0.7008793924814635,
      0.6093324594454493
    ],
    [
      -0.43837566645800763,
      -0.6819948853311615,
      0.5854141708565258
    ],
    [
      -0.4362417718348231,
      -0.6520124930029622,
      0.6201393597204392
    ],
    [
      -0.36709498502800236,
      -0.7316515259361948,
      0.5743929983578565
    ],
    [
      -0.3672524223103846,
      -0.7317461606475897,
      0.5741717640956117
    ],
    [
      -0.429392741288702,
      -0.7133674444960753,
      0.5538309876322494
    ],
    [
      -0.44047810402011794,
      -0.6990806409961309,
      0.5632630799753175
    ],
    [
      -0.4440955938016724,
      -0.6875964888199914,
      0.5744477105258228
    ],
    [
      -0.4261954871785386,
      -0.7284413668832206,
      0.5364052402073952
    ],
    [
      -0.36359599215546756,
      -0.7579879503143611,
      0.5415276739620191
    ],
    [
      -0.4084475962623519,
      -0.7484633659894876,
      0.5224683252400983
    ],
    [
      -0.35913551243884184,
      -0.7957442630652846,
      0.4876604879462531
    ],
    [
      -0.4085384304111841,
      -0.7849560243089287,
      0.46576860218169125
    ],
    [
      -0.35827934913763837,
      -0.7626622418044894,
      0.5384999655592011
    ],
    [
      -0.35341162079635685,
      -0.7908968112414744,
      0.499582285768981
    ],
    [
      -0.32018677778666843,
      -0.8338385951133372,
      0.44965945406496977
    ],
    [
      -0.3979284437624033,
      -0.8215093024075735,
      0.4083814634660269
    ],
    [
      -0.39988327418113606,
      -0.8197379350495344,
      0.4100281513151258
    ],
    [
      -0.4178860884493743,
      -0.7862719998666847,
      0.45513466062927566
    ],
    [
      -0.31772904704919763,
      -0.8300977260727407,
      0.4582423134435251
    ],
    [
      -0.3742304869265757,
      -0.8477673650080283,
      0.37582181613371346
    ],
    [
      -0.3878077994378979,
      -0.8383122995995552,
      0.38319394441358373
    ],
    [
      -0.31254555729015127,
      -0.8528457651645901,
      0.4182934083379914
    ],
    [
      -0.29783549107884955,
      -0.8637469643683566,
      0.4064913305327302
    ],
    [
      -0.29428277716132395,
      -0.8714464431577473,
      0.3924012535325664
    ],
    [
      -0.35330414783752273,
      -0.8710735042687426,
      0.34118489017213927
    ],
    [
      -0.2709699635109324,
      -0.8871606317290888,
      0.37352549094396237
    ],
    [
      -0.27010361803590366,
      -0.8886656125952859,
      0.3705637118156064
    ],
    [
      -0.3391866765298395,
      -0.8925177646578162,
      0.2972615653508825
    ],
    [
      -0.35113381742181465,
      -0.8800952491967549,
      0.31958941566341914
    ],
    [
      -0.24360480867088885,
      -0.9050451696147406,
      0.34864012699264146
    ],
    [
      -0.23931757445211432,
      -0.9064254284118981,
      0.3480230470624954
    ],
    [
      -0.21729257504820737,
      -0.9187488081936631,
      0.3296734206326663
    ],
    [
      -0.18183404151194657,
      -0.9283162484961167,
      0.3242920352483665
    ],
    [
      -0.17229518723307535,
      -0.9367276933174834,
      0.30472216366458504
    ],
    [
      -0.12491601461503278,
      -0.9466857647137008,
      0.29695462983616316
    ],
    [
      -0.12138336126471012,
      -0.9480094031831326,
      0.2941840428786738
    ],
    [
      -0.09301028561766278,
      -0.9833387948877889,
      0.15618547063652177
    ],
    [
      -0.09946707574114455,
      -0.9827322275604611,
      0.15602458061972013
    ],
    [
      0.004044082712522246,
      -0.9627534382622305,
      0.270350628830909
    ],
    [
      0.005682911176453461,
      -0.9639175499578626,
      0.26614030398230176
    ],
    [
      0.006972537026581323,
      -0.9774982336890373,
      0.2108283350553837
    ],
    [
      0.12882599801637903,
      -0.9449267886586378,
      0.30086080886409566
    ],
    [
      0.1356964834195938,
      -0.9444260689847366,
      0.29940919259367016
    ],
    [
      0.15817987910664588,
      -0.9721530339257101,
      0.17290923767932112
    ],
    [
      0.15065188847887065,
      -0.9742388092336026,
      0.16781761254660382
    ],
    [
      0.1171210434149204,
      -0.9784510059228875,
      0.1700479055968936
    ],
    [
      0.028395179753354583,
      -0.980552222360549,
      0.19419333920236098
    ],
    [
      0.2814262113334759,
      -0.9274885076826682,
      0.24609826429916717
    ],
    [
      0.22740001703257057,
      -0.9529812511788756,
      0.20028970806092727
    ],
    [
      0.18270868373619054,
      -0.9326243538282457,
      0.31117414984833774
    ],
    [
      0.3846721333531359,
      -0.8565035330149237,
      0.3441352172540625
    ],
    [
      0.45859363986860746,
      -0.8296484804536134,
      0.3183948371960074
    ],
    [
      0.3300353197705018,
      -0.9040470945722474,
      0.27161652839888195
    ],
    [
      0.3334755350519735,
      -0.8965243636656276,
      0.29161298475160824
    ],
    [
      0.5011241672957445,
      -0.8014831993416266,
      0.32634222853510253
    ],
    [
      0.5062451504882117,
      -0.7989906198305724,
      0.3245455854420538
    ],
    [
      0.5263812532302897,
      -0.7746181885510026,
      0.3505558988430706
    ],
    [
      0.5400189301685655,
      -0.7640057079236928,
      0.35309323601509984
    ],
    [
      0.5544911345299017,
      -0.7443143457796231,
      0.3722038908909932
    ],
    [
      0.5573337182212261,
      -0.7418765627957584,
      0.3728247471776169
    ],
    [
      0.5776043601466156,
      -0.7116981803774629,
      0.39982359008321017
    ],
    [
      0.5784014276661014,
      -0.7109296167367268,
      0.40003858378959684
    ],
    [
      0.18674935208125962,
      -0.9782054150872816,
      0.0907680857523662
    ],
    [
      0.16065579078852518,
      -0.9779059870514004,
      0.13375199951828765
    ],
    [
      0.28527430565245754,
      -0.9260715524843446,
      0.24700212592960427
    ],
    [
      -0.22037798188881608,
      -0.9743598681186205,
      0.045347464079890584
    ],
    [
      -0.24455001912027427,
      -0.9677415036647841,
      0.060594308585015896
    ],
    [
      -0.26382042294855623,
      -0.9580330126677633,
      0.11212283921652232
    ],
    [
      -0.1330346886800334,
      -0.9901391870390445,
      0.043888060990053886
    ],
    [
      -0.2176411151316422,
      -0.9753036299599106,
      0.037618803692797104
    ],
    [
      -0.03681485241542587,
      -0.9993032199453591,
      -0.006143390632842877
    ],
    [
      -0.05981146203493498,
      -0.9981702565900058,
      -0.008872872606177721
    ],
    [
      -0.09768864153692426,
      -0.9951939213186247,
      0.006781466296400328
    ],
    [
      0.029379462195693,
      -0.9911641114276416,
      0.12934663280868816
    ],
    [
      -0.021919406529410244,
      -0.9996765872690521,
      -0.012894203484505849
    ],
    [
      0.8512047136131239,
      0.4810123708021518,
      -0.20994674243267697
    ],
    [
      0.881166529367624,
      0.4515727664431151,
      -0.14009848010998563
    ],
    [
      0.8588063848878805,
      0.488212057550766,
      -0.15524361544958037
    ],
    [
      0.850739230945377,
      0.48388429901310054,
      -0.20517978969447506
    ],
    [
      0.8440955798240518,
      0.4773721366017027,
      -0.24416898926322156
    ],
    [
      0.8454095345921803,
      0.4730060306711701,
      -0.24808872156818695
    ],
    [
      0.8407256257640696,
      0.4592019302816717,
      -0.2869041815819353
    ],
    [
      0.8191311693271008,
      0.47628012189917834,
      -0.31965821265927186
    ],
    [
      0.8035820843130278,
      0.49548585570055614,
      -0.3297720433448195
    ],
    [
      0.7950272521780715,
      0.4948489727590104,
      -0.3507936180342184
    ],
    [
      0.773438650398501,
      0.5053475415242804,
      -0.38264411186520414
    ],
    [
      0.7624723615588465,
      0.513930043841322,
      -0.3930799001426206
    ],
    [
      0.7583434923553322,
      0.4879594636775583,
      -0.43221604483154924
    ],
    [
      0.74274713856715,
      0.4794234405554153,
      -0.4674182846191612
    ],
    [
      0.7419787446178315,
      0.47160280933050197,
      -0.47650638271373147
    ],
    [
      0.7748773564029777,
      0.41141164579778716,
      -0.4799015943252208
    ],
    [
      0.7231066636394301,
      0.46296012857673224,
      -0.5126252747850691
    ],
    [
      0.7196921078083196,
      0.43085690112501557,
      -0.544431447210176
    ],
    [
      0.720081315232778,
      0.42918571146416956,
      -0.545236209846363
    ],
    [
      0.7287114524681065,
      0.42229910400053855,
      -0.5391132402400862
    ],
    [
      0.6650000853374587,
      -0.35031602004375845,
      0.6595859099479564
    ],
    [
      0.5661545702658184,
      -0.6834909019416219,
      0.46077021337121477
    ],
    [
      0.5554519161690903,
      -0.6835590463664925,
      0.4735189531102395
    ],
    [
      0.5539804699775759,
      -0.6709998552634822,
      0.49281318277802816
    ],
    [
      0.5571263606846129,
      -0.6642819083927592,
      0.49833699883953264
    ],
    [
      0.5532458732862087,
      -0.6405265175263843,
      0.5325831240635615
    ],
    [
      0.5541344838711865,
      -0.6385208683993945,
      0.5340656087067365
    ],
    [
      0.5498147222802533,
      -0.6121689234964781,
      0.568289521519666
    ],
    [
      0.5488557890319782,
      -0.611670674785499,
      0.5697510934202206
    ],
    [
      0.5437455072028748,
      -0.5842142551926451,
      0.6025234662869084
    ],
    [
      0.5372431759076692,
      -0.5813398139059164,
      0.6110759287588373
    ],
    [
      0.5322837026799726,
      -0.5561563481827662,
      0.6382508724923988
    ],
    [
      0.5223434447778232,
      -0.5519484791036974,
      0.6500078477316659
    ],
    [
      0.5172887262269318,
      -0.5267378859170969,
      0.6745069112011424
    ],
    [
      0.5026794464578538,
      -0.5208724807595109,
      0.6899313247680952
    ],
    [
      0.4877108783819579,
      -0.4522566490161188,
      0.7467275423664311
    ],
    [
      0.4199487532224389,
      -0.4184766866668683,
      0.8053075855741325
    ],
    [
      0.4154785653427874,
      -0.38824547764366973,
      0.8225831330813548
    ],
    [
      0.3837774158027922,
      -0.37700958264432805,
      0.8429582846820359
    ],
    [
      0.380355096602886,
      -0.34293371621995433,
      0.8589100457951235
    ],
    [
      0.34189188070561566,
      -0.3297515117284438,
      0.8799851603410043
    ],
    [
      0.3407584306502169,
      -0.2911836454867932,
      0.8939215718069583
    ],
    [
      0.28894021723540625,
      -0.2767377471552465,
      0.9164768246733767
    ],
    [
      0.2928767201683087,
      -0.2308918203318686,
      0.927853541291561
    ],
    [
      0.23242713219131697,
      -0.21610302027760478,
      0.948302226533407
    ],
    [
      -0.024273352072415804,
      -0.1183567377145105,
      0.9926744113840887
    ],
    [
      0.07593390422829248,
      -0.03670649026920381,
      0.9964369903615408
    ],
    [
      0.1975562807539961,
      -0.057200980152781994,
      0.9786212565667115
    ],
    [
      0.6347733225686794,
      -0.3540355183788039,
      0.6868199769090667
    ],
    [
      0.6447078994051547,
      -0.3483045998319554,
      0.6804672146257262
    ],
    [
      0.6588968955232083,
      -0.3467549200343715,
      0.6675446850225346
    ],
    [
      0.5533777719896651,
      -0.19861634327854397,
      0.8089033252808483
    ],
    [
      0.5720478323051654,
      -0.1953938506565925,
      0.7966068796342086
    ],
    [
      0.6038957102354167,
      -0.2517967083629114,
      0.756246248795235
    ],
    [
      0.5167587157194697,
      -0.15710086183466263,
      0.8415935770541327
    ],
    [
      0.4605086686400305,
      -0.11466131467898426,
      0.88021846664534
    ],
    [
      0.5182130481664499,
      -0.13878197786058263,
      0.8439163461689443
    ],
    [
      0.38979341397453254,
      -0.09104973135622299,
      0.9163902230174863
    ],
    [
      0.3933580468252678,
      -0.08907480097585156,
      0.9150601766162283
    ],
    [
      0.4597809845847521,
      -0.11259326532798672,
      0.8808655986114213
    ],
    [
      0.30401329693783796,
      -0.048988992214590805,
      0.951407375379645
    ],
    [
      0.28388475962453574,
      -0.013933657680790782,
      0.9587571623912668
    ],
    [
      0.29760343992375016,
      -0.02237826961765264,
      0.9544272657434251
    ],
    [
      0.7263105966232386,
      -0.15268492703972822,
      0.6701941735703676
    ],
    [
      0.7046061667290353,
      -0.14213447678004948,
      0.6952179085134937
    ],
    [
      0.7131878145339756,
      -0.14014736675312522,
      0.6868201051166284
    ],
    [
      0.7512099346903097,
      -0.1461283953812197,
      0.6436848033672152
    ],
    [
      0.7344476965611778,
      -0.057965064304308825,
      0.6761853535356837
    ],
    [
      0.7457381740036205,
      -0.024765529080420384,
      0.6657786752390863
    ],
    [
      0.013379108610444706,
      0.5355094136984416,
      0.8444232749593897
    ],
    [
      -0.024795508100744847,
      0.4848876971655939,
      0.8742248588981403
    ],
    [
      -0.04507911822967733,
      0.36986326891743193,
      0.9279919371445778
    ],
    [
      -0.052714747118040715,
      0.37009488445471045,
      0.9274971331151033
    ],
    [
      0.7341814293047909,
      -0.05804016050342313,
      0.676468010058651
    ],
    [
      0.6643555619126448,
      -0.05817417645520956,
      0.7451492820566173
    ],
    [
      0.7044806060074561,
      -0.04529868595789141,
      0.7082761501066204
    ],
    [
      0.659845897524052,
      -0.08401501983346182,
      0.7466892713592859
    ],
    [
      0.7104997839470126,
      0.02782632386658225,
      0.7031470349161122
    ],
    [
      0.6594301680387105,
      -0.05027881535143054,
      0.7500825915906161
    ],
    [
      0.6626942617557758,
      0.025954047515288233,
      0.7484401798764825
    ],
    [
      0.6510934357625326,
      0.05403449237113906,
      0.7570717347392742
    ],
    [
      0.615852095910821,
      0.04564657749827559,
      0.7865383562960823
    ],
    [
      0.5856859625387139,
      0.07407558275263268,
      0.8071460594743421
    ],
    [
      0.48722879780996253,
      0.2103240710739064,
      0.8475682177332731
    ],
    [
      0.5770205426145948,
      0.07442625108358476,
      0.8133314370847851
    ],
    [
      0.4982278342180962,
      0.1841060187638571,
      0.8472744532117485
    ],
    [
      0.3114168009396242,
      0.3117140117202742,
      0.8976936843878224
    ],
    [
      -0.04171380550892793,
      0.05683742933525496,
      0.9975116365519368
    ],
    [
      -0.005515559655042072,
      0.111291991048936,
      0.9937724444409068
    ],
    [
      0.07316620794329778,
      0.16184191800458916,
      0.9841005535979511
    ],
    [
      0.12698730863046082,
      0.14266116947177687,
      0.9815915719746869
    ],
    [
      0.10587410494680072,
      0.013530819372546746,
      0.9942874789661295
    ],
    [
      0.07776511424130908,
      0.29547474340742086,
      0.952180268129599
    ],
    [
      0.2401804468532331,
      0.2434484487866965,
      0.9397053824112813
    ],
    [
      0.21601909184786933,
      0.20114802152500685,
      0.9554450404883565
    ],
    [
      0.06704274028922204,
      0.16801098847339502,
      0.9835027090591589
    ],
    [
      0.0502627545521633,
      0.28624343296254384,
      0.9568376835130641
    ],
    [
      0.2938615607390673,
      0.2867937331705428,
      0.9118084983888355
    ],
    [
      0.5927939731738234,
      0.6045770582530682,
      0.5320544013565329
    ],
    [
      0.6253172131594775,
      0.6170820817349857,
      0.47769036763167105
    ],
    [
      0.5156040285695865,
      0.6940329071160285,
      0.5024647346460119
    ],
    [
      0.564180283573511,
      0.6866311027364423,
      0.45851754206556783
    ],
    [
      0.6252179188525222,
      0.6183508430873204,
      0.4761772661508748
    ],
    [
      0.4809824088368111,
      0.8029420078795697,
      0.35205120987132527
    ],
    [
      0.47976145608455806,
      0.7849627788525729,
      0.39199793503495833
    ],
    [
      0.4686725506301249,
      0.7798373154573257,
      0.4149696394992827
    ],
    [
      0.4017718583369461,
      0.8219671411533297,
      0.4036699056316919
    ],
    [
      0.40124085026067763,
      0.8243741795798062,
      0.3992655659134783
    ],
    [
      0.43809271838418423,
      0.8436135466083005,
      0.3104689261064957
    ],
    [
      0.4536960951266506,
      0.8347512426560526,
      0.3120099616214283
    ],
    [
      0.4670504705248247,
      0.825355559624751,
      0.31725708530945973
    ],
    [
      0.46080364690829834,
      0.7694833763486139,
      0.4422163865339568
    ],
    [
      0.4462143301923817,
      0.7704078896195039,
      0.4553728748432283
    ],
    [
      0.38470471746644413,
      0.8113588458486404,
      0.4401126033439915
    ],
    [
      0.46770256141650035,
      0.7729200037727089,
      0.4287761441736709
    ],
    [
      0.42725355347005317,
      0.7568924368571603,
      0.49453841112257596
    ],
    [
      0.3632382539309515,
      0.8002799118125701,
      0.4770849333509273
    ],
    [
      0.38097203240246774,
      0.8115298580859913,
      0.44303453585704106
    ],
    [
      0.33997982531241905,
      0.7872496968756546,
      0.5144430319770372
    ],
    [
      0.36081381999295115,
      0.8002729125677288,
      0.47893282693135414
    ],
    [
      0.33591299854602885,
      0.7870398156480591,
      0.5174270827783222
    ],
    [
      0.3186651788763151,
      0.7676455748511388,
      0.5560330702244164
    ],
    [
      0.31499057294217425,
      0.7740651920601022,
      0.5491848663232791
    ],
    [
      0.23043800476328033,
      0.7633769759547023,
      0.603451670428521
    ],
    [
      0.2699703532200102,
      0.7880643695334046,
      0.5532364393766741
    ],
    [
      0.15881390286613387,
      0.7363285076182606,
      0.6577221853678735
    ],
    [
      0.204956249768123,
      0.7704189317521623,
      0.6036949604550661
    ],
    [
      0.2125205342203502,
      0.7698132954882494,
      0.6018492441003961
    ],
    [
      0.13080467014929914,
      0.7585588473670807,
      0.6383405152019251
    ],
    [
      0.16346478603325243,
      0.7850152625593427,
      0.5975201262518185
    ],
    [
      0.12642092076798978,
      0.7595428336372835,
      0.6380536299265286
    ],
    [
      0.09443719450154182,
      0.7859780478245014,
      0.6109992836596977
    ],
    [
      0.14502766800356173,
      0.8024556752315889,
      0.5788193714813485
    ],
    [
      0.07262934335833042,
      0.79006858755567,
      0.6087007519636609
    ],
    [
      0.059399170705480966,
      0.8077132907933136,
      0.5865756374035127
    ],
    [
      0.06012147041546486,
      0.8117635471014981,
      0.5808832519467885
    ],
    [
      0.13304482810763477,
      0.8251664980902502,
      0.5489984737167154
    ],
    [
      0.14364327452035475,
      0.8192806830312259,
      0.5551087930279595
    ],
    [
      0.04253477463000315,
      0.834044944443786,
      0.5500543823977196
    ],
    [
      0.04371681296686304,
      0.8384302500156366,
      0.543252755283153
    ],
    [
      0.11489838834784209,
      0.8478319057882914,
      0.5176672868575551
    ],
    [
      0.11740333180068581,
      0.8465235778251108,
      0.5192439598765416
    ],
    [
      0.09498507766939601,
      0.8703702590685113,
      0.48314950807089874
    ],
    [
      0.1005192965478996,
      0.8677772820254741,
      0.4866810658141492
    ],
    [
      0.0271259093656595,
      0.8586291840661261,
      0.5118789987008889
    ],
    [
      0.027855473285690355,
      0.8610919466022127,
      0.5076856626937994
    ],
    [
      0.01071939430283449,
      0.8809361421006603,
      0.4731137369878258
    ],
    [
      0.01096749817026757,
      0.8817899411871327,
      0.4715148074080792
    ],
    [
      0.07809985521861648,
      0.890656463892721,
      0.44791905065641635
    ],
    [
      0.08108051671458488,
      0.8893898280875558,
      0.4499018598579958
    ],
    [
      0.06388397357629377,
      0.9090338619052654,
      0.4117964009431148
    ],
    [
      -0.005971206819940375,
      0.9000889537153225,
      0.4356652615125166
    ],
    [
      -0.005844767284560713,
      0.9005706299088738,
      0.434670426002188
    ],
    [
      -0.02979978545479209,
      0.9237936503959258,
      0.3817293075924596
    ],
    [
      -0.02195319316239407,
      0.9332974700549783,
      0.35843254553535087
    ],
    [
      0.03000713448086627,
      0.9466908836735654,
      0.32074279828175606
    ],
    [
      0.06404868039620533,
      0.9093307191101481,
      0.4111148377547637
    ],
    [
      0.08595293057884351,
      0.74338041309262,
      0.6633231905754194
    ],
    [
      0.056565747286052855,
      0.773078765323518,
      0.6317828256923699
    ],
    [
      -0.002301195716440972,
      0.7574640458332863,
      0.6528728235790979
    ],
    [
      -0.04752835641476962,
      0.7132967084357951,
      0.6992487833891247
    ],
    [
      -0.05085226772111463,
      0.7309506351075035,
      0.6805330380690987
    ],
    [
      -0.020394875282859885,
      0.7621612092128716,
      0.6470659473603676
    ],
    [
      -0.08476451265289262,
      0.6780964320777373,
      0.7300686311561128
    ],
    [
      -0.10066556910507053,
      0.6470189647880881,
      0.7557995120409269
    ],
    [
      -0.08965644321500112,
      0.676787653070289,
      0.7306984294780203
    ],
    [
      -0.12426155680618509,
      0.6208435216825429,
      0.774023505511894
    ],
    [
      -0.118768579338258,
      0.6342715759560437,
      0.763932976442442
    ],
    [
      -0.15559005531032818,
      0.5969921044094487,
      0.7870147152126871
    ],
    [
      -0.23819576499338058,
      0.5643299946281137,
      0.7904393934402887
    ],
    [
      -0.23817149991398698,
      0.5658070515469521,
      0.789390091810422
    ],
    [
      -0.22669849616560384,
      0.5757628839876047,
      0.7855602416482963
    ],
    [
      -0.25911136751933883,
      0.4948983177653423,
      0.8294196490892245
    ],
    [
      0.7055108511285471,
      0.5870671872455103,
      0.3969969226574908
    ],
    [
      0.649080867870971,
      0.6711196176893248,
      0.35817940437216883
    ],
    [
      0.6597089002319718,
      0.6175592118610271,
      0.4282578508332441
    ],
    [
      0.6374357136561645,
      0.6828555743694401,
      0.35690891766421057
    ],
    [
      0.6204301834979788,
      0.7059698526597532,
      0.34157422991237313
    ],
    [
      0.6569325846502113,
      0.7100469715701537,
      0.253520960452674
    ],
    [
      0.7191363098565564,
      0.6578668119109631,
      0.22372801709218398
    ],
    [
      0.7268509785189098,
      0.6482042558237676,
      0.22697774727505582
    ],
    [
      0.5698873958744002,
      0.7791236745521543,
      0.2611410648975826
    ],
    [
      0.5714740660966948,
      0.7791150150183226,
      0.2576765126120526
    ],
    [
      0.6051636949341205,
      0.7563922627155848,
      0.24828944246117368
    ],
    [
      0.5768481813998322,
      0.7408809855164632,
      0.34400805356250125
    ],
    [
      0.5702432437620528,
      0.7815718378800552,
      0.2529191672778572
    ],
    [
      0.5147356252724197,
      0.8367699848124491,
      0.18671697456949357
    ],
    [
      0.5438883105947598,
      0.813035393327537,
      0.20774733402649215
    ],
    [
      0.4168732891388995,
      0.8593177093706174,
      0.29629332622344146
    ],
    [
      0.4163302337166827,
      0.8602056853455006,
      0.2944746430385642
    ],
    [
      0.424922377047146,
      0.8822504311635535,
      0.20267005253940926
    ],
    [
      0.438402111322272,
      0.8837357226676666,
      0.1637521336326073
    ],
    [
      0.44207181115671024,
      0.8830472436452584,
      0.15748040916614797
    ],
    [
      0.485019503875299,
      0.8627053953002729,
      0.14316243145587756
    ],
    [
      0.7805246657809,
      -0.5728905568848565,
      -0.250155263665935
    ],
    [
      0.7686646219874111,
      -0.5894529017592667,
      -0.24839479767605926
    ],
    [
      0.7416954163398463,
      -0.634715740626514,
      -0.21684980512188062
    ],
    [
      0.7970537145736556,
      -0.5322456868792299,
      -0.28534173351052977
    ],
    [
      0.7869819383973983,
      -0.5479467093194892,
      -0.2835733280515236
    ],
    [
      0.8088043074869787,
      -0.5051495782918002,
      -0.30109715332783393
    ],
    [
      0.8164184342259544,
      -0.47901806329165564,
      -0.32249439575960426
    ],
    [
      0.8100374227641789,
      -0.4954760619775469,
      -0.3135966290137523
    ],
    [
      0.8213679916432609,
      -0.45319244190152436,
      -0.3463686373031624
    ],
    [
      0.8171364505110972,
      -0.46505975792119336,
      -0.3405986535622335
    ],
    [
      0.8207687872429977,
      -0.42786631398658004,
      -0.3785089368075687
    ],
    [
      0.8200081154985817,
      -0.43023316418025315,
      -0.37747333012533774
    ],
    [
      0.8181325502271009,
      -0.4043321988342814,
      -0.40886990992825045
    ],
    [
      0.8108283471031149,
      -0.38399443221150853,
      -0.4417076720689733
    ],
    [
      0.8139169189093253,
      -0.403490062950207,
      -0.4180131794735528
    ],
    [
      0.7985679718071551,
      -0.36854244576855333,
      -0.47588408259863013
    ],
    [
      0.8015830089217502,
      -0.38234490629252693,
      -0.45964883600430456
    ],
    [
      0.7819524394513976,
      -0.3541969473360268,
      -0.5129277775026893
    ],
    [
      0.7850643798706823,
      -0.3659903056743856,
      -0.49972493995260103
    ],
    [
      0.7600160231740501,
      -0.3496889942077219,
      -0.5478076777927573
    ],
    [
      0.7382893416203348,
      -0.33082984970726553,
      -0.5877758574426827
    ],
    [
      0.7464353688627822,
      -0.35813213125275833,
      -0.5608704098765056
    ],
    [
      0.6833722429042818,
      -0.292212910244369,
      -0.669039604742864
    ],
    [
      0.6769625439172704,
      -0.31793397966766623,
      -0.6638069739809441
    ],
    [
      0.33109033602929794,
      -0.86950267225224,
      -0.36653007016371825
    ],
    [
      0.32314415865924595,
      -0.8905131851363974,
      -0.32025633455505054
    ],
    [
      0.3867387795696489,
      -0.8648371472517918,
      -0.3201403209693541
    ],
    [
      0.3923946983506416,
      -0.8571910496881949,
      -0.33354145925320816
    ],
    [
      0.3452838358207102,
      -0.8600321282562544,
      -0.37566449271651225
    ],
    [
      0.3894316984561245,
      -0.8746122437830222,
      -0.2887843057757906
    ],
    [
      0.40706452905137536,
      -0.8756060128790767,
      -0.26002419002505955
    ],
    [
      0.43204820962167584,
      -0.8733638159435728,
      -0.22487772135804285
    ],
    [
      0.427648521528761,
      -0.8700929504841294,
      -0.2450612159279541
    ],
    [
      0.46395299147322944,
      -0.8627707635667003,
      -0.20093340000501256
    ],
    [
      0.5450294367839758,
      -0.8177374869084777,
      -0.18506300425409009
    ],
    [
      0.6823265257106093,
      -0.6938727884046092,
      -0.23015443906929467
    ],
    [
      0.6718819367415167,
      -0.7036721093677634,
      -0.2311281583416237
    ],
    [
      0.6401576574276229,
      -0.7494931313952019,
      -0.16869564199525983
    ],
    [
      0.7119941684815398,
      -0.6573491756819898,
      -0.2468934289900992
    ],
    [
      -0.2498481820549957,
      -0.8606608001737603,
      -0.44366527131169103
    ],
    [
      -0.25756734350008265,
      -0.8368337111678861,
      -0.4830821911593237
    ],
    [
      -0.2998043121257985,
      -0.8122680329363873,
      -0.5003379029220442
    ],
    [
      -0.2410860360791624,
      -0.8743201223562221,
      -0.4212384679141229
    ],
    [
      -0.2444109163800378,
      -0.8652542935863472,
      -0.437719443690432
    ],
    [
      -0.22029190421761297,
      -0.8902578418074738,
      -0.39863824708183365
    ],
    [
      -0.19689705852551787,
      -0.9066112495298996,
      -0.37321252734847055
    ],
    [
      -0.21901901721568348,
      -0.8907611636340879,
      -0.3982150417288654
    ],
    [
      -0.11231202194711272,
      -0.9315566039739627,
      -0.3458154179886272
    ],
    [
      -0.020437360622358847,
      -0.9276594650300923,
      -0.37286757868025294
    ],
    [
      -0.10294519121137505,
      -0.9262661271366994,
      -0.36253737645328815
    ],
    [
      0.009807211976549891,
      -0.920853661550448,
      -0.3897850081806378
    ],
    [
      0.00557225164652723,
      -0.9210496438400239,
      -0.38940532044869763
    ],
    [
      0.042403381297882,
      -0.9108630734294761,
      -0.41052456043106017
    ],
    [
      0.06582525789861406,
      -0.89949280841974,
      -0.4319487504597622
    ],
    [
      0.0473629228596406,
      -0.9060257159711177,
      -0.42056409206827833
    ],
    [
      0.08238205244463964,
      -0.8845952468026931,
      -0.4590255404322196
    ],
    [
      0.07813916963693283,
      -0.8863523765169131,
      -0.4563701730079112
    ],
    [
      -0.33471947109282785,
      -0.9365116253352349,
      0.10444544644595076
    ],
    [
      -0.3407899743425874,
      -0.9302611025993955,
      0.13592819567012407
    ],
    [
      -0.3240274980205666,
      -0.945029225203823,
      0.0438855789205696
    ],
    [
      -0.33611227631316437,
      -0.936497362066121,
      0.10000614258524151
    ],
    [
      -0.2154028961271176,
      -0.9765222528125689,
      -0.0024253044995524837
    ],
    [
      -0.34087703731014996,
      -0.9400299756491302,
      -0.012103318377639276
    ],
    [
      -0.3545316079631148,
      -0.9350430581427656,
      0.0013484710278311109
    ],
    [
      -0.21100461388307826,
      -0.9763465839584649,
      -0.04716355491997162
    ],
    [
      -0.32261245363538477,
      -0.94535049360293,
      -0.047261495998892615
    ],
    [
      -0.2136049032340196,
      -0.9768883404375478,
      -0.007881347064984053
    ],
    [
      -0.21098896324241956,
      -0.9763476818411124,
      -0.04721082029974268
    ],
    [
      -0.20854338472201284,
      -0.9747335421977015,
      -0.08002611076022743
    ],
    [
      -0.32016006658087665,
      -0.9430686212249884,
      -0.09010608984817739
    ],
    [
      -0.2023596666293282,
      -0.9743797989417676,
      -0.09815585940669867
    ],
    [
      -0.3146253726435473,
      -0.9386909235899192,
      -0.14096178510083335
    ],
    [
      -0.3176322505769723,
      -0.9385607939919801,
      -0.13495699083245508
    ],
    [
      -0.3206616549837162,
      -0.9427766673855421,
      -0.09136880461358234
    ],
    [
      -0.17701927550314664,
      -0.9746455580899439,
      -0.1368583654581733
    ],
    [
      -0.17459617754084422,
      -0.9727073667964565,
      -0.15282850967024975
    ],
    [
      -0.27616809202180226,
      -0.9421574141144629,
      -0.18992259470159417
    ],
    [
      -0.31449150640468027,
      -0.9385115010547936,
      -0.14244737550124617
    ],
    [
      -0.27356573839063597,
      -0.9274337977832614,
      -0.2550065440495651
    ],
    [
      -0.28216802534431445,
      -0.9349376509208406,
      -0.21511112096753826
    ],
    [
      -0.12112961436326529,
      -0.14271610116800162,
      -0.9823236386199873
    ],
    [
      -0.012286813751849198,
      -0.08911548079081348,
      -0.9959455132140761
    ],
    [
      -0.00980772627925992,
      -0.06873127626158504,
      -0.9975869987969395
    ],
    [
      -0.044459052491012674,
      -0.03767407433473655,
      -0.9983005843805873
    ],
    [
      -0.108564154024087,
      -0.05923924289272414,
      -0.99232279857037
    ],
    [
      -0.14541394668164984,
      -0.17421871343435247,
      -0.9739109938797001
    ],
    [
      -0.17434308054739017,
      -0.158494493891325,
      -0.9718456593880425
    ],
    [
      -0.22426130471588074,
      -0.2519520144093479,
      -0.9413963297369512
    ],
    [
      -0.2031936830104306,
      -0.2668603076055081,
      -0.9420710713154026
    ],
    [
      -0.14144154504169254,
      -0.21158982585469133,
      -0.9670698190570318
    ],
    [
      -0.13943352021931732,
      -0.18164669902216798,
      -0.9734283590350135
    ],
    [
      -0.24336967389639494,
      -0.34349634198128876,
      -0.9070730206951566
    ],
    [
      -0.19074970249998524,
      -0.2890908723726282,
      -0.9381050146476139
    ],
    [
      -0.23669662558263144,
      -0.2484059912506709,
      -0.9392918454604869
    ],
    [
      -0.24423836533817767,
      -0.25403945573325437,
      -0.9358480516770267
    ],
    [
      -0.28006273203574134,
      -0.3122720408331092,
      -0.9077725698866438
    ],
    [
      -0.27588837845874736,
      -0.3205835802891989,
      -0.9061521785441791
    ],
    [
      -0.27053075710745567,
      -0.4034104421192465,
      -0.8741127642632962
    ],
    [
      -0.23660046592799186,
      -0.36166048267596146,
      -0.9017881762327824
    ],
    [
      -0.3213940567989966,
      -0.3662162426960849,
      -0.8732648646543875
    ],
    [
      -0.3145652975299834,
      -0.38127596597667734,
      -0.8692970213675097
    ],
    [
      -0.27682311911817786,
      -0.44804693412006646,
      -0.8500722943063678
    ],
    [
      -0.2635026466861695,
      -0.42829118911215935,
      -0.8643685628933274
    ],
    [
      -0.3467652878203592,
      -0.4202651706976248,
      -0.8385290820605804
    ],
    [
      -0.34015330128829674,
      -0.4382170309354346,
      -0.8320225750668101
    ],
    [
      -0.35330243880080553,
      -0.47031768537013796,
      -0.8086894716548986
    ],
    [
      -0.2934906428071974,
      -0.5087921998699029,
      -0.809316835322337
    ],
    [
      -0.2900341252766132,
      -0.5096349381855638,
      -0.8100323672271537
    ],
    [
      -0.2692242632795328,
      -0.4895207442448281,
      -0.8293899788492639
    ],
    [
      -0.3611621437744118,
      -0.4727653486691161,
      -0.803775361031949
    ],
    [
      -0.3791639191066397,
      -0.5134111891976547,
      -0.7698335360675992
    ],
    [
      -0.3455396482513688,
      -0.5339354740347846,
      -0.7716963528834189
    ],
    [
      -0.38264082059144916,
      -0.5144413846635711,
      -0.767421699043316
    ],
    [
      -0.4005770740883029,
      -0.5528682740862361,
      -0.7306672835318144
    ],
    [
      -0.34743904888543486,
      -0.5823349746947434,
      -0.7349640022183787
    ],
    [
      -0.33097182519523344,
      -0.5583897622823519,
      -0.7606960788022996
    ],
    [
      -0.34995371577186923,
      -0.6261758586897732,
      -0.6967325102301363
    ],
    [
      -0.33991026570200356,
      -0.5989888914934782,
      -0.7250333227775173
    ],
    [
      -0.4019340954058771,
      -0.5532691719615308,
      -0.7296178494988053
    ],
    [
      -0.41800904529444555,
      -0.587149708537301,
      -0.6931981374878244
    ],
    [
      -0.4217381035276288,
      -0.5882340183805492,
      -0.6900128344116438
    ],
    [
      -0.436332252988769,
      -0.6188298623124145,
      -0.6531950447700463
    ],
    [
      -0.35144940188164986,
      -0.6632492171846825,
      -0.660744878013395
    ],
    [
      -0.3453498493398609,
      -0.6384763093707115,
      -0.6878091915155619
    ],
    [
      -0.4687991629058109,
      -0.6290268801138174,
      -0.6201229950204139
    ],
    [
      -0.4693509504322958,
      -0.6339176468877025,
      -0.6147016368065558
    ],
    [
      -0.4817217906028168,
      -0.6493805345435428,
      -0.5884292972094086
    ],
    [
      -0.4730811136669277,
      -0.6647371698823824,
      -0.5782030394838997
    ],
    [
      -0.46845394669358775,
      -0.6999825485287379,
      -0.5390503979985678
    ],
    [
      -0.48926662061801196,
      -0.716846910975459,
      -0.4967380397895582
    ],
    [
      -0.48716572492204774,
      -0.7199256853262221,
      -0.4943445802967249
    ],
    [
      -0.4825768802589665,
      -0.7448319694189892,
      -0.4608089538745455
    ],
    [
      -0.48987869104924386,
      -0.7508599623572128,
      -0.44297650613187683
    ],
    [
      -0.48598299393821115,
      -0.7666084425665538,
      -0.4196808613560254
    ],
    [
      -0.4906125577546248,
      -0.7702396008880501,
      -0.4074681280754143
    ],
    [
      -0.48480246474073263,
      -0.7894945426593022,
      -0.37638402900825907
    ],
    [
      -0.47546426506423767,
      -0.7992332756490965,
      -0.3676409984511242
    ],
    [
      -0.4701539743499609,
      -0.8113501078786416,
      -0.3473704691654904
    ],
    [
      -0.46997143164910005,
      -0.8115357310993719,
      -0.34718382822750143
    ],
    [
      -0.46149318541039847,
      -0.8291374104092394,
      -0.31552368291401534
    ],
    [
      -0.458709142184675,
      -0.8317090852445767,
      -0.3128033254264234
    ],
    [
      -0.45015407769443455,
      -0.8474249906313259,
      -0.2814821336933662
    ],
    [
      -0.4205252814096662,
      -0.8708255802549403,
      -0.2546002680064725
    ],
    [
      -0.4163141405683249,
      -0.8732621483334914,
      -0.25317139777398306
    ],
    [
      -0.3764063290881593,
      -0.8826308466496363,
      -0.281568932883091
    ],
    [
      -0.34758699142576804,
      -0.904149808125964,
      -0.24838761615138039
    ],
    [
      -0.3465168962115199,
      -0.913895406241933,
      -0.21147393950514803
    ],
    [
      -0.3444530813623253,
      -0.9151649847783105,
      -0.20934451360308906
    ],
    [
      -0.3433309095578285,
      -0.9235260926823874,
      -0.1709486550897565
    ],
    [
      0.2706716145899907,
      -0.8731412905444647,
      -0.40541480461571
    ],
    [
      0.27805444189691425,
      -0.8658295534552903,
      -0.41596263258231275
    ],
    [
      0.27726539578426557,
      -0.8458658577270237,
      -0.4556696731540526
    ],
    [
      0.25565923618139896,
      -0.8335153815014724,
      -0.48978614083658856
    ],
    [
      0.0845679220342863,
      -0.8524282828197409,
      -0.5159595809865252
    ],
    [
      0.07183260077014775,
      -0.85982158011913,
      -0.5055164960988305
    ],
    [
      0.05747298628579697,
      -0.8036851347971338,
      -0.5922727918396266
    ],
    [
      -0.2608928959943975,
      -0.42178399362329544,
      0.8683508274556088
    ],
    [
      -0.25383033241511094,
      -0.4473887495254197,
      0.8575625161725037
    ],
    [
      -0.2804492651631333,
      -0.47509436934750027,
      0.8340464914402311
    ],
    [
      -0.27352781268076953,
      -0.5044955238387318,
      0.8189424901156109
    ],
    [
      -0.291728738109995,
      -0.5246749637835818,
      0.7997565415421415
    ],
    [
      -0.28647517656620697,
      -0.5516901762237724,
      0.7833070423975157
    ],
    [
      -0.30317771394727155,
      -0.5693733744140757,
      0.7641316864742852
    ],
    [
      -0.29859096686190734,
      -0.5956270116403724,
      0.7457022847710949
    ],
    [
      -0.3123873636380841,
      -0.6096723955101344,
      0.728500998758534
    ],
    [
      -0.307801440187157,
      -0.6369441669018193,
      0.7067958698722421
    ],
    [
      -0.3166586981509236,
      -0.6459308188480399,
      0.6946226645795995
    ],
    [
      -0.3139682873328086,
      -0.6819147668556794,
      0.6606180176875798
    ],
    [
      -0.3112498989470267,
      -0.6786680686805538,
      0.6652316536056239
    ],
    [
      -0.30805022272441096,
      -0.714018211969535,
      0.6287153992509402
    ],
    [
      -0.30840302144016396,
      -0.7144858501817667,
      0.6280107851435481
    ],
    [
      -0.30811058432403005,
      -0.7162897550706019,
      0.6260965217986776
    ],
    [
      -0.33554067971595164,
      -0.7388150814169886,
      0.5844353922603983
    ],
    [
      -0.3257518778132383,
      -0.76762582265986,
      0.5519386836297326
    ],
    [
      -0.3169254181703905,
      -0.7580275742880929,
      0.5700460296646517
    ],
    [
      -0.3064033562266609,
      -0.7869243202175383,
      0.5355997549879977
    ],
    [
      -0.310965469254591,
      -0.7941465064971557,
      0.5221415547048855
    ],
    [
      -0.2904280831076122,
      -0.8137078802284754,
      0.5035186334154069
    ],
    [
      -0.2977656510667929,
      -0.8305950830391304,
      0.4705820067490775
    ],
    [
      -0.2553069066424208,
      -0.8638049163016605,
      0.4343494560762791
    ],
    [
      -0.28214220069838036,
      -0.8365097556091403,
      0.4697309946722818
    ],
    [
      -0.25386257109226107,
      -0.8603022007667396,
      0.44207908608565855
    ],
    [
      -0.232824524701233,
      -0.8811924656559532,
      0.4114517944654351
    ],
    [
      -0.18908162052812502,
      -0.8915428655114416,
      0.4115816562167291
    ],
    [
      -0.18922144596380394,
      -0.8914209308053096,
      0.4117814572191939
    ],
    [
      -0.173970375694775,
      -0.8986387431906002,
      0.402719154768478
    ],
    [
      -0.16636585020483613,
      -0.920261648673857,
      0.3541763711284207
    ],
    [
      -0.10595633952779172,
      -0.9272250721001574,
      0.3592031734029215
    ],
    [
      -0.0476321240153475,
      -0.9162032211364246,
      0.39787289219174826
    ],
    [
      0.0010871979163692078,
      -0.9321895494852643,
      0.3619688685939034
    ],
    [
      0.1002428935335689,
      -0.9106808566955119,
      0.4007639449156399
    ],
    [
      0.036966792407514534,
      -0.9230724769442388,
      0.38284547609594066
    ],
    [
      0.12774966424030826,
      -0.9000581853283415,
      0.4166236746872908
    ],
    [
      0.16843165838228705,
      -0.9074963911255338,
      0.38481304103255726
    ],
    [
      0.23206066842777226,
      -0.8936544539154452,
      0.38409577342889767
    ],
    [
      0.27311543591833637,
      -0.890639484673678,
      0.3635509139080006
    ],
    [
      0.3056841217247106,
      -0.8922286305236184,
      0.33239327399834745
    ],
    [
      0.46144319999184563,
      -0.7953924019168795,
      0.3929645024098013
    ],
    [
      0.3891125968114188,
      -0.8481696843032612,
      0.3594434220174026
    ],
    [
      0.4638401599731397,
      -0.7921096296872998,
      0.396755139289639
    ],
    [
      0.47790507380597563,
      -0.7805056123838789,
      0.40301083045964287
    ],
    [
      0.49203751626950837,
      -0.7739156869432505,
      0.39868984447373357
    ],
    [
      0.5189152604007657,
      -0.7506858604048018,
      0.40889814319889983
    ],
    [
      0.5219858948556556,
      -0.7358819142733519,
      0.43128706660080546
    ],
    [
      0.5304857467069767,
      -0.7274588748721902,
      0.43518784209859174
    ],
    [
      0.5347358171999238,
      -0.7065992791571506,
      0.46343830711123213
    ],
    [
      -0.493785258347675,
      -0.7791706852866352,
      0.38609475757704226
    ],
    [
      -0.5083928823527302,
      -0.7637281309767809,
      0.39781405094314604
    ],
    [
      -0.5192224462557922,
      -0.7378237567318622,
      0.43130517653540046
    ],
    [
      -0.5135375950700262,
      -0.7210592706463147,
      0.465137255726413
    ],
    [
      -0.5030643911776159,
      -0.7229368390881723,
      0.47359111585659697
    ],
    [
      -0.47608080671809,
      -0.7392238404039532,
      0.47633515433262247
    ],
    [
      -0.4244986185651897,
      -0.783171693991273,
      0.4543600120687178
    ],
    [
      -0.4794354879405802,
      -0.8007466379620765,
      0.35909112310889685
    ],
    [
      -0.4915478181608528,
      -0.7861215673988146,
      0.3746913713067546
    ],
    [
      -0.4499596818129112,
      -0.8350869829189219,
      0.31649015103506123
    ],
    [
      -0.4561967532416719,
      -0.8305373567600919,
      0.3195187339698833
    ],
    [
      -0.4767154061635052,
      -0.8082306796679586,
      0.34569580554272566
    ],
    [
      -0.4485154665150752,
      -0.8368228662222977,
      0.31394484685094437
    ],
    [
      -0.42169143334003123,
      -0.8701697167626284,
      0.25491370907991
    ],
    [
      -0.44558641666595356,
      -0.8471252864914968,
      0.2895366889868966
    ],
    [
      -0.4979679963075705,
      -0.7101691297917397,
      0.49768231005759755
    ],
    [
      -0.5212133538008292,
      -0.7151165112568507,
      0.4657735663898522
    ],
    [
      -0.5634642242663579,
      -0.6641642796353452,
      0.49131850934844135
    ],
    [
      -0.5430271975282882,
      -0.6483412729333021,
      0.5336431921760071
    ],
    [
      -0.5077014144073444,
      -0.6788395498478721,
      0.5304867004658272
    ],
    [
      -0.5388211102797339,
      -0.6282463556157576,
      0.5612293005291455
    ],
    [
      -0.5105863689590247,
      -0.6354700822369903,
      0.5792057789896019
    ],
    [
      -0.47436162097292245,
      -0.6730505745011562,
      0.5674363195210588
    ],
    [
      -0.544120952075352,
      -0.6341959460257338,
      0.5492976347638292
    ],
    [
      -0.6257187823243564,
      -0.32222147426223563,
      0.7103867446474463
    ],
    [
      -0.6974754940384582,
      -0.2961427656278231,
      0.652554516942541
    ],
    [
      -0.6981840079297178,
      -0.2880625984152882,
      0.655407530064637
    ],
    [
      -0.689589760224327,
      -0.25027919144010685,
      0.6795780226919067
    ],
    [
      -0.6690775563789322,
      -0.2313182012914491,
      0.7062769381066364
    ],
    [
      -0.6345590021663969,
      -0.23005109282889583,
      0.7378423730430623
    ],
    [
      -0.6193690421239156,
      -0.23969798816818344,
      0.7476141144511844
    ],
    [
      -0.6123692174741256,
      -0.28795551966571203,
      0.7362645993012137
    ],
    [
      -0.5908506521734146,
      -0.22233714626617693,
      0.7755396187278013
    ],
    [
      -0.5483479068936874,
      -0.27343865110823706,
      0.7902821503016626
    ],
    [
      -0.5655599417134436,
      -0.311215949860513,
      0.7637320111672058
    ],
    [
      -0.4783229897263007,
      -0.28311110732679806,
      0.831297310477718
    ],
    [
      -0.47740547185059934,
      -0.28466504732916625,
      0.8312940672687315
    ],
    [
      -0.5173801717264628,
      -0.3398184450677381,
      0.785392374737647
    ],
    [
      -0.5590158800840908,
      -0.3220170722329704,
      0.7640721503917777
    ],
    [
      -0.510946489008127,
      -0.3850240279632831,
      0.7685637145098623
    ],
    [
      -0.4425998809777577,
      -0.30724189216730047,
      0.8424415499344341
    ],
    [
      -0.43527155557069536,
      -0.3678420795625515,
      0.8217243317647133
    ],
    [
      -0.4325263275849589,
      -0.37300462051710687,
      0.8208462273890025
    ],
    [
      -0.4382761492383396,
      -0.43210153201915585,
      0.7881638681362595
    ],
    [
      -0.5140587834246064,
      -0.39694899845951553,
      0.7603782347003373
    ],
    [
      -0.5165398052551922,
      -0.3991243550685176,
      0.7575528884362254
    ],
    [
      -0.42642480196426297,
      -0.4550270875025961,
      0.7817366806723629
    ],
    [
      -0.507677412356244,
      -0.45821948724070494,
      0.7295879292423455
    ],
    [
      -0.524881175555633,
      -0.4319146279208827,
      0.7334504112312585
    ],
    [
      -0.4934464282058793,
      -0.49866758468801387,
      0.7126298214867818
    ],
    [
      -0.5000687327318878,
      -0.48919473717959394,
      0.7145766380590062
    ],
    [
      -0.48507659822931304,
      -0.5285540785340243,
      0.6966572183759573
    ],
    [
      -0.4851195491420231,
      -0.5284946060085002,
      0.6966724298120031
    ],
    [
      -0.47909651735354014,
      -0.5499773491889872,
      0.6840990004661341
    ],
    [
      -0.47618980622327184,
      -0.5909591430526644,
      0.6511609322521609
    ],
    [
      -0.4845659896878587,
      -0.562866538684678,
      0.6696096334932435
    ],
    [
      -0.49296467451282217,
      -0.6187724284738941,
      0.6116424702740866
    ],
    [
      -0.49598683630879375,
      -0.6076243787165397,
      0.6203141724946586
    ],
    [
      -0.6647089513327255,
      -0.14634423243883476,
      0.7326290846328971
    ],
    [
      -0.6547105139115248,
      -0.15233850766408838,
      0.7403695847726226
    ],
    [
      -0.6966504576681743,
      -0.159136502253526,
      0.6995382144538186
    ],
    [
      -0.6062534292579017,
      -0.14541933222840275,
      0.7818631576735662
    ],
    [
      -0.5892425507733138,
      -0.21901505879654828,
      0.7777053557604597
    ],
    [
      -0.622171625000105,
      -0.13624333059999455,
      0.7709346430870448
    ],
    [
      -0.5741938122792756,
      -0.12583725305944304,
      0.8089910084065495
    ],
    [
      -0.5129558558491942,
      -0.1576419896807248,
      0.8438159118193511
    ],
    [
      -0.5081534604294746,
      -0.1834123221389469,
      0.8415105351337853
    ],
    [
      -0.37461881770232935,
      -0.18244871278806357,
      0.9090507184009524
    ],
    [
      -0.49217456594974907,
      -0.2036372404626743,
      0.8463427620821975
    ],
    [
      -0.5091162600329812,
      -0.1460283715430523,
      0.8482195166786215
    ],
    [
      -0.4365370839040927,
      -0.05035497911875298,
      0.898275987909318
    ],
    [
      -0.38678192480319945,
      -0.26624772102742217,
      0.8828997076074021
    ],
    [
      -0.4372329820705693,
      -0.30628163054472035,
      0.8455878914580935
    ],
    [
      0.09123037735820236,
      -0.9938500817299682,
      0.0627617183672931
    ],
    [
      0.06266031841329493,
      -0.9957493799898428,
      0.06750449426659003
    ],
    [
      0.12506838137783402,
      -0.9908153476020629,
      0.05140862705550353
    ],
    [
      0.09577577495552951,
      -0.9937852342964373,
      0.05672661655733693
    ],
    [
      0.1513437515796632,
      -0.9883187499473272,
      0.017919747775732773
    ],
    [
      0.147515365293212,
      -0.9888603485840459,
      0.01986021149558812
    ],
    [
      -0.09195939285863787,
      -0.9952404728435493,
      -0.032247035200450004
    ],
    [
      -0.13567159546533988,
      -0.9849705881145912,
      -0.10689321181948587
    ],
    [
      0.014140478176197459,
      -0.9985042135346832,
      -0.05281460432903331
    ],
    [
      -0.005293786723790807,
      -0.999605505836346,
      -0.027582757726266564
    ],
    [
      0.7974909447389554,
      0.5631499737328846,
      -0.21649549682157326
    ],
    [
      0.7836533117734366,
      0.5670425793580992,
      -0.25367341236605534
    ],
    [
      0.7995628164382795,
      0.5339999855021745,
      -0.27485144724553207
    ],
    [
      0.8281382192581865,
      0.547346863252295,
      -0.12082425705028448
    ],
    [
      0.8108789360053564,
      0.5740693339751742,
      -0.11366508229056456
    ],
    [
      0.8092902550105942,
      0.5760570652156266,
      -0.11492406519109366
    ],
    [
      0.7838550948065316,
      0.6116927508384887,
      -0.10678562130495747
    ],
    [
      0.7682539160176853,
      0.6356825936603456,
      -0.07545568660311334
    ],
    [
      0.7446409728470065,
      0.6649036061739569,
      -0.05842102407807768
    ],
    [
      0.7139198630565439,
      0.695676920251207,
      -0.07969976011959778
    ],
    [
      0.6924759431357357,
      0.7045650741069284,
      -0.1551293799606384
    ],
    [
      0.7324371770967782,
      0.6583644229984954,
      -0.1734706549718453
    ],
    [
      0.6869888938953109,
      0.723528855308821,
      -0.06747040239989904
    ],
    [
      0.6378932412387378,
      0.7544902101702148,
      -0.1543915008646608
    ],
    [
      0.6562836758531453,
      0.7356297666507097,
      -0.16775155208255493
    ],
    [
      0.667087086820882,
      0.7443803620506798,
      -0.02987800512296378
    ],
    [
      0.6161402692648336,
      0.7742520926301956,
      -0.14458515016425968
    ],
    [
      0.6245453270917244,
      0.7663812850555521,
      -0.15034247678048793
    ],
    [
      0.6586013410333437,
      0.7523343275597749,
      0.015405621190419827
    ],
    [
      0.5936756296011612,
      0.8036530874074232,
      -0.04112130735010219
    ],
    [
      0.5856612820886306,
      0.8066582553211726,
      -0.07939346184984805
    ],
    [
      0.5862964437137292,
      0.798709277208906,
      -0.13535128587885953
    ],
    [
      0.4980965844977028,
      0.8670901683309752,
      -0.007377838130782481
    ],
    [
      0.49230765559262324,
      0.8697345077988411,
      -0.03456961366290663
    ],
    [
      0.5639524460260601,
      0.8258051977446018,
      -0.001847701064249588
    ],
    [
      0.5524546595771231,
      0.8335377873957635,
      0.0029336146475035752
    ],
    [
      0.570071521841518,
      0.8084693972395687,
      -0.14627266905469413
    ],
    [
      0.4846275184024263,
      0.8733904596712787,
      -0.04822108835663584
    ],
    [
      0.4842361768294343,
      0.8734281984441387,
      -0.0513664015893571
    ],
    [
      0.46395999509575875,
      0.8806975996267666,
      -0.09546130610040408
    ],
    [
      0.5085448509980476,
      0.8466933211670088,
      -0.15650097256743803
    ],
    [
      0.5594015132009683,
      0.8143509875776642,
      -0.15460406223560128
    ],
    [
      0.566439398473154,
      0.8103350958895802,
      -0.1500114669850149
    ],
    [
      0.4401314109871297,
      0.891418320052454,
      -0.10797092079508754
    ],
    [
      0.45075856931982,
      0.8735803073598742,
      -0.18350520095565837
    ],
    [
      0.4577701350609718,
      0.8679365996089814,
      -0.19269811235572182
    ],
    [
      0.4669511238579323,
      0.8634930195960926,
      -0.1906212292391277
    ],
    [
      0.420796845200904,
      0.9006425457609228,
      -0.10850354756527758
    ],
    [
      0.389751191533787,
      0.9125130448806511,
      -0.12415293641568105
    ],
    [
      0.37022698079622596,
      0.9175667738735855,
      -0.14492480178951814
    ],
    [
      0.3683731946827983,
      0.9166659468740216,
      -0.15499913316126207
    ],
    [
      0.43944898693323386,
      0.8708172559526519,
      -0.2203676351428399
    ],
    [
      0.3587596839518014,
      0.9170815957491063,
      -0.1739334237835745
    ],
    [
      0.3545820245247212,
      0.9144587791808183,
      -0.19503007220189772
    ],
    [
      0.4344993929653969,
      0.8645752927121725,
      -0.252427892167967
    ],
    [
      0.3449032365353358,
      0.9140952741630264,
      -0.21324067899974467
    ],
    [
      0.3414324778737644,
      0.9115155653570576,
      -0.22926673802535097
    ],
    [
      0.3487911042050444,
      0.9043964910194237,
      -0.24578802383187714
    ],
    [
      0.4367507925783428,
      0.8515876663720192,
      -0.2899089368495699
    ],
    [
      0.44255962345449856,
      0.8519841569453513,
      -0.27975699455407976
    ],
    [
      0.35088457813850027,
      0.8915023325827734,
      -0.28653726428518983
    ],
    [
      0.3515594106059011,
      0.8908282604829202,
      -0.2878037371880462
    ],
    [
      0.352934518921318,
      0.8776996584135768,
      -0.32416127926461025
    ],
    [
      0.422155941974988,
      0.8433856966318494,
      -0.332392730624514
    ],
    [
      0.4315763732765704,
      0.8442032847561004,
      -0.31790352001268085
    ],
    [
      0.35147278123415004,
      0.8772062722060485,
      -0.3270719187791873
    ],
    [
      0.35329975573529204,
      0.8444610722163602,
      -0.40257270164353925
    ],
    [
      0.3824247924017163,
      0.8295331669910763,
      -0.40697174719906465
    ],
    [
      0.4169579501778688,
      0.8345975961770813,
      -0.35999016686419005
    ],
    [
      0.7742658080485754,
      0.5772353697494168,
      -0.2594451510380194
    ],
    [
      0.7523105189757502,
      0.5816362847994233,
      -0.30939960446510206
    ],
    [
      0.7436504447050255,
      0.5648274955800473,
      -0.35770646671089046
    ],
    [
      0.7486558412228638,
      0.5340811594992486,
      -0.39277442186428635
    ],
    [
      0.16518381473563565,
      0.03299579522150744,
      -0.9857107003817518
    ],
    [
      0.25289017395922897,
      0.05719864556459382,
      -0.965802710112395
    ],
    [
      0.19826573368961614,
      0.11328731572325466,
      -0.9735793151771137
    ],
    [
      0.16108147533029707,
      0.058348073063336,
      -0.9852148297073133
    ],
    [
      0.34230738582607617,
      0.12192516854946986,
      -0.9316436587467878
    ],
    [
      0.290972650079868,
      0.1501181131355187,
      -0.9448806639010718
    ],
    [
      0.2753682541481891,
      0.13656803266182097,
      -0.9515889328182932
    ],
    [
      0.2729218216280146,
      0.06718410459803766,
      -0.9596874362877771
    ],
    [
      0.35436215827935325,
      0.09179524623181659,
      -0.93059179748633
    ],
    [
      0.356494349855245,
      0.09875924597726408,
      -0.9290631786134291
    ],
    [
      0.3539093288595111,
      0.1888171430093905,
      -0.916021983061532
    ],
    [
      0.42351059920663403,
      0.12783596520267385,
      -0.8968259242240595
    ],
    [
      0.4279506722039417,
      0.13747892315832314,
      -0.8932848189952757
    ],
    [
      0.3877933181820366,
      0.1822577288213273,
      -0.903547709121249
    ],
    [
      0.4660270727612572,
      0.16037329888711138,
      -0.8701144594003936
    ],
    [
      0.477666316599506,
      0.18252170480035768,
      -0.8593722809487351
    ],
    [
      0.46919748223123114,
      0.22667236504020366,
      -0.853506509403973
    ],
    [
      0.4023082057549281,
      0.23356463950518977,
      -0.8852093914747297
    ],
    [
      0.513626162313414,
      0.3735321658680319,
      -0.7724389208533783
    ],
    [
      0.4965609311974815,
      0.3751614776334856,
      -0.782739488788032
    ],
    [
      0.47629144277842056,
      0.35451201411077937,
      -0.8046537723686934
    ],
    [
      0.47422961072200664,
      0.34063579023491036,
      -0.8118334402606807
    ],
    [
      0.49069268652859166,
      0.26942337781374626,
      -0.8286324461875632
    ],
    [
      0.528636339480808,
      0.2662661158065652,
      -0.8060061886571447
    ],
    [
      0.5642254556288845,
      0.29297748497296683,
      -0.7718897774418915
    ],
    [
      0.6004061828471443,
      0.3178453188389811,
      -0.7338165771438174
    ],
    [
      0.5541177314036452,
      0.3920545043550724,
      -0.7343342599654303
    ],
    [
      0.5461554918653618,
      0.39300513550890076,
      -0.7397710065749639
    ],
    [
      0.5669645127571387,
      0.2927175617240008,
      -0.7699790064231726
    ],
    [
      0.6001057137130135,
      0.3167315484773985,
      -0.734543571592662
    ],
    [
      0.6318166956928797,
      0.33960484836949256,
      -0.6967612288350042
    ],
    [
      0.6323828868187258,
      0.34190751749703335,
      -0.695119510543209
    ],
    [
      0.5903166207747502,
      0.40796526842578984,
      -0.6964844772106217
    ],
    [
      0.5805021759472861,
      0.40949325119967184,
      -0.7037986224356997
    ],
    [
      0.6606474102853024,
      0.3609013411758076,
      -0.6582516397403251
    ],
    [
      0.6613573641574709,
      0.3640719617403657,
      -0.6557881087281198
    ],
    [
      0.6227812848620893,
      0.4220873216149994,
      -0.658775959000783
    ],
    [
      0.6126532466309333,
      0.42458075906361264,
      -0.666623715768906
    ],
    [
      0.6862665314523746,
      0.3805902249480914,
      -0.6198300803303177
    ],
    [
      0.6870611346517702,
      0.3849468906432155,
      -0.6162490475734161
    ],
    [
      0.6553274838856229,
      0.4308130857011853,
      -0.6204401454232001
    ],
    [
      0.6410316323974801,
      0.43668438610047144,
      -0.6311776241295918
    ],
    [
      0.7091635701118076,
      0.4008073122181258,
      -0.5800349379983564
    ],
    [
      0.7118505784608189,
      0.41990875699056757,
      -0.5629790313569717
    ],
    [
      0.6697495498324214,
      0.44884170194817313,
      -0.591588258074428
    ],
    [
      0.6653892060665881,
      0.49727924477124774,
      -0.5567499952131236
    ],
    [
      0.6505292293049927,
      0.49440262198570495,
      -0.5765221324403014
    ],
    [
      0.6501943652403528,
      0.4937806211504301,
      -0.5774322346267051
    ],
    [
      0.686380844573264,
      0.5144803579402315,
      -0.513995425559979
    ],
    [
      0.6722769676768641,
      0.5128059354927827,
      -0.5339229825120592
    ],
    [
      0.6996598766495746,
      0.5272400125839996,
      -0.4821763434026248
    ],
    [
      0.6913554498486714,
      0.526682588506358,
      -0.49460397585217997
    ],
    [
      0.7110054645223592,
      0.5602231490624516,
      -0.424995591358186
    ],
    [
      0.4770941193195862,
      -0.7611447491184351,
      0.4393630300788893
    ],
    [
      0.4943153339064133,
      -0.7443887039742413,
      0.44892962484173454
    ],
    [
      0.48736704245407253,
      -0.7236752258737825,
      0.4886384485343946
    ],
    [
      0.48243670221405116,
      -0.7227753383306923,
      0.49482384608846847
    ],
    [
      0.48503522651967035,
      -0.7014941849239242,
      0.5221558556149029
    ],
    [
      0.48578635613721416,
      -0.7004083256065752,
      0.5229147096916681
    ],
    [
      0.4884626121882259,
      -0.6737607435178137,
      0.5544824045797827
    ],
    [
      0.4730415856385177,
      -0.6595306773203069,
      0.5841668802063448
    ],
    [
      0.480647584631433,
      -0.6474859627871834,
      0.5913880514362152
    ],
    [
      0.4828542073614171,
      -0.6166499262173986,
      0.6217673865115914
    ],
    [
      0.47536998897286875,
      -0.6107192280096662,
      0.6332814525337152
    ],
    [
      0.4770832081543785,
      -0.5833561299518139,
      0.6573334299613618
    ],
    [
      0.46566592978334104,
      -0.5775107622319876,
      0.6705494473528744
    ],
    [
      0.4680800051952739,
      -0.5479305613925548,
      0.6933059992733599
    ],
    [
      0.39175164526860984,
      -0.5305393246384543,
      0.7517038468981717
    ],
    [
      0.37671119803270564,
      -0.5370183705376043,
      0.7547846997534462
    ],
    [
      0.29755105932755843,
      -0.5138077749364296,
      0.8046520599041073
    ],
    [
      0.2544493779881011,
      -0.5103399980527963,
      0.8214673459297944
    ],
    [
      0.21907563167306807,
      -0.5024708730907371,
      0.8363784366556078
    ],
    [
      0.11838648948366973,
      -0.49443772279462433,
      0.8611132198412699
    ],
    [
      0.07170442465186733,
      -0.49511727400590033,
      0.8658622063967862
    ],
    [
      0.06123604987176557,
      -0.4515272596522297,
      0.8901535148428336
    ],
    [
      0.03216358321578598,
      -0.3841894073490621,
      0.9226938837965155
    ],
    [
      0.6108473407595361,
      -0.2489929174894541,
      0.751577044172514
    ],
    [
      0.6377504864547238,
      -0.27521216558199957,
      0.7193973734608914
    ],
    [
      0.685954363672592,
      -0.2660906182804651,
      0.677246184058389
    ],
    [
      0.6515511274126514,
      -0.19726003959262123,
      0.7325091160847218
    ],
    [
      0.6326070274940483,
      -0.130686249526488,
      0.7633671809488831
    ],
    [
      0.5737221707925587,
      -0.19089391045956178,
      0.7964938076912657
    ],
    [
      0.6226139131918071,
      -0.13163256906153517,
      0.7713784945551989
    ],
    [
      0.553327245208337,
      -0.10475840265641347,
      0.8263501901633651
    ],
    [
      0.5592835113950376,
      -0.09393604278769233,
      0.8236370400528534
    ],
    [
      0.4694790881961757,
      -0.0887617856238803,
      0.8784706774613185
    ],
    [
      0.5240151287379197,
      -0.028421048158519268,
      0.8512346262196766
    ],
    [
      0.5489842830164638,
      -0.03554043824493578,
      0.8350767235711082
    ],
    [
      0.5568039587938207,
      -0.04298127635628217,
      0.8295311696098672
    ],
    [
      0.4111454157016632,
      -0.03474399730499308,
      0.9109074057217765
    ],
    [
      0.44406158003167917,
      -0.03676308480191393,
      0.8952417487671226
    ],
    [
      0.3638636762088654,
      0.02325275568060533,
      0.9311619271045332
    ],
    [
      0.3956550309982528,
      0.012207779022777188,
      0.9183180639501233
    ],
    [
      0.49510025184310597,
      0.0025666627125134297,
      0.8688320625226795
    ],
    [
      0.48847563624098156,
      0.018802936077619285,
      0.8723749207730752
    ],
    [
      0.44152369162466587,
      0.04138497576569905,
      0.8962946577521254
    ],
    [
      -0.0335555928549942,
      0.2141035489002044,
      0.9762344454773595
    ],
    [
      -0.030820984343788924,
      0.2266566519449287,
      0.9734869434425895
    ],
    [
      0.04180941212116603,
      0.28719865554071733,
      0.9569581523314835
    ],
    [
      -0.04680724703552004,
      0.20428629960722886,
      0.9777914856541456
    ],
    [
      -0.07772514412043749,
      0.33253083703903896,
      0.9398840590145007
    ],
    [
      0.43576258319779815,
      0.1009956542530139,
      0.8943773526352217
    ],
    [
      0.35951599346933144,
      0.0938928189534895,
      0.9284031392604868
    ],
    [
      0.3554087430573541,
      0.07901956238525205,
      0.9313648770051589
    ],
    [
      0.2582129633174878,
      0.07640636476028242,
      0.9630618531532231
    ],
    [
      0.25530363993235455,
      0.032770405278240315,
      0.9663054134046806
    ],
    [
      0.9363225559324266,
      0.3489985638563327,
      -0.038730784634255125
    ],
    [
      0.9359271835939008,
      0.34932934434892565,
      -0.04482539667128943
    ],
    [
      0.9317167244338567,
      0.36315629833658575,
      -0.004631240515611605
    ],
    [
      0.5639020846556899,
      0.05417836532454025,
      0.8240625847905776
    ],
    [
      0.506308236008393,
      0.05977941630522945,
      0.86027808965257
    ],
    [
      0.6017118910881751,
      -0.026510174101612913,
      0.7982731429731269
    ],
    [
      0.34429148839322504,
      0.8732668199217261,
      0.34477301553888107
    ],
    [
      0.34163001836738316,
      0.8575580984647957,
      0.38455563746712307
    ],
    [
      0.3218805239075247,
      0.8515105102315198,
      0.4139115597495124
    ],
    [
      0.27802669656827683,
      0.8540559568276306,
      0.4396471068966243
    ],
    [
      0.2557684892761819,
      0.8464728749918982,
      0.4669755366144248
    ],
    [
      0.26963368031935686,
      0.8551213948646694,
      0.44279236497724417
    ],
    [
      0.2710656941791269,
      0.8554118527975481,
      0.4413546777056455
    ],
    [
      0.2289445420429307,
      0.8322902020706004,
      0.5048538562851944
    ],
    [
      0.23093758124893843,
      0.8403940608303174,
      0.4903117947673896
    ],
    [
      0.19636027578065585,
      0.820876852384829,
      0.536287082926785
    ],
    [
      0.564130926640373,
      0.6877236945569826,
      0.45693808940902286
    ],
    [
      0.5572923923615573,
      0.7069416309491166,
      0.43549824321911496
    ],
    [
      0.5579782832469776,
      0.7314980372413699,
      0.3918811770636338
    ],
    [
      0.5715896943890207,
      0.7412056761532645,
      0.3519934188396824
    ],
    [
      -0.024311215490880406,
      0.7665707293043308,
      0.6416995260830278
    ],
    [
      -0.028029528081348964,
      0.7934499866909707,
      0.6079896908465106
    ],
    [
      -0.05110935888763274,
      0.8170713869575146,
      0.5742666471678627
    ],
    [
      -0.05441998968991158,
      0.818516658314025,
      0.5718994184160283
    ],
    [
      -0.05189178691445422,
      0.8430279469197032,
      0.5353607411485969
    ],
    [
      -0.05390550195494156,
      0.8455659069138096,
      0.5311426304901655
    ],
    [
      -0.05152438317431857,
      0.866838107953459,
      0.4959202884921863
    ],
    [
      -0.05217163272096705,
      0.8673103471069361,
      0.49502614328990185
    ],
    [
      -0.050151379032644834,
      0.8899198880775394,
      0.45335133394000704
    ],
    [
      -0.0963073249092495,
      0.8971210551752291,
      0.43115972855788337
    ],
    [
      -0.08114687679549795,
      0.9095818213770542,
      0.4075243484832985
    ],
    [
      -0.12262058313202386,
      0.8795305541087914,
      0.45977189668513313
    ],
    [
      -0.10553912204355695,
      0.8936721310079079,
      0.43613256697712915
    ],
    [
      -0.15101535887960763,
      0.8561971105612572,
      0.4940858925824716
    ],
    [
      -0.15011249667214474,
      0.8581719959464491,
      0.4909247026949684
    ],
    [
      -0.12796184362023047,
      0.8772193188589962,
      0.4627224148427115
    ],
    [
      -0.1787404888044627,
      0.7909387698041431,
      0.5852073992036074
    ],
    [
      -0.18970590688102906,
      0.8010307786837753,
      0.5677687561813446
    ],
    [
      -0.18934156839218216,
      0.803855358504255,
      0.5638850353421202
    ],
    [
      -0.17328865134239818,
      0.8361050814685691,
      0.5204799093705446
    ],
    [
      0.19058619590482012,
      0.8569201025301268,
      0.47892049424751737
    ],
    [
      0.16212227936283963,
      0.8775591215754884,
      0.45122760850135757
    ],
    [
      0.14392907357709325,
      0.8955374113969374,
      0.42106670085357256
    ],
    [
      0.159791751010318,
      0.8848405796324678,
      0.4376342593361892
    ],
    [
      0.12697885394935146,
      0.912193993042691,
      0.3895875892614396
    ],
    [
      0.14164259630015744,
      0.9031339982589861,
      0.40532253342503477
    ],
    [
      0.034897940600570665,
      0.9493082130600258,
      0.3124036657253235
    ],
    [
      0.11956930847006313,
      0.9405887068006792,
      0.3177987808519986
    ],
    [
      -0.16075875498059752,
      0.7556719511627283,
      0.6349145808083189
    ],
    [
      -0.18031096463589136,
      0.7660996967065351,
      0.6169110233560664
    ],
    [
      -0.1355036911328377,
      0.7238489057440871,
      0.6765216266627876
    ],
    [
      -0.1351150306835148,
      0.7038389911939179,
      0.6973912839708571
    ],
    [
      -0.17169628552507055,
      0.6582188657884755,
      0.7329858868061692
    ],
    [
      -0.16934416298539529,
      0.6765009852065078,
      0.7167070332272456
    ],
    [
      -0.20704257451137986,
      0.6266251505646844,
      0.7513150424552182
    ],
    [
      -0.27843006406304,
      0.47484912131913753,
      0.8348622709215541
    ],
    [
      -0.2895072971095257,
      0.4793933805210638,
      0.8284729999420158
    ],
    [
      -0.40370097878503913,
      0.5663570848574937,
      0.7185159512214904
    ],
    [
      -0.31410009359120494,
      0.604331613416492,
      0.7322051845155263
    ],
    [
      -0.41890155685728897,
      0.49472556881439406,
      0.7614250437330083
    ],
    [
      -0.4077624260971768,
      0.5652072507858678,
      0.7171266049467316
    ],
    [
      -0.2954846053465152,
      0.4300310024083996,
      0.8530897871682916
    ],
    [
      -0.40131415162685574,
      0.3700554041930273,
      0.8378579530753123
    ],
    [
      -0.43356263086960334,
      0.37656347026904485,
      0.8186717278447829
    ],
    [
      -0.4386629790197623,
      0.45346746592466436,
      0.7758492432073198
    ],
    [
      0.7136714264738783,
      0.6675577094864734,
      0.2122258220384903
    ],
    [
      0.6445432687711454,
      0.7493705108911697,
      0.1516832623874972
    ],
    [
      0.654589591704352,
      0.7425178588046478,
      0.14205525611004607
    ],
    [
      0.6071655537024985,
      0.7773724109521757,
      0.1644448998526257
    ],
    [
      0.5856709549502127,
      0.7971435959592379,
      0.14680470002313006
    ],
    [
      0.5011148571798592,
      0.857663919473191,
      0.11531045549946096
    ],
    [
      0.5468821112358122,
      0.8315686946271673,
      0.09702299998623928
    ],
    [
      0.5780492318922189,
      0.8102573383769165,
      0.09665470042978096
    ],
    [
      0.7326190311037113,
      -0.6115003091404096,
      -0.2988925010532096
    ],
    [
      0.7182126268493821,
      -0.633482612277341,
      -0.28787219833875266
    ],
    [
      0.7117377403410229,
      -0.6568471927111376,
      -0.24896014621170282
    ],
    [
      0.7591325784530575,
      -0.5627458167438156,
      -0.3271618469023374
    ],
    [
      0.7555377257111582,
      -0.567224878497177,
      -0.32774789433507207
    ],
    [
      0.7338876802780142,
      -0.6039773038642461,
      -0.3108380432846521
    ],
    [
      0.7731919225281032,
      -0.5196666054036952,
      -0.36348434652058337
    ],
    [
      0.7616664541030305,
      -0.5432488930967914,
      -0.35319237370479456
    ],
    [
      0.7821616726938331,
      -0.48849141376548366,
      -0.3867806309087676
    ],
    [
      0.7735491765424218,
      -0.5082245876501066,
      -0.3785887478233079
    ],
    [
      0.7818998599451595,
      -0.46901241618308265,
      -0.41068231333215066
    ],
    [
      0.769585921817743,
      -0.4608478006276117,
      -0.44199187050965993
    ],
    [
      0.7533439727640192,
      -0.45703945653521705,
      -0.4728507099181708
    ],
    [
      0.7501658084259001,
      -0.4646596729898867,
      -0.47047066663677073
    ],
    [
      0.7618141572465411,
      -0.4065988174118916,
      -0.504298117682382
    ],
    [
      0.7320384258966103,
      -0.38574130765308656,
      -0.5615366297766334
    ],
    [
      0.7285603440426126,
      -0.3896202752835084,
      -0.5633789720752036
    ],
    [
      0.6748081916904386,
      -0.3218282971266995,
      -0.6641238224879521
    ],
    [
      0.6738998175307769,
      -0.35177911213550467,
      -0.6497003095252007
    ],
    [
      0.4651804035602507,
      -0.8385786147820984,
      -0.2835367682923315
    ],
    [
      0.46121470701192707,
      -0.8368242155629886,
      -0.29496817842487877
    ],
    [
      0.40507540009645715,
      -0.8490076927929515,
      -0.3392636995245505
    ],
    [
      0.5415210584523317,
      -0.8017006069581449,
      -0.253043632711057
    ],
    [
      0.6100429099507019,
      -0.7485156498229837,
      -0.2599460905437051
    ],
    [
      0.5512129993530545,
      -0.7882238548220599,
      -0.27361904910598234
    ],
    [
      0.6422555200652265,
      -0.7150079725268988,
      -0.2761728555972129
    ],
    [
      0.661786829579995,
      -0.6780740838997392,
      -0.319771369790962
    ],
    [
      0.6547508773499403,
      -0.6870182002578206,
      -0.3151305778942891
    ],
    [
      0.642078146642176,
      -0.711834893660436,
      -0.2846519590165933
    ],
    [
      0.6734034728149915,
      -0.652210336125811,
      -0.34806528159436656
    ],
    [
      0.7029205982484645,
      -0.6181141723346731,
      -0.3519055306712907
    ],
    [
      0.6734537032872192,
      -0.6484346055994892,
      -0.3549544643891172
    ],
    [
      0.7187304151785227,
      -0.5891680366364962,
      -0.36919861172979085
    ],
    [
      0.7137894554098507,
      -0.5621652387526135,
      -0.4177018765626099
    ],
    [
      0.6963398832163522,
      -0.5500840060773455,
      -0.46099712938383425
    ],
    [
      0.6624734975493627,
      -0.5432453993002192,
      -0.5157647731125692
    ],
    [
      -0.13001506025211046,
      -0.8676376627077832,
      -0.4798968330366592
    ],
    [
      -0.1270420948201047,
      -0.8610059325248426,
      -0.4924724259293567
    ],
    [
      -0.19632088046182672,
      -0.8341758486493686,
      -0.5153724531101743
    ],
    [
      -0.1288021110117196,
      -0.8779230005117369,
      -0.4611520588389403
    ],
    [
      -0.10272604985374897,
      -0.9123397693573405,
      -0.3963376135700973
    ],
    [
      -0.02232631800635144,
      -0.8972432107004054,
      -0.4409718317265937
    ],
    [
      -0.02477109941393861,
      -0.8970689853086997,
      -0.4411956802044244
    ],
    [
      0.0038248059324136104,
      -0.8905871448829524,
      -0.45479655696675003
    ],
    [
      0.02113262512220258,
      -0.8755856602872668,
      -0.48260041820822674
    ],
    [
      0.011618048803071256,
      -0.8786528697863119,
      -0.4773197621702752
    ],
    [
      0.03176033753795555,
      -0.858203389598268,
      -0.5123262857218225
    ],
    [
      -0.00914178814309179,
      -0.8078163084841172,
      -0.5893634188314035
    ],
    [
      -0.4150218668068491,
      -0.8837381090323926,
      -0.21624940396682948
    ],
    [
      -0.4051866859079649,
      -0.8927639179588829,
      -0.19696785614314125
    ],
    [
      -0.40450226302752423,
      -0.8979805132707844,
      -0.17323081998175177
    ],
    [
      -0.39840402460101526,
      -0.902783143130112,
      -0.16203959288343495
    ],
    [
      -0.3929778168223696,
      -0.9111643188529238,
      -0.12388712416878306
    ],
    [
      -0.3974430931196715,
      -0.9081567290877773,
      -0.13149274939728603
    ],
    [
      -0.3915683995728172,
      -0.9157080814330084,
      -0.09029339983775964
    ],
    [
      -0.3901857181113975,
      -0.9165158574003247,
      -0.08805559900222511
    ],
    [
      -0.3844075325854587,
      -0.9231634325739762,
      0.0003544711458150237
    ],
    [
      -0.5664497533162998,
      -0.6279767914280363,
      -0.5336476612856573
    ],
    [
      -0.5667687017528068,
      -0.6452856986675088,
      -0.5122300321228958
    ],
    [
      -0.5421294233981859,
      -0.6838701942427802,
      -0.4882798846074785
    ],
    [
      -0.5535119987122066,
      -0.7098691491594419,
      -0.43555741108752627
    ],
    [
      -0.5506587515559674,
      -0.7169628512474676,
      -0.42748006885225054
    ],
    [
      -0.5554477021460593,
      -0.7288210619815451,
      -0.4003719642941489
    ],
    [
      -0.5508864599828976,
      -0.7389048477942034,
      -0.38799965736291125
    ],
    [
      -0.5540134361429347,
      -0.7473324141187484,
      -0.3668288093655431
    ],
    [
      -0.5464092658495133,
      -0.7621194012074322,
      -0.3472908471253179
    ],
    [
      -0.5479115518816216,
      -0.76705283789485,
      -0.33380065187493313
    ],
    [
      -0.5383317082582282,
      -0.7836778358036812,
      -0.3099161524571386
    ],
    [
      -0.5386151518764473,
      -0.7849278446112211,
      -0.306238464146969
    ],
    [
      -0.5254300678984228,
      -0.8053517394731516,
      -0.2744664268646127
    ],
    [
      -0.5252199968489422,
      -0.8055392023159907,
      -0.27431833413411216
    ],
    [
      -0.5114083210852128,
      -0.824385035106625,
      -0.24259192694121648
    ],
    [
      -0.5101956790182737,
      -0.8253817888233352,
      -0.24175456932573988
    ],
    [
      -0.4960691236826943,
      -0.8424306098329679,
      -0.21030000510018398
    ],
    [
      -0.4968421056587407,
      -0.8475616542564771,
      -0.18651317454435387
    ],
    [
      -0.48132861304443975,
      -0.8587143578397366,
      -0.17587614364832097
    ],
    [
      -0.46750089719805216,
      -0.8717194642049377,
      -0.1467926661835413
    ],
    [
      -0.4680133540089696,
      -0.8732363993507007,
      -0.1357265313720881
    ],
    [
      -0.4567846701939607,
      -0.8823521348843835,
      -0.11314802314121701
    ],
    [
      -0.45803334491308495,
      -0.884296500497211,
      -0.09069263562228762
    ],
    [
      -0.4511150204607349,
      -0.8891538203686721,
      -0.07681615740523583
    ],
    [
      -0.45319960763639344,
      -0.8913333977435056,
      0.011614202737883272
    ],
    [
      -0.43545184338775716,
      -0.8999441346250044,
      0.02196011485070497
    ],
    [
      -0.4269502083429256,
      -0.9040193825838488,
      0.02150524374772905
    ],
    [
      -0.13047610777365568,
      -0.06115635156302085,
      -0.989563482533454
    ],
    [
      -0.18884870294147788,
      -0.14398288697518044,
      -0.9713933784289523
    ],
    [
      -0.19138699098219744,
      -0.14310074758329552,
      -0.9710268769317779
    ],
    [
      -0.26962751123179096,
      -0.1907941444560642,
      -0.9438742499020878
    ],
    [
      -0.320599848550524,
      -0.2668199296975346,
      -0.9088579989335979
    ],
    [
      -0.303347312681146,
      -0.2981900659049761,
      -0.9050210453269654
    ],
    [
      -0.30507648728938896,
      -0.25398470480874163,
      -0.9178344658087229
    ],
    [
      -0.35216543859637994,
      -0.32702752502087185,
      -0.8769449821607639
    ],
    [
      -0.3416513885445133,
      -0.35179979138961875,
      -0.8714994179480712
    ],
    [
      -0.383555355799227,
      -0.3772617412922883,
      -0.8429465389897742
    ],
    [
      -0.37293234409421216,
      -0.40320228516645945,
      -0.8356730125862276
    ],
    [
      -0.40871399914535844,
      -0.4232345202084092,
      -0.8085947117107344
    ],
    [
      -0.39806376861156956,
      -0.4497125618061192,
      -0.7995647865386095
    ],
    [
      -0.43032033026449235,
      -0.4657903777687778,
      -0.7732164880155347
    ],
    [
      -0.42032451593406844,
      -0.4913347537515601,
      -0.7628351467130265
    ],
    [
      -0.4493807096229969,
      -0.5051973031630064,
      -0.7367717846766101
    ],
    [
      -0.44089124569619875,
      -0.528295159551944,
      -0.7256163820245793
    ],
    [
      -0.46807328616212657,
      -0.5408259546338957,
      -0.6988667151723019
    ],
    [
      -0.46196278016638365,
      -0.5597768058259417,
      -0.6879246451467279
    ],
    [
      -0.4876405578151181,
      -0.5715356651500594,
      -0.6599649004570165
    ],
    [
      -0.47120896367275644,
      -0.6257589619479411,
      -0.6216010248513768
    ],
    [
      -0.27632100661143977,
      -0.5654004539742364,
      -0.777154442791758
    ],
    [
      -0.2722236373872767,
      -0.5504850428046776,
      -0.7892151220649366
    ],
    [
      -0.2636339622411362,
      -0.6055030253146343,
      -0.7509082635634426
    ],
    [
      -0.26250410843431293,
      -0.5983967486488613,
      -0.7569761715282576
    ],
    [
      -0.24824932538703476,
      -0.6433614402003183,
      -0.7241949528326295
    ],
    [
      -0.24812582350300408,
      -0.6411573755446766,
      -0.7261892284354117
    ],
    [
      -0.28947675751552243,
      -0.7000016722156394,
      -0.6528406128249131
    ],
    [
      -0.23730776523708239,
      -0.666002057157038,
      -0.7071960721191651
    ],
    [
      -0.06432323034769825,
      -0.18952293195668557,
      -0.9797671051327344
    ],
    [
      -0.020474629306515887,
      -0.14711787734296966,
      -0.988907032900899
    ],
    [
      -0.010624985441989835,
      -0.13371013990663294,
      -0.9909635251463629
    ],
    [
      -0.17524381581670756,
      -0.29724491864601943,
      -0.9385814100849863
    ],
    [
      -0.10448754860645738,
      -0.28294166149692646,
      -0.9534287432082021
    ],
    [
      -0.19183100670019101,
      -0.38159706266192045,
      -0.9042038191891172
    ],
    [
      -0.15851294604147548,
      -0.3626076157446734,
      -0.9183623266125498
    ],
    [
      -0.19600378594396506,
      -0.4459640614926904,
      -0.8733261542817644
    ],
    [
      -0.1842786175618796,
      -0.4376720588936894,
      -0.8800480441278427
    ],
    [
      -0.20212012821624142,
      -0.503316044825893,
      -0.8401311878454875
    ],
    [
      -0.19330673040175858,
      -0.5145837864253247,
      -0.8353658089301703
    ],
    [
      -0.19021470837743865,
      -0.5427948809670603,
      -0.8180416138026481
    ],
    [
      -0.1852800619334708,
      -0.5826561377333485,
      -0.7913173344566556
    ],
    [
      -0.17901525982395414,
      -0.5752304786844682,
      -0.7981625355418531
    ],
    [
      -0.17914092867955908,
      -0.5573387641970996,
      -0.810729319560527
    ],
    [
      -0.18390961193872055,
      -0.6237923369941615,
      -0.7596449005580909
    ],
    [
      -0.19460701752594575,
      -0.6886105455070008,
      -0.69852961665645
    ],
    [
      -0.18410833727294482,
      -0.6873163480247617,
      -0.702638141495675
    ],
    [
      -0.1482767757742497,
      -0.6618369650881849,
      -0.7348372809056801
    ],
    [
      -0.1470678235896936,
      -0.6466454469839533,
      -0.7484789383539887
    ],
    [
      -0.11466642546253393,
      -0.6149051383756176,
      -0.7802200213214909
    ],
    [
      -0.1106576368359116,
      -0.6205166432564617,
      -0.7763465610483662
    ],
    [
      -0.10498345791398585,
      -0.5629796817627708,
      -0.8197757934256852
    ],
    [
      -0.1262158232491725,
      -0.553187862655743,
      -0.8234395876880735
    ],
    [
      -0.08325106176132185,
      -0.626338653188174,
      -0.7750929958643911
    ],
    [
      -0.07329409246948221,
      -0.6185901838286488,
      -0.7822877734439633
    ],
    [
      -0.06655517641224512,
      -0.5617148316386107,
      -0.8246495355058063
    ],
    [
      -0.07040202693803446,
      -0.5588060613293039,
      -0.8263046293133341
    ],
    [
      -0.022690251727812142,
      -0.6070077479703384,
      -0.7943719194310097
    ],
    [
      -0.016568905967752345,
      -0.5802455604387984,
      -0.8142730260459918
    ],
    [
      -0.03212780155500959,
      -0.568331622106968,
      -0.8221721058759561
    ],
    [
      -0.007023307974841862,
      -0.5172679731336427,
      -0.8557946699502771
    ],
    [
      -0.06781539665299188,
      -0.5012835990998361,
      -0.862621484343111
    ],
    [
      -0.06878247553790494,
      -0.501743245451088,
      -0.8622776157961465
    ],
    [
      0.02999417861388289,
      -0.48770312028270024,
      -0.8724941350609736
    ],
    [
      0.014932819552228246,
      -0.4526703426644587,
      -0.891552899031943
    ],
    [
      -0.035992141754145175,
      -0.4456670920878239,
      -0.8944749346750487
    ],
    [
      -0.0462968981705452,
      -0.4496974327318097,
      -0.8919802779289493
    ],
    [
      0.014349416966036888,
      -0.5137958303185574,
      -0.857792480137241
    ],
    [
      -0.0135440672466632,
      -0.36993606800531104,
      -0.9289584833732817
    ],
    [
      -0.02815625088280049,
      -0.3737199814311353,
      -0.9271141251298768
    ],
    [
      0.039825148630420734,
      -0.4186660355542669,
      -0.9072666136312072
    ],
    [
      0.013454861589018553,
      -0.3721777352899845,
      -0.9280639525668684
    ],
    [
      0.05156200623443979,
      -0.3333226759973781,
      -0.9414018021966107
    ],
    [
      -0.0062818771029611135,
      -0.2715393355098489,
      -0.9624068408375602
    ],
    [
      -0.019684206677922974,
      -0.2737315691528093,
      -0.961604679718543
    ],
    [
      0.001717395023577534,
      -0.264005461957112,
      -0.9645196558967292
    ],
    [
      0.07339086347674165,
      -0.21967278970688708,
      -0.9728091522084545
    ],
    [
      0.07536152037572637,
      -0.20932277526561827,
      -0.9749382631745245
    ],
    [
      -0.28064804097055934,
      -0.750838871288767,
      0.5978943606199991
    ],
    [
      -0.2839538660659294,
      -0.761162863750453,
      0.5830963014746549
    ],
    [
      -0.2665017005010591,
      -0.7828727843977741,
      0.5622161924734294
    ],
    [
      -0.2671414321845302,
      -0.7869158970076532,
      0.5562363043231165
    ],
    [
      -0.2500139719699322,
      -0.8076264928526492,
      0.5340715887054354
    ],
    [
      -0.2506779887461664,
      -0.8108898157768631,
      0.5287894218188766
    ],
    [
      -0.23025417315717367,
      -0.835211033300191,
      0.4994051918005393
    ],
    [
      -0.23060671303396152,
      -0.8367904649587128,
      0.4965906379079788
    ],
    [
      -0.21284942499051776,
      -0.8568868808703799,
      0.46951037866423917
    ],
    [
      -0.18706185424571525,
      -0.8681055173974117,
      0.45978328955098713
    ],
    [
      -0.06407701090526811,
      -0.9026232838991202,
      0.42563522414928795
    ],
    [
      0.1365199275442798,
      -0.8787129068548469,
      0.45741221749097355
    ],
    [
      0.22395745772540215,
      -0.8624493798963209,
      0.4538988039702533
    ],
    [
      0.2590111360924553,
      -0.844644844032609,
      0.468495804494795
    ],
    [
      0.29651633130016647,
      -0.8108247193371584,
      0.5046199954263687
    ],
    [
      0.2990533442134044,
      -0.8116620477457533,
      0.5017686893021021
    ],
    [
      0.3701511344560939,
      -0.817230080109618,
      0.44172744291575794
    ],
    [
      0.4199061975308528,
      -0.7828449738620984,
      0.45916503805715775
    ],
    [
      0.42026808054852693,
      -0.7823625440458934,
      0.4596559475804641
    ],
    [
      0.451677153742016,
      -0.7640083741004738,
      0.4607374014467044
    ],
    [
      0.467209308951303,
      -0.7344828426181051,
      0.4921894102161012
    ],
    [
      0.04076803021118385,
      -0.5491820597772281,
      0.8347077530079261
    ],
    [
      -0.03417136367113012,
      -0.5607532961974351,
      0.8272774980069064
    ],
    [
      0.03658607280489592,
      -0.5592475372638915,
      0.8281930036778788
    ],
    [
      -0.22133709563982654,
      -0.5738637828348486,
      0.7884733659700903
    ],
    [
      -0.26433390184701644,
      -0.6075327981587209,
      0.749020351856855
    ],
    [
      -0.2160033712673896,
      -0.6619039264051063,
      0.7177922650813576
    ],
    [
      -0.16044359262997954,
      -0.690774025417835,
      0.7050454590960966
    ],
    [
      -0.14718758677087942,
      -0.6949612615565048,
      0.7038214682974342
    ],
    [
      -0.21278223796970983,
      -0.7217401493252402,
      0.6586462450030227
    ],
    [
      -0.24086342453011875,
      -0.7500754093981,
      0.6159315635197602
    ],
    [
      -0.2260383163857608,
      -0.7777663088676932,
      0.586503408613978
    ],
    [
      -0.21920739990671456,
      -0.7803249784953121,
      0.5856970580107334
    ],
    [
      -0.20313190754196694,
      -0.8062283719524974,
      0.5556376880640721
    ],
    [
      -0.2003223739202982,
      -0.8073227718602792,
      0.5550683638460868
    ],
    [
      -0.18326723623829827,
      -0.829525127814229,
      0.5275425882773472
    ],
    [
      -0.18222842046309357,
      -0.8299159673807126,
      0.5272876727765043
    ],
    [
      -0.15462977836343889,
      -0.8625785066964095,
      0.481713557447438
    ],
    [
      -0.0686916303979937,
      -0.8692488294093139,
      0.48957934237853923
    ],
    [
      -0.4116992024380934,
      -0.8898275531252652,
      0.19675033014188645
    ],
    [
      -0.42046469757737615,
      -0.8836193046739667,
      0.20597660667818893
    ],
    [
      -0.4236943284086118,
      -0.8707014253783146,
      0.24972413563479723
    ],
    [
      -0.40026757573549554,
      -0.9020896716470037,
      0.1613074459615254
    ],
    [
      -0.40955352280082225,
      -0.8962187947033646,
      0.1704634388421303
    ],
    [
      -0.391659941094156,
      -0.9114129493078078,
      0.12620985055123687
    ],
    [
      -0.39822597877449734,
      -0.9077032266741049,
      0.132253249920417
    ],
    [
      -0.3892898026542956,
      -0.9172178740062631,
      0.08464526657061458
    ],
    [
      -0.5708130039234245,
      -0.3609053039903557,
      0.7375092379784443
    ],
    [
      -0.5929312211298657,
      -0.3634246461474266,
      0.7185785229062054
    ],
    [
      -0.6158211787383973,
      -0.3476137014064277,
      0.7070565680423129
    ],
    [
      -0.5275643560426208,
      -0.43188371049040386,
      0.7315410520581713
    ],
    [
      -0.5793793813819792,
      -0.4033883604774844,
      0.7082353867611546
    ],
    [
      -0.5612313430347443,
      -0.4529699895768687,
      0.6927030880096816
    ],
    [
      -0.5873984115733113,
      -0.4416324857388572,
      0.6781768601340427
    ],
    [
      -0.5945512545239772,
      -0.4212527404237397,
      0.6848758532971172
    ],
    [
      -0.5563545192769409,
      -0.494102784435927,
      0.6680808987636062
    ],
    [
      -0.5920421496373285,
      -0.47645500175645633,
      0.6499820954103784
    ],
    [
      -0.5982152605897092,
      -0.4586060923795206,
      0.6571293282375799
    ],
    [
      -0.5526987629473347,
      -0.4890599655617163,
      0.6747921365289158
    ],
    [
      -0.5475337161129397,
      -0.5236412654540832,
      0.6526918528932325
    ],
    [
      -0.5512154993376857,
      -0.5330699884161028,
      0.6418705950111454
    ],
    [
      -0.5949615226569736,
      -0.5113964397643243,
      0.6200761791538757
    ],
    [
      -0.60159699889472,
      -0.4930462722372263,
      0.6284794542018388
    ],
    [
      -0.5421135853448568,
      -0.5603358035705192,
      0.6262081505550094
    ],
    [
      -0.5435698325397669,
      -0.5677448310112571,
      0.6182213551897806
    ],
    [
      -0.5437358510114619,
      -0.5678307570651326,
      0.6179964042417072
    ],
    [
      -0.5958885954606796,
      -0.5464617236073454,
      0.5884695118967405
    ],
    [
      -0.603519604822205,
      -0.5265913846182122,
      0.5987199681329527
    ],
    [
      -0.553112940243866,
      -0.598904975183538,
      0.5791190775956109
    ],
    [
      -0.5971299434236638,
      -0.5755431922787254,
      0.5587359523857993
    ],
    [
      -0.6028021598618771,
      -0.5609029642234885,
      0.5674657882120824
    ],
    [
      -0.5975546240710312,
      -0.6052269050028635,
      0.5259551926846843
    ],
    [
      -0.6038110655583256,
      -0.5902373674823533,
      0.5357537187335434
    ],
    [
      -0.5920265217507802,
      -0.650236445987109,
      0.4761272538447329
    ],
    [
      -0.6088738131050637,
      -0.6298616888032614,
      0.4822312025292468
    ],
    [
      -0.5908352099730223,
      -0.6892274555753972,
      0.41937962413212043
    ],
    [
      -0.5991076282693831,
      -0.6726882726537187,
      0.4342355784405405
    ],
    [
      -0.5813614409419008,
      -0.7156686262741316,
      0.3870882229580929
    ],
    [
      -0.5920007700843191,
      -0.6960669302111111,
      0.4062338204606472
    ],
    [
      -0.5711632298305499,
      -0.7390253729708852,
      0.3572311058611476
    ],
    [
      -0.5818159655896719,
      -0.7210505044039576,
      0.3762663315841003
    ],
    [
      -0.5572639545111483,
      -0.7649511412645095,
      0.3229653796937394
    ],
    [
      -0.5713217175711978,
      -0.7435538021186048,
      0.34744674179860047
    ],
    [
      -0.5416853548705713,
      -0.7881408458697445,
      0.2922515755140881
    ],
    [
      -0.5571825031828368,
      -0.7668215955076841,
      0.3186413325511269
    ],
    [
      -0.524758119912041,
      -0.8099656354697568,
      0.26188658794305086
    ],
    [
      -0.5415438871617925,
      -0.7892564198396403,
      0.2894901069460045
    ],
    [
      -0.5047167749656767,
      -0.8327088263742327,
      0.22772129357329451
    ],
    [
      -0.505411151797781,
      -0.832179142855068,
      0.22811716690210931
    ],
    [
      -0.5245052635425281,
      -0.8111188679349548,
      0.25880573910966576
    ],
    [
      -0.49158447801940736,
      -0.8458201553500333,
      0.20720271661836995
    ],
    [
      -0.4777517979817298,
      -0.8603586460489335,
      0.17758440160687072
    ],
    [
      -0.4899467977131175,
      -0.8493866937332852,
      0.19619984688959363
    ],
    [
      -0.46367416053116683,
      -0.8746928361698002,
      0.14113367850711186
    ],
    [
      -0.47480342086313065,
      -0.8658731804857461,
      0.15756061326412554
    ],
    [
      -0.4519127149515322,
      -0.8855389008784297,
      0.10768357858168524
    ],
    [
      -0.4601960968303059,
      -0.8796975363868607,
      0.11979898554261548
    ],
    [
      -0.5975348695717201,
      -0.0010460102446203463,
      0.8018422447766616
    ],
    [
      -0.5574215869874254,
      -0.0022934851947326437,
      0.8302264235051073
    ],
    [
      -0.5554352134865843,
      -0.04531110092801361,
      0.8303244111501262
    ],
    [
      -0.5762290926174877,
      -0.11481565502228316,
      0.8091831672637728
    ],
    [
      -0.6386292351013012,
      -0.030577746990771978,
      0.7689068223542403
    ],
    [
      -0.6407894032350323,
      -0.023349989414875948,
      0.7673615306333881
    ],
    [
      -0.4858768009731941,
      0.006287260937500215,
      0.874004693709341
    ],
    [
      -0.45443611170712905,
      -0.009296911980284123,
      0.8907308166916291
    ],
    [
      -0.5437230051079617,
      0.005198595367187537,
      0.8392486331967278
    ],
    [
      0.07531647366046515,
      -0.9971582362010845,
      0.0016972836224098768
    ],
    [
      0.7318740163939329,
      0.6550997785811449,
      -0.18762916679010233
    ],
    [
      0.7412494714348178,
      0.6311017713788964,
      -0.22860397035052185
    ],
    [
      0.7615550952630271,
      0.5962569712199206,
      -0.25399106509987396
    ],
    [
      0.8803810897632103,
      0.4671550515916122,
      -0.08182477961950364
    ],
    [
      0.8765290951829172,
      0.4754995365454879,
      -0.07481267300960887
    ],
    [
      0.8743882748302082,
      0.4831441259646471,
      -0.04490989184255058
    ],
    [
      0.8711814709544655,
      0.48941526563415644,
      -0.038929968274607686
    ],
    [
      0.8207889517204073,
      0.5650205477294606,
      -0.08400760309171623
    ],
    [
      0.8646710588218902,
      0.5023344945082926,
      -0.002003911906604876
    ],
    [
      0.8271319022192276,
      0.5608095016009761,
      -0.03668132011346961
    ],
    [
      0.8676229388547643,
      0.49716576563217796,
      -0.007525786097966603
    ],
    [
      0.8592804180740824,
      0.5104675535662115,
      0.032558253493656736
    ],
    [
      0.8587257691876196,
      0.511330885738214,
      0.033627051956790666
    ],
    [
      0.8215521058621172,
      0.5701114780800369,
      0.005003989899686446
    ],
    [
      0.8214508558705085,
      0.5702640892481537,
      0.004166521760742362
    ],
    [
      0.8522416604918545,
      0.518758799328002,
      0.0676273631147669
    ],
    [
      0.815031324292367,
      0.5774835336319336,
      0.04729385590334011
    ],
    [
      0.8146543329221525,
      0.5782578740294153,
      0.044228372953833965
    ],
    [
      0.8067508270489965,
      0.584620108426062,
      0.08586286671000229
    ],
    [
      0.8531718541068655,
      0.5099432394071288,
      0.1097983603831002
    ],
    [
      0.7963575506378822,
      0.5914288062099016,
      0.12659628243816448
    ],
    [
      0.8064812603495153,
      0.5849346896549111,
      0.08625187269485922
    ],
    [
      0.7713992994440438,
      0.6158258471287922,
      0.16031733164366185
    ],
    [
      0.7850687932905478,
      0.6194012057900147,
      -0.0030225927940666464
    ],
    [
      0.7796596299071822,
      0.6252529203983289,
      0.034491260144518844
    ],
    [
      0.7780301879714214,
      0.6277803581482247,
      0.02368224078167643
    ],
    [
      0.7698276490925631,
      0.6345891732273033,
      0.06827863439836192
    ],
    [
      0.7649540590121262,
      0.6398736289661632,
      0.07353248638897883
    ],
    [
      0.7501748443273054,
      0.6611237952374798,
      0.012370541996776655
    ],
    [
      0.7428804070271625,
      0.6693895005159776,
      -0.006811567670331713
    ],
    [
      0.7442186468004129,
      0.6655316673157705,
      -0.056623365799401325
    ],
    [
      0.7398987779393715,
      0.6689735146856971,
      0.07088183866752983
    ],
    [
      0.73785925037218,
      0.6714212142105727,
      0.06897303638527749
    ],
    [
      0.7074392071548924,
      0.7037352072203467,
      0.06547156862786221
    ],
    [
      0.6836931121826262,
      0.7281412092032417,
      0.04872481722978515
    ],
    [
      0.6626777728846631,
      0.7476547087546167,
      0.04325050059446974
    ],
    [
      0.660732687443733,
      0.7502789462708885,
      0.02266756550728981
    ],
    [
      0.6500463974835845,
      0.7570666786358432,
      0.0654959939073125
    ],
    [
      0.6051701984527363,
      0.7923117252352754,
      0.07753167713507204
    ],
    [
      0.4875325958337411,
      0.8717429323301125,
      0.04874656841369452
    ],
    [
      0.49130605253256093,
      0.8709370085122671,
      0.009332199557215428
    ],
    [
      0.6921754179099541,
      0.6268309406984808,
      -0.3577375611034408
    ],
    [
      0.6893440779021156,
      0.6268528795625087,
      -0.36312561138739996
    ],
    [
      0.6819154787338191,
      0.6088909570910709,
      -0.4052691478955019
    ],
    [
      0.6874219343391127,
      0.5877435908013415,
      -0.4266246074260343
    ],
    [
      0.6963826406977119,
      0.6377018188145274,
      -0.32922273313901806
    ],
    [
      0.6967548933744683,
      0.6500053730413903,
      -0.30335727051787675
    ],
    [
      0.6944767464540857,
      0.6433124005118045,
      -0.32225952892395143
    ],
    [
      0.6902049977615567,
      0.6702821298332056,
      -0.27265165961576543
    ],
    [
      0.689423833787489,
      0.6678088938316039,
      -0.2805816435998092
    ],
    [
      0.6810175782801615,
      0.6895087082918916,
      -0.24656195826418822
    ],
    [
      0.6583882499030091,
      0.7234999787118948,
      -0.20753961837090443
    ],
    [
      0.6715691806998513,
      0.7009407142200096,
      -0.2401602604155681
    ],
    [
      0.4067040476097626,
      0.9131252269017461,
      -0.028180448070791522
    ],
    [
      0.3641788313554345,
      0.9311077985925096,
      -0.02029892097626031
    ],
    [
      0.38092813598599773,
      0.9245943314171489,
      -0.004367782676460983
    ],
    [
      0.3673893485264948,
      0.9299820851135604,
      -0.012585227733832282
    ],
    [
      0.32747296716241686,
      0.9428272007064259,
      -0.06195422008166606
    ],
    [
      0.31939497569979747,
      0.9430023617709785,
      -0.0934526360895317
    ],
    [
      0.3123454238251148,
      0.945126218944476,
      -0.09579544080606243
    ],
    [
      0.28233254335720764,
      0.9509060398509767,
      -0.12675187705270158
    ],
    [
      0.2798453691611935,
      0.9484356860025515,
      -0.1488499878263514
    ],
    [
      0.26650571015488644,
      0.9498946782846159,
      -0.16332423770342774
    ],
    [
      0.26314839973192816,
      0.9469909736717953,
      -0.18428514726550946
    ],
    [
      0.24513043435862458,
      0.9435714250626239,
      -0.2226747312930702
    ],
    [
      0.3121685727810958,
      0.9189439951477508,
      -0.24102430572393377
    ],
    [
      0.24976678206173716,
      0.9476035711381026,
      -0.1991582951946515
    ],
    [
      0.23818992430511407,
      0.9434261792994997,
      -0.23067857328298205
    ],
    [
      0.23283942800181143,
      0.9382026946035545,
      -0.25604980883886364
    ],
    [
      0.2786581918962591,
      0.9199286373573654,
      -0.27582768943477853
    ],
    [
      0.22050234195031504,
      0.9374669462963943,
      -0.2693221895725262
    ],
    [
      0.21574032497389686,
      0.9320853070645126,
      -0.2909864129725144
    ],
    [
      0.25440210957886156,
      0.9161710151523644,
      -0.30969378042916973
    ],
    [
      0.27809810510132305,
      0.9162976077809755,
      -0.2882015577923116
    ],
    [
      0.25559753239978333,
      0.9100457009567775,
      -0.32632303565827087
    ],
    [
      0.19986547447860806,
      0.9304613397450904,
      -0.307075702964615
    ],
    [
      0.19564029668675206,
      0.9253253648242245,
      -0.32480431574293384
    ],
    [
      0.23400520221194704,
      0.9089527907081821,
      -0.34503099802996456
    ],
    [
      0.1787055792133895,
      0.9228304418349322,
      -0.34124520741066916
    ],
    [
      0.1744347142915635,
      0.9171668093468608,
      -0.3582981639396435
    ],
    [
      0.21205509895423433,
      0.9005959879982425,
      -0.3794199538888001
    ],
    [
      0.23473208977294366,
      0.9026714360611533,
      -0.3606731547400252
    ],
    [
      0.1535528351742965,
      0.9131770247013549,
      -0.3775304601850247
    ],
    [
      0.15067453035221104,
      0.9095159687649621,
      -0.3873988751463706
    ],
    [
      0.18726030255403658,
      0.8911820302460947,
      -0.41319265246833653
    ],
    [
      0.21240061644232394,
      0.8943502936116856,
      -0.393730276269952
    ],
    [
      0.13004204907430764,
      0.9047551166199179,
      -0.4055949265247706
    ],
    [
      0.12563550925163508,
      0.8980070225220065,
      -0.42166231313249086
    ],
    [
      0.1607686148044333,
      0.8820609303870987,
      -0.4428565993394585
    ],
    [
      0.18700944351181917,
      0.8862489297933166,
      -0.4237809604944525
    ],
    [
      0.1066207209485433,
      0.8929007966130367,
      -0.4374473560009449
    ],
    [
      0.10183958533004608,
      0.8845546298398335,
      -0.4551832660464567
    ],
    [
      0.15488721106815795,
      0.8608025956682254,
      -0.4847977342545791
    ],
    [
      0.1621756021853463,
      0.8609731106282457,
      -0.48210411409875265
    ],
    [
      0.12595481880901935,
      0.8476968965741228,
      -0.5153109305626926
    ],
    [
      0.06865989293084934,
      0.8741540478388938,
      -0.4807707559217817
    ],
    [
      0.12375585092200515,
      0.8396690965832476,
      -0.5288102661689191
    ],
    [
      0.06208847079444036,
      0.8739107847912061,
      -0.4821047210098925
    ],
    [
      0.05060543950948714,
      0.8539928833092714,
      -0.517817771758723
    ],
    [
      0.10473656593436717,
      0.8304167932784646,
      -0.5472094673864732
    ],
    [
      0.10039684236655202,
      0.8193017837209644,
      -0.5645042614847754
    ],
    [
      0.029108862154865564,
      0.845886325252485,
      -0.5325683044407508
    ],
    [
      0.023704893238677284,
      0.8372725603570167,
      -0.5462716702426996
    ],
    [
      0.08225979184958244,
      0.8096833727426598,
      -0.5810732850070931
    ],
    [
      -0.008303100260315343,
      0.8149321962315919,
      -0.5794968283530304
    ],
    [
      0.07198988416391332,
      0.788350743002906,
      -0.6109996420496762
    ],
    [
      0.0004642019185649742,
      0.827663262918038,
      -0.5612248281503995
    ],
    [
      -0.021911839773500242,
      0.8086436190002215,
      -0.5878906094912258
    ],
    [
      -0.03619734645603939,
      0.7897261699986149,
      -0.6123906665918908
    ],
    [
      0.04776454959739865,
      0.7665245958350179,
      -0.6404362511458265
    ],
    [
      0.07384298499350853,
      0.7802193408297461,
      -0.6211320260318614
    ],
    [
      0.02662937635835839,
      0.7319645806715895,
      -0.6808220978765517
    ],
    [
      0.02857177950624795,
      0.7330708290729452,
      -0.6795519207375924
    ],
    [
      -0.04249548326848802,
      0.7865117226119107,
      -0.6161115516656237
    ],
    [
      -0.055937508636535994,
      0.7698083338920682,
      -0.6358192543465915
    ],
    [
      0.018397158328172042,
      0.7204051552014105,
      -0.6933094236520083
    ],
    [
      -0.06751848087939008,
      0.7636466430808404,
      -0.6420942759837553
    ],
    [
      -0.06901163395668666,
      0.761791128727038,
      -0.6441363757554868
    ],
    [
      -0.030922271501689483,
      0.7088468959096341,
      -0.7046842493517591
    ],
    [
      -0.0160127476372265,
      0.7034293819602186,
      -0.7105847567378373
    ],
    [
      -0.09688243753201141,
      0.7453391456200654,
      -0.6596084833476649
    ],
    [
      -0.11102409686680592,
      0.7141575324215547,
      -0.6911242064929185
    ],
    [
      -0.1084984831479688,
      0.706607658489836,
      -0.6992379395585606
    ],
    [
      -0.01781920178017556,
      0.6939744209053369,
      -0.719779118325212
    ],
    [
      -0.11999470071354902,
      0.6831103387054321,
      -0.7203898506742135
    ],
    [
      -0.11807213074291509,
      0.6742916458132825,
      -0.7289648471142095
    ],
    [
      -0.044491166420289524,
      0.6655219831718369,
      -0.7450510224310731
    ],
    [
      -0.1269011547216821,
      0.6571419862768213,
      -0.7430077434337126
    ],
    [
      -0.11521232894873516,
      0.6399253051364657,
      -0.7597510928614776
    ],
    [
      -0.07071385264788768,
      0.624249470018394,
      -0.7780180911941874
    ],
    [
      -0.0440207383646224,
      0.6623223308052523,
      -0.7479246651304738
    ],
    [
      -0.062041255003059,
      0.6020334546304391,
      -0.7960569088849014
    ],
    [
      -0.13521860214783063,
      0.5869467697584436,
      -0.7982539815768633
    ],
    [
      -0.1348785350440494,
      0.5865232710470129,
      -0.7986227102359934
    ],
    [
      -0.06759273399267629,
      0.591607039865914,
      -0.8033880337000833
    ],
    [
      -0.14592945682127959,
      0.545279461005843,
      -0.8254543615712644
    ],
    [
      -0.079747415334761,
      0.5347550364279405,
      -0.841235639260711
    ],
    [
      -0.05759484777455967,
      0.5663056985699232,
      -0.8221804481238024
    ],
    [
      -0.14942450312174405,
      0.542564072055062,
      -0.8266175328299356
    ],
    [
      -0.16236329352253473,
      0.4988467416745195,
      -0.8513460455286267
    ],
    [
      -0.157638995430908,
      0.48788172272432306,
      -0.858557727675362
    ],
    [
      -0.09164716145468726,
      0.48590423088872725,
      -0.869193808193393
    ],
    [
      -0.07324361857006471,
      0.5087936578090959,
      -0.8577670931622426
    ],
    [
      -0.08089929517931096,
      0.4432715671402099,
      -0.892729310488097
    ],
    [
      -0.1720312840556092,
      0.4533570062526209,
      -0.8745699870152414
    ],
    [
      -0.1611307402363385,
      0.42007700931178144,
      -0.8930689731474043
    ],
    [
      -0.09692766791314125,
      0.4261655234030643,
      -0.899437587526512
    ],
    [
      -0.1491377224128755,
      0.3394864380438717,
      -0.928712494875451
    ],
    [
      -0.0760267962669793,
      0.35457893173025057,
      -0.9319300979270997
    ],
    [
      -0.1698825025667852,
      0.4042803956098481,
      -0.8987198100894355
    ],
    [
      -0.15382159633827105,
      0.3419469745003963,
      -0.9270443264105397
    ],
    [
      -0.0414339665867127,
      0.3185968943849388,
      -0.9469842898914234
    ],
    [
      -0.06239869993137745,
      0.34922978288717554,
      -0.9349571974114378
    ],
    [
      -0.1354542375577093,
      0.2433502198856344,
      -0.9604336624719445
    ],
    [
      -0.06836815068725091,
      0.258899122632556,
      -0.9634817280424669
    ],
    [
      -0.06633213276200575,
      0.26019618377576736,
      -0.9632746202987862
    ],
    [
      -0.10685959456916562,
      0.0949053184900507,
      -0.9897343116063096
    ],
    [
      -0.07586427124555017,
      0.1205517076526938,
      -0.9898039695466981
    ],
    [
      -0.05508210865238993,
      0.1610757688857274,
      -0.9854037537904339
    ],
    [
      -0.1517402005149313,
      0.2260662277650963,
      -0.9622208541762894
    ],
    [
      -0.1482133622366567,
      0.15091997329340448,
      -0.9773719665079532
    ],
    [
      -0.11577917533114375,
      0.0972730427508471,
      -0.9885004490204504
    ],
    [
      0.5005744376598548,
      0.830822137603295,
      -0.2432278931985633
    ],
    [
      0.5336831351851011,
      0.8177302698498085,
      -0.21563746657378577
    ],
    [
      0.46149626658190973,
      0.8431037508708557,
      -0.27603851397667867
    ],
    [
      0.499477468717723,
      0.8306728418810504,
      -0.2459774136066063
    ],
    [
      0.651377861028735,
      0.5777372178168053,
      -0.49186033516733935
    ],
    [
      0.6702321595828558,
      0.5929171328896606,
      -0.44636098147889874
    ],
    [
      0.6513195200743944,
      0.5818166530064316,
      -0.48710601007835463
    ],
    [
      0.6303053925815417,
      0.5661820402634973,
      -0.5311807690096585
    ],
    [
      0.6234790825781157,
      0.5682074127550344,
      -0.5370420557812778
    ],
    [
      0.6113564691685086,
      0.5523550596425858,
      -0.5666984698171064
    ],
    [
      0.5891020422696291,
      0.554204501929674,
      -0.5880613521008111
    ],
    [
      0.5834147405793312,
      0.5483992076763745,
      -0.5990705713809321
    ],
    [
      0.6162516981561383,
      0.4904844726689562,
      -0.6161646099788042
    ],
    [
      0.622493488307305,
      0.4874771429197681,
      -0.6122645605829093
    ],
    [
      0.5530705307212477,
      0.54465821662857,
      -0.6304446170019244
    ],
    [
      0.5820479699955909,
      0.4838900581325453,
      -0.653506367424598
    ],
    [
      0.584560695364672,
      0.48266283732296217,
      -0.6521697470000574
    ],
    [
      0.5585284722514171,
      0.5496310320124159,
      -0.6212500900068061
    ],
    [
      0.5161497438671697,
      0.5458909468136856,
      -0.6599943303489153
    ],
    [
      0.5472330871644687,
      0.47752342474643866,
      -0.6873916839261858
    ],
    [
      0.49844620008293494,
      0.5545913248288096,
      -0.6663181282596988
    ],
    [
      0.47590925439846193,
      0.5422970786168241,
      -0.6924046938760295
    ],
    [
      0.5121189040713252,
      0.47137222832894565,
      -0.7180128483899081
    ],
    [
      0.5466136326833588,
      0.4765660423336983,
      -0.6885479967722641
    ],
    [
      0.4774965458545,
      0.46212093999158876,
      -0.7472892917192858
    ],
    [
      0.5081331575594857,
      0.4659667878656792,
      -0.7243449777521537
    ],
    [
      0.43884314711191524,
      0.5446867859897134,
      -0.7146558594184379
    ],
    [
      0.4298785517633447,
      0.5328089751335001,
      -0.7289163372781807
    ],
    [
      0.39577654799580186,
      0.5222882510166423,
      -0.7553647509028361
    ],
    [
      0.39039631156935406,
      0.48674550676910866,
      -0.7814534736970126
    ],
    [
      0.40352201832264467,
      0.45062898733857404,
      -0.796306157516712
    ],
    [
      0.46176593837660335,
      0.4401515347789887,
      -0.7700901535449441
    ],
    [
      0.4139382395542867,
      0.5884595820965136,
      -0.6945289440142106
    ],
    [
      0.3682565645309149,
      0.5905399602464185,
      -0.7180875002616648
    ],
    [
      0.3564979386556506,
      0.5787804663331336,
      -0.7334319269880964
    ],
    [
      0.37913948597389935,
      0.5348070237113486,
      -0.7551388597896789
    ],
    [
      0.4140512038627497,
      0.5918816116215387,
      -0.6915473652643741
    ],
    [
      0.3984162911216672,
      0.6209848343378223,
      -0.6750128106127189
    ],
    [
      0.3714819655603399,
      0.6303250491272858,
      -0.6816828307256323
    ],
    [
      0.3509970602527654,
      0.6232606500215957,
      -0.6988184498341287
    ],
    [
      0.40855664681814674,
      0.6394589350514892,
      -0.651286217206788
    ],
    [
      0.3971767662201068,
      0.6588262429364844,
      -0.6389042166030328
    ],
    [
      0.3713425466599071,
      0.6677253170362916,
      -0.6451725459355184
    ],
    [
      0.355587564456433,
      0.6608688265323234,
      -0.6609159387711361
    ],
    [
      0.409317644681667,
      0.6744723678527565,
      -0.6144477933521679
    ],
    [
      0.39835333419905544,
      0.6920705085450255,
      -0.6019576665636259
    ],
    [
      0.37000837354783356,
      0.7026553243373892,
      -0.6077575986236662
    ],
    [
      0.3575287130413743,
      0.6954638356825926,
      -0.6233003069216589
    ],
    [
      0.39800164536662336,
      0.7235908188080046,
      -0.5639246556253965
    ],
    [
      0.3629040270232383,
      0.7356370229393613,
      -0.5719605210600031
    ],
    [
      0.3575401787133233,
      0.7293461826825796,
      -0.5832830928562855
    ],
    [
      0.41091327812996953,
      0.7051442320357995,
      -0.577859749319093
    ],
    [
      0.3669140375693184,
      0.7621750290561842,
      -0.5333510233587122
    ],
    [
      0.35562327514954684,
      0.751024222528329,
      -0.5563224814328724
    ],
    [
      0.41112642396120336,
      0.734497931758702,
      -0.5398961490537434
    ],
    [
      0.3985205720468959,
      0.7515675097958024,
      -0.5256687472874445
    ],
    [
      0.4196166584730638,
      0.7680646877780365,
      -0.48373390962421425
    ],
    [
      0.36940912395523207,
      0.7874813810660187,
      -0.4933659631682994
    ],
    [
      0.3580475080573896,
      0.7781356098857075,
      -0.5160493722520079
    ],
    [
      0.43897804916944727,
      0.7828709175571147,
      -0.44092108000260954
    ],
    [
      0.38849716005945517,
      0.8220368143528971,
      -0.41632371116029254
    ],
    [
      0.3606392752316636,
      0.8018782114247371,
      -0.4763723829134565
    ],
    [
      0.4445011565420859,
      0.7663480652366463,
      -0.4638204013848431
    ],
    [
      0.14638873366069616,
      -0.027860159797864787,
      -0.9888347436014044
    ],
    [
      0.17029699420484742,
      -0.04428175398112199,
      -0.984397308016001
    ],
    [
      0.26273172145707774,
      -0.016790571786110816,
      -0.9647228199018079
    ],
    [
      0.2729379152048089,
      -0.0025198692231640112,
      -0.9620283492198921
    ],
    [
      0.261364160689154,
      0.0532090930455266,
      -0.9637725706433684
    ],
    [
      0.32866815107747377,
      -0.005112871688770959,
      -0.9444316306702191
    ],
    [
      0.36380003178116027,
      0.053974741738535725,
      -0.9299119657958409
    ],
    [
      0.41796394906256323,
      0.024909678747466496,
      -0.9081220431135482
    ],
    [
      0.422550338863963,
      0.026554293818891926,
      -0.9059503742511121
    ],
    [
      0.443508590564286,
      0.06515812017702168,
      -0.8938985118405094
    ],
    [
      0.48905874321679293,
      0.05728315278020139,
      -0.8703678452762206
    ],
    [
      0.5137528716123879,
      0.06789116682344624,
      -0.8552477865375485
    ],
    [
      0.5150652386913444,
      0.07276744334336488,
      -0.854056613510544
    ],
    [
      0.559392755978294,
      0.10762878726509216,
      -0.8218855082740262
    ],
    [
      0.5333281761696509,
      0.16698628311520594,
      -0.8292627073219452
    ],
    [
      0.5672231728982752,
      0.19840086935043072,
      -0.7993090561029611
    ],
    [
      0.47556235316515777,
      0.25205207377921285,
      -0.8427990272630931
    ],
    [
      0.607503991593398,
      0.22509024400290098,
      -0.7617567080458191
    ],
    [
      0.5746787024885202,
      0.19718708859899775,
      -0.7942679906655952
    ],
    [
      0.6113421423430225,
      0.224368922908508,
      -0.7588935178457644
    ],
    [
      0.6432884795351334,
      0.25035350785810484,
      -0.7235351084781707
    ],
    [
      0.6433217598372601,
      0.2505347520805666,
      -0.7234427768108682
    ],
    [
      0.6731613873703699,
      0.27445557825598477,
      -0.6866788784561323
    ],
    [
      0.6754105929849447,
      0.2740584942932102,
      -0.6846257901872117
    ],
    [
      0.7009545331864877,
      0.2946996788125631,
      -0.6494727413164354
    ],
    [
      0.7422782917407192,
      0.287465375985695,
      -0.6052987652555413
    ],
    [
      0.12045586630564215,
      0.08502188145588534,
      -0.9890711116730984
    ],
    [
      0.11846927827354954,
      0.08414085038795853,
      -0.989386348905894
    ],
    [
      0.08032042280249105,
      0.023314793346333674,
      -0.9964963873953818
    ],
    [
      0.09147612622869486,
      -0.027216999463244473,
      -0.9954352582013607
    ],
    [
      0.22191625676176793,
      0.1444756806756236,
      -0.9643028324536645
    ],
    [
      0.19648432414666755,
      0.1223252024828886,
      -0.9728465733105851
    ],
    [
      0.34085113073531215,
      0.20239836237376177,
      -0.918071571057986
    ],
    [
      0.3027914836111945,
      0.21492824877708044,
      -0.9285058779190087
    ],
    [
      0.2900666550825154,
      0.20437867333203352,
      -0.9349281755815678
    ],
    [
      0.3802521435044521,
      0.2528304119954579,
      -0.889654477946622
    ],
    [
      0.42134535667776296,
      0.2912200258762268,
      -0.8588707626498521
    ],
    [
      0.37371477285049043,
      0.2689094892011689,
      -0.8877076969199224
    ],
    [
      0.4085390011177623,
      0.32860425788403147,
      -0.8515369200840243
    ],
    [
      0.13498619598117984,
      0.1447383638515249,
      -0.9802191249532495
    ],
    [
      0.15653372826700357,
      0.1447829209815221,
      -0.9770031206229027
    ],
    [
      0.13933874161596413,
      0.1462746793447477,
      -0.9793816586333802
    ],
    [
      0.22679643521099008,
      0.21267715875570084,
      -0.9504376902875799
    ],
    [
      0.3033277537878126,
      0.265769597618888,
      -0.9150731089719195
    ],
    [
      0.34529418298882286,
      0.2937175774842759,
      -0.8913483672901689
    ],
    [
      0.3754414163986768,
      0.351749566321529,
      -0.8575056766256255
    ],
    [
      0.34557407358848646,
      0.32270512329116097,
      -0.8811583076071495
    ],
    [
      0.39463708147146975,
      0.4010783589773271,
      -0.8266787307580467
    ],
    [
      0.37590726432961913,
      0.3788247155414467,
      -0.8456864451551556
    ],
    [
      0.39529172958046627,
      0.4372501361977571,
      -0.8078098581475261
    ],
    [
      0.41585101478502157,
      -0.7670131505640662,
      0.48862947144441976
    ],
    [
      0.43397089229559005,
      -0.7452313749780136,
      0.506260271390664
    ],
    [
      0.43996725900603506,
      -0.7168959679552029,
      0.540822505201373
    ],
    [
      0.42498398861099923,
      -0.7364967851931495,
      0.526270932908556
    ],
    [
      0.4057227263832154,
      -0.6863660555876491,
      0.6035649981843072
    ],
    [
      0.3980876402918367,
      -0.687244211306875,
      0.6076360955967548
    ],
    [
      0.44023332081162037,
      -0.6232930632413878,
      0.6462974396996636
    ],
    [
      0.4090999271576349,
      -0.5994792758369563,
      0.6879402935150813
    ],
    [
      0.38832421534920586,
      -0.5985092692162557,
      0.7007074699442323
    ],
    [
      -0.06270269087757925,
      0.08643933298976883,
      0.9942819591388524
    ],
    [
      -0.08981482595528983,
      0.1607335866222785,
      0.982902849304121
    ],
    [
      -0.06729135511339529,
      0.19575760022494498,
      0.9783408585361104
    ],
    [
      -0.16612358849228037,
      0.27123545455330134,
      0.9480687114021386
    ],
    [
      -0.15842046726995768,
      0.28616717157135835,
      0.9449927541864102
    ],
    [
      -0.2074611985256713,
      0.3776870255100986,
      0.902392576358885
    ],
    [
      -0.25222877787110093,
      0.38448662268088407,
      0.8880037615872459
    ],
    [
      0.9085397095633313,
      0.4123075177702779,
      -0.0675137536853762
    ],
    [
      0.904837510870331,
      0.42445566674941165,
      -0.033263581982341
    ],
    [
      0.9063689879616154,
      0.41808446787161063,
      -0.06083284791910849
    ],
    [
      0.9018859049168351,
      0.42897517453440287,
      0.050814507234844486
    ],
    [
      0.8984148335246239,
      0.4389779402681741,
      0.012212897315291505
    ],
    [
      0.9018923366053541,
      0.4312163749373535,
      -0.025350565248575815
    ],
    [
      0.2588788186836151,
      0.8933816451300072,
      0.36722063311009345
    ],
    [
      0.2799928568049596,
      0.8952626326862849,
      0.3465671921198247
    ],
    [
      0.31039074533759353,
      0.8897722536298975,
      0.3346086099895614
    ],
    [
      0.028525122483336947,
      0.9551756409868426,
      0.2946622002440845
    ],
    [
      -0.07178648657714452,
      0.9634945844364051,
      0.2579241867422064
    ],
    [
      -0.07378885072365823,
      0.9731571072994879,
      0.21799185769513213
    ],
    [
      -0.05653372987550216,
      0.9821654748100397,
      0.17931792291216436
    ],
    [
      -0.04855957591585655,
      0.9840690555909613,
      0.17102649331371342
    ],
    [
      0.03860723145242435,
      0.9726881607042238,
      0.22888255439288685
    ],
    [
      -0.09453781324509804,
      0.9397041489563028,
      0.3286620061722161
    ],
    [
      -0.10053081093301319,
      0.9547043075477504,
      0.28005935300025453
    ],
    [
      -0.12888386144410408,
      0.9268045815290435,
      0.35273533692562103
    ],
    [
      -0.14511273462921911,
      0.9080724150321664,
      0.39286993179178137
    ],
    [
      -0.1340197234095457,
      0.9258050425595472,
      0.3534455218397085
    ],
    [
      -0.18420528899789732,
      0.8943365052014396,
      0.40771390333084856
    ],
    [
      -0.22649696462032967,
      0.8796484849182404,
      0.41823159612686034
    ],
    [
      -0.22491299079534682,
      0.8891027374320021,
      0.39863575963831005
    ],
    [
      -0.24454162649717928,
      0.8589675492508322,
      0.44986013631364713
    ],
    [
      -0.27397765560531484,
      0.8420068190804932,
      0.4647157850245299
    ],
    [
      -0.24379705351015776,
      0.794758393150971,
      0.5558076044962428
    ],
    [
      -0.3080062338190878,
      0.8236164152444551,
      0.47622280548967283
    ],
    [
      -0.2980776461441941,
      0.8338756006169267,
      0.464544077095916
    ],
    [
      -0.3170780275692338,
      0.7670720468710772,
      0.5577293244413638
    ],
    [
      -0.3282139517987291,
      0.7656594384446872,
      0.5532099295613083
    ],
    [
      -0.32264170916858737,
      0.8143417380740711,
      0.48244156240447805
    ],
    [
      -0.3690259324254735,
      0.7524123108580655,
      0.5456148601960323
    ],
    [
      -0.3773272497829976,
      0.7932665640474109,
      0.4778622238005577
    ],
    [
      -0.36894589581445064,
      0.8030695552063551,
      0.4679297120961003
    ],
    [
      -0.3321156162326153,
      0.7636405666908144,
      0.5536716557297855
    ],
    [
      -0.42800676639456536,
      0.7407458016874302,
      0.517789402366362
    ],
    [
      -0.4354247667045871,
      0.7567414734079313,
      0.4875936986514994
    ],
    [
      -0.4024239068995437,
      0.7324475304738427,
      0.5491590063528746
    ],
    [
      -0.37210473354212353,
      0.8048901289612027,
      0.46226610039712374
    ],
    [
      -0.4518962757332956,
      0.7608328346071977,
      0.4657500979731016
    ],
    [
      -0.40738899117773747,
      0.8029773587450946,
      0.43504203384263584
    ],
    [
      -0.408848414408114,
      0.8050201995520051,
      0.4298667844218963
    ],
    [
      -0.47621864705499894,
      0.7560248428109133,
      0.44904591886558787
    ],
    [
      -0.47749652436020684,
      0.7689487636709352,
      0.42510571399695685
    ],
    [
      -0.4373626314256785,
      0.8023843625607358,
      0.40607051524385257
    ],
    [
      -0.4957325163810172,
      0.7806212715657498,
      0.3806306642686798
    ],
    [
      -0.4370921614471533,
      0.821667901544321,
      0.3658036385456107
    ],
    [
      -0.49593315624794715,
      0.777305844716333,
      0.38709937781373044
    ],
    [
      -0.509400204326326,
      0.7860800824405757,
      0.35012788495421926
    ],
    [
      -0.5088650868521138,
      0.7894769132048285,
      0.3431945904287632
    ],
    [
      -0.4549935362025007,
      0.8286743205289896,
      0.32600575533226595
    ],
    [
      -0.4326990492865173,
      0.8316628499137633,
      0.34800637468279444
    ],
    [
      -0.43350329018363193,
      0.8258814395267029,
      0.36054784043905563
    ],
    [
      -0.4734177892523868,
      0.838470825618455,
      0.269893074023935
    ],
    [
      -0.5238560296081363,
      0.7943403250823614,
      0.3075683796999421
    ],
    [
      -0.5205363182857481,
      0.8062764951285364,
      0.2809984959902127
    ],
    [
      -0.5646460068513526,
      0.79053022433251,
      0.2371431031331373
    ],
    [
      -0.5461639960306759,
      0.8141498684482555,
      0.1971417792998022
    ],
    [
      -0.5137038518673117,
      0.840746096727515,
      0.17103904061393466
    ],
    [
      -0.5120147782268196,
      0.8418032388486005,
      0.17090399041961166
    ],
    [
      -0.4944044516591085,
      0.8493689706125653,
      0.1847608993813556
    ],
    [
      -0.4719681842987139,
      0.8401492802426943,
      0.2671988396633824
    ],
    [
      0.20141575037906947,
      0.8876231620635849,
      0.4141941786982034
    ],
    [
      0.2003306549193573,
      0.9069154557879721,
      0.3706372684343497
    ],
    [
      0.17212997608002853,
      0.9405205806861457,
      0.2929032410890736
    ],
    [
      0.2085039118055343,
      0.9107308544433173,
      0.3565044593363949
    ],
    [
      -0.20621063032060094,
      0.748964802622937,
      0.6297054076111825
    ],
    [
      -0.292018331541712,
      0.7400146221142542,
      0.6058907930482955
    ],
    [
      -0.25638793968137896,
      0.6885065548575203,
      0.6783980751035236
    ],
    [
      -0.29216556396688004,
      0.6727716964071638,
      0.6797187122224472
    ],
    [
      -0.3215904212599344,
      0.6849936071769928,
      0.6537303412573947
    ],
    [
      -0.3279325469697184,
      0.6935908127641911,
      0.6413984947651984
    ],
    [
      -0.340420326727955,
      0.6986837480458397,
      0.6292495700173739
    ],
    [
      -0.41512335022731617,
      0.6947567103099768,
      0.5873548480904095
    ],
    [
      -0.43630199030367645,
      0.6741327347824357,
      0.5959745205558749
    ],
    [
      -0.47166844663683344,
      0.6789107095116499,
      0.5626803043981411
    ],
    [
      -0.48544988414476603,
      0.7041980040689955,
      0.5181154128657789
    ],
    [
      -0.5049333590326899,
      0.7029375216850807,
      0.5009202965973742
    ],
    [
      -0.5063845622112382,
      0.7301543485188385,
      0.4587475367706765
    ],
    [
      -0.526601649306511,
      0.6803578785687507,
      0.5097095839957214
    ],
    [
      -0.5799360437942161,
      0.6747060220361066,
      0.45655883403623465
    ],
    [
      -0.5757409536094464,
      0.6971306228310469,
      0.42723675994474297
    ],
    [
      -0.5562580988243999,
      0.712252484965342,
      0.4281043390961593
    ],
    [
      -0.5343078362962782,
      0.6567733648275202,
      0.5321314530503968
    ],
    [
      -0.6004802719560588,
      0.6349036794601717,
      0.4861283377869605
    ],
    [
      -0.5999563362600606,
      0.6383755231443768,
      0.4822126979161253
    ],
    [
      -0.5306585121944998,
      0.6495338047504832,
      0.544524912122376
    ],
    [
      -0.5352598662947995,
      0.6347498040627744,
      0.5573056269017412
    ],
    [
      -0.6123276645307708,
      0.5918847993362425,
      0.524144269800775
    ],
    [
      -0.6148709718550576,
      0.5997705919336959,
      0.51206339941605
    ],
    [
      -0.613177520030551,
      0.6099712060320456,
      0.5019446749802161
    ],
    [
      -0.6167270328178609,
      0.5599878043421562,
      0.5532281861761275
    ],
    [
      -0.5281812331583924,
      0.6190612238058738,
      0.5811951360079107
    ],
    [
      -0.5299173301226041,
      0.6129641737919331,
      0.5860567761602145
    ],
    [
      -0.6082657326666492,
      0.5520160133021542,
      0.5703429841082472
    ],
    [
      -0.517786743303418,
      0.5886762698668319,
      0.6207714053940575
    ],
    [
      -0.528807180178795,
      0.5481975734904555,
      0.6479524570603371
    ],
    [
      -0.5909240416811433,
      0.5172204766496702,
      0.6191056093248635
    ],
    [
      -0.60199262728503,
      0.5280392374298237,
      0.5989820034266448
    ],
    [
      -0.24784010960673006,
      0.6850409525053015,
      0.6850504897164538
    ],
    [
      -0.49529974970962676,
      0.5368964122815778,
      0.682949778839375
    ],
    [
      -0.4148379531880444,
      0.5683256614489302,
      0.710574003980859
    ],
    [
      -0.4901635672015699,
      0.46401363617895536,
      0.7378556924143204
    ],
    [
      -0.4980107673101018,
      0.5300158715399501,
      0.6863442660640144
    ],
    [
      -0.5435538611196641,
      0.43636904579967095,
      0.7170294665700913
    ],
    [
      -0.5504145530960463,
      0.4554703093502313,
      0.6997075224981394
    ],
    [
      -0.593539442472527,
      0.4716696216331077,
      0.6521032880287315
    ],
    [
      -0.5967613586410232,
      0.49316995580496226,
      0.6329765205157705
    ],
    [
      0.4256759591177898,
      -0.6587748188003009,
      -0.6203351642005961
    ],
    [
      0.5532742379895625,
      -0.5589912689158195,
      -0.6175891667224668
    ],
    [
      0.52782725427373,
      -0.5342572129756603,
      -0.6602784412877155
    ],
    [
      0.5187346385694698,
      -0.5363351177728586,
      -0.6657770018495498
    ],
    [
      0.4130219530326492,
      -0.6099762207826619,
      -0.6762705644879107
    ],
    [
      0.40979783521681734,
      -0.6309746109077008,
      -0.6587387757233407
    ],
    [
      0.5925984621678524,
      -0.6352100765915245,
      -0.495313255660381
    ],
    [
      0.6163640133582237,
      -0.5849856837720288,
      -0.5271500287571989
    ],
    [
      0.42222039096436803,
      -0.6870421765204061,
      -0.5913569050378962
    ],
    [
      0.42591924754887306,
      -0.6895806439067272,
      -0.585722912405333
    ],
    [
      0.5732866315546318,
      -0.6582799327306981,
      -0.487862653053922
    ],
    [
      0.6576168652086586,
      -0.5451778547284676,
      -0.5199241918845505
    ],
    [
      0.6715593285519512,
      -0.4840367522671419,
      -0.5609959809923152
    ],
    [
      0.6584957265134986,
      -0.4037848223220397,
      -0.6350914858709874
    ],
    [
      0.6581442304693802,
      -0.4417943893909709,
      -0.6096424274954348
    ],
    [
      0.5442560503243006,
      -0.7547130198058507,
      -0.36632445921740775
    ],
    [
      0.5433571084328279,
      -0.7538791170986544,
      -0.3693634111793822
    ],
    [
      0.5242730171053489,
      -0.7683928731243909,
      -0.3670288763393125
    ],
    [
      0.4728290379383577,
      -0.8128037085652504,
      -0.3402687646917692
    ],
    [
      0.5494063472652815,
      -0.7334650068407303,
      -0.4002271221753322
    ],
    [
      0.5705926761125836,
      -0.6636691863832032,
      -0.483701570198131
    ],
    [
      0.5588170429817345,
      -0.6945537904993045,
      -0.45312089399651223
    ],
    [
      0.5493929554954947,
      -0.7329032461845655,
      -0.4012732388087343
    ],
    [
      -0.07637090948934457,
      -0.8535118696327267,
      -0.5154463818670353
    ],
    [
      -0.0881697532296439,
      -0.8469666254469553,
      -0.5242839211671674
    ],
    [
      -0.018865101865347435,
      -0.8061299917878366,
      -0.5914376926369781
    ],
    [
      -0.07348294118489447,
      -0.8285721715761529,
      -0.5550391101935029
    ],
    [
      -0.19414890266150453,
      -0.023494086446972585,
      -0.9806906910424692
    ],
    [
      -0.21347754210357434,
      -0.11532419939129125,
      -0.9701173475678982
    ],
    [
      -0.28165971708146614,
      -0.1863838579403046,
      -0.9412379408379566
    ],
    [
      -0.2774590750047069,
      -0.08956592286634012,
      -0.9565534000559682
    ],
    [
      -0.3044317368524427,
      -0.1538483214545066,
      -0.9400276653283327
    ],
    [
      -0.34973724384949473,
      -0.1482228471004042,
      -0.9250480246246728
    ],
    [
      -0.3703681861277842,
      -0.18026665096423836,
      -0.9112251869074693
    ],
    [
      -0.34877971974936534,
      -0.22266727818668777,
      -0.9103691505738133
    ],
    [
      -0.2945920595779801,
      -0.2004721529828451,
      -0.9343588359468896
    ],
    [
      -0.350852753049095,
      -0.24832534224142255,
      -0.9029046849355424
    ],
    [
      -0.3419566262228761,
      -0.2572495126263608,
      -0.9038187617192774
    ],
    [
      -0.391110217500703,
      -0.2541839678777107,
      -0.8845469508400873
    ],
    [
      -0.40056570986162676,
      -0.30751106840199677,
      -0.8631245882798807
    ],
    [
      -0.36196238003510806,
      -0.3192175769568101,
      -0.8758329601020637
    ],
    [
      -0.40779442025994295,
      -0.31118093442564415,
      -0.8584114030316932
    ],
    [
      -0.42073439744154845,
      -0.3512650007002754,
      -0.8364182363462269
    ],
    [
      -0.43159737254832714,
      -0.3561659815018257,
      -0.8287759055560324
    ],
    [
      -0.4478415758105969,
      -0.3974688236268005,
      -0.8009097684634697
    ],
    [
      -0.4509977367658621,
      -0.3987855192049826,
      -0.7984805264403652
    ],
    [
      -0.4694077378315942,
      -0.4395443295293407,
      -0.7658049086042917
    ],
    [
      -0.47019876396272586,
      -0.4398280327569135,
      -0.7651564702523976
    ],
    [
      -0.4887064266563958,
      -0.47750836097211696,
      -0.7301724411030995
    ],
    [
      -0.4906517833697374,
      -0.4781061086102205,
      -0.7284746916576363
    ],
    [
      -0.5069376630516912,
      -0.5102014913029226,
      -0.694772368515015
    ],
    [
      -0.5114703943717029,
      -0.5113910537007996,
      -0.6905629774872387
    ],
    [
      -0.5255945240600198,
      -0.5387575068433518,
      -0.658400140566553
    ],
    [
      -0.5650262307951621,
      -0.5465449394190245,
      -0.618088980413716
    ],
    [
      -0.6270134274479806,
      -0.529564773009183,
      -0.5713276756710359
    ],
    [
      -0.6083120041629227,
      -0.6474575635060029,
      -0.45908083062806965
    ],
    [
      -0.6185247390409593,
      -0.6643757419509337,
      -0.41956170070856014
    ],
    [
      -0.6181645874135052,
      -0.6658072874731886,
      -0.41781957686959287
    ],
    [
      -0.6208296135864204,
      -0.6707463540659699,
      -0.4057954156977926
    ],
    [
      -0.6119225740477178,
      -0.6930657410752168,
      -0.3810651413061498
    ],
    [
      -0.6168138968048521,
      -0.7025248386486028,
      -0.354964037319512
    ],
    [
      -0.6117481268442029,
      -0.7136807876865483,
      -0.3412095581746166
    ],
    [
      -0.6143194712552065,
      -0.7198506229092366,
      -0.3231511533847704
    ],
    [
      -0.6068298014346668,
      -0.7345482610134709,
      -0.30363867397426264
    ],
    [
      -0.6084472219840844,
      -0.7392824518574969,
      -0.28853671245686935
    ],
    [
      -0.5983589477531037,
      -0.7567369569746065,
      -0.2632788400016434
    ],
    [
      -0.5987709546394239,
      -0.7593317134642363,
      -0.25473259078425725
    ],
    [
      -0.587861245953202,
      -0.7760115809862375,
      -0.22852829514436335
    ],
    [
      -0.5873372625369764,
      -0.7870066134136957,
      -0.18882672077509724
    ],
    [
      -0.5829896155302741,
      -0.7905073092201734,
      -0.18767339250235882
    ],
    [
      -0.5415472419391327,
      -0.8262684670029035,
      -0.15494194133542433
    ],
    [
      -0.5411334837810013,
      -0.8301563846163934,
      -0.13421970724031404
    ],
    [
      -0.5269146841452513,
      -0.8435455235679495,
      -0.1038839029907143
    ],
    [
      -0.5268846517625246,
      -0.8437073621526092,
      -0.1027153872921137
    ],
    [
      -0.5144751617859228,
      -0.8540220214532173,
      -0.07721201187839263
    ],
    [
      -0.5146675359659575,
      -0.8573469236258018,
      0.008577876899524451
    ],
    [
      -0.0849529086644015,
      -0.2903462750257341,
      -0.9531432441601517
    ],
    [
      -0.04966872355841658,
      -0.2699305689354255,
      -0.9615978919768258
    ],
    [
      -0.10427203722357721,
      -0.374914662672182,
      -0.921176605199377
    ],
    [
      -0.08425210638643148,
      -0.35817955096157583,
      -0.9298435308386102
    ],
    [
      -0.1370545131618374,
      -0.4459810832457537,
      -0.884486819465907
    ],
    [
      -0.10432143282046799,
      -0.41594983410996195,
      -0.903384067912524
    ],
    [
      -0.11489555121381147,
      -0.4940731391524599,
      -0.8617950716262588
    ],
    [
      -0.1129814236109141,
      -0.4951831762307435,
      -0.8614109471656857
    ],
    [
      -0.20410794266741428,
      -0.818318134420878,
      -0.5373038047678516
    ],
    [
      -0.2664949361218504,
      -0.7875829771563468,
      -0.5556019286458211
    ],
    [
      -0.3002452938000985,
      -0.8113092622187212,
      -0.5016273961707104
    ],
    [
      -0.18905712106282027,
      -0.7958088456880015,
      -0.5752787898924909
    ],
    [
      -0.24458376398364168,
      -0.7664167053938973,
      -0.5939564092496674
    ],
    [
      -0.2661126190132758,
      -0.7682534407015379,
      -0.5822119243472637
    ],
    [
      -0.1536015268476328,
      -0.7894761820612085,
      -0.5942507289925132
    ],
    [
      -0.15705272104697643,
      -0.7773459301317502,
      -0.6091533039550426
    ],
    [
      -0.21846892237263932,
      -0.7462618868782624,
      -0.6287801890567428
    ],
    [
      -0.21850302343927663,
      -0.7397141383743636,
      -0.6364585000115621
    ],
    [
      -0.13582566427478254,
      -0.7500432483259869,
      -0.6472916765762681
    ],
    [
      -0.19511288611520633,
      -0.7215521912505792,
      -0.6642991773089005
    ],
    [
      -0.08314910525253706,
      -0.7366635687584386,
      -0.6711281641831043
    ],
    [
      -0.08424935882064444,
      -0.7311866531343739,
      -0.6769550382532528
    ],
    [
      -0.06945147595165475,
      -0.6941293709251033,
      -0.716492085725486
    ],
    [
      -0.05313087000083125,
      -0.6816416647186408,
      -0.7297545831117161
    ],
    [
      -0.05382292612050009,
      -0.6692082944340723,
      -0.7411230338374778
    ],
    [
      0.002543950390004601,
      -0.6301714025946498,
      -0.7764518862545863
    ],
    [
      0.005334384179485743,
      -0.6915414245719903,
      -0.7223171065718766
    ],
    [
      0.030582649865218088,
      -0.6331629649800918,
      -0.7734140943277673
    ],
    [
      0.02763990128519587,
      -0.701562870691202,
      -0.7120713267113515
    ],
    [
      0.07831935554720941,
      -0.6573392265604361,
      -0.7495139890432982
    ],
    [
      0.073618359487,
      -0.648746070623679,
      -0.7574357220231823
    ],
    [
      0.03588841066877337,
      -0.6317081273295928,
      -0.7743751441293867
    ],
    [
      0.021668602874331443,
      -0.7007443707990162,
      -0.7130833039995856
    ],
    [
      0.06073851366146591,
      -0.7211941380562247,
      -0.6900651043137416
    ],
    [
      0.11354117488321837,
      -0.6813177636456691,
      -0.7231282780717421
    ],
    [
      0.10897142037419098,
      -0.6712161181449658,
      -0.7332081234438381
    ],
    [
      0.0621869169632196,
      -0.7243414723352932,
      -0.686631064556323
    ],
    [
      0.13317245790083984,
      -0.690337947565576,
      -0.7111248938179545
    ],
    [
      0.00999766232609257,
      -0.5754725749037218,
      -0.81775996617693
    ],
    [
      0.025946645519358248,
      -0.5313395101022623,
      -0.8467615346663904
    ],
    [
      0.049717799374652975,
      -0.5935897139051026,
      -0.8032305970089786
    ],
    [
      0.0967209142515773,
      -0.557885237680041,
      -0.824262777471495
    ],
    [
      0.1006511903644582,
      -0.5664134006467305,
      -0.8179518307614599
    ],
    [
      0.10073320399062388,
      -0.5661254300253458,
      -0.8181410752996091
    ],
    [
      0.10390511066332005,
      -0.5011683837646063,
      -0.8590890402588172
    ],
    [
      0.08629716661028444,
      -0.48715379130020775,
      -0.8690419913081706
    ],
    [
      0.09785471075871675,
      -0.4343815478600261,
      -0.8953977476300997
    ],
    [
      0.08243850885773316,
      -0.4169707608796023,
      -0.9051736169535649
    ],
    [
      0.10229528228313663,
      -0.3800508356477934,
      -0.919291595494067
    ],
    [
      0.0966831118888451,
      -0.34294891257718474,
      -0.9343652493739348
    ],
    [
      0.06351739539173293,
      -0.3318128657582253,
      -0.9412044212603149
    ],
    [
      0.085277885881921,
      -0.24075304540328854,
      -0.9668327949074504
    ],
    [
      0.02382682865142227,
      -0.6896703532321027,
      0.7237313632205824
    ],
    [
      0.03164602581656964,
      -0.7058721283068206,
      0.7076320142062655
    ],
    [
      0.042790368305957074,
      -0.7234542370585522,
      0.6890449559080081
    ],
    [
      0.030687062230683362,
      -0.7662656318987491,
      0.6417906867370863
    ],
    [
      0.0020369255578871984,
      -0.7935237335410676,
      0.6085358947846186
    ],
    [
      0.05256064308869458,
      -0.7355880829690861,
      0.6753869638895674
    ],
    [
      0.05109141546118665,
      -0.7409800638150011,
      0.6695806241931507
    ],
    [
      0.2644798184565023,
      -0.7486979122070933,
      0.6078666481112079
    ],
    [
      0.278705784946588,
      -0.762121731595933,
      0.5843744960780911
    ],
    [
      0.31887889759370147,
      -0.7610204229416352,
      0.5649461607402607
    ],
    [
      0.3214981458457661,
      -0.7092852088371017,
      0.6273383734019813
    ],
    [
      0.33707401843493484,
      -0.6760572781583523,
      0.6552309995301242
    ],
    [
      -0.6283102296108062,
      -0.3990661284388954,
      0.667811710363937
    ],
    [
      -0.6317384100814204,
      -0.3801656209777832,
      0.6755595324280279
    ],
    [
      -0.6340713638972961,
      -0.4363192465337416,
      0.6384191574425462
    ],
    [
      -0.6382035314720622,
      -0.4163480064902562,
      0.6475728452523145
    ],
    [
      -0.6389869492923959,
      -0.47169226287057453,
      0.6076200192406714
    ],
    [
      -0.6435821082760511,
      -0.4515854341421352,
      0.617958465900106
    ],
    [
      -0.640859791239521,
      -0.5055973151581155,
      0.577641829231006
    ],
    [
      -0.6463187586219271,
      -0.4840335928907531,
      0.5899012995465258
    ],
    [
      -0.6432719886010564,
      -0.5356653065599788,
      0.5470501147328701
    ],
    [
      -0.6481499546989429,
      -0.5177593446262324,
      0.5584146284580774
    ],
    [
      -0.651272240111982,
      -0.5491634349710595,
      0.5237021968163852
    ],
    [
      -0.6467343496403881,
      -0.5649493132862288,
      0.512412874948164
    ],
    [
      -0.6527982407837684,
      -0.5771694354378675,
      0.49064233370750887
    ],
    [
      -0.6430388878293668,
      -0.6079713242186604,
      0.46569502645720784
    ],
    [
      -0.6488076343858366,
      -0.6411749669645035,
      0.40980887655189036
    ],
    [
      -0.6539725538955244,
      -0.6272814037296769,
      0.42289234952442856
    ],
    [
      -0.6462805416647486,
      -0.6086953709046095,
      0.46022973274748236
    ],
    [
      -0.6449126270383788,
      -0.667890418319714,
      0.37149709635900835
    ],
    [
      -0.6522248396540739,
      -0.650484991781646,
      0.3891940826953174
    ],
    [
      -0.6363565574979304,
      -0.6930510158532448,
      0.338719088854125
    ],
    [
      -0.6460874091595018,
      -0.6723427061664219,
      0.36128429967322834
    ],
    [
      -0.6264941124832641,
      -0.7176606977308146,
      0.3040859252848237
    ],
    [
      -0.6372651163460632,
      -0.6972984474130245,
      0.32812809499313506
    ],
    [
      -0.6137075926493274,
      -0.7410376836510572,
      0.27244475060761036
    ],
    [
      -0.6266463873958856,
      -0.7191910093481763,
      0.30013096680688744
    ],
    [
      -0.5985667929416102,
      -0.7636619636755947,
      0.24194668756304633
    ],
    [
      -0.6004709351851485,
      -0.761804649925489,
      0.24308091523148453
    ],
    [
      -0.6137190350289611,
      -0.7419362318280206,
      0.2699621713202767
    ],
    [
      -0.5832325376357785,
      -0.7841789829360406,
      0.2119035860110135
    ],
    [
      -0.5692215293477074,
      -0.8021512837871856,
      0.1803889365943133
    ],
    [
      -0.5830504496094439,
      -0.7857331196165032,
      0.2065808266706846
    ],
    [
      -0.5538773779840669,
      -0.8195150403185931,
      0.14702023278824508
    ],
    [
      -0.5688360467775188,
      -0.8037429696256363,
      0.17442130220786664
    ],
    [
      -0.5384004737276715,
      -0.8342674884670039,
      0.11883891440423162
    ],
    [
      -0.5537968397387263,
      -0.8197239079605285,
      0.14615667967396628
    ],
    [
      -0.5242089095863355,
      -0.8471157804745387,
      0.08717725380693137
    ],
    [
      -0.5375944076956948,
      -0.8360069127178923,
      0.10993040845104453
    ],
    [
      -0.5158802751680457,
      -0.856611159163597,
      0.009212148985992617
    ],
    [
      -0.41470016523190717,
      0.044647274470385294,
      0.9088621423730856
    ],
    [
      -0.32219826455264167,
      0.05128744107652615,
      0.9452819033003265
    ],
    [
      0.6155950338156829,
      0.6193691107117615,
      -0.48726241291278555
    ],
    [
      0.5933279027089923,
      0.6080147576925553,
      -0.5275225628302659
    ],
    [
      0.5933825158782328,
      0.606365730170902,
      -0.5293560154794953
    ],
    [
      0.6317854237989523,
      0.6318537417992535,
      -0.44900782537664147
    ],
    [
      0.6142239488345564,
      0.6246970099159325,
      -0.48216448073264123
    ],
    [
      0.6268356199942137,
      0.6607471558613106,
      -0.4129047124066988
    ],
    [
      0.623493832153471,
      0.6553168607923843,
      -0.42639799862076533
    ],
    [
      0.6333683480884249,
      0.6752463963086202,
      -0.3780037564786384
    ],
    [
      0.626158560321877,
      0.663121455442187,
      -0.4101163160225033
    ],
    [
      0.6436792486355946,
      0.6856201662675628,
      -0.3400029595211723
    ],
    [
      0.627750513250978,
      0.691564823159582,
      -0.3573057353043607
    ],
    [
      0.6542013868177661,
      0.6936035812864674,
      -0.3015536726891225
    ],
    [
      0.6383788627226146,
      0.7143035982488878,
      -0.2867800501389049
    ],
    [
      0.638566477203781,
      0.7161841481941105,
      -0.2816258512051573
    ],
    [
      0.6165950954400293,
      0.7426852820753667,
      -0.261206929594018
    ],
    [
      0.5964697125052782,
      0.7580429826230581,
      -0.26380810935187105
    ],
    [
      0.5974444051084501,
      0.7570992672857121,
      -0.2643120925724889
    ],
    [
      0.5778523478422251,
      0.7714253885997469,
      -0.2664386119108068
    ],
    [
      0.553601473133317,
      0.7853083157317398,
      -0.2771574609986161
    ],
    [
      0.564823471856085,
      0.7778187868355855,
      -0.27563087723630775
    ],
    [
      0.5301443895057236,
      0.7955551889951004,
      -0.2933238270897436
    ],
    [
      0.5114043069205604,
      0.7991330902114354,
      -0.31599357428945146
    ],
    [
      0.5187592772627078,
      0.7963331170201959,
      -0.31103436946866825
    ],
    [
      0.49420224908109656,
      0.7993945250543623,
      -0.34166142643894754
    ],
    [
      0.4768301313557688,
      0.7947052305847059,
      -0.37560168039100933
    ],
    [
      0.4918214824570263,
      0.7951472681455342,
      -0.3547568904961075
    ],
    [
      0.4728400445468005,
      0.7862263382767548,
      -0.39783217224466083
    ],
    [
      0.3869474176864259,
      0.9220545895055364,
      0.009328982666049418
    ],
    [
      0.3913367142364967,
      0.9189561784700431,
      0.048735183823566605
    ],
    [
      0.4095325159794134,
      0.9040555396809765,
      0.12233846299390014
    ],
    [
      0.39469225814272046,
      0.9143757745634025,
      0.09019403668634546
    ],
    [
      0.39088820235984906,
      0.9190334486399482,
      0.05083240636493088
    ],
    [
      0.3351332775013877,
      0.9061884387278117,
      0.2578918374575453
    ],
    [
      0.3518433463031941,
      0.909857118051795,
      0.219923360270465
    ],
    [
      0.3392745744156259,
      0.919996017624226,
      0.196214399855517
    ],
    [
      0.3448235715435637,
      0.9210267567447167,
      0.1811254202707315
    ],
    [
      0.3339630794197561,
      0.9290992556827012,
      0.15888119672989662
    ],
    [
      0.3383094122795137,
      0.9297320264158345,
      0.14541355033075837
    ],
    [
      0.3238219154782781,
      0.9388460198106134,
      0.1170791106122186
    ],
    [
      0.32619212963569655,
      0.9392112429394169,
      0.10714912832088014
    ],
    [
      0.3087733872757554,
      0.9484600611614472,
      0.07129170843709735
    ],
    [
      0.2974334192441225,
      0.9526026042279873,
      0.06388771035814916
    ],
    [
      0.2981083439504686,
      0.9543404950475767,
      0.019121578895459308
    ],
    [
      0.2515343372157491,
      0.9677347084021816,
      -0.014832779752242415
    ],
    [
      0.25586874548458494,
      0.9664736192308766,
      -0.021445941688703937
    ],
    [
      0.2667347324221534,
      0.960938752075817,
      -0.073819355718224
    ],
    [
      0.24266749636979576,
      0.9644695908336135,
      -0.10445522755160387
    ],
    [
      0.20849703086239071,
      0.9716037743479022,
      -0.1118708800111896
    ],
    [
      0.19341881887093712,
      0.9734710108918452,
      -0.12224300168018025
    ],
    [
      0.15653467103250457,
      0.978710099914908,
      -0.13275329408077377
    ],
    [
      0.1575440344367027,
      0.9762893432023518,
      -0.14845536555789307
    ],
    [
      0.16065037679634586,
      0.9652582615800775,
      -0.20607752154613754
    ],
    [
      0.151470536643803,
      0.9719072702979292,
      -0.18014698018802988
    ],
    [
      0.1586975938491864,
      0.9566771476493843,
      -0.244098154175563
    ],
    [
      0.15012161428500748,
      0.9543880316742143,
      -0.25808329260431084
    ],
    [
      0.1498220929301852,
      0.948072177707482,
      -0.28055745637393337
    ],
    [
      0.12534151041202843,
      0.9415636967740576,
      -0.3126456631472788
    ],
    [
      0.08585767990750409,
      0.9408683381182994,
      -0.3277121131838278
    ],
    [
      0.05807300430289284,
      0.9427736045905386,
      -0.32833741282193085
    ],
    [
      0.05796659369805164,
      0.9427455226465963,
      -0.3284368334167788
    ],
    [
      0.042892833172362234,
      0.9348611207706575,
      -0.3524129534138578
    ],
    [
      0.042068917829389166,
      0.9338524580899704,
      -0.3551757208368615
    ],
    [
      0.024221908795594303,
      0.9235388173307405,
      -0.3827392742032557
    ],
    [
      0.02183264742000082,
      0.9201921613747802,
      -0.39085767441748426
    ],
    [
      0.005027163263965368,
      0.9094241146421126,
      -0.41583952113396694
    ],
    [
      -0.0019207252563065921,
      0.8981284643062873,
      -0.43972897609472994
    ],
    [
      -0.010871874958231253,
      0.89477255850094,
      -0.44638981942756545
    ],
    [
      -0.02678267483441608,
      0.8829436590753403,
      -0.4687143940902212
    ],
    [
      -0.02740155795797187,
      0.8720581414257846,
      -0.4886345798185819
    ],
    [
      -0.04624817381927995,
      0.852805258588102,
      -0.520177178798592
    ],
    [
      -0.06898374462823459,
      0.8448148960602233,
      -0.5305930968000061
    ],
    [
      -0.0786105209464467,
      0.8342035691847465,
      -0.5458248722401337
    ],
    [
      -0.09554496456868963,
      0.827480610886713,
      -0.5533055199002809
    ],
    [
      -0.10805699512967404,
      0.812834668731037,
      -0.5723840381356304
    ],
    [
      -0.1203170692442409,
      0.8074312925131241,
      -0.5775625600045959
    ],
    [
      -0.13469378579305816,
      0.7892408998136408,
      -0.5991296905763297
    ],
    [
      -0.14386512091294107,
      0.7848504556013087,
      -0.6027541698960887
    ],
    [
      -0.16243469874107133,
      0.7584794763698786,
      -0.6311290300489847
    ],
    [
      -0.1651986473722119,
      0.7570024828605397,
      -0.6321840300492965
    ],
    [
      -0.18455434638335105,
      0.7290956035414564,
      -0.6590594010614927
    ],
    [
      -0.18449655308321655,
      0.7277160601658317,
      -0.6605984844647553
    ],
    [
      -0.20348768598941874,
      0.70072122382718,
      -0.6838000644404845
    ],
    [
      -0.20339222186630324,
      0.6900386094248734,
      -0.6946065948342814
    ],
    [
      -0.219924951049815,
      0.666744158460945,
      -0.7120991806370394
    ],
    [
      -0.2212901193943652,
      0.6512483130775846,
      -0.7258831295546329
    ],
    [
      -0.15078928970038916,
      0.6478098472148708,
      -0.7467295306622727
    ],
    [
      -0.23233782238149095,
      0.636088176880561,
      -0.7358063383280895
    ],
    [
      -0.23700626860344268,
      0.6033429197855374,
      -0.7614495057371403
    ],
    [
      -0.22581662963503293,
      0.592773919103126,
      -0.7730626951362968
    ],
    [
      -0.17455406384353367,
      0.6017586483691688,
      -0.7793698787537395
    ],
    [
      -0.32002713236386726,
      0.5672377680191467,
      -0.7588306458516396
    ],
    [
      -0.32017131106087743,
      0.566217135107566,
      -0.759531755415229
    ],
    [
      -0.2512849922978066,
      0.5187695758972807,
      -0.8171499126655076
    ],
    [
      -0.22636956699534985,
      0.5558687141656277,
      -0.7998542315635954
    ],
    [
      -0.3085657697787724,
      0.5833321558092418,
      -0.7513393119754724
    ],
    [
      -0.2537197790255231,
      0.5080115068999587,
      -0.8231346078184739
    ],
    [
      -0.3401548526526425,
      0.5327890619492217,
      -0.7748745006025992
    ],
    [
      -0.2716004565089054,
      0.48443440936208376,
      -0.8315987584467422
    ],
    [
      -0.3243109850164836,
      0.44231606995539124,
      -0.8361691690422792
    ],
    [
      -0.2763496501316028,
      0.4716928222677738,
      -0.8373390903888359
    ],
    [
      -0.34351430119231513,
      0.5303681931758122,
      -0.7750532269101135
    ],
    [
      -0.3614169658680042,
      0.48988329494053867,
      -0.7933423813971917
    ],
    [
      -0.34311611327353,
      0.44476881509004196,
      -0.8273161632262881
    ],
    [
      -0.33764664992392185,
      0.35892749167468996,
      -0.8701527426350318
    ],
    [
      -0.3184492630333901,
      0.3733748884307285,
      -0.8713100823259374
    ],
    [
      -0.428203721898281,
      0.4074331169085638,
      -0.8066224815851789
    ],
    [
      -0.4105581122164865,
      0.37753327910128365,
      -0.8300064214596579
    ],
    [
      -0.40757262800379374,
      0.3187856609021898,
      -0.855722066622823
    ],
    [
      -0.3523719673835103,
      0.33254539440703007,
      -0.8747842918462512
    ],
    [
      -0.43886434121585066,
      0.26801431304752965,
      -0.8576516880475653
    ],
    [
      -0.41564721490444867,
      0.24319716545247969,
      -0.8764088837169864
    ],
    [
      -0.35064754862947217,
      0.2392994261275909,
      -0.905418180342734
    ],
    [
      -0.33825170224180945,
      0.2646513559029045,
      -0.9030755481958708
    ],
    [
      -0.4321822793288084,
      0.4080228473860456,
      -0.8041988767992279
    ],
    [
      -0.49825274574033807,
      0.30542107933514245,
      -0.8114568168793522
    ],
    [
      -0.4649960130956875,
      0.2719259213804747,
      -0.8425170627865617
    ],
    [
      -0.5413235412614524,
      0.30519385817795647,
      -0.7834701861632094
    ],
    [
      -0.5496944920430641,
      0.2226535847794679,
      -0.8051467857492632
    ],
    [
      -0.49894042893350254,
      0.2164095542652313,
      -0.8391813589435697
    ],
    [
      -0.5406535621413932,
      0.30606075435791436,
      -0.7835946275885812
    ],
    [
      -0.5911594470370358,
      0.27084513354790873,
      -0.7597193046199903
    ],
    [
      -0.6001709488881518,
      0.22114999655792156,
      -0.7686920782297205
    ],
    [
      -0.5558731343203946,
      0.21185098525273707,
      -0.8038185234169869
    ],
    [
      -0.6258389786351055,
      0.2741158456460683,
      -0.730195916166825
    ],
    [
      -0.6369501947555172,
      0.2660953300878685,
      -0.7235245156221985
    ],
    [
      -0.6461298491330842,
      0.2222681699070951,
      -0.7301459297328229
    ],
    [
      -0.6053814490860072,
      0.2131271527682033,
      -0.7668703396633912
    ],
    [
      -0.6876280115538269,
      0.22479409477001194,
      -0.6903878132492353
    ],
    [
      -0.6504602737288749,
      0.21610571511665044,
      -0.7281481663744531
    ],
    [
      -0.6750112319035685,
      0.2750082693746671,
      -0.6846388015439802
    ],
    [
      -0.6908087398383993,
      0.22059657035416616,
      -0.6885640406751301
    ],
    [
      -0.6944710080273796,
      0.3164146687972406,
      -0.6462134139580884
    ],
    [
      -0.7553888671301151,
      0.23475718562930498,
      -0.6117815976402767
    ],
    [
      0.29219438436377987,
      0.8904554389782661,
      -0.34887182881438705
    ],
    [
      0.283479820835714,
      0.8781486604243179,
      -0.38534934977748103
    ],
    [
      0.28575067981873087,
      0.8725555293262918,
      -0.39622392308547943
    ],
    [
      0.3164116135362773,
      0.85321604884419,
      -0.41461556267713606
    ],
    [
      0.29931088536972345,
      0.9036365993356781,
      -0.30635582292530905
    ],
    [
      0.28926930980731075,
      0.8940125716906908,
      -0.34214731923924174
    ],
    [
      0.24760669545483605,
      0.8757882085636685,
      -0.4143500188328421
    ],
    [
      0.22275116078563376,
      0.8647048112484645,
      -0.4501860834948256
    ],
    [
      0.2201054043815667,
      0.8433516367374947,
      -0.49021589914466857
    ],
    [
      0.22547020728091433,
      0.8386122759629255,
      -0.49587562577019606
    ],
    [
      0.28051735797031135,
      0.8222365052817103,
      -0.4952142377390578
    ],
    [
      0.28981355718362756,
      0.8251369583994002,
      -0.484929996964468
    ],
    [
      0.1949667297428979,
      0.8116722564087299,
      -0.5506143137167077
    ],
    [
      0.1870258653217812,
      0.7860952086700645,
      -0.5891312660236312
    ],
    [
      0.1944246664983018,
      0.7946467327347516,
      -0.5750961825738441
    ],
    [
      0.14014390497664378,
      0.7556251438451749,
      -0.6398361726933357
    ],
    [
      0.18558244402418736,
      0.7705479091094888,
      -0.6097664112076069
    ],
    [
      0.13150798453686854,
      0.710089211245789,
      -0.6917217374605079
    ],
    [
      0.13577707549543339,
      0.7112287610216258,
      -0.689723303409092
    ],
    [
      0.1368811124978438,
      0.7119455760354513,
      -0.6887648784635452
    ],
    [
      0.09279336444699733,
      0.675396031531341,
      -0.7315938710147336
    ],
    [
      0.07411944789724279,
      0.6715821719212798,
      -0.7372134655585888
    ],
    [
      0.034561948130819406,
      0.6504101971265455,
      -0.7587964464961673
    ],
    [
      0.05032639670087378,
      0.645838422095277,
      -0.7618136165366101
    ],
    [
      -0.014080992737386071,
      0.6402348283432752,
      -0.7680501873053522
    ],
    [
      -0.018836746573419372,
      0.6132290729296972,
      -0.7896804930427956
    ],
    [
      0.026725302853599628,
      0.5944544813587286,
      -0.803685030207673
    ],
    [
      0.05259275010773351,
      0.6380810954173738,
      -0.7681708913432412
    ],
    [
      0.0007699754537183295,
      0.5550742138318007,
      -0.8318004714333895
    ],
    [
      0.027168729752832056,
      0.5927720205652742,
      -0.8049119155277674
    ],
    [
      -0.018448744481795152,
      0.5010710490362453,
      -0.8652094819433974
    ],
    [
      0.006046166969011677,
      0.541860092799627,
      -0.8404469547188343
    ],
    [
      -0.036690027538079414,
      0.4407518254091624,
      -0.8968788492755007
    ],
    [
      -0.00804665297684627,
      0.48251258663077257,
      -0.8758520737651715
    ],
    [
      -0.011514005133789185,
      0.40861713237191866,
      -0.9126332597587757
    ],
    [
      0.017850852265668977,
      0.21524707845825883,
      -0.9763964575358585
    ],
    [
      0.01752882382965241,
      0.21551868617902653,
      -0.9763423765477023
    ],
    [
      -0.25289436140817306,
      0.4538524458592954,
      -0.8544368902121957
    ],
    [
      -0.23671257413124777,
      0.39111544839967477,
      -0.8893794821510557
    ],
    [
      -0.20895976128503768,
      0.3229760057039448,
      -0.923050550025959
    ],
    [
      -0.2395359323315807,
      0.38732728909527986,
      -0.890280915354329
    ],
    [
      -0.21329804858298762,
      0.3183972105495638,
      -0.9236488287141094
    ],
    [
      -0.17819470276614705,
      0.23448801715066192,
      -0.9556474337949301
    ],
    [
      0.5616745731323988,
      0.6052187274492492,
      -0.5641205242155696
    ],
    [
      0.5478362122314698,
      0.6131219436420624,
      -0.5691721767553782
    ],
    [
      0.521031998035644,
      0.6153564303357578,
      -0.5914914375267137
    ],
    [
      0.5146185616187355,
      0.6184230244775278,
      -0.5939029372157798
    ],
    [
      0.48069287056955423,
      0.622455927749114,
      -0.6176430864128503
    ],
    [
      0.4792205198504751,
      0.6203610232775351,
      -0.6208863778118263
    ],
    [
      0.47894914094026625,
      0.6117938486311091,
      -0.6295363430094536
    ],
    [
      0.460381298329137,
      0.6566731752036847,
      -0.5973519909707249
    ],
    [
      0.44777041909096715,
      0.6930019364535374,
      -0.5650220950181922
    ],
    [
      0.4603800873617872,
      0.6742118493223772,
      -0.577484681523288
    ],
    [
      0.45309892489524933,
      0.7182960742649033,
      -0.5279698040176141
    ],
    [
      0.4840702168668065,
      0.7279732595160202,
      -0.4855213265883837
    ],
    [
      0.07264367570525807,
      0.09831952894677085,
      -0.9924999579887721
    ],
    [
      0.04343961827694706,
      0.07125323602954142,
      -0.996511904554718
    ],
    [
      0.2117157844608896,
      0.22581290824082983,
      -0.9508864059822965
    ],
    [
      0.19896267447112004,
      0.22844858652321803,
      -0.9530084456513714
    ],
    [
      0.2544784455065042,
      0.29664534409535576,
      -0.9204576365043321
    ],
    [
      0.2852984907884645,
      0.3578883846324139,
      -0.8891122962253001
    ],
    [
      0.25078936678848734,
      0.30432115847156194,
      -0.9189631799002373
    ],
    [
      0.3060361779217412,
      0.4120389354036871,
      -0.8582341018128146
    ],
    [
      0.2804762248383084,
      0.37082303898641206,
      -0.8853379925527497
    ],
    [
      0.31493533530779383,
      0.4548165873051437,
      -0.8330411793462974
    ],
    [
      0.3003408322058568,
      0.4309275692142142,
      -0.8509387842853456
    ],
    [
      0.3173962047680657,
      0.4989676412134775,
      -0.806406189349193
    ],
    [
      0.30747925813610133,
      0.48675609409174825,
      -0.8176337876339369
    ],
    [
      0.3137499838348309,
      0.5420618686613106,
      -0.779570316384001
    ],
    [
      0.3108809422076618,
      0.5388324602667507,
      -0.7829512242374725
    ],
    [
      0.3065030146944744,
      0.5865253081854148,
      -0.749695914915643
    ],
    [
      0.31069209173371654,
      0.5922226576684192,
      -0.743466709327514
    ],
    [
      0.2995008892563177,
      0.6328048262287168,
      -0.7140429043386107
    ],
    [
      0.3089162162804957,
      0.6355726266428234,
      -0.7075437849216712
    ],
    [
      0.3282180350267042,
      0.6675805373917054,
      -0.6682882219364717
    ],
    [
      0.31589708094848407,
      0.7042572469970294,
      -0.6357914471746156
    ],
    [
      0.31302705015824567,
      0.6908394417153322,
      -0.651732254564461
    ],
    [
      0.2960622338732654,
      0.7324500604035521,
      -0.6130775339945224
    ],
    [
      0.29258615290799417,
      0.7746232233890464,
      -0.5606712092776508
    ],
    [
      0.2849369238444494,
      0.7397672200996215,
      -0.6095534508934721
    ],
    [
      0.29369456904023344,
      0.8000771055300452,
      -0.5230871106450019
    ],
    [
      0.2903073979393124,
      0.7786814692423054,
      -0.5562164903707462
    ],
    [
      0.5987178120386593,
      0.0957747639165158,
      -0.7952132897181587
    ],
    [
      0.6188551828800716,
      0.10130587139591993,
      -0.7789450449442415
    ],
    [
      0.6211796025260449,
      0.11091153738901921,
      -0.7757799509394331
    ],
    [
      0.6449418200922028,
      0.14426432023230157,
      -0.7504917418626728
    ],
    [
      0.6475734283921148,
      0.155892547143218,
      -0.7458861632887971
    ],
    [
      0.6658935812792316,
      0.17406017961160464,
      -0.725457643342942
    ],
    [
      0.6709373784964107,
      0.20035573575492052,
      -0.713933199456692
    ],
    [
      0.7044245214029091,
      0.21313584980136885,
      -0.6770223062615668
    ],
    [
      0.6780327634711542,
      0.05068951422179775,
      -0.7332817635858867
    ],
    [
      0.668042362628126,
      0.005803588441571604,
      -0.7441006115408267
    ],
    [
      0.6822284478749389,
      -0.028395674764217976,
      -0.7305874557948806
    ],
    [
      0.6328124237719737,
      0.0784805017081158,
      -0.7703176274573252
    ],
    [
      0.6242935946079232,
      0.022979553362560193,
      -0.7808517451211692
    ],
    [
      0.6393353276371584,
      -0.01155973346294362,
      -0.7688411483507844
    ],
    [
      0.5756960112223675,
      0.034748036643199955,
      -0.8169251352554275
    ],
    [
      0.5895481941110684,
      0.0011254707376203467,
      -0.8077324186486492
    ],
    [
      0.5323470891714933,
      0.03014815889085546,
      -0.8459891637403696
    ],
    [
      0.6733912922873744,
      -0.0682496953874951,
      -0.7361291643122516
    ],
    [
      0.7030225920125659,
      -0.12066932376080425,
      -0.7008552984910962
    ],
    [
      0.6302339425381193,
      -0.052715045930710754,
      -0.7746136466687
    ],
    [
      0.6312507616574259,
      -0.054549452624448304,
      -0.7736580854132482
    ],
    [
      0.5823646635681361,
      -0.03601966362343935,
      -0.8121292892511796
    ],
    [
      0.5273490160822609,
      -0.018145509037573122,
      -0.8494549756984408
    ],
    [
      0.5782094179110584,
      -0.038460403991231275,
      -0.8149813901947617
    ],
    [
      0.4733199054720528,
      -0.010317229823159942,
      -0.8808301889993911
    ],
    [
      0.519807445885075,
      -0.023659811304760504,
      -0.8539557556053229
    ],
    [
      -0.39875586023473525,
      0.362199906957972,
      0.8424992530133737
    ],
    [
      -0.27940715204731614,
      0.2891640432901072,
      0.9155958712515718
    ],
    [
      -0.3335226611112313,
      0.2834632534313043,
      0.8991169103511639
    ],
    [
      -0.1274578329088658,
      0.15389635178365219,
      0.9798318293145298
    ],
    [
      -0.17406791586904757,
      0.17939346531049752,
      0.9682553099616328
    ],
    [
      -0.17612653180687948,
      0.26357750099987687,
      0.9484230837344377
    ],
    [
      -0.24334975557451774,
      0.25455719726971326,
      0.9359388493806691
    ],
    [
      0.25532279333457647,
      0.9374711530547684,
      0.23655466259195235
    ],
    [
      0.30823445572498115,
      0.9139636698316475,
      0.26393546660460754
    ],
    [
      0.23103216760454467,
      0.9403483064016649,
      0.2497382633467808
    ],
    [
      0.1912845525395859,
      0.9465957149463838,
      0.25955109786875313
    ],
    [
      -0.15370049414812265,
      0.9729524666020486,
      0.17245189425347734
    ],
    [
      -0.15647424874876223,
      0.9752599371323288,
      0.15615333650984373
    ],
    [
      -0.10292469787241751,
      0.9889393000690968,
      0.10679685082771173
    ],
    [
      -0.04702122162630116,
      0.9877697789655796,
      0.14866024511973666
    ],
    [
      -0.16321379689363816,
      0.9637269395686775,
      0.21116733282672479
    ],
    [
      -0.16444350908590502,
      0.9639308090006663,
      0.20927428838449058
    ],
    [
      -0.15250509146684635,
      0.9520140717458128,
      0.2653514730968107
    ],
    [
      -0.16656357100489483,
      0.9260877851566472,
      0.33855278908576875
    ],
    [
      -0.17309699490293162,
      0.9335889889068448,
      0.31376588429507385
    ],
    [
      -0.15740092507383402,
      0.9499245393246333,
      0.2699413239479734
    ],
    [
      -0.23461407648081575,
      0.8944893310175052,
      0.3805851702482769
    ],
    [
      -0.323744804275613,
      0.8559241428910304,
      0.40321602562497444
    ],
    [
      -0.3120868497865491,
      0.8646931210924713,
      0.39358303383869186
    ],
    [
      -0.23966115088116613,
      0.8946047910916224,
      0.37715355031370135
    ],
    [
      -0.3551249060892601,
      0.844983523817437,
      0.39986140793049896
    ],
    [
      -0.350434640335022,
      0.8482205025764658,
      0.3971366790692993
    ],
    [
      -0.39130351491282156,
      0.8286084646196792,
      0.40036180084704537
    ],
    [
      -0.5419748023980737,
      0.7423536571095697,
      0.3939217705860092
    ],
    [
      -0.5563292677356949,
      0.7522720953765926,
      0.35296521128629144
    ],
    [
      -0.5862177866671643,
      0.7445578949004854,
      0.3193465949973614
    ],
    [
      -0.587788687549202,
      0.7402124250343987,
      0.3264812775855322
    ],
    [
      -0.5952612733001722,
      0.765489413606976,
      0.24431531708983328
    ],
    [
      -0.38455085871906863,
      0.8629720891559258,
      0.3277191028858157
    ],
    [
      -0.3833213372287968,
      0.8632875206098374,
      0.32832820345569874
    ],
    [
      -0.41336648883206245,
      0.8725151298007464,
      0.2604716763478112
    ],
    [
      -0.40241093208135637,
      0.873681485831833,
      0.2733973354956014
    ],
    [
      -0.4290215536408689,
      0.885444878427291,
      0.17868372555567283
    ],
    [
      -0.40439795419311086,
      0.8898654362632002,
      0.2111913823727922
    ],
    [
      -0.42394744120225,
      0.6209912045940643,
      0.659271181620187
    ],
    [
      -0.4361917523163875,
      0.6349594194910716,
      0.6376231573670459
    ],
    [
      -0.4399339831837343,
      0.6629829865604134,
      0.6057323253480273
    ],
    [
      -0.5993134540395071,
      0.6932778086151302,
      0.40023650994010823
    ],
    [
      -0.6017591580893128,
      0.7174673980083095,
      0.35089378514135516
    ],
    [
      -0.5915221412878021,
      0.7360163282789488,
      0.3292134882915161
    ],
    [
      -0.6534336630151331,
      0.6472630650120017,
      0.39252384986124716
    ],
    [
      -0.6565379320027901,
      0.6353897872219464,
      0.4064944798340433
    ],
    [
      -0.6560157967211135,
      0.6418548578004031,
      0.39707129834626287
    ],
    [
      -0.6708513319801018,
      0.6026394433449065,
      0.4321853672967935
    ],
    [
      -0.6930556755095785,
      0.5541079064513623,
      0.4611271610435133
    ],
    [
      -0.6974770134375919,
      0.5600174697661586,
      0.4471087667255996
    ],
    [
      -0.6972929155196347,
      0.5664185202755002,
      0.4392637588682231
    ],
    [
      -0.6362309206579118,
      0.547887510573731,
      0.5431661728753973
    ],
    [
      -0.6931817302091262,
      0.5362887298013209,
      0.48155320286793635
    ],
    [
      -0.48804871967395147,
      0.3465249478134751,
      0.8010798385725889
    ],
    [
      -0.5381862314863282,
      0.3631502128175134,
      0.7605770856192942
    ],
    [
      -0.5556047185603888,
      0.380708200411501,
      0.7391648414615427
    ],
    [
      -0.6262479732824174,
      0.36701245532719745,
      0.6878337979442174
    ],
    [
      -0.6265762318135526,
      0.4067194291306525,
      0.6648169159204399
    ],
    [
      -0.5978358478037735,
      0.2843489294523835,
      0.7494918181007894
    ],
    [
      -0.6167910266997978,
      0.2850346599647059,
      0.733705712122656
    ],
    [
      -0.6341695684752003,
      0.3184159608256259,
      0.7045851505045162
    ],
    [
      -0.6291618799179467,
      0.36347154464929804,
      0.6870544120288935
    ],
    [
      -0.5854330555153908,
      0.25933115166843784,
      0.7681246586877909
    ],
    [
      -0.5113520096107083,
      0.2676697832890899,
      0.8166223174644823
    ],
    [
      0.4198911783232325,
      -0.8297654354039117,
      -0.36766930872087233
    ],
    [
      0.4187195619710536,
      -0.8217017746205949,
      -0.38662659247410053
    ],
    [
      0.4239069391879646,
      -0.8140523206802038,
      -0.39701602751459025
    ],
    [
      0.424468983892642,
      -0.7948474213993263,
      -0.4336400101558779
    ],
    [
      0.42140678962033606,
      -0.7997997762813482,
      -0.42747705847470585
    ],
    [
      0.4210799650096371,
      -0.7776237037528165,
      -0.4668972461144256
    ],
    [
      0.4150025931286103,
      -0.7547571201513028,
      -0.5080497389797982
    ],
    [
      0.419751830447546,
      -0.7770962755387202,
      -0.4689667145755485
    ],
    [
      0.4080158847098885,
      -0.7284580155244245,
      -0.5503380392473558
    ],
    [
      0.4148376064261461,
      -0.7546918478264288,
      -0.5082813936383627
    ],
    [
      -0.7172597906374807,
      -0.6193477919348218,
      -0.3192909415566594
    ],
    [
      -0.724453697131558,
      -0.6136223881421314,
      -0.3140611492737746
    ],
    [
      -0.6883529328279708,
      -0.6668889614168859,
      -0.28535828883604963
    ],
    [
      -0.6714662539232598,
      -0.6955885273825738,
      -0.2555184345913364
    ],
    [
      -0.6662137634896695,
      -0.7129465313625174,
      -0.21878405964577438
    ],
    [
      -0.6788645722534161,
      -0.7266661232008587,
      -0.10535292084902491
    ],
    [
      -0.6911618425804903,
      -0.7185418907537441,
      -0.07741355561383288
    ],
    [
      -0.6251668956748039,
      -0.7773617708434972,
      -0.0698214135018126
    ],
    [
      -0.586103098801853,
      -0.8085711749131,
      -0.0519212160346286
    ],
    [
      -0.5351272001764464,
      -0.8447449264999698,
      0.0066999092440213764
    ],
    [
      -0.8628635492882354,
      -0.3985721678914037,
      -0.3108162194803474
    ],
    [
      -0.7875082199406463,
      -0.4606092641446584,
      -0.4094751632395193
    ],
    [
      -0.7525830215889696,
      -0.47928941601155234,
      -0.4515533759317071
    ],
    [
      -0.6499298714295673,
      -0.5062075823579019,
      -0.5668730420357933
    ],
    [
      -0.4164473255607677,
      -0.1869178699843847,
      -0.8897377899773532
    ],
    [
      -0.4240862691442267,
      -0.2205465556412726,
      -0.878356449921159
    ],
    [
      -0.4567599978832169,
      -0.23578682316327507,
      -0.8577732091621271
    ],
    [
      -0.46419972971783086,
      -0.2682149856530653,
      -0.8441441419574139
    ],
    [
      -0.5114383691247484,
      -0.2974264332368907,
      -0.8062061221542535
    ],
    [
      -0.5294904251030639,
      -0.2978429887911933,
      -0.7943106720623272
    ],
    [
      -0.5102536547991227,
      -0.3588019766518114,
      -0.7816024240717852
    ],
    [
      -0.5242202563366254,
      -0.39941561159729144,
      -0.7521039104131318
    ],
    [
      -0.5227902559711372,
      -0.4030031624915295,
      -0.7511849301493333
    ],
    [
      -0.5389838970490446,
      -0.4404594286361607,
      -0.7179776113830652
    ],
    [
      -0.5932517105126387,
      -0.44084774311090397,
      -0.6735767776340353
    ],
    [
      -0.6207534297456301,
      -0.42956680623558546,
      -0.655848716122549
    ],
    [
      -0.6276745759422482,
      -0.4369726197872633,
      -0.644266681019572
    ],
    [
      -0.2025177798188374,
      -0.009654912821637815,
      -0.9792309898668727
    ],
    [
      -0.22203255526789356,
      -0.007384909443781711,
      -0.9750112858391522
    ],
    [
      -0.2823725650501659,
      -0.077527399284657,
      -0.9561669503110569
    ],
    [
      -0.3215291432518692,
      -0.052119306722560765,
      -0.9454642182052574
    ],
    [
      -0.3782221468884296,
      -0.09555688404317407,
      -0.9207697266499734
    ],
    [
      -0.40876891661741616,
      -0.08643001334344384,
      -0.9085360893221996
    ],
    [
      -0.40981597981028345,
      -0.08651782815804163,
      -0.9080559058246099
    ],
    [
      -0.4530672111847813,
      -0.12792475480031895,
      -0.8822501681827684
    ],
    [
      -0.46290791810095355,
      -0.12747567509595453,
      -0.8771922318501638
    ],
    [
      -0.5014507566399337,
      -0.15500943896110683,
      -0.851186943331605
    ],
    [
      -0.5107109790120041,
      -0.17894699453940158,
      -0.840923462071261
    ],
    [
      -0.5400108152259921,
      -0.2659337539770248,
      -0.7985408930885423
    ],
    [
      -0.5313708743934623,
      -0.2966741067747817,
      -0.7934919459047538
    ],
    [
      -0.5308124228070148,
      -0.19140351435134226,
      -0.8255924336424738
    ],
    [
      -0.5759918781417275,
      -0.31246489569201785,
      -0.7553800667709877
    ],
    [
      -0.6011317896600297,
      -0.3488272174550912,
      -0.7189994046052252
    ],
    [
      -0.6022887640762555,
      -0.3591377536039572,
      -0.7129293924392512
    ],
    [
      -0.6186446607638574,
      -0.3904354691107526,
      -0.6817909710231123
    ],
    [
      -0.02726421173060529,
      -0.783814680055086,
      -0.6203960106970804
    ],
    [
      -0.04006539368100225,
      -0.7682373664011595,
      -0.6389100978183057
    ],
    [
      0.1232061255088391,
      -0.603584554733176,
      -0.7877219915202659
    ],
    [
      0.14610685532612258,
      -0.6412445845567837,
      -0.7532981943449151
    ],
    [
      0.1409057740267264,
      -0.6109775975910017,
      -0.7790070205639081
    ],
    [
      0.19678976443487955,
      -0.6727523825991213,
      -0.713216671370538
    ],
    [
      0.19396529131124723,
      -0.6557522397669183,
      -0.7296344741082436
    ],
    [
      0.2092547539168156,
      -0.7156160321150002,
      -0.6664128919395211
    ],
    [
      0.20281196959122993,
      -0.6769569429897454,
      -0.7075285169719343
    ],
    [
      0.14993386955468793,
      -0.4361923897388623,
      -0.887274497488944
    ],
    [
      0.17061386677183688,
      -0.48023557331517663,
      -0.8603863682019872
    ],
    [
      0.2012956069009503,
      -0.5338339135053416,
      -0.821280361042409
    ],
    [
      0.17863720847227382,
      -0.4831338741801353,
      -0.8571291660939595
    ],
    [
      0.2214281587757188,
      -0.5438163418736215,
      -0.8094648582936677
    ],
    [
      0.1920089039458285,
      -0.5966078788204262,
      -0.7792250122621278
    ],
    [
      0.211440897995488,
      -0.6273735888457984,
      -0.749463225697969
    ],
    [
      0.17202869143081265,
      -0.3954259773505234,
      -0.9022441054177
    ],
    [
      0.1616918227266266,
      -0.3057647554459392,
      -0.9382769680592326
    ],
    [
      0.16414463406276145,
      -0.2956890251754794,
      -0.9410762665688562
    ],
    [
      0.20218123677480723,
      -0.3745524291475283,
      -0.9048940409329123
    ],
    [
      0.2421289852147874,
      -0.43441189579581063,
      -0.867559715126254
    ],
    [
      0.24587065119150853,
      -0.40951648666923346,
      -0.8785464529714698
    ],
    [
      0.22622503196545396,
      -0.37940000510044775,
      -0.8971498598573203
    ],
    [
      0.2918714635645946,
      -0.4903704505725863,
      -0.8211868666521038
    ],
    [
      0.2407722235686776,
      -0.5415399832934813,
      -0.805458368168269
    ],
    [
      0.2947590182234026,
      -0.5141070639211597,
      -0.8054880806084845
    ],
    [
      0.32591551646222755,
      -0.4329492195265741,
      -0.8404368206120492
    ],
    [
      0.3097655238703962,
      -0.3988436110878739,
      -0.8631159215978371
    ],
    [
      0.298364791186143,
      -0.5149760348908319,
      -0.8036032197972864
    ],
    [
      0.3582274326282786,
      -0.4805891214068732,
      -0.8004418797751163
    ],
    [
      0.37237381581890716,
      -0.4467283430607337,
      -0.8134934104211773
    ],
    [
      0.36584187869760243,
      -0.4283604714831558,
      -0.8262366648011557
    ],
    [
      0.4308203403465124,
      -0.4451419259428303,
      -0.7850111464887762
    ],
    [
      0.3957356147856813,
      -0.4886091370859159,
      -0.7775952895602928
    ],
    [
      0.4425307732973966,
      -0.45663545146003415,
      -0.7717840236456692
    ],
    [
      0.4441377728248871,
      -0.45173089526211346,
      -0.7737446846446433
    ],
    [
      0.450996563814936,
      -0.44558071717704817,
      -0.7733433415418457
    ],
    [
      0.47057828186203426,
      -0.44070225430832505,
      -0.7644197823757155
    ],
    [
      0.5007065351822114,
      -0.41770327554361564,
      -0.7581668280965339
    ],
    [
      0.5098619445944783,
      -0.3873094041074485,
      -0.7681355498505913
    ],
    [
      0.5014528598819137,
      -0.37661928839983455,
      -0.7789113819437049
    ],
    [
      0.46811907173409906,
      -0.3842866957805778,
      -0.7957312800970257
    ],
    [
      0.4593651236358894,
      -0.3948901433650441,
      -0.7956415385461716
    ],
    [
      0.5099718812346192,
      -0.34730078351680044,
      -0.7869630525753035
    ],
    [
      0.49459052881652826,
      -0.33139614986105054,
      -0.8034654943818428
    ],
    [
      0.4661273433697744,
      -0.344578014941507,
      -0.8148566078654618
    ],
    [
      0.45630892730250366,
      -0.34033015802221395,
      -0.8221663739199101
    ],
    [
      0.5095122837617975,
      -0.276378260486296,
      -0.8148694925117805
    ],
    [
      0.5033181457197177,
      -0.2637117656791436,
      -0.8228772380079871
    ],
    [
      0.4554288397961043,
      -0.30012756012277103,
      -0.8381575147528815
    ],
    [
      0.4042552044650375,
      -0.2414229112966858,
      -0.8822089931325588
    ],
    [
      0.39481257416225257,
      -0.2561195809941057,
      -0.8823410857002973
    ],
    [
      0.4052031361509167,
      -0.2903121707333226,
      -0.8669078739852164
    ],
    [
      0.504454109738975,
      -0.2372491323302144,
      -0.8302041317507511
    ],
    [
      0.48087548345944714,
      -0.22685441822302524,
      -0.846933198275009
    ],
    [
      0.39913232475386284,
      -0.15782876332615767,
      -0.9032073232672069
    ],
    [
      0.4640004622203879,
      -0.15434569560402564,
      -0.872284917505614
    ],
    [
      0.40890258470945456,
      -0.14949415236084973,
      -0.9002500622759425
    ],
    [
      0.5158943071534844,
      -0.22651536335606492,
      -0.8261621233210199
    ],
    [
      0.5344401441750684,
      -0.12804898679886054,
      -0.8354502913243357
    ],
    [
      0.5119919040227627,
      -0.11680994952122556,
      -0.8510110022249976
    ],
    [
      0.5868686280679608,
      -0.13821831003101193,
      -0.7977975383277391
    ],
    [
      0.5562322186668747,
      -0.12240247587482993,
      -0.8219631091579706
    ],
    [
      0.576000175466761,
      -0.21861052184237043,
      -0.7876758455113798
    ],
    [
      0.5770531487810648,
      -0.2175793890863169,
      -0.7871904934173706
    ],
    [
      0.6239979439675342,
      -0.21756144080968093,
      -0.7505288704620934
    ],
    [
      0.6281962998111975,
      -0.21347125394901884,
      -0.7481974556498795
    ],
    [
      0.6326125025980908,
      -0.14687528539631545,
      -0.7604137505965627
    ],
    [
      0.607862451901171,
      -0.13233074298735528,
      -0.7829379375334364
    ],
    [
      -0.7070376102400617,
      -0.338032035070895,
      0.6211538947570494
    ],
    [
      -0.7036418630272648,
      -0.30888447817183073,
      0.6399050771325664
    ],
    [
      -0.7184625208188975,
      -0.3653527071549434,
      0.5918859734383891
    ],
    [
      -0.700432611888398,
      -0.4126078175517235,
      0.5823649586800363
    ],
    [
      -0.7190153337035549,
      -0.36595149314374453,
      0.590843849561819
    ],
    [
      -0.6942085339144003,
      -0.45442330114393636,
      0.5581881177684334
    ],
    [
      -0.7029397712877979,
      -0.47895692890103714,
      0.5258097927954035
    ],
    [
      -0.7166600872777775,
      -0.4954795746121716,
      0.4908139264987797
    ],
    [
      -0.7196066965282949,
      -0.4879377135519944,
      0.4940475584448185
    ],
    [
      -0.7102272421157705,
      -0.5316835461311857,
      0.4613999039119904
    ],
    [
      -0.7158111599779144,
      -0.5543994026061907,
      0.4245652901980701
    ],
    [
      -0.7158461848712322,
      -0.5542362223534715,
      0.4247192595546557
    ],
    [
      -0.7132195091590301,
      -0.5821157518917854,
      0.3904602196823813
    ],
    [
      -0.7178068895797315,
      -0.5637259305514417,
      0.40861515451067415
    ],
    [
      -0.7130189103438264,
      -0.605203271210628,
      0.35402405851588314
    ],
    [
      -0.715908236457582,
      -0.5954739577119148,
      0.36453554375273706
    ],
    [
      -0.7135441598638683,
      -0.6286164932218937,
      0.30934775960652294
    ],
    [
      -0.7154503749166039,
      -0.6250531112485037,
      0.3121527977613791
    ],
    [
      -0.7045010112166836,
      -0.6518325456355887,
      0.2807002986191827
    ],
    [
      -0.7075820101464143,
      -0.6466012379983531,
      0.28501673273012695
    ],
    [
      -0.691232497382754,
      -0.6792501327834738,
      0.2466108101353916
    ],
    [
      -0.6976510244878742,
      -0.6695275812008226,
      0.25498208965022545
    ],
    [
      -0.6774406688602207,
      -0.7030591526050602,
      0.2162913962978448
    ],
    [
      -0.6852190085347042,
      -0.6924063304982688,
      0.22593889401481734
    ],
    [
      -0.6756406033741038,
      -0.7065848486905713,
      0.21035119841160738
    ],
    [
      -0.6494675294852794,
      -0.7352568757560521,
      0.19387948524208792
    ],
    [
      -0.6376258991529792,
      -0.7519637763718141,
      0.16728326800369256
    ],
    [
      -0.6260172152794307,
      -0.7685257141307545,
      0.132176673031214
    ],
    [
      -0.6377390424144035,
      -0.7539396910140435,
      0.15768277044118725
    ],
    [
      -0.6086586946925225,
      -0.7874605913049043,
      0.09716177497825564
    ],
    [
      -0.6155401329957075,
      -0.7814702858035002,
      0.10205163927062787
    ],
    [
      -0.6257752316172737,
      -0.7701534821912125,
      0.12356768737456214
    ],
    [
      -0.5937638695952355,
      -0.801844815433426,
      0.06700267998988617
    ],
    [
      -0.5922746826351628,
      -0.8044180983794577,
      0.04606759499902743
    ],
    [
      -0.19629514668771808,
      0.061698394430317806,
      0.9786018207174807
    ],
    [
      -0.15398912765990735,
      0.09900750297187891,
      0.9830996200374681
    ],
    [
      -0.2003040947076855,
      0.15774543573303504,
      0.9669512123932259
    ],
    [
      -0.21026085322763113,
      0.10985259075089973,
      0.9714539525398534
    ],
    [
      -0.28842183167625196,
      0.15068846602870223,
      0.9455716964981727
    ],
    [
      -0.2909900181743501,
      0.1777513387132478,
      0.9400687586068052
    ],
    [
      -0.2748782011988064,
      0.1914245084971797,
      0.9422306681764937
    ],
    [
      -0.2017304080020765,
      0.07151918407372891,
      0.9768264169220363
    ],
    [
      -0.30064613920547123,
      0.10658763239435584,
      0.9477610329621122
    ],
    [
      -0.31691196113962483,
      0.08667169011648511,
      0.9444865414705436
    ],
    [
      -0.37597006322452675,
      0.12923495980447527,
      0.9175755209917498
    ],
    [
      -0.41014816903875606,
      0.09648349429020249,
      0.9069009950174872
    ],
    [
      -0.490703480863466,
      0.11141081435716214,
      0.8641745913371626
    ],
    [
      -0.45147522121443456,
      0.13866449958979024,
      0.8814432943660587
    ],
    [
      -0.5562275973171309,
      0.13033645219489276,
      0.8207455569249584
    ],
    [
      -0.5505324160544184,
      0.13624727312929077,
      0.8236205069315098
    ],
    [
      -0.5351073704564396,
      0.141941850378383,
      0.8327740469024929
    ],
    [
      -0.6096312782555515,
      0.11601128552630162,
      0.7841499130925395
    ],
    [
      -0.6036079889742965,
      0.12186080800463935,
      0.7879132814712936
    ],
    [
      -0.6410018836891759,
      -0.023306418740103977,
      0.7671853726137114
    ],
    [
      -0.6477217658291279,
      -0.005581659554702576,
      0.7618565213659405
    ],
    [
      -0.6559974065538311,
      0.09627358726289167,
      0.7485978887160863
    ],
    [
      -0.6373172522595625,
      0.11304651636322688,
      0.7622645243683192
    ],
    [
      -0.7125984647746675,
      0.07130100450060348,
      0.6979395351733501
    ],
    [
      -0.7094998837165261,
      0.07843814574147352,
      0.7003266182995441
    ],
    [
      -0.6857953856761947,
      0.09939109736662227,
      0.7209757962300107
    ],
    [
      -0.7594008422297808,
      -0.03420778857784794,
      0.6497231626018214
    ],
    [
      -0.7803588172664858,
      -0.0031492256983292268,
      0.6253240749339116
    ],
    [
      -0.6804601844586112,
      -0.04719128477642444,
      0.731263919530906
    ],
    [
      -0.7265353238415595,
      -0.049102299401461734,
      0.685372444298667
    ],
    [
      0.6050395786705765,
      0.7248822957911757,
      -0.32935203884391817
    ],
    [
      0.5987447702563549,
      0.7213748434526203,
      -0.34802734852935374
    ],
    [
      0.5752930024444374,
      0.7345809331527846,
      -0.35976216308395853
    ],
    [
      0.5709198557099375,
      0.7360352481563639,
      -0.3637342873960936
    ],
    [
      0.5571701642852743,
      0.7359956937472449,
      -0.3845409559667633
    ],
    [
      0.5467659804588776,
      0.7277589577692608,
      -0.4140215719010806
    ],
    [
      0.5165356293211967,
      0.7098927177268652,
      -0.4787935598565636
    ],
    [
      0.5346882361416936,
      0.7131484031317339,
      -0.45335178972001705
    ],
    [
      0.5460812855678818,
      0.722820330432663,
      -0.4234690064995848
    ],
    [
      0.5604094853942676,
      0.6548526618739149,
      -0.507059365278643
    ],
    [
      0.5955947520386651,
      0.6443740275477668,
      -0.479634239776385
    ],
    [
      0.5952808069462978,
      0.662711069593399,
      -0.4543729735797867
    ],
    [
      0.5261548406498784,
      0.6866346724421525,
      -0.5016910506087975
    ],
    [
      0.5450856269563797,
      0.6660355172943143,
      -0.5091938226138112
    ],
    [
      0.2627818971927327,
      0.9394124805678958,
      0.22011330232646276
    ],
    [
      0.2687454748637064,
      0.9472160348642776,
      0.17480747420026535
    ],
    [
      0.2659147104148337,
      0.9499868301805713,
      0.16375099776326674
    ],
    [
      0.26851733943793527,
      0.9523597033902691,
      0.14460094667591683
    ],
    [
      0.26149414151964634,
      0.9573867236993356,
      0.12260291691128335
    ],
    [
      0.26986778327098243,
      0.9593998319792449,
      0.08199598740549832
    ],
    [
      0.22168017108981147,
      0.9733601798347954,
      0.05854794665542754
    ],
    [
      0.23818881398909444,
      0.9711521249205103,
      -0.01138591906022963
    ],
    [
      0.24209826170079085,
      0.9701583916098482,
      -0.013458338324163745
    ],
    [
      0.1674035717198793,
      0.9816958309918475,
      0.09082587510535235
    ],
    [
      0.1502107321683415,
      0.9865412668614866,
      0.06459926254055767
    ],
    [
      0.1397471784149893,
      0.989962996462555,
      0.021071111976550465
    ],
    [
      0.14424151862932086,
      0.9893499175288226,
      -0.019522422729244947
    ],
    [
      0.14572288711354378,
      0.9890546619784821,
      -0.023145534988929243
    ],
    [
      0.1330811354718123,
      0.9889027012524366,
      -0.0660367991135797
    ],
    [
      0.13206232507034207,
      0.9853845798737069,
      -0.10759540902907279
    ],
    [
      0.07465375508689064,
      0.9632561459299815,
      -0.2580008026722876
    ],
    [
      0.0616260309744331,
      0.9567628049605804,
      -0.2842660151166517
    ],
    [
      0.0943020049128696,
      0.9724237085736527,
      -0.21330556221832797
    ],
    [
      0.07465273784820309,
      0.9647206929706797,
      -0.25246970766002613
    ],
    [
      0.11908969785669478,
      0.9867333787744488,
      -0.11033985262252856
    ],
    [
      0.07449132312547953,
      0.9884194888090156,
      -0.1322042242953665
    ],
    [
      0.04766740757435456,
      0.9854830290816886,
      -0.1629448300717759
    ],
    [
      0.044890122157061445,
      0.9833632382768435,
      -0.17601596103309528
    ],
    [
      0.026407853625188483,
      0.9802300279974809,
      -0.1960910948487165
    ],
    [
      0.024601720805443872,
      0.9780993942638196,
      -0.2066792932883212
    ],
    [
      -0.000786110510097848,
      0.9726280913590442,
      -0.23236604297859184
    ],
    [
      -0.0019576936583321682,
      0.9705783590613143,
      -0.24077752461014035
    ],
    [
      -0.024182955512567904,
      0.964521659732575,
      -0.26289380473757085
    ],
    [
      -0.025559071690058825,
      0.9618358116079857,
      -0.2724309185146759
    ],
    [
      -0.05040123127407954,
      0.9501167534373192,
      -0.30779517657654265
    ],
    [
      -0.04827548907092948,
      0.9544139879578772,
      -0.2945563048812628
    ],
    [
      -0.07130040865556439,
      0.9418489232554763,
      -0.3283852272682946
    ],
    [
      -0.07433470623471246,
      0.9369846729356168,
      -0.34137087475754874
    ],
    [
      -0.09129232506049689,
      0.9291179670728259,
      -0.35833715220097956
    ],
    [
      -0.09596776170284016,
      0.9221412419279403,
      -0.3747608819625423
    ],
    [
      -0.10006966718919746,
      0.9200131020917852,
      -0.37889570291584673
    ],
    [
      -0.08631609245285826,
      0.9025465421823138,
      -0.4218521913874793
    ],
    [
      -0.10591643495848453,
      0.890656055156835,
      -0.4421690855522921
    ],
    [
      -0.09746224274777861,
      0.8763681974804577,
      -0.47167774346838387
    ],
    [
      -0.12515365998844388,
      0.9144043881406875,
      -0.38496905893922445
    ],
    [
      -0.15910008952971172,
      0.8941422791137922,
      -0.41856510391196133
    ],
    [
      -0.14430590096529428,
      0.8585008950866367,
      -0.4920894431727208
    ],
    [
      -0.11273452845275801,
      0.8666451103444158,
      -0.4860217884114349
    ],
    [
      -0.16750773561415905,
      0.8913776405092105,
      -0.4211734328155678
    ],
    [
      -0.17876664670445058,
      0.870887840756157,
      -0.4578174907636499
    ],
    [
      -0.24740671596154631,
      0.8463821633348741,
      -0.4716218299503335
    ],
    [
      -0.24832564582824332,
      0.8322493720024554,
      -0.49567666520172665
    ],
    [
      -0.21911802280954693,
      0.8134404745459627,
      -0.5387967023381582
    ],
    [
      -0.20854045141370328,
      0.8131966064992885,
      -0.5433435002852341
    ],
    [
      -0.17678199736247582,
      0.8248590194806008,
      -0.5369876380234795
    ],
    [
      -0.14767799665540682,
      0.8479464804881536,
      -0.5090952519240374
    ],
    [
      -0.3038898264836523,
      0.8012238592141443,
      -0.5154525203990459
    ],
    [
      -0.31397833884530657,
      0.7873813057234361,
      -0.5305169951407767
    ],
    [
      -0.2946307128870179,
      0.7626621613694287,
      -0.5757943822572422
    ],
    [
      -0.26894165618646165,
      0.7732521411905309,
      -0.5742399426302062
    ],
    [
      -0.3685058970146374,
      0.7329715978266722,
      -0.5718007001087465
    ],
    [
      -0.30060129901720645,
      0.7543644281399563,
      -0.5835864705304988
    ],
    [
      -0.3869941395349065,
      0.7690647191002665,
      -0.5086993157070938
    ],
    [
      -0.3992569203305924,
      0.7359421633507525,
      -0.546793419648358
    ],
    [
      -0.5090899782355521,
      0.6671054710573932,
      -0.5438728569669742
    ],
    [
      -0.4454578707091057,
      0.6894305089005587,
      -0.5711854854777267
    ],
    [
      -0.4325422896612145,
      0.7114652170114891,
      -0.5538270602249666
    ],
    [
      -0.45658616858617235,
      0.7202535713384833,
      -0.5222679998142331
    ],
    [
      -0.5000621846303993,
      0.7088953426806411,
      -0.49739843649570187
    ],
    [
      -0.5219805097646922,
      0.7208253545064756,
      -0.4560122319920881
    ],
    [
      -0.5265545381776506,
      0.7187996907220213,
      -0.4539463877402787
    ],
    [
      -0.5278002614846203,
      0.717978419747522,
      -0.4537993750035554
    ],
    [
      -0.5430251296638414,
      0.6606987761491934,
      -0.5182671470858695
    ],
    [
      -0.5215620918046265,
      0.6576463679988978,
      -0.5435754216759995
    ],
    [
      -0.5895419568745464,
      0.6513716763953916,
      -0.47765596434503765
    ],
    [
      -0.5712562739197828,
      0.6484140403257942,
      -0.5032151645326929
    ],
    [
      -0.5815939226880424,
      0.692386702790912,
      -0.4270236092895387
    ],
    [
      -0.6108505279476826,
      0.6930198737824061,
      -0.3828643193726144
    ],
    [
      -0.6187725427987463,
      0.6888221458356321,
      -0.3776831895713245
    ],
    [
      -0.6345273974046215,
      0.6757164567122402,
      -0.3752096108459547
    ],
    [
      -0.6365186060529624,
      0.6725271382246304,
      -0.37755968071257623
    ],
    [
      -0.6339592404768183,
      0.6053860565091911,
      -0.4812519132411903
    ],
    [
      -0.6511632419580401,
      0.5749259118504403,
      -0.49542570402194
    ],
    [
      -0.6914469835714464,
      0.5967634567420951,
      -0.40715408091676264
    ],
    [
      -0.6967365498680821,
      0.5836884336884837,
      -0.41697241210445374
    ],
    [
      -0.6758555700828713,
      0.5630683663420288,
      -0.47557676900041673
    ],
    [
      -0.6534957320220645,
      0.5723013370385984,
      -0.49539328603926264
    ],
    [
      -0.7665136696605771,
      0.5140089239789231,
      -0.38503457025766585
    ],
    [
      -0.7100717359862839,
      0.5156505354670942,
      -0.4794816524393025
    ],
    [
      -0.7543729597661265,
      0.5391943013398679,
      -0.3744208100203642
    ],
    [
      -0.766523051589412,
      0.5139940478346925,
      -0.38503575181087224
    ],
    [
      -0.7729500754496635,
      0.4522914717255015,
      -0.44495011570595105
    ],
    [
      -0.7703807446344931,
      0.4458937317401066,
      -0.45573269390212245
    ],
    [
      -0.7165909300750122,
      0.5000371148962481,
      -0.48627186085611146
    ],
    [
      -0.7573690766128947,
      0.38994567230096217,
      -0.5237694668881356
    ],
    [
      -0.7565561016563128,
      0.3919084850814807,
      -0.5234793256354463
    ],
    [
      -0.7573583061961563,
      0.42644524792759425,
      -0.49452284735456037
    ],
    [
      -0.7717148979222744,
      0.4405409045606383,
      -0.45867180830492293
    ],
    [
      -0.7865883593089256,
      0.4167375962491041,
      -0.45564078929811724
    ],
    [
      -0.803450151239224,
      0.3650985962818505,
      -0.4702880707254761
    ],
    [
      -0.7979698416689842,
      0.35822586219585956,
      -0.4846837767460442
    ],
    [
      -0.7952771652944812,
      0.3255576682543,
      -0.5114161074917346
    ],
    [
      -0.7902764717305182,
      0.32010347470478734,
      -0.5224910178281394
    ],
    [
      -0.7557542195967439,
      0.36199053331546127,
      -0.545709092238442
    ],
    [
      -0.7878292072818087,
      0.29939036143449127,
      -0.5382290884315355
    ],
    [
      -0.7774394178104718,
      0.2874777095644531,
      -0.559414442196562
    ],
    [
      -0.7321362705176653,
      0.35266463831758027,
      -0.5827556385594346
    ],
    [
      -0.6801116186386391,
      0.364674136811458,
      -0.6359724523385808
    ],
    [
      -0.6909097406503037,
      0.3676301860232413,
      -0.6224883746697982
    ],
    [
      -0.7655736067525973,
      0.2244720713485773,
      -0.6029173590371226
    ],
    [
      -0.19730741666992982,
      0.7975374853591319,
      -0.5700909951701316
    ],
    [
      -0.21021892731734834,
      0.7688714030606367,
      -0.6038582351455608
    ],
    [
      -0.23487779121049485,
      0.7406858052120112,
      -0.6294576722493052
    ],
    [
      -0.2248953007157507,
      0.7628658410196343,
      -0.6061829858395716
    ],
    [
      -0.24743370099618653,
      0.7348818394546133,
      -0.6314469460304117
    ],
    [
      -0.25822460524654756,
      0.7100206164172927,
      -0.6551265354934666
    ],
    [
      -0.26627219869142177,
      0.70577585876965,
      -0.6564903299988502
    ],
    [
      -0.27687163225388034,
      0.6784967515710499,
      -0.6804294653824194
    ],
    [
      -0.2880055275478116,
      0.6723064408202236,
      -0.6819507795534439
    ],
    [
      -0.29913612562024877,
      0.6429132679123706,
      -0.7051099972991045
    ],
    [
      -0.3043572438964575,
      0.6395851018585778,
      -0.7059019518093891
    ],
    [
      -0.31807418875254123,
      0.6035593827272285,
      -0.7311257634438413
    ],
    [
      -0.2981585459437254,
      0.746150881255844,
      -0.595281734880091
    ],
    [
      -0.3113810395255707,
      0.7113330901847325,
      -0.6301167217525767
    ],
    [
      -0.3220178500867687,
      0.702672973590611,
      -0.6344723763969743
    ],
    [
      -0.32966006913578283,
      0.6813378523543356,
      -0.653531154396309
    ],
    [
      -0.36808195025706963,
      0.6482812666421566,
      -0.6665186248078843
    ],
    [
      -0.36989623558745394,
      0.6474215801246239,
      -0.6663498124012386
    ],
    [
      -0.37193563955678227,
      0.6455216274286995,
      -0.6670575001821737
    ],
    [
      -0.38959679402316394,
      0.6129678853434524,
      -0.6873752320417492
    ],
    [
      -0.4067017793846124,
      0.5960369356850734,
      -0.6923392477279746
    ],
    [
      -0.4100659111328647,
      0.5716220055136514,
      -0.7106998180239845
    ],
    [
      -0.4281029947525469,
      0.5378335949961629,
      -0.7262663767361148
    ],
    [
      -0.42964083135976944,
      0.5295135521743215,
      -0.731453453127551
    ],
    [
      -0.437486049801859,
      0.5148363335857352,
      -0.7372580998868462
    ],
    [
      -0.4417555016653321,
      0.49239668800446695,
      -0.7499317158186086
    ],
    [
      -0.4476049294222557,
      0.4809640754037225,
      -0.7538722606171021
    ],
    [
      -0.4519261739734409,
      0.455977286335156,
      -0.7667121021766607
    ],
    [
      -0.44371403597505155,
      0.4218343685179003,
      -0.7906792142302939
    ],
    [
      -0.288497583028963,
      0.3614693977606191,
      -0.8866278921109023
    ],
    [
      -0.27552405116593426,
      0.307743399841769,
      -0.9107032980520828
    ],
    [
      -0.25414393915134104,
      0.3001277318022176,
      -0.919420579928411
    ],
    [
      -0.24312428573642414,
      0.23564296975510635,
      -0.9409372840365864
    ],
    [
      -0.23862291828168067,
      0.23293579657986252,
      -0.9427619092551625
    ],
    [
      -0.32279950675316804,
      0.21370725651444172,
      -0.9220247756719893
    ],
    [
      -0.26830710656952583,
      0.14003001145844937,
      -0.9531017219873416
    ],
    [
      -0.24691755887783892,
      0.1535371749294388,
      -0.9567957227289929
    ],
    [
      -0.36322233430300493,
      0.7058115258094201,
      -0.6081937404298521
    ],
    [
      -0.3828538836830499,
      0.6858244378155806,
      -0.6189246676646105
    ],
    [
      -0.4429011332785792,
      0.6807532008988223,
      -0.5834497969890451
    ],
    [
      -0.4483078772251072,
      0.6581741032257268,
      -0.604836256404102
    ],
    [
      -0.4469794128393278,
      0.6567209307708887,
      -0.6073936314987401
    ],
    [
      -0.4437843538747931,
      0.603091944458627,
      -0.6628239236667945
    ],
    [
      -0.4968964271455917,
      0.5807821518814769,
      -0.6448147274573269
    ],
    [
      -0.5058402866561382,
      0.5617229473474247,
      -0.6546700961697871
    ],
    [
      -0.5057822139222937,
      0.5615923570817845,
      -0.6548269821465733
    ],
    [
      -0.5100093048749816,
      0.5173449062167833,
      -0.687200667165338
    ],
    [
      -0.5216571470012554,
      0.5031554845347324,
      -0.6889908412781184
    ],
    [
      -0.5235622592976281,
      0.4775734769705148,
      -0.7055537787677537
    ],
    [
      -0.5317756639247414,
      0.4669494126890681,
      -0.7065216834936737
    ],
    [
      -0.5342432572937305,
      0.4290577907030459,
      -0.728349884515132
    ],
    [
      -0.5382732044478995,
      0.4231052259878491,
      -0.7288648195071299
    ],
    [
      -0.546639416670784,
      0.37328276649698544,
      -0.7495634225188567
    ],
    [
      -0.5557002495575882,
      0.35712320358090677,
      -0.7507731016130935
    ],
    [
      -0.2797868932093494,
      0.11167442778449814,
      -0.9535450259779372
    ],
    [
      -0.2692778167340527,
      0.07790012158840783,
      -0.9599067811363003
    ],
    [
      -0.12168285004137415,
      0.0933230496424658,
      -0.9881720965556751
    ],
    [
      -0.33775933638641126,
      0.21813341345656828,
      -0.9156071453508852
    ],
    [
      -0.36392187969854295,
      0.14796325190976806,
      -0.9196019473451357
    ],
    [
      -0.33894772137808926,
      0.11663978634697249,
      -0.9335467864084445
    ],
    [
      -0.4403950737733096,
      0.16923762173272716,
      -0.881709025918671
    ],
    [
      -0.41560142900586117,
      0.13018008917815693,
      -0.900182535150429
    ],
    [
      -0.5044790382406114,
      0.16798999923675872,
      -0.8469239990295833
    ],
    [
      -0.495013686621222,
      0.15798658901482096,
      -0.8544013622116532
    ],
    [
      -0.5567226403039214,
      0.16316444135803743,
      -0.8145165847601571
    ],
    [
      -0.5591537560435778,
      0.16537710840239842,
      -0.812402295121586
    ],
    [
      -0.611897117585194,
      0.16192305916345195,
      -0.7741852752423546
    ],
    [
      -0.6088278646890388,
      0.15919684186931612,
      -0.7771647165929636
    ],
    [
      -0.659376597488769,
      0.1597036664098333,
      -0.7346545049337073
    ],
    [
      -0.6557326142822677,
      0.15675897544888787,
      -0.7385400207048753
    ],
    [
      -0.7020425537703968,
      0.15463385123964318,
      -0.6951436000901794
    ],
    [
      -0.7662851556264058,
      0.22263951731609155,
      -0.6026928783351209
    ],
    [
      -0.747164128384775,
      0.11410181518622116,
      -0.65477212908479
    ],
    [
      -0.618352595664814,
      0.36360834167679246,
      -0.6967273794660577
    ],
    [
      -0.6515995446151823,
      0.3888311423573974,
      -0.6513281632098588
    ],
    [
      0.2568754906046776,
      0.6846906158732734,
      -0.682065790713538
    ],
    [
      0.24884835257555069,
      0.6752070042286981,
      -0.6943846188251446
    ],
    [
      0.2957422664339886,
      0.6344679333501918,
      -0.71413370834517
    ],
    [
      0.25038257081417425,
      0.739404892008177,
      -0.6249711784609439
    ],
    [
      0.22678286438361034,
      0.7468506020291785,
      -0.6251269556423067
    ],
    [
      0.05266095813298457,
      -0.05364014786842491,
      -0.9971707767605154
    ],
    [
      0.037925492364089375,
      0.07265330211599473,
      -0.9966359188392637
    ],
    [
      -0.06153582183809906,
      0.034591656080863876,
      -0.9975052681366113
    ],
    [
      0.10274041625772357,
      0.15250632710241635,
      -0.9829477234629116
    ],
    [
      0.07637437924023786,
      0.14449357665166077,
      -0.9865538811955883
    ],
    [
      0.188006617561178,
      0.23537485094603508,
      -0.9535471625962382
    ],
    [
      0.13579362586546578,
      0.22573939950757002,
      -0.9646770520149588
    ],
    [
      0.2075032548244817,
      0.32435403463958085,
      -0.9228959093257874
    ],
    [
      0.17051266268238405,
      0.29371415700098186,
      -0.9405622923773662
    ],
    [
      0.19555192382582862,
      0.3646717472606593,
      -0.9103702333874253
    ],
    [
      0.22187051862614576,
      0.39371574668830717,
      -0.8920545856472203
    ],
    [
      0.21470818553675922,
      0.429764171200171,
      -0.877042275045019
    ],
    [
      0.234569108708022,
      0.45190557781518786,
      -0.8606733886785657
    ],
    [
      0.23788869637529225,
      0.5053489732888475,
      -0.8294765719010825
    ],
    [
      0.2295457889152755,
      0.494083362954199,
      -0.8385644645721241
    ],
    [
      0.23356999180707053,
      0.5486566079527452,
      -0.8027583605774734
    ],
    [
      0.2243198319969462,
      0.5836067931974396,
      -0.7804381614879317
    ],
    [
      0.22897362988470804,
      0.5550160833907569,
      -0.7997050856378276
    ],
    [
      0.20899009604417004,
      0.6048542342940963,
      -0.7684233826556497
    ],
    [
      0.2240025098207344,
      0.6760903308425126,
      -0.7019435448348206
    ],
    [
      0.189280789509459,
      0.6189436601818306,
      -0.7622870379610258
    ],
    [
      0.1981714201881939,
      0.6952745127056851,
      -0.6908845346383623
    ],
    [
      0.176680598749851,
      0.6206878049001726,
      -0.7638917559926925
    ],
    [
      0.15788516974439393,
      0.6181578702084973,
      -0.7700344931716231
    ],
    [
      0.12965370517665092,
      0.6017334468943801,
      -0.7881032772565879
    ],
    [
      0.07531327365872485,
      0.573327749202071,
      -0.8158573421902221
    ],
    [
      0.12053033773361033,
      0.580742281687924,
      -0.8051154202632849
    ],
    [
      0.062136649093568294,
      0.5275305510636432,
      -0.8472606178348617
    ],
    [
      0.05267342819445262,
      0.52559061642085,
      -0.8491054197757748
    ],
    [
      0.034657650361039564,
      0.4720282824996746,
      -0.8809018945330174
    ],
    [
      0.03491440510780414,
      0.4720777984929015,
      -0.8808652203862198
    ],
    [
      0.011164208596067912,
      0.40690590847977776,
      -0.9134018513724779
    ],
    [
      -0.007107213076415486,
      0.3179076901413529,
      -0.9480950311394296
    ],
    [
      0.029366754052656697,
      0.39665669413367327,
      -0.9174971720694055
    ],
    [
      -0.004993215915545701,
      0.31717273205605173,
      -0.9483546413841821
    ],
    [
      0.017240644282643262,
      0.13323950207070906,
      -0.9909339005567772
    ],
    [
      0.03857234598140154,
      0.1571290776681897,
      -0.9868245168603358
    ],
    [
      0.022393605159068887,
      0.2143083840678268,
      -0.9765093153504562
    ],
    [
      0.5104298289692084,
      0.6731837967459989,
      -0.5350560395856739
    ],
    [
      0.5033380172303665,
      -0.094803422376511,
      -0.8588731870982491
    ],
    [
      0.4677107284822882,
      -0.012030118963800938,
      -0.8837997231840957
    ],
    [
      0.4416949755027449,
      -0.06787161278950227,
      -0.8945943174383467
    ],
    [
      0.3878194436681812,
      -0.04327170726240067,
      -0.9207190877045504
    ],
    [
      0.4253109188194886,
      -0.0743036621210878,
      -0.9019920111222258
    ],
    [
      0.3650004283235394,
      -0.04390642915024345,
      -0.9299714580582069
    ],
    [
      -0.3618147773456605,
      0.19247920498586468,
      0.9121632652887967
    ],
    [
      -0.3696751235653903,
      0.20283949436643078,
      0.9067504852725937
    ],
    [
      -0.42496623233364517,
      0.21073320048175992,
      0.8803381279888204
    ],
    [
      -0.44042736159984536,
      0.20421678872338794,
      0.8742535343695822
    ],
    [
      -0.48916798185963434,
      0.2199569984365289,
      0.84399858078208
    ],
    [
      -0.5107687287139149,
      0.2613963750704586,
      0.8190160199092539
    ],
    [
      -0.16573769378453396,
      0.9749276200411414,
      0.14848283584273203
    ],
    [
      -0.2347633067779551,
      0.9606465438722704,
      0.14847359205239719
    ],
    [
      -0.23749554500313788,
      0.9608326698848341,
      0.1428161285907297
    ],
    [
      -0.19789022590351962,
      0.9768442517447534,
      0.08133121371949922
    ],
    [
      -0.18993352476504619,
      0.9782578380490812,
      0.08328780502488486
    ],
    [
      -0.2359556136681638,
      0.949566557744047,
      0.20651465030985514
    ],
    [
      -0.23672146734566937,
      0.9495519052294553,
      0.2057039770466891
    ],
    [
      -0.23741442907066615,
      0.9348303025015069,
      0.2640581269228254
    ],
    [
      -0.252738711502438,
      0.9226461997716631,
      0.2912853133183957
    ],
    [
      -0.25711646178216974,
      0.9063209959493677,
      0.3353705076209955
    ],
    [
      -0.25413039148404565,
      0.9219285889694453,
      0.2923446954623485
    ],
    [
      -0.32632007071114777,
      0.8860815528703382,
      0.32920311832356874
    ],
    [
      -0.3381815861205417,
      0.8851717712980576,
      0.3195374001678893
    ],
    [
      -0.3209563419512728,
      0.9106133816928941,
      0.2603272856292426
    ],
    [
      -0.32912248023285373,
      0.9217871385302397,
      0.20490696485382692
    ],
    [
      -0.3207972250349946,
      0.9107222104624834,
      0.2601426450626182
    ],
    [
      -0.4210002310135425,
      0.8946456090104316,
      0.1495594857068514
    ],
    [
      -0.32953390764217755,
      0.9322435806917573,
      0.14942995005382287
    ],
    [
      -0.3241452550741028,
      0.9254161968188894,
      0.1963026140381414
    ],
    [
      -0.42635207260049657,
      0.8975632143110218,
      0.11226836822955841
    ],
    [
      -0.41615482587979646,
      0.9061967857399913,
      0.07498364095897646
    ],
    [
      -0.33666783999821687,
      0.9397402024288823,
      0.059524091340046284
    ],
    [
      -0.3182762879768761,
      0.9427880966306516,
      0.09925124363560205
    ],
    [
      -0.6722531491916541,
      0.6889768012371142,
      0.27089974300278985
    ],
    [
      -0.6775528268388851,
      0.6946491289437302,
      0.2416293742498059
    ],
    [
      -0.6766552511193299,
      0.6961592858973438,
      0.23979140891937112
    ],
    [
      -0.5989535425692897,
      0.7634113256198708,
      0.2417804825849467
    ],
    [
      -0.6743977336394512,
      0.6648386034129268,
      0.3212122791456156
    ],
    [
      -0.6752963475367569,
      0.6628702434780269,
      0.3233850387926086
    ],
    [
      -0.7055565133667686,
      0.630385694065308,
      0.32373427863531656
    ],
    [
      -0.7065279353664904,
      0.6022381103642322,
      0.371655129080285
    ],
    [
      -0.7200485174068992,
      0.6055406731300174,
      0.33889618729837007
    ],
    [
      -0.714519409223509,
      0.5673007721634421,
      0.40942868456625037
    ],
    [
      -0.6851940641773288,
      0.4901628947671987,
      0.5387480218150177
    ],
    [
      -0.6947165479842919,
      0.4934074155757358,
      0.5233717992132
    ],
    [
      -0.6979964029826945,
      0.5247657770423134,
      0.48725958242850087
    ],
    [
      -0.6808187143021004,
      0.4659354452689835,
      0.5651460334267852
    ],
    [
      -0.6768434023221935,
      0.4307957226077333,
      0.5969070732666838
    ],
    [
      -0.6900103203774659,
      0.42754369854993374,
      0.5840309440456303
    ],
    [
      -0.6911648433879533,
      0.4277711238538214,
      0.582497231634061
    ],
    [
      -0.6459366852560152,
      0.357980863369036,
      0.6742518076371995
    ],
    [
      -0.6748688677821582,
      0.36487613215542053,
      0.6414182874550179
    ],
    [
      -0.7265703298402663,
      0.33126765967672056,
      0.6019612059328368
    ],
    [
      -0.7195248996003603,
      0.4008018249161827,
      0.5671347423663524
    ],
    [
      -0.7170081038402866,
      0.4071607717587911,
      0.5657910258815905
    ],
    [
      -0.7250993287621118,
      0.3304988033972086,
      0.6041535437136392
    ],
    [
      -0.7046682440530782,
      0.28909399520169743,
      0.6479717029018106
    ],
    [
      -0.691863745219219,
      0.25505285403846095,
      0.6754795331452103
    ],
    [
      -0.7047630720045982,
      0.28589447977780325,
      0.6492868077908414
    ],
    [
      -0.6874486222279317,
      0.2517507260038713,
      0.681201852429544
    ],
    [
      -0.6639689809911707,
      0.20711100769537888,
      0.7185055481852252
    ],
    [
      -0.6696419171148947,
      0.20713768872942476,
      0.713213629111587
    ],
    [
      -0.6602117879017391,
      0.20887472296822102,
      0.7214511384844702
    ],
    [
      -0.6060485402895179,
      0.20795072967936395,
      0.7677640658683921
    ],
    [
      -0.6104993496694087,
      0.20476197649624675,
      0.7650902411053088
    ],
    [
      -0.5698625210106009,
      0.2020292678042108,
      0.79651797349334
    ],
    [
      -0.6868692519226813,
      0.18424729517060087,
      0.703038807595636
    ],
    [
      -0.734061280984194,
      0.1588743902003808,
      0.6602370512916566
    ],
    [
      -0.7909170082669951,
      0.002825155640558133,
      0.6119169098248491
    ],
    [
      -0.8015474022995475,
      0.05167465689199654,
      0.5956941259589035
    ],
    [
      -0.7971353174842747,
      0.08245135825461768,
      0.5981446807764934
    ],
    [
      -0.7467120445515463,
      0.16041672043161492,
      0.6455134377591334
    ],
    [
      0.34824178052624477,
      -0.8447279246144015,
      -0.4064017663255865
    ],
    [
      0.34596802741375776,
      -0.8471726540452045,
      -0.40324262949921064
    ],
    [
      0.3488782521174508,
      -0.8266454106269703,
      -0.441521607952363
    ],
    [
      0.34962017087415687,
      -0.8257839027492744,
      -0.44254568360577456
    ],
    [
      0.3498416422759856,
      -0.8049858461998434,
      -0.4791749291725971
    ],
    [
      0.34508109461464787,
      -0.7827339127313877,
      -0.517925342110008
    ],
    [
      0.34538180170676175,
      -0.802527074511411,
      -0.48647888517997095
    ],
    [
      0.3401479129090493,
      -0.7795917344630721,
      -0.5258670220697214
    ],
    [
      0.33950077257269934,
      -0.7608103336830424,
      -0.5530884753668602
    ],
    [
      0.34641977282712094,
      -0.7083633333906314,
      -0.6149916494572256
    ],
    [
      0.30825393117249167,
      -0.7401219078839183,
      -0.5976613383739772
    ],
    [
      -0.7295339537051394,
      -0.1763178196644276,
      0.6608269341212796
    ],
    [
      -0.698736479156516,
      -0.1583129927571693,
      0.6976419776792565
    ],
    [
      -0.7303726611811883,
      -0.1785525075377707,
      0.6592987015390548
    ],
    [
      -0.7580510902190698,
      -0.20345322559747217,
      0.6196493602124219
    ],
    [
      -0.7543409366648296,
      -0.1938323214567022,
      0.6272151006077047
    ],
    [
      -0.7798595682411413,
      -0.2396732401291054,
      0.5782523599508754
    ],
    [
      -0.7697226972803546,
      -0.21194181452049848,
      0.6021691095939862
    ],
    [
      -0.7395119033152562,
      -0.3610409288610613,
      0.568129908156743
    ],
    [
      -0.7797150069866984,
      -0.2995104960433618,
      0.5498526808515097
    ],
    [
      -0.7815593713921509,
      -0.24121372161166912,
      0.5753093858919338
    ],
    [
      -0.7476624932732219,
      -0.4596661131636851,
      0.4792784791344793
    ],
    [
      -0.7663826721598789,
      -0.39277119561802076,
      0.508319178967186
    ],
    [
      -0.7934377007004866,
      -0.46200148033930166,
      0.3962464476451731
    ],
    [
      -0.8637834652933166,
      -0.42094715955453027,
      0.2769144524015359
    ],
    [
      -0.8290769818046656,
      -0.47072001284458875,
      0.30175159941457874
    ],
    [
      -0.8137892215545678,
      -0.49289423483872474,
      0.3078999450216881
    ],
    [
      -0.7220261860847723,
      -0.6189688146848389,
      0.3091210006704872
    ],
    [
      -0.84291089693967,
      -0.5109975397564194,
      0.16847176078870746
    ],
    [
      -0.9090904289925196,
      -0.36783062431297137,
      0.1955894264313042
    ],
    [
      -0.8979349686639263,
      -0.377468177926603,
      0.22634170341164303
    ],
    [
      -0.8202571525501207,
      -0.5509507088249737,
      0.15372547002896833
    ],
    [
      -0.7998717572106543,
      -0.5850016489164757,
      0.13408296976777026
    ],
    [
      -0.7463245189127545,
      -0.6470296322120302,
      0.1560524511477165
    ],
    [
      -0.7945501267636786,
      -0.5938328037049898,
      0.12669923955451948
    ],
    [
      -0.6934346544698642,
      -0.7033872176862432,
      0.15618835416210006
    ],
    [
      -0.6882769112343325,
      -0.7142832263274709,
      0.1267847232475025
    ],
    [
      -0.6971528299824716,
      -0.7125738076234289,
      0.07884478636206428
    ],
    [
      -0.7328431747076923,
      -0.680152564439899,
      -0.01825843285114333
    ],
    [
      -0.8829602925440939,
      -0.3701313644505352,
      -0.2887626964142582
    ],
    [
      -0.8836473826735787,
      -0.36986431585136237,
      -0.2869977194228864
    ],
    [
      -0.7264357860731309,
      -0.6854406923269597,
      -0.04961961320537177
    ],
    [
      -0.7058993412481752,
      -0.7055692299501817,
      -0.0622750493608802
    ],
    [
      -0.4854984039080074,
      -0.013365850902163946,
      -0.8741353750034593
    ],
    [
      -0.45378066963183944,
      -0.013312265254132528,
      -0.8910139659187633
    ],
    [
      -0.4032758854924666,
      0.04104318169831009,
      -0.9141575451837317
    ],
    [
      -0.4283934979528709,
      0.08322949287709386,
      -0.8997510002368019
    ],
    [
      -0.48677709258960733,
      0.07971726525266318,
      -0.8698811526585948
    ],
    [
      -0.3688886742185505,
      0.02660007788091225,
      -0.9290928811964978
    ],
    [
      -0.37590581223812886,
      0.03308579551954292,
      -0.9260670334594746
    ],
    [
      -0.3328095191130408,
      0.010955498211490678,
      -0.9429304327715192
    ],
    [
      -0.27774803208609067,
      0.041266812007689085,
      -0.9597672014082509
    ],
    [
      -0.5132092548052519,
      -0.03107045113011167,
      -0.8577009314725088
    ],
    [
      -0.5134760825886077,
      -0.03352658943011682,
      -0.8574487042445407
    ],
    [
      -0.5541080937425645,
      -0.0906833909951759,
      -0.8274906301865884
    ],
    [
      -0.5813159962008092,
      -0.09633253334814033,
      -0.8079552930575987
    ],
    [
      -0.5983771959922609,
      -0.1532149608486421,
      -0.7864285772329159
    ],
    [
      -0.6362118150861038,
      -0.17558501815944083,
      -0.7512685456897514
    ],
    [
      -0.6408902048632285,
      -0.18080826224303442,
      -0.7460349305595706
    ],
    [
      -0.6601868767771971,
      -0.19043385328002732,
      -0.7265591753299183
    ],
    [
      -0.6659989787174249,
      -0.19073624208009374,
      -0.7211553551798051
    ],
    [
      -0.7049709248625126,
      -0.2039926129179445,
      -0.6792665227827759
    ],
    [
      -0.7236445801748448,
      -0.2034434546181251,
      -0.6595068478466434
    ],
    [
      -0.7452679624946449,
      -0.220442639407105,
      -0.6292699792698755
    ],
    [
      -0.7747912167344734,
      -0.23148030547444018,
      -0.5883157644059644
    ],
    [
      -0.7825937261822234,
      -0.23652248502190387,
      -0.5758508260125067
    ],
    [
      -0.8695610342053998,
      -0.31421831053316535,
      -0.3809599206180601
    ],
    [
      -0.8787758522059611,
      -0.3431092262291716,
      -0.33170628642837896
    ],
    [
      -0.831792374462816,
      -0.24991370267719465,
      -0.4956456264305025
    ],
    [
      0.2989677753688836,
      -0.7423130513100712,
      -0.5996579050973248
    ],
    [
      0.2744759578482041,
      -0.6938718416086029,
      -0.6657362961308304
    ],
    [
      0.27761483399721026,
      -0.6897806703643541,
      -0.6686797669560547
    ],
    [
      0.26147357561270834,
      -0.6580921273394397,
      -0.7060781268316957
    ],
    [
      0.26763600161462786,
      -0.6505225013622135,
      -0.7107682082515958
    ],
    [
      0.25294653721929705,
      -0.6179605309498829,
      -0.7444077051568619
    ],
    [
      0.2630761072694039,
      -0.6061910689937633,
      -0.7505486990570136
    ],
    [
      0.10838036471144276,
      -0.18517628462831953,
      -0.9767105201421076
    ],
    [
      0.11694931484795039,
      -0.15698224705742503,
      -0.9806525541012966
    ],
    [
      0.18707985561546617,
      -0.2113211524236615,
      -0.9593458699349426
    ],
    [
      0.21258328619241879,
      -0.2480721133189995,
      -0.945128865829987
    ],
    [
      0.2777405432889932,
      -0.32022513333272434,
      -0.9057130089579004
    ],
    [
      0.21946965312551886,
      -0.24762796397837497,
      -0.9436702087132395
    ],
    [
      0.34004025513662156,
      -0.3603978832083411,
      -0.86861153035495
    ],
    [
      0.3059409716200354,
      -0.3160176251760056,
      -0.8980718136442688
    ],
    [
      0.3936899693311743,
      -0.36830891928261345,
      -0.8422331910016919
    ],
    [
      0.3861161780779127,
      -0.35962472251070343,
      -0.8494612151155608
    ],
    [
      0.39237285269113564,
      -0.3823618751590632,
      -0.8365661605012871
    ],
    [
      0.39416970802435936,
      -0.3707007829390865,
      -0.8409584834011365
    ],
    [
      0.3311802307704431,
      -0.667233794232492,
      -0.667172180610784
    ],
    [
      0.332469143851803,
      -0.6677357991174276,
      -0.6660279055440991
    ],
    [
      0.32003644756739386,
      -0.6345011575643158,
      -0.7035516706525443
    ],
    [
      0.3249009020342797,
      -0.625247839216654,
      -0.7095805404689567
    ],
    [
      0.3162897223357222,
      -0.595566490449779,
      -0.73841815186121
    ],
    [
      0.3382444533469892,
      -0.554468543574704,
      -0.7603652569430978
    ],
    [
      0.3553657770649875,
      -0.5528209628322532,
      -0.7537268388111292
    ],
    [
      0.3849181107462917,
      -0.539271334545639,
      -0.7490156712358367
    ],
    [
      0.40969666948977557,
      -0.5393363146237062,
      -0.7357071283718164
    ],
    [
      0.4555709944103003,
      -0.5166793221450844,
      -0.7249120961328388
    ],
    [
      0.5397306531062386,
      -0.4988717551587688,
      -0.67809866096485
    ],
    [
      0.5323911291616044,
      -0.4755809340256047,
      -0.700273132985527
    ],
    [
      0.5345949304688231,
      -0.42618316657865,
      -0.729778164130737
    ],
    [
      0.5455105929140381,
      -0.3780597395976911,
      -0.7479899907845696
    ],
    [
      0.5478165270133233,
      -0.4061897787470906,
      -0.7313733084905755
    ],
    [
      0.5506598346804397,
      -0.3693430286132251,
      -0.7485716222810755
    ],
    [
      0.5490780082199436,
      -0.3319340456518089,
      -0.7670287675351183
    ],
    [
      0.5510684207097247,
      -0.32810126614239743,
      -0.7672503860228715
    ],
    [
      0.5519000978375408,
      -0.29878998087266556,
      -0.7785440445710345
    ],
    [
      0.5753946528495231,
      -0.27721875030991755,
      -0.7694613427254058
    ],
    [
      0.6017264239301708,
      -0.28126734102126183,
      -0.7475386234964969
    ],
    [
      0.6186343510980311,
      -0.26557458094344,
      -0.7394333516945487
    ],
    [
      0.18263153031519816,
      -0.10620276882014842,
      -0.9774286142883597
    ],
    [
      0.24851431155666626,
      -0.22747344546367257,
      -0.9415394142362824
    ],
    [
      0.2781490564028108,
      -0.1714420196817622,
      -0.945114139302584
    ],
    [
      0.2610509113355067,
      -0.13211371749740425,
      -0.9562418038027398
    ],
    [
      0.2048807698663633,
      -0.12530383890443395,
      -0.9707331343344462
    ],
    [
      0.33280514819896034,
      -0.254318806063115,
      -0.9080543365982565
    ],
    [
      0.32790551635778087,
      -0.17529904962227735,
      -0.9283039456684774
    ],
    [
      0.3401807132980105,
      -0.26393604045913,
      -0.9025601635607531
    ],
    [
      0.3654079234959307,
      -0.1524637558444947,
      -0.91827656650934
    ],
    [
      0.3376351669460751,
      -0.09329637493567283,
      -0.9366420236489277
    ],
    [
      0.28397482186123135,
      -0.09551759120783195,
      -0.9540622046380075
    ],
    [
      -0.7271767795012837,
      -0.6850075118804836,
      -0.044481906675081034
    ],
    [
      0.16683948994232392,
      0.9805313710539185,
      0.10355102594811877
    ],
    [
      0.16383274201305095,
      0.9759989191194529,
      0.14347453614542402
    ],
    [
      0.16558515522929004,
      0.98035903206394,
      0.10713414310268364
    ],
    [
      0.15762179117135813,
      0.9651855792394342,
      0.2087394753662345
    ],
    [
      0.16063982214191885,
      0.9752857852241554,
      0.15169866407426016
    ],
    [
      0.05538039685672337,
      0.9755972259632808,
      0.21246897264481496
    ],
    [
      0.060604238902821184,
      0.9865473286286011,
      0.15182718663922057
    ],
    [
      0.057610614017079266,
      0.9879009897291753,
      0.143988373296912
    ],
    [
      0.059847045819177186,
      0.9914510558516788,
      0.11594453396908652
    ],
    [
      0.04667236552127819,
      0.9955564186406691,
      0.08178696473163097
    ],
    [
      0.04365491598093012,
      0.995959199552804,
      0.07848261678127134
    ],
    [
      0.041705249809802565,
      0.9964196479706424,
      0.07354289412555845
    ],
    [
      0.041395677429039296,
      0.9979917380077187,
      0.04794672834014709
    ],
    [
      0.03531261645455757,
      0.9993458691534924,
      0.0078008284806124805
    ],
    [
      0.03534541967254771,
      0.9988147833450439,
      0.03346236512209751
    ],
    [
      0.023310033859506016,
      0.999442021089523,
      -0.02392255843253744
    ],
    [
      0.023393727899404058,
      0.9995427653826784,
      -0.019157078746950114
    ],
    [
      0.01555704533216411,
      0.9990217666590329,
      -0.04139430011484888
    ],
    [
      0.0157214710479016,
      0.9981121890864169,
      -0.05937081223303903
    ],
    [
      0.005274847613779218,
      0.9967341911583162,
      -0.0805799488621609
    ],
    [
      0.006539381919897103,
      0.9950453506921174,
      -0.09920678681474798
    ],
    [
      -0.0079588122774785,
      0.9921978665322458,
      -0.1244188528961406
    ],
    [
      -0.006370858229084469,
      0.9905537185907622,
      -0.13697716142276414
    ],
    [
      -0.026394156403562453,
      0.985245598435375,
      -0.16909896295206536
    ],
    [
      -0.026213936379208495,
      0.9848557756134946,
      -0.17138241094187223
    ],
    [
      -0.04079425416105023,
      0.9800245765507859,
      -0.19464752293285542
    ],
    [
      -0.03958453136090854,
      0.9783937072578817,
      -0.20292564765232565
    ],
    [
      -0.062316613614076546,
      0.9698907180303994,
      -0.2354328667500568
    ],
    [
      -0.06549933722175583,
      0.9695506691605451,
      -0.23596893175553818
    ],
    [
      -0.08642127662577023,
      0.9603040161356525,
      -0.26523114360894473
    ],
    [
      -0.1255034437482849,
      0.9542440894919562,
      -0.2714168441290787
    ],
    [
      -0.12148849195485911,
      0.9511753029415079,
      -0.2837359501308652
    ],
    [
      -0.1317286872343193,
      0.935693737212859,
      -0.3272992256332974
    ],
    [
      -0.15429549936277492,
      0.9299796414795642,
      -0.333662651955434
    ],
    [
      -0.16035267935205907,
      0.9228893227605031,
      -0.35008901176597357
    ],
    [
      -0.18344223472586382,
      0.915841345200131,
      -0.3571884333804715
    ],
    [
      -0.19781667921319715,
      0.898348613620432,
      -0.39222229644846907
    ],
    [
      -0.20421472155929782,
      0.8974030705770515,
      -0.39110622139942747
    ],
    [
      -0.2406882113116627,
      0.8827060019651437,
      -0.403607853033491
    ],
    [
      -0.2603381531971489,
      0.8578231940467308,
      -0.4431291163367204
    ],
    [
      -0.2603594735270218,
      0.850752065363118,
      -0.4565455813225236
    ],
    [
      -0.30462624418949963,
      0.8403334301660631,
      -0.44837771743959104
    ],
    [
      -0.3417578452662913,
      0.8194629000389319,
      -0.46008926379423937
    ],
    [
      -0.4046305712501272,
      0.7977682119006381,
      -0.4470346528969028
    ],
    [
      -0.4218440218507446,
      0.8000447468837497,
      -0.42658647917216685
    ],
    [
      -0.4272545225540326,
      0.7970741290726313,
      -0.42676270422827717
    ],
    [
      -0.46128172129616596,
      0.7658814794964774,
      -0.4479338488687064
    ],
    [
      -0.5365730263010909,
      0.6132062464022012,
      -0.5797132798370344
    ],
    [
      -0.5091777862813988,
      0.6100548784426509,
      -0.6071005083558212
    ],
    [
      -0.585417567181412,
      0.6053263104804296,
      -0.5393202479747516
    ],
    [
      -0.5585751882224104,
      0.5978434505843088,
      -0.5749582312618422
    ],
    [
      -0.7158447898532488,
      0.4490746518953382,
      -0.5346944864733867
    ],
    [
      -0.7095173232052637,
      0.48185164773687367,
      -0.5142024481125087
    ],
    [
      -0.717251794826801,
      0.4179180728727127,
      -0.5575790053293708
    ],
    [
      -0.7131317140676467,
      0.44339501016619853,
      -0.5429954174306233
    ],
    [
      -0.17672133141370616,
      0.94465156895955,
      -0.27641089755222636
    ],
    [
      -0.18355787991771433,
      0.9374218423981556,
      -0.29588307507351863
    ],
    [
      -0.12920099665146612,
      0.9545143324648145,
      -0.26871823827853053
    ],
    [
      -0.21445561958944737,
      0.9231834746902369,
      -0.3189687434300843
    ],
    [
      -0.23995842116121088,
      0.9164508773000055,
      -0.3202151551845559
    ],
    [
      -0.2483810816098879,
      0.9086800019125947,
      -0.3355703986087407
    ],
    [
      -0.2813622133544074,
      0.8916613169904293,
      -0.3546482774231423
    ],
    [
      -0.31808133839318536,
      0.878746890271074,
      -0.35584851412492513
    ],
    [
      -0.3528113443624722,
      0.8696881932683717,
      -0.34520515896889575
    ],
    [
      -0.35684129935439235,
      0.8689592431005209,
      -0.34289082942715
    ],
    [
      -0.3968106529889889,
      0.8465266329475768,
      -0.35487175906923174
    ],
    [
      -0.49254503758442447,
      0.781935463404736,
      -0.3820684716395461
    ],
    [
      -0.5248907556446455,
      0.7575077342268809,
      -0.38816456204199035
    ],
    [
      -0.5509710833422923,
      0.7483379978937074,
      -0.3693522793067053
    ],
    [
      -0.5850131691818403,
      0.7219761117500616,
      -0.36947271339854304
    ],
    [
      -0.6397087390485926,
      0.674219110971138,
      -0.36905462954168183
    ],
    [
      -0.7224655872989322,
      0.6252845324746561,
      -0.29506393987873186
    ],
    [
      -0.7264632880016868,
      0.6183413232392282,
      -0.2998417902170051
    ],
    [
      -0.758246027012036,
      0.5714494712448466,
      -0.31386058104586534
    ],
    [
      -0.7805100372069603,
      0.5014392696536301,
      -0.3733131938043759
    ],
    [
      -0.8338617592460462,
      0.42476349858428925,
      -0.35249189598843755
    ],
    [
      -0.8391284743930727,
      0.4182830398390078,
      -0.34771065851623456
    ],
    [
      -0.8441438353140103,
      0.40893098397694916,
      -0.34669386444671485
    ],
    [
      -0.8357654738674605,
      0.39298234273424165,
      -0.3834852682831586
    ],
    [
      -0.8328484186233559,
      0.3425424042220984,
      -0.4347737490998276
    ],
    [
      -0.8363296366876671,
      0.33486323753590913,
      -0.43407297882365814
    ],
    [
      -0.8497270320702832,
      0.2691904456298393,
      -0.453321602122198
    ],
    [
      -0.8408395727060307,
      0.23512976567435326,
      -0.48754774767756176
    ],
    [
      -0.853748168839041,
      0.2569075303022944,
      -0.45289356926099095
    ],
    [
      -0.8521585961885223,
      0.2504550004595407,
      -0.4594540452393671
    ],
    [
      -0.840588621969329,
      0.23414023114904245,
      -0.48845585345369474
    ],
    [
      -0.8110045939214797,
      0.19980939317051735,
      -0.5498615780713227
    ],
    [
      -0.6015288707061414,
      0.5128322578379221,
      -0.6125080350720742
    ],
    [
      -0.6115224527164008,
      0.5005832435423694,
      -0.6127452212039831
    ],
    [
      -0.6164162072497259,
      0.4959522536053944,
      -0.6116064270293384
    ],
    [
      -0.6222704105517132,
      0.4581108728695744,
      -0.6347550427609685
    ],
    [
      -0.6285449669724512,
      0.4385399565800182,
      -0.6423503179546157
    ],
    [
      -0.5013129810161675,
      0.08900189318284517,
      -0.8606764537702616
    ],
    [
      -0.558513673442301,
      0.06754347306022605,
      -0.8267408032902146
    ],
    [
      -0.6059054057293732,
      0.034300801805545726,
      -0.7947968887102039
    ],
    [
      -0.5822700231837338,
      0.03861689792397657,
      -0.8120778012581943
    ],
    [
      -0.6407133669388428,
      0.01062443800075931,
      -0.7677066514906977
    ],
    [
      -0.6526183671495244,
      0.012573645838654257,
      -0.7575824511493205
    ],
    [
      -0.7400374278228408,
      0.028664316525852027,
      -0.671954583569053
    ],
    [
      -0.7233607472574323,
      0.012128480538812407,
      -0.6903637659140207
    ],
    [
      -0.6680026898684706,
      0.009342629678035312,
      -0.744100209379884
    ],
    [
      -0.7522143413672,
      0.08824263842938831,
      -0.6529830176999473
    ],
    [
      0.1227370897420578,
      0.2308289059185317,
      -0.9652220589035995
    ],
    [
      0.08816061866567895,
      0.21858940535814578,
      -0.9718263101921335
    ],
    [
      0.13920564982969158,
      0.3031015524579595,
      -0.942736037262323
    ],
    [
      0.11153770168051674,
      0.28833380275410436,
      -0.9510115452996274
    ],
    [
      0.1502615645460488,
      0.37459694741753863,
      -0.9149309204555476
    ],
    [
      0.12754343389265582,
      0.3588788317715936,
      -0.9246289291262338
    ],
    [
      0.1306898903637191,
      0.45176972417428063,
      -0.8825102089359723
    ],
    [
      0.13392939843551446,
      0.5023307402610586,
      -0.8542404483653757
    ],
    [
      0.13064290980079835,
      0.4989861112186538,
      -0.8567060703238104
    ],
    [
      0.12322392250701086,
      0.4580665149803884,
      -0.8803356932305471
    ],
    [
      0.14083178698099838,
      0.5387481381767598,
      -0.8306123352002507
    ],
    [
      0.09965995079622442,
      0.45023280290561385,
      -0.8873321347697539
    ],
    [
      0.06141936222314433,
      0.3914085925254285,
      -0.9181650045832531
    ],
    [
      0.0539347710040462,
      0.30951311691563665,
      -0.9493643509917089
    ],
    [
      0.0766935043565839,
      0.3656185199264708,
      -0.9275997004507297
    ],
    [
      0.06200888217350435,
      0.297897001822856,
      -0.9525818992803431
    ],
    [
      0.04693628327702595,
      0.22928715904541733,
      -0.9722265085920154
    ],
    [
      -0.30660834843957374,
      0.9463272357340882,
      0.10225499291006118
    ],
    [
      -0.7391505051917675,
      0.6215470879046545,
      0.25949132585117096
    ],
    [
      -0.7267701407853491,
      0.6451070943283161,
      0.23588556401382624
    ],
    [
      -0.7603222479479329,
      0.5629939937675675,
      0.32395654377870814
    ],
    [
      -0.7700359544209935,
      0.5545035908760985,
      0.3155477723015362
    ],
    [
      -0.7745306289594382,
      0.5573528562139141,
      0.2990988105524477
    ],
    [
      -0.7594238822465443,
      0.5923912353555981,
      0.2689758192616113
    ],
    [
      -0.7745663148574329,
      0.608173778359886,
      0.17369996892238146
    ],
    [
      -0.7564638816284818,
      0.6285380873119029,
      0.18083768575677217
    ],
    [
      -0.7802063718781346,
      0.5906246796606591,
      0.2060109343129673
    ],
    [
      -0.7746904246167574,
      0.6079568435073515,
      0.1739057861018027
    ],
    [
      -0.817924286716806,
      0.5239045489981791,
      0.23774752309502412
    ],
    [
      -0.8165763911551568,
      0.5227812470835571,
      0.2447504139031864
    ],
    [
      -0.8363917562314659,
      0.5172286304072463,
      0.18144799253529434
    ],
    [
      -0.8354059028762844,
      0.5164049331569557,
      0.18820978308956227
    ],
    [
      -0.8445760823441861,
      0.5126321515436847,
      0.15459469051632738
    ],
    [
      -0.8489169764112625,
      0.5155803932803121,
      0.11626188208384787
    ],
    [
      -0.8292549833945415,
      0.5531922777579603,
      0.07946367940309852
    ],
    [
      -0.7810248182324281,
      0.6052622249574993,
      0.1538111580624125
    ],
    [
      -0.7194802791955113,
      0.5640791148556119,
      0.40517018650495296
    ],
    [
      -0.781743355379706,
      0.5167310808838926,
      0.3490935639169573
    ],
    [
      -0.766908671846157,
      0.5073351157764433,
      0.39301675453759793
    ],
    [
      -0.7577884251865764,
      0.4894204077000117,
      0.4315372141310676
    ],
    [
      -0.7657622979858545,
      0.49475123156222334,
      0.4108884542684141
    ],
    [
      -0.7499566866988446,
      0.47179509132733094,
      0.46365327549271834
    ],
    [
      -0.7559569350620949,
      0.4759933918277518,
      0.4493989355437281
    ],
    [
      -0.7464270976492688,
      0.4504480294616912,
      0.4898399337017842
    ],
    [
      -0.7433309015203371,
      0.4482437360110053,
      0.496524645885639
    ],
    [
      -0.7381538509456453,
      0.4219585705789755,
      0.5263837545451624
    ],
    [
      -0.8189027292009923,
      0.4641046685788854,
      0.3376465262822191
    ],
    [
      -0.8334867152594099,
      0.45937790515066546,
      0.3070371895153185
    ],
    [
      -0.8383642662108054,
      0.46982169518776,
      0.2764288911668195
    ],
    [
      -0.8108886939380797,
      0.4353302286067648,
      0.391084540866265
    ],
    [
      -0.8205054266224263,
      0.44749918072364464,
      0.3556899325744502
    ],
    [
      -0.8015153725812239,
      0.4166983934353824,
      0.42887708778198114
    ],
    [
      -0.8113827225409552,
      0.4282678436260279,
      0.3977998638485681
    ],
    [
      -0.7929859305387861,
      0.3962921618795957,
      0.462737329810695
    ],
    [
      -0.8019311212020008,
      0.406615160017762,
      0.43768777512221146
    ],
    [
      -0.7846748422619796,
      0.3715058045841168,
      0.4962548025777137
    ],
    [
      -0.7932435350939433,
      0.381103113236817,
      0.474894842162841
    ],
    [
      -0.7767407713116516,
      0.3432466888901094,
      0.528067689551403
    ],
    [
      -0.7845094853659546,
      0.35199342871771916,
      0.5105345174524334
    ],
    [
      -0.7623862957332235,
      0.3007256748808152,
      0.5730019236840764
    ],
    [
      -0.7757853556723341,
      0.31773792686853836,
      0.5451602441059267
    ],
    [
      -0.7591527137502503,
      0.2420707548941437,
      0.6042258740161744
    ],
    [
      -0.7619886633254409,
      0.24637067911432445,
      0.598894619642099
    ],
    [
      -0.765309515788182,
      0.2894262768055245,
      0.5749206687348704
    ],
    [
      -0.752127714889098,
      0.20322269329392362,
      0.6269006599343053
    ],
    [
      -0.7557768784603454,
      0.20933594088075108,
      0.6204673833815176
    ],
    [
      -0.7594967592342086,
      -0.06783981283943473,
      0.646964011755403
    ],
    [
      -0.7735950296147456,
      -0.14329213710790056,
      0.6172666308803769
    ],
    [
      -0.8088460729472545,
      -0.1455064789454979,
      0.5697331786570693
    ],
    [
      -0.8092913770600317,
      -0.1451250915751837,
      0.5691978345106138
    ],
    [
      -0.8204328089235464,
      -0.2131760275065249,
      0.5305148323452955
    ],
    [
      -0.8225545757925059,
      -0.1971964370921799,
      0.5334018513662664
    ],
    [
      -0.8371636750779287,
      -0.2636092588516696,
      0.4792359959119199
    ],
    [
      -0.8322928929482202,
      -0.22812977838941814,
      0.5052181158270924
    ],
    [
      -0.8329174911522911,
      -0.2939378070612236,
      0.4688806015529027
    ],
    [
      -0.8406401854816459,
      -0.33310526823162273,
      0.4270421042821453
    ],
    [
      -0.6391197414755705,
      0.005659193533357856,
      -0.7690864253026132
    ],
    [
      0.4120843981790407,
      -0.6094270837275092,
      -0.6773367540572424
    ],
    [
      0.387912872293165,
      -0.6064710473526842,
      -0.694057974691023
    ],
    [
      0.5934195172037766,
      -0.4033203736445802,
      -0.6965529073981623
    ],
    [
      0.5814862029607026,
      -0.4499394472310174,
      -0.6778113967703634
    ],
    [
      0.5946287939210941,
      -0.41333733831823416,
      -0.6896149956257787
    ],
    [
      0.6068615431756569,
      -0.361511017455374,
      -0.7078339153168918
    ],
    [
      0.6030505885251182,
      -0.3269863232221752,
      -0.7276056157735121
    ],
    [
      0.6172305685163441,
      -0.34673845871723735,
      -0.7062569408759006
    ],
    [
      -0.04626981945810712,
      0.9879069291802174,
      0.14798311756760368
    ],
    [
      -0.04551337130045346,
      0.987982081752642,
      0.1477157377146486
    ],
    [
      -0.030921723853382196,
      0.9966261143680966,
      0.07602785774625548
    ],
    [
      -0.037668471178426526,
      0.9985943928134057,
      0.03728706103604361
    ],
    [
      -0.0411192452708649,
      0.997381532198917,
      0.05949190614609071
    ],
    [
      -0.052282570892765855,
      0.9985777608753219,
      0.010439744540520992
    ],
    [
      -0.0660117038409366,
      0.9978169415594899,
      0.0019509210343402388
    ],
    [
      -0.06707587794982879,
      0.9969791345373953,
      -0.039159058905008565
    ],
    [
      -0.08442988673302933,
      0.9938497725540785,
      -0.07165349831274406
    ],
    [
      -0.0853142456260406,
      0.9932922074137488,
      -0.07805171480743842
    ],
    [
      -0.09842149542011361,
      0.989738674133664,
      -0.10358844609031197
    ],
    [
      -0.10626287236099985,
      0.9880406839741829,
      -0.11173096602741246
    ],
    [
      -0.10697601908309975,
      0.9875992863349968,
      -0.1149077063200601
    ],
    [
      -0.12848295457130526,
      0.9796271051349941,
      -0.15434657517891137
    ],
    [
      -0.13235418318425815,
      0.9760305712763883,
      -0.17276195798703758
    ],
    [
      -0.13175989795610127,
      0.9759484471957666,
      -0.17367774096518487
    ],
    [
      -0.12835851648674024,
      0.9743775436680532,
      -0.18469567845711662
    ],
    [
      -0.6317101074721904,
      0.5102555844216838,
      -0.583593676014365
    ],
    [
      -0.6171460465147828,
      0.49627014359837984,
      -0.6106117439453789
    ],
    [
      -0.5130683386915851,
      0.7918111069251059,
      -0.3313548713725143
    ],
    [
      -0.5311711976365595,
      0.7804661518804984,
      -0.32974193632322524
    ],
    [
      -0.5671652376201282,
      0.7624150986611012,
      -0.31152337082293946
    ],
    [
      -0.553735854139497,
      0.7722023102290622,
      -0.31157695023428944
    ],
    [
      -0.5912065785607873,
      0.7528302185242701,
      -0.28934658032046523
    ],
    [
      -0.5948707103993288,
      0.7500384096179706,
      -0.2890868762271011
    ],
    [
      -0.6187524350780453,
      0.7059999452001762,
      -0.3445424523369182
    ],
    [
      -0.6188728927231752,
      0.739073854230746,
      -0.26601913586236464
    ],
    [
      -0.6399867420783134,
      0.7214585116070327,
      -0.26441366453674703
    ],
    [
      -0.6579414816722453,
      0.7101266305572592,
      -0.25066546484971625
    ],
    [
      -0.6733899360705926,
      0.6967968049518751,
      -0.24702268439902744
    ],
    [
      -0.6958405880333436,
      0.6799184500440344,
      -0.23133693465404212
    ],
    [
      -0.7191782878431231,
      0.6515319527712651,
      -0.24143053827777466
    ],
    [
      -0.6949531969079521,
      0.6807211028193807,
      -0.2316437659074449
    ],
    [
      -0.758843418548275,
      0.5710113342678327,
      -0.3132135409966132
    ],
    [
      -0.8163842254776622,
      0.5086766632768002,
      -0.2734316160008177
    ],
    [
      -0.8170092053421076,
      0.4998442723576971,
      -0.2874920203718046
    ],
    [
      -0.8468923393682048,
      0.40606884713033653,
      -0.3433386912506204
    ],
    [
      -0.8659538968003065,
      0.3613943208019684,
      -0.34571374503835955
    ],
    [
      -0.87449220539879,
      0.31904967758845226,
      -0.36533640104356585
    ],
    [
      -0.8839633163111783,
      0.29362305347606543,
      -0.3638603549214113
    ],
    [
      -0.8866636677453006,
      0.24861485019355878,
      -0.3898951096944992
    ],
    [
      -0.8933514705672205,
      0.1393010943999619,
      -0.4272216697855545
    ],
    [
      -0.8890149416828362,
      0.13883930082604312,
      -0.4363210767437195
    ],
    [
      -0.9142669739021869,
      0.19380848909424397,
      -0.35574452910304055
    ],
    [
      -0.905499315862086,
      0.15448333110000811,
      -0.39522890757830403
    ],
    [
      -0.8770393949399248,
      0.12503832434724188,
      -0.4638613124284505
    ],
    [
      -0.8675350394533015,
      0.12384470616154027,
      -0.48171095490607296
    ],
    [
      -0.8606130424552276,
      0.1165570319938099,
      -0.49574151475214434
    ],
    [
      -0.8388153107472872,
      0.11353419541259167,
      -0.532446110820567
    ],
    [
      -0.8377292983326105,
      0.11098347528785883,
      -0.53468896652931
    ],
    [
      -0.8189808729528012,
      0.09297826967169531,
      -0.5662379103401018
    ],
    [
      -0.16383021950272278,
      0.9694765791343616,
      -0.18241387471249412
    ],
    [
      -0.21882735635203002,
      0.9490904482516714,
      -0.2265875308780759
    ],
    [
      -0.2191289796525625,
      0.9483525252507398,
      -0.2293686511425916
    ],
    [
      -0.2553953844030682,
      0.9317331490806364,
      -0.25815990496180763
    ],
    [
      -0.26283785990778563,
      0.9245252903261016,
      -0.27598776593634106
    ],
    [
      -0.3045120072253768,
      0.9101209411577578,
      -0.2809845368017419
    ],
    [
      -0.35167080337848367,
      0.8791028840551193,
      -0.3217231189969155
    ],
    [
      -0.43460474691088996,
      0.8429671307313881,
      -0.31705698299992097
    ],
    [
      -0.4724067905625186,
      0.8309708801437313,
      -0.29380132842377193
    ],
    [
      -0.48218123171757493,
      0.8262566629998997,
      -0.291206433012034
    ],
    [
      -0.5124114573037376,
      0.8203308665759647,
      -0.25395229427313043
    ],
    [
      -0.5428585921835237,
      0.8067121780484485,
      -0.2334952048348124
    ],
    [
      -0.5437909444762696,
      0.8059579986961992,
      -0.2339297181702747
    ],
    [
      -0.5629866121679431,
      0.7923856009225496,
      -0.23488536346539815
    ],
    [
      -0.5985868841599281,
      0.7703198835635086,
      -0.21977492827529577
    ],
    [
      -0.6184210321706203,
      0.7612622127611582,
      -0.19502633255796437
    ],
    [
      -0.6293096239412894,
      0.7607839519469127,
      -0.15867317251164534
    ],
    [
      -0.6303135273495056,
      0.760298004231601,
      -0.15700892331860797
    ],
    [
      -0.639220613629657,
      0.7588104199508653,
      -0.12491498583002843
    ],
    [
      -0.6504199258110437,
      0.7509652724469985,
      -0.11403981623346228
    ],
    [
      -0.6994228544097322,
      0.7034041346959985,
      -0.12661079741442333
    ],
    [
      -0.4998419849288403,
      0.8571982541443351,
      0.12397234850683686
    ],
    [
      -0.5504043333058691,
      0.8241573170677314,
      0.13349077347082947
    ],
    [
      -0.5587695360654501,
      0.8239152528680389,
      0.09455295688976031
    ],
    [
      -0.5552244702830541,
      0.827055983641135,
      0.08777350125349147
    ],
    [
      -0.5064465329125606,
      0.8583866510564303,
      0.08175736412686603
    ],
    [
      -0.504711870609194,
      0.8591149525638754,
      0.08477868804916908
    ],
    [
      -0.5304428027777204,
      0.8477076846114656,
      0.00470259842900698
    ],
    [
      -0.5103997221168629,
      0.8588718167667867,
      0.042793995218351304
    ],
    [
      -0.5618737486260384,
      0.8254133769179105,
      0.05468681568618417
    ],
    [
      -0.6077684778906485,
      0.7922854616407027,
      0.05386301658153719
    ],
    [
      -0.5901218865936315,
      0.8071109355836822,
      -0.018113437675
    ],
    [
      -0.5863990649800689,
      0.8097701428215005,
      -0.02021020498034584
    ],
    [
      -0.5306162330547092,
      0.8476066997419314,
      0.003048896754871732
    ],
    [
      -0.6175284185198281,
      0.781115793702359,
      0.09228634324283212
    ],
    [
      -0.6096386550742662,
      0.7906731466240137,
      0.056362092286580505
    ],
    [
      -0.6254729723691075,
      0.7697100398978379,
      0.1277889483336581
    ],
    [
      -0.6187649902916419,
      0.7798836311568887,
      0.09440025764228682
    ],
    [
      -0.619908117237859,
      0.7732669906058685,
      0.13331199279118372
    ],
    [
      -0.6252884076955554,
      0.7693203726007174,
      0.1309983645052497
    ],
    [
      -0.6264950711097493,
      0.7679054577252085,
      0.13351080057818676
    ],
    [
      -0.6526528388617573,
      0.742711096797401,
      0.14974811724923548
    ],
    [
      -0.6807275051460483,
      0.7043173119009278,
      0.201363323110958
    ],
    [
      -0.7146120423634451,
      0.6827047092987926,
      0.1524595317138191
    ],
    [
      -0.7298253038822718,
      0.6683025817006444,
      0.14396765298289427
    ],
    [
      -0.8556423232914863,
      0.385275704808992,
      0.3455992561859505
    ],
    [
      -0.8569760483395414,
      0.38461464874763807,
      0.3430213179105273
    ],
    [
      -0.8653999697479308,
      0.3941674248933019,
      0.3093783016199805
    ],
    [
      -0.8453900809798656,
      0.374336356220093,
      0.38103530465393876
    ],
    [
      -0.8355858222847679,
      0.35815332407569817,
      0.4165603558312003
    ],
    [
      -0.8455221326860366,
      0.3679213048215793,
      0.38694474618017866
    ],
    [
      -0.8281022490274101,
      0.33457873876943744,
      0.4497818723772644
    ],
    [
      -0.8357015888373452,
      0.3424354604673192,
      0.42934928651305776
    ],
    [
      -0.8228747446917357,
      0.30610050090077434,
      0.47872710169448923
    ],
    [
      -0.8273682307836226,
      0.31177855647424757,
      0.46717870500785075
    ],
    [
      -0.8207800118593583,
      0.27624056953801546,
      0.500011319745328
    ],
    [
      -0.8155995514452244,
      0.24111186706398957,
      0.5259871093888763
    ],
    [
      -0.8246236881589096,
      0.2568842931613352,
      0.5039903102780832
    ],
    [
      -0.8124549344542086,
      0.21194150075670476,
      0.5431369806393258
    ],
    [
      -0.8102695906488839,
      0.1762357564577055,
      0.5589312557152897
    ],
    [
      -0.8137834098152936,
      0.20288679716252428,
      0.5446039932340991
    ],
    [
      -0.8117816141911225,
      0.16276292098797968,
      0.5608197949544188
    ],
    [
      -0.8344869579458375,
      -0.05884485903471374,
      0.5478766280682966
    ],
    [
      -0.8842808455202082,
      -0.07926592177840379,
      0.4601785521845684
    ],
    [
      -0.9097667437783605,
      -0.07976324024470187,
      0.40738470445094643
    ],
    [
      -0.9361582297731718,
      -0.07019348474631644,
      0.34450057115646415
    ],
    [
      -0.9598420943839869,
      -0.2590479575371456,
      0.1076908052917918
    ],
    [
      -0.9733720875967468,
      -0.07298919334844467,
      0.2173001535708028
    ],
    [
      -0.9729806899926045,
      -0.06763760452549272,
      0.2207571773591258
    ],
    [
      -0.9719589595808779,
      -0.06547987201398305,
      0.2258498776875688
    ],
    [
      -0.9537925608414684,
      -0.0566605014087271,
      0.2950751403686619
    ],
    [
      -0.9442829498646189,
      -0.28474294566382896,
      -0.16507927032083583
    ],
    [
      -0.11123809876157692,
      0.9906802426074268,
      0.07860497624959478
    ],
    [
      -0.12570974616299696,
      0.9902591757256727,
      0.05986505333453059
    ],
    [
      -0.12387541791810408,
      0.9916752998986691,
      0.035142288008889626
    ],
    [
      -0.1491171549780491,
      0.988818864005403,
      0.0011525095733895406
    ],
    [
      -0.17094328305731363,
      0.9852186667027211,
      -0.0110712581985835
    ],
    [
      -0.1774506380256396,
      0.9823461536599046,
      -0.05922250800062699
    ],
    [
      -0.19485042533514924,
      0.9784663671977899,
      -0.06809464009355805
    ],
    [
      -0.21550552467396536,
      0.9713749767034285,
      -0.09994009940665687
    ],
    [
      -0.21568252498939358,
      0.970698571529105,
      -0.10594966562266502
    ],
    [
      -0.2355147786715253,
      0.9621902773471392,
      -0.13683076849136613
    ],
    [
      -0.2367669081854532,
      0.9617935192537818,
      -0.13745783902610464
    ],
    [
      -0.25818207019882705,
      0.9508477574546672,
      -0.17096947321460107
    ],
    [
      -0.2587473869522169,
      0.9493808723592289,
      -0.17811723370810956
    ],
    [
      -0.2954879431409197,
      0.935455985941371,
      -0.1939303324000815
    ],
    [
      -0.30592562903490894,
      0.9277671835682786,
      -0.21367630330333606
    ],
    [
      -0.3241266619209986,
      0.9195942816499523,
      -0.2220096038207782
    ],
    [
      -0.3780865680109771,
      0.8996433165327613,
      -0.2183860117031646
    ],
    [
      -0.3735967197925795,
      0.9026942045623122,
      -0.21346818032165668
    ],
    [
      -0.4084274338169246,
      0.8859262195535074,
      -0.21982212084627065
    ],
    [
      -0.4393557058353043,
      0.874135127422561,
      -0.2070129048052423
    ],
    [
      -0.4559769770943069,
      0.8696235716041623,
      -0.18931413066741304
    ],
    [
      -0.4569199832990021,
      0.8692255733998574,
      -0.18886776170042519
    ],
    [
      -0.4756279474580814,
      0.863411917380252,
      -0.16821984580473667
    ],
    [
      -0.5420908465075814,
      0.8135034937734955,
      -0.2105933991154764
    ],
    [
      -0.5507520425686617,
      0.8190648939755888,
      -0.16063899608502524
    ],
    [
      -0.55257451718908,
      0.8154353839798302,
      -0.17241385532178663
    ],
    [
      -0.48157983013217864,
      0.8632186972997269,
      -0.15144090544507569
    ],
    [
      -0.4907897233720748,
      0.8597950322493038,
      -0.1409891838113154
    ],
    [
      -0.5026803388802028,
      0.8584679767362934,
      -0.10171140457971951
    ],
    [
      -0.560821942242189,
      0.8187387440448618,
      -0.12306753470977314
    ],
    [
      -0.5813091957777715,
      0.8076923263861373,
      -0.09855315723582762
    ],
    [
      -0.4974903424303472,
      0.8653114703078946,
      -0.06115078529443155
    ],
    [
      -0.5782778214009658,
      0.8113851129477848,
      -0.08514082312535555
    ],
    [
      -0.4911020460818868,
      0.8698039957136039,
      -0.047537241977563115
    ],
    [
      -0.7541218277277795,
      0.6249885101719602,
      -0.201716710010715
    ],
    [
      -0.7791323280294902,
      0.5947480988626895,
      -0.1980593706911223
    ],
    [
      -0.7884636571808886,
      0.5761624167191077,
      -0.2153182083924524
    ],
    [
      -0.8058073036481296,
      0.5480722232521683,
      -0.22425750263203365
    ],
    [
      -0.8199735617299526,
      0.5080669220320003,
      -0.2636500726357284
    ],
    [
      -0.8702960689599404,
      0.4473384259490799,
      -0.20608999253305396
    ],
    [
      -0.8734430649397803,
      0.4344646642541789,
      -0.21985829032153043
    ],
    [
      -0.847932149539271,
      0.40608741282333766,
      -0.34074049205247026
    ],
    [
      -0.8947648057766646,
      0.3803090151695009,
      -0.23401067352634164
    ],
    [
      -0.9003689833219164,
      0.34993369952730924,
      -0.2586157377403578
    ],
    [
      -0.9001584992970606,
      0.34877180297722393,
      -0.26090784884951307
    ],
    [
      -0.9045125637215803,
      0.3166429225152084,
      -0.2856471279233208
    ],
    [
      -0.9098595003919072,
      0.2970302242369667,
      -0.2897045657843976
    ],
    [
      -0.9276933613924361,
      0.256407149609481,
      -0.27136764887794584
    ],
    [
      -0.9287818723327768,
      0.2366325650613476,
      -0.28525298031485763
    ],
    [
      -0.9194083671216317,
      0.19219830032285046,
      -0.34314438334284647
    ],
    [
      -0.9420823530342727,
      0.13635939835647748,
      -0.30640978212398406
    ],
    [
      -0.9431348694248387,
      0.11693251956586907,
      -0.3111645930098253
    ],
    [
      -0.9384654720354757,
      0.08392502842507837,
      -0.3350211148585739
    ],
    [
      -0.9295571515711571,
      0.07138773777135109,
      -0.36170055689590175
    ],
    [
      -0.9256238313342027,
      0.05402536149001265,
      -0.3745687963272768
    ],
    [
      -0.9142800561175017,
      0.05538325843383135,
      -0.40127879793359317
    ],
    [
      -0.8989894341446911,
      0.03558246969385732,
      -0.4365224909975357
    ],
    [
      -0.893240223242254,
      0.01584180525150182,
      -0.4493005016561872
    ],
    [
      -0.8856031759892292,
      0.010241465247304234,
      -0.4643297611260542
    ],
    [
      -0.8794100348245281,
      0.010814625238689186,
      -0.47594225966063264
    ],
    [
      -0.8587833167163851,
      -0.004809433930423212,
      -0.5123163907927152
    ],
    [
      -0.8382980049923725,
      -0.03876037394756013,
      -0.5438327759865651
    ],
    [
      -0.8323048321290687,
      -0.03138936047786122,
      -0.5534287437994105
    ],
    [
      -0.7766360618003928,
      -0.005112872969690374,
      -0.6299287944213792
    ],
    [
      -0.6219500282367734,
      0.7826424968645411,
      -0.025473210985534865
    ],
    [
      -0.6504993277772982,
      0.7593841817252962,
      0.013648776746852033
    ],
    [
      -0.6729835379306537,
      0.7385455263865631,
      0.0405421154940709
    ],
    [
      -0.6693362713444345,
      0.7427401684409898,
      0.01805541600129308
    ],
    [
      -0.6940047483132783,
      0.7164222909962812,
      0.07138984719316298
    ],
    [
      -0.6982861867183738,
      0.7120380995114172,
      0.07347207825073099
    ],
    [
      -0.6923524613679228,
      0.7119354979617102,
      0.11745601721406458
    ],
    [
      -0.7490839349850459,
      0.6594440844716146,
      0.06329895577901508
    ],
    [
      -0.7492220438817719,
      0.659991335370539,
      0.05547761888755488
    ],
    [
      -0.8075362153156926,
      0.5895624652772807,
      -0.017359737606957585
    ],
    [
      -0.8004603519808065,
      0.5991373354435952,
      -0.017253352842635458
    ],
    [
      -0.7645690763579845,
      0.6441965934220237,
      0.021092095689097045
    ],
    [
      -0.4205744647454687,
      0.9044607051399935,
      0.071189553037844
    ],
    [
      -0.44057235809460527,
      0.8969333910889826,
      0.03750318963204416
    ],
    [
      -0.45850917557709986,
      0.8875894492643611,
      -0.04420752725720546
    ],
    [
      -0.44594636569637075,
      0.8948923037531127,
      -0.017309061373905237
    ],
    [
      -0.8877232396895899,
      0.3131384278114425,
      0.33747855449316627
    ],
    [
      -0.8993296376986532,
      0.33019544812579915,
      0.2866656044833631
    ],
    [
      -0.8846574408100234,
      0.37820568427963525,
      0.27265669402754955
    ],
    [
      -0.8817324437108714,
      0.382208050711614,
      0.27652288093191024
    ],
    [
      -0.8771772862806445,
      0.30581385954893037,
      0.3701862932917847
    ],
    [
      -0.8870846914378887,
      0.3031564278680255,
      0.34810476937101037
    ],
    [
      -0.868252573159659,
      0.29403126434974214,
      0.3996036596260389
    ],
    [
      -0.8610772752573734,
      0.27427299773436037,
      0.42815913951373863
    ],
    [
      -0.8676142431704141,
      0.2817897686643453,
      0.40968286676882665
    ],
    [
      -0.8472778075722163,
      0.2373286946602761,
      0.4751793424450054
    ],
    [
      -0.859710943473561,
      0.2487476958754781,
      0.44611845676730333
    ],
    [
      -0.8527690296360826,
      0.18038334740883283,
      0.4901498037040497
    ],
    [
      -0.8558010818438754,
      0.20535842556984163,
      0.4747972465825054
    ],
    [
      -0.8613343274596187,
      0.13970316145619102,
      0.48845286673212573
    ],
    [
      -0.830209306413216,
      0.067116553950935,
      0.5533966712319818
    ],
    [
      -0.8690971647509892,
      0.12163363788996842,
      0.4794532055951278
    ],
    [
      -0.2255189585924195,
      0.9739470549612153,
      0.023839745127959385
    ],
    [
      -0.21759346119368714,
      0.9759568869506764,
      0.012698049428791285
    ],
    [
      -0.20835046764721696,
      0.9754582118820463,
      0.0712134783806181
    ],
    [
      -0.23949707092713754,
      0.9700609607976809,
      -0.040285051242387945
    ],
    [
      -0.25142417933221883,
      0.966845457287624,
      -0.044673748101155084
    ],
    [
      -0.26370103330934175,
      0.9619372604575603,
      -0.07168313591765663
    ],
    [
      -0.2986309951706035,
      0.9502627937977658,
      -0.08843162017672138
    ],
    [
      -0.32389444677751605,
      0.9419232457357523,
      -0.08872985117373168
    ],
    [
      -0.3338868340679665,
      0.9367066013594503,
      -0.10535807992602259
    ],
    [
      -0.3539919534632143,
      0.9271207810138214,
      -0.12303151748889093
    ],
    [
      -0.3669227759568504,
      0.9213128269309582,
      -0.1286481691148587
    ],
    [
      -0.39330705352785134,
      0.9118277919084572,
      -0.11781188203482328
    ],
    [
      -0.4163518060610147,
      0.903990128924228,
      -0.0972266444823061
    ],
    [
      -0.4302896550578025,
      0.8998933891083569,
      -0.07101197778764382
    ],
    [
      -0.7298306056225666,
      0.6757296600134737,
      -0.10361811460682345
    ],
    [
      -0.7459938856560947,
      0.6585650472614608,
      -0.0989201753396724
    ],
    [
      -0.8129351620213938,
      0.5818123450587253,
      -0.025116080237905927
    ],
    [
      -0.8243563251557448,
      0.5570513439591597,
      -0.1006501334773591
    ],
    [
      -0.846648483410225,
      0.512490477144964,
      -0.14331732754587945
    ],
    [
      -0.874945531330521,
      0.4531643921363337,
      -0.17062341839401626
    ],
    [
      -0.6541384272644253,
      0.7527018425708846,
      -0.0744503469865609
    ],
    [
      -0.6882007968859319,
      0.7251353917433748,
      -0.02362894002596537
    ],
    [
      -0.6892566467192067,
      0.7242706601461427,
      -0.0189020053133351
    ],
    [
      -0.8893730925527327,
      0.44807015535018485,
      -0.09082201345295865
    ],
    [
      -0.8825911652160756,
      0.44316755336459934,
      -0.15695653770189022
    ],
    [
      -0.8376561557324095,
      0.5456714008065434,
      -0.02397680348641279
    ],
    [
      -0.8663776439083454,
      0.49820107702893984,
      -0.03443058208959798
    ],
    [
      -0.8831334199833571,
      0.4656561457795491,
      -0.056918506711214685
    ],
    [
      -0.935105811438535,
      0.3208813709096991,
      -0.15037375840548456
    ],
    [
      -0.9346336399120657,
      0.31998686663107545,
      -0.15513982186514694
    ],
    [
      -0.9229042498328535,
      0.36271569972470286,
      -0.1291706886784972
    ],
    [
      -0.9338276453949624,
      0.3001311748968283,
      -0.1946463627996933
    ],
    [
      -0.9365189262272268,
      0.2759289374328613,
      -0.21632272720492063
    ],
    [
      -0.9328977389071832,
      0.2590004421785722,
      -0.2502410431827061
    ],
    [
      -0.8531438166477404,
      0.4521071092792682,
      0.2602782930919717
    ],
    [
      -0.8678218235773898,
      0.4443786094101444,
      0.22229020226163818
    ],
    [
      -0.881083165860751,
      0.42517788666635153,
      0.20716230237842884
    ],
    [
      -0.8818247264553586,
      0.4342740805652633,
      0.1838237600560041
    ],
    [
      -0.863049403760745,
      0.4934266748526844,
      0.10805481577442937
    ],
    [
      -0.8914638891217995,
      0.4268877014678381,
      0.1518519829549215
    ],
    [
      -0.8953486008096883,
      0.4202780776517169,
      0.14736763713078502
    ],
    [
      -0.9050344289187632,
      0.41136685153740665,
      0.10812028453481518
    ],
    [
      -0.9040051486439753,
      0.41768411906491676,
      0.09118480085051854
    ],
    [
      -0.8906711731750538,
      0.4490741805381083,
      0.07097352780438486
    ],
    [
      -0.9184920401784856,
      0.3880605151560764,
      0.07603557526292425
    ],
    [
      -0.9233031263841099,
      0.3812881926780236,
      0.04615897457325937
    ],
    [
      -0.9033258015727345,
      0.42857930990771553,
      0.017951917223607297
    ],
    [
      -0.9024506510810212,
      0.4303598592086016,
      0.019318745958101322
    ],
    [
      -0.8926557336465001,
      0.4476178982241323,
      0.052952416162427574
    ],
    [
      -0.9118164339429787,
      0.4103210678442519,
      -0.015080188150766722
    ],
    [
      -0.9113123562739177,
      0.4114689557743798,
      -0.014250885460959945
    ],
    [
      -0.9278545758578506,
      0.37069065770685916,
      0.040918484191184094
    ],
    [
      -0.9315596156818069,
      0.36340433380998244,
      0.011574653294460793
    ],
    [
      -0.92009854233841,
      0.38832871159937266,
      -0.05118089618504363
    ],
    [
      -0.9187650408131633,
      0.3917698915891,
      -0.04885848773602437
    ],
    [
      -0.9352021297481379,
      0.3540504327939205,
      0.006728116600103866
    ],
    [
      -0.9377823649406314,
      0.3465376479837634,
      -0.021815007133570687
    ],
    [
      -0.9423730947801677,
      0.3334032824801497,
      -0.02784244001359263
    ],
    [
      -0.9437666232832762,
      0.32617561685049784,
      -0.053981735324829715
    ],
    [
      -0.925839814303568,
      0.36766617756521863,
      -0.08741979252386699
    ],
    [
      -0.9488860306651177,
      0.30970945018569346,
      -0.06078945035343741
    ],
    [
      -0.949383605667896,
      0.2968907693173037,
      -0.10259941707049054
    ],
    [
      -0.9425777564587507,
      0.3044333120339821,
      -0.13735913349030734
    ],
    [
      -0.9678620563202609,
      0.2133900006197314,
      -0.13307046092588456
    ],
    [
      -0.9616384583148738,
      0.2160858779015692,
      -0.16899221538668827
    ],
    [
      -0.9580424363271551,
      0.19773153078241648,
      -0.20750164320017175
    ],
    [
      -0.9593051069204894,
      0.18243565505051307,
      -0.21552480971470242
    ],
    [
      -0.9563615406852072,
      0.17087745024602355,
      -0.2370094945263467
    ],
    [
      -0.9567995138965455,
      0.15847645455625503,
      -0.24376198136422658
    ],
    [
      -0.9500383187410342,
      0.13785035605850135,
      -0.28004369705146664
    ],
    [
      -0.8950716416374612,
      0.3875628893680564,
      0.22054877719249302
    ],
    [
      -0.9120940225023513,
      0.3616538527522245,
      0.1931087385515026
    ],
    [
      -0.915427043047603,
      0.3649267944655025,
      0.16976973681506058
    ],
    [
      -0.925271760894757,
      0.35421183734707407,
      0.13566924033813124
    ],
    [
      -0.9252770553196081,
      0.35421892599646887,
      0.13561461339023528
    ],
    [
      -0.933921983291822,
      0.34293973515827636,
      0.1009062296086866
    ],
    [
      -0.9357746297656088,
      0.3389531190854956,
      0.09714229433800618
    ],
    [
      -0.9420285967594756,
      0.32881876739925686,
      0.06678578511484871
    ],
    [
      -0.945487174014737,
      0.3202346774199459,
      0.0591925261445173
    ],
    [
      -0.9500523482230864,
      0.3105423867596057,
      0.031047731985556007
    ],
    [
      -0.956294412279565,
      0.29240550469410986,
      0.00013366923415238823
    ],
    [
      -0.9535171157562776,
      0.30051600539002693,
      0.022253998837305985
    ],
    [
      -0.962201293113758,
      0.27092752520866026,
      -0.02769381906712773
    ],
    [
      -0.9609119709863613,
      0.2765175938657807,
      -0.01364566956164619
    ],
    [
      -0.9678029033464546,
      0.24539238957776446,
      -0.05603673269818546
    ],
    [
      -0.9672228895124305,
      0.24975814253697848,
      -0.04583396382272313
    ],
    [
      -0.9727028003929985,
      0.2181445684254086,
      -0.07913412269123107
    ],
    [
      -0.9728637348454622,
      0.19867474304382418,
      -0.11859384427114444
    ],
    [
      -0.974438814032379,
      0.19065705689580856,
      -0.11882291177630354
    ],
    [
      -0.982750941363266,
      0.11519222672143399,
      -0.14467666761635142
    ],
    [
      -0.985797737724222,
      0.0579229557813626,
      -0.1576316957066571
    ],
    [
      -0.9864018601854123,
      0.07365475150245138,
      -0.14692293151128694
    ],
    [
      -0.9845772058089962,
      0.020435894990070765,
      -0.1737529855781022
    ],
    [
      -0.9815341535229011,
      -0.03729259685505081,
      -0.1876165442808517
    ],
    [
      -0.976002742983698,
      -0.09961663284373258,
      -0.19363670145190612
    ],
    [
      -0.965590989748494,
      -0.1751625369158904,
      -0.19222935826172155
    ],
    [
      -0.9366538615397855,
      -0.010570992003713862,
      -0.35009684058938023
    ],
    [
      -0.9054774985274269,
      -0.006990784440368636,
      -0.4243366924900815
    ],
    [
      -0.31724685295768557,
      0.94804792772063,
      0.023655042444764653
    ],
    [
      -0.3272814305350336,
      0.9445592777115626,
      0.026355950295015126
    ],
    [
      -0.33388659336342413,
      0.9425627851990706,
      0.009753908444206892
    ],
    [
      -0.3361110945690801,
      0.9417983171972435,
      -0.006727691432817368
    ],
    [
      -0.906260404384913,
      0.31938400142931894,
      0.2769222617903639
    ],
    [
      -0.9193913696713657,
      0.21368278250001455,
      0.33024109047309946
    ],
    [
      -0.9262435609990076,
      0.2624980134165847,
      0.2704952100504261
    ],
    [
      -0.8994412741282963,
      0.21200398011744573,
      0.3821775854348715
    ],
    [
      -0.9199335922553199,
      0.20817011618118506,
      0.33224597600171885
    ],
    [
      -0.8895482569571166,
      0.2014045645020509,
      0.4100488994526078
    ],
    [
      -0.8861965564897022,
      0.18533927713034987,
      0.4246233809137145
    ],
    [
      -0.8886840340861809,
      0.1114097633929771,
      0.4447792173438777
    ],
    [
      -0.9419127672080614,
      -0.019859385779293904,
      0.3352699565528078
    ],
    [
      -0.9239570976818964,
      0.3209047061707377,
      0.20814286247844124
    ],
    [
      -0.9320438109560809,
      0.3005010080123158,
      0.20246846332712531
    ],
    [
      -0.9411776914352332,
      0.30100888023057,
      0.15355196894531636
    ],
    [
      -0.9452333482944404,
      0.29212553922324636,
      0.14559047566928496
    ],
    [
      -0.9491114774586257,
      0.29242643047448036,
      0.1169366756678957
    ],
    [
      -0.9546843076528141,
      0.27816716713885875,
      0.10583430373659243
    ],
    [
      -0.957091279603002,
      0.2776203145715989,
      0.08308575958041578
    ],
    [
      -0.9646742158431557,
      0.2584160559854153,
      0.05123279512514734
    ],
    [
      -0.9631931837089192,
      0.25965367404034295,
      0.0695619178432267
    ],
    [
      -0.9705654531672159,
      0.23812118116759168,
      0.03606943578250279
    ],
    [
      -0.9713404305853165,
      0.23670670793262055,
      0.021626426658905636
    ],
    [
      -0.9779584718713351,
      0.2087928086928256,
      0.001670429059908826
    ],
    [
      -0.9781645748973754,
      0.2078157895480929,
      -0.0025810909204838414
    ],
    [
      -0.9835107042555777,
      0.17935138872901038,
      -0.023233036299050054
    ],
    [
      -0.9836701005428649,
      0.1784796995304332,
      -0.023197632498089846
    ],
    [
      -0.9878242026338494,
      0.14915561683928008,
      -0.0442260856971695
    ],
    [
      -0.9921284671975137,
      0.1179135019026444,
      -0.04216053421586101
    ],
    [
      -0.9916491784075079,
      0.08524210931720091,
      -0.09677649385501097
    ],
    [
      -0.9419629067305321,
      0.25678635447947923,
      0.2162559837250892
    ],
    [
      -0.980520984119613,
      -0.015145038602300204,
      0.19582958792491048
    ],
    [
      -0.946662245596969,
      0.24521865125090336,
      0.20904163661814304
    ],
    [
      -0.9540428748657246,
      0.25689126176369304,
      0.15430188769876202
    ],
    [
      -0.9630798131819164,
      0.23800030664867083,
      0.12582975592690168
    ],
    [
      -0.9738930424720378,
      0.19836735227917282,
      0.11037542921460473
    ],
    [
      -0.9839608846976877,
      0.14177547681545394,
      0.10826214277712469
    ],
    [
      -0.9845534400434357,
      0.13703937905762556,
      0.10897124522614667
    ],
    [
      -0.9886549505139572,
      0.07609308024211073,
      0.12950379130941472
    ],
    [
      -0.9887451072152781,
      0.06339098494087332,
      0.13551640485961214
    ]
  ],
  "f": [
    [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10
    ],
    [
      1,
      10,
      11,
      12,
      13,
      14
    ],
    [
      13,
      12,
      15,
      16,
      17,
      18
    ],
    [
      19,
      20,
      17,
      16,
      21,
      22
    ],
    [
      23,
      24,
      25,
      19,
      22,
      26
    ],
    [
      23,
      27,
      28,
      29,
      30,
      24
    ],
    [
      28,
      31,
      32,
      33,
      34,
      35,
      29
    ],
    [
      36,
      37,
      38,
      33,
      32
    ],
    [
      36,
      39,
      40,
      41,
      42,
      43,
      37
    ],
    [
      42,
      41,
      44,
      45,
      46
    ],
    [
      47,
      48,
      49,
      45,
      44
    ],
    [
      47,
      50,
      51,
      52,
      53,
      54,
      48
    ],
    [
      55,
      31,
      28,
      27,
      56
    ],
    [
      55,
      57,
      39,
      36,
      32,
      31
    ],
    [
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      40,
      39
    ],
    [
      1,
      14,
      64,
      65,
      66,
      2
    ],
    [
      13,
      18,
      67,
      68,
      69,
      64,
      14
    ],
    [
      17,
      20,
      70,
      71,
      67,
      18
    ],
    [
      19,
      25,
      72,
      73,
      70,
      20
    ],
    [
      24,
      30,
      74,
      75,
      72,
      25
    ],
    [
      29,
      35,
      76,
      77,
      78,
      74,
      30
    ],
    [
      35,
      34,
      79,
      80,
      76
    ],
    [
      34,
      33,
      38,
      81,
      79
    ],
    [
      37,
      43,
      82,
      83,
      81,
      38
    ],
    [
      42,
      46,
      84,
      85,
      82,
      43
    ],
    [
      46,
      45,
      49,
      86,
      84
    ],
    [
      49,
      48,
      54,
      87,
      88,
      86
    ],
    [
      54,
      53,
      89,
      90,
      87
    ],
    [
      53,
      52,
      91,
      92,
      93,
      94,
      89
    ],
    [
      93,
      95,
      96,
      97,
      94
    ],
    [
      95,
      98,
      99,
      100,
      101,
      96
    ],
    [
      99,
      102,
      103,
      104,
      105,
      100
    ],
    [
      103,
      106,
      107,
      108,
      104
    ],
    [
      107,
      109,
      110,
      111,
      112,
      113,
      114,
      108
    ],
    [
      23,
      26,
      115,
      116,
      56,
      27
    ],
    [
      55,
      56,
      116,
      117,
      58,
      57
    ],
    [
      10,
      9,
      118,
      119,
      120,
      11
    ],
    [
      12,
      11,
      120,
      121,
      122,
      15
    ],
    [
      21,
      16,
      15,
      122,
      123
    ],
    [
      26,
      22,
      21,
      123,
      124,
      125,
      115
    ],
    [
      116,
      115,
      125,
      126,
      127,
      128,
      117
    ],
    [
      58,
      117,
      128,
      129,
      59
    ],
    [
      129,
      130,
      131,
      132,
      133,
      134,
      60,
      59
    ],
    [
      135,
      136,
      137,
      133,
      132
    ],
    [
      138,
      137,
      136,
      139,
      140,
      141
    ],
    [
      138,
      141,
      142,
      143,
      144,
      145
    ],
    [
      145,
      144,
      146,
      147,
      148
    ],
    [
      147,
      146,
      149,
      150,
      151,
      152
    ],
    [
      133,
      137,
      138,
      145,
      148,
      134
    ],
    [
      60,
      134,
      148,
      147,
      152,
      61
    ],
    [
      152,
      151,
      153,
      62,
      61
    ],
    [
      7,
      154,
      155,
      156,
      157,
      8
    ],
    [
      6,
      158,
      159,
      154,
      7
    ],
    [
      5,
      160,
      161,
      158,
      6
    ],
    [
      4,
      162,
      163,
      164,
      160,
      5
    ],
    [
      165,
      166,
      167,
      162,
      4,
      3
    ],
    [
      2,
      66,
      168,
      169,
      165,
      3
    ],
    [
      168,
      66,
      65,
      170,
      171
    ],
    [
      64,
      69,
      172,
      173,
      170,
      65
    ],
    [
      69,
      68,
      174,
      172
    ],
    [
      67,
      71,
      175,
      176,
      174,
      68
    ],
    [
      70,
      73,
      177,
      178,
      175,
      71
    ],
    [
      72,
      75,
      179,
      180,
      177,
      73
    ],
    [
      74,
      78,
      181,
      182,
      179,
      75
    ],
    [
      181,
      78,
      77,
      183,
      184
    ],
    [
      76,
      80,
      185,
      183,
      77
    ],
    [
      80,
      79,
      81,
      83,
      186,
      187,
      185
    ],
    [
      82,
      85,
      188,
      189,
      186,
      83
    ],
    [
      84,
      86,
      88,
      190,
      191,
      188,
      85
    ],
    [
      87,
      90,
      192,
      190,
      88
    ],
    [
      94,
      97,
      193,
      194,
      192,
      90,
      89
    ],
    [
      96,
      101,
      195,
      196,
      193,
      97
    ],
    [
      100,
      105,
      197,
      198,
      195,
      101
    ],
    [
      104,
      108,
      114,
      199,
      197,
      105
    ],
    [
      200,
      201,
      202,
      203,
      204,
      205
    ],
    [
      206,
      207,
      208,
      200,
      205,
      209,
      210
    ],
    [
      9,
      8,
      157,
      211,
      212,
      213,
      214,
      118
    ],
    [
      119,
      118,
      214,
      215,
      216
    ],
    [
      121,
      120,
      119,
      216,
      217,
      218
    ],
    [
      123,
      122,
      121,
      218,
      219,
      124
    ],
    [
      135,
      220,
      221,
      222,
      139,
      136
    ],
    [
      139,
      222,
      223,
      224,
      140
    ],
    [
      141,
      140,
      224,
      225,
      226,
      142
    ],
    [
      142,
      226,
      227,
      228,
      143
    ],
    [
      144,
      143,
      228,
      229,
      230,
      149,
      146
    ],
    [
      156,
      231,
      232,
      233,
      211,
      157
    ],
    [
      156,
      155,
      234,
      235,
      231
    ],
    [
      155,
      154,
      159,
      236,
      237,
      234
    ],
    [
      161,
      238,
      236,
      159,
      158
    ],
    [
      164,
      239,
      240,
      241,
      238,
      161,
      160
    ],
    [
      164,
      163,
      242,
      239
    ],
    [
      162,
      167,
      243,
      242,
      163
    ],
    [
      166,
      244,
      245,
      243,
      167
    ],
    [
      165,
      169,
      246,
      247,
      244,
      166
    ],
    [
      168,
      171,
      248,
      246,
      169
    ],
    [
      173,
      249,
      250,
      248,
      171,
      170
    ],
    [
      173,
      172,
      174,
      176,
      251,
      249
    ],
    [
      176,
      175,
      178,
      252,
      251
    ],
    [
      178,
      177,
      180,
      253,
      254,
      252
    ],
    [
      179,
      182,
      255,
      256,
      253,
      180
    ],
    [
      257,
      258,
      255,
      182,
      181,
      184
    ],
    [
      257,
      184,
      183,
      185,
      187,
      259,
      260
    ],
    [
      186,
      189,
      261,
      259,
      187
    ],
    [
      188,
      191,
      262,
      261,
      189
    ],
    [
      263,
      262,
      191,
      190,
      192,
      194
    ],
    [
      263,
      194,
      193,
      196,
      264,
      265
    ],
    [
      198,
      266,
      267,
      264,
      196,
      195
    ],
    [
      197,
      199,
      268,
      269,
      270,
      271,
      266,
      198
    ],
    [
      47,
      44,
      41,
      40,
      63,
      272,
      273,
      274,
      50
    ],
    [
      51,
      50,
      274,
      275,
      276
    ],
    [
      52,
      51,
      276,
      277,
      278,
      91
    ],
    [
      278,
      279,
      280,
      92,
      91
    ],
    [
      93,
      92,
      280,
      281,
      282,
      98,
      95
    ],
    [
      99,
      98,
      282,
      283,
      284,
      102
    ],
    [
      103,
      102,
      284,
      285,
      106
    ],
    [
      107,
      106,
      285,
      286,
      287,
      288,
      109
    ],
    [
      109,
      288,
      289,
      290,
      110
    ],
    [
      290,
      291,
      292,
      111,
      110
    ],
    [
      206,
      112,
      111,
      292,
      293,
      207
    ],
    [
      207,
      293,
      294,
      295,
      208
    ],
    [
      204,
      203,
      296,
      297,
      298,
      299,
      300
    ],
    [
      204,
      300,
      301,
      302,
      209,
      205
    ],
    [
      209,
      302,
      303,
      210
    ],
    [
      206,
      210,
      303,
      304,
      113,
      112
    ],
    [
      211,
      233,
      305,
      306,
      307,
      308,
      212
    ],
    [
      212,
      308,
      309,
      213
    ],
    [
      214,
      213,
      309,
      310,
      311,
      215
    ],
    [
      125,
      124,
      219,
      312,
      313,
      126
    ],
    [
      126,
      313,
      314,
      127
    ],
    [
      129,
      128,
      127,
      314,
      315,
      316,
      317,
      318,
      130
    ],
    [
      135,
      132,
      131,
      319,
      320,
      220
    ],
    [
      220,
      320,
      321,
      322,
      323,
      221
    ],
    [
      222,
      221,
      323,
      324,
      325,
      223
    ],
    [
      224,
      223,
      325,
      326,
      327,
      225
    ],
    [
      226,
      225,
      327,
      328,
      329,
      227
    ],
    [
      228,
      227,
      329,
      330,
      331,
      229
    ],
    [
      229,
      331,
      332,
      333,
      334,
      230
    ],
    [
      335,
      336,
      337,
      338,
      339
    ],
    [
      335,
      250,
      249,
      251,
      252,
      254,
      336
    ],
    [
      337,
      336,
      254,
      253,
      256,
      340
    ],
    [
      341,
      342,
      343,
      344,
      345
    ],
    [
      341,
      346,
      347,
      348,
      342
    ],
    [
      240,
      349,
      350,
      347,
      346,
      241
    ],
    [
      243,
      245,
      351,
      352,
      349,
      240,
      239,
      242
    ],
    [
      244,
      247,
      353,
      354,
      355,
      351,
      245
    ],
    [
      335,
      339,
      356,
      357,
      353,
      247,
      246,
      248,
      250
    ],
    [
      358,
      359,
      360,
      361,
      362
    ],
    [
      358,
      362,
      306,
      305,
      363,
      364
    ],
    [
      305,
      233,
      232,
      365,
      366,
      367,
      363
    ],
    [
      235,
      368,
      365,
      232,
      231
    ],
    [
      369,
      368,
      235,
      234,
      237
    ],
    [
      369,
      237,
      236,
      238,
      241,
      346,
      341,
      345
    ],
    [
      370,
      270,
      269,
      371,
      372
    ],
    [
      373,
      271,
      270,
      370,
      374
    ],
    [
      267,
      266,
      271,
      373,
      375,
      376
    ],
    [
      265,
      264,
      267,
      376,
      377
    ],
    [
      263,
      265,
      377,
      378,
      379,
      380,
      260,
      259,
      261,
      262
    ],
    [
      273,
      381,
      382,
      383,
      275,
      274
    ],
    [
      383,
      384,
      385,
      277,
      276,
      275
    ],
    [
      278,
      277,
      385,
      386,
      387,
      279
    ],
    [
      280,
      279,
      387,
      388,
      389,
      281
    ],
    [
      283,
      282,
      281,
      389,
      390
    ],
    [
      283,
      390,
      391,
      392,
      286,
      285,
      284
    ],
    [
      286,
      392,
      393,
      394,
      287
    ],
    [
      287,
      394,
      395,
      396,
      397,
      289,
      288
    ],
    [
      290,
      289,
      397,
      398,
      399,
      291
    ],
    [
      292,
      291,
      399,
      400,
      401,
      294,
      293
    ],
    [
      299,
      298,
      402,
      403,
      404
    ],
    [
      299,
      404,
      405,
      301,
      300
    ],
    [
      304,
      303,
      302,
      301,
      405,
      406,
      407
    ],
    [
      114,
      113,
      304,
      407,
      408,
      409,
      268,
      199
    ],
    [
      306,
      362,
      361,
      410,
      411,
      307
    ],
    [
      308,
      307,
      411,
      412,
      310,
      309
    ],
    [
      310,
      412,
      413,
      414,
      415,
      416,
      311
    ],
    [
      317,
      316,
      417,
      418,
      419,
      420
    ],
    [
      130,
      318,
      421,
      422,
      319,
      131
    ],
    [
      421,
      423,
      424,
      425,
      426,
      422
    ],
    [
      427,
      428,
      429,
      430,
      431,
      432
    ],
    [
      433,
      434,
      427,
      432,
      435,
      436,
      437
    ],
    [
      320,
      319,
      422,
      426,
      438,
      439,
      321
    ],
    [
      321,
      439,
      440,
      441,
      322
    ],
    [
      323,
      322,
      441,
      442,
      324
    ],
    [
      326,
      325,
      324,
      442,
      443,
      444
    ],
    [
      326,
      444,
      445,
      328,
      327
    ],
    [
      329,
      328,
      445,
      446,
      447,
      330
    ],
    [
      331,
      330,
      447,
      448,
      449,
      332
    ],
    [
      256,
      255,
      258,
      450,
      340
    ],
    [
      257,
      260,
      380,
      451,
      452,
      453,
      450,
      258
    ],
    [
      380,
      379,
      454,
      455,
      451
    ],
    [
      456,
      457,
      454,
      379,
      378
    ],
    [
      456,
      378,
      377,
      376,
      375,
      458,
      459
    ],
    [
      373,
      374,
      460,
      458,
      375
    ],
    [
      370,
      372,
      461,
      462,
      460,
      374
    ],
    [
      463,
      464,
      465,
      461,
      372,
      371
    ],
    [
      463,
      466,
      467,
      468,
      464
    ],
    [
      469,
      470,
      471,
      467,
      466,
      472
    ],
    [
      473,
      474,
      475,
      470,
      469
    ],
    [
      476,
      477,
      478,
      479,
      480,
      475,
      474,
      481
    ],
    [
      352,
      482,
      483,
      350,
      349
    ],
    [
      352,
      351,
      355,
      484,
      485,
      482
    ],
    [
      355,
      354,
      486,
      487,
      484
    ],
    [
      488,
      489,
      486,
      354,
      353,
      357
    ],
    [
      488,
      357,
      356,
      490,
      491
    ],
    [
      339,
      338,
      492,
      490,
      356
    ],
    [
      337,
      340,
      450,
      453,
      493,
      494,
      492,
      338
    ],
    [
      495,
      496,
      497,
      498,
      499,
      500
    ],
    [
      495,
      501,
      502,
      503,
      504,
      496
    ],
    [
      505,
      506,
      507,
      508,
      504,
      503
    ],
    [
      509,
      510,
      511,
      507,
      506
    ],
    [
      509,
      512,
      513,
      514,
      515,
      510
    ],
    [
      516,
      517,
      512,
      509,
      506,
      505
    ],
    [
      516,
      505,
      503,
      502,
      518,
      519
    ],
    [
      502,
      501,
      520,
      521,
      522,
      518
    ],
    [
      520,
      523,
      524,
      525,
      526,
      521
    ],
    [
      524,
      527,
      528,
      529,
      530,
      525
    ],
    [
      528,
      531,
      532,
      529
    ],
    [
      533,
      534,
      532,
      531,
      535
    ],
    [
      533,
      536,
      537,
      538,
      539,
      534
    ],
    [
      347,
      350,
      483,
      540,
      541,
      542,
      543,
      348
    ],
    [
      544,
      545,
      546,
      547,
      548
    ],
    [
      549,
      547,
      546,
      550,
      551,
      552,
      553,
      554
    ],
    [
      555,
      548,
      547,
      549,
      556,
      557
    ],
    [
      557,
      556,
      558,
      559,
      560,
      561
    ],
    [
      562,
      563,
      564,
      565,
      566,
      567,
      568
    ],
    [
      569,
      563,
      562,
      570,
      343,
      342,
      348,
      543
    ],
    [
      571,
      344,
      343,
      570,
      572,
      573
    ],
    [
      366,
      571,
      573,
      574,
      367
    ],
    [
      369,
      345,
      344,
      571,
      366,
      365,
      368
    ],
    [
      383,
      382,
      575,
      576,
      577,
      578,
      384
    ],
    [
      385,
      384,
      578,
      579,
      580,
      386
    ],
    [
      387,
      386,
      580,
      581,
      582,
      388
    ],
    [
      388,
      582,
      583,
      391,
      390,
      389
    ],
    [
      392,
      391,
      583,
      584,
      585,
      393
    ],
    [
      394,
      393,
      585,
      586,
      587,
      395
    ],
    [
      587,
      588,
      589,
      396,
      395
    ],
    [
      397,
      396,
      589,
      590,
      591,
      592,
      398
    ],
    [
      399,
      398,
      592,
      593,
      400
    ],
    [
      463,
      371,
      269,
      268,
      409,
      472,
      466
    ],
    [
      409,
      408,
      473,
      469,
      472
    ],
    [
      408,
      407,
      406,
      481,
      474,
      473
    ],
    [
      404,
      403,
      476,
      481,
      406,
      405
    ],
    [
      416,
      415,
      594,
      595,
      596,
      597,
      598,
      599,
      600
    ],
    [
      216,
      215,
      311,
      416,
      600,
      601,
      217
    ],
    [
      602,
      603,
      574,
      573,
      572,
      604
    ],
    [
      363,
      367,
      574,
      603,
      605,
      606,
      364
    ],
    [
      358,
      364,
      606,
      607,
      359
    ],
    [
      359,
      607,
      608,
      609,
      360
    ],
    [
      610,
      410,
      361,
      360,
      609,
      611
    ],
    [
      412,
      411,
      410,
      610,
      612,
      413
    ],
    [
      414,
      413,
      612,
      613,
      614
    ],
    [
      415,
      414,
      614,
      615,
      616,
      594
    ],
    [
      595,
      594,
      616,
      617,
      618
    ],
    [
      595,
      618,
      619,
      620,
      596
    ],
    [
      596,
      620,
      621,
      622,
      623,
      597
    ],
    [
      623,
      622,
      624,
      625,
      626,
      627
    ],
    [
      628,
      629,
      630,
      626,
      625
    ],
    [
      631,
      632,
      633,
      634,
      635,
      630,
      629
    ],
    [
      636,
      637,
      638,
      633,
      632
    ],
    [
      638,
      637,
      639,
      640,
      641,
      642,
      643
    ],
    [
      641,
      640,
      644,
      645,
      646,
      647
    ],
    [
      646,
      645,
      648,
      649,
      650,
      651
    ],
    [
      652,
      653,
      654,
      655,
      656,
      657
    ],
    [
      658,
      659,
      660,
      661,
      662
    ],
    [
      663,
      662,
      661,
      664,
      665
    ],
    [
      666,
      667,
      663,
      665,
      668,
      669,
      670
    ],
    [
      312,
      219,
      218,
      217,
      601,
      670,
      669,
      671
    ],
    [
      312,
      671,
      672,
      673,
      674,
      675,
      315,
      314,
      313
    ],
    [
      676,
      675,
      674,
      677
    ],
    [
      676,
      677,
      678,
      679,
      680
    ],
    [
      681,
      680,
      679,
      682,
      683
    ],
    [
      684,
      683,
      682,
      685,
      686,
      687
    ],
    [
      688,
      687,
      686,
      689,
      690
    ],
    [
      688,
      690,
      691,
      692,
      693
    ],
    [
      691,
      694,
      695,
      696,
      692
    ],
    [
      696,
      695,
      697,
      698,
      699
    ],
    [
      700,
      699,
      698,
      701
    ],
    [
      702,
      700,
      701,
      703,
      704,
      705
    ],
    [
      706,
      705,
      704,
      707,
      708,
      709
    ],
    [
      708,
      710,
      711,
      712,
      713,
      709
    ],
    [
      714,
      715,
      716,
      717,
      718,
      719,
      711,
      710
    ],
    [
      714,
      720,
      721,
      722,
      723,
      715
    ],
    [
      721,
      720,
      724,
      725,
      726
    ],
    [
      727,
      728,
      725,
      724,
      729
    ],
    [
      727,
      729,
      730,
      731,
      732,
      733,
      734
    ],
    [
      735,
      736,
      737,
      732,
      731,
      738
    ],
    [
      735,
      738,
      739,
      740,
      741
    ],
    [
      317,
      420,
      423,
      421,
      318
    ],
    [
      423,
      420,
      419,
      742,
      743,
      424
    ],
    [
      425,
      424,
      743,
      744,
      429,
      428
    ],
    [
      432,
      431,
      745,
      746,
      747,
      748,
      435
    ],
    [
      749,
      750,
      748,
      747,
      751
    ],
    [
      752,
      753,
      754,
      755,
      756
    ],
    [
      752,
      757,
      758,
      759,
      760,
      761,
      762,
      753
    ],
    [
      763,
      764,
      759,
      758,
      765
    ],
    [
      763,
      766,
      767,
      768,
      769,
      770,
      771,
      764
    ],
    [
      772,
      773,
      774,
      769,
      768
    ],
    [
      775,
      776,
      777,
      778,
      774,
      773,
      779
    ],
    [
      776,
      780,
      781,
      782,
      777
    ],
    [
      783,
      784,
      785,
      786,
      781,
      780
    ],
    [
      784,
      787,
      788,
      789,
      790,
      785
    ],
    [
      791,
      792,
      793,
      788,
      787
    ],
    [
      794,
      795,
      796,
      793,
      792,
      797,
      798
    ],
    [
      794,
      799,
      800,
      801,
      802,
      795
    ],
    [
      799,
      803,
      804,
      805,
      806,
      807,
      800
    ],
    [
      426,
      425,
      428,
      427,
      434,
      438
    ],
    [
      433,
      440,
      439,
      438,
      434
    ],
    [
      433,
      437,
      808,
      809,
      443,
      442,
      441,
      440
    ],
    [
      445,
      444,
      443,
      809,
      810,
      446
    ],
    [
      810,
      811,
      448,
      447,
      446
    ],
    [
      449,
      448,
      811,
      812,
      813,
      814,
      815
    ],
    [
      492,
      494,
      816,
      817,
      818,
      491,
      490
    ],
    [
      493,
      819,
      820,
      816,
      494
    ],
    [
      453,
      452,
      821,
      819,
      493
    ],
    [
      451,
      455,
      822,
      823,
      821,
      452
    ],
    [
      824,
      822,
      455,
      454,
      457,
      825
    ],
    [
      456,
      459,
      826,
      827,
      825,
      457
    ],
    [
      458,
      460,
      462,
      828,
      829,
      826,
      459
    ],
    [
      462,
      461,
      465,
      830,
      831,
      828
    ],
    [
      464,
      468,
      832,
      830,
      465
    ],
    [
      832,
      833,
      834,
      835,
      831,
      830
    ],
    [
      832,
      468,
      467,
      471,
      836,
      833
    ],
    [
      471,
      470,
      475,
      480,
      837,
      838,
      836
    ],
    [
      839,
      840,
      841,
      842,
      843
    ],
    [
      844,
      843,
      842,
      513,
      512,
      517,
      845
    ],
    [
      516,
      519,
      846,
      847,
      845,
      517
    ],
    [
      519,
      518,
      522,
      848,
      846
    ],
    [
      521,
      526,
      849,
      850,
      848,
      522
    ],
    [
      525,
      530,
      851,
      849,
      526
    ],
    [
      529,
      532,
      534,
      539,
      852,
      851,
      530
    ],
    [
      482,
      485,
      853,
      854,
      855,
      540,
      483
    ],
    [
      484,
      487,
      856,
      853,
      485
    ],
    [
      486,
      489,
      857,
      856,
      487
    ],
    [
      495,
      500,
      858,
      523,
      520,
      501
    ],
    [
      524,
      523,
      858,
      859,
      860,
      527
    ],
    [
      528,
      527,
      860,
      861,
      862,
      863,
      864,
      865,
      535,
      531
    ],
    [
      533,
      535,
      865,
      866,
      536
    ],
    [
      569,
      537,
      536,
      866,
      564,
      563
    ],
    [
      867,
      868,
      869,
      870,
      871,
      872,
      873
    ],
    [
      867,
      874,
      875,
      876,
      868
    ],
    [
      876,
      875,
      877,
      878,
      879,
      880
    ],
    [
      879,
      878,
      881,
      882,
      883,
      884,
      885
    ],
    [
      885,
      884,
      886,
      887,
      888
    ],
    [
      889,
      890,
      891,
      892,
      887,
      886,
      893
    ],
    [
      894,
      891,
      890,
      895,
      896,
      897
    ],
    [
      898,
      897,
      896,
      899,
      900,
      901,
      902
    ],
    [
      903,
      901,
      900,
      904,
      905
    ],
    [
      906,
      903,
      905,
      907,
      908
    ],
    [
      908,
      907,
      909,
      910
    ],
    [
      504,
      508,
      911,
      912,
      910,
      909,
      497,
      496
    ],
    [
      511,
      913,
      911,
      508,
      507
    ],
    [
      914,
      913,
      511,
      510,
      515,
      915
    ],
    [
      915,
      515,
      514,
      916,
      917,
      918
    ],
    [
      917,
      916,
      919,
      920,
      921
    ],
    [
      922,
      920,
      919,
      923,
      924
    ],
    [
      925,
      926,
      927,
      922,
      924,
      928
    ],
    [
      925,
      929,
      930,
      931,
      926
    ],
    [
      930,
      929,
      932,
      933,
      934,
      935
    ],
    [
      935,
      934,
      936,
      937,
      938,
      939,
      940
    ],
    [
      562,
      568,
      941,
      604,
      572,
      570
    ],
    [
      942,
      943,
      944,
      945,
      946,
      947
    ],
    [
      942,
      947,
      948,
      949,
      950,
      951,
      952,
      953
    ],
    [
      952,
      954,
      955,
      956,
      953
    ],
    [
      954,
      957,
      958,
      959,
      960,
      955
    ],
    [
      961,
      962,
      963,
      959,
      958,
      964
    ],
    [
      965,
      966,
      967,
      968,
      969,
      962,
      961
    ],
    [
      966,
      970,
      971,
      972,
      973,
      967
    ],
    [
      974,
      972,
      971,
      975,
      976
    ],
    [
      974,
      976,
      977,
      978,
      979,
      980
    ],
    [
      979,
      978,
      981,
      982,
      983,
      984
    ],
    [
      985,
      986,
      987,
      988,
      983,
      982
    ],
    [
      986,
      989,
      990,
      991,
      992,
      993,
      987
    ],
    [
      994,
      991,
      990,
      995,
      996
    ],
    [
      997,
      998,
      996,
      995,
      999,
      1000
    ],
    [
      1001,
      1002,
      1003,
      1004,
      998,
      997,
      1005
    ],
    [
      1006,
      1007,
      1002,
      1001,
      1008
    ],
    [
      1006,
      1008,
      1009,
      1010,
      1011
    ],
    [
      1011,
      1010,
      1012,
      1013,
      1014,
      1015
    ],
    [
      552,
      1014,
      1013,
      1016,
      553
    ],
    [
      553,
      1016,
      1017,
      1018,
      554
    ],
    [
      1019,
      1020,
      558,
      556,
      549,
      554,
      1018
    ],
    [
      1021,
      1022,
      559,
      558,
      1020
    ],
    [
      1023,
      1024,
      560,
      559,
      1022,
      1025,
      1026,
      1027
    ],
    [
      1027,
      1026,
      1028,
      1029,
      1030,
      1031,
      1032,
      1033
    ],
    [
      1034,
      1035,
      1030,
      1029,
      1036
    ],
    [
      1037,
      1038,
      567,
      566,
      1039,
      1040
    ],
    [
      1041,
      1042,
      941,
      568,
      567,
      1038
    ],
    [
      602,
      604,
      941,
      1042,
      1043,
      1044
    ],
    [
      602,
      1044,
      1045,
      1046,
      605,
      603
    ],
    [
      606,
      605,
      1046,
      1047,
      1048,
      608,
      607
    ],
    [
      1030,
      1035,
      862,
      861,
      1049,
      1050,
      1031
    ],
    [
      1034,
      1051,
      863,
      862,
      1035
    ],
    [
      864,
      863,
      1051,
      1039,
      566,
      565
    ],
    [
      866,
      865,
      864,
      565,
      564
    ],
    [
      555,
      557,
      561,
      1052,
      1053,
      1054
    ],
    [
      1052,
      561,
      560,
      1024,
      1055,
      1056
    ],
    [
      1023,
      1057,
      1058,
      1059,
      1055,
      1024
    ],
    [
      1023,
      1027,
      1033,
      1060,
      1061,
      1057
    ],
    [
      1062,
      577,
      576,
      1063,
      1064,
      1065
    ],
    [
      578,
      577,
      1062,
      1066,
      1067,
      579
    ],
    [
      580,
      579,
      1067,
      1068,
      581
    ],
    [
      1068,
      1069,
      584,
      583,
      582,
      581
    ],
    [
      1070,
      1071,
      586,
      585,
      584,
      1069
    ],
    [
      587,
      586,
      1071,
      1072,
      588
    ],
    [
      1072,
      1073,
      1074,
      590,
      589,
      588
    ],
    [
      1074,
      1075,
      1076,
      1077,
      591,
      590
    ],
    [
      1076,
      1078,
      1079,
      1080,
      1081,
      1077
    ],
    [
      666,
      670,
      601,
      600,
      599
    ],
    [
      666,
      599,
      598,
      1082,
      667
    ],
    [
      1083,
      611,
      609,
      608,
      1048
    ],
    [
      1083,
      1084,
      1085,
      1086,
      613,
      612,
      610,
      611
    ],
    [
      614,
      613,
      1086,
      1087,
      1088,
      615
    ],
    [
      616,
      615,
      1088,
      1089,
      617
    ],
    [
      618,
      617,
      1089,
      1090,
      1091,
      619
    ],
    [
      620,
      619,
      1091,
      1092,
      1093,
      621
    ],
    [
      621,
      1093,
      1094,
      1095,
      624,
      622
    ],
    [
      628,
      625,
      624,
      1095,
      1096,
      1097
    ],
    [
      636,
      632,
      631,
      1098,
      1099
    ],
    [
      636,
      1099,
      1100,
      1101,
      639,
      637
    ],
    [
      640,
      639,
      1101,
      1102,
      1103,
      644
    ],
    [
      648,
      645,
      644,
      1103,
      1104,
      1105
    ],
    [
      648,
      1105,
      1106,
      653,
      652,
      649
    ],
    [
      652,
      657,
      650,
      649
    ],
    [
      1107,
      1108,
      1109,
      655,
      654,
      949,
      948
    ],
    [
      626,
      630,
      635,
      1110,
      627
    ],
    [
      623,
      627,
      1110,
      1111,
      1112,
      1082,
      598,
      597
    ],
    [
      638,
      643,
      1113,
      1114,
      1115,
      634,
      633
    ],
    [
      642,
      1116,
      1113,
      643
    ],
    [
      641,
      647,
      1117,
      1118,
      1116,
      642
    ],
    [
      646,
      651,
      1119,
      1120,
      1121,
      1117,
      647
    ],
    [
      656,
      1122,
      1119,
      651,
      650,
      657
    ],
    [
      656,
      655,
      1109,
      1123,
      1124,
      1122
    ],
    [
      1125,
      664,
      661,
      660,
      1126,
      1127
    ],
    [
      1125,
      1128,
      668,
      665,
      664
    ],
    [
      1128,
      672,
      671,
      669,
      668
    ],
    [
      677,
      674,
      673,
      1129,
      1130,
      678
    ],
    [
      679,
      678,
      1130,
      685,
      682
    ],
    [
      315,
      675,
      676,
      680,
      681,
      417,
      316
    ],
    [
      684,
      418,
      417,
      681,
      683
    ],
    [
      684,
      687,
      688,
      693,
      742,
      419,
      418
    ],
    [
      743,
      742,
      693,
      692,
      696,
      699,
      700,
      702,
      744
    ],
    [
      702,
      705,
      706,
      430,
      429,
      744
    ],
    [
      706,
      709,
      713,
      745,
      431,
      430
    ],
    [
      712,
      746,
      745,
      713
    ],
    [
      712,
      711,
      719,
      751,
      747,
      746
    ],
    [
      752,
      756,
      749,
      751,
      719,
      718,
      757
    ],
    [
      718,
      717,
      765,
      758,
      757
    ],
    [
      716,
      766,
      763,
      765,
      717
    ],
    [
      716,
      715,
      723,
      767,
      766
    ],
    [
      772,
      768,
      767,
      723,
      722
    ],
    [
      721,
      726,
      779,
      773,
      772,
      722
    ],
    [
      726,
      725,
      728,
      775,
      779
    ],
    [
      727,
      734,
      783,
      780,
      776,
      775,
      728
    ],
    [
      783,
      734,
      733,
      791,
      787,
      784
    ],
    [
      791,
      733,
      732,
      737,
      797,
      792
    ],
    [
      798,
      797,
      737,
      736,
      1131
    ],
    [
      735,
      741,
      1132,
      1131,
      736
    ],
    [
      741,
      740,
      1133,
      1134,
      804,
      803,
      1132
    ],
    [
      794,
      798,
      1131,
      1132,
      803,
      799
    ],
    [
      1125,
      1127,
      1135,
      1129,
      673,
      672,
      1128
    ],
    [
      1136,
      1137,
      1135,
      1127,
      1126,
      1138
    ],
    [
      1135,
      1137,
      1139,
      689,
      686,
      685,
      1130,
      1129
    ],
    [
      1136,
      1140,
      1141,
      1139,
      1137
    ],
    [
      691,
      690,
      689,
      1139,
      1141,
      1142,
      694
    ],
    [
      1142,
      1143,
      1144,
      697,
      695,
      694
    ],
    [
      1145,
      703,
      701,
      698,
      697,
      1144,
      1146,
      1147
    ],
    [
      708,
      707,
      1148,
      730,
      729,
      724,
      720,
      714,
      710
    ],
    [
      1107,
      1149,
      1150,
      1151,
      1152,
      1153,
      1108
    ],
    [
      1154,
      1155,
      1156,
      1152,
      1151,
      1157,
      1158
    ],
    [
      1148,
      1159,
      1155,
      1154,
      739,
      738,
      731,
      730
    ],
    [
      435,
      748,
      750,
      1160,
      1161,
      436
    ],
    [
      749,
      756,
      755,
      1160,
      750
    ],
    [
      755,
      754,
      1162,
      1163,
      1164,
      1161,
      1160
    ],
    [
      1165,
      1166,
      1167,
      1168,
      1169,
      1170,
      1171,
      1172
    ],
    [
      1173,
      1174,
      1175,
      1168,
      1167,
      1176
    ],
    [
      1175,
      1174,
      1177,
      1178,
      1179
    ],
    [
      1180,
      1181,
      1178,
      1177,
      762,
      761
    ],
    [
      1182,
      1180,
      761,
      760,
      1183,
      1184
    ],
    [
      764,
      771,
      1183,
      760,
      759
    ],
    [
      771,
      770,
      1185,
      1186,
      1184,
      1183
    ],
    [
      770,
      769,
      774,
      778,
      1187,
      1188,
      1189,
      1185
    ],
    [
      1187,
      1190,
      1191,
      1188
    ],
    [
      1190,
      1192,
      1193,
      1194,
      1191
    ],
    [
      1194,
      1193,
      1195,
      1196,
      1197,
      1198,
      1199
    ],
    [
      1200,
      1201,
      1202,
      1203,
      1198,
      1197
    ],
    [
      1204,
      1205,
      1202,
      1201,
      1206,
      1207
    ],
    [
      1204,
      1207,
      1208,
      1209,
      1210,
      1211
    ],
    [
      1212,
      1210,
      1209,
      1213,
      1214
    ],
    [
      1212,
      1214,
      1215,
      1216,
      1217,
      1218
    ],
    [
      1187,
      778,
      777,
      782,
      1219,
      1192,
      1190
    ],
    [
      1219,
      1220,
      1195,
      1193,
      1192
    ],
    [
      782,
      781,
      786,
      1221,
      1220,
      1219
    ],
    [
      790,
      1222,
      1223,
      1224,
      1221,
      786,
      785
    ],
    [
      790,
      789,
      1225,
      1222
    ],
    [
      788,
      793,
      796,
      1226,
      1227,
      1225,
      789
    ],
    [
      796,
      795,
      802,
      1228,
      1229,
      1226
    ],
    [
      802,
      801,
      1230,
      1228
    ],
    [
      800,
      807,
      1231,
      1232,
      1233,
      1230,
      801
    ],
    [
      1231,
      807,
      806,
      1234
    ],
    [
      810,
      809,
      808,
      1235,
      812,
      811
    ],
    [
      1236,
      813,
      812,
      1235,
      1237
    ],
    [
      1236,
      1238,
      1239,
      1240,
      1241,
      1242,
      814,
      813
    ],
    [
      1243,
      1244,
      1245,
      1240,
      1239,
      1246
    ],
    [
      1247,
      1244,
      1243,
      1172,
      1171,
      1248,
      1249
    ],
    [
      1171,
      1170,
      1250,
      1251,
      1252,
      1253,
      1254,
      1255,
      1248
    ],
    [
      1256,
      1257,
      1258,
      854,
      853,
      856,
      857
    ],
    [
      488,
      491,
      818,
      1259,
      1260,
      1256,
      857,
      489
    ],
    [
      1259,
      818,
      817,
      1261
    ],
    [
      820,
      1262,
      1263,
      1261,
      817,
      816
    ],
    [
      823,
      1264,
      1265,
      1262,
      820,
      819,
      821
    ],
    [
      824,
      1266,
      1267,
      1264,
      823,
      822
    ],
    [
      824,
      825,
      827,
      1268,
      1266
    ],
    [
      827,
      826,
      829,
      1269,
      1270,
      1268
    ],
    [
      831,
      835,
      1271,
      1272,
      1269,
      829,
      828
    ],
    [
      835,
      834,
      1273,
      1274,
      1271
    ],
    [
      834,
      833,
      836,
      838,
      1275,
      1273
    ],
    [
      837,
      1276,
      1277,
      1275,
      838
    ],
    [
      479,
      1278,
      1279,
      1276,
      837,
      480
    ],
    [
      1280,
      1281,
      1282,
      1283,
      1284
    ],
    [
      847,
      1285,
      1282,
      1281,
      844,
      845
    ],
    [
      847,
      846,
      848,
      850,
      1286,
      1285
    ],
    [
      851,
      852,
      1287,
      1288,
      1286,
      850,
      849
    ],
    [
      539,
      538,
      1289,
      1287,
      852
    ],
    [
      569,
      543,
      542,
      1290,
      1289,
      538,
      537
    ],
    [
      540,
      855,
      1291,
      1292,
      1293,
      541
    ],
    [
      855,
      854,
      1258,
      1294,
      1291
    ],
    [
      892,
      1295,
      1296,
      1297,
      888,
      887
    ],
    [
      894,
      1298,
      1299,
      1295,
      892,
      891
    ],
    [
      894,
      897,
      898,
      1300,
      1298
    ],
    [
      898,
      902,
      1301,
      1302,
      1300
    ],
    [
      906,
      1303,
      1301,
      902,
      901,
      903
    ],
    [
      906,
      908,
      910,
      912,
      1304,
      1305,
      1303
    ],
    [
      914,
      1306,
      1307,
      1304,
      912,
      911,
      913
    ],
    [
      914,
      915,
      918,
      1308,
      1306
    ],
    [
      1308,
      918,
      917,
      921,
      1309,
      1310
    ],
    [
      1309,
      921,
      920,
      922,
      927,
      1311,
      1312
    ],
    [
      555,
      1054,
      1313,
      1314,
      544,
      548
    ],
    [
      1313,
      1054,
      1053,
      1315,
      1316
    ],
    [
      1052,
      1056,
      1317,
      1318,
      1319,
      1315,
      1053
    ],
    [
      1320,
      1321,
      1318,
      1317,
      1322
    ],
    [
      1323,
      1324,
      1325,
      1321,
      1320
    ],
    [
      1324,
      1326,
      1327,
      1328,
      1329,
      1325
    ],
    [
      1326,
      1330,
      1331,
      1332,
      1333,
      1327
    ],
    [
      900,
      899,
      1334,
      1335,
      1332,
      1331,
      904
    ],
    [
      1336,
      1337,
      1338,
      1339,
      1340
    ],
    [
      1341,
      1342,
      1343,
      1344,
      1345,
      1346
    ],
    [
      1347,
      1348,
      1344,
      1343,
      1349,
      1350,
      1351,
      1352
    ],
    [
      1353,
      1354,
      1347,
      1352,
      1355,
      1356
    ],
    [
      1357,
      1358,
      1353,
      1356,
      1359,
      1360
    ],
    [
      1357,
      1360,
      1361,
      1362,
      1363,
      1364
    ],
    [
      1362,
      1361,
      1365,
      1366,
      1367
    ],
    [
      1367,
      1366,
      1368,
      1369,
      1370,
      1371
    ],
    [
      1372,
      1373,
      1370,
      1369,
      1374,
      1375
    ],
    [
      1372,
      1375,
      1376,
      1377,
      1378,
      1379
    ],
    [
      1378,
      1377,
      1380,
      1381,
      872,
      871
    ],
    [
      873,
      872,
      1381,
      1382,
      1383
    ],
    [
      1384,
      874,
      867,
      873,
      1383
    ],
    [
      1384,
      1385,
      1386,
      877,
      875,
      874
    ],
    [
      1386,
      1387,
      881,
      878,
      877
    ],
    [
      881,
      1387,
      1388,
      1389,
      882
    ],
    [
      882,
      1389,
      1390,
      1391,
      1392,
      883
    ],
    [
      893,
      886,
      884,
      883,
      1392,
      1393,
      1394
    ],
    [
      889,
      893,
      1394,
      1395,
      1396
    ],
    [
      889,
      1396,
      1397,
      1398,
      1399,
      1400,
      895,
      890
    ],
    [
      896,
      895,
      1400,
      1401,
      1334,
      899
    ],
    [
      1335,
      1334,
      1401,
      1402,
      1403
    ],
    [
      1404,
      1333,
      1332,
      1335,
      1403
    ],
    [
      514,
      513,
      842,
      841,
      923,
      919,
      916
    ],
    [
      840,
      1405,
      928,
      924,
      923,
      841
    ],
    [
      925,
      928,
      1405,
      1406,
      1407,
      1408,
      932,
      929
    ],
    [
      931,
      1409,
      1410,
      1311,
      927,
      926
    ],
    [
      931,
      930,
      935,
      940,
      1411,
      1409
    ],
    [
      952,
      951,
      1412,
      957,
      954
    ],
    [
      958,
      957,
      1412,
      1413,
      1414,
      964
    ],
    [
      965,
      961,
      964,
      1414,
      1415,
      1416
    ],
    [
      965,
      1416,
      1417,
      1418,
      970,
      966
    ],
    [
      970,
      1418,
      1419,
      1420,
      975,
      971
    ],
    [
      976,
      975,
      1420,
      1421,
      1422,
      977
    ],
    [
      1423,
      981,
      978,
      977,
      1422,
      1424
    ],
    [
      1423,
      1425,
      1426,
      985,
      982,
      981
    ],
    [
      985,
      1426,
      1427,
      1428,
      989,
      986
    ],
    [
      1429,
      999,
      995,
      990,
      989,
      1428,
      1430
    ],
    [
      1429,
      1431,
      1432,
      1000,
      999
    ],
    [
      997,
      1000,
      1432,
      1433,
      1434,
      1005
    ],
    [
      1435,
      1009,
      1008,
      1001,
      1005,
      1434,
      1436,
      1437
    ],
    [
      1435,
      1438,
      1012,
      1010,
      1009
    ],
    [
      1439,
      1017,
      1016,
      1013,
      1012,
      1438,
      1440
    ],
    [
      1019,
      1018,
      1017,
      1439,
      1441,
      1442
    ],
    [
      1021,
      1020,
      1019,
      1442,
      1443
    ],
    [
      1021,
      1443,
      1444,
      1445,
      1025,
      1022
    ],
    [
      1446,
      1028,
      1026,
      1025,
      1445,
      1447
    ],
    [
      1446,
      1448,
      1449,
      1036,
      1029,
      1028
    ],
    [
      1034,
      1036,
      1449,
      1450,
      1451,
      1452,
      1040,
      1039,
      1051
    ],
    [
      1453,
      1041,
      1038,
      1037,
      1454
    ],
    [
      1453,
      1455,
      1456,
      1457,
      1043,
      1042,
      1041
    ],
    [
      1043,
      1457,
      1458,
      1045,
      1044
    ],
    [
      1458,
      1459,
      1460,
      1047,
      1046,
      1045
    ],
    [
      1083,
      1048,
      1047,
      1460,
      1461,
      1084
    ],
    [
      1462,
      1463,
      1464,
      1465,
      1466,
      1467,
      1468
    ],
    [
      1462,
      1468,
      1004,
      1003,
      1469,
      1470
    ],
    [
      1002,
      1007,
      1471,
      1472,
      1473,
      1469,
      1003
    ],
    [
      1006,
      1011,
      1015,
      1474,
      1471,
      1007
    ],
    [
      552,
      551,
      1475,
      1476,
      1474,
      1015,
      1014
    ],
    [
      1477,
      1466,
      1465,
      1478,
      1479,
      1480,
      1481
    ],
    [
      1482,
      1483,
      1484,
      1481,
      1480,
      1485
    ],
    [
      1477,
      1481,
      1484,
      993,
      992
    ],
    [
      994,
      1467,
      1466,
      1477,
      992,
      991
    ],
    [
      994,
      996,
      998,
      1004,
      1468,
      1467
    ],
    [
      1486,
      1487,
      1488,
      1489,
      1490,
      1491,
      1492,
      1493
    ],
    [
      1493,
      1492,
      1494,
      1495,
      1496
    ],
    [
      1497,
      1498,
      1499,
      1500,
      1496,
      1495
    ],
    [
      1501,
      1499,
      1498,
      1502,
      1503
    ],
    [
      1501,
      1503,
      1504,
      1505,
      1506
    ],
    [
      1507,
      1506,
      1505,
      1508,
      1509,
      1510
    ],
    [
      1508,
      969,
      968,
      1511,
      1512,
      1509
    ],
    [
      968,
      967,
      973,
      1513,
      1514,
      1511
    ],
    [
      974,
      980,
      1515,
      1513,
      973,
      972
    ],
    [
      979,
      984,
      1516,
      1517,
      1515,
      980
    ],
    [
      983,
      988,
      1518,
      1519,
      1516,
      984
    ],
    [
      988,
      987,
      993,
      1484,
      1483,
      1518
    ],
    [
      1520,
      1521,
      1491,
      1490,
      1522
    ],
    [
      1523,
      1524,
      1494,
      1492,
      1491,
      1521,
      1525
    ],
    [
      1523,
      1526,
      1527,
      1528,
      1524
    ],
    [
      943,
      1529,
      1530,
      1528,
      1527,
      1531,
      1532,
      944
    ],
    [
      942,
      953,
      956,
      1533,
      1529,
      943
    ],
    [
      1533,
      956,
      955,
      960,
      1534
    ],
    [
      959,
      963,
      1504,
      1503,
      1502,
      1534,
      960
    ],
    [
      1508,
      1505,
      1504,
      963,
      962,
      969
    ],
    [
      1033,
      1032,
      1535,
      1536,
      1060
    ],
    [
      1032,
      1031,
      1050,
      1537,
      1538,
      1535
    ],
    [
      1050,
      1049,
      1539,
      1540,
      1537
    ],
    [
      860,
      859,
      1539,
      1049,
      861
    ],
    [
      1056,
      1055,
      1059,
      1322,
      1317
    ],
    [
      1058,
      1541,
      1323,
      1320,
      1322,
      1059
    ],
    [
      1323,
      1541,
      1542,
      1330,
      1326,
      1324
    ],
    [
      1543,
      499,
      498,
      1542,
      1541,
      1058,
      1057,
      1061,
      1544
    ],
    [
      909,
      907,
      905,
      904,
      1331,
      1330,
      1542,
      498,
      497
    ],
    [
      1062,
      1065,
      1545,
      1546,
      1547,
      1066
    ],
    [
      1548,
      1549,
      1550,
      1545,
      1065,
      1064
    ],
    [
      1551,
      1552,
      1553,
      1554,
      1555,
      1556
    ],
    [
      1557,
      1558,
      1559,
      1555,
      1554
    ],
    [
      1557,
      1560,
      1561,
      1562,
      1558
    ],
    [
      1560,
      1563,
      1564,
      1565,
      1566,
      1561
    ],
    [
      1567,
      1568,
      1565,
      1564,
      1569,
      1570
    ],
    [
      1571,
      1566,
      1565,
      1568,
      1572,
      1573
    ],
    [
      1574,
      1575,
      1576,
      1577,
      1571,
      1573
    ],
    [
      1574,
      1578,
      1579,
      1580,
      1581,
      1575
    ],
    [
      1582,
      1583,
      1584,
      1585,
      1579,
      1578
    ],
    [
      1586,
      1580,
      1579,
      1585,
      1587,
      1588
    ],
    [
      1589,
      1586,
      1588,
      1590,
      1591,
      1592
    ],
    [
      1593,
      1594,
      1589,
      1592,
      1595,
      1596
    ],
    [
      1593,
      1596,
      1597,
      1598,
      1599
    ],
    [
      1598,
      1597,
      1600,
      1601,
      1602,
      1603
    ],
    [
      1070,
      1069,
      1068,
      1067,
      1066,
      1547
    ],
    [
      1070,
      1547,
      1546,
      1604,
      1605,
      1606,
      1607,
      1073,
      1072,
      1071
    ],
    [
      1608,
      1609,
      1610,
      1611
    ],
    [
      1612,
      1613,
      1614,
      1615,
      1616,
      1617
    ],
    [
      1618,
      1612,
      1617,
      1619,
      1620,
      1621
    ],
    [
      1620,
      1622,
      1623,
      1624,
      1625,
      1621
    ],
    [
      1626,
      1627,
      1628,
      1629,
      1630,
      1631,
      1632
    ],
    [
      1633,
      1634,
      1635,
      1626,
      1632,
      1636,
      1637
    ],
    [
      1633,
      1638,
      1639,
      1640,
      1641,
      1634
    ],
    [
      1639,
      1642,
      1643,
      1644,
      1645,
      1640
    ],
    [
      1643,
      1646,
      1647,
      1648,
      1649,
      1644
    ],
    [
      1647,
      1650,
      1651,
      1652,
      1648
    ],
    [
      1651,
      1080,
      1079,
      1653,
      1654,
      1655,
      1652
    ],
    [
      1079,
      1078,
      1656,
      1657,
      1653
    ],
    [
      1076,
      1075,
      1658,
      1659,
      1656,
      1078
    ],
    [
      1074,
      1073,
      1607,
      1660,
      1658,
      1075
    ],
    [
      1458,
      1457,
      1456,
      1661,
      1662,
      1459
    ],
    [
      1459,
      1662,
      1663,
      1461,
      1460
    ],
    [
      1664,
      1665,
      1666,
      1085,
      1084,
      1461,
      1663
    ],
    [
      1086,
      1085,
      1666,
      1667,
      1087
    ],
    [
      1088,
      1087,
      1667,
      1668,
      1669,
      1090,
      1089
    ],
    [
      1090,
      1669,
      1670,
      1092,
      1091
    ],
    [
      1092,
      1670,
      1671,
      1672,
      1094,
      1093
    ],
    [
      1095,
      1094,
      1672,
      1673,
      1674,
      1096
    ],
    [
      1097,
      1096,
      1674,
      1675
    ],
    [
      628,
      1097,
      1675,
      1676,
      1677,
      1098,
      631,
      629
    ],
    [
      1678,
      1679,
      1100,
      1099,
      1098,
      1677
    ],
    [
      1679,
      1680,
      1102,
      1101,
      1100
    ],
    [
      1681,
      1682,
      1104,
      1103,
      1102,
      1680
    ],
    [
      1104,
      1682,
      1683,
      1106,
      1105
    ],
    [
      653,
      1106,
      1683,
      950,
      949,
      654
    ],
    [
      1111,
      1110,
      635,
      634,
      1115,
      1684,
      1685
    ],
    [
      1686,
      1112,
      1111,
      1685
    ],
    [
      1686,
      658,
      662,
      663,
      667,
      1082,
      1112
    ],
    [
      1686,
      1685,
      1684,
      1687,
      659,
      658
    ],
    [
      1688,
      1687,
      1684,
      1115,
      1114,
      1689,
      1690
    ],
    [
      1691,
      1692,
      1690,
      1689
    ],
    [
      1691,
      1689,
      1114,
      1113,
      1116,
      1118
    ],
    [
      1691,
      1118,
      1117,
      1121,
      1693,
      1694,
      1695,
      1696,
      1692
    ],
    [
      1697,
      1698,
      1693,
      1121,
      1120
    ],
    [
      1697,
      1120,
      1119,
      1122,
      1124,
      1699,
      1700
    ],
    [
      1693,
      1698,
      1701,
      1694
    ],
    [
      1702,
      1701,
      1698,
      1697,
      1700,
      1703
    ],
    [
      1157,
      1704,
      1705,
      1706,
      1158
    ],
    [
      1154,
      1158,
      1706,
      1133,
      740,
      739
    ],
    [
      1157,
      1151,
      1150,
      1707,
      1704
    ],
    [
      1708,
      1134,
      1133,
      1706,
      1705
    ],
    [
      1709,
      1710,
      1159,
      1148,
      707,
      704,
      703,
      1145
    ],
    [
      1159,
      1710,
      1711,
      1712,
      1156,
      1155
    ],
    [
      1713,
      1153,
      1152,
      1156,
      1712
    ],
    [
      273,
      272,
      1714,
      1715,
      381
    ],
    [
      63,
      62,
      153,
      1716,
      1714,
      272
    ],
    [
      1146,
      1717,
      1718,
      1147
    ],
    [
      1702,
      1703,
      1709,
      1145,
      1147,
      1718
    ],
    [
      1709,
      1703,
      1700,
      1699,
      1711,
      1710
    ],
    [
      1713,
      1712,
      1711,
      1699,
      1124,
      1123
    ],
    [
      1142,
      1141,
      1140,
      1719,
      1143
    ],
    [
      1696,
      1695,
      1717,
      1146,
      1144,
      1143,
      1719
    ],
    [
      1702,
      1718,
      1717,
      1695,
      1694,
      1701
    ],
    [
      437,
      436,
      1161,
      1164,
      1237,
      1235,
      808
    ],
    [
      1720,
      1250,
      1170,
      1169,
      1721
    ],
    [
      1175,
      1179,
      1722,
      1721,
      1169,
      1168
    ],
    [
      1178,
      1181,
      1723,
      1722,
      1179
    ],
    [
      1182,
      1724,
      1725,
      1726,
      1723,
      1181,
      1180
    ],
    [
      1186,
      1727,
      1728,
      1724,
      1182,
      1184
    ],
    [
      1186,
      1185,
      1189,
      1729,
      1727
    ],
    [
      1188,
      1191,
      1194,
      1199,
      1729,
      1189
    ],
    [
      1236,
      1237,
      1164,
      1163,
      1730,
      1238
    ],
    [
      1238,
      1730,
      1731,
      1732,
      1733,
      1246,
      1239
    ],
    [
      1243,
      1246,
      1733,
      1165,
      1172
    ],
    [
      1165,
      1733,
      1732,
      1166
    ],
    [
      1732,
      1731,
      1176,
      1167,
      1166
    ],
    [
      1730,
      1163,
      1162,
      1173,
      1176,
      1731
    ],
    [
      753,
      762,
      1177,
      1174,
      1173,
      1162,
      754
    ],
    [
      1196,
      1195,
      1220,
      1221,
      1224,
      1734,
      1735
    ],
    [
      1200,
      1197,
      1196,
      1735,
      1736
    ],
    [
      1200,
      1736,
      1737,
      1738,
      1206,
      1201
    ],
    [
      1206,
      1738,
      1739,
      1740,
      1208,
      1207
    ],
    [
      1208,
      1740,
      1741,
      1742,
      1213,
      1209
    ],
    [
      1214,
      1213,
      1742,
      1743,
      1744,
      1215
    ],
    [
      1741,
      1745,
      1746,
      1743,
      1742
    ],
    [
      1741,
      1740,
      1739,
      1747,
      1748,
      1749,
      1745
    ],
    [
      1737,
      1750,
      1751,
      1752,
      1753,
      1747,
      1739,
      1738
    ],
    [
      1729,
      1199,
      1198,
      1203,
      1754,
      1728,
      1727
    ],
    [
      1202,
      1205,
      1755,
      1754,
      1203
    ],
    [
      1204,
      1211,
      1756,
      1757,
      1755,
      1205
    ],
    [
      1758,
      1759,
      1756,
      1211,
      1210,
      1212,
      1218
    ],
    [
      1758,
      1218,
      1217,
      1760,
      1761
    ],
    [
      1737,
      1736,
      1735,
      1734,
      1762,
      1763,
      1750
    ],
    [
      1224,
      1223,
      1764,
      1762,
      1734
    ],
    [
      1225,
      1227,
      1765,
      1764,
      1223,
      1222
    ],
    [
      1766,
      1767,
      1765,
      1227,
      1226,
      1229
    ],
    [
      1766,
      1229,
      1228,
      1230,
      1233,
      1768
    ],
    [
      1769,
      1770,
      1771,
      1772,
      1232,
      1231,
      1234
    ],
    [
      1770,
      1773,
      1774,
      1771
    ],
    [
      1769,
      1775,
      1776,
      1777,
      1778,
      1773,
      1770
    ],
    [
      1779,
      1241,
      1240,
      1245,
      1780,
      1781
    ],
    [
      1247,
      1782,
      1780,
      1245,
      1244
    ],
    [
      1247,
      1249,
      1783,
      1782
    ],
    [
      1783,
      1249,
      1248,
      1255,
      1784,
      1785,
      1786
    ],
    [
      1257,
      1787,
      1788,
      1789,
      1294,
      1258
    ],
    [
      1256,
      1260,
      1790,
      1791,
      1792,
      1787,
      1257
    ],
    [
      1259,
      1261,
      1263,
      1793,
      1794,
      1790,
      1260
    ],
    [
      1262,
      1265,
      1795,
      1796,
      1793,
      1263
    ],
    [
      1264,
      1267,
      1797,
      1795,
      1265
    ],
    [
      1266,
      1268,
      1270,
      1798,
      1797,
      1267
    ],
    [
      1270,
      1269,
      1272,
      1799,
      1800,
      1798
    ],
    [
      1272,
      1271,
      1274,
      1801,
      1799
    ],
    [
      1274,
      1273,
      1275,
      1277,
      1802,
      1801
    ],
    [
      1803,
      1802,
      1277,
      1276,
      1279,
      1804,
      1805
    ],
    [
      1282,
      1285,
      1286,
      1288,
      1806,
      1807,
      1808,
      1283
    ],
    [
      1806,
      1288,
      1287,
      1289,
      1290,
      1809
    ],
    [
      1293,
      1810,
      1811,
      1809,
      1290,
      542,
      541
    ],
    [
      1293,
      1292,
      1812,
      1810
    ],
    [
      1292,
      1291,
      1294,
      1789,
      1813,
      1814,
      1815,
      1812
    ],
    [
      1789,
      1788,
      1816,
      1813
    ],
    [
      1787,
      1792,
      1817,
      1818,
      1816,
      1788
    ],
    [
      1792,
      1791,
      1819,
      1817
    ],
    [
      1790,
      1794,
      1820,
      1819,
      1791
    ],
    [
      1793,
      1796,
      1821,
      1820,
      1794
    ],
    [
      1797,
      1798,
      1800,
      1822,
      1821,
      1796,
      1795
    ],
    [
      1295,
      1299,
      1823,
      1824,
      1825,
      1296
    ],
    [
      1298,
      1300,
      1302,
      1826,
      1823,
      1299
    ],
    [
      1827,
      1826,
      1302,
      1301,
      1303,
      1305
    ],
    [
      1827,
      1305,
      1304,
      1307,
      1828,
      1829
    ],
    [
      1308,
      1310,
      1830,
      1828,
      1307,
      1306
    ],
    [
      1309,
      1312,
      1831,
      1832,
      1830,
      1310
    ],
    [
      1831,
      1312,
      1311,
      1410,
      1833
    ],
    [
      1834,
      1833,
      1410,
      1409,
      1411
    ],
    [
      1835,
      1836,
      1402,
      1401,
      1400,
      1399
    ],
    [
      1404,
      1403,
      1402,
      1836,
      1837,
      1838
    ],
    [
      1839,
      1328,
      1327,
      1333,
      1404,
      1838,
      1840
    ],
    [
      1839,
      1841,
      1842,
      1329,
      1328
    ],
    [
      1319,
      1318,
      1321,
      1325,
      1329,
      1842,
      1843
    ],
    [
      1384,
      1383,
      1382,
      1844,
      1845,
      1846,
      1385
    ],
    [
      1847,
      1848,
      1388,
      1387,
      1386,
      1385,
      1846
    ],
    [
      1389,
      1388,
      1848,
      1849,
      1850,
      1390
    ],
    [
      1391,
      1390,
      1850,
      1851,
      1852
    ],
    [
      1391,
      1852,
      1853,
      1854,
      1393,
      1392
    ],
    [
      1395,
      1394,
      1393,
      1854,
      1855,
      1856,
      1857
    ],
    [
      1397,
      1396,
      1395,
      1857,
      1858,
      1859
    ],
    [
      1397,
      1859,
      1860,
      1398
    ],
    [
      1835,
      1399,
      1398,
      1860,
      1861,
      1862
    ],
    [
      1835,
      1862,
      1863,
      1837,
      1836
    ],
    [
      1838,
      1837,
      1863,
      1864,
      1865,
      1840
    ],
    [
      1839,
      1840,
      1865,
      1866,
      1867,
      1841
    ],
    [
      1843,
      1842,
      1841,
      1867,
      1868,
      1869,
      1870
    ],
    [
      1341,
      1336,
      1340,
      1871,
      1872,
      1342
    ],
    [
      1343,
      1342,
      1872,
      1873,
      1874,
      1349
    ],
    [
      1875,
      1876,
      1351,
      1350,
      1877
    ],
    [
      1352,
      1351,
      1876,
      1878,
      1879,
      1355
    ],
    [
      1356,
      1355,
      1879,
      1880,
      1881,
      1359
    ],
    [
      1361,
      1360,
      1359,
      1881,
      1882,
      1883,
      1365
    ],
    [
      1366,
      1365,
      1883,
      1884,
      1885,
      1368
    ],
    [
      1369,
      1368,
      1885,
      1886,
      1887,
      1374
    ],
    [
      1374,
      1887,
      1888,
      1889,
      1376,
      1375
    ],
    [
      1377,
      1376,
      1889,
      1890,
      1891,
      1380
    ],
    [
      1362,
      1367,
      1371,
      1892,
      1893,
      1363
    ],
    [
      1371,
      1370,
      1373,
      1894,
      1895,
      1892
    ],
    [
      1372,
      1379,
      1896,
      1897,
      1894,
      1373
    ],
    [
      1378,
      871,
      870,
      1898,
      1899,
      1896,
      1379
    ],
    [
      1341,
      1346,
      1900,
      1901,
      1902,
      1337,
      1336
    ],
    [
      1344,
      1348,
      1903,
      1904,
      1345
    ],
    [
      1347,
      1354,
      1905,
      1906,
      1903,
      1348
    ],
    [
      1358,
      1907,
      1908,
      1905,
      1354,
      1353
    ],
    [
      1357,
      1364,
      1909,
      1907,
      1358
    ],
    [
      1910,
      1909,
      1364,
      1363,
      1893,
      1911
    ],
    [
      1892,
      1895,
      1912,
      1913,
      1914,
      1911,
      1893
    ],
    [
      1915,
      1912,
      1895,
      1894,
      1897
    ],
    [
      1915,
      1897,
      1896,
      1899,
      1916,
      1917,
      1918,
      1919
    ],
    [
      1920,
      1913,
      1912,
      1915,
      1919,
      1921
    ],
    [
      1920,
      1922,
      1923,
      1914,
      1913
    ],
    [
      1920,
      1921,
      1924,
      1925,
      1926,
      1927,
      1922
    ],
    [
      1928,
      1929,
      1930,
      1926,
      1925
    ],
    [
      1930,
      1931,
      1932,
      1933,
      1927,
      1926
    ],
    [
      1934,
      1935,
      1936,
      1937,
      1932,
      1931,
      1938
    ],
    [
      1939,
      1940,
      1936,
      1935,
      1941,
      1942
    ],
    [
      1939,
      1942,
      1943,
      1944,
      1945
    ],
    [
      1901,
      1946,
      1947,
      1948,
      1902
    ],
    [
      1427,
      1949,
      1950,
      1430,
      1428
    ],
    [
      1429,
      1430,
      1950,
      1951,
      1952,
      1431
    ],
    [
      1431,
      1952,
      1953,
      1954,
      1433,
      1432
    ],
    [
      1955,
      1956,
      1436,
      1434,
      1433,
      1954
    ],
    [
      1436,
      1956,
      1957,
      1437
    ],
    [
      1958,
      1440,
      1438,
      1435,
      1437,
      1957
    ],
    [
      1959,
      1444,
      1443,
      1442,
      1441
    ],
    [
      1448,
      1960,
      1961,
      1450,
      1449
    ],
    [
      1962,
      1451,
      1450,
      1961
    ],
    [
      1962,
      1963,
      1964,
      1452,
      1451
    ],
    [
      1037,
      1040,
      1452,
      1964,
      1965,
      1454
    ],
    [
      1453,
      1454,
      1965,
      1966,
      1455
    ],
    [
      1455,
      1966,
      1967,
      1968,
      1661,
      1456
    ],
    [
      1664,
      1663,
      1662,
      1661,
      1968,
      1969
    ],
    [
      1681,
      1970,
      1413,
      1412,
      951,
      950,
      1683,
      1682
    ],
    [
      1971,
      1415,
      1414,
      1413,
      1970,
      1972
    ],
    [
      1971,
      1973,
      1417,
      1416,
      1415
    ],
    [
      1417,
      1973,
      1974,
      1419,
      1418
    ],
    [
      1420,
      1419,
      1974,
      1975,
      1421
    ],
    [
      1421,
      1975,
      1976,
      1424,
      1422
    ],
    [
      1423,
      1424,
      1976,
      1977,
      1978,
      1425
    ],
    [
      1427,
      1426,
      1425,
      1978,
      1979,
      1949
    ],
    [
      1980,
      1951,
      1950,
      1949,
      1979
    ],
    [
      1980,
      1981,
      1982,
      1953,
      1952,
      1951
    ],
    [
      1955,
      1954,
      1953,
      1982,
      1983,
      1984
    ],
    [
      1958,
      1957,
      1956,
      1955,
      1984,
      1985,
      1986
    ],
    [
      1959,
      1441,
      1439,
      1440,
      1958,
      1986,
      1987
    ],
    [
      551,
      550,
      1988,
      1989,
      1990,
      1475
    ],
    [
      550,
      546,
      545,
      1991,
      1992,
      1988
    ],
    [
      544,
      1314,
      1993,
      1994,
      1991,
      545
    ],
    [
      1313,
      1316,
      1995,
      1993,
      1314
    ],
    [
      1319,
      1843,
      1870,
      1995,
      1316,
      1315
    ],
    [
      1486,
      1493,
      1496,
      1500,
      1996,
      1997,
      1998
    ],
    [
      1507,
      1996,
      1500,
      1499,
      1501,
      1506
    ],
    [
      1997,
      1996,
      1507,
      1510,
      1999,
      2000
    ],
    [
      1999,
      2001,
      2002,
      2003,
      2000
    ],
    [
      2004,
      2005,
      2006,
      2002,
      2001,
      2007
    ],
    [
      2004,
      2008,
      2009,
      2010,
      2011,
      2005
    ],
    [
      2009,
      2012,
      2013,
      2014,
      2015,
      2016,
      2010
    ],
    [
      2014,
      2017,
      2018,
      2019,
      2015
    ],
    [
      1482,
      1485,
      2020,
      2021,
      2018,
      2017
    ],
    [
      1485,
      1480,
      1479,
      2022,
      2023,
      2020
    ],
    [
      1479,
      1478,
      2024,
      2025,
      2022
    ],
    [
      1478,
      1465,
      1464,
      2026,
      2027,
      2024
    ],
    [
      2028,
      2029,
      2026,
      1464,
      1463
    ],
    [
      1462,
      1470,
      2030,
      2031,
      2028,
      1463
    ],
    [
      1469,
      1473,
      2032,
      2033,
      2030,
      1470
    ],
    [
      2034,
      2035,
      2032,
      1473,
      1472
    ],
    [
      1474,
      1476,
      2036,
      2037,
      2038,
      2034,
      1472,
      1471
    ],
    [
      2039,
      2036,
      1476,
      1475,
      1990
    ],
    [
      2039,
      1990,
      1989,
      2040,
      2041
    ],
    [
      1989,
      1988,
      1992,
      2042,
      2043,
      2040
    ],
    [
      1992,
      1991,
      1994,
      2044,
      2045,
      2042
    ],
    [
      2044,
      1994,
      1993,
      1995,
      1870,
      1869
    ],
    [
      1510,
      1509,
      1512,
      2007,
      2001,
      1999
    ],
    [
      1511,
      1514,
      2008,
      2004,
      2007,
      1512
    ],
    [
      1517,
      2012,
      2009,
      2008,
      1514,
      1513,
      1515
    ],
    [
      1516,
      1519,
      2013,
      2012,
      1517
    ],
    [
      1482,
      2017,
      2014,
      2013,
      1519,
      1518,
      1483
    ],
    [
      2046,
      2047,
      2048,
      2049,
      2050,
      2051
    ],
    [
      2052,
      2053,
      1532,
      1531,
      2048,
      2047,
      2054
    ],
    [
      1544,
      1061,
      1060,
      1536
    ],
    [
      1543,
      1544,
      1536,
      1535,
      1538,
      2055
    ],
    [
      1538,
      1537,
      1540,
      2055
    ],
    [
      1543,
      2055,
      1540,
      1539,
      859,
      858,
      500,
      499
    ],
    [
      1550,
      1551,
      1556,
      2056,
      2057,
      2058,
      1604,
      1546,
      1545
    ],
    [
      2059,
      2060,
      1548,
      1064,
      1063
    ],
    [
      2061,
      2062,
      2063,
      1549,
      1548,
      2060
    ],
    [
      2064,
      2065,
      2063,
      2062,
      2066
    ],
    [
      2064,
      2067,
      2068,
      2069,
      2070,
      2065
    ],
    [
      2068,
      2071,
      2072,
      2073,
      2069
    ],
    [
      2074,
      2072,
      2071,
      2075
    ],
    [
      2074,
      2075,
      334,
      333,
      2076,
      2077
    ],
    [
      449,
      815,
      2078,
      2076,
      333,
      332
    ],
    [
      2079,
      1552,
      1551,
      1550,
      1549,
      2063,
      2065,
      2070
    ],
    [
      2079,
      2070,
      2069,
      2073,
      2080,
      2081
    ],
    [
      2082,
      2080,
      2073,
      2072,
      2074,
      2077
    ],
    [
      2082,
      2077,
      2076,
      2078,
      2083
    ],
    [
      2079,
      2081,
      2084,
      2085,
      2086,
      1553,
      1552
    ],
    [
      2082,
      2083,
      2087,
      2088,
      2084,
      2081,
      2080
    ],
    [
      2085,
      2084,
      2088,
      2089,
      2090
    ],
    [
      2085,
      2090,
      2091,
      2092,
      2086
    ],
    [
      1557,
      1554,
      1553,
      2086,
      2092,
      1563,
      1560
    ],
    [
      2093,
      2094,
      1569,
      1564,
      1563,
      2092,
      2091
    ],
    [
      1785,
      1570,
      1569,
      2094,
      1786
    ],
    [
      1784,
      2095,
      2096,
      1567,
      1570,
      1785
    ],
    [
      2097,
      2098,
      2099,
      2100,
      1660,
      1607,
      1606
    ],
    [
      2097,
      1606,
      1605,
      2101
    ],
    [
      2102,
      2103,
      2101,
      1605,
      1604,
      2058
    ],
    [
      2102,
      2058,
      2057,
      2104,
      2105
    ],
    [
      2106,
      2104,
      2057,
      2056
    ],
    [
      2107,
      2108,
      2106,
      2056,
      1556,
      1555,
      1559
    ],
    [
      1574,
      1573,
      1572,
      2109,
      1582,
      1578
    ],
    [
      2110,
      1583,
      1582,
      2109,
      2111,
      2112
    ],
    [
      2110,
      2113,
      2114,
      1584,
      1583
    ],
    [
      1585,
      1584,
      2114,
      2115,
      2116,
      2117,
      1587
    ],
    [
      1588,
      1587,
      2117,
      2118,
      2119,
      1590
    ],
    [
      2120,
      2121,
      1591,
      1590,
      2119,
      2122
    ],
    [
      2120,
      2123,
      2124,
      2125,
      2121
    ],
    [
      2124,
      2126,
      2127,
      2128,
      2129,
      2125
    ],
    [
      2130,
      2128,
      2127,
      2131,
      2132,
      2133
    ],
    [
      2132,
      2134,
      2135,
      2136,
      2137,
      2133
    ],
    [
      2135,
      2138,
      2139,
      2140,
      2141,
      2136
    ],
    [
      2139,
      2142,
      2143,
      2144,
      2145,
      2140
    ],
    [
      2143,
      2146,
      2147,
      2148,
      2149,
      2144
    ],
    [
      2150,
      2148,
      2147,
      2151
    ],
    [
      2152,
      2150,
      2151,
      2153,
      2154,
      2155
    ],
    [
      2156,
      2155,
      2154,
      2157,
      2158,
      2159
    ],
    [
      2160,
      2161,
      2159,
      2158,
      2162
    ],
    [
      2160,
      2163,
      2164,
      2165,
      2166,
      2161
    ],
    [
      2167,
      2168,
      2165,
      2164,
      2169,
      2170
    ],
    [
      2171,
      2167,
      2170,
      2172,
      2173,
      2174,
      2175
    ],
    [
      2174,
      2173,
      2176,
      2177,
      2178
    ],
    [
      2179,
      2175,
      2174,
      2178,
      2180,
      2181,
      2182
    ],
    [
      2182,
      2181,
      2183,
      2184,
      2185,
      2186
    ],
    [
      2187,
      2185,
      2184,
      2188,
      2189,
      2190
    ],
    [
      2191,
      2192,
      2193,
      2190,
      2189
    ],
    [
      2191,
      2194,
      2195,
      2196,
      2197,
      2198,
      2192
    ],
    [
      2199,
      2197,
      2196,
      2200,
      2201,
      2202
    ],
    [
      2203,
      2204,
      2202,
      2201,
      2205,
      2206
    ],
    [
      2207,
      2208,
      2204,
      2203,
      2209,
      2210,
      2211
    ],
    [
      2212,
      2213,
      2214,
      2210,
      2209,
      2215,
      2216,
      2217
    ],
    [
      1575,
      1581,
      2218,
      2219,
      1576
    ],
    [
      1589,
      1594,
      2220,
      2221,
      2218,
      1581,
      1580,
      1586
    ],
    [
      2222,
      1659,
      1658,
      1660,
      2100,
      2223,
      2224
    ],
    [
      2222,
      2225,
      1657,
      1656,
      1659
    ],
    [
      1653,
      1657,
      2225,
      2226,
      2227,
      1654
    ],
    [
      1655,
      1654,
      2227,
      2228,
      2229,
      2230,
      2231
    ],
    [
      2232,
      2233,
      2234,
      2230,
      2229,
      2235
    ],
    [
      2232,
      2236,
      2237,
      2233
    ],
    [
      2236,
      2238,
      2239,
      2240,
      2241,
      2237
    ],
    [
      2242,
      2243,
      2240,
      2239,
      2244,
      2245
    ],
    [
      2242,
      2245,
      2246,
      2247,
      2248,
      2249
    ],
    [
      2246,
      2245,
      2244,
      2250,
      2251,
      2252,
      2253
    ],
    [
      2254,
      2255,
      2256,
      2257,
      2251,
      2250
    ],
    [
      2255,
      2258,
      2259,
      2260,
      2261,
      2256
    ],
    [
      2259,
      2262,
      2263,
      2264,
      2265,
      2260
    ],
    [
      2266,
      2267,
      2268,
      2264,
      2263,
      2269
    ],
    [
      2270,
      2271,
      2267,
      2266,
      2272,
      2273
    ],
    [
      2270,
      2273,
      2274,
      2275,
      2276
    ],
    [
      2277,
      2278,
      2279,
      2275,
      2274,
      2280
    ],
    [
      1608,
      2281,
      2282,
      2283,
      2284,
      2285,
      1609
    ],
    [
      1615,
      2285,
      2284,
      2286,
      2287,
      1616
    ],
    [
      1616,
      2287,
      2288,
      2289,
      2290,
      1619,
      1617
    ],
    [
      1620,
      1619,
      2290,
      2291,
      2292,
      2293,
      1622
    ],
    [
      1623,
      1622,
      2293,
      2294,
      2295
    ],
    [
      1623,
      2295,
      2296,
      1631,
      1630,
      2297,
      1624
    ],
    [
      2298,
      1636,
      1632,
      1631,
      2296,
      2299
    ],
    [
      2300,
      2301,
      2302,
      1637,
      1636,
      2298
    ],
    [
      1633,
      1637,
      2302,
      2303,
      1638
    ],
    [
      1638,
      2303,
      2304,
      2305,
      1642,
      1639
    ],
    [
      1643,
      1642,
      2305,
      2306,
      1646
    ],
    [
      294,
      401,
      1650,
      1647,
      1646,
      2306,
      295
    ],
    [
      593,
      1081,
      1080,
      1651,
      1650,
      401,
      400
    ],
    [
      592,
      591,
      1077,
      1081,
      593
    ],
    [
      1655,
      2231,
      1649,
      1648,
      1652
    ],
    [
      2234,
      1645,
      1644,
      1649,
      2231,
      2230
    ],
    [
      1641,
      1640,
      1645,
      2234,
      2233,
      2237,
      2241
    ],
    [
      1641,
      2241,
      2240,
      2243,
      1635,
      1634
    ],
    [
      1626,
      1635,
      2243,
      2242,
      2249,
      1627
    ],
    [
      1608,
      1611,
      2307,
      2308,
      2309,
      2310,
      2281
    ],
    [
      1614,
      2311,
      2312,
      1610,
      1609,
      2285,
      1615
    ],
    [
      1618,
      2313,
      2314,
      2315,
      1613,
      1612
    ],
    [
      1618,
      1621,
      1625,
      2316,
      2313
    ],
    [
      1625,
      1624,
      2297,
      2317,
      2318,
      2316
    ],
    [
      2297,
      1630,
      1629,
      2319,
      2317
    ],
    [
      2320,
      2307,
      1611,
      1610,
      2312,
      2321,
      2322
    ],
    [
      1614,
      1613,
      2315,
      2323,
      2311
    ],
    [
      2324,
      2314,
      2313,
      2316,
      2318,
      2325
    ],
    [
      2317,
      2319,
      2326,
      2327,
      2325,
      2318
    ],
    [
      1629,
      1628,
      2328,
      2329,
      2326,
      2319
    ],
    [
      1627,
      2249,
      2248,
      2330,
      2328,
      1628
    ],
    [
      1967,
      2331,
      2332,
      1969,
      1968
    ],
    [
      2333,
      1665,
      1664,
      1969,
      2332,
      2334
    ],
    [
      2333,
      2335,
      1668,
      1667,
      1666,
      1665
    ],
    [
      2336,
      2337,
      1671,
      1670,
      1669,
      1668,
      2335
    ],
    [
      1671,
      2337,
      2338,
      1673,
      1672
    ],
    [
      2339,
      1676,
      1675,
      1674,
      1673,
      2338
    ],
    [
      1688,
      1138,
      1126,
      660,
      659,
      1687
    ],
    [
      1688,
      1690,
      1692,
      1696,
      1719,
      1140,
      1136,
      1138
    ],
    [
      1707,
      1150,
      1149,
      2340,
      2341,
      2342
    ],
    [
      2343,
      2344,
      1708,
      1705,
      1704,
      1707,
      2342
    ],
    [
      1708,
      2344,
      2345,
      805,
      804,
      1134
    ],
    [
      1769,
      1234,
      806,
      805,
      2345,
      2346,
      1775
    ],
    [
      1713,
      1123,
      1109,
      1108,
      1153
    ],
    [
      1715,
      2347,
      575,
      382,
      381
    ],
    [
      1715,
      1714,
      1716,
      2348,
      2349,
      2347
    ],
    [
      151,
      150,
      2350,
      2351,
      2352,
      2348,
      1716,
      153
    ],
    [
      1720,
      1721,
      1722,
      1723,
      1726,
      2353,
      2354,
      2355
    ],
    [
      2356,
      2357,
      2358,
      2359,
      2360,
      2361
    ],
    [
      1760,
      1217,
      1216,
      2362,
      2363,
      2357,
      2356
    ],
    [
      1215,
      1744,
      2364,
      2362,
      1216
    ],
    [
      1746,
      2365,
      2366,
      2364,
      1744,
      1743
    ],
    [
      1746,
      1745,
      1749,
      2367,
      2365
    ],
    [
      1748,
      2368,
      2369,
      2367,
      1749
    ],
    [
      1753,
      2370,
      2368,
      1748,
      1747
    ],
    [
      1753,
      1752,
      2371,
      2370
    ],
    [
      2371,
      1752,
      1751,
      2372,
      2373,
      2374
    ],
    [
      2372,
      2375,
      2376,
      2377,
      2373
    ],
    [
      2378,
      2379,
      2380,
      2377,
      2376,
      2381
    ],
    [
      2382,
      2383,
      2379,
      2378,
      2384
    ],
    [
      2385,
      2380,
      2379,
      2383,
      2386,
      2387
    ],
    [
      2388,
      2387,
      2386,
      2389,
      2390,
      2391
    ],
    [
      2392,
      2393,
      2391,
      2390,
      2394
    ],
    [
      2392,
      2395,
      2396,
      2397,
      2398,
      2399,
      2393
    ],
    [
      2400,
      2397,
      2396,
      2401,
      2402
    ],
    [
      2400,
      2402,
      2403,
      2404,
      2405,
      2406,
      2407,
      2408
    ],
    [
      1724,
      1728,
      1754,
      1755,
      1757,
      2409,
      1725
    ],
    [
      1757,
      1756,
      1759,
      2410,
      2409
    ],
    [
      1758,
      1761,
      2411,
      2412,
      2410,
      1759
    ],
    [
      1751,
      1750,
      1763,
      2413,
      2414,
      2375,
      2372
    ],
    [
      2414,
      2413,
      2415,
      2416,
      2417,
      2418
    ],
    [
      2414,
      2418,
      2419,
      2381,
      2376,
      2375
    ],
    [
      2378,
      2381,
      2419,
      2420,
      2384
    ],
    [
      2421,
      2422,
      2423,
      2382,
      2384,
      2420
    ],
    [
      2382,
      2423,
      2424,
      2425,
      2389,
      2386,
      2383
    ],
    [
      2424,
      2426,
      2427,
      2428,
      2429,
      2425
    ],
    [
      2426,
      2430,
      2431,
      2432,
      2427
    ],
    [
      2433,
      2434,
      2435,
      2436,
      2437,
      2431,
      2430
    ],
    [
      2438,
      2435,
      2434,
      2439,
      2440,
      2441
    ],
    [
      2442,
      2443,
      2444,
      2445,
      2441,
      2440
    ],
    [
      1763,
      1762,
      1764,
      1765,
      1767,
      2446,
      2415,
      2413
    ],
    [
      1766,
      1768,
      2446,
      1767
    ],
    [
      1768,
      1233,
      1232,
      1772,
      2416,
      2415,
      2446
    ],
    [
      2447,
      2448,
      1774,
      1773,
      1778,
      2449,
      2450
    ],
    [
      2450,
      2449,
      2451,
      2452
    ],
    [
      2447,
      2450,
      2452,
      2453,
      2454,
      2444,
      2443
    ],
    [
      1242,
      2087,
      2083,
      2078,
      815,
      814
    ],
    [
      1779,
      2089,
      2088,
      2087,
      1242,
      1241
    ],
    [
      1779,
      1781,
      2093,
      2091,
      2090,
      2089
    ],
    [
      1783,
      1786,
      2094,
      2093,
      1781,
      1780,
      1782
    ],
    [
      2455,
      2456,
      2457,
      2458,
      2459,
      2460
    ],
    [
      2461,
      2462,
      2456,
      2455,
      2463,
      2464,
      2465
    ],
    [
      2466,
      1822,
      1800,
      1799,
      1801,
      1802,
      1803,
      2467
    ],
    [
      1803,
      1805,
      2468,
      2469,
      2467
    ],
    [
      1807,
      1806,
      1809,
      1811,
      2470,
      2471,
      2472,
      2473
    ],
    [
      1810,
      1812,
      1815,
      2470,
      1811
    ],
    [
      2474,
      2471,
      2470,
      1815,
      1814
    ],
    [
      2461,
      2465,
      2475,
      2476,
      2477,
      2474,
      1814,
      1813,
      1816,
      1818
    ],
    [
      2466,
      2462,
      2461,
      1818,
      1817,
      1819,
      1820,
      1821,
      1822
    ],
    [
      1827,
      1829,
      2478,
      2479,
      1824,
      1823,
      1826
    ],
    [
      1828,
      1830,
      1832,
      2478,
      1829
    ],
    [
      1831,
      1833,
      1834,
      2480,
      2481,
      2479,
      2478,
      1832
    ],
    [
      1871,
      2482,
      2483,
      1873,
      1872
    ],
    [
      2484,
      1874,
      1873,
      2483,
      2485,
      2486
    ],
    [
      2484,
      2486,
      2487,
      2488,
      2489,
      2490
    ],
    [
      1875,
      1877,
      2490,
      2489,
      2491,
      2492
    ],
    [
      2491,
      2493,
      2494,
      2495,
      2492
    ],
    [
      1349,
      1874,
      2484,
      2490,
      1877,
      1350
    ],
    [
      1875,
      2492,
      2495,
      1878,
      1876
    ],
    [
      1879,
      1878,
      2495,
      2494,
      2496,
      2497,
      1880
    ],
    [
      2498,
      2499,
      1882,
      1881,
      1880,
      2497
    ],
    [
      2499,
      2500,
      2501,
      1884,
      1883,
      1882
    ],
    [
      1885,
      1884,
      2501,
      2502,
      2503,
      1886
    ],
    [
      1887,
      1886,
      2503,
      2504,
      2505,
      1888
    ],
    [
      1889,
      1888,
      2505,
      2506,
      2507,
      1890
    ],
    [
      1891,
      1890,
      2507,
      2508
    ],
    [
      1380,
      1891,
      2508,
      2509,
      1844,
      1382,
      1381
    ],
    [
      1847,
      1846,
      1845,
      2510,
      2511,
      2512
    ],
    [
      1847,
      2512,
      2513,
      2514,
      1849,
      1848
    ],
    [
      1850,
      1849,
      2514,
      2515,
      2516,
      1851
    ],
    [
      2517,
      2518,
      1853,
      1852,
      1851,
      2516
    ],
    [
      1854,
      1853,
      2518,
      2519,
      2520,
      1855
    ],
    [
      1855,
      2520,
      2521,
      2522,
      1856
    ],
    [
      1858,
      1857,
      1856,
      2522,
      2523,
      2524
    ],
    [
      1858,
      2524,
      2525,
      1861,
      1860,
      1859
    ],
    [
      1864,
      1863,
      1862,
      1861,
      2525,
      2526,
      2527
    ],
    [
      1864,
      2527,
      2528,
      2529,
      1866,
      1865
    ],
    [
      1867,
      1866,
      2529,
      2530,
      1868
    ],
    [
      2531,
      2532,
      1900,
      1346,
      1345,
      1904
    ],
    [
      2531,
      1904,
      1903,
      1906,
      2533,
      2534
    ],
    [
      2535,
      2536,
      2533,
      1906,
      1905,
      1908
    ],
    [
      1910,
      2537,
      2535,
      1908,
      1907,
      1909
    ],
    [
      1910,
      1911,
      1914,
      1923,
      2538,
      2537
    ],
    [
      1933,
      2538,
      1923,
      1922,
      1927
    ],
    [
      2539,
      2540,
      2541,
      1297,
      1296,
      1825
    ],
    [
      2539,
      2542,
      2543,
      2544,
      2540
    ],
    [
      2545,
      2546,
      2547,
      2543,
      2542
    ],
    [
      2548,
      2547,
      2546,
      2549,
      2550
    ],
    [
      2550,
      2549,
      2551,
      2552,
      1917,
      1916
    ],
    [
      1917,
      2552,
      2553,
      1918
    ],
    [
      2554,
      2555,
      1924,
      1921,
      1919,
      1918,
      2553
    ],
    [
      1928,
      1925,
      1924,
      2555,
      2556
    ],
    [
      2554,
      2557,
      2558,
      2556,
      2555
    ],
    [
      2559,
      2560,
      2561,
      2562,
      2558,
      2557,
      2563
    ],
    [
      2564,
      2565,
      2566,
      2560,
      2559
    ],
    [
      2564,
      2567,
      939,
      938,
      2568,
      2565
    ],
    [
      1930,
      1929,
      2569,
      2570,
      1938,
      1931
    ],
    [
      1928,
      2556,
      2558,
      2562,
      2571,
      2569,
      1929
    ],
    [
      2572,
      2570,
      2569,
      2571,
      2573,
      2574
    ],
    [
      1934,
      1938,
      2570,
      2572,
      2575,
      2576
    ],
    [
      1934,
      2576,
      2577,
      2578,
      1941,
      1935
    ],
    [
      1941,
      2578,
      2579,
      2580,
      2581,
      1943,
      1942
    ],
    [
      1944,
      1943,
      2581,
      2582,
      1947,
      1946
    ],
    [
      2535,
      2537,
      2538,
      1933,
      1932,
      1937,
      2536
    ],
    [
      2534,
      2533,
      2536,
      1937,
      1936,
      1940
    ],
    [
      2531,
      2534,
      1940,
      1939,
      1945,
      2532
    ],
    [
      1900,
      2532,
      1945,
      1944,
      1946,
      1901
    ],
    [
      1980,
      1979,
      1978,
      1977,
      2583,
      2584,
      1981
    ],
    [
      2584,
      2585,
      1983,
      1982,
      1981
    ],
    [
      2586,
      2587,
      1985,
      1984,
      1983,
      2585,
      2588,
      2589
    ],
    [
      1987,
      1986,
      1985,
      2587
    ],
    [
      1959,
      1987,
      2587,
      2586,
      1447,
      1445,
      1444
    ],
    [
      1446,
      1447,
      2586,
      2589,
      1960,
      1448
    ],
    [
      1962,
      1961,
      1960,
      2589,
      2588,
      2590,
      2591,
      1963
    ],
    [
      2592,
      2331,
      1967,
      1966,
      1965,
      1964,
      1963,
      2591
    ],
    [
      2592,
      2334,
      2332,
      2331
    ],
    [
      2592,
      2591,
      2590,
      2593,
      2336,
      2335,
      2333,
      2334
    ],
    [
      2336,
      2593,
      2594,
      2339,
      2338,
      2337
    ],
    [
      1971,
      1972,
      2583,
      1977,
      1976,
      1975,
      1974,
      1973
    ],
    [
      2584,
      2583,
      1972,
      1970,
      1681,
      1680,
      1679,
      1678,
      2594,
      2593,
      2590,
      2588,
      2585
    ],
    [
      1678,
      1677,
      1676,
      2339,
      2594
    ],
    [
      1997,
      2000,
      2003,
      2595,
      2596,
      1998
    ],
    [
      2003,
      2002,
      2006,
      2597,
      2598,
      2595
    ],
    [
      2006,
      2005,
      2011,
      2599,
      2600,
      2597
    ],
    [
      2011,
      2010,
      2016,
      2601,
      2602,
      2599
    ],
    [
      2016,
      2015,
      2019,
      2603,
      2604,
      2601
    ],
    [
      2605,
      2603,
      2019,
      2018,
      2021,
      2606
    ],
    [
      2607,
      2606,
      2021,
      2020,
      2023,
      2608
    ],
    [
      2023,
      2022,
      2025,
      2609,
      2610,
      2611,
      2608
    ],
    [
      2612,
      2613,
      2609,
      2025,
      2024,
      2027
    ],
    [
      2612,
      2027,
      2026,
      2029,
      2614,
      2615
    ],
    [
      2028,
      2031,
      2616,
      2617,
      2614,
      2029
    ],
    [
      2616,
      2031,
      2030,
      2033,
      2618,
      2619
    ],
    [
      2033,
      2032,
      2035,
      2620,
      2621,
      2622,
      2618
    ],
    [
      2034,
      2038,
      2623,
      2620,
      2035
    ],
    [
      2037,
      2624,
      2625,
      2623,
      2038
    ],
    [
      2039,
      2041,
      2626,
      2627,
      2624,
      2037,
      2036
    ],
    [
      2041,
      2040,
      2043,
      2628,
      2629,
      2626
    ],
    [
      2043,
      2042,
      2045,
      2630,
      2631,
      2628
    ],
    [
      2044,
      1869,
      1868,
      2530,
      2632,
      2630,
      2045
    ],
    [
      1497,
      1495,
      1494,
      1524,
      1528,
      1530
    ],
    [
      1497,
      1530,
      1529,
      1533,
      1534,
      1502,
      1498
    ],
    [
      2633,
      2634,
      945,
      944,
      1532,
      2053
    ],
    [
      2349,
      2059,
      1063,
      576,
      575,
      2347
    ],
    [
      2349,
      2348,
      2352,
      2061,
      2060,
      2059
    ],
    [
      2351,
      2066,
      2062,
      2061,
      2352
    ],
    [
      2351,
      2350,
      2067,
      2064,
      2066
    ],
    [
      2068,
      2067,
      2350,
      150,
      149,
      230,
      334,
      2075,
      2071
    ],
    [
      2635,
      2636,
      2637,
      2226,
      2225,
      2222,
      2224
    ],
    [
      2635,
      2224,
      2223,
      2638,
      2639
    ],
    [
      2100,
      2099,
      2640,
      2641,
      2638,
      2223
    ],
    [
      2098,
      2642,
      2643,
      2640,
      2099
    ],
    [
      2097,
      2101,
      2103,
      2644,
      2645,
      2642,
      2098
    ],
    [
      2102,
      2105,
      2646,
      2644,
      2103
    ],
    [
      2647,
      2646,
      2105,
      2104,
      2106,
      2108,
      2648
    ],
    [
      2107,
      2649,
      2648,
      2108
    ],
    [
      2107,
      1559,
      1558,
      1562,
      2650,
      2651,
      2649
    ],
    [
      1562,
      1561,
      1566,
      1571,
      1577,
      2652,
      2650
    ],
    [
      2653,
      2654,
      2652,
      1577,
      1576,
      2219
    ],
    [
      2653,
      2219,
      2218,
      2221,
      2655
    ],
    [
      2655,
      2221,
      2220,
      2656,
      2657
    ],
    [
      2658,
      2656,
      2220,
      1594,
      1593,
      1599
    ],
    [
      2658,
      1599,
      1598,
      1603,
      2659,
      2660
    ],
    [
      2277,
      2661,
      2659,
      1603,
      1602,
      2278
    ],
    [
      1567,
      2096,
      2662,
      2111,
      2109,
      1572,
      1568
    ],
    [
      2662,
      2096,
      2095,
      2663
    ],
    [
      1784,
      1255,
      1254,
      2664,
      2665,
      2666,
      2663,
      2095
    ],
    [
      1252,
      1251,
      2667,
      2668
    ],
    [
      1252,
      2668,
      2669,
      2670,
      1253
    ],
    [
      1254,
      1253,
      2670,
      2671,
      2672,
      2664
    ],
    [
      2673,
      2674,
      2665,
      2664,
      2672
    ],
    [
      2674,
      2675,
      2666,
      2665
    ],
    [
      2111,
      2662,
      2663,
      2666,
      2675,
      2676,
      2677,
      2112
    ],
    [
      2110,
      2112,
      2677,
      2678,
      2679,
      2113
    ],
    [
      2679,
      2680,
      2115,
      2114,
      2113
    ],
    [
      2680,
      2681,
      2116,
      2115
    ],
    [
      2117,
      2116,
      2681,
      2682,
      2683,
      2118
    ],
    [
      2118,
      2683,
      2684,
      2685,
      2122,
      2119
    ],
    [
      2686,
      2123,
      2120,
      2122,
      2685,
      2687
    ],
    [
      2686,
      2688,
      2126,
      2124,
      2123
    ],
    [
      2127,
      2126,
      2688,
      2689,
      2690,
      2131
    ],
    [
      2132,
      2131,
      2690,
      2691,
      2134
    ],
    [
      2135,
      2134,
      2691,
      2692,
      2138
    ],
    [
      2139,
      2138,
      2692,
      2693,
      2694,
      2695,
      2696,
      2142
    ],
    [
      2143,
      2142,
      2696,
      2697,
      2698,
      2146
    ],
    [
      2147,
      2146,
      2698,
      2699,
      2700,
      2153,
      2151
    ],
    [
      2157,
      2154,
      2153,
      2700,
      2701,
      2702,
      2703
    ],
    [
      2157,
      2703,
      2704,
      2162,
      2158
    ],
    [
      2160,
      2162,
      2704,
      2705,
      2706,
      2163
    ],
    [
      2164,
      2163,
      2706,
      2707,
      2708,
      2169
    ],
    [
      2170,
      2169,
      2708,
      2709,
      2710,
      2172
    ],
    [
      2173,
      2172,
      2710,
      2711,
      2712,
      2176
    ],
    [
      2176,
      2712,
      2713,
      2714,
      2715,
      2177
    ],
    [
      2180,
      2178,
      2177,
      2715,
      2716,
      2717
    ],
    [
      2181,
      2180,
      2717,
      2718,
      2719,
      2720,
      2183
    ],
    [
      2720,
      2719,
      2721,
      2722,
      2723,
      2724
    ],
    [
      2725,
      2726,
      2727,
      2728,
      2723,
      2722,
      2729
    ],
    [
      2730,
      2727,
      2726,
      2731,
      2732
    ],
    [
      2733,
      2734,
      2732,
      2731,
      2735,
      2736,
      2737
    ],
    [
      2738,
      2739,
      2733,
      2737,
      2740,
      2741
    ],
    [
      2738,
      2741,
      2742,
      2743
    ],
    [
      2743,
      2742,
      2744,
      2745,
      2746,
      2747
    ],
    [
      2741,
      2740,
      2748,
      2749,
      2750,
      2744,
      2742
    ],
    [
      2751,
      2752,
      2753,
      2750,
      2749,
      2754
    ],
    [
      2751,
      2755,
      2756,
      2757,
      2752
    ],
    [
      2756,
      2755,
      2758,
      2759,
      2760,
      2761
    ],
    [
      2762,
      2763,
      2760,
      2759,
      2764
    ],
    [
      2765,
      2762,
      2764,
      2766,
      2767
    ],
    [
      1600,
      2768,
      2769,
      2770,
      2771,
      1601
    ],
    [
      1596,
      1595,
      2772,
      2773,
      2768,
      1600,
      1597
    ],
    [
      1592,
      1591,
      2121,
      2125,
      2129,
      2772,
      1595
    ],
    [
      2773,
      2772,
      2129,
      2128,
      2130
    ],
    [
      2773,
      2130,
      2133,
      2137,
      2769,
      2768
    ],
    [
      2774,
      2770,
      2769,
      2137,
      2136,
      2141
    ],
    [
      2774,
      2141,
      2140,
      2145,
      2775
    ],
    [
      2149,
      2776,
      2775,
      2145,
      2144
    ],
    [
      2774,
      2775,
      2776,
      2777,
      2778,
      2779,
      2771,
      2770
    ],
    [
      2152,
      2780,
      2777,
      2776,
      2149,
      2148,
      2150
    ],
    [
      2152,
      2155,
      2156,
      2781,
      2782,
      2780
    ],
    [
      2156,
      2159,
      2161,
      2166,
      2783,
      2784,
      2781
    ],
    [
      2168,
      2785,
      2786,
      2787,
      2783,
      2166,
      2165
    ],
    [
      2788,
      2785,
      2168,
      2167,
      2171,
      2789
    ],
    [
      2171,
      2175,
      2179,
      2790,
      2791,
      2789
    ],
    [
      2790,
      2179,
      2182,
      2186,
      2792
    ],
    [
      2792,
      2186,
      2185,
      2187,
      2793
    ],
    [
      2790,
      2792,
      2793,
      2794,
      2795,
      2791
    ],
    [
      2187,
      2190,
      2193,
      2796,
      2797,
      2794,
      2793
    ],
    [
      2798,
      2799,
      2796,
      2193,
      2192,
      2198
    ],
    [
      2798,
      2198,
      2197,
      2199,
      2800,
      2801
    ],
    [
      2199,
      2202,
      2204,
      2208,
      2802,
      2800
    ],
    [
      2211,
      2210,
      2214,
      2803,
      2804
    ],
    [
      2720,
      2724,
      2188,
      2184,
      2183
    ],
    [
      2191,
      2189,
      2188,
      2724,
      2723,
      2728,
      2194
    ],
    [
      2194,
      2728,
      2727,
      2730,
      2195
    ],
    [
      2730,
      2732,
      2734,
      2805,
      2200,
      2196,
      2195
    ],
    [
      2205,
      2201,
      2200,
      2805,
      2806
    ],
    [
      2807,
      2206,
      2205,
      2806,
      2808
    ],
    [
      2807,
      2809,
      2810,
      2215,
      2209,
      2203,
      2206
    ],
    [
      2811,
      2228,
      2227,
      2226,
      2637
    ],
    [
      2811,
      2812,
      2813,
      2235,
      2229,
      2228
    ],
    [
      2232,
      2235,
      2813,
      2814,
      2815,
      2816,
      2817,
      2238,
      2236
    ],
    [
      2244,
      2239,
      2238,
      2817,
      2254,
      2250
    ],
    [
      2254,
      2817,
      2816,
      2258,
      2255
    ],
    [
      2259,
      2258,
      2816,
      2815,
      2818,
      2262
    ],
    [
      2819,
      2269,
      2263,
      2262,
      2818,
      2820
    ],
    [
      2821,
      2272,
      2266,
      2269,
      2819
    ],
    [
      2821,
      2822,
      2280,
      2274,
      2273,
      2272
    ],
    [
      2308,
      2823,
      2824,
      2309
    ],
    [
      2321,
      2312,
      2311,
      2323,
      2825,
      2826
    ],
    [
      2324,
      2827,
      2825,
      2323,
      2315,
      2314
    ],
    [
      2324,
      2325,
      2327,
      2828,
      2829,
      2827
    ],
    [
      2327,
      2326,
      2329,
      2830,
      2831,
      2828
    ],
    [
      2329,
      2328,
      2330,
      2832,
      2833,
      2830
    ],
    [
      2248,
      2247,
      2834,
      2835,
      2832,
      2330
    ],
    [
      2836,
      2837,
      2834,
      2247,
      2246,
      2253
    ],
    [
      2838,
      2836,
      2253,
      2252,
      2839
    ],
    [
      2840,
      2839,
      2252,
      2251,
      2257,
      2841
    ],
    [
      2841,
      2257,
      2256,
      2261,
      2842
    ],
    [
      2260,
      2265,
      2843,
      2844,
      2842,
      2261
    ],
    [
      2268,
      2845,
      2843,
      2265,
      2264
    ],
    [
      2268,
      2267,
      2271,
      2846,
      2847,
      2845
    ],
    [
      2270,
      2276,
      2848,
      2849,
      2846,
      2271
    ],
    [
      2279,
      2779,
      2778,
      2848,
      2276,
      2275
    ],
    [
      2279,
      2278,
      1602,
      1601,
      2771,
      2779
    ],
    [
      2296,
      2295,
      2294,
      2850,
      2851,
      2852,
      2299
    ],
    [
      2300,
      2298,
      2299,
      2852,
      2853,
      2854
    ],
    [
      2300,
      2854,
      2855,
      2856,
      2301
    ],
    [
      2303,
      2302,
      2301,
      2856,
      2857,
      2304
    ],
    [
      200,
      208,
      295,
      2306,
      2305,
      2304,
      2857,
      201
    ],
    [
      2858,
      2859,
      2860,
      402,
      298,
      297
    ],
    [
      2858,
      2861,
      2862,
      2863,
      2859
    ],
    [
      2861,
      2851,
      2850,
      2864,
      2865,
      2862
    ],
    [
      2292,
      2866,
      2864,
      2850,
      2294,
      2293
    ],
    [
      476,
      403,
      402,
      2860,
      2867,
      2868,
      477
    ],
    [
      2860,
      2859,
      2863,
      2869,
      2870,
      2867
    ],
    [
      2862,
      2865,
      2871,
      2869,
      2863
    ],
    [
      2866,
      2872,
      2873,
      2871,
      2865,
      2864
    ],
    [
      2292,
      2291,
      2874,
      2875,
      2872,
      2866
    ],
    [
      2876,
      1776,
      1775,
      2346,
      2877,
      2878
    ],
    [
      2879,
      2880,
      2881,
      2343,
      2342,
      2341
    ],
    [
      2343,
      2881,
      2882,
      2877,
      2346,
      2345,
      2344
    ],
    [
      2883,
      2884,
      2355,
      2354,
      2885
    ],
    [
      2353,
      2412,
      2411,
      2886,
      2885,
      2354
    ],
    [
      2360,
      2359,
      2887,
      2888,
      2889,
      2890
    ],
    [
      2891,
      2892,
      2887,
      2359,
      2358
    ],
    [
      2891,
      2358,
      2357,
      2363,
      2893
    ],
    [
      2893,
      2363,
      2362,
      2364,
      2366,
      2894,
      2895,
      2896
    ],
    [
      2366,
      2365,
      2367,
      2369,
      2897,
      2894
    ],
    [
      2371,
      2374,
      2898,
      2899,
      2900,
      2897,
      2369,
      2368,
      2370
    ],
    [
      2385,
      2901,
      2902,
      2898,
      2374,
      2373,
      2377,
      2380
    ],
    [
      2385,
      2387,
      2388,
      2903,
      2901
    ],
    [
      2388,
      2391,
      2393,
      2399,
      2903
    ],
    [
      2904,
      2394,
      2390,
      2389,
      2425,
      2429
    ],
    [
      2392,
      2394,
      2904,
      2905,
      2395
    ],
    [
      2906,
      2401,
      2396,
      2395,
      2905,
      2907
    ],
    [
      2906,
      2908,
      2403,
      2402,
      2401
    ],
    [
      2909,
      2910,
      2902,
      2901,
      2903,
      2399,
      2398
    ],
    [
      2400,
      2408,
      2911,
      2912,
      2909,
      2398,
      2397
    ],
    [
      2408,
      2407,
      2913,
      2914,
      2911
    ],
    [
      1772,
      1771,
      1774,
      2448,
      2915,
      2417,
      2416
    ],
    [
      2421,
      2420,
      2419,
      2418,
      2417,
      2915,
      2916,
      2917
    ],
    [
      2424,
      2423,
      2422,
      2433,
      2430,
      2426
    ],
    [
      2421,
      2917,
      2439,
      2434,
      2433,
      2422
    ],
    [
      2916,
      2442,
      2440,
      2439,
      2917
    ],
    [
      2447,
      2443,
      2442,
      2916,
      2915,
      2448
    ],
    [
      2904,
      2429,
      2428,
      2918,
      2919,
      2920,
      2907,
      2905
    ],
    [
      2921,
      2918,
      2428,
      2427,
      2432,
      2922,
      2923
    ],
    [
      2924,
      2922,
      2432,
      2431,
      2437
    ],
    [
      2924,
      2437,
      2436,
      2925,
      2926,
      2927
    ],
    [
      2438,
      2928,
      2929,
      2925,
      2436,
      2435
    ],
    [
      1778,
      1777,
      2930,
      2931,
      2932,
      2451,
      2449
    ],
    [
      2933,
      2934,
      2453,
      2452,
      2451,
      2932
    ],
    [
      2933,
      2932,
      2931,
      2935,
      2936,
      2937,
      2938
    ],
    [
      2939,
      2935,
      2931,
      2930,
      2940
    ],
    [
      1807,
      2473,
      2941,
      1808
    ],
    [
      2942,
      2941,
      2473,
      2472,
      2943
    ],
    [
      2474,
      2477,
      2944,
      2945,
      2943,
      2472,
      2471
    ],
    [
      2476,
      2946,
      2944,
      2477
    ],
    [
      2476,
      2475,
      2947,
      2948,
      2946
    ],
    [
      2464,
      2949,
      2950,
      2947,
      2475,
      2465
    ],
    [
      2951,
      2515,
      2514,
      2513
    ],
    [
      2951,
      2952,
      2953,
      2517,
      2516,
      2515
    ],
    [
      2517,
      2953,
      2954,
      2519,
      2518
    ],
    [
      2520,
      2519,
      2954,
      2955,
      2521
    ],
    [
      2956,
      2523,
      2522,
      2521,
      2955
    ],
    [
      2956,
      2957,
      2958,
      2526,
      2525,
      2524,
      2523
    ],
    [
      2527,
      2526,
      2958,
      2959,
      2528
    ],
    [
      2632,
      2530,
      2529,
      2528,
      2959,
      2960
    ],
    [
      2961,
      2952,
      2951,
      2513,
      2512,
      2511,
      2962
    ],
    [
      2510,
      2963,
      2962,
      2511
    ],
    [
      2510,
      1845,
      1844,
      2509,
      2964,
      2963
    ],
    [
      2491,
      2489,
      2488,
      2965,
      2966,
      2493
    ],
    [
      2496,
      2494,
      2493,
      2966,
      2967,
      2968
    ],
    [
      2498,
      2497,
      2496,
      2968,
      2969
    ],
    [
      2498,
      2969,
      2970,
      2971,
      2500,
      2499
    ],
    [
      2500,
      2971,
      2972,
      2973,
      2502,
      2501
    ],
    [
      2973,
      2974,
      2504,
      2503,
      2502
    ],
    [
      2974,
      2975,
      2506,
      2505,
      2504
    ],
    [
      2976,
      2977,
      2964,
      2509,
      2508,
      2507,
      2506,
      2975
    ],
    [
      2483,
      2482,
      2978,
      2979,
      2980,
      2485
    ],
    [
      2487,
      2486,
      2485,
      2980,
      2981,
      2982
    ],
    [
      2487,
      2982,
      2983,
      2984,
      2985,
      2965,
      2488
    ],
    [
      2986,
      2987,
      2988,
      2967,
      2966,
      2965,
      2985
    ],
    [
      2989,
      2990,
      2970,
      2969,
      2968,
      2967,
      2988,
      2991
    ],
    [
      2971,
      2970,
      2990,
      2992,
      2993,
      2994,
      2972
    ],
    [
      2973,
      2972,
      2994,
      2995,
      2976,
      2975,
      2974
    ],
    [
      1824,
      2479,
      2481,
      2545,
      2542,
      2539,
      1825
    ],
    [
      2481,
      2480,
      2996,
      2997,
      2551,
      2549,
      2546,
      2545
    ],
    [
      2554,
      2553,
      2552,
      2551,
      2997,
      2563,
      2557
    ],
    [
      2564,
      2559,
      2563,
      2997,
      2996,
      2567
    ],
    [
      1834,
      1411,
      940,
      939,
      2567,
      2996,
      2480
    ],
    [
      879,
      885,
      888,
      1297,
      2541,
      880
    ],
    [
      876,
      880,
      2541,
      2540,
      2544,
      869,
      868
    ],
    [
      2544,
      2543,
      2547,
      2548,
      1898,
      870,
      869
    ],
    [
      2548,
      2550,
      1916,
      1899,
      1898
    ],
    [
      2998,
      2573,
      2571,
      2562,
      2561
    ],
    [
      2998,
      2561,
      2560,
      2566,
      2999,
      3000
    ],
    [
      2565,
      2568,
      3001,
      3002,
      2999,
      2566
    ],
    [
      938,
      937,
      3003,
      3004,
      3001,
      2568
    ],
    [
      3005,
      2577,
      2576,
      2575,
      3006
    ],
    [
      2572,
      2574,
      3007,
      3008,
      3006,
      2575
    ],
    [
      3009,
      3007,
      2574,
      2573,
      2998,
      3000,
      3010
    ],
    [
      3011,
      3010,
      3000,
      2999,
      3002
    ],
    [
      3012,
      2579,
      2578,
      2577,
      3005
    ],
    [
      2580,
      3013,
      3014,
      2582,
      2581
    ],
    [
      3012,
      3015,
      3013,
      2580,
      2579
    ],
    [
      3012,
      3005,
      3006,
      3008,
      3016,
      3017,
      3018,
      3015
    ],
    [
      3019,
      3016,
      3008,
      3007,
      3009,
      3020,
      3021
    ],
    [
      3017,
      3016,
      3019,
      3022,
      3023
    ],
    [
      3019,
      3021,
      3024,
      3025,
      3026,
      3027,
      3022
    ],
    [
      3028,
      3026,
      3025,
      3029,
      3030,
      3031
    ],
    [
      3032,
      3033,
      3034,
      3035,
      3036,
      3037,
      3038
    ],
    [
      3037,
      3036,
      3039,
      3040,
      3041
    ],
    [
      3042,
      3041,
      3040,
      3043,
      3044,
      3045
    ],
    [
      3046,
      3047,
      3048,
      3045,
      3044,
      3049,
      3050
    ],
    [
      3051,
      3046,
      3050,
      3052,
      3053
    ],
    [
      3050,
      3049,
      3054,
      3055,
      3056,
      3052
    ],
    [
      3057,
      3058,
      3055,
      3054,
      3059,
      3060
    ],
    [
      3057,
      3060,
      3061,
      3062,
      3063,
      3064
    ],
    [
      2868,
      3063,
      3062,
      478,
      477
    ],
    [
      1486,
      1998,
      2596,
      3065,
      3066,
      1487
    ],
    [
      3067,
      3065,
      2596,
      2595,
      2598
    ],
    [
      3067,
      2598,
      2597,
      2600,
      3068,
      3069
    ],
    [
      2599,
      2602,
      3070,
      3068,
      2600
    ],
    [
      2601,
      2604,
      3071,
      3070,
      2602
    ],
    [
      2605,
      3072,
      3073,
      3071,
      2604,
      2603
    ],
    [
      2605,
      2606,
      2607,
      3074,
      3072
    ],
    [
      2607,
      2608,
      2611,
      3075,
      3076,
      3074
    ],
    [
      2610,
      3077,
      3078,
      3075,
      2611
    ],
    [
      2610,
      2609,
      2613,
      3079,
      3080,
      3077
    ],
    [
      2612,
      2615,
      3081,
      3082,
      3079,
      2613
    ],
    [
      2614,
      2617,
      3083,
      3084,
      3081,
      2615
    ],
    [
      2616,
      2619,
      3085,
      3086,
      3083,
      2617
    ],
    [
      3087,
      3088,
      3085,
      2619,
      2618,
      2622
    ],
    [
      3089,
      3087,
      2622,
      2621,
      3090
    ],
    [
      2620,
      2623,
      2625,
      3091,
      3090,
      2621
    ],
    [
      2624,
      2627,
      3092,
      3093,
      3091,
      2625
    ],
    [
      2626,
      2629,
      3094,
      3095,
      3096,
      3092,
      2627
    ],
    [
      2631,
      3097,
      3094,
      2629,
      2628
    ],
    [
      2632,
      2960,
      3098,
      3097,
      2631,
      2630
    ],
    [
      1107,
      948,
      947,
      946,
      3099,
      3100,
      2340,
      1149
    ],
    [
      3101,
      3102,
      3103,
      3104,
      3105
    ],
    [
      3102,
      3106,
      3107,
      3103
    ],
    [
      946,
      945,
      2634,
      3108,
      3107,
      3106,
      3099
    ],
    [
      3109,
      3108,
      2634,
      2633,
      3110
    ],
    [
      2052,
      3111,
      3112,
      3110,
      2633,
      2053
    ],
    [
      2052,
      2054,
      3113,
      3114,
      3115,
      3111
    ],
    [
      2046,
      3116,
      3117,
      3113,
      2054,
      2047
    ],
    [
      2046,
      2051,
      3118,
      3119,
      3120,
      3121,
      3116
    ],
    [
      3120,
      3119,
      3122,
      3123,
      3124
    ],
    [
      3125,
      3126,
      3122,
      3119,
      3118,
      3127,
      3128
    ],
    [
      2647,
      3129,
      3130,
      2645,
      2644,
      2646
    ],
    [
      2647,
      2648,
      2649,
      2651,
      3129
    ],
    [
      2654,
      3131,
      3130,
      3129,
      2651,
      2650,
      2652
    ],
    [
      2653,
      2655,
      2657,
      3132,
      3131,
      2654
    ],
    [
      2658,
      2660,
      3133,
      3132,
      2657,
      2656
    ],
    [
      3133,
      2660,
      2659,
      2661,
      3134
    ],
    [
      2277,
      2280,
      2822,
      3135,
      3136,
      3137,
      3134,
      2661
    ],
    [
      3138,
      3139,
      3140,
      3136,
      3135,
      3141,
      3142
    ],
    [
      2643,
      3137,
      3136,
      3140,
      2641,
      2640
    ],
    [
      3133,
      3134,
      3137,
      2643,
      2642,
      2645,
      3130,
      3131,
      3132
    ],
    [
      1720,
      2355,
      2884,
      2667,
      1251,
      1250
    ],
    [
      2883,
      3143,
      2669,
      2668,
      2667,
      2884
    ],
    [
      3144,
      2671,
      2670,
      2669,
      3143
    ],
    [
      3144,
      3145,
      3146,
      2673,
      2672,
      2671
    ],
    [
      2673,
      3146,
      3147,
      3148,
      2676,
      2675,
      2674
    ],
    [
      2678,
      2677,
      2676,
      3148,
      3149,
      3150,
      3151
    ],
    [
      3152,
      3153,
      3154,
      3155,
      3156,
      3150,
      3149
    ],
    [
      2679,
      2678,
      3151,
      2682,
      2681,
      2680
    ],
    [
      3150,
      3156,
      3157,
      3158,
      2684,
      2683,
      2682,
      3151
    ],
    [
      2690,
      2689,
      3159,
      3160,
      2693,
      2692,
      2691
    ],
    [
      2686,
      2687,
      3161,
      3162,
      3159,
      2689,
      2688
    ],
    [
      2687,
      2685,
      2684,
      3158,
      3163,
      3164,
      3165,
      3166,
      3161
    ],
    [
      3161,
      3166,
      3167,
      3168,
      3162
    ],
    [
      3162,
      3168,
      3169,
      3170,
      3160,
      3159
    ],
    [
      3171,
      3172,
      2694,
      2693,
      3160,
      3170
    ],
    [
      3173,
      2695,
      2694,
      3172,
      3174
    ],
    [
      2696,
      2695,
      3173,
      3175,
      3176,
      2697
    ],
    [
      3177,
      3178,
      2699,
      2698,
      2697,
      3176
    ],
    [
      2701,
      2700,
      2699,
      3178,
      3179,
      3180
    ],
    [
      2701,
      3180,
      3181,
      3182,
      2702
    ],
    [
      3179,
      3183,
      3184,
      3181,
      3180
    ],
    [
      3185,
      3186,
      3182,
      3181,
      3184,
      3187,
      3188
    ],
    [
      3185,
      3188,
      3189,
      3190,
      3191,
      3192,
      3193,
      3194
    ],
    [
      3191,
      3190,
      3195,
      3196,
      3197,
      3198
    ],
    [
      3199,
      3200,
      3197,
      3196,
      3201,
      3202
    ],
    [
      3203,
      3204,
      3205,
      3206,
      3207
    ],
    [
      3203,
      3207,
      3208,
      3209,
      3210,
      3211,
      3212
    ],
    [
      3213,
      3214,
      3211,
      3210,
      3215
    ],
    [
      3213,
      3215,
      3216,
      3217,
      3218,
      3219,
      3220
    ],
    [
      3221,
      3220,
      3219,
      3222,
      3223,
      3224,
      3225
    ],
    [
      3226,
      3227,
      3224,
      3223,
      3228
    ],
    [
      3226,
      3229,
      3230,
      3231,
      3232,
      3227
    ],
    [
      3233,
      3234,
      3235,
      3236,
      3237,
      3238,
      3239
    ],
    [
      3233,
      3239,
      3240,
      3241,
      3242
    ],
    [
      3242,
      3241,
      3243,
      3244,
      3245
    ],
    [
      2767,
      2766,
      3246,
      3247,
      3245,
      3244,
      3248
    ],
    [
      3182,
      3186,
      2705,
      2704,
      2703,
      2702
    ],
    [
      3185,
      3194,
      2707,
      2706,
      2705,
      3186
    ],
    [
      3193,
      2709,
      2708,
      2707,
      3194
    ],
    [
      3249,
      2711,
      2710,
      2709,
      3193,
      3192
    ],
    [
      3249,
      3250,
      2713,
      2712,
      2711
    ],
    [
      3251,
      2714,
      2713,
      3250,
      3252
    ],
    [
      2715,
      2714,
      3251,
      3253,
      3254,
      2716
    ],
    [
      2717,
      2716,
      3254,
      3255,
      3256,
      2718
    ],
    [
      2719,
      2718,
      3256,
      3257,
      3258,
      2721
    ],
    [
      2729,
      2722,
      2721,
      3258,
      3259,
      3260
    ],
    [
      3191,
      3198,
      3252,
      3250,
      3249,
      3192
    ],
    [
      3200,
      3261,
      3253,
      3251,
      3252,
      3198,
      3197
    ],
    [
      3255,
      3254,
      3253,
      3261,
      3262
    ],
    [
      3255,
      3262,
      3263,
      3264,
      3257,
      3256
    ],
    [
      3265,
      3259,
      3258,
      3257,
      3264
    ],
    [
      3265,
      3266,
      3267,
      3268,
      3260,
      3259
    ],
    [
      2725,
      2729,
      3260,
      3268,
      3269,
      3270
    ],
    [
      2725,
      3270,
      3271,
      3272,
      2735,
      2731,
      2726
    ],
    [
      3272,
      3273,
      3274,
      2736,
      2735
    ],
    [
      2737,
      2736,
      3274,
      3275,
      3276,
      3277,
      2748,
      2740
    ],
    [
      2733,
      2739,
      3278,
      2808,
      2806,
      2805,
      2734
    ],
    [
      2807,
      2808,
      3278,
      3279,
      3280,
      2809
    ],
    [
      2809,
      3280,
      3281,
      3282,
      2810
    ],
    [
      3281,
      3283,
      3284,
      3285,
      3282
    ],
    [
      3199,
      3286,
      3263,
      3262,
      3261,
      3200
    ],
    [
      3265,
      3264,
      3263,
      3286,
      3287,
      3266
    ],
    [
      3199,
      3202,
      3205,
      3204,
      3288,
      3287,
      3286
    ],
    [
      3288,
      3289,
      3290,
      3267,
      3266,
      3287
    ],
    [
      3269,
      3268,
      3267,
      3290,
      3291
    ],
    [
      3269,
      3291,
      3292,
      3293,
      3294,
      3271,
      3270
    ],
    [
      3272,
      3271,
      3294,
      3295,
      3273
    ],
    [
      3274,
      3273,
      3295,
      3296,
      3297,
      3275
    ],
    [
      3275,
      3297,
      3298,
      3299,
      3276
    ],
    [
      3276,
      3299,
      3300,
      3301,
      3277
    ],
    [
      3302,
      2754,
      2749,
      2748,
      3277,
      3301
    ],
    [
      2217,
      2216,
      3285,
      3284,
      3303,
      3304,
      3305
    ],
    [
      3284,
      3283,
      3306,
      3307,
      3308,
      3303
    ],
    [
      3309,
      3310,
      3307,
      3306,
      2746,
      2745
    ],
    [
      3309,
      2745,
      2744,
      2750,
      2753,
      3311,
      3312
    ],
    [
      3313,
      3311,
      2753,
      2752,
      2757,
      3314
    ],
    [
      3315,
      3316,
      3314,
      2757,
      2756,
      2761
    ],
    [
      3315,
      2761,
      2760,
      2763,
      3317,
      3318
    ],
    [
      2765,
      3319,
      3317,
      2763,
      2762
    ],
    [
      2765,
      2767,
      3248,
      3320,
      3321,
      3319
    ],
    [
      3322,
      2758,
      2755,
      2751,
      2754,
      3302
    ],
    [
      3322,
      3323,
      3246,
      2766,
      2764,
      2759,
      2758
    ],
    [
      2840,
      2841,
      2842,
      2844,
      3324,
      3325,
      3326
    ],
    [
      3327,
      3324,
      2844,
      2843,
      2845,
      2847
    ],
    [
      3327,
      2847,
      2846,
      2849,
      2782,
      2781,
      2784,
      3328
    ],
    [
      2777,
      2780,
      2782,
      2849,
      2848,
      2778
    ],
    [
      1338,
      3329,
      2310,
      2309,
      2824,
      3330,
      3331,
      1339
    ],
    [
      2320,
      3332,
      3333,
      2823,
      2308,
      2307
    ],
    [
      2321,
      2826,
      3334,
      3335,
      2322
    ],
    [
      2826,
      2825,
      2827,
      2829,
      3336,
      3337,
      3334
    ],
    [
      3338,
      3336,
      2829,
      2828,
      2831,
      3339
    ],
    [
      3340,
      3339,
      2831,
      2830,
      2833,
      3341
    ],
    [
      3342,
      3343,
      3341,
      2833,
      2832,
      2835
    ],
    [
      3342,
      2835,
      2834,
      2837,
      3344
    ],
    [
      2838,
      3345,
      3346,
      3344,
      2837,
      2836
    ],
    [
      2838,
      2839,
      2840,
      3326,
      3347,
      3345
    ],
    [
      3348,
      3349,
      3347,
      3326,
      3325
    ],
    [
      3348,
      3350,
      2787,
      2786,
      3351,
      3349
    ],
    [
      2788,
      3352,
      3351,
      2786,
      2785
    ],
    [
      2788,
      2789,
      2791,
      2795,
      3353,
      3352
    ],
    [
      3354,
      3355,
      3353,
      2795,
      2794,
      2797
    ],
    [
      3356,
      3354,
      2797,
      2796,
      2799,
      3357
    ],
    [
      2798,
      2801,
      3358,
      3359,
      3357,
      2799
    ],
    [
      2800,
      2802,
      3360,
      3358,
      2801
    ],
    [
      2207,
      3361,
      3362,
      3360,
      2802,
      2208
    ],
    [
      2207,
      2211,
      2804,
      3363,
      3361
    ],
    [
      2214,
      2213,
      3364,
      3365,
      3366,
      2803
    ],
    [
      2638,
      2641,
      3140,
      3139,
      2639
    ],
    [
      2635,
      2639,
      3139,
      3138,
      2636
    ],
    [
      2811,
      2637,
      2636,
      3138,
      3142,
      2812
    ],
    [
      2812,
      3142,
      3141,
      3367,
      2814,
      2813
    ],
    [
      2815,
      2814,
      3367,
      2820,
      2818
    ],
    [
      2821,
      2819,
      2820,
      3367,
      3141,
      3135,
      2822
    ],
    [
      2858,
      297,
      296,
      2853,
      2852,
      2851,
      2861
    ],
    [
      2855,
      2854,
      2853,
      296,
      203,
      202
    ],
    [
      2855,
      202,
      201,
      2857,
      2856
    ],
    [
      3064,
      3063,
      2868,
      2867,
      2870
    ],
    [
      3057,
      3064,
      2870,
      2869,
      2871,
      2873,
      3058
    ],
    [
      2872,
      2875,
      3368,
      3056,
      3055,
      3058,
      2873
    ],
    [
      2875,
      2874,
      3369,
      3370,
      3368
    ],
    [
      3369,
      2289,
      2288,
      3371,
      3372,
      3370
    ],
    [
      2287,
      2286,
      3373,
      3371,
      2288
    ],
    [
      3369,
      2874,
      2291,
      2290,
      2289
    ],
    [
      2353,
      1726,
      1725,
      2409,
      2410,
      2412
    ],
    [
      2879,
      3100,
      3099,
      3106,
      3102,
      3101,
      2880
    ],
    [
      3104,
      3374,
      3375,
      2878,
      2877,
      2882,
      3105
    ],
    [
      2876,
      2878,
      3375,
      3376
    ],
    [
      2876,
      3376,
      3377,
      3378,
      3379,
      2940,
      2930,
      1777,
      1776
    ],
    [
      3380,
      3381,
      3382,
      3383,
      3384
    ],
    [
      2888,
      2887,
      2892,
      3385,
      3386,
      3381,
      3380
    ],
    [
      2891,
      2893,
      2896,
      3387,
      3385,
      2892
    ],
    [
      2896,
      2895,
      3388,
      3387
    ],
    [
      3389,
      3390,
      3388,
      2895,
      2894,
      2897,
      2900
    ],
    [
      3391,
      3389,
      2900,
      2899
    ],
    [
      3391,
      2899,
      2898,
      2902,
      2910,
      3392
    ],
    [
      2909,
      2912,
      3393,
      3392,
      2910
    ],
    [
      3394,
      3395,
      3393,
      2912,
      2911,
      2914
    ],
    [
      3394,
      2914,
      2913,
      3396,
      3397,
      3398
    ],
    [
      3396,
      3399,
      3400,
      3401,
      3402,
      3397
    ],
    [
      2906,
      2907,
      2920,
      3403,
      3404,
      3405,
      3406,
      2908
    ],
    [
      2920,
      2919,
      3407,
      3403
    ],
    [
      2921,
      3408,
      3407,
      2919,
      2918
    ],
    [
      3409,
      3408,
      2921,
      2923,
      3410,
      3411
    ],
    [
      2924,
      2927,
      3412,
      3410,
      2923,
      2922
    ],
    [
      2929,
      2928,
      3413,
      3414,
      3415
    ],
    [
      2438,
      2441,
      2445,
      3416,
      3413,
      2928
    ],
    [
      2445,
      2444,
      2454,
      3417,
      3418,
      3419,
      3416
    ],
    [
      2934,
      3417,
      2454,
      2453
    ],
    [
      2933,
      2938,
      3420,
      3421,
      3418,
      3417,
      2934
    ],
    [
      3422,
      3423,
      3424,
      3419,
      3418,
      3421,
      3425
    ],
    [
      3425,
      3421,
      3420,
      3426
    ],
    [
      3427,
      3428,
      3426,
      3420,
      2938,
      2937,
      3429
    ],
    [
      3430,
      3431,
      3429,
      2937,
      2936,
      3432
    ],
    [
      2939,
      3433,
      3434,
      3432,
      2936,
      2935
    ],
    [
      2939,
      2940,
      3379,
      3435,
      3433
    ],
    [
      3114,
      3435,
      3379,
      3378,
      3115
    ],
    [
      3114,
      3113,
      3117,
      3434,
      3433,
      3435
    ],
    [
      3430,
      3432,
      3434,
      3117,
      3116,
      3121
    ],
    [
      3430,
      3121,
      3120,
      3124,
      3436,
      3431
    ],
    [
      3437,
      3436,
      3124,
      3123
    ],
    [
      3437,
      3123,
      3122,
      3126,
      3438,
      3439,
      3440,
      3441
    ],
    [
      1284,
      1283,
      1808,
      2941,
      2942,
      3442,
      3443
    ],
    [
      3444,
      3442,
      2942,
      2943,
      2945,
      3445
    ],
    [
      2944,
      2946,
      2948,
      3446,
      3445,
      2945
    ],
    [
      2948,
      2947,
      2950,
      3447,
      3448,
      3446
    ],
    [
      3449,
      3447,
      2950,
      2949,
      3450
    ],
    [
      2464,
      2463,
      3451,
      3452,
      3450,
      2949
    ],
    [
      3453,
      3454,
      1522,
      1490,
      1489,
      3455
    ],
    [
      3456,
      3457,
      3455,
      1489,
      1488
    ],
    [
      3456,
      1488,
      1487,
      3066,
      3458,
      3459
    ],
    [
      3460,
      3461,
      3462,
      3458,
      3066,
      3065,
      3067,
      3069
    ],
    [
      3460,
      3069,
      3068,
      3070,
      3071,
      3073,
      3463,
      3464
    ],
    [
      3074,
      3076,
      3465,
      3463,
      3073,
      3072
    ],
    [
      3466,
      3465,
      3076,
      3075,
      3078,
      3467
    ],
    [
      3078,
      3077,
      3080,
      3468,
      3467
    ],
    [
      3079,
      3082,
      3469,
      3468,
      3080
    ],
    [
      3470,
      3471,
      3472,
      3466,
      3467,
      3468,
      3469
    ],
    [
      3470,
      3469,
      3082,
      3081,
      3084,
      3473
    ],
    [
      3083,
      3086,
      3474,
      3473,
      3084
    ],
    [
      3085,
      3088,
      3475,
      3476,
      3474,
      3086
    ],
    [
      3089,
      3477,
      3475,
      3088,
      3087
    ],
    [
      3475,
      3477,
      3478,
      3479,
      3480,
      3476
    ],
    [
      2956,
      2955,
      2954,
      2953,
      2952,
      2961,
      3481,
      3482,
      3483,
      3484,
      2957
    ],
    [
      3485,
      3486,
      3487,
      3488,
      3489
    ],
    [
      3486,
      2984,
      2983,
      3490,
      3491,
      3487
    ],
    [
      2212,
      2217,
      3305,
      2978,
      2482,
      1871,
      1340,
      1339,
      3331
    ],
    [
      3492,
      2981,
      2980,
      2979,
      3493
    ],
    [
      3492,
      3490,
      2983,
      2982,
      2981
    ],
    [
      2986,
      2985,
      2984,
      3486,
      3485,
      3494,
      3495
    ],
    [
      2986,
      3495,
      3496,
      2987
    ],
    [
      2987,
      3496,
      3497,
      3498,
      2991,
      2988
    ],
    [
      2989,
      2991,
      3498,
      3499,
      3500
    ],
    [
      3501,
      2992,
      2990,
      2989,
      3500
    ],
    [
      3501,
      3502,
      3503,
      2993,
      2992
    ],
    [
      2994,
      2993,
      3503,
      3504,
      3505,
      2995
    ],
    [
      2976,
      2995,
      3505,
      3506,
      3507,
      2977
    ],
    [
      3508,
      3509,
      3481,
      2961,
      2962,
      2963,
      2964,
      2977,
      3507,
      3510
    ],
    [
      937,
      936,
      3511,
      3512,
      3003
    ],
    [
      3003,
      3512,
      3513,
      3514,
      3004
    ],
    [
      3011,
      3002,
      3001,
      3004,
      3514,
      3515,
      3516
    ],
    [
      3009,
      3010,
      3011,
      3516,
      3517,
      3020
    ],
    [
      1338,
      1337,
      1902,
      1948,
      3518,
      3519,
      3329
    ],
    [
      3520,
      3518,
      1948,
      1947,
      2582,
      3014,
      3521
    ],
    [
      3522,
      3523,
      3521,
      3014,
      3013,
      3015,
      3018
    ],
    [
      3017,
      3023,
      3524,
      3525,
      3522,
      3018
    ],
    [
      3526,
      3527,
      3524,
      3023,
      3022,
      3027,
      3528,
      3529
    ],
    [
      3028,
      3528,
      3027,
      3026
    ],
    [
      3028,
      3031,
      3032,
      3038,
      3529,
      3528
    ],
    [
      3042,
      3526,
      3529,
      3038,
      3037,
      3041
    ],
    [
      3042,
      3045,
      3048,
      3527,
      3526
    ],
    [
      3530,
      3513,
      3512,
      3511,
      3452,
      3451,
      3531
    ],
    [
      3530,
      3532,
      3515,
      3514,
      3513
    ],
    [
      3517,
      3516,
      3515,
      3532,
      3533,
      3534
    ],
    [
      3024,
      3021,
      3020,
      3517,
      3534,
      3535
    ],
    [
      3024,
      3535,
      3536,
      3537,
      3029,
      3025
    ],
    [
      3537,
      3538,
      3539,
      3030,
      3029
    ],
    [
      3032,
      3031,
      3030,
      3539,
      2458,
      2457,
      3540,
      3541,
      3033
    ],
    [
      3033,
      3541,
      3542,
      3034
    ],
    [
      3543,
      3035,
      3034,
      3542,
      3544
    ],
    [
      3036,
      3035,
      3543,
      3545,
      3546,
      3039
    ],
    [
      3043,
      3040,
      3039,
      3546,
      3547,
      3548
    ],
    [
      3549,
      3059,
      3054,
      3049,
      3044,
      3043,
      3548
    ],
    [
      3549,
      3550,
      3551,
      3061,
      3060,
      3059
    ],
    [
      479,
      478,
      3062,
      3061,
      3551,
      1278
    ],
    [
      3329,
      3519,
      3552,
      2282,
      2281,
      2310
    ],
    [
      3520,
      3521,
      3523,
      3553,
      3554,
      3555,
      3556
    ],
    [
      3554,
      3553,
      3557,
      3558
    ],
    [
      3559,
      3047,
      3046,
      3051,
      3560,
      3558,
      3557
    ],
    [
      3561,
      3560,
      3051,
      3053,
      3372,
      3371,
      3373
    ],
    [
      2283,
      3562,
      3561,
      3373,
      2286,
      2284
    ],
    [
      3089,
      3090,
      3091,
      3093,
      3478,
      3477
    ],
    [
      3096,
      3479,
      3478,
      3093,
      3092
    ],
    [
      3563,
      3480,
      3479,
      3096,
      3095
    ],
    [
      3563,
      3095,
      3094,
      3097,
      3098,
      3484,
      3483
    ],
    [
      2957,
      3484,
      3098,
      2960,
      2959,
      2958
    ],
    [
      3109,
      3374,
      3104,
      3103,
      3107,
      3108
    ],
    [
      3109,
      3110,
      3112,
      3377,
      3376,
      3375,
      3374
    ],
    [
      3111,
      3115,
      3378,
      3377,
      3112
    ],
    [
      3152,
      3149,
      3148,
      3147,
      3564
    ],
    [
      3565,
      3566,
      3564,
      3147,
      3146,
      3145
    ],
    [
      2883,
      2885,
      2886,
      3567,
      3568,
      3565,
      3145,
      3144,
      3143
    ],
    [
      2886,
      2411,
      1761,
      1760,
      2356,
      2361,
      3569,
      3567
    ],
    [
      3567,
      3569,
      3570,
      3568
    ],
    [
      3565,
      3568,
      3570,
      3571,
      3572,
      3566
    ],
    [
      3152,
      3564,
      3566,
      3572,
      3573,
      3153
    ],
    [
      3153,
      3573,
      3574,
      3575,
      3576,
      3154
    ],
    [
      3577,
      3155,
      3154,
      3576,
      3578
    ],
    [
      3579,
      3157,
      3156,
      3155,
      3577,
      3580
    ],
    [
      3579,
      3581,
      3582,
      3163,
      3158,
      3157
    ],
    [
      3582,
      3583,
      3584,
      3164,
      3163
    ],
    [
      3164,
      3584,
      3585,
      3586,
      3165
    ],
    [
      3165,
      3586,
      3587,
      3588,
      3167,
      3166
    ],
    [
      3588,
      3589,
      3590,
      3169,
      3168,
      3167
    ],
    [
      3171,
      3170,
      3169,
      3590,
      3591
    ],
    [
      3171,
      3591,
      3592,
      3593,
      3174,
      3172
    ],
    [
      3594,
      3595,
      3175,
      3173,
      3174,
      3593
    ],
    [
      3177,
      3176,
      3175,
      3595,
      3596
    ],
    [
      3177,
      3596,
      3597,
      3598,
      3183,
      3179,
      3178
    ],
    [
      3599,
      3600,
      3187,
      3184,
      3183,
      3598
    ],
    [
      3187,
      3600,
      3601,
      3602,
      3603,
      3604,
      3189,
      3188
    ],
    [
      3605,
      3606,
      3195,
      3190,
      3189,
      3604
    ],
    [
      3196,
      3195,
      3606,
      3607,
      3201
    ],
    [
      3202,
      3201,
      3607,
      3608,
      3609,
      3610,
      3206,
      3205
    ],
    [
      3208,
      3207,
      3206,
      3610
    ],
    [
      3203,
      3212,
      3611,
      3612,
      3289,
      3288,
      3204
    ],
    [
      3613,
      3614,
      3611,
      3212,
      3211,
      3214
    ],
    [
      3213,
      3220,
      3221,
      3613,
      3214
    ],
    [
      3236,
      3235,
      3615,
      3616,
      3232,
      3231
    ],
    [
      3234,
      3617,
      3618,
      3615,
      3235
    ],
    [
      3233,
      3242,
      3245,
      3247,
      3617,
      3234
    ],
    [
      3619,
      3620,
      3597,
      3596,
      3595,
      3594,
      3621
    ],
    [
      3622,
      3599,
      3598,
      3597,
      3620
    ],
    [
      3622,
      3623,
      3624,
      3601,
      3600,
      3599
    ],
    [
      3624,
      3625,
      3602,
      3601
    ],
    [
      3625,
      3626,
      3603,
      3602
    ],
    [
      3627,
      3605,
      3604,
      3603,
      3626
    ],
    [
      3627,
      3628,
      3629,
      3608,
      3607,
      3606,
      3605
    ],
    [
      3208,
      3610,
      3609,
      3630,
      3631,
      3209
    ],
    [
      3216,
      3215,
      3210,
      3209,
      3631,
      3632,
      3633
    ],
    [
      3219,
      3218,
      3634,
      3635,
      3636,
      3222
    ],
    [
      3223,
      3222,
      3636,
      3637,
      3228
    ],
    [
      3229,
      3638,
      3639,
      3230
    ],
    [
      3236,
      3231,
      3230,
      3639,
      3640,
      3641,
      3642,
      3237
    ],
    [
      3642,
      3643,
      3238,
      3237
    ],
    [
      3239,
      3238,
      3643,
      3644,
      3645,
      3240
    ],
    [
      3646,
      3243,
      3241,
      3240,
      3645,
      3647,
      3648
    ],
    [
      3649,
      3650,
      3320,
      3248,
      3244,
      3243,
      3646
    ],
    [
      2738,
      2743,
      2747,
      3279,
      3278,
      2739
    ],
    [
      3281,
      3280,
      3279,
      2747,
      2746,
      3306,
      3283
    ],
    [
      2215,
      2810,
      3282,
      3285,
      2216
    ],
    [
      3289,
      3612,
      3292,
      3291,
      3290
    ],
    [
      3294,
      3293,
      3651,
      3652,
      3296,
      3295
    ],
    [
      3297,
      3296,
      3652,
      3653,
      3654,
      3298
    ],
    [
      3299,
      3298,
      3654,
      3655,
      3300
    ],
    [
      3322,
      3302,
      3301,
      3300,
      3655,
      3323
    ],
    [
      3656,
      3489,
      3488,
      3310,
      3309,
      3312
    ],
    [
      3310,
      3488,
      3487,
      3491,
      3308,
      3307
    ],
    [
      3304,
      3493,
      2979,
      2978,
      3305
    ],
    [
      3304,
      3303,
      3308,
      3491,
      3490,
      3492,
      3493
    ],
    [
      3656,
      3312,
      3311,
      3313,
      3657
    ],
    [
      3657,
      3313,
      3314,
      3316,
      3658,
      3659
    ],
    [
      3660,
      3658,
      3316,
      3315,
      3318,
      3661
    ],
    [
      3662,
      3663,
      3664,
      3661,
      3318,
      3317,
      3319,
      3321,
      3665
    ],
    [
      3327,
      3328,
      3350,
      3348,
      3325,
      3324
    ],
    [
      3350,
      3328,
      2784,
      2783,
      2787
    ],
    [
      2320,
      2322,
      3335,
      3666,
      3667,
      3332
    ],
    [
      3668,
      3669,
      3666,
      3335,
      3334,
      3337
    ],
    [
      3338,
      3670,
      3671,
      3668,
      3337,
      3336
    ],
    [
      3338,
      3339,
      3340,
      3672,
      3670
    ],
    [
      3340,
      3341,
      3343,
      3673,
      3674,
      3675,
      3672
    ],
    [
      3342,
      3344,
      3346,
      3676,
      3673,
      3343
    ],
    [
      3352,
      3353,
      3355,
      3676,
      3346,
      3345,
      3347,
      3349,
      3351
    ],
    [
      3356,
      3674,
      3673,
      3676,
      3355,
      3354
    ],
    [
      3356,
      3357,
      3359,
      3677,
      3675,
      3674
    ],
    [
      3677,
      3359,
      3358,
      3360,
      3362,
      3678
    ],
    [
      3361,
      3363,
      3679,
      3680,
      3678,
      3362
    ],
    [
      3681,
      3679,
      3363,
      2804,
      2803,
      3366,
      3682
    ],
    [
      2212,
      3331,
      3330,
      3364,
      2213
    ],
    [
      2879,
      2341,
      2340,
      3100
    ],
    [
      3101,
      3105,
      2882,
      2881,
      2880
    ],
    [
      3683,
      3382,
      3381,
      3386,
      3398,
      3397,
      3402
    ],
    [
      3394,
      3398,
      3386,
      3385,
      3387,
      3388,
      3390,
      3395
    ],
    [
      3391,
      3392,
      3393,
      3395,
      3390,
      3389
    ],
    [
      3409,
      3684,
      3685,
      3404,
      3403,
      3407,
      3408
    ],
    [
      3409,
      3411,
      3686,
      3687,
      3688,
      3689,
      3684
    ],
    [
      3690,
      3691,
      3685,
      3684,
      3689,
      3692,
      3693
    ],
    [
      3694,
      3692,
      3689,
      3688,
      3695
    ],
    [
      3696,
      3693,
      3692,
      3694,
      3697
    ],
    [
      3696,
      3698,
      3699,
      3700,
      3701,
      3690,
      3693
    ],
    [
      3686,
      3411,
      3410,
      3412,
      3702
    ],
    [
      3703,
      3687,
      3686,
      3702,
      3704
    ],
    [
      3704,
      3702,
      3412,
      2927,
      2926,
      3705,
      3706
    ],
    [
      2929,
      3415,
      3707,
      3708,
      3705,
      2926,
      2925
    ],
    [
      3709,
      3707,
      3415,
      3414,
      3710
    ],
    [
      3711,
      3710,
      3414,
      3413,
      3416,
      3419,
      3424
    ],
    [
      3712,
      3713,
      3714,
      3695,
      3688,
      3687,
      3703
    ],
    [
      3712,
      3703,
      3704,
      3706,
      3715,
      3716
    ],
    [
      3717,
      3718,
      3715,
      3706,
      3705,
      3708
    ],
    [
      3717,
      3708,
      3707,
      3709,
      3719,
      3720
    ],
    [
      3721,
      3722,
      3719,
      3709,
      3710,
      3711
    ],
    [
      3721,
      3711,
      3424,
      3423,
      3723,
      3724
    ],
    [
      3422,
      3725,
      3726,
      3723,
      3423
    ],
    [
      3422,
      3425,
      3426,
      3428,
      3727,
      3728,
      3729,
      3725
    ],
    [
      3427,
      3730,
      3731,
      3727,
      3428
    ],
    [
      3427,
      3429,
      3431,
      3436,
      3437,
      3441,
      3730
    ],
    [
      1280,
      839,
      843,
      844,
      1281
    ],
    [
      1280,
      1284,
      3443,
      1406,
      1405,
      840,
      839
    ],
    [
      3444,
      1407,
      1406,
      3443,
      3442
    ],
    [
      3444,
      3445,
      3446,
      3448,
      1408,
      1407
    ],
    [
      933,
      932,
      1408,
      3448,
      3447,
      3449
    ],
    [
      933,
      3449,
      3450,
      3452,
      3511,
      936,
      934
    ],
    [
      2048,
      1531,
      1527,
      1526,
      2049
    ],
    [
      2050,
      2049,
      1526,
      1523,
      1525
    ],
    [
      2050,
      1525,
      1521,
      1520,
      3127,
      3118,
      2051
    ],
    [
      1520,
      1522,
      3454,
      3128,
      3127
    ],
    [
      3125,
      3128,
      3454,
      3453,
      3732
    ],
    [
      3453,
      3455,
      3457,
      3733,
      3732
    ],
    [
      3456,
      3459,
      3734,
      3733,
      3457
    ],
    [
      3735,
      3734,
      3459,
      3458,
      3462,
      3736,
      3737
    ],
    [
      3738,
      3739,
      3736,
      3462,
      3461,
      3740
    ],
    [
      3460,
      3464,
      3741,
      3740,
      3461
    ],
    [
      3466,
      3472,
      3741,
      3464,
      3463,
      3465
    ],
    [
      3656,
      3657,
      3659,
      3494,
      3485,
      3489
    ],
    [
      3660,
      3742,
      3497,
      3496,
      3495,
      3494,
      3659,
      3658
    ],
    [
      3520,
      3556,
      3552,
      3519,
      3518
    ],
    [
      3522,
      3525,
      3559,
      3557,
      3553,
      3523
    ],
    [
      3559,
      3525,
      3524,
      3527,
      3048,
      3047
    ],
    [
      2463,
      2455,
      2460,
      3531,
      3451
    ],
    [
      3530,
      3531,
      2460,
      2459,
      3743,
      3744,
      3533,
      3532
    ],
    [
      3535,
      3534,
      3533,
      3744,
      3536
    ],
    [
      3537,
      3536,
      3744,
      3743,
      3538
    ],
    [
      3538,
      3743,
      2459,
      2458,
      3539
    ],
    [
      3745,
      3544,
      3542,
      3541,
      3540,
      3746,
      3747
    ],
    [
      3745,
      3748,
      3545,
      3543,
      3544
    ],
    [
      3749,
      3547,
      3546,
      3545,
      3748,
      3750
    ],
    [
      3749,
      3550,
      3549,
      3548,
      3547
    ],
    [
      3749,
      3750,
      1804,
      1279,
      1278,
      3551,
      3550
    ],
    [
      3554,
      3558,
      3560,
      3561,
      3562,
      3555
    ],
    [
      2283,
      2282,
      3552,
      3556,
      3555,
      3562
    ],
    [
      3368,
      3370,
      3372,
      3053,
      3052,
      3056
    ],
    [
      3571,
      3570,
      3569,
      2361,
      2360,
      2890,
      3751,
      3752
    ],
    [
      3571,
      3752,
      3574,
      3573,
      3572
    ],
    [
      3574,
      3752,
      3751,
      3753,
      3575
    ],
    [
      3754,
      3578,
      3576,
      3575,
      3753,
      3755
    ],
    [
      3754,
      3756,
      3580,
      3577,
      3578
    ],
    [
      3579,
      3580,
      3756,
      3757,
      3758,
      3581
    ],
    [
      3582,
      3581,
      3758,
      3759,
      3760,
      3583
    ],
    [
      3584,
      3583,
      3760,
      3761,
      3585
    ],
    [
      3762,
      3763,
      3587,
      3586,
      3585,
      3761
    ],
    [
      3588,
      3587,
      3763,
      3764,
      3765,
      3766,
      3589
    ],
    [
      3590,
      3589,
      3766,
      3767,
      3592,
      3591
    ],
    [
      3767,
      3621,
      3594,
      3593,
      3592
    ],
    [
      3612,
      3611,
      3614,
      3651,
      3293,
      3292
    ],
    [
      3221,
      3225,
      3768,
      3769,
      3653,
      3652,
      3651,
      3614,
      3613
    ],
    [
      3227,
      3232,
      3616,
      3768,
      3225,
      3224
    ],
    [
      3618,
      3769,
      3768,
      3616,
      3615
    ],
    [
      3618,
      3617,
      3247,
      3246,
      3323,
      3655,
      3654,
      3653,
      3769
    ],
    [
      3630,
      3770,
      3771,
      3632,
      3631
    ],
    [
      3772,
      3633,
      3632,
      3771,
      3773
    ],
    [
      3216,
      3633,
      3772,
      3774,
      3775,
      3776,
      3217
    ],
    [
      3777,
      3778,
      3776,
      3775
    ],
    [
      3778,
      3779,
      3780,
      3634,
      3218,
      3217,
      3776
    ],
    [
      3781,
      3782,
      3635,
      3634,
      3780,
      3783
    ],
    [
      3226,
      3228,
      3637,
      3784,
      3785,
      3786,
      3638,
      3229
    ],
    [
      3639,
      3638,
      3786,
      3640
    ],
    [
      3644,
      3643,
      3642,
      3641,
      3787,
      3788,
      3789
    ],
    [
      3644,
      3789,
      3790,
      3791,
      3647,
      3645
    ],
    [
      3792,
      3793,
      3648,
      3647,
      3791,
      3794,
      3795
    ],
    [
      3649,
      3646,
      3648,
      3793,
      3796,
      3797
    ],
    [
      3649,
      3797,
      3798,
      3799,
      3650
    ],
    [
      3320,
      3650,
      3799,
      3800,
      3801,
      3665,
      3321
    ],
    [
      3619,
      3621,
      3767,
      3766,
      3765,
      3802,
      3803,
      3804
    ],
    [
      3619,
      3804,
      3805,
      3806,
      3623,
      3622,
      3620
    ],
    [
      3627,
      3626,
      3625,
      3624,
      3623,
      3806,
      3807,
      3808,
      3628
    ],
    [
      3608,
      3629,
      3809,
      3810,
      3811,
      3770,
      3630,
      3609
    ],
    [
      3812,
      3813,
      3814,
      3773,
      3771,
      3770,
      3811
    ],
    [
      3772,
      3773,
      3814,
      3815,
      3774
    ],
    [
      3777,
      3775,
      3774,
      3815,
      3816
    ],
    [
      3777,
      3816,
      3817,
      3779,
      3778
    ],
    [
      3780,
      3779,
      3817,
      3818,
      3819,
      3783
    ],
    [
      3781,
      3783,
      3819,
      3820,
      3821,
      3822
    ],
    [
      2824,
      2823,
      3333,
      3365,
      3364,
      3330
    ],
    [
      3333,
      3332,
      3667,
      3682,
      3366,
      3365
    ],
    [
      3681,
      3682,
      3667,
      3666,
      3669
    ],
    [
      3668,
      3671,
      3680,
      3679,
      3681,
      3669
    ],
    [
      3677,
      3678,
      3680,
      3671,
      3670,
      3672,
      3675
    ],
    [
      3823,
      2406,
      2405,
      3824,
      3825,
      3826,
      3827,
      3828
    ],
    [
      3829,
      3830,
      3827,
      3826,
      3831
    ],
    [
      3829,
      3831,
      3832,
      3833,
      3834,
      3835
    ],
    [
      3831,
      3826,
      3825,
      3836,
      3837,
      3832
    ],
    [
      3838,
      3839,
      3836,
      3825,
      3824,
      3840,
      3841
    ],
    [
      3840,
      3824,
      2405,
      2404
    ],
    [
      2403,
      2908,
      3406,
      3842,
      3841,
      3840,
      2404
    ],
    [
      3843,
      3842,
      3406,
      3405,
      3844
    ],
    [
      3845,
      3844,
      3405,
      3404,
      3685,
      3691,
      3846
    ],
    [
      3712,
      3716,
      3847,
      3848,
      3849,
      3713
    ],
    [
      3847,
      3716,
      3715,
      3718,
      3850
    ],
    [
      3717,
      3720,
      3851,
      3852,
      3850,
      3718
    ],
    [
      3851,
      3720,
      3719,
      3722,
      3853,
      3854
    ],
    [
      3721,
      3724,
      3855,
      3856,
      3853,
      3722
    ],
    [
      3726,
      3857,
      3855,
      3724,
      3723
    ],
    [
      3726,
      3725,
      3729,
      3858,
      3859,
      3857
    ],
    [
      3860,
      3858,
      3729,
      3728
    ],
    [
      3860,
      3728,
      3727,
      3731,
      3861,
      3862
    ],
    [
      3731,
      3730,
      3441,
      3440,
      3863,
      3861
    ],
    [
      3735,
      3864,
      3438,
      3126,
      3125,
      3732,
      3733,
      3734
    ],
    [
      3735,
      3737,
      3865,
      3864
    ],
    [
      3736,
      3739,
      3866,
      3865,
      3737
    ],
    [
      3738,
      3867,
      3866,
      3739
    ],
    [
      3738,
      3740,
      3741,
      3472,
      3471,
      3868,
      3869,
      3870,
      3871,
      3872,
      3867
    ],
    [
      3470,
      3473,
      3474,
      3476,
      3480,
      3563,
      3483,
      3482,
      3873,
      3868,
      3471
    ],
    [
      2466,
      2467,
      2469,
      3746,
      3540,
      2457,
      2456,
      2462
    ],
    [
      3747,
      3746,
      2469,
      2468
    ],
    [
      3745,
      3747,
      2468,
      1805,
      1804,
      3750,
      3748
    ],
    [
      3753,
      3751,
      2890,
      2889,
      3874,
      3755
    ],
    [
      3754,
      3755,
      3874,
      3875,
      3876,
      3757,
      3756
    ],
    [
      3758,
      3757,
      3876,
      3877,
      3759
    ],
    [
      3759,
      3877,
      3878,
      3879,
      3762,
      3761,
      3760
    ],
    [
      3762,
      3879,
      3880,
      3881,
      3882,
      3764,
      3763
    ],
    [
      3764,
      3882,
      3883,
      3802,
      3765
    ],
    [
      3884,
      3885,
      3886,
      3803,
      3802,
      3883
    ],
    [
      3805,
      3804,
      3803,
      3886,
      3887,
      3888
    ],
    [
      3805,
      3888,
      3889,
      3807,
      3806
    ],
    [
      3890,
      3808,
      3807,
      3889,
      3891
    ],
    [
      3890,
      3892,
      3809,
      3629,
      3628,
      3808
    ],
    [
      3809,
      3892,
      3893,
      3810
    ],
    [
      3812,
      3811,
      3810,
      3893,
      3894,
      3895
    ],
    [
      3812,
      3895,
      3896,
      3897,
      3813
    ],
    [
      3898,
      3899,
      3897,
      3896,
      3900,
      3901
    ],
    [
      3898,
      3901,
      3902,
      3903
    ],
    [
      3904,
      3903,
      3902,
      3905,
      3906
    ],
    [
      3834,
      3906,
      3905,
      3907,
      3835
    ],
    [
      3782,
      3908,
      3909,
      3910,
      3784,
      3637,
      3636,
      3635
    ],
    [
      3784,
      3910,
      3911,
      3912,
      3785
    ],
    [
      3913,
      3914,
      3915,
      3787,
      3641,
      3640,
      3786,
      3785,
      3912
    ],
    [
      3916,
      3917,
      3918,
      3915,
      3914
    ],
    [
      3919,
      3788,
      3787,
      3915,
      3918
    ],
    [
      3920,
      3790,
      3789,
      3788,
      3919
    ],
    [
      3920,
      3921,
      3922,
      3923,
      3794,
      3791,
      3790
    ],
    [
      3924,
      3925,
      3926,
      3927,
      3795,
      3794,
      3923
    ],
    [
      3792,
      3795,
      3927,
      3928,
      3929
    ],
    [
      3930,
      3796,
      3793,
      3792,
      3929
    ],
    [
      3930,
      3931,
      3932,
      3933,
      3798,
      3797,
      3796
    ],
    [
      3934,
      3800,
      3799,
      3798,
      3933
    ],
    [
      3934,
      3935,
      3936,
      3801,
      3800
    ],
    [
      3662,
      3665,
      3801,
      3936,
      3937
    ],
    [
      3904,
      3820,
      3819,
      3818,
      3899,
      3898,
      3903
    ],
    [
      3816,
      3815,
      3814,
      3813,
      3897,
      3899,
      3818,
      3817
    ],
    [
      3938,
      3833,
      3832,
      3837,
      3939
    ],
    [
      3940,
      3941,
      3939,
      3837,
      3836,
      3839
    ],
    [
      3940,
      3839,
      3838,
      3942
    ],
    [
      3943,
      3942,
      3838,
      3841,
      3842,
      3843,
      3944
    ],
    [
      3845,
      3944,
      3843,
      3844
    ],
    [
      3943,
      3944,
      3845,
      3846,
      3945,
      3946
    ],
    [
      3690,
      3701,
      3945,
      3846,
      3691
    ],
    [
      3946,
      3945,
      3701,
      3700,
      3947,
      3948,
      3949
    ],
    [
      3823,
      3399,
      3396,
      2913,
      2407,
      2406
    ],
    [
      3823,
      3828,
      3950,
      3400,
      3399
    ],
    [
      3950,
      3828,
      3827,
      3830,
      3951
    ],
    [
      3829,
      3835,
      3907,
      3952,
      3953,
      3951,
      3830
    ],
    [
      3848,
      3954,
      3955,
      3956,
      3957,
      3849
    ],
    [
      3958,
      3959,
      3954,
      3848,
      3847,
      3850,
      3852
    ],
    [
      3958,
      3852,
      3851,
      3854,
      3960
    ],
    [
      3960,
      3854,
      3853,
      3856,
      3961,
      3962
    ],
    [
      3961,
      3856,
      3855,
      3857,
      3859,
      3963,
      3964
    ],
    [
      3965,
      3966,
      3963,
      3859,
      3858,
      3860,
      3862
    ],
    [
      3965,
      3862,
      3861,
      3863,
      3967
    ],
    [
      3439,
      3968,
      3969,
      3967,
      3863,
      3440
    ],
    [
      2888,
      3380,
      3384,
      3875,
      3874,
      2889
    ],
    [
      3970,
      3971,
      3878,
      3877,
      3876,
      3875,
      3384,
      3383,
      3972
    ],
    [
      3973,
      3880,
      3879,
      3878,
      3971
    ],
    [
      3973,
      3974,
      3975,
      3881,
      3880
    ],
    [
      3976,
      3884,
      3883,
      3882,
      3881,
      3975
    ],
    [
      3976,
      3977,
      3978,
      3885,
      3884
    ],
    [
      3887,
      3886,
      3885,
      3978,
      3979
    ],
    [
      3887,
      3979,
      3980,
      3891,
      3889,
      3888
    ],
    [
      3890,
      3891,
      3980,
      3981,
      3894,
      3893,
      3892
    ],
    [
      3896,
      3895,
      3894,
      3981,
      3982,
      3900
    ],
    [
      3983,
      3952,
      3907,
      3905,
      3902,
      3901,
      3900,
      3982
    ],
    [
      3781,
      3822,
      3984,
      3985,
      3908,
      3782
    ],
    [
      3986,
      3987,
      3909,
      3908,
      3985,
      3948,
      3947
    ],
    [
      3910,
      3909,
      3987,
      3988,
      3911
    ],
    [
      3913,
      3912,
      3911,
      3988,
      3989
    ],
    [
      3990,
      3991,
      3984,
      3822,
      3821
    ],
    [
      3992,
      3949,
      3948,
      3985,
      3984,
      3991
    ],
    [
      3993,
      3994,
      3989,
      3988,
      3987,
      3986,
      3995,
      3996,
      3997
    ],
    [
      3998,
      3999,
      3916,
      3914,
      3913,
      3989,
      3994,
      4000
    ],
    [
      3999,
      4001,
      3917,
      3916
    ],
    [
      3920,
      3919,
      3918,
      3917,
      4001,
      4002,
      4003,
      3921
    ],
    [
      3694,
      3695,
      3714,
      4004,
      4005,
      3697
    ],
    [
      3696,
      3697,
      4005,
      4006,
      4007,
      3698
    ],
    [
      4008,
      3699,
      3698,
      4007,
      4009
    ],
    [
      4008,
      4009,
      4010,
      4011,
      4012,
      4013
    ],
    [
      4013,
      4012,
      4014,
      4015,
      4016,
      4017,
      4018
    ],
    [
      4019,
      4020,
      4016,
      4015,
      4021,
      4022
    ],
    [
      4023,
      4024,
      4019,
      4022,
      4025,
      4026
    ],
    [
      4023,
      4026,
      4027,
      4028,
      4029
    ],
    [
      3998,
      4000,
      4029,
      4028,
      4030,
      4031,
      4032
    ],
    [
      3998,
      4032,
      4033,
      4034,
      4002,
      4001,
      3999
    ],
    [
      4034,
      4035,
      4003,
      4002
    ],
    [
      3921,
      4003,
      4035,
      4036,
      4037,
      3922
    ],
    [
      3924,
      3923,
      3922,
      4037,
      4038,
      4039
    ],
    [
      3713,
      3849,
      3957,
      4004,
      3714
    ],
    [
      4006,
      4005,
      4004,
      3957,
      3956,
      4040
    ],
    [
      4041,
      4042,
      4010,
      4009,
      4007,
      4006,
      4040
    ],
    [
      4010,
      4042,
      4043,
      4044,
      4011
    ],
    [
      4045,
      4014,
      4012,
      4011,
      4044
    ],
    [
      4015,
      4014,
      4045,
      4046,
      4047,
      4021
    ],
    [
      4047,
      4048,
      4049,
      4025,
      4022,
      4021
    ],
    [
      4050,
      4027,
      4026,
      4025,
      4049,
      4051
    ],
    [
      4052,
      4030,
      4028,
      4027,
      4050,
      4053
    ],
    [
      4054,
      4031,
      4030,
      4052,
      4055
    ],
    [
      4056,
      4057,
      4033,
      4032,
      4031,
      4054
    ],
    [
      4057,
      4058,
      4059,
      4036,
      4035,
      4034,
      4033
    ],
    [
      4060,
      4038,
      4037,
      4036,
      4059,
      4061
    ],
    [
      4060,
      4062,
      4039,
      4038
    ],
    [
      3924,
      4039,
      4062,
      4063,
      3925
    ],
    [
      3926,
      3925,
      4063,
      4064
    ],
    [
      3926,
      4064,
      4065,
      4066,
      3928,
      3927
    ],
    [
      3930,
      3929,
      3928,
      4066,
      4067,
      3931
    ],
    [
      3970,
      4068,
      3974,
      3973,
      3971
    ],
    [
      3976,
      3975,
      3974,
      4068,
      4069,
      4070,
      4071,
      3977
    ],
    [
      3983,
      3982,
      3981,
      3980,
      3979,
      3978,
      3977,
      4071
    ],
    [
      3983,
      4071,
      4070,
      3953,
      3952
    ],
    [
      3950,
      3951,
      3953,
      4070,
      4069,
      3401,
      3400
    ],
    [
      4072,
      3955,
      3954,
      3959,
      4073,
      4074
    ],
    [
      3958,
      3960,
      3962,
      4075,
      4076,
      4073,
      3959
    ],
    [
      4075,
      3962,
      3961,
      3964,
      4077
    ],
    [
      4078,
      4077,
      3964,
      3963,
      3966
    ],
    [
      4079,
      4078,
      3966,
      3965,
      3967,
      3969
    ],
    [
      4079,
      3969,
      3968,
      4080
    ],
    [
      3867,
      3872,
      4080,
      3968,
      3439,
      3438,
      3864,
      3865,
      3866
    ],
    [
      3972,
      3383,
      3382,
      3683
    ],
    [
      3970,
      3972,
      3683,
      3402,
      3401,
      4069,
      4068
    ],
    [
      4008,
      4013,
      4018,
      3995,
      3986,
      3947,
      3700,
      3699
    ],
    [
      4018,
      4017,
      3996,
      3995
    ],
    [
      3997,
      3996,
      4017,
      4016,
      4020
    ],
    [
      4019,
      4024,
      3993,
      3997,
      4020
    ],
    [
      4023,
      4029,
      4000,
      3994,
      3993,
      4024
    ],
    [
      3938,
      3990,
      3821,
      3820,
      3904,
      3906,
      3834,
      3833
    ],
    [
      3938,
      3939,
      3941,
      3992,
      3991,
      3990
    ],
    [
      3943,
      3946,
      3949,
      3992,
      3941,
      3940,
      3942
    ],
    [
      4041,
      4040,
      3956,
      3955,
      4072,
      4081
    ],
    [
      4041,
      4081,
      4082,
      4083,
      4043,
      4042
    ],
    [
      4083,
      4084,
      4085,
      4046,
      4045,
      4044,
      4043
    ],
    [
      4086,
      4087,
      4048,
      4047,
      4046,
      4085
    ],
    [
      4088,
      4051,
      4049,
      4048,
      4087,
      4089
    ],
    [
      4088,
      4090,
      4091,
      4053,
      4050,
      4051
    ],
    [
      4052,
      4053,
      4091,
      4092,
      4093,
      4055
    ],
    [
      4056,
      4054,
      4055,
      4093,
      4094
    ],
    [
      4056,
      4094,
      4095,
      4096,
      4058,
      4057
    ],
    [
      4059,
      4058,
      4096,
      4097,
      4098,
      4061
    ],
    [
      3481,
      3509,
      4067,
      4066,
      4065,
      3873,
      3482
    ],
    [
      3508,
      3932,
      3931,
      4067,
      3509
    ],
    [
      3934,
      3933,
      3932,
      3508,
      3510,
      3935
    ],
    [
      3935,
      3510,
      3507,
      3506,
      3937,
      3936
    ],
    [
      3504,
      3663,
      3662,
      3937,
      3506,
      3505
    ],
    [
      3504,
      3503,
      3502,
      3664,
      3663
    ],
    [
      3660,
      3661,
      3664,
      3502,
      3501,
      3500,
      3499,
      3742
    ],
    [
      3742,
      3499,
      3498,
      3497
    ],
    [
      4099,
      4074,
      4073,
      4076,
      3871,
      3870,
      4100,
      4101
    ],
    [
      4075,
      4077,
      4078,
      4079,
      4080,
      3872,
      3871,
      4076
    ],
    [
      4099,
      4082,
      4081,
      4072,
      4074
    ],
    [
      4083,
      4082,
      4099,
      4101,
      4102,
      4084
    ],
    [
      4103,
      4086,
      4085,
      4084,
      4102
    ],
    [
      4103,
      4104,
      4089,
      4087,
      4086
    ],
    [
      4088,
      4089,
      4104,
      4105,
      4090
    ],
    [
      4090,
      4105,
      4106,
      4092,
      4091
    ],
    [
      4094,
      4093,
      4092,
      4106,
      4107,
      4095
    ],
    [
      4096,
      4095,
      4107,
      4108,
      4097
    ],
    [
      4100,
      3870,
      3869,
      4098,
      4097,
      4108
    ],
    [
      4060,
      4061,
      4098,
      3869,
      3868,
      3873,
      4065,
      4064,
      4063,
      4062
    ],
    [
      4103,
      4102,
      4101,
      4100,
      4108,
      4107,
      4106,
      4105,
      4104
    ]
  ]
};
/* harmony export (immutable) */ __webpack_exports__["TECTONIC"] = TECTONIC;



/***/ }),
/* 92 */
/***/ (function(module, exports) {

module.exports = determinant;

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/***/ }),
/* 93 */
/***/ (function(module, exports) {

module.exports = fromQuat;

/**
 * Creates a matrix from a quaternion rotation.
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @returns {mat4} out
 */
function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/***/ }),
/* 94 */
/***/ (function(module, exports) {

module.exports = frustum;

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/***/ }),
/* 95 */
/***/ (function(module, exports) {

module.exports = identity;

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/***/ }),
/* 96 */
/***/ (function(module, exports) {

module.exports = invert;

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(95);

module.exports = lookAt;

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < 0.000001 &&
        Math.abs(eyey - centery) < 0.000001 &&
        Math.abs(eyez - centerz) < 0.000001) {
        return identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/***/ }),
/* 98 */
/***/ (function(module, exports) {

module.exports = multiply;

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/***/ }),
/* 99 */
/***/ (function(module, exports) {

module.exports = ortho;

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function ortho(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/***/ }),
/* 100 */
/***/ (function(module, exports) {

module.exports = perspective;

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspective(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/***/ }),
/* 101 */
/***/ (function(module, exports) {

module.exports = rotateX;

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/***/ }),
/* 102 */
/***/ (function(module, exports) {

module.exports = rotateY;

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/***/ }),
/* 103 */
/***/ (function(module, exports) {

module.exports = scale;

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/***/ }),
/* 104 */
/***/ (function(module, exports) {

module.exports = translate;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/***/ }),
/* 105 */
/***/ (function(module, exports) {

module.exports = transpose;

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(53)


/***/ }),
/* 107 */
/***/ (function(module, exports) {

module.exports = calculateW

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
function calculateW (out, a) {
  var x = a[0], y = a[1], z = a[2]

  out[0] = x
  out[1] = y
  out[2] = z
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z))
  return out
}


/***/ }),
/* 108 */
/***/ (function(module, exports) {

module.exports = conjugate

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
function conjugate (out, a) {
  out[0] = -a[0]
  out[1] = -a[1]
  out[2] = -a[2]
  out[3] = a[3]
  return out
}


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
module.exports = __webpack_require__(54)


/***/ }),
/* 110 */
/***/ (function(module, exports) {

module.exports = fromMat3

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
function fromMat3 (out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8]
  var fRoot

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0)  // 2w
    out[3] = 0.5 * fRoot
    fRoot = 0.5 / fRoot  // 1/(4w)
    out[0] = (m[5] - m[7]) * fRoot
    out[1] = (m[6] - m[2]) * fRoot
    out[2] = (m[1] - m[3]) * fRoot
  } else {
    // |w| <= 1/2
    var i = 0
    if (m[4] > m[0]) {
      i = 1
    }
    if (m[8] > m[i * 3 + i]) {
      i = 2
    }
    var j = (i + 1) % 3
    var k = (i + 2) % 3

    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0)
    out[i] = 0.5 * fRoot
    fRoot = 0.5 / fRoot
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot
  }

  return out
}


/***/ }),
/* 111 */
/***/ (function(module, exports) {

module.exports = identity

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
function identity (out) {
  out[0] = 0
  out[1] = 0
  out[2] = 0
  out[3] = 1
  return out
}


/***/ }),
/* 112 */
/***/ (function(module, exports) {

module.exports = invert

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
function invert (out, a) {
  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
    dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,
    invDot = dot ? 1.0 / dot : 0

  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot
  out[1] = -a1 * invDot
  out[2] = -a2 * invDot
  out[3] = a3 * invDot
  return out
}


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */
module.exports = __webpack_require__(154)


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(55)


/***/ }),
/* 115 */
/***/ (function(module, exports) {

module.exports = multiply

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
function multiply (out, a, b) {
  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bx = b[0], by = b[1], bz = b[2], bw = b[3]

  out[0] = ax * bw + aw * bx + ay * bz - az * by
  out[1] = ay * bw + aw * by + az * bx - ax * bz
  out[2] = az * bw + aw * bz + ax * by - ay * bx
  out[3] = aw * bw - ax * bx - ay * by - az * bz
  return out
}


/***/ }),
/* 116 */
/***/ (function(module, exports) {

module.exports = rotateX

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateX (out, a, rad) {
  rad *= 0.5

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bx = Math.sin(rad), bw = Math.cos(rad)

  out[0] = ax * bw + aw * bx
  out[1] = ay * bw + az * bx
  out[2] = az * bw - ay * bx
  out[3] = aw * bw - ax * bx
  return out
}


/***/ }),
/* 117 */
/***/ (function(module, exports) {

module.exports = rotateY

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateY (out, a, rad) {
  rad *= 0.5

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    by = Math.sin(rad), bw = Math.cos(rad)

  out[0] = ax * bw - az * by
  out[1] = ay * bw + aw * by
  out[2] = az * bw + ax * by
  out[3] = aw * bw - ay * by
  return out
}


/***/ }),
/* 118 */
/***/ (function(module, exports) {

module.exports = rotateZ

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateZ (out, a, rad) {
  rad *= 0.5

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bz = Math.sin(rad), bw = Math.cos(rad)

  out[0] = ax * bw + ay * bz
  out[1] = ay * bw - ax * bz
  out[2] = az * bw + aw * bz
  out[3] = aw * bw - az * bz
  return out
}


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var vecDot = __webpack_require__(31)
var vecCross = __webpack_require__(51)
var vecLength = __webpack_require__(52)
var vecNormalize = __webpack_require__(32)

var quatNormalize = __webpack_require__(49)
var quatAxisAngle = __webpack_require__(50)

module.exports = rotationTo

var tmpvec3 = [0, 0, 0]
var xUnitVec3 = [1, 0, 0]
var yUnitVec3 = [0, 1, 0]

/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
function rotationTo (out, a, b) {
  var dot = vecDot(a, b)
  if (dot < -0.999999) {
    vecCross(tmpvec3, xUnitVec3, a)
    if (vecLength(tmpvec3) < 0.000001) {
      vecCross(tmpvec3, yUnitVec3, a)
    }
    vecNormalize(tmpvec3, tmpvec3)
    quatAxisAngle(out, tmpvec3, Math.PI)
    return out
  } else if (dot > 0.999999) {
    out[0] = 0
    out[1] = 0
    out[2] = 0
    out[3] = 1
    return out
  } else {
    vecCross(tmpvec3, a, b)
    out[0] = tmpvec3[0]
    out[1] = tmpvec3[1]
    out[2] = tmpvec3[2]
    out[3] = 1 + dot
    return quatNormalize(out, out)
  }
}


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(57)


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(58)


/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = slerp

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
function slerp (out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bx = b[0], by = b[1], bz = b[2], bw = b[3]

  var omega, cosom, sinom, scale0, scale1

  // calc cosine
  cosom = ax * bx + ay * by + az * bz + aw * bw
  // adjust signs (if necessary)
  if (cosom < 0.0) {
    cosom = -cosom
    bx = -bx
    by = -by
    bz = -bz
    bw = -bw
  }
  // calculate coefficients
  if ((1.0 - cosom) > 0.000001) {
    // standard case (slerp)
    omega = Math.acos(cosom)
    sinom = Math.sin(omega)
    scale0 = Math.sin((1.0 - t) * omega) / sinom
    scale1 = Math.sin(t * omega) / sinom
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t
    scale1 = t
  }
  // calculate final values
  out[0] = scale0 * ax + scale1 * bx
  out[1] = scale0 * ay + scale1 * by
  out[2] = scale0 * az + scale1 * bz
  out[3] = scale0 * aw + scale1 * bw

  return out
}


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
module.exports = __webpack_require__(158)


/***/ }),
/* 124 */
/***/ (function(module, exports) {

module.exports = add

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function add(out, a, b) {
    out[0] = a[0] + b[0]
    out[1] = a[1] + b[1]
    return out
}

/***/ }),
/* 125 */
/***/ (function(module, exports) {

module.exports = cross

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0]
    out[0] = out[1] = 0
    out[2] = z
    return out
}

/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = divide

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function divide(out, a, b) {
    out[0] = a[0] / b[0]
    out[1] = a[1] / b[1]
    return out
}

/***/ }),
/* 127 */
/***/ (function(module, exports) {

module.exports = dot

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1]
}

/***/ }),
/* 128 */
/***/ (function(module, exports) {

module.exports = lerp

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
function lerp(out, a, b, t) {
    var ax = a[0],
        ay = a[1]
    out[0] = ax + t * (b[0] - ax)
    out[1] = ay + t * (b[1] - ay)
    return out
}

/***/ }),
/* 129 */
/***/ (function(module, exports) {

module.exports = multiply

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function multiply(out, a, b) {
    out[0] = a[0] * b[0]
    out[1] = a[1] * b[1]
    return out
}

/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports = negate

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
function negate(out, a) {
    out[0] = -a[0]
    out[1] = -a[1]
    return out
}

/***/ }),
/* 131 */
/***/ (function(module, exports) {

module.exports = normalize

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
function normalize(out, a) {
    var x = a[0],
        y = a[1]
    var len = x*x + y*y
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len)
        out[0] = a[0] * len
        out[1] = a[1] * len
    }
    return out
}

/***/ }),
/* 132 */
/***/ (function(module, exports) {

module.exports = scale

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
function scale(out, a, b) {
    out[0] = a[0] * b
    out[1] = a[1] * b
    return out
}

/***/ }),
/* 133 */
/***/ (function(module, exports) {

module.exports = scaleAndAdd

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale)
    out[1] = a[1] + (b[1] * scale)
    return out
}

/***/ }),
/* 134 */
/***/ (function(module, exports) {

module.exports = set

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
function set(out, x, y) {
    out[0] = x
    out[1] = y
    return out
}

/***/ }),
/* 135 */
/***/ (function(module, exports) {

module.exports = subtract

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function subtract(out, a, b) {
    out[0] = a[0] - b[0]
    out[1] = a[1] - b[1]
    return out
}

/***/ }),
/* 136 */
/***/ (function(module, exports) {

module.exports = transformMat4

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat4(out, a, m) {
    var x = a[0], 
        y = a[1]
    out[0] = m[0] * x + m[4] * y + m[12]
    out[1] = m[1] * x + m[5] * y + m[13]
    return out
}

/***/ }),
/* 137 */
/***/ (function(module, exports) {

module.exports = add;

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function add(out, a, b) {
    out[0] = a[0] + b[0]
    out[1] = a[1] + b[1]
    out[2] = a[2] + b[2]
    return out
}

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = angle

var fromValues = __webpack_require__(141)
var normalize = __webpack_require__(32)
var dot = __webpack_require__(31)

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
function angle(a, b) {
    var tempA = fromValues(a[0], a[1], a[2])
    var tempB = fromValues(b[0], b[1], b[2])
 
    normalize(tempA, tempA)
    normalize(tempB, tempB)
 
    var cosine = dot(tempA, tempB)

    if(cosine > 1.0){
        return 0
    } else {
        return Math.acos(cosine)
    }     
}


/***/ }),
/* 139 */
/***/ (function(module, exports) {

module.exports = distance;

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2]
    return Math.sqrt(x*x + y*y + z*z)
}

/***/ }),
/* 140 */
/***/ (function(module, exports) {

module.exports = divide;

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function divide(out, a, b) {
    out[0] = a[0] / b[0]
    out[1] = a[1] / b[1]
    out[2] = a[2] / b[2]
    return out
}

/***/ }),
/* 141 */
/***/ (function(module, exports) {

module.exports = fromValues;

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
function fromValues(x, y, z) {
    var out = new Float32Array(3)
    out[0] = x
    out[1] = y
    out[2] = z
    return out
}

/***/ }),
/* 142 */
/***/ (function(module, exports) {

module.exports = inverse;

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0]
  out[1] = 1.0 / a[1]
  out[2] = 1.0 / a[2]
  return out
}

/***/ }),
/* 143 */
/***/ (function(module, exports) {

module.exports = lerp;

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function lerp(out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2]
    out[0] = ax + t * (b[0] - ax)
    out[1] = ay + t * (b[1] - ay)
    out[2] = az + t * (b[2] - az)
    return out
}

/***/ }),
/* 144 */
/***/ (function(module, exports) {

module.exports = multiply;

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function multiply(out, a, b) {
    out[0] = a[0] * b[0]
    out[1] = a[1] * b[1]
    out[2] = a[2] * b[2]
    return out
}

/***/ }),
/* 145 */
/***/ (function(module, exports) {

module.exports = negate;

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
function negate(out, a) {
    out[0] = -a[0]
    out[1] = -a[1]
    out[2] = -a[2]
    return out
}

/***/ }),
/* 146 */
/***/ (function(module, exports) {

module.exports = scale;

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
function scale(out, a, b) {
    out[0] = a[0] * b
    out[1] = a[1] * b
    out[2] = a[2] * b
    return out
}

/***/ }),
/* 147 */
/***/ (function(module, exports) {

module.exports = scaleAndAdd;

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale)
    out[1] = a[1] + (b[1] * scale)
    out[2] = a[2] + (b[2] * scale)
    return out
}

/***/ }),
/* 148 */
/***/ (function(module, exports) {

module.exports = set;

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
function set(out, x, y, z) {
    out[0] = x
    out[1] = y
    out[2] = z
    return out
}

/***/ }),
/* 149 */
/***/ (function(module, exports) {

module.exports = subtract;

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function subtract(out, a, b) {
    out[0] = a[0] - b[0]
    out[1] = a[1] - b[1]
    out[2] = a[2] - b[2]
    return out
}

/***/ }),
/* 150 */
/***/ (function(module, exports) {

module.exports = transformMat4;

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2],
        w = m[3] * x + m[7] * y + m[11] * z + m[15]
    w = w || 1.0
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w
    return out
}

/***/ }),
/* 151 */
/***/ (function(module, exports) {

module.exports = distance

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
function distance (a, b) {
  var x = b[0] - a[0],
    y = b[1] - a[1],
    z = b[2] - a[2],
    w = b[3] - a[3]
  return Math.sqrt(x * x + y * y + z * z + w * w)
}


/***/ }),
/* 152 */
/***/ (function(module, exports) {

module.exports = divide

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function divide (out, a, b) {
  out[0] = a[0] / b[0]
  out[1] = a[1] / b[1]
  out[2] = a[2] / b[2]
  out[3] = a[3] / b[3]
  return out
}


/***/ }),
/* 153 */
/***/ (function(module, exports) {

module.exports = inverse

/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */
function inverse (out, a) {
  out[0] = 1.0 / a[0]
  out[1] = 1.0 / a[1]
  out[2] = 1.0 / a[2]
  out[3] = 1.0 / a[3]
  return out
}


/***/ }),
/* 154 */
/***/ (function(module, exports) {

module.exports = length

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
function length (a) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3]
  return Math.sqrt(x * x + y * y + z * z + w * w)
}


/***/ }),
/* 155 */
/***/ (function(module, exports) {

module.exports = multiply

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function multiply (out, a, b) {
  out[0] = a[0] * b[0]
  out[1] = a[1] * b[1]
  out[2] = a[2] * b[2]
  out[3] = a[3] * b[3]
  return out
}


/***/ }),
/* 156 */
/***/ (function(module, exports) {

module.exports = negate

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
function negate (out, a) {
  out[0] = -a[0]
  out[1] = -a[1]
  out[2] = -a[2]
  out[3] = -a[3]
  return out
}


/***/ }),
/* 157 */
/***/ (function(module, exports) {

module.exports = scaleAndAdd

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
function scaleAndAdd (out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale)
  out[1] = a[1] + (b[1] * scale)
  out[2] = a[2] + (b[2] * scale)
  out[3] = a[3] + (b[3] * scale)
  return out
}


/***/ }),
/* 158 */
/***/ (function(module, exports) {

module.exports = squaredLength

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength (a) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3]
  return x * x + y * y + z * z + w * w
}


/***/ }),
/* 159 */
/***/ (function(module, exports) {

module.exports = subtract

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function subtract (out, a, b) {
  out[0] = a[0] - b[0]
  out[1] = a[1] - b[1]
  out[2] = a[2] - b[2]
  out[3] = a[3] - b[3]
  return out
}


/***/ }),
/* 160 */
/***/ (function(module, exports) {

module.exports = transformMat4

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
function transformMat4 (out, a, m) {
  var x = a[0], y = a[1], z = a[2], w = a[3]
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w
  return out
}


/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export encodePickingColor */
/* unused harmony export decodePickingColor */
/* unused harmony export getNullPickingColor */
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var NULL_PICKING_COLOR = new Uint8Array([0, 0, 0]);

// Encodes an index as a Uint8Array([r, g, b]) format picking color
function encodePickingColor(i) {
  return [i + 1 & 255, i + 1 >> 8 & 255, i + 1 >> 16 & 255];
}

// Decodes a picking color in [r, g, b] format to an index
function decodePickingColor(color) {
  // assert(color instanceof Uint8Array);
  var _color = _slicedToArray(color, 3),
      i1 = _color[0],
      i2 = _color[1],
      i3 = _color[2];
  // 1 was added to seperate from no selection


  var index = i1 + i2 * 256 + i3 * 65536 - 1;
  return index;
}

// Return picking color representing no item at that pixel
function getNullPickingColor() {
  return NULL_PICKING_COLOR;
}
//# sourceMappingURL=picking-colors.js.map

/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return addModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return logModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return removeModel; });
/* unused harmony export setOverride */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getOverrides; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_seer__ = __webpack_require__(212);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_seer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_seer__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_globals__ = __webpack_require__(75);




var models = {};

/**
 * Add a model to our cache indexed by id
 */
var addModel = function addModel(model) {
  if (models[model.id]) {
    return;
  }
  models[model.id] = model;

  __WEBPACK_IMPORTED_MODULE_0_seer___default.a.listItem('luma.gl', model.id);
};

/**
 * Log a model uniforms and attributes.
 */
var logModel = function logModel(model, uniforms) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* window */].__SEER_INITIALIZED__ || __WEBPACK_IMPORTED_MODULE_0_seer___default.a.throttle('luma.gl:' + model.id, 1E3)) {
    return;
  }

  var attributesObject = Object.assign({}, model.geometry.attributes, model.attributes);
  var uniformsObject = Object.assign({}, model.uniforms, uniforms);

  __WEBPACK_IMPORTED_MODULE_0_seer___default.a.multiUpdate('luma.gl', model.id, [{ path: 'objects.uniforms', data: uniformsObject }, { path: 'objects.attributes', data: attributesObject }]);
};

/**
 * Remove a previously set model from the cache
 */
var removeModel = function removeModel(id) {
  delete models[id];
  __WEBPACK_IMPORTED_MODULE_0_seer___default.a.deleteItem('luma.gl', id);
};

/**
 * Recursively traverse an object given a path of properties and set the given value
 */
var recursiveSet = function recursiveSet(obj, path, value) {
  if (!obj) {
    return;
  }

  if (path.length > 1) {
    recursiveSet(obj[path[0]], path.slice(1), value);
  } else {
    obj[path[0]] = value;
  }
};

var overrides = new Map();

/**
 * Create an override on the specify layer, indexed by a valuePath array.
 * Do nothing in case Seer as not been initialized to prevent any preformance drawback.
 */
var setOverride = function setOverride(id, valuePath, value) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* window */].__SEER_INITIALIZED__) {
    return;
  }

  if (!overrides.has(id)) {
    overrides.set(id, new Map());
  }

  var uniforms = overrides.get(id);
  uniforms.set(valuePath, value);
};

/**
 * Apply overrides to a specific model's uniforms
 */
var getOverrides = function getOverrides(id, uniforms) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* window */].__SEER_INITIALIZED__ || !id) {
    return;
  }

  var overs = overrides.get(id);
  if (!overs) {
    return;
  }

  overs.forEach(function (value, valuePath) {
    recursiveSet(uniforms, valuePath, value);
  });
};

/**
 * Listen for luma.gl edit events
 */
__WEBPACK_IMPORTED_MODULE_0_seer___default.a.listenFor('luma.gl', function (payload) {
  var model = models[payload.itemKey];
  if (!model || payload.type !== 'edit' || payload.valuePath[0] !== 'uniforms') {
    return;
  }

  var valuePath = payload.valuePath.slice(1);
  setOverride(payload.itemKey, valuePath, payload.value);

  var uniforms = model.getUniforms();
  recursiveSet(uniforms, valuePath, payload.value);
  model.setUniforms(uniforms);
});
//# sourceMappingURL=seer-integration.js.map

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PICKING_RES = exports.MAX_POINT_LIGHTS = exports.MAX_TEXTURES = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _math = __webpack_require__(14);

var _utils = __webpack_require__(2);

var _group = __webpack_require__(60);

var _group2 = _interopRequireDefault(_group);

var _pickModels2 = __webpack_require__(62);

var _pickModels3 = _interopRequireDefault(_pickModels2);

var _assert = __webpack_require__(0);

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Scene Object management and rendering
/* eslint-disable max-statements, no-try-catch */

var MAX_TEXTURES = exports.MAX_TEXTURES = 10;
var MAX_POINT_LIGHTS = exports.MAX_POINT_LIGHTS = 4;
var PICKING_RES = exports.PICKING_RES = 4;

var INVALID_ARGUMENT = 'LumaGL.Scene invalid argument';

var DEFAULT_SCENE_OPTS = {
  lights: {
    enable: false,
    // ambient light
    ambient: { r: 0.2, g: 0.2, b: 0.2 },
    // directional light
    directional: {
      direction: { x: 1, y: 1, z: 1 },
      color: { r: 0, g: 0, b: 0 }
      // point light
      // points: []
    } },
  effects: {
    fog: false
    // { near, far, color }
  },
  clearColor: true,
  clearDepth: true,
  backgroundColor: { r: 0, g: 0, b: 0, a: 1 },
  backgroundDepth: 1
};

// Scene class

var Scene = function (_Group) {
  _inherits(Scene, _Group);

  function Scene(gl, opts) {
    _classCallCheck(this, Scene);

    (0, _assert2.default)(gl, INVALID_ARGUMENT);

    opts = (0, _utils.merge)(DEFAULT_SCENE_OPTS, opts);

    var _this = _possibleConstructorReturn(this, (Scene.__proto__ || Object.getPrototypeOf(Scene)).call(this, opts));

    _this.gl = gl;
    _this.config = opts;
    _this.needsRedraw = false;
    Object.seal(_this);
    return _this;
  }

  _createClass(Scene, [{
    key: 'setNeedsRedraw',
    value: function setNeedsRedraw() {
      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this.needsRedraw = redraw;
      return this;
    }
  }, {
    key: 'getNeedsRedraw',
    value: function getNeedsRedraw() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$clearRedrawFlags = _ref.clearRedrawFlags,
          clearRedrawFlags = _ref$clearRedrawFlags === undefined ? false : _ref$clearRedrawFlags;

      var redraw = false;
      redraw = redraw || this.needsRedraw;
      this.needsRedraw = this.needsRedraw && !clearRedrawFlags;
      this.traverse(function (model) {
        redraw = redraw || model.getNeedsRedraw({ clearRedrawFlags: clearRedrawFlags });
      });
      return redraw;
    }
  }, {
    key: 'clear',
    value: function clear() {
      var gl = this.gl;

      if (this.config.clearColor) {
        var bg = this.config.backgroundColor;
        gl.clearColor(bg.r, bg.g, bg.b, bg.a);
      }
      if (this.config.clearDepth) {
        gl.clearDepth(this.config.backgroundDepth);
      }
      if (this.config.clearColor && this.config.clearDepth) {
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      } else if (this.config.clearColor) {
        gl.clear(gl.COLOR_BUFFER_BIT);
      } else if (this.config.clearDepth) {
        gl.clear(gl.DEPTH_BUFFER_BIT);
      }
      return this;
    }

    // Renders all objects in the scene.

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.clear();
      // Go through each model and render it.
      this.traverse(function (model) {
        if (model.display) {
          _this2.renderObject({ model: model, uniforms: uniforms });
        }
      });
      return this;
    }
  }, {
    key: 'renderObject',
    value: function renderObject(_ref2) {
      var model = _ref2.model,
          uniforms = _ref2.uniforms;

      // Setup lighting and scene effects like fog, etc.
      uniforms = Object.assign({}, this.getSceneUniforms(), uniforms);
      model.render(uniforms);
      return this;
    }
  }, {
    key: 'pickModels',
    value: function pickModels() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var x = opts.x,
          y = opts.y,
          _opts$uniforms = opts.uniforms,
          uniforms = _opts$uniforms === undefined ? {} : _opts$uniforms;

      return (0, _pickModels3.default)(this.gl, Object.assign({
        group: this,
        position: [x, y],
        uniforms: uniforms
      }, opts));
    }

    // Setup the lighting system: ambient, directional, point lights.

  }, {
    key: 'getSceneUniforms',
    value: function getSceneUniforms() {
      // Setup Lighting
      var _config$lights = this.config.lights,
          enable = _config$lights.enable,
          ambient = _config$lights.ambient,
          directional = _config$lights.directional,
          points = _config$lights.points;

      // Set light uniforms. Ambient and directional lights.

      return Object.assign({}, this.getEffectsUniforms(), { enableLights: enable }, enable && ambient ? this.getAmbientUniforms(ambient) : {}, enable && directional ? this.getDirectionalUniforms(directional) : {}, enable && points ? this.getPointUniforms(points) : {});
    }
  }, {
    key: 'getAmbientUniforms',
    value: function getAmbientUniforms(ambient) {
      return {
        ambientColor: [ambient.r, ambient.g, ambient.b]
      };
    }
  }, {
    key: 'getDirectionalUniforms',
    value: function getDirectionalUniforms(directional) {
      var color = directional.color,
          direction = directional.direction;

      // Normalize lighting direction vector

      var dir = new _math.Vector3(direction.x, direction.y, direction.z).normalize().scale(-1, -1, -1);

      return {
        directionalColor: [color.r, color.g, color.b],
        lightingDirection: [dir.x, dir.y, dir.z]
      };
    }
  }, {
    key: 'getPointUniforms',
    value: function getPointUniforms(points) {
      points = points instanceof Array ? points : [points];
      var numberPoints = points.length;
      var uniforms = { numberPoints: numberPoints };

      var pointLocations = [];
      var pointColors = [];
      var enableSpecular = [];
      var pointSpecularColors = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var point = _step.value;
          var position = point.position,
              color = point.color,
              diffuse = point.diffuse,
              specular = point.specular;

          var pointColor = color || diffuse;

          pointLocations.push(position.x, position.y, position.z);
          pointColors.push(pointColor.r, pointColor.g, pointColor.b);

          // Add specular color
          enableSpecular.push(Number(Boolean(specular)));
          if (specular) {
            pointSpecularColors.push(specular.r, specular.g, specular.b);
          } else {
            pointSpecularColors.push(0, 0, 0);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (pointLocations.length) {
        Object.assign(uniforms, {
          pointLocation: pointLocations,
          pointColor: pointColors,
          enableSpecular: enableSpecular,
          pointSpecularColor: pointSpecularColors
        });
      }

      return uniforms;
    }

    // Setup effects like fog, etc.

  }, {
    key: 'getEffectsUniforms',
    value: function getEffectsUniforms() {
      var fog = this.config.effects.fog;


      if (fog) {
        var _fog$color = fog.color,
            color = _fog$color === undefined ? { r: 0.5, g: 0.5, b: 0.5 } : _fog$color;

        return {
          hasFog: true,
          fogNear: fog.near,
          fogFar: fog.far,
          fogColor: [color.r, color.g, color.b]
        };
      }
      return { hasFog: false };
    }
  }]);

  return Scene;
}(_group2.default);

exports.default = Scene;


Scene.MAX_TEXTURES = 4;
Scene.MAX_POINT_LIGHTS = 4;
Scene.PICKING_RES = 4;
//# sourceMappingURL=scene.js.map

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = "#define SHADER_NAME luma-default-fragment\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n// varyings\nvarying vec4 vColor;\nvarying vec4 vPickingColor;\nvarying vec2 vTexCoord;\nvarying vec3 lightWeighting;\nvarying vec3 vReflection;\nvarying vec4 vNormal;\n\n// texture configs\nuniform bool hasTexture1;\nuniform sampler2D sampler1;\nuniform bool hasTextureCube1;\nuniform samplerCube samplerCube1;\n\n// picking configs\nuniform bool enablePicking;\nuniform bool hasPickingColors;\nuniform vec3 pickColor;\n\n// reflection / refraction configs\nuniform float reflection;\nuniform float refraction;\n\n// fog configuration\nuniform bool hasFog;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\n\nvoid main(){\n  // set color from texture\n  if (!hasTexture1) {\n    gl_FragColor = vec4(vColor.rgb, vColor.a);\n  } else {\n    gl_FragColor =\n      vec4(texture2D(sampler1, vec2(vTexCoord.s, vTexCoord.t)).rgb, 1.0);\n  }\n  // gl_FragColor.rgba *= lightWeighting\n\n  // has cube texture then apply reflection\n  // if (hasTextureCube1) {\n  //   vec3 nReflection = normalize(vReflection);\n  //   vec3 reflectionValue;\n  //   if (refraction > 0.0) {\n  //    reflectionValue = refract(nReflection, vNormal.xyz, refraction);\n  //   } else {\n  //    reflectionValue = -reflect(nReflection, vNormal.xyz);\n  //   }\n\n  //   // TODO(nico): check whether this is right.\n  //   vec4 cubeColor = textureCube(samplerCube1,\n  //       vec3(-reflectionValue.x, -reflectionValue.y, reflectionValue.z));\n  //   gl_FragColor = vec4(mix(gl_FragColor.xyz, cubeColor.xyz, reflection), 1.0);\n  // }\n\n  // set picking\n  // if (enablePicking) {\n  //   if (hasPickingColors) {\n  //     gl_FragColor = vPickingColor;\n  //   } else {\n  //     gl_FragColor = vec4(pickColor, 1.0);\n  //   }\n  // }\n\n  // handle fog\n  // if (hasFog) {\n  //   float depth = gl_FragCoord.z / gl_FragCoord.w;\n  //   float fogFactor = smoothstep(fogNear, fogFar, depth);\n  //   gl_FragColor = mix(gl_FragColor, vec4(fogColor, gl_FragColor.w), fogFactor);\n  // }\n}\n";
//# sourceMappingURL=default-fragment.glsl.js.map

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  hasTexture1: false,
  hasTextureCube1: false,

  enableLights: false,
  useReflection: false,

  // picking configs
  enablePicking: false,
  hasPickingColors: false,

  // fog configuration
  hasFog: false
};
//# sourceMappingURL=default-uniforms.js.map

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = "#define SHADER_NAME luma-default-vertex\n\n#define LIGHT_MAX 4\n\n// object attributes\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec4 colors;\nattribute vec4 pickingColors;\nattribute vec2 texCoords;\n\n// camera and object matrices\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 viewInverseMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\n\n// objectMatrix * viewMatrix = worldMatrix\nuniform mat4 worldMatrix;\nuniform mat4 worldInverseMatrix;\nuniform mat4 worldInverseTransposeMatrix;\nuniform mat4 objectMatrix;\nuniform vec3 cameraPosition;\n\n// lighting configuration\nuniform bool enableLights;\nuniform vec3 ambientColor;\nuniform vec3 directionalColor;\nuniform vec3 lightingDirection;\n\n// point lights configuration\nuniform vec3 pointLocation[LIGHT_MAX];\nuniform vec3 pointColor[LIGHT_MAX];\nuniform int numberPoints;\n\n// reflection / refraction configuration\nuniform bool useReflection;\n\n// varyings\nvarying vec3 vReflection;\nvarying vec4 vColor;\nvarying vec4 vPickingColor;\nvarying vec2 vTexCoord;\nvarying vec4 vNormal;\nvarying vec3 lightWeighting;\n\nvoid main(void) {\n\n  vec4 mvPosition = worldMatrix * vec4(positions, 1.0);\n  vec4 transformedNormal = worldInverseTransposeMatrix * vec4(normals, 1.0);\n\n  // lighting code\n  if(!enableLights) {\n    lightWeighting = vec3(1.0, 1.0, 1.0);\n  } else {\n    vec3 plightDirection;\n    vec3 pointWeight = vec3(0.0, 0.0, 0.0);\n    float directionalLightWeighting =\n      max(dot(transformedNormal.xyz, lightingDirection), 0.0);\n    for (int i = 0; i < LIGHT_MAX; i++) {\n      if (i < numberPoints) {\n        plightDirection = normalize(\n          (viewMatrix * vec4(pointLocation[i], 1.0)).xyz - mvPosition.xyz);\n         pointWeight += max(\n          dot(transformedNormal.xyz, plightDirection), 0.0) * pointColor[i];\n       } else {\n         break;\n       }\n     }\n\n    lightWeighting = ambientColor +\n      (directionalColor * directionalLightWeighting) + pointWeight;\n  }\n\n  // refraction / reflection code\n  if (useReflection) {\n    vReflection =\n      (viewInverseMatrix[3] - (worldMatrix * vec4(positions, 1.0))).xyz;\n  } else {\n    vReflection = vec3(1.0, 1.0, 1.0);\n  }\n\n  // pass results to varyings\n  vColor = colors;\n  vPickingColor = pickingColors;\n  vTexCoord = texCoords;\n  // vNormal = transformedNormal;\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(positions, 1.0);\n}\n";
//# sourceMappingURL=default-vertex.glsl.js.map

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.requestFile = requestFile;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Supports loading (requesting) assets with XHR (XmlHttpRequest)
/* eslint-disable guard-for-in, complexity, no-try-catch */

/* global XMLHttpRequest */
function noop() {}

var XHR_STATES = {
  UNINITIALIZED: 0,
  LOADING: 1,
  LOADED: 2,
  INTERACTIVE: 3,
  COMPLETED: 4
};

var XHR = function () {
  function XHR(_ref) {
    var url = _ref.url,
        _ref$path = _ref.path,
        path = _ref$path === undefined ? null : _ref$path,
        _ref$method = _ref.method,
        method = _ref$method === undefined ? 'GET' : _ref$method,
        _ref$asynchronous = _ref.asynchronous,
        asynchronous = _ref$asynchronous === undefined ? true : _ref$asynchronous,
        _ref$noCache = _ref.noCache,
        noCache = _ref$noCache === undefined ? false : _ref$noCache,
        _ref$sendAsBinary = _ref.sendAsBinary,
        sendAsBinary = _ref$sendAsBinary === undefined ? false : _ref$sendAsBinary,
        _ref$responseType = _ref.responseType,
        responseType = _ref$responseType === undefined ? false : _ref$responseType,
        _ref$onProgress = _ref.onProgress,
        onProgress = _ref$onProgress === undefined ? noop : _ref$onProgress,
        _ref$onError = _ref.onError,
        onError = _ref$onError === undefined ? noop : _ref$onError,
        _ref$onAbort = _ref.onAbort,
        onAbort = _ref$onAbort === undefined ? noop : _ref$onAbort,
        _ref$onComplete = _ref.onComplete,
        onComplete = _ref$onComplete === undefined ? noop : _ref$onComplete;

    _classCallCheck(this, XHR);

    this.url = path ? path.join(path, url) : url;
    this.method = method;
    this.async = asynchronous;
    this.noCache = noCache;
    this.sendAsBinary = sendAsBinary;
    this.responseType = responseType;

    this.req = new XMLHttpRequest();

    this.req.onload = function (e) {
      return onComplete(e);
    };
    this.req.onerror = function (e) {
      return onError(e);
    };
    this.req.onabort = function (e) {
      return onAbort(e);
    };
    this.req.onprogress = function (e) {
      if (e.lengthComputable) {
        onProgress(e, Math.round(e.loaded / e.total * 100));
      } else {
        onProgress(e, -1);
      }
    };
  }

  _createClass(XHR, [{
    key: 'setRequestHeader',
    value: function setRequestHeader(header, value) {
      this.req.setRequestHeader(header, value);
      return this;
    }

    // /* eslint-disable max-statements */

  }, {
    key: 'sendAsync',
    value: function sendAsync() {
      var _this = this;

      var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.body || null;

      return new Promise(function (resolve, reject) {
        try {
          var req = _this.req,
              method = _this.method,
              noCache = _this.noCache,
              sendAsBinary = _this.sendAsBinary,
              responseType = _this.responseType;


          var url = noCache ? _this.url + (_this.url.indexOf('?') >= 0 ? '&' : '?') + Date.now() : _this.url;

          req.open(method, url, _this.async);

          if (responseType) {
            req.responseType = responseType;
          }

          if (_this.async) {
            req.onreadystatechange = function (e) {
              if (req.readyState === XHR_STATES.COMPLETED) {
                if (req.status === 200) {
                  resolve(req.responseType ? req.response : req.responseText);
                } else {
                  reject(new Error(req.status + ': ' + url));
                }
              }
            };
          }

          if (sendAsBinary) {
            req.sendAsBinary(body);
          } else {
            req.send(body);
          }

          if (!_this.async) {
            if (req.status === 200) {
              resolve(req.responseType ? req.response : req.responseText);
            } else {
              reject(new Error(req.status + ': ' + url));
            }
          }
        } catch (error) {
          reject(error);
        }
      });
    }
    /* eslint-enable max-statements */

  }]);

  return XHR;
}();

function requestFile(opts) {
  var xhr = new XHR(opts);
  return xhr.sendAsync();
}
//# sourceMappingURL=browser-request-file.js.map

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _browserLoad = __webpack_require__(69);

Object.defineProperty(exports, 'setPathPrefix', {
  enumerable: true,
  get: function get() {
    return _browserLoad.setPathPrefix;
  }
});
Object.defineProperty(exports, 'loadFile', {
  enumerable: true,
  get: function get() {
    return _browserLoad.loadFile;
  }
});
Object.defineProperty(exports, 'loadImage', {
  enumerable: true,
  get: function get() {
    return _browserLoad.loadImage;
  }
});

var _loadFiles = __webpack_require__(169);

Object.defineProperty(exports, 'loadFiles', {
  enumerable: true,
  get: function get() {
    return _loadFiles.loadFiles;
  }
});
Object.defineProperty(exports, 'loadImages', {
  enumerable: true,
  get: function get() {
    return _loadFiles.loadImages;
  }
});
Object.defineProperty(exports, 'loadTextures', {
  enumerable: true,
  get: function get() {
    return _loadFiles.loadTextures;
  }
});
Object.defineProperty(exports, 'loadProgram', {
  enumerable: true,
  get: function get() {
    return _loadFiles.loadProgram;
  }
});
Object.defineProperty(exports, 'loadModel', {
  enumerable: true,
  get: function get() {
    return _loadFiles.loadModel;
  }
});
Object.defineProperty(exports, 'parseModel', {
  enumerable: true,
  get: function get() {
    return _loadFiles.parseModel;
  }
});
//# sourceMappingURL=index.js.map

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /* eslint-disable guard-for-in, complexity, no-try-catch */


exports.loadTexture = loadTexture;
exports.loadFiles = loadFiles;
exports.loadImages = loadImages;
exports.loadTextures = loadTextures;
exports.loadProgram = loadProgram;
exports.loadModel = loadModel;
exports.parseModel = parseModel;

var _assert = __webpack_require__(0);

var _assert2 = _interopRequireDefault(_assert);

var _browserLoad = __webpack_require__(69);

var _webgl = __webpack_require__(12);

var _core = __webpack_require__(10);

var _geometry = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function noop() {}

function loadTexture(gl, url) {
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var urls = opts.urls,
      _opts$onProgress = opts.onProgress,
      onProgress = _opts$onProgress === undefined ? noop : _opts$onProgress;

  (0, _assert2.default)(typeof url === 'string', 'loadTexture: url must be string');

  return loadImages(Object.assign({ urls: urls, onProgress: onProgress }, opts)).then(function (images) {
    return images.map(function (img, i) {
      return new _webgl.Texture2D(gl, Object.assign({ id: urls[i] }, opts, { data: img }));
    });
  });
}

/*
 * Loads (Requests) multiple files asynchronously
 */
function loadFiles() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var urls = opts.urls,
      _opts$onProgress2 = opts.onProgress,
      onProgress = _opts$onProgress2 === undefined ? noop : _opts$onProgress2;

  (0, _assert2.default)(urls.every(function (url) {
    return typeof url === 'string';
  }), 'loadImages: {urls} must be array of strings');
  var count = 0;
  return Promise.all(urls.map(function (url) {
    var promise = (0, _browserLoad.loadFile)(Object.assign({ url: url }, opts));
    promise.then(function (file) {
      return onProgress({
        progress: ++count / urls.length,
        count: count,
        total: urls.length,
        url: url
      });
    });
    return promise;
  }));
}

/*
 * Loads (requests) multiple images asynchronously
 */
function loadImages() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var urls = opts.urls,
      _opts$onProgress3 = opts.onProgress,
      onProgress = _opts$onProgress3 === undefined ? noop : _opts$onProgress3;

  (0, _assert2.default)(urls.every(function (url) {
    return typeof url === 'string';
  }), 'loadImages: {urls} must be array of strings');
  var count = 0;
  return Promise.all(urls.map(function (url) {
    var promise = (0, _browserLoad.loadImage)(url, opts);
    promise.then(function (file) {
      return onProgress({
        progress: ++count / urls.length,
        count: count,
        total: urls.length,
        url: url
      });
    });
    return promise;
  }));
}

function loadTextures(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var urls = opts.urls,
      _opts$onProgress4 = opts.onProgress,
      onProgress = _opts$onProgress4 === undefined ? noop : _opts$onProgress4;

  (0, _assert2.default)(urls.every(function (url) {
    return typeof url === 'string';
  }), 'loadTextures: {urls} must be array of strings');

  return loadImages(Object.assign({ urls: urls, onProgress: onProgress }, opts)).then(function (images) {
    return images.map(function (img, i) {
      var params = Array.isArray(opts.parameters) ? opts.parameters[i] : opts.parameters;
      params = params === undefined ? {} : params;
      return new _webgl.Texture2D(gl, Object.assign({ id: urls[i] }, params, { data: img }));
    });
  });
}

function loadProgram(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var vs = opts.vs,
      fs = opts.fs,
      _opts$onProgress5 = opts.onProgress,
      onProgress = _opts$onProgress5 === undefined ? noop : _opts$onProgress5;

  return loadFiles(Object.assign({ urls: [vs, fs], onProgress: onProgress }, opts)).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        vsText = _ref2[0],
        fsText = _ref2[1];

    return new _webgl.Program(gl, Object.assign({ vs: vsText, fs: fsText }, opts));
  });
}

// Loads a simple JSON format
function loadModel(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var url = opts.url,
      _opts$onProgress6 = opts.onProgress,
      onProgress = _opts$onProgress6 === undefined ? noop : _opts$onProgress6;

  return loadFiles(Object.assign({ urls: [url], onProgress: onProgress }, opts)).then(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
        file = _ref4[0];

    return parseModel(gl, Object.assign({ file: file }, opts));
  });
}

function parseModel(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var file = opts.file,
      _opts$program = opts.program,
      program = _opts$program === undefined ? new _webgl.Program(gl) : _opts$program;

  var json = typeof file === 'string' ? parseJSON(file) : file;
  // Remove any attributes so that we can create a geometry
  // TODO - change format to put these in geometry sub object?
  var attributes = {};
  var modelOptions = {};
  for (var key in json) {
    var value = json[key];
    if (Array.isArray(value)) {
      attributes[key] = key === 'indices' ? new Uint16Array(value) : new Float32Array(value);
    } else {
      modelOptions[key] = value;
    }
  }

  return new _core.Model(gl, Object.assign({ program: program, geometry: new _geometry.Geometry({ attributes: attributes }) }, modelOptions, opts));
}

function parseJSON(file) {
  try {
    return JSON.parse(file);
  } catch (error) {
    throw new Error('Failed to parse JSON: ' + error);
  }
}
//# sourceMappingURL=load-files.js.map

/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl__ = __webpack_require__(12);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// ClipSpaceQuad




var CLIPSPACE_QUAD_VERTEX_SHADER = 'attribute vec2 aClipSpacePosition;\nattribute vec2 aTexCoord;\nattribute vec2 aCoordinate;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\n  position = aClipSpacePosition;\n  coordinate = aCoordinate;\n  uv = aTexCoord;\n}\n';

/* eslint-disable indent, no-multi-spaces */
var POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];

var ClipSpaceQuad = /*#__PURE__*/function (_Model) {
  _inherits(ClipSpaceQuad, _Model);

  function ClipSpaceQuad(gl, opts) {
    _classCallCheck(this, ClipSpaceQuad);

    var TEX_COORDS = POSITIONS.map(function (coord) {
      return coord === -1 ? 0 : coord;
    });

    var _this = _possibleConstructorReturn(this, (ClipSpaceQuad.__proto__ || Object.getPrototypeOf(ClipSpaceQuad)).call(this, gl, Object.assign({}, opts, {
      vs: CLIPSPACE_QUAD_VERTEX_SHADER,
      geometry: new __WEBPACK_IMPORTED_MODULE_1__geometry__["Geometry"]({
        drawMode: __WEBPACK_IMPORTED_MODULE_2__webgl__["GL"].TRIANGLE_STRIP,
        vertexCount: 4,
        attributes: {
          aClipSpacePosition: { size: 2, value: new Float32Array(POSITIONS) },
          aTexCoord: { size: 2, value: new Float32Array(TEX_COORDS) },
          aCoordinate: { size: 2, value: new Float32Array(TEX_COORDS) }
        }
      })
    })));

    _this.setVertexCount(4);
    return _this;
  }

  return ClipSpaceQuad;
}(__WEBPACK_IMPORTED_MODULE_0__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (ClipSpaceQuad);
//# sourceMappingURL=clip-space-quad.js.map

/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core__ = __webpack_require__(10);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var Cone = /*#__PURE__*/function (_Model) {
  _inherits(Cone, _Model);

  function Cone(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Cone);

    return _possibleConstructorReturn(this, (Cone.__proto__ || Object.getPrototypeOf(Cone)).call(this, gl, Object.assign({}, opts, { geometry: new __WEBPACK_IMPORTED_MODULE_0__geometry__["ConeGeometry"](opts) })));
  }

  return Cone;
}(__WEBPACK_IMPORTED_MODULE_1__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (Cone);
//# sourceMappingURL=cone.js.map

/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Cube = /*#__PURE__*/function (_Model) {
  _inherits(Cube, _Model);

  function Cube(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Cube);

    var _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils__["uid"])('cube') : _opts$id;
    return _possibleConstructorReturn(this, (Cube.__proto__ || Object.getPrototypeOf(Cube)).call(this, gl, Object.assign({}, opts, { id: id, geometry: new __WEBPACK_IMPORTED_MODULE_0__geometry__["CubeGeometry"](opts) })));
  }

  return Cube;
}(__WEBPACK_IMPORTED_MODULE_1__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (Cube);
//# sourceMappingURL=cube.js.map

/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_model__ = __webpack_require__(20);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var Cylinder = /*#__PURE__*/function (_Model) {
  _inherits(Cylinder, _Model);

  function Cylinder(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Cylinder);

    return _possibleConstructorReturn(this, (Cylinder.__proto__ || Object.getPrototypeOf(Cylinder)).call(this, gl, Object.assign({}, opts, { geometry: new __WEBPACK_IMPORTED_MODULE_0__geometry__["CylinderGeometry"](opts) })));
  }

  return Cylinder;
}(__WEBPACK_IMPORTED_MODULE_1__core_model__["a" /* default */]);

/* unused harmony default export */ var _unused_webpack_default_export = (Cylinder);
//# sourceMappingURL=cylinder.js.map

/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geometry__ = __webpack_require__(6);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var IcoSphere = /*#__PURE__*/function (_Model) {
  _inherits(IcoSphere, _Model);

  function IcoSphere(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, IcoSphere);

    return _possibleConstructorReturn(this, (IcoSphere.__proto__ || Object.getPrototypeOf(IcoSphere)).call(this, gl, Object.assign({}, opts, { geometry: new __WEBPACK_IMPORTED_MODULE_1__geometry__["IcoSphereGeometry"](opts) })));
  }

  return IcoSphere;
}(__WEBPACK_IMPORTED_MODULE_0__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (IcoSphere);
//# sourceMappingURL=ico-sphere.js.map

/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_model__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Plane = /*#__PURE__*/function (_Model) {
  _inherits(Plane, _Model);

  function Plane(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Plane);

    var _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils__["uid"])('plane') : _opts$id;
    return _possibleConstructorReturn(this, (Plane.__proto__ || Object.getPrototypeOf(Plane)).call(this, gl, Object.assign({}, opts, { id: id, geometry: new __WEBPACK_IMPORTED_MODULE_0__geometry__["PlaneGeometry"](opts) })));
  }

  return Plane;
}(__WEBPACK_IMPORTED_MODULE_1__core_model__["a" /* default */]);

/* unused harmony default export */ var _unused_webpack_default_export = (Plane);
//# sourceMappingURL=plane.js.map

/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Sphere = /*#__PURE__*/function (_Model) {
  _inherits(Sphere, _Model);

  function Sphere(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Sphere);

    var _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils__["uid"])('sphere') : _opts$id;
    return _possibleConstructorReturn(this, (Sphere.__proto__ || Object.getPrototypeOf(Sphere)).call(this, gl, Object.assign({}, opts, { id: id, geometry: new __WEBPACK_IMPORTED_MODULE_1__geometry__["SphereGeometry"](opts) })));
  }

  return Sphere;
}(__WEBPACK_IMPORTED_MODULE_0__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (Sphere);
//# sourceMappingURL=sphere.js.map

/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core__ = __webpack_require__(10);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var TruncatedCone = /*#__PURE__*/function (_Model) {
  _inherits(TruncatedCone, _Model);

  function TruncatedCone(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, TruncatedCone);

    return _possibleConstructorReturn(this, (TruncatedCone.__proto__ || Object.getPrototypeOf(TruncatedCone)).call(this, gl, Object.assign({}, opts, { geometry: new __WEBPACK_IMPORTED_MODULE_0__geometry__["TruncatedConeGeometry"](opts) })));
  }

  return TruncatedCone;
}(__WEBPACK_IMPORTED_MODULE_1__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (TruncatedCone);
//# sourceMappingURL=truncated-cone.js.map

/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export stop */
/* unused harmony export get */
/* unused harmony export getWheel */
/* unused harmony export getKey */
/* unused harmony export isRightClick */
/* unused harmony export getPos */
/* unused harmony export EventsProxy */
/* unused harmony export Keys */
/* unused harmony export addEvents */
/* unused harmony export removeEvents */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// event.js
// Handle keyboard/mouse/touch events in the Canvas
// TODO - this will not work under node

/* eslint-disable dot-notation, max-statements, no-loop-func */
/* global window, document */
function noop() {}

var KEYS = {
  enter: 13,
  up: 38,
  down: 40,
  left: 37,
  right: 39,
  esc: 27,
  space: 32,
  backspace: 8,
  tab: 9,
  delete: 46
};

// returns an O3D object or false otherwise.
function toO3D(n) {
  return n !== true ? n : false;
}

// Returns an element position
function _getPos(elem) {
  var bbox = elem.getBoundingClientRect();
  return {
    x: bbox.left,
    y: bbox.top,
    bbox: bbox
  };
}

// event object wrapper
function get(e, win) {
  win = win || window;
  return e || win.event;
}

function getWheel(e) {
  return e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
}

function getKey(e) {
  var code = e.which || e.keyCode;
  var key = keyOf(code);
  // onkeydown
  var fKey = code - 111;
  if (fKey > 0 && fKey < 13) {
    key = 'f' + fKey;
  }
  key = key || String.fromCharCode(code).toLowerCase();

  return {
    code: code,
    key: key,
    shift: e.shiftKey,
    control: e.ctrlKey,
    alt: e.altKey,
    meta: e.metaKey
  };
}

function isRightClick(e) {
  return e.which === 3 || e.button === 2;
}

function getPos(e, win) {
  // get mouse position
  win = win || window;
  e = e || win.event;
  var doc = win.document;
  doc = doc.documentElement || doc.body;
  // TODO(nico): make touch event handling better
  if (e.touches && e.touches.length) {
    var touchesPos = [];
    var l = e.touches.length;
    var evt = void 0;
    for (var i = 0; i < l; ++i) {
      evt = e.touches[i];
      touchesPos.push({
        x: evt.pageX || evt.clientX + doc.scrollLeft,
        y: evt.pageY || evt.clientY + doc.scrollTop
      });
    }
    return touchesPos;
  }
  var page = {
    x: e.pageX || e.clientX + doc.scrollLeft,
    y: e.pageY || e.clientY + doc.scrollTop
  };
  return [page];
}

function _stop(e) {
  if (e.stopPropagation) {
    e.stopPropagation();
  }
  e.cancelBubble = true;
  if (e.preventDefault) {
    e.preventDefault();
  } else {
    e.returnValue = false;
  }
}

var EventsProxy = /*#__PURE__*/function () {
  function EventsProxy(domElem, opt) {
    _classCallCheck(this, EventsProxy);

    this.scene = opt.scene;
    this.domElem = domElem;
    this.pos = _getPos(domElem);
    this.opt = this.callbacks = opt;

    this.size = {
      width: domElem.width || domElem.offsetWidth,
      height: domElem.height || domElem.offsetHeight
    };

    this.attachEvents();
  }

  _createClass(EventsProxy, [{
    key: 'attachEvents',
    value: function attachEvents() {
      var _this = this;

      var domElem = this.domElem;
      var opt = this.opt;

      if (opt.disableContextMenu) {
        domElem.oncontextmenu = function () {
          return false;
        };
      }

      if (opt.enableMouse) {
        ['mouseup', 'mousedown', 'mousemove', 'mouseover', 'mouseout'].forEach(function (action) {
          domElem.addEventListener(action, function (e, win) {
            _this[action](_this.eventInfo(action, e, win));
          }, false);
        });

        // "well, this is embarrassing..."
        var type = '';
        if (!document.getBoxObjectFor && window.mozInnerScreenX === null) {
          type = 'mousewheel';
        } else {
          type = 'DOMMouseScroll';
        }
        domElem.addEventListener(type, function (e, win) {
          _this['mousewheel'](_this.eventInfo('mousewheel', e, win));
        }, false);
      }

      if (opt.enableTouch) {
        ['touchstart', 'touchmove', 'touchend'].forEach(function (action) {
          domElem.addEventListener(action, function (e, win) {
            _this[action](_this.eventInfo(action, e, win));
          }, false);
        });
      }

      if (opt.enableKeyboard) {
        ['keydown', 'keyup'].forEach(function (action) {
          document.addEventListener(action, function (e, win) {
            _this[action](_this.eventInfo(action, e, win));
          }, false);
        });
      }
    }
  }, {
    key: 'eventInfo',
    value: function eventInfo(type, e, win) {
      var domElem = this.domElem;
      var scene = this.scene;
      var opt = this.opt;
      var size = this.getSize();
      var relative = opt.relative;
      var centerOrigin = opt.centerOrigin;
      var pos = opt.cachePosition && this.pos || _getPos(domElem);
      var ge = get(e, win);
      var epos = getPos(e, win);
      var origPos = { x: epos[0].x, y: epos[0].y };
      var evt = {};
      var x = void 0;
      var y = void 0;

      // get Position
      for (var i = 0, l = epos.length; i < l; ++i) {
        x = epos[i].x;
        y = epos[i].y;
        if (relative) {
          x -= pos.x;y -= pos.y;
          if (centerOrigin) {
            x -= size.width / 2;
            y -= size.height / 2;
            // y axis now points to the top of the screen
            y *= -1;
          }
        }
        epos[i].x = x;
        epos[i].y = y;
      }

      switch (type) {
        case 'mousewheel':
          evt.wheel = getWheel(ge);
          break;
        case 'keydown':
        case 'keyup':
          Object.assign(evt, getKey(ge));
          break;
        case 'mouseup':
          evt.isRightClick = isRightClick(ge);
          break;
        default:
          break;
      }

      var cacheTarget = void 0;

      Object.assign(evt, {
        x: epos[0].x,
        y: epos[0].y,
        posArray: epos,

        cache: false,
        // stop event propagation
        stop: function stop() {
          _stop(ge);
        },

        // get the target element of the event
        getTarget: function getTarget() {
          if (cacheTarget) {
            return cacheTarget;
          }
          return cacheTarget = opt.picking && scene.pick(origPos.x - pos.x, origPos.y - pos.y) || true;
        }
      });
      // wrap native event
      evt.event = ge;

      return evt;
    }
  }, {
    key: 'getSize',
    value: function getSize() {
      if (this.cacheSize) {
        return this.size;
      }
      var domElem = this.domElem;
      return {
        width: domElem.width || domElem.offsetWidth,
        height: domElem.height || domElem.offsetHeight
      };
    }
  }, {
    key: 'mouseup',
    value: function mouseup(e) {
      if (!this.moved) {
        if (e.isRightClick) {
          this.callbacks.onRightClick(e, this.hovered);
        } else {
          this.callbacks.onClick(e, toO3D(this.pressed));
        }
      }
      if (this.pressed) {
        if (this.moved) {
          this.callbacks.onDragEnd(e, toO3D(this.pressed));
        } else {
          this.callbacks.onDragCancel(e, toO3D(this.pressed));
        }
        this.pressed = this.moved = false;
      }
    }
  }, {
    key: 'mouseout',
    value: function mouseout(e) {
      // mouseout canvas
      var rt = e.relatedTarget;
      var domElem = this.domElem;
      while (rt && rt.parentNode) {
        if (domElem === rt.parentNode) {
          return;
        }
        rt = rt.parentNode;
      }
      if (this.hovered) {
        this.callbacks.onMouseLeave(e, this.hovered);
        this.hovered = false;
      }
      if (this.pressed && this.moved) {
        this.callbacks.onDragEnd(e);
        this.pressed = this.moved = false;
      }
    }
  }, {
    key: 'mouseover',
    value: function mouseover(e) {}
  }, {
    key: 'mousemove',
    value: function mousemove(e) {
      if (this.pressed) {
        this.moved = true;
        this.callbacks.onDragMove(e, toO3D(this.pressed));
        return;
      }
      if (this.hovered) {
        var target = toO3D(e.getTarget());
        if (!target || target.hash !== this.hash) {
          this.callbacks.onMouseLeave(e, this.hovered);
          this.hovered = target;
          this.hash = target;
          if (target) {
            this.hash = target.hash;
            this.callbacks.onMouseEnter(e, this.hovered);
          }
        } else {
          this.callbacks.onMouseMove(e, this.hovered);
        }
      } else {
        this.hovered = toO3D(e.getTarget());
        this.hash = this.hovered;
        if (this.hovered) {
          this.hash = this.hovered.hash;
          this.callbacks.onMouseEnter(e, this.hovered);
        }
      }
      if (!this.opt.picking) {
        this.callbacks.onMouseMove(e);
      }
    }
  }, {
    key: 'mousewheel',
    value: function mousewheel(e) {
      this.callbacks.onMouseWheel(e);
    }
  }, {
    key: 'mousedown',
    value: function mousedown(e) {
      this.pressed = e.getTarget();
      this.callbacks.onDragStart(e, toO3D(this.pressed));
    }
  }, {
    key: 'touchstart',
    value: function touchstart(e) {
      this.touched = e.getTarget();
      this.touchedLastPosition = { x: e.x, y: e.y };
      this.callbacks.onTouchStart(e, toO3D(this.touched));
    }
  }, {
    key: 'touchmove',
    value: function touchmove(e) {
      if (this.touched) {
        this.touchMoved = true;
        this.callbacks.onTouchMove(e, toO3D(this.touched));
      }
    }
  }, {
    key: 'touchend',
    value: function touchend(e) {
      if (this.touched) {
        if (this.touchMoved) {
          this.callbacks.onTouchEnd(e, toO3D(this.touched));
        } else {
          e.x = isNaN(e.x) ? this.touchedLastPosition.x : e.x;
          e.y = isNaN(e.y) ? this.touchedLastPosition.y : e.y;
          this.callbacks.onTap(e, toO3D(this.touched));
          this.callbacks.onTouchCancel(e, toO3D(this.touched));
        }
        this.touched = this.touchMoved = false;
      }
    }
  }, {
    key: 'keydown',
    value: function keydown(e) {
      this.callbacks.onKeyDown(e);
    }
  }, {
    key: 'keyup',
    value: function keyup(e) {
      this.callbacks.onKeyUp(e);
    }
  }]);

  return EventsProxy;
}();

Object.assign(EventsProxy.prototype, {
  hovered: false,
  pressed: false,
  touched: false,
  touchedLastPosition: { x: 0, y: 0 },
  touchMoved: false,
  moved: false
});

var DEFAULT_OPTS = {
  cachePosition: true,
  cacheSize: true,
  relative: true,
  centerOrigin: true,
  disableContextMenu: true,
  bind: false,
  picking: false,

  enableTouch: true,
  enableMouse: true,
  enableKeyboard: true,

  onClick: noop,
  onRightClick: noop,
  onDragStart: noop,
  onDragMove: noop,
  onDragEnd: noop,
  onDragCancel: noop,
  onTouchStart: noop,
  onTouchMove: noop,
  onTouchEnd: noop,
  onTouchCancel: noop,
  onTap: noop,
  onMouseMove: noop,
  onMouseEnter: noop,
  onMouseLeave: noop,
  onMouseWheel: noop,
  onKeyDown: noop,
  onKeyUp: noop
};

var Keys = KEYS;

function keyOf(code) {
  var keyMap = Keys;
  for (var name in keyMap) {
    if (keyMap[name] === code) {
      return name;
    }
  }
  return null;
}

function addEvents(domElement) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  opt = Object.assign({}, DEFAULT_OPTS, opt);

  var bind = opt.bind;
  if (bind) {
    for (var name in opt) {
      if (name.match(/^on[a-zA-Z0-9]+$/)) {
        (function (fname, fn) {
          opt[fname] = function f() {
            fn.apply(bind, Array.prototype.slice.call(arguments));
          };
        })(name, opt[name]);
      }
    }
  }

  return new EventsProxy(domElement, opt);
}

function removeEvents(domElement) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  opt = Object.assign({}, DEFAULT_OPTS, opt);

  var bind = opt.bind;
  if (bind) {
    for (var name in opt) {
      if (name.match(/^on[a-zA-Z0-9]+$/)) {
        (function (fname, fn) {
          opt[fname] = function f() {
            fn.apply(bind, Array.prototype.slice.call(arguments));
          };
        })(name, opt[name]);
      }
    }
  }

  return new EventsProxy(domElement, opt);
}
//# sourceMappingURL=add-events.js.map

/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__add_events__ = __webpack_require__(178);
/* unused harmony reexport addEvents */

//# sourceMappingURL=index.js.map

/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_shader_modules__ = __webpack_require__(37);
/* unused harmony reexport registerShaderModules */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_assemble_shaders__ = __webpack_require__(72);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__lib_assemble_shaders__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lib_shader_cache__ = __webpack_require__(73);
/* unused harmony reexport ShaderCache */



//# sourceMappingURL=index.js.map

/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export checkRendererVendor */
/* harmony export (immutable) */ __webpack_exports__["a"] = getPlatformShaderDefines;
/* harmony export (immutable) */ __webpack_exports__["b"] = getVersionDefines;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_context_features__ = __webpack_require__(24);



function checkRendererVendor(debugInfo, gpuVendor) {
  var vendor = debugInfo.vendor,
      renderer = debugInfo.renderer;

  var result = void 0;
  switch (gpuVendor) {
    case 'nvidia':
      result = vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i);
      break;
    case 'intel':
      result = vendor.match(/INTEL/i) || renderer.match(/INTEL/i);
      break;
    case 'amd':
      result = vendor.match(/AMD/i) || renderer.match(/AMD/i) || vendor.match(/ATI/i) || renderer.match(/ATI/i);
      break;
    default:
      result = false;
  }
  return result;
}

function getPlatformShaderDefines(gl) {
  /* eslint-disable */
  var platformDefines = '';
  var debugInfo = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["getContextInfo"])(gl);

  if (checkRendererVendor(debugInfo, 'nvidia')) {
    platformDefines += '#define NVIDIA_GPU\n#define NVIDIA_FP64_WORKAROUND 1\n#define NVIDIA_EQUATION_WORKAROUND 1\n';
  } else if (checkRendererVendor(debugInfo, 'intel')) {
    platformDefines += '#define INTEL_GPU\n#define INTEL_FP64_WORKAROUND 1\n#define NVIDIA_EQUATION_WORKAROUND 1\n#define INTEL_TAN_WORKAROUND 1\n';
  } else if (checkRendererVendor(debugInfo, 'amd')) {
    platformDefines += '#define AMD_GPU\n';
  } else {
    platformDefines += '#define DEFAULT_GPU\n#define INTEL_TAN_WORKAROUND 1\n';
  }

  return platformDefines;
}

function getVersionDefines(gl) {
  var versionDefines = '// Defines for shader portability\n#if (__VERSION__ > 120)\n# define attribute in\n# define varying out\n# define FRAG_DEPTH\n# define DERIVATIVES\n# define DRAW_BUFFERS\n# define TEXTURE_LOD\n#else\n// # define in attribute\n// # define out varying\n#endif // __VERSION\n';

  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["b" /* hasFeature */])(gl, __WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["c" /* FEATURES */].GLSL_FRAG_DEPTH)) {
    versionDefines += '// FRAG_DEPTH => gl_FragDepth is available\n#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n# define FRAG_DEPTH\n# define gl_FragDepth gl_FragDepthEXT\n#endif\n';
  }
  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["b" /* hasFeature */])(gl, __WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["c" /* FEATURES */].GLSL_DERIVATIVES)) {
    versionDefines += '// DERIVATIVES => dxdF, dxdY and fwidth are available\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n# define DERIVATIVES\n#endif\n';
  }
  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["b" /* hasFeature */])(gl, __WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["c" /* FEATURES */].GLSL_FRAG_DATA)) {
    versionDefines += '// DRAW_BUFFERS => gl_FragData[] is available\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers : require\n#define DRAW_BUFFERS\n#endif\n';
  }
  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["b" /* hasFeature */])(gl, __WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["c" /* FEATURES */].GLSL_TEXTURE_LOD)) {
    versionDefines += '// TEXTURE_LOD => texture2DLod etc are available\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n# define TEXTURE_LOD\n#define texture2DLod texture2DLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define textureCubeLod textureCubeLodEXT\n#define texture2DGrad texture2DGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define textureCubeGrad textureCubeGradEXT\n#endif\n';
  }
  return versionDefines;
}
//# sourceMappingURL=platform-defines.js.map

/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Minimal texture (diffuse map) support

/* eslint-disable camelcase */
var DEFAULT_MODULE_OPTIONS = {
  diffuseTexture: null,
  diffuseColor: [0.5, 0.5, 0.5, 1]
};

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;

  var uniforms = {};
  if (opts.diffuseTexture !== undefined) {
    uniforms.diffuse_uHasTexture = Boolean(opts.diffuseTexture);
    uniforms.diffuse_uTexture = opts.diffuseTexture;
  }
  if (opts.diffuseColor !== undefined) {
    uniforms.diffuse_uColor = opts.diffuseColor;
  }
  return uniforms;
}

var vs = 'varying vec2 diffuse_vTexCoord;\n\n/* Set the UV coordinate from attributes */\nvoid diffuse_setTextureCoordinate(vec2 uv) {\n  diffuse_vTexCoord = uv;\n}\n';

var fs = 'uniform vec4 diffuse_uColor;\nuniform bool diffuse_uHasTexture;\nuniform sampler2D diffuse_uTexture;\n\nvarying vec2 diffuse_vTexCoord;\n\n// Gets diffuse color of material from uniform\n// If we have a standard (diffuse) texture, set color to texture\n// return (vec4) - rgba\n//\nvec4 diffuse_getColor() {\n  vec2 texCoord = diffuse_vTexCoord;\n  return diffuse_uHasTexture ?\n    texture2D(diffuse_uTexture, vec2(texCoord.s, texCoord.t)) :\n    diffuse_uColor;\n}\n\nvec4 diffuse_filterColor(vec4 color) {\n  return diffuse_getColor();\n}\n';

/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'diffuse',
  getUniforms: getUniforms,
  vs: vs,
  fs: fs
});
//# sourceMappingURL=diffuse.js.map

/***/ }),
/* 183 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__project_project__ = __webpack_require__(74);
// Cheap lighting - single directional light, single dot product, one uniform



/* eslint-disable camelcase */
var DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);

var DEFAULT_MODULE_OPTIONS = {
  lightDirection: DEFAULT_LIGHT_DIRECTION
};

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;

  var uniforms = {};
  if (opts.lightDirection) {
    uniforms.dirlight_uLightDirection = opts.lightDirection;
  }
  return uniforms;
}

// TODO - reuse normal from geometry module
var vs = null;

var fs = 'uniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n';

/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'dirlight',
  vs: vs,
  fs: fs,
  getUniforms: getUniforms,
  dependencies: [__WEBPACK_IMPORTED_MODULE_0__project_project__["a" /* default */]]
});
//# sourceMappingURL=dirlight.js.map

/***/ }),
/* 184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var fp32shader = '#ifdef INTEL_TAN_WORKAROUND\n\n// All these functions are for substituting tan() function from Intel GPU only\nconst float TWO_PI = 6.2831854820251465;\nconst float PI_2 = 1.5707963705062866;\nconst float PI_16 = 0.1963495463132858;\n\nconst float SIN_TABLE_0 = 0.19509032368659973;\nconst float SIN_TABLE_1 = 0.3826834261417389;\nconst float SIN_TABLE_2 = 0.5555702447891235;\nconst float SIN_TABLE_3 = 0.7071067690849304;\n\nconst float COS_TABLE_0 = 0.9807852506637573;\nconst float COS_TABLE_1 = 0.9238795042037964;\nconst float COS_TABLE_2 = 0.8314695954322815;\nconst float COS_TABLE_3 = 0.7071067690849304;\n\nconst float INVERSE_FACTORIAL_3 = 1.666666716337204e-01; // 1/3!\nconst float INVERSE_FACTORIAL_5 = 8.333333767950535e-03; // 1/5!\nconst float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04; // 1/7!\nconst float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06; // 1/9!\n\nfloat sin_taylor_fp32(float a) {\n  float r, s, t, x;\n\n  if (a == 0.0) {\n    return 0.0;\n  }\n\n  x = -a * a;\n  s = a;\n  r = a;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_3;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_5;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_7;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_9;\n  s = s + t;\n\n  return s;\n}\n\nvoid sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {\n  if (a == 0.0) {\n    sin_t = 0.0;\n    cos_t = 1.0;\n  }\n  sin_t = sin_taylor_fp32(a);\n  cos_t = sqrt(1.0 - sin_t * sin_t);\n}\n\nfloat tan_taylor_fp32(float a) {\n    float sin_a;\n    float cos_a;\n\n    if (a == 0.0) {\n        return 0.0;\n    }\n\n    // 2pi range reduction\n    float z = floor(a / TWO_PI);\n    float r = a - TWO_PI * z;\n\n    float t;\n    float q = floor(r / PI_2 + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return 0.0 / 0.0;\n    }\n\n    t = r - PI_2 * q;\n\n    q = floor(t / PI_16 + 0.5);\n    int k = int(q);\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return 0.0 / 0.0;\n    } else {\n        t = t - PI_16 * q;\n    }\n\n    float u = 0.0;\n    float v = 0.0;\n\n    float sin_t, cos_t;\n    float s, c;\n    sincos_taylor_fp32(t, sin_t, cos_t);\n\n    if (k == 0) {\n        s = sin_t;\n        c = cos_t;\n    } else {\n        if (abs(float(abs_k) - 1.0) < 0.5) {\n            u = COS_TABLE_0;\n            v = SIN_TABLE_0;\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\n            u = COS_TABLE_1;\n            v = SIN_TABLE_1;\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\n            u = COS_TABLE_2;\n            v = SIN_TABLE_2;\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\n            u = COS_TABLE_3;\n            v = SIN_TABLE_3;\n        }\n        if (k > 0) {\n            s = u * sin_t + v * cos_t;\n            c = u * cos_t - v * sin_t;\n        } else {\n            s = u * sin_t - v * cos_t;\n            c = u * cos_t + v * sin_t;\n        }\n    }\n\n    if (j == 0) {\n        sin_a = s;\n        cos_a = c;\n    } else if (j == 1) {\n        sin_a = c;\n        cos_a = -s;\n    } else if (j == -1) {\n        sin_a = -c;\n        cos_a = s;\n    } else {\n        sin_a = -s;\n        cos_a = -c;\n    }\n    return sin_a / cos_a;\n}\n#endif\n\nfloat tan_fp32(float a) {\n#ifdef INTEL_TAN_WORKAROUND\n  return tan_taylor_fp32(a);\n#else\n  return tan(a);\n#endif\n}\n';

/* unused harmony default export */ var _unused_webpack_default_export = ({
    name: 'fp32',
    vs: fp32shader,
    fs: null
});
//# sourceMappingURL=fp32.js.map

/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* harmony default export */ __webpack_exports__["a"] = ("uniform float ONE;\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\nvec2 split(float a) {\n  const float SPLIT = 4097.0;\n  float t = a * SPLIT;\n  float a_hi = t * ONE - (t - a);\n  float a_lo = a * ONE - a_hi;\n  return vec2(a_hi, a_lo);\n}\n#else\nvec2 split(float a) {\n  const float SPLIT = 4097.0;\n  float t = a * SPLIT;\n  float a_hi = t - (t - a);\n  float a_lo = a - a_hi;\n  return vec2(a_hi, a_lo);\n}\n#endif\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\nvec2 quickTwoSum(float a, float b) {\n  float sum = (a + b) * ONE;\n  float err = b - (sum - a) * ONE;\n  return vec2(sum, err);\n}\n#else\nvec2 quickTwoSum(float a, float b) {\n  float sum = a + b;\n  float err = b - (sum - a);\n  return vec2(sum, err);\n}\n#endif\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\n\n/* The purpose of this workaround is to prevent shader compilers from\noptimizing away necessary arithmetic operations by swapping their sequences\nor transform the equation to some 'equivalent' from.\n\nThe method is to multiply an artifical variable, ONE, which will be known to\nthe compiler to be 1 only at runtime. The whole expression is then represented\nas a polynomial with respective to ONE. In the coefficients of all terms, only one a\nand one b should appear\n\nerr = (a + b) * ONE^6 - a * ONE^5 - (a + b) * ONE^4 + a * ONE^3 - b - (a + b) * ONE^2 + a * ONE\n*/\n\nvec2 twoSum(float a, float b) {\n  float s = (a + b);\n  float v = (s * ONE - a) * ONE;\n  float err = (a - (s - v) * ONE) * ONE * ONE * ONE + (b - v);\n  return vec2(s, err);\n}\n#else\nvec2 twoSum(float a, float b) {\n  float s = a + b;\n  float v = s - a;\n  float err = (a - (s - v)) + (b - v);\n  return vec2(s, err);\n}\n#endif\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\n/* Same thing as in twoSum() */\nvec2 twoSub(float a, float b) {\n  float s = (a - b);\n  float v = (s * ONE - a) * ONE;\n  float err = (a - (s - v) * ONE) * ONE * ONE * ONE - (b + v);\n  return vec2(s, err);\n}\n#else\nvec2 twoSub(float a, float b) {\n  float s = a - b;\n  float v = s - a;\n  float err = (a - (s - v)) - (b + v);\n  return vec2(s, err);\n}\n#endif\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\nvec2 twoSqr(float a) {\n  float prod = a * a;\n  vec2 a_fp64 = split(a);\n\n  float err = ((a_fp64.x * a_fp64.x - prod) * ONE + 2.0 * a_fp64.x *\n    a_fp64.y * ONE * ONE) + a_fp64.y * a_fp64.y * ONE * ONE * ONE;\n  return vec2(prod, err);\n}\n#else\nvec2 twoSqr(float a) {\n  float prod = a * a;\n  vec2 a_fp64 = split(a);\n\n  float err = ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;\n  return vec2(prod, err);\n}\n#endif\n\nvec2 twoProd(float a, float b) {\n  float prod = a * b;\n  vec2 a_fp64 = split(a);\n  vec2 b_fp64 = split(b);\n  float err = ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +\n    a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;\n  return vec2(prod, err);\n}\n\nvec2 sum_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s = twoSum(a.x, b.x);\n  t = twoSum(a.y, b.y);\n  s.y += t.x;\n  s = quickTwoSum(s.x, s.y);\n  s.y += t.y;\n  s = quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 sub_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s = twoSub(a.x, b.x);\n  t = twoSub(a.y, b.y);\n  s.y += t.x;\n  s = quickTwoSum(s.x, s.y);\n  s.y += t.y;\n  s = quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 mul_fp64(vec2 a, vec2 b) {\n  vec2 prod = twoProd(a.x, b.x);\n  // y component is for the error\n  prod.y += a.x * b.y;\n  prod.y += a.y * b.x;\n  prod = quickTwoSum(prod.x, prod.y);\n  return prod;\n}\n\nvec2 div_fp64(vec2 a, vec2 b) {\n  float xn = 1.0 / b.x;\n  vec2 yn = a * xn;\n  float diff = (sub_fp64(a, mul_fp64(b, yn))).x;\n  vec2 prod = twoProd(xn, diff);\n  return sum_fp64(yn, prod);\n}\n\nvec2 sqrt_fp64(vec2 a) {\n  if (a.x == 0.0 && a.y == 0.0) return vec2(0.0, 0.0);\n  if (a.x < 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);\n\n  float x = 1.0 / sqrt(a.x);\n  float yn = a.x * x;\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  vec2 yn_sqr = twoSqr(yn) * ONE;\n#else\n  vec2 yn_sqr = twoSqr(yn);\n#endif\n  float diff = sub_fp64(a, yn_sqr).x;\n  vec2 prod = twoProd(x * 0.5, diff);\n  return sum_fp64(vec2(yn, 0.0), prod);\n}\n");
//# sourceMappingURL=fp64-arithmetic.glsl.js.map

/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* harmony default export */ __webpack_exports__["a"] = ("const vec2 E_FP64 = vec2(2.7182817459106445e+00, 8.254840366817007e-08);\nconst vec2 LOG2_FP64 = vec2(0.6931471824645996e+00, -1.9046542121259336e-09);\nconst vec2 PI_FP64 = vec2(3.1415927410125732, -8.742278012618954e-8);\nconst vec2 TWO_PI_FP64 = vec2(6.2831854820251465, -1.7484556025237907e-7);\nconst vec2 PI_2_FP64 = vec2(1.5707963705062866, -4.371139006309477e-8);\nconst vec2 PI_4_FP64 = vec2(0.7853981852531433, -2.1855695031547384e-8);\nconst vec2 PI_16_FP64 = vec2(0.19634954631328583, -5.463923757886846e-9);\nconst vec2 PI_16_2_FP64 = vec2(0.39269909262657166, -1.0927847515773692e-8);\nconst vec2 PI_16_3_FP64 = vec2(0.5890486240386963, -1.4906100798128818e-9);\nconst vec2 PI_180_FP64 = vec2(0.01745329238474369, 1.3519960498364902e-10);\n\nconst vec2 SIN_TABLE_0_FP64 = vec2(0.19509032368659973, -1.6704714833615242e-9);\nconst vec2 SIN_TABLE_1_FP64 = vec2(0.3826834261417389, 6.22335089017767e-9);\nconst vec2 SIN_TABLE_2_FP64 = vec2(0.5555702447891235, -1.1769521357507529e-8);\nconst vec2 SIN_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617041793133e-8);\n\nconst vec2 COS_TABLE_0_FP64 = vec2(0.9807852506637573, 2.9739473106360492e-8);\nconst vec2 COS_TABLE_1_FP64 = vec2(0.9238795042037964, 2.8307490351764386e-8);\nconst vec2 COS_TABLE_2_FP64 = vec2(0.8314695954322815, 1.6870263741530778e-8);\nconst vec2 COS_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617152815436e-8);\n\nconst vec2 INVERSE_FACTORIAL_3_FP64 = vec2(1.666666716337204e-01, -4.967053879312289e-09); // 1/3!\nconst vec2 INVERSE_FACTORIAL_4_FP64 = vec2(4.16666679084301e-02, -1.2417634698280722e-09); // 1/4!\nconst vec2 INVERSE_FACTORIAL_5_FP64 = vec2(8.333333767950535e-03, -4.34617203337595e-10); // 1/5!\nconst vec2 INVERSE_FACTORIAL_6_FP64 = vec2(1.3888889225199819e-03, -3.3631094437103215e-11); // 1/6!\nconst vec2 INVERSE_FACTORIAL_7_FP64 = vec2(1.9841270113829523e-04,  -2.725596874933456e-12); // 1/7!\nconst vec2 INVERSE_FACTORIAL_8_FP64 = vec2(2.4801587642286904e-05, -3.406996025904184e-13); // 1/8!\nconst vec2 INVERSE_FACTORIAL_9_FP64 = vec2(2.75573188446287533e-06, 3.7935713937038186e-14); // 1/9!\nconst vec2 INVERSE_FACTORIAL_10_FP64 = vec2(2.755731998149713e-07, -7.575112367869873e-15); // 1/10!\n\nfloat nint(float d) {\n    if (d == floor(d)) return d;\n    return floor(d + 0.5);\n}\n\nvec2 nint_fp64(vec2 a) {\n    float hi = nint(a.x);\n    float lo;\n    vec2 tmp;\n    if (hi == a.x) {\n        lo = nint(a.y);\n        tmp = quickTwoSum(hi, lo);\n    } else {\n        lo = 0.0;\n        if (abs(hi - a.x) == 0.5 && a.y < 0.0) {\n            hi -= 1.0;\n        }\n        tmp = vec2(hi, lo);\n    }\n    return tmp;\n}\n\n/* k_power controls how much range reduction we would like to have\nRange reduction uses the following method:\nassume a = k_power * r + m * log(2), k and m being integers.\nSet k_power = 4 (we can choose other k to trade accuracy with performance.\nwe only need to calculate exp(r) and using exp(a) = 2^m * exp(r)^k_power;\n*/\n\nvec2 exp_fp64(vec2 a) {\n  // We need to make sure these two numbers match\n  // as bit-wise shift is not available in GLSL 1.0\n  const int k_power = 4;\n  const float k = 16.0;\n\n  const float inv_k = 1.0 / k;\n\n  if (a.x <= -88.0) return vec2(0.0, 0.0);\n  if (a.x >= 88.0) return vec2(1.0 / 0.0, 1.0 / 0.0);\n  if (a.x == 0.0 && a.y == 0.0) return vec2(1.0, 0.0);\n  if (a.x == 1.0 && a.y == 0.0) return E_FP64;\n\n  float m = floor(a.x / LOG2_FP64.x + 0.5);\n  vec2 r = sub_fp64(a, mul_fp64(LOG2_FP64, vec2(m, 0.0))) * inv_k;\n  vec2 s, t, p;\n\n  p = mul_fp64(r, r);\n  s = sum_fp64(r, p * 0.5);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_3_FP64);\n\n  s = sum_fp64(s, t);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_4_FP64);\n\n  s = sum_fp64(s, t);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_5_FP64);\n\n  // s = sum_fp64(s, t);\n  // p = mul_fp64(p, r);\n  // t = mul_fp64(p, INVERSE_FACTORIAL_6_FP64);\n\n  // s = sum_fp64(s, t);\n  // p = mul_fp64(p, r);\n  // t = mul_fp64(p, INVERSE_FACTORIAL_7_FP64);\n\n  s = sum_fp64(s, t);\n\n\n  // At this point, s = exp(r) - 1; but after following 4 recursions, we will get exp(r) ^ 512 - 1.\n  for (int i = 0; i < k_power; i++) {\n    s = sum_fp64(s * 2.0, mul_fp64(s, s));\n  }\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  s = sum_fp64(s, vec2(ONE, 0.0));\n#else\n  s = sum_fp64(s, vec2(1.0, 0.0));\n#endif\n\n  return s * pow(2.0, m);\n//   return r;\n}\n\nvec2 log_fp64(vec2 a)\n{\n  if (a.x == 1.0 && a.y == 0.0) return vec2(0.0, 0.0);\n  if (a.x <= 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);\n  vec2 x = vec2(log(a.x), 0.0);\n  vec2 s;\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  s = vec2(ONE, 0.0);\n#else\n  s = vec2(1.0, 0.0);\n#endif\n\n  x = sub_fp64(sum_fp64(x, mul_fp64(a, exp_fp64(-x))), s);\n  return x;\n}\n\nvec2 sin_taylor_fp64(vec2 a) {\n  vec2 r, s, t, x;\n\n  if (a.x == 0.0 && a.y == 0.0) {\n    return vec2(0.0, 0.0);\n  }\n\n  x = -mul_fp64(a, a);\n  s = a;\n  r = a;\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_3_FP64);\n  s = sum_fp64(s, t);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_5_FP64);\n  s = sum_fp64(s, t);\n\n  /* keep the following commented code in case we need them\n  for extra accuracy from the Taylor expansion*/\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_7_FP64);\n  // s = sum_fp64(s, t);\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_9_FP64);\n  // s = sum_fp64(s, t);\n\n  return s;\n}\n\nvec2 cos_taylor_fp64(vec2 a) {\n  vec2 r, s, t, x;\n\n  if (a.x == 0.0 && a.y == 0.0) {\n    return vec2(1.0, 0.0);\n  }\n\n  x = -mul_fp64(a, a);\n  r = x;\n  s = sum_fp64(vec2(1.0, 0.0), r * 0.5);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_4_FP64);\n  s = sum_fp64(s, t);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_6_FP64);\n  s = sum_fp64(s, t);\n\n  /* keep the following commented code in case we need them\n  for extra accuracy from the Taylor expansion*/\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_8_FP64);\n  // s = sum_fp64(s, t);\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_10_FP64);\n  // s = sum_fp64(s, t);\n\n  return s;\n}\n\nvoid sincos_taylor_fp64(vec2 a, out vec2 sin_t, out vec2 cos_t) {\n  if (a.x == 0.0 && a.y == 0.0) {\n    sin_t = vec2(0.0, 0.0);\n    cos_t = vec2(1.0, 0.0);\n  }\n\n  sin_t = sin_taylor_fp64(a);\n  cos_t = sqrt_fp64(sub_fp64(vec2(1.0, 0.0), mul_fp64(sin_t, sin_t)));\n}\n\nvec2 sin_fp64(vec2 a) {\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(0.0, 0.0);\n    }\n\n    // 2pi range reduction\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n\n    if (k == 0) {\n        if (j == 0) {\n            return sin_taylor_fp64(t);\n        } else if (j == 1) {\n            return cos_taylor_fp64(t);\n        } else if (j == -1) {\n            return -cos_taylor_fp64(t);\n        } else {\n            return -sin_taylor_fp64(t);\n        }\n    }\n\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\n    if (abs(float(abs_k) - 1.0) < 0.5) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs(float(abs_k) - 2.0) < 0.5) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs(float(abs_k) - 3.0) < 0.5) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs(float(abs_k) - 4.0) < 0.5) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#else\n    if (abs_k == 1) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs_k == 2) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs_k == 3) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs_k == 4) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#endif\n\n    vec2 sin_t, cos_t;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n\n\n    vec2 result = vec2(0.0, 0.0);\n    if (j == 0) {\n        if (k > 0) {\n            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        }\n    } else if (j == 1) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    } else if (j == -1) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        } else {\n            result = -sum_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        }\n    } else {\n        if (k > 0) {\n            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));\n        }\n    }\n\n    return result;\n}\n\nvec2 cos_fp64(vec2 a) {\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(1.0, 0.0);\n    }\n\n    // 2pi range reduction\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n\n    if (k == 0) {\n        if (j == 0) {\n            return cos_taylor_fp64(t);\n        } else if (j == 1) {\n            return -sin_taylor_fp64(t);\n        } else if (j == -1) {\n            return sin_taylor_fp64(t);\n        } else {\n            return -cos_taylor_fp64(t);\n        }\n    }\n\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\n    if (abs(float(abs_k) - 1.0) < 0.5) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs(float(abs_k) - 2.0) < 0.5) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs(float(abs_k) - 3.0) < 0.5) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs(float(abs_k) - 4.0) < 0.5) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#else\n    if (abs_k == 1) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs_k == 2) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs_k == 3) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs_k == 4) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#endif\n\n    vec2 sin_t, cos_t;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n    vec2 result = vec2(0.0, 0.0);\n    if (j == 0) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    } else if (j == 1) {\n        if (k > 0) {\n            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));\n        }\n    } else if (j == -1) {\n        if (k > 0) {\n            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        }\n    } else {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        } else {\n            result = -sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    }\n\n    return result;\n}\n\nvec2 tan_fp64(vec2 a) {\n    vec2 sin_a;\n    vec2 cos_a;\n\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(0.0, 0.0);\n    }\n\n    // 2pi range reduction\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n    int abs_k = int(abs(float(k)));\n\n    // We just can't get PI/16 * 3.0 very accurately.\n    // so let's just store it\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n    vec2 sin_t, cos_t;\n    vec2 s, c;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n    if (k == 0) {\n        s = sin_t;\n        c = cos_t;\n    } else {\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\n        if (abs(float(abs_k) - 1.0) < 0.5) {\n            u = COS_TABLE_0_FP64;\n            v = SIN_TABLE_0_FP64;\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\n            u = COS_TABLE_1_FP64;\n            v = SIN_TABLE_1_FP64;\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\n            u = COS_TABLE_2_FP64;\n            v = SIN_TABLE_2_FP64;\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\n            u = COS_TABLE_3_FP64;\n            v = SIN_TABLE_3_FP64;\n        }\n#else\n        if (abs_k == 1) {\n            u = COS_TABLE_0_FP64;\n            v = SIN_TABLE_0_FP64;\n        } else if (abs_k == 2) {\n            u = COS_TABLE_1_FP64;\n            v = SIN_TABLE_1_FP64;\n        } else if (abs_k == 3) {\n            u = COS_TABLE_2_FP64;\n            v = SIN_TABLE_2_FP64;\n        } else if (abs_k == 4) {\n            u = COS_TABLE_3_FP64;\n            v = SIN_TABLE_3_FP64;\n        }\n#endif\n        if (k > 0) {\n            s = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n            c = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            s = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n            c = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    }\n\n    if (j == 0) {\n        sin_a = s;\n        cos_a = c;\n    } else if (j == 1) {\n        sin_a = c;\n        cos_a = -s;\n    } else if (j == -1) {\n        sin_a = -c;\n        cos_a = s;\n    } else {\n        sin_a = -s;\n        cos_a = -c;\n    }\n    return div_fp64(sin_a, cos_a);\n}\n\nvec2 radians_fp64(vec2 degree) {\n  return mul_fp64(degree, PI_180_FP64);\n}\n\nvec2 mix_fp64(vec2 a, vec2 b, float x) {\n  vec2 range = sub_fp64(b, a);\n  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));\n}\n\n// Vector functions\n// vec2 functions\nvoid vec2_sum_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = sum_fp64(a[0], b[0]);\n    out_val[1] = sum_fp64(a[1], b[1]);\n}\n\nvoid vec2_sub_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = sub_fp64(a[0], b[0]);\n    out_val[1] = sub_fp64(a[1], b[1]);\n}\n\nvoid vec2_mul_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = mul_fp64(a[0], b[0]);\n    out_val[1] = mul_fp64(a[1], b[1]);\n}\n\nvoid vec2_div_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = div_fp64(a[0], b[0]);\n    out_val[1] = div_fp64(a[1], b[1]);\n}\n\nvoid vec2_mix_fp64(vec2 x[2], vec2 y[2], float a, out vec2 out_val[2]) {\n  vec2 range[2];\n  vec2_sub_fp64(y, x, range);\n  vec2 portion[2];\n  portion[0] = range[0] * a;\n  portion[1] = range[1] * a;\n  vec2_sum_fp64(x, portion, out_val);\n}\n\nvec2 vec2_length_fp64(vec2 x[2]) {\n  return sqrt_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])));\n}\n\nvoid vec2_normalize_fp64(vec2 x[2], out vec2 out_val[2]) {\n  vec2 length = vec2_length_fp64(x);\n  vec2 length_vec2[2];\n  length_vec2[0] = length;\n  length_vec2[1] = length;\n\n  vec2_div_fp64(x, length_vec2, out_val);\n}\n\nvec2 vec2_distance_fp64(vec2 x[2], vec2 y[2]) {\n  vec2 diff[2];\n  vec2_sub_fp64(x, y, diff);\n  return vec2_length_fp64(diff);\n}\n\nvec2 vec2_dot_fp64(vec2 a[2], vec2 b[2]) {\n  vec2 v[2];\n\n  v[0] = mul_fp64(a[0], b[0]);\n  v[1] = mul_fp64(a[1], b[1]);\n\n  return sum_fp64(v[0], v[1]);\n}\n\n// vec3 functions\nvoid vec3_sub_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {\n  for (int i = 0; i < 3; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvoid vec3_sum_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {\n  for (int i = 0; i < 3; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvec2 vec3_length_fp64(vec2 x[3]) {\n  return sqrt_fp64(sum_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])),\n    mul_fp64(x[2], x[2])));\n}\n\nvec2 vec3_distance_fp64(vec2 x[3], vec2 y[3]) {\n  vec2 diff[3];\n  vec3_sub_fp64(x, y, diff);\n  return vec3_length_fp64(diff);\n}\n\n// vec4 functions\nvoid vec4_fp64(vec4 a, out vec2 out_val[4]) {\n  out_val[0].x = a[0];\n  out_val[0].y = 0.0;\n\n  out_val[1].x = a[1];\n  out_val[1].y = 0.0;\n\n  out_val[2].x = a[2];\n  out_val[2].y = 0.0;\n\n  out_val[3].x = a[3];\n  out_val[3].y = 0.0;\n}\n\nvoid vec4_scalar_mul_fp64(vec2 a[4], vec2 b, out vec2 out_val[4]) {\n  out_val[0] = mul_fp64(a[0], b);\n  out_val[1] = mul_fp64(a[1], b);\n  out_val[2] = mul_fp64(a[2], b);\n  out_val[3] = mul_fp64(a[3], b);\n}\n\nvoid vec4_sum_fp64(vec2 a[4], vec2 b[4], out vec2 out_val[4]) {\n  for (int i = 0; i < 4; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvoid vec4_dot_fp64(vec2 a[4], vec2 b[4], out vec2 out_val) {\n  vec2 v[4];\n\n  v[0] = mul_fp64(a[0], b[0]);\n  v[1] = mul_fp64(a[1], b[1]);\n  v[2] = mul_fp64(a[2], b[2]);\n  v[3] = mul_fp64(a[3], b[3]);\n\n  out_val = sum_fp64(sum_fp64(v[0], v[1]), sum_fp64(v[2], v[3]));\n}\n\nvoid mat4_vec4_mul_fp64(vec2 b[16], vec2 a[4], out vec2 out_val[4]) {\n  vec2 tmp[4];\n\n  for (int i = 0; i < 4; i++)\n  {\n    for (int j = 0; j < 4; j++)\n    {\n      tmp[j] = b[j + i * 4];\n    }\n    vec4_dot_fp64(a, tmp, out_val[i]);\n  }\n}\n");
//# sourceMappingURL=fp64-functions.glsl.js.map

/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export fp64arithmetic */
/* unused harmony export fp64fs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(188);
/* unused harmony reexport fp64ify */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fp64_arithmetic_glsl__ = __webpack_require__(185);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fp64_functions_glsl__ = __webpack_require__(186);
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.






var fp64shader = __WEBPACK_IMPORTED_MODULE_1__fp64_arithmetic_glsl__["a" /* default */] + '\n' + __WEBPACK_IMPORTED_MODULE_2__fp64_functions_glsl__["a" /* default */];

/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'fp64',
  vs: fp64shader,
  fs: null
});

// Arithmetic only
var fp64arithmetic = {
  name: 'fp64-arithmetic',
  vs: '' + __WEBPACK_IMPORTED_MODULE_1__fp64_arithmetic_glsl__["a" /* default */],
  fs: null
};

// Fragment shader fp64
var fp64fs = {
  name: 'fp64-fs',
  vs: null,
  fs: fp64shader
};
//# sourceMappingURL=fp64.js.map

/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export fp64ify */
function fp64ify(a) {
  var hiPart = Math.fround(a);
  var loPart = a - hiPart;
  return [hiPart, loPart];
}
//# sourceMappingURL=utils.js.map

/***/ }),
/* 189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("  // empty\n");
//# sourceMappingURL=lighting-common.glsl.js.map

/***/ }),
/* 190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#ifdef GL_ES\nprecision highp float;\n#endif\n\n#define LIGHT_MAX 4\n\nvarying vec3 lighting_vLightWeighting;\n\nvec4 lighting_apply(vec4 color) {\n  // set color from texture\n  return vec4(color.rgb * lighting_vLightWeighting, color.a);\n}\n\n// spec-map.fs\n\nuniform mat4 viewMatrix;\n\n\nvarying vec4 lighting_vColor;\nvarying vec4 lighting_vTransformedNormal;\nvarying vec4 lighting_vPosition;\n\nuniform float shininess;\nuniform bool enableSpecularMap;\nuniform bool enableLights;\n\nuniform vec3 ambientColor;\nuniform vec3 directionalColor;\nuniform vec3 lightingDirection;\n\nuniform vec3 lighting_uPointLocation[LIGHT_MAX];\nuniform vec3 lighting_uPointColor[LIGHT_MAX];\nuniform float lighting_uPointSpecularEnable[LIGHT_MAX];\nuniform vec3 lighting_uPointSpecularColor[LIGHT_MAX];\nuniform int numberPoints;\n\n\nvec3 lighting__calculate_light_weighting() {\n\treturn lighting__calculate_light_weighting(shininess);\n}\n\nvec3 lighting__calculate_light_weighting(shininess) {\n  vec3 normal = vTransformedNormal.xyz;\n  vec3 eyeDirection = normalize(-vPosition.xyz);\n\n  vec3 specularLight = vec3(0., 0., 0.);\n  vec3 diffuseLight = vec3(0., 0., 0.);\n\n  for (int i = 0; i < LIGHT_MAX; i++) {\n    if (i < numberPoints) {\n      vec3 transformedPointLocation = (viewMatrix * vec4(lighting_uPointLocation[i], 1.0)).xyz;\n      vec3 lightDirection = normalize(transformedPointLocation - vPosition.xyz);\n\n      if (lighting_uPointSpecularEnable > 0.) {\n        vec3 reflectionDirection = reflect(-lightDirection, normal);\n        float specularLightWeighting =\n          pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininessVal);\n        specularLight += specularLightWeighting * lighting_uPointSpecularColor[i];\n      }\n\n      float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);\n      diffuseLight += diffuseLightWeighting * lighting_uPointColor[i];\n    } else {\n      break;\n    }\n  }\n\n  return ambientColor + diffuseLight + specularLight;\n}\n\nvoid lighting_filterColor(fragmentColor) {\n  if (!lighting_enable) {\n  \treturn fragmentColor;\n  } else {\n  \tvec3 lightWeighting = lighting__calculate_light_weighting();\n  \treturn vec4(fragmentColor.rgb * lightWeighting, fragmentColor.a);\n  }\n}\n\n// render-tex.fs\n\nuniform vec3 material_uAmbientColor;\nuniform vec3 material_uDiffuseColor;\nuniform vec3 material_uSpecularColor;\nuniform vec3 material_uEmissiveColor;\n\nuniform bool hasTexture1;\nuniform sampler2D sampler1;\n\nuniform mat4 viewMatrix;\n\nvoid apply_lighting(color) {\n  vec3 ambientLightWeighting = ambientColor;\n\n  vec3 normal = vTransformedNormal.xyz;\n  vec3 eyeDirection = normalize(-vPosition.xyz);\n\n  vec3 specularLight = vec3(0.0, 0.0, 0.0);\n  vec3 diffuseLight = vec3(0.0, 0.0, 0.0);\n\n  for (int i = 0; i < LIGHT_MAX; i++) {\n    if (i < numberPoints) {\n      vec3 transformedPointLocation = (viewMatrix * vec4(pointLocation[i], 1.0)).xyz;\n      vec3 lightDirection = normalize(transformedPointLocation - vPosition.xyz);\n\n      if (enableSpecularHighlights) {\n        vec3 reflectionDirection = reflect(-lightDirection, normal);\n        float specularLightWeighting =\n          pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininess);\n        specularLight += specularLightWeighting * pointSpecularColor[i];\n      }\n\n      float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);\n      diffuseLight += diffuseLightWeighting * pointColor[i];\n    } else {\n        break;\n    }\n  }\n\n  vec3 matAmbientColor = material_uAmbientColor * color.rgb;\n  vec3 matDiffuseColor = material_uDiffuseColor * color.rgb;\n  vec3 matSpecularColor = material_uSpecularColor * color.rgb;\n  vec3 matEmissiveColor = material_uEmissiveColor * color.rgb;\n  gl_FragColor = vec4(\n    matAmbientColor * ambientLightWeighting\n    + matDiffuseColor * diffuseLightWeighting\n    + matSpecularColor * specularLightWeighting\n    + matEmissiveColor,\n    color.a\n  );\n}\n\n/// frag-lighting\n\n  vec3 lightWeighting;\n  if (!enableLights) {\n    lightWeighting = vec3(1.0, 1.0, 1.0);\n  } else {\n    vec3 lightDirection;\n    float specularLightWeighting = 0.0;\n    float diffuseLightWeighting = 0.0;\n    vec3  specularLight = vec3(0.0, 0.0, 0.0);\n    vec3  diffuseLight = vec3(0.0, 0.0, 0.0);\n\n    vec3 transformedPointLocation;\n    vec3 normal = vTransformedNormal.xyz;\n\n    vec3 eyeDirection = normalize(-vPosition.xyz);\n    vec3 reflectionDirection;\n\n    vec3 pointWeight = vec3(0.0, 0.0, 0.0);\n\n    for (int i = 0; i < LIGHT_MAX; i++) {\n      if (i < numberPoints) {\n        transformedPointLocation = (viewMatrix * vec4(pointLocation[i], 1.0)).xyz;\n        lightDirection = normalize(transformedPointLocation - vPosition.xyz);\n\n        if (enableSpecular[i] > 0.0) {\n          reflectionDirection = reflect(-lightDirection, normal);\n          specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininess);\n          specularLight += specularLightWeighting * pointSpecularColor[i];\n        }\n\n        diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);\n        diffuseLight += diffuseLightWeighting * pointColor[i];\n      } else {\n        break;\n      }\n    }\n\n    lightWeighting = ambientColor + diffuseLight + specularLight;\n  }\n\n// reflection / refraction configs\nuniform float reflection;\nuniform float refraction;\n\n///\n  // has cube texture then apply reflection\n  // if (hasTextureCube1) {\n  //   vec3 nReflection = normalize(vReflection);\n  //   vec3 reflectionValue;\n  //   if (refraction > 0.0) {\n  //    reflectionValue = refract(nReflection, vNormal.xyz, refraction);\n  //   } else {\n  //    reflectionValue = -reflect(nReflection, vNormal.xyz);\n  //   }\n\n  //   // TODO(nico): check whether this is right.\n  //   vec4 cubeColor = textureCube(samplerCube1,\n  //       vec3(-reflectionValue.x, -reflectionValue.y, reflectionValue.z));\n  //   gl_FragColor = vec4(mix(gl_FragColor.xyz, cubeColor.xyz, reflection), 1.0);\n  // }\n");
//# sourceMappingURL=lighting-fragment.glsl.js.map

/***/ }),
/* 191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define LIGHT_MAX 4\n\n/*\n// lighting configuration\nuniform bool enableLights;\nuniform vec3 ambientColor;\nuniform vec3 directionalColor;\nuniform vec3 lightingDirection;\n\n// point lights configuration\nuniform vec3 pointLocation[LIGHT_MAX];\nuniform vec3 pointColor[LIGHT_MAX];\nuniform int numberPoints;\n\n// reflection / refraction configuration\nuniform bool useReflection;\n*/\n\nuniform bool lighting_uEnableLights;\nuniform vec3 lighting_uAmbientColor;\nuniform vec3 lighting_uDirection;\nuniform vec3 lighting_uDirectionalColor;\n\n// point lights configuration\nuniform int  lighting_uPointCount;\nuniform vec3 lighting_uPointLocation[LIGHT_MAX];\nuniform vec3 lighting_uPointColor[LIGHT_MAX];\n\n// reflection / refraction configuration\nuniform bool lighting_uEnableReflections;\n\n// varyings\nvarying vec4 lighting_vPosition;\nvarying vec4 lighting_vNormal;\nvarying vec3 lighting_vColor;\nvarying vec3 lighting_vLightWeighting;\nvarying vec3 lighting_vReflection;\n\nvoid lighting_setPositionAndNormal(vec3 position, vec3 normal) {\n  lighting_vPosition = worldMatrix * vec4(position, 1.);\n  lighting_vNormal = worldInverseTransposeMatrix * vec4(normal, 1.);;\n}\n\nvoid lighting__getLightWeigting() {\n  float directionalLightWeighting = max(dot(lighting_vNormal.xyz, lighting_uDirection), 0.);\n  vec3 pointWeight = vec3(0., 0., 0.);\n  for (int i = 0; i < LIGHT_MAX; i++) {\n    if (i < numberPoints) {\n      vec4 mvLightPosition = viewMatrix * vec4(lighting_uPointLocation[i], 1.);\n      vec3 pointLightDirection = normalize(mvLightPosition.xyz - lighting_vPosition.xyz);\n      pointWeight += max(dot(lighting_vNormal.xyz, pointLightDirection), 0.) * pointColor[i];\n     } else {\n       break;\n     }\n   }\n   return ambientColor + (directionalColor * directionalLightWeighting) + pointWeight;\n}\n\nvoid lighting_apply(vec3 position, vec3 normal) {\n  lighting_setPositionAndNormal(position, normal);\n\n  // lighting code\n  if(!lighting_uEnableLights) {\n    lighting_vLightWeighting = vec3(1., 1., 1.);\n  } else {\n    lighting_vLightWeighting = lighting__getLightWeighting();\n  }\n}\n\nvoid lighting_set_reflection(vec3 position) {\n    // refraction / reflection code\n  if (lighting_uEnableReflections) {\n    lighting_vReflection = (viewInverseMatrix[3] - (worldMatrix * vec4(position, 1.))).xyz;\n  } else {\n    lighting_vReflection = vec3(1., 1., 1.);\n  }\n}\n");
//# sourceMappingURL=lighting-vertex.glsl.js.map

/***/ }),
/* 192 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export vertexShader */
/* unused harmony export fragmentShader */
/* unused harmony export name */
/* unused harmony export config */
/* unused harmony export getUniforms */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__packages_math__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lighting_common_glsl__ = __webpack_require__(189);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lighting_vertex_glsl__ = __webpack_require__(191);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lighting_fragment_glsl__ = __webpack_require__(190);






var vertexShader = __WEBPACK_IMPORTED_MODULE_1__lighting_common_glsl__["a" /* default */] + '\n' + __WEBPACK_IMPORTED_MODULE_2__lighting_vertex_glsl__["a" /* default */] + '\n';

var fragmentShader = __WEBPACK_IMPORTED_MODULE_1__lighting_common_glsl__["a" /* default */] + '\n' + __WEBPACK_IMPORTED_MODULE_3__lighting_fragment_glsl__["a" /* default */] + '\n';

var name = 'lighting';

var config = {
  MAX_POINT_LIGHTS: 4
};

// Setup the lighting system: ambient, directional, point lights.
function getUniforms(_ref) {
  var _ref$lightingEnable = _ref.lightingEnable,
      lightingEnable = _ref$lightingEnable === undefined ? false : _ref$lightingEnable,
      _ref$lightingAmbientC = _ref.lightingAmbientColor,
      lightingAmbientColor = _ref$lightingAmbientC === undefined ? [0.2, 0.2, 0.2] : _ref$lightingAmbientC,
      _ref$lightingDirectio = _ref.lightingDirection,
      lightingDirection = _ref$lightingDirectio === undefined ? [1, 1, 1] : _ref$lightingDirectio,
      _ref$lightingDirectio2 = _ref.lightingDirectionalColor,
      lightingDirectionalColor = _ref$lightingDirectio2 === undefined ? [0, 0, 0] : _ref$lightingDirectio2,
      _ref$lightingPointLig = _ref.lightingPointLights,
      lightingPointLights = _ref$lightingPointLig === undefined ? [] : _ref$lightingPointLig;

  // Set light uniforms. Ambient, directional and point lights.
  return Object.assign({
    lightingEnable: lightingEnable,
    // Ambient
    lightingAmbientColor: lightingAmbientColor
  }, getDirectionalUniforms(lightingDirection), getPointUniforms(lightingPointLights));
}

function getDirectionalUniforms(_ref2) {
  var color = _ref2.color,
      direction = _ref2.direction;

  // Normalize lighting direction vector
  var dir = new __WEBPACK_IMPORTED_MODULE_0__packages_math__["Vector3"](direction.x, direction.y, direction.z).normalize().scale(-1, -1, -1);

  return {
    directionalColor: [color.r, color.g, color.b],
    lightingDirection: [dir.x, dir.y, dir.z]
  };
}

function getPointUniforms(points) {
  points = points instanceof Array ? points : [points];
  var numberPoints = points.length;
  var pointLocations = [];
  var pointColors = [];
  var enableSpecular = [];
  var pointSpecularColors = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var point = _step.value;
      var position = point.position,
          color = point.color,
          diffuse = point.diffuse,
          specular = point.specular;

      var pointColor = color || diffuse;

      pointLocations.push(position.x, position.y, position.z);
      pointColors.push(pointColor.r, pointColor.g, pointColor.b);

      // Add specular color
      enableSpecular.push(Number(Boolean(specular)));
      if (specular) {
        pointSpecularColors.push(specular.r, specular.g, specular.b);
      } else {
        pointSpecularColors.push(0, 0, 0);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return {
    numberPoints: numberPoints,
    pointLocation: pointLocations,
    pointColor: pointColors,
    enableSpecular: enableSpecular,
    pointSpecularColor: pointSpecularColors
  };
}
//# sourceMappingURL=lighting.js.map

/***/ }),
/* 193 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MODULE_INJECTORS_VS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return MODULE_INJECTORS_FS; });
var MODULE_INJECTORS_VS = "#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n";

var MODULE_INJECTORS_FS = "#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth();\n#endif\n";
//# sourceMappingURL=module-injectors.js.map

/***/ }),
/* 194 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 64, 128, 64]);

var DEFAULT_MODULE_OPTIONS = {
  pickingSelectedColor: null, //  Set to a picking color to visually highlight that item
  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR, // Color of visual highlight of "selected" item
  pickingThreshold: 1.0,
  pickingActive: false, // Set to true when rendering to off-screen "picking" buffer
  pickingValid: false
};

/* eslint-disable camelcase */
function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;

  var uniforms = {};
  uniforms.picking_uValid = opts.pickingValid ? 1 : 0;
  if (opts.pickingSelectedColor !== undefined) {
    if (opts.pickingSelectedColor) {
      var selectedColor = [opts.pickingSelectedColor[0], opts.pickingSelectedColor[1], opts.pickingSelectedColor[2]];
      // console.log('selected picking color', selectedColor);
      uniforms.picking_uSelectedPickingColor = selectedColor;
    }
  }
  if (opts.pickingHighlightColor !== undefined) {
    uniforms.picking_uHighlightColor = opts.pickingHighlightColor;
  }
  // TODO - major hack - decide on normalization and remove
  if (opts.pickingThreshold !== undefined) {
    uniforms.picking_uThreshold = opts.pickingThreshold;
  }
  if (opts.pickingActive !== undefined) {
    uniforms.picking_uActive = opts.pickingActive ? 1 : 0;
  }
  return uniforms;
}

var vs = 'uniform vec3 picking_uSelectedPickingColor;\nuniform float picking_uThreshold;\nuniform bool picking_uValid;\n\nvarying vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 256.;\n\nbool isVertexPicked(vec3 vertexColor, vec3 pickedColor, bool pickingValid) {\n  return\n    pickingValid &&\n    abs(vertexColor.r - pickedColor.r) < picking_uThreshold &&\n    abs(vertexColor.g - pickedColor.g) < picking_uThreshold &&\n    abs(vertexColor.b - pickedColor.b) < picking_uThreshold;\n}\n\nvoid picking_setPickingColor(vec3 pickingColor) {\n  // Do the comparison with selected item color in vertex shader as it should mean fewer compares\n  picking_vRGBcolor_Aselected.a =\n    float(isVertexPicked(pickingColor, picking_uSelectedPickingColor, picking_uValid));\n\n  // Stores the picking color so that the fragment shader can render it during picking\n  picking_vRGBcolor_Aselected.rgb = pickingColor * COLOR_SCALE;\n}\n';

var fs = 'uniform bool picking_uActive; // true during rendering to offscreen picking buffer\nuniform vec3 picking_uSelectedPickingColor;\nuniform vec4 picking_uHighlightColor;\n\nvarying vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 256.;\n\n/*\n * Returns highlight color if this item is selected.\n */\nvec4 picking_filterHighlightColor(vec4 color) {\n  bool selected = bool(picking_vRGBcolor_Aselected.a);\n  return selected ? picking_uHighlightColor : color;\n}\n\n/*\n * Returns picking color if picking enabled else unmodified argument.\n */\nvec4 picking_filterPickingColor(vec4 color) {\n  vec3 pickingColor = picking_vRGBcolor_Aselected.rgb;\n  return picking_uActive ? vec4(pickingColor, 1.0) : color;\n}\n';

/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'picking',
  vs: vs,
  fs: fs,
  getUniforms: getUniforms
});
//# sourceMappingURL=picking.js.map

/***/ }),
/* 195 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#ifdef GL_ES\nprecision highp float;\n#endif\n\n#define SHADER_NAME luma-default-fs\n\nvarying vec4 vColor;\nvarying vec2 vTexCoord;\nvarying vec3 lightWeighting;\n\nuniform bool hasTexture1;\nuniform sampler2D sampler1;\n\nuniform bool enablePicking;\nuniform vec3 pickColor;\n\nuniform bool hasFog;\nuniform vec3 fogColor;\n\nuniform float fogNear;\nuniform float fogFar;\n\nvoid main() {\n  if(!hasTexture1) {\n    gl_FragColor = vec4(vColor.rgb * lightWeighting, vColor.a);\n  } else {\n    gl_FragColor =\n      vec4(texture2D(sampler1, vec2(vTexCoord.s, vTexCoord.t)).rgb * lightWeighting, 1.0);\n  }\n\n  if (enablePicking) {\n    gl_FragColor = vec4(pickColor, 1.0);\n  }\n\n  /* handle fog */\n  if (hasFog) {\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\n    float fogFactor = smoothstep(fogNear, fogFar, depth);\n    gl_FragColor = mix(gl_FragColor, vec4(fogColor, gl_FragColor.w), fogFactor);\n  }\n}\n");
//# sourceMappingURL=default-fragment.glsl.js.map

/***/ }),
/* 196 */
/***/ (function(module, exports) {

module.exports = {
  hasTexture1: false,
  hasTextureCube1: false,

  enableLights: false,
  useReflection: false,

  // picking configs
  enablePicking: false,
  hasPickingColors: false,

  // fog configuration
  hasFog: false
};
//# sourceMappingURL=default-uniforms.js.map

/***/ }),
/* 197 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define SHADER_NAME luma-default-vs\n\n#define LIGHT_MAX 4\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec4 color;\nattribute vec2 texCoord1;\n\nuniform mat4 worldMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 worldInverseTransposeMatrix;\n\nuniform bool enableLights;\nuniform vec3 ambientColor;\nuniform vec3 directionalColor;\nuniform vec3 lightingDirection;\n\nuniform vec3 pointLocation[LIGHT_MAX];\nuniform vec3 pointColor[LIGHT_MAX];\nuniform int numberPoints;\n\nvarying vec4 vColor;\nvarying vec2 vTexCoord;\nvarying vec3 lightWeighting;\n\nvoid main(void) {\n  vec4 mvPosition = worldMatrix * vec4(position, 1.0);\n\n  if(!enableLights) {\n    lightWeighting = vec3(1.0, 1.0, 1.0);\n  } else {\n    vec3 plightDirection;\n    vec3 pointWeight = vec3(0.0, 0.0, 0.0);\n    vec4 transformedNormal = worldInverseTransposeMatrix * vec4(normal, 1.0);\n    float directionalLightWeighting = max(dot(transformedNormal.xyz, lightingDirection), 0.0);\n    for (int i = 0; i < LIGHT_MAX; i++) {\n      if (i < numberPoints) {\n        plightDirection =\n          normalize((viewMatrix * vec4(pointLocation[i], 1.0)).xyz - mvPosition.xyz);\n        pointWeight += max(dot(transformedNormal.xyz, plightDirection), 0.0) * pointColor[i];\n      } else {\n        break;\n      }\n    }\n\n    lightWeighting = ambientColor + (directionalColor * directionalLightWeighting) + pointWeight;\n  }\n\n  vColor = color;\n  vTexCoord = texCoord1;\n  gl_Position = projectionMatrix * worldMatrix * vec4(position, 1.0);\n}\n");
//# sourceMappingURL=default-vertex.glsl.js.map

/***/ }),
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export MONOLITHIC_SHADERS_2 */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MODULAR_SHADERS; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__deprecated_shaderlib__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__deprecated_shaderlib___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__deprecated_shaderlib__);
/* unused harmony reexport SHADERS */
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__deprecated_shaderlib___default.a; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__default_vertex_glsl__ = __webpack_require__(197);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__default_fragment_glsl__ = __webpack_require__(195);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modular_vertex_glsl__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modular_fragment_glsl__ = __webpack_require__(199);
// Default Shaders




// A set of monolithic shaders


var defaultUniforms = __webpack_require__(196);

var MONOLITHIC_SHADERS_2 = {
  vs: __WEBPACK_IMPORTED_MODULE_1__default_vertex_glsl__["a" /* default */],
  fs: __WEBPACK_IMPORTED_MODULE_2__default_fragment_glsl__["a" /* default */],
  defaultUniforms: defaultUniforms
};

// A set of base shaders that leverage the shader module system,
// dynamically enabling features depending on which modules are included



var MODULAR_SHADERS = {
  vs: __WEBPACK_IMPORTED_MODULE_3__modular_vertex_glsl__["a" /* default */],
  fs: __WEBPACK_IMPORTED_MODULE_4__modular_fragment_glsl__["a" /* default */],
  defaultUniforms: {}
};
//# sourceMappingURL=index.js.map

/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define SHADER_NAME luma-modular-fragment\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n// varyings\nvarying vec4 vColor;\n\nvoid main(){\n  gl_FragColor = vec4(1., 0., 1., 1.);\n\n#ifdef MODULE_DIFFUSE\n  gl_FragColor = diffuse_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth(gl_Position);\n#endif\n}\n");
//# sourceMappingURL=modular-fragment.glsl.js.map

/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define SHADER_NAME luma_modular_vertex\n\n// object attributes\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec4 colors;\nattribute vec2 texCoords;\nattribute vec3 pickingColors;\n\nvoid main(void) {\n\n  // Set up position\n#ifdef MODULE_GEOMETRY\n  geometry_setPosition(positions);\n  geometry_setNormal(normals);\n#endif\n\n#ifdef MODULE_PROJECT\n  project_setPositionAndNormal_Model(positions, normals);\n  gl_Position = project_model_to_clipspace(positions);\n#endif\n\n  // Set up depth\n#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n\n#ifdef MODULE_DIFFUSE\n  diffuse_setTextureCoordinate(texCoords);\n#endif\n\n  // Set up color calculations\n#ifdef MODULE_MATERIAL\n  material_setDiffuseColor(colors);\n  material_setDiffuseTextureCoordinates(texCoords);\n#endif\n\n#ifdef MODULE_LIGHTING\n  lighting_setPositionAndNormal(positions, normals);\n  lighting_apply_light(positions);\n  lighting_apply_reflection(positions);\n#endif\n\n#ifdef MODULE_PICKING\n  picking_setPickingColor(pickingColors);\n#endif\n\n}\n");
//# sourceMappingURL=modular-vertex.glsl.js.map

/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = promisify;
/**
 * Converts a function that accepts a node style (err, result) callback
 * as the last argument into a function that takes the same arguments
 * and returns a promise that resolves or rejects with the values provided
 * by the original callback
 * @param {Function} func - function to wrap
 * @return {Function} promisified function
 */
/* eslint-disable no-try-catch */
function promisify(func) {
  return function promisifiedFunction() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new Promise(function (resolve, reject) {
      function callback(error, data) {
        try {
          if (error) {
            reject(error);
          } else {
            resolve(data);
          }
        } catch (e) {
          reject(e);
        }
      }
      func.apply(undefined, args.concat([callback]));
    });
  };
}
/* eslint-enable no-try-catch */
//# sourceMappingURL=promise-utils.js.map

/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = splat;
/* harmony export (immutable) */ __webpack_exports__["d"] = noop;
/* harmony export (immutable) */ __webpack_exports__["a"] = uid;
/* harmony export (immutable) */ __webpack_exports__["e"] = merge;
/* harmony export (immutable) */ __webpack_exports__["b"] = isPowerOfTwo;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);


/**
 * Wraps the argument in an array if it is not one.
 * @param {object} a - The object to wrap.
 * @return {Array} array
 **/
function splat(a) {
  return a ? Array.isArray(a) ? a : [a] : [];
}

/**
* Provides a standard noop function.
**/
function noop() {}

var uidCounters = {};

/**
 * Returns a UID.
 * @param {String} id= - Identifier base name
 * @return {number} uid
 **/
function uid() {
  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';

  uidCounters[id] = uidCounters[id] || 1;
  var count = uidCounters[id]++;
  return id + '-' + count;
}

/**
 * Merge multiple objects into one.
 * @param {...object} objects - The objects to merge.
 * @return {object} object
 **/
function merge(objects) {
  var mix = {};
  for (var i = 0, l = arguments.length; i < l; i++) {
    var object = arguments[i];
    if (!object || object.constructor.name !== 'Object') {
      /* eslint-disable no-continue */
      continue;
    }
    for (var key in object) {
      var op = object[key];
      var mp = mix[key];
      if (mp && op.constructor.name === 'Object' && mp.constructor.name === 'Object') {
        mix[key] = merge(mp, op);
      } else {
        mix[key] = detach(op);
      }
    }
  }
  return mix;
}

/**
 * Internal function for duplicating an object.
 * @param {object} elem - The object to recursively duplicate.
 * @return {object} object
 **/
function detach(elem) {
  var t = elem.constructor.name;
  var ans = void 0;
  if (t === 'Object') {
    ans = {};
    for (var p in elem) {
      ans[p] = detach(elem[p]);
    }
  } else if (t === 'Array') {
    ans = [];
    for (var i = 0, l = elem.length; i < l; i++) {
      ans[i] = detach(elem[i]);
    }
  } else {
    ans = elem;
  }

  return ans;
}

/**
 * Verifies if a given number is power of two or not.
 * @param {object} n - The number to check.
 * @return {Array} Returns true if the given number is power of 2, false otherwise.
 **/
function isPowerOfTwo(n) {
  __WEBPACK_IMPORTED_MODULE_0_assert___default()(typeof n === 'number', 'Input must be a number');
  return n && (n & n - 1) === 0;
}
//# sourceMappingURL=utils.js.map

/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getKeyValue;
/* harmony export (immutable) */ __webpack_exports__["b"] = getKey;
/* harmony export (immutable) */ __webpack_exports__["c"] = getKeyType;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);


// Resolve a WebGL enumeration name (returns itself if already a number)
function getKeyValue(gl, name) {
  // If not a string, return (assume number)
  if (typeof name !== 'string') {
    return name;
  }

  // If string converts to number, return number
  var number = Number(name);
  if (!isNaN(number)) {
    return number;
  }

  // Look up string, after removing any 'GL.' or 'gl.' prefix
  name = name.replace(/^.*\./, '');
  var value = gl[name];
  __WEBPACK_IMPORTED_MODULE_0_assert___default()(value !== undefined, 'Accessing undefined constant GL.' + name);
  return value;
}

function getKey(gl, value) {
  value = Number(value);
  for (var key in gl) {
    if (gl[key] === value) {
      return 'gl.' + key;
    }
  }
  return String(value);
}

function getKeyType(gl, value) {
  __WEBPACK_IMPORTED_MODULE_0_assert___default()(value !== undefined, 'undefined key');
  value = Number(value);
  for (var key in gl) {
    if (gl[key] === value) {
      return 'gl.' + key;
    }
  }
  return String(value);
}
//# sourceMappingURL=constants-to-keys.js.map

/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = getPageLoadPromise;
/* harmony export (immutable) */ __webpack_exports__["a"] = createCanvas;
/* harmony export (immutable) */ __webpack_exports__["b"] = getCanvas;
/* unused harmony export getCSSSize */
/* unused harmony export getDrawingBufferSize */
/* unused harmony export calculateDrawingBufferSize */
/* unused harmony export resizeCanvas */
/* harmony export (immutable) */ __webpack_exports__["d"] = resizeDrawingBuffer;
// Resizing a webgl canvas

/* global window, document */

var isBrowser = typeof window !== 'undefined';

var isPageLoaded = false;

var pageLoadPromise = isBrowser ? new Promise(function (resolve, reject) {
  window.onload = function () {
    isPageLoaded = true;
    resolve(document);
  };
}) : Promise.resolve({});

/**
 * Returns a promise that resolves when the page is loaded
 * at this point the DOM can be manipulated, and e.g. a new canvas can be inserted
 * @return {Promise} - resolves when the page is loaded
 */
function getPageLoadPromise() {
  return pageLoadPromise;
}

/**
 * Create a canvas
 * @param {Number} width - set to 100%
 * @param {Number} height - set to 100%
 */
function createCanvas(_ref) {
  var _ref$width = _ref.width,
      width = _ref$width === undefined ? 800 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === undefined ? 600 : _ref$height,
      _ref$id = _ref.id,
      id = _ref$id === undefined ? 'gl-canvas' : _ref$id,
      _ref$insert = _ref.insert,
      insert = _ref$insert === undefined ? true : _ref$insert;

  var canvas = document.createElement('canvas');
  canvas.id = id;
  canvas.style.width = Number.isFinite(width) ? width + 'px' : '100%';
  canvas.style.height = Number.isFinite(height) ? height + 'px' : '100%';
  // add the canvas to the body element once the page has loaded
  if (insert) {
    getPageLoadPromise().then(function (document) {
      var body = document.body;
      body.insertBefore(canvas, body.firstChild);
    });
  }
  return canvas;
}

/**
 * Gets an already created canvas from the DOM
 * @param {Number} id - DOM element id
 */
function getCanvas(_ref2) {
  var id = _ref2.id;

  if (!isPageLoaded) {
    throw new Error('createGLContext called on canvas \'' + id + '\' before page was loaded');
  }
  return document.getElementById(id);
}

// Gets current size of canvas in css (logical/window) coordinates
function getCSSSize(canvas) {
  return {
    width: canvas.clientWidth,
    height: canvas.clientHeight
  };
}

// Gets current size of canvas drawing buffer in actual pixels
// This is needed for the gl.viewport call
function getDrawingBufferSize(canvas) {
  return {
    width: canvas.width,
    height: canvas.height
  };
}

// Calculate the drawing buffer size that would cover current canvas size and device pixel ratio
// Intention is that every pixel in the drawing buffer will have a 1-to-1 mapping with
// actual device pixels in the hardware framebuffer, allowing us to render at the full
// resolution of the device.
function calculateDrawingBufferSize(canvas, _ref3) {
  var _ref3$useDevicePixelR = _ref3.useDevicePixelRatio,
      useDevicePixelRatio = _ref3$useDevicePixelR === undefined ? true : _ref3$useDevicePixelR;

  var cssToDevicePixels = useDevicePixelRatio ? window.devicePixelRatio || 1 : 1;

  // Lookup the size the browser is displaying the canvas in CSS pixels
  // and compute a size needed to make our drawingbuffer match it in
  // device pixels.
  var cssSize = getCSSSize(canvas);
  return {
    width: Math.floor(cssSize.width * cssToDevicePixels),
    height: Math.floor(cssSize.height * cssToDevicePixels),
    devicePixelRatio: cssToDevicePixels
  };
}

/**
 * Resizes canvas in "CSS coordinates" (note these can be very different from device coords,
 * depending on devicePixelRatio/retina screens and size of drawing buffer)
 * and can be changed separately from drawing buffer size.
 * Therefore, normally `resizeDrawingBuffer` should be called after calling `resizeCanvas`.
 *
 * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
 *
 * @param {Number} width, height - new width and height of canvas in CSS coordinates
 */
function resizeCanvas(canvas, _ref4) {
  var width = _ref4.width,
      height = _ref4.height,
      _ref4$useDevicePixelR = _ref4.useDevicePixelRatio,
      useDevicePixelRatio = _ref4$useDevicePixelR === undefined ? true : _ref4$useDevicePixelR;

  canvas.style.width = width + 'px';
  canvas.style.height = height + 'px';
}

/**
 * Resize the canvas' drawing buffer to match the canvas CSS size,
 * and by default to also consider devicePixelRatio
 * detects if anything has changed, can be called every frame
 * for best visual results, usually set to either:
 *  canvas CSS width x canvas CSS height
 *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio
 *
 * NOTE: Regardless of size, the drawing buffer will always be scaled to the viewport
 * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
 *
 * @param {Number} width - new width of canvas in CSS coordinates
 * @param {Number} height - new height of canvas in CSS coordinates
 */
function resizeDrawingBuffer(canvas, _ref5) {
  var _ref5$useDevicePixelR = _ref5.useDevicePixelRatio,
      useDevicePixelRatio = _ref5$useDevicePixelR === undefined ? true : _ref5$useDevicePixelR;

  // Resize the render buffer of the canvas to match canvas client size
  // multiplying with dpr (Optionally can be turned off)
  var newBufferSize = calculateDrawingBufferSize(canvas, { useDevicePixelRatio: useDevicePixelRatio });
  // Only update if the canvas size has not changed
  if (newBufferSize.width !== canvas.width || newBufferSize.height !== canvas.height) {
    // Make the canvas render buffer the same size as
    canvas.width = newBufferSize.width;
    canvas.height = newBufferSize.height;
    // Always reset CSS size after setting drawing buffer size
    // canvas.style.width = `${cssSize.width}px`;
    // canvas.style.height = `${cssSize.height}px`;
  }
}
//# sourceMappingURL=create-canvas.js.map

/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createContext;
/* unused harmony export trackContextCreation */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);
// Create a WebGL context

/* global HTMLCanvasElement, WebGLRenderingContext */

/**
 * Create a WebGL context for a canvas
 * Note calling this multiple time on the same canvas does return the same context
 */
function createContext(_ref) {
  var canvas = _ref.canvas,
      _ref$opts = _ref.opts,
      opts = _ref$opts === undefined ? {} : _ref$opts,
      _ref$onError = _ref.onError,
      onError = _ref$onError === undefined ? function (message) {
    return null;
  } : _ref$onError;

  // See if we can extract any extra information about why context creation failed
  function onContextCreationError(error) {
    onError('WebGL context: ' + (error.statusMessage || 'Unknown error'));
  }
  canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);

  var _opts$webgl = opts.webgl1,
      webgl1 = _opts$webgl === undefined ? true : _opts$webgl,
      _opts$webgl2 = opts.webgl2,
      webgl2 = _opts$webgl2 === undefined ? true : _opts$webgl2;

  var gl = null;
  // Prefer webgl2 over webgl1, prefer conformant over experimental
  if (webgl2) {
    gl = gl || canvas.getContext('webgl2', opts);
    gl = gl || canvas.getContext('experimental-webgl2', opts);
  }
  if (webgl1) {
    gl = gl || canvas.getContext('webgl', opts);
    gl = gl || canvas.getContext('experimental-webgl', opts);
  }

  canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);

  if (!gl) {
    return onError('Failed to create ' + (webgl2 && !webgl1 ? 'WebGL2' : 'WebGL') + ' context');
  }

  return gl;
}

/**
 * Installs a spy on Canvas.getContext
 * calls the provided callback with the {context}
 */
function trackContextCreation(_ref2) {
  var _ref2$onContextCreate = _ref2.onContextCreate,
      onContextCreate = _ref2$onContextCreate === undefined ? function () {
    return null;
  } : _ref2$onContextCreate,
      _ref2$onContextCreate2 = _ref2.onContextCreated,
      onContextCreated = _ref2$onContextCreate2 === undefined ? function () {} : _ref2$onContextCreate2;

  __WEBPACK_IMPORTED_MODULE_0_assert___default()(onContextCreate || onContextCreated);
  if (typeof HTMLCanvasElement !== 'undefined') {
    var getContext = HTMLCanvasElement.prototype.getContext;
    HTMLCanvasElement.prototype.getContext = function getContextSpy(type, opts) {
      // Let intercepter create context
      var context = void 0;
      if (type === 'webgl') {
        context = onContextCreate({ canvas: this, type: type, opts: opts, getContext: getContext.bind(this) });
      }
      // If not, create context
      context = context || getContext.call(this, type, opts);
      // Report it created
      if (context instanceof WebGLRenderingContext) {
        onContextCreated({ canvas: this, context: context, type: type, opts: opts });
      }
      return context;
    };
  }
}
//# sourceMappingURL=create-context.js.map

/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = parseGLSLCompilerError;
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__get_shader_name__ = __webpack_require__(78);
// TODO - formatGLSLCompilerError should not depend on this


/**
 * Parse a GLSL compiler error log into a string showing the source code around each error.
 * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)
 */
/* eslint-disable no-continue, max-statements */
function parseGLSLCompilerError(errLog, src, shaderType) {
  var errorStrings = errLog.split(/\r?\n/);
  var errors = {};
  var warnings = {};

  // Parse the error - note: browser and driver dependent
  for (var i = 0; i < errorStrings.length; i++) {
    var errorString = errorStrings[i];
    if (errorString.length <= 1) {
      continue;
    }
    var segments = errorString.split(':');
    var _type = segments[0];
    var line = parseInt(segments[2], 10);
    if (isNaN(line)) {
      throw new Error('Could not parse GLSL compiler error: ' + errLog);
    }
    if (_type !== 'WARNING') {
      errors[line] = errorString;
    } else {
      warnings[line] = errorString;
    }
  }

  // Format the error inline with the code
  var lines = addLineNumbers(src);
  var name = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__get_shader_name__["a" /* default */])(src) || 'unknown name';
  var type = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__get_shader_name__["b" /* getShaderTypeName */])(shaderType);

  return {
    shaderName: type + ' shader ' + name + '\n',
    errors: formatErrors(errors, lines),
    warnings: formatErrors(warnings, lines)
  };
}

// Formats GLSL compiler error log into single string
function formatGLSLCompilerError(errLog, src, shaderType) {
  var _parseGLSLCompilerErr = parseGLSLCompilerError(errLog, src, shaderType),
      shaderName = _parseGLSLCompilerErr.shaderName,
      errors = _parseGLSLCompilerErr.errors,
      warnings = _parseGLSLCompilerErr.warnings;

  return 'GLSL compilation error in ' + shaderName + '\n' + errors + '\n' + warnings;
}

// helper function, outputs annotated errors or warnings
function formatErrors(errors, lines) {
  var message = '';
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i];
    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {
      continue;
    }
    message += line + '\n';
    if (errors[i + 1]) {
      var error = errors[i + 1];
      var segments = error.split(':', 3);
      var type = segments[0];
      var column = parseInt(segments[1], 10) || 0;
      var err = error.substr(segments.join(':').length + 1).trim();
      message += padLeft('^^^ ' + type + ': ' + err + '\n\n', column);
    }
  }
  return message;
}

/**
 * Prepends line numbers to each line of a string.
 * The line numbers will be left-padded with spaces to ensure an
 * aligned layout when rendered using monospace fonts.
 * @param {String} string - multi-line string to add line numbers to
 * @param {Number} start=1 - number of spaces to add
 * @param {String} delim =': ' - injected between line number and original line
 * @return {String[]} strings - array of string, one per line, with line numbers added
 */
function addLineNumbers(string) {
  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var delim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ': ';

  var lines = string.split(/\r?\n/);
  var maxDigits = String(lines.length + start - 1).length;
  return lines.map(function (line, i) {
    var lineNumber = i + start;
    var digits = String(lineNumber).length;
    var prefix = padLeft(lineNumber, maxDigits - digits);
    return prefix + delim + line;
  });
}

/**
 * Pads a string with a number of spaces (space characters) to the left
 * @param {String} string - string to pad
 * @param {Number} digits - number of spaces to add
 * @return {String} string - The padded string
 */
function padLeft(string, digits) {
  var result = '';
  for (var i = 0; i < digits; ++i) {
    result += ' ';
  }
  return '' + result + string;
}
//# sourceMappingURL=format-glsl-error.js.map

/***/ }),
/* 207 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getParameterPolyfill;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(9);
var _WEBGL_PARAMETERS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-inline-comments, max-len, camelcase */


var OES_element_index = 'OES_element_index';
var WEBGL_draw_buffers = 'WEBGL_draw_buffers';
var EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';
var EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';
var EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';
var WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';

var GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
var GL_DONT_CARE = 0x1100;
var GL_GPU_DISJOINT_EXT = 0x8FBB;
var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
var GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.
var GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.

var getWebGL2ValueOrZero = function getWebGL2ValueOrZero(gl) {
  return !isWebGL2(gl) ? 0 : undefined;
};

// if a function returns undefined in this table,
// the original getParameter will be called, defeating the override
var WEBGL_PARAMETERS = (_WEBGL_PARAMETERS = {}, _defineProperty(_WEBGL_PARAMETERS, GL_FRAGMENT_SHADER_DERIVATIVE_HINT, function (gl) {
  return !isWebGL2(gl) ? GL_DONT_CARE : undefined;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].RASTERIZER_DISCARD, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLES, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, GL_GPU_DISJOINT_EXT, function (gl, getParameter) {
  var ext = isWebGL2(gl) ? gl.getExtension(EXT_disjoint_timer_query_webgl2) : gl.getExtension(EXT_disjoint_timer_query);
  return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;
}), _defineProperty(_WEBGL_PARAMETERS, GL_UNMASKED_VENDOR_WEBGL, function (gl, getParameter) {
  var ext = gl.getExtension(WEBGL_debug_renderer_info);
  return getParameter(ext && ext.UNMASKED_VENDOR_WEBGL || __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].VENDOR);
}), _defineProperty(_WEBGL_PARAMETERS, GL_UNMASKED_RENDERER_WEBGL, function (gl, getParameter) {
  var ext = gl.getExtension(WEBGL_debug_renderer_info);
  return getParameter(ext && ext.UNMASKED_RENDERER_WEBGL || __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].RENDERER);
}), _defineProperty(_WEBGL_PARAMETERS, GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, function (gl, getParameter) {
  var ext = gl.luma.extensions[EXT_texture_filter_anisotropic];
  return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_3D_TEXTURE_SIZE, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_ARRAY_TEXTURE_LAYERS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_CLIENT_WAIT_TIMEOUT_WEBGL, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_COLOR_ATTACHMENTS, function (gl, getParameter) {
  if (!isWebGL2(gl)) {
    var ext = gl.getExtension(WEBGL_draw_buffers);
    return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;
  }
  return undefined;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_COMBINED_UNIFORM_BLOCKS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_DRAW_BUFFERS, function (gl) {
  if (!isWebGL2(gl)) {
    var ext = gl.getExtension(WEBGL_draw_buffers);
    return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;
  }
  return undefined;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_ELEMENT_INDEX,
// Guess: per webglstats.com 99.6% of webgl2 supports 2147483647
function (gl) {
  return gl.getExtension(OES_element_index) ? 2147483647 : 65535;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_ELEMENTS_INDICES,
// Guess: "Reasonably safe" per webglstats.com - could be higher/lower (on some mobile devices)
function (gl) {
  return gl.getExtension(OES_element_index) ? 16777216 : 65535;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_ELEMENTS_VERTICES,
// Guess: "Reasonably safe" per webglstats.com - could be higher/lower (on some mobile devices)
function (gl) {
  return 16777216;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_FRAGMENT_INPUT_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_FRAGMENT_UNIFORM_BLOCKS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_FRAGMENT_UNIFORM_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_SAMPLES, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_SERVER_WAIT_TIMEOUT, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_TEXTURE_LOD_BIAS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_UNIFORM_BLOCK_SIZE, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_UNIFORM_BUFFER_BINDINGS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_VARYING_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_VERTEX_OUTPUT_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_VERTEX_UNIFORM_BLOCKS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_VERTEX_UNIFORM_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MIN_PROGRAM_TEXEL_OFFSET, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_PROGRAM_TEXEL_OFFSET, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNIFORM_BUFFER_OFFSET_ALIGNMENT, getWebGL2ValueOrZero), _WEBGL_PARAMETERS);

// Return true if WebGL2 context
function isWebGL2(gl) {
  var GL_TEXTURE_BINDING_3D = 0x806A;
  return gl && gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D;
}

// A "replacement" gl.getParameter that accepts "enums" from extensions and WebGL2
// and returns reasonably safe defaults
function getParameterPolyfill(gl, originalGetParameter, pname) {

  // Return mock limits (usually 0) for WebGL2 constants to ensure these
  // can be queries without error
  var limit = WEBGL_PARAMETERS[pname];
  var value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;
  var result = value !== undefined ? value : originalGetParameter(pname);
  return result;
}
//# sourceMappingURL=polyfill-get-parameter.js.map

/***/ }),
/* 208 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_texture__ = __webpack_require__(13);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import GL from './api';

// import {isWebGl2Context, assertWebGL2Context, withParameters} from './context';

// import Buffer from './buffer';

var Texture2DArray = /*#__PURE__*/function (_Texture) {
  _inherits(Texture2DArray, _Texture);

  _createClass(Texture2DArray, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__context__["b" /* isWebGL2 */])(gl);
    }
  }]);

  function Texture2DArray(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Texture2DArray);

    var _this = _possibleConstructorReturn(this, (Texture2DArray.__proto__ || Object.getPrototypeOf(Texture2DArray)).call(this, gl, opts));

    throw new Error('Texture2DArray not yet implemented');
    return _this;
  }

  return Texture2DArray;
}(__WEBPACK_IMPORTED_MODULE_1__webgl_texture__["a" /* default */]);

/* unused harmony default export */ var _unused_webpack_default_export = (Texture2DArray);
//# sourceMappingURL=texture-2d-array.js.map

/***/ }),
/* 209 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context_state__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_texture__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__buffer__ = __webpack_require__(18);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var Texture3D = /*#__PURE__*/function (_Texture) {
  _inherits(Texture3D, _Texture);

  _createClass(Texture3D, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl);
    }

    /**
     * @classdesc
     * 3D WebGL Texture
     * Note: Constructor will initialize your texture.
     *
     * @class
     * @param {WebGLRenderingContext} gl - gl context
     * @param {Image|ArrayBuffer|null} opts= - named options
     * @param {Image|ArrayBuffer|null} opts.data= - buffer
     * @param {GLint} width - width of texture
     * @param {GLint} height - height of texture
     */

  }]);

  function Texture3D(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Texture3D);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(gl);

    var _this = _possibleConstructorReturn(this, (Texture3D.__proto__ || Object.getPrototypeOf(Texture3D)).call(this, gl, Object.assign({}, opts, { target: opts.target || __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_3D })));

    _this.width = null;
    _this.height = null;
    _this.depth = null;
    Object.seal(_this);

    _this.setImageData(opts);
    if (opts.generateMipmap) {
      _this.generateMipmap();
    }
    return _this;
  }

  _createClass(Texture3D, [{
    key: 'initialize',
    value: function initialize() {
      var _this2 = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.opts = Object.assign({}, this.opts, opts);
      var _opts = this.opts,
          pixels = _opts.pixels,
          settings = _opts.settings;

      if (settings) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context_state__["a" /* withParameters */])(settings, function () {
          if (pixels) {
            _this2.setImage3D(_this2.opts);
          }
        });
        this.setParameters(opts);
      }
    }

    // WebGL2

    // Image 3D copies from Typed Array or WebGLBuffer

  }, {
    key: 'setImage3D',
    value: function setImage3D(_ref) {
      var _ref$level = _ref.level,
          level = _ref$level === undefined ? 0 : _ref$level,
          _ref$internalformat = _ref.internalformat,
          internalformat = _ref$internalformat === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA : _ref$internalformat,
          width = _ref.width,
          height = _ref.height,
          _ref$depth = _ref.depth,
          depth = _ref$depth === undefined ? 1 : _ref$depth,
          _ref$border = _ref.border,
          border = _ref$border === undefined ? 0 : _ref$border,
          format = _ref.format,
          _ref$type = _ref.type,
          type = _ref$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_BYTE : _ref$type,
          _ref$offset = _ref.offset,
          offset = _ref$offset === undefined ? 0 : _ref$offset,
          pixels = _ref.pixels;

      if (ArrayBuffer.isView(pixels)) {
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, pixels);
        return;
      }
      if (pixels instanceof __WEBPACK_IMPORTED_MODULE_4__buffer__["a" /* default */]) {
        this.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].PIXEL_UNPACK_BUFFER, pixels.handle);
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, offset);
        this.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].PIXEL_UNPACK_BUFFER, pixels.handle);
      }
    }
  }]);

  return Texture3D;
}(__WEBPACK_IMPORTED_MODULE_3__webgl_texture__["a" /* default */]);

/* unused harmony default export */ var _unused_webpack_default_export = (Texture3D);
//# sourceMappingURL=texture-3d.js.map

/***/ }),
/* 210 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UNIFORM_TYPES;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable camelcase */


var ERR_ARGUMENT = 'UniformBufferLayout illegal argument';

// Local constants - these will "collapse" during minification
var GL_INT = 0x1404;
var GL_INT_VEC2 = 0x8B53;
var GL_INT_VEC3 = 0x8B54;
var GL_INT_VEC4 = 0x8B55;

var GL_FLOAT = 0x1406;
var GL_FLOAT_VEC2 = 0x8B50;
var GL_FLOAT_VEC3 = 0x8B51;
var GL_FLOAT_VEC4 = 0x8B52;

var GL_BOOL = 0x8B56;
var GL_BOOL_VEC2 = 0x8B57;
var GL_BOOL_VEC3 = 0x8B58;
var GL_BOOL_VEC4 = 0x8B59;

var GL_UNSIGNED_INT = 0x1405;
var GL_UNSIGNED_INT_VEC2 = 0x8DC6;
var GL_UNSIGNED_INT_VEC3 = 0x8DC7;
var GL_UNSIGNED_INT_VEC4 = 0x8DC8;

var GL_FLOAT_MAT2 = 0x8B5A;
var GL_FLOAT_MAT3 = 0x8B5B;
var GL_FLOAT_MAT4 = 0x8B5C;

var GL_FLOAT_MAT2x3 = 0x8B65;
var GL_FLOAT_MAT2x4 = 0x8B66;
var GL_FLOAT_MAT3x2 = 0x8B67;
var GL_FLOAT_MAT3x4 = 0x8B68;
var GL_FLOAT_MAT4x2 = 0x8B69;
var GL_FLOAT_MAT4x3 = 0x8B6A;

// Uniform table for std140
var UNIFORM_TYPES = (_UNIFORM_TYPES = {}, _defineProperty(_UNIFORM_TYPES, GL_FLOAT, [GL_FLOAT, 1]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_VEC2, [GL_FLOAT, 2]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_VEC3, [GL_FLOAT, 3]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_VEC4, [GL_FLOAT, 4]), _defineProperty(_UNIFORM_TYPES, GL_INT, [GL_INT, 1]), _defineProperty(_UNIFORM_TYPES, GL_INT_VEC2, [GL_INT, 2]), _defineProperty(_UNIFORM_TYPES, GL_INT_VEC3, [GL_INT, 3]), _defineProperty(_UNIFORM_TYPES, GL_INT_VEC4, [GL_INT, 4]), _defineProperty(_UNIFORM_TYPES, GL_UNSIGNED_INT, [GL_UNSIGNED_INT, 1]), _defineProperty(_UNIFORM_TYPES, GL_UNSIGNED_INT_VEC2, [GL_UNSIGNED_INT, 2]), _defineProperty(_UNIFORM_TYPES, GL_UNSIGNED_INT_VEC3, [GL_UNSIGNED_INT, 3]), _defineProperty(_UNIFORM_TYPES, GL_UNSIGNED_INT_VEC4, [GL_UNSIGNED_INT, 4]), _defineProperty(_UNIFORM_TYPES, GL_BOOL, [GL_FLOAT, 1]), _defineProperty(_UNIFORM_TYPES, GL_BOOL_VEC2, [GL_FLOAT, 2]), _defineProperty(_UNIFORM_TYPES, GL_BOOL_VEC3, [GL_FLOAT, 3]), _defineProperty(_UNIFORM_TYPES, GL_BOOL_VEC4, [GL_FLOAT, 4]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT2, [GL_FLOAT, 8]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT2x3, [GL_FLOAT, 8]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT2x4, [GL_FLOAT, 8]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT3, [GL_FLOAT, 12]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT3x2, [GL_FLOAT, 12]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT3x4, [GL_FLOAT, 12]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT4, [GL_FLOAT, 16]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT4x2, [GL_FLOAT, 16]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT4x3, [GL_FLOAT, 16]), _UNIFORM_TYPES);

// Std140 layout for uniforms

var UniformBufferLayout = /*#__PURE__*/function () {
  function UniformBufferLayout(layout) {
    var _typedArray;

    _classCallCheck(this, UniformBufferLayout);

    this.layout = {};
    this.size = 0;

    // Add layout (type, size and offset) definitions for each uniform in the layout
    for (var key in layout) {
      this._addUniform(key, layout[key]);
    }

    // Allocate three typed arrays pointing at same memory
    var data = new Float32Array(this.size);
    this.typedArray = (_typedArray = {}, _defineProperty(_typedArray, GL_FLOAT, data), _defineProperty(_typedArray, GL_INT, new Int32Array(data.buffer)), _defineProperty(_typedArray, GL_UNSIGNED_INT, new Uint32Array(data.buffer)), _typedArray);
  }

  // Get number of bytes needed for buffer allocation


  _createClass(UniformBufferLayout, [{
    key: 'getBytes',
    value: function getBytes() {
      return this.size * 4;
    }

    // Get the current data as Float32Array, for bufferSubData

  }, {
    key: 'getData',
    value: function getData() {
      return this.typedArray[GL_FLOAT];
    }

    // Get offset and data for one object (for bufferSubData)

  }, {
    key: 'getSubData',
    value: function getSubData(index) {
      var data = void 0;
      var offset = void 0;
      if (index === undefined) {
        data = this.data;
        offset = 0;
      } else {
        var begin = this.offsets[index];
        var end = begin + this.sizes[index];
        data = this.data.subarray(begin, end);
        offset = begin * 4;
      }
      return { data: data, offset: offset };
    }

    // Set a map of values

  }, {
    key: 'setUniforms',
    value: function setUniforms(values) {
      for (var key in values) {
        this._setValue(key, values[key]);
      }
      return this;
    }
  }, {
    key: '_setValue',
    value: function _setValue(key, value) {
      var layout = this.layout[key];
      __WEBPACK_IMPORTED_MODULE_0_assert___default()(layout, 'UniformLayoutStd140 illegal argument');
      var typedArray = this.typedArray[layout.type];
      if (layout.size === 1) {
        // single value -> just set it
        typedArray[layout.offset] = value;
      } else {
        // vector/matrix -> copy the supplied (typed) array, starting from offset
        typedArray.set(value, layout.offset);
      }
    }
  }, {
    key: '_addUniform',
    value: function _addUniform(key, uniformType) {
      var definition = UNIFORM_TYPES[uniformType];
      __WEBPACK_IMPORTED_MODULE_0_assert___default()(definition, ERR_ARGUMENT);

      var _definition = _slicedToArray(definition, 2),
          type = _definition[0],
          count = _definition[1];

      // Get the current offset and calculate the next offset based on aligned size of this element


      var offset = this.size;
      // First, align (bump) current offset to an even multiple of current object (1, 2, 4)
      this.size = this._alignTo(this.size, count);
      // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset
      this.size += count;

      this.layout[key] = { type: type, size: count, offset: offset };
    }

    // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)

  }, {
    key: '_alignTo',
    value: function _alignTo(size, count) {
      switch (count) {
        case 1:
          return size; // Pad upwards to even multiple of 2
        case 2:
          return size + size % 2; // Pad upwards to even multiple of 2
        default:
          return size + (4 - size % 4) % 4; // Pad upwards to even multiple of 4
      }
    }
  }]);

  return UniformBufferLayout;
}();

/* unused harmony default export */ var _unused_webpack_default_export = (UniformBufferLayout);
//# sourceMappingURL=uniform-buffer-layout.js.map

/***/ }),
/* 211 */
/***/ (function(module, exports) {

module.exports = {"_args":[["luma.gl@4.0.6","/Users/nico/dev/luma.gl/examples/core/myriahedral"]],"_from":"luma.gl@4.0.6","_id":"luma.gl@4.0.6","_inBundle":false,"_integrity":"sha1-gV3llPEh1Nyh1oq9lB/W22BEDGc=","_location":"/luma.gl","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"luma.gl@4.0.6","name":"luma.gl","escapedName":"luma.gl","rawSpec":"4.0.6","saveSpec":null,"fetchSpec":"4.0.6"},"_requiredBy":["/"],"_resolved":"https://registry.npmjs.org/luma.gl/-/luma.gl-4.0.6.tgz","_spec":"4.0.6","_where":"/Users/nico/dev/luma.gl/examples/core/myriahedral","babel":{"presets":[["es2015",{"modules":false}]],"env":{"test":{"plugins":["istanbul"]}}},"bugs":{"url":"https://github.com/uber/luma.gl/issues"},"contributors":[{"name":"Ib Green","email":"ib@uber.com"},{"name":"Nicolas Belmonte","email":"nico@uber.com"},{"name":"Rye Terrell"},{"name":"Shan He","email":"shan@uber.com"},{"name":"Mikola Lysenko"},{"name":"Wesam Manassra","email":"manassra@uber.com"},{"name":"Shaojing Li","email":"shaojing@uber.com"},{"name":"Ravi Akenapalli","email":"chandu@uber.com"}],"dependencies":{"gl-constants":"^1.0.0","gl-mat4":"^1.1.4","gl-quat":"^1.0.0","gl-vec2":"^1.0.0","gl-vec3":"^1.0.3","gl-vec4":"^1.0.1","seer":"^0.2.2","webgl-debug":"^1.0.2"},"description":"A WebGL JavaScript visualization library.","devDependencies":{"babel-cli":"^6.18","babel-core":"^6.18","babel-eslint":"^6.0.0","babel-plugin-istanbul":"^4.1.1","babel-plugin-transform-builtin-extend":"^1.1.0","babel-preset-es2015":"^6.18","babelify":"^7.2.0","benchmark":"^2.1.4","brfs-babel":"^1.0.0","browserify":"^13.0.0","buble":"^0.15.1","buble-loader":"^0.4.0","coveralls":"^2.13.0","disc":"^1.3.2","eslint":"^3.0","eslint-config-uber-es2015":"^3.0.0","eslint-config-uber-jsx":"^3.0.0","eslint-plugin-babel":"^4.0.0","eslint-plugin-react":"~6.7.0","faucet":"0.0.1","gl":"^4.0.2","mkdirp":"^0.5.1","module-alias":"^2.0.0","nyc":"^10.2.0","pre-commit":"^1.2.2","raw-loader":"^0.5.1","reify":"^0.4.4","source-map-loader":"^0.2.1","source-map-support":"^0.4.2","tap-browser-color":"^0.1.2","tape":"^4.6.3","tape-catch":"^1.0.4","tape-promise":"^1.1.0","webpack-dev-server":"^2.4.4"},"files":["src","dist","dist-es6","headless.js"],"homepage":"https://github.com/uber/luma.gl#readme","keywords":["webgl","visualization","animation","3d"],"license":"MIT","main":"dist/index.js","module":"dist-es6/index.js","name":"luma.gl","nyc":{"sourceMap":false,"instrument":false,"include":["src/**/*.js"],"exclude":["test/**/*.js"]},"repository":{"type":"git","url":"git+https://github.com/uber/luma.gl.git"},"scripts":{"bench":"node test/bench/node.js","bench-browser":"webpack-dev-server --env.bench --progress --hot --open","build":"npm run build-clean && npm run build-es6 && npm run build-es5","build-clean":"rm -fr dist dist-es6 && mkdir -p dist/packages dist-es6/packages ","build-es5":"babel src --out-dir dist --plugins=transform-es2015-modules-commonjs --source-maps && babel packages --out-dir dist/packages --plugins=transform-es2015-modules-commonjs --source-maps","build-es6":"babel src --out-dir dist-es6 --source-maps && babel packages --out-dir dist-es6/packages --source-maps","build-es6-packages":"","cover":"NODE_ENV=test nyc --reporter html --reporter cobertura --reporter=lcov npm run test-cover","docs":"npm run docs-build && open ./_docs/docs/index.html","docs-build":"rm -fr _docs/* && jekyll build --config=docs/_config.yml --layouts docs/_layouts","docs-gh-pages":"git subtree push --prefix _docs origin gh-pages","docs-gh-pages-force":"git push origin `git subtree split --prefix _docs dev`:gh-pages --force","docs-publish":"npm run docs-build && git add _docs -f && git commit -m 'UPDATE DOCS' --no-verify && npm run docs-gh-pages","lint":"eslint src test && npm run lint-yarn","lint-examples":"eslint examples","lint-yarn":"!(grep -q unpm.u yarn.lock) || (echo 'Please rebuild yarn.lock file using public npmrc' && false)","publish-beta":"npm run build && npm run test-fast && npm publish --tag beta","publish-prod":"npm run build && npm run test-fast && npm publish","start":"cat < docs/get-started/examples.md","test":"npm run lint && npm run build && npm run test-node","test-browser":"webpack-dev-server --env.test --progress --hot --open","test-cover":"NODE_ENV=test tape -r babel-register test/node.js && nyc report","test-fast":"node test/node.js","test-fp64":"(cd src/shadertools/modules/fp64/test && webpack-dev-server --progress --hot --open)","test-node":"node test/node.js | faucet","test-shader":"npm run build-dist && budo src/test/fp64-shader.spec.js:build/test-bundle.js --dir test --live --open --watch-glob '**/*.{html,css,scss,js,glsl}' -- -t babelify -t brfs-babel"},"version":"4.0.6"}

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isBrowser = window && window.addEventListener;

var timers = new Map();

/**
 * Utility method allowing to throttle a user action based on a key and a minimun delay.
 *
 * @param key {String} A unique key
 * @param delay {Number} The minimal delay to throttle
 * @returns {Boolean}
 */
var throttle = function throttle(key, delay) {
  var time = timers.get(key);
  var now = Date.now();
  if (time && now - time < delay) {
    return true;
  }
  timers.set(key, now);
  return false;
};

var replacer = function replacer(seen) {
  return function (key, value) {
    if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && seen.has(value)) {
      return;
    }
    seen.add(value);
    var isArray = Object.prototype.toString.call(value).slice(8, -1).includes('Array');
    if (isArray) {
      return Array.prototype.slice.call(value, 0, 20);
    }
    return value;
  };
};

/**
 * Check for the initialized boolean indicating if Seer is ready.
 *
 * @returns {Boolean}
 */
var isReady = function isReady() {
  return window && window.__SEER_INITIALIZED__;
};

/**
 * Low-level api leveraging window.postMessage
 *
 * @param type {String} The action type
 * @param payload {Any} The action payload
 */
var send = function send(type) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!isBrowser || !isReady()) {
    return;
  }

  var seen = new Set();
  var payload = JSON.stringify(data, replacer(seen));

  try {
    window.postMessage({ type: type, payload: payload, source: 'seer-agent' }, '*');
  } catch (e) {
    if (throttle('seer-log', 2E3)) {
      return;
    }
    console.log(e); // eslint-disable-line
  }
};

var listeners = new Map();

var listener = function listener(message) {
  if (!message || !message.data || message.data.source !== 'seer-core') {
    return;
  }
  var _message$data = message.data,
      type = _message$data.type,
      payload = _message$data.payload;


  var typeListeners = listeners.get(type);
  if (typeListeners) {
    typeListeners.forEach(function (cb) {
      return cb(payload);
    });
  }
};

/**
 * Initilize window listener. There will be only one for the whole process
 * to prevent too many registrations.
 *
 * This method will be called automatically if you use the `listenFor` method.
 */
var init = function init() {
  if (!isBrowser || window.__SEER_LISTENER__) {
    return;
  }
  window.addEventListener('message', listener);
  window.__SEER_LISTENER__ = true;
};

/**
 * Clean listener. Can be useful in case you want to unregister upcoming events
 * or liberate memory.
 */
var clean = function clean() {
  if (!isBrowser || !window.__SEER_LISTENER__) {
    return;
  }
  window.removeEventListener('message', listener);
  delete window.__SEER_LISTENER__;
};

/**
 * Create a listener that will be called upon events of the given key.
 *
 * @param key {String} The unique tab key
 * @param cb {Function} A callback that will receive the message payload
 */
var listenFor = function listenFor(type, cb) {
  if (!isReady) {
    return;
  }
  if (!type || !cb) {
    throw new Error('Please provide a type and callback');
  }
  if (!listeners.has(type)) {
    listeners.set(type, []);
  }
  if (!window.__SEER_LISTENER__) {
    init();
  }
  listeners.get(type).push(cb);
};

/**
 * Remove an identity listener callback
 *
 * @param cb {Function} The callback to unbind
 */
var removeListener = function removeListener(cb) {
  listeners.forEach(function (typeListeners, key) {
    listeners.set(key, typeListeners.filter(function (l) {
      return l !== cb;
    }));
  });
};

/**
 * Creates a new indexed list.
 * It works by index to get O(1) accessing and performance.
 *
 * @param key {String} The key of the tab
 * @param data {Object} The indexed object
 */
var list = function list(key, data) {
  return send('LIST', { key: key, data: data });
};

/**
 * Creates an element in the indexed list, based on the itemKey.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param data {Any} The value of the item
 */
var listItem = function listItem(key, itemKey) {
  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return send('LIST_ITEM', { key: key, itemKey: itemKey, data: data });
};

/**
 * Update an item property, can be deeply nested.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param path {String} The path of the variable you want to update
 * @param data {Object} The new value
 */
var updateItem = function updateItem(key, itemKey, path, data) {
  return send('UPDATE_ITEM', { key: key, itemKey: itemKey, path: path, data: data });
};

/**
 * Similar to updateItem, but allows to pass an array with {path,data} pairs for
 * multiple update of the same item without having to send multiple messages.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param array {Array} The array of updates
 * @param array.path {String} The path for this update
 * @param array.data {Object} The value of this update
 */
var multiUpdate = function multiUpdate(key, itemKey, array) {
  return send('MULTI_UPDATE_ITEM', { key: key, itemKey: itemKey, array: array });
};

/**
 * Remove a specific item in a specific tab.
 *
 * @param key {String} They key of the tab
 * @param itemKey {String} The key of the item
 */
var deleteItem = function deleteItem(key, itemKey) {
  return send('DELETE_ITEM', { key: key, itemKey: itemKey });
};

/**
 * Will create a log message to an item, that will be displayde with the current time.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param msg {String} The message to display
 */
var addLog = function addLog(key, itemKey, msg) {
  return send('ADD_LOG', { key: key, itemKey: itemKey, msg: msg });
};

exports.default = {

  send: send,
  throttle: throttle,

  list: list,
  listItem: listItem,
  updateItem: updateItem,
  multiUpdate: multiUpdate,
  deleteItem: deleteItem,
  addLog: addLog,

  isReady: isReady,
  listeners: listeners,
  listenFor: listenFor,
  removeListener: removeListener,
  init: init,
  clean: clean

};


/***/ }),
/* 213 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 214 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(214);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(213);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28), __webpack_require__(90)))

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*
** Copyright (c) 2012 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

//Ported to node by Marcin Ignac on 2016-05-20

// Various functions for helping debug WebGL apps.

WebGLDebugUtils = function() {

//polyfill window in node
if (typeof(window) == 'undefined') {
    window = global;
}

/**
 * Wrapped logging function.
 * @param {string} msg Message to log.
 */
var log = function(msg) {
  if (window.console && window.console.log) {
    window.console.log(msg);
  }
};

/**
 * Wrapped error logging function.
 * @param {string} msg Message to log.
 */
var error = function(msg) {
  if (window.console && window.console.error) {
    window.console.error(msg);
  } else {
    log(msg);
  }
};


/**
 * Which arguments are enums based on the number of arguments to the function.
 * So
 *    'texImage2D': {
 *       9: { 0:true, 2:true, 6:true, 7:true },
 *       6: { 0:true, 2:true, 3:true, 4:true },
 *    },
 *
 * means if there are 9 arguments then 6 and 7 are enums, if there are 6
 * arguments 3 and 4 are enums
 *
 * @type {!Object.<number, !Object.<number, string>}
 */
var glValidEnumContexts = {
  // Generic setters and getters

  'enable': {1: { 0:true }},
  'disable': {1: { 0:true }},
  'getParameter': {1: { 0:true }},

  // Rendering

  'drawArrays': {3:{ 0:true }},
  'drawElements': {4:{ 0:true, 2:true }},

  // Shaders

  'createShader': {1: { 0:true }},
  'getShaderParameter': {2: { 1:true }},
  'getProgramParameter': {2: { 1:true }},
  'getShaderPrecisionFormat': {2: { 0: true, 1:true }},

  // Vertex attributes

  'getVertexAttrib': {2: { 1:true }},
  'vertexAttribPointer': {6: { 2:true }},

  // Textures

  'bindTexture': {2: { 0:true }},
  'activeTexture': {1: { 0:true }},
  'getTexParameter': {2: { 0:true, 1:true }},
  'texParameterf': {3: { 0:true, 1:true }},
  'texParameteri': {3: { 0:true, 1:true, 2:true }},
  'texImage2D': {
     9: { 0:true, 2:true, 6:true, 7:true },
     6: { 0:true, 2:true, 3:true, 4:true }
  },
  'texSubImage2D': {
    9: { 0:true, 6:true, 7:true },
    7: { 0:true, 4:true, 5:true }
  },
  'copyTexImage2D': {8: { 0:true, 2:true }},
  'copyTexSubImage2D': {8: { 0:true }},
  'generateMipmap': {1: { 0:true }},
  'compressedTexImage2D': {7: { 0: true, 2:true }},
  'compressedTexSubImage2D': {8: { 0: true, 6:true }},

  // Buffer objects

  'bindBuffer': {2: { 0:true }},
  'bufferData': {3: { 0:true, 2:true }},
  'bufferSubData': {3: { 0:true }},
  'getBufferParameter': {2: { 0:true, 1:true }},

  // Renderbuffers and framebuffers

  'pixelStorei': {2: { 0:true, 1:true }},
  'readPixels': {7: { 4:true, 5:true }},
  'bindRenderbuffer': {2: { 0:true }},
  'bindFramebuffer': {2: { 0:true }},
  'checkFramebufferStatus': {1: { 0:true }},
  'framebufferRenderbuffer': {4: { 0:true, 1:true, 2:true }},
  'framebufferTexture2D': {5: { 0:true, 1:true, 2:true }},
  'getFramebufferAttachmentParameter': {3: { 0:true, 1:true, 2:true }},
  'getRenderbufferParameter': {2: { 0:true, 1:true }},
  'renderbufferStorage': {4: { 0:true, 1:true }},

  // Frame buffer operations (clear, blend, depth test, stencil)

  'clear': {1: { 0: { 'enumBitwiseOr': ['COLOR_BUFFER_BIT', 'DEPTH_BUFFER_BIT', 'STENCIL_BUFFER_BIT'] }}},
  'depthFunc': {1: { 0:true }},
  'blendFunc': {2: { 0:true, 1:true }},
  'blendFuncSeparate': {4: { 0:true, 1:true, 2:true, 3:true }},
  'blendEquation': {1: { 0:true }},
  'blendEquationSeparate': {2: { 0:true, 1:true }},
  'stencilFunc': {3: { 0:true }},
  'stencilFuncSeparate': {4: { 0:true, 1:true }},
  'stencilMaskSeparate': {2: { 0:true }},
  'stencilOp': {3: { 0:true, 1:true, 2:true }},
  'stencilOpSeparate': {4: { 0:true, 1:true, 2:true, 3:true }},

  // Culling

  'cullFace': {1: { 0:true }},
  'frontFace': {1: { 0:true }},

  // ANGLE_instanced_arrays extension

  'drawArraysInstancedANGLE': {4: { 0:true }},
  'drawElementsInstancedANGLE': {5: { 0:true, 2:true }},

  // EXT_blend_minmax extension

  'blendEquationEXT': {1: { 0:true }}
};

/**
 * Map of numbers to names.
 * @type {Object}
 */
var glEnums = null;

/**
 * Map of names to numbers.
 * @type {Object}
 */
var enumStringToValue = null;

/**
 * Initializes this module. Safe to call more than once.
 * @param {!WebGLRenderingContext} ctx A WebGL context. If
 *    you have more than one context it doesn't matter which one
 *    you pass in, it is only used to pull out constants.
 */
function init(ctx) {
  if (glEnums == null) {
    glEnums = { };
    enumStringToValue = { };
    for (var propertyName in ctx) {
      if (typeof ctx[propertyName] == 'number') {
        glEnums[ctx[propertyName]] = propertyName;
        enumStringToValue[propertyName] = ctx[propertyName];
      }
    }
  }
}

/**
 * Checks the utils have been initialized.
 */
function checkInit() {
  if (glEnums == null) {
    throw 'WebGLDebugUtils.init(ctx) not called';
  }
}

/**
 * Returns true or false if value matches any WebGL enum
 * @param {*} value Value to check if it might be an enum.
 * @return {boolean} True if value matches one of the WebGL defined enums
 */
function mightBeEnum(value) {
  checkInit();
  return (glEnums[value] !== undefined);
}

/**
 * Gets an string version of an WebGL enum.
 *
 * Example:
 *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());
 *
 * @param {number} value Value to return an enum for
 * @return {string} The string version of the enum.
 */
function glEnumToString(value) {
  checkInit();
  var name = glEnums[value];
  return (name !== undefined) ? ("gl." + name) :
      ("/*UNKNOWN WebGL ENUM*/ 0x" + value.toString(16) + "");
}

/**
 * Returns the string version of a WebGL argument.
 * Attempts to convert enum arguments to strings.
 * @param {string} functionName the name of the WebGL function.
 * @param {number} numArgs the number of arguments passed to the function.
 * @param {number} argumentIndx the index of the argument.
 * @param {*} value The value of the argument.
 * @return {string} The value as a string.
 */
function glFunctionArgToString(functionName, numArgs, argumentIndex, value) {
  var funcInfo = glValidEnumContexts[functionName];
  if (funcInfo !== undefined) {
    var funcInfo = funcInfo[numArgs];
    if (funcInfo !== undefined) {
      if (funcInfo[argumentIndex]) {
        if (typeof funcInfo[argumentIndex] === 'object' &&
            funcInfo[argumentIndex]['enumBitwiseOr'] !== undefined) {
          var enums = funcInfo[argumentIndex]['enumBitwiseOr'];
          var orResult = 0;
          var orEnums = [];
          for (var i = 0; i < enums.length; ++i) {
            var enumValue = enumStringToValue[enums[i]];
            if ((value & enumValue) !== 0) {
              orResult |= enumValue;
              orEnums.push(glEnumToString(enumValue));
            }
          }
          if (orResult === value) {
            return orEnums.join(' | ');
          } else {
            return glEnumToString(value);
          }
        } else {
          return glEnumToString(value);
        }
      }
    }
  }
  if (value === null) {
    return "null";
  } else if (value === undefined) {
    return "undefined";
  } else {
    return value.toString();
  }
}

/**
 * Converts the arguments of a WebGL function to a string.
 * Attempts to convert enum arguments to strings.
 *
 * @param {string} functionName the name of the WebGL function.
 * @param {number} args The arguments.
 * @return {string} The arguments as a string.
 */
function glFunctionArgsToString(functionName, args) {
  // apparently we can't do args.join(",");
  var argStr = "";
  var numArgs = args.length;
  for (var ii = 0; ii < numArgs; ++ii) {
    argStr += ((ii == 0) ? '' : ', ') +
        glFunctionArgToString(functionName, numArgs, ii, args[ii]);
  }
  return argStr;
};


function makePropertyWrapper(wrapper, original, propertyName) {
  //log("wrap prop: " + propertyName);
  wrapper.__defineGetter__(propertyName, function() {
    return original[propertyName];
  });
  // TODO(gmane): this needs to handle properties that take more than
  // one value?
  wrapper.__defineSetter__(propertyName, function(value) {
    //log("set: " + propertyName);
    original[propertyName] = value;
  });
}

// Makes a function that calls a function on another object.
function makeFunctionWrapper(original, functionName) {
  //log("wrap fn: " + functionName);
  var f = original[functionName];
  return function() {
    //log("call: " + functionName);
    var result = f.apply(original, arguments);
    return result;
  };
}

/**
 * Given a WebGL context returns a wrapped context that calls
 * gl.getError after every command and calls a function if the
 * result is not gl.NO_ERROR.
 *
 * @param {!WebGLRenderingContext} ctx The webgl context to
 *        wrap.
 * @param {!function(err, funcName, args): void} opt_onErrorFunc
 *        The function to call when gl.getError returns an
 *        error. If not specified the default function calls
 *        console.log with a message.
 * @param {!function(funcName, args): void} opt_onFunc The
 *        function to call when each webgl function is called.
 *        You can use this to log all calls for example.
 * @param {!WebGLRenderingContext} opt_err_ctx The webgl context
 *        to call getError on if different than ctx.
 */
function makeDebugContext(ctx, opt_onErrorFunc, opt_onFunc, opt_err_ctx) {
  opt_err_ctx = opt_err_ctx || ctx;
  init(ctx);
  opt_onErrorFunc = opt_onErrorFunc || function(err, functionName, args) {
        // apparently we can't do args.join(",");
        var argStr = "";
        var numArgs = args.length;
        for (var ii = 0; ii < numArgs; ++ii) {
          argStr += ((ii == 0) ? '' : ', ') +
              glFunctionArgToString(functionName, numArgs, ii, args[ii]);
        }
        error("WebGL error "+ glEnumToString(err) + " in "+ functionName +
              "(" + argStr + ")");
      };

  // Holds booleans for each GL error so after we get the error ourselves
  // we can still return it to the client app.
  var glErrorShadow = { };

  // Makes a function that calls a WebGL function and then calls getError.
  function makeErrorWrapper(ctx, functionName) {
    return function() {
      if (opt_onFunc) {
        opt_onFunc(functionName, arguments);
      }
      var result = ctx[functionName].apply(ctx, arguments);
      var err = opt_err_ctx.getError();
      if (err != 0) {
        glErrorShadow[err] = true;
        opt_onErrorFunc(err, functionName, arguments);
      }
      return result;
    };
  }

  // Make a an object that has a copy of every property of the WebGL context
  // but wraps all functions.
  var wrapper = {};
  for (var propertyName in ctx) {
    if (typeof ctx[propertyName] == 'function') {
      if (propertyName != 'getExtension') {
        wrapper[propertyName] = makeErrorWrapper(ctx, propertyName);
      } else {
        var wrapped = makeErrorWrapper(ctx, propertyName);
        wrapper[propertyName] = function () {
          var result = wrapped.apply(ctx, arguments);
          return makeDebugContext(result, opt_onErrorFunc, opt_onFunc, opt_err_ctx);
        };
      }
    } else {
      makePropertyWrapper(wrapper, ctx, propertyName);
    }
  }

  // Override the getError function with one that returns our saved results.
  wrapper.getError = function() {
    for (var err in glErrorShadow) {
      if (glErrorShadow.hasOwnProperty(err)) {
        if (glErrorShadow[err]) {
          glErrorShadow[err] = false;
          return err;
        }
      }
    }
    return ctx.NO_ERROR;
  };

  return wrapper;
}

function resetToInitialState(ctx) {
  var numAttribs = ctx.getParameter(ctx.MAX_VERTEX_ATTRIBS);
  var tmp = ctx.createBuffer();
  ctx.bindBuffer(ctx.ARRAY_BUFFER, tmp);
  for (var ii = 0; ii < numAttribs; ++ii) {
    ctx.disableVertexAttribArray(ii);
    ctx.vertexAttribPointer(ii, 4, ctx.FLOAT, false, 0, 0);
    ctx.vertexAttrib1f(ii, 0);
  }
  ctx.deleteBuffer(tmp);

  var numTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);
  for (var ii = 0; ii < numTextureUnits; ++ii) {
    ctx.activeTexture(ctx.TEXTURE0 + ii);
    ctx.bindTexture(ctx.TEXTURE_CUBE_MAP, null);
    ctx.bindTexture(ctx.TEXTURE_2D, null);
  }

  ctx.activeTexture(ctx.TEXTURE0);
  ctx.useProgram(null);
  ctx.bindBuffer(ctx.ARRAY_BUFFER, null);
  ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, null);
  ctx.bindFramebuffer(ctx.FRAMEBUFFER, null);
  ctx.bindRenderbuffer(ctx.RENDERBUFFER, null);
  ctx.disable(ctx.BLEND);
  ctx.disable(ctx.CULL_FACE);
  ctx.disable(ctx.DEPTH_TEST);
  ctx.disable(ctx.DITHER);
  ctx.disable(ctx.SCISSOR_TEST);
  ctx.blendColor(0, 0, 0, 0);
  ctx.blendEquation(ctx.FUNC_ADD);
  ctx.blendFunc(ctx.ONE, ctx.ZERO);
  ctx.clearColor(0, 0, 0, 0);
  ctx.clearDepth(1);
  ctx.clearStencil(-1);
  ctx.colorMask(true, true, true, true);
  ctx.cullFace(ctx.BACK);
  ctx.depthFunc(ctx.LESS);
  ctx.depthMask(true);
  ctx.depthRange(0, 1);
  ctx.frontFace(ctx.CCW);
  ctx.hint(ctx.GENERATE_MIPMAP_HINT, ctx.DONT_CARE);
  ctx.lineWidth(1);
  ctx.pixelStorei(ctx.PACK_ALIGNMENT, 4);
  ctx.pixelStorei(ctx.UNPACK_ALIGNMENT, 4);
  ctx.pixelStorei(ctx.UNPACK_FLIP_Y_WEBGL, false);
  ctx.pixelStorei(ctx.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
  // TODO: Delete this IF.
  if (ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL) {
    ctx.pixelStorei(ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL, ctx.BROWSER_DEFAULT_WEBGL);
  }
  ctx.polygonOffset(0, 0);
  ctx.sampleCoverage(1, false);
  ctx.scissor(0, 0, ctx.canvas.width, ctx.canvas.height);
  ctx.stencilFunc(ctx.ALWAYS, 0, 0xFFFFFFFF);
  ctx.stencilMask(0xFFFFFFFF);
  ctx.stencilOp(ctx.KEEP, ctx.KEEP, ctx.KEEP);
  ctx.viewport(0, 0, ctx.canvas.width, ctx.canvas.height);
  ctx.clear(ctx.COLOR_BUFFER_BIT | ctx.DEPTH_BUFFER_BIT | ctx.STENCIL_BUFFER_BIT);

  // TODO: This should NOT be needed but Firefox fails with 'hint'
  while(ctx.getError());
}

function makeLostContextSimulatingCanvas(canvas) {
  var unwrappedContext_;
  var wrappedContext_;
  var onLost_ = [];
  var onRestored_ = [];
  var wrappedContext_ = {};
  var contextId_ = 1;
  var contextLost_ = false;
  var resourceId_ = 0;
  var resourceDb_ = [];
  var numCallsToLoseContext_ = 0;
  var numCalls_ = 0;
  var canRestore_ = false;
  var restoreTimeout_ = 0;

  // Holds booleans for each GL error so can simulate errors.
  var glErrorShadow_ = { };

  canvas.getContext = function(f) {
    return function() {
      var ctx = f.apply(canvas, arguments);
      // Did we get a context and is it a WebGL context?
      if (ctx instanceof WebGLRenderingContext) {
        if (ctx != unwrappedContext_) {
          if (unwrappedContext_) {
            throw "got different context"
          }
          unwrappedContext_ = ctx;
          wrappedContext_ = makeLostContextSimulatingContext(unwrappedContext_);
        }
        return wrappedContext_;
      }
      return ctx;
    }
  }(canvas.getContext);

  function wrapEvent(listener) {
    if (typeof(listener) == "function") {
      return listener;
    } else {
      return function(info) {
        listener.handleEvent(info);
      }
    }
  }

  var addOnContextLostListener = function(listener) {
    onLost_.push(wrapEvent(listener));
  };

  var addOnContextRestoredListener = function(listener) {
    onRestored_.push(wrapEvent(listener));
  };


  function wrapAddEventListener(canvas) {
    var f = canvas.addEventListener;
    canvas.addEventListener = function(type, listener, bubble) {
      switch (type) {
        case 'webglcontextlost':
          addOnContextLostListener(listener);
          break;
        case 'webglcontextrestored':
          addOnContextRestoredListener(listener);
          break;
        default:
          f.apply(canvas, arguments);
      }
    };
  }

  wrapAddEventListener(canvas);

  canvas.loseContext = function() {
    if (!contextLost_) {
      contextLost_ = true;
      numCallsToLoseContext_ = 0;
      ++contextId_;
      while (unwrappedContext_.getError());
      clearErrors();
      glErrorShadow_[unwrappedContext_.CONTEXT_LOST_WEBGL] = true;
      var event = makeWebGLContextEvent("context lost");
      var callbacks = onLost_.slice();
      setTimeout(function() {
          //log("numCallbacks:" + callbacks.length);
          for (var ii = 0; ii < callbacks.length; ++ii) {
            //log("calling callback:" + ii);
            callbacks[ii](event);
          }
          if (restoreTimeout_ >= 0) {
            setTimeout(function() {
                canvas.restoreContext();
              }, restoreTimeout_);
          }
        }, 0);
    }
  };

  canvas.restoreContext = function() {
    if (contextLost_) {
      if (onRestored_.length) {
        setTimeout(function() {
            if (!canRestore_) {
              throw "can not restore. webglcontestlost listener did not call event.preventDefault";
            }
            freeResources();
            resetToInitialState(unwrappedContext_);
            contextLost_ = false;
            numCalls_ = 0;
            canRestore_ = false;
            var callbacks = onRestored_.slice();
            var event = makeWebGLContextEvent("context restored");
            for (var ii = 0; ii < callbacks.length; ++ii) {
              callbacks[ii](event);
            }
          }, 0);
      }
    }
  };

  canvas.loseContextInNCalls = function(numCalls) {
    if (contextLost_) {
      throw "You can not ask a lost contet to be lost";
    }
    numCallsToLoseContext_ = numCalls_ + numCalls;
  };

  canvas.getNumCalls = function() {
    return numCalls_;
  };

  canvas.setRestoreTimeout = function(timeout) {
    restoreTimeout_ = timeout;
  };

  function isWebGLObject(obj) {
    //return false;
    return (obj instanceof WebGLBuffer ||
            obj instanceof WebGLFramebuffer ||
            obj instanceof WebGLProgram ||
            obj instanceof WebGLRenderbuffer ||
            obj instanceof WebGLShader ||
            obj instanceof WebGLTexture);
  }

  function checkResources(args) {
    for (var ii = 0; ii < args.length; ++ii) {
      var arg = args[ii];
      if (isWebGLObject(arg)) {
        return arg.__webglDebugContextLostId__ == contextId_;
      }
    }
    return true;
  }

  function clearErrors() {
    var k = Object.keys(glErrorShadow_);
    for (var ii = 0; ii < k.length; ++ii) {
      delete glErrorShadow_[k];
    }
  }

  function loseContextIfTime() {
    ++numCalls_;
    if (!contextLost_) {
      if (numCallsToLoseContext_ == numCalls_) {
        canvas.loseContext();
      }
    }
  }

  // Makes a function that simulates WebGL when out of context.
  function makeLostContextFunctionWrapper(ctx, functionName) {
    var f = ctx[functionName];
    return function() {
      // log("calling:" + functionName);
      // Only call the functions if the context is not lost.
      loseContextIfTime();
      if (!contextLost_) {
        //if (!checkResources(arguments)) {
        //  glErrorShadow_[wrappedContext_.INVALID_OPERATION] = true;
        //  return;
        //}
        var result = f.apply(ctx, arguments);
        return result;
      }
    };
  }

  function freeResources() {
    for (var ii = 0; ii < resourceDb_.length; ++ii) {
      var resource = resourceDb_[ii];
      if (resource instanceof WebGLBuffer) {
        unwrappedContext_.deleteBuffer(resource);
      } else if (resource instanceof WebGLFramebuffer) {
        unwrappedContext_.deleteFramebuffer(resource);
      } else if (resource instanceof WebGLProgram) {
        unwrappedContext_.deleteProgram(resource);
      } else if (resource instanceof WebGLRenderbuffer) {
        unwrappedContext_.deleteRenderbuffer(resource);
      } else if (resource instanceof WebGLShader) {
        unwrappedContext_.deleteShader(resource);
      } else if (resource instanceof WebGLTexture) {
        unwrappedContext_.deleteTexture(resource);
      }
    }
  }

  function makeWebGLContextEvent(statusMessage) {
    return {
      statusMessage: statusMessage,
      preventDefault: function() {
          canRestore_ = true;
        }
    };
  }

  return canvas;

  function makeLostContextSimulatingContext(ctx) {
    // copy all functions and properties to wrapper
    for (var propertyName in ctx) {
      if (typeof ctx[propertyName] == 'function') {
         wrappedContext_[propertyName] = makeLostContextFunctionWrapper(
             ctx, propertyName);
       } else {
         makePropertyWrapper(wrappedContext_, ctx, propertyName);
       }
    }

    // Wrap a few functions specially.
    wrappedContext_.getError = function() {
      loseContextIfTime();
      if (!contextLost_) {
        var err;
        while (err = unwrappedContext_.getError()) {
          glErrorShadow_[err] = true;
        }
      }
      for (var err in glErrorShadow_) {
        if (glErrorShadow_[err]) {
          delete glErrorShadow_[err];
          return err;
        }
      }
      return wrappedContext_.NO_ERROR;
    };

    var creationFunctions = [
      "createBuffer",
      "createFramebuffer",
      "createProgram",
      "createRenderbuffer",
      "createShader",
      "createTexture"
    ];
    for (var ii = 0; ii < creationFunctions.length; ++ii) {
      var functionName = creationFunctions[ii];
      wrappedContext_[functionName] = function(f) {
        return function() {
          loseContextIfTime();
          if (contextLost_) {
            return null;
          }
          var obj = f.apply(ctx, arguments);
          obj.__webglDebugContextLostId__ = contextId_;
          resourceDb_.push(obj);
          return obj;
        };
      }(ctx[functionName]);
    }

    var functionsThatShouldReturnNull = [
      "getActiveAttrib",
      "getActiveUniform",
      "getBufferParameter",
      "getContextAttributes",
      "getAttachedShaders",
      "getFramebufferAttachmentParameter",
      "getParameter",
      "getProgramParameter",
      "getProgramInfoLog",
      "getRenderbufferParameter",
      "getShaderParameter",
      "getShaderInfoLog",
      "getShaderSource",
      "getTexParameter",
      "getUniform",
      "getUniformLocation",
      "getVertexAttrib"
    ];
    for (var ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {
      var functionName = functionsThatShouldReturnNull[ii];
      wrappedContext_[functionName] = function(f) {
        return function() {
          loseContextIfTime();
          if (contextLost_) {
            return null;
          }
          return f.apply(ctx, arguments);
        }
      }(wrappedContext_[functionName]);
    }

    var isFunctions = [
      "isBuffer",
      "isEnabled",
      "isFramebuffer",
      "isProgram",
      "isRenderbuffer",
      "isShader",
      "isTexture"
    ];
    for (var ii = 0; ii < isFunctions.length; ++ii) {
      var functionName = isFunctions[ii];
      wrappedContext_[functionName] = function(f) {
        return function() {
          loseContextIfTime();
          if (contextLost_) {
            return false;
          }
          return f.apply(ctx, arguments);
        }
      }(wrappedContext_[functionName]);
    }

    wrappedContext_.checkFramebufferStatus = function(f) {
      return function() {
        loseContextIfTime();
        if (contextLost_) {
          return wrappedContext_.FRAMEBUFFER_UNSUPPORTED;
        }
        return f.apply(ctx, arguments);
      };
    }(wrappedContext_.checkFramebufferStatus);

    wrappedContext_.getAttribLocation = function(f) {
      return function() {
        loseContextIfTime();
        if (contextLost_) {
          return -1;
        }
        return f.apply(ctx, arguments);
      };
    }(wrappedContext_.getAttribLocation);

    wrappedContext_.getVertexAttribOffset = function(f) {
      return function() {
        loseContextIfTime();
        if (contextLost_) {
          return 0;
        }
        return f.apply(ctx, arguments);
      };
    }(wrappedContext_.getVertexAttribOffset);

    wrappedContext_.isContextLost = function() {
      return contextLost_;
    };

    return wrappedContext_;
  }
}

return {
  /**
   * Initializes this module. Safe to call more than once.
   * @param {!WebGLRenderingContext} ctx A WebGL context. If
   *    you have more than one context it doesn't matter which one
   *    you pass in, it is only used to pull out constants.
   */
  'init': init,

  /**
   * Returns true or false if value matches any WebGL enum
   * @param {*} value Value to check if it might be an enum.
   * @return {boolean} True if value matches one of the WebGL defined enums
   */
  'mightBeEnum': mightBeEnum,

  /**
   * Gets an string version of an WebGL enum.
   *
   * Example:
   *   WebGLDebugUtil.init(ctx);
   *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());
   *
   * @param {number} value Value to return an enum for
   * @return {string} The string version of the enum.
   */
  'glEnumToString': glEnumToString,

  /**
   * Converts the argument of a WebGL function to a string.
   * Attempts to convert enum arguments to strings.
   *
   * Example:
   *   WebGLDebugUtil.init(ctx);
   *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 2, 0, gl.TEXTURE_2D);
   *
   * would return 'TEXTURE_2D'
   *
   * @param {string} functionName the name of the WebGL function.
   * @param {number} numArgs The number of arguments
   * @param {number} argumentIndx the index of the argument.
   * @param {*} value The value of the argument.
   * @return {string} The value as a string.
   */
  'glFunctionArgToString': glFunctionArgToString,

  /**
   * Converts the arguments of a WebGL function to a string.
   * Attempts to convert enum arguments to strings.
   *
   * @param {string} functionName the name of the WebGL function.
   * @param {number} args The arguments.
   * @return {string} The arguments as a string.
   */
  'glFunctionArgsToString': glFunctionArgsToString,

  /**
   * Given a WebGL context returns a wrapped context that calls
   * gl.getError after every command and calls a function if the
   * result is not NO_ERROR.
   *
   * You can supply your own function if you want. For example, if you'd like
   * an exception thrown on any GL error you could do this
   *
   *    function throwOnGLError(err, funcName, args) {
   *      throw WebGLDebugUtils.glEnumToString(err) +
   *            " was caused by call to " + funcName;
   *    };
   *
   *    ctx = WebGLDebugUtils.makeDebugContext(
   *        canvas.getContext("webgl"), throwOnGLError);
   *
   * @param {!WebGLRenderingContext} ctx The webgl context to wrap.
   * @param {!function(err, funcName, args): void} opt_onErrorFunc The function
   *     to call when gl.getError returns an error. If not specified the default
   *     function calls console.log with a message.
   * @param {!function(funcName, args): void} opt_onFunc The
   *     function to call when each webgl function is called. You
   *     can use this to log all calls for example.
   */
  'makeDebugContext': makeDebugContext,

  /**
   * Given a canvas element returns a wrapped canvas element that will
   * simulate lost context. The canvas returned adds the following functions.
   *
   * loseContext:
   *   simulates a lost context event.
   *
   * restoreContext:
   *   simulates the context being restored.
   *
   * lostContextInNCalls:
   *   loses the context after N gl calls.
   *
   * getNumCalls:
   *   tells you how many gl calls there have been so far.
   *
   * setRestoreTimeout:
   *   sets the number of milliseconds until the context is restored
   *   after it has been lost. Defaults to 0. Pass -1 to prevent
   *   automatic restoring.
   *
   * @param {!Canvas} canvas The canvas element to wrap.
   */
  'makeLostContextSimulatingCanvas': makeLostContextSimulatingCanvas,

  /**
   * Resets a context to the initial state.
   * @param {!WebGLRenderingContext} ctx The webgl context to
   *     reset.
   */
  'resetToInitialState': resetToInitialState
};

}();

module.exports = WebGLDebugUtils;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_luma_gl__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__quad_edge_js__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__polyhedra_js__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__myriahedral_js__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__obj_js__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__math_js__ = __webpack_require__(19);












const IMG_WIDTH = 4096;
const IMG_HEIGHT = IMG_WIDTH / 2;

onmessage = (e) => {
  let [name, imgData] = e.data;
  const ans = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__myriahedral_js__["a" /* getBestRotation */])(__WEBPACK_IMPORTED_MODULE_2__polyhedra_js__[name], imgData);
  postMessage(ans);
};



/***/ })
/******/ ]);
//# sourceMappingURL=e3262e6f55d034052730.worker.js.map