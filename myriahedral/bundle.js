/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 112);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(230);
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19)))

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ERR_CONTEXT */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return ERR_WEBGL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return ERR_WEBGL2; });
/* harmony export (immutable) */ __webpack_exports__["c"] = isWebGL;
/* harmony export (immutable) */ __webpack_exports__["b"] = isWebGL2;
/* unused harmony export isWebGLContext */
/* unused harmony export isWebGL2Context */
/* harmony export (immutable) */ __webpack_exports__["f"] = assertWebGLContext;
/* harmony export (immutable) */ __webpack_exports__["a"] = assertWebGL2Context;
/* unused harmony export setContextDefaults */
/* harmony export (immutable) */ __webpack_exports__["g"] = createGLContext;
/* harmony export (immutable) */ __webpack_exports__["h"] = deleteGLContext;
/* unused harmony export pollContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils_track_context_state__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_utils__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context_debug__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__context_limits__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__helpers_query_manager__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__init__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_assert__);
// WebGLRenderingContext related methods












// Heuristic testing of contexts (to indentify debug wrappers around gl contexts)
var GL_ARRAY_BUFFER = 0x8892;
var GL_TEXTURE_BINDING_3D = 0x806A;

var ERR_CONTEXT = 'Invalid WebGLRenderingContext';
var ERR_WEBGL = ERR_CONTEXT;
var ERR_WEBGL2 = 'Requires WebGL2';

var ERR_WEBGL_MISSING_NODE = 'WebGL API is missing. To run luma.gl under Node.js, please "npm install gl"\nand import \'luma.gl/headless\' before importing \'luma.gl\'.';

var ERR_HEADLESSGL_NOT_AVAILABLE = 'Cannot create headless WebGL context, headlessGL not available';

var ERR_HEADLESSGL_FAILED = 'headlessGL failed to create headless WebGL context';

function isWebGL(gl) {
  return Boolean(gl && (gl instanceof __WEBPACK_IMPORTED_MODULE_0__api__["b" /* WebGLRenderingContext */] || gl.ARRAY_BUFFER === GL_ARRAY_BUFFER));
}

function isWebGL2(gl) {
  return Boolean(gl && (gl instanceof __WEBPACK_IMPORTED_MODULE_0__api__["c" /* WebGL2RenderingContext */] || gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D));
}

function isWebGLContext(gl) {
  __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('isWebGLContext', 'isWebGL');
  return isWebGL(gl);
}

function isWebGL2Context(gl) {
  __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('isWebGL2Context', 'isWebGL2');
  return isWebGL2(gl);
}

function assertWebGLContext(gl) {
  // Need to handle debug context
  __WEBPACK_IMPORTED_MODULE_8_assert___default()(isWebGL(gl), ERR_CONTEXT);
}

function assertWebGL2Context(gl) {
  // Need to handle debug context
  __WEBPACK_IMPORTED_MODULE_8_assert___default()(isWebGL2(gl), ERR_WEBGL2);
}

var contextDefaults = {
  // COMMON CONTEXT PARAMETERS
  // Attempt to allocate WebGL2 context
  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)
  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)
  throwOnFailure: true,
  manageState: true,
  // BROWSER CONTEXT PARAMETERS
  canvas: null, // A canvas element or a canvas string id
  debug: false, // Instrument context (at the expense of performance)
  // HEADLESS CONTEXT PARAMETERS
  width: 800, // width are height are only used by headless gl
  height: 600
  // WEBGL/HEADLESS CONTEXT PARAMETERS
  // Remaining options are passed through to context creator
};

/*
 * Change default context creation parameters.
 * Main use case is regression test suite.
 */
function setContextDefaults() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  Object.assign(contextDefaults, { width: 1, height: 1 }, opts);
}

/*
 * Creates a context giving access to the WebGL API
 */
/* eslint-disable complexity, max-statements */
function createGLContext() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  opts = Object.assign({}, contextDefaults, opts);
  var _opts = opts,
      canvas = _opts.canvas,
      width = _opts.width,
      height = _opts.height,
      throwOnError = _opts.throwOnError,
      manageState = _opts.manageState,
      debug = _opts.debug;

  // Error reporting function, enables exceptions to be disabled

  function onError(message) {
    if (throwOnError) {
      throw new Error(message);
    }
    // log.log(0, message);
    return null;
  }

  var gl = void 0;
  if (__WEBPACK_IMPORTED_MODULE_6__utils__["isBrowser"]) {
    // Make sure we have a real canvas ("canvas" can a string, a canvas or null)
    var realCanvas = void 0;
    if (!canvas) {
      realCanvas = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_utils__["a" /* createCanvas */])({ id: 'lumagl-canvas', width: width, height: height, onError: onError });
    } else if (typeof canvas === 'string') {
      realCanvas = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_utils__["b" /* getCanvas */])({ id: canvas });
    } else {
      realCanvas = canvas;
    }
    // Create a WebGL context in the canvas
    gl = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_utils__["c" /* createContext */])({ canvas: realCanvas, opts: opts });
  } else {
    // Create a headless-gl context under Node.js
    gl = _createHeadlessContext({ width: width, height: height, opts: opts, onError: onError });
  }
  if (!gl) {
    return null;
  }

  // Install context state tracking
  if (manageState) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_track_context_state__["a" /* default */])(gl, {
      copyState: false,
      log: function log() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return __WEBPACK_IMPORTED_MODULE_6__utils__["log"].log.apply(__WEBPACK_IMPORTED_MODULE_6__utils__["log"], [1].concat(args));
      }
    });
  }

  // Add debug instrumentation to the context
  if (__WEBPACK_IMPORTED_MODULE_6__utils__["isBrowser"] && debug) {
    gl = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context_debug__["a" /* makeDebugContext */])(gl, { debug: debug });
    // Debug forces log level to at least 1
    __WEBPACK_IMPORTED_MODULE_6__utils__["log"].priority = Math.max(__WEBPACK_IMPORTED_MODULE_6__utils__["log"].priority, 1);
    // Log some debug info about the context
    logInfo(gl);
  }

  // Add to seer integration

  return gl;
}

function deleteGLContext(gl) {}
// Remove from seer integration


// POLLING FOR PENDING QUERIES
// Calling this function checks all pending queries for completion
function pollContext(gl) {
  __WEBPACK_IMPORTED_MODULE_5__helpers_query_manager__["a" /* default */].poll(gl);
}

function logInfo(gl) {
  var webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';
  var info = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__context_limits__["a" /* glGetDebugInfo */])(gl);
  var driver = info ? '(' + info.vendor + ' ' + info.renderer + ')' : '';
  var debug = gl.debug ? 'debug' : '';
  __WEBPACK_IMPORTED_MODULE_6__utils__["log"].log(0, 'luma.gl: Created ' + webGL + ' ' + debug + ' context ' + driver, gl);
}

// Create headless gl context (for running under Node.js)
function _createHeadlessContext(_ref) {
  var width = _ref.width,
      height = _ref.height,
      opts = _ref.opts,
      onError = _ref.onError;
  var webgl1 = opts.webgl1,
      webgl2 = opts.webgl2;

  if (webgl2 && !webgl1) {
    return onError('headless-gl does not support WebGL2');
  }
  if (!__WEBPACK_IMPORTED_MODULE_0__api__["d" /* webGLTypesAvailable */]) {
    return onError(ERR_WEBGL_MISSING_NODE);
  }
  if (!__WEBPACK_IMPORTED_MODULE_7__init__["default"].globals.headlessGL) {
    return onError(ERR_HEADLESSGL_NOT_AVAILABLE);
  }
  var gl = __WEBPACK_IMPORTED_MODULE_7__init__["default"].globals.headlessGL(width, height, opts);
  if (!gl) {
    return onError(ERR_HEADLESSGL_FAILED);
  }
  return gl;
}
//# sourceMappingURL=context.js.map

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__is_browser__ = __webpack_require__(89);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isNode", function() { return __WEBPACK_IMPORTED_MODULE_0__is_browser__["b"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isBrowser", function() { return __WEBPACK_IMPORTED_MODULE_0__is_browser__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__promise_utils__ = __webpack_require__(216);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "promisify", function() { return __WEBPACK_IMPORTED_MODULE_1__promise_utils__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(217);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "splat", function() { return __WEBPACK_IMPORTED_MODULE_2__utils__["c"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return __WEBPACK_IMPORTED_MODULE_2__utils__["d"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "uid", function() { return __WEBPACK_IMPORTED_MODULE_2__utils__["a"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return __WEBPACK_IMPORTED_MODULE_2__utils__["e"]; });
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "isPowerOfTwo", function() { return __WEBPACK_IMPORTED_MODULE_2__utils__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__log__ = __webpack_require__(39);
/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, "formatValue", function() { return __WEBPACK_IMPORTED_MODULE_3__log__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return __WEBPACK_IMPORTED_MODULE_3__log__["a"]; });





//# sourceMappingURL=index.js.map

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = glGet;
/* harmony export (immutable) */ __webpack_exports__["b"] = glKey;
/* unused harmony export glKeyType */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils_constants_to_keys__ = __webpack_require__(218);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a"]; });
// WEBGL BUILT-IN CONSTANTS




/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */]);

// Resolve a WebGL enumeration name (returns itself if already a number)
function glGet(name) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_constants_to_keys__["a" /* getKeyValue */])(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */], name);
}

function glKey(value) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_constants_to_keys__["b" /* getKey */])(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */], value);
}

function glKeyType(value) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_constants_to_keys__["c" /* getKeyType */])(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */], value);
}
//# sourceMappingURL=gl-constants.js.map

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__init__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_assert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__webgl_utils__ = __webpack_require__(11);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








var ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';

// TODO - Handle context loss
// function glGetContextLossCount(gl) {
//   return (gl.luma && gl.luma.glCount) || 0;
// }

var Resource = /*#__PURE__*/function () {
  function Resource(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Resource);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["f" /* assertWebGLContext */])(gl);

    var id = opts.id,
        _opts$userData = opts.userData,
        userData = _opts$userData === undefined ? {} : _opts$userData;

    this.gl = gl;
    this.ext = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__webgl_utils__["d" /* polyfillContext */])(gl);
    this.id = id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["uid"])(this.constructor.name);
    this.userData = userData;
    this.opts = opts;

    // Set the handle
    // If handle was provided, use it, otherwise create a new handle

    // TODO - Stores the handle with context loss information
    // this.glCount = glGetContextLossCount(this.gl);

    // Default VertexArray needs to be created with null handle, so compare against undefined
    this._handle = opts.handle;
    if (this._handle === undefined) {
      this._handle = this._createHandle();
    }

    this._addStats();
  }

  _createClass(Resource, [{
    key: 'toString',
    value: function toString() {
      return this.constructor.name + '(' + this.id + ')';
    }
  }, {
    key: 'delete',
    value: function _delete() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$deleteChildren = _ref.deleteChildren,
          deleteChildren = _ref$deleteChildren === undefined ? false : _ref$deleteChildren;

      // Delete this object, and get refs to any children
      var children = this._handle && this._deleteHandle(this._handle);
      this._handle = null;

      // Optionally, recursively delete the children
      if (children && deleteChildren) {
        children.filter(Boolean).forEach(function (child) {
          child.delete();
        });
      }

      return this;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      this.bind(null);
    }

    /**
     * Query a Resource parameter
     *
     * @todo - cache parameters to avoid issuing WebGL calls?
     *
     * @param {GLenum} pname
     * @return {GLint|GLfloat|GLenum} param
     */

  }, {
    key: 'getParameter',
    value: function getParameter(pname) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      pname = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__gl_constants__["c" /* glGet */])(pname);
      __WEBPACK_IMPORTED_MODULE_4_assert___default()(pname);

      var parameters = this.constructor.PARAMETERS || {};

      // Use parameter definitions to handle unsupported parameters
      var parameter = parameters[pname];
      if (parameter) {
        var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(this.gl);

        // Check if we can query for this parameter
        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));

        if (!parameterAvailable) {
          var webgl1Default = parameter.webgl1;
          var webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;
          var defaultValue = isWebgl2 ? webgl2Default : webgl1Default;
          return defaultValue;
        }
      }

      // If unknown parameter - Could be a valid parameter not covered by PARAMS
      // Attempt to query for it and let WebGL report errors
      return this._getParameter(pname, opts);
    }

    // Many resources support a getParameter call -
    // getParameters will get all parameters - slow but useful for debugging

  }, {
    key: 'getParameters',
    value: function getParameters() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _ref2 = {},
          parameters = _ref2.parameters,
          keys = _ref2.keys;

      // Get parameter definitions for this Resource

      var PARAMETERS = this.constructor.PARAMETERS || {};

      var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(this.gl);

      var values = {};

      // Query all parameters if no list provided
      var parameterKeys = parameters || Object.keys(PARAMETERS);

      // WEBGL limits
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = parameterKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pname = _step.value;

          var parameter = PARAMETERS[pname];

          // Check if this parameter is available on this platform
          var parameterAvailable = parameter && (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));

          if (parameterAvailable) {
            var key = keys ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__gl_constants__["b" /* glKey */])(pname) : pname;
            values[key] = this.getParameter(pname, opts);
            if (keys && parameter.type === 'GLenum') {
              values[key] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__gl_constants__["b" /* glKey */])(values[key]);
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return values;
    }

    /**
     * Update a Resource setting
     *
     * @todo - cache parameter to avoid issuing WebGL calls?
     *
     * @param {GLenum} pname - parameter (GL constant, value or key)
     * @param {GLint|GLfloat|GLenum} value
     * @return {Resource} returns self to enable chaining
     */

  }, {
    key: 'setParameter',
    value: function setParameter(pname, value) {
      pname = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__gl_constants__["c" /* glGet */])(pname);
      __WEBPACK_IMPORTED_MODULE_4_assert___default()(pname);

      var parameters = this.constructor.PARAMETERS || {};

      var parameter = parameters[pname];
      if (parameter) {
        var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(this.gl);

        // Check if this parameter is available on this platform
        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));

        if (!parameterAvailable) {
          throw new Error('Parameter not available on this platform');
        }

        // Handle string keys
        if (parameter.type === 'GLenum') {
          value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__gl_constants__["c" /* glGet */])(value);
        }
      }

      // If unknown parameter - Could be a valid parameter not covered by PARAMS
      // attempt to set it and let WebGL report errors
      this._setParameter(pname, value);
      return this;
    }

    /*
     * Batch update resource parameters
     * Assumes the subclass supports a setParameter call
     */

  }, {
    key: 'setParameters',
    value: function setParameters(parameters) {
      for (var pname in parameters) {
        this.setParameter(pname, parameters[pname]);
      }
      return this;
    }

    // PUBLIC VIRTUAL METHODS

  }, {
    key: 'initialize',
    value: function initialize(opts) {}

    // PROTECTED METHODS - These must be overridden by subclass

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
  }, {
    key: '_getOptsFromHandle',
    value: function _getOptsFromHandle() {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
  }, {
    key: '_getParameter',
    value: function _getParameter(pname, opts) {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }

    /**
     * @param {GLenum} pname
     * @param {GLint|GLfloat|GLenum} param
     * @return {Sampler} returns self to enable chaining
     */

  }, {
    key: '_setParameter',
    value: function _setParameter(pname, value) {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }

    // PRIVATE METHODS

  }, {
    key: '_context',
    value: function _context() {
      this.gl.luma = this.gl.luma || {};
      return this.gl.luma;
    }
  }, {
    key: '_addStats',
    value: function _addStats() {
      var name = this.constructor.name;

      var stats = __WEBPACK_IMPORTED_MODULE_0__init__["default"].stats;

      stats.resourceCount = stats.resourceCount || 0;
      stats.resourceMap = stats.resourceMap || {};

      // Resource creation stats
      stats.resourceCount++;
      stats.resourceMap[name] = stats.resourceMap[name] || { count: 0 };
      stats.resourceMap[name].count++;
    }
  }, {
    key: 'handle',
    get: function get() {
      // TODO - Add context loss handling
      // Will regenerate and reinitialize the handle if necessary
      // const glCount = glGetContextLossCount(this.gl);
      // if (this.glCount !== glCount) {
      //   this._handle = this._createHandle(this.opts);
      //   this._glCount = glCount;
      //   // Reinitialize object
      //   this.initialize(this.opts);
      // }
      return this._handle;
    }
  }]);

  return Resource;
}();

/* harmony default export */ __webpack_exports__["a"] = (Resource);
//# sourceMappingURL=resource.js.map

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__types__ = __webpack_require__(94);
/* unused harmony reexport Image */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__types__["a"]; });
/* unused harmony reexport WebGLProgram */
/* unused harmony reexport WebGLShader */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_0__types__["d"]; });
/* unused harmony reexport WebGLFramebuffer */
/* unused harmony reexport WebGLRenderbuffer */
/* unused harmony reexport WebGLTexture */
/* unused harmony reexport WebGLUniformLocation */
/* unused harmony reexport WebGLActiveInfo */
/* unused harmony reexport WebGLShaderPrecisionFormat */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_0__types__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__types__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils__ = __webpack_require__(11);
/* unused harmony reexport formatGLSLCompilerError */
/* unused harmony reexport getShaderName */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_utils_constants__ = __webpack_require__(9);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_2__webgl_utils_constants__["a"]; });
// Exports WebGL API constants and types, plus some basic type checks




// TODO - avoid importing GL as it is a big file


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_2__webgl_utils_constants__["a" /* default */]);
//# sourceMappingURL=index.js.map

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Geometry", function() { return __WEBPACK_IMPORTED_MODULE_0__geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__cone_geometry__ = __webpack_require__(76);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ConeGeometry", function() { return __WEBPACK_IMPORTED_MODULE_1__cone_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cube_geometry__ = __webpack_require__(77);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CubeGeometry", function() { return __WEBPACK_IMPORTED_MODULE_2__cube_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__cylinder_geometry__ = __webpack_require__(78);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "CylinderGeometry", function() { return __WEBPACK_IMPORTED_MODULE_3__cylinder_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ico_sphere_geometry__ = __webpack_require__(79);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "IcoSphereGeometry", function() { return __WEBPACK_IMPORTED_MODULE_4__ico_sphere_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__plane_geometry__ = __webpack_require__(80);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PlaneGeometry", function() { return __WEBPACK_IMPORTED_MODULE_5__plane_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__sphere_geometry__ = __webpack_require__(81);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "SphereGeometry", function() { return __WEBPACK_IMPORTED_MODULE_6__sphere_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__truncated_cone_geometry__ = __webpack_require__(23);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TruncatedConeGeometry", function() { return __WEBPACK_IMPORTED_MODULE_7__truncated_cone_geometry__["a"]; });









//# sourceMappingURL=index.js.map

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export DRAW_MODE */
/* harmony export (immutable) */ __webpack_exports__["b"] = getDrawMode;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





// Rendering primitives - specify how to extract primitives from vertices.
// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants
var DRAW_MODE = {
  POINTS: 0x0000, // draw single points.
  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.
  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.
  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last
  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.
  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.
  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.
  // Each vertex connects to the previous and the first vertex in the fan.
};

// Helper function to handle string draw modes - when using this library without WebGL constants
function getDrawMode(drawMode) {
  var mode = typeof drawMode === 'string' ? DRAW_MODE[drawMode] || DRAW_MODE.TRIANGLES : drawMode;
  __WEBPACK_IMPORTED_MODULE_1_assert___default()(mode >= 0 && mode <= DRAW_MODE.TRIANGLE_FAN, 'Illegal drawMode');
  return mode;
}

var Geometry = /*#__PURE__*/function () {
  function Geometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Geometry);

    var id = opts.id,
        _opts$drawMode = opts.drawMode,
        drawMode = _opts$drawMode === undefined ? DRAW_MODE.TRIANGLES : _opts$drawMode,
        _opts$vertexCount = opts.vertexCount,
        vertexCount = _opts$vertexCount === undefined ? undefined : _opts$vertexCount,
        attributes = opts.attributes;


    this.id = id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["uid"])(this.constructor.name);
    this.drawMode = getDrawMode(drawMode);
    this.vertexCount = vertexCount;
    this.attributes = {};
    this.needsRedraw = true;
    this.userData = {};
    Object.seal(this);

    if (attributes) {
      this.setAttributes(attributes);
    } else {
      __WEBPACK_IMPORTED_MODULE_0__utils__["log"].deprecated('inline attributes', 'attributes parameter');
      // TODO this is deprecated
      delete opts.id;
      delete opts.drawMode;
      delete opts.vertexCount;
      delete opts.attributes;
      this.setAttributes(opts);
    }
  }

  _createClass(Geometry, [{
    key: 'setNeedsRedraw',
    value: function setNeedsRedraw() {
      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this.needsRedraw = redraw;
      return this;
    }
  }, {
    key: 'getNeedsRedraw',
    value: function getNeedsRedraw() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$clearRedrawFlags = _ref.clearRedrawFlags,
          clearRedrawFlags = _ref$clearRedrawFlags === undefined ? false : _ref$clearRedrawFlags;

      var redraw = false;
      redraw = redraw || this.needsRedraw;
      this.needsRedraw = this.needsRedraw && !clearRedrawFlags;
      return redraw;
    }
  }, {
    key: 'setVertexCount',
    value: function setVertexCount(vertexCount) {
      this.vertexCount = vertexCount;
    }
  }, {
    key: 'getVertexCount',
    value: function getVertexCount() {
      if (this.vertexCount !== undefined) {
        return this.vertexCount;
      } else if (this.attributes.indices) {
        return this.attributes.indices.value.length;
      } else if (this.attributes.vertices) {
        return this.attributes.vertices.value.length / 3;
      } else if (this.attributes.positions) {
        return this.attributes.positions.value.length / 3;
      }
      return false;
    }
  }, {
    key: 'hasAttribute',
    value: function hasAttribute(attributeName) {
      return Boolean(this.attributes[attributeName]);
    }
  }, {
    key: 'getAttribute',
    value: function getAttribute(attributeName) {
      var attribute = this.attributes[attributeName];
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(attribute);
      return attribute.value;
    }
  }, {
    key: 'getArray',
    value: function getArray(attributeName) {
      var attribute = this.attributes[attributeName];
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(attribute);
      return attribute.value;
    }
  }, {
    key: 'getAttributes',
    value: function getAttributes() {
      return this.attributes;
    }

    // Attribute
    // value: typed array
    // type: indices, vertices, uvs
    // size: elements per vertex
    // target: WebGL buffer type (string or constant)

  }, {
    key: 'setAttributes',
    value: function setAttributes(attributes) {
      for (var attributeName in attributes) {
        var attribute = attributes[attributeName];

        // Wrap "unwrapped" arrays and try to autodetect their type
        attribute = ArrayBuffer.isView(attribute) ? { value: attribute } : attribute;

        __WEBPACK_IMPORTED_MODULE_1_assert___default()(ArrayBuffer.isView(attribute.value), this._print(attributeName) + ': must be typed array or object with value as typed array');

        this._autoDetectAttribute(attributeName, attribute);

        this.attributes[attributeName] = Object.assign({}, attribute, {
          instanced: attribute.instanced || 0
        });
      }
      this.setNeedsRedraw();
      return this;
    }

    // Check for well known attribute names
    /* eslint-disable default-case, complexity */

  }, {
    key: '_autoDetectAttribute',
    value: function _autoDetectAttribute(attributeName, attribute) {
      var category = void 0;
      switch (attributeName) {
        case 'indices':
          category = category || 'indices';
          break;
        case 'texCoords':
        case 'texCoord1':
        case 'texCoord2':
        case 'texCoord3':
          category = 'uvs';
          break;
        case 'vertices':
        case 'positions':
        case 'normals':
        case 'pickingColors':
          category = 'vectors';
          break;
      }

      // Check for categorys
      switch (category) {
        case 'vectors':
          attribute.size = attribute.size || 3;
          break;
        case 'uvs':
          attribute.size = attribute.size || 2;
          break;
        case 'indices':
          attribute.size = attribute.size || 1;
          attribute.isIndexed = attribute.isIndexed || true;
          __WEBPACK_IMPORTED_MODULE_1_assert___default()(attribute.value instanceof Uint16Array || attribute.value instanceof Uint32Array, 'attribute array for "indices" must be of integer type');
          break;
      }

      __WEBPACK_IMPORTED_MODULE_1_assert___default()(attribute.size, 'attribute ' + attributeName + ' needs size');
    }
    /* eslint-enable default-case, complexity */

  }, {
    key: '_print',
    value: function _print(attributeName) {
      return 'Geometry ' + this.id + ' attribute ' + attributeName;
    }
  }]);

  return Geometry;
}();

/* harmony default export */ __webpack_exports__["a"] = (Geometry);
//# sourceMappingURL=geometry.js.map

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return config; });
/* harmony export (immutable) */ __webpack_exports__["d"] = configure;
/* harmony export (immutable) */ __webpack_exports__["c"] = checkNumber;
/* harmony export (immutable) */ __webpack_exports__["e"] = formatValue;
/* harmony export (immutable) */ __webpack_exports__["f"] = isArray;
/* harmony export (immutable) */ __webpack_exports__["g"] = clone;
/* harmony export (immutable) */ __webpack_exports__["a"] = radians;
/* harmony export (immutable) */ __webpack_exports__["h"] = degrees;
/* harmony export (immutable) */ __webpack_exports__["i"] = sin;
/* harmony export (immutable) */ __webpack_exports__["j"] = cos;
/* harmony export (immutable) */ __webpack_exports__["k"] = tan;
/* harmony export (immutable) */ __webpack_exports__["l"] = asin;
/* harmony export (immutable) */ __webpack_exports__["m"] = acos;
/* harmony export (immutable) */ __webpack_exports__["n"] = atan;
/* harmony export (immutable) */ __webpack_exports__["o"] = clamp;
/* harmony export (immutable) */ __webpack_exports__["p"] = equals;
/* eslint-disable no-shadow */
// TODO - remove
var config = {};
config.EPSILON = 1e-12;
config.debug = true;
config.printRowMajor = true;
config.precision = 4;


function configure(options) {
  if ('epsilon' in options) {
    config.EPSILON = options.epsilon;
  }

  if ('debug' in options) {
    config.debug = options.debug;
  }
}

function checkNumber(value) {
  if (!Number.isFinite(value)) {
    throw new Error('Invalid number ' + value);
  }
  return value;
}

function formatValue(value) {
  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.precision || 4;

  return parseFloat(value.toPrecision(precision));
}

// Returns true if value is either an array or a typed array
// Note: does not return true for ArrayBuffers and DataViews
function isArray(value) {
  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;
}

// If the array has a clone function, calls it, otherwise returns a copy
function clone(array) {
  return array.clone ? array.clone() : new Array(array);
}

// If the argument value is an array, applies the func element wise,
// otherwise applies func to the argument value
function map(value, func) {
  if (isArray(value)) {
    var result = clone(value);
    for (var i = 0; i < result.length; ++i) {
      result[i] = func(result[i], i, result);
    }
    return result;
  }
  return func(value);
}

//
// GLSL math function equivalents
// Works on both single values and vectors
//

function radians(degrees) {
  return map(degrees, function (degrees) {
    return degrees / 180 * Math.PI;
  });
}

// GLSL equivalent: Works on single values and vectors
function degrees(radians) {
  return map(radians, function (radians) {
    return radians * 180 / Math.PI;
  });
}

// GLSL equivalent: Works on single values and vectors
function sin(radians) {
  return map(radians, function (angle) {
    return Math.sin(angle);
  });
}

// GLSL equivalent: Works on single values and vectors
function cos(radians) {
  return map(radians, function (angle) {
    return Math.cos(angle);
  });
}

// GLSL equivalent: Works on single values and vectors
function tan(radians) {
  return map(radians, function (angle) {
    return Math.tan(angle);
  });
}

// GLSL equivalent: Works on single values and vectors
function asin(radians) {
  return map(radians, function (angle) {
    return Math.asin(angle);
  });
}

// GLSL equivalent: Works on single values and vectors
function acos(radians) {
  return map(radians, function (angle) {
    return Math.acos(angle);
  });
}

// GLSL equivalent: Works on single values and vectors
function atan(radians) {
  return map(radians, function (angle) {
    return Math.atan(angle);
  });
}

function clamp(value, min, max) {
  return map(value, function (value) {
    return Math.max(min, Math.min(max, value));
  });
}

function equals(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a === b) {
      return true;
    }
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; ++i) {
      if (!equals(a[i], b[i])) {
        return false;
      }
    }
    return true;
  }
  return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
//# sourceMappingURL=common.js.map

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// GL constants, copied from Mozilla documentation
// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants

// Standard WebGL 1 constants
// These constants are defined on the WebGLRenderingContext interface.

/* eslint-disable key-spacing, max-len, no-inline-comments, camelcase */
/* harmony default export */ __webpack_exports__["a"] = ({
  // Clearing buffers
  // Constants passed to clear() to clear buffer masks.

  DEPTH_BUFFER_BIT: 0x00000100,
  STENCIL_BUFFER_BIT: 0x00000400,
  COLOR_BUFFER_BIT: 0x00004000,

  // Rendering primitives
  // Constants passed to drawElements() or drawArrays() to specify what kind of primitive to render.

  POINTS: 0x0000,
  LINES: 0x0001,
  LINE_LOOP: 0x0002,
  LINE_STRIP: 0x0003,
  TRIANGLES: 0x0004,
  TRIANGLE_STRIP: 0x0005,
  TRIANGLE_FAN: 0x0006,

  // Blending modes
  // Constants passed to blendFunc() or blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately).

  ZERO: 0,
  ONE: 1,
  SRC_COLOR: 0x0300,
  ONE_MINUS_SRC_COLOR: 0x0301,
  SRC_ALPHA: 0x0302,
  ONE_MINUS_SRC_ALPHA: 0x0303,
  DST_ALPHA: 0x0304,
  ONE_MINUS_DST_ALPHA: 0x0305,
  DST_COLOR: 0x0306,
  ONE_MINUS_DST_COLOR: 0x0307,
  SRC_ALPHA_SATURATE: 0x0308,
  CONSTANT_COLOR: 0x8001,
  ONE_MINUS_CONSTANT_COLOR: 0x8002,
  CONSTANT_ALPHA: 0x8003,
  ONE_MINUS_CONSTANT_ALPHA: 0x8004,

  // Blending equations
  // Constants passed to blendEquation() or blendEquationSeparate() to control
  // how the blending is calculated (for both, RBG and alpha, or separately).

  FUNC_ADD: 0x8006,
  FUNC_SUBTRACT: 0x800A,
  FUNC_REVERSE_SUBTRACT: 0x800B,

  // Getting GL parameter information
  // Constants passed to getParameter() to specify what information to return.

  BLEND_EQUATION: 0x8009,
  BLEND_EQUATION_RGB: 0x8009,
  BLEND_EQUATION_ALPHA: 0x883D,
  BLEND_DST_RGB: 0x80C8,
  BLEND_SRC_RGB: 0x80C9,
  BLEND_DST_ALPHA: 0x80CA,
  BLEND_SRC_ALPHA: 0x80CB,
  BLEND_COLOR: 0x8005,
  ARRAY_BUFFER_BINDING: 0x8894,
  ELEMENT_ARRAY_BUFFER_BINDING: 0x8895,
  LINE_WIDTH: 0x0B21,
  ALIASED_POINT_SIZE_RANGE: 0x846D,
  ALIASED_LINE_WIDTH_RANGE: 0x846E,
  CULL_FACE_MODE: 0x0B45,
  FRONT_FACE: 0x0B46,
  DEPTH_RANGE: 0x0B70,
  DEPTH_WRITEMASK: 0x0B72,
  DEPTH_CLEAR_VALUE: 0x0B73,
  DEPTH_FUNC: 0x0B74,
  STENCIL_CLEAR_VALUE: 0x0B91,
  STENCIL_FUNC: 0x0B92,
  STENCIL_FAIL: 0x0B94,
  STENCIL_PASS_DEPTH_FAIL: 0x0B95,
  STENCIL_PASS_DEPTH_PASS: 0x0B96,
  STENCIL_REF: 0x0B97,
  STENCIL_VALUE_MASK: 0x0B93,
  STENCIL_WRITEMASK: 0x0B98,
  STENCIL_BACK_FUNC: 0x8800,
  STENCIL_BACK_FAIL: 0x8801,
  STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802,
  STENCIL_BACK_PASS_DEPTH_PASS: 0x8803,
  STENCIL_BACK_REF: 0x8CA3,
  STENCIL_BACK_VALUE_MASK: 0x8CA4,
  STENCIL_BACK_WRITEMASK: 0x8CA5,
  VIEWPORT: 0x0BA2,
  SCISSOR_BOX: 0x0C10,
  COLOR_CLEAR_VALUE: 0x0C22,
  COLOR_WRITEMASK: 0x0C23,
  UNPACK_ALIGNMENT: 0x0CF5,
  PACK_ALIGNMENT: 0x0D05,
  MAX_TEXTURE_SIZE: 0x0D33,
  MAX_VIEWPORT_DIMS: 0x0D3A,
  SUBPIXEL_BITS: 0x0D50,
  RED_BITS: 0x0D52,
  GREEN_BITS: 0x0D53,
  BLUE_BITS: 0x0D54,
  ALPHA_BITS: 0x0D55,
  DEPTH_BITS: 0x0D56,
  STENCIL_BITS: 0x0D57,
  POLYGON_OFFSET_UNITS: 0x2A00,
  POLYGON_OFFSET_FACTOR: 0x8038,
  TEXTURE_BINDING_2D: 0x8069,
  SAMPLE_BUFFERS: 0x80A8,
  SAMPLES: 0x80A9,
  SAMPLE_COVERAGE_VALUE: 0x80AA,
  SAMPLE_COVERAGE_INVERT: 0x80AB,
  COMPRESSED_TEXTURE_FORMATS: 0x86A3,
  VENDOR: 0x1F00,
  RENDERER: 0x1F01,
  VERSION: 0x1F02,
  IMPLEMENTATION_COLOR_READ_TYPE: 0x8B9A,
  IMPLEMENTATION_COLOR_READ_FORMAT: 0x8B9B,
  BROWSER_DEFAULT_WEBGL: 0x9244,

  // Buffers
  // Constants passed to bufferData(), bufferSubData(), bindBuffer(), or
  // getBufferParameter().

  STATIC_DRAW: 0x88E4,
  STREAM_DRAW: 0x88E0,
  DYNAMIC_DRAW: 0x88E8,
  ARRAY_BUFFER: 0x8892,
  ELEMENT_ARRAY_BUFFER: 0x8893,
  BUFFER_SIZE: 0x8764,
  BUFFER_USAGE: 0x8765,

  // Vertex attributes
  // Constants passed to getVertexAttrib().

  CURRENT_VERTEX_ATTRIB: 0x8626,
  VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622,
  VERTEX_ATTRIB_ARRAY_SIZE: 0x8623,
  VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624,
  VERTEX_ATTRIB_ARRAY_TYPE: 0x8625,
  VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886A,
  VERTEX_ATTRIB_ARRAY_POINTER: 0x8645,
  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889F,

  // Culling
  // Constants passed to cullFace().

  CULL_FACE: 0x0B44,
  FRONT: 0x0404,
  BACK: 0x0405,
  FRONT_AND_BACK: 0x0408,

  // Enabling and disabling
  // Constants passed to enable() or disable().

  BLEND: 0x0BE2,
  DEPTH_TEST: 0x0B71,
  DITHER: 0x0BD0,
  POLYGON_OFFSET_FILL: 0x8037,
  SAMPLE_ALPHA_TO_COVERAGE: 0x809E,
  SAMPLE_COVERAGE: 0x80A0,
  SCISSOR_TEST: 0x0C11,
  STENCIL_TEST: 0x0B90,

  // Errors
  // Constants returned from getError().

  NO_ERROR: 0,
  INVALID_ENUM: 0x0500,
  INVALID_VALUE: 0x0501,
  INVALID_OPERATION: 0x0502,
  OUT_OF_MEMORY: 0x0505,
  CONTEXT_LOST_WEBGL: 0x9242,

  // Front face directions
  // Constants passed to frontFace().

  CW: 0x0900,
  CCW: 0x0901,

  // Hints
  // Constants passed to hint()

  DONT_CARE: 0x1100,
  FASTEST: 0x1101,
  NICEST: 0x1102,
  GENERATE_MIPMAP_HINT: 0x8192,

  // Data types

  BYTE: 0x1400,
  UNSIGNED_BYTE: 0x1401,
  SHORT: 0x1402,
  UNSIGNED_SHORT: 0x1403,
  INT: 0x1404,
  UNSIGNED_INT: 0x1405,
  FLOAT: 0x1406,

  // Pixel formats

  DEPTH_COMPONENT: 0x1902,
  ALPHA: 0x1906,
  RGB: 0x1907,
  RGBA: 0x1908,
  LUMINANCE: 0x1909,
  LUMINANCE_ALPHA: 0x190A,

  // Pixel types

  // UNSIGNED_BYTE: 0x1401,
  UNSIGNED_SHORT_4_4_4_4: 0x8033,
  UNSIGNED_SHORT_5_5_5_1: 0x8034,
  UNSIGNED_SHORT_5_6_5: 0x8363,

  // Shaders
  // Constants passed to createShader() or getShaderParameter()

  FRAGMENT_SHADER: 0x8B30,
  VERTEX_SHADER: 0x8B31,
  COMPILE_STATUS: 0x8B81,
  DELETE_STATUS: 0x8B80,
  LINK_STATUS: 0x8B82,
  VALIDATE_STATUS: 0x8B83,
  ATTACHED_SHADERS: 0x8B85,
  ACTIVE_ATTRIBUTES: 0x8B89,
  ACTIVE_UNIFORMS: 0x8B86,
  MAX_VERTEX_ATTRIBS: 0x8869,
  MAX_VERTEX_UNIFORM_VECTORS: 0x8DFB,
  MAX_VARYING_VECTORS: 0x8DFC,
  MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8B4D,
  MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8B4C,
  MAX_TEXTURE_IMAGE_UNITS: 0x8872,
  MAX_FRAGMENT_UNIFORM_VECTORS: 0x8DFD,
  SHADER_TYPE: 0x8B4F,
  SHADING_LANGUAGE_VERSION: 0x8B8C,
  CURRENT_PROGRAM: 0x8B8D,

  // Depth or stencil tests
  // Constants passed to depthFunc() or stencilFunc().

  NEVER: 0x0200,
  ALWAYS: 0x0207,
  LESS: 0x0201,
  EQUAL: 0x0202,
  LEQUAL: 0x0203,
  GREATER: 0x0204,
  GEQUAL: 0x0206,
  NOTEQUAL: 0x0205,

  // Stencil actions
  // Constants passed to stencilOp().

  KEEP: 0x1E00,
  REPLACE: 0x1E01,
  INCR: 0x1E02,
  DECR: 0x1E03,
  INVERT: 0x150A,
  INCR_WRAP: 0x8507,
  DECR_WRAP: 0x8508,

  // Textures
  // Constants passed to texParameteri(),
  // texParameterf(), bindTexture(), texImage2D(), and others.

  NEAREST: 0x2600,
  LINEAR: 0x2601,
  NEAREST_MIPMAP_NEAREST: 0x2700,
  LINEAR_MIPMAP_NEAREST: 0x2701,
  NEAREST_MIPMAP_LINEAR: 0x2702,
  LINEAR_MIPMAP_LINEAR: 0x2703,
  TEXTURE_MAG_FILTER: 0x2800,
  TEXTURE_MIN_FILTER: 0x2801,
  TEXTURE_WRAP_S: 0x2802,
  TEXTURE_WRAP_T: 0x2803,
  TEXTURE_2D: 0x0DE1,
  TEXTURE: 0x1702,
  TEXTURE_CUBE_MAP: 0x8513,
  TEXTURE_BINDING_CUBE_MAP: 0x8514,
  TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515,
  TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516,
  TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517,
  TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518,
  TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519,
  TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851A,
  MAX_CUBE_MAP_TEXTURE_SIZE: 0x851C,
  // TEXTURE0 - 31 0x84C0 - 0x84DF A texture unit.
  TEXTURE0: 0x84C0,
  ACTIVE_TEXTURE: 0x84E0,
  REPEAT: 0x2901,
  CLAMP_TO_EDGE: 0x812F,
  MIRRORED_REPEAT: 0x8370,

  // Emulation
  TEXTURE_WIDTH: 0x1000,
  TEXTURE_HEIGHT: 0x1001,

  // Uniform types

  FLOAT_VEC2: 0x8B50,
  FLOAT_VEC3: 0x8B51,
  FLOAT_VEC4: 0x8B52,
  INT_VEC2: 0x8B53,
  INT_VEC3: 0x8B54,
  INT_VEC4: 0x8B55,
  BOOL: 0x8B56,
  BOOL_VEC2: 0x8B57,
  BOOL_VEC3: 0x8B58,
  BOOL_VEC4: 0x8B59,
  FLOAT_MAT2: 0x8B5A,
  FLOAT_MAT3: 0x8B5B,
  FLOAT_MAT4: 0x8B5C,
  SAMPLER_2D: 0x8B5E,
  SAMPLER_CUBE: 0x8B60,

  // Shader precision-specified types

  LOW_FLOAT: 0x8DF0,
  MEDIUM_FLOAT: 0x8DF1,
  HIGH_FLOAT: 0x8DF2,
  LOW_INT: 0x8DF3,
  MEDIUM_INT: 0x8DF4,
  HIGH_INT: 0x8DF5,

  // Framebuffers and renderbuffers

  FRAMEBUFFER: 0x8D40,
  RENDERBUFFER: 0x8D41,
  RGBA4: 0x8056,
  RGB5_A1: 0x8057,
  RGB565: 0x8D62,
  DEPTH_COMPONENT16: 0x81A5,
  STENCIL_INDEX: 0x1901,
  STENCIL_INDEX8: 0x8D48,
  DEPTH_STENCIL: 0x84F9,
  RENDERBUFFER_WIDTH: 0x8D42,
  RENDERBUFFER_HEIGHT: 0x8D43,
  RENDERBUFFER_INTERNAL_FORMAT: 0x8D44,
  RENDERBUFFER_RED_SIZE: 0x8D50,
  RENDERBUFFER_GREEN_SIZE: 0x8D51,
  RENDERBUFFER_BLUE_SIZE: 0x8D52,
  RENDERBUFFER_ALPHA_SIZE: 0x8D53,
  RENDERBUFFER_DEPTH_SIZE: 0x8D54,
  RENDERBUFFER_STENCIL_SIZE: 0x8D55,
  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8CD0,
  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8CD1,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8CD2,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8CD3,
  COLOR_ATTACHMENT0: 0x8CE0,
  DEPTH_ATTACHMENT: 0x8D00,
  STENCIL_ATTACHMENT: 0x8D20,
  DEPTH_STENCIL_ATTACHMENT: 0x821A,
  NONE: 0,
  FRAMEBUFFER_COMPLETE: 0x8CD5,
  FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8CD6,
  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8CD7,
  FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8CD9,
  FRAMEBUFFER_UNSUPPORTED: 0x8CDD,
  FRAMEBUFFER_BINDING: 0x8CA6,
  RENDERBUFFER_BINDING: 0x8CA7,
  READ_FRAMEBUFFER: 0x8CA8,
  DRAW_FRAMEBUFFER: 0x8CA9,
  MAX_RENDERBUFFER_SIZE: 0x84E8,
  INVALID_FRAMEBUFFER_OPERATION: 0x0506,

  // Pixel storage modes
  // Constants passed to pixelStorei().

  UNPACK_FLIP_Y_WEBGL: 0x9240,
  UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241,
  UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243,

  // /////////////////////////////////////////////////////
  // Additional constants defined WebGL 2
  // These constants are defined on the WebGL2RenderingContext interface.
  // All WebGL 1 constants are also available in a WebGL 2 context.
  // /////////////////////////////////////////////////////

  // Getting GL parameter information
  // Constants passed to getParameter()
  // to specify what information to return.

  READ_BUFFER: 0x0C02,
  UNPACK_ROW_LENGTH: 0x0CF2,
  UNPACK_SKIP_ROWS: 0x0CF3,
  UNPACK_SKIP_PIXELS: 0x0CF4,
  PACK_ROW_LENGTH: 0x0D02,
  PACK_SKIP_ROWS: 0x0D03,
  PACK_SKIP_PIXELS: 0x0D04,
  TEXTURE_BINDING_3D: 0x806A,
  UNPACK_SKIP_IMAGES: 0x806D,
  UNPACK_IMAGE_HEIGHT: 0x806E,
  MAX_3D_TEXTURE_SIZE: 0x8073,
  MAX_ELEMENTS_VERTICES: 0x80E8,
  MAX_ELEMENTS_INDICES: 0x80E9,
  MAX_TEXTURE_LOD_BIAS: 0x84FD,
  MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8B49,
  MAX_VERTEX_UNIFORM_COMPONENTS: 0x8B4A,
  MAX_ARRAY_TEXTURE_LAYERS: 0x88FF,
  MIN_PROGRAM_TEXEL_OFFSET: 0x8904,
  MAX_PROGRAM_TEXEL_OFFSET: 0x8905,
  MAX_VARYING_COMPONENTS: 0x8B4B,
  FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8B8B,
  RASTERIZER_DISCARD: 0x8C89,
  VERTEX_ARRAY_BINDING: 0x85B5,
  MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122,
  MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125,
  MAX_SERVER_WAIT_TIMEOUT: 0x9111,
  MAX_ELEMENT_INDEX: 0x8D6B,

  // Textures
  // Constants passed to texParameteri(),
  // texParameterf(), bindTexture(), texImage2D(), and others.

  RED: 0x1903,
  RGB8: 0x8051,
  RGBA8: 0x8058,
  RGB10_A2: 0x8059,
  TEXTURE_3D: 0x806F,
  TEXTURE_WRAP_R: 0x8072,
  TEXTURE_MIN_LOD: 0x813A,
  TEXTURE_MAX_LOD: 0x813B,
  TEXTURE_BASE_LEVEL: 0x813C,
  TEXTURE_MAX_LEVEL: 0x813D,
  TEXTURE_COMPARE_MODE: 0x884C,
  TEXTURE_COMPARE_FUNC: 0x884D,
  SRGB: 0x8C40,
  SRGB8: 0x8C41,
  SRGB8_ALPHA8: 0x8C43,
  COMPARE_REF_TO_TEXTURE: 0x884E,
  RGBA32F: 0x8814,
  RGB32F: 0x8815,
  RGBA16F: 0x881A,
  RGB16F: 0x881B,
  TEXTURE_2D_ARRAY: 0x8C1A,
  TEXTURE_BINDING_2D_ARRAY: 0x8C1D,
  R11F_G11F_B10F: 0x8C3A,
  RGB9_E5: 0x8C3D,
  RGBA32UI: 0x8D70,
  RGB32UI: 0x8D71,
  RGBA16UI: 0x8D76,
  RGB16UI: 0x8D77,
  RGBA8UI: 0x8D7C,
  RGB8UI: 0x8D7D,
  RGBA32I: 0x8D82,
  RGB32I: 0x8D83,
  RGBA16I: 0x8D88,
  RGB16I: 0x8D89,
  RGBA8I: 0x8D8E,
  RGB8I: 0x8D8F,
  RED_INTEGER: 0x8D94,
  RGB_INTEGER: 0x8D98,
  RGBA_INTEGER: 0x8D99,
  R8: 0x8229,
  RG8: 0x822B,
  R16F: 0x822D,
  R32F: 0x822E,
  RG16F: 0x822F,
  RG32F: 0x8230,
  R8I: 0x8231,
  R8UI: 0x8232,
  R16I: 0x8233,
  R16UI: 0x8234,
  R32I: 0x8235,
  R32UI: 0x8236,
  RG8I: 0x8237,
  RG8UI: 0x8238,
  RG16I: 0x8239,
  RG16UI: 0x823A,
  RG32I: 0x823B,
  RG32UI: 0x823C,
  R8_SNORM: 0x8F94,
  RG8_SNORM: 0x8F95,
  RGB8_SNORM: 0x8F96,
  RGBA8_SNORM: 0x8F97,
  RGB10_A2UI: 0x906F,

  /* covered by extension
  COMPRESSED_R11_EAC : 0x9270,
  COMPRESSED_SIGNED_R11_EAC: 0x9271,
  COMPRESSED_RG11_EAC: 0x9272,
  COMPRESSED_SIGNED_RG11_EAC : 0x9273,
  COMPRESSED_RGB8_ETC2 : 0x9274,
  COMPRESSED_SRGB8_ETC2: 0x9275,
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : 0x9276,
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC : 0x9277,
  COMPRESSED_RGBA8_ETC2_EAC: 0x9278,
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 0x9279,
  */
  TEXTURE_IMMUTABLE_FORMAT: 0x912F,
  TEXTURE_IMMUTABLE_LEVELS: 0x82DF,

  // Pixel types

  UNSIGNED_INT_2_10_10_10_REV: 0x8368,
  UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B,
  UNSIGNED_INT_5_9_9_9_REV: 0x8C3E,
  FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD,
  UNSIGNED_INT_24_8: 0x84FA,
  HALF_FLOAT: 0x140B,
  RG: 0x8227,
  RG_INTEGER: 0x8228,
  INT_2_10_10_10_REV: 0x8D9F,

  // Queries

  CURRENT_QUERY: 0x8865,
  QUERY_RESULT: 0x8866,
  QUERY_RESULT_AVAILABLE: 0x8867,
  ANY_SAMPLES_PASSED: 0x8C2F,
  ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8D6A,

  // Draw buffers

  MAX_DRAW_BUFFERS: 0x8824,
  DRAW_BUFFER0: 0x8825,
  DRAW_BUFFER1: 0x8826,
  DRAW_BUFFER2: 0x8827,
  DRAW_BUFFER3: 0x8828,
  DRAW_BUFFER4: 0x8829,
  DRAW_BUFFER5: 0x882A,
  DRAW_BUFFER6: 0x882B,
  DRAW_BUFFER7: 0x882C,
  DRAW_BUFFER8: 0x882D,
  DRAW_BUFFER9: 0x882E,
  DRAW_BUFFER10: 0x882F,
  DRAW_BUFFER11: 0x8830,
  DRAW_BUFFER12: 0x8831,
  DRAW_BUFFER13: 0x8832,
  DRAW_BUFFER14: 0x8833,
  DRAW_BUFFER15: 0x8834,
  MAX_COLOR_ATTACHMENTS: 0x8CDF,
  COLOR_ATTACHMENT1: 0x8CE1,
  COLOR_ATTACHMENT2: 0x8CE2,
  COLOR_ATTACHMENT3: 0x8CE3,
  COLOR_ATTACHMENT4: 0x8CE4,
  COLOR_ATTACHMENT5: 0x8CE5,
  COLOR_ATTACHMENT6: 0x8CE6,
  COLOR_ATTACHMENT7: 0x8CE7,
  COLOR_ATTACHMENT8: 0x8CE8,
  COLOR_ATTACHMENT9: 0x8CE9,
  COLOR_ATTACHMENT10: 0x8CEA,
  COLOR_ATTACHMENT11: 0x8CEB,
  COLOR_ATTACHMENT12: 0x8CEC,
  COLOR_ATTACHMENT13: 0x8CED,
  COLOR_ATTACHMENT14: 0x8CEE,
  COLOR_ATTACHMENT15: 0x8CEF,

  // Samplers

  SAMPLER_3D: 0x8B5F,
  SAMPLER_2D_SHADOW: 0x8B62,
  SAMPLER_2D_ARRAY: 0x8DC1,
  SAMPLER_2D_ARRAY_SHADOW: 0x8DC4,
  SAMPLER_CUBE_SHADOW: 0x8DC5,
  INT_SAMPLER_2D: 0x8DCA,
  INT_SAMPLER_3D: 0x8DCB,
  INT_SAMPLER_CUBE: 0x8DCC,
  INT_SAMPLER_2D_ARRAY: 0x8DCF,
  UNSIGNED_INT_SAMPLER_2D: 0x8DD2,
  UNSIGNED_INT_SAMPLER_3D: 0x8DD3,
  UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4,
  UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7,
  MAX_SAMPLES: 0x8D57,
  SAMPLER_BINDING: 0x8919,

  // Buffers

  PIXEL_PACK_BUFFER: 0x88EB,
  PIXEL_UNPACK_BUFFER: 0x88EC,
  PIXEL_PACK_BUFFER_BINDING: 0x88ED,
  PIXEL_UNPACK_BUFFER_BINDING: 0x88EF,
  COPY_READ_BUFFER: 0x8F36,
  COPY_WRITE_BUFFER: 0x8F37,
  COPY_READ_BUFFER_BINDING: 0x8F36,
  COPY_WRITE_BUFFER_BINDING: 0x8F37,

  // Data types

  FLOAT_MAT2x3: 0x8B65,
  FLOAT_MAT2x4: 0x8B66,
  FLOAT_MAT3x2: 0x8B67,
  FLOAT_MAT3x4: 0x8B68,
  FLOAT_MAT4x2: 0x8B69,
  FLOAT_MAT4x3: 0x8B6A,
  UNSIGNED_INT_VEC2: 0x8DC6,
  UNSIGNED_INT_VEC3: 0x8DC7,
  UNSIGNED_INT_VEC4: 0x8DC8,
  UNSIGNED_NORMALIZED: 0x8C17,
  SIGNED_NORMALIZED: 0x8F9C,

  // Vertex attributes

  VERTEX_ATTRIB_ARRAY_INTEGER: 0x88FD,
  VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88FE,

  // Transform feedback

  TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8C7F,
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8C80,
  TRANSFORM_FEEDBACK_VARYINGS: 0x8C83,
  TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84,
  TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8C85,
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88,
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A,
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B,
  INTERLEAVED_ATTRIBS: 0x8C8C,
  SEPARATE_ATTRIBS: 0x8C8D,
  TRANSFORM_FEEDBACK_BUFFER: 0x8C8E,
  TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8C8F,
  TRANSFORM_FEEDBACK: 0x8E22,
  TRANSFORM_FEEDBACK_PAUSED: 0x8E23,
  TRANSFORM_FEEDBACK_ACTIVE: 0x8E24,
  TRANSFORM_FEEDBACK_BINDING: 0x8E25,

  // Framebuffers and renderbuffers

  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210,
  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211,
  FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212,
  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213,
  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214,
  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215,
  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216,
  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217,
  FRAMEBUFFER_DEFAULT: 0x8218,
  // DEPTH_STENCIL_ATTACHMENT : 0x821A,
  // DEPTH_STENCIL: 0x84F9,
  DEPTH24_STENCIL8: 0x88F0,
  DRAW_FRAMEBUFFER_BINDING: 0x8CA6,
  READ_FRAMEBUFFER_BINDING: 0x8CAA,
  RENDERBUFFER_SAMPLES: 0x8CAB,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8CD4,
  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8D56,

  // Uniforms

  UNIFORM_BUFFER: 0x8A11,
  UNIFORM_BUFFER_BINDING: 0x8A28,
  UNIFORM_BUFFER_START: 0x8A29,
  UNIFORM_BUFFER_SIZE: 0x8A2A,
  MAX_VERTEX_UNIFORM_BLOCKS: 0x8A2B,
  MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8A2D,
  MAX_COMBINED_UNIFORM_BLOCKS: 0x8A2E,
  MAX_UNIFORM_BUFFER_BINDINGS: 0x8A2F,
  MAX_UNIFORM_BLOCK_SIZE: 0x8A30,
  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8A31,
  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8A33,
  UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8A34,
  ACTIVE_UNIFORM_BLOCKS: 0x8A36,
  UNIFORM_TYPE: 0x8A37,
  UNIFORM_SIZE: 0x8A38,
  UNIFORM_BLOCK_INDEX: 0x8A3A,
  UNIFORM_OFFSET: 0x8A3B,
  UNIFORM_ARRAY_STRIDE: 0x8A3C,
  UNIFORM_MATRIX_STRIDE: 0x8A3D,
  UNIFORM_IS_ROW_MAJOR: 0x8A3E,
  UNIFORM_BLOCK_BINDING: 0x8A3F,
  UNIFORM_BLOCK_DATA_SIZE: 0x8A40,
  UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8A42,
  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8A43,
  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8A44,
  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8A46,

  // Sync objects

  OBJECT_TYPE: 0x9112,
  SYNC_CONDITION: 0x9113,
  SYNC_STATUS: 0x9114,
  SYNC_FLAGS: 0x9115,
  SYNC_FENCE: 0x9116,
  SYNC_GPU_COMMANDS_COMPLETE: 0x9117,
  UNSIGNALED: 0x9118,
  SIGNALED: 0x9119,
  ALREADY_SIGNALED: 0x911A,
  TIMEOUT_EXPIRED: 0x911B,
  CONDITION_SATISFIED: 0x911C,
  WAIT_FAILED: 0x911D,
  SYNC_FLUSH_COMMANDS_BIT: 0x00000001,

  // Miscellaneous constants

  COLOR: 0x1800,
  DEPTH: 0x1801,
  STENCIL: 0x1802,
  MIN: 0x8007,
  MAX: 0x8008,
  DEPTH_COMPONENT24: 0x81A6,
  STREAM_READ: 0x88E1,
  STREAM_COPY: 0x88E2,
  STATIC_READ: 0x88E5,
  STATIC_COPY: 0x88E6,
  DYNAMIC_READ: 0x88E9,
  DYNAMIC_COPY: 0x88EA,
  DEPTH_COMPONENT32F: 0x8CAC,
  DEPTH32F_STENCIL8: 0x8CAD,
  INVALID_INDEX: 0xFFFFFFFF,
  TIMEOUT_IGNORED: -1,
  MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247,

  // Constants defined in WebGL extensions

  // ANGLE_instanced_arrays

  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88FE,

  // WEBGL_debug_renderer_info

  UNMASKED_VENDOR_WEBGL: 0x9245,
  UNMASKED_RENDERER_WEBGL: 0x9246,

  // EXT_texture_filter_anisotropic

  MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84FF,
  TEXTURE_MAX_ANISOTROPY_EXT: 0x84FE,

  // WEBGL_compressed_texture_s3tc

  COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0,
  COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1,
  COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2,
  COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3,

  // WEBGL_compressed_texture_es3

  COMPRESSED_R11_EAC: 0x9270,
  COMPRESSED_SIGNED_R11_EAC: 0x9271,
  COMPRESSED_RG11_EAC: 0x9272,
  COMPRESSED_SIGNED_RG11_EAC: 0x9273,
  COMPRESSED_RGB8_ETC2: 0x9274,
  COMPRESSED_RGBA8_ETC2_EAC: 0x9275,
  COMPRESSED_SRGB8_ETC2: 0x9276,
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9277,
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9278,
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9279,

  // WEBGL_compressed_texture_pvrtc

  COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8C00,
  COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8C02,
  COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8C01,
  COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8C03,

  // WEBGL_compressed_texture_etc1

  COMPRESSED_RGB_ETC1_WEBGL: 0x8D64,

  // WEBGL_compressed_texture_atc

  COMPRESSED_RGB_ATC_WEBGL: 0x8C92,
  COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: 0x8C92,
  COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: 0x87EE,

  // WEBGL_depth_texture

  UNSIGNED_INT_24_8_WEBGL: 0x84FA,

  // OES_texture_half_float

  HALF_FLOAT_OES: 0x8D61,

  // WEBGL_color_buffer_float

  RGBA32F_EXT: 0x8814,
  RGB32F_EXT: 0x8815,
  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211,
  UNSIGNED_NORMALIZED_EXT: 0x8C17,

  // EXT_blend_minmax

  MIN_EXT: 0x8007,
  MAX_EXT: 0x8008,

  // EXT_sRGB

  SRGB_EXT: 0x8C40,
  SRGB_ALPHA_EXT: 0x8C42,
  SRGB8_ALPHA8_EXT: 0x8C43,
  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 0x8210,

  // OES_standard_derivatives

  FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8B8B,

  // WEBGL_draw_buffers

  COLOR_ATTACHMENT0_WEBGL: 0x8CE0,
  COLOR_ATTACHMENT1_WEBGL: 0x8CE1,
  COLOR_ATTACHMENT2_WEBGL: 0x8CE2,
  COLOR_ATTACHMENT3_WEBGL: 0x8CE3,
  COLOR_ATTACHMENT4_WEBGL: 0x8CE4,
  COLOR_ATTACHMENT5_WEBGL: 0x8CE5,
  COLOR_ATTACHMENT6_WEBGL: 0x8CE6,
  COLOR_ATTACHMENT7_WEBGL: 0x8CE7,
  COLOR_ATTACHMENT8_WEBGL: 0x8CE8,
  COLOR_ATTACHMENT9_WEBGL: 0x8CE9,
  COLOR_ATTACHMENT10_WEBGL: 0x8CEA,
  COLOR_ATTACHMENT11_WEBGL: 0x8CEB,
  COLOR_ATTACHMENT12_WEBGL: 0x8CEC,
  COLOR_ATTACHMENT13_WEBGL: 0x8CED,
  COLOR_ATTACHMENT14_WEBGL: 0x8CEE,
  COLOR_ATTACHMENT15_WEBGL: 0x8CEF,
  DRAW_BUFFER0_WEBGL: 0x8825,
  DRAW_BUFFER1_WEBGL: 0x8826,
  DRAW_BUFFER2_WEBGL: 0x8827,
  DRAW_BUFFER3_WEBGL: 0x8828,
  DRAW_BUFFER4_WEBGL: 0x8829,
  DRAW_BUFFER5_WEBGL: 0x882A,
  DRAW_BUFFER6_WEBGL: 0x882B,
  DRAW_BUFFER7_WEBGL: 0x882C,
  DRAW_BUFFER8_WEBGL: 0x882D,
  DRAW_BUFFER9_WEBGL: 0x882E,
  DRAW_BUFFER10_WEBGL: 0x882F,
  DRAW_BUFFER11_WEBGL: 0x8830,
  DRAW_BUFFER12_WEBGL: 0x8831,
  DRAW_BUFFER13_WEBGL: 0x8832,
  DRAW_BUFFER14_WEBGL: 0x8833,
  DRAW_BUFFER15_WEBGL: 0x8834,
  MAX_COLOR_ATTACHMENTS_WEBGL: 0x8CDF,
  MAX_DRAW_BUFFERS_WEBGL: 0x8824,

  // OES_vertex_array_object

  VERTEX_ARRAY_BINDING_OES: 0x85B5,

  // EXT_disjoint_timer_query

  QUERY_COUNTER_BITS_EXT: 0x8864,
  CURRENT_QUERY_EXT: 0x8865,
  QUERY_RESULT_EXT: 0x8866,
  QUERY_RESULT_AVAILABLE_EXT: 0x8867,
  TIME_ELAPSED_EXT: 0x88BF,
  TIMESTAMP_EXT: 0x8E28,
  GPU_DISJOINT_EXT: 0x8FBB // A Boolean indicating whether or not the GPU performed any disjoint operation.
});
//# sourceMappingURL=constants.js.map

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__animation_loop__ = __webpack_require__(72);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationLoop", function() { return __WEBPACK_IMPORTED_MODULE_0__animation_loop__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "requestAnimationFrame", function() { return __WEBPACK_IMPORTED_MODULE_0__animation_loop__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "cancelAnimationFrame", function() { return __WEBPACK_IMPORTED_MODULE_0__animation_loop__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model__ = __webpack_require__(22);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Model", function() { return __WEBPACK_IMPORTED_MODULE_1__model__["a"]; });


//# sourceMappingURL=index.js.map

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__create_canvas__ = __webpack_require__(219);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_0__create_canvas__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__create_canvas__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__create_canvas__["b"]; });
/* unused harmony reexport resizeCanvas */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_0__create_canvas__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__create_context__ = __webpack_require__(220);
/* unused harmony reexport trackContextCreation */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__create_context__["a"]; });
/* unused harmony reexport resizeViewport */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__polyfill_context__ = __webpack_require__(92);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_2__polyfill_context__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__track_context_state__ = __webpack_require__(40);
/* unused harmony reexport trackContextState */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__format_glsl_error__ = __webpack_require__(221);
/* unused harmony reexport formatGLSLCompilerError */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_4__format_glsl_error__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__get_shader_name__ = __webpack_require__(91);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_5__get_shader_name__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__constants__ = __webpack_require__(9);
/* unused harmony reexport GL */










// TODO - avoid uncondsitionally importing GL as it adds a lot to bundle size?

//# sourceMappingURL=index.js.map

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "GL", function() { return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__api_types__ = __webpack_require__(94);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Image", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLRenderingContext", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLProgram", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLShader", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["g"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLBuffer", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLFramebuffer", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["h"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLRenderbuffer", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["i"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLTexture", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["j"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLUniformLocation", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["k"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLActiveInfo", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["l"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLShaderPrecisionFormat", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["m"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "WebGL2RenderingContext", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "webGLTypesAvailable", function() { return __WEBPACK_IMPORTED_MODULE_1__api_types__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context__ = __webpack_require__(1);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isWebGL", function() { return __WEBPACK_IMPORTED_MODULE_2__context__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isWebGL2", function() { return __WEBPACK_IMPORTED_MODULE_2__context__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "createGLContext", function() { return __WEBPACK_IMPORTED_MODULE_2__context__["g"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "deleteGLContext", function() { return __WEBPACK_IMPORTED_MODULE_2__context__["h"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context_state__ = __webpack_require__(15);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "withParameters", function() { return __WEBPACK_IMPORTED_MODULE_3__context_state__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "resetParameters", function() { return __WEBPACK_IMPORTED_MODULE_3__context_state__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__context_limits__ = __webpack_require__(41);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "getContextInfo", function() { return __WEBPACK_IMPORTED_MODULE_4__context_limits__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__buffer__ = __webpack_require__(18);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Buffer", function() { return __WEBPACK_IMPORTED_MODULE_5__buffer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shader__ = __webpack_require__(29);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Shader", function() { return __WEBPACK_IMPORTED_MODULE_6__shader__["default"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "VertexShader", function() { return __WEBPACK_IMPORTED_MODULE_6__shader__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "FragmentShader", function() { return __WEBPACK_IMPORTED_MODULE_6__shader__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__program__ = __webpack_require__(43);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Program", function() { return __WEBPACK_IMPORTED_MODULE_7__program__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__framebuffer__ = __webpack_require__(27);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Framebuffer", function() { return __WEBPACK_IMPORTED_MODULE_8__framebuffer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__renderbuffer__ = __webpack_require__(28);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Renderbuffer", function() { return __WEBPACK_IMPORTED_MODULE_9__renderbuffer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__texture_2d__ = __webpack_require__(44);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Texture2D", function() { return __WEBPACK_IMPORTED_MODULE_10__texture_2d__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__texture_cube__ = __webpack_require__(101);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TextureCube", function() { return __WEBPACK_IMPORTED_MODULE_11__texture_cube__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__draw__ = __webpack_require__(96);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "draw", function() { return __WEBPACK_IMPORTED_MODULE_12__draw__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__clear__ = __webpack_require__(25);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "clear", function() { return __WEBPACK_IMPORTED_MODULE_13__clear__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__functions__ = __webpack_require__(98);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "readPixels", function() { return __WEBPACK_IMPORTED_MODULE_14__functions__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "readPixelsFromBuffer", function() { return __WEBPACK_IMPORTED_MODULE_14__functions__["readPixelsFromBuffer"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__uniforms__ = __webpack_require__(45);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "parseUniformName", function() { return __WEBPACK_IMPORTED_MODULE_15__uniforms__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "getUniformSetter", function() { return __WEBPACK_IMPORTED_MODULE_15__uniforms__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkUniformValues", function() { return __WEBPACK_IMPORTED_MODULE_15__uniforms__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__vertex_array__ = __webpack_require__(46);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "VertexArray", function() { return __WEBPACK_IMPORTED_MODULE_16__vertex_array__["a"]; });
// luma.gl Base WebGL wrapper library
// Provides simple class/function wrappers around the low level webgl objects
// These classes are intentionally close to the WebGL API
// but make it easier to use.
// Higher level abstractions can be built on these classes




// Exports WebGL API constants and types, plus some basic type checks








// WebGL1 objects








// Functions








// WebGL2

//# sourceMappingURL=index.js.map

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export TEXTURE_FORMATS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context_state__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__buffer__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _TEXTURE_FORMATS;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-inline-comments, max-len */










// Supported min filters for NPOT texture.
var NPOT_MIN_FILTERS = [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINEAR, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].NEAREST];

// const S3TC = 'WEBGL_compressed_texture_s3tc';
// const PVRTC = 'WEBGL_compressed_texture_pvrtc';
// const ES3 = 'WEBGL_compressed_texture_es3';
// const ETC1 = 'WEBGL_compressed_texture_etc1';
// const SRGB = 'EXT_sRGB';
// const DEPTH = 'WEBGL_depth_texture';

// Legal combinations for internalFormat, format and type
var TEXTURE_FORMATS = (_TEXTURE_FORMATS = {}, _defineProperty(_TEXTURE_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB, { dataFormat: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB, types: [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_SHORT_5_6_5] }), _defineProperty(_TEXTURE_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA, { dataFormat: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA, types: [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_SHORT_4_4_4_4, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_SHORT_5_5_5_1] }), _defineProperty(_TEXTURE_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].ALPHA, { dataFormat: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].ALPHA, types: [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE] }), _defineProperty(_TEXTURE_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LUMINANCE, { dataFormat: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LUMINANCE, types: [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE] }), _defineProperty(_TEXTURE_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LUMINANCE_ALPHA, { dataFormat: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LUMINANCE_ALPHA, types: [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE]

  // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},
  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},

  // Sized texture format - more performance
  // R
  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},
  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.R32F]: {dataFormat: GL.RED, types: [GL.FLOAT], gl2: true},
  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
  // // RG
  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},
  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.RG32F]: {dataFormat: GL.RG, types: [GL.FLOAT], gl2: true},
  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
  // // RGB
  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},
  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},
  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},
  // [GL.RGB32F]: {dataFormat: GL.RGB, types: [GL.FLOAT], gl2: true},
  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
  // // RGBA
  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},
  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},
  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.RGBA32F]: {dataFormat: GL.RGBA, types: [GL.FLOAT], gl2: true},
  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}

  // Compressed formats

  // WEBGL_compressed_texture_s3tc

  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},
  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},
  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},
  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},

  // WEBGL_compressed_texture_es3

  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED
  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED
  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG
  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG
  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB
  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG
  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB
  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA
  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA
  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA
  /* WebGL2 guaranteed availability compressed formats?
  COMPRESSED_R11_EAC RED
  COMPRESSED_SIGNED_R11_EAC RED
  COMPRESSED_RG11_EAC RG
  COMPRESSED_SIGNED_RG11_EAC RG
  COMPRESSED_RGB8_ETC2 RGB
  COMPRESSED_SRGB8_ETC2 RGB
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA
  COMPRESSED_RGBA8_ETC2_EAC RGBA
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
  */

  // WEBGL_compressed_texture_pvrtc

  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},
  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},
  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},
  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},

  // WEBGL_compressed_texture_etc1

  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},

  // WEBGL_compressed_texture_atc

  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},
  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},
  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}
}), _TEXTURE_FORMATS);

function isFormatSupported(gl, format) {
  __WEBPACK_IMPORTED_MODULE_7_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["c" /* isWebGL */])(gl), __WEBPACK_IMPORTED_MODULE_2__context__["d" /* ERR_WEBGL */]);
  var info = TEXTURE_FORMATS[format];
  if (!info) {
    return false;
  }
  if (info.gl1 === undefined && info.gl2 === undefined) {
    // No info - always supported
    return true;
  }
  var value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["b" /* isWebGL2 */])(gl) ? info.gl2 || info.gl1 : info.gl1;
  return typeof value === 'string' ? gl.getExtension(value) : value;
}

function isLinearFilteringSupported(gl, format) {
  var info = TEXTURE_FORMATS[format];
  switch (info && info.types[0]) {
    // Both WebGL1 and WebGL2?
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].FLOAT:
      return gl.getExtension('OES_texture_float_linear');
    // Not in WebGL2?
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].HALF_FLOAT:
      return gl.getExtension('OES_texture_half_float_linear');
    default:
      return true;
  }
}

var Texture = /*#__PURE__*/function (_Resource) {
  _inherits(Texture, _Resource);

  _createClass(Texture, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          format = _ref.format,
          linearFiltering = _ref.linearFiltering;

      __WEBPACK_IMPORTED_MODULE_7_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["c" /* isWebGL */])(gl), __WEBPACK_IMPORTED_MODULE_2__context__["d" /* ERR_WEBGL */]);
      var supported = true;
      if (format) {
        supported = supported && isFormatSupported(gl, format);
        supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));
      }
      return supported;
    }

    // target cannot be modified by bind:
    // textures are special because when you first bind them to a target,
    // they get special information. When you first bind a texture as a
    // GL_TEXTURE_2D, you are actually setting special state in the texture.
    // You are saying that this texture is a 2D texture.
    // And it will always be a 2D texture; this state cannot be changed ever.
    // If you have a texture that was first bound as a GL_TEXTURE_2D,
    // you must always bind it as a GL_TEXTURE_2D;
    // attempting to bind it as GL_TEXTURE_1D will give rise to an error
    // (while run-time).

  }]);

  function Texture(gl, opts) {
    _classCallCheck(this, Texture);

    var _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils__["uid"])('texture') : _opts$id,
        handle = opts.handle,
        target = opts.target;

    var _this = _possibleConstructorReturn(this, (Texture.__proto__ || Object.getPrototypeOf(Texture)).call(this, gl, { id: id, handle: handle }));

    _this.target = target;
    _this.hasFloatTexture = gl.getExtension('OES_texture_float');
    _this.textureUnit = undefined;
    return _this;
  }

  _createClass(Texture, [{
    key: 'toString',
    value: function toString() {
      return 'Texture(' + this.id + ',' + this.width + 'x' + this.height + ')';
    }

    /* eslint-disable max-len, max-statements */

  }, {
    key: 'initialize',
    value: function initialize() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = opts.data;

      var _opts$pixels = opts.pixels,
          pixels = _opts$pixels === undefined ? null : _opts$pixels,
          _opts$format = opts.format,
          format = _opts$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA : _opts$format,
          _opts$type = opts.type,
          type = _opts$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE : _opts$type,
          _opts$border = opts.border,
          border = _opts$border === undefined ? 0 : _opts$border,
          _opts$recreate = opts.recreate,
          recreate = _opts$recreate === undefined ? false : _opts$recreate,
          _opts$parameters = opts.parameters,
          parameters = _opts$parameters === undefined ? {} : _opts$parameters,
          _opts$pixelStore = opts.pixelStore,
          pixelStore = _opts$pixelStore === undefined ? {} : _opts$pixelStore,
          _opts$unpackFlipY = opts.unpackFlipY,
          unpackFlipY = _opts$unpackFlipY === undefined ? true : _opts$unpackFlipY,
          generateMipmaps = opts.generateMipmaps;
      var _opts$mipmaps = opts.mipmaps,
          mipmaps = _opts$mipmaps === undefined ? true : _opts$mipmaps;


      if (generateMipmaps !== undefined) {
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('generateMipmaps', 'mipmaps');
        mipmaps = generateMipmaps;
      }

      // pixels variable is  for API compatibility purpose
      if (!data) {
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('data', 'pixels');
        data = pixels;
      }

      var width = opts.width,
          height = opts.height,
          dataFormat = opts.dataFormat;

      // Deduce width and height

      // Store opts for accessors
      var _deduceParameters2 = this._deduceParameters({
        format: format, type: type, dataFormat: dataFormat, compressed: false, data: data, width: width, height: height
      });

      width = _deduceParameters2.width;
      height = _deduceParameters2.height;
      dataFormat = _deduceParameters2.dataFormat;
      this.width = width;
      this.height = height;
      this.format = format;
      this.type = type;
      this.dataFormat = dataFormat;
      this.border = border;
      this.mipmaps = mipmaps;

      // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;
      // TODO - compare v4 and v3
      var DEFAULT_TEXTURE_SETTINGS = _defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNPACK_FLIP_Y_WEBGL, unpackFlipY);
      var glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);

      if (this._isNPOT()) {

        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, disabling mipmaping');
        mipmaps = false;

        this._updateForNPOT(parameters);
      }

      this.setImageData({ data: data, width: width, height: height, format: format, type: type, dataFormat: dataFormat, border: border, mipmaps: mipmaps, parameters: glSettings });

      if (mipmaps) {
        this.generateMipmap();
      }

      // Append any v3 style parameters
      var updatedParameters = this._applyV3Options(parameters, opts);

      // Set texture sampler parameters
      this.setParameters(updatedParameters);

      // TODO - Store data to enable auto recreate on context loss
      if (recreate) {
        this.data = data;
      }
    }

    // If size has changed, reinitializes with current format
    // note clears image and mipmaps

  }, {
    key: 'resize',
    value: function resize(_ref2) {
      var width = _ref2.width,
          height = _ref2.height;

      if (width !== this.width || height !== this.height) {
        return this.initialize({
          width: width,
          height: height,
          format: this.format,
          type: this.type,
          dataFormat: this.dataFormat,
          border: this.border,
          mipmaps: false
        });
      }
      return this;
    }

    // Call to regenerate mipmaps after modifying texture(s)

  }, {
    key: 'generateMipmap',
    value: function generateMipmap() {
      var _this2 = this;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.gl.bindTexture(this.target, this.handle);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context_state__["b" /* withParameters */])(this.gl, params, function () {
        _this2.gl.generateMipmap(_this2.target);
      });
      this.gl.bindTexture(this.target, null);
      return this;
    }

    /*
     * Allocates storage
     * @param {*} pixels -
     *  null - create empty texture of specified format
     *  Typed array - init from image data in typed array
     *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer
     *  HTMLImageElement|Image - Inits with content of image. Auto width/height
     *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height
     *  HTMLVideoElement - Creates video texture. Auto width/height
     *
     * @param {GLint} width -
     * @param {GLint} height -
     * @param {GLint} mipMapLevel -
     * @param {GLenum} format - format of image data.
     * @param {GLenum} type
     *  - format of array (autodetect from type) or
     *  - (WEBGL2) format of buffer
     * @param {Number} offset - (WEBGL2) offset from start of buffer
     * @param {GLint} border - must be 0.
     * @parameters - temporary settings to be applied, can be used to supply pixel store settings.
     */
    /* eslint-disable max-len, max-statements, complexity */

  }, {
    key: 'setImageData',
    value: function setImageData(_ref3) {
      var _this3 = this;

      var _ref3$target = _ref3.target,
          target = _ref3$target === undefined ? this.target : _ref3$target,
          _ref3$pixels = _ref3.pixels,
          pixels = _ref3$pixels === undefined ? null : _ref3$pixels,
          _ref3$data = _ref3.data,
          data = _ref3$data === undefined ? null : _ref3$data,
          width = _ref3.width,
          height = _ref3.height,
          _ref3$level = _ref3.level,
          level = _ref3$level === undefined ? 0 : _ref3$level,
          _ref3$format = _ref3.format,
          format = _ref3$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA : _ref3$format,
          type = _ref3.type,
          dataFormat = _ref3.dataFormat,
          _ref3$offset = _ref3.offset,
          offset = _ref3$offset === undefined ? 0 : _ref3$offset,
          _ref3$border = _ref3.border,
          border = _ref3$border === undefined ? 0 : _ref3$border,
          _ref3$compressed = _ref3.compressed,
          compressed = _ref3$compressed === undefined ? false : _ref3$compressed,
          _ref3$parameters = _ref3.parameters,
          parameters = _ref3$parameters === undefined ? {} : _ref3$parameters;

      // pixels variable is  for API compatibility purpose
      if (!data) {
        data = pixels;
      }

      var _deduceParameters3 = this._deduceParameters({
        format: format, type: type, dataFormat: dataFormat, compressed: compressed, data: data, width: width, height: height });

      type = _deduceParameters3.type;
      dataFormat = _deduceParameters3.dataFormat;
      compressed = _deduceParameters3.compressed;
      width = _deduceParameters3.width;
      height = _deduceParameters3.height;
      var gl = this.gl;

      gl.bindTexture(this.target, this.handle);

      var dataType = null;

      var _getDataType2 = this._getDataType({ data: data, compressed: compressed });

      data = _getDataType2.data;
      dataType = _getDataType2.dataType;


      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context_state__["b" /* withParameters */])(this.gl, parameters, function () {
        switch (dataType) {
          case 'null':
            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);
            break;
          case 'typed-array':
            // Looks like this assert is not necessary, as offset is ignored under WebGL1
            // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');
            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);
            break;
          case 'buffer':
            // WebGL2 enables creating textures directly from a WebGL buffer
            __WEBPACK_IMPORTED_MODULE_7_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["b" /* isWebGL2 */])(gl), __WEBPACK_IMPORTED_MODULE_2__context__["e" /* ERR_WEBGL2 */]);
            gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].PIXEL_UNPACK_BUFFER, data.handle || data);
            gl.texImage2D(target, level, format, width, height, border, format, type, offset);
            break;
          case 'browser-object':
            gl.texImage2D(target, level, format, format, type, data);
            break;
          case 'compressed':
            gl.compressedTexImage2D(_this3.target, level, format, width, height, border, data);
            break;
          default:
            __WEBPACK_IMPORTED_MODULE_7_assert___default()(false, 'Unknown image data type');
        }
      });
    }
    /* eslint-enable max-len, max-statements, complexity */

    /**
     * Redefines an area of an existing texture
     * Note: does not allocate storage
     */
    /*
     * Redefines an area of an existing texture
     * @param {*} pixels, data -
     *  null - create empty texture of specified format
     *  Typed array - init from image data in typed array
     *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer
     *  HTMLImageElement|Image - Inits with content of image. Auto width/height
     *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height
     *  HTMLVideoElement - Creates video texture. Auto width/height
     *
     * @param {GLint} x - xOffset from where texture to be updated
     * @param {GLint} y - yOffset from where texture to be updated
     * @param {GLint} width - width of the sub image to be updated
     * @param {GLint} height - height of the sub image to be updated
     * @param {GLint} level - mip level to be updated
     * @param {GLenum} format - internal format of image data.
     * @param {GLenum} type
     *  - format of array (autodetect from type) or
     *  - (WEBGL2) format of buffer or ArrayBufferView
     * @param {GLenum} dataFormat - format of image data.
     * @param {Number} offset - (WEBGL2) offset from start of buffer
     * @param {GLint} border - must be 0.
     * @parameters - temporary settings to be applied, can be used to supply pixel store settings.
     */

  }, {
    key: 'setSubImageData',
    value: function setSubImageData(_ref4) {
      var _this4 = this;

      var _ref4$target = _ref4.target,
          target = _ref4$target === undefined ? this.target : _ref4$target,
          _ref4$pixels = _ref4.pixels,
          pixels = _ref4$pixels === undefined ? null : _ref4$pixels,
          _ref4$data = _ref4.data,
          data = _ref4$data === undefined ? null : _ref4$data,
          _ref4$x = _ref4.x,
          x = _ref4$x === undefined ? 0 : _ref4$x,
          _ref4$y = _ref4.y,
          y = _ref4$y === undefined ? 0 : _ref4$y,
          width = _ref4.width,
          height = _ref4.height,
          _ref4$level = _ref4.level,
          level = _ref4$level === undefined ? 0 : _ref4$level,
          _ref4$format = _ref4.format,
          format = _ref4$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA : _ref4$format,
          type = _ref4.type,
          dataFormat = _ref4.dataFormat,
          _ref4$compressed = _ref4.compressed,
          compressed = _ref4$compressed === undefined ? false : _ref4$compressed,
          _ref4$offset = _ref4.offset,
          offset = _ref4$offset === undefined ? 0 : _ref4$offset,
          _ref4$border = _ref4.border,
          border = _ref4$border === undefined ? 0 : _ref4$border,
          _ref4$parameters = _ref4.parameters,
          parameters = _ref4$parameters === undefined ? {} : _ref4$parameters;

      // pixels variable is  for API compatibility purpose
      var _deduceParameters4 = this._deduceParameters({
        format: format, type: type, dataFormat: dataFormat, compressed: compressed, data: data, width: width, height: height });

      type = _deduceParameters4.type;
      dataFormat = _deduceParameters4.dataFormat;
      compressed = _deduceParameters4.compressed;
      width = _deduceParameters4.width;
      height = _deduceParameters4.height;
      if (!data) {
        data = pixels;
      }

      // Support ndarrays
      if (data && data.data) {
        var ndarray = data;
        data = ndarray.data;
        width = ndarray.shape[0];
        height = ndarray.shape[1];
      }

      // Support buffers
      if (data instanceof __WEBPACK_IMPORTED_MODULE_5__buffer__["a" /* default */]) {
        data = data.handle;
      }

      this.gl.bindTexture(this.target, this.handle);

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context_state__["b" /* withParameters */])(this.gl, parameters, function () {
        // TODO - x,y parameters
        if (compressed) {
          _this4.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);
        } else if (data === null) {
          _this4.gl.texSubImage2D(target, level, format, width, height, border, dataFormat, type, null);
        } else if (ArrayBuffer.isView(data)) {
          _this4.gl.texSubImage2D(target, level, x, y, width, height, format, type, data, offset);
        } else if (data instanceof __WEBPACK_IMPORTED_MODULE_1__api__["e" /* WebGLBuffer */]) {
          // WebGL2 allows us to create texture directly from a WebGL buffer
          __WEBPACK_IMPORTED_MODULE_7_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["b" /* isWebGL2 */])(_this4.gl), __WEBPACK_IMPORTED_MODULE_2__context__["e" /* ERR_WEBGL2 */]);
          // This texImage2D signature uses currently bound GL_PIXEL_UNPACK_BUFFER
          _this4.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].PIXEL_UNPACK_BUFFER, data);
          _this4.gl.texSubImage2D(target, level, format, width, height, border, format, type, offset);
          _this4.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].GL_PIXEL_UNPACK_BUFFER, null);
        } else {
          // Assume data is a browser supported object (ImageData, Canvas, ...)
          _this4.gl.texSubImage2D(target, level, x, y, format, type, data);
        }
      });

      this.gl.bindTexture(this.target, null);
    }
    /* eslint-enable max-len, max-statements, complexity */

    /**
     * Defines a two-dimensional texture image or cube-map texture image with
     * pixels from the current framebuffer (rather than from client memory).
     * (gl.copyTexImage2D wrapper)
     *
     * Note that binding a texture into a Framebuffer's color buffer and
     * rendering can be faster.
     */

  }, {
    key: 'copyFramebuffer',
    value: function copyFramebuffer(_ref5) {
      var _ref5$target = _ref5.target,
          target = _ref5$target === undefined ? this.target : _ref5$target,
          framebuffer = _ref5.framebuffer,
          _ref5$offset = _ref5.offset,
          offset = _ref5$offset === undefined ? 0 : _ref5$offset,
          _ref5$x = _ref5.x,
          x = _ref5$x === undefined ? 0 : _ref5$x,
          _ref5$y = _ref5.y,
          y = _ref5$y === undefined ? 0 : _ref5$y,
          width = _ref5.width,
          height = _ref5.height,
          _ref5$level = _ref5.level,
          level = _ref5$level === undefined ? 0 : _ref5$level,
          _ref5$internalFormat = _ref5.internalFormat,
          internalFormat = _ref5$internalFormat === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA : _ref5$internalFormat,
          _ref5$border = _ref5.border,
          border = _ref5$border === undefined ? 0 : _ref5$border;

      if (framebuffer) {
        framebuffer.bind();
      }

      // target
      this.bind();
      this.gl.copyTexImage2D(this.target, level, internalFormat, x, y, width, height, border);
      this.unbind();

      if (framebuffer) {
        framebuffer.unbind();
      }
    }
  }, {
    key: 'getActiveUnit',
    value: function getActiveUnit() {
      return this.gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].ACTIVE_TEXTURE) - __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE0;
    }

    // target cannot be modified by bind:
    // textures are special because when you first bind them to a target,
    // they get special information. When you first bind a texture as a
    // GL_TEXTURE_2D, you are actually setting special state in the texture.
    // You are saying that this texture is a 2D texture.
    // And it will always be a 2D texture; this state cannot be changed ever.
    // If you have a texture that was first bound as a GL_TEXTURE_2D,
    // you must always bind it as a GL_TEXTURE_2D;
    // attempting to bind it as GL_TEXTURE_1D will give rise to an error
    // (while run-time).

  }, {
    key: 'bind',
    value: function bind() {
      var textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;

      if (textureUnit === undefined) {
        throw new Error('Texture.bind: must specify texture unit');
      }
      this.textureUnit = textureUnit;
      this.gl.activeTexture(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE0 + textureUnit);
      this.gl.bindTexture(this.target, this.handle);
      return textureUnit;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      if (this.textureUnit === undefined) {
        throw new Error('Texture.unbind: texture unit not specified');
      }
      this.gl.activeTexture(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE0 + this.textureUnit);
      this.gl.bindTexture(this.target, null);
      return this.textureUnit;
    }

    // PRIVATE METHODS

  }, {
    key: '_getDataType',
    value: function _getDataType(_ref6) {
      var data = _ref6.data,
          _ref6$compressed = _ref6.compressed,
          compressed = _ref6$compressed === undefined ? false : _ref6$compressed;

      if (compressed) {
        return { data: data, dataType: 'compressed' };
      }
      if (data === null) {
        return { data: data, dataType: 'null' };
      }
      if (ArrayBuffer.isView(data)) {
        return { data: data, dataType: 'typed-array' };
      }
      if (data instanceof __WEBPACK_IMPORTED_MODULE_5__buffer__["a" /* default */]) {
        return { data: data.handle, dataType: 'buffer' };
      }
      if (data instanceof __WEBPACK_IMPORTED_MODULE_1__api__["e" /* WebGLBuffer */]) {
        return { data: data, dataType: 'buffer' };
      }
      // Assume data is a browser supported object (ImageData, Canvas, ...)
      return { data: data, dataType: 'browser-object' };
    }

    // Image 3D copies from Typed Array or WebGLBuffer

  }, {
    key: 'setImage3D',
    value: function setImage3D(_ref7) {
      var _ref7$level = _ref7.level,
          level = _ref7$level === undefined ? 0 : _ref7$level,
          _ref7$internalformat = _ref7.internalformat,
          internalformat = _ref7$internalformat === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA : _ref7$internalformat,
          width = _ref7.width,
          height = _ref7.height,
          _ref7$depth = _ref7.depth,
          depth = _ref7$depth === undefined ? 1 : _ref7$depth,
          _ref7$border = _ref7.border,
          border = _ref7$border === undefined ? 0 : _ref7$border,
          format = _ref7.format,
          _ref7$type = _ref7.type,
          type = _ref7$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_BYTE : _ref7$type,
          _ref7$offset = _ref7.offset,
          offset = _ref7$offset === undefined ? 0 : _ref7$offset,
          pixels = _ref7.pixels;

      if (ArrayBuffer.isView(pixels)) {
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, pixels);
        return this;
      }

      if (pixels instanceof __WEBPACK_IMPORTED_MODULE_5__buffer__["a" /* default */]) {
        this.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].PIXEL_UNPACK_BUFFER, pixels.handle);
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, offset);
      }

      return this;
    }

    /* Copied from texture-2d.js
    // WebGL2
    setPixels(opts = {}) {
      const {
        buffer,
        width = null,
        height = null,
        mipmapLevel = 0,
        format = GL.RGBA,
        type = GL.UNSIGNED_BYTE,
        border = 0
      } = opts;
       const {gl} = this;
       // This signature of texImage2D uses currently bound GL_PIXEL_UNPACK_BUFFER
      gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);
      // And as always, we must also bind the texture itself
      this.bind();
       gl.texImage2D(gl.TEXTURE_2D,
        mipmapLevel, format, width, height, border, format, type, buffer.target);
       this.unbind();
      gl.bindBuffer(GL.GL_PIXEL_UNPACK_BUFFER, null);
      return this;
    }
     setImageDataFromCompressedBuffer(opts) {
      const {
        buffer,
        // offset = 0,
        width = null,
        height = null,
        mipmapLevel = 0,
        internalFormat = GL.RGBA,
        // format = GL.RGBA,
        // type = GL.UNSIGNED_BYTE,
        border = 0
      } = opts;
       const {gl} = this;
      gl.compressedTexImage2D(this.target,
        mipmapLevel, internalFormat, width, height, border, buffer);
      // gl.compressedTexSubImage2D(target,
      //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);
      return this;
    }
     copySubImage(opts) {
      const {
        // pixels,
        // offset = 0,
        // x,
        // y,
        // width,
        // height,
        // mipmapLevel = 0,
        // internalFormat = GL.RGBA,
        // type = GL.UNSIGNED_BYTE,
        // border = 0
      } = opts;
       // if (pixels instanceof ArrayBufferView) {
      //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);
      // }
      // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);
      // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);
      // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);
      // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);
      // // Additional signature in a WebGL 2 context:
      // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);
    }
    */

    // HELPER METHODS

  }, {
    key: '_deduceParameters',
    value: function _deduceParameters(opts) {
      var format = opts.format,
          data = opts.data;
      var width = opts.width,
          height = opts.height,
          dataFormat = opts.dataFormat,
          type = opts.type,
          compressed = opts.compressed;

      // Deduce format and type from format

      var textureFormat = TEXTURE_FORMATS[format];
      dataFormat = dataFormat || textureFormat && textureFormat.dataFormat;
      type = type || textureFormat && textureFormat.types[0];

      // Deduce compression from format
      compressed = compressed || textureFormat && textureFormat.compressed;

      var _deduceImageSize2 = this._deduceImageSize({ data: data, width: width, height: height });

      width = _deduceImageSize2.width;
      height = _deduceImageSize2.height;


      return { dataFormat: dataFormat, type: type, compressed: compressed, width: width, height: height, format: format, data: data };
    }

    // Convert and append any v3 style parameters

  }, {
    key: '_applyV3Options',
    value: function _applyV3Options(parameters, opts) {
      var v4Parameters = Object.assign({}, parameters);

      if ('magFilter' in opts) {
        v4Parameters[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_MAG_FILTER] = opts.magFilter;
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('magFilter', 'TEXTURE_MAG_FILTER');
      }
      if ('minFilter' in opts) {
        v4Parameters[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_MIN_FILTER] = opts.minFilter;
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('minFilter', 'TEXTURE_MIN_FILTER');
      }
      if ('wrapS' in opts) {
        v4Parameters[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WRAP_S] = opts.wrapS;
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('wrapS', 'TEXTURE_WRAP_S');
      }
      if ('wrapT' in opts) {
        v4Parameters[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WRAP_T] = opts.wrapT;
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].deprecated('wrapT', 'TEXTURE_WRAP_T');
      }

      return v4Parameters;
    }

    /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement */

  }, {
    key: '_deduceImageSize',
    value: function _deduceImageSize(_ref8) {
      var data = _ref8.data,
          width = _ref8.width,
          height = _ref8.height;

      var size = void 0;

      if (typeof ImageData !== 'undefined' && data instanceof ImageData) {
        size = { width: data.width, height: data.height };
      } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {
        size = { width: data.naturalWidth, height: data.naturalHeight };
      } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {
        size = { width: data.width, height: data.height };
      } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {
        size = { width: data.videoWidth, height: data.videoHeight };
      } else if (!data) {
        size = { width: width >= 0 ? width : 1, height: height >= 0 ? height : 1 };
      } else {
        size = { width: width, height: height };
      }

      __WEBPACK_IMPORTED_MODULE_7_assert___default()(size, 'Could not deduced texture size');
      __WEBPACK_IMPORTED_MODULE_7_assert___default()(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');
      __WEBPACK_IMPORTED_MODULE_7_assert___default()(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');

      return size;
    }

    // RESOURCE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createTexture();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteTexture(this.handle);
    }
  }, {
    key: '_getParameter',
    value: function _getParameter(pname) {
      switch (pname) {
        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WIDTH:
          return this.width;
        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_HEIGHT:
          return this.height;
        default:
          this.gl.bindTexture(this.target, this.handle);
          var value = this.gl.getTexParameter(this.target, pname);
          this.gl.bindTexture(this.target, null);
          return value;
      }
    }
  }, {
    key: '_setParameter',
    value: function _setParameter(pname, param) {
      this.gl.bindTexture(this.target, this.handle);

      // NOTE: Apply NPOT workaround
      param = this._getNPOTParam(pname, param);

      // Apparently there are some integer/float conversion rules that made
      // the WebGL committe expose two parameter setting functions in JavaScript.
      // For now, pick the float version for parameters specified as GLfloat.
      switch (pname) {
        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_MIN_LOD:
        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_MAX_LOD:
          this.gl.texParameterf(this.handle, pname, param);
          break;

        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WIDTH:
        case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_HEIGHT:
          throw new Error('Cannot set emulated parameter');

        default:
          this.gl.texParameteri(this.target, pname, param);
          break;
      }

      this.gl.bindTexture(this.target, null);
      return this;
    }
  }, {
    key: '_isNPOT',
    value: function _isNPOT() {
      return !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["b" /* isWebGL2 */])(this.gl) && (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils__["isPowerOfTwo"])(this.width) || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils__["isPowerOfTwo"])(this.height));
    }

    // Update default settings which are not supported by NPOT textures.

  }, {
    key: '_updateForNPOT',
    value: function _updateForNPOT(parameters) {
      if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR');
        parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;
      }
      if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE');
        parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;
      }
      if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {
        __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE');
        parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;
      }
    }
  }, {
    key: '_getNPOTParam',
    value: function _getNPOTParam(pname, param) {
      if (this._isNPOT()) {
        switch (pname) {
          case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_MIN_FILTER:
            if (NPOT_MIN_FILTERS.indexOf(param) === -1) {
              __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR');
              param = __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINEAR;
            }
            break;
          case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WRAP_S:
          case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TEXTURE_WRAP_T:
            if (param !== __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].CLAMP_TO_EDGE) {
              __WEBPACK_IMPORTED_MODULE_6__utils__["log"].warn(0, 'texture: ' + this + ' is Non-Power-Of-Two, ' + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["b" /* glKey */])(pname) + ' to CLAMP_TO_EDGE');
              param = __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].CLAMP_TO_EDGE;
            }
            break;
          default:
            break;
        }
      }
      return param;
    }
  }]);

  return Texture;
}(__WEBPACK_IMPORTED_MODULE_4__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Texture);
//# sourceMappingURL=texture.js.map

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_vector2__ = __webpack_require__(35);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Vector2", function() { return __WEBPACK_IMPORTED_MODULE_0__src_vector2__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_vector3__ = __webpack_require__(36);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Vector3", function() { return __WEBPACK_IMPORTED_MODULE_1__src_vector3__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_vector4__ = __webpack_require__(37);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Vector4", function() { return __WEBPACK_IMPORTED_MODULE_2__src_vector4__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_matrix4__ = __webpack_require__(83);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix4", function() { return __WEBPACK_IMPORTED_MODULE_3__src_matrix4__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_quaternion__ = __webpack_require__(84);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Quaternion", function() { return __WEBPACK_IMPORTED_MODULE_4__src_quaternion__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_common__ = __webpack_require__(8);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "config", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "checkNumber", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "formatValue", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["f"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["g"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "radians", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "degrees", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["h"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "sin", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["i"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "cos", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["j"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "tan", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["k"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "asin", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["l"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "acos", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["m"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "atan", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["n"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["o"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return __WEBPACK_IMPORTED_MODULE_5__src_common__["p"]; });





// export {default as Euler} from './src/euler';


//# sourceMappingURL=index.js.map

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export LUMA_SETTERS */
/* harmony export (immutable) */ __webpack_exports__["a"] = setParameters;
/* harmony export (immutable) */ __webpack_exports__["b"] = withParameters;
/* unused harmony export withState */
/* unused harmony export glContextWithState */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils_track_context_state__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_assert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__webgl_utils_set_parameters__ = __webpack_require__(17);
/* unused harmony reexport getParameter */
/* unused harmony reexport getParameters */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_5__webgl_utils_set_parameters__["d"]; });
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/* eslint-disable no-inline-comments, max-len */






// map of parameter setter function names, parameter constants, default values and types
// - Uses gl function names, except when setter function exist that are named differently
// - When the WebGL api offers <setter> and <setter>Separate (e.g. blendEquation and
//   blendEquationSeparate, we use non-separate name, but accept both non-separate and
//   separate arguments. Thus, a `getParameter` call will always return all the separate values
//   in an array, in a form that can be accepted by the setter.
var LUMA_SETTERS = {
  bindFramebuffer: function bindFramebuffer(gl, args) {
    __WEBPACK_IMPORTED_MODULE_4_assert___default()(args.length === 2, 'bindFramebuffer needs two arguments, target and handle');

    var _args = _slicedToArray(args, 2),
        target = _args[0],
        handle = _args[1];

    if (target === __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER) {
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context__["b" /* isWebGL2 */])(gl)) {
        // NOTE: https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_framebuffer_blit.txt
        // As per above spec, under WebGL2, FRAMEBUFFER binding updates both READ_FRAMEBUFFER and DRAW_FRAMEBUFFER
        // This generates two bindFramebuffer calls so that our cache is correct
        gl.bindFramebuffer(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DRAW_FRAMEBUFFER, handle);
        gl.bindFramebuffer(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].READ_FRAMEBUFFER, handle);
      } else {
        gl.bindFramebuffer(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER, handle);
      }
    } else {
      // handle GL.DRAW_FRAMEBUFFER and GL.READ_FRAMEBUFFER
      gl.bindFramebuffer(target, handle);
    }
  },
  blend: function blend(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BLEND) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BLEND);
  },
  blendColor: function blendColor(gl, value) {
    return gl.blendColor.apply(gl, _toConsumableArray(value));
  },
  blendEquation: function blendEquation(gl, args) {
    args = isArray(args) ? args : [args, args];
    gl.blendEquationSeparate.apply(gl, _toConsumableArray(args));
  },
  blendFunc: function blendFunc(gl, args) {
    args = isArray(args) && args.length === 2 ? [].concat(_toConsumableArray(args), _toConsumableArray(args)) : args;
    gl.blendFuncSeparate.apply(gl, _toConsumableArray(args));
  },

  clearColor: function clearColor(gl, value) {
    return gl.clearColor.apply(gl, _toConsumableArray(value));
  },
  clearDepth: function clearDepth(gl, value) {
    return gl.clearDepth(value);
  },
  clearStencil: function clearStencil(gl, value) {
    return gl.clearStencil(value);
  },

  colorMask: function colorMask(gl, value) {
    return gl.colorMask.apply(gl, _toConsumableArray(value));
  },

  cull: function cull(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].CULL_FACE) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].CULL_FACE);
  },
  cullFace: function cullFace(gl, value) {
    return gl.cullFace(value);
  },

  depthTest: function depthTest(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DEPTH_TEST) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DEPTH_TEST);
  },
  depthFunc: function depthFunc(gl, value) {
    return gl.depthFunc(value);
  },
  depthMask: function depthMask(gl, value) {
    return gl.depthMask(value);
  },
  depthRange: function depthRange(gl, value) {
    return gl.depthRange.apply(gl, _toConsumableArray(value));
  },

  dither: function dither(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DITHER) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DITHER);
  },

  derivativeHint: function derivativeHint(gl, value) {
    // gl1: 'OES_standard_derivatives'
    gl.hint(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAGMENT_SHADER_DERIVATIVE_HINT, value);
  },

  frontFace: function frontFace(gl, value) {
    return gl.frontFace(value);
  },

  mipmapHint: function mipmapHint(gl, value) {
    return gl.hint(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].GENERATE_MIPMAP_HINT, value);
  },

  lineWidth: function lineWidth(gl, value) {
    return gl.lineWidth(value);
  },

  polygonOffsetFill: function polygonOffsetFill(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].POLYGON_OFFSET_FILL) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].POLYGON_OFFSET_FILL);
  },
  polygonOffset: function polygonOffset(gl, value) {
    return gl.polygonOffset.apply(gl, _toConsumableArray(value));
  },

  sampleCoverage: function sampleCoverage(gl, value) {
    return gl.sampleCoverage.apply(gl, _toConsumableArray(value));
  },

  scissorTest: function scissorTest(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].SCISSOR_TEST) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].SCISSOR_TEST);
  },
  scissor: function scissor(gl, value) {
    return gl.scissor.apply(gl, _toConsumableArray(value));
  },

  stencilTest: function stencilTest(gl, value) {
    return value ? gl.enable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].STENCIL_TEST) : gl.disable(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].STENCIL_TEST);
  },
  stencilMask: function stencilMask(gl, value) {
    value = isArray(value) ? value : [value, value];

    var _value = value,
        _value2 = _slicedToArray(_value, 2),
        mask = _value2[0],
        backMask = _value2[1];

    gl.stencilMaskSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRONT, mask);
    gl.stencilMaskSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BACK, backMask);
  },
  stencilFunc: function stencilFunc(gl, args) {
    args = isArray(args) && args.length === 3 ? [].concat(_toConsumableArray(args), _toConsumableArray(args)) : args;

    var _args2 = args,
        _args3 = _slicedToArray(_args2, 6),
        func = _args3[0],
        ref = _args3[1],
        mask = _args3[2],
        backFunc = _args3[3],
        backRef = _args3[4],
        backMask = _args3[5];

    gl.stencilFuncSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRONT, func, ref, mask);
    gl.stencilFuncSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BACK, backFunc, backRef, backMask);
  },
  stencilOp: function stencilOp(gl, args) {
    args = isArray(args) && args.length === 3 ? [].concat(_toConsumableArray(args), _toConsumableArray(args)) : args;

    var _args4 = args,
        _args5 = _slicedToArray(_args4, 6),
        sfail = _args5[0],
        dpfail = _args5[1],
        dppass = _args5[2],
        backSfail = _args5[3],
        backDpfail = _args5[4],
        backDppass = _args5[5];

    gl.stencilOpSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRONT, sfail, dpfail, dppass);
    gl.stencilOpSeparate(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BACK, backSfail, backDpfail, backDppass);
  },

  viewport: function viewport(gl, value) {
    return gl.viewport.apply(gl, _toConsumableArray(value));
  }
};

// HELPERS

function isArray(array) {
  return Array.isArray(array) || ArrayBuffer.isView(array);
}

// GETTERS AND SETTERS

// Get the parameter value(s) from the context


// Get the parameters from the context


// Resets gl state to default values.


// Get the parameter value(s) from the context


// Set the parameter value(s) by key to the context
// Sets value with key to context.
// Value may be "normalized" (in case a short form is supported). In that case
// the normalized value is retured.
function setParameters(gl, parameters) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__webgl_utils_set_parameters__["a" /* setParameters */])(gl, parameters);
  for (var key in parameters) {
    var setter = LUMA_SETTERS[key];
    if (setter) {
      setter(gl, parameters[key], key);
    }
  }
}

// VERY LIMITED / BASIC GL STATE MANAGEMENT
// Executes a function with gl states temporarily set, exception safe
// Currently support pixelStorage, scissor test and framebuffer binding
function withParameters(gl, parameters, func) {
  // assertWebGLContext(gl);

  var frameBuffer = parameters.frameBuffer,
      _parameters$nocatch = parameters.nocatch,
      nocatch = _parameters$nocatch === undefined ? true : _parameters$nocatch;
  var framebuffer = parameters.framebuffer;

  if (frameBuffer) {
    __WEBPACK_IMPORTED_MODULE_2__utils__["log"].deprecated('withParameters({frameBuffer})', 'withParameters({framebuffer})');
    framebuffer = frameBuffer;
  }

  // Define a helper function that will reset state after the function call
  function resetStateAfterCall() {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_track_context_state__["b" /* popContextState */])(gl);
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_track_context_state__["c" /* pushContextState */])(gl);

  setParameters(gl, parameters);

  if (framebuffer) {
    framebuffer.bind();
  }

  // Setup is done, call the function
  var value = void 0;

  if (nocatch) {
    // Avoid try catch to minimize debugging impact for safe execution paths
    value = func(gl);
    resetStateAfterCall();
  } else {
    // Wrap in a try-catch to ensure that parameters are restored on exceptions
    try {
      value = func(gl);
    } finally {
      resetStateAfterCall();
    }
  }
  return value;
}

// DEPRECATED

function withState() {
  __WEBPACK_IMPORTED_MODULE_2__utils__["log"].deprecated('withState', 'withParameters');
  return withParameters.apply(undefined, arguments);
}

function glContextWithState() {
  __WEBPACK_IMPORTED_MODULE_2__utils__["log"].deprecated('glContextWithState', 'withParameters');
  return withParameters.apply(undefined, arguments);
}
//# sourceMappingURL=context-state.js.map

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(8);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _extendableBuiltin(cls) {
  function ExtendableBuiltin() {
    var instance = Reflect.construct(cls, Array.from(arguments));
    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    return instance;
  }

  ExtendableBuiltin.prototype = Object.create(cls.prototype, {
    constructor: {
      value: cls,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ExtendableBuiltin, cls);
  } else {
    ExtendableBuiltin.__proto__ = cls;
  }

  return ExtendableBuiltin;
}



var MathArray = function (_extendableBuiltin2) {
  _inherits(MathArray, _extendableBuiltin2);

  function MathArray() {
    _classCallCheck(this, MathArray);

    return _possibleConstructorReturn(this, (MathArray.__proto__ || Object.getPrototypeOf(MathArray)).apply(this, arguments));
  }

  _createClass(MathArray, [{
    key: 'clone',
    value: function clone() {
      var Subclass = this.constructor;
      var clone = new Subclass().copy(this);
      clone.check();
      return clone;
    }
  }, {
    key: 'copy',
    value: function copy(array) {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = array[i];
      }
      this.check();
      return this;
    }
  }, {
    key: 'set',
    value: function set() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = args[i] || 0;
      }
      this.check();
      return this;
    }
  }, {
    key: 'fromArray',
    value: function fromArray(array) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = array[i + offset];
      }
      this.check();
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      var string = '';
      for (var i = 0; i < this.ELEMENTS; ++i) {
        string += (i > 0 ? ', ' : '') + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__common__["e" /* formatValue */])(this[i]);
      }
      return this.constructor.name + '(' + string + ')';
    }
  }, {
    key: 'toArray',
    value: function toArray() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      for (var i = 0; i < this.ELEMENTS; ++i) {
        array[offset + i] = this[i];
      }
      return array;
    }
  }, {
    key: 'toFloat32Array',
    value: function toFloat32Array() {
      return new Float32Array(this);
    }
  }, {
    key: 'equals',
    value: function equals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (var i = 0; i < this.ELEMENTS; ++i) {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__common__["p" /* equals */])(this[i], array[i])) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'exactEquals',
    value: function exactEquals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }
      for (var i = 0; i < this.ELEMENTS; ++i) {
        if (this[i] !== array[i]) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'validate',
    value: function validate() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;

      var valid = array && array.length === this.ELEMENTS;
      for (var i = 0; i < this.ELEMENTS; ++i) {
        valid = valid && Number.isFinite(array[i]);
      }
      return valid;
    }
  }, {
    key: 'check',
    value: function check() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;

      if (__WEBPACK_IMPORTED_MODULE_0__common__["b" /* config */].debug && !this.validate(array)) {
        throw new Error('Invalid ' + this.constructor.name);
      }
    }
  }, {
    key: 'normalize',
    value: function normalize() {
      var length = this.len();
      if (length !== 0) {
        for (var i = 0; i < this.ELEMENTS; ++i) {
          this[i] /= length;
        }
      }
      this.check();
      return this;
    }
  }]);

  return MathArray;
}(_extendableBuiltin(Array));

/* harmony default export */ __webpack_exports__["a"] = (MathArray);
//# sourceMappingURL=math-array.js.map

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return GL_PARAMETER_DEFAULTS; });
/* unused harmony export GL_PARAMETER_SETTERS */
/* unused harmony export GL_PARAMETER_GETTERS */
/* harmony export (immutable) */ __webpack_exports__["a"] = setParameters;
/* unused harmony export getParameter */
/* harmony export (immutable) */ __webpack_exports__["b"] = getParameters;
/* unused harmony export getDefaultParameters */
/* harmony export (immutable) */ __webpack_exports__["d"] = resetParameters;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(9);
var _GL_PARAMETER_DEFAULT, _GL_PARAMETER_SETTERS, _GL_PARAMETER_GETTERS;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Provides a unified API for getting and setting any WebGL parameter
// Also knows default values of all parameters, enabling fast cache initialization
// Provides base functionality for the state caching.


// DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS

var GL_PARAMETER_DEFAULTS = (_GL_PARAMETER_DEFAULT = {}, _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_COLOR, new Float32Array([0, 0, 0, 0])), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_RGB, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FUNC_ADD), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_ALPHA, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FUNC_ADD), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_RGB, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ONE), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_RGB, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ZERO), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_ALPHA, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ONE), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_ALPHA, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ZERO), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_CLEAR_VALUE, new Float32Array([0, 0, 0, 0])), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_WRITEMASK, [true, true, true, true]), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE_MODE, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BACK), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_TEST, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_CLEAR_VALUE, 1), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_FUNC, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].LESS), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_RANGE, new Float32Array([0, 1])), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_WRITEMASK, true), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DITHER, true), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRAMEBUFFER_BINDING, null), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT_FACE, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CCW), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].GENERATE_MIPMAP_HINT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DONT_CARE), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].LINE_WIDTH, 1), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FILL, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FACTOR, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_UNITS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_VALUE, 1.0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_INVERT, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_TEST, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_BOX, new Int32Array([0, 0, 1024, 1024])), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_TEST, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_CLEAR_VALUE, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_WRITEMASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_WRITEMASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FUNC, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ALWAYS), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_REF, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_VALUE_MASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FUNC, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].ALWAYS), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_REF, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_VALUE_MASK, 0xFFFFFFFF), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FAIL, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_FAIL, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_PASS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FAIL, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_FAIL, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_PASS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].KEEP), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].VIEWPORT, new Int32Array([0, 0, 1024, 1024])), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_ALIGNMENT, 4), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_ALIGNMENT, 4), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_FLIP_Y_WEBGL, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_PREMULTIPLY_ALPHA_WEBGL, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_COLORSPACE_CONVERSION_WEBGL, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BROWSER_DEFAULT_WEBGL), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRAGMENT_SHADER_DERIVATIVE_HINT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DONT_CARE), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].READ_FRAMEBUFFER_BINDING, null), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].RASTERIZER_DISCARD, false), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_ROW_LENGTH, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_SKIP_PIXELS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_SKIP_ROWS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_ROW_LENGTH, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_IMAGE_HEIGHT, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_PIXELS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_ROWS, 0), _defineProperty(_GL_PARAMETER_DEFAULT, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_IMAGES, 0), _GL_PARAMETER_DEFAULT);

// SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API

var enable = function enable(gl, value, key) {
  return value ? gl.enable(key) : gl.disable(key);
};
var hint = function hint(gl, value, key) {
  return gl.hint(key, value);
};
var pixelStorei = function pixelStorei(gl, value, key) {
  return gl.pixelStorei(key, value);
};

// NOTE: When value type is a string, it will be handled by 'GL_PARAMETER_COMPOSITE_SETTERS'

var GL_PARAMETER_SETTERS = (_GL_PARAMETER_SETTERS = {}, _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_COLOR, function (gl, value) {
  return gl.blendColor.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_RGB, 'blendEquation'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_ALPHA, 'blendEquation'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_RGB, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_RGB, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_ALPHA, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_ALPHA, 'blendFunc'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_CLEAR_VALUE, function (gl, value) {
  return gl.clearColor.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_WRITEMASK, function (gl, value) {
  return gl.colorMask.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE_MODE, function (gl, value) {
  return gl.cullFace(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_TEST, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_CLEAR_VALUE, function (gl, value) {
  return gl.clearDepth(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_FUNC, function (gl, value) {
  return gl.depthFunc(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_RANGE, function (gl, value) {
  return gl.depthRange.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_WRITEMASK, function (gl, value) {
  return gl.depthMask(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DITHER, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRAGMENT_SHADER_DERIVATIVE_HINT, hint), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRAMEBUFFER_BINDING, function (gl, value) {
  return gl.bindFramebuffer(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRAMEBUFFER, value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT_FACE, function (gl, value) {
  return gl.frontFace(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].GENERATE_MIPMAP_HINT, hint), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].LINE_WIDTH, function (gl, value) {
  return gl.lineWidth(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FILL, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FACTOR, 'polygonOffset'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_UNITS, 'polygonOffset'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].RASTERIZER_DISCARD, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_VALUE, 'sampleCoverage'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_INVERT, 'sampleCoverage'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_TEST, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_BOX, function (gl, value) {
  return gl.scissor.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_TEST, enable), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_CLEAR_VALUE, function (gl, value) {
  return gl.clearStencil(value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_WRITEMASK, function (gl, value) {
  return gl.stencilMaskSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT, value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_WRITEMASK, function (gl, value) {
  return gl.stencilMaskSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BACK, value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FUNC, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_REF, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_VALUE_MASK, 'stencilFuncFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FUNC, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_REF, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_VALUE_MASK, 'stencilFuncBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FAIL, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_FAIL, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_PASS, 'stencilOpFront'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FAIL, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_FAIL, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_PASS, 'stencilOpBack'), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].VIEWPORT, function (gl, value) {
  return gl.viewport.apply(gl, _toConsumableArray(value));
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_ALIGNMENT, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_ALIGNMENT, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_FLIP_Y_WEBGL, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_PREMULTIPLY_ALPHA_WEBGL, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_COLORSPACE_CONVERSION_WEBGL, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_ROW_LENGTH, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_SKIP_PIXELS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].PACK_SKIP_ROWS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].READ_FRAMEBUFFER_BINDING, function (gl, value) {
  return gl.bindFramebuffer(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].READ_FRAMEBUFFER, value);
}), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_ROW_LENGTH, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_IMAGE_HEIGHT, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_PIXELS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_ROWS, pixelStorei), _defineProperty(_GL_PARAMETER_SETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNPACK_SKIP_IMAGES, pixelStorei), _GL_PARAMETER_SETTERS);

var GL_PARAMETER_COMPOSITE_SETTERS = {
  blendEquation: function blendEquation(gl, values) {
    return gl.blendEquationSeparate(values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_RGB], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_ALPHA]);
  },
  blendFunc: function blendFunc(gl, values) {
    return gl.blendFuncSeparate(values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_RGB], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_RGB], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_ALPHA], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_ALPHA]);
  },
  polygonOffset: function polygonOffset(gl, values) {
    return gl.polygonOffset(values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FACTOR], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_UNITS]);
  },
  sampleCoverage: function sampleCoverage(gl, values) {
    return gl.sampleCoverage(values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_VALUE], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_INVERT]);
  },
  stencilFuncFront: function stencilFuncFront(gl, values) {
    return gl.stencilFuncSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT, values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FUNC], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_REF], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_VALUE_MASK]);
  },
  stencilFuncBack: function stencilFuncBack(gl, values) {
    return gl.stencilFuncSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BACK, values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FUNC], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_REF], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_VALUE_MASK]);
  },
  stencilOpFront: function stencilOpFront(gl, values) {
    return gl.stencilOpSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT, values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FAIL], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_FAIL], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_PASS]);
  },
  stencilOpBack: function stencilOpBack(gl, values) {
    return gl.stencilOpSeparate(__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BACK, values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FAIL], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_FAIL], values[__WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_PASS]);
  }
};

// GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT

var isEnabled = function isEnabled(gl, key) {
  return gl.isEnabled(key);
};

// Exceptions for any keys that cannot be queried by gl.getParameters
var GL_PARAMETER_GETTERS = (_GL_PARAMETER_GETTERS = {}, _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_TEST, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DITHER, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FILL, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_ALPHA_TO_COVERAGE, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_TEST, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_TEST, isEnabled), _defineProperty(_GL_PARAMETER_GETTERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].RASTERIZER_DISCARD, isEnabled), _GL_PARAMETER_GETTERS);

// PUBLIC METHODS

// Sets any GL parameter regardless of function (gl.blendMode, ...)
// Note: requires a `cache` object to be set on the context (gl.state.cache)
// This object is used to fill in any missing values for composite setter functions
function setParameters(gl, values) {
  var compositeSetters = {};

  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)

  for (var key in values) {
    var setter = GL_PARAMETER_SETTERS[key];
    if (setter) {
      // Composite setters should only be called once, so save them
      if (typeof setter === 'string') {
        compositeSetters[setter] = true;
        // only call setter if value has changed
        // TODO - deep equal on values?
      } else {
        // Note - the setter will automatically update this.state
        setter(gl, values[key], Number(key));
      }
    }
  }

  // HANDLE COMPOSITE SETTERS

  // NOTE: any non-provided values needed by composite setters are filled in from state cache
  // The cache parameter is automatically retrieved from the context
  // This depends on `trackContextState`, which is technically a "circular" dependency.
  // But it is too inconvenient to always require a cache parameter here.
  // This is the ONLY external dependency in this module/
  var cache = gl.state && gl.state.cache;
  if (cache) {
    var mergedValues = Object.assign({}, cache, values);

    for (var _key in compositeSetters) {
      // TODO - avoid calling composite setters if values have not changed.
      var compositeSetter = GL_PARAMETER_COMPOSITE_SETTERS[_key];
      // Note - if `trackContextState` has been called,
      // the setter will automatically update this.state.cache
      compositeSetter(gl, mergedValues);
    }
  }
  // Add a log for the else case?
}

// Queries any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)
function getParameter(gl, key) {
  var getter = GL_PARAMETER_GETTERS[key];
  return getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));
}

// Copies the state from a context (gl.getParameter should not be overriden)
// Reads the entire WebGL state from a context
// Caveat: This generates a huge amount of synchronous driver roundtrips and should be
// considered a very slow operation, to be used only if/when a context already manipulated
// by external code needs to be synchronized for the first time
// @return {Object} - a newly created map, with values keyed by GL parameters
function getParameters(gl, parameters) {
  // default to querying all parameters
  parameters = parameters || GL_PARAMETER_DEFAULTS;
  // support both arrays of parameters and objects (keys represent parameters)
  var parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);

  var state = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = parameterKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      state[key] = getParameter(gl, key);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return state;
}

function getDefaultParameters(gl) {
  // TODO - Query GL.VIEWPORT and GL.SCISSOR_BOX since these are dynamic
  return Object.assign({}, GL_PARAMETER_DEFAULTS, {
    // TODO: For viewport and scissor default values are set at the time of
    // context creation based on canvas size, we can query them here but it will
    // not match with what we have in GL_PARAMETER_DEFAULTS table, we should revisit.
    // [GL.VIEWPORT]: gl.constructor.prototype.getParameter.call(gl, GL.VIEWPORT),
    // [GL.SCISSOR_BOX]: gl.constructor.prototype.getParameter.call(gl, GL.SCISSOR_BOX)
  });
}

function resetParameters(gl) {
  setParameters(gl, getDefaultParameters(gl));
}
//# sourceMappingURL=set-parameters.js.map

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export BufferLayout */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_typed_array_utils__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }







var ERR_BUFFER_PARAMS = 'Illegal or missing parameter to Buffer';

var GL_COPY_READ_BUFFER = 0x8F36;
var GL_COPY_WRITE_BUFFER = 0x8F37;
var GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;

var BufferLayout = /*#__PURE__*/
/**
 * @classdesc
 * Store characteristics of a data layout
 * This data can be used when updating vertex attributes with
 * the associated buffer, freeing the application from keeping
 * track of this metadata.
 *
 * @class
 * @param {GLuint} size - number of values per element (1-4)
 * @param {GLuint} type - type of values (e.g. gl.FLOAT)
 * @param {GLbool} normalized=false - normalize integers to [-1,1] or [0,1]
 * @param {GLuint} integer=false - WebGL2 only, int-to-float conversion
 * @param {GLuint} stride=0 - supports strided arrays
 * @param {GLuint} offset=0 - supports strided arrays
 */
function BufferLayout() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      type = _ref.type,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 1 : _ref$size,
      _ref$offset = _ref.offset,
      offset = _ref$offset === undefined ? 0 : _ref$offset,
      _ref$stride = _ref.stride,
      stride = _ref$stride === undefined ? 0 : _ref$stride,
      _ref$normalized = _ref.normalized,
      normalized = _ref$normalized === undefined ? false : _ref$normalized,
      _ref$integer = _ref.integer,
      integer = _ref$integer === undefined ? false : _ref$integer,
      _ref$instanced = _ref.instanced,
      instanced = _ref$instanced === undefined ? 0 : _ref$instanced;

  _classCallCheck(this, BufferLayout);

  this.type = type;
  this.size = size;
  this.offset = offset;
  this.stride = stride;
  this.normalized = normalized;
  this.integer = integer;
  this.instanced = instanced;
};

var Buffer = /*#__PURE__*/function (_Resource) {
  _inherits(Buffer, _Resource);

  function Buffer(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Buffer);

    // In WebGL1, we need to make sure we use GL.ELEMENT_ARRAY_BUFFER when
    // initializing element buffers, otherwise the buffer type will be locked
    // to a generic (non-element) buffer.
    // In WebGL2, we can use GL_COPY_READ_BUFFER which avoids locking the type here
    var _this = _possibleConstructorReturn(this, (Buffer.__proto__ || Object.getPrototypeOf(Buffer)).call(this, gl, opts));

    _this.target = opts.target || (_this.gl.webgl2 ? GL_COPY_READ_BUFFER : __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ARRAY_BUFFER);
    _this.index = null;
    _this.setData(opts);
    Object.seal(_this);
    return _this;
  }

  // Stores the layout of data with the buffer, makes it easy to e.g. set it as an attribute later


  _createClass(Buffer, [{
    key: 'setDataLayout',
    value: function setDataLayout(_ref2) {
      var layout = _ref2.layout,
          type = _ref2.type,
          _ref2$size = _ref2.size,
          size = _ref2$size === undefined ? 1 : _ref2$size,
          _ref2$offset = _ref2.offset,
          offset = _ref2$offset === undefined ? 0 : _ref2$offset,
          _ref2$stride = _ref2.stride,
          stride = _ref2$stride === undefined ? 0 : _ref2$stride,
          _ref2$normalized = _ref2.normalized,
          normalized = _ref2$normalized === undefined ? false : _ref2$normalized,
          _ref2$integer = _ref2.integer,
          integer = _ref2$integer === undefined ? false : _ref2$integer,
          _ref2$instanced = _ref2.instanced,
          instanced = _ref2$instanced === undefined ? 0 : _ref2$instanced;

      this.layout = layout || new BufferLayout({
        type: type || this.type, // Use autodeduced type if available
        size: size,
        offset: offset,
        stride: stride,
        normalized: normalized,
        integer: integer,
        instanced: instanced
      });
      return this;
    }

    // Creates and initializes the buffer object's data store.

  }, {
    key: 'initialize',
    value: function initialize() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          data = _ref3.data,
          bytes = _ref3.bytes,
          _ref3$usage = _ref3.usage,
          usage = _ref3$usage === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].STATIC_DRAW : _ref3$usage,
          layout = _ref3.layout,
          type = _ref3.type,
          _ref3$size = _ref3.size,
          size = _ref3$size === undefined ? 1 : _ref3$size,
          _ref3$offset = _ref3.offset,
          offset = _ref3$offset === undefined ? 0 : _ref3$offset,
          _ref3$stride = _ref3.stride,
          stride = _ref3$stride === undefined ? 0 : _ref3$stride,
          _ref3$normalized = _ref3.normalized,
          normalized = _ref3$normalized === undefined ? false : _ref3$normalized,
          _ref3$integer = _ref3.integer,
          integer = _ref3$integer === undefined ? false : _ref3$integer,
          _ref3$instanced = _ref3.instanced,
          instanced = _ref3$instanced === undefined ? 0 : _ref3$instanced;

      var opts = arguments[0];

      if (!data) {
        type = type || __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FLOAT;

        // Workaround needed for Safari (#291):
        // gl.bufferData with size (second argument) equal to 0 crashes.
        // hence create zero sized array.
        if (!bytes || bytes === 0) {
          bytes = 0;
          data = new Float32Array(0);
        }
      } else {
        type = type || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_typed_array_utils__["b" /* getGLTypeFromTypedArray */])(data);
        bytes = data.byteLength;
        __WEBPACK_IMPORTED_MODULE_4_assert___default()(type, ERR_BUFFER_PARAMS);
      }

      this.bytes = bytes;
      this.bytesUsed = bytes;
      this.data = data;
      this.type = type;
      this.usage = usage;

      // Call after type is set
      this.setDataLayout(Object.assign(opts));

      // Create the buffer - binding it here for the first time locks the type
      // In WebGL2, use GL_COPY_WRITE_BUFFER to avoid locking the type
      var target = this.gl.webgl2 ? GL_COPY_WRITE_BUFFER : this.target;
      this.gl.bindBuffer(target, this.handle);
      this.gl.bufferData(target, data || bytes, usage);
      this.gl.bindBuffer(target, null);

      return this;
    }

    // DEPRECATED - Can we change to call `subData`?

  }, {
    key: 'setData',
    value: function setData(options) {
      return this.initialize(options);
    }

    // Updates a subset of a buffer object's data store.

  }, {
    key: 'subData',
    value: function subData() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          data = _ref4.data,
          _ref4$offset = _ref4.offset,
          offset = _ref4$offset === undefined ? 0 : _ref4$offset,
          _ref4$srcOffset = _ref4.srcOffset,
          srcOffset = _ref4$srcOffset === undefined ? 0 : _ref4$srcOffset,
          length = _ref4.length;

      __WEBPACK_IMPORTED_MODULE_4_assert___default()(data, ERR_BUFFER_PARAMS);

      // Create the buffer - binding it here for the first time locks the type
      // In WebGL2, use GL_COPY_WRITE_BUFFER to avoid locking the type
      var target = this.gl.webgl2 ? GL_COPY_WRITE_BUFFER : this.target;
      this.gl.bindBuffer(target, this.handle);
      // WebGL2: subData supports additional srcOffset and length parameters
      if (srcOffset !== 0 || length !== undefined) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);
        this.gl.bufferSubData(this.target, offset, data, srcOffset, length || 0);
      } else {
        this.gl.bufferSubData(target, offset, data);
      }
      this.gl.bindBuffer(target, null);
      return this;
    }

    // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer

  }, {
    key: 'copyData',
    value: function copyData(_ref5) {
      var sourceBuffer = _ref5.sourceBuffer,
          _ref5$readOffset = _ref5.readOffset,
          readOffset = _ref5$readOffset === undefined ? 0 : _ref5$readOffset,
          _ref5$writeOffset = _ref5.writeOffset,
          writeOffset = _ref5$writeOffset === undefined ? 0 : _ref5$writeOffset,
          size = _ref5.size;

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);

      // Use GL_COPY_READ_BUFFER+GL_COPY_WRITE_BUFFER avoid disturbing other targets and locking type
      this.gl.bindBuffer(GL_COPY_READ_BUFFER, sourceBuffer.handle);
      this.gl.bindBuffer(GL_COPY_WRITE_BUFFER, this.handle);

      this.gl.copyBufferSubData(GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, readOffset, writeOffset, size);

      this.gl.bindBuffer(GL_COPY_READ_BUFFER, null);
      this.gl.bindBuffer(GL_COPY_WRITE_BUFFER, null);

      return this;
    }

    // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.

  }, {
    key: 'getData',
    value: function getData() {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref6$dstData = _ref6.dstData,
          dstData = _ref6$dstData === undefined ? null : _ref6$dstData,
          _ref6$srcByteOffset = _ref6.srcByteOffset,
          srcByteOffset = _ref6$srcByteOffset === undefined ? 0 : _ref6$srcByteOffset,
          _ref6$dstOffset = _ref6.dstOffset,
          dstOffset = _ref6$dstOffset === undefined ? 0 : _ref6$dstOffset,
          _ref6$length = _ref6.length,
          length = _ref6$length === undefined ? 0 : _ref6$length;

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);

      var ArrayType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_typed_array_utils__["a" /* getTypedArrayFromGLType */])(this.type, { clamped: false });
      var sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);
      var dstAvailableElementCount = void 0;
      var dstElementCount = void 0;
      var dstElementOffset = dstOffset;
      if (dstData) {
        dstElementCount = dstData.length;
        dstAvailableElementCount = dstElementCount - dstElementOffset;
      } else {
        // Allocate ArrayBufferView with enough size to copy all eligible data.
        dstAvailableElementCount = Math.min(sourceAvailableElementCount, length || sourceAvailableElementCount);
        dstElementCount = dstElementOffset + dstAvailableElementCount;
      }

      var copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);
      length = length || copyElementCount;
      __WEBPACK_IMPORTED_MODULE_4_assert___default()(length <= copyElementCount, 'Invalid srcByteOffset, dstOffset and length combination');
      dstData = dstData || new ArrayType(dstElementCount);
      // Use GL_COPY_READ_BUFFER to avoid disturbing other targets and locking type
      this.gl.bindBuffer(GL_COPY_READ_BUFFER, this.handle);
      this.gl.getBufferSubData(GL_COPY_READ_BUFFER, srcByteOffset, dstData, dstOffset, length);
      this.gl.bindBuffer(GL_COPY_READ_BUFFER, null);
      return dstData;
    }

    /**
     * Binds a buffer to a given binding point (target).
     *   GL_TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.
     *
     * @param {Glenum} target - target for the bind operation.
     *
     * @param {GLuint} index= - the index of the target.
     *   - GL_TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state
     * @param {GLuint} offset=0 - the index of the target.
     *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.
     * @param {GLuint} size= - the index of the target.
     *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.
     * @returns {Buffer} - Returns itself for chaining.
     */

  }, {
    key: 'bind',
    value: function bind() {
      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref7$target = _ref7.target,
          target = _ref7$target === undefined ? this.target : _ref7$target,
          _ref7$index = _ref7.index,
          index = _ref7$index === undefined ? this.index : _ref7$index,
          _ref7$offset = _ref7.offset,
          offset = _ref7$offset === undefined ? 0 : _ref7$offset,
          size = _ref7.size;

      // NOTE: While GL_TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could
      // be used as direct binding points, they will not affect transform feedback or
      // uniform buffer state. Instead indexed bindings need to be made.
      var type = target === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNIFORM_BUFFER || target === GL_TRANSFORM_FEEDBACK_BUFFER ? size !== undefined ? 'ranged' : ' indexed' : 'non-indexed';

      switch (type) {
        case 'non-indexed':
          this.gl.bindBuffer(target, this.handle);
          break;
        case 'indexed':
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);
          __WEBPACK_IMPORTED_MODULE_4_assert___default()(offset === 0, ERR_BUFFER_PARAMS); // Make sure offset wasn't supplied
          this.gl.bindBufferBase(target, index, this.handle);
          break;
        case 'ranged':
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);
          this.gl.bindBufferRange(target, index, this.handle, offset, size);
          break;
        default:
          throw new Error(ERR_BUFFER_PARAMS);
      }

      return this;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref8$target = _ref8.target,
          target = _ref8$target === undefined ? this.target : _ref8$target,
          _ref8$index = _ref8.index,
          index = _ref8$index === undefined ? this.index : _ref8$index;

      var isIndexedBuffer = target === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNIFORM_BUFFER || target === GL_TRANSFORM_FEEDBACK_BUFFER;
      if (isIndexedBuffer) {
        this.gl.bindBufferBase(target, index, null);
      } else {
        this.gl.bindBuffer(target, null);
      }
      return this;
    }

    // TODO - is this the right place?
    // gl.TRANSFORM_FEEDBACK_BUFFER_BINDING: Returns a WebGLBuffer.
    // gl.TRANSFORM_FEEDBACK_BUFFER_SIZE: Returns a GLsizeiptr.
    // gl.TRANSFORM_FEEDBACK_BUFFER_START: Returns a GLintptr.
    // gl.UNIFORM_BUFFER_BINDING: Returns a WebGLBuffer.
    // gl.UNIFORM_BUFFER_SIZE: Returns a GLsizeiptr.
    // gl.UNIFORM_BUFFER_START: Returns a GLintptr.

  }, {
    key: 'getIndexedParameter',
    value: function getIndexedParameter(binding, index) {
      // Create the buffer - if binding it here for the first time, this locks the type
      // In WebGL2, use GL_COPY_READ_BUFFER to avoid locking the type
      var target = this.gl.webgl2 ? GL_COPY_READ_BUFFER : this.target;
      this.gl.bindBuffer(target, index);
      return this.gl.getIndexedParameter(binding, index);
    }

    // RESOURCE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createBuffer();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteBuffer(this.handle);
    }
  }, {
    key: '_getParameter',
    value: function _getParameter(pname) {
      this.gl.bindBuffer(this.target, this.handle);
      var value = this.gl.getBufferParameter(this.target, pname);
      this.gl.bindBuffer(this.target, null);
      return value;
    }
  }, {
    key: '_getAvailableElementCount',
    value: function _getAvailableElementCount(srcByteOffset) {
      var ArrayType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_typed_array_utils__["a" /* getTypedArrayFromGLType */])(this.type, { clamped: false });
      var sourceElementCount = this.bytes / ArrayType.BYTES_PER_ELEMENT;
      var sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;
      return sourceElementCount - sourceElementOffset;
    }
  }]);

  return Buffer;
}(__WEBPACK_IMPORTED_MODULE_3__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Buffer);
//# sourceMappingURL=buffer.js.map

/***/ }),
/* 19 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["i"] = distance;
/* harmony export (immutable) */ __webpack_exports__["a"] = add;
/* harmony export (immutable) */ __webpack_exports__["b"] = prod;
/* harmony export (immutable) */ __webpack_exports__["c"] = sub;
/* harmony export (immutable) */ __webpack_exports__["g"] = cross;
/* harmony export (immutable) */ __webpack_exports__["h"] = dot;
/* harmony export (immutable) */ __webpack_exports__["e"] = norm;
/* harmony export (immutable) */ __webpack_exports__["f"] = normalize;
/* unused harmony export rotate */
/* harmony export (immutable) */ __webpack_exports__["d"] = angleBetweenVectors;
const abs = Math.abs;
const sin = Math.sin;
const cos = Math.cos;
const atan2 = Math.atan2;
const acos = Math.acos;
const min = Math.min;
const twoPI = Math.PI * 2;
const pow = Math.pow;

function distance(a, b) {
  const v1 = sub(a, b);
  const v2 = dot(v1, v1);
  return Math.sqrt(v2);
}

function add(a, b) {
  return [
    a[0] + b[0],
    a[1] + b[1],
    a[2] + b[2]
  ];
}

function prod(a, k) {
  return [
    a[0] * k,
    a[1] * k,
    a[2] * k
  ];
}

function sub(a, b) {
  return [
    a[0] - b[0],
    a[1] - b[1],
    a[2] - b[2]
  ];
}

function cross(a, b) {
  return [
    a[1] * b[2] - a[2] * b[1],
    a[2] * b[0] - a[0] * b[2],
    a[0] * b[1] - a[1] * b[0]
  ];
}

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function norm(a) {
  return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
}

function normalize(a) {
  const len = norm(a);
  return a.map(_ => _ / len);
}

function rotate([v1, v2, v3], [u1, u2, u3], theta) {
  const costheta = cos(theta);
  const sintheta = sin(theta);
  return [
    v1 * (costheta + u1 * u1 * (1 - costheta)) + v2 * (u1 * u2 * (1 - costheta) - u3 * sintheta) + v3 * (u1 * u3 * (1 - costheta) + u2 * sintheta),
    v1 * (u2 * u1 * (1 - costheta) + u3 * sintheta) + v2 * (costheta + u2 * u2 * (1 - costheta)) + v3 * (u2 * u3 * (1 - costheta) - u1 * sintheta),
    v1 * (u3 * u1 * (1 - costheta) - u2 * sintheta) + v2 * (u3 * u2 * (1 - costheta) + u1 * sintheta) + v3 * (costheta + u3 * u3 * (1 - costheta))
  ];
}

function angleBetweenVectors(a, b) {
  const s = norm(cross(a,b))
  const c = dot(a,b)
  return atan2(s, c)
}


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = toSpherical;
/* harmony export (immutable) */ __webpack_exports__["f"] = toCartesian;
/* harmony export (immutable) */ __webpack_exports__["c"] = clean;
/* harmony export (immutable) */ __webpack_exports__["e"] = vertexOnSphere;
/* harmony export (immutable) */ __webpack_exports__["d"] = subdivide;
/* unused harmony export minSpanningTree */
/* harmony export (immutable) */ __webpack_exports__["i"] = spanningTrees;
/* harmony export (immutable) */ __webpack_exports__["j"] = triangulate;
/* harmony export (immutable) */ __webpack_exports__["g"] = setWeights;
/* harmony export (immutable) */ __webpack_exports__["h"] = graticule;
/* harmony export (immutable) */ __webpack_exports__["b"] = unfold;
/* unused harmony export getSpanningTrees */
/* unused harmony export getBestRotation */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__quad_edge_js__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__obj_js__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_js__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_luma_gl__ = __webpack_require__(30);





const abs = Math.abs;
const sin = Math.sin;
const cos = Math.cos;
const atan2 = Math.atan2;
const acos = Math.acos;
const min = Math.min;
const twoPI = Math.PI * 2;


function toSpherical([x, y, z]) {
  const r = Math.sqrt(x * x + y * y + z * z);
  return [
    r,
    atan2(y, x),
    acos(z / r)
  ];
}

function toCartesian(r, theta, phi) {
  return [
    r * sin(phi) * cos(theta),
    r * sin(phi) * sin(theta),
    r * cos(phi)
  ];
}

function clean(cell) {
  cell.eachFace(f => {
    f.data = {};

    f.eachEdge(e => {
      e.data = {
        w: 0
      };
    });

  });

  cell.eachVertex(v => {
    v.data = {
      iter: 0
    };
  });
}

function vertexOnSphere(cell) {
  cell.eachVertex(v => {
    const [r, theta, phi] = toSpherical(v.pos);
    v.pos = toCartesian(1, theta, phi);
  });
}

function subdivide(cell, iter) {
  const count = cell.getFace().edges();
  if (count == 4) {
    return subdivideSquares(cell, iter);
  } else if (count == 3) {
    return subdivideTriangles(cell, iter);
  } else {
    console.log('Cannot handle current subdivision');
    return cell;
  }
}

function setEdgeWeight(edge, w) {
  if (!edge.data) {
    edge.data = {};
  }
  if (!edge.Sym().data) {
    edge.Sym().data = {};
  }
  edge.data.wi = edge.Sym().data.wi = w;
}

function subdivideTriangles(cell, iter) {
  // get all faces
  // for each face iterate through edges
  // if origin and destination are iteration 0, then add intermediate node
  // store itermediate node
  // create edges/faces from new nodes
  //

  // Assign initial edge weights
  cell.eachFace(f => {
    f.eachEdge(e => setEdgeWeight(e, [0, 0, 1]));
  });

  for (let i = 0; i < iter; i++) {
    let faces = [];
    cell.eachFace(f => faces.push(f));

    faces.forEach(face => {
      let newVertices = [];
      face.eachEdge(edge => {
        const org = edge.Org();
        const dest = edge.Dest();
        const weights = edge.data.wi.slice();
        // will add itermediate vertex and new edge
        if (org.data.iter < i + 1 && dest.data.iter < i + 1) {
          setEdgeWeight(edge, [weights[2], weights[1], (weights[2] + weights[1]) / 2]);
          const newEdge = cell.makeVertexEdge(org, edge.Left(), edge.Right());
          setEdgeWeight(newEdge, [weights[0], weights[2], (weights[0] + weights[2]) / 2]);
          const newVertex = newEdge.Dest();
          // set position and data for new vertex
          newVertex.pos = org.pos.map((p, i) => (p + dest.pos[i]) / 2);
          newVertex.data = { iter: i + 1 };
          newVertices.push(newVertex);
        } else {
          // it's already a new node from another face
          // add it to new Vertices as we still need to create the edges
          if (dest.data.iter >= i + 1 && newVertices.length < 3) {
            newVertices.push(dest);
          }
        }
      });

      // add new faces from new nodes
      // here there should be three vertices
      let newEdge = cell.makeFaceEdge(face, newVertices[0], newVertices[1]);
      setEdgeWeight(newEdge, [iter + 1, iter + 1, iter + 2]);

      newEdge = cell.makeFaceEdge(face, newVertices[1], newVertices[2]);
      setEdgeWeight(newEdge, [iter + 1, iter + 1, iter + 2]);

      newEdge = cell.makeFaceEdge(face, newVertices[2], newVertices[0]);
      setEdgeWeight(newEdge, [iter + 1, iter + 1, iter + 2]);
    });
  }

  return cell;
}

function subdivideSquares(cell, iter) {
  // get all faces
  // for each face iterate through edges
  // if origin and destination are iteration 0, then add intermediate node
  // store itermediate node
  // create edges/faces from new nodes

  cell.eachFace(f => {
    f.eachEdge(e => setEdgeWeight(e, [0, 0, 1]));
  });

  for (let i = 0; i < iter; i++) {
    let faces = [];
    cell.eachFace(f => faces.push(f));

    faces.forEach(face => {
      let newVertices = [];
      face.eachEdge(edge => {
        let org = edge.Org();
        let dest = edge.Dest();
        const weights = edge.data.wi.slice();
        // will add itermediate vertex and new edge
        if (org.data.iter < i + 1 && dest.data.iter < i + 1) {
          setEdgeWeight(edge, [weights[2], weights[1], (weights[2] + weights[1]) / 2]);
          let newEdge = cell.makeVertexEdge(org, edge.Left(), edge.Right());
          setEdgeWeight(newEdge, [weights[0], weights[2], (weights[0] + weights[2]) / 2]);
          let newVertex = newEdge.Dest();
          // set position and data for new vertex
          newVertex.pos = org.pos.map((p, i) => (p + dest.pos[i]) / 2);
          newVertex.data = { iter: i + 1 };
          newVertices.push(newVertex);
        } else {
          // it's already a new node from another face
          // add it to new Vertices as we still need to create the edges
          if (dest.data.iter >= i + 1 && newVertices.length < 4) {
            newVertices.push(dest);
          }
        }
      });

      // divide main square into two rectangles
      let postEdge = cell.makeFaceEdge(face, newVertices[0], newVertices[2]);
      // add intermediate point
      let prevEdge = cell.makeVertexEdge(newVertices[0], postEdge.Left(), postEdge.Right());
      setEdgeWeight(postEdge, [iter + 1, iter + 1, iter + 2]);
      setEdgeWeight(prevEdge, [iter + 1, iter + 1, iter + 2]);

      let center = prevEdge.Dest(); // or postEdge.Org()
      center.pos = newVertices[0].pos.map((p, i) => (p + newVertices[2].pos[i]) / 2);
      center.data = { iter: i + 1 };
      // connect center Vertex to other two vertices
      let newEdge = cell.makeFaceEdge(postEdge.Right(), center, newVertices[1]);
      setEdgeWeight(newEdge, [iter + 1, iter + 1, iter + 2]);
      newEdge = cell.makeFaceEdge(postEdge.Left(), center, newVertices[3]);
      setEdgeWeight(newEdge, [iter + 1, iter + 1, iter + 2]);
    });
  }

  return cell;
}

function getMinEdge(vertices) {
  let ans;
  vertices.forEach(v => {
    v.eachEdge(e => {
      if (!e.Dest().data.flag) {
        if (!ans) {
          ans = e;
        } else {
          if (ans.data.w > e.data.w) {
            ans = e;
          }
        }
      }
    });
  });
  return ans;
}

function getMaxEdge(faces) {
  let ans;
  faces.forEach(f => {
    f.eachEdge(e => {
      if (!e.Right().data.flag) {
        if (!ans) {
          ans = e;
        } else {
          if (ans.data.w < e.data.w) {
            ans = e;
          }
        }
      }
    });
  });
  return [ans.Left(), ans.Right(), ans];
}

function minSpanningTree(cell, v) {
  let totalVertices = 0;
  cell.eachVertex(v => {
    totalVertices++;
    v.data.flag = false;
    v.eachEdge(e => e.data.cut = false);
  });
  const vertices = [v];
  const edges = [];
  let minEdge = false;
  while (vertices.length !== totalVertices) {
    v.data.flag = true;
    let minEdge = getMinEdge(vertices);
    edges.push(minEdge);
    minEdge.data.cut = true;
    if (!~vertices.indexOf(minEdge.Org())) {
      vertices.push(minEdge.Org());
      minEdge.Org().data.flag = true;
    } else {
      vertices.push(minEdge.Dest());
      minEdge.Dest().data.flag = true;
    }
  }
  return edges;
}

// creates both max spanning tree for dual graph
// and min spanning tree for regular graph
// creates a new unfoldable graph
function spanningTrees(cell, f, faceDegree=3) {
  //console.time('spanningB');
  // clean graph flags
  let totalFaces = 0;
  cell.eachFace(f => {
    totalFaces++;
    if (f.data) {
      f.data.flag = false;
    } else {
      f.data = { flag: false };
    }
    f.eachEdge(e => {
      if (e.data) {
        e.data.cut = true;
      } else {
        e.data = { cut: true };
      }
    });
  });
  // compute maxSpanTree
  // create unfoldable graph
  const faces = [f];
  let maxEdge = false;
  const maxSpanTreeDual = [];
  // initialize unfoldable graph
  const unfoldableGraph = { v: [], f: [] };
  const vertexIdToPos = {};
  const posToVertexId = {};
  const faceIdToPos = {};
  const posToFaceId = {};

  const folds = new Set();
  let fold = [];
  // add all vertices of first face
  let lastFace = [];
  faceIdToPos[f.id] = 0;
  posToFaceId[0] = f.id;
  f.eachEdge(e => {
    const org = e.Org();
    const oId = `${f.id} ${org.id}`;
    unfoldableGraph.v.push(org.pos);
    vertexIdToPos[oId] = lastFace.length + 1;
    posToVertexId[lastFace.length + 1] = oId;
    lastFace.push(lastFace.length + 1);
  });
  unfoldableGraph.f.push(lastFace);
  // use Prim's algo to get max spanning tree
  while (faces.length !== totalFaces) {
    f.data.flag = true;
    let [faceFrom, faceTo, maxEdge] = getMaxEdge(faces);
    maxSpanTreeDual.push([faceFrom, faceTo, maxEdge]);
    maxEdge.data.cut = false;
    let faceToAdd = (~faces.indexOf(faceFrom)) ? faceTo : faceFrom;
    faces.push(faceToAdd);
    faceToAdd.data.flag = true;
    const existingFace = faceTo == faceToAdd ? faceFrom : faceTo;
    lastFace = unfoldableGraph.f[faceIdToPos[existingFace.id]];
    let lastFaceVertIds = lastFace.map(i => +posToVertexId[i].split(' ')[1]);
    lastFace = [];
    fold = [];
    faceToAdd.eachEdge(e => {
      const org = e.Org();
      const fId = `${faceToAdd.id} ${org.id}`;
      const eId = `${existingFace.id} ${org.id}`;
      const moId = `${existingFace.id} ${maxEdge.Org().id}`
      const mdId = `${existingFace.id} ${maxEdge.Dest().id}`;
      if (!~lastFaceVertIds.indexOf(org.id)) {
        const id = unfoldableGraph.v.push(org.pos);
        lastFace.push(id);
        vertexIdToPos[fId] = id;
        posToVertexId[id] = fId;
      } else {
        lastFace.push(vertexIdToPos[eId]);
        vertexIdToPos[fId] = vertexIdToPos[eId];
      }
      if (org.id == maxEdge.Org().id || org.id == maxEdge.Dest().id) {
          folds.add(`${vertexIdToPos[moId]}-${vertexIdToPos[mdId]}`);
          folds.add(`${vertexIdToPos[mdId]}-${vertexIdToPos[moId]}`);
      }
    });
    posToFaceId[unfoldableGraph.f.push(lastFace) - 1] = faceToAdd.id;
    faceIdToPos[faceToAdd.id] = unfoldableGraph.f.length -1;
  }

  //console.timeEnd('spanningB');
  const unfoldable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__obj_js__["a" /* JSONReadCell */])(unfoldableGraph);
  const flagEdge = new Set();
  const foldsFrom = [];
  const foldsTo = [];
  const cutsFrom = [];
  const cutsTo = [];
  const faceIter = [];
  let outsideFace;
  unfoldable.eachFace(f => {
    if (f.edges() > faceDegree) {
      outsideFace = f;
    }
  });
  outsideFace.eachEdge(e => {
    if (!e.data) {
      e.data = {};
    }
    if (!e.Sym().data) {
      e.Sym().data = {};
    }
    e.data.cut = e.Sym().data.cut = true;
    cutsFrom.push.apply(cutsFrom, e.Org().pos);
    cutsTo.push.apply(cutsTo, e.Dest().pos);
  });
  unfoldable.eachFace(f => {
    if (f.edges() > faceDegree) {
      return;
    }
    faceIter.push(f);
    f.eachEdge(e => {
      if (!e.data) {
        e.data = {};
      }
      if (!e.Sym().data) {
        e.Sym().data = {};
      }
      if (!e.data.cut) {
        e.data.cut = e.Sym().data.cut = false;
        foldsFrom.push.apply(foldsFrom, e.Left().getCentroid());
        foldsTo.push.apply(foldsTo, e.Right().getCentroid());
      }
    });
  });
  /*
  // add intermediate edge with high weight
  if (faceDegree !== 3) {
    faceIter.forEach(face => {
      if (face.edges() !== faceDegree) {
        return;
      }
      if (faceDegree === 4) {
        const newEdge = unfoldable.makeFaceEdge(face, face.getEdge().Lnext().Dest(), face.getEdge().Org());
        newEdge.data = newEdge.Sym().data = {
          cube: true,
          w: Number.Infinity,
          wi: [0, 0, Number.Infinity]
        };
        let left = newEdge.Left();
        let right = newEdge.Right();
        let newFace = left == face ? right : left;
        newFace.data = {
          clone: true,
          ref: newFace == right ? left : right
        };
      // ASsuming degree 5 here (dodecahedron)
      } else {
        let vertices = [];
        face.eachEdge(e => vertices.push(e.Org()));
        // divide main pentagon into two areas
        let postEdge = unfoldable.makeFaceEdge(face, vertices[0], vertices[2]);
        // add intermediate point
        let prevEdge = unfoldable.makeVertexEdge(vertices[0], postEdge.Left(), postEdge.Right());

        let center = prevEdge.Dest(); // or postEdge.Org()
        let pos = [0, 0, 0];
        vertices.forEach(v => {
          pos = add(pos, v.pos);
        });
        pos = prod(pos, 0.2);
        center.pos = pos;
        // connect center Vertex to other two vertices
        let newEdge = unfoldable.makeFaceEdge(postEdge.Right(), center, vertices[1]);
        newEdge = unfoldable.makeFaceEdge(postEdge.Left(), center, vertices[4]);
        newEdge = unfoldable.makeFaceEdge(newEdge.Right(), center, vertices[3]);
      }
    });
  }*/

  if (faceDegree !== 3) {
    triangulate(unfoldable, faceDegree);
  }

  return [[foldsFrom, foldsTo], [cutsFrom, cutsTo], unfoldable];
}

function triangulate(unfoldable, faceDegree=3) {
  const faceIter = [];
  unfoldable.eachFace(f => {
    if (faceDegree == 'voronoi' || f.edges() === faceDegree) {
      faceIter.push(f);
    }
  });
  // add intermediate edge with high weight
  faceIter.forEach(face => {
    if (faceDegree !== 'voronoi' && face.edges() !== faceDegree) {
      return;
    }
    if (faceDegree === 4) {
      const newEdge = unfoldable.makeFaceEdge(face, face.getEdge().Lnext().Dest(), face.getEdge().Org());
      newEdge.data = newEdge.Sym().data = {
        cube: true,
        w: Number.Infinity,
        wi: [0, 0, Number.Infinity]
      };
      let left = newEdge.Left();
      let right = newEdge.Right();
      let newFace = left == face ? right : left;
      newFace.data = {
        clone: true,
        ref: newFace == right ? left : right
      };
    // ASsuming degree 5 here (dodecahedron)
    } else if (faceDegree === 5) {
      let vertices = [];
      face.eachEdge(e => vertices.push(e.Org()));
      // divide main pentagon into two areas
      let postEdge = unfoldable.makeFaceEdge(face, vertices[0], vertices[2]);
      // add intermediate point
      let prevEdge = unfoldable.makeVertexEdge(vertices[0], postEdge.Left(), postEdge.Right());

      let center = prevEdge.Dest(); // or postEdge.Org()
      let pos = [0, 0, 0];
      vertices.forEach(v => {
        pos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(pos, v.pos);
      });
      pos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(pos, 0.2);
      center.pos = pos;
      // connect center Vertex to other two vertices
      let newEdge = unfoldable.makeFaceEdge(postEdge.Right(), center, vertices[1]);
      newEdge = unfoldable.makeFaceEdge(postEdge.Left(), center, vertices[4]);
      newEdge = unfoldable.makeFaceEdge(newEdge.Right(), center, vertices[3]);
      // voronoi cell / convex hull
    } else if (faceDegree == 'voronoi') {
      if (face.edges() <= 3) {
        return;
      }
      let vertices = [];
      face.eachEdge(e => vertices.push(e.Org()));
      // divide cell into two areas
      let postEdge = unfoldable.makeFaceEdge(face, vertices[0], vertices[2]);
      postEdge.data = postEdge.Sym().data = {
        cube: true,
        w: Number.Infinity,
        wi: [0, 0, Number.Infinity]
      };
      // add intermediate point
      let prevEdge = unfoldable.makeVertexEdge(vertices[0], postEdge.Left(), postEdge.Right());
      prevEdge.data = prevEdge.Sym().data = {
        cube: true,
        w: Number.Infinity,
        wi: [0, 0, Number.Infinity]
      };

      let center = prevEdge.Dest(); // or postEdge.Org()
      let pos = [0, 0, 0];
      vertices.forEach(v => {
        pos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(pos, v.pos);
      });
      pos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(pos, 1 / face.edges());
      center.pos = pos;
      // connect center Vertex to other two vertices
      let newEdge = unfoldable.makeFaceEdge(postEdge.Right(), center, vertices[1]);
      newEdge.data = newEdge.Sym().data = {
        cube: true,
        w: Number.Infinity,
        wi: [0, 0, Number.Infinity]
      };

      if (vertices.length > 3) {
        newEdge = unfoldable.makeFaceEdge(postEdge.Left(), center, vertices[vertices.length -1]);
        newEdge.data = newEdge.Sym().data = {
          cube: true,
          w: Number.Infinity,
          wi: [0, 0, Number.Infinity]
        };
        for (let j = vertices.length -2; j > 2; j--) {
          newEdge = unfoldable.makeFaceEdge(newEdge.Right(), center, vertices[j]);
          newEdge.data = newEdge.Sym().data = {
            cube: true,
            w: Number.Infinity,
            wi: [0, 0, Number.Infinity]
          };
        }
      }
      //newEdge = unfoldable.makeFaceEdge(postEdge.Left(), center, vertices[4]);
      //newEdge = unfoldable.makeFaceEdge(newEdge.Right(), center, vertices[3]);
    }
  });
}

function setWeights(cell, f) {
  cell.eachFace(face => face.eachEdge(e => {
    if (!e.data) {
      e.data = {};
    }
    f(e);
  }));
}

function graticule(theta, phi, W_theta, W_phi, theta0, phi0) {
  let d1 = Math.min(abs(theta - theta0), abs(theta - theta0 + 2 * Math.PI));
  let d2 = abs(phi - phi0);
  return - (W_phi * d2 + W_theta * d1);
}

// Assuming triangles here
function unfold(faceStart, scale) {
  if (!faceStart.data) {
    faceStart.data = { visited: false };
  }
  const visited = !faceStart.data.visited;
  const queue = [ faceStart ];
  // This will be reference face and will stay fixed
  faceStart.eachEdge(e => {
    e.Org().npos = e.Org().pos.slice();
  });
  while (queue.length) {
    let current = queue.shift();
    if (!current.data) {
      current.data = {};
    }
    current.data.visited = visited;
    current.eachEdge(e => {
      const r = e.Org();
      const q = e.Dest();
      const p = e.Lnext().Dest();
      const face = e.Right();
      if (face.edges() !== 3) {
        return;
      }
      if (face.data.visited !== visited) {
        let sym = e.Sym();
        const s = sym.Lnext().Dest();
        const QS = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(s.pos, q.pos);
        const QR = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(r.pos, q.pos);
        const RQ = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(q.pos, r.pos);
        const RP = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(p.pos, r.pos);
        const a1 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["d" /* angleBetweenVectors */])(QS, QR);
        const nQS = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["e" /* norm */])(QS);
        const proj = [cos(a1) * nQS, sin(a1) * nQS];
        const a2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["d" /* angleBetweenVectors */])(RP, RQ);
        const nRP = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["e" /* norm */])(RP);
        const proj2 = [cos(a2) * nRP, sin(a2) * nRP];

        const uQpRp = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(r.npos, q.npos));
        const uRpQp = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(uQpRp, -1);
        const pi = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(r.npos, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(uRpQp, proj2[0]));
        const uPiP = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(pi, p.npos));
        const uQpPp = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(p.npos, q.npos));
        const si = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(q.npos, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(uQpRp, proj[0]));

        const rotationAxis = uQpRp;
        let sii = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(si, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(uPiP, proj[1]));
        s.npos = sii;
        //const n = current.getNormal('npos');
        //const n2 = face.getNormal('npos');
        const nPQR = current.getNormal();
        const nRQS = face.getNormal();
        const original = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["d" /* angleBetweenVectors */])(nPQR, nRQS);
        //const alpha = angleBetweenVectors(n, n2);
        //let theta = alpha - original * scale;
        let theta = - original * scale;
        //let mix = prod(add(r.npos, r.npos), 0.5);
        sii = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["c" /* sub */])(sii, q.npos);
        //sii = sub(sii, mix);
        let temp1 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(sii, cos(theta));
        let temp2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["g" /* cross */])(rotationAxis, sii), sin(theta));
        let temp3 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(rotationAxis, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["h" /* dot */])(rotationAxis, sii) * (1 - cos(theta)));
        let rodriguesRot = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(temp1, temp2), temp3);
        s.npos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(rodriguesRot, q.npos);
        // TODO(nico): Hack for cube, should actually understand why the rotation axis is wrong.
        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["e" /* norm */])(s.npos) < __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["e" /* norm */])(s.pos)) {
          s.npos = s.pos.slice();
        }
        //s.npos = add(rodriguesRot, mix);
        // add face to queue and flag it
        if (!face.data) {
          face.data = {};
        }
        face.data.visited = visited;
        queue.push(face);
      }
    });
  }
}

function getSpanningTrees(unfoldable, pos) {
  const flagEdge = new Set();
  const foldsFrom = [];
  const foldsTo = [];
  const cutsFrom = [];
  const cutsTo = [];
  unfoldable.eachFace(f => {
    if (f.edges() > 3) {
      return;
    }
    f.eachEdge(e => {
      if (flagEdge.has(e.id)) {
        return;
      }
      flagEdge.add(e.id);
      if (!e.data.cut) {
        foldsFrom.push.apply(foldsFrom, e.Left().getCentroid(pos));
        foldsTo.push.apply(foldsTo, e.Right().getCentroid(pos));
      } else {
        cutsFrom.push.apply(cutsFrom, e.Org()[pos]);
        cutsTo.push.apply(cutsTo, e.Dest()[pos]);
      }
    });
  });
  return [[foldsFrom, foldsTo], [cutsFrom, cutsTo]];
}



// creates both max spanning tree for dual graph
// and min spanning tree for regular graph
// creates a new unfoldable graph
function weightSpanningTrees(cell, f, faceDegree=3) {
  // clean graph flags
  let totalFaces = 0;
  cell.eachFace(f => {
    totalFaces++;
    if (f.data) {
      f.data.flag = false;
    } else {
      f.data = { flag: false };
    }
    f.eachEdge(e => {
      if (e.data) {
        e.data.cut = true;
      } else {
        e.data = { cut: true };
      }
    });
  });
  // compute maxSpanTree
  // create unfoldable graph
  const faces = [f];
  let maxEdge = false;
  // initialize unfoldable graph
  const unfoldableGraph = { v: [], f: [] };
  const vertexIdToPos = {};
  const posToVertexId = {};
  const faceIdToPos = {};
  const posToFaceId = {};

  const folds = new Set();
  let fold = [];
  // add all vertices of first face
  let lastFace = [];
  faceIdToPos[f.id] = 0;
  posToFaceId[0] = f.id;
  f.eachEdge(e => {
    const org = e.Org();
    const oId = `${f.id} ${org.id}`;
    unfoldableGraph.v.push(org.pos);
    vertexIdToPos[oId] = lastFace.length + 1;
    posToVertexId[lastFace.length + 1] = oId;
    lastFace.push(lastFace.length + 1);
  });
  unfoldableGraph.f.push(lastFace);
  // use Prim's algo to get max spanning tree
  while (faces.length !== totalFaces) {
    f.data.flag = true;
    let [faceFrom, faceTo, maxEdge] = getMaxEdge(faces);
    maxEdge.data.cut = false;
    maxEdge.Sym().data.cut = false;
    let faceToAdd = (~faces.indexOf(faceFrom)) ? faceTo : faceFrom;
    faces.push(faceToAdd);
    faceToAdd.data.flag = true;
    const existingFace = faceTo == faceToAdd ? faceFrom : faceTo;
    lastFace = unfoldableGraph.f[faceIdToPos[existingFace.id]];
    let lastFaceVertIds = lastFace.map(i => +posToVertexId[i].split(' ')[1]);
    lastFace = [];
    fold = [];
    faceToAdd.eachEdge(e => {
      const org = e.Org();
      const fId = `${faceToAdd.id} ${org.id}`;
      const eId = `${existingFace.id} ${org.id}`;
      const moId = `${existingFace.id} ${maxEdge.Org().id}`
      const mdId = `${existingFace.id} ${maxEdge.Dest().id}`;
      if (!~lastFaceVertIds.indexOf(org.id)) {
        const id = unfoldableGraph.v.push(org.pos);
        lastFace.push(id);
        vertexIdToPos[fId] = id;
        posToVertexId[id] = fId;
      } else {
        lastFace.push(vertexIdToPos[eId]);
        vertexIdToPos[fId] = vertexIdToPos[eId];
      }
      if (org.id == maxEdge.Org().id || org.id == maxEdge.Dest().id) {
          folds.add(`${vertexIdToPos[moId]}-${vertexIdToPos[mdId]}`);
          folds.add(`${vertexIdToPos[mdId]}-${vertexIdToPos[moId]}`);
      }
    });
    posToFaceId[unfoldableGraph.f.push(lastFace) - 1] = faceToAdd.id;
    faceIdToPos[faceToAdd.id] = unfoldableGraph.f.length -1;
  }

  let weightAcum = 0;
  cell.eachFace(f => {
    f.eachEdge(e => {
      if (e.data.cut) {
        weightAcum += e.data.w;
      }
    });
  });

  return weightAcum;
}

function getPixel(x, y, img) {
  return img.data[y * (img.width * 4) + x * 4];
}

function rotate(cell, x, y, z) {
  let mat = new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["a" /* Matrix4 */]();
  mat.rotateX(x);
  mat.rotateY(y);
  mat.rotateZ(z);

  cell.eachVertex(v => {
    let pos = v.pos.slice();
    pos.push(1);
    let posVec = mat.transformVector4(pos);
    v.posVec = posVec;
  });
}

function setSampledWeights(cell, img, ctx) {
  const samples = 25;
  cell.eachFace(f => {
    f.eachEdge(e => {
      if (!e.data) {
        e.data = e.Sym().data = {};
      }
      e.data.w = -1;
    })
  });

  cell.eachFace(f => {
    f.eachEdge(e => {
      if (e.data.w > -1) {
        return;
      }
      e.data.w = 0;
      let org = e.Org().posVec;
      let dest = e.Dest().posVec;
      for (let i = 0; i <= samples; i++) {
        let w1 = i / samples;
        let w2 = (samples - i) / samples;
        let midPoint = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["a" /* add */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(org, w1), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["b" /* prod */])(dest, w2));
        let [r, theta, phi] = toSpherical(midPoint);
        // normalize to 0-1
        let x = (theta + Math.PI) / (Math.PI * 2);
        let y = phi / Math.PI;
        // set to with and height
        x = Math.round(x * img.width);
        y = Math.round(y * img.height);

        let pixel = getPixel(x, y, img);
        e.data.w += pixel;
        e.Sym().data.w = e.data.w;

        //if (ctx) {
          //ctx.fillStyle = 'red';
          //if (e.data.w == 0) {
            //ctx.fillStyle = 'green';
          //}
          //ctx.fillRect(x - 3, y - 3, 6, 6);
        //}
      }
    });
  });
}

function getFace(cell, faceDegree) {
  let face;
  cell.eachFace(f => {
    if (f.edges() == faceDegree) {
      face = f;
    }
  });
  return face;
}

function getBestRotation(obj, img, ctx) {
  const cell = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__obj_js__["a" /* JSONReadCell */])(obj);
  let minWeight = Infinity;
  let rot = [0, 0, 0];
  const step = 0.1;
  const twoPi = Math.PI * 2;
  const pi = Math.PI;
  let faceDegree = obj.f[0].length;
  let face = getFace(cell, faceDegree);

  for (let x = 0; x < twoPi && minWeight !== 0; x += step) {
    for (let y = 0; y < twoPi && minWeight !== 0; y += step) {
      for (let z = 0; z < twoPi && minWeight !== 0; z += step) {
        rotate(cell, x, y, z);
        setSampledWeights(cell, img);
        let weight = weightSpanningTrees(cell, face, faceDegree);
        if (weight < minWeight) {
          //console.log(weight);
          minWeight = weight;
          rot = [x, y, z];
        }
      }
    }
  }

  //console.log('minWeight', minWeight);
  // from the minimum angles recompute the weights
  let [x, y, z] = rot;
  rotate(cell, x, y, z);
  setSampledWeights(cell, img, ctx);
  let clone = JSON.parse(JSON.stringify(obj));
  clone.v = [];
  clone.w = {};
  cell.eachFace(f => {
    f.eachEdge(e => {
      const org = e.Org();
      const dest = e.Dest();
      clone.v[org.id] = [org.posVec[0], org.posVec[1], org.posVec[2]];
      clone.v[dest.id] = [dest.posVec[0], dest.posVec[1], dest.posVec[2]];
      const id = org.id < dest.id ? `${org.id}-${dest.id}` : `${dest.id}-${org.id}`;
      if (id in clone.w) {
        return;
      }
      clone.w[id] = e.data.w;
    });
  });

  console.log(JSON.stringify(clone, null, 2));

  return clone;
}




/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_uniforms__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__geometry_geometry__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__core_object_3d__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__ = __webpack_require__(213);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shadertools__ = __webpack_require__(195);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__debug_seer_integration__ = __webpack_require__(177);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_query__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint quotes: ["error", "single", { "allowTemplateLiterals": true }]*/
// A scenegraph object node

// import {withParameters} from '../webgl/context-state';












var MSG_INSTANCED_PARAM_DEPRECATED = 'Warning: Model constructor: parameter "instanced" renamed to "isInstanced".\nThis will become a hard error in a future version of luma.gl.';

var ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';

// Model abstract O3D Class

var Model = /*#__PURE__*/function (_Object3D) {
  _inherits(Model, _Object3D);

  function Model(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Model);

    var _this = _possibleConstructorReturn(this, (Model.__proto__ || Object.getPrototypeOf(Model)).call(this, opts));

    if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["isWebGL"])(gl)) {
      // constructor signature 1: (gl, {...opts})
      _this.gl = gl;
    } else {
      // Warning that we are using v3 style construction
      __WEBPACK_IMPORTED_MODULE_4__utils__["log"].deprecated('Model({gl, ...opts})', 'Model(gl, {...opts}');
      // constructor signature 2: ({gl, ...opts})
      // Note: A Model subclass may still have supplied opts, just use those as overrides
      opts = Object.assign(gl, opts);
      // v3 compatibility: Auto extract gl from program if supplied
      _this.gl = opts.gl || opts.program && opts.program.gl;
      // Verify that we have a valid context
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["isWebGL"])(_this.gl), 'Not a WebGL context');
    }
    _this.init(opts);
    return _this;
  }

  /* eslint-disable max-statements  */
  /* eslint-disable complexity  */


  _createClass(Model, [{
    key: 'init',
    value: function init() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$vs = _ref.vs,
          vs = _ref$vs === undefined ? null : _ref$vs,
          _ref$fs = _ref.fs,
          fs = _ref$fs === undefined ? null : _ref$fs,
          _ref$modules = _ref.modules,
          modules = _ref$modules === undefined ? null : _ref$modules,
          _ref$defines = _ref.defines,
          defines = _ref$defines === undefined ? {} : _ref$defines,
          _ref$moduleSettings = _ref.moduleSettings,
          moduleSettings = _ref$moduleSettings === undefined ? {} : _ref$moduleSettings,
          defaultUniforms = _ref.defaultUniforms,
          _ref$program = _ref.program,
          program = _ref$program === undefined ? null : _ref$program,
          _ref$shaderCache = _ref.shaderCache,
          shaderCache = _ref$shaderCache === undefined ? null : _ref$shaderCache,
          _ref$isInstanced = _ref.isInstanced,
          isInstanced = _ref$isInstanced === undefined ? false : _ref$isInstanced,
          instanced = _ref.instanced,
          _ref$vertexCount = _ref.vertexCount,
          vertexCount = _ref$vertexCount === undefined ? undefined : _ref$vertexCount,
          _ref$instanceCount = _ref.instanceCount,
          instanceCount = _ref$instanceCount === undefined ? 0 : _ref$instanceCount,
          drawMode = _ref.drawMode,
          _ref$uniforms = _ref.uniforms,
          uniforms = _ref$uniforms === undefined ? {} : _ref$uniforms,
          _ref$attributes = _ref.attributes,
          attributes = _ref$attributes === undefined ? {} : _ref$attributes,
          _ref$geometry = _ref.geometry,
          geometry = _ref$geometry === undefined ? null : _ref$geometry,
          _ref$pickable = _ref.pickable,
          pickable = _ref$pickable === undefined ? true : _ref$pickable,
          _ref$pick = _ref.pick,
          pick = _ref$pick === undefined ? null : _ref$pick,
          _ref$render = _ref.render,
          render = _ref$render === undefined ? null : _ref$render,
          _ref$onBeforeRender = _ref.onBeforeRender,
          onBeforeRender = _ref$onBeforeRender === undefined ? function () {} : _ref$onBeforeRender,
          _ref$onAfterRender = _ref.onAfterRender,
          onAfterRender = _ref$onAfterRender === undefined ? function () {} : _ref$onAfterRender,
          _ref$timerQueryEnable = _ref.timerQueryEnabled,
          timerQueryEnabled = _ref$timerQueryEnable === undefined ? false : _ref$timerQueryEnable;

      this._initializeProgram({
        vs: vs,
        fs: fs,
        modules: modules,
        defines: defines,
        moduleSettings: moduleSettings,
        defaultUniforms: defaultUniforms,
        program: program,
        shaderCache: shaderCache
      });

      this.uniforms = {};

      // Make sure we have some reasonable default uniforms in place
      uniforms = Object.assign({}, this.program.defaultUniforms, uniforms);
      this.setUniforms(uniforms);
      // Get all default uniforms
      this.setUniforms(this.getModuleUniforms());
      // Get unforms for supplied parameters
      this.setUniforms(this.getModuleUniforms(moduleSettings));

      if (instanced) {
        /* global console */
        /* eslint-disable no-console */
        console.warn(MSG_INSTANCED_PARAM_DEPRECATED);
        isInstanced = isInstanced || instanced;
      }

      // TODO - remove?
      this.buffers = {};
      this.userData = {};
      this.drawParams = {};
      this.dynamic = false;
      this.needsRedraw = true;

      // Attributes and buffers
      this.setGeometry(geometry);

      this.attributes = {};
      this.setAttributes(attributes);

      // geometry might have set drawMode and vertexCount
      if (drawMode !== undefined) {
        this.drawMode = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__geometry_geometry__["b" /* getDrawMode */])(drawMode);
      }
      if (vertexCount !== undefined) {
        this.vertexCount = vertexCount;
      }
      this.isInstanced = isInstanced;
      this.instanceCount = instanceCount;

      // picking options
      this.pickable = Boolean(pickable);
      this.pick = pick || function () {
        return false;
      };

      this.onBeforeRender = onBeforeRender;
      this.onAfterRender = onAfterRender;

      // assert(program || program instanceof Program);
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);

      this.timerQueryEnabled = timerQueryEnabled && __WEBPACK_IMPORTED_MODULE_8__webgl_query__["a" /* default */].isSupported(this.gl, { timer: true });
      this.timeElapsedQuery = undefined;
      this.lastQueryReturned = true;

      this.stats = {
        accumulatedFrameTime: 0,
        averageFrameTime: 0,
        profileFrameCount: 0
      };
    }
    /* eslint-enable max-statements */

  }, {
    key: '_initializeProgram',
    value: function _initializeProgram(_ref2) {
      var vs = _ref2.vs,
          fs = _ref2.fs,
          modules = _ref2.modules,
          defines = _ref2.defines,
          moduleSettings = _ref2.moduleSettings,
          defaultUniforms = _ref2.defaultUniforms,
          program = _ref2.program,
          shaderCache = _ref2.shaderCache;


      this.getModuleUniforms = function (x) {};

      if (!program) {
        // Assign default shaders if none are provided
        if (!vs) {
          vs = __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__["a" /* MODULAR_SHADERS */].vs;
        }
        if (!fs) {
          fs = __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__["a" /* MODULAR_SHADERS */].fs;
        }

        // Assign default uniforms (if any default shaders are being used)
        if (vs === __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__["b" /* MONOLITHIC_SHADERS */].vs || fs === __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__["b" /* MONOLITHIC_SHADERS */].fs) {
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(0, 'luma.gl: default shaders are deprecated and will be removed in a future version. Use shader modules instead.');
          defaultUniforms = defaultUniforms || __WEBPACK_IMPORTED_MODULE_5__shadertools_shaders__["b" /* MONOLITHIC_SHADERS */].defaultUniforms;
        }

        var assembleResult = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__shadertools__["a" /* assembleShaders */])(this.gl, { vs: vs, fs: fs, modules: modules, defines: defines });


        // Retrive compiled shaders from cache if exist, otherwise add to the cache.
        vs = assembleResult.vs;
        fs = assembleResult.fs;
        if (shaderCache) {
          vs = shaderCache.getVertexShader(this.gl, vs);
          fs = shaderCache.getFragmentShader(this.gl, fs);
        }

        var getUniforms = assembleResult.getUniforms;

        this.getModuleUniforms = getUniforms || function (x) {};

        program = new __WEBPACK_IMPORTED_MODULE_0__webgl__["Program"](this.gl, { vs: vs, fs: fs });
      }

      this.program = program;
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(this.program instanceof __WEBPACK_IMPORTED_MODULE_0__webgl__["Program"], 'Model needs a program');
    }
    /* eslint-enable complexity */

  }, {
    key: 'destroy',
    value: function destroy() {
      this.delete();
    }
  }, {
    key: 'delete',
    value: function _delete() {
      this.program.delete();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__debug_seer_integration__["a" /* removeModel */])(this.id);
    }
  }, {
    key: 'setNeedsRedraw',
    value: function setNeedsRedraw() {
      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this.needsRedraw = redraw;
      return this;
    }
  }, {
    key: 'getNeedsRedraw',
    value: function getNeedsRedraw() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$clearRedrawFlag = _ref3.clearRedrawFlags,
          clearRedrawFlags = _ref3$clearRedrawFlag === undefined ? false : _ref3$clearRedrawFlag;

      var redraw = false;
      redraw = redraw || this.needsRedraw;
      this.needsRedraw = this.needsRedraw && !clearRedrawFlags;
      redraw = redraw || this.geometry.getNeedsRedraw({ clearRedrawFlags: clearRedrawFlags });
      return redraw;
    }
  }, {
    key: 'setDrawMode',
    value: function setDrawMode(drawMode) {
      this.drawMode = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__geometry_geometry__["b" /* getDrawMode */])(drawMode);
      return this;
    }
  }, {
    key: 'getDrawMode',
    value: function getDrawMode() {
      return this.drawMode;
    }
  }, {
    key: 'setVertexCount',
    value: function setVertexCount(vertexCount) {
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(Number.isFinite(vertexCount));
      this.vertexCount = vertexCount;
      return this;
    }
  }, {
    key: 'getVertexCount',
    value: function getVertexCount() {
      return this.vertexCount;
    }
  }, {
    key: 'setInstanceCount',
    value: function setInstanceCount(instanceCount) {
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(Number.isFinite(instanceCount));
      this.instanceCount = instanceCount;
      return this;
    }
  }, {
    key: 'getInstanceCount',
    value: function getInstanceCount() {
      return this.instanceCount;
    }
  }, {
    key: 'getProgram',
    value: function getProgram() {
      return this.program;
    }

    // TODO - just set attributes, don't hold on to geometry

  }, {
    key: 'setGeometry',
    value: function setGeometry(geometry) {
      this.geometry = geometry;
      this.vertexCount = geometry.getVertexCount();
      this.drawMode = geometry.drawMode;
      this._createBuffersFromAttributeDescriptors(this.geometry.getAttributes());
      this.setNeedsRedraw();
      return this;
    }
  }, {
    key: 'getAttributes',
    value: function getAttributes() {
      return this.attributes;
    }
  }, {
    key: 'setAttributes',
    value: function setAttributes() {
      var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      Object.assign(this.attributes, attributes);
      this._createBuffersFromAttributeDescriptors(attributes);
      this.setNeedsRedraw();
      return this;
    }
  }, {
    key: 'getUniforms',
    value: function getUniforms() {
      return this.uniforms;
    }

    // TODO - should actually set the uniforms

  }, {
    key: 'setUniforms',
    value: function setUniforms() {
      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["checkUniformValues"])(uniforms, this.id);
      Object.assign(this.uniforms, uniforms);
      this.setNeedsRedraw();
      return this;
    }

    // getModuleUniforms (already on object)

  }, {
    key: 'updateModuleSettings',
    value: function updateModuleSettings(opts) {
      var uniforms = this.getModuleUniforms(opts);
      return this.setUniforms(uniforms);
    }

    // TODO - uniform names are too strongly linked camera <=> default shaders
    // At least all special handling is collected here.

  }, {
    key: 'addViewUniforms',
    value: function addViewUniforms(uniforms) {
      // TODO - special treatment of these parameters should be removed
      var camera = uniforms.camera,
          viewMatrix = uniforms.viewMatrix,
          modelMatrix = uniforms.modelMatrix;
      // Camera exposes uniforms that can be used directly in shaders

      var cameraUniforms = camera ? camera.getUniforms() : {};

      var viewUniforms = viewMatrix ? this.getCoordinateUniforms(viewMatrix, modelMatrix) : {};

      return Object.assign({}, uniforms, cameraUniforms, viewUniforms);
    }
  }, {
    key: 'draw',
    value: function draw() {
      var _this2 = this;

      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref4$uniforms = _ref4.uniforms,
          uniforms = _ref4$uniforms === undefined ? {} : _ref4$uniforms,
          _ref4$attributes = _ref4.attributes,
          attributes = _ref4$attributes === undefined ? {} : _ref4$attributes,
          _ref4$samplers = _ref4.samplers,
          samplers = _ref4$samplers === undefined ? {} : _ref4$samplers,
          _ref4$parameters = _ref4.parameters,
          parameters = _ref4$parameters === undefined ? {} : _ref4$parameters,
          settings = _ref4.settings,
          _ref4$framebuffer = _ref4.framebuffer,
          framebuffer = _ref4$framebuffer === undefined ? null : _ref4$framebuffer;

      if (settings) {
        __WEBPACK_IMPORTED_MODULE_4__utils__["log"].deprecated('settings', 'parameters');
        parameters = settings;
      }
      var gl = this.program.gl;

      if (framebuffer) {
        parameters = Object.assign(parameters, { framebuffer: framebuffer });
      }
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["withParameters"])(gl, parameters, function () {
        return _this2.render(uniforms, attributes, samplers);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var samplers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__debug_seer_integration__["b" /* addModel */])(this);

      var resolvedUniforms = this.addViewUniforms(uniforms);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__debug_seer_integration__["c" /* getOverrides */])(this.id, resolvedUniforms);

      this.setUniforms(resolvedUniforms);

      __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, '>>> RENDERING MODEL ' + this.id, this);

      this.setProgramState();

      this._logAttributesAndUniforms(3, resolvedUniforms);

      this.onBeforeRender();

      var drawParams = this.drawParams;
      if (drawParams.isInstanced && !this.isInstanced) {
        __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(0, 'Found instanced attributes on non-instanced model');
      }
      var isIndexed = drawParams.isIndexed,
          indexType = drawParams.indexType;
      var isInstanced = this.isInstanced,
          instanceCount = this.instanceCount;


      this._timerQueryStart();

      this.program.draw({
        drawMode: this.getDrawMode(),
        vertexCount: this.getVertexCount(),
        isIndexed: isIndexed,
        indexType: indexType,
        isInstanced: isInstanced,
        instanceCount: instanceCount
      });

      this._timerQueryEnd();

      this.onAfterRender();

      this.unsetProgramState();

      this.setNeedsRedraw(false);

      __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, '<<< RENDERING MODEL ' + this.id + ' - complete');

      return this;
    }
  }, {
    key: 'setProgramState',
    value: function setProgramState() {
      var program = this.program;

      program.use();
      this.drawParams = {};
      program.setBuffers(this.buffers, { drawParams: this.drawParams });
      program.setUniforms(this.uniforms, this.samplers);
      return this;
    }
  }, {
    key: 'unsetProgramState',
    value: function unsetProgramState() {
      // Ensures all vertex attributes are disabled and ELEMENT_ARRAY_BUFFER
      // is unbound
      this.program.unsetBuffers();
      return this;
    }
  }, {
    key: '_timerQueryStart',
    value: function _timerQueryStart() {
      if (this.timerQueryEnabled === true) {
        if (!this.timeElapsedQuery) {
          this.timeElapsedQuery = new __WEBPACK_IMPORTED_MODULE_8__webgl_query__["a" /* default */](this.gl);
        }
        if (this.lastQueryReturned) {
          this.lastQueryReturned = false;
          this.timeElapsedQuery.beginTimeElapsedQuery();
        }
      }
    }
  }, {
    key: '_timerQueryEnd',
    value: function _timerQueryEnd() {
      if (this.timerQueryEnabled === true) {
        this.timeElapsedQuery.end();
        // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false
        // should this be incorporated into Query object?
        if (this.timeElapsedQuery.isResultAvailable()) {
          this.lastQueryReturned = true;
          var elapsedTime = this.timeElapsedQuery.getResult();

          // Update stats (e.g. for seer)
          this.stats.lastFrameTime = elapsedTime;
          this.stats.accumulatedFrameTime += elapsedTime;
          this.stats.profileFrameCount++;
          this.stats.averageFrameTime = this.stats.accumulatedFrameTime / this.stats.profileFrameCount;

          // Log stats
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, 'program.id: ', this.program.id);
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, 'last frame time: ' + this.stats.lastFrameTime + 'ms');
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, 'average frame time ' + this.stats.averageFrameTime + 'ms');
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, 'accumulated frame time: ' + this.stats.accumulatedFrameTime + 'ms');
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(2, 'profile frame count: ' + this.stats.profileFrameCount);
        }
      }
    }

    // Makes sure buffers are created for all attributes
    // and that the program is updated with those buffers
    // TODO - do we need the separation between "attributes" and "buffers"
    // couldn't apps just create buffers directly?

  }, {
    key: '_createBuffersFromAttributeDescriptors',
    value: function _createBuffersFromAttributeDescriptors(attributes) {
      var gl = this.program.gl;


      for (var attributeName in attributes) {
        var attribute = attributes[attributeName];

        if (attribute instanceof __WEBPACK_IMPORTED_MODULE_0__webgl__["Buffer"]) {
          this.buffers[attributeName] = attribute;
        } else {
          // Autocreate a buffer
          this.buffers[attributeName] = this.buffers[attributeName] || new __WEBPACK_IMPORTED_MODULE_0__webgl__["Buffer"](gl, {
            target: attribute.isIndexed ? __WEBPACK_IMPORTED_MODULE_0__webgl__["GL"].ELEMENT_ARRAY_BUFFER : __WEBPACK_IMPORTED_MODULE_0__webgl__["GL"].ARRAY_BUFFER
          });

          var buffer = this.buffers[attributeName];
          buffer.setData({ data: attribute.value }).setDataLayout(attribute);
        }
      }

      return this;
    }
  }, {
    key: '_logAttributesAndUniforms',
    value: function _logAttributesAndUniforms() {
      var priority = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
      var uniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (__WEBPACK_IMPORTED_MODULE_4__utils__["log"].priority >= priority) {
        var attributeTable = this._getAttributesTable({
          header: 'Attributes ' + this.id,
          program: this.program,
          attributes: Object.assign({}, this.geometry.attributes, this.attributes)
        });
        __WEBPACK_IMPORTED_MODULE_4__utils__["log"].table(priority, attributeTable);

        var _getUniformsTable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_uniforms__["c" /* getUniformsTable */])({
          header: 'Uniforms ' + this.id,
          program: this.program,
          uniforms: Object.assign({}, this.uniforms, uniforms)
        }),
            table = _getUniformsTable.table,
            unusedTable = _getUniformsTable.unusedTable,
            unusedCount = _getUniformsTable.unusedCount;

        __WEBPACK_IMPORTED_MODULE_4__utils__["log"].table(priority, table);
        __WEBPACK_IMPORTED_MODULE_4__utils__["log"].log(priority, (unusedCount || 'No') + ' unused uniforms ', unusedTable);
      }

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__debug_seer_integration__["d" /* logModel */])(this, uniforms);
    }

    // Todo move to attributes manager

  }, {
    key: '_getAttributesTable',
    value: function _getAttributesTable() {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          attributes = _ref5.attributes,
          _ref5$header = _ref5.header,
          header = _ref5$header === undefined ? 'Attributes' : _ref5$header,
          instanced = _ref5.instanced,
          program = _ref5.program;

      __WEBPACK_IMPORTED_MODULE_9_assert___default()(program);
      var attributeLocations = program._attributeLocations;
      var table = _defineProperty({}, header, {});

      // Add used attributes
      for (var attributeName in attributeLocations) {
        var attribute = attributes[attributeName];
        var location = attributeLocations[attributeName];
        table[attributeName] = this._getAttributeEntry(attribute, location);
      }

      // Add any unused attributes
      for (var _attributeName in attributes) {
        var _attribute = attributes[_attributeName];
        if (!table[_attributeName]) {
          table[_attributeName] = this._getAttributeEntry(_attribute, null);
        }
      }

      return table;
    }
  }, {
    key: '_getAttributeEntry',
    value: function _getAttributeEntry(attribute, location) {
      var round = function round(num) {
        return Math.round(num * 10) / 10;
      };

      var type = 'NOT PROVIDED';
      var instanced = 0;
      var size = 'N/A';
      var verts = 'N/A';
      var bytes = 'N/A';
      var value = 'N/A';

      if (attribute && location === null) {
        location = attribute.isIndexed ? 'ELEMENT_ARRAY_BUFFER' : 'NOT USED';
      }

      if (attribute instanceof __WEBPACK_IMPORTED_MODULE_0__webgl__["Buffer"]) {
        var buffer = attribute;
        type = buffer.layout.type;
        instanced = buffer.layout.instanced;
        size = buffer.layout.size;
        verts = round(buffer.data.length / buffer.layout.size);
        bytes = buffer.data.length * buffer.data.BYTES_PER_ELEMENT;
      } else if (attribute) {
        type = attribute.value.constructor.name;
        instanced = attribute.instanced;
        size = attribute.size;
        verts = round(attribute.value.length / attribute.size);
        bytes = attribute.value.length * attribute.value.BYTES_PER_ELEMENT;
        value = attribute.value;
      }

      // Generate a type name by dropping Array from Float32Array etc.
      type = String(type).replace('Array', '');
      // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array
      var isInteger = type.indexOf('nt') !== -1;

      return {
        Location: '' + location + (instanced ? ' [instanced]' : ''),
        'Type Size x Verts = Bytes': type + ' ' + size + ' x ' + verts + ' = ' + bytes,
        Value: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["formatValue"])(value, { size: size, isInteger: isInteger })
      };
    }

    // DEPRECATED / REMOVED

  }, {
    key: 'isPickable',
    value: function isPickable() {
      return this.pickable;
    }
  }, {
    key: 'setPickable',
    value: function setPickable() {
      var pickable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this.pickable = Boolean(pickable);
      return this;
    }
  }, {
    key: 'getGeometry',
    value: function getGeometry() {
      return this.geometry;
    }
  }]);

  return Model;
}(__WEBPACK_IMPORTED_MODULE_3__core_object_3d__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Model);
//# sourceMappingURL=model.js.map

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var TruncatedConeGeometry = /*#__PURE__*/function (_Geometry) {
  _inherits(TruncatedConeGeometry, _Geometry);

  // Primitives inspired by TDL http://code.google.com/p/webglsamples/,
  // copyright 2011 Google Inc. new BSD License
  // (http://www.opensource.org/licenses/bsd-license.php).
  /* eslint-disable max-statements, complexity */
  function TruncatedConeGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TruncatedConeGeometry);

    var _opts$bottomRadius = opts.bottomRadius,
        bottomRadius = _opts$bottomRadius === undefined ? 0 : _opts$bottomRadius,
        _opts$topRadius = opts.topRadius,
        topRadius = _opts$topRadius === undefined ? 0 : _opts$topRadius,
        _opts$height = opts.height,
        height = _opts$height === undefined ? 1 : _opts$height,
        _opts$nradial = opts.nradial,
        nradial = _opts$nradial === undefined ? 10 : _opts$nradial,
        _opts$nvertical = opts.nvertical,
        nvertical = _opts$nvertical === undefined ? 10 : _opts$nvertical,
        _opts$topCap = opts.topCap,
        topCap = _opts$topCap === undefined ? false : _opts$topCap,
        _opts$bottomCap = opts.bottomCap,
        bottomCap = _opts$bottomCap === undefined ? false : _opts$bottomCap;


    var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);
    var numVertices = (nradial + 1) * (nvertical + 1 + extra);

    var slant = Math.atan2(bottomRadius - topRadius, height);
    var msin = Math.sin;
    var mcos = Math.cos;
    var mpi = Math.PI;
    var cosSlant = mcos(slant);
    var sinSlant = msin(slant);
    var start = topCap ? -2 : 0;
    var end = nvertical + (bottomCap ? 2 : 0);
    var vertsAroundEdge = nradial + 1;

    var positions = new Float32Array(numVertices * 3);
    var normals = new Float32Array(numVertices * 3);
    var texCoords = new Float32Array(numVertices * 2);
    var indices = new Uint16Array(nradial * (nvertical + extra) * 6);

    var i3 = 0;
    var i2 = 0;
    for (var i = start; i <= end; i++) {
      var v = i / nvertical;
      var y = height * v;
      var ringRadius = void 0;

      if (i < 0) {
        y = 0;
        v = 1;
        ringRadius = bottomRadius;
      } else if (i > nvertical) {
        y = height;
        v = 1;
        ringRadius = topRadius;
      } else {
        ringRadius = bottomRadius + (topRadius - bottomRadius) * (i / nvertical);
      }
      if (i === -2 || i === nvertical + 2) {
        ringRadius = 0;
        v = 0;
      }
      y -= height / 2;
      for (var j = 0; j < vertsAroundEdge; j++) {
        var sin = msin(j * mpi * 2 / nradial);
        var cos = mcos(j * mpi * 2 / nradial);

        positions[i3 + 0] = sin * ringRadius;
        positions[i3 + 1] = y;
        positions[i3 + 2] = cos * ringRadius;

        normals[i3 + 0] = i < 0 || i > nvertical ? 0 : sin * cosSlant;
        normals[i3 + 1] = i < 0 ? -1 : i > nvertical ? 1 : sinSlant;
        normals[i3 + 2] = i < 0 || i > nvertical ? 0 : cos * cosSlant;

        texCoords[i2 + 0] = j / nradial;
        texCoords[i2 + 1] = v;

        i2 += 2;
        i3 += 3;
      }
    }

    for (var _i = 0; _i < nvertical + extra; _i++) {
      for (var _j = 0; _j < nradial; _j++) {
        var index = (_i * nradial + _j) * 6;
        indices[index + 0] = vertsAroundEdge * (_i + 0) + 0 + _j;
        indices[index + 1] = vertsAroundEdge * (_i + 0) + 1 + _j;
        indices[index + 2] = vertsAroundEdge * (_i + 1) + 1 + _j;
        indices[index + 3] = vertsAroundEdge * (_i + 0) + 0 + _j;
        indices[index + 4] = vertsAroundEdge * (_i + 1) + 1 + _j;
        indices[index + 5] = vertsAroundEdge * (_i + 1) + 0 + _j;
      }
    }

    return _possibleConstructorReturn(this, (TruncatedConeGeometry.__proto__ || Object.getPrototypeOf(TruncatedConeGeometry)).call(this, Object.assign({}, opts, {
      attributes: {
        positions: positions,
        normals: normals,
        texCoords: texCoords,
        indices: indices
      }
    })));
  }

  return TruncatedConeGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__geometry__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (TruncatedConeGeometry);
//# sourceMappingURL=truncated-cone-geometry.js.map

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_is_browser__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_globals__ = __webpack_require__(88);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_log__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__package_json__ = __webpack_require__(226);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__package_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__package_json__);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "global", function() { return __WEBPACK_IMPORTED_MODULE_1__utils_globals__["b"]; });



// Version detection
// TODO - this imports a rather large JSON file, we only need one field


var STARTUP_MESSAGE = 'Assign luma.log.priority in console to control logging: 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\nluma.log.break[], set to gl funcs, luma.log.profile[] set to model names';

if (__WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma && __WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma.VERSION !== __WEBPACK_IMPORTED_MODULE_3__package_json__["version"]) {
  throw new Error('luma.gl - multiple versions detected: ' + __WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma.VERSION + ' vs ' + __WEBPACK_IMPORTED_MODULE_3__package_json__["version"]);
}

if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma) {
  /* global console */
  /* eslint-disable no-console */
  if (__WEBPACK_IMPORTED_MODULE_0__utils_is_browser__["a" /* isBrowser */]) {
    console.log('luma.gl ' + __WEBPACK_IMPORTED_MODULE_3__package_json__["version"] + ' - ' + STARTUP_MESSAGE);
  }

  __WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma = __WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma || {
    VERSION: __WEBPACK_IMPORTED_MODULE_3__package_json__["version"],
    version: __WEBPACK_IMPORTED_MODULE_3__package_json__["version"],
    log: __WEBPACK_IMPORTED_MODULE_2__utils_log__["a" /* default */],

    // A global stats object that various components can add information to
    // E.g. see webgl/resource.js
    stats: {},

    // Keep some luma globals in a sub-object
    // This allows us to dynamically detect if certain modules have been
    // included (such as IO and headless) and enable related functionality,
    // without unconditionally requiring and thus bundling big dependencies
    // into the app.
    globals: {
      headlessGL: null,
      headlessTypes: null,
      modules: {},
      nodeIO: {}
    }
  };
}


/* harmony default export */ __webpack_exports__["default"] = (__WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* global */].luma);
//# sourceMappingURL=init.js.map

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = clear;
/* harmony export (immutable) */ __webpack_exports__["a"] = clearBuffer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context_state__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();





// Should collapse during minification
var GL_DEPTH_BUFFER_BIT = 0x00000100;
var GL_STENCIL_BUFFER_BIT = 0x00000400;
var GL_COLOR_BUFFER_BIT = 0x00004000;

var GL_COLOR = 0x1800;
var GL_DEPTH = 0x1801;
var GL_STENCIL = 0x1802;
var GL_DEPTH_STENCIL = 0x84F9;

// Should disappear if asserts are removed
var ERR_ARGUMENTS = 'clear: bad arguments';

// Optionally clears depth, color and stencil buffers
function clear(gl) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$framebuffer = _ref.framebuffer,
      framebuffer = _ref$framebuffer === undefined ? null : _ref$framebuffer,
      _ref$color = _ref.color,
      color = _ref$color === undefined ? null : _ref$color,
      _ref$depth = _ref.depth,
      depth = _ref$depth === undefined ? null : _ref$depth,
      _ref$stencil = _ref.stencil,
      stencil = _ref$stencil === undefined ? null : _ref$stencil;

  var parameters = {
    nocatch: false,
    framebuffer: framebuffer
  };
  var clearFlags = 0;

  if (color) {
    clearFlags |= GL_COLOR_BUFFER_BIT;
    if (color !== true) {
      parameters.clearColor = color;
    }
  }

  if (depth) {
    clearFlags |= GL_DEPTH_BUFFER_BIT;
    if (depth !== true) {
      parameters.clearDepth = depth;
    }
  }

  if (stencil) {
    clearFlags |= GL_STENCIL_BUFFER_BIT;
    if (depth !== true) {
      parameters.clearStencil = depth;
    }
  }

  __WEBPACK_IMPORTED_MODULE_2_assert___default()(clearFlags !== 0, ERR_ARGUMENTS);

  // Temporarily set any clear "colors" and call clear
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context_state__["b" /* withParameters */])(gl, parameters, function () {
    gl.clear(clearFlags);
  });
}

// WebGL2 - clear a specific drawing buffer
function clearBuffer(gl) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$framebuffer = _ref2.framebuffer,
      framebuffer = _ref2$framebuffer === undefined ? null : _ref2$framebuffer,
      _ref2$buffer = _ref2.buffer,
      buffer = _ref2$buffer === undefined ? GL_COLOR : _ref2$buffer,
      _ref2$drawBuffer = _ref2.drawBuffer,
      drawBuffer = _ref2$drawBuffer === undefined ? 0 : _ref2$drawBuffer,
      _ref2$value = _ref2.value,
      value = _ref2$value === undefined ? [0, 0, 0, 0] : _ref2$value;

  __WEBPACK_IMPORTED_MODULE_2_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__context__["b" /* isWebGL2 */])(gl), __WEBPACK_IMPORTED_MODULE_0__context__["e" /* ERR_WEBGL2 */]);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context_state__["b" /* withParameters */])(gl, { framebuffer: framebuffer }, function () {

    // Method selection per OpenGL ES 3 docs
    switch (buffer) {
      case GL_COLOR:
        switch (value.constructor) {
          case Int32Array:
            gl.clearBufferiv(buffer, drawBuffer, value);
            break;
          case Uint32Array:
            gl.clearBufferuiv(buffer, drawBuffer, value);
            break;
          case Float32Array:
          default:
            gl.clearBufferfv(buffer, drawBuffer, value);
        }
        break;

      case GL_DEPTH:
        gl.clearBufferfv(GL_DEPTH, 0, [value]);
        break;

      case GL_STENCIL:
        gl.clearBufferiv(GL_STENCIL, 0, [value]);
        break;

      case GL_DEPTH_STENCIL:
        var _value = _slicedToArray(value, 2),
            depth = _value[0],
            stencil = _value[1];

        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);
        break;

      default:
        __WEBPACK_IMPORTED_MODULE_2_assert___default()(false, ERR_ARGUMENTS);
    }
  });
}
//# sourceMappingURL=clear.js.map

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return FEATURES; });
/* harmony export (immutable) */ __webpack_exports__["b"] = hasFeature;
/* harmony export (immutable) */ __webpack_exports__["d"] = hasFeatures;
/* harmony export (immutable) */ __webpack_exports__["a"] = getFeatures;
/* unused harmony export TEST_EXPORTS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_assert__);
// Feature detection for WebGL
//
// Provides a function that enables simple checking of which WebGL features are
// available in an WebGL1 or WebGL2 environment.

/* eslint-disable no-inline-comments, max-len */



// Defines luma.gl "feature" names and semantics
var WEBGL_FEATURES = {
  // API SUPPORT
  VERTEX_ARRAY_OBJECT: ['OES_vertex_array_object', true],
  TIMER_QUERY: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],
  INSTANCED_RENDERING: ['ANGLE_instanced_arrays', true],
  MULTIPLE_RENDER_TARGETS: ['WEBGL_draw_buffers', true],

  // FEATURES
  ELEMENT_INDEX_UINT32: ['OES_element_index_uint', true],
  BLEND_EQUATION_MINMAX: ['EXT_blend_minmax', true],

  // TEXTURES, RENDERBUFFERS
  COLOR_ENCODING_SRGB: ['EXT_sRGB', true],

  // TEXTURES
  TEXTURE_DEPTH: ['WEBGL_depth_texture', true],
  TEXTURE_FLOAT: ['OES_texture_float', true],
  TEXTURE_HALF_FLOAT: ['OES_texture_half_float', true],

  TEXTURE_FILTER_LINEAR_FLOAT: ['OES_texture_float_linear'],
  TEXTURE_FILTER_LINEAR_HALF_FLOAT: ['OES_texture_half_float_linear'],
  TEXTURE_FILTER_ANISOTROPIC: ['EXT_texture_filter_anisotropic'],

  // FRAMEBUFFERS, TEXTURES AND RENDERBUFFERS
  COLOR_ATTACHMENT_RGBA32F: ['WEBGL_color_buffer_float', 'EXT_color_buffer_float'],
  COLOR_ATTACHMENT_FLOAT: [false, 'EXT_color_buffer_float'],
  COLOR_ATTACHMENT_HALF_FLOAT: [false, 'EXT_color_buffer_half_float'],

  // GLSL extensions
  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true],
  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],
  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],
  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]
};

// Create a key-mirrored FEATURES array
var FEATURES = {};
Object.keys(WEBGL_FEATURES).forEach(function (key) {
  FEATURES[key] = key;
});


// TODO - cache the value
function getFeature(gl, cap) {
  var feature = WEBGL_FEATURES[cap];
  __WEBPACK_IMPORTED_MODULE_1_assert___default()(feature, cap);

  // Get extension name from table
  var extensionName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__context__["b" /* isWebGL2 */])(gl) ? feature[1] || feature[0] : feature[0];

  // Check if the value is dependent on checking an extension
  var value = typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;

  __WEBPACK_IMPORTED_MODULE_1_assert___default()(value === false || value === true);

  return value;
}

// capability can be a WebGL extension name or a luma capability name
function hasFeature(gl, feature) {
  return hasFeatures(gl, feature);
}

function hasFeatures(gl, features) {
  features = Array.isArray(features) ? features : [features];
  return features.every(function (feature) {
    return getFeature(gl, feature);
  });
}

function getFeatures(gl) {
  gl.luma = gl.luma || {};

  if (!gl.luma.caps) {
    gl.luma.caps = {};
    gl.luma.caps.webgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__context__["b" /* isWebGL2 */])(gl);
    for (var cap in WEBGL_FEATURES) {
      gl.luma.caps[cap] = getFeature(gl, cap);
    }
  }
  return gl.luma.caps;
}

var TEST_EXPORTS = {
  WEBGL_FEATURES: WEBGL_FEATURES
};
//# sourceMappingURL=context-features.js.map

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clear__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context_features__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__texture_2d__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__renderbuffer__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_typed_array_utils__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_assert__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }












// Local constants - will collapse during minification
var GL_FRAMEBUFFER = 0x8D40;
var GL_DRAW_FRAMEBUFFER = 0x8CA8;
var GL_READ_FRAMEBUFFER = 0x8CA9;

var GL_COLOR_ATTACHMENT0 = 0x8CE0;
var GL_DEPTH_ATTACHMENT = 0x8D00;
var GL_STENCIL_ATTACHMENT = 0x8D20;
// const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;

var GL_RENDERBUFFER = 0x8D41;

var GL_TEXTURE_3D = 0x806F;
var GL_TEXTURE_2D_ARRAY = 0x8C1A;
var GL_TEXTURE_2D = 0x0DE1;
var GL_TEXTURE_CUBE_MAP = 0x8513;

var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;

var GL_DEPTH_BUFFER_BIT = 0x00000100;
var GL_STENCIL_BUFFER_BIT = 0x00000400;
var GL_COLOR_BUFFER_BIT = 0x00004000;

var ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';

var Framebuffer = /*#__PURE__*/function (_Resource) {
  _inherits(Framebuffer, _Resource);

  _createClass(Framebuffer, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          colorBufferFloat = _ref.colorBufferFloat,
          colorBufferHalfFloat = _ref.colorBufferHalfFloat;

      var supported = true;
      supported = colorBufferFloat && gl.getExtension(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl) ? 'EXT_color_buffer_float' : 'WEBGL_color_buffer_float');
      supported = colorBufferHalfFloat && gl.getExtension(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');
      return supported;
    }
  }]);

  function Framebuffer(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Framebuffer);

    // Public members
    var _this = _possibleConstructorReturn(this, (Framebuffer.__proto__ || Object.getPrototypeOf(Framebuffer)).call(this, gl, opts));

    _this.width = null;
    _this.height = null;
    _this.attachments = {};
    _this.readBuffer = GL_COLOR_ATTACHMENT0;
    _this.drawBuffers = [GL_COLOR_ATTACHMENT0];
    _this.initialize(opts);

    Object.seal(_this);
    return _this;
  }

  _createClass(Framebuffer, [{
    key: 'initialize',
    value: function initialize(_ref2) {
      var _ref2$width = _ref2.width,
          width = _ref2$width === undefined ? 1 : _ref2$width,
          _ref2$height = _ref2.height,
          height = _ref2$height === undefined ? 1 : _ref2$height,
          _ref2$attachments = _ref2.attachments,
          attachments = _ref2$attachments === undefined ? null : _ref2$attachments,
          _ref2$color = _ref2.color,
          color = _ref2$color === undefined ? true : _ref2$color,
          _ref2$depth = _ref2.depth,
          depth = _ref2$depth === undefined ? true : _ref2$depth,
          _ref2$stencil = _ref2.stencil,
          stencil = _ref2$stencil === undefined ? false : _ref2$stencil,
          _ref2$check = _ref2.check,
          check = _ref2$check === undefined ? true : _ref2$check,
          readBuffer = _ref2.readBuffer,
          drawBuffers = _ref2.drawBuffers;

      __WEBPACK_IMPORTED_MODULE_9_assert___default()(width >= 0 && height >= 0, 'Width and height need to be integers');

      // Store actual width and height for diffing
      this.width = width;
      this.height = height;

      // Resize any provided attachments - note that resize only resizes if needed
      // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)
      if (attachments) {
        for (var attachment in attachments) {
          var target = attachments[attachment];
          var object = Array.isArray(target) ? target[0] : target;
          object.resize({ width: width, height: height });
        }
      } else {
        // Create any requested default attachments
        attachments = this._createDefaultAttachments({ color: color, depth: depth, stencil: stencil, width: width, height: height });
      }

      this.update({ clearAttachments: true, attachments: attachments, readBuffer: readBuffer, drawBuffers: drawBuffers });

      // Checks that framebuffer was properly set up, if not, throws an explanatory error
      if (attachments && check) {
        this.checkStatus();
      }
    }
  }, {
    key: 'update',
    value: function update(_ref3) {
      var _ref3$attachments = _ref3.attachments,
          attachments = _ref3$attachments === undefined ? {} : _ref3$attachments,
          readBuffer = _ref3.readBuffer,
          drawBuffers = _ref3.drawBuffers,
          _ref3$clearAttachment = _ref3.clearAttachments,
          clearAttachments = _ref3$clearAttachment === undefined ? false : _ref3$clearAttachment;

      this.attach(attachments, { clearAttachments: clearAttachments });

      var gl = this.gl;
      // Multiple render target support, set read buffer and draw buffers

      gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);
      if (readBuffer) {
        this._setReadBuffer(readBuffer);
      }
      if (drawBuffers) {
        this._setDrawBuffers(drawBuffers);
      }
      gl.bindFramebuffer(GL_FRAMEBUFFER, null);

      return this;
    }

    // Attachment resize is expected to be a noop if size is same

  }, {
    key: 'resize',
    value: function resize(_ref4) {
      var width = _ref4.width,
          height = _ref4.height;

      __WEBPACK_IMPORTED_MODULE_8__utils__["log"].log(2, 'Resizing framebuffer ' + this.id + ' to ' + width + 'x' + height);
      for (var attachmentPoint in this.attachments) {
        this.attachments[attachmentPoint].resize({ width: width, height: height });
      }
      this.width = width;
      this.height = height;
      return this;
    }

    // Attach from a map of attachments

  }, {
    key: 'attach',
    value: function attach(attachments) {
      var _this2 = this;

      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref5$clearAttachment = _ref5.clearAttachments,
          clearAttachments = _ref5$clearAttachment === undefined ? false : _ref5$clearAttachment;

      var newAttachments = {};

      // Any current attachments need to be removed, add null values to map
      if (clearAttachments) {
        Object.keys(this.attachments).forEach(function (key) {
          newAttachments[key] = null;
        });
      }

      // Overlay the new attachments
      Object.assign(newAttachments, attachments);

      this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);

      // Walk the attachments
      for (var attachment in newAttachments) {
        // Ensure key is not undefined
        __WEBPACK_IMPORTED_MODULE_9_assert___default()(attachment !== 'undefined', 'Misspelled framebuffer binding point?');

        var descriptor = newAttachments[attachment];
        var object = descriptor;
        if (!object) {
          this._unattach({ attachment: attachment });
        } else if (object instanceof __WEBPACK_IMPORTED_MODULE_6__renderbuffer__["a" /* default */]) {
          this._attachRenderbuffer({ attachment: attachment, renderbuffer: object });
        } else if (Array.isArray(descriptor)) {
          var _descriptor = _slicedToArray(descriptor, 3),
              texture = _descriptor[0],
              _descriptor$ = _descriptor[1],
              layer = _descriptor$ === undefined ? 0 : _descriptor$,
              _descriptor$2 = _descriptor[2],
              level = _descriptor$2 === undefined ? 0 : _descriptor$2;

          object = texture;
          this._attachTexture({ attachment: attachment, texture: texture, layer: layer, level: level });
        } else {
          this._attachTexture({ attachment: attachment, texture: object, layer: 0, level: 0 });
        }

        // Resize objects
        if (object) {
          object.resize({ width: this.width, height: this.height });
        }
      }

      this.gl.bindFramebuffer(GL_FRAMEBUFFER, null);

      // Assign to attachments and remove any nulls to get a clean attachment map
      Object.assign(this.attachments, attachments);
      Object.keys(this.attachments).filter(function (key) {
        return !_this2.attachments[key];
      }).forEach(function (key) {
        delete _this2.attachments[key];
      });
    }
  }, {
    key: 'checkStatus',
    value: function checkStatus() {
      var gl = this.gl;

      gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);
      var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER);
      gl.bindFramebuffer(GL_FRAMEBUFFER, null);
      if (status !== gl.FRAMEBUFFER_COMPLETE) {
        throw new Error(_getFrameBufferStatus(status));
      }
      return this;
    }
  }, {
    key: 'clear',
    value: function clear() {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          color = _ref6.color,
          depth = _ref6.depth,
          stencil = _ref6.stencil,
          _ref6$drawBuffers = _ref6.drawBuffers,
          drawBuffers = _ref6$drawBuffers === undefined ? [] : _ref6$drawBuffers;

      // Bind framebuffer and delegate to global clear functions
      this.gl.bindFramebuffer(GL_FRAMEBUFFER, this.handle);

      if (color || depth || stencil) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__clear__["b" /* clear */])(this.gl, { color: color, depth: depth, stencil: stencil });
      }

      drawBuffers.forEach(function (value, drawBuffer) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__clear__["a" /* clearBuffer */])({ drawBuffer: drawBuffer, value: value });
      });

      this.gl.bindFramebuffer(GL_FRAMEBUFFER, null);

      return this;
    }

    // NOTE: Slow requires roundtrip to GPU
    // App can provide pixelArray or have it auto allocated by this method
    // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,
    //  newly allocated by this method unless provided by app.

  }, {
    key: 'readPixels',
    value: function readPixels(_ref7) {
      var _ref7$x = _ref7.x,
          x = _ref7$x === undefined ? 0 : _ref7$x,
          _ref7$y = _ref7.y,
          y = _ref7$y === undefined ? 0 : _ref7$y,
          width = _ref7.width,
          height = _ref7.height,
          _ref7$format = _ref7.format,
          format = _ref7$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA : _ref7$format,
          type = _ref7.type,
          _ref7$pixelArray = _ref7.pixelArray,
          pixelArray = _ref7$pixelArray === undefined ? null : _ref7$pixelArray;
      var gl = this.gl;

      // Deduce type and allocated pixelArray if needed

      if (!pixelArray) {
        // Allocate pixel array if not already available, using supplied type
        type = type || gl.UNSIGNED_BYTE;
        var ArrayType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_typed_array_utils__["a" /* getTypedArrayFromGLType */])(type, { clamped: false });
        var components = glFormatToComponents(format);
        // TODO - check for composite type (components = 1).
        pixelArray = pixelArray || new ArrayType(width * height * components);
      }

      // Pixel array available, if necessary, deduce type from it.
      type = type || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_typed_array_utils__["b" /* getGLTypeFromTypedArray */])(pixelArray);

      this.bind();
      this.gl.readPixels(x, y, width, height, format, type, pixelArray);
      this.unbind();

      return pixelArray;
    }

    /**
     * Copy from framebuffer into a texture
     */

  }, {
    key: 'copyToTexture',
    value: function copyToTexture(_ref8) {
      var srcFramebuffer = _ref8.srcFramebuffer,
          x = _ref8.x,
          y = _ref8.y,
          width = _ref8.width,
          height = _ref8.height,
          texture = _ref8.texture,
          _ref8$xoffset = _ref8.xoffset,
          xoffset = _ref8$xoffset === undefined ? 0 : _ref8$xoffset,
          _ref8$yoffset = _ref8.yoffset,
          yoffset = _ref8$yoffset === undefined ? 0 : _ref8$yoffset,
          _ref8$zoffset = _ref8.zoffset,
          zoffset = _ref8$zoffset === undefined ? 0 : _ref8$zoffset,
          _ref8$mipmapLevel = _ref8.mipmapLevel,
          mipmapLevel = _ref8$mipmapLevel === undefined ? 0 : _ref8$mipmapLevel,
          _ref8$internalFormat = _ref8.internalFormat,
          internalFormat = _ref8$internalFormat === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA : _ref8$internalFormat,
          _ref8$border = _ref8.border,
          border = _ref8$border === undefined ? 0 : _ref8$border;
      var gl = this.gl;

      gl.bindFramebuffer(GL_FRAMEBUFFER, srcFramebuffer.handle);

      // target
      switch (texture.target) {
        case GL_TEXTURE_2D:
        case GL_TEXTURE_CUBE_MAP:
          gl.copyTexSubImage2D(texture.target, mipmapLevel, internalFormat, x, y, texture.width, texture.height);
          break;
        case GL_TEXTURE_2D_ARRAY:
        case GL_TEXTURE_3D:
          gl.copyTexSubImage3D(texture.target, mipmapLevel, internalFormat, x, y, texture.width, texture.height);
          break;
        default:
      }

      gl.bindFramebuffer(GL_FRAMEBUFFER, null);
      return this;
    }

    // WEBGL2 INTERFACE

    // Copies a rectangle of pixels between framebuffers

  }, {
    key: 'blit',
    value: function blit(_ref9) {
      var srcFramebuffer = _ref9.srcFramebuffer,
          srcX0 = _ref9.srcX0,
          srcY0 = _ref9.srcY0,
          srcX1 = _ref9.srcX1,
          srcY1 = _ref9.srcY1,
          dstX0 = _ref9.dstX0,
          dstY0 = _ref9.dstY0,
          dstX1 = _ref9.dstX1,
          dstY1 = _ref9.dstY1,
          color = _ref9.color,
          depth = _ref9.depth,
          stencil = _ref9.stencil,
          _ref9$mask = _ref9.mask,
          mask = _ref9$mask === undefined ? 0 : _ref9$mask,
          _ref9$filter = _ref9.filter,
          filter = _ref9$filter === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].NEAREST : _ref9$filter;
      var gl = this.gl;

      __WEBPACK_IMPORTED_MODULE_9_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl), __WEBPACK_IMPORTED_MODULE_1__context__["e" /* ERR_WEBGL2 */]);

      if (color) {
        mask |= GL_COLOR_BUFFER_BIT;
      }
      if (depth) {
        mask |= GL_DEPTH_BUFFER_BIT;
      }
      if (stencil) {
        mask |= GL_STENCIL_BUFFER_BIT;
      }

      gl.bindFramebuffer(GL_READ_FRAMEBUFFER, srcFramebuffer.handle);
      gl.bindFramebuffer(GL_DRAW_FRAMEBUFFER, this.handle);
      gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
      gl.bindFramebuffer(GL_DRAW_FRAMEBUFFER, null);
      gl.bindFramebuffer(GL_READ_FRAMEBUFFER, null);
      return this;
    }

    // signals to the GL that it need not preserve all pixels of a specified region
    // of the framebuffer

  }, {
    key: 'invalidate',
    value: function invalidate(_ref10) {
      var _ref10$attachments = _ref10.attachments,
          attachments = _ref10$attachments === undefined ? [] : _ref10$attachments,
          _ref10$x = _ref10.x,
          x = _ref10$x === undefined ? 0 : _ref10$x,
          _ref10$y = _ref10.y,
          y = _ref10$y === undefined ? 0 : _ref10$y,
          width = _ref10.width,
          height = _ref10.height;
      var gl = this.gl;

      __WEBPACK_IMPORTED_MODULE_9_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl, __WEBPACK_IMPORTED_MODULE_1__context__["e" /* ERR_WEBGL2 */]));
      gl.bindFramebuffer(GL_READ_FRAMEBUFFER, this.handle);
      var invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;
      if (invalidateAll) {
        gl.invalidateFramebuffer(GL_READ_FRAMEBUFFER, attachments);
      } else {
        gl.invalidateFramebuffer(GL_READ_FRAMEBUFFER, attachments, x, y, width, height);
      }
      gl.bindFramebuffer(GL_READ_FRAMEBUFFER, null);
      return this;
    }

    // Return the value for the passed pname given the target and attachment.
    // The type returned is the natural type for the requested pname:
    // pname returned type
    // If an OpenGL error is generated, returns null.

  }, {
    key: 'getAttachmentParameter',
    value: function getAttachmentParameter() {
      var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref11$target = _ref11.target,
          target = _ref11$target === undefined ? this.target : _ref11$target,
          _ref11$attachment = _ref11.attachment,
          attachment = _ref11$attachment === undefined ? GL_COLOR_ATTACHMENT0 : _ref11$attachment,
          pname = _ref11.pname;

      var fallback = this._getAttachmentParameterFallback(pname);
      return fallback !== null ? fallback : this.gl.getFramebufferAttachmentParameter(target, attachment, pname);
    }
  }, {
    key: 'getAttachmentParameters',
    value: function getAttachmentParameters() {
      var attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : GL_COLOR_ATTACHMENT0;
      var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.ATTACHMENT_PARAMETERS || {};

      var values = {};
      for (var pname in parameters) {
        values[pname] = this.getParameter(pname);
      }
      return this;
    }

    // WEBGL INTERFACE

  }, {
    key: 'bind',
    value: function bind() {
      var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref12$target = _ref12.target,
          target = _ref12$target === undefined ? GL_FRAMEBUFFER : _ref12$target;

      this.gl.bindFramebuffer(target, this.handle);
      return this;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref13$target = _ref13.target,
          target = _ref13$target === undefined ? GL_FRAMEBUFFER : _ref13$target;

      this.gl.bindFramebuffer(target, null);
      return this;
    }

    // PRIVATE METHODS

  }, {
    key: '_createDefaultAttachments',
    value: function _createDefaultAttachments(_ref14) {
      var color = _ref14.color,
          depth = _ref14.depth,
          stencil = _ref14.stencil,
          width = _ref14.width,
          height = _ref14.height;

      var defaultAttachments = null;

      // Add a color buffer if requested and not supplied
      if (color) {
        var _parameters;

        defaultAttachments = defaultAttachments || {};
        defaultAttachments[GL_COLOR_ATTACHMENT0] = new __WEBPACK_IMPORTED_MODULE_5__texture_2d__["a" /* default */](this.gl, {
          data: null, // reserves texture memory, but texels are undefined
          format: __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA,
          type: __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_BYTE,
          width: width,
          height: height,
          // Note: Mipmapping can be disabled by texture resource when we resize the texture
          // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant
          // behavior we always disable mipmaps.
          mipmaps: false,
          // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.
          // Set WRAP modes that support NPOT textures too.
          parameters: (_parameters = {}, _defineProperty(_parameters, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_MIN_FILTER, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].NEAREST), _defineProperty(_parameters, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_MAG_FILTER, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].NEAREST), _defineProperty(_parameters, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_WRAP_S, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].CLAMP_TO_EDGE), _defineProperty(_parameters, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_WRAP_T, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].CLAMP_TO_EDGE), _parameters)
        });
      }

      // Add a depth buffer if requested and not supplied
      if (depth) {
        defaultAttachments = defaultAttachments || {};
        defaultAttachments[GL_DEPTH_ATTACHMENT] = new __WEBPACK_IMPORTED_MODULE_6__renderbuffer__["a" /* default */](this.gl, {
          format: __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].DEPTH_COMPONENT16,
          width: width,
          height: height
        });
      }

      // TODO - handle stencil and combined depth and stencil

      return defaultAttachments;
    }
  }, {
    key: '_unattach',
    value: function _unattach(_ref15) {
      var attachment = _ref15.attachment;

      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);
      this.gl.framebufferRenderbuffer(GL_FRAMEBUFFER, attachment, GL_RENDERBUFFER, null);
      delete this.attachments[attachment];
    }
  }, {
    key: '_attachRenderbuffer',
    value: function _attachRenderbuffer(_ref16) {
      var _ref16$attachment = _ref16.attachment,
          attachment = _ref16$attachment === undefined ? GL_COLOR_ATTACHMENT0 : _ref16$attachment,
          renderbuffer = _ref16.renderbuffer;
      var gl = this.gl;
      // TODO - is the bind needed?
      // gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.handle);

      gl.framebufferRenderbuffer(GL_FRAMEBUFFER, attachment, GL_RENDERBUFFER, renderbuffer.handle);
      // TODO - is the unbind needed?
      // gl.bindRenderbuffer(GL_RENDERBUFFER, null);

      this.attachments[attachment] = renderbuffer;
    }

    // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`
    // level = 0 - mipmapLevel (must be 0 in WebGL1)

  }, {
    key: '_attachTexture',
    value: function _attachTexture(_ref17) {
      var _ref17$attachment = _ref17.attachment,
          attachment = _ref17$attachment === undefined ? GL_COLOR_ATTACHMENT0 : _ref17$attachment,
          texture = _ref17.texture,
          layer = _ref17.layer,
          level = _ref17.level;
      var gl = this.gl;

      gl.bindTexture(texture.target, texture.handle);

      switch (texture.target) {
        case GL_TEXTURE_2D_ARRAY:
        case GL_TEXTURE_3D:
          gl.framebufferTextureLayer(GL_FRAMEBUFFER, attachment, texture.target, level, layer);
          break;

        case GL_TEXTURE_CUBE_MAP:
          // layer must be a cubemap face (or if index, converted to cube map face)
          var face = mapIndexToCubeMapFace(layer);
          gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, face, texture.handle, level);
          break;

        case GL_TEXTURE_2D:
          gl.framebufferTexture2D(GL_FRAMEBUFFER, attachment, GL_TEXTURE_2D, texture.handle, level);
          break;

        default:
          __WEBPACK_IMPORTED_MODULE_9_assert___default()(false, 'Illegal texture type');
      }

      gl.bindTexture(texture.target, null);
      this.attachments[attachment] = texture;
    }

    // Expects framebuffer to be bound

  }, {
    key: '_setReadBuffer',
    value: function _setReadBuffer(gl, readBuffer) {
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl)) {
        gl.readBuffer(readBuffer);
      } else {
        // Setting to color attachment 0 is a noop, so allow it in WebGL1
        __WEBPACK_IMPORTED_MODULE_9_assert___default()(readBuffer === GL_COLOR_ATTACHMENT0 || readBuffer === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].BACK, ERR_MULTIPLE_RENDERTARGETS);
      }
      this.readBuffer = readBuffer;
    }

    // Expects framebuffer to be bound

  }, {
    key: '_setDrawBuffers',
    value: function _setDrawBuffers(gl, drawBuffers) {
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl)) {
        gl.drawBuffers(drawBuffers);
      } else {
        var ext = gl.getExtension('WEBGL_draw_buffers');
        if (ext) {
          ext.drawBuffersWEBGL(drawBuffers);
        } else {
          // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1
          __WEBPACK_IMPORTED_MODULE_9_assert___default()(drawBuffers.length === 1 && (drawBuffers[0] === GL_COLOR_ATTACHMENT0 || drawBuffers[0] === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].BACK), ERR_MULTIPLE_RENDERTARGETS);
        }
      }
      this.drawBuffers = drawBuffers;
    }

    // Attempt to provide workable defaults for WebGL2 symbols under WebGL1
    // null means OK to query
    /* eslint-disable complexity */

  }, {
    key: '_getAttachmentParameterFallback',
    value: function _getAttachmentParameterFallback(pname) {
      var caps = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context_features__["a" /* getFeatures */])(this.gl);

      switch (pname) {
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:
          // GLint
          return !caps.webgl2 ? 0 : null;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:
          // GLint
          return !caps.webgl2 ? 8 : null;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:
          // GLenum
          return !caps.webgl2 ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_INT : null;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:
          return !caps.webgl2 && !caps.EXT_sRGB ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].LINEAR : null;
        default:
          return null;
      }
    }
    /* eslint-enable complexity */

    // RESOURCE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createFramebuffer();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteFramebuffer(this.handle);
    }
  }, {
    key: 'color',
    get: function get() {
      return this.attachments[GL_COLOR_ATTACHMENT0] || null;
    }
  }, {
    key: 'texture',
    get: function get() {
      return this.attachments[GL_COLOR_ATTACHMENT0] || null;
    }
  }, {
    key: 'depth',
    get: function get() {
      return this.attachments[GL_DEPTH_ATTACHMENT] || null;
    }
  }, {
    key: 'stencil',
    get: function get() {
      return this.attachments[GL_STENCIL_ATTACHMENT] || null;
    }
  }]);

  return Framebuffer;
}(__WEBPACK_IMPORTED_MODULE_4__resource__["a" /* default */]);

// PUBLIC METHODS

// Map an index to a cube map face constant


/* harmony default export */ __webpack_exports__["a"] = (Framebuffer);
function mapIndexToCubeMapFace(layer) {
  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)
  // if smaller assume layer is index, otherwise assume it is already a cube map face constant
  return layer < GL_TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL_TEXTURE_CUBE_MAP_POSITIVE_X : layer;
}

// Returns number of components in a specific WebGL format
function glFormatToComponents(format) {
  switch (format) {
    case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ALPHA:
      return 1;
    case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGB:
      return 3;
    case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA:
      return 4;
    default:
      throw new Error('Unknown format');
  }
}

// Get a string describing the framebuffer error if installed
function _getFrameBufferStatus(status) {
  // Use error mapping if installed
  var STATUS = Framebuffer.STATUS || {};
  return STATUS[status] || 'Framebuffer error ' + status;
}
//# sourceMappingURL=framebuffer.js.map

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export RENDERBUFFER_FORMATS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _RENDERBUFFER_FORMATS;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-inline-comments */





// Define local GL constants to optimize minification
var GL_RENDERBUFFER = 0x8D41;
var GL_SAMPLES = 0x80A9;
var GL_RENDERBUFFER_WIDTH = 0x8D42;
var GL_RENDERBUFFER_HEIGHT = 0x8D43;
var GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
var GL_RENDERBUFFER_SAMPLES = 0x8CAB;

// Define local extension strings to optimize minification
// const SRGB = 'EXT_sRGB';
// const CB_FLOAT_WEBGL1 = 'WEBGL_color_buffer_float';
var CB_FLOAT_WEBGL2 = 'EXT_color_buffer_float';
// const CB_HALF_FLOAT_WEBGL1 = 'EXT_color_buffer_half_float';

var RENDERBUFFER_FORMATS = (_RENDERBUFFER_FORMATS = {}, _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH_COMPONENT16, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH_COMPONENT24, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH_COMPONENT32F, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].STENCIL_INDEX8, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH_STENCIL, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH24_STENCIL8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].DEPTH32F_STENCIL8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA4, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB565, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB5_A1, {}), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R8UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R8I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R16UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R16I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R32UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R32I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG8UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG8I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG16UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG16I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG32UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG32I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA8, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB10_A2, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA8UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA8I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGB10_A2UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA16UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA16I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA32I, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA32UI, { gl2: true }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R16F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG16F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA16F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R32F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RG32F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RGBA32F, { gl2: CB_FLOAT_WEBGL2 }), _defineProperty(_RENDERBUFFER_FORMATS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].R11F_G11F_B10F, { gl2: CB_FLOAT_WEBGL2 }), _RENDERBUFFER_FORMATS);

function isFormatSupported(gl, format, formats) {
  // assert(isWebGL(gl), ERR_WEBGL);
  var info = formats[format];
  if (!info) {
    return false;
  }
  var value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl) ? info.gl2 || info.gl1 : info.gl1;
  if (typeof value === 'string') {
    return gl.getExtension(value);
  }
  return value;
}

var Renderbuffer = /*#__PURE__*/function (_Resource) {
  _inherits(Renderbuffer, _Resource);

  _createClass(Renderbuffer, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          format = _ref.format;

      return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);
    }
  }, {
    key: 'getSamplesForFormat',
    value: function getSamplesForFormat(gl, _ref2) {
      var format = _ref2.format;

      // Polyfilled to return [0] under WebGL1
      return gl.getInternalformatParameter(GL_RENDERBUFFER, format, GL_SAMPLES);
    }
  }]);

  function Renderbuffer(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Renderbuffer);

    var _this = _possibleConstructorReturn(this, (Renderbuffer.__proto__ || Object.getPrototypeOf(Renderbuffer)).call(this, gl, opts));

    _this.initialize(opts);
    Object.seal(_this);
    return _this;
  }

  // Creates and initializes a renderbuffer object's data store


  _createClass(Renderbuffer, [{
    key: 'initialize',
    value: function initialize(_ref3) {
      var format = _ref3.format,
          _ref3$width = _ref3.width,
          width = _ref3$width === undefined ? 1 : _ref3$width,
          _ref3$height = _ref3.height,
          height = _ref3$height === undefined ? 1 : _ref3$height,
          _ref3$samples = _ref3.samples,
          samples = _ref3$samples === undefined ? 0 : _ref3$samples;

      __WEBPACK_IMPORTED_MODULE_3_assert___default()(format, 'Needs format');
      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);

      if (samples !== 0 && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(this.gl)) {
        this.gl.renderbufferStorageMultisample(GL_RENDERBUFFER, samples, format, width, height);
      } else {
        this.gl.renderbufferStorage(GL_RENDERBUFFER, format, width, height);
      }

      // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);

      this.format = format;
      this.width = width;
      this.height = height;
      this.samples = samples;

      return this;
    }
  }, {
    key: 'resize',
    value: function resize(_ref4) {
      var width = _ref4.width,
          height = _ref4.height;

      // Don't resize if width/height haven't changed
      if (width !== this.width || height !== this.height) {
        return this.initialize({ width: width, height: height, format: this.format, samples: this.samples });
      }
      return this;
    }

    // PRIVATE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createRenderbuffer();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteRenderbuffer(this.handle);
    }
  }, {
    key: '_syncHandle',
    value: function _syncHandle(handle) {
      this.format = this.getParameter(GL_RENDERBUFFER_INTERNAL_FORMAT);
      this.width = this.getParameter(GL_RENDERBUFFER_WIDTH);
      this.height = this.getParameter(GL_RENDERBUFFER_HEIGHT);
      this.samples = this.getParameter(GL_RENDERBUFFER_SAMPLES);
    }

    // @param {Boolean} opt.autobind=true - method call will bind/unbind object
    // @returns {GLenum|GLint} - depends on pname

  }, {
    key: '_getParameter',
    value: function _getParameter(pname) {
      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);
      var value = this.gl.getRenderbufferParameter(GL_RENDERBUFFER, pname);
      // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);
      return value;
    }
  }]);

  return Renderbuffer;
}(__WEBPACK_IMPORTED_MODULE_2__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Renderbuffer);
//# sourceMappingURL=renderbuffer.js.map

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Shader */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VertexShader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return FragmentShader; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';

var GL_FRAGMENT_SHADER = 0x8B30;
var GL_VERTEX_SHADER = 0x8B31;
var GL_COMPILE_STATUS = 0x8B81;
var GL_SHADER_TYPE = 0x8B4F;

// For now this is an internal class
var Shader = /*#__PURE__*/function (_Resource) {
  _inherits(Shader, _Resource);

  _createClass(Shader, null, [{
    key: 'getTypeName',
    value: function getTypeName(shaderType) {
      switch (shaderType) {
        case GL_VERTEX_SHADER:
          return 'vertex-shader';
        case GL_FRAGMENT_SHADER:
          return 'fragment-shader';
        default:
          __WEBPACK_IMPORTED_MODULE_4_assert___default()(false);return 'unknown';
      }
    }

    /* eslint-disable max-statements */

  }]);

  function Shader(gl, source, shaderType) {
    _classCallCheck(this, Shader);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["f" /* assertWebGLContext */])(gl);
    __WEBPACK_IMPORTED_MODULE_4_assert___default()(typeof source === 'string', ERR_SOURCE);

    var _this = _possibleConstructorReturn(this, (Shader.__proto__ || Object.getPrototypeOf(Shader)).call(this, gl, { id: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl_utils__["e" /* getShaderName */])(source) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["uid"])(Shader.getTypeName(shaderType)) }));

    _this.shaderType = shaderType;
    _this.source = source;

    _this.opts.source = source;
    _this.initialize(_this.opts);
    return _this;
  }

  _createClass(Shader, [{
    key: 'initialize',
    value: function initialize(_ref) {
      var source = _ref.source;

      var shaderName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl_utils__["e" /* getShaderName */])(source);
      if (shaderName) {
        this.id = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["uid"])(shaderName);
      }
      this._compile(source);
      this.opts.source = source;
    }

    // Accessors

  }, {
    key: 'getParameter',
    value: function getParameter(pname) {
      return this.gl.getShaderParameter(this.handle, pname);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.getTypeName(this.shaderType) + ':' + this.id;
    }
  }, {
    key: 'getName',
    value: function getName() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl_utils__["e" /* getShaderName */])(this.opts.source) || 'unnamed-shader';
    }
  }, {
    key: 'getSource',
    value: function getSource() {
      return this.gl.getShaderSource(this.handle);
    }

    // Debug method - Returns translated source if available

  }, {
    key: 'getTranslatedSource',
    value: function getTranslatedSource() {
      var extension = this.gl.getExtension('WEBGL_debug_shaders');
      return extension ? extension.getTranslatedShaderSource(this.handle) : 'No translated source available. WEBGL_debug_shaders not implemented';
    }

    // PRIVATE METHODS

  }, {
    key: '_compile',
    value: function _compile() {
      this.gl.shaderSource(this.handle, this.source);
      this.gl.compileShader(this.handle);

      // TODO - For performance reasons, avoid checking shader compilation errors on production?
      // TODO - Load log even when no error reported, to catch warnings?
      // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings
      var compileStatus = this.getParameter(GL_COMPILE_STATUS);
      if (!compileStatus) {
        var infoLog = this.gl.getShaderInfoLog(this.handle);

        var _parseGLSLCompilerErr = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl_utils__["f" /* parseGLSLCompilerError */])(infoLog, this.source, this.shaderType),
            shaderName = _parseGLSLCompilerErr.shaderName,
            errors = _parseGLSLCompilerErr.errors,
            warnings = _parseGLSLCompilerErr.warnings;

        __WEBPACK_IMPORTED_MODULE_3__utils__["log"].error(0, 'GLSL compilation errors in ' + shaderName + '\n' + errors);
        __WEBPACK_IMPORTED_MODULE_3__utils__["log"].warn(0, 'GLSL compilation warnings in ' + shaderName + '\n' + warnings);
        throw new Error('GLSL compilation errors in ' + shaderName + '\n' + errors);
      }
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteShader(this.handle);
    }
  }, {
    key: '_getOptsFromHandle',
    value: function _getOptsFromHandle() {
      return {
        type: this.getParameter(GL_SHADER_TYPE),
        source: this.getSource()
      };
    }
  }]);

  return Shader;
}(__WEBPACK_IMPORTED_MODULE_2__resource__["a" /* default */]);

var VertexShader = /*#__PURE__*/function (_Shader) {
  _inherits(VertexShader, _Shader);

  function VertexShader(gl, source) {
    _classCallCheck(this, VertexShader);

    return _possibleConstructorReturn(this, (VertexShader.__proto__ || Object.getPrototypeOf(VertexShader)).call(this, gl, source, GL_VERTEX_SHADER));
  }

  // PRIVATE METHODS


  _createClass(VertexShader, [{
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createShader(GL_VERTEX_SHADER);
    }
  }]);

  return VertexShader;
}(Shader);

var FragmentShader = /*#__PURE__*/function (_Shader2) {
  _inherits(FragmentShader, _Shader2);

  function FragmentShader(gl, source) {
    _classCallCheck(this, FragmentShader);

    return _possibleConstructorReturn(this, (FragmentShader.__proto__ || Object.getPrototypeOf(FragmentShader)).call(this, gl, source, GL_FRAGMENT_SHADER));
  }

  // PRIVATE METHODS


  _createClass(FragmentShader, [{
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createShader(GL_FRAGMENT_SHADER);
    }
  }]);

  return FragmentShader;
}(Shader);
//# sourceMappingURL=shader.js.map

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export experimental */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_gl_constants__ = __webpack_require__(3);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__webgl_gl_constants__["a"]; });
/* unused harmony reexport glGet */
/* unused harmony reexport glKey */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils__ = __webpack_require__(11);
/* unused harmony reexport trackContextCreation */
/* unused harmony reexport trackContextState */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_context__ = __webpack_require__(1);
/* unused harmony reexport isWebGL */
/* unused harmony reexport isWebGL2 */
/* unused harmony reexport setContextDefaults */
/* unused harmony reexport createGLContext */
/* unused harmony reexport deleteGLContext */
/* unused harmony reexport pollContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_context_state__ = __webpack_require__(15);
/* unused harmony reexport resetParameters */
/* unused harmony reexport getParameter */
/* unused harmony reexport getParameters */
/* unused harmony reexport setParameter */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_3__webgl_context_state__["a"]; });
/* unused harmony reexport withParameters */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_context_limits__ = __webpack_require__(41);
/* unused harmony reexport getContextInfo */
/* unused harmony reexport getGLContextInfo */
/* unused harmony reexport getContextLimits */
/* unused harmony reexport glGetDebugInfo */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__webgl_context_features__ = __webpack_require__(26);
/* unused harmony reexport FEATURES */
/* unused harmony reexport hasFeature */
/* unused harmony reexport hasFeatures */
/* unused harmony reexport getFeatures */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__webgl_context_debug__ = __webpack_require__(95);
/* unused harmony reexport makeDebugContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__webgl_api_debug_parameters__ = __webpack_require__(93);
/* unused harmony reexport installParameterDefinitions */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_buffer__ = __webpack_require__(18);
/* unused harmony reexport Buffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__webgl_shader__ = __webpack_require__(29);
/* unused harmony reexport Shader */
/* unused harmony reexport VertexShader */
/* unused harmony reexport FragmentShader */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__webgl_program__ = __webpack_require__(43);
/* unused harmony reexport Program */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__webgl_framebuffer__ = __webpack_require__(27);
/* unused harmony reexport Framebuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__webgl_renderbuffer__ = __webpack_require__(28);
/* unused harmony reexport Renderbuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__webgl_texture_2d__ = __webpack_require__(44);
/* unused harmony reexport Texture2D */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__webgl_texture_cube__ = __webpack_require__(101);
/* unused harmony reexport TextureCube */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__webgl_draw__ = __webpack_require__(96);
/* unused harmony reexport draw */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__webgl_clear__ = __webpack_require__(25);
/* unused harmony reexport clear */
/* unused harmony reexport clearBuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__webgl_fence_sync__ = __webpack_require__(97);
/* unused harmony reexport FenceSync */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__webgl_query__ = __webpack_require__(99);
/* unused harmony reexport Query */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__webgl_sampler__ = __webpack_require__(100);
/* unused harmony reexport Sampler */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__webgl_texture_3d__ = __webpack_require__(224);
/* unused harmony reexport Texture3D */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__webgl_texture_2d_array__ = __webpack_require__(223);
/* unused harmony reexport Texture2DArray */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__webgl_transform_feedback__ = __webpack_require__(102);
/* unused harmony reexport TransformFeedback */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__webgl_vertex_array__ = __webpack_require__(46);
/* unused harmony reexport VertexArray */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__webgl_uniform_buffer_layout__ = __webpack_require__(225);
/* unused harmony reexport UniformBufferLayout */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__core_model__ = __webpack_require__(22);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_25__core_model__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__core_animation_loop__ = __webpack_require__(72);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_26__core_animation_loop__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__core_pick_models__ = __webpack_require__(75);
/* unused harmony reexport pickModels */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__core_picking_colors__ = __webpack_require__(176);
/* unused harmony reexport encodePickingColor */
/* unused harmony reexport decodePickingColor */
/* unused harmony reexport getNullPickingColor */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__packages_events__ = __webpack_require__(194);
/* unused harmony reexport addEvents */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__geometry_geometry__ = __webpack_require__(7);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_30__geometry_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__geometry_cone_geometry__ = __webpack_require__(76);
/* unused harmony reexport ConeGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__geometry_cube_geometry__ = __webpack_require__(77);
/* unused harmony reexport CubeGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__geometry_cylinder_geometry__ = __webpack_require__(78);
/* unused harmony reexport CylinderGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__geometry_ico_sphere_geometry__ = __webpack_require__(79);
/* unused harmony reexport IcoSphereGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__geometry_plane_geometry__ = __webpack_require__(80);
/* unused harmony reexport PlaneGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__geometry_sphere_geometry__ = __webpack_require__(81);
/* unused harmony reexport SphereGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__geometry_truncated_cone_geometry__ = __webpack_require__(23);
/* unused harmony reexport TruncatedConeGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__models_cone__ = __webpack_require__(186);
/* unused harmony reexport Cone */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__models_cube__ = __webpack_require__(187);
/* unused harmony reexport Cube */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__models_cylinder__ = __webpack_require__(188);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_40__models_cylinder__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__models_ico_sphere__ = __webpack_require__(189);
/* unused harmony reexport IcoSphere */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__models_plane__ = __webpack_require__(190);
/* unused harmony reexport Plane */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__models_sphere__ = __webpack_require__(191);
/* unused harmony reexport Sphere */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__models_truncated_cone__ = __webpack_require__(192);
/* unused harmony reexport TruncatedCone */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__models_clip_space_quad__ = __webpack_require__(185);
/* unused harmony reexport ClipSpaceQuad */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__packages_math_src_common__ = __webpack_require__(8);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_46__packages_math_src_common__["a"]; });
/* unused harmony reexport degrees */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__packages_math_src_vector2__ = __webpack_require__(35);
/* unused harmony reexport Vector2 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__packages_math_src_vector3__ = __webpack_require__(36);
/* unused harmony reexport Vector3 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__packages_math_src_vector4__ = __webpack_require__(37);
/* unused harmony reexport Vector4 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__packages_math_src_matrix4__ = __webpack_require__(83);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_50__packages_math_src_matrix4__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__packages_math_src_quaternion__ = __webpack_require__(84);
/* unused harmony reexport Quaternion */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__io__ = __webpack_require__(183);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__io___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_52__io__);
/* unused harmony reexport setPathPrefix */
/* unused harmony reexport loadFile */
/* unused harmony reexport loadImage */
/* unused harmony reexport loadFiles */
/* unused harmony reexport loadImages */
/* harmony reexport (binding) */ if(__webpack_require__.o(__WEBPACK_IMPORTED_MODULE_52__io__, "loadTextures")) __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_52__io__["loadTextures"]; });
/* unused harmony reexport loadProgram */
/* unused harmony reexport loadModel */
/* unused harmony reexport parseModel */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__shadertools_lib_shader_cache__ = __webpack_require__(86);
/* unused harmony reexport ShaderCache */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__shadertools_lib_assemble_shaders__ = __webpack_require__(85);
/* unused harmony reexport assembleShaders */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__shadertools_lib_shader_modules__ = __webpack_require__(38);
/* unused harmony reexport registerShaderModules */
/* unused harmony reexport setDefaultShaderModules */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__shadertools_modules_fp32_fp32__ = __webpack_require__(199);
/* unused harmony reexport fp32 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__shadertools_modules_fp64_fp64__ = __webpack_require__(202);
/* unused harmony reexport fp64 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__shadertools_modules_project_project__ = __webpack_require__(87);
/* unused harmony reexport project */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__shadertools_modules_lighting_lighting__ = __webpack_require__(207);
/* unused harmony reexport lighting */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__shadertools_modules_dirlight_dirlight__ = __webpack_require__(198);
/* unused harmony reexport dirlight */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__shadertools_modules_picking_picking__ = __webpack_require__(209);
/* unused harmony reexport picking */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__shadertools_modules_diffuse_diffuse__ = __webpack_require__(197);
/* unused harmony reexport diffuse */
/* unused harmony reexport FramebufferObject */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__deprecated_scene__ = __webpack_require__(178);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__deprecated_scene___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_63__deprecated_scene__);
/* unused harmony reexport Scene */
/* unused harmony reexport withState */
/* unused harmony reexport glContextWithState */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__webgl_functions__ = __webpack_require__(98);
/* unused harmony reexport readPixels */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__deprecated_shaderlib__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__deprecated_shaderlib___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_65__deprecated_shaderlib__);
/* unused harmony reexport Shaders */
// Export core modules for luma.gl

// Initialize any global state
__webpack_require__(24);

// WebGL




















// WebGL2 & Extensions









// Core Classes


// export {default as Object3D} from './core/object-3d';
// export {default as Group} from './core/group';



// Addons


// Geometry









// Models










// Math






// export {default as Euler} from './packages/math/src/euler';

// IO


// shadertools




// shader modules








// EXPERIMENTAL EXPORTS



var experimental = {
  clearBuffer: __WEBPACK_IMPORTED_MODULE_16__webgl_clear__["a" /* clearBuffer */]
};

// DEPRECATED EXPORTS
// Alias for FramebufferObject (deprecated in v3). Framebuffer API is fairly similar



// DEPRECATED IN V3.0


//# sourceMappingURL=index.js.map

/***/ }),
/* 31 */
/***/ (function(module, exports) {

module.exports = rotateZ;

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = dot;

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
}

/***/ }),
/* 33 */
/***/ (function(module, exports) {

module.exports = normalize;

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
function normalize(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2]
    var len = x*x + y*y + z*z
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len)
        out[0] = a[0] * len
        out[1] = a[1] * len
        out[2] = a[2] * len
    }
    return out
}

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defaultVertex = __webpack_require__(181);

var _defaultVertex2 = _interopRequireDefault(_defaultVertex);

var _defaultFragment = __webpack_require__(179);

var _defaultFragment2 = _interopRequireDefault(_defaultFragment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Default Shaders
var defaultUniforms = __webpack_require__(180);

exports.default = {
  vs: _defaultVertex2.default,
  fs: _defaultFragment2.default,
  defaultUniforms: defaultUniforms
};
//# sourceMappingURL=index.js.map

/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = validateVector2;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_array__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec2_set__ = __webpack_require__(149);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec2_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_gl_vec2_set__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec2_add__ = __webpack_require__(139);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec2_add___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_gl_vec2_add__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec2_subtract__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec2_subtract___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_gl_vec2_subtract__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec2_multiply__ = __webpack_require__(144);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec2_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_gl_vec2_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec2_divide__ = __webpack_require__(141);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec2_divide___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_vec2_divide__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec2_scale__ = __webpack_require__(147);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec2_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_vec2_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec2_scaleAndAdd__ = __webpack_require__(148);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec2_scaleAndAdd___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_vec2_scaleAndAdd__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec2_negate__ = __webpack_require__(145);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec2_negate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_vec2_negate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec2_normalize__ = __webpack_require__(146);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec2_normalize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_vec2_normalize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec2_dot__ = __webpack_require__(142);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec2_dot___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_vec2_dot__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec2_cross__ = __webpack_require__(140);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec2_cross___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_vec2_cross__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec2_lerp__ = __webpack_require__(143);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec2_lerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_vec2_lerp__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




// gl-matrix is too big. Cherry-pick individual imports from stack.gl version
/* eslint-disable camelcase */













function validateVector2(v) {
  return v.length === 2 && Number.isFinite(v[0]) && Number.isFinite(v[1]);
}

var Vector2 = function (_MathArray) {
  _inherits(Vector2, _MathArray);

  // Creates a new, empty vec2
  function Vector2() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    _classCallCheck(this, Vector2);

    var _this = _possibleConstructorReturn(this, (Vector2.__proto__ || Object.getPrototypeOf(Vector2)).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y);
    }
    return _this;
  }

  _createClass(Vector2, [{
    key: 'set',
    value: function set(x, y) {
      __WEBPACK_IMPORTED_MODULE_2_gl_vec2_set___default()(this, x, y);
      this.check();
      return this;
    }

    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

  }, {
    key: 'add',

    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

    value: function add() {
      for (var _len = arguments.length, vectors = Array(_len), _key = 0; _key < _len; _key++) {
        vectors[_key] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = vectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var vector = _step.value;

          __WEBPACK_IMPORTED_MODULE_3_gl_vec2_add___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this;
    }
  }, {
    key: 'subtract',
    value: function subtract() {
      for (var _len2 = arguments.length, vectors = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        vectors[_key2] = arguments[_key2];
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = vectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var vector = _step2.value;

          __WEBPACK_IMPORTED_MODULE_4_gl_vec2_subtract___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'multiply',
    value: function multiply() {
      for (var _len3 = arguments.length, vectors = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        vectors[_key3] = arguments[_key3];
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = vectors[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var vector = _step3.value;

          __WEBPACK_IMPORTED_MODULE_5_gl_vec2_multiply___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'divide',
    value: function divide() {
      for (var _len4 = arguments.length, vectors = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        vectors[_key4] = arguments[_key4];
      }

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = vectors[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var vector = _step4.value;

          __WEBPACK_IMPORTED_MODULE_6_gl_vec2_divide___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'scale',
    value: function scale(_scale) {
      if (Number.isFinite(_scale)) {
        __WEBPACK_IMPORTED_MODULE_7_gl_vec2_scale___default()(this, this, _scale);
      }
      this.check();
      return this;
    }
  }, {
    key: 'scaleAndAdd',
    value: function scaleAndAdd(vector, scale) {
      __WEBPACK_IMPORTED_MODULE_8_gl_vec2_scaleAndAdd___default()(this, this, vector, scale);
      this.check();
      return this;
    }
  }, {
    key: 'negate',
    value: function negate() {
      __WEBPACK_IMPORTED_MODULE_9_gl_vec2_negate___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'normalize',
    value: function normalize() {
      __WEBPACK_IMPORTED_MODULE_10_gl_vec2_normalize___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'dot',
    value: function dot(vector) {
      return __WEBPACK_IMPORTED_MODULE_11_gl_vec2_dot___default()(this, vector);
    }
  }, {
    key: 'cross',
    value: function cross(vector) {
      __WEBPACK_IMPORTED_MODULE_12_gl_vec2_cross___default()(this, this, vector);
      this.check();
      return this;
    }
  }, {
    key: 'lerp',
    value: function lerp(vector, coeff) {
      __WEBPACK_IMPORTED_MODULE_13_gl_vec2_lerp___default()(this, this, vector, coeff);
      this.check();
      return this;
    }
  }, {
    key: 'operation',
    value: function operation(_operation) {
      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }

      _operation.apply(undefined, [this, this].concat(args));
      this.check();
      return this;
    }
  }, {
    key: 'ELEMENTS',
    get: function get() {
      return 2;
    }
  }, {
    key: 'x',
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'y',
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }]);

  return Vector2;
}(__WEBPACK_IMPORTED_MODULE_0__math_array__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Vector2);
//# sourceMappingURL=vector2.js.map

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = validateVector3;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_array__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec3_set__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec3_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_gl_vec3_set__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec3_length__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec3_length___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_gl_vec3_length__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec3_distance__ = __webpack_require__(154);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec3_distance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_gl_vec3_distance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec3_angle__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec3_angle___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_gl_vec3_angle__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec3_add__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec3_add___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_vec3_add__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec3_subtract__ = __webpack_require__(164);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec3_subtract___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_vec3_subtract__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec3_multiply__ = __webpack_require__(159);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec3_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_vec3_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec3_divide__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec3_divide___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_vec3_divide__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec3_scale__ = __webpack_require__(161);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec3_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_vec3_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec3_scaleAndAdd__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec3_scaleAndAdd___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_vec3_scaleAndAdd__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec3_negate__ = __webpack_require__(160);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec3_negate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_vec3_negate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec3_inverse__ = __webpack_require__(157);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec3_inverse___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_vec3_inverse__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_vec3_normalize__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_vec3_normalize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_gl_vec3_normalize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_vec3_dot__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_vec3_dot___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_gl_vec3_dot__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_vec3_cross__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_vec3_cross___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_gl_vec3_cross__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_vec3_lerp__ = __webpack_require__(158);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_vec3_lerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_gl_vec3_lerp__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




// gl-matrix is too big. Cherry-pick individual imports from stack.gl version
/* eslint-disable camelcase */

















function validateVector3(v) {
  return v.length === 3 && Number.isFinite(v[0]) && Number.isFinite(v[1]) && Number.isFinite(v[2]);
}

var Vector3 = function (_MathArray) {
  _inherits(Vector3, _MathArray);

  // Creates a new vec3, either empty, or from an array or from values
  function Vector3() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    _classCallCheck(this, Vector3);

    var _this = _possibleConstructorReturn(this, (Vector3.__proto__ || Object.getPrototypeOf(Vector3)).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y, z);
    }
    return _this;
  }

  // fromArray(array) {
  //   if (array instanceof Vector3) {
  //     return array;
  //   }
  //   return new Vector3(...array);
  // }

  _createClass(Vector3, [{
    key: 'set',
    value: function set(x, y, z) {
      __WEBPACK_IMPORTED_MODULE_2_gl_vec3_set___default()(this, x, y, z);
      this.check();
      return this;
    }

    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

  }, {
    key: 'length',

    /* eslint-enable no-multi-spaces, brace-style, no-return-assign */

    value: function length() {
      return __WEBPACK_IMPORTED_MODULE_3_gl_vec3_length___default()(this);
    }
  }, {
    key: 'distance',
    value: function distance(vector) {
      return __WEBPACK_IMPORTED_MODULE_4_gl_vec3_distance___default()(this, vector);
    }
  }, {
    key: 'angle',
    value: function angle(vector) {
      return __WEBPACK_IMPORTED_MODULE_5_gl_vec3_angle___default()(this, vector);
    }

    // MODIFIERS

  }, {
    key: 'add',
    value: function add() {
      for (var _len = arguments.length, vectors = Array(_len), _key = 0; _key < _len; _key++) {
        vectors[_key] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = vectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var vector = _step.value;

          __WEBPACK_IMPORTED_MODULE_6_gl_vec3_add___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'subtract',
    value: function subtract() {
      for (var _len2 = arguments.length, vectors = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        vectors[_key2] = arguments[_key2];
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = vectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var vector = _step2.value;

          __WEBPACK_IMPORTED_MODULE_7_gl_vec3_subtract___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'multiply',
    value: function multiply() {
      for (var _len3 = arguments.length, vectors = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        vectors[_key3] = arguments[_key3];
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = vectors[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var vector = _step3.value;

          __WEBPACK_IMPORTED_MODULE_8_gl_vec3_multiply___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'divide',
    value: function divide() {
      for (var _len4 = arguments.length, vectors = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        vectors[_key4] = arguments[_key4];
      }

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = vectors[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var vector = _step4.value;

          __WEBPACK_IMPORTED_MODULE_9_gl_vec3_divide___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'scale',
    value: function scale(_scale) {
      if (Number.isFinite(_scale)) {
        __WEBPACK_IMPORTED_MODULE_10_gl_vec3_scale___default()(this, this, _scale);
      } else {
        __WEBPACK_IMPORTED_MODULE_15_gl_vec3_dot___default()(this, this, _scale);
      }
      this.check();
      return this;
    }
  }, {
    key: 'scaleAndAdd',
    value: function scaleAndAdd(vector, scale) {
      __WEBPACK_IMPORTED_MODULE_11_gl_vec3_scaleAndAdd___default()(this, this, vector, scale);
      this.check();
      return this;
    }
  }, {
    key: 'negate',
    value: function negate() {
      __WEBPACK_IMPORTED_MODULE_12_gl_vec3_negate___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'inverse',
    value: function inverse() {
      __WEBPACK_IMPORTED_MODULE_13_gl_vec3_inverse___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'normalize',
    value: function normalize() {
      __WEBPACK_IMPORTED_MODULE_14_gl_vec3_normalize___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'dot',
    value: function dot(vector) {
      return __WEBPACK_IMPORTED_MODULE_15_gl_vec3_dot___default()(this, vector);
    }
  }, {
    key: 'cross',
    value: function cross(vector) {
      __WEBPACK_IMPORTED_MODULE_16_gl_vec3_cross___default()(this, this, vector);
      this.check();
      return this;
    }
  }, {
    key: 'lerp',
    value: function lerp(vector, coeff) {
      __WEBPACK_IMPORTED_MODULE_17_gl_vec3_lerp___default()(this, this, vector, coeff);
      this.check();
      return this;
    }
  }, {
    key: 'operation',
    value: function operation(_operation) {
      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }

      _operation.apply(undefined, [this, this].concat(args));
      this.check();
      return this;
    }
  }, {
    key: 'ELEMENTS',
    get: function get() {
      return 3;
    }
  }, {
    key: 'x',
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'y',
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'z',
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }]);

  return Vector3;
}(__WEBPACK_IMPORTED_MODULE_0__math_array__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Vector3);
//# sourceMappingURL=vector3.js.map

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = validateVector4;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_array__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec4_set__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_vec4_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_gl_vec4_set__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec4_distance__ = __webpack_require__(166);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_vec4_distance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_gl_vec4_distance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec4_add__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_vec4_add___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_gl_vec4_add__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec4_subtract__ = __webpack_require__(174);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec4_subtract___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_gl_vec4_subtract__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec4_multiply__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec4_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_vec4_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec4_divide__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec4_divide___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_vec4_divide__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec4_scale__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec4_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_vec4_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec4_scaleAndAdd__ = __webpack_require__(172);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec4_scaleAndAdd___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_vec4_scaleAndAdd__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec4_negate__ = __webpack_require__(171);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec4_negate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_vec4_negate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec4_inverse__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec4_inverse___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_vec4_inverse__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec4_normalize__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_vec4_normalize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_vec4_normalize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec4_dot__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_vec4_dot___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_vec4_dot__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_vec4_lerp__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_vec4_lerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_gl_vec4_lerp__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




// gl-matrix is too big. Cherry-pick individual imports from stack.gl version
/* eslint-disable camelcase */












// import vec4_cross from 'gl-vec4/cross';


function validateVector4(v) {
  return v.length === 4 && Number.isFinite(v[0]) && Number.isFinite(v[1]) && Number.isFinite(v[2]) && Number.isFinite(v[3]);
}

var Vector4 = function (_MathArray) {
  _inherits(Vector4, _MathArray);

  // Creates a new, empty vec4
  function Vector4() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    _classCallCheck(this, Vector4);

    var _this = _possibleConstructorReturn(this, (Vector4.__proto__ || Object.getPrototypeOf(Vector4)).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y, z, w);
    }
    return _this;
  }

  _createClass(Vector4, [{
    key: 'set',
    value: function set(x, y, z, w) {
      __WEBPACK_IMPORTED_MODULE_2_gl_vec4_set___default()(this, x, y, z, w);
      this.check();
      return this;
    }

    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

  }, {
    key: 'distance',

    /* eslint-enable no-multi-spaces, brace-style, no-return-assign */

    value: function distance(vector) {
      return __WEBPACK_IMPORTED_MODULE_3_gl_vec4_distance___default()(vector);
    }
  }, {
    key: 'add',
    value: function add() {
      for (var _len = arguments.length, vectors = Array(_len), _key = 0; _key < _len; _key++) {
        vectors[_key] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = vectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var vector = _step.value;

          __WEBPACK_IMPORTED_MODULE_4_gl_vec4_add___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'subtract',
    value: function subtract() {
      for (var _len2 = arguments.length, vectors = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        vectors[_key2] = arguments[_key2];
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = vectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var vector = _step2.value;

          __WEBPACK_IMPORTED_MODULE_5_gl_vec4_subtract___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'multiply',
    value: function multiply() {
      for (var _len3 = arguments.length, vectors = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        vectors[_key3] = arguments[_key3];
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = vectors[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var vector = _step3.value;

          __WEBPACK_IMPORTED_MODULE_6_gl_vec4_multiply___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'divide',
    value: function divide() {
      for (var _len4 = arguments.length, vectors = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        vectors[_key4] = arguments[_key4];
      }

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = vectors[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var vector = _step4.value;

          __WEBPACK_IMPORTED_MODULE_7_gl_vec4_divide___default()(this, vector);
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      this.check();
      return this;
    }
  }, {
    key: 'scale',
    value: function scale(_scale) {
      __WEBPACK_IMPORTED_MODULE_8_gl_vec4_scale___default()(this, this, _scale);
      this.check();
      return this;
    }
  }, {
    key: 'scaleAndAdd',
    value: function scaleAndAdd(vector, scale) {
      __WEBPACK_IMPORTED_MODULE_9_gl_vec4_scaleAndAdd___default()(this, this, vector, scale);
      this.check();
      return this;
    }
  }, {
    key: 'negate',
    value: function negate() {
      __WEBPACK_IMPORTED_MODULE_10_gl_vec4_negate___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'inverse',
    value: function inverse() {
      __WEBPACK_IMPORTED_MODULE_11_gl_vec4_inverse___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'normalize',
    value: function normalize() {
      __WEBPACK_IMPORTED_MODULE_12_gl_vec4_normalize___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'dot',
    value: function dot(vector) {
      return __WEBPACK_IMPORTED_MODULE_13_gl_vec4_dot___default()(this, vector);
    }

    // cross(scale) {
    //   vec4_cross(this, this, scale);
    //   this.check();
    //   return this;
    // }

  }, {
    key: 'lerp',
    value: function lerp(vector, coeff) {
      __WEBPACK_IMPORTED_MODULE_14_gl_vec4_lerp___default()(this, this, vector, coeff);
      this.check();
      return this;
    }

    /*
    multiply(...vectors) {
      for (const vector of vectors) {
        vec4_multiply(this, vector);
      }
      this.check();
      return this;
    }
     divide(...vectors) {
      for (const vector of vectors) {
        vec4_divide(this, vector);
      }
      this.check();
      return this;
    }
     ceil() {
      vec4_ceil(this, this);
      this.check();
      return this;
    }
     floor() {
      vec4_floor(this, this);
      this.check();
      return this;
    }
     min() {
      vec4_min(this, this);
      this.check();
      return this;
    }
     max() {
      vec4_max(this, this);
      this.check();
      return this;
    }
     hermite(scale) {
      vec4_hermite(this, this, scale);
      this.check();
      return this;
    }
     bezier(scale) {
      vec4_bezier(this, this, scale);
      this.check();
      return this;
    }
     random(scale) {
      vec4_random(this, this, scale);
      this.check();
      return this;
    }
     rotateX(origin, angle) {
      vec4_rotateX(this, this, origin, angle);
      this.check();
      return this;
    }
     rotateY(origin, angle) {
      vec4_rotateY(this, this, origin, angle);
      this.check();
      return this;
    }
     rotateZ(origin, angle) {
      vec4_rotateZ(this, this, origin, angle);
      this.check();
      return this;
    }
    */

  }, {
    key: 'ELEMENTS',
    get: function get() {
      return 4;
    }
  }, {
    key: 'x',
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'y',
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'z',
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'w',
    get: function get() {
      return this[3];
    },
    set: function set(value) {
      return this[3] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }]);

  return Vector4;
}(__WEBPACK_IMPORTED_MODULE_0__math_array__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Vector4);
//# sourceMappingURL=vector4.js.map

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export registerShaderModules */
/* unused harmony export setDefaultShaderModules */
/* harmony export (immutable) */ __webpack_exports__["a"] = getShaderModule;
/* harmony export (immutable) */ __webpack_exports__["b"] = resolveModules;
/* unused harmony export getShaderDependencies */
/* unused harmony export getDependencyGraph */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);


var shaderModules = {};
var defaultShaderModules = [];

/**
 * Registers an array of shader modules
 * @param {Object[]} shaderModuleList - Array of shader modules
 */
function registerShaderModules(shaderModuleList) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$ignoreMultipleRe = _ref.ignoreMultipleRegistrations,
      ignoreMultipleRegistrations = _ref$ignoreMultipleRe === undefined ? false : _ref$ignoreMultipleRe;

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = shaderModuleList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var shaderModule = _step.value;

      registerShaderModule(shaderModule, { ignoreMultipleRegistrations: ignoreMultipleRegistrations });
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

/**
 * Registers an array of default shader modules. These will be concatenated
 * automatically at the end of any shader module list passed to
 * `assembleShaders` (plus `resolveModules` and `getShaderDependencies`)
 * @param {Object[]} modules - Array of shader modules
 */
function setDefaultShaderModules(modules) {
  defaultShaderModules = modules;
}

// Looks up a moduleName among registered modules and returns definition.
// If "inline" module, returns it directly
function getShaderModule(moduleOrName) {
  // Check if "inline" module
  if (typeof moduleOrName !== 'string') {
    var _shaderModule = moduleOrName;
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(typeof _shaderModule.name === 'string');
    registerShaderModule(_shaderModule, { ignoreMultipleRegistrations: true });
    return _shaderModule;
  }

  // Look up module
  var shaderModule = shaderModules[moduleOrName];
  if (!shaderModule) {
    // console.log(`${moduleOrName} not in registered modules:`, shaderModules);
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false, 'Unknown shader module ' + moduleOrName);
  }
  return shaderModule;
}

// registers any supplied modules and returns a list of module names
function resolveModules(modules) {
  var moduleNames = modules.map(function (module) {
    if (typeof module !== 'string') {
      registerShaderModules([module], { ignoreMultipleRegistrations: true });
      return module.name;
    }
    return module;
  });

  return getShaderDependencies(moduleNames);
}

/**
 * Takes a list of shader module names and returns a new list of
 * shader module names that includes all dependencies, sorted so
 * that modules that are dependencies of other modules come first.
 *
 * If the shader glsl code from the returned modules is concatenated
 * in the reverse order, it is guaranteed that all functions be resolved and
 * that all function and variable definitions come before use.
 *
 * @param {String[]} modules - Array of modules (inline modules or module names)
 * @return {String[]} - Array of modules
 */
function getShaderDependencies(modules) {
  modules = modules.concat(defaultShaderModules);

  var result = {};
  getDependencyGraph({
    modules: modules,
    level: 0,
    result: result
  });

  // Return a reverse sort so that dependencies come before the modules that use them
  return Object.keys(result).sort(function (a, b) {
    return result[b] - result[a];
  });
}

/**
 * Recursively checks module dpendencies to calculate dependency
 * level of each module.
 *
 * @param {String[]} modules - Array of modules
 * @param {Number} level - Current level
 * @return {result} - Map of module name to its level
 */
// Adds another level of dependencies to the result map
function getDependencyGraph(_ref2) {
  var modules = _ref2.modules,
      level = _ref2.level,
      result = _ref2.result;

  if (level >= 5) {
    throw new Error('Possible loop in shader dependency graph');
  }

  // Update level on all current modules
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var moduleOrName = _step2.value;

      var shaderModule = getShaderModule(moduleOrName);
      if (result[shaderModule.name] === undefined || result[shaderModule.name] < level) {
        result[shaderModule.name] = level;
      }
    }

    // Recurse
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = modules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var _moduleOrName = _step3.value;

      var _shaderModule2 = getShaderModule(_moduleOrName);

      if (_shaderModule2.dependencies) {
        getDependencyGraph({
          modules: _shaderModule2.dependencies,
          level: level + 1,
          result: result
        });
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return result;
}

// PRIVATE API

function registerShaderModule(shaderModule, _ref3) {
  var _ref3$ignoreMultipleR = _ref3.ignoreMultipleRegistrations,
      ignoreMultipleRegistrations = _ref3$ignoreMultipleR === undefined ? false : _ref3$ignoreMultipleR;

  __WEBPACK_IMPORTED_MODULE_0_assert___default()(shaderModule.name, 'shader module has no name');
  if (!ignoreMultipleRegistrations && shaderModules[shaderModule.name]) {
    // TODO - instead verify that definition is not changing...
    throw new Error('shader module ' + shaderModule.name + ' already registered');
  }
  shaderModules[shaderModule.name] = shaderModule;
  shaderModule.dependencies = shaderModule.dependencies || [];
}
//# sourceMappingURL=shader-modules.js.map

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = formatValue;
/* eslint-disable no-console */
/* global console */
var cache = {};

var _log = {
  priority: 0,
  table: function table(priority, _table) {
    if (priority <= _log.priority && _table) {
      console.table(_table);
    }
  },
  log: function log(priority, arg) {
    if (priority <= _log.priority) {
      var _console;

      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      (_console = console).debug.apply(_console, ['luma.gl: ' + arg].concat(args));
    }
  },
  info: function info(priority, arg) {
    if (priority <= _log.priority) {
      var _console2;

      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      (_console2 = console).log.apply(_console2, ['luma.gl: ' + arg].concat(args));
    }
  },
  once: function once(priority, arg) {
    if (!cache[arg]) {
      for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        args[_key3 - 2] = arguments[_key3];
      }

      _log.log.apply(_log, [priority, arg].concat(args));
    }
    cache[arg] = true;
  },
  warn: function warn(priority, arg) {
    if (priority <= _log.priority && !cache[arg]) {
      var _console3;

      for (var _len4 = arguments.length, args = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
        args[_key4 - 2] = arguments[_key4];
      }

      (_console3 = console).warn.apply(_console3, ['luma.gl: ' + arg].concat(args));
    }
    cache[arg] = true;
  },
  error: function error(priority, arg) {
    var _console4;

    for (var _len5 = arguments.length, args = Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
      args[_key5 - 2] = arguments[_key5];
    }

    (_console4 = console).error.apply(_console4, ['luma.gl: ' + arg].concat(args));
  },
  deprecated: function deprecated(oldUsage, newUsage) {
    _log.warn(0, 'luma.gl: `' + oldUsage + '` is deprecated and will be removed in a later version. Use `' + newUsage + '` instead');
  }
};

function formatArrayValue(v, opts) {
  var _opts$maxElts = opts.maxElts,
      maxElts = _opts$maxElts === undefined ? 16 : _opts$maxElts,
      _opts$size = opts.size,
      size = _opts$size === undefined ? 1 : _opts$size;

  var string = '[';
  for (var i = 0; i < v.length && i < maxElts; ++i) {
    if (i > 0) {
      string += ',' + (i % size === 0 ? ' ' : '');
    }
    string += formatValue(v[i], opts);
  }
  var terminator = v.length > maxElts ? '...' : ']';
  return '' + string + terminator;
}

function formatValue(v) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _opts$isInteger = opts.isInteger,
      isInteger = _opts$isInteger === undefined ? false : _opts$isInteger;

  if (Array.isArray(v) || ArrayBuffer.isView(v)) {
    return formatArrayValue(v, opts);
  }
  if (!Number.isFinite(v)) {
    return String(v);
  }
  if (isInteger) {
    return v.toFixed(0);
  }
  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {
    return v.toFixed(0);
  }
  var string = v.toPrecision(2);
  var decimal = string.indexOf('.0');
  return decimal === string.length - 2 ? string.slice(0, -1) : string;
}

/* harmony default export */ __webpack_exports__["a"] = (_log);
//# sourceMappingURL=log.js.map

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export clone */
/* unused harmony export deepEqual */
/* unused harmony export GL_STATE_SETTERS */
/* harmony export (immutable) */ __webpack_exports__["a"] = trackContextState;
/* harmony export (immutable) */ __webpack_exports__["c"] = pushContextState;
/* harmony export (immutable) */ __webpack_exports__["b"] = popContextState;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__set_parameters__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__polyfill_context__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Support for listening to context state changes and intercepting state queries
//
// NOTE: this system does not handle buffer bindings





var clone = function clone(x) {
  return Array.isArray(x) || ArrayBuffer.isView(x) ? x.slice() : x;
};

var deepEqual = function deepEqual(x, y) {
  var isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);
  var isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);
  if (isArrayX && isArrayY && x.length === y.length) {
    for (var i = 0; i < x.length; ++i) {
      if (x[i] !== y[i]) {
        return false;
      }
    }
    return true;
  }
  return x === y;
};

// interceptors for WEBGL FUNCTIONS that set WebGLRenderingContext state

var GL_STATE_SETTERS = {

  // GENERIC SETTERS

  enable: function enable(setter, cap) {
    return setter(_defineProperty({}, cap, true));
  },
  disable: function disable(setter, cap) {
    return setter(_defineProperty({}, cap, false));
  },
  pixelStorei: function pixelStorei(setter, pname, param) {
    return setter(_defineProperty({}, pname, param));
  },
  hint: function hint(setter, pname, _hint) {
    return setter(_defineProperty({}, pname, _hint));
  },

  // SPECIFIC SETTERS

  bindFramebuffer: function bindFramebuffer(setter, target, fb) {
    return setter(_defineProperty({}, target === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].READ_FRAMEBUFFER ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].READ_FRAMEBUFFER_BINDING : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DRAW_FRAMEBUFFER_BINDING, fb));
  },

  blendColor: function blendColor(setter, r, g, b, a) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_COLOR, new Float32Array([r, g, b, a])));
  },

  blendEquation: function blendEquation(setter, mode) {
    var _setter7;

    return setter((_setter7 = {}, _defineProperty(_setter7, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_RGB, mode), _defineProperty(_setter7, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_ALPHA, mode), _setter7));
  },

  blendEquationSeparate: function blendEquationSeparate(setter, modeRGB, modeAlpha) {
    var _setter8;

    return setter((_setter8 = {}, _defineProperty(_setter8, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_RGB, modeRGB), _defineProperty(_setter8, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_EQUATION_ALPHA, modeAlpha), _setter8));
  },

  blendFunc: function blendFunc(setter, src, dst) {
    var _setter9;

    return setter((_setter9 = {}, _defineProperty(_setter9, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_RGB, src), _defineProperty(_setter9, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_RGB, dst), _defineProperty(_setter9, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_ALPHA, src), _defineProperty(_setter9, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_ALPHA, dst), _setter9));
  },

  blendFuncSeparate: function blendFuncSeparate(setter, srcRGB, dstRGB, srcAlpha, dstAlpha) {
    var _setter10;

    return setter((_setter10 = {}, _defineProperty(_setter10, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_RGB, srcRGB), _defineProperty(_setter10, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_RGB, dstRGB), _defineProperty(_setter10, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_SRC_ALPHA, srcAlpha), _defineProperty(_setter10, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].BLEND_DST_ALPHA, dstAlpha), _setter10));
  },

  clearColor: function clearColor(setter, r, g, b, a) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_CLEAR_VALUE, new Float32Array([r, g, b, a])));
  },

  clearDepth: function clearDepth(setter, depth) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_CLEAR_VALUE, depth));
  },

  clearStencil: function clearStencil(setter, s) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_CLEAR_VALUE, s));
  },

  colorMask: function colorMask(setter, r, g, b, a) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].COLOR_WRITEMASK, [r, g, b, a]));
  },

  cullFace: function cullFace(setter, mode) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].CULL_FACE_MODE, mode));
  },

  depthFunc: function depthFunc(setter, func) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_FUNC, func));
  },

  depthRange: function depthRange(setter, zNear, zFar) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_RANGE, new Float32Array([zNear, zFar])));
  },

  depthMask: function depthMask(setter, mask) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].DEPTH_WRITEMASK, mask));
  },

  frontFace: function frontFace(setter, face) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT_FACE, face));
  },

  lineWidth: function lineWidth(setter, width) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].LINE_WIDTH, width));
  },

  polygonOffset: function polygonOffset(setter, factor, units) {
    var _setter21;

    return setter((_setter21 = {}, _defineProperty(_setter21, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_FACTOR, factor), _defineProperty(_setter21, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].POLYGON_OFFSET_UNITS, units), _setter21));
  },

  sampleCoverage: function sampleCoverage(setter, value, invert) {
    var _setter22;

    return setter((_setter22 = {}, _defineProperty(_setter22, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_VALUE, value), _defineProperty(_setter22, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLE_COVERAGE_INVERT, invert), _setter22));
  },

  scissor: function scissor(setter, x, y, width, height) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SCISSOR_BOX, new Int32Array([x, y, width, height])));
  },

  stencilMask: function stencilMask(setter, mask) {
    var _setter24;

    return setter((_setter24 = {}, _defineProperty(_setter24, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_WRITEMASK, mask), _defineProperty(_setter24, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_WRITEMASK, mask), _setter24));
  },

  stencilMaskSeparate: function stencilMaskSeparate(setter, face, mask) {
    return setter(_defineProperty({}, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_WRITEMASK : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_WRITEMASK, mask));
  },

  stencilFunc: function stencilFunc(setter, func, ref, mask) {
    var _setter26;

    return setter((_setter26 = {}, _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FUNC, func), _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_REF, ref), _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_VALUE_MASK, mask), _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FUNC, func), _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_REF, ref), _defineProperty(_setter26, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_VALUE_MASK, mask), _setter26));
  },

  stencilFuncSeparate: function stencilFuncSeparate(setter, face, func, ref, mask) {
    var _setter27;

    return setter((_setter27 = {}, _defineProperty(_setter27, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FUNC : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FUNC, func), _defineProperty(_setter27, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_REF : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_REF, ref), _defineProperty(_setter27, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_VALUE_MASK : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_VALUE_MASK, mask), _setter27));
  },

  stencilOp: function stencilOp(setter, fail, zfail, zpass) {
    var _setter28;

    return setter((_setter28 = {}, _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FAIL, fail), _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_FAIL, zfail), _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_PASS, zpass), _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FAIL, fail), _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_FAIL, zfail), _defineProperty(_setter28, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_PASS, zpass), _setter28));
  },

  stencilOpSeparate: function stencilOpSeparate(setter, face, fail, zfail, zpass) {
    var _setter29;

    return setter((_setter29 = {}, _defineProperty(_setter29, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_FAIL : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_FAIL, fail), _defineProperty(_setter29, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_FAIL : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_FAIL, zfail), _defineProperty(_setter29, face === __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].FRONT ? __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_PASS_DEPTH_PASS : __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].STENCIL_BACK_PASS_DEPTH_PASS, zpass), _setter29));
  },

  viewport: function viewport(setter, x, y, width, height) {
    return setter(_defineProperty({}, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].VIEWPORT, new Int32Array([x, y, width, height])));
  }
};

// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT

// Overrides a WebGLRenderingContext state "getter" function
// to return values directly from cache

function installGetterOverride(gl, functionName) {
  // Get the original function from the WebGLRenderingContext
  var originalGetterFunc = gl[functionName].bind(gl);

  // Wrap it with a spy so that we can update our state cache when it gets called
  gl[functionName] = function () {
    var pname = arguments.length <= 0 ? undefined : arguments[0];

    // WebGL limits are not prepopulated in the cache, we must
    // query first time. They are all primitive (single value)
    if (!(pname in gl.state.cache)) {
      gl.state.cache[pname] = originalGetterFunc.apply(undefined, arguments);
    }

    // Optionally call the original function to do a "hard" query from the WebGLRenderingContext
    return gl.state.enable ?
    // Call the getter the params so that it can e.g. serve from a cache
    gl.state.cache[pname] :
    // Optionally call the original function to do a "hard" query from the WebGLRenderingContext
    originalGetterFunc.apply(undefined, arguments);
  };

  // Set the name of this anonymous function to help in debugging and profiling
  Object.defineProperty(gl[functionName], 'name', { value: functionName + '-from-cache', configurable: false });
}

// Overrides a WebGLRenderingContext state "setter" function
// to call a setter spy before the actual setter. Allows us to keep a cache
// updated with a copy of the WebGL context state.
function installSetterSpy(gl, functionName, setter, updateCache) {
  // Get the original function from the WebGLRenderingContext
  var originalSetterFunc = gl[functionName].bind(gl);

  // Wrap it with a spy so that we can update our state cache when it gets called
  gl[functionName] = function () {
    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    // Update the value
    // Call the setter with the state cache and the params so that it can store the parameters
    var valueChanged = setter.apply(undefined, [updateCache].concat(params));

    // Call the original WebGLRenderingContext func to make sure the context actually gets updated
    if (valueChanged) {
      var _gl$state;

      (_gl$state = gl.state).log.apply(_gl$state, ['gl.' + functionName].concat(params)); // eslint-disable-line
      originalSetterFunc.apply(undefined, params);
    }
    // Note: if the original function fails to set the value, our state cache will be bad
    // No solution for this at the moment, but assuming that this is unlikely to be a real problem
    // We could call the setter after the originalSetterFunc. Concern is that this would
    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions
  };

  // Set the name of this anonymous function to help in debugging and profiling
  Object.defineProperty(gl[functionName], 'name', { value: functionName + '-to-cache', configurable: false });
}

// HELPER CLASS - GLState

/* eslint-disable no-shadow */

var GLState = /*#__PURE__*/function () {
  function GLState(gl) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$copyState = _ref.copyState,
        copyState = _ref$copyState === undefined ? false : _ref$copyState,
        _ref$log = _ref.log,
        log = _ref$log === undefined ? function () {} : _ref$log;

    _classCallCheck(this, GLState);

    this.gl = gl;
    this.stateStack = [];
    this.enable = true;
    this.cache = copyState ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__set_parameters__["b" /* getParameters */])(gl) : Object.assign({}, __WEBPACK_IMPORTED_MODULE_1__set_parameters__["c" /* GL_PARAMETER_DEFAULTS */]);
    this.log = log;

    this._updateCache = this._updateCache.bind(this);
    Object.seal(this);
  }

  _createClass(GLState, [{
    key: 'push',
    value: function push() {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.stateStack.push({});
    }
  }, {
    key: 'pop',
    value: function pop() {
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(this.stateStack.length > 0);
      // Use the saved values in the state stack to restore parameters
      var oldValues = this.stateStack[this.stateStack.length - 1];
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__set_parameters__["a" /* setParameters */])(this.gl, oldValues, this.cache);
      // Don't pop until we have reset parameters (to make sure other "stack frames" are not affected)
      this.stateStack.pop();
    }

    // interceptor for context set functions - update our cache and our stack
    // values (Object) - the key values for this setter

  }, {
    key: '_updateCache',
    value: function _updateCache(values) {
      var valueChanged = false;

      var oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];

      for (var key in values) {
        __WEBPACK_IMPORTED_MODULE_3_assert___default()(key !== undefined);
        // Check that value hasn't already been shadowed
        if (!deepEqual(values[key], this.cache[key])) {
          valueChanged = true;

          // First, save current value being shadowed
          // If a state stack frame is active, save the current parameter values for pop
          // but first check that value hasn't already been shadowed and saved
          if (oldValues && !(key in oldValues)) {
            oldValues[key] = this.cache[key];
          }

          // Save current value being shadowed
          this.cache[key] = values[key];
        }
      }

      return valueChanged;
    }
  }]);

  return GLState;
}();

// PUBLIC API

/**
 * Initialize WebGL state caching on a context
 * can be called multiple times to enable/disable
 * @param {WebGLRenderingContext} - context
 */
// After calling this function, context state will be cached
// gl.state.push() and gl.state.pop() will be available for saving,
// temporarily modifying, and then restoring state.


function trackContextState(gl) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$enable = _ref2.enable,
      enable = _ref2$enable === undefined ? true : _ref2$enable,
      copyState = _ref2.copyState;

  __WEBPACK_IMPORTED_MODULE_3_assert___default()(copyState !== undefined);
  if (!gl.state) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__polyfill_context__["a" /* default */])(gl);

    // Create a state cache
    gl.state = new GLState(gl, { copyState: copyState, enable: enable });

    // intercept all setter functions in the table
    for (var key in GL_STATE_SETTERS) {
      var setter = GL_STATE_SETTERS[key];
      installSetterSpy(gl, key, setter, gl.state._updateCache);
    }

    // intercept all getter functions in the table
    installGetterOverride(gl, 'getParameter');
    installGetterOverride(gl, 'isEnabled');
  }

  gl.state.enable = enable;

  return gl;
}

function pushContextState(gl) {
  __WEBPACK_IMPORTED_MODULE_3_assert___default()(gl.state);
  gl.state.push();
}

function popContextState(gl) {
  __WEBPACK_IMPORTED_MODULE_3_assert___default()(gl.state);
  gl.state.pop();
}
//# sourceMappingURL=track-context-state.js.map

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getContextLimits */
/* unused harmony export getGLContextInfo */
/* unused harmony export getGLContextInfo2 */
/* harmony export (immutable) */ __webpack_exports__["b"] = getContextInfo;
/* harmony export (immutable) */ __webpack_exports__["a"] = glGetDebugInfo;
/* unused harmony export TEST_EXPORTS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
var _WEBGL_LIMITS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-inline-comments, max-len */



var WEBGL_LIMITS = (_WEBGL_LIMITS = {}, _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].ALIASED_LINE_WIDTH_RANGE, { gl1: new Float32Array([1, 1]) }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].ALIASED_POINT_SIZE_RANGE, { gl1: new Float32Array([1, 1]) }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TEXTURE_SIZE, { gl1: 64, gl2: 2048 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_CUBE_MAP_TEXTURE_SIZE, { gl1: 16 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TEXTURE_IMAGE_UNITS, { gl1: 8 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_COMBINED_TEXTURE_IMAGE_UNITS, { gl1: 8 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_TEXTURE_IMAGE_UNITS, { gl1: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_RENDERBUFFER_SIZE, { gl1: 1 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VARYING_VECTORS, { gl1: 8 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_ATTRIBS, { gl1: 8 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_UNIFORM_VECTORS, { gl1: 128 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_FRAGMENT_UNIFORM_VECTORS, { gl1: 16 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VIEWPORT_DIMS, { gl1: new Int32Array([0, 0]) }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_3D_TEXTURE_SIZE, { gl1: 0, gl2: 256 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_ARRAY_TEXTURE_LAYERS, { gl1: 0, gl2: 256 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_CLIENT_WAIT_TIMEOUT_WEBGL, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_COLOR_ATTACHMENTS, { gl1: 0, gl2: 4 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_COMBINED_UNIFORM_BLOCKS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_DRAW_BUFFERS, { gl1: 0, gl2: 4 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_ELEMENT_INDEX, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_ELEMENTS_INDICES, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_ELEMENTS_VERTICES, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_FRAGMENT_INPUT_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_FRAGMENT_UNIFORM_BLOCKS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_FRAGMENT_UNIFORM_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_SAMPLES, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_SERVER_WAIT_TIMEOUT, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TEXTURE_LOD_BIAS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_UNIFORM_BLOCK_SIZE, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_UNIFORM_BUFFER_BINDINGS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VARYING_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_OUTPUT_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_UNIFORM_BLOCKS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_VERTEX_UNIFORM_COMPONENTS, { gl1: 0, gl2: 0 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MIN_PROGRAM_TEXEL_OFFSET, { gl1: 0, gl2: -8, negative: true }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].MAX_PROGRAM_TEXEL_OFFSET, { gl1: 0, gl2: 7 }), _defineProperty(_WEBGL_LIMITS, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNIFORM_BUFFER_OFFSET_ALIGNMENT, { gl1: 0, gl2: 0 // GLint
}), _WEBGL_LIMITS);

function getContextLimits(gl) {
  gl.luma = gl.luma || {};

  if (!gl.luma.limits) {
    gl.luma.limits = {};
    gl.luma.webgl1MinLimits = {};
    gl.luma.webgl2MinLimits = {};

    var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl);

    // WEBGL limits
    for (var parameter in WEBGL_LIMITS) {
      var limit = WEBGL_LIMITS[parameter];

      var webgl1MinLimit = limit.gl1;
      var webgl2MinLimit = 'gl2' in limit ? limit.gl2 : limit.gl1;
      var minLimit = isWebgl2 ? webgl2MinLimit : webgl1MinLimit;

      // Check if we can query for this limit
      var limitNotAvailable = 'gl2' in limit && !isWebgl2 || 'extension' in limit && !gl.getExtension(limit.extension);

      var value = limitNotAvailable ? minLimit : gl.getParameter(parameter);
      gl.luma.limits[parameter] = value;
      gl.luma.webgl1MinLimits[parameter] = webgl1MinLimit;
      gl.luma.webgl2MinLimits[parameter] = webgl2MinLimit;
    }
  }

  return gl.luma.limits;
}

function getGLContextInfo(gl) {
  gl.luma = gl.luma || {};

  if (!gl.luma.info) {
    var _gl$luma$info;

    var info = gl.getExtension('WEBGL_debug_renderer_info');
    gl.luma.info = (_gl$luma$info = {}, _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR, gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR)), _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER, gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER)), _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNMASKED_VENDOR_WEBGL, gl.getParameter(info && info.UNMASKED_VENDOR_WEBGL || __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR)), _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNMASKED_RENDERER_WEBGL, gl.getParameter(info && info.UNMASKED_RENDERER_WEBGL || __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER)), _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VERSION, gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VERSION)), _defineProperty(_gl$luma$info, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].SHADING_LANGUAGE_VERSION, gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].SHADING_LANGUAGE_VERSION)), _gl$luma$info);
  }

  return gl.luma.info;
}

var GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.
var GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.

function getGLContextInfo2(gl) {
  var vendorMasked = gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR);
  var rendererMasked = gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER);
  var ext = gl.getExtension('WEBGL_debug_renderer_info');
  var vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR);
  var rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER);
  return {
    vendor: vendorUnmasked || vendorMasked,
    renderer: rendererUnmasked || rendererMasked,
    vendorMasked: vendorMasked,
    rendererMasked: rendererMasked,
    version: gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VERSION),
    shadingLanguageVersion: gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].SHADING_LANGUAGE_VERSION)
  };
}

function getContextInfo(gl) {
  var limits = getContextLimits(gl);
  var info = getGLContextInfo(gl);
  return {
    // basic information
    vendor: info[GL_UNMASKED_VENDOR_WEBGL] || info[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VENDOR],
    renderer: info[GL_UNMASKED_RENDERER_WEBGL] || info[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].RENDERER],
    version: info[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].VERSION],
    shadingLanguageVersion: info[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].SHADING_LANGUAGE_VERSION],
    // info, caps and limits
    info: info,
    limits: limits,
    webgl1MinLimits: gl.luma.webgl1MinLimits,
    webgl2MinLimits: gl.luma.webgl2MinLimits
  };
}

// DEBUG INFO

/**
 * Provides strings identifying the GPU vendor and driver.
 * https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/
 * @param {WebGLRenderingContext} gl - context
 * @return {Object} - 'vendor' and 'renderer' string fields.
 */
function glGetDebugInfo(gl) {
  return getGLContextInfo2(gl);
  // const info = gl.getExtension('WEBGL_debug_renderer_info');
  // // We can't determine if 'WEBGL_debug_renderer_info' is supported by
  // // checking whether info is null here. Firefox doesn't follow the
  // // specs by returning null for unsupported extension. Instead,
  // // it returns an object without GL_UNMASKED_VENDOR_WEBGL and GL_UNMASKED_RENDERER_WEBGL.
  // return {
  //   vendor: (info && info.UNMASKED_VENDOR_WEBGL) ?
  //     gl.getParameter(info.UNMASKED_VENDOR_WEBGL) : 'unknown',
  //   renderer: (info && info.UNMASKED_RENDERER_WEBGL) ?
  //     gl.getParameter(info.UNMASKED_RENDERER_WEBGL) : 'unknown'
  // };
}

var TEST_EXPORTS = {
  WEBGL_LIMITS: WEBGL_LIMITS
};
//# sourceMappingURL=context-limits.js.map

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ERR_DELETED = 'Query was deleted before result was available';
var ERR_CANCEL = 'Query was canceled before result was available';

var noop = function noop(x) {
  return x;
};

var QueryManager = /*#__PURE__*/function () {

  /**
   * Internal class that helps "asynchronous WebGL query objects" manage
   * pending requests (e.g. for EXT_disjoint_timer_query and WebGL2 queries)
   *
   * Creates and manages promises for the queries.
   * Tracks pending queries enabling polling.
   * Tracks pending queries enabling invalidation.
   * Encapsulates some standard error messages.
   *
   * Remarks:
   * - Maintains a minimal list of pending queries only to minimize GC impact
   * - Exported as a singleton class instance.
   */
  function QueryManager() {
    _classCallCheck(this, QueryManager);

    this.pendingQueries = new Set();
    this.invalidQueryType = null;
    this.invalidErrorMessage = '';
    this.checkInvalid = function () {
      return false;
    };
  }

  // API THAT SHOULD BE EXPOSED TO APPLICATION

  // Checks invalidation callback and then all pending queries for completion
  // Should only be called once per tick


  _createClass(QueryManager, [{
    key: 'poll',
    value: function poll(gl) {
      this.cancelInvalidQueries(gl);

      // Now check availability of results and resolve promises as appropriate
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.pendingQueries.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var query = _step.value;

          var resultAvailable = query.isResultAvailable();
          if (resultAvailable) {
            var result = query.getResult();
            this.resolveQuery(query, result);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    // API FOR MANAGED QUERY CLASSES

    // Registers query invalidation method - used to detect disjoint timer queries

  }, {
    key: 'setInvalidator',
    value: function setInvalidator(_ref) {
      var queryType = _ref.queryType,
          errorMessage = _ref.errorMessage,
          checkInvalid = _ref.checkInvalid;

      this.invalidQueryType = queryType;
      this.invalidErrorMessage = errorMessage;
      this.checkInvalid = checkInvalid;
    }

    // Starts a query, sets up a new promise

  }, {
    key: 'beginQuery',
    value: function beginQuery(query) {
      var onComplete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
      var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;

      // Make sure disjoint state is cleared, so that this query starts fresh
      // Cancel other queries if needed
      this.cancelInvalidQueries(query.gl);

      // Cancel current promise - noop if already resolved or rejected
      this.cancelQuery(query);

      // Create a new promise with attached resolve and reject methods
      var resolvers = {};
      query.promise = new Promise(function (resolve, reject) {
        resolvers.resolve = resolve;
        resolvers.reject = reject;
      });
      Object.assign(query.promise, resolvers);

      // Add this query to the pending queries
      this.pendingQueries.add(query);
      // Register the callbacks
      return query.promise.then(onComplete).catch(onError);
    }

    // Resolves a query with a result

  }, {
    key: 'resolveQuery',
    value: function resolveQuery(query, result) {
      this.pendingQueries.delete(query);
      query.promise.resolve(result);
    }

    // Rejects the promise

  }, {
    key: 'rejectQuery',
    value: function rejectQuery(query, errorMessage) {
      this.pendingQueries.delete(query);
      if (query.promise) {
        query.promise.reject(new Error(errorMessage));
      }
    }

    // Rejects promise with standard message for Query.delete()

  }, {
    key: 'deleteQuery',
    value: function deleteQuery(query) {
      return this.rejectQuery(query, ERR_DELETED);
    }

    // Rejects promise with standard message for Query.cancel()

  }, {
    key: 'cancelQuery',
    value: function cancelQuery(query) {
      return this.rejectQuery(query, ERR_CANCEL);
    }

    // Rejects promise with registered message for invalidation

  }, {
    key: 'invalidateQuery',
    value: function invalidateQuery(query) {
      if (query instanceof this.invalidQueryType) {
        this.rejectQuery(query, this.invalidErrorMessage);
      }
    }

    // Checks all queries to see if need to be invalidated

  }, {
    key: 'cancelInvalidQueries',
    value: function cancelInvalidQueries(gl) {
      // We assume that we can cancel queries for all context.
      // Should be OK since this is used to check for "disjoint" GPU state
      if (this.checkInvalid(gl)) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.pendingQueries.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var query = _step2.value;

            this.invalidateQuery(query);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  }]);

  return QueryManager;
}();

/* harmony default export */ __webpack_exports__["a"] = (new QueryManager());
//# sourceMappingURL=query-manager.js.map

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getUniformDescriptors */
/* unused harmony export getVaryingMap */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vertex_array__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__texture__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__transform_feedback__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__uniforms__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shader__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-inline-comments */











// const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
// const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
// MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : 0x8C80,
// TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84,
// TRANSFORM_FEEDBACK_BUFFER_SIZE : 0x8C85,
// TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88,
// MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A,
// MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B,
// INTERLEAVED_ATTRIBS: 0x8C8C,
// SEPARATE_ATTRIBS : 0x8C8D,

var Program = /*#__PURE__*/function (_Resource) {
  _inherits(Program, _Resource);

  /*
   * @classdesc
   * Handles creation of programs, mapping of attributes and uniforms
   *
   * @class
   * @param {WebGLRenderingContext} gl - gl context
   * @param {Object} opts - options
   * @param {String} opts.vs - Vertex shader source
   * @param {String} opts.fs - Fragment shader source
   * @param {String} opts.id= - Id
   */
  function Program(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Program);

    var _this = _possibleConstructorReturn(this, (Program.__proto__ || Object.getPrototypeOf(Program)).call(this, gl, opts));

    _this.initialize(opts);
    _this.vertexAttributes = __WEBPACK_IMPORTED_MODULE_2__vertex_array__["a" /* default */].getDefaultArray(gl);
    Object.seal(_this);

    // If program is not named, name it after shader names
    if (!opts.id) {
      var programName = _this.vs.getName() || _this.fs.getName();
      programName = programName.replace(/shader/i, '');
      programName = programName ? programName + '-program' : 'program';
      // TODO - this.id will already have been initialized
      _this.id = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils__["uid"])(programName);
    }
    return _this;
  }

  _createClass(Program, [{
    key: 'initialize',
    value: function initialize() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          vs = _ref.vs,
          fs = _ref.fs,
          defaultUniforms = _ref.defaultUniforms,
          varyings = _ref.varyings,
          _ref$bufferMode = _ref.bufferMode,
          bufferMode = _ref$bufferMode === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SEPARATE_ATTRIBS : _ref$bufferMode;

      // Create shaders if needed
      this.vs = typeof vs === 'string' ? new __WEBPACK_IMPORTED_MODULE_7__shader__["a" /* VertexShader */](this.gl, vs) : vs;
      this.fs = typeof fs === 'string' ? new __WEBPACK_IMPORTED_MODULE_7__shader__["b" /* FragmentShader */](this.gl, fs) : fs;

      __WEBPACK_IMPORTED_MODULE_9_assert___default()(this.vs instanceof __WEBPACK_IMPORTED_MODULE_7__shader__["a" /* VertexShader */], 'Program: bad vertex shader');
      __WEBPACK_IMPORTED_MODULE_9_assert___default()(this.fs instanceof __WEBPACK_IMPORTED_MODULE_7__shader__["b" /* FragmentShader */], 'Program: bad fragment shader');

      this.defaultUniforms = defaultUniforms;

      // Setup varyings if supplied
      if (varyings) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);
        this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);
        this.varyings = getVaryingMap(varyings, bufferMode);
      }

      this._compileAndLink();

      // determine attribute locations (i.e. indices)
      this._attributeLocations = this._getAttributeLocations();
      this._attributeCount = this.getAttributeCount();
      this._warn = [];
      this._filledLocations = {};

      // prepare uniform setters
      this._uniformSetters = this._getUniformSetters();
      this._uniformCount = this.getUniformCount();
      this._textureIndexCounter = 0;

      return this;
    }
  }, {
    key: 'use',
    value: function use() {
      this.gl.useProgram(this.handle);
      return this;
    }

    // A good thing about webGL is that there are so many ways to draw things,
    // e.g. depending on whether data is indexed and/or isInstanced.
    // This function unifies those into a single call with simple parameters
    // that have sane defaults.

  }, {
    key: 'draw',
    value: function draw(_ref2) {
      var _this2 = this;

      var _ref2$drawMode = _ref2.drawMode,
          drawMode = _ref2$drawMode === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TRIANGLES : _ref2$drawMode,
          vertexCount = _ref2.vertexCount,
          _ref2$offset = _ref2.offset,
          offset = _ref2$offset === undefined ? 0 : _ref2$offset,
          start = _ref2.start,
          end = _ref2.end,
          _ref2$isIndexed = _ref2.isIndexed,
          isIndexed = _ref2$isIndexed === undefined ? false : _ref2$isIndexed,
          _ref2$indexType = _ref2.indexType,
          indexType = _ref2$indexType === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_SHORT : _ref2$indexType,
          _ref2$isInstanced = _ref2.isInstanced,
          isInstanced = _ref2$isInstanced === undefined ? false : _ref2$isInstanced,
          _ref2$instanceCount = _ref2.instanceCount,
          instanceCount = _ref2$instanceCount === undefined ? 0 : _ref2$instanceCount,
          _ref2$vertexArray = _ref2.vertexArray,
          vertexArray = _ref2$vertexArray === undefined ? null : _ref2$vertexArray,
          _ref2$transformFeedba = _ref2.transformFeedback,
          transformFeedback = _ref2$transformFeedba === undefined ? null : _ref2$transformFeedba,
          _ref2$uniforms = _ref2.uniforms,
          uniforms = _ref2$uniforms === undefined ? {} : _ref2$uniforms,
          _ref2$samplers = _ref2.samplers,
          samplers = _ref2$samplers === undefined ? {} : _ref2$samplers,
          _ref2$parameters = _ref2.parameters,
          parameters = _ref2$parameters === undefined ? {} : _ref2$parameters,
          settings = _ref2.settings;

      if (settings) {
        __WEBPACK_IMPORTED_MODULE_8__utils__["log"].deprecated('settings', 'parameters');
        parameters = settings;
      }

      vertexArray = vertexArray || __WEBPACK_IMPORTED_MODULE_2__vertex_array__["a" /* default */].getDefaultArray(this.gl);
      vertexArray.bind(function () {

        _this2.gl.useProgram(_this2.handle);

        if (transformFeedback) {
          if (parameters[__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RASTERIZER_DISCARD]) {
            // bypass fragment shader
            _this2.gl.enable(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RASTERIZER_DISCARD);
          }

          var primitiveMode = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__transform_feedback__["a" /* getTransformFeedbackMode */])({ drawMode: drawMode });
          transformFeedback.begin(primitiveMode);
        }

        _this2.setUniforms(uniforms, samplers);

        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension
        if (isIndexed && isInstanced) {
          _this2.ext.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);
        } else if (isIndexed && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(_this2.gl) && !isNaN(start) && !isNaN(end)) {
          _this2.gl.drawElementsRange(drawMode, start, end, vertexCount, indexType, offset);
        } else if (isIndexed) {
          _this2.gl.drawElements(drawMode, vertexCount, indexType, offset);
        } else if (isInstanced) {
          _this2.ext.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);
        } else {
          _this2.gl.drawArrays(drawMode, offset, vertexCount);
        }

        // this.gl.useProgram(null);

        if (transformFeedback) {
          transformFeedback.end();

          if (parameters[__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RASTERIZER_DISCARD]) {
            // resume fragment shader
            _this2.gl.disable(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RASTERIZER_DISCARD);
          }
        }
      });

      return this;
    }

    /**
     * Attach a map of Buffers values to a program
     * Only attributes with names actually present in the linked program
     * will be updated. Other supplied buffers will be ignored.
     *
     * @param {Object} buffers - An object map with attribute names being keys
     *  and values are expected to be instances of Buffer.
     * @returns {Program} Returns itself for chaining.
     */
    /* eslint-disable max-statements */

  }, {
    key: 'setBuffers',
    value: function setBuffers(buffers) {
      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref3$clear = _ref3.clear,
          clear = _ref3$clear === undefined ? true : _ref3$clear,
          _ref3$check = _ref3.check,
          check = _ref3$check === undefined ? true : _ref3$check,
          _ref3$drawParams = _ref3.drawParams,
          drawParams = _ref3$drawParams === undefined ? {} : _ref3$drawParams;

      if (clear) {
        this._filledLocations = {};
      }

      // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER
      // index type is saved for drawElement calls
      drawParams.isInstanced = false;
      drawParams.isIndexed = false;
      drawParams.indexType = null;

      var _sortBuffersByLocatio = this._sortBuffersByLocation(buffers),
          locations = _sortBuffersByLocatio.locations,
          elements = _sortBuffersByLocatio.elements;

      // Process locations in order


      for (var location = 0; location < locations.length; ++location) {
        var bufferName = locations[location];
        var buffer = buffers[bufferName];
        // DISABLE MISSING ATTRIBUTE
        if (!buffer) {
          this.vertexAttributes.disable(location);
        } else {
          var divisor = buffer.layout.instanced ? 1 : 0;
          this.vertexAttributes.enable(location);
          this.vertexAttributes.setBuffer({ location: location, buffer: buffer });
          this.vertexAttributes.setDivisor(location, divisor);
          drawParams.isInstanced = buffer.layout.instanced > 0;
          this._filledLocations[bufferName] = true;
        }
      }

      // SET ELEMENTS ARRAY BUFFER
      if (elements) {
        var _buffer = buffers[elements];
        _buffer.bind();
        drawParams.isIndexed = true;
        drawParams.indexType = _buffer.layout.type;
      }

      if (check) {
        this._checkBuffers();
      }

      return this;
    }
    /* eslint-enable max-statements */

    /*
     * @returns {Program} Returns itself for chaining.
     */

  }, {
    key: 'unsetBuffers',
    value: function unsetBuffers() {
      var length = this._attributeCount;
      for (var i = 1; i < length; ++i) {
        // this.vertexAttributes.setDivisor(i, 0);
        this.vertexAttributes.disable(i);
      }

      // Clear elements buffer
      this.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ELEMENT_ARRAY_BUFFER, null);
      return this;
    }

    /**
     * Apply a set of uniform values to a program
     * Only uniforms with names actually present in the linked program
     * will be updated.
     * other uniforms will be ignored
     *
     * @param {Object} uniformMap - An object with names being keys
     * @returns {Program} - returns itself for chaining.
     */
    /* eslint-disable max-depth */

  }, {
    key: 'setUniforms',
    value: function setUniforms(uniforms) {
      var samplers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      for (var uniformName in uniforms) {
        var uniform = uniforms[uniformName];
        var uniformSetter = this._uniformSetters[uniformName];
        var sampler = samplers[uniformName];

        if (uniformSetter) {
          if (uniform instanceof __WEBPACK_IMPORTED_MODULE_4__texture__["a" /* default */]) {
            if (uniformSetter.textureIndex === undefined) {
              uniformSetter.textureIndex = this._textureIndexCounter++;
            }

            // Bind texture to index
            var texture = uniform;
            var textureIndex = uniformSetter.textureIndex;


            texture.bind(textureIndex);

            // Bind a sampler (if supplied) to index
            if (sampler) {
              sampler.bind(textureIndex);
            }

            // Set the uniform sampler to the texture index
            uniformSetter(textureIndex);
          } else {
            // Just set the value
            uniformSetter(uniform);
          }
        }
      }

      return this;
    }
    /* eslint-enable max-depth */

    // setTransformFeedbackBuffers(buffers) {
    //   for (const buffer of buffers) {
    //     buffer.bindBase()
    //   }
    // }

    /**
     * ATTRIBUTES API
     * (Locations are numeric indices)
     * @return {Number} count
     */

  }, {
    key: 'getAttributeCount',
    value: function getAttributeCount() {
      return this._getParameter(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ACTIVE_ATTRIBUTES);
    }

    /**
     * Returns location (index) of a name
     * @param {String} attributeName - name of an attribute
     *   (matches name in a linked shader)
     * @returns {Number} - // array of actual attribute names from shader linking
     */

  }, {
    key: 'getAttributeLocation',
    value: function getAttributeLocation(attributeName) {
      return this.gl.getAttribLocation(this.handle, attributeName);
    }

    /**
     * Returns an object with info about attribute at index "location"/
     * @param {int} location - index of an attribute
     * @returns {WebGLActiveInfo} - info about an active attribute
     *   fields: {name, size, type}
     */

  }, {
    key: 'getAttributeInfo',
    value: function getAttributeInfo(location) {
      return this.gl.getActiveAttrib(this.handle, location);
    }

    /**
     * UNIFORMS API
     * (Locations are numeric indices)
     * @return {Number} count
     */

  }, {
    key: 'getUniformCount',
    value: function getUniformCount() {
      return this._getParameter(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ACTIVE_UNIFORMS);
    }

    /*
     * @returns {WebGLActiveInfo} - object with {name, size, type}
     */

  }, {
    key: 'getUniformInfo',
    value: function getUniformInfo(index) {
      return this.gl.getActiveUniform(this.handle, index);
    }

    /*
     * @returns {WebGLUniformLocation} - opaque object representing location
     * of uniform, used by setter methods
     */

  }, {
    key: 'getUniformLocation',
    value: function getUniformLocation(name) {
      return this.gl.getUniformLocation(this.handle, name);
    }
  }, {
    key: 'getUniformValue',
    value: function getUniformValue(location) {
      return this.gl.getUniform(this.handle, location);
    }

    // WebGL2
    /**
     * @param {GLuint} index
     * @return {WebGLActiveInfo} - object with {name, size, type}
     */

  }, {
    key: 'getVarying',
    value: function getVarying(program, index) {
      var result = this.gl.getTransformFeedbackVarying(program, index);
      return result;
    }

    // Retrieves the assigned color number binding for the user-defined varying
    // out variable name for program. program must have previously been linked.

  }, {
    key: 'getFragDataLocation',
    value: function getFragDataLocation(varyingName) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(this.gl);
      return this.gl.getFragDataLocation(this.handle, varyingName);
    }

    // @returns {WebGLShader[]} - array of attached WebGLShader objects

  }, {
    key: 'getAttachedShaders',
    value: function getAttachedShaders() {
      return this.gl.getAttachedShaders(this.handle);
    }

    // PRIVATE METHODS

  }, {
    key: '_compileAndLink',
    value: function _compileAndLink() {
      var gl = this.gl;

      gl.attachShader(this.handle, this.vs.handle);
      gl.attachShader(this.handle, this.fs.handle);
      gl.linkProgram(this.handle);

      // Avoid checking program linking error in production
      if (gl.debug || __WEBPACK_IMPORTED_MODULE_8__utils__["log"].priority > 0) {
        gl.validateProgram(this.handle);
        var linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);
        if (!linked) {
          throw new Error('Error linking ' + gl.getProgramInfoLog(this.handle));
        }
      }
    }
  }, {
    key: '_checkBuffers',
    value: function _checkBuffers() {
      for (var attributeName in this._attributeLocations) {
        if (!this._filledLocations[attributeName] && !this._warn[attributeName]) {
          var location = this._attributeLocations[attributeName];
          // throw new Error(`Program ${this.id}: ` +
          //   `Attribute ${location}:${attributeName} not supplied`);
          __WEBPACK_IMPORTED_MODULE_8__utils__["log"].warn(0, 'Program ' + this.id + ': Attribute ' + location + ':' + attributeName + ' not supplied');
          this._warn[attributeName] = true;
        }
      }
      return this;
    }
  }, {
    key: '_sortBuffersByLocation',
    value: function _sortBuffersByLocation(buffers) {
      var elements = null;
      var locations = new Array(this._attributeCount);

      for (var bufferName in buffers) {
        var buffer = buffers[bufferName];
        var location = this._attributeLocations[bufferName];
        if (location === undefined) {
          if (buffer.target === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ELEMENT_ARRAY_BUFFER && elements) {
            throw new Error(this._print(bufferName) + ' duplicate GL.ELEMENT_ARRAY_BUFFER');
          } else if (buffer.target === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ELEMENT_ARRAY_BUFFER) {
            elements = bufferName;
          } else if (!this._warn[bufferName]) {
            __WEBPACK_IMPORTED_MODULE_8__utils__["log"].warn(2, this._print(bufferName) + ' not used');
            this._warn[bufferName] = true;
          }
        } else {
          if (buffer.target === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ELEMENT_ARRAY_BUFFER) {
            throw new Error(this._print(bufferName) + ':' + location + ' ' + 'has both location and type gl.ELEMENT_ARRAY_BUFFER');
          }
          locations[location] = bufferName;
        }
      }
      return { locations: locations, elements: elements };
    }

    // Check that all active attributes are enabled

  }, {
    key: '_areAllAttributesEnabled',
    value: function _areAllAttributesEnabled() {
      var length = this._attributeCount;
      for (var i = 0; i < length; ++i) {
        if (!this.vertexAttributes.isEnabled(i)) {
          return false;
        }
      }
      return true;
    }

    // determine attribute locations (maps attribute name to index)

  }, {
    key: '_getAttributeLocations',
    value: function _getAttributeLocations() {
      var attributeLocations = {};
      var length = this.getAttributeCount();
      for (var location = 0; location < length; location++) {
        var name = this.getAttributeInfo(location).name;
        attributeLocations[name] = this.getAttributeLocation(name);
      }
      return attributeLocations;
    }

    // create uniform setters
    // Map of uniform names to setter functions

  }, {
    key: '_getUniformSetters',
    value: function _getUniformSetters() {
      var gl = this.gl;

      var uniformSetters = {};
      var length = this.getUniformCount();
      for (var i = 0; i < length; i++) {
        var info = this.getUniformInfo(i);
        var parsedName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__uniforms__["a" /* parseUniformName */])(info.name);
        var location = this.getUniformLocation(parsedName.name);
        uniformSetters[parsedName.name] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__uniforms__["b" /* getUniformSetter */])(gl, location, info, parsedName.isArray);
      }
      return uniformSetters;
    }
  }, {
    key: '_print',
    value: function _print(bufferName) {
      return 'Program ' + this.id + ': Attribute ' + bufferName;
    }
  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createProgram();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteProgram(this.handle);
    }
  }, {
    key: '_getOptionsFromHandle',
    value: function _getOptionsFromHandle(handle) {
      var shaderHandles = this.gl.getAttachedShaders(handle);
      var opts = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = shaderHandles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var shaderHandle = _step.value;

          var type = this.gl.getShaderParameter(this.handle, __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SHADER_TYPE);
          switch (type) {
            case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].VERTEX_SHADER:
              opts.vs = new __WEBPACK_IMPORTED_MODULE_7__shader__["a" /* VertexShader */]({ handle: shaderHandle });
              break;
            case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].FRAGMENT_SHADER:
              opts.fs = new __WEBPACK_IMPORTED_MODULE_7__shader__["b" /* FragmentShader */]({ handle: shaderHandle });
              break;
            default:
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return opts;
    }
  }, {
    key: '_getParameter',
    value: function _getParameter(pname) {
      return this.gl.getProgramParameter(this.handle, pname);
    }
  }]);

  return Program;
}(__WEBPACK_IMPORTED_MODULE_3__resource__["a" /* default */]);

// create uniform setters
// Map of uniform names to setter functions


/* harmony default export */ __webpack_exports__["a"] = (Program);
function getUniformDescriptors(gl, program) {
  var uniformDescriptors = {};
  var length = program.getUniformCount();
  for (var i = 0; i < length; i++) {
    var info = program.getUniformInfo(i);
    var location = program.getUniformLocation(info.name);
    var descriptor = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__uniforms__["b" /* getUniformSetter */])(gl, location, info);
    uniformDescriptors[descriptor.name] = descriptor;
  }
  return uniformDescriptors;
}

// Get a map of buffer indices
function getVaryingMap(varyings, bufferMode) {
  var varyingMap = {};
  var index = 0;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = varyings[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var varying = _step2.value;

      if (bufferMode === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SEPARATE_ATTRIBS) {
        varyingMap[varyings] = { index: index };
        index++;
      } else if (varying === 'gl_NextBuffer') {
        index++;
      } else {
        // Add a "safe" offset as fallback unless app specifies it
        // Could query
        varyingMap[varyings] = { index: index, offset: 16 };
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return varyingMap;
}
//# sourceMappingURL=program.js.map

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__texture__ = __webpack_require__(13);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Texture2D = /*#__PURE__*/function (_Texture) {
  _inherits(Texture2D, _Texture);

  _createClass(Texture2D, null, [{
    key: 'isSupported',
    value: function isSupported(gl, opts) {
      return __WEBPACK_IMPORTED_MODULE_2__texture__["a" /* default */].isSupported(gl, opts);
    }

    /**
     * @classdesc
     * 2D WebGL Texture
     * Note: Constructor will initialize your texture.
     *
     * @class
     * @param {WebGLRenderingContext} gl - gl context
     * @param {Image|ArrayBuffer|null} opts= - named options
     * @param {Image|ArrayBuffer|null} opts.data= - buffer
     * @param {GLint} width - width of texture
     * @param {GLint} height - height of texture
     */

  }]);

  function Texture2D(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Texture2D);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["f" /* assertWebGLContext */])(gl);

    var _this = _possibleConstructorReturn(this, (Texture2D.__proto__ || Object.getPrototypeOf(Texture2D)).call(this, gl, Object.assign({}, opts, { target: gl.TEXTURE_2D })));

    _this.initialize(opts);

    Object.seal(_this);
    return _this;
  }

  // target cannot be modified by bind:
  // textures are special because when you first bind them to a target,
  // they get special information. When you first bind a texture as a
  // GL_TEXTURE_2D, you are actually setting special state in the texture.
  // You are saying that this texture is a 2D texture.
  // And it will always be a 2D texture; this state cannot be changed ever.
  // If you have a texture that was first bound as a GL_TEXTURE_2D,
  // you must always bind it as a GL_TEXTURE_2D;
  // attempting to bind it as GL_TEXTURE_1D will give rise to an error
  // (while run-time).

  _createClass(Texture2D, [{
    key: 'bind',
    value: function bind() {
      var textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;
      var gl = this.gl;

      if (textureUnit === undefined) {
        throw new Error('Texture.bind: must specify texture unit');
      }
      this.textureUnit = textureUnit;
      gl.activeTexture(gl.TEXTURE0 + textureUnit);
      gl.bindTexture(this.target, this.handle);
      return textureUnit;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      var gl = this.gl;

      if (this.textureUnit === undefined) {
        throw new Error('Texture.unbind: texture unit not specified');
      }
      gl.activeTexture(gl.TEXTURE0 + this.textureUnit);
      gl.bindTexture(this.target, null);
      return this.textureUnit;
    }
  }, {
    key: 'getActiveUnit',
    value: function getActiveUnit() {
      return this.gl.getParameter(__WEBPACK_IMPORTED_MODULE_0__api__["f" /* GL */].ACTIVE_TEXTURE) - __WEBPACK_IMPORTED_MODULE_0__api__["f" /* GL */].TEXTURE0;
    }
  }]);

  return Texture2D;
}(__WEBPACK_IMPORTED_MODULE_2__texture__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Texture2D);
//# sourceMappingURL=texture-2d.js.map

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = parseUniformName;
/* harmony export (immutable) */ __webpack_exports__["b"] = getUniformSetter;
/* harmony export (immutable) */ __webpack_exports__["d"] = checkUniformValues;
/* harmony export (immutable) */ __webpack_exports__["c"] = getUniformsTable;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__texture__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _UNIFORM_SETTERS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





// Local constants, will be "collapsed" during minification

// WebGL1

var GL_FLOAT = 0x1406;
var GL_FLOAT_VEC2 = 0x8B50;
var GL_FLOAT_VEC3 = 0x8B51;
var GL_FLOAT_VEC4 = 0x8B52;

var GL_INT = 0x1404;
var GL_INT_VEC2 = 0x8B53;
var GL_INT_VEC3 = 0x8B54;
var GL_INT_VEC4 = 0x8B55;

var GL_BOOL = 0x8B56;
var GL_BOOL_VEC2 = 0x8B57;
var GL_BOOL_VEC3 = 0x8B58;
var GL_BOOL_VEC4 = 0x8B59;

var GL_FLOAT_MAT2 = 0x8B5A;
var GL_FLOAT_MAT3 = 0x8B5B;
var GL_FLOAT_MAT4 = 0x8B5C;

var GL_SAMPLER_2D = 0x8B5E;
var GL_SAMPLER_CUBE = 0x8B60;

// WebGL2

var GL_UNSIGNED_INT = 0x1405;
var GL_UNSIGNED_INT_VEC2 = 0x8DC6;
var GL_UNSIGNED_INT_VEC3 = 0x8DC7;
var GL_UNSIGNED_INT_VEC4 = 0x8DC8;

/* eslint-disable camelcase */
var GL_FLOAT_MAT2x3 = 0x8B65;
var GL_FLOAT_MAT2x4 = 0x8B66;
var GL_FLOAT_MAT3x2 = 0x8B67;
var GL_FLOAT_MAT3x4 = 0x8B68;
var GL_FLOAT_MAT4x2 = 0x8B69;
var GL_FLOAT_MAT4x3 = 0x8B6A;

var GL_SAMPLER_3D = 0x8B5F;
var GL_SAMPLER_2D_SHADOW = 0x8B62;
var GL_SAMPLER_2D_ARRAY = 0x8DC1;
var GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
var GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
var GL_INT_SAMPLER_2D = 0x8DCA;
var GL_INT_SAMPLER_3D = 0x8DCB;
var GL_INT_SAMPLER_CUBE = 0x8DCC;
var GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
var GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
var GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
var GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
var GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;

/* TODO - create static Float32...Arrays and copy into those instead of minting new ones?
const arrays = {};
function getTypedArray(type, data) {
  if (flatArrayLength > 1) {
    setter = val => {
      if (!(val instanceof TypedArray)) {
        const typedArray = new TypedArray(flatArrayLength);
        typedArray.set(val);
        val = typedArray;
      }
      assert(val.length === flatArrayLength);
    };
  }
}
// TODO - handle array uniforms
*/

var UNIFORM_SETTERS = (_UNIFORM_SETTERS = {}, _defineProperty(_UNIFORM_SETTERS, GL_FLOAT, function (gl, location, value) {
  return gl.uniform1f(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_VEC2, function (gl, location, value) {
  return gl.uniform2fv(location, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_VEC3, function (gl, location, value) {
  return gl.uniform3fv(location, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_VEC4, function (gl, location, value) {
  return gl.uniform4fv(location, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_INT, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_VEC2, function (gl, location, value) {
  return gl.uniform2iv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_VEC3, function (gl, location, value) {
  return gl.uniform3iv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_VEC4, function (gl, location, value) {
  return gl.uniform4iv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_BOOL, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_BOOL_VEC2, function (gl, location, value) {
  return gl.uniform2iv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_BOOL_VEC3, function (gl, location, value) {
  return gl.uniform3fv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_BOOL_VEC4, function (gl, location, value) {
  return gl.uniform4iv(location, new Int32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT2, function (gl, location, value) {
  return gl.uniformMatrix2fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT3, function (gl, location, value) {
  return gl.uniformMatrix3fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT4, function (gl, location, value) {
  return gl.uniformMatrix4fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_2D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_CUBE, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT, function (gl, location, value) {
  return gl.uniform1ui(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_VEC2, function (gl, location, value) {
  return gl.uniform2uiv(location, new Uint32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_VEC3, function (gl, location, value) {
  return gl.uniform3uiv(location, new Uint32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_VEC4, function (gl, location, value) {
  return gl.uniform4uiv(location, new Uint32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT2x3, function (gl, location, value) {
  return gl.uniformMatrix2x3fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT2x4, function (gl, location, value) {
  return gl.uniformMatrix2x4fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT3x2, function (gl, location, value) {
  return gl.uniformMatrix3x2fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT3x4, function (gl, location, value) {
  return gl.uniformMatrix3x4fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT4x2, function (gl, location, value) {
  return gl.uniformMatrix4x2fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_FLOAT_MAT4x3, function (gl, location, value) {
  return gl.uniformMatrix4x3fv(location, false, new Float32Array(value));
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_3D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_2D_SHADOW, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_2D_ARRAY, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_2D_ARRAY_SHADOW, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_SAMPLER_CUBE_SHADOW, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_SAMPLER_2D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_SAMPLER_3D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_SAMPLER_CUBE, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_INT_SAMPLER_2D_ARRAY, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_SAMPLER_2D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_SAMPLER_3D, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_SAMPLER_CUBE, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _defineProperty(_UNIFORM_SETTERS, GL_UNSIGNED_INT_SAMPLER_2D_ARRAY, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _UNIFORM_SETTERS);

function parseUniformName(name) {
  // name = name[name.length - 1] === ']' ?
  // name.substr(0, name.length - 3) : name;

  // if array name then clean the array brackets
  var UNIFORM_NAME_REGEXP = /([^\[]*)(\[[0-9]+\])?/;
  var matches = name.match(UNIFORM_NAME_REGEXP);
  if (!matches || matches.length < 2) {
    throw new Error('Failed to parse GLSL uniform name ' + name);
  }

  return {
    name: matches[1],
    length: matches[2] || 1,
    isArray: Boolean(matches[2])
  };
}

// Returns a Magic Uniform Setter
/* eslint-disable complexity */
function getUniformSetter(gl, location, info) {
  var setter = UNIFORM_SETTERS[info.type];
  if (!setter) {
    throw new Error('Unknown GLSL uniform type ' + info.type);
  }
  return setter.bind(null, gl, location);
}

// Basic checks of uniform values without knowledge of program
// To facilitate early detection of e.g. undefined values in JavaScript
function checkUniformValues(uniforms, source) {
  for (var uniformName in uniforms) {
    var value = uniforms[uniformName];
    if (!checkUniformValue(value)) {
      // Add space to source
      source = source ? source + ' ' : '';
      // Value could be unprintable so write the object on console
      console.error(source + ' Bad uniform ' + uniformName, value); // eslint-disable-line
      /* eslint-enable no-console */
      throw new Error(source + ' Bad uniform ' + uniformName);
    }
  }
  return true;
}

function checkUniformValue(value) {
  var ok = true;

  // Test for texture (for sampler uniforms)
  // WebGL2: if (value instanceof Texture || value instanceof Sampler) {
  if (value instanceof __WEBPACK_IMPORTED_MODULE_0__texture__["a" /* default */]) {
    ok = true;
    // Check that every element in array is a number, and at least 1 element
  } else if (Array.isArray(value)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var element = _step.value;

        if (!isFinite(element)) {
          ok = false;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    ok = ok && value.length > 0;
    // Typed arrays can only contain numbers, but check length
  } else if (ArrayBuffer.isView(value)) {
    ok = value.length > 0;
    // Check that single value is a number
  } else if (!isFinite(value)) {
    ok = false;
  }

  return ok;
}

// Prepares a table suitable for console.table
/* eslint-disable max-statements */
function getUniformsTable() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$header = _ref.header,
      header = _ref$header === undefined ? 'Uniforms' : _ref$header,
      program = _ref.program,
      uniforms = _ref.uniforms;

  __WEBPACK_IMPORTED_MODULE_2_assert___default()(program);

  var uniformLocations = program._uniformSetters;
  var table = _defineProperty({}, header, {});

  // Add program's provided uniforms
  for (var uniformName in uniformLocations) {
    var uniform = uniforms[uniformName];
    if (uniform !== undefined) {
      table[uniformName] = {
        Type: uniform,
        Value: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["formatValue"])(uniform)
      };
    }
  }

  // Add program's unprovided uniforms
  for (var _uniformName in uniformLocations) {
    var _uniform = uniforms[_uniformName];
    if (_uniform === undefined) {
      table[_uniformName] = {
        Type: 'NOT PROVIDED',
        Value: 'N/A'
      };
    }
  }

  var unusedTable = {};
  var unusedCount = 0;

  // List any unused uniforms
  for (var _uniformName2 in uniforms) {
    var _uniform2 = uniforms[_uniformName2];
    if (!table[_uniformName2]) {
      unusedCount++;
      unusedTable[_uniformName2] = {
        Type: 'NOT USED: ' + _uniform2,
        Value: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["formatValue"])(_uniform2)
      };
    }
  }

  return { table: table, unusedTable: unusedTable, unusedCount: unusedCount };
}
//# sourceMappingURL=uniforms.js.map

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(2);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// WebGL2 VertexArray Objects Helper






/* eslint-disable camelcase */
var OES_vertex_array_object = 'OES_vertex_array_object';

var GL_ELEMENT_ARRAY_BUFFER = 0x8893;

// const GL_CURRENT_VERTEX_ATTRIB = 0x8626;

var GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
var GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
var GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
var GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
var GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
var GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
var GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;

var GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
var GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;

var PARAMETERS = [GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_POINTER, GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR];

var ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';

var VertexArray = /*#__PURE__*/function (_Resource) {
  _inherits(VertexArray, _Resource);

  _createClass(VertexArray, [{
    key: 'MAX_ATTRIBUTES',
    get: function get() {
      return this.gl.getParameter(this.gl.MAX_VERTEX_ATTRIBS);
    }

    // Create a VertexArray

  }], [{
    key: 'isSupported',
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl) || gl.getExtension(OES_vertex_array_object);
    }
  }, {
    key: 'getDefaultArray',
    value: function getDefaultArray(gl) {
      gl.luma = gl.luma || {};
      if (!gl.luma.defaultVertexArray) {
        gl.luma.defaultVertexArray = new VertexArray(gl, { handle: null });
      }
      return gl.luma.defaultVertexArray;
    }
  }, {
    key: 'getMaxAttributes',
    value: function getMaxAttributes(gl) {
      return gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
    }
  }]);

  function VertexArray(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, VertexArray);

    var _this = _possibleConstructorReturn(this, (VertexArray.__proto__ || Object.getPrototypeOf(VertexArray)).call(this, gl, opts));

    _this.elements = null;
    _this.buffers = {}; // new Array(this.MAX_VERTEX_ATTRIBS).fill(null);
    _this.locations = {};
    _this.names = {};
    _this.drawParameters = {};

    _this._bound = false;
    Object.seal(_this);

    _this.initialize(opts);
    return _this;
  }

  _createClass(VertexArray, [{
    key: 'initialize',
    value: function initialize() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$buffers = _ref.buffers,
          buffers = _ref$buffers === undefined ? {} : _ref$buffers,
          _ref$elements = _ref.elements,
          elements = _ref$elements === undefined ? null : _ref$elements,
          _ref$locations = _ref.locations,
          locations = _ref$locations === undefined ? {} : _ref$locations;

      this.setLocations(locations);
      this.setBuffers(buffers, { clear: true });
      this.setElements(elements);
    }

    // Register an optional buffer name to location mapping

  }, {
    key: 'setLocations',
    value: function setLocations(locations) {
      this.locations = locations;
      this.names = {};
    }

    // Set (bind) an elements buffer, for indexed rendering. Must be GL.ELEMENT_ARRAY_BUFFER

  }, {
    key: 'setElements',
    value: function setElements(elements) {
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(!elements || elements.target === GL_ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);

      this.ext.bindVertexArray(this.handle);
      this.gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, elements && elements.handle);
      this.ext.bindVertexArray(null);

      this.elements = elements;
      return this;
    }

    // Set (bind) an array or map of vertex array buffers, either in numbered or
    // named locations. (named locations requires `locations` to have been provided).
    // For names that are not present in `location`, the supplied buffers will be ignored.
    // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements
    // @param {Object} buffers - An object map with attribute names being keys
    //   and values are expected to be instances of Buffer.

  }, {
    key: '_getBufferAndLayout',
    value: function _getBufferAndLayout(bufferData) {
      // Check if buffer was supplied
      var buffer = void 0;
      var layout = void 0;
      if (bufferData.handle) {
        buffer = bufferData;
        layout = bufferData.layout;
      } else {
        buffer = bufferData.buffer;
        layout = Object.assign({}, buffer.layout, bufferData.layout || {}, bufferData);
      }
      return { buffer: buffer, layout: layout };
    }
  }, {
    key: 'setBuffers',
    value: function setBuffers(buffers, _ref2) {
      var clear = _ref2.clear,
          check = _ref2.check;

      var _getLocations2 = this._getLocations(buffers),
          locations = _getLocations2.locations,
          elements = _getLocations2.elements;

      this.ext.bindVertexArray(this.handle);

      // Process locations in order
      for (var location in locations) {
        var bufferData = locations[location];
        if (bufferData) {
          var _getBufferAndLayout2 = this._getBufferAndLayout(bufferData),
              buffer = _getBufferAndLayout2.buffer,
              layout = _getBufferAndLayout2.layout;

          this.setBuffer({ location: location, buffer: buffer, layout: layout });
          this.setDivisor(location, layout.instanced ? 1 : 0);
          this.enable(location);
        } else {
          // DISABLE MISSING ATTRIBUTE
          this.disable(location);
        }
      }
      this.buffers = buffers;

      this.ext.bindVertexArray(null);

      if (elements) {
        this.setElements(elements);
      }

      if (check) {
        this._checkBuffers();
      }
    }

    // Enable an attribute

  }, {
    key: 'enable',
    value: function enable(location) {
      var _this2 = this;

      this.bind(function () {
        _this2.gl.enableVertexAttribArray(location);
      });
    }

    // Disable an attribute

  }, {
    key: 'disable',
    value: function disable(location) {
      var _this3 = this;

      // Don't disable location 0
      if (location > 0) {
        this.bind(function () {
          _this3.gl.disableVertexAttribArray(location);
        });
      }
    }

    // Set the frequency divisor used for instanced rendering.

  }, {
    key: 'setDivisor',
    value: function setDivisor(location, divisor) {
      var _this4 = this;

      this.bind(function () {
        _this4.ext.vertexAttribDivisor(location, divisor);
      });
    }

    // Set a location in vertex attributes array to a buffer

  }, {
    key: 'setBuffer',
    value: function setBuffer() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          location = _ref3.location,
          buffer = _ref3.buffer,
          target = _ref3.target,
          layout = _ref3.layout;

      var gl = this.gl;

      // Copy main data characteristics from buffer

      target = target !== undefined ? target : buffer.target;
      layout = layout !== undefined ? layout : buffer.layout;
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(target, 'setBuffer needs target');
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(layout, 'setBuffer called on uninitialized buffer');

      this.bind(function () {
        // a non-zero named buffer object must be bound to the GL_ARRAY_BUFFER target
        buffer.bind({ target: gl.ARRAY_BUFFER });

        var _layout = layout,
            size = _layout.size,
            type = _layout.type,
            normalized = _layout.normalized,
            stride = _layout.stride,
            offset = _layout.offset;
        // Attach _bound ARRAY_BUFFER with specified buffer format to location

        if (!layout.integer) {
          gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
        } else {
          // specifies *integer* data formats and locations of vertex attributes
          __WEBPACK_IMPORTED_MODULE_3_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl));
          gl.vertexAttribIPointer(location, size, type, stride, offset);
        }
      });
    }

    // Specify values for generic vertex attributes

  }, {
    key: 'setGeneric',
    value: function setGeneric(_ref4) {
      var location = _ref4.location,
          array = _ref4.array;

      __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(0, 'VertexAttributes.setGeneric is not well tested');
      // throw new Error('vertex attribute size must be between 1 and 4');

      var gl = this.gl;


      switch (array.constructor) {
        case Float32Array:
          gl.vertexAttrib4fv(location, array);
          break;
        case Int32Array:
          __WEBPACK_IMPORTED_MODULE_3_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl));
          gl.vertexAttribI4iv(location, array);
          break;
        case Uint32Array:
          __WEBPACK_IMPORTED_MODULE_3_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl));
          gl.vertexAttribI4uiv(location, array);
          break;
        default:
      }

      return this;
    }

    // Specify values for generic vertex attributes

  }, {
    key: 'setGenericValues',
    value: function setGenericValues(location, v0, v1, v2, v3) {
      __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(0, 'VertexAttributes.setGenericValues is not well tested');
      switch (arguments.length - 1) {
        case 1:
          this.gl.vertexAttrib1f(location, v0);break;
        case 2:
          this.gl.vertexAttrib2f(location, v0, v1);break;
        case 3:
          this.gl.vertexAttrib3f(location, v0, v1, v2);break;
        case 4:
          this.gl.vertexAttrib4f(location, v0, v1, v2, v3);break;
        default:
          throw new Error('vertex attribute size must be between 1 and 4');
      }

      // assert(gl instanceof WebGL2RenderingContext, 'WebGL2 required');
      // Looks like these will check how many arguments were supplied?
      // gl.vertexAttribI4i(location, v0, v1, v2, v3);
      // gl.vertexAttribI4ui(location, v0, v1, v2, v3);
    }
  }, {
    key: 'bind',
    value: function bind() {
      var funcOrHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.handle;

      if (typeof funcOrHandle !== 'function') {
        this.bindVertexArray(funcOrHandle);
        return this;
      }

      var value = void 0;

      if (!this._bound) {
        this.ext.bindVertexArray(this.handle);
        this._bound = true;

        value = funcOrHandle();

        this.ext.bindVertexArray(null);
        this._bound = false;
      } else {
        value = funcOrHandle();
      }

      return value;
    }

    // PRIVATE

    // Auto detect draw parameters from the complement of buffers provided

  }, {
    key: '_deduceDrawParameters',
    value: function _deduceDrawParameters() {
      // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER
      // index type is saved for drawElement calls
      var isInstanced = false;
      var isIndexed = false;
      var indexType = null;

      // Check if we have an elements array buffer
      if (this.elements) {
        isIndexed = true;
        indexType = this.elements.layout.type;
      }

      // Check if any instanced buffers
      this.buffers.forEach(function (buffer) {
        if (buffer.layout.instanced > 0) {
          isInstanced = true;
        }
      });

      return { isInstanced: isInstanced, isIndexed: isIndexed, indexType: indexType };
    }
    //         this._filledLocations[bufferName] = true;

  }, {
    key: '_getLocations',
    value: function _getLocations(buffers) {
      // Try to extract elements and locations
      var elements = null;
      var locations = {};

      for (var bufferName in buffers) {
        var buffer = buffers[bufferName];

        // Check if this is an elements array
        if (buffer && buffer.target === GL_ELEMENT_ARRAY_BUFFER) {
          __WEBPACK_IMPORTED_MODULE_3_assert___default()(!elements, 'Duplicate GL.ELEMENT_ARRAY_BUFFER');
          // assert(location === undefined, 'GL.ELEMENT_ARRAY_BUFFER assigned to location');
          elements = buffer;
        }
        // else if (!this._warn[bufferName]) {
        //   log.warn(2, `${this._print(bufferName)} not used`);
        //   this._warn[bufferName] = true;
        // }

        var location = Number(bufferName);
        // if key is a number, interpret as the location
        // if key is not a location number, assume it is a named buffer, look it up in supplied map
        if (!Number.isFinite(location)) {
          location = this.locations[bufferName];
        }
        __WEBPACK_IMPORTED_MODULE_3_assert___default()(Number.isFinite(location));

        __WEBPACK_IMPORTED_MODULE_3_assert___default()(!locations[location], 'Duplicate attribute for binding point ' + location);
        locations[location] = buffer;
      }

      return { locations: locations, elements: elements };
    }
  }, {
    key: '_sortBuffersByLocation',
    value: function _sortBuffersByLocation(buffers) {
      // Try to extract elements and locations
      var elements = null;
      var locations = new Array(this._attributeCount).fill(null);

      for (var bufferName in buffers) {
        var buffer = buffers[bufferName];

        // Check if this is an elements arrau
        if (buffer.target === GL_ELEMENT_ARRAY_BUFFER) {
          __WEBPACK_IMPORTED_MODULE_3_assert___default()(!elements, 'Duplicate GL.ELEMENT_ARRAY_BUFFER');
          // assert(location === undefined, 'GL.ELEMENT_ARRAY_BUFFER assigned to location');
          elements = buffer;
        } else if (!this._warn[bufferName]) {
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(2, this._print(bufferName) + ' not used');
          this._warn[bufferName] = true;
        }

        var location = Number(bufferName);
        // if key is a number, interpret as the location
        // if key is not a location number, assume it is a named buffer, look it up in supplied map
        if (!Number.isFinite(location)) {
          location = this.locations[bufferName];
        }
        locations[location] = bufferName;
        __WEBPACK_IMPORTED_MODULE_3_assert___default()(locations[location] === null, 'Duplicate attribute for binding point ' + location);
        locations[location] = location;
      }

      return { locations: locations, elements: elements };
    }
  }, {
    key: '_checkBuffers',
    value: function _checkBuffers() {
      for (var attributeName in this._attributeLocations) {
        if (!this._filledLocations[attributeName] && !this._warn[attributeName]) {
          var location = this._attributeLocations[attributeName];
          // throw new Error(`Program ${this.id}: ` +
          //   `Attribute ${location}:${attributeName} not supplied`);
          __WEBPACK_IMPORTED_MODULE_4__utils__["log"].warn(0, 'Program ' + this.id + ': Attribute ' + location + ':' + attributeName + ' not supplied');
          this._warn[attributeName] = true;
        }
      }
      return this;
    }

    // RESOURCE IMPLEMENTATION

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.ext.createVertexArray();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle(handle) {
      this.ext.deleteVertexArray(handle);
      return [this.elements];
      // return [this.elements, ...this.buffers];
    }

    // Generic getter for information about a vertex attribute at a given position
    // @param {GLuint} location - index of the vertex attribute.
    // @param {GLenum} pname - specifies the information to query.
    // @returns {*} - requested vertex attribute information (specified by pname)

  }, {
    key: '_getParameter',
    value: function _getParameter(pname, _ref5) {
      var location = _ref5.location;

      __WEBPACK_IMPORTED_MODULE_3_assert___default()(Number.isFinite(location));

      this.ext.bindVertexArray(this.handle);

      // Let the polyfill intercept the query
      var result = void 0;
      switch (pname) {
        case GL_VERTEX_ATTRIB_ARRAY_POINTER:
          result = this.gl.getVertexAttribOffset(location, pname);
          break;
        default:
          result = this.ext.getVertexAttrib(location, pname);
      }

      this.ext.bindVertexArray(null);
      return result;
    }
  }, {
    key: '_getData',
    value: function _getData() {
      var _this5 = this;

      return new Array(this.MAX_ATTRIBUTES).fill(0).map(function (_, location) {
        var result = {};
        PARAMETERS.forEach(function (parameter) {
          result[__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["b" /* glKey */])(parameter)] = _this5.getParameter(parameter, { location: location });
        });
        return result;
      });
    }
  }, {
    key: '_bind',
    value: function _bind(handle) {
      this.ext.bindVertexArray(handle);
    }
  }]);

  return VertexArray;
}(__WEBPACK_IMPORTED_MODULE_2__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (VertexArray);
//# sourceMappingURL=vertex-array.js.map

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof global !== "undefined") {
    win = global;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

module.exports = win;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19)))

/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = determinant;

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/***/ }),
/* 49 */
/***/ (function(module, exports) {

module.exports = fromQuat;

/**
 * Creates a matrix from a quaternion rotation.
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @returns {mat4} out
 */
function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = frustum;

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = identity;

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = invert;

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(51);

module.exports = lookAt;

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < 0.000001 &&
        Math.abs(eyey - centery) < 0.000001 &&
        Math.abs(eyez - centerz) < 0.000001) {
        return identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/***/ }),
/* 54 */
/***/ (function(module, exports) {

module.exports = multiply;

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/***/ }),
/* 55 */
/***/ (function(module, exports) {

module.exports = ortho;

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function ortho(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = perspective;

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspective(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/***/ }),
/* 57 */
/***/ (function(module, exports) {

module.exports = rotateX;

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = rotateY;

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = scale;

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/***/ }),
/* 60 */
/***/ (function(module, exports) {

module.exports = translate;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/***/ }),
/* 61 */
/***/ (function(module, exports) {

module.exports = transpose;

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(69)


/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = setAxisAngle

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
function setAxisAngle (out, axis, rad) {
  rad = rad * 0.5
  var s = Math.sin(rad)
  out[0] = s * axis[0]
  out[1] = s * axis[1]
  out[2] = s * axis[2]
  out[3] = Math.cos(rad)
  return out
}


/***/ }),
/* 64 */
/***/ (function(module, exports) {

module.exports = cross;

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2]

    out[0] = ay * bz - az * by
    out[1] = az * bx - ax * bz
    out[2] = ax * by - ay * bx
    return out
}

/***/ }),
/* 65 */
/***/ (function(module, exports) {

module.exports = length;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
    var x = a[0],
        y = a[1],
        z = a[2]
    return Math.sqrt(x*x + y*y + z*z)
}

/***/ }),
/* 66 */
/***/ (function(module, exports) {

module.exports = add

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function add (out, a, b) {
  out[0] = a[0] + b[0]
  out[1] = a[1] + b[1]
  out[2] = a[2] + b[2]
  out[3] = a[3] + b[3]
  return out
}


/***/ }),
/* 67 */
/***/ (function(module, exports) {

module.exports = dot

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot (a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3]
}


/***/ }),
/* 68 */
/***/ (function(module, exports) {

module.exports = lerp

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
function lerp (out, a, b, t) {
  var ax = a[0],
    ay = a[1],
    az = a[2],
    aw = a[3]
  out[0] = ax + t * (b[0] - ax)
  out[1] = ay + t * (b[1] - ay)
  out[2] = az + t * (b[2] - az)
  out[3] = aw + t * (b[3] - aw)
  return out
}


/***/ }),
/* 69 */
/***/ (function(module, exports) {

module.exports = normalize

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
function normalize (out, a) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3]
  var len = x * x + y * y + z * z + w * w
  if (len > 0) {
    len = 1 / Math.sqrt(len)
    out[0] = x * len
    out[1] = y * len
    out[2] = z * len
    out[3] = w * len
  }
  return out
}


/***/ }),
/* 70 */
/***/ (function(module, exports) {

module.exports = scale

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
function scale (out, a, b) {
  out[0] = a[0] * b
  out[1] = a[1] * b
  out[2] = a[2] * b
  out[3] = a[3] * b
  return out
}


/***/ }),
/* 71 */
/***/ (function(module, exports) {

module.exports = set

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
function set (out, x, y, z, w) {
  out[0] = x
  out[1] = y
  out[2] = z
  out[3] = w
  return out
}


/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = requestAnimationFrame;
/* harmony export (immutable) */ __webpack_exports__["c"] = cancelAnimationFrame;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl__ = __webpack_require__(12);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* global window, setTimeout, clearTimeout */





// Node.js polyfills for requestAnimationFrame and cancelAnimationFrame
function requestAnimationFrame(callback) {
  return __WEBPACK_IMPORTED_MODULE_0__utils__["isBrowser"] ? window.requestAnimationFrame(callback) : setTimeout(callback, 1000 / 60);
}

function cancelAnimationFrame(timerId) {
  return __WEBPACK_IMPORTED_MODULE_0__utils__["isBrowser"] ? window.cancelAnimationFrame(timerId) : clearTimeout(timerId);
}

var AnimationLoop = /*#__PURE__*/function () {
  /*
   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context
   */
  function AnimationLoop() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$onCreateContext = _ref.onCreateContext,
        onCreateContext = _ref$onCreateContext === undefined ? function (opts) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl__["createGLContext"])(opts);
    } : _ref$onCreateContext,
        _ref$onDeleteContext = _ref.onDeleteContext,
        onDeleteContext = _ref$onDeleteContext === undefined ? function (gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl__["deleteGLContext"])(gl);
    } : _ref$onDeleteContext,
        _ref$onInitialize = _ref.onInitialize,
        onInitialize = _ref$onInitialize === undefined ? function () {} : _ref$onInitialize,
        _ref$onRender = _ref.onRender,
        onRender = _ref$onRender === undefined ? function () {} : _ref$onRender,
        _ref$onFinalize = _ref.onFinalize,
        onFinalize = _ref$onFinalize === undefined ? function () {} : _ref$onFinalize,
        _ref$gl = _ref.gl,
        gl = _ref$gl === undefined ? null : _ref$gl,
        _ref$glOptions = _ref.glOptions,
        glOptions = _ref$glOptions === undefined ? {
      preserveDrawingBuffer: true
    } : _ref$glOptions,
        _ref$width = _ref.width,
        width = _ref$width === undefined ? null : _ref$width,
        _ref$height = _ref.height,
        height = _ref$height === undefined ? null : _ref$height,
        _ref$autoResizeViewpo = _ref.autoResizeViewport,
        autoResizeViewport = _ref$autoResizeViewpo === undefined ? true : _ref$autoResizeViewpo,
        _ref$autoResizeCanvas = _ref.autoResizeCanvas,
        autoResizeCanvas = _ref$autoResizeCanvas === undefined ? true : _ref$autoResizeCanvas,
        _ref$autoResizeDrawin = _ref.autoResizeDrawingBuffer,
        autoResizeDrawingBuffer = _ref$autoResizeDrawin === undefined ? true : _ref$autoResizeDrawin,
        _ref$useDevicePixelRa = _ref.useDevicePixelRatio,
        useDevicePixelRatio = _ref$useDevicePixelRa === undefined ? true : _ref$useDevicePixelRa;

    _classCallCheck(this, AnimationLoop);

    this.start = this.start.bind(this);
    this.stop = this.stop.bind(this);
    this._renderFrame = this._renderFrame.bind(this);

    this.setViewParameters({
      autoResizeViewport: autoResizeViewport,
      autoResizeCanvas: autoResizeCanvas,
      autoResizeDrawingBuffer: autoResizeDrawingBuffer,
      useDevicePixelRatio: useDevicePixelRatio
    });

    this._onCreateContext = onCreateContext;
    this.glOptions = glOptions;

    this._onInitialize = onInitialize;
    this._onRender = onRender;
    this._onFinalize = onFinalize;

    this.width = width;
    this.height = height;

    this.gl = gl;

    return this;
  }

  // Update parameters (TODO - should these be specified in `start`?)


  _createClass(AnimationLoop, [{
    key: 'setViewParameters',
    value: function setViewParameters(_ref2) {
      var _ref2$autoResizeDrawi = _ref2.autoResizeDrawingBuffer,
          autoResizeDrawingBuffer = _ref2$autoResizeDrawi === undefined ? true : _ref2$autoResizeDrawi,
          _ref2$autoResizeCanva = _ref2.autoResizeCanvas,
          autoResizeCanvas = _ref2$autoResizeCanva === undefined ? true : _ref2$autoResizeCanva,
          _ref2$autoResizeViewp = _ref2.autoResizeViewport,
          autoResizeViewport = _ref2$autoResizeViewp === undefined ? true : _ref2$autoResizeViewp,
          _ref2$useDevicePixelR = _ref2.useDevicePixelRatio,
          useDevicePixelRatio = _ref2$useDevicePixelR === undefined ? true : _ref2$useDevicePixelR;

      this.autoResizeViewport = autoResizeViewport;
      this.autoResizeCanvas = autoResizeCanvas;
      this.autoResizeDrawingBuffer = autoResizeDrawingBuffer;
      this.useDevicePixelRatio = useDevicePixelRatio;
      return this;
    }

    // Starts a render loop if not already running
    // @param {Object} context - contains frame specific info (E.g. tick, width, height, etc)

  }, {
    key: 'start',
    value: function start() {
      var _this = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._stopped = false;
      // console.debug(`Starting ${this.constructor.name}`);
      if (!this._animationFrameId) {
        // Wait for start promise before rendering frame
        this._startPromise = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils__["g" /* getPageLoadPromise */])().then(function () {
          if (_this._stopped) {
            return null;
          }

          // Create the WebGL context
          _this._createWebGLContext(opts);

          // Initialize the callback data
          _this._initializeCallbackData();
          _this._updateCallbackData();

          // Default viewport setup, in case onInitialize wants to render
          _this._resizeCanvasDrawingBuffer();
          _this._resizeViewport();

          // Note: onIntialize can return a promise (in case it needs to load resources)
          return _this._onInitialize(_this._callbackData);
        }).then(function (appContext) {
          if (!_this._stopped) {
            _this._addCallbackData(appContext || {});
            if (appContext !== false && !_this._animationFrameId) {
              _this._animationFrameId = requestAnimationFrame(_this._renderFrame);
            }
          }
        });
      }
      return this;
    }

    // Stops a render loop if already running, finalizing

  }, {
    key: 'stop',
    value: function stop() {
      // console.debug(`Stopping ${this.constructor.name}`);
      if (this._animationFrameId) {
        this._finalizeCallbackData();
        cancelAnimationFrame(this._animationFrameId);
        this._animationFrameId = null;
        this._stopped = true;
      }
      return this;
    }

    // PRIVATE METHODS

  }, {
    key: '_setupFrame',
    value: function _setupFrame() {
      if (this._onSetupFrame) {
        // call callback
        this._onSetupFrame(this._callbackData);
        // end callback
      } else {
        this._resizeCanvasDrawingBuffer();
        this._resizeViewport();
        this._resizeFramebuffer();
      }
    }

    /**
     * @private
     * Handles a render loop frame- updates context and calls the application
     * callback
     */

  }, {
    key: '_renderFrame',
    value: function _renderFrame() {
      this._setupFrame();
      this._updateCallbackData();

      // call callback
      this._onRender(this._callbackData);
      // end callback

      // Increment tick
      this._callbackData.tick++;

      // Request another render frame (now )
      this._animationFrameId = requestAnimationFrame(this._renderFrame);
    }

    // Initialize the  object that will be passed to app callbacks

  }, {
    key: '_initializeCallbackData',
    value: function _initializeCallbackData() {
      this._callbackData = {
        gl: this.gl,
        canvas: this.gl.canvas,
        framebuffer: this.framebuffer,
        stop: this.stop,
        // Initial values
        tick: 0,
        tock: 0
      };
    }

    // Update the context object that will be passed to app callbacks

  }, {
    key: '_updateCallbackData',
    value: function _updateCallbackData() {
      // CallbackData width and height represent drawing buffer width and height
      var canvas = this.gl.canvas;

      this._callbackData.width = canvas.width;
      this._callbackData.height = canvas.height;
      this._callbackData.aspect = canvas.width / canvas.height;
    }
  }, {
    key: '_finalizeCallbackData',
    value: function _finalizeCallbackData() {
      // call callback
      this._onFinalize(this._callbackData);
      // end callback
    }

    // Add application's data to the app context object

  }, {
    key: '_addCallbackData',
    value: function _addCallbackData(appContext) {
      if ((typeof appContext === 'undefined' ? 'undefined' : _typeof(appContext)) === 'object' && appContext !== null) {
        this._callbackData = Object.assign({}, this._callbackData, appContext);
      }
    }

    // Either uses supplied or existing context, or calls provided callback to create one

  }, {
    key: '_createWebGLContext',
    value: function _createWebGLContext(opts) {
      // Create the WebGL context if necessary
      opts = Object.assign({}, opts, this.glOptions);
      if (opts.gl) {
        this.gl = opts.gl;
      } else {
        this.gl = this._onCreateContext(opts);
      }
      if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl__["isWebGL"])(this.gl)) {
        throw new Error('AnimationLoop.onCreateContext - illegal context returned');
      }

      // Setup default framebuffer
      this.framebuffer = new __WEBPACK_IMPORTED_MODULE_2__webgl__["Framebuffer"](this.gl);
      // Reset the WebGL context.
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl__["resetParameters"])(this.gl);
    }

    // Default viewport setup

  }, {
    key: '_resizeViewport',
    value: function _resizeViewport() {
      if (this.autoResizeViewport) {
        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);
      }
    }
  }, {
    key: '_resizeFramebuffer',
    value: function _resizeFramebuffer() {
      this.framebuffer.resize({ width: this.gl.canvas.width, height: this.gl.canvas.height });
    }

    // Resize the render buffer of the canvas to match canvas client size
    // Optionally multiplying with devicePixel ratio

  }, {
    key: '_resizeCanvasDrawingBuffer',
    value: function _resizeCanvasDrawingBuffer() {
      if (this.autoResizeDrawingBuffer) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils__["h" /* resizeDrawingBuffer */])(this.gl.canvas, { useDevicePixelRatio: this.useDevicePixelRatio });
      }
    }
  }]);

  return AnimationLoop;
}();

/* harmony default export */ __webpack_exports__["a"] = (AnimationLoop);
//# sourceMappingURL=animation-loop.js.map

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__object_3d__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__packages_math__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Group = /*#__PURE__*/function (_Object3D) {
  _inherits(Group, _Object3D);

  function Group() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Group);

    var _opts$children = opts.children,
        children = _opts$children === undefined ? [] : _opts$children;

    children.every(function (child) {
      return __WEBPACK_IMPORTED_MODULE_2_assert___default()(child instanceof __WEBPACK_IMPORTED_MODULE_0__object_3d__["a" /* default */]);
    });

    var _this = _possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).call(this, opts));

    _this.children = children;
    return _this;
  }

  // Unpacks arrays and nested arrays of children


  _createClass(Group, [{
    key: 'add',
    value: function add() {
      for (var _len = arguments.length, children = Array(_len), _key = 0; _key < _len; _key++) {
        children[_key] = arguments[_key];
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var child = _step.value;

          if (Array.isArray(child)) {
            this.add.apply(this, _toConsumableArray(child));
          } else {
            this.children.push(child);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this;
    }
  }, {
    key: 'remove',
    value: function remove(child) {
      var children = this.children;
      var indexOf = children.indexOf(child);
      if (indexOf > -1) {
        children.splice(indexOf, 1);
      }
      return this;
    }
  }, {
    key: 'removeAll',
    value: function removeAll() {
      this.children = [];
      return this;
    }

    // If visitor returns a truthy value, traversal will be aborted and that value
    // will be returned from `traverse`. Otherwise `traverse` will return null.

  }, {
    key: 'traverse',
    value: function traverse(visitor) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$modelMatrix = _ref.modelMatrix,
          modelMatrix = _ref$modelMatrix === undefined ? new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Matrix4"]() : _ref$modelMatrix;

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var child = _step2.value;
          var matrix = child.matrix;

          modelMatrix = modelMatrix.multiplyRight(matrix);
          var result = void 0;
          if (child instanceof Group) {
            result = child.traverse(visitor, { modelMatrix: modelMatrix });
          } else {
            // child.setUniforms({modelMatrix});
            result = visitor(child, {});
          }
          // Abort if a result was returned
          if (result) {
            return result;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return null;
    }

    // If visitor returns a truthy value, traversal will be aborted and that value
    // will be returned from `traverseReverse`. Otherwise `traverseReverse` will return null.

  }, {
    key: 'traverseReverse',
    value: function traverseReverse(visitor) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref2$modelMatrix = _ref2.modelMatrix,
          modelMatrix = _ref2$modelMatrix === undefined ? new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Matrix4"]() : _ref2$modelMatrix;

      for (var i = this.children.length - 1; i >= 0; --i) {
        var child = this.children[i];
        var matrix = child.matrix;

        modelMatrix = modelMatrix.multiplyRight(matrix);
        var result = void 0;
        if (child instanceof Group) {
          result = child.traverseReverse(visitor, { modelMatrix: modelMatrix });
        } else {
          // child.setUniforms({modelMatrix});
          result = visitor(child, {});
        }
        // Abort if a result was returned
        if (result) {
          return result;
        }
      }
      return null;
    }
  }]);

  return Group;
}(__WEBPACK_IMPORTED_MODULE_0__object_3d__["a" /* default */]);

/* harmony default export */ __webpack_exports__["default"] = (Group);
//# sourceMappingURL=group.js.map

/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__packages_math__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





var Object3D = /*#__PURE__*/function () {
  function Object3D(_ref) {
    var id = _ref.id,
        _ref$display = _ref.display,
        display = _ref$display === undefined ? true : _ref$display;

    _classCallCheck(this, Object3D);

    // model position, rotation, scale and all in all matrix
    this.position = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Vector3"]();
    this.rotation = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Vector3"]();
    this.scale = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Vector3"](1, 1, 1);
    this.matrix = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Matrix4"]();

    // whether to display the object at all
    this.id = id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["uid"])(this.constructor.name);
    this.display = true;
    this.userData = {};
  }

  _createClass(Object3D, [{
    key: 'setPosition',
    value: function setPosition(position) {
      __WEBPACK_IMPORTED_MODULE_2_assert___default()(position.length === 3, 'setPosition requires vector argument');
      this.position = position;
      return this;
    }
  }, {
    key: 'setRotation',
    value: function setRotation(rotation) {
      __WEBPACK_IMPORTED_MODULE_2_assert___default()(rotation.length === 3, 'setRotation requires vector argument');
      this.rotation = rotation;
      return this;
    }
  }, {
    key: 'setScale',
    value: function setScale(scale) {
      __WEBPACK_IMPORTED_MODULE_2_assert___default()(scale.length === 3, 'setScale requires vector argument');
      this.scale = scale;
      return this;
    }
  }, {
    key: 'setMatrixComponents',
    value: function setMatrixComponents(_ref2) {
      var position = _ref2.position,
          rotation = _ref2.rotation,
          scale = _ref2.scale,
          _ref2$update = _ref2.update,
          update = _ref2$update === undefined ? true : _ref2$update;

      if (position) {
        this.setPosition(position);
      }
      if (rotation) {
        this.setRotation(rotation);
      }
      if (scale) {
        this.setScale(scale);
      }
      if (update) {
        this.updateMatrix();
      }
      return this;
    }
  }, {
    key: 'updateMatrix',
    value: function updateMatrix() {
      var pos = this.position;
      var rot = this.rotation;
      var scale = this.scale;

      this.matrix.identity();
      this.matrix.translate(pos);
      this.matrix.rotateXYZ(rot);
      this.matrix.scale(scale);
      return this;
    }
  }, {
    key: 'update',
    value: function update() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          position = _ref3.position,
          rotation = _ref3.rotation,
          scale = _ref3.scale;

      if (position) {
        this.setPosition(position);
      }
      if (rotation) {
        this.setRotation(rotation);
      }
      if (scale) {
        this.setScale(scale);
      }
      this.updateMatrix();
      return this;
    }
  }, {
    key: 'getCoordinateUniforms',
    value: function getCoordinateUniforms(viewMatrix, modelMatrix) {
      // TODO - solve multiple class problem
      // assert(viewMatrix instanceof Matrix4);
      __WEBPACK_IMPORTED_MODULE_2_assert___default()(viewMatrix);
      modelMatrix = modelMatrix || this.matrix;
      var worldMatrix = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Matrix4"](viewMatrix).multiplyRight(modelMatrix);
      var worldInverse = worldMatrix.invert();
      var worldInverseTranspose = worldInverse.transpose();

      return {
        viewMatrix: viewMatrix,
        modelMatrix: modelMatrix,
        objectMatrix: modelMatrix,
        worldMatrix: worldMatrix,
        worldInverseMatrix: worldInverse,
        worldInverseTransposeMatrix: worldInverseTranspose
      };
    }

    // TODO - copied code, not yet vetted

  }, {
    key: 'transform',
    value: function transform() {

      if (!this.parent) {
        this.endPosition.set(this.position);
        this.endRotation.set(this.rotation);
        this.endScale.set(this.scale);
      } else {
        var parent = this.parent;
        this.endPosition.set(this.position.add(parent.endPosition));
        this.endRotation.set(this.rotation.add(parent.endRotation));
        this.endScale.set(this.scale.add(parent.endScale));
      }

      var ch = this.children;
      for (var i = 0; i < ch.length; ++i) {
        ch[i].transform();
      }

      return this;
    }
  }]);

  return Object3D;
}();

/* harmony default export */ __webpack_exports__["a"] = (Object3D);
//# sourceMappingURL=object-3d.js.map

/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["default"] = pickModels;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__group__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/* global window */




var ILLEGAL_ARG = 'Illegal argument to pick';

function getDevicePixelRatio() {
  return typeof window !== 'undefined' ? window.devicePixelRatio : 1;
}

function pickModels(gl, _ref) {
  var models = _ref.models,
      position = _ref.position,
      _ref$uniforms = _ref.uniforms,
      uniforms = _ref$uniforms === undefined ? {} : _ref$uniforms,
      _ref$parameters = _ref.parameters,
      parameters = _ref$parameters === undefined ? {} : _ref$parameters,
      settings = _ref.settings,
      _ref$useDevicePixelRa = _ref.useDevicePixelRatio,
      useDevicePixelRatio = _ref$useDevicePixelRa === undefined ? true : _ref$useDevicePixelRa,
      framebuffer = _ref.framebuffer;

  __WEBPACK_IMPORTED_MODULE_2_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["isWebGL"])(gl), ILLEGAL_ARG);
  __WEBPACK_IMPORTED_MODULE_2_assert___default()(framebuffer, ILLEGAL_ARG);
  __WEBPACK_IMPORTED_MODULE_2_assert___default()(position, ILLEGAL_ARG);

  var _position = _slicedToArray(position, 2),
      x = _position[0],
      y = _position[1];

  // Match our picking framebuffer with the size of the canvas drawing buffer


  framebuffer.resize({ width: gl.canvas.width, height: gl.canvas.height });

  // Compensate for devicePixelRatio
  // Note: this assumes the canvas framebuffer has been matched
  var dpr = useDevicePixelRatio ? getDevicePixelRatio() : 1;
  // Reverse the y coordinate
  var deviceX = x * dpr;
  var deviceY = gl.canvas.height - y * dpr;

  // return withParameters(gl, {
  //   // framebuffer,
  //   // // We are only interested in one pixel, no need to render anything else
  //   // scissorTest: {x: deviceX, y: deviceY, w: 1, h: 1}
  // }, () => {
  var group = new __WEBPACK_IMPORTED_MODULE_1__group__["default"]({ children: models });
  return group.traverseReverse(function (model) {

    if (model.isPickable()) {
      // Clear the frame buffer
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["clear"])(gl, { framebuffer: framebuffer, color: true, depth: true });

      // Render picking colors
      /* eslint-disable camelcase */
      model.setUniforms({ picking_uActive: 1 });
      model.draw({ uniforms: uniforms, parameters: parameters, settings: settings, framebuffer: framebuffer });
      model.setUniforms({ picking_uActive: 0 });

      // Sample Read color in the central pixel, to be mapped as a picking color
      var color = framebuffer.readPixels({
        x: deviceX,
        y: deviceY,
        width: 1,
        height: 1,
        format: gl.RGBA,
        type: gl.UNSIGNED_BYTE });

      var isPicked = color[0] !== 0 || color[1] !== 0 || color[2] !== 0;

      // Add the information to the stack
      if (isPicked) {
        return {
          model: model,
          color: color,
          x: x,
          y: y,
          deviceX: deviceX,
          deviceY: deviceY
        };
      }
    }

    return null;
  });
  // });
}
//# sourceMappingURL=pick-models.js.map

/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__truncated_cone_geometry__ = __webpack_require__(23);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var ConeGeometry = /*#__PURE__*/function (_TruncatedConeGeometr) {
  _inherits(ConeGeometry, _TruncatedConeGeometr);

  function ConeGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ConeGeometry);

    var _opts$radius = opts.radius,
        radius = _opts$radius === undefined ? 1 : _opts$radius,
        _opts$cap = opts.cap,
        cap = _opts$cap === undefined ? true : _opts$cap;
    return _possibleConstructorReturn(this, (ConeGeometry.__proto__ || Object.getPrototypeOf(ConeGeometry)).call(this, Object.assign({}, opts, {
      topRadius: 0,
      topCap: Boolean(cap),
      bottomCap: Boolean(cap),
      bottomRadius: radius
    })));
  }

  return ConeGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__truncated_cone_geometry__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (ConeGeometry);
//# sourceMappingURL=cone-geometry.js.map

/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var CubeGeometry = /*#__PURE__*/function (_Geometry) {
  _inherits(CubeGeometry, _Geometry);

  function CubeGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CubeGeometry);

    var _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["uid"])('cube-geometry') : _opts$id;
    return _possibleConstructorReturn(this, (CubeGeometry.__proto__ || Object.getPrototypeOf(CubeGeometry)).call(this, Object.assign({}, opts, { id: id, attributes: getCubeAttributes() })));
  }

  return CubeGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__geometry__["a" /* default */]);

/* eslint-disable no-multi-spaces, indent */


/* harmony default export */ __webpack_exports__["a"] = (CubeGeometry);
var CUBE_INDICES = new Uint16Array([0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23]);

var CUBE_POSITIONS = new Float32Array([-1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1]);

var CUBE_NORMALS = new Float32Array([
// Front face
0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,

// Back face
0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0,

// Top face
0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,

// Bottom face
0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0,

// Right face
1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,

// Left face
-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0]);

var CUBE_TEX_COORDS = new Float32Array([
// Front face
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0,

// Back face
1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,

// Top face
0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,

// Bottom face
1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,

// Right face
1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,

// Left face
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]);
/* eslint-enable no-multi-spaces, indent */

function getCubeAttributes() {
  return {
    indices: new Uint16Array(CUBE_INDICES),
    positions: new Float32Array(CUBE_POSITIONS),
    normals: new Float32Array(CUBE_NORMALS),
    texCoords: new Float32Array(CUBE_TEX_COORDS)
  };
}
//# sourceMappingURL=cube-geometry.js.map

/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__truncated_cone_geometry__ = __webpack_require__(23);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var CylinderGeometry = /*#__PURE__*/function (_TruncatedConeGeometr) {
  _inherits(CylinderGeometry, _TruncatedConeGeometr);

  function CylinderGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CylinderGeometry);

    var _opts$radius = opts.radius,
        radius = _opts$radius === undefined ? 1 : _opts$radius;
    return _possibleConstructorReturn(this, (CylinderGeometry.__proto__ || Object.getPrototypeOf(CylinderGeometry)).call(this, Object.assign({}, opts, {
      bottomRadius: radius,
      topRadius: radius
    })));
  }

  return CylinderGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__truncated_cone_geometry__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (CylinderGeometry);
//# sourceMappingURL=cylinder-geometry.js.map

/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__packages_math__ = __webpack_require__(14);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




/* eslint-disable comma-spacing, max-statements, complexity */

var ICO_POSITIONS = [-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0];
var ICO_INDICES = [3, 4, 5, 3, 5, 1, 3, 1, 0, 3, 0, 4, 4, 0, 2, 4, 2, 5, 2, 0, 1, 5, 2, 1];

var IcoSphereGeometry = /*#__PURE__*/function (_Geometry) {
  _inherits(IcoSphereGeometry, _Geometry);

  function IcoSphereGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, IcoSphereGeometry);

    var _opts$iterations = opts.iterations,
        iterations = _opts$iterations === undefined ? 0 : _opts$iterations;


    var PI = Math.PI;
    var PI2 = PI * 2;

    var positions = [].concat(ICO_POSITIONS);
    var indices = [].concat(ICO_INDICES);

    positions.push();
    indices.push();

    var getMiddlePoint = function () {
      var pointMemo = {};

      return function (i1, i2) {
        i1 *= 3;
        i2 *= 3;
        var mini = i1 < i2 ? i1 : i2;
        var maxi = i1 > i2 ? i1 : i2;
        var key = mini + '|' + maxi;

        if (key in pointMemo) {
          return pointMemo[key];
        }

        var x1 = positions[i1];
        var y1 = positions[i1 + 1];
        var z1 = positions[i1 + 2];
        var x2 = positions[i2];
        var y2 = positions[i2 + 1];
        var z2 = positions[i2 + 2];
        var xm = (x1 + x2) / 2;
        var ym = (y1 + y2) / 2;
        var zm = (z1 + z2) / 2;
        var len = Math.sqrt(xm * xm + ym * ym + zm * zm);

        xm /= len;
        ym /= len;
        zm /= len;

        positions.push(xm, ym, zm);

        return pointMemo[key] = positions.length / 3 - 1;
      };
    }();

    for (var i = 0; i < iterations; i++) {
      var indices2 = [];
      for (var j = 0; j < indices.length; j += 3) {
        var a = getMiddlePoint(indices[j + 0], indices[j + 1]);
        var b = getMiddlePoint(indices[j + 1], indices[j + 2]);
        var c = getMiddlePoint(indices[j + 2], indices[j + 0]);

        indices2.push(c, indices[j + 0], a, a, indices[j + 1], b, b, indices[j + 2], c, a, b, c);
      }
      indices = indices2;
    }

    // Calculate texCoords and normals
    var normals = new Array(indices.length * 3);
    var texCoords = new Array(indices.length * 2);

    var l = indices.length;
    for (var _i = l - 3; _i >= 0; _i -= 3) {
      var i1 = indices[_i + 0];
      var i2 = indices[_i + 1];
      var i3 = indices[_i + 2];
      var in1 = i1 * 3;
      var in2 = i2 * 3;
      var in3 = i3 * 3;
      var iu1 = i1 * 2;
      var iu2 = i2 * 2;
      var iu3 = i3 * 2;
      var x1 = positions[in1 + 0];
      var y1 = positions[in1 + 1];
      var z1 = positions[in1 + 2];
      var theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));
      var phi1 = Math.atan2(y1, x1) + PI;
      var v1 = theta1 / PI;
      var u1 = 1 - phi1 / PI2;
      var x2 = positions[in2 + 0];
      var y2 = positions[in2 + 1];
      var z2 = positions[in2 + 2];
      var theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));
      var phi2 = Math.atan2(y2, x2) + PI;
      var v2 = theta2 / PI;
      var u2 = 1 - phi2 / PI2;
      var x3 = positions[in3 + 0];
      var y3 = positions[in3 + 1];
      var z3 = positions[in3 + 2];
      var theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));
      var phi3 = Math.atan2(y3, x3) + PI;
      var v3 = theta3 / PI;
      var u3 = 1 - phi3 / PI2;
      var vec1 = [x3 - x2, y3 - y2, z3 - z2];
      var vec2 = [x1 - x2, y1 - y2, z1 - z2];
      var normal = new __WEBPACK_IMPORTED_MODULE_1__packages_math__["Vector3"](vec1).cross(vec2).normalize();
      var newIndex = void 0;

      if ((u1 === 0 || u2 === 0 || u3 === 0) && (u1 === 0 || u1 > 0.5) && (u2 === 0 || u2 > 0.5) && (u3 === 0 || u3 > 0.5)) {

        positions.push(positions[in1 + 0], positions[in1 + 1], positions[in1 + 2]);
        newIndex = positions.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v1;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;

        positions.push(positions[in2 + 0], positions[in2 + 1], positions[in2 + 2]);
        newIndex = positions.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v2;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;

        positions.push(positions[in3 + 0], positions[in3 + 1], positions[in3 + 2]);
        newIndex = positions.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v3;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;
      }

      normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;
      normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;
      normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;

      texCoords[iu1 + 0] = u1;
      texCoords[iu1 + 1] = v1;

      texCoords[iu2 + 0] = u2;
      texCoords[iu2 + 1] = v2;

      texCoords[iu3 + 0] = u3;
      texCoords[iu3 + 1] = v3;
    }

    return _possibleConstructorReturn(this, (IcoSphereGeometry.__proto__ || Object.getPrototypeOf(IcoSphereGeometry)).call(this, Object.assign({}, opts, {
      attributes: {
        positions: new Float32Array(positions),
        normals: new Float32Array(normals),
        texCoords: new Float32Array(texCoords),
        indices: new Uint16Array(indices)
      }
    })));
  }

  return IcoSphereGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__geometry__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (IcoSphereGeometry);
//# sourceMappingURL=ico-sphere-geometry.js.map

/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var PlaneGeometry = /*#__PURE__*/function (_Geometry) {
  _inherits(PlaneGeometry, _Geometry);

  // Primitives inspired by TDL http://code.google.com/p/webglsamples/,
  // copyright 2011 Google Inc. new BSD License
  // (http://www.opensource.org/licenses/bsd-license.php).
  /* eslint-disable max-statements, complexity */
  /* eslint-disable complexity, max-statements */
  function PlaneGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, PlaneGeometry);

    var _opts$type = opts.type,
        type = _opts$type === undefined ? 'x,y' : _opts$type,
        _opts$offset = opts.offset,
        offset = _opts$offset === undefined ? 0 : _opts$offset,
        _opts$flipCull = opts.flipCull,
        flipCull = _opts$flipCull === undefined ? false : _opts$flipCull,
        _opts$unpack = opts.unpack,
        unpack = _opts$unpack === undefined ? false : _opts$unpack,
        _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["uid"])('plane-geometry') : _opts$id;


    var coords = type.split(',');
    // width, height
    var c1len = opts[coords[0] + 'len'];
    var c2len = opts[coords[1] + 'len'];
    // subdivisionsWidth, subdivisionsDepth
    var subdivisions1 = opts['n' + coords[0]] || 1;
    var subdivisions2 = opts['n' + coords[1]] || 1;
    var numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);

    var positions = new Float32Array(numVertices * 3);
    var normals = new Float32Array(numVertices * 3);
    var texCoords = new Float32Array(numVertices * 2);

    if (flipCull) {
      c1len = -c1len;
    }

    var i2 = 0;
    var i3 = 0;
    for (var z = 0; z <= subdivisions2; z++) {
      for (var x = 0; x <= subdivisions1; x++) {
        var u = x / subdivisions1;
        var v = z / subdivisions2;
        texCoords[i2 + 0] = flipCull ? 1 - u : u;
        texCoords[i2 + 1] = v;

        switch (type) {
          case 'x,y':
            positions[i3 + 0] = c1len * u - c1len * 0.5;
            positions[i3 + 1] = c2len * v - c2len * 0.5;
            positions[i3 + 2] = offset;

            normals[i3 + 0] = 0;
            normals[i3 + 1] = 0;
            normals[i3 + 2] = flipCull ? 1 : -1;
            break;

          case 'x,z':
            positions[i3 + 0] = c1len * u - c1len * 0.5;
            positions[i3 + 1] = offset;
            positions[i3 + 2] = c2len * v - c2len * 0.5;

            normals[i3 + 0] = 0;
            normals[i3 + 1] = flipCull ? 1 : -1;
            normals[i3 + 2] = 0;
            break;

          case 'y,z':
            positions[i3 + 0] = offset;
            positions[i3 + 1] = c1len * u - c1len * 0.5;
            positions[i3 + 2] = c2len * v - c2len * 0.5;

            normals[i3 + 0] = flipCull ? 1 : -1;
            normals[i3 + 1] = 0;
            normals[i3 + 2] = 0;
            break;

          default:
            break;
        }

        i2 += 2;
        i3 += 3;
      }
    }

    var numVertsAcross = subdivisions1 + 1;
    var indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);

    for (var _z = 0; _z < subdivisions2; _z++) {
      for (var _x2 = 0; _x2 < subdivisions1; _x2++) {
        var index = (_z * subdivisions1 + _x2) * 6;
        // Make triangle 1 of quad.
        indices[index + 0] = (_z + 0) * numVertsAcross + _x2;
        indices[index + 1] = (_z + 1) * numVertsAcross + _x2;
        indices[index + 2] = (_z + 0) * numVertsAcross + _x2 + 1;

        // Make triangle 2 of quad.
        indices[index + 3] = (_z + 1) * numVertsAcross + _x2;
        indices[index + 4] = (_z + 1) * numVertsAcross + _x2 + 1;
        indices[index + 5] = (_z + 0) * numVertsAcross + _x2 + 1;
      }
    }

    // Optionally, unpack indexed geometry
    if (unpack) {
      var positions2 = new Float32Array(indices.length * 3);
      var normals2 = new Float32Array(indices.length * 3);
      var texCoords2 = new Float32Array(indices.length * 2);

      for (var _x3 = 0; _x3 < indices.length; ++_x3) {
        var _index = indices[_x3];
        positions2[_x3 * 3 + 0] = positions[_index * 3 + 0];
        positions2[_x3 * 3 + 1] = positions[_index * 3 + 1];
        positions2[_x3 * 3 + 2] = positions[_index * 3 + 2];
        normals2[_x3 * 3 + 0] = normals[_index * 3 + 0];
        normals2[_x3 * 3 + 1] = normals[_index * 3 + 1];
        normals2[_x3 * 3 + 2] = normals[_index * 3 + 2];
        texCoords2[_x3 * 2 + 0] = texCoords[_index * 2 + 0];
        texCoords2[_x3 * 2 + 1] = texCoords[_index * 2 + 1];
      }

      positions = positions2;
      normals = normals2;
      texCoords = texCoords2;
      indices = undefined;
    }

    var attributes = {
      positions: positions,
      normals: normals,
      texCoords: texCoords
    };

    if (indices) {
      attributes.indices = indices;
    }

    return _possibleConstructorReturn(this, (PlaneGeometry.__proto__ || Object.getPrototypeOf(PlaneGeometry)).call(this, Object.assign({}, opts, { attributes: attributes, id: id })));
  }

  return PlaneGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__geometry__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (PlaneGeometry);
//# sourceMappingURL=plane-geometry.js.map

/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var SphereGeometry = /*#__PURE__*/function (_Geometry) {
  _inherits(SphereGeometry, _Geometry);

  function SphereGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SphereGeometry);

    var _opts$nlat = opts.nlat,
        nlat = _opts$nlat === undefined ? 10 : _opts$nlat,
        _opts$nlong = opts.nlong,
        nlong = _opts$nlong === undefined ? 10 : _opts$nlong,
        _opts$radius = opts.radius,
        radius = _opts$radius === undefined ? 1 : _opts$radius,
        _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["uid"])('sphere-geometry') : _opts$id;
    return _possibleConstructorReturn(this, (SphereGeometry.__proto__ || Object.getPrototypeOf(SphereGeometry)).call(this, Object.assign({}, opts, { id: id, attributes: getSphereAttributes(nlat, nlong, radius) })));
  }

  return SphereGeometry;
}(__WEBPACK_IMPORTED_MODULE_0__geometry__["a" /* default */]);

// Primitives inspired by TDL http://code.google.com/p/webglsamples/,
// copyright 2011 Google Inc. new BSD License
// (http://www.opensource.org/licenses/bsd-license.php).
/* eslint-disable max-statements, complexity */


/* harmony default export */ __webpack_exports__["a"] = (SphereGeometry);
function getSphereAttributes(nlat, nlong, radius) {
  var startLat = 0;
  var endLat = Math.PI;
  var latRange = endLat - startLat;
  var startLong = 0;
  var endLong = 2 * Math.PI;
  var longRange = endLong - startLong;
  var numVertices = (nlat + 1) * (nlong + 1);

  if (typeof radius === 'number') {
    var value = radius;
    radius = function radius(n1, n2, n3, u, v) {
      return value;
    };
  }

  var positions = new Float32Array(numVertices * 3);
  var normals = new Float32Array(numVertices * 3);
  var texCoords = new Float32Array(numVertices * 2);
  var indices = new Uint16Array(nlat * nlong * 6);

  // Create positions, normals and texCoords
  for (var y = 0; y <= nlat; y++) {
    for (var x = 0; x <= nlong; x++) {

      var u = x / nlong;
      var v = y / nlat;

      var index = x + y * (nlong + 1);
      var i2 = index * 2;
      var i3 = index * 3;

      var theta = longRange * u;
      var phi = latRange * v;
      var sinTheta = Math.sin(theta);
      var cosTheta = Math.cos(theta);
      var sinPhi = Math.sin(phi);
      var cosPhi = Math.cos(phi);
      var ux = cosTheta * sinPhi;
      var uy = cosPhi;
      var uz = sinTheta * sinPhi;

      var r = radius(ux, uy, uz, u, v);

      positions[i3 + 0] = r * ux;
      positions[i3 + 1] = r * uy;
      positions[i3 + 2] = r * uz;

      normals[i3 + 0] = ux;
      normals[i3 + 1] = uy;
      normals[i3 + 2] = uz;

      texCoords[i2 + 0] = u;
      texCoords[i2 + 1] = v;
    }
  }

  // Create indices
  var numVertsAround = nlat + 1;
  for (var _x2 = 0; _x2 < nlat; _x2++) {
    for (var _y = 0; _y < nlong; _y++) {
      var _index = (_x2 * nlong + _y) * 6;

      indices[_index + 0] = _y * numVertsAround + _x2;
      indices[_index + 1] = _y * numVertsAround + _x2 + 1;
      indices[_index + 2] = (_y + 1) * numVertsAround + _x2;

      indices[_index + 3] = (_y + 1) * numVertsAround + _x2;
      indices[_index + 4] = _y * numVertsAround + _x2 + 1;
      indices[_index + 5] = (_y + 1) * numVertsAround + _x2 + 1;
    }
  }

  return {
    positions: positions,
    indices: indices,
    normals: normals,
    texCoords: texCoords
  };
}
//# sourceMappingURL=sphere-geometry.js.map

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setPathPrefix = setPathPrefix;
exports.loadFile = loadFile;
exports.loadImage = loadImage;

var _browserRequestFile = __webpack_require__(182);

var pathPrefix = '';

/*
 * Set a relative path prefix
 */
function setPathPrefix(prefix) {
  pathPrefix = prefix;
}

function loadFile(url, opts) {
  if (typeof url !== 'string' && !opts) {
    // TODO - warn for deprecated mode
    opts = url;
    url = opts.url;
  }
  opts.url = pathPrefix ? pathPrefix + url : url;
  return (0, _browserRequestFile.requestFile)(opts);
}

/* global Image */

/*
 * Loads images asynchronously
 * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'
 * returns a promise tracking the load
 */
function loadImage(url, opts) {
  url = pathPrefix ? pathPrefix + url : url;

  return new Promise(function (resolve, reject) {
    try {
      var image = new Image();
      image.onload = function () {
        return resolve(image);
      };
      image.onerror = function () {
        return reject(new Error('Could not load image ' + url + '.'));
      };
      image.crossOrigin = opts && opts.crossOrigin || 'anonymous';
      image.src = url;
    } catch (error) {
      reject(error);
    }
  });
}
//# sourceMappingURL=browser-load.js.map

/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export validateMatrix4 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_array__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vector2__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__vector3__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__vector4__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_assert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_mat4_determinant__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_mat4_determinant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_mat4_determinant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_mat4_fromQuat__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_mat4_fromQuat___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_mat4_fromQuat__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_mat4_frustum__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_mat4_frustum___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_mat4_frustum__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_mat4_lookAt__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_mat4_lookAt___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_mat4_lookAt__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_mat4_ortho__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_mat4_ortho___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_mat4_ortho__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_mat4_perspective__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_mat4_perspective___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_mat4_perspective__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_mat4_transpose__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_mat4_transpose___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_mat4_transpose__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_mat4_invert__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_mat4_invert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_mat4_invert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_mat4_multiply__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_mat4_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_gl_mat4_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_mat4_rotateX__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_mat4_rotateX___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_gl_mat4_rotateX__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_mat4_rotateY__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_mat4_rotateY___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_gl_mat4_rotateY__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_mat4_rotateZ__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_mat4_rotateZ___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_gl_mat4_rotateZ__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_mat4_scale__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_mat4_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_gl_mat4_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_mat4_translate__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_mat4_translate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_gl_mat4_translate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_vec2_transformMat4__ = __webpack_require__(151);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_vec2_transformMat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20_gl_vec2_transformMat4__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_vec3_transformMat4__ = __webpack_require__(165);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_vec3_transformMat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21_gl_vec3_transformMat4__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_gl_vec4_transformMat4__ = __webpack_require__(175);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_gl_vec4_transformMat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_22_gl_vec4_transformMat4__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }








// gl-matrix is too big. Cherry-pick individual imports from stack.gl version
/* eslint-disable camelcase */



















var IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];

function validateMatrix4(m) {
  return m.length === 16 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]) && Number.isFinite(m[6]) && Number.isFinite(m[7]) && Number.isFinite(m[8]) && Number.isFinite(m[9]) && Number.isFinite(m[10]) && Number.isFinite(m[11]) && Number.isFinite(m[12]) && Number.isFinite(m[13]) && Number.isFinite(m[14]) && Number.isFinite(m[15]);
}

var Matrix4 = function (_MathArray) {
  _inherits(Matrix4, _MathArray);

  function Matrix4() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _classCallCheck(this, Matrix4);

    var _this = _possibleConstructorReturn(this, (Matrix4.__proto__ || Object.getPrototypeOf(Matrix4)).call(this));

    if (Array.isArray(args[0]) && arguments.length === 1) {
      _this.copy(args[0]);
    } else {
      _this.identity();
    }
    return _this;
  }

  _createClass(Matrix4, [{
    key: 'setRowMajor',


    /* eslint-disable max-params */
    value: function setRowMajor() {
      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var m10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var m20 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var m30 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var m01 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
      var m21 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var m31 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var m02 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
      var m12 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
      var m32 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
      var m03 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
      var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
      var m23 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;

      return this.set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
  }, {
    key: 'setColumnMajor',
    value: function setColumnMajor() {
      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var m10 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
      var m12 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var m13 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var m20 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
      var m21 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
      var m23 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
      var m30 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
      var m31 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
      var m32 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;

      return this.set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
  }, {
    key: 'set',
    value: function set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      this[0] = m00;
      this[1] = m01;
      this[2] = m02;
      this[3] = m03;
      this[4] = m10;
      this[5] = m11;
      this[6] = m12;
      this[7] = m13;
      this[8] = m20;
      this[9] = m21;
      this[10] = m22;
      this[11] = m23;
      this[12] = m30;
      this[13] = m31;
      this[14] = m32;
      this[15] = m33;
      this.check();
      return this;
    }
    /* eslint-enable max-params */

    // toString() {
    //   if (config.printRowMajor) {
    //     mat4_str(this);
    //   } else {
    //     mat4_str(this);
    //   }
    // }

    // Row major setters and getters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

  }, {
    key: 'determinant',

    /* eslint-enable no-multi-spaces, brace-style, no-return-assign */

    // Accessors

    value: function determinant() {
      return __WEBPACK_IMPORTED_MODULE_6_gl_mat4_determinant___default()(this);
    }

    // Constructors

  }, {
    key: 'identity',
    value: function identity() {
      for (var i = 0; i < IDENTITY.length; ++i) {
        this[i] = IDENTITY[i];
      }
      this.check();
      return this;
    }

    // Calculates a 4x4 matrix from the given quaternion
    // q quat  Quaternion to create matrix from

  }, {
    key: 'fromQuaternion',
    value: function fromQuaternion(q) {
      __WEBPACK_IMPORTED_MODULE_7_gl_mat4_fromQuat___default()(this, q);
      this.check();
      return this;
    }

    // Generates a frustum matrix with the given bounds
    // left  Number  Left bound of the frustum
    // right Number  Right bound of the frustum
    // bottom  Number  Bottom bound of the frustum
    // top Number  Top bound of the frustum
    // near  Number  Near bound of the frustum
    // far Number  Far bound of the frustum

  }, {
    key: 'frustum',
    value: function frustum(_ref) {
      var left = _ref.left,
          right = _ref.right,
          bottom = _ref.bottom,
          top = _ref.top,
          near = _ref.near,
          far = _ref.far;

      __WEBPACK_IMPORTED_MODULE_8_gl_mat4_frustum___default()(this, left, right, bottom, top, near, far);
      this.check();
      return this;
    }

    // Generates a look-at matrix with the given eye position, focal point,
    // and up axis
    // eye vec3  Position of the viewer
    // center  vec3  Point the viewer is looking at
    // up  vec3  vec3 pointing up

  }, {
    key: 'lookAt',
    value: function lookAt() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          eye = _ref2.eye,
          _ref2$center = _ref2.center,
          center = _ref2$center === undefined ? [0, 0, 0] : _ref2$center,
          _ref2$up = _ref2.up,
          up = _ref2$up === undefined ? [0, 1, 0] : _ref2$up;

      __WEBPACK_IMPORTED_MODULE_9_gl_mat4_lookAt___default()(this, eye, center, up);
      this.check();
      return this;
    }

    // Generates a orthogonal projection matrix with the given bounds
    // left  number  Left bound of the frustum
    // right number  Right bound of the frustum
    // bottom  number  Bottom bound of the frustum
    // top number  Top bound of the frustum
    // near  number  Near bound of the frustum
    // far number  Far bound of the frustum

  }, {
    key: 'ortho',
    value: function ortho(_ref3) {
      var left = _ref3.left,
          right = _ref3.right,
          bottom = _ref3.bottom,
          top = _ref3.top,
          _ref3$near = _ref3.near,
          near = _ref3$near === undefined ? 0.1 : _ref3$near,
          _ref3$far = _ref3.far,
          far = _ref3$far === undefined ? 500 : _ref3$far;

      __WEBPACK_IMPORTED_MODULE_10_gl_mat4_ortho___default()(this, left, right, bottom, top, near, far);
      this.check();
      return this;
    }

    // Generates a perspective projection matrix with the given bounds
    // fovy  number  Vertical field of view in radians
    // aspect  number  Aspect ratio. typically viewport width/height
    // near  number  Near bound of the frustum
    // far number  Far bound of the frustum

  }, {
    key: 'perspective',
    value: function perspective() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref4$fov = _ref4.fov,
          fov = _ref4$fov === undefined ? 45 * Math.PI / 180 : _ref4$fov,
          _ref4$aspect = _ref4.aspect,
          aspect = _ref4$aspect === undefined ? 1 : _ref4$aspect,
          _ref4$near = _ref4.near,
          near = _ref4$near === undefined ? 0.1 : _ref4$near,
          _ref4$far = _ref4.far,
          far = _ref4$far === undefined ? 500 : _ref4$far;

      if (fov > Math.PI * 2) {
        throw Error('radians');
      }
      __WEBPACK_IMPORTED_MODULE_11_gl_mat4_perspective___default()(this, fov, aspect, near, far);
      this.check();
      return this;
    }

    // Modifiers

  }, {
    key: 'transpose',
    value: function transpose() {
      __WEBPACK_IMPORTED_MODULE_12_gl_mat4_transpose___default()(this, this);
      this.check();
      return this;
    }
  }, {
    key: 'invert',
    value: function invert() {
      __WEBPACK_IMPORTED_MODULE_13_gl_mat4_invert___default()(this, this);
      this.check();
      return this;
    }

    // Operations

  }, {
    key: 'multiplyLeft',
    value: function multiplyLeft(a) {
      __WEBPACK_IMPORTED_MODULE_14_gl_mat4_multiply___default()(this, a, this);
      this.check();
      return this;
    }
  }, {
    key: 'multiplyRight',
    value: function multiplyRight(a) {
      __WEBPACK_IMPORTED_MODULE_14_gl_mat4_multiply___default()(this, this, a);
      this.check();
      return this;
    }

    // Rotates a matrix by the given angle around the X axis

  }, {
    key: 'rotateX',
    value: function rotateX(radians) {
      __WEBPACK_IMPORTED_MODULE_15_gl_mat4_rotateX___default()(this, this, radians);
      this.check();
      return this;
    }

    // Rotates a matrix by the given angle around the Y axis.

  }, {
    key: 'rotateY',
    value: function rotateY(radians) {
      __WEBPACK_IMPORTED_MODULE_16_gl_mat4_rotateY___default()(this, this, radians);
      this.check();
      return this;
    }

    // Rotates a matrix by the given angle around the Z axis.

  }, {
    key: 'rotateZ',
    value: function rotateZ(radians) {
      __WEBPACK_IMPORTED_MODULE_17_gl_mat4_rotateZ___default()(this, this, radians);
      this.check();
      return this;
    }
  }, {
    key: 'rotateXYZ',
    value: function rotateXYZ(_ref5) {
      var _ref6 = _slicedToArray(_ref5, 3),
          rx = _ref6[0],
          ry = _ref6[1],
          rz = _ref6[2];

      return this.rotateX(rx).rotateY(ry).rotateZ(rz);
    }
  }, {
    key: 'rotateAxis',
    value: function rotateAxis(radians, axis) {
      __WEBPACK_IMPORTED_MODULE_17_gl_mat4_rotateZ___default()(this, this, radians, axis);
      this.check();
      return this;
    }
  }, {
    key: 'scale',
    value: function scale(vec) {
      __WEBPACK_IMPORTED_MODULE_18_gl_mat4_scale___default()(this, this, vec);
      this.check();
      return this;
    }
  }, {
    key: 'translate',
    value: function translate(vec) {
      __WEBPACK_IMPORTED_MODULE_19_gl_mat4_translate___default()(this, this, vec);
      this.check();
      return this;
    }
  }, {
    key: 'transformVector2',
    value: function transformVector2(vector, out) {
      out = out || new __WEBPACK_IMPORTED_MODULE_2__vector2__["a" /* default */]();
      __WEBPACK_IMPORTED_MODULE_20_gl_vec2_transformMat4___default()(out, vector, this);
      __WEBPACK_IMPORTED_MODULE_5_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__vector2__["b" /* validateVector2 */])(out));
      return out;
    }
  }, {
    key: 'transformVector3',
    value: function transformVector3(vector) {
      var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new __WEBPACK_IMPORTED_MODULE_3__vector3__["a" /* default */]();

      out = out || new __WEBPACK_IMPORTED_MODULE_3__vector3__["a" /* default */]();
      __WEBPACK_IMPORTED_MODULE_21_gl_vec3_transformMat4___default()(out, vector, this);
      __WEBPACK_IMPORTED_MODULE_5_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__vector3__["b" /* validateVector3 */])(out));
      return out;
    }
  }, {
    key: 'transformVector4',
    value: function transformVector4(vector) {
      var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new __WEBPACK_IMPORTED_MODULE_4__vector4__["a" /* default */]();

      out = out || new __WEBPACK_IMPORTED_MODULE_4__vector4__["a" /* default */]();
      __WEBPACK_IMPORTED_MODULE_22_gl_vec4_transformMat4___default()(out, vector, this);
      __WEBPACK_IMPORTED_MODULE_5_assert___default()(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__vector4__["b" /* validateVector4 */])(out));
      return out;
    }

    // Transforms any 2, 3 or 4 element vector
    // returns a newly minted Vector2, Vector3 or Vector4

  }, {
    key: 'transformVector',
    value: function transformVector(vector, out) {
      switch (vector.length) {
        case 2:
          return this.transformVector2(vector, out);
        case 3:
          return this.transformVector3(vector, out);
        case 4:
          return this.transformVector4(vector, out);
        default:
          throw new Error('Illegal vector');
      }
    }
  }, {
    key: 'ELEMENTS',
    get: function get() {
      return 16;
    }
  }, {
    key: 'm00',
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm01',
    get: function get() {
      return this[4];
    },
    set: function set(value) {
      return this[4] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm02',
    get: function get() {
      return this[8];
    },
    set: function set(value) {
      return this[8] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm03',
    get: function get() {
      return this[12];
    },
    set: function set(value) {
      return this[12] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm10',
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm11',
    get: function get() {
      return this[5];
    },
    set: function set(value) {
      return this[5] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm12',
    get: function get() {
      return this[9];
    },
    set: function set(value) {
      return this[9] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm13',
    get: function get() {
      return this[13];
    },
    set: function set(value) {
      return this[13] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm20',
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm21',
    get: function get() {
      return this[6];
    },
    set: function set(value) {
      return this[6] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm22',
    get: function get() {
      return this[10];
    },
    set: function set(value) {
      return this[10] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm23',
    get: function get() {
      return this[14];
    },
    set: function set(value) {
      return this[14] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm30',
    get: function get() {
      return this[3];
    },
    set: function set(value) {
      return this[3] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm31',
    get: function get() {
      return this[7];
    },
    set: function set(value) {
      return this[7] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm32',
    get: function get() {
      return this[11];
    },
    set: function set(value) {
      return this[11] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'm33',
    get: function get() {
      return this[15];
    },
    set: function set(value) {
      return this[15] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }]);

  return Matrix4;
}(__WEBPACK_IMPORTED_MODULE_0__math_array__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Matrix4);
//# sourceMappingURL=matrix4.js.map

/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export validateQuaternion */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_array__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_quat_fromMat3__ = __webpack_require__(125);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_quat_fromMat3___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_gl_quat_fromMat3__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_quat_identity__ = __webpack_require__(126);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_quat_identity___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_gl_quat_identity__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_quat_length__ = __webpack_require__(128);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_gl_quat_length___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_gl_quat_length__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_quat_squaredLength__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_quat_squaredLength___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_gl_quat_squaredLength__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_quat_dot__ = __webpack_require__(124);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_quat_dot___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_quat_dot__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_quat_rotationTo__ = __webpack_require__(134);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_quat_rotationTo___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_quat_rotationTo__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_quat_add__ = __webpack_require__(121);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_quat_add___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_quat_add__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_quat_calculateW__ = __webpack_require__(122);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_quat_calculateW___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_quat_calculateW__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_quat_conjugate__ = __webpack_require__(123);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_quat_conjugate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_quat_conjugate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_quat_invert__ = __webpack_require__(127);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_quat_invert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_quat_invert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_quat_lerp__ = __webpack_require__(129);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_quat_lerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_quat_lerp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_quat_multiply__ = __webpack_require__(130);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_quat_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_quat_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_quat_normalize__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_quat_normalize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_gl_quat_normalize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_quat_rotateX__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_quat_rotateX___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_gl_quat_rotateX__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_quat_rotateY__ = __webpack_require__(132);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_quat_rotateY___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_gl_quat_rotateY__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_quat_rotateZ__ = __webpack_require__(133);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_quat_rotateZ___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_gl_quat_rotateZ__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_quat_scale__ = __webpack_require__(135);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_quat_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_gl_quat_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_quat_set__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_quat_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_gl_quat_set__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_quat_setAxisAngle__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_quat_setAxisAngle___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20_gl_quat_setAxisAngle__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_quat_slerp__ = __webpack_require__(137);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_quat_slerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21_gl_quat_slerp__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




// gl-matrix is too big. Cherry-pick individual imports from stack.gl version
/* eslint-disable camelcase */





// import quat_getAxisAngle from 'gl-quat/getAxisAngle';
















function validateQuaternion(q) {
  return q.length === 4 && Number.isFinite(q[0]) && Number.isFinite(q[1]) && Number.isFinite(q[2]) && Number.isFinite(q[3]);
}

var Quaternion = function (_MathArray) {
  _inherits(Quaternion, _MathArray);

  // Creates a new identity quat
  function Quaternion() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

    _classCallCheck(this, Quaternion);

    var _this = _possibleConstructorReturn(this, (Quaternion.__proto__ || Object.getPrototypeOf(Quaternion)).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y, z, w);
    }
    return _this;
  }

  // Creates a quaternion from the given 3x3 rotation matrix.
  // NOTE: The resultant quaternion is not normalized, so you should
  // be sure to renormalize the quaternion yourself where necessary.


  _createClass(Quaternion, [{
    key: 'fromMatrix3',
    value: function fromMatrix3(m) {
      __WEBPACK_IMPORTED_MODULE_2_gl_quat_fromMat3___default()(this, m);
      this.check();
      return this;
    }

    // Creates a new quat initialized with the given values

  }, {
    key: 'fromValues',
    value: function fromValues(x, y, z, w) {
      return this.set(x, y, z, w);
    }

    // Set a quat to the identity quaternion

  }, {
    key: 'identity',
    value: function identity() {
      __WEBPACK_IMPORTED_MODULE_3_gl_quat_identity___default()(this);
      this.check();
      return this;
    }

    // Getters/setters
    /* eslint-disable no-multi-spaces, brace-style, no-return-assign */

  }, {
    key: 'length',

    /* eslint-enable no-multi-spaces, brace-style, no-return-assign */

    // Calculates the length of a quat
    value: function length() {
      return __WEBPACK_IMPORTED_MODULE_4_gl_quat_length___default()(this);
    }

    // Calculates the squared length of a quat

  }, {
    key: 'squaredLength',
    value: function squaredLength(a) {
      return __WEBPACK_IMPORTED_MODULE_5_gl_quat_squaredLength___default()(this);
    }

    // Calculates the dot product of two quat's
    // @return {Number}

  }, {
    key: 'dot',
    value: function dot(a, b) {
      if (b !== undefined) {
        throw new Error('Quaternion.dot only takes one argument');
      }
      return __WEBPACK_IMPORTED_MODULE_6_gl_quat_dot___default()(this, a);
    }

    // Gets the rotation axis and angle for a given quaternion.
    // If a quaternion is created with setAxisAngle, this method will
    // return the same values as providied in the original parameter
    // list OR functionally equivalent values.
    // Example: The quaternion formed by axis [0, 0, 1] and angle -90
    // is the same as the quaternion formed by [0, 0, 1] and 270.
    // This method favors the latter.
    // @return {{[x,y,z], Number}}
    // getAxisAngle() {
    //   const axis = [];
    //   const angle = quat_getAxisAngle(axis, this);
    //   return {axis, angle};
    // }

    // MODIFIERS

    // Sets a quaternion to represent the shortest rotation from one vector
    // to another. Both vectors are assumed to be unit length.

  }, {
    key: 'rotationTo',
    value: function rotationTo(vectorA, vectorB) {
      __WEBPACK_IMPORTED_MODULE_7_gl_quat_rotationTo___default()(this, vectorA, vectorB);
      this.check();
      return this;
    }

    // Sets the specified quaternion with values corresponding to the given axes.
    // Each axis is a vec3 and is expected to be unit length and perpendicular
    // to all other specified axes.
    // setAxes() {
    //   Number
    // }

    // Performs a spherical linear interpolation with two control points
    // sqlerp() {
    //   Number;
    // }

    // Adds two quat's

  }, {
    key: 'add',
    value: function add(a, b) {
      if (b !== undefined) {
        throw new Error('Quaternion.add only takes one argument');
      }
      __WEBPACK_IMPORTED_MODULE_8_gl_quat_add___default()(this, a);
      this.check();
      return this;
    }

    // Calculates the W component of a quat from the X, Y, and Z components.
    // Any existing W component will be ignored.

  }, {
    key: 'calculateW',
    value: function calculateW() {
      __WEBPACK_IMPORTED_MODULE_9_gl_quat_calculateW___default()(this, this);
      this.check();
      return this;
    }

    // Calculates the conjugate of a quat If the quaternion is normalized,
    // this function is faster than quat_inverse and produces the same result.

  }, {
    key: 'conjugate',
    value: function conjugate() {
      __WEBPACK_IMPORTED_MODULE_10_gl_quat_conjugate___default()(this, this);
      this.check();
      return this;
    }

    // Calculates the inverse of a quat

  }, {
    key: 'invert',
    value: function invert() {
      __WEBPACK_IMPORTED_MODULE_11_gl_quat_invert___default()(this, this);
      this.check();
      return this;
    }

    // Performs a linear interpolation between two quat's

  }, {
    key: 'lerp',
    value: function lerp(a, b, t) {
      __WEBPACK_IMPORTED_MODULE_12_gl_quat_lerp___default()(this, a, b, t);
      this.check();
      return this;
    }

    // Multiplies two quat's

  }, {
    key: 'multiply',
    value: function multiply(a, b) {
      if (b !== undefined) {
        throw new Error('Quaternion.multiply only takes one argument');
      }
      __WEBPACK_IMPORTED_MODULE_13_gl_quat_multiply___default()(this, this, b);
      this.check();
      return this;
    }

    // Normalize a quat

  }, {
    key: 'normalize',
    value: function normalize() {
      __WEBPACK_IMPORTED_MODULE_14_gl_quat_normalize___default()(this, this);
      this.check();
      return this;
    }

    // Rotates a quaternion by the given angle about the X axis

  }, {
    key: 'rotateX',
    value: function rotateX(rad) {
      __WEBPACK_IMPORTED_MODULE_15_gl_quat_rotateX___default()(this, this, rad);
      this.check();
      return this;
    }

    // Rotates a quaternion by the given angle about the Y axis

  }, {
    key: 'rotateY',
    value: function rotateY(rad) {
      __WEBPACK_IMPORTED_MODULE_16_gl_quat_rotateY___default()(this, this, rad);
      this.check();
      return this;
    }

    // Rotates a quaternion by the given angle about the Z axis

  }, {
    key: 'rotateZ',
    value: function rotateZ(rad) {
      __WEBPACK_IMPORTED_MODULE_17_gl_quat_rotateZ___default()(this, this, rad);
      this.check();
      return this;
    }

    // Scales a quat by a scalar number

  }, {
    key: 'scale',
    value: function scale(b) {
      __WEBPACK_IMPORTED_MODULE_18_gl_quat_scale___default()(this, this, b);
      this.check();
      return this;
    }

    // Set the components of a quat to the given values

  }, {
    key: 'set',
    value: function set(i, j, k, l) {
      __WEBPACK_IMPORTED_MODULE_19_gl_quat_set___default()(this, i, j, k, l);
      this.check();
      return this;
    }

    // Sets a quat from the given angle and rotation axis, then returns it.

  }, {
    key: 'setAxisAngle',
    value: function setAxisAngle(axis, rad) {
      __WEBPACK_IMPORTED_MODULE_20_gl_quat_setAxisAngle___default()(this, axis, rad);
      this.check();
      return this;
    }

    // Performs a spherical linear interpolation between two quat

  }, {
    key: 'slerp',
    value: function slerp(a, b, t) {
      __WEBPACK_IMPORTED_MODULE_21_gl_quat_slerp___default()(this, a, b, t);
      this.check();
      return this;
    }
  }, {
    key: 'ELEMENTS',
    get: function get() {
      return 4;
    }
  }, {
    key: 'x',
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'y',
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'z',
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }, {
    key: 'w',
    get: function get() {
      return this[3];
    },
    set: function set(value) {
      return this[3] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__common__["c" /* checkNumber */])(value);
    }
  }]);

  return Quaternion;
}(__WEBPACK_IMPORTED_MODULE_0__math_array__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Quaternion);
//# sourceMappingURL=quaternion.js.map

/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = assembleShaders;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_modules__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__platform_defines__ = __webpack_require__(196);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__modules_module_injectors__ = __webpack_require__(208);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);
var _SHADER_TYPE, _MODULE_INJECTORS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






var VERTEX_SHADER = 'vs';
var FRAGMENT_SHADER = 'fs';

var SHADER_TYPE = (_SHADER_TYPE = {}, _defineProperty(_SHADER_TYPE, VERTEX_SHADER, 'vertex'), _defineProperty(_SHADER_TYPE, FRAGMENT_SHADER, 'fragment'), _SHADER_TYPE);

var MODULE_INJECTORS = (_MODULE_INJECTORS = {}, _defineProperty(_MODULE_INJECTORS, VERTEX_SHADER, __WEBPACK_IMPORTED_MODULE_2__modules_module_injectors__["a" /* MODULE_INJECTORS_VS */]), _defineProperty(_MODULE_INJECTORS, FRAGMENT_SHADER, __WEBPACK_IMPORTED_MODULE_2__modules_module_injectors__["b" /* MODULE_INJECTORS_FS */]), _MODULE_INJECTORS);

// Precision prologue to inject before functions are injected in shader
// TODO - extract any existing prologue in the fragment source and move it up...
var FRAGMENT_SHADER_PROLOGUE = '#ifdef GL_ES\nprecision highp float;\n#endif\n\n';

// Generate "glslify-compatible" SHADER_NAME defines
// These are understood by the GLSL error parsing function
// If id is provided and no SHADER_NAME constant is present in source, create one
function getShaderName(_ref) {
  var id = _ref.id,
      source = _ref.source,
      type = _ref.type;

  var injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;
  return injectShaderName ? '\n#define SHADER_NAME ' + id + '_' + SHADER_TYPE[type] + '\n\n' : '';
}

// Generates application defines from an object
function getApplicationDefines() {
  var defines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var count = 0;
  var sourceText = '';
  for (var define in defines) {
    if (count === 0) {
      sourceText += '\n// APPLICATION DEFINES\n';
    }
    count++;
    sourceText += '#define ' + define.toUpperCase() + ' ' + defines[define] + '\n';
  }
  if (count === 0) {
    sourceText += '\n';
  }
  return sourceText;
}

// Extracts the source code chunk for the specified shader type from the named shader module
function getModuleSource(moduleName, type) {
  var shaderModule = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__shader_modules__["a" /* getShaderModule */])(moduleName);
  var moduleSource = void 0;
  switch (type) {
    case VERTEX_SHADER:
      moduleSource = shaderModule.vs || shaderModule.vertexShader;
      break;
    case FRAGMENT_SHADER:
      moduleSource = shaderModule.fs || shaderModule.fragmentShader;
      break;
    default:
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(false);
  }

  if (typeof moduleSource !== 'string') {
    return '';
  }

  return '#define MODULE_' + moduleName.toUpperCase() + '\n' + moduleSource + '// END MODULE_' + moduleName + '\n\n';
}

// Pulls together complete source code for either a vertex or a fragment shader
// adding prologues, requested module chunks, and any final injections.
function assembleShader(gl, _ref2) {
  var id = _ref2.id,
      source = _ref2.source,
      type = _ref2.type,
      _ref2$modules = _ref2.modules,
      modules = _ref2$modules === undefined ? [] : _ref2$modules,
      _ref2$defines = _ref2.defines,
      defines = _ref2$defines === undefined ? {} : _ref2$defines;

  __WEBPACK_IMPORTED_MODULE_3_assert___default()(typeof source === 'string', 'shader source must be a string');

  var sourceLines = source.split('\n');
  var versionLine = '';
  var coreSource = source;
  // Extract any version directive string from source.
  // TODO : keep all pre-processor statements at the begining of the shader.
  if (sourceLines[0].indexOf('#version ') === 0) {
    versionLine = sourceLines[0];
    coreSource = sourceLines.slice(1).join('\n');
  }

  // Add platform defines (use these to work around platform-specific bugs and limitations)
  // Add common defines (GLSL version compatibility, feature detection)
  // Add precision declaration for fragment shaders
  var assembledSource = getShaderName({ id: id, source: source, type: type }) + '\n' + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__platform_defines__["a" /* getPlatformShaderDefines */])(gl) + '\n' + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__platform_defines__["b" /* getVersionDefines */])(gl) + '\n' + getApplicationDefines(defines) + '\n' + (type === FRAGMENT_SHADER ? FRAGMENT_SHADER_PROLOGUE : '') + '\n';

  // Add source of dependent modules in resolved order
  var inject = false;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var moduleName = _step.value;

      switch (moduleName) {
        case 'inject':
          inject = true;
          break;
        default:
          // Add the module source, and a #define that declares it presence
          assembledSource += getModuleSource(moduleName, type);
      }
    }

    // Add the version directive and actual source of this shader
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  assembledSource = versionLine + assembledSource + coreSource;

  // Finally, if requested, insert an automatic module injector chunk
  if (inject) {
    assembledSource.replace('}\s*$', MODULE_INJECTORS);
  }

  return assembledSource;
}

// Returns a combined `getUniforms` covering the options for all the modules,
// the created function will pass on options to the inidividual `getUniforms`
// function of each shader module and combine the results into one object that
// can be passed to setUniforms.
function assembleGetUniforms(modules) {

  return function getUniforms(opts) {
    var uniforms = {};
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var moduleName = _step2.value;

        var shaderModule = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__shader_modules__["a" /* getShaderModule */])(moduleName);
        var moduleUniforms = shaderModule.getUniforms ? shaderModule.getUniforms(opts) : {};
        Object.assign(uniforms, moduleUniforms);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return uniforms;
  };
}

// Returns a map with module names as keys, resolving to their module definitions
// The presence of a key indicates that the module is available in this program,
// whether directly included, or through a dependency of some other module
function assembleModuleMap(modules) {
  var result = {};
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = modules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var moduleName = _step3.value;

      var shaderModule = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__shader_modules__["a" /* getShaderModule */])(moduleName);
      result[moduleName] = shaderModule;
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return result;
}

/**
 * Apply set of modules
 */
function assembleShaders(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var vs = opts.vs,
      fs = opts.fs;

  var modules = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__shader_modules__["b" /* resolveModules */])(opts.modules || []);
  return {
    gl: gl,
    vs: assembleShader(gl, Object.assign({}, opts, { source: vs, type: VERTEX_SHADER, modules: modules })),
    fs: assembleShader(gl, Object.assign({}, opts, { source: fs, type: FRAGMENT_SHADER, modules: modules })),
    getUniforms: assembleGetUniforms(modules),
    modules: assembleModuleMap(modules)
  };
}
//# sourceMappingURL=assemble-shaders.js.map

/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_shader__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var ERR_SOURCE = 'ShaderCache expects source strings';
var ERR_CONTEXT = 'ShaderCache does not support caching across multiple contexts';

var ShaderCache = /*#__PURE__*/function () {

  /**
   * A cache of compiled shaders, keyed by shader source strings.
   * Compilation of long shaders can be time consuming.
   * By using this class, the application can ensure that each shader
   * is only compiled once.
   */
  function ShaderCache() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        gl = _ref.gl;

    _classCallCheck(this, ShaderCache);

    this.gl = gl;
    this.vertexShaders = {};
    this.fragmentShaders = {};
  }

  /**
   * Deletes shader references
   * @return {ShaderCache} - returns this for chaining
   */


  _createClass(ShaderCache, [{
    key: 'delete',
    value: function _delete() {
      // TODO - requires reference counting to avoid deleting shaders in use
      return this;
    }

    /**
     * Returns a compiled `VertexShader` object corresponding to the supplied
     * GLSL source code string, if possible from cache.
     *
     * @param {WebGLRenderingContext} gl - gl context
     * @param {String} source - Source code for shader
     * @return {VertexShader} - a compiled vertex shader
     */

  }, {
    key: 'getVertexShader',
    value: function getVertexShader(gl, source) {
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(typeof source === 'string', ERR_SOURCE);

      var shader = this.vertexShaders[source];
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(!shader || shader.gl === gl, ERR_CONTEXT);

      if (!shader) {
        shader = new __WEBPACK_IMPORTED_MODULE_0__webgl_shader__["a" /* VertexShader */](gl, source);
        this.vertexShaders[source] = shader;
      }
      return shader;
    }

    /**
     * Returns a compiled `VertexShader` object corresponding to the supplied
     * GLSL source code string, if possible from cache.
     *
     * @param {WebGLRenderingContext} gl - gl context
     * @param {String} source - Source code for shader
     * @return {FragmentShader} - a compiled fragment shader, possibly from chache
     */

  }, {
    key: 'getFragmentShader',
    value: function getFragmentShader(gl, source) {
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(typeof source === 'string', ERR_SOURCE);

      var shader = this.fragmentShaders[source];
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(!shader || shader.gl === gl, ERR_CONTEXT);

      if (!shader) {
        shader = new __WEBPACK_IMPORTED_MODULE_0__webgl_shader__["b" /* FragmentShader */](gl, source);
        this.fragmentShaders[source] = shader;
      }
      return shader;
    }
  }]);

  return ShaderCache;
}();

/* unused harmony default export */ var _unused_webpack_default_export = (ShaderCache);
//# sourceMappingURL=shader-cache.js.map

/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__packages_math__ = __webpack_require__(14);


var IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];

var DEFAULT_MODULE_OPTIONS = {
  modelMatrix: IDENTITY_MATRIX,
  viewMatrix: IDENTITY_MATRIX,
  projectionMatrix: IDENTITY_MATRIX,
  cameraPositionWorld: [0, 0, 0]
};

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;
  var prevUniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // const viewProjectionInverse = viewProjection.invert();
  // viewInverseMatrix: view.invert(),
  // viewProjectionInverseMatrix: viewProjectionInverse

  var uniforms = {};
  if (opts.modelMatrix !== undefined) {
    uniforms.modelMatrix = opts.modelMatrix;
  }
  if (opts.viewMatrix !== undefined) {
    uniforms.viewMatrix = opts.viewMatrix;
  }
  if (opts.projectionMatrix !== undefined) {
    uniforms.projectionMatrix = opts.projectionMatrix;
  }
  if (opts.cameraPositionWorld !== undefined) {
    uniforms.cameraPositionWorld = opts.cameraPositionWorld;
  }

  // COMPOSITE UNIFORMS
  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {
    uniforms.viewProjectionMatrix = new __WEBPACK_IMPORTED_MODULE_0__packages_math__["Matrix4"](opts.projectionMatrix).multiplyRight(opts.viewMatrix);
  }

  return uniforms;
}

var common = 'varying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n';

var vs = common + '\n\n// Unprefixed uniforms\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n';

var fs = '\n' + common;

/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'project',
  getUniforms: getUniforms,
  vs: vs,
  fs: fs
});
//# sourceMappingURL=project.js.map

/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return window_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return global_; });
/* unused harmony export document */
/* global window, global, document */
var window_ = typeof window !== 'undefined' ? window : global;
var global_ = typeof global !== 'undefined' ? global : window;
var document_ = typeof document !== 'undefined' ? document : {};


//# sourceMappingURL=globals.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(19)))

/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isBrowser; });
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// This function is needed in initialization stages,
// make sure it can be imported in isolation
/* global process */

var isNode = (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' && String(process) === '[object process]' && !process.browser;

var isBrowser = !isNode;

/* unused harmony default export */ var _unused_webpack_default_export = (isBrowser);
//# sourceMappingURL=is-browser.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(103)))

/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = getGLTypeFromTypedArray;
/* harmony export (immutable) */ __webpack_exports__["a"] = getTypedArrayFromGLType;
// GL Constants
var GL_BYTE = 0x1400;
var GL_UNSIGNED_BYTE = 0x1401;
var GL_SHORT = 0x1402;
var GL_UNSIGNED_SHORT = 0x1403;
var GL_INT = 0x1404;
var GL_UNSIGNED_INT = 0x1405;
var GL_FLOAT = 0x1406;
var GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
var GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
var GL_UNSIGNED_SHORT_5_6_5 = 0x8363;

var ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';

// Converts TYPED ARRAYS to corresponding GL constant
// Used to auto deduce gl parameter types
function getGLTypeFromTypedArray(arrayOrType) {
  // If typed array, look up constructor
  var type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
  switch (type) {
    case Float32Array:
      return GL_FLOAT;
    case Uint16Array:
      return GL_UNSIGNED_SHORT;
    case Uint32Array:
      return GL_UNSIGNED_INT;
    case Uint8Array:
      return GL_UNSIGNED_BYTE;
    case Uint8ClampedArray:
      return GL_UNSIGNED_BYTE;
    case Int8Array:
      return GL_BYTE;
    case Int16Array:
      return GL_SHORT;
    case Int32Array:
      return GL_INT;
    default:
      throw new Error(ERR_TYPE_DEDUCTION);
  }
}

// Converts GL constant to corresponding TYPED ARRAY
// Used to auto deduce gl parameter types

/* eslint-disable complexity */
function getTypedArrayFromGLType(glType) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$clamped = _ref.clamped,
      clamped = _ref$clamped === undefined ? true : _ref$clamped;

  // Sorted in some order of likelihood to reduce amount of comparisons
  switch (glType) {
    case GL_FLOAT:
      return Float32Array;
    case GL_UNSIGNED_SHORT:
    case GL_UNSIGNED_SHORT_5_6_5:
    case GL_UNSIGNED_SHORT_4_4_4_4:
    case GL_UNSIGNED_SHORT_5_5_5_1:
      return Uint16Array;
    case GL_UNSIGNED_INT:
      return Uint32Array;
    case GL_UNSIGNED_BYTE:
      return clamped ? Uint8ClampedArray : Uint8Array;
    case GL_BYTE:
      return Int8Array;
    case GL_SHORT:
      return Int16Array;
    case GL_INT:
      return Int32Array;
    default:
      throw new Error('Failed to deduce typed array type from GL constant');
  }
}
/* eslint-enable complexity */
//# sourceMappingURL=typed-array-utils.js.map

/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getShaderName;
/* harmony export (immutable) */ __webpack_exports__["b"] = getShaderTypeName;
var GL_FRAGMENT_SHADER = 0x8B30;
var GL_VERTEX_SHADER = 0x8B31;

// Supports GLSLIFY style naming of shaders
// #define SHADER_NAME ...
function getShaderName(shader) {
  var SHADER_NAME_REGEXP = /#define[\s*]SHADER_NAME[\s*]([A-Za-z0-9_-]+)[\s*]/;
  var match = shader.match(SHADER_NAME_REGEXP);
  return match ? match[1] : 'unnamed';
}

function getShaderTypeName(type) {
  switch (type) {
    case GL_FRAGMENT_SHADER:
      return 'fragment';
    case GL_VERTEX_SHADER:
      return 'vertex';
    default:
      return 'unknown type';
  }
}
//# sourceMappingURL=get-shader-name.js.map

/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = polyfillContext;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__polyfill_get_parameter__ = __webpack_require__(222);
var _WEBGL_CONTEXT_POLYFI;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// WebGL1/WebGL2 extension polyfill support
//
// Provides a function that creates polyfills for WebGL2 functions based
// on available extensions and installs them on a supplied target (could be
// the WebGLContext or its prototype, or a separate object).
//
// This is intended to be a stand-alone file with minimal dependencies,
// easy to reuse or repurpose in other projects.

/* eslint-disable camelcase, brace-style */



var OES_vertex_array_object = 'OES_vertex_array_object';
var ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';
var WEBGL_draw_buffers = 'WEBGL_draw_buffers';
var EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';
var EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';
var EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';

var ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';

// Return true if WebGL2 context
function isWebGL2(gl) {
  var GL_TEXTURE_BINDING_3D = 0x806A;
  return gl && gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D;
}

// Return object with webgl2 flag and an extension
function getExtensionData(gl, extension) {
  return {
    webgl2: isWebGL2(gl),
    ext: gl.getExtension(extension)
  };
}

// function mapExtensionConstant(gl, constant) {
//   switch (constant) {
//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;
//   }
// }

var WEBGL_CONTEXT_POLYFILLS = (_WEBGL_CONTEXT_POLYFI = {}, _defineProperty(_WEBGL_CONTEXT_POLYFI, OES_vertex_array_object, {
  meta: { suffix: 'OES' },
  // NEW METHODS
  createVertexArray: function createVertexArray() {
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false, ERR_VAO_NOT_SUPPORTED);
  },
  deleteVertexArray: function deleteVertexArray() {},
  bindVertexArray: function bindVertexArray() {},
  isVertexArray: function isVertexArray() {
    return false;
  }
}), _defineProperty(_WEBGL_CONTEXT_POLYFI, ANGLE_instanced_arrays, {
  meta: {
    suffix: 'ANGLE'
    // constants: {
    //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'
    // }
  },
  vertexAttribDivisor: function vertexAttribDivisor(location, divisor) {
    // Accept divisor 0 even if instancing is not supported (0 = no instancing)
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(divisor === 0, 'WebGL instanced rendering not supported');
  },

  drawElementsInstanced: function drawElementsInstanced() {},
  drawArraysInstanced: function drawArraysInstanced() {}
}), _defineProperty(_WEBGL_CONTEXT_POLYFI, WEBGL_draw_buffers, {
  meta: {
    suffix: 'WEBGL'
  },
  drawBuffers: function drawBuffers() {
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false);
  }
}), _defineProperty(_WEBGL_CONTEXT_POLYFI, EXT_disjoint_timer_query, {
  meta: { suffix: 'EXT' },
  // WebGL1: Polyfills the WebGL2 Query API
  createQuery: function createQuery() {
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false);
  },
  deleteQuery: function deleteQuery() {
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false);
  },
  beginQuery: function beginQuery() {
    __WEBPACK_IMPORTED_MODULE_0_assert___default()(false);
  },
  endQuery: function endQuery() {},
  getQuery: function getQuery(handle, pname) {
    return this.getQueryObject(handle, pname);
  },

  // The WebGL1 extension uses getQueryObject rather then getQueryParameter
  getQueryParameter: function getQueryParameter(handle, pname) {
    return this.getQueryObject(handle, pname);
  },

  // plus the additional `queryCounter` method
  queryCounter: function queryCounter() {},
  getQueryObject: function getQueryObject() {}
}), _defineProperty(_WEBGL_CONTEXT_POLYFI, EXT_disjoint_timer_query_webgl2, {
  meta: { suffix: 'EXT' },
  // install `queryCounter`
  // `null` avoids overwriting WebGL1 `queryCounter` if the WebGL2 extension is not available
  queryCounter: null
}), _defineProperty(_WEBGL_CONTEXT_POLYFI, 'OVERRIDES', {
  // Override for getVertexAttrib that returns sane values for non-WebGL1 constants
  getVertexAttrib: function getVertexAttrib(gl, originalFunc, location, pname) {
    // const gl = this; // eslint-disable-line
    var _getExtensionData = getExtensionData(gl, ANGLE_instanced_arrays),
        webgl2 = _getExtensionData.webgl2,
        ext = _getExtensionData.ext;

    var GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
    var GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;

    var result = void 0;
    switch (pname) {
      // WebGL1 attributes will never be integer
      case GL_VERTEX_ATTRIB_ARRAY_INTEGER:
        result = !webgl2 ? false : undefined;break;
      // if instancing is not available, return 0 meaning divisor has not been set
      case GL_VERTEX_ATTRIB_ARRAY_DIVISOR:
        result = !webgl2 && !ext ? 0 : undefined;break;
      default:
    }

    return result !== undefined ? result : originalFunc(location, pname);
  },
  // Handle transform feedback and uniform block queries in WebGL1
  getProgramParameter: function getProgramParameter(gl, originalFunc, program, pname) {
    var GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
    var GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
    var GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
    var GL_SEPARATE_ATTRIBS = 0x8C8D;

    if (!isWebGL2(gl)) {
      switch (pname) {
        case GL_TRANSFORM_FEEDBACK_BUFFER_MODE:
          return GL_SEPARATE_ATTRIBS;
        case GL_TRANSFORM_FEEDBACK_VARYINGS:
          return 0;
        case GL_ACTIVE_UNIFORM_BLOCKS:
          return 0;
        default:
      }
    }
    return originalFunc(program, pname);
  },
  getInternalformatParameter: function getInternalformatParameter(gl, originalFunc, target, format, pname) {
    var GL_SAMPLES = 0x80A9;
    if (!isWebGL2(gl)) {
      switch (pname) {
        case GL_SAMPLES:
          return new Int32Array([0]);
        default:
      }
    }
    return gl.getInternalformatParameter(target, format, pname);
  },
  getTexParameter: function getTexParameter(gl, originalFunc, target, pname) {
    var GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
    switch (pname) {
      case GL_TEXTURE_MAX_ANISOTROPY_EXT:
        var extensions = gl.luma.extensions;

        var ext = extensions[EXT_texture_filter_anisotropic];
        pname = ext && ext.TEXTURE_MAX_ANISOTROPY_EXT || GL_TEXTURE_MAX_ANISOTROPY_EXT;
        break;
      default:
    }
    return originalFunc(target, pname);
  },

  getParameter: __WEBPACK_IMPORTED_MODULE_1__polyfill_get_parameter__["a" /* getParameterPolyfill */],
  hint: function hint(gl, originalFunc, pname, value) {
    // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:
    // switch (pname) {
    // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:
    // }
    return originalFunc(pname, value);
  }
}), _WEBGL_CONTEXT_POLYFI);

function initializeExtensions(gl) {
  gl.luma.extensions = {};
  var EXTENSIONS = gl.getSupportedExtensions();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = EXTENSIONS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var extension = _step.value;

      gl.luma[extension] = gl.getExtension(extension);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

// Polyfills a single WebGL extension into the `target` object
function polyfillExtension(gl, _ref) {
  var extension = _ref.extension,
      target = _ref.target,
      target2 = _ref.target2;

  var defaults = WEBGL_CONTEXT_POLYFILLS[extension];
  __WEBPACK_IMPORTED_MODULE_0_assert___default()(defaults);

  var _defaults$meta = defaults.meta,
      meta = _defaults$meta === undefined ? {} : _defaults$meta;
  var _meta$suffix = meta.suffix,
      suffix = _meta$suffix === undefined ? '' : _meta$suffix;


  var ext = gl.getExtension(extension);

  Object.keys(defaults).forEach(function (key) {
    var extKey = '' + key + suffix;

    var polyfill = null;
    if (key === 'meta') {
      // ignore
    } else if (typeof gl[key] === 'function') {
      // WebGL2 implementation is already
    } else if (ext && typeof ext[extKey] === 'function') {
      // pick extension implemenentation,if available
      polyfill = function polyfill() {
        return ext[extKey].apply(ext, arguments);
      };
    } else if (typeof defaults[key] === 'function') {
      // pick the mock implementation, if no implementation was detected
      polyfill = defaults[key].bind(target);
    }

    if (polyfill) {
      target[key] = polyfill;
      target2[key] = polyfill;
    }
  });
}

// Install simple overrides (mostly get* functions)
function installOverrides(gl, _ref2) {
  var target = _ref2.target,
      target2 = _ref2.target2;
  var OVERRIDES = WEBGL_CONTEXT_POLYFILLS.OVERRIDES;

  Object.keys(OVERRIDES).forEach(function (key) {
    if (typeof OVERRIDES[key] === 'function') {
      // install an override, if no implementation was detected
      var originalFunc = gl[key] ? gl[key].bind(gl) : function () {};
      var polyfill = OVERRIDES[key].bind(null, gl, originalFunc);
      target[key] = polyfill;
      target2[key] = polyfill;
    }
  });
}

// Registers polyfill or mock functions for all known extensions
function polyfillContext(gl) {
  gl.luma = gl.luma || {};
  initializeExtensions(gl);
  if (!gl.luma.polyfilled) {
    for (var extension in WEBGL_CONTEXT_POLYFILLS) {
      if (extension !== 'overrides') {
        polyfillExtension(gl, { extension: extension, target: gl.luma, target2: gl });
      }
    }
    installOverrides(gl, { target: gl.luma, target2: gl });
    gl.luma.polyfilled = true;
  }
  return gl;
}
//# sourceMappingURL=polyfill-context.js.map

/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export GLenum */
/* unused harmony export GLfloat */
/* unused harmony export GLint */
/* unused harmony export GLuint */
/* unused harmony export GLboolean */
/* harmony export (immutable) */ __webpack_exports__["a"] = installParameterDefinitions;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__buffer__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fence_sync__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__framebuffer__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__program__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__renderbuffer__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__sampler__ = __webpack_require__(100);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__texture__ = __webpack_require__(13);
var _BUFFER_PARAMETERS, _FRAMEBUFFER_STATUS, _PROGRAM_PARAMETERS, _RENDERBUFFER_PARAMET, _SAMPLER_PARAMETERS, _TEXTURE_PARAMETERS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Parameter support.
// Installs definitions that enable querying an object for all its parameters
// with resource.getParameters(). This is mainly useful during debugging.
// Note: Kept separate to avoid bundling in production applications



// TODO - separate install parameter definitions function from api metadata






// import Shader from './shader';


// WebGL specification 'types'
var GLenum = 'GLenum';
var GLfloat = 'GLfloat';
var GLint = 'GLint';
var GLuint = 'GLint';
var GLboolean = 'GLboolean';

/*
 TODO - will most likely remove some of these fields from the main struct
 but they can be useful for debugging/seer integration, so keep them here for now
export const DBG_PARAMETERS = {
  blend: {
    type: GLboolean,
    params: GL.BLEND,
    value: false,
    setter: (gl, value) => value ? gl.enable(GL.BLEND) : gl.disable(GL.BLEND)
  },

  blendColor: {
    type: new Float32Array(4),
    value: new Float32Array([0, 0, 0, 0]),
    params: GL.BLEND_COLOR,
    setter: (gl, value) => gl.blendColor(...value)
  },

  blendEquation: {
    type: [GLenum, GLenum],
    object: ['rgb', 'alpha'],
    alias: 'blendEquationSeparate',
    value: [GL.FUNC_ADD, GL.FUNC_ADD],
    params: [GL.BLEND_EQUATION_RGB, GL.BLEND_EQUATION_ALPHA],
    setter: (gl, value) => gl.blendEquationSeparate(...value),
    normalizeArgs: args => isArray(args) ? args : [args, args]
  },

  // blend func
  blendFunc: {
    type: [GLenum, GLenum, GLenum, GLenum],
    object: ['srcRgb', 'dstRgb', 'srcAlpha', 'dstAlpha'],
    value: [GL.ONE, GL.ZERO, GL.ONE, GL.ZERO],
    params: [GL.BLEND_SRC_RGB, GL.BLEND_DST_RGB, GL.BLEND_SRC_ALPHA, GL.BLEND_DST_ALPHA],
    setter: (gl, value) => gl.blendFuncSeparate(...value),
    normalizeArgs: args => isArray(args) && args.length === 3 ? [...args, ...args] : args
  },

  clearColor: {
    type: new Float32Array(4),
    params: GL.COLOR_CLEAR_VALUE,
    value: new Float32Array([0, 0, 0, 0]), // TBD
    setter: (gl, value) => gl.clearColor(...value)
  },

  colorMask: {
    type: [GLboolean, GLboolean, GLboolean, GLboolean],
    params: GL.COLOR_WRITEMASK,
    value: [true, true, true, true],
    setter: (gl, value) => gl.colorMask(...value)
  },

  // TODO - We have a name clash here
  cullFace: {
    type: GLboolean,
    params: GL.CULL_FACE,
    value: false,
    setter: (gl, value) => value ? gl.enable(GL.CULL_FACE) : gl.disable(GL.CULL_FACE)
  },

  cullFaceMode: {
    type: GLenum,
    params: GL.CULL_FACE_MODE,
    value: GL.BACK,
    setter: (gl, value) => gl.cullFace(value)
  },

  depthTest: {
    type: GLboolean,
    params: GL.DEPTH_TEST,
    value: false,
    setter: (gl, value) => value ? gl.enable(GL.DEPTH_TEST) : gl.disable(GL.DEPTH_TEST)
  },

  depthClearValue: {
    type: GLfloat,
    params: GL.DEPTH_CLEAR_VALUE,
    value: 1,
    setter: (gl, value) => gl.clearDepth(value)
  },

  depthFunc: {
    type: GLenum,
    params: GL.DEPTH_FUNC,
    value: GL.LESS,
    setter: (gl, value) => gl.depthFunc(value)
  },

  depthRange: {
    type: new Float32Array(2),
    object: ['min', 'max'],
    params: GL.DEPTH_RANGE,
    value: new Float32Array([0, 1]), // TBD
    setter: (gl, value) => gl.depthRange(...value)
  },

  depthWritemask: {
    type: GLboolean,
    params: GL.DEPTH_WRITEMASK,
    value: true,
    setter: (gl, value) => gl.depthMask(value)
  },

  dither: {
    type: GLboolean,
    params: GL.DITHER,
    value: true,
    setter: (gl, value) => value ? gl.enable(GL.DITHER) : gl.disable(GL.DITHER)
  },

  fragmentShaderDerivativeHint: {
    type: GLenum,
    params: GL.FRAGMENT_SHADER_DERIVATIVE_HINT,
    value: GL.DONT_CARE,
    setter: (gl, value) => gl.hint(GL.FRAGMENT_SHADER_DERIVATIVE_HINT, value),
    gl1: 'OES_standard_derivatives'
  },

  frontFace: {
    type: GLenum,
    params: GL.FRONT_FACE,
    value: GL.CCW,
    setter: (gl, value) => gl.frontFace(value)
  },

  // Hint for quality of images generated with glGenerateMipmap
  generateMipmapHint: {
    type: GLenum,
    params: GL.GENERATE_MIPMAP_HINT,
    value: GL.DONT_CARE,
    setter: (gl, value) => gl.hint(GL.GENERATE_MIPMAP_HINT, value)
  },

  lineWidth: {
    type: GLfloat,
    params: GL.LINE_WIDTH,
    value: 1,
    setter: (gl, value) => gl.lineWidth(value)
  },

  polygonOffsetFill: {
    type: GLboolean,
    params: GL.POLYGON_OFFSET_FILL,
    value: false,
    setter: (gl, value) =>
      value ? gl.enable(GL.POLYGON_OFFSET_FILL) : gl.disable(GL.POLYGON_OFFSET_FILL)
  },

  // Add small offset to fragment depth values (by factor × DZ + r × units)
  // Useful for rendering hidden-line images, for applying decals to surfaces,
  // and for rendering solids with highlighted edges.
  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glPolygonOffset.xml
  polygonOffset: {
    type: [GLfloat, GLfloat],
    object: ['factor', 'units'],
    params: [GL.POLYGON_OFFSET_FACTOR, GL.POLYGON_OFFSET_UNITS],
    value: [0, 0],
    setter: (gl, value) => gl.polygonOffset(...value)
  },

  // TODO - enabling multisampling
  // glIsEnabled with argument GL_SAMPLE_ALPHA_TO_COVERAGE
  // glIsEnabled with argument GL_SAMPLE_COVERAGE

  // specify multisample coverage parameters
  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glSampleCoverage.xml
  sampleCoverage: {
    type: [GLfloat, GLboolean],
    object: ['value', 'invert'],
    params: [GL.SAMPLE_COVERAGE_VALUE, GL.SAMPLE_COVERAGE_INVERT],
    value: [1.0, false],
    setter: (gl, value) => gl.sampleCoverage(...value)
  },

  scissorTest: {
    type: GLboolean,
    params: GL.SCISSOR_TEST,
    value: false,
    setter: (gl, value) => value ? gl.enable(GL.SCISSOR_TEST) : gl.disable(GL.SCISSOR_TEST)
  },

  scissorBox: {
    type: new Int32Array(4),
    object: ['x', 'y', 'width', 'height'],
    // When scissor test enabled we expect users to set correct scissor box,
    // otherwise we default to following value array.
    params: GL.SCISSOR_BOX,
    value: new Int32Array([0, 0, 1024, 1024]),
    setter: (gl, value) => gl.scissor(...value)
  },

  stencilTest: {
    type: GLboolean,
    params: GL.STENCIL_TEST,
    value: false,
    setter: (gl, value) => value ? gl.enable(GL.STENCIL_TEST) : gl.disable(GL.STENCIL_TEST)
  },

  // Sets index used when stencil buffer is cleared.
  stencilClearValue: {
    type: GLint,
    params: GL.STENCIL_CLEAR_VALUE,
    value: 0,
    setter: (gl, value) => gl.clearStencil(value)
  },

  // Sets bit mask enabling writing of individual bits in the stencil planes
  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilMaskSeparate.xml
  stencilMask: {
    type: [GLuint, GLuint],
    object: ['mask', 'backMask'],
    value: [0xFFFFFFFF, 0xFFFFFFFF],
    params: [GL.STENCIL_WRITEMASK, GL.STENCIL_BACK_WRITEMASK],
    setter: (gl, value) => {
      value = isArray(value) ? value : [value, value];
      const [mask, backMask] = value;
      gl.stencilMaskSeparate(GL.FRONT, mask);
      gl.stencilMaskSeparate(GL.BACK, backMask);
    }
  },

  // Set stencil testing function, reference value and mask for front and back
  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilFuncSeparate.xml
  stencilFunc: {
    type: [GLenum, GLint, GLuint, GLenum, GLint, GLuint],
    object: [
      'func', 'ref', 'valueMask', 'backFunc', 'backRef', 'backValueMask'
    ],
    value: [GL.ALWAYS, 0, 0xFFFFFFFF, GL.ALWAYS, 0, 0xFFFFFFFF],
    params: [
      // front
      GL.STENCIL_FUNC,
      GL.STENCIL_REF,
      GL.STENCIL_VALUE_MASK,
      // back
      GL.STENCIL_BACK_FUNC,
      GL.STENCIL_BACK_REF,
      GL.STENCIL_BACK_VALUE_MASK
    ],
    setter: (gl, value) => {
      const [func, ref, mask, backFunc, backRef, backMask] = value;
      gl.stencilFuncSeparate(GL.FRONT, func, ref, mask);
      gl.stencilFuncSeparate(GL.BACK, backFunc, backRef, backMask);
    }
  },

  // Specifies the action to take when the stencil test fails, front and back.
  // Stencil test fail action, depth test fail action, pass action
  // GL.KEEP, GL.ZERO, GL.REPLACE, GL.INCR, GL.INCR_WRAP, GL.DECR, GL.DECR_WRAP,
  // and GL.INVERT
  // https://www.khronos.org/opengles/sdk/docs/man/xhtml/glStencilOpSeparate.xml
  stencilOp: {
    type: [GLenum, GLenum, GLenum, GLenum, GLenum, GLenum],
    object: [
      'fail', 'passDepthFail', 'passDepthPass',
      'backFail', 'backPassDepthFail', 'backPassDepthPass'
    ],
    params: [
      // front
      GL.STENCIL_FAIL,
      GL.STENCIL_PASS_DEPTH_FAIL,
      GL.STENCIL_PASS_DEPTH_PASS,
      // back
      GL.STENCIL_BACK_FAIL,
      GL.STENCIL_BACK_PASS_DEPTH_FAIL,
      GL.STENCIL_BACK_PASS_DEPTH_PASS
    ],
    value: [GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP, GL.KEEP],
    setter: (gl, value) => {
      const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = value;
      gl.stencilOpSeparate(GL.FRONT, sfail, dpfail, dppass);
      gl.stencilOpSeparate(GL.BACK, backSfail, backDpfail, backDppass);
    }
  },

  viewport: {
    type: new Int32Array(4),
    object: ['x', 'y', 'width', 'height'],
    // We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.
    params: GL.VIEWPORT,
    value: new Int32Array([0, 0, 1024, 1024]),
    setter: (gl, value) => gl.viewport(...value)
  },

  // WEBGL1 PIXEL PACK/UNPACK MODES

  // Packing of pixel data in memory (1,2,4,8)
  [GL.PACK_ALIGNMENT]: {
    type: GLint,
    params: GL.PACK_ALIGNMENT,
    value: 4,
    setter: (gl, value) => gl.pixelStorei(GL.PACK_ALIGNMENT, value)
  },
  // Unpacking pixel data from memory(1,2,4,8)
  [GL.UNPACK_ALIGNMENT]: {
    type: GLint,
    params: GL.UNPACK_ALIGNMENT,
    value: 4,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_ALIGNMENT, value)
  },
  // Flip source data along its vertical axis
  [GL.UNPACK_FLIP_Y_WEBGL]: {
    type: GLboolean,
    params: GL.UNPACK_FLIP_Y_WEBGL,
    value: false,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_FLIP_Y_WEBGL, value)
  },
  // Multiplies the alpha channel into the other color channels
  [GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL]: {
    type: GLboolean,
    params: GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
    value: false,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL, value)
  },
  // Default color space conversion or no color space conversion.
  [GL.UNPACK_COLORSPACE_CONVERSION_WEBGL]: {
    type: GLenum,
    params: GL.UNPACK_COLORSPACE_CONVERSION_WEBGL,
    value: GL.BROWSER_DEFAULT_WEBGL,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_COLORSPACE_CONVERSION_WEBGL, value)
  },

  // WEBGL2 PIXEL PACK/UNPACK MODES

  // Number of pixels in a row.
  [GL.PACK_ROW_LENGTH]: {
    type: GLint,
    params: GL.PACK_ROW_LENGTH,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.PACK_ROW_LENGTH, value),
    webgl2: true
  },
  // Number of pixels skipped before the first pixel is written into memory.
  [GL.PACK_SKIP_PIXELS]: {
    type: GLint,
    params: GL.PACK_SKIP_PIXELS,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.PACK_SKIP_PIXELS, value),
    webgl2: true
  },
  // Number of rows of pixels skipped before first pixel is written to memory.
  [GL.PACK_SKIP_ROWS]: {
    type: GLint,
    params: GL.PACK_SKIP_ROWS,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.PACK_SKIP_ROWS, value),
    webgl2: true
  },
  // Number of pixels in a row.
  [GL.UNPACK_ROW_LENGTH]: {
    type: GLint,
    params: GL.UNPACK_ROW_LENGTH,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_ROW_LENGTH, value),
    webgl2: true
  },
  // Image height used for reading pixel data from memory
  [GL.UNPACK_IMAGE_HEIGHT]: {
    type: GLint,
    params: GL.UNPACK_IMAGE_HEIGHT,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_IMAGE_HEIGHT, value),
    webgl2: true
  },
  // Number of pixel images skipped before first pixel is read from memory
  [GL.UNPACK_SKIP_PIXELS]: {
    type: GLint,
    params: GL.UNPACK_SKIP_PIXELS,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_PIXELS, value),
    webgl2: true
  },
  // Number of rows of pixels skipped before first pixel is read from memory
  [GL.UNPACK_SKIP_ROWS]: {
    type: GLint,
    params: GL.UNPACK_SKIP_ROWS,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_ROWS, value),
    webgl2: true
  },
  // Number of pixel images skipped before first pixel is read from memory
  [GL.UNPACK_SKIP_IMAGES]: {
    type: GLint,
    params: GL.UNPACK_SKIP_IMAGES,
    value: 0,
    setter: (gl, value) => gl.pixelStorei(GL.UNPACK_SKIP_IMAGES, value),
    webgl2: true
  }
};
*/

var BUFFER_PARAMETERS = (_BUFFER_PARAMETERS = {}, _defineProperty(_BUFFER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BUFFER_SIZE, { webgl1: 0 }), _defineProperty(_BUFFER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].BUFFER_USAGE, { webgl1: 0 // GLenum indicating the usage pattern of the buffer.
}), _BUFFER_PARAMETERS);

var FENCE_SYNC_PARAMETERS = [__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].OBJECT_TYPE, // GLenum, type of sync object (always GL.SYNC_FENCE).
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].SYNC_STATUS, // GLenum, status of sync object (GL.SIGNALED/GL.UNSIGNALED)
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].SYNC_CONDITION, // GLenum. object condition (always GL.SYNC_GPU_COMMANDS_COMPLETE).
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].SYNC_FLAGS // GLenum, flags sync object was created with (always 0)
];

var FRAMEBUFFER_ATTACHMENT_PARAMETERS = [__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint
// EXT_sRGB or WebGL2
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG
// WebGL2
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE, // GLint
__WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
// GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.
];

var FRAMEBUFFER_STATUS = (_FRAMEBUFFER_STATUS = {}, _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_COMPLETE, 'Success. Framebuffer is correctly set up'), _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_INCOMPLETE_ATTACHMENT, 'Framebuffer attachment types mismatched or some attachment point not attachment complete'), _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT, 'Framebuffer has no attachment'), _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_INCOMPLETE_DIMENSIONS, 'Framebuffer attachments do not have the same size'), _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_UNSUPPORTED, 'Framebuffer attachment format not supported or depth and stencil attachments are not same'), _defineProperty(_FRAMEBUFFER_STATUS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].FRAMEBUFFER_INCOMPLETE_MULTISAMPLE, 'Framebuffer attachement SAMPLES differs among renderbuffers, or are mixed with textures'), _FRAMEBUFFER_STATUS);

var PROGRAM_PARAMETERS = (_PROGRAM_PARAMETERS = {}, _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].DELETE_STATUS, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].LINK_STATUS, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].VALIDATE_STATUS, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].ATTACHED_SHADERS, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].ACTIVE_ATTRIBUTES, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].ACTIVE_UNIFORMS, { webgl1: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TRANSFORM_FEEDBACK_BUFFER_MODE, { webgl2: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TRANSFORM_FEEDBACK_VARYINGS, { webgl2: 0 }), _defineProperty(_PROGRAM_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].ACTIVE_UNIFORM_BLOCKS, { webgl2: 0 // GLint
}), _PROGRAM_PARAMETERS);

//  parameters
var RENDERBUFFER_PARAMETERS = (_RENDERBUFFER_PARAMET = {}, _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_WIDTH, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_HEIGHT, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_INTERNAL_FORMAT, { type: 'GLenum', webgl1: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RGBA4 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_GREEN_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_BLUE_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_RED_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_ALPHA_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_DEPTH_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_STENCIL_SIZE, { webgl1: 0 }), _defineProperty(_RENDERBUFFER_PARAMET, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].RENDERBUFFER_SAMPLES, { webgl2: 1 }), _RENDERBUFFER_PARAMET);

var SAMPLER_PARAMETERS = (_SAMPLER_PARAMETERS = {}, _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAG_FILTER, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MIN_FILTER, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_S, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_T, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_R, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_BASE_LEVEL, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAX_LEVEL, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_COMPARE_FUNC, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_COMPARE_MODE, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MIN_LOD, { webgl2: true }), _defineProperty(_SAMPLER_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAX_LOD, { webgl2: true // maximum level-of-detail value

  // [GL.TEXTURE_MAX_ANISOTROPY_EXT]: {webgl2: 'EXT_texture_filter_anisotropic'}
}), _SAMPLER_PARAMETERS);

// const SHADER_PARAMETERS = [
//   GL.DELETE_STATUS, // GLboolean - whether shader is flagged for deletion.
//   GL.COMPILE_STATUS, // GLboolean - was last shader compilation successful.
//   GL.SHADER_TYPE // GLenum - GL.VERTEX_SHADER or GL.FRAGMENT_SHADER.
// ];

var TEXTURE_PARAMETERS = (_TEXTURE_PARAMETERS = {}, _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAG_FILTER, { type: 'GLenum', webgl1: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].LINEAR }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MIN_FILTER, { type: 'GLenum', webgl1: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].NEAREST_MIPMAP_LINEAR }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_S, { type: 'GLenum', webgl1: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].REPEAT }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_T, { type: 'GLenum', webgl1: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].REPEAT }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WRAP_R, { type: 'GLenum', webgl2: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].REPEAT }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_BASE_LEVEL, { webgl2: 0 }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAX_LEVEL, { webgl2: 1000 }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_COMPARE_FUNC, { type: 'GLenum', webgl2: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].LEQUAL }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_COMPARE_MODE, { type: 'GLenum', webgl2: __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].NONE }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MIN_LOD, { webgl2: -1000 }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_MAX_LOD, { webgl2: 1000 }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_WIDTH, { webgl1: 0 }), _defineProperty(_TEXTURE_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__webgl_utils_constants__["a" /* default */].TEXTURE_HEIGHT, { webgl1: 0 }), _TEXTURE_PARAMETERS);

function installParameterDefinitions() {
  __WEBPACK_IMPORTED_MODULE_1__buffer__["a" /* default */].PARAMETERS = BUFFER_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_2__fence_sync__["a" /* default */].PARAMETERS = FENCE_SYNC_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_3__framebuffer__["a" /* default */].ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_3__framebuffer__["a" /* default */].STATUS = FRAMEBUFFER_STATUS;
  __WEBPACK_IMPORTED_MODULE_4__program__["a" /* default */].PARAMETERS = PROGRAM_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_5__renderbuffer__["a" /* default */].PARAMETERS = RENDERBUFFER_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_6__sampler__["a" /* default */].PARAMETERS = SAMPLER_PARAMETERS;
  // Shader.PARAMETERS = SHADER_PARAMETERS;
  __WEBPACK_IMPORTED_MODULE_7__texture__["a" /* default */].PARAMETERS = TEXTURE_PARAMETERS;
}
//# sourceMappingURL=debug-parameters.js.map

/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return webGLTypesAvailable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return Image; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return WebGLRenderingContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return WebGLProgram; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return WebGLShader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return WebGLBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return WebGLFramebuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return WebGLRenderbuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return WebGLTexture; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return WebGLUniformLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return WebGLActiveInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return WebGLShaderPrecisionFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return WebGL2RenderingContext; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__init__ = __webpack_require__(24);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// WEBGL BUILT-IN TYPES
// 1) Exports all WebGL constants as {GL}
// 2) Enables app to "import" WebGL types
//    - Importing these types makes them known to eslint etc.
//    - Provides dummy types for WebGL2 when not available to streamline
//      library code.
//    - Exports types from headless gl when running under Node.js



var DummyType = /*#__PURE__*/function DummyType() {
  _classCallCheck(this, DummyType);
};

var _ref = __WEBPACK_IMPORTED_MODULE_0__init__["default"].globals.headlessTypes || __WEBPACK_IMPORTED_MODULE_0__init__["global"],
    _ref$WebGLRenderingCo = _ref.WebGLRenderingContext,
    WebGLRenderingContext = _ref$WebGLRenderingCo === undefined ? DummyType : _ref$WebGLRenderingCo,
    _ref$WebGLProgram = _ref.WebGLProgram,
    WebGLProgram = _ref$WebGLProgram === undefined ? DummyType : _ref$WebGLProgram,
    _ref$WebGLShader = _ref.WebGLShader,
    WebGLShader = _ref$WebGLShader === undefined ? DummyType : _ref$WebGLShader,
    _ref$WebGLBuffer = _ref.WebGLBuffer,
    WebGLBuffer = _ref$WebGLBuffer === undefined ? DummyType : _ref$WebGLBuffer,
    _ref$WebGLFramebuffer = _ref.WebGLFramebuffer,
    WebGLFramebuffer = _ref$WebGLFramebuffer === undefined ? DummyType : _ref$WebGLFramebuffer,
    _ref$WebGLRenderbuffe = _ref.WebGLRenderbuffer,
    WebGLRenderbuffer = _ref$WebGLRenderbuffe === undefined ? DummyType : _ref$WebGLRenderbuffe,
    _ref$WebGLTexture = _ref.WebGLTexture,
    WebGLTexture = _ref$WebGLTexture === undefined ? DummyType : _ref$WebGLTexture,
    _ref$WebGLUniformLoca = _ref.WebGLUniformLocation,
    WebGLUniformLocation = _ref$WebGLUniformLoca === undefined ? DummyType : _ref$WebGLUniformLoca,
    _ref$WebGLActiveInfo = _ref.WebGLActiveInfo,
    WebGLActiveInfo = _ref$WebGLActiveInfo === undefined ? DummyType : _ref$WebGLActiveInfo,
    _ref$WebGLShaderPreci = _ref.WebGLShaderPrecisionFormat,
    WebGLShaderPrecisionFormat = _ref$WebGLShaderPreci === undefined ? DummyType : _ref$WebGLShaderPreci;

var webGLTypesAvailable = WebGLRenderingContext !== DummyType && WebGLProgram !== DummyType && WebGLShader !== DummyType && WebGLBuffer !== DummyType && WebGLFramebuffer !== DummyType && WebGLRenderbuffer !== DummyType && WebGLTexture !== DummyType && WebGLUniformLocation !== DummyType && WebGLActiveInfo !== DummyType && WebGLShaderPrecisionFormat !== DummyType;

// Ensures that WebGL2RenderingContext is defined in non-WebGL2 environments
// so that apps can test their gl contexts with instanceof
// E.g. if (gl instanceof WebGL2RenderingContext) { }
function getWebGL2RenderingContext() {
  var WebGL2RenderingContextNotSupported = /*#__PURE__*/function WebGL2RenderingContextNotSupported() {
    _classCallCheck(this, WebGL2RenderingContextNotSupported);
  };

  return __WEBPACK_IMPORTED_MODULE_0__init__["global"].WebGL2RenderingContext || WebGL2RenderingContextNotSupported;
}

// Ensure that Image is defined under Node.js
function getImage() {
  var ImageNotSupported = /*#__PURE__*/function ImageNotSupported() {
    _classCallCheck(this, ImageNotSupported);
  };

  return __WEBPACK_IMPORTED_MODULE_0__init__["global"].Image || ImageNotSupported;
}

var WebGL2RenderingContext = getWebGL2RenderingContext();
var Image = getImage();

// Export the standard WebGL types

//# sourceMappingURL=types.js.map

/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export enableDebug */
/* harmony export (immutable) */ __webpack_exports__["a"] = makeDebugContext;
/* unused harmony export getRealContext */
/* unused harmony export getDebugContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_webgl_debug__ = __webpack_require__(231);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_webgl_debug___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_webgl_debug__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__api_debug_parameters__ = __webpack_require__(93);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Khronos Debug support module




__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__api_debug_parameters__["a" /* installParameterDefinitions */])();

// Helper to get shared context data
function getContextData(gl) {
  gl.luma = gl.luma || {};
  return gl.luma;
}

// Enable or disable debug checks in debug contexts
// Non-debug contexts do not have checks (to ensure performance)
// Turning off debug for debug contexts removes most of the performance penalty
function enableDebug(debug) {
  __WEBPACK_IMPORTED_MODULE_1__utils__["log"].debug = debug;
}

// Returns (a potentially new) context with debug instrumentation turned off or on.
// Note that this actually returns a new context
function makeDebugContext(gl) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      debug = _ref.debug;

  if (gl === null) {
    // Return to ensure we don't create a context in this case.
    return null;
  }

  return debug ? getDebugContext(gl) : getRealContext(gl);
}

// Returns the real context from either of the real/debug contexts
function getRealContext(gl) {
  if (gl === null) {
    // Return to ensure we don't create a context in this case.
    return null;
  }

  var data = getContextData(gl);
  // If the context has a realContext member, it is a debug context so return the realContext
  return data.realContext ? data.realContext : gl;
}

// Returns the debug context from either of the real/debug contexts
function getDebugContext(gl) {
  if (gl === null) {
    // Return to ensure we don't create a context in this case.
    return null;
  }

  var data = getContextData(gl);
  // If this *is* a debug context, return itself
  if (data.realContext) {
    return gl;
  }

  // If this already has a debug context, return it.
  if (data.debugContext) {
    return data.debugContext;
  }

  // Create a new debug context

  var WebGLDebugContext = /*#__PURE__*/function WebGLDebugContext() {
    _classCallCheck(this, WebGLDebugContext);
  };

  var debugContext = __WEBPACK_IMPORTED_MODULE_0_webgl_debug___default.a.makeDebugContext(gl, throwOnError, validateArgsAndLog);
  Object.assign(WebGLDebugContext.prototype, debugContext);

  // Store the debug context
  data.debugContext = debugContext;
  debugContext.debug = true;

  // Return it
  return debugContext;
}

// DEBUG TRACING

function getFunctionString(functionName, functionArgs) {
  var args = __WEBPACK_IMPORTED_MODULE_0_webgl_debug___default.a.glFunctionArgsToString(functionName, functionArgs);
  args = '' + args.slice(0, 100) + (args.length > 100 ? '...' : '');
  return 'gl.' + functionName + '(' + args + ')';
}

function throwOnError(err, functionName, args) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils__["log"].nothrow) {
    var errorMessage = __WEBPACK_IMPORTED_MODULE_0_webgl_debug___default.a.glEnumToString(err);
    var functionArgs = __WEBPACK_IMPORTED_MODULE_0_webgl_debug___default.a.glFunctionArgsToString(functionName, args);
    throw new Error(errorMessage + ' in gl.' + functionName + '(' + functionArgs + ')');
  }
}

// Don't generate function string until it is needed
function validateArgsAndLog(functionName, functionArgs) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils__["log"].debug) {
    return;
  }

  var functionString = void 0;
  if (__WEBPACK_IMPORTED_MODULE_1__utils__["log"].priority >= 4) {
    functionString = getFunctionString(functionName, functionArgs);
    __WEBPACK_IMPORTED_MODULE_1__utils__["log"].info(4, '' + functionString);
  }

  if (__WEBPACK_IMPORTED_MODULE_1__utils__["log"].break) {
    functionString = functionString || getFunctionString(functionName, functionArgs);
    var isBreakpoint = __WEBPACK_IMPORTED_MODULE_1__utils__["log"].break && __WEBPACK_IMPORTED_MODULE_1__utils__["log"].break.every(function (breakOn) {
      return functionString.indexOf(breakOn) !== -1;
    });
    if (isBreakpoint) {
      /* eslint-disable no-debugger */
      debugger;
      /* eslint-enable no-debugger */
    }
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = functionArgs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var arg = _step.value;

      if (arg === undefined) {
        functionString = functionString || getFunctionString(functionName, functionArgs);
        throw new Error('Undefined argument: ' + functionString);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}
//# sourceMappingURL=context-debug.js.map

/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = draw;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
/* eslint-disable */
// TODO - generic draw call
// One of the good things about GL is that there are so many ways to draw things





// A good thing about webGL is that there are so many ways to draw things,
// e.g. depending on whether data is indexed and/or isInstanced.
// This function unifies those into a single call with simple parameters
// that have sane defaults.
function draw(gl, _ref) {
  var _ref$drawMode = _ref.drawMode,
      drawMode = _ref$drawMode === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES : _ref$drawMode,
      vertexCount = _ref.vertexCount,
      _ref$offset = _ref.offset,
      offset = _ref$offset === undefined ? 0 : _ref$offset,
      _ref$isIndexed = _ref.isIndexed,
      isIndexed = _ref$isIndexed === undefined ? false : _ref$isIndexed,
      _ref$indexType = _ref.indexType,
      indexType = _ref$indexType === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].UNSIGNED_SHORT : _ref$indexType,
      _ref$isInstanced = _ref.isInstanced,
      isInstanced = _ref$isInstanced === undefined ? false : _ref$isInstanced,
      _ref$instanceCount = _ref.instanceCount,
      instanceCount = _ref$instanceCount === undefined ? 0 : _ref$instanceCount;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["f" /* assertWebGLContext */])(gl);

  var extension = gl.getExtension('ANGLE_instanced_arrays');

  // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension
  if (isInstanced) {
    var webgl2 = isWebGL2(gl);
    var _extension = gl.getExtension('ANGLE_instanced_arrays');
    var context = webgl2 ? gl : _extension;
    var suffix = webgl2 ? '' : 'ANGLE';
    var drawElements = 'drawElementsInstanced' + suffix;
    var drawArrays = 'drawArraysInstanced' + suffix;

    if (isIndexed) {
      context[drawElements](drawMode, vertexCount, indexType, offset, instanceCount);
    } else {
      context[drawArrays](drawMode, offset, vertexCount, instanceCount);
    }
  } else if (isIndexed) {
    gl.drawElements(drawMode, vertexCount, indexType, offset);
  } else {
    gl.drawArrays(drawMode, offset, vertexCount);
  }
}
//# sourceMappingURL=draw.js.map

/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__helpers_query_manager__ = __webpack_require__(42);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var FenceSync = /*#__PURE__*/function (_Resource) {
  _inherits(FenceSync, _Resource);

  /*
   * @class
   * @param {WebGL2RenderingContext} gl
   */
  function FenceSync(gl, opts) {
    _classCallCheck(this, FenceSync);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(gl);

    // query manager needs a promise field
    var _this = _possibleConstructorReturn(this, (FenceSync.__proto__ || Object.getPrototypeOf(FenceSync)).call(this, gl, opts));

    _this.promise = null;
    Object.seal(_this);
    return _this;
  }

  /**
   * The method is a no-op in the absence of the possibility of
   * synchronizing between multiple GL contexts.
   * Prevent commands from being added to GPU command queue.
   * Note: commands can still be buffered in driver.
   *
   * @param {GLbitfield} flags
   * @param {GLint64} timeout
   * @return {Sync} status
   */


  _createClass(FenceSync, [{
    key: 'wait',
    value: function wait() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$flags = _ref.flags,
          flags = _ref$flags === undefined ? 0 : _ref$flags,
          _ref$timeout = _ref.timeout,
          timeout = _ref$timeout === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TIMEOUT_IGNORED : _ref$timeout;

      this.gl.waitSync(this.handle, flags, timeout);
      return this;
    }

    /**
     * Block all CPU operations until fence is signalled
     * @param {GLbitfield} flags
     * @param {GLint64} timeout
     * @return {GLenum} result
     */

  }, {
    key: 'clientWait',
    value: function clientWait(_ref2) {
      var _ref2$flags = _ref2.flags,
          flags = _ref2$flags === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SYNC_FLUSH_COMMANDS_BIT : _ref2$flags,
          timeout = _ref2.timeout;

      var result = this.gl.clientWaitSync(this.handle, flags, timeout);
      // TODO - map to boolean?
      switch (result) {
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].ALREADY_SIGNALED:
          // Indicates that sync object was signaled when this method was called.
          break;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TIMEOUT_EXPIRED:
          // Indicates that timeout time passed, sync object did not become signaled
          break;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].CONDITION_SATISFIED:
          // Indicates that sync object was signaled before timeout expired.
          break;
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].WAIT_FAILED:
          // Indicates that an error occurred during execution.
          break;
        default:
      }
      return result;
    }
  }, {
    key: 'cancel',
    value: function cancel() {
      __WEBPACK_IMPORTED_MODULE_3__helpers_query_manager__["a" /* default */].cancelQuery(this);
    }
  }, {
    key: 'isSignaled',
    value: function isSignaled() {
      return this.getParameter(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SYNC_STATUS) === __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SIGNALED;
    }

    // TODO - Query manager needs these?

  }, {
    key: 'isResultAvailable',
    value: function isResultAvailable() {
      return this.isSignaled();
    }
  }, {
    key: 'getResult',
    value: function getResult() {
      return this.isSignaled();
    }
  }, {
    key: 'getParameter',
    value: function getParameter(pname) {
      return this.gl.getSyncParameter(this.handle, pname);
    }

    // PRIVATE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.fenceSync(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].SYNC_GPU_COMMANDS_COMPLETE, 0);
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      __WEBPACK_IMPORTED_MODULE_3__helpers_query_manager__["a" /* default */].deleteQuery(this);
      this.gl.deleteSync(this.handle);
    }
  }]);

  return FenceSync;
}(__WEBPACK_IMPORTED_MODULE_2__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (FenceSync);
//# sourceMappingURL=fence-sync.js.map

/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = readPixels;
/* unused harmony export readPixelsToBuffer */
/* unused harmony export blitFramebuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/* eslint-disable */
// TODO - generic draw call
// One of the good things about GL is that there are so many ways to draw things





/**
 * Read pixels from a target
 *
 * Will read from the currently bound framebuffer, or the currently bound
 *  drawing buffer - if context has been created with
 *  preserveDrawingBuffers
 *
 * @param {WebGLRenderingContext} gl
 * @param {Object} opts
 * @param {Number} opts.x - leftmost coord to be read
 * @param {Number} opts.y - bottommost (or topmost if sourceHeight supplied)
 * @param {Number} opts.width=1 - width of area to be read
 * @param {Number} opts.height=1 - height of area to be read
 * @param {Number} opts.sourceHeight= - target height, implies top left coords
 * @param {Number} opts.dataOffset=0 - WebGL2 only - offset into data array
 * @param {Number} opts.format=GL.RBGA - Can be set to GL.RGB or GL.ALPHA
 *
 * @return {ArrayView} - types array, either passed in or autoallocated
 */
function readPixels(gl, _ref) {
  var x = _ref.x,
      y = _ref.y,
      _ref$width = _ref.width,
      width = _ref$width === undefined ? 1 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === undefined ? 1 : _ref$height,
      data = _ref.data,
      _ref$dataOffset = _ref.dataOffset,
      dataOffset = _ref$dataOffset === undefined ? 0 : _ref$dataOffset,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_BYTE : _ref$type,
      sourceHeight = _ref.sourceHeight,
      _ref$format = _ref.format,
      format = _ref$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA : _ref$format;

  // Read color in the central pixel, to be mapped with picking colors
  data = data || new Uint8Array(4 * width * height);
  // If source height is specified, a top left coordinate system is used
  y = sourceHeight ? sourceHeight - y : y;
  if (dataOffset) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(gl);
    gl.readPixels(x, y, width, height, format, type, data, dataOffset);
  } else {
    gl.readPixels(x, y, width, height, format, type, data);
  }
  return data;
}

/**
 * Read pixels directly into webgl buffer
 * NOTE: WebGL2 only
 *
 * @param {WebGLRenderingContext} gl
 * @param {Object} options
 * @return {WebGLBuffer} the passed in buffer
 */
function readPixelsToBuffer(gl, _ref2) {
  var x = _ref2.x,
      y = _ref2.y,
      _ref2$width = _ref2.width,
      width = _ref2$width === undefined ? 1 : _ref2$width,
      _ref2$height = _ref2.height,
      height = _ref2$height === undefined ? 1 : _ref2$height,
      buffer = _ref2.buffer,
      _ref2$dataOffset = _ref2.dataOffset,
      dataOffset = _ref2$dataOffset === undefined ? 0 : _ref2$dataOffset,
      _ref2$type = _ref2.type,
      type = _ref2$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_BYTE : _ref2$type,
      sourceHeight = _ref2.sourceHeight,
      _ref2$format = _ref2.format,
      format = _ref2$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA : _ref2$format;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(gl);

  // If source height is specified, a top left coordinate system is used
  y = sourceHeight ? sourceHeight - y : y;

  gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].PIXEL_PACK_BUFFER, buffer.handle);

  gl.readPixels(x, y, width, height, format, type, dataOffset);

  gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].PIXEL_PACK_BUFFER, null);

  return buffer;
}

/*
* @param {} opt.filter
 */
function blitFramebuffer(gl, _ref3) {
  var _ref3$source = _slicedToArray(_ref3.source, 4),
      sourceX = _ref3$source[0],
      sourceY = _ref3$source[1],
      sourceWidth = _ref3$source[2],
      sourceHeight = _ref3$source[3],
      _ref3$dest = _slicedToArray(_ref3.dest, 4),
      destX = _ref3$dest[0],
      destY = _ref3$dest[1],
      destWidth = _ref3$dest[2],
      destHeight = _ref3$dest[3],
      _ref3$mask = _ref3.mask,
      mask = _ref3$mask === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].COLOR_BUFFER_BIT | __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].DEPTH_BUFFER_BIT | __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].STENCIL_BUFFER_BIT : _ref3$mask,
      _ref3$filter = _ref3.filter,
      filter = _ref3$filter === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].LINEAR : _ref3$filter;
}
//# sourceMappingURL=functions.js.map

/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context_features__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_utils__ = __webpack_require__(11);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// WebGL2 Query (also handles disjoint timer extensions)







var noop = function noop(x) {
  return x;
};

var ERR_GPU_DISJOINT = 'Disjoint GPU operation invalidated timer queries';
var ERR_TIMER_QUERY_NOT_SUPPORTED = 'Timer queries require "EXT_disjoint_timer_query" extension';

var GL_QUERY_COUNTER_BITS_EXT = 0x8864; // # bits in query result for the given target.

var GL_QUERY_RESULT = 0x8866; // Returns a GLuint containing the query result.
var GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.

var GL_TIME_ELAPSED_EXT = 0x88BF; // Elapsed time (in nanoseconds).
var GL_TIMESTAMP_EXT = 0x8E28; // The current time.
var GL_GPU_DISJOINT_EXT = 0x8FBB; // Whether GPU performed any disjoint operation.

var GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88; // #primitives written to feedback buffers
var GL_ANY_SAMPLES_PASSED = 0x8C2F; // Occlusion query (if drawing passed depth test)
var GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A; // Occlusion query less accurate/faster version

var Query = /*#__PURE__*/function (_Resource) {
  _inherits(Query, _Resource);

  _createClass(Query, null, [{
    key: 'isSupported',


    // Returns true if Query is supported by the WebGL implementation
    // Can also check whether timestamp queries are available.
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$queries = _ref.queries,
          queries = _ref$queries === undefined ? false : _ref$queries,
          _ref$timers = _ref.timers,
          timers = _ref$timers === undefined ? false : _ref$timers,
          _ref$timestamps = _ref.timestamps,
          timestamps = _ref$timestamps === undefined ? false : _ref$timestamps;

      var webgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__context__["b" /* isWebGL2 */])(gl);
      var hasTimerQueries = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context_features__["d" /* hasFeatures */])(gl, __WEBPACK_IMPORTED_MODULE_2__context_features__["c" /* FEATURES */].TIMER_QUERY);

      var supported = webgl2 || hasTimerQueries;
      if (queries) {
        supported = supported && webgl2;
      }

      if (timers) {
        supported = supported && hasTimerQueries;
      }

      if (timestamps) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils__["d" /* polyfillContext */])(gl);
        var queryCounterBits = gl.getQuery(GL_TIMESTAMP_EXT, GL_QUERY_COUNTER_BITS_EXT);
        supported = supported && queryCounterBits > 0;
      }

      return supported;
    }

    // Create a query class

  }]);

  function Query(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Query);

    var _this = _possibleConstructorReturn(this, (Query.__proto__ || Object.getPrototypeOf(Query)).call(this, gl, opts));

    var _opts$onComplete = opts.onComplete,
        onComplete = _opts$onComplete === undefined ? noop : _opts$onComplete,
        _opts$onError = opts.onError,
        onError = _opts$onError === undefined ? noop : _opts$onError;


    _this.target = null;
    _this.onComplete = onComplete;
    _this.onError = onError;

    // query manager needs a promise field
    _this.promise = null;

    Object.seal(_this);
    return _this;
  }

  // Shortcut for timer query (dependent on extension in both WebGL1 and 2)
  // Measures GPU time delta between this call and a matching `end` call in the
  // GPU instruction stream.


  _createClass(Query, [{
    key: 'beginTimeElapsedQuery',
    value: function beginTimeElapsedQuery() {
      return this.begin(GL_TIME_ELAPSED_EXT);
    }

    // Shortcut for occlusion queries

  }, {
    key: 'beginOcclusionQuery',
    value: function beginOcclusionQuery() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$conservative = _ref2.conservative,
          conservative = _ref2$conservative === undefined ? false : _ref2$conservative;

      return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);
    }

    // Shortcut for transformFeedbackQuery

  }, {
    key: 'beginTransformFeedbackQuery',
    value: function beginTransformFeedbackQuery() {
      return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
    }

    // Generates a GPU time stamp when the GPU instruction stream reaches this instruction.
    // To measure time deltas, two timestamp queries are needed.
    // Note: timestamp() queries may not be available even when the timer query extension is.

  }, {
    key: 'getTimestamp',
    value: function getTimestamp() {
      __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].beginQuery(this, this.onComplete, this.onError);
      try {
        this.gl.queryCounter(this.handle, GL_TIMESTAMP_EXT);
      } catch (error) {
        __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].rejectQuery(this, ERR_TIMER_QUERY_NOT_SUPPORTED);
      }
      return this;
    }

    // Due to OpenGL API limitations, after calling `begin()` on one Query
    // instance, `end()` must be called on that same instance before
    // calling `begin()` on another query. While there can be multiple
    // outstanding queries representing disjoint `begin()`/`end()` intervals.
    // It is not possible to interleave or overlap `begin` and `end` calls.

  }, {
    key: 'begin',
    value: function begin(target) {
      // - Triggering a new query when a Query is already tracking an
      //   unresolved query causes that query to be cancelled.
      __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].beginQuery(this, this.onComplete, this.onError);
      this.target = target;

      try {
        this.gl.beginQuery(this.target, this.handle);
      } catch (error) {
        __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].rejectQuery(this, 'Query not supported');
      }
      return this;
    }

    // ends the current query

  }, {
    key: 'end',
    value: function end() {
      // Note: calling end does not affect the pending promise
      if (this.target) {
        this.ext.endQuery(this.target);
        this.target = null;
      }
      return this;
    }

    // Cancels a pending query

  }, {
    key: 'cancel',
    value: function cancel() {
      this.end();
      __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].cancelQuery(this);
      return this;
    }

    // Returns true if the query result is available

  }, {
    key: 'isResultAvailable',
    value: function isResultAvailable() {
      return this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);
    }

    // Returns the query result, converted to milliseconds to match JavaScript conventions.
    // TODO - what about non-timer queries

  }, {
    key: 'getResult',
    value: function getResult() {
      var result = this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT);
      return Number.isFinite(result) ? result / 1e6 : 0;
    }
  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return Query.isSupported(this.gl) ? this.gl.createQuery() : null;
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].deleteQuery(this);
      this.gl.deleteQuery(this.handle);
    }
  }], [{
    key: 'poll',
    value: function poll(gl) {
      __WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].poll(gl);
    }
  }]);

  return Query;
}(__WEBPACK_IMPORTED_MODULE_0__resource__["a" /* default */]);

// NOTE: This call lets the queryManager know how to detect disjoint GPU state
// It will check dsjoint state on polls and before adding a new query
// and reject any outstanding TimerQueries with our supplied error message.


/* harmony default export */ __webpack_exports__["a"] = (Query);
__WEBPACK_IMPORTED_MODULE_1__helpers_query_manager__["a" /* default */].setInvalidator({
  queryType: Query,
  errorMessage: ERR_GPU_DISJOINT,
  // Note: Querying the disjoint state resets it
  checkInvalid: function checkInvalid(gl) {
    return gl.getParameter(GL_GPU_DISJOINT_EXT);
  }
});
//# sourceMappingURL=query.js.map

/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resource__ = __webpack_require__(4);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-inline-comments */




var Sampler = /*#__PURE__*/function (_Resource) {
  _inherits(Sampler, _Resource);

  _createClass(Sampler, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl);
    }
  }, {
    key: 'isHandle',
    value: function isHandle(handle) {
      return this.gl.isSampler(this.handle);
    }
  }]);

  function Sampler(gl, opts) {
    _classCallCheck(this, Sampler);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(gl);

    var _this = _possibleConstructorReturn(this, (Sampler.__proto__ || Object.getPrototypeOf(Sampler)).call(this, gl, opts));

    Object.seal(_this);
    return _this;
  }

  /**
   * Bind to the same texture unit as a texture to control sampling for that texture
   * @param {GLuint} unit - texture unit index
   * @return {Sampler} - returns self to enable chaining
   */


  _createClass(Sampler, [{
    key: 'bind',
    value: function bind(unit) {
      this.gl.bindSampler(unit, this.handle);
      return this;
    }

    /**
     * Bind to the same texture unit as a texture to control sampling for that texture
     * @param {GLuint} unit - texture unit index
     * @return {Sampler} - returns self to enable chaining
     */

  }, {
    key: 'unbind',
    value: function unbind(unit) {
      this.gl.bindSampler(unit, null);
      return this;
    }

    // RESOURCE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createSampler();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteSampler(this.handle);
    }
  }, {
    key: '_getParameter',
    value: function _getParameter(pname) {
      var value = this.gl.getSamplerParameter(this.handle, pname);
      return value;
    }
  }, {
    key: '_setParameter',
    value: function _setParameter(pname, param) {
      // Apparently there are some conversion integer/float rules that made
      // the WebGL committe expose two parameter setting functions in JavaScript.
      // For now, pick the float version for parameters specified as GLfloat.
      switch (pname) {
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_MIN_LOD:
        case __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_MAX_LOD:
          this.gl.samplerParameterf(this.handle, pname, param);
          break;
        default:
          this.gl.samplerParameteri(this.handle, pname, param);
          break;
      }
      return this;
    }
  }]);

  return Sampler;
}(__WEBPACK_IMPORTED_MODULE_2__resource__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Sampler);
//# sourceMappingURL=sampler.js.map

/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__texture__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



// import {withParameters} from './context';


var FACES = [__WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_POSITIVE_X, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_NEGATIVE_X, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_POSITIVE_Y, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_NEGATIVE_Y, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_POSITIVE_Z, __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_NEGATIVE_Z];

var TextureCube = /*#__PURE__*/function (_Texture) {
  _inherits(TextureCube, _Texture);

  function TextureCube(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, TextureCube);

    var _this = _possibleConstructorReturn(this, (TextureCube.__proto__ || Object.getPrototypeOf(TextureCube)).call(this, gl, Object.assign({}, opts, { target: __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP })));

    _this.initialize(opts);
    Object.seal(_this);
    return _this;
  }

  /* eslint-disable max-len, max-statements */


  _createClass(TextureCube, [{
    key: 'initialize',
    value: function initialize() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _opts$format = opts.format,
          format = _opts$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].RGBA : _opts$format,
          _opts$mipmaps = opts.mipmaps,
          mipmaps = _opts$mipmaps === undefined ? true : _opts$mipmaps;
      var _opts$width = opts.width,
          width = _opts$width === undefined ? 1 : _opts$width,
          _opts$height = opts.height,
          height = _opts$height === undefined ? 1 : _opts$height,
          _opts$type = opts.type,
          type = _opts$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].UNSIGNED_BYTE : _opts$type,
          dataFormat = opts.dataFormat;

      // Deduce width and height based on one of the faces

      var _deduceParameters = this._deduceParameters({ format: format, type: type, dataFormat: dataFormat });

      type = _deduceParameters.type;
      dataFormat = _deduceParameters.dataFormat;

      // Enforce cube
      var _deduceImageSize = this._deduceImageSize({
        data: opts[__WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP_POSITIVE_X], width: width, height: height
      });

      width = _deduceImageSize.width;
      height = _deduceImageSize.height;
      __WEBPACK_IMPORTED_MODULE_2_assert___default()(width === height);

      // Temporarily apply any pixel store paramaters and build textures
      // withParameters(this.gl, opts, () => {
      //   for (const face of CUBE_MAP_FACES) {
      //     this.setImageData({
      //       target: face,
      //       data: opts[face],
      //       width, height, format, type, dataFormat, border, mipmaps
      //     });
      //   }
      // });

      this.setCubeMapImageData(opts);

      // Called here so that GL.
      // TODO - should genMipmap() be called on the cubemap or on the faces?
      if (mipmaps) {
        this.generateMipmap(opts);
      }

      // Store opts for accessors
      this.opts = opts;
    }
  }, {
    key: 'subImage',
    value: function subImage(_ref) {
      var face = _ref.face,
          data = _ref.data,
          _ref$x = _ref.x,
          x = _ref$x === undefined ? 0 : _ref$x,
          _ref$y = _ref.y,
          y = _ref$y === undefined ? 0 : _ref$y,
          _ref$mipmapLevel = _ref.mipmapLevel,
          mipmapLevel = _ref$mipmapLevel === undefined ? 0 : _ref$mipmapLevel;

      return this._subImage({ target: face, data: data, x: x, y: y, mipmapLevel: mipmapLevel });
    }

    /* eslint-disable max-statements, max-len */

  }, {
    key: 'setCubeMapImageData',
    value: function setCubeMapImageData(_ref2) {
      var width = _ref2.width,
          height = _ref2.height,
          pixels = _ref2.pixels,
          data = _ref2.data,
          _ref2$border = _ref2.border,
          border = _ref2$border === undefined ? 0 : _ref2$border,
          _ref2$format = _ref2.format,
          format = _ref2$format === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].RGBA : _ref2$format,
          _ref2$type = _ref2.type,
          type = _ref2$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].UNSIGNED_BYTE : _ref2$type,
          _ref2$generateMipmap = _ref2.generateMipmap,
          generateMipmap = _ref2$generateMipmap === undefined ? false : _ref2$generateMipmap;
      var gl = this.gl;

      pixels = pixels || data;
      this.bind();
      if (this.width || this.height) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = FACES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var face = _step.value;

            gl.texImage2D(face, 0, format, width, height, border, format, type, pixels[face]);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = FACES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _face = _step2.value;

            gl.texImage2D(_face, 0, format, format, type, pixels[_face]);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  }, {
    key: 'bind',
    value: function bind() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          index = _ref3.index;

      if (index !== undefined) {
        this.gl.activeTexture(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE0 + index);
      }
      this.gl.bindTexture(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP, this.handle);
      return index;
    }
  }, {
    key: 'unbind',
    value: function unbind() {
      this.gl.bindTexture(__WEBPACK_IMPORTED_MODULE_0__gl_constants__["d" /* GL */].TEXTURE_CUBE_MAP, null);
      return this;
    }
  }]);

  return TextureCube;
}(__WEBPACK_IMPORTED_MODULE_1__texture__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (TextureCube);


TextureCube.FACES = FACES;
//# sourceMappingURL=texture-cube.js.map

/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getPrimitiveCount */
/* unused harmony export getVertexCount */
/* harmony export (immutable) */ __webpack_exports__["a"] = getTransformFeedbackMode;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_constants__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__resource__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
var GL_TRANSFORM_FEEDBACK = 0x8E22;

var TranformFeedback = /*#__PURE__*/function (_Resource) {
  _inherits(TranformFeedback, _Resource);

  _createClass(TranformFeedback, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["b" /* isWebGL2 */])(gl);
    }
  }, {
    key: 'isHandle',
    value: function isHandle(handle) {
      return this.gl.isTransformFeedback(this.handle);
    }

    /**
     * @class
     * @param {WebGL2RenderingContext} gl - context
     * @param {Object} opts - options
     */

  }]);

  function TranformFeedback(gl, opts) {
    _classCallCheck(this, TranformFeedback);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context__["a" /* assertWebGL2Context */])(gl);

    var _this = _possibleConstructorReturn(this, (TranformFeedback.__proto__ || Object.getPrototypeOf(TranformFeedback)).call(this, gl, opts));

    _this.buffers = {};
    Object.seal(_this);

    _this.initialize(opts);
    return _this;
  }

  _createClass(TranformFeedback, [{
    key: 'initialize',
    value: function initialize(_ref) {
      var _ref$buffers = _ref.buffers,
          buffers = _ref$buffers === undefined ? {} : _ref$buffers;

      this.bindBuffers(buffers, { clear: true });
    }
  }, {
    key: 'bindBuffers',
    value: function bindBuffers() {
      var buffers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _ref2 = arguments[1];
      var clear = _ref2.clear,
          _ref2$varyingMap = _ref2.varyingMap,
          varyingMap = _ref2$varyingMap === undefined ? {} : _ref2$varyingMap;

      if (clear) {
        this._unbindBuffers();
        this.buffers = {};
      }
      var bufferIndex = 0;
      for (var bufferName in buffers) {
        var buffer = buffers[bufferName];
        var index = bufferIndex++;
        __WEBPACK_IMPORTED_MODULE_3_assert___default()(Number.isFinite(index));
        this.buffers[index] = buffer;
      }
    }

    // TODO: Activation is tightly coupled to the current program. Since we try to encapsulate
    // program.use, should we move these methods (begin/pause/resume/end) to the Program?

  }, {
    key: 'begin',
    value: function begin(primitiveMode) {
      this._bindBuffers();
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      this.gl.beginTransformFeedback(primitiveMode);
      return this;
    }
  }, {
    key: 'pause',
    value: function pause() {
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      this.gl.pauseTransformFeedback();
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);
      this._unbindBuffers();
      return this;
    }
  }, {
    key: 'resume',
    value: function resume() {
      this._bindBuffers();
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      this.gl.resumeTransformFeedback();
      return this;
    }
  }, {
    key: 'end',
    value: function end() {
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      this.gl.endTransformFeedback();
      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, null);
      this._unbindBuffers();
      return this;
    }
  }, {
    key: 'bindBuffer',
    value: function bindBuffer(_ref3) {
      var index = _ref3.index,
          buffer = _ref3.buffer,
          _ref3$offset = _ref3.offset,
          offset = _ref3$offset === undefined ? 0 : _ref3$offset,
          size = _ref3.size;

      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      if (size === undefined) {
        this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle);
      } else {
        this.gl.bindBufferRange(GL_TRANSFORM_FEEDBACK_BUFFER, index, buffer.handle, offset, size);
      }
      return this;
    }
  }, {
    key: 'unbindBuffer',
    value: function unbindBuffer(_ref4) {
      var index = _ref4.index;

      this.gl.bindTransformFeedback(GL_TRANSFORM_FEEDBACK, this.handle);
      this.gl.bindBufferBase(GL_TRANSFORM_FEEDBACK_BUFFER, index, null);
      return this;
    }

    // PRIVATE METHODS

    // See https://github.com/KhronosGroup/WebGL/issues/2346
    // If it was true that having a buffer on an unused TF was a problem
    // it would make the entire concept of transform feedback objects pointless.
    // The whole point of them is like VertexArrayObjects.
    // You set them up with all in outputs at init time and
    // then in one call you can setup all the outputs just before drawing.
    // Since the point of transform feedback is to generate data that will
    // then be used as inputs to attributes it makes zero sense you'd
    // have to unbind them from every unused transform feedback object
    // before you could use them in an attribute. If that was the case
    // there would be no reason to setup transform feedback objects ever.
    // You'd always use the default because you'd always have to bind and
    // unbind all the buffers.

  }, {
    key: '_bindBuffers',
    value: function _bindBuffers() {
      for (var bufferIndex in this.buffers) {
        this.bindBuffer({ buffer: this.buffers[bufferIndex], index: Number(bufferIndex) });
      }
    }
  }, {
    key: '_unbindBuffers',
    value: function _unbindBuffers() {
      for (var bufferIndex in this.buffers) {
        this.unbindBuffer({ buffer: this.buffers[bufferIndex], index: Number(bufferIndex) });
      }
    }

    // RESOURCE METHODS

  }, {
    key: '_createHandle',
    value: function _createHandle() {
      return this.gl.createTransformFeedback();
    }
  }, {
    key: '_deleteHandle',
    value: function _deleteHandle() {
      this.gl.deleteTransformFeedback(this.handle);
    }
  }]);

  return TranformFeedback;
}(__WEBPACK_IMPORTED_MODULE_1__resource__["a" /* default */]);

// Counts the number of complete "primitives" given a number of vertices and a drawMode


/* unused harmony default export */ var _unused_webpack_default_export = (TranformFeedback);
function getPrimitiveCount(_ref5) {
  var drawMode = _ref5.drawMode,
      vertexCount = _ref5.vertexCount,
      countVertices = _ref5.countVertices;

  switch (drawMode) {
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].POINTS:
      return vertexCount;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES:
      return vertexCount / 2;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_STRIP:
      return vertexCount - 1;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_LOOP:
      return vertexCount;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES:
      return vertexCount / 3;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_STRIP:
      return vertexCount - 2;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_FAN:
      return vertexCount - 2;
    default:
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(false);return 0;
  }
}

// Counts the number of vertices after splitting the vertex stream into separate "primitives"
function getVertexCount(_ref6) {
  var drawMode = _ref6.drawMode,
      vertexCount = _ref6.vertexCount;

  var primitiveCount = getPrimitiveCount({ drawMode: drawMode, vertexCount: vertexCount });
  switch (drawMode) {
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].POINTS:
      return primitiveCount;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES:
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_STRIP:
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_LOOP:
      return vertexCount * 2;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES:
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_STRIP:
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_FAN:
      return vertexCount * 3;
    default:
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(false);return 0;
  }
}

// Counts the number of complete primitives given a number of vertices and a drawMode
function getTransformFeedbackMode(_ref7) {
  var drawMode = _ref7.drawMode;

  switch (drawMode) {
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].POINTS:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].POINTS;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_STRIP:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINE_LOOP:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].LINES;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_STRIP:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES;
    case __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLE_FAN:
      return __WEBPACK_IMPORTED_MODULE_0__gl_constants__["a" /* default */].TRIANGLES;
    default:
      __WEBPACK_IMPORTED_MODULE_3_assert___default()(false);return 0;
  }
}
//# sourceMappingURL=transform-feedback.js.map

/***/ }),
/* 103 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = JSONReadCell;
/* unused harmony export JSONWriteCell */
/* harmony export (immutable) */ __webpack_exports__["b"] = toJSONModel;
/* unused harmony export JSON2OBJ */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__quad_edge_js__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__myriahedral_js__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_js__ = __webpack_require__(20);
// obj.cc - read Wavefront "obj" file format for 3-D models
// This understands only a subset of the file format, namely
//	# comment
//	v <X> <Y> <Z>
//	f <V1> <V2> ... <VN>
//
// Paul Heckbert	10 Feb 1999







// ---------------------------- some data structures used by objReadCell only

class Tface {			// a (temporary) face
  constructor() {
    this.vlist = [];
    this.no = 0;
    this.face = 0;
  }
}

class Tsector {

  constructor(p, f, q) {
    this.p = p; // first ccw vertex
    this.f = f; // intervening face
    this.q = q; // second ccw vertex
  }

};
// in counterclockwise order
// (a linked list of pointers to other vertex)

// (a linked list of pointers to Arcs)
// when done, this (linear) list contains
// the ccw cycle of edges about a vertex

// For example, for vertex v below,
//
//       c------ b------i
//      / \     /      /
//     /   \   /      /
//    /     \ /      /
//   d------ v -----a--h
//    \     / \        |
//     \   /   \       |
//      \ /     \      |
//       e-------f-----g
//
// some valid Arcs are the lists (a,b), (a,b,c), (b,c), (c,d),
// (f,a), (e,f,a,b), etc. because those are the other endpoints of
// edges emanating from v, in counterclockwise (ccw) order.
// An arc always consists of at least two vertices.
// A valid Arclist is any set of disjoint arcs, in arbitrary order.
// When done, the Arclist for this vertex would be a single Arc.
// It would be a cyclic permutation of (a,b,c,d,e,f).
/*
struct Tvert {			// a (temporary) vertex
    int no;			// ??for debugging
    int done;			// is topology fully set & arclist complete?
    Vec3 p;			// position
    Arclist arclist;		// info about the vertices adjacent to this one
    Vertex *vertex;             // final vertex in cell, null if not id. yet
    int instantiated;           // true if identified and instantiated
};
*/

function merge_arc(v, p, q, f) {
  // Merge the arc (p,q) into the list of arcs around vertex v.
  // Cases:
  //  1. ( bef &&  aft) it connects two existing arcs
  //  2. ( bef && !aft) it goes on the end of an existing arc
  //  3. (!bef &&  aft) it goes on the beginning of an existing arc
  //  4. (!bef && !aft) it does not connect with an existing arc
  //List_item<Arc> *a, *aft_item;
  let bef = 0;
  let aft = 0;
  let sector = new Tsector(p, f, q);
  let aft_item;
  v.arclist.forEach(a => {
    // a->obj is an Arc
    const first = a[0];
    const last = a[a.length - 1];
    if (last.q === p) {
      bef = a;
    }
    if (first.p === q) {
      aft = a;
      aft_item = a;
    }
  });
  // now concatenate the three arcs bef, (p,q), and aft
  // where bef and aft might be null
  if (bef) {
    if (aft) { // 1. ( bef &&  aft) it connects two existing arcs
      bef.push(sector); // insert new sector
      if (bef === aft) {
        // done with vertex! connecting these would make arc circular
        v.done = 1;
        return;
      }
      // now we'll merge two arcs in the arclist
      v.arclist.splice(v.arclist.indexOf(aft_item), 1);	// remove following arc
      bef.push.apply(bef, aft);			// and concat it into previous
    } else { // 2. ( bef && !aft) it goes on the end of existing arc
      bef.push(sector);
    }
  } else {
    if (aft) { // 3. (!bef &&  aft) it goes on beg. of existing arc
      aft.unshift(sector);
    } else {		// 4. (!bef && !aft) it doesn't connect w. existing arc
      let arc = [];
      arc.push(sector);
      v.arclist.push(arc);
    }
  }
}

function add_arcs(vlist, f) {
  // vlist is not a circular list, but we need to step through all
  // consecutive triples as if it were circular
  let i = 0;
  let u = vlist[vlist.length -1];
  let v = vlist[i];
  i++;
  let w = vlist[i];

  while (w) {
	  merge_arc(v, w, u, f);
    i++;
    u = v;
    v = w;
    w = vlist[i];
  }

  merge_arc(v, vlist[0], u, f);  // one more that we missed
}

/*
 * identified   <=> Tvert has been associated with a particular Vertex
 * instantiated <=> Tface has been associated with a particular Face AND
 *                  all vertices of the face have been identified
 * instantiated <=> Tvert has been identified AND
 *                  all adjacent Tfaces have been instantiated
 */

/*
 * Return true if a given pair of vertices is connected directly by an edge
 * along a given left face.
 * vertex1, vertex2 -> the vertices to check;
 *                     must be nonnull
 * left             -> the left face to check for;
 *                     must be nonnull
 * <- true if there is an edge from _vertex1_ to _vertex2_ with left face
 *    _left_
 */
function isConnected(vertex1, vertex2, leftFace) {
  // check the orbit of vertex1 for an edge to vertex2
  let ans = 0;
  vertex1.eachEdge(edge => {
    if (edge.Dest() === vertex2 && edge.Left() === leftFace) {
      ans = 1;
    }
  });
  return ans;
}

/*
 * Return the face to the right of a given face around a given vertex.
 * vertex -> the vertex to look for the face around;
 *           must be nonnull
 * left   -> the left face to return the right face of;
 *           must be nonnull
 * <- the face to the right of _left_ around _vertex_;
 *    null if none
 */
function RightFace(vertex, leftFace) {
  // check the left face of each edge in the orbit of the vertex

  let start = vertex.getEdge();
  let scan  = start;

  do {
    if (scan.Left() === leftFace) {
      return scan.Right();
    }

    scan = scan.Onext();
  } while (scan !== start);
}

/*
 * Return true if a given vertex is adjacent to a given face.
 * face   -> the face to look for the vertex in;
 *           must be nonnull
 * vertex -> the vertex to look for;
 *           must be nonnull
 * <- true if _vertex_ is on _face_
 */
function hasVertex(face, vertex) {
  // check the origin vertex of each edge on the face
  let ans = 0;
  face.eachEdge(e => {
    if (e.Org() === vertex) {
      ans = 1;
    }
  });
  return ans;
}

/*
 * Return true if a given face includes all the identified vertices on a given
 * Tvert list.
 * face  -> the face to check;
 *          must be nonnull
 * vlist -> the vertex list to check against;
 *          must be nonnull
 * <- true if _face_ is adjacent to all the vertices on _vlist_
 */
function hasVertices(face, vlist) {
  // check each vertex on the list
  let hasVertexCurr = (Tvert) => (Tvert.vertex == 0 || hasVertex(face, Tvert.vertex));
  return vlist.every(hasVertexCurr);
}

/*
 * Return a face that can be used to instantiate a given Tface.
 * cell -> the cell to get the face from;
 *         must be nonnull
 * f    -> Tface to get the face for;
 *         must be nonnull
 * <- a face that can be used to instantiate _f_;
 *    null if none are available
 */
function getFace(cell, f) {
  // locate all the unused faces in the cell
  let faces = [];
  let count = 0;

  cell.eachFace(face => {
    if (!face.data && hasVertices(face, f.vlist)) {
      faces.push(face);
    }
  });

  if (faces.length) {
    return faces[0];
  }

  return 0;
}

/*
 * Instantiate a given Tface in a given cell by identifying its vertices.
 * cell -> the cell to instantiate the face in;
 *         must be nonnull
 * f    -> the Tface to instantiate;
 *         must be nonnull
 */
function makeFace(cell, f) {
  // get the face to use for the Tface
  let face = getFace(cell, f);

  f.vlist.forEach((vi, i) => {
    let vertex1 = vi.vertex;
    let vertex2;

    if (vertex1) {
      let vj;
      while (true) {
        i++;
        vj = f.vlist[i];
        if (!vj) {
          i = 0;
          vj = f.vlist[i];
        }
        vertex2 = vj.vertex;

        if (vertex2) {
          break;
        }
      }

      if (!isConnected(vertex1, vertex2, face)) {
        if (vertex1 === vertex2) {
          //debugger;
          console.log('make face edge', vertex1.id, vertex2.id);
          //return;
        }
        let temp = cell.makeFaceEdge(face, vertex1, vertex2);
        if (temp) {
          temp.Right();
        } else {
          debugger;
        }
      }
    }
  });

  // find the first identified vertex

  let vi0 = f.vlist[0];
  let i = 0;

  while (vi0.vertex == 0) {
    i++;
    vi0 = f.vlist[i];
  }

  // identify all the following and preceding vertices

  let vi = vi0;
  let vertex = vi0.vertex;

  while (true) {
    i++
    vi = f.vlist[i];

    if (!vi) {
      i = 0;
      vi = f.vlist[0];
    }

    if (vi == vi0) {
      break;
    }

    let v = vi;

    if (!v.vertex) {
      let right = RightFace(vertex, face);

      v.vertex = cell.makeVertexEdge(vertex, face, right).Dest();
      v.vertex.pos = v.p.slice();
      v.vertex.setId(v.no);
    }

    vertex = v.vertex;
  }

  f.face = face;
  face.setId(f.no);
  face.data = f;
}

/*
 * Instantiate a given identified Tvert in a given cell by instantiating its
 * adjacent faces.
 * cell -> the cell to instantiate the Tvert in;
 *         must be nonnull
 * v    -> the Tvert to instantiate;
 *         must be nonnull
 */

function makeVertex(cell, v) {
  // find the first sector with an identified p vertex
  let i = 0;
  let wi0 = v.arclist[0][i];

  while (!wi0.p.vertex && !wi0.q.vertex) {
    i++;
    wi0 = v.arclist[0][i];
  }

  // instantiate all following sectors of the vertex in counterclockwise order
  let wi = wi0;

  do {
    if (wi.p.vertex || wi.q.vertex) {
      let f = wi.f;
      if (f.face == 0) {
        makeFace(cell, f);
      }
    }
    i++;
    wi = v.arclist[0][i];

    if (!wi) {
      i = 0;
      wi = v.arclist[0][i];
    }

  } while (wi !== wi0);

  v.instantiated = 1;
}


function print_quadedge(verts, faces) {
  // print vertices around each face and vertex currently
  console.log('VERTICES OF EACH FACE:');
  faces.forEach(f => {
    console.log('face', f);
    f.vlist.forEach(vi => {
      console.log(vi, vi.no);
    });
  });

  console.log('VERTICES AROUND EACH VERTEX:');
  verts.forEach(v => {
    console.log('vertex', v.no, v.done, v.arclist);
  });
}

function build_quadedge(verts, faces) {
  let cell = __WEBPACK_IMPORTED_MODULE_0__quad_edge_js__["a" /* Cell */].make();
  let vertex1;

  cell.eachVertex(v => {
    vertex1 = v;
  });

  let v = verts[0];
  v.vertex = vertex1;
  v.vertex.pos = v.p.slice();
  v.vertex.setId(v.no);

  makeFace(cell, v.arclist[0][0].f);

  while (true) {
    let instantiated = 1;
    verts.forEach(v => {
      if (v.vertex != 0 && !v.instantiated) {
        makeVertex(cell, v);
      }
      instantiated = v.instantiated && instantiated;
    });
    if (instantiated) {
      break;
    }
  }

  cell.eachFace(f => f.data = 0);

  return cell;
}

function JSONReadCell(json) {
  let verts = json.v.map((v, i) => {
    return {
      p: v,
      no: i,
      done: 0,
      vertex: 0,
      instantiated: 0,
      arclist: []
    };
  });
  let faces = json.f.map((face, i) => {
    let f = new Tface();
    f.face = 0;
    f.no = i;
    face.forEach(index => f.vlist.push(verts[index -1]));
    add_arcs(f.vlist, f);
    return f;
  });

  return build_quadedge(verts, faces);
}

// TODO(nico): build a function that retruns float arrays and normals.
function JSONWriteCell(cell, pos='pos', flatten=false) {
  let ans = { v: [], f: [], n: [] };

  let i = 1;
  cell.eachVertex(v => {
    v.setId(i++);
    if (flatten) {
      ans.v.push.apply(ans.v, v[pos]);
    } else {
      ans.v.push(v.pos);
    }
  });
  cell.eachFace(f => {
    let indices = [];
    f.eachEdge(e => indices.push(e.Org().id + (flatten ? -1 : 0)));
    if (flatten) {
      ans.f.push.apply(ans.f, indices);
    } else {
      ans.f.push(indices);
    }
  });
  return ans;
}

function toJSONModel(cell, pos) {
  let ans = { v: [], n: [], uvs: [] };
  let abs = Math.abs;

  cell.eachFace(f => {
    if (f.edges() > 3) {
      return;
    }
    let n = f.getNormal(pos);
    if (f.data && f.data.clone) {
      n = f.data.ref.getNormal(pos);
    }
    f.eachEdge(e => {
      const vert = e.Org()[pos];
      const vOrg = e.Org().pos;
      const vOrgInSphere = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(vOrg);
      const qPos = e.Dest().pos;
      const qPosInSphere = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(qPos);
      const rPos = e.Lnext().Dest().pos;
      const rPosInSphere = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__math_js__["f" /* normalize */])(rPos);
      ans.v.push.apply(ans.v, vert);
      ans.n.push.apply(ans.n, n);
      const [r, theta, phi] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["a" /* toSpherical */])([vOrgInSphere[0], vOrgInSphere[1], vOrgInSphere[2]]);
      const [rQ, thetaQ, phiQ] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["a" /* toSpherical */])([qPosInSphere[0], qPosInSphere[1], qPosInSphere[2]]);
      const [rR, thetaR, phiR] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["a" /* toSpherical */])([rPosInSphere[0], rPosInSphere[1], rPosInSphere[2]]);
      let u = (theta + Math.PI) / (Math.PI * 2);
      let v = 1 - phi / Math.PI;
      let uQ = (thetaQ + Math.PI) / (Math.PI * 2);
      let uR = (thetaR + Math.PI) / (Math.PI * 2);
      if (abs(u - uQ) > 0.5) {
        if (u < uQ) {
          u += 1;
        }
      } else if (abs(u - uR) > 0.5) {
        if (u < uR) {
          u +=1;
        }
      }
      ans.uvs.push.apply(ans.uvs, [u, v]);
    });
  });
  return ans;
}

function precisionRound(number, precision) {
  var factor = Math.pow(10, precision);
  return Math.round(number * factor) / factor;
}

function JSON2OBJ(json) {
  const vertArray = json.v.map(v => v.join(' '));
  const faceArray = json.f.map(f => f.join(' '));

  const verts = 'v ' + vertArray.join(' 200 0 0\nv ') + '\n';
  const faces = 'f ' + faceArray.join('\nf ');

  return verts + faces;
}


/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_js__ = __webpack_require__(20);


class QuadEdge {
  constructor() {
    const edges = [new Edge(),
                   new Edge(),
                   new Edge(),
                   new Edge()];

    // assign the quadedge parent since we cannot use memory addresses
    // to point to next edges (which is also pretty hacky TBH)
    edges.forEach((e) => e.quadEdge = this);

    edges[0].index = 0;
    edges[1].index = 1;
    edges[2].index = 2;
    edges[3].index = 3;

    edges[0].next = edges[0];
    edges[1].next = edges[3];
    edges[2].next = edges[2];
    edges[3].next = edges[1];

    const id = Edge.nextId;

    edges[0].id = id+0;
    edges[1].id = id+1;
    edges[2].id = id+2;
    edges[3].id = id+3;

    Edge.nextId = id+4;

    this.edges = edges;
  }

}
/* unused harmony export QuadEdge */


class Edge {
  constructor() {
    this.data = 0;
    this.vertex = 0;
    this.face = 0;
    this.index = 0;
    this.id = 0;
    this.quadEdge = 0;
  }

  static make() {
    return new QuadEdge().edges[0];
  }

  static kill(edge) {
    Edge.splice(edge, edge.Oprev());
    Edge.splice(edge.Sym(), edge.Sym().Oprev());

    // free the quad edge that the edge belongs to
    //delete (QuadEdge*)(edge-edge->index);
  }

  static splice(a, b) {
    const alpha = a.Onext().Rot();
    const beta  = b.Onext().Rot();

    const t1 = b.Onext();
    const t2 = a.Onext();
    const t3 = beta.Onext();
    const t4 = alpha.Onext();

    a.next     = t1;
    b.next     = t2;
    alpha.next = t3;
    beta.next  = t4;
  }

  getId() {
    return id;
  }

  Rot() {
    return this.index<3 ?
      this.quadEdge.edges[this.index+1]
      : this.quadEdge.edges[this.index-3];
  }

  InvRot() {
    return this.index>0 ?
      this.quadEdge.edges[this.index-1]
      : this.quadEdge.edges[this.index+3];
  }

  Sym() {
    return this.index<2 ?
      this.quadEdge.edges[this.index+2]
      : this.quadEdge.edges[this.index-2];
  }

  Onext() {
    return this.next;
  }

  Oprev() {
    return this.Rot().Onext().Rot();
  }

  Dnext() {
    return this.Sym().Onext().Sym();
  }

  Dprev() {
    return this.InvRot().Onext().InvRot();
  }

  Lnext() {
    return this.InvRot().Onext().Rot();
  }

  Lprev() {
    return this.Onext().Sym();
  }

  Rnext() {
    return this.Rot().Onext().InvRot();
  }

  Rprev() {
    return this.Sym().Onext();
  }

  Org() {
    return this.vertex;
  }

  Dest() {
  return this.Sym().vertex;
  }

  Left() {
    return this.Rot().face;
  }

  Right() {
    return this.InvRot().face;
  }

  setId(id) {
    this.id = id;
  }

  setOrg(org) {
    this.vertex = org;
    org.addEdge(this);
  }

  setDest(dest) {
    this.Sym().vertex = dest;
    dest.addEdge(this.Sym());
  }

  setLeft(left) {
    this.Rot().face = left;
    left.addEdge(this);
  }

  setRight(right) {
    this.InvRot().face = right;
    right.addEdge(this.Sym());
  }
}
/* unused harmony export Edge */


Edge.nextId = 0;

class Vertex {

  static make(cell) {
    return new Vertex(cell);
  }

  static kill() {
    this.cell.removeVertex(this);
  }

  constructor(cell) {
    this.pos = [0, 0, 0];
    this.cell = cell;
    this.id = cell.makeVertexId();
    this.data = 0;
    this.edge = 0;

    cell.addVertex(this);
  }

  setId(id) {
    this.id = id;
  }

  addEdge(edge) {
    this.edge = edge;
  }

  removeEdge(edge) {
    const next = edge.Onext();
    this.edge = next != edge ? next : 0;
  }

  getCell() {
    return this.cell;
  }

  getId() {
    return this.id;
  }

  getEdge() {
    return this.edge;
  }

  eachEdge(f) {
    let start = this.edge;
    let current = start;
    do {
      f(current);
      current = current.Onext();
    } while(current && current !== start);
  }
}
/* unused harmony export Vertex */


class Face {

  static make(cell) {
    return new Face(cell);
  }

  constructor(cell) {
    this.cell = cell;
    this.id = cell.makeFaceId();
    this.data = 0;
    this.edge = 0;

    cell.addFace(this);
  }

  getCell() {
    return this.cell;
  }

  getID() {
    return this.id;
  }

  getEdge() {
    return this.edge;
  }

  setId(id) {
    this.id = id;
  }

  addEdge(edge) {
    this.edge = edge;
  }

  removeEdge(edge) {
    const next = edge.Onext();
    this.edge = next != edge ? next : 0;
  }

  eachEdge(f) {
    let start = this.getEdge();
    let edge = start;
    let current = edge;

    do {
      f(current);
      current = current.Lnext();
    } while (current && current !== start);
  }

  edges() {
    let acum = 0;
    this.eachEdge(e => acum++);
    return acum;
  }

  getNormal(pos='pos') {
    const centroid = this.getCentroid(pos);
    const edge = this.getEdge();
    const org = edge.Org()[pos];
    const dest = edge.Dest()[pos];
    const u1 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["f" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["c" /* sub */])(org, centroid));
    const u2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["f" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["c" /* sub */])(dest, centroid));
    const ans = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["g" /* cross */])(u1, u2);
    return ans;
  }

  getCentroid(pos='pos') {
    let count = 0;
    const centroid = [0, 0, 0];
    this.eachEdge(e => {
      const ePos = e.Org()[pos];
      centroid[0] += ePos[0];
      centroid[1] += ePos[1];
      centroid[2] += ePos[2];
      count++;
    });
    centroid.forEach((p, i) => {
      centroid[i] = p / count;
    });
    return centroid;
  }
}
/* unused harmony export Face */


class Cell {
  static make() {
    // create a looping edge that connects to itself at a single vertex
    // the edge delimits two faces
    // this is the smallest cell that is consistent with our invariants
    const cell = new Cell();
    const vertex = Vertex.make(cell);
    const leftFace = Face.make(cell);
    const rightFace = Face.make(cell);
    //TODO(nico): assuming the first edge is taken
    const edge = Edge.make().InvRot();

    edge.setOrg(vertex);
    edge.setDest(vertex);
    edge.setLeft(leftFace);
    edge.setRight(rightFace);

    return cell;
  }

  static makeTetrahedron() {
    // use the Euler operators to construct a tetrahedron
    const cell = Cell.make();

    // grab the initial vertex

    let vertex1;

    cell.eachVertex((v) => vertex1 = v);

    // grab the initial edge and the initial faces

    const edge1 = vertex1.getEdge();
    const leftFace  = edge1.Left();
    const rightFace = edge1.Right();

    // drop in four vertices along the initial edge

    const vertex2 = cell.makeVertexEdge(vertex1, leftFace, rightFace).Dest();
    const vertex3 = cell.makeVertexEdge(vertex2, leftFace, rightFace).Dest();
    const vertex4 = cell.makeVertexEdge(vertex3, leftFace, rightFace).Dest();

    // cut each of the faces in half from complementary vertices

    cell.makeFaceEdge(leftFace, vertex2, vertex4).Right();
    cell.makeFaceEdge(rightFace, vertex1, vertex3).Right();

    return cell;
  }

  constructor() {
    this.vertices = [];
    this.vertexId = 1;
    this.faces    = [];
    this.faceId   = 1;
  }

  eachVertex(f) {
    this.vertices.forEach(f);
  }

  getFace() {
    return this.faces[0];
  }

  eachFace(f) {
    this.faces.forEach(f);
  }

  /* -- (Euler operators) ---------------------------- */

  makeVertexEdge(vertex, leftFace, rightFace) {

    // locate the edges to the right of each of the faces in the orbit of the
    // vertex

    const edge  = vertex.getEdge();
    const edge1 = this.getOrbitLeft(edge, rightFace);
    const edge2 = this.getOrbitLeft(edge, leftFace);

    if (edge1==0) {
      console.error(edge1);
      return;
    }

    if (edge2==0) {
      console.error(edge2);
      return;
    }

    // create a new vertex and copy the position of the vertex of origin

    const vertexNew = Vertex.make(this);

    vertexNew.pos = vertex.pos.slice();

    // create a new edge and rotate it to make a clockwise loop

    const edgeNew = Edge.make().Rot();

    // connect the origin (and destination) of the new edge to _vertex_ so that
    // the left face of the edge is _left_
    // this makes a loop on the inside of _left_

    Edge.splice(edge2, edgeNew);

    // split the origin and destination of the loop so that the right face of the
    // edge is now _right_
    // this results in a non-loop edge dividing _left_ from _right_

    Edge.splice(edge1, edgeNew.Sym());

    // initialize the secondary attributes of the new edge

    edgeNew.setOrg(edge1.Org());
    edgeNew.setLeft(edge2.Left());
    edgeNew.setRight(edge1.Left());

    // all edges leaving the destination orbit of the new edge now have the new
    // vertex as their vertex of origin

    this.setOrbitOrg(edgeNew.Sym(), vertexNew);

    return edgeNew;
  }

  killVertexEdge(edge) {
    // locate _edge1_ and _edge2_ as in _makeVertexEdge_

    let edge1 = edge.Oprev();
    let edge2 = edge.Lnext();

    // use _edge1_ for _edge2_ if the destination vertex is isolated

    if (edge2 === edge.Sym())
      edge2 = edge1;

    // inverse of _makeVertexEdge_

    Edge.splice(edge1, edge.Sym());
    Edge.splice(edge2, edge);

    // all edges leaving the destination orbit of the deleted edge now have its
    // origin vertex as their vertex of origin

    this.setOrbitOrg(edge2, edge1.Org());

    // don't use the deleted edge as a reference edge any more

    edge1.Org().addEdge(edge1);
    edge1.Left().addEdge(edge1);
    edge2.Left().addEdge(edge2);

    // reclaim the vertex and the edge

    Vertex.kill(edge.Dest());
    Edge.kill(edge);
  }

  makeFaceEdge(face, org, dest) {
    // locate the edges leaving each of the vertices in the orbit of the face

    let edge  = face.getEdge();
    let edge1 = this.getOrbitOrg(edge, org);
    let edge2 = this.getOrbitOrg(edge, dest);

    if (edge1==0) {
      console.error(edge1);
      return;
    }

    if (edge2==0) {
      console.error(edge2);
      return;
    }

    // create a new face

    let faceNew = Face.make(this);

    // create a new (non-loop) edge

    let edgeNew = Edge.make();

    // connect the destination of the new edge to the origin of _edge2_
    // both faces of the edge are now _face_

    Edge.splice(edge2, edgeNew.Sym());

    // connect the origin of the new edge to _edge1_
    // _face_ is split in half along the new edge, with the new face introduced
    // on the right

    Edge.splice(edge1, edgeNew);

    // initialize the secondary attributes of the new edge

    edgeNew.setOrg(edge1.Org());
    edgeNew.setDest(edge2.Org());
    edgeNew.setLeft(edge2.Left());

    // all edges in the right orbit of the new edge (i.e. the left orbit of its
    // Sym) now have the new face as their left face

    this.setOrbitLeft(edgeNew.Sym(), faceNew);

    return edgeNew;
  }

  killFaceEdge(edge) {

    // locate _edge1_ and _edge2_ as in _makeFaceEdge_

    let edge1 = edge.Oprev();
    let edge2 = edge.Lnext();

    // use _edge2_ for _edge1_ if the right face is inside a loop

    if (edge1 === edge.Sym())
      edge1 = edge2;

    // inverse of _makeFaceEdge_

    Edge.splice(edge2, edge.Sym());
    Edge.splice(edge1, edge);

    // all edges in the right orbit of the deleted edge now have its left face
    // as their left face

    this.setOrbitLeft(edge1, edge2.Left());

    // don't use the deleted edge as a reference edge any more

    edge1.Org().addEdge(edge1);
    edge2.Org().addEdge(edge2);
    edge2.Left().addEdge(edge2);

    // reclaim the face and the edge

    Face.kill(edge.Right());
    Edge.kill(edge);
  }

  addVertex(vertex) {
    // add the vertex to the end of the array
    this.vertices.push(vertex);
  }

  removeVertex(vertex) {
    this.vertices = this.vertices.splice(this.vertices.indexOf(vertex), 1);
  }

  addFace(face) {
    this.faces.push(face);
  }

  removeFace(face) {
     this.faces = this.vertices.splice(this.vertices.indexOf(face), 1);
  }

  getOrbitOrg(edge, org) {
    // traverse the Lnext orbit of _edge_ looking for an edge whose origin is
    // _org_

    let scan = edge;

    do {
      if (scan.Org() === org) {
        return scan;
      }

      scan = scan.Lnext();
    } while (scan !== edge);

    return 0;
  }

  setOrbitOrg(edge, org) {
    // traverse the Onext orbit of _edge_, setting the origin of each edge to
    // _org_

    let scan = edge;

    do {
      scan.setOrg(org);

      scan = scan.Onext();
    } while (scan !== edge);
  }

  getOrbitLeft(edge, left) {
    // traverse the Onext orbit of _edge_ looking for an edge whose left face is
    // _left

    let scan = edge;

    do {
      if (scan.Left() === left)
        return scan;

      scan = scan.Onext();
    } while (scan !== edge);

    return 0;
  }

  setOrbitLeft(edge, left) {
    // traverse the Lnext orbit of _edge_, setting the left face of each edge to
    // _left_

    let scan = edge;

    do {
      scan.setLeft(left);

      scan = scan.Lnext();
    } while (scan !== edge);
  }

  makeVertexId() {
    return this.vertexId++;
  }

  makeFaceId() {
    return this.faceId++;
  }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Cell;



/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_global_window__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_global_window___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_global_window__);
//Timer based animation


const Fx = function(options) {
    this.opt = Object.assign({
      delay: 0,
      duration: 1000,
      transition: function(x) { return x; },
      onCompute: function(){},
      onComplete: function(){}
    }, options || {});
};
/* harmony export (immutable) */ __webpack_exports__["a"] = Fx;


let Queue = Fx.Queue = [];

Fx.prototype = {
  time:null,

  start: function(options) {
    this.opt = Object.assign(this.opt, options || {});
    this.time = Date.now();
    this.animating = true;
    Queue.push(this);
  },

  //perform a step in the animation
  step: function() {
    //if not animating, then return
    if (!this.animating) return;
    let currentTime = Date.now(),
        time = this.time,
        opt = this.opt,
        delay = opt.delay,
        duration = opt.duration,
        delta = 0;
    //hold animation for the delay
    if (currentTime < time + delay) {
      opt.onCompute.call(this, delta);
      return;
    }
    //if in our time window, then execute animation
    if (currentTime < time + delay + duration) {
      delta = opt.transition((currentTime - time - delay) / duration);
      opt.onCompute.call(this, delta);
    } else {
      this.animating = false;
      opt.onCompute.call(this, 1);
      opt.onComplete.call(this);
    }
  }
};

Fx.compute = function(from, to, delta) {
  return from + (to - from) * delta;
};

//Easing equations
Fx.Transition = {
  linear: function(p){
    return p;
  }
};

let Trans = Fx.Transition;

(function(){

  let makeTrans = function(transition, params){
    params = (params && params.length) ? params : [params];
    return Object.assign(transition, {
      easeIn: function(pos){
        return transition(pos, params);
      },
      easeOut: function(pos){
        return 1 - transition(1 - pos, params);
      },
      easeInOut: function(pos){
        return (pos <= 0.5)? transition(2 * pos, params) / 2 : (2 - transition(
            2 * (1 - pos), params)) / 2;
      }
    });
  };

  let transitions = {

    Pow: function(p, x){
      return Math.pow(p, x[0] || 6);
    },

    Expo: function(p){
      return Math.pow(2, 8 * (p - 1));
    },

    Circ: function(p){
      return 1 - Math.sin(Math.acos(p));
    },

    Sine: function(p){
      return 1 - Math.sin((1 - p) * Math.PI / 2);
    },

    Back: function(p, x){
      x = x[0] || 1.618;
      return Math.pow(p, 2) * ((x + 1) * p - x);
    },

    Bounce: function(p){
      let value;
      for ( let a = 0, b = 1; 1; a += b, b /= 2) {
        if (p >= (7 - 4 * a) / 11) {
          value = b * b - Math.pow((11 - 6 * a - 11 * p) / 4, 2);
          break;
        }
      }
      return value;
    },

    Elastic: function(p, x){
      return Math.pow(2, 10 * --p) * Math.cos(20 * p * Math.PI * (x[0] || 1) / 3);
    }

  };

  for (let t in transitions) {
    Trans[t] = makeTrans(transitions[t]);
  }

  ['Quad', 'Cubic', 'Quart', 'Quint'].forEach(function(elem, i){
    Trans[elem] = makeTrans(function(p){
      return Math.pow(p, [
        i + 2
      ]);
    });
  });

})();

//animationTime - function branching
let global = __WEBPACK_IMPORTED_MODULE_0_global_window___default.a,
    checkFxQueue = function() {
      let oldQueue = Queue;
      Queue = [];
      if (oldQueue.length) {
        for (let i = 0, l = oldQueue.length, fx; i < l; i++) {
          fx = oldQueue[i];
          fx.step();
          if (fx.animating) {
            Queue.push(fx);
          }
        }
        Fx.Queue = Queue;
      }
    };

if (global) {
  let found = false;
  ['webkitAnimationTime', 'mozAnimationTime', 'animationTime',
   'webkitAnimationStartTime', 'mozAnimationStartTime', 'animationStartTime'].forEach(function(impl) {
    if (impl in global) {
      Fx.animationTime = function() {
        return global[impl];
      };
      found = true;
    }
  });
  if (!found) {
    Fx.animationTime = Date.now;
  }
}

Fx.update = checkFxQueue;


/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createModel;
/* unused harmony export createCuts */
/* unused harmony export createFolds */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__myriahedral_js__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_luma_gl__ = __webpack_require__(30);





function createModel(gl, textures, state) {
  const {vs, fs} = {
    vs: `\

vec3 slerp(vec3 p0, vec3 p1, float t) {
  return mix(p0, p1, t);
  //if (distance(p0, p1) < 0.1) {
    //return mix(p0, p1, t);
  //}
  //float omega = acos(dot(p0, p1) / length(p0) / length(p1));
  //float sinOmega = sin(omega);
  //float sintOmega = sin(t * omega);
  //float sin1tOmega = sin((1. - t) * omega);
  //return (sin1tOmega * p0 + sintOmega * p1) / sinOmega;
}

attribute vec3 positions;
attribute vec3 positionsTo;
attribute vec3 normals;
attribute vec3 normalsTo;
attribute vec2 uvs;

uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;
uniform float delta;

uniform vec3 uPointLightingLocation;
uniform vec3 uPointLightingColor;


varying vec3 color;
varying vec2 vUvs;
varying vec3 vNormal;
varying vec3 vPosition;

void main(void) {
  vec3 position = slerp(positions, positionsTo, delta);
  vec3 normal = slerp(normals, normalsTo, delta);

  vPosition = position;
  vNormal = normal;
  vUvs = uvs;
  color = vec3(0.99);
  gl_Position = uProjection * uView * (uModel * vec4(position, 1.0));
}
`,
    fs: `\
#ifdef GL_ES
precision highp float;
#endif

#define EPSI_LON 0.001
#define EPSI_LAT EPSI_LON/2.
#define LON (1./360.)
#define LAT (1./180.)
#define MULT 5.

uniform sampler2D uSampler;
uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;

uniform vec3 uPointLightingLocation;
uniform vec3 uPointLightingColor;

varying vec3 color;
varying vec2 vUvs;
varying vec3 vNormal;
varying vec3 vPosition;

void main(void) {
  vec3 land = vec3(235, 209, 130) / 255.;
  vec3 water = vec3(146, 180, 213) / 255.;
  vec4 img = texture2D(uSampler, vUvs);
  float factor = 1.;
  if (mod(vUvs.x, LON * MULT) < EPSI_LON || mod(vUvs.y, LAT * MULT) < EPSI_LON) {
    factor = 0.8;
  }

  vec4 mPosition = uModel * vec4(vPosition, 1.0);
  vec3 lightDirection = normalize(uPointLightingLocation - mPosition.xyz);
  vec4 transformedNormal = uModel * vec4(normalize(vNormal), 0.0);
  float pointLightWeighting = max(dot(transformedNormal.xyz, lightDirection), 0.0);
  vec3 vLightWeighting = uAmbientColor + uPointLightingColor * pointLightWeighting;

  vec3 map = mix(land, water, 1. - (img.r + img.g + img.b) / 3.) * factor;
  gl_FragColor = vec4(map * vLightWeighting, 1.);
  //gl_FragColor = vec4(map, 1.);
}
`
  };

  return new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["h" /* Model */](gl, {
    vs,
    fs,
    uniforms: {uSampler: textures[0]},
    geometry: new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["g" /* Geometry */]({
      attributes: {
        positions: {
          value: state.json.from.v
        },
        normals: {
          value: state.json.from.n
        },
        positionsTo: {
          value: state.json.to.v,
          size: 3
        },
        normalsTo: {
          value: state.json.to.n,
          size: 3
        },
        uvs: {
          value: state.json.from.uvs,
          size: 2
        }
      }
    })
  });
}

function createCuts(gl, state) {
  const {vs, fs} = {
    vs: `\
attribute vec3 positions;
attribute vec3 normals;

attribute vec3 instancedFrom;
attribute vec3 instancedTo;

uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;

uniform vec3 uPointLightingLocation;
uniform vec3 uPointLightingColor;

varying vec3 vLightWeighting;
varying vec3 color;

vec3 rotate(vec4 vectorAngle, vec3 vector) {
  float theta = vectorAngle.a;
  vec3 u = vectorAngle.xyz;
  mat3 rot = mat3(
    vec3( cos(theta) + u.x * u.x * (1. - cos(theta)), u.x * u.y * (1. - cos(theta)) - u.z * sin(theta), u.x * u.z * (1. - cos(theta)) + u.y * sin(theta)),
    vec3( u.y * u.x * (1. - cos(theta)) + u.z * sin(theta), cos(theta) + u.y * u.y * (1. - cos(theta)), u.y * u.z * (1. - cos(theta)) - u.x * sin(theta)),
    vec3( u.z * u.x * (1. - cos(theta)) - u.y * sin(theta), u.z * u.y * (1. - cos(theta)) + u.x * sin(theta), cos(theta) + u.z * u.z * (1. - cos(theta)))
  );
  return rot * vector;
}

void main(void) {
  vec3 translatedPosition = positions + vec3(0, 0.5, 0);
  vec3 orgNormal = vec3(0, 1, 0);
  vec3 destNormal = instancedTo - instancedFrom;
  float destNormalLen = length(destNormal);
  destNormal = normalize(destNormal);
  vec3 rotationAxis = cross(orgNormal, destNormal);
  float theta = -atan(1., dot(orgNormal, destNormal));

  vec3 scaledPosition = translatedPosition * vec3(1, destNormalLen, 1);
  vec3 rotatedPosition = rotate(vec4(rotationAxis, theta), scaledPosition);
  vec3 rotatedNormal = rotate(vec4(rotationAxis, theta), normalize(normals));

  // lighting stuff
  vec4 mPosition = uModel * vec4(rotatedPosition, 1.0);
  vec3 lightDirection = normalize(uPointLightingLocation - mPosition.xyz);
  vec4 transformedNormal = uModel * vec4(rotatedNormal, 0.0);
  float pointLightWeighting = max(dot(transformedNormal.xyz, lightDirection), 0.0);
  vLightWeighting = uAmbientColor + uPointLightingColor * pointLightWeighting;

  color = vec3(1, 0, 0);
  gl_Position = uProjection * uView * (uModel * vec4(rotatedPosition + instancedFrom, 1.0));
}
`,
    fs: `\
#ifdef GL_ES
precision highp float;
#endif

varying vec3 color;
varying vec3 vLightWeighting;

void main(void) {
  //gl_FragColor = vec4(color * vLightWeighting * 2., 1.);
 gl_FragColor = vec4(color, 1.);
}
`
  };
  return new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["i" /* Cylinder */](gl, {
    vs,
    fs,
    radius: 0.002,
    nradial: 5,
    nvertical: 3,
    isInstanced: 1,
    instanceCount: state.minTree[0].length / 3,
    attributes: {
      instancedFrom: {
        value: new Float32Array(state.minTree[0]),
        size: 3,
        instanced: 1
      },
      instancedTo: {
        value: new Float32Array(state.minTree[1]),
        size: 3,
        instanced: 1

      }
    }
  });
}

function createFolds(gl, state) {
  const {vs, fs} = {
    vs: `\
attribute vec3 positions;
attribute vec3 normals;

attribute vec3 instancedFrom;
attribute vec3 instancedTo;

uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;

uniform vec3 uPointLightingLocation;
uniform vec3 uPointLightingColor;

varying vec3 vLightWeighting;
varying vec3 color;

vec3 rotate(vec4 vectorAngle, vec3 vector) {
  float theta = vectorAngle.a;
  vec3 u = vectorAngle.xyz;
  mat3 rot = mat3(
    vec3( cos(theta) + u.x * u.x * (1. - cos(theta)), u.x * u.y * (1. - cos(theta)) - u.z * sin(theta), u.x * u.z * (1. - cos(theta)) + u.y * sin(theta)),
    vec3( u.y * u.x * (1. - cos(theta)) + u.z * sin(theta), cos(theta) + u.y * u.y * (1. - cos(theta)), u.y * u.z * (1. - cos(theta)) - u.x * sin(theta)),
    vec3( u.z * u.x * (1. - cos(theta)) - u.y * sin(theta), u.z * u.y * (1. - cos(theta)) + u.x * sin(theta), cos(theta) + u.z * u.z * (1. - cos(theta)))
  );
  return rot * vector;
}

void main(void) {
  vec3 translatedPosition = positions + vec3(0, 0.5, 0);
  vec3 orgNormal = vec3(0, 1, 0);
  vec3 destNormal = instancedTo - instancedFrom;
  float destNormalLen = length(destNormal);
  destNormal = normalize(destNormal);
  vec3 rotationAxis = cross(orgNormal, destNormal);
  float theta = -atan(1., dot(orgNormal, destNormal));

  vec3 scaledPosition = translatedPosition * vec3(1, destNormalLen, 1);
  vec3 rotatedPosition = rotate(vec4(rotationAxis, theta), scaledPosition);
  vec3 rotatedNormal = rotate(vec4(rotationAxis, theta), normalize(normals));

  // lighting stuff
  vec4 mPosition = uModel * vec4(rotatedPosition, 1.0);
  vec3 lightDirection = normalize(uPointLightingLocation - mPosition.xyz);
  vec4 transformedNormal = uModel * vec4(rotatedNormal, 0.0);
  float pointLightWeighting = max(dot(transformedNormal.xyz, lightDirection), 0.0);
  vLightWeighting = uAmbientColor + uPointLightingColor * pointLightWeighting;

  color = vec3(0, 0, 1);
  gl_Position = uProjection * uView * (uModel * vec4(rotatedPosition + instancedFrom, 1.0));
}
`,
    fs: `\
#ifdef GL_ES
precision highp float;
#endif

varying vec3 color;
varying vec3 vLightWeighting;

void main(void) {
  //gl_FragColor = vec4(color * vLightWeighting * 2., 1.);
 gl_FragColor = vec4(color, 1.);
}
`
  };
  return new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["i" /* Cylinder */](gl, {
    vs,
    fs,
    radius: 0.002,
    nradial: 5,
    nvertical: 3,
    isInstanced: 1,
    instanceCount: state.maxTree[0].length / 3,
    attributes: {
      instancedFrom: {
        value: new Float32Array(state.maxTree[0]),
        size: 3,
        instanced: 1
      },
      instancedTo: {
        value: new Float32Array(state.maxTree[1]),
        size: 3,
        instanced: 1

      }
    }
  });
}



/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  create: __webpack_require__(116)
  , clone: __webpack_require__(114)
  , copy: __webpack_require__(115)
  , identity: __webpack_require__(51)
  , transpose: __webpack_require__(61)
  , invert: __webpack_require__(52)
  , adjoint: __webpack_require__(113)
  , determinant: __webpack_require__(48)
  , multiply: __webpack_require__(54)
  , translate: __webpack_require__(60)
  , scale: __webpack_require__(59)
  , rotate: __webpack_require__(119)
  , rotateX: __webpack_require__(57)
  , rotateY: __webpack_require__(58)
  , rotateZ: __webpack_require__(31)
  , fromRotationTranslation: __webpack_require__(117)
  , fromQuat: __webpack_require__(49)
  , frustum: __webpack_require__(50)
  , perspective: __webpack_require__(56)
  , perspectiveFromFieldOfView: __webpack_require__(118)
  , ortho: __webpack_require__(55)
  , lookAt: __webpack_require__(53)
  , str: __webpack_require__(120)
}

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return new Worker(__webpack_require__.p + "b63e0eac753d99dc589e.worker.js");
};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return new Worker(__webpack_require__.p + "4c502ecb4a52dd3f6f0f.worker.js");
};

/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getGraticule */
/* unused harmony export getPolyhedra */
/* unused harmony export getDistanceField */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__polyhedra_js__ = __webpack_require__(232);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__myriahedral_js__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__obj_js__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_js__ = __webpack_require__(20);








const timed = false;
const IMG_WIDTH = 4096;
const IMG_HEIGHT = IMG_WIDTH / 2;
const IMG_WIDTH_LANDMASK_OUT = 256 * 4;
const IMG_HEIGHT_LANDMASK_OUT = IMG_WIDTH_LANDMASK_OUT / 2;

function getClosestFaceToCamera(cell, faceDegree=3) {
  const cameraVector = [0, 1, 0];
  let minAngle = Infinity;
  let face = null;
  cell.eachFace(f => {
    if (f.edges() !== faceDegree) {
      return;
    }
    const normal = f.getNormal();
    const angle = Math.abs(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__math_js__["d" /* angleBetweenVectors */])(cameraVector, normal));
    if (angle < minAngle) {
      minAngle = angle;
      face = f;
    }
  });
  return face;
}

function getClosestFaceToPoint(cell, point, faceDegree=3) {
  let minDist = Infinity;
  let face = null;
  cell.eachFace(f => {
    if (f.edges() !== faceDegree) {
      return;
    }
    const centroid = f.getCentroid();
    const dist = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__math_js__["i" /* distance */])(point, centroid);
    if (dist < minDist) {
      minDist = dist;
      face = f;
    }
  });
  return face;
}

class Unfoldable {
  constructor(initialFace, unfoldable, descriptor) {
    this.initialFace = initialFace;
    this.unfoldable = unfoldable;
    this.descriptor = descriptor;
    this.pos = 'pos';
    this.steps = [];

    if ('steps' in this.descriptor) {
      this.calculateSteps();
    }
  }
  unfold(value) {
    if (value === 0) {
      this.pos = 'pos';
      return;
    }
    timed && console.time('unfold');
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["b" /* unfold */])(this.initialFace, 1 - value);
    timed && console.timeEnd('unfold');
    this.pos = 'npos';
  }
  calculateSteps() {
    const steps = this.descriptor.steps;
    const delta = 1 / (steps + 1);
    for (let i = 0; i <= 1; i += delta) {
      this.unfold(i);
      this.steps.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__obj_js__["b" /* toJSONModel */])(this.unfoldable, this.pos));
    }
  }
  getSteps() {
    return this.steps;
  }
}
// factories
const faceDegreeOpt = {
  'GRATICULE': 4,
  'TETRAHEDRON': 3,
  'CUBE': 4,
  'OCTAHEDRON': 3,
  'DODECAHEDRON': 5,
  'ICOSAHEDRON': 3,

  'ROT_TETRAHEDRON': 3,
  'ROT_CUBE': 4,
  'ROT_OCTAHEDRON': 3,
  'ROT_DODECAHEDRON': 5,
  'ROT_ICOSAHEDRON': 3
};
const subdivideFunc = (name, opt) => {
  const cell = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__obj_js__["a" /* JSONReadCell */])(__WEBPACK_IMPORTED_MODULE_0__polyhedra_js__[name]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["c" /* clean */])(cell);
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["d" /* subdivide */])(cell, opt);
};
const factories = {
  'GRATICULE': (opt) => {
    const cell = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__obj_js__["a" /* JSONReadCell */])(__WEBPACK_IMPORTED_MODULE_0__polyhedra_js__["GRATICULE"](opt));
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["c" /* clean */])(cell);
    return cell;
  },
  'TETRAHEDRON': subdivideFunc.bind(null, 'TETRAHEDRON'),
  'CUBE': subdivideFunc.bind(null, 'CUBE'),
  'OCTAHEDRON': subdivideFunc.bind(null, 'OCTAHEDRON'),
  'DODECAHEDRON': subdivideFunc.bind(null, 'DODECAHEDRON'),
  'ICOSAHEDRON': subdivideFunc.bind(null, 'ICOSAHEDRON'),

  'ROT_TETRAHEDRON': subdivideFunc.bind(null, 'ROT_TETRAHEDRON'),
  'ROT_CUBE': subdivideFunc.bind(null, 'ROT_CUBE'),
  'ROT_OCTAHEDRON': subdivideFunc.bind(null, 'ROT_OCTAHEDRON'),
  'ROT_DODECAHEDRON': subdivideFunc.bind(null, 'ROT_DODECAHEDRON'),
  'ROT_ICOSAHEDRON': subdivideFunc.bind(null, 'ROT_ICOSAHEDRON')
};

const cellCache = {};
function getOrCreateCell(name, opt, vertexOnSphere) {
  const index = `${name} ${opt} ${vertexOnSphere}`;
  if (cellCache[index]) {
    return cellCache[index];
  }
  return cellCache[index] = factories[name](opt);
}

function getGraticule(descriptor) {
  const faceDegree = faceDegreeOpt[descriptor.name];
  const cell = getOrCreateCell(descriptor.name, descriptor.detail, descriptor.vertexOnSphere || false);
  const currentDescriptor = descriptor;
  if (descriptor.vertexOnSphere) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["e" /* vertexOnSphere */])(cell);
  }

  let theta0 = descriptor.theta0;
  let phi0 = descriptor.phi0;
  theta0 += Math.PI;
  phi0 += currentDescriptor.phi0Correct;
  let cart = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["f" /* toCartesian */])(1, theta0, phi0);

  let initialFace = getClosestFaceToPoint(cell, cart, faceDegree);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["g" /* setWeights */])(cell, e => {
    const vOrg = e.Org();
    const vDest = e.Dest();
    const org = vOrg.pos;
    const dest= vDest.pos;
    let iterWeight = 0;
    if (e.data && e.data.wi) {
      iterWeight = e.data.wi[2] * 1000;
    }
    const mid = [
      (org[0] + dest[0]) / 2,
      (org[1] + dest[1]) / 2,
      (org[2] + dest[2]) / 2
    ];
    let [r, theta, phi] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["a" /* toSpherical */])(mid);
    theta += Math.PI;
    phi += currentDescriptor.phiCorrect;

    if (!e.data) {
      e.data = e.Sym().data = {};
    }
    e.data.w = iterWeight;
    e.data.w += __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["h" /* graticule */])(theta, phi, descriptor.Wtheta, descriptor.Wphi, theta0, phi0);
    if (!e.Sym().data) {
      e.Sym().data = {};
    }
    e.Sym().data.w = e.data.w;
  });
  timed && console.time('spanningTrees');
  const [maxTree, minTree, unfoldable] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["i" /* spanningTrees */])(cell, initialFace, faceDegree);
  timed && console.timeEnd('spanningTrees');
  initialFace = getClosestFaceToPoint(unfoldable, cart, 3);
  return new Unfoldable(initialFace, unfoldable, descriptor).getSteps();
}

function edgeWeight(pos, obj) {
  const v = obj.v;
  const w = Object.keys(obj.w);
  const epsi = 1e-5;
  const abs = Math.abs;
  let ans = Infinity;
  w.forEach(id => {
    let ids = id.split('-');
    const v1 = v[+ids[0]];
    const v2 = v[+ids[1]];
    if (abs(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__math_js__["i" /* distance */])(v1, pos) + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__math_js__["i" /* distance */])(v2, pos) - __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__math_js__["i" /* distance */])(v1, v2)) < epsi) {
      ans = obj.w[id];
    }
  });
  return ans;
}

function getPolyhedra(descriptor) {
  const obj = __WEBPACK_IMPORTED_MODULE_0__polyhedra_js__[descriptor.name];
  let faceDegree = faceDegreeOpt[descriptor.name];
  let cell;
  if (descriptor.name == 'ROT_DODECAHEDRON') {
    cell = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__obj_js__["a" /* JSONReadCell */])(obj);
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["c" /* clean */])(cell);
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["j" /* triangulate */])(cell, 5);
    cell.eachVertex(v => v.data = {iter: 0});
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["d" /* subdivide */])(cell, descriptor.detail);
    faceDegree = 3;
  } else {
    cell = getOrCreateCell(descriptor.name, descriptor.detail, false);
  }

  let faceIndex = descriptor.faceIndex;
  let initialFace;// = getClosestFaceToPoint(cell, cart, faceDegree);
  cell.eachFace(f => {
    if (f.id === faceIndex) {
      initialFace = f;
    }
  });
  let cart = initialFace.getCentroid();
  let n = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__math_js__["f" /* normalize */])(cart);
  let sp = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["a" /* toSpherical */])(n);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["g" /* setWeights */])(cell, e => {
    const vOrg = e.Org();
    const vDest = e.Dest();
    const org = vOrg.pos;
    const dest= vDest.pos;
    const mid = [
      (org[0] + dest[0]) / 2,
      (org[1] + dest[1]) / 2,
      (org[2] + dest[2]) / 2
    ];
    let w = edgeWeight(mid, obj);
    if (!e.data) {
      e.data = {};
    }
    e.data.w = w;
    if (!e.Sym().data) {
      e.Sym().data = {};
    }
    e.Sym().data.w = e.data.w;
  });
  timed && console.time('spanningTrees');
  const [maxTree, minTree, unfoldable] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["i" /* spanningTrees */])(cell, initialFace, faceDegree);
  timed && console.timeEnd('spanningTrees');
  // let's subdivide the triangles!
  unfoldable.eachVertex(v => {
    v.pos = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__math_js__["b" /* prod */])(v.pos, descriptor.scale);
  });
  initialFace = getClosestFaceToPoint(unfoldable, cart, 3);
  return new Unfoldable(initialFace, unfoldable, descriptor).getSteps();
}

function getPixel(x, y, data) {
  x = x % IMG_WIDTH_LANDMASK_OUT;
  if (y >= IMG_HEIGHT_LANDMASK_OUT) {
    y = IMG_HEIGHT_LANDMASK_OUT -1;
  }
  return data[y * (IMG_WIDTH_LANDMASK_OUT * 4) + x * 4];
}

function toX(theta) {
  return Math.round(theta / (Math.PI * 2) * IMG_WIDTH_LANDMASK_OUT);
}

function toY(phi) {
  return Math.round(phi / Math.PI * IMG_HEIGHT_LANDMASK_OUT);
}

function getDistanceField(descriptor, imageData) {
  //let faceDegree = faceDegreeOpt[descriptor.name];
  const json = __WEBPACK_IMPORTED_MODULE_0__polyhedra_js__[descriptor.name];
  json.f.forEach(f => {
    f.reverse();
  });
  let cell = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__obj_js__["a" /* JSONReadCell */])(json);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["j" /* triangulate */])(cell, 'voronoi');

  let theta0 = descriptor.theta0;
  let phi0 = descriptor.phi0;
  theta0 += Math.PI + descriptor.theta0Correct;
  phi0 += descriptor.phi0Correct;
  let cart = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["f" /* toCartesian */])(1, theta0, phi0);

  let initialFace = getClosestFaceToPoint(cell, cart, 3);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["g" /* setWeights */])(cell, e => {
    const vOrg = e.Org();
    const vDest = e.Dest();
    const org = vOrg.pos;
    const dest= vDest.pos;
    const mid = [
      (org[0] + dest[0]) / 2,
      (org[1] + dest[1]) / 2,
      (org[2] + dest[2]) / 2
    ];
    let [r, theta, phi] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["a" /* toSpherical */])(mid);
    theta += Math.PI;

    let w = getPixel(toX(theta), toY(phi), imageData);
    if (!e.data) {
      e.data = {};
    }
    e.data.w = descriptor.sign * w;
    if (!e.Sym().data) {
      e.Sym().data = {};
    }
    e.Sym().data.w = e.data.w;
  });
  timed && console.time('spanningTrees');
  const [maxTree, minTree, unfoldable] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__myriahedral_js__["i" /* spanningTrees */])(cell, initialFace, 3);
  timed && console.timeEnd('spanningTrees');
  // let's subdivide the triangles!
  initialFace = getClosestFaceToPoint(unfoldable, cart, 3);
  return new Unfoldable(initialFace, unfoldable, descriptor).getSteps();
}



/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_global_window__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_global_window___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_global_window__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_luma_gl__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fx_js__ = __webpack_require__(106);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_mat4__ = __webpack_require__(108);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_mat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_gl_mat4__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__models_js__ = __webpack_require__(107);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_worker_loader_optimal_map_js__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_worker_loader_optimal_map_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_worker_loader_optimal_map_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_worker_loader_project_js__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_worker_loader_project_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_worker_loader_project_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__projections_js__ = __webpack_require__(111);
//global window
/* eslint-disable no-console */
















const IMG_WIDTH = 4096;
const IMG_HEIGHT = IMG_WIDTH / 2;
const IMG_WIDTH_LANDMASK_OUT = 256 * 4;
const IMG_HEIGHT_LANDMASK_OUT = IMG_WIDTH_LANDMASK_OUT / 2;

class WorkerPool {
  constructor(n=4, callback) {
    let that = this;
    this.workers = [];
    this.busy = [];
    this.callback = callback;
    this.queue = [];

    while (n--) {
      let w = new __WEBPACK_IMPORTED_MODULE_6_worker_loader_project_js___default.a();
      this.workers.push(w);
    }
    this.workers.forEach((w, i) => {
      this.busy[i] = false;
      w.onmessage = (e) => {
        that.onMessage(e, i, w);
      };
    });
  }

  onMessage(data, index, worker) {
    console.log(data.data.name);
    this.callback(data.data);
    this.busy[index] = false;
    if (this.queue.length) {
      worker.postMessage(this.queue.shift());
      this.busy[index] = true;
    }
  }

  processQueue(queue) {
    this.queue = queue;
    this.workers.forEach((w, i) => {
      if (queue.length && !this.busy[i]) {
        this.busy[i] = true;
        w.postMessage(queue.shift());
      }
    });
  }
}

class UnfoldableView {
  constructor(steps) {
    this.steps = steps.map(s => {
      const k = {};
      Object.keys(s).forEach(key => {
        k[key] = new Float32Array(s[key]);
      });
      return k;
    });
  }
  set(delta=0) {
    const steps = this.steps.length -1;
    const span = 1 / steps;
    const minIndex = Math.floor(delta / span) || 0;
    const maxIndex = Math.ceil(delta / span) || 0;

    return {
      from: this.steps[minIndex],
      to: this.steps[maxIndex],
      delta: ((delta % span) / span) || 0
    };
  }
}

const state = {
  unfoldableDescriptors: {
    'polyconic': {
      name: 'GRATICULE',
      detail: 5,
      theta0: 0.1,
      phi0: 0,
      phi0Correct: -Math.PI / 2,
      phiCorrect: -Math.PI,
      Wtheta: 100,
      Wphi: 0,
      up: [0, 0, 0],
      steps: 1
    },
    'cylindric': {
      name: 'GRATICULE',
      detail: 5,
      theta0: 0.1,
      phi0: -0.01,
      phi0Correct: -Math.PI / 2,
      phiCorrect: -Math.PI,
      Wtheta: 1,
      Wphi: 100,
      up: [0, 0, 0],
      steps: 1
    },
    'azimuthal': {
      name: 'GRATICULE',
      detail: 5,
      theta0: 0,
      phi0: -Math.PI / 2,
      phi0Correct: 3 * Math.PI / 2,
      phiCorrect: 0,
      Wtheta: 1,
      Wphi: 100,
      up: [0, 0, 0],
      steps: 1
    },
    'azimuthal2': {
      name: 'GRATICULE',
      detail: 5,
      theta0: 0,
      phi0: 0,
      phi0Correct: -Math.PI / 2,
      phiCorrect: -Math.PI,
      Wtheta: 1,
      Wphi: -100,
      up: [0, 0, 0],
      steps: 1
    },
    'tetrahedron': {
      name: 'TETRAHEDRON',
      vertexOnSphere: true,
      detail: 5,
      theta0: 0.1,
      phi0: 0.0,
      phi0Correct: -Math.PI / 2,
      phiCorrect: -Math.PI,
      Wtheta: 0.1,
      Wphi: 10,
      up: [0, 0, 0],
      steps: 1
    },
    'cube': {
      name: 'CUBE',
      vertexOnSphere: true,
      detail: 4,
      theta0: 0,
      phi0: 0,
      phi0Correct: -Math.PI / 2,
      phiCorrect: -Math.PI,
      Wtheta: 10,
      Wphi: 0.1,
      up: [0, 0, 0],
      steps: 1
    },
    'octahedron': {
      name: 'OCTAHEDRON',
      vertexOnSphere: true,
      detail: 4,
      theta0: 0,
      phi0: 0.0,
      phi0Correct: -Math.PI / 2,
      phiCorrect: -Math.PI,
      Wtheta: 0.1,
      Wphi: 10,
      up: [0, 0, 0],
      steps: 1
    },
    'icosahedron': {
      name: 'ICOSAHEDRON',
      vertexOnSphere: true,
      detail: 4,
      theta0: 0,
      phi0: 0,
      phi0Correct: -Math.PI / 2,
      phiCorrect: -Math.PI,
      Wtheta: 0.1,
      Wphi: 10,
      up: [0, 0, 0],
      steps: 1
    },
    'rot_tetrahedron': {
      name: 'ROT_TETRAHEDRON',
      faceIndex: 1,
      vertexOnSphere: false,
      detail: 4,
      theta0: -2.358962172620568,
      phi0: -0.5534563360089287 + Math.PI / 2,
      up: [0, 0, 0],
      scale: 0.6,
      steps: 1
    },
    'rot_cube': {
      name: 'ROT_CUBE',
      faceIndex: 3,
      vertexOnSphere: false,
      detail: 4,
      theta0: -0.30107869940223386,
      phi0: -0.35121389476424986 + Math.PI / 2,
      up: [0, 0, 0],
      scale: 0.6,
      steps: 1
    },
    'rot_octahedron': {
      name: 'ROT_OCTAHEDRON',
      faceIndex: 0,
      vertexOnSphere: false,
      detail: 4,
      theta0: -1.4628575075152357,
      phi0: -0.20620368461217545 + Math.PI / 2,
      up: [0, 0, 0],
      scale: 1,
      steps: 1
    },
    'rot_dodecahedron': {
      name: 'ROT_DODECAHEDRON',
      faceIndex: 0,
      vertexOnSphere: false,
      detail: 2,
      theta0: 0.6825193952293347,
      phi0: -0.543992653303800 + Math.PI / 2,
      up: [0, 0, 0],
      scale: 1,
      steps: 1
    },
    'rot_icosahedron': {
      name: 'ROT_ICOSAHEDRON',
      faceIndex: 6,
      vertexOnSphere: false,
      detail: 4,
      theta0: 1.4225059605058936,
      phi0: -0.4968972323091727 + Math.PI / 2,
      up: [0, 0, 0],
      scale: 1,
      steps: 1
    },
    'sealine': {
      name: 'IMG_COASTLINE_70',
      theta0: Math.PI / 4 + 1,
      phi0: Math.PI / 5,
      theta0Correct: -Math.PI/4 + 0.6,
      phi0Correct: 3 * Math.PI / 4 - 2 * Math.PI / 3,
      sign: 1,
      up: [0, 0, 0],
      steps: 0
    },
    'coastline': {
      name: 'IMG_COASTLINE_70',
      theta0: -Math.PI / 4 - 0.6,
      phi0: -Math.PI / 8,
      theta0Correct: -Math.PI/4 + 0.6,
      phi0Correct: 3 * Math.PI / 4,
      sign: -1,
      up: [0, 0, 0],
      steps: 0
    }
  },
  unfoldables: {},
  currentDescriptor: null,
  needsUpdate: false,
  unfoldable: null,
  delta: 0,
  json: null,
  maxTree: null,
  minTree: null,
  phi: 0,
  theta: 0.2,
  center: [0, 0, 0],
  eye: [8, 0, 0],
  view: new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["a" /* Matrix4 */]().lookAt({
    center: [0, 0, 0],
    eye: [8, 0, 0],
    up: [0, 0, 1]
  }),
  model: new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["a" /* Matrix4 */](),
  projection: null,
  // lighting
  ambient: [0.6, 0.6, 0.6],
  pointLocation: [4, -4, 4],
  pointColor: [0.8, 0.8, 0.8],
  // events
  onDragStart: function(e) {
    let pos = state.pos || {};
    state.pos = pos;
    pos.x = e.screenX;
    pos.y = e.screenY;
    pos.started = true;

    state.modelClone = state.model.clone();

    return false;
  },
  onDragMove: function(e) {
    let pos = state.pos;
    let phi = state.phi;
    let theta = state.theta;
    let y = (e.screenY - pos.y) / 100;
    let x = (e.screenX - pos.x) / 100;

    rotateXY(y, x);

    return false;
  },
  onDragEnd: function(e) {
    let pos = state.pos;
    let y = (e.screenY - pos.y) / 100;
    let x = (e.screenX - pos.x) / 100;
    let newPhi = (state.phi + y) % Math.PI;
    let newTheta = (state.theta + x) % (Math.PI * 2);
    state.phi = newPhi;
    state.theta = newTheta;
    pos.started = false;

    return false;
  },
  onMouseWheel: function(e) {
    let pos = state.eye;
    let py = pos[1];
    const scale = 0.01;

    pos[0] += e.deltaY * scale;
    state.view = new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["a" /* Matrix4 */]().lookAt({
      center: state.center,
      eye: pos,
      up: [0, 0, 1]
    });
  }
};

const fx = new __WEBPACK_IMPORTED_MODULE_2__fx_js__["a" /* Fx */]({
  duration: 1500,
  transition: __WEBPACK_IMPORTED_MODULE_2__fx_js__["a" /* Fx */].Transition.Quart.easeInOut
});

function foldAnimation(theta, phi) {
  let phiPrev = state.phi,
      thetaPrev = state.theta,
      phiDiff = phi - phiPrev,
      thetaDiff = theta - thetaPrev;

  state.modelClone = state.model.clone();

  return new Promise((resolve, reject) => {
    fx.start({
      onCompute: function(delta) {
        rotateXY(phiDiff * delta, thetaDiff * delta);
        state.phi = phiPrev + phiDiff * delta;
        state.theta = thetaPrev + thetaDiff * delta;
        if (state.delta !== 0 && state.unfoldable) {
          state.json = state.unfoldable.set(__WEBPACK_IMPORTED_MODULE_2__fx_js__["a" /* Fx */].compute(state.delta, 0, delta));
          state.needsUpdate = true;
        }
      },
      onComplete: function() {
        state.delta = 0;
        resolve();
      }
    });
  });
}

function unfoldAnimation() {
  return new Promise((resolve, reject) => {
    fx.start({
      onCompute: function(delta) {
        if (state.unfoldable) {
          state.json = state.unfoldable.set(__WEBPACK_IMPORTED_MODULE_2__fx_js__["a" /* Fx */].compute(state.delta, 1, delta));
          state.needsUpdate = true;
        }
      },
      onComplete: function() {
        state.delta = 1;
        resolve();
      }
    });
  });
}

function setTransform(name) {
  const descriptorTo = state.unfoldableDescriptors[name];
  const descriptorFrom = state.currentDescriptor || descriptorTo;

  foldAnimation(descriptorTo.theta0, descriptorTo.phi0)
    .then(() => {
      state.unfoldable = state.unfoldables[name];
      state.currentDescriptor = descriptorTo;
      unfoldAnimation();
    });
}

function rotateXY(phi, theta) {
    let earth = state.modelClone;
    let xVec = [0, 1, 0];
    let zVec =[0, 0, 1];

  state.modelClone = earth.clone();

  var m1 = new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["a" /* Matrix4 */]();

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_gl_mat4__["rotate"])(m1, m1, phi, xVec);
  m1.multiplyRight(earth);

  var m3 = new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["a" /* Matrix4 */]();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_gl_mat4__["rotate"])(m3, m3, theta, zVec);

  m1.multiplyRight(m3);
  state.model = m1;
}

let initialiazing = true;

const animationLoop = new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["b" /* AnimationLoop */]({
  //glOptions: {
  //webgl2: true,
  //debug: true
  //},
  //createFramebuffer: true,
  onInitialize({gl, aspect}) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_luma_gl__["c" /* setParameters */])(gl, {
      clearColor: [0, 0, 0, 0],
      clearDepth: 1,
      depthTest: true,
      depthFunc: __WEBPACK_IMPORTED_MODULE_1_luma_gl__["d" /* GL */].LEQUAL
    });

    state.perspective = new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["a" /* Matrix4 */]().perspective({
      fov: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_luma_gl__["e" /* radians */])(45),
      aspect: __WEBPACK_IMPORTED_MODULE_0_global_window___default.a.innerWidth / __WEBPACK_IMPORTED_MODULE_0_global_window___default.a.innerHeight,
      near: 0.1,
      far: 100
    });

    let canvas = gl.canvas;
    let down = false;
    canvas.addEventListener('mousedown', (e) =>  {
      e.stopPropagation();
      e.preventDefault();
      down = true;
      state.onDragStart(e);
    });
    canvas.addEventListener('mouseup', (e) =>  {
      e.stopPropagation();
      e.preventDefault();
      down = false;
      state.onDragEnd(e);
    });
    canvas.addEventListener('mousemove', (e) =>  {
      e.stopPropagation();
      e.preventDefault();
      if (down) {
        state.onDragMove(e);
      }
    });
    canvas.addEventListener('mousewheel', (e) =>  {
      e.stopPropagation();
      e.preventDefault();
      state.onMouseWheel(e);
    });

    document.querySelector('#unfold').oninput = function () {
      state.json = state.unfoldable.set(this.value);
      state.delta = +this.value;
      state.needsUpdate = true;
    };

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_luma_gl__["f" /* loadTextures */])(gl, {
      urls: ['img/landmask.jpg']
    })
      .then(textures => {
        // UNCOMMENT TO COMPUTE MAP UVS OVER PLATONIC SOLID (NO LAND CUTTING)
        //const imgCanvas = document.createElement('canvas');
        //const land = new Image();
        //land.src = 'img/landmask2.jpg';
        //land.onload = (e) => {
        //imgCanvas.width = IMG_WIDTH;
        //imgCanvas.height = IMG_HEIGHT;
        //const ctx = imgCanvas.getContext('2d');
        //ctx.drawImage(land, 0, 0);
        //const imgData = ctx.getImageData(0, 0, IMG_WIDTH, IMG_HEIGHT);
        //let optimalMap = new OptimalMap();
        //optimalMap.onmessage = (e) => {
        //console.log(JSON.stringify(e));
        //};
        //optimalMap.postMessage(['OCTAHEDRON', imgData]);
        //};
        return {
          sphere: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__models_js__["a" /* createModel */])(gl, textures, state)
          //cuts: createCuts(gl, state),
          //folds: createFolds(gl, state)
        };
      });
  },
  onRender({gl, sphere}) {
    if (initialiazing) {
      initialiazing = false;
      document.querySelector('#loader').style.display = 'none';
    }

    if (state.needsUpdate) {
      state.needsUpdate = false;
      sphere.setNeedsRedraw(true);
      sphere.setGeometry(new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["g" /* Geometry */]({
        attributes: {
          positions: {
            value: state.json.from.v
          },
          positionsTo: {
            value: state.json.to.v,
            size: 3
          },
          normals: {
            value: state.json.from.n
          },
          normalsTo: {
            value: state.json.to.n,
            size: 3
          },
          uvs: {
            value: state.json.from.uvs,
            size: 2
          }
        }
      }));
    }
    sphere.setUniforms({
      delta: state.json.delta,
      // Basic projection matrix
      uProjection: state.perspective,
      // Move the eye around the plane
      uView: state.view,
      // Rotate sphere
      uModel: state.model,
      // lighting
      uAmbientColor: state.ambient,
      uPointLightingLocation: state.pointLocation,
      uPointLightingColor: state.pointColor
    });
    gl.clear(__WEBPACK_IMPORTED_MODULE_1_luma_gl__["d" /* GL */].COLOR_BUFFER_BIT | __WEBPACK_IMPORTED_MODULE_1_luma_gl__["d" /* GL */].DEPTH_BUFFER_BIT);
    sphere.render();
    __WEBPACK_IMPORTED_MODULE_2__fx_js__["a" /* Fx */].update();
  }
});

animationLoop.getInfo = () => {
  return `
      <p>
      Myriahedral Projections.
      <p>
      Tribute to Jarke van Wijk's influential paper turning 10 years today.
    `;
};

/*
 *
 *
 * APPLICATION START
 *
 *
 */

//const imgCanvas = document.createElement('canvas');
//imgCanvas.className = 'test';
//document.body.appendChild(imgCanvas);
//const land = new Image();
//land.src = 'img/landmaskout.jpg';
//land.onload = (e) => {
  // console.log('>>>>load');
  //imgCanvas.width = IMG_WIDTH_LANDMASK_OUT;
  //imgCanvas.height = IMG_HEIGHT_LANDMASK_OUT;
  //const ctx = imgCanvas.getContext('2d');
  //ctx.drawImage(land, 0, 0, IMG_WIDTH_LANDMASK_OUT, IMG_HEIGHT_LANDMASK_OUT);
  //const imgData = ctx.getImageData(0, 0, IMG_WIDTH_LANDMASK_OUT, IMG_HEIGHT_LANDMASK_OUT);
  //const data = imgData.data;

  const queue = ['polyconic', 'cylindric', 'azimuthal', 'azimuthal2',
    'tetrahedron', 'cube', 'octahedron', 'icosahedron',
    'rot_tetrahedron', 'rot_cube', 'rot_octahedron', 'rot_dodecahedron', 'rot_icosahedron',
    ,'sealine', 'coastline'].map(n => {
      let ans = {
        name: n,
        descriptor: state.unfoldableDescriptors[n]
      };
      //if (n == 'sealine' || n == 'coastline') {
        //ans.imgData = data;
      //}
      return ans;
    });

  const pool = new WorkerPool(2, ({name, steps}) => {
    state.unfoldables[name] = new UnfoldableView(steps);
    const el = document.querySelector('#' + name);
    el.addEventListener('click', (e) => {
      e.stopPropagation && e.stopPropagation();
      e.preventDefault && e.preventDefault();
      setTransform(name);
    });
    el.innerHTML += ' &#10003; ';
    if (name == 'polyconic') {
      document.querySelector('#interactive').style.display = '';
      animationLoop.start({canvas: 'lumagl-canvas'});
      state.unfoldable = state.unfoldables.polyconic;
      state.json = state.unfoldable.set();
      setTransform('polyconic');
    }
  });
  pool.processQueue(queue);
//};
// expose on Window for standalone example



/***/ }),
/* 113 */
/***/ (function(module, exports) {

module.exports = adjoint;

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/***/ }),
/* 114 */
/***/ (function(module, exports) {

module.exports = clone;

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
function clone(a) {
    var out = new Float32Array(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/***/ }),
/* 115 */
/***/ (function(module, exports) {

module.exports = copy;

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/***/ }),
/* 116 */
/***/ (function(module, exports) {

module.exports = create;

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
function create() {
    var out = new Float32Array(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/***/ }),
/* 117 */
/***/ (function(module, exports) {

module.exports = fromRotationTranslation;

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromRotationTranslation(out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};

/***/ }),
/* 118 */
/***/ (function(module, exports) {

module.exports = perspectiveFromFieldOfView;

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);

    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
}



/***/ }),
/* 119 */
/***/ (function(module, exports) {

module.exports = rotate;

/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < 0.000001) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/***/ }),
/* 120 */
/***/ (function(module, exports) {

module.exports = str;

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(66)


/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = calculateW

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
function calculateW (out, a) {
  var x = a[0], y = a[1], z = a[2]

  out[0] = x
  out[1] = y
  out[2] = z
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z))
  return out
}


/***/ }),
/* 123 */
/***/ (function(module, exports) {

module.exports = conjugate

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
function conjugate (out, a) {
  out[0] = -a[0]
  out[1] = -a[1]
  out[2] = -a[2]
  out[3] = a[3]
  return out
}


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
module.exports = __webpack_require__(67)


/***/ }),
/* 125 */
/***/ (function(module, exports) {

module.exports = fromMat3

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
function fromMat3 (out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8]
  var fRoot

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0)  // 2w
    out[3] = 0.5 * fRoot
    fRoot = 0.5 / fRoot  // 1/(4w)
    out[0] = (m[5] - m[7]) * fRoot
    out[1] = (m[6] - m[2]) * fRoot
    out[2] = (m[1] - m[3]) * fRoot
  } else {
    // |w| <= 1/2
    var i = 0
    if (m[4] > m[0]) {
      i = 1
    }
    if (m[8] > m[i * 3 + i]) {
      i = 2
    }
    var j = (i + 1) % 3
    var k = (i + 2) % 3

    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0)
    out[i] = 0.5 * fRoot
    fRoot = 0.5 / fRoot
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot
  }

  return out
}


/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = identity

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
function identity (out) {
  out[0] = 0
  out[1] = 0
  out[2] = 0
  out[3] = 1
  return out
}


/***/ }),
/* 127 */
/***/ (function(module, exports) {

module.exports = invert

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
function invert (out, a) {
  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
    dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,
    invDot = dot ? 1.0 / dot : 0

  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot
  out[1] = -a1 * invDot
  out[2] = -a2 * invDot
  out[3] = a3 * invDot
  return out
}


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */
module.exports = __webpack_require__(169)


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(68)


/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports = multiply

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
function multiply (out, a, b) {
  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bx = b[0], by = b[1], bz = b[2], bw = b[3]

  out[0] = ax * bw + aw * bx + ay * bz - az * by
  out[1] = ay * bw + aw * by + az * bx - ax * bz
  out[2] = az * bw + aw * bz + ax * by - ay * bx
  out[3] = aw * bw - ax * bx - ay * by - az * bz
  return out
}


/***/ }),
/* 131 */
/***/ (function(module, exports) {

module.exports = rotateX

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateX (out, a, rad) {
  rad *= 0.5

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bx = Math.sin(rad), bw = Math.cos(rad)

  out[0] = ax * bw + aw * bx
  out[1] = ay * bw + az * bx
  out[2] = az * bw - ay * bx
  out[3] = aw * bw - ax * bx
  return out
}


/***/ }),
/* 132 */
/***/ (function(module, exports) {

module.exports = rotateY

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateY (out, a, rad) {
  rad *= 0.5

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    by = Math.sin(rad), bw = Math.cos(rad)

  out[0] = ax * bw - az * by
  out[1] = ay * bw + aw * by
  out[2] = az * bw + ax * by
  out[3] = aw * bw - ay * by
  return out
}


/***/ }),
/* 133 */
/***/ (function(module, exports) {

module.exports = rotateZ

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateZ (out, a, rad) {
  rad *= 0.5

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bz = Math.sin(rad), bw = Math.cos(rad)

  out[0] = ax * bw + ay * bz
  out[1] = ay * bw - ax * bz
  out[2] = az * bw + aw * bz
  out[3] = aw * bw - az * bz
  return out
}


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var vecDot = __webpack_require__(32)
var vecCross = __webpack_require__(64)
var vecLength = __webpack_require__(65)
var vecNormalize = __webpack_require__(33)

var quatNormalize = __webpack_require__(62)
var quatAxisAngle = __webpack_require__(63)

module.exports = rotationTo

var tmpvec3 = [0, 0, 0]
var xUnitVec3 = [1, 0, 0]
var yUnitVec3 = [0, 1, 0]

/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
function rotationTo (out, a, b) {
  var dot = vecDot(a, b)
  if (dot < -0.999999) {
    vecCross(tmpvec3, xUnitVec3, a)
    if (vecLength(tmpvec3) < 0.000001) {
      vecCross(tmpvec3, yUnitVec3, a)
    }
    vecNormalize(tmpvec3, tmpvec3)
    quatAxisAngle(out, tmpvec3, Math.PI)
    return out
  } else if (dot > 0.999999) {
    out[0] = 0
    out[1] = 0
    out[2] = 0
    out[3] = 1
    return out
  } else {
    vecCross(tmpvec3, a, b)
    out[0] = tmpvec3[0]
    out[1] = tmpvec3[1]
    out[2] = tmpvec3[2]
    out[3] = 1 + dot
    return quatNormalize(out, out)
  }
}


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(70)


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(71)


/***/ }),
/* 137 */
/***/ (function(module, exports) {

module.exports = slerp

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
function slerp (out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bx = b[0], by = b[1], bz = b[2], bw = b[3]

  var omega, cosom, sinom, scale0, scale1

  // calc cosine
  cosom = ax * bx + ay * by + az * bz + aw * bw
  // adjust signs (if necessary)
  if (cosom < 0.0) {
    cosom = -cosom
    bx = -bx
    by = -by
    bz = -bz
    bw = -bw
  }
  // calculate coefficients
  if ((1.0 - cosom) > 0.000001) {
    // standard case (slerp)
    omega = Math.acos(cosom)
    sinom = Math.sin(omega)
    scale0 = Math.sin((1.0 - t) * omega) / sinom
    scale1 = Math.sin(t * omega) / sinom
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t
    scale1 = t
  }
  // calculate final values
  out[0] = scale0 * ax + scale1 * bx
  out[1] = scale0 * ay + scale1 * by
  out[2] = scale0 * az + scale1 * bz
  out[3] = scale0 * aw + scale1 * bw

  return out
}


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
module.exports = __webpack_require__(173)


/***/ }),
/* 139 */
/***/ (function(module, exports) {

module.exports = add

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function add(out, a, b) {
    out[0] = a[0] + b[0]
    out[1] = a[1] + b[1]
    return out
}

/***/ }),
/* 140 */
/***/ (function(module, exports) {

module.exports = cross

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0]
    out[0] = out[1] = 0
    out[2] = z
    return out
}

/***/ }),
/* 141 */
/***/ (function(module, exports) {

module.exports = divide

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function divide(out, a, b) {
    out[0] = a[0] / b[0]
    out[1] = a[1] / b[1]
    return out
}

/***/ }),
/* 142 */
/***/ (function(module, exports) {

module.exports = dot

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1]
}

/***/ }),
/* 143 */
/***/ (function(module, exports) {

module.exports = lerp

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
function lerp(out, a, b, t) {
    var ax = a[0],
        ay = a[1]
    out[0] = ax + t * (b[0] - ax)
    out[1] = ay + t * (b[1] - ay)
    return out
}

/***/ }),
/* 144 */
/***/ (function(module, exports) {

module.exports = multiply

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function multiply(out, a, b) {
    out[0] = a[0] * b[0]
    out[1] = a[1] * b[1]
    return out
}

/***/ }),
/* 145 */
/***/ (function(module, exports) {

module.exports = negate

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
function negate(out, a) {
    out[0] = -a[0]
    out[1] = -a[1]
    return out
}

/***/ }),
/* 146 */
/***/ (function(module, exports) {

module.exports = normalize

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
function normalize(out, a) {
    var x = a[0],
        y = a[1]
    var len = x*x + y*y
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len)
        out[0] = a[0] * len
        out[1] = a[1] * len
    }
    return out
}

/***/ }),
/* 147 */
/***/ (function(module, exports) {

module.exports = scale

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
function scale(out, a, b) {
    out[0] = a[0] * b
    out[1] = a[1] * b
    return out
}

/***/ }),
/* 148 */
/***/ (function(module, exports) {

module.exports = scaleAndAdd

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale)
    out[1] = a[1] + (b[1] * scale)
    return out
}

/***/ }),
/* 149 */
/***/ (function(module, exports) {

module.exports = set

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
function set(out, x, y) {
    out[0] = x
    out[1] = y
    return out
}

/***/ }),
/* 150 */
/***/ (function(module, exports) {

module.exports = subtract

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function subtract(out, a, b) {
    out[0] = a[0] - b[0]
    out[1] = a[1] - b[1]
    return out
}

/***/ }),
/* 151 */
/***/ (function(module, exports) {

module.exports = transformMat4

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat4(out, a, m) {
    var x = a[0], 
        y = a[1]
    out[0] = m[0] * x + m[4] * y + m[12]
    out[1] = m[1] * x + m[5] * y + m[13]
    return out
}

/***/ }),
/* 152 */
/***/ (function(module, exports) {

module.exports = add;

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function add(out, a, b) {
    out[0] = a[0] + b[0]
    out[1] = a[1] + b[1]
    out[2] = a[2] + b[2]
    return out
}

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = angle

var fromValues = __webpack_require__(156)
var normalize = __webpack_require__(33)
var dot = __webpack_require__(32)

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
function angle(a, b) {
    var tempA = fromValues(a[0], a[1], a[2])
    var tempB = fromValues(b[0], b[1], b[2])
 
    normalize(tempA, tempA)
    normalize(tempB, tempB)
 
    var cosine = dot(tempA, tempB)

    if(cosine > 1.0){
        return 0
    } else {
        return Math.acos(cosine)
    }     
}


/***/ }),
/* 154 */
/***/ (function(module, exports) {

module.exports = distance;

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2]
    return Math.sqrt(x*x + y*y + z*z)
}

/***/ }),
/* 155 */
/***/ (function(module, exports) {

module.exports = divide;

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function divide(out, a, b) {
    out[0] = a[0] / b[0]
    out[1] = a[1] / b[1]
    out[2] = a[2] / b[2]
    return out
}

/***/ }),
/* 156 */
/***/ (function(module, exports) {

module.exports = fromValues;

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
function fromValues(x, y, z) {
    var out = new Float32Array(3)
    out[0] = x
    out[1] = y
    out[2] = z
    return out
}

/***/ }),
/* 157 */
/***/ (function(module, exports) {

module.exports = inverse;

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0]
  out[1] = 1.0 / a[1]
  out[2] = 1.0 / a[2]
  return out
}

/***/ }),
/* 158 */
/***/ (function(module, exports) {

module.exports = lerp;

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function lerp(out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2]
    out[0] = ax + t * (b[0] - ax)
    out[1] = ay + t * (b[1] - ay)
    out[2] = az + t * (b[2] - az)
    return out
}

/***/ }),
/* 159 */
/***/ (function(module, exports) {

module.exports = multiply;

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function multiply(out, a, b) {
    out[0] = a[0] * b[0]
    out[1] = a[1] * b[1]
    out[2] = a[2] * b[2]
    return out
}

/***/ }),
/* 160 */
/***/ (function(module, exports) {

module.exports = negate;

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
function negate(out, a) {
    out[0] = -a[0]
    out[1] = -a[1]
    out[2] = -a[2]
    return out
}

/***/ }),
/* 161 */
/***/ (function(module, exports) {

module.exports = scale;

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
function scale(out, a, b) {
    out[0] = a[0] * b
    out[1] = a[1] * b
    out[2] = a[2] * b
    return out
}

/***/ }),
/* 162 */
/***/ (function(module, exports) {

module.exports = scaleAndAdd;

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale)
    out[1] = a[1] + (b[1] * scale)
    out[2] = a[2] + (b[2] * scale)
    return out
}

/***/ }),
/* 163 */
/***/ (function(module, exports) {

module.exports = set;

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
function set(out, x, y, z) {
    out[0] = x
    out[1] = y
    out[2] = z
    return out
}

/***/ }),
/* 164 */
/***/ (function(module, exports) {

module.exports = subtract;

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function subtract(out, a, b) {
    out[0] = a[0] - b[0]
    out[1] = a[1] - b[1]
    out[2] = a[2] - b[2]
    return out
}

/***/ }),
/* 165 */
/***/ (function(module, exports) {

module.exports = transformMat4;

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2],
        w = m[3] * x + m[7] * y + m[11] * z + m[15]
    w = w || 1.0
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w
    return out
}

/***/ }),
/* 166 */
/***/ (function(module, exports) {

module.exports = distance

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
function distance (a, b) {
  var x = b[0] - a[0],
    y = b[1] - a[1],
    z = b[2] - a[2],
    w = b[3] - a[3]
  return Math.sqrt(x * x + y * y + z * z + w * w)
}


/***/ }),
/* 167 */
/***/ (function(module, exports) {

module.exports = divide

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function divide (out, a, b) {
  out[0] = a[0] / b[0]
  out[1] = a[1] / b[1]
  out[2] = a[2] / b[2]
  out[3] = a[3] / b[3]
  return out
}


/***/ }),
/* 168 */
/***/ (function(module, exports) {

module.exports = inverse

/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */
function inverse (out, a) {
  out[0] = 1.0 / a[0]
  out[1] = 1.0 / a[1]
  out[2] = 1.0 / a[2]
  out[3] = 1.0 / a[3]
  return out
}


/***/ }),
/* 169 */
/***/ (function(module, exports) {

module.exports = length

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
function length (a) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3]
  return Math.sqrt(x * x + y * y + z * z + w * w)
}


/***/ }),
/* 170 */
/***/ (function(module, exports) {

module.exports = multiply

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function multiply (out, a, b) {
  out[0] = a[0] * b[0]
  out[1] = a[1] * b[1]
  out[2] = a[2] * b[2]
  out[3] = a[3] * b[3]
  return out
}


/***/ }),
/* 171 */
/***/ (function(module, exports) {

module.exports = negate

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
function negate (out, a) {
  out[0] = -a[0]
  out[1] = -a[1]
  out[2] = -a[2]
  out[3] = -a[3]
  return out
}


/***/ }),
/* 172 */
/***/ (function(module, exports) {

module.exports = scaleAndAdd

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
function scaleAndAdd (out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale)
  out[1] = a[1] + (b[1] * scale)
  out[2] = a[2] + (b[2] * scale)
  out[3] = a[3] + (b[3] * scale)
  return out
}


/***/ }),
/* 173 */
/***/ (function(module, exports) {

module.exports = squaredLength

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength (a) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3]
  return x * x + y * y + z * z + w * w
}


/***/ }),
/* 174 */
/***/ (function(module, exports) {

module.exports = subtract

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function subtract (out, a, b) {
  out[0] = a[0] - b[0]
  out[1] = a[1] - b[1]
  out[2] = a[2] - b[2]
  out[3] = a[3] - b[3]
  return out
}


/***/ }),
/* 175 */
/***/ (function(module, exports) {

module.exports = transformMat4

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
function transformMat4 (out, a, m) {
  var x = a[0], y = a[1], z = a[2], w = a[3]
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w
  return out
}


/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export encodePickingColor */
/* unused harmony export decodePickingColor */
/* unused harmony export getNullPickingColor */
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var NULL_PICKING_COLOR = new Uint8Array([0, 0, 0]);

// Encodes an index as a Uint8Array([r, g, b]) format picking color
function encodePickingColor(i) {
  return [i + 1 & 255, i + 1 >> 8 & 255, i + 1 >> 16 & 255];
}

// Decodes a picking color in [r, g, b] format to an index
function decodePickingColor(color) {
  // assert(color instanceof Uint8Array);
  var _color = _slicedToArray(color, 3),
      i1 = _color[0],
      i2 = _color[1],
      i3 = _color[2];
  // 1 was added to seperate from no selection


  var index = i1 + i2 * 256 + i3 * 65536 - 1;
  return index;
}

// Return picking color representing no item at that pixel
function getNullPickingColor() {
  return NULL_PICKING_COLOR;
}
//# sourceMappingURL=picking-colors.js.map

/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return addModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return logModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return removeModel; });
/* unused harmony export setOverride */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getOverrides; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_seer__ = __webpack_require__(227);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_seer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_seer__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_globals__ = __webpack_require__(88);




var models = {};

/**
 * Add a model to our cache indexed by id
 */
var addModel = function addModel(model) {
  if (models[model.id]) {
    return;
  }
  models[model.id] = model;

  __WEBPACK_IMPORTED_MODULE_0_seer___default.a.listItem('luma.gl', model.id);
};

/**
 * Log a model uniforms and attributes.
 */
var logModel = function logModel(model, uniforms) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* window */].__SEER_INITIALIZED__ || __WEBPACK_IMPORTED_MODULE_0_seer___default.a.throttle('luma.gl:' + model.id, 1E3)) {
    return;
  }

  var attributesObject = Object.assign({}, model.geometry.attributes, model.attributes);
  var uniformsObject = Object.assign({}, model.uniforms, uniforms);

  __WEBPACK_IMPORTED_MODULE_0_seer___default.a.multiUpdate('luma.gl', model.id, [{ path: 'objects.uniforms', data: uniformsObject }, { path: 'objects.attributes', data: attributesObject }]);
};

/**
 * Remove a previously set model from the cache
 */
var removeModel = function removeModel(id) {
  delete models[id];
  __WEBPACK_IMPORTED_MODULE_0_seer___default.a.deleteItem('luma.gl', id);
};

/**
 * Recursively traverse an object given a path of properties and set the given value
 */
var recursiveSet = function recursiveSet(obj, path, value) {
  if (!obj) {
    return;
  }

  if (path.length > 1) {
    recursiveSet(obj[path[0]], path.slice(1), value);
  } else {
    obj[path[0]] = value;
  }
};

var overrides = new Map();

/**
 * Create an override on the specify layer, indexed by a valuePath array.
 * Do nothing in case Seer as not been initialized to prevent any preformance drawback.
 */
var setOverride = function setOverride(id, valuePath, value) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* window */].__SEER_INITIALIZED__) {
    return;
  }

  if (!overrides.has(id)) {
    overrides.set(id, new Map());
  }

  var uniforms = overrides.get(id);
  uniforms.set(valuePath, value);
};

/**
 * Apply overrides to a specific model's uniforms
 */
var getOverrides = function getOverrides(id, uniforms) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* window */].__SEER_INITIALIZED__ || !id) {
    return;
  }

  var overs = overrides.get(id);
  if (!overs) {
    return;
  }

  overs.forEach(function (value, valuePath) {
    recursiveSet(uniforms, valuePath, value);
  });
};

/**
 * Listen for luma.gl edit events
 */
__WEBPACK_IMPORTED_MODULE_0_seer___default.a.listenFor('luma.gl', function (payload) {
  var model = models[payload.itemKey];
  if (!model || payload.type !== 'edit' || payload.valuePath[0] !== 'uniforms') {
    return;
  }

  var valuePath = payload.valuePath.slice(1);
  setOverride(payload.itemKey, valuePath, payload.value);

  var uniforms = model.getUniforms();
  recursiveSet(uniforms, valuePath, payload.value);
  model.setUniforms(uniforms);
});
//# sourceMappingURL=seer-integration.js.map

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PICKING_RES = exports.MAX_POINT_LIGHTS = exports.MAX_TEXTURES = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _math = __webpack_require__(14);

var _utils = __webpack_require__(2);

var _group = __webpack_require__(73);

var _group2 = _interopRequireDefault(_group);

var _pickModels2 = __webpack_require__(75);

var _pickModels3 = _interopRequireDefault(_pickModels2);

var _assert = __webpack_require__(0);

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Scene Object management and rendering
/* eslint-disable max-statements, no-try-catch */

var MAX_TEXTURES = exports.MAX_TEXTURES = 10;
var MAX_POINT_LIGHTS = exports.MAX_POINT_LIGHTS = 4;
var PICKING_RES = exports.PICKING_RES = 4;

var INVALID_ARGUMENT = 'LumaGL.Scene invalid argument';

var DEFAULT_SCENE_OPTS = {
  lights: {
    enable: false,
    // ambient light
    ambient: { r: 0.2, g: 0.2, b: 0.2 },
    // directional light
    directional: {
      direction: { x: 1, y: 1, z: 1 },
      color: { r: 0, g: 0, b: 0 }
      // point light
      // points: []
    } },
  effects: {
    fog: false
    // { near, far, color }
  },
  clearColor: true,
  clearDepth: true,
  backgroundColor: { r: 0, g: 0, b: 0, a: 1 },
  backgroundDepth: 1
};

// Scene class

var Scene = function (_Group) {
  _inherits(Scene, _Group);

  function Scene(gl, opts) {
    _classCallCheck(this, Scene);

    (0, _assert2.default)(gl, INVALID_ARGUMENT);

    opts = (0, _utils.merge)(DEFAULT_SCENE_OPTS, opts);

    var _this = _possibleConstructorReturn(this, (Scene.__proto__ || Object.getPrototypeOf(Scene)).call(this, opts));

    _this.gl = gl;
    _this.config = opts;
    _this.needsRedraw = false;
    Object.seal(_this);
    return _this;
  }

  _createClass(Scene, [{
    key: 'setNeedsRedraw',
    value: function setNeedsRedraw() {
      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this.needsRedraw = redraw;
      return this;
    }
  }, {
    key: 'getNeedsRedraw',
    value: function getNeedsRedraw() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$clearRedrawFlags = _ref.clearRedrawFlags,
          clearRedrawFlags = _ref$clearRedrawFlags === undefined ? false : _ref$clearRedrawFlags;

      var redraw = false;
      redraw = redraw || this.needsRedraw;
      this.needsRedraw = this.needsRedraw && !clearRedrawFlags;
      this.traverse(function (model) {
        redraw = redraw || model.getNeedsRedraw({ clearRedrawFlags: clearRedrawFlags });
      });
      return redraw;
    }
  }, {
    key: 'clear',
    value: function clear() {
      var gl = this.gl;

      if (this.config.clearColor) {
        var bg = this.config.backgroundColor;
        gl.clearColor(bg.r, bg.g, bg.b, bg.a);
      }
      if (this.config.clearDepth) {
        gl.clearDepth(this.config.backgroundDepth);
      }
      if (this.config.clearColor && this.config.clearDepth) {
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      } else if (this.config.clearColor) {
        gl.clear(gl.COLOR_BUFFER_BIT);
      } else if (this.config.clearDepth) {
        gl.clear(gl.DEPTH_BUFFER_BIT);
      }
      return this;
    }

    // Renders all objects in the scene.

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.clear();
      // Go through each model and render it.
      this.traverse(function (model) {
        if (model.display) {
          _this2.renderObject({ model: model, uniforms: uniforms });
        }
      });
      return this;
    }
  }, {
    key: 'renderObject',
    value: function renderObject(_ref2) {
      var model = _ref2.model,
          uniforms = _ref2.uniforms;

      // Setup lighting and scene effects like fog, etc.
      uniforms = Object.assign({}, this.getSceneUniforms(), uniforms);
      model.render(uniforms);
      return this;
    }
  }, {
    key: 'pickModels',
    value: function pickModels() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var x = opts.x,
          y = opts.y,
          _opts$uniforms = opts.uniforms,
          uniforms = _opts$uniforms === undefined ? {} : _opts$uniforms;

      return (0, _pickModels3.default)(this.gl, Object.assign({
        group: this,
        position: [x, y],
        uniforms: uniforms
      }, opts));
    }

    // Setup the lighting system: ambient, directional, point lights.

  }, {
    key: 'getSceneUniforms',
    value: function getSceneUniforms() {
      // Setup Lighting
      var _config$lights = this.config.lights,
          enable = _config$lights.enable,
          ambient = _config$lights.ambient,
          directional = _config$lights.directional,
          points = _config$lights.points;

      // Set light uniforms. Ambient and directional lights.

      return Object.assign({}, this.getEffectsUniforms(), { enableLights: enable }, enable && ambient ? this.getAmbientUniforms(ambient) : {}, enable && directional ? this.getDirectionalUniforms(directional) : {}, enable && points ? this.getPointUniforms(points) : {});
    }
  }, {
    key: 'getAmbientUniforms',
    value: function getAmbientUniforms(ambient) {
      return {
        ambientColor: [ambient.r, ambient.g, ambient.b]
      };
    }
  }, {
    key: 'getDirectionalUniforms',
    value: function getDirectionalUniforms(directional) {
      var color = directional.color,
          direction = directional.direction;

      // Normalize lighting direction vector

      var dir = new _math.Vector3(direction.x, direction.y, direction.z).normalize().scale(-1, -1, -1);

      return {
        directionalColor: [color.r, color.g, color.b],
        lightingDirection: [dir.x, dir.y, dir.z]
      };
    }
  }, {
    key: 'getPointUniforms',
    value: function getPointUniforms(points) {
      points = points instanceof Array ? points : [points];
      var numberPoints = points.length;
      var uniforms = { numberPoints: numberPoints };

      var pointLocations = [];
      var pointColors = [];
      var enableSpecular = [];
      var pointSpecularColors = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var point = _step.value;
          var position = point.position,
              color = point.color,
              diffuse = point.diffuse,
              specular = point.specular;

          var pointColor = color || diffuse;

          pointLocations.push(position.x, position.y, position.z);
          pointColors.push(pointColor.r, pointColor.g, pointColor.b);

          // Add specular color
          enableSpecular.push(Number(Boolean(specular)));
          if (specular) {
            pointSpecularColors.push(specular.r, specular.g, specular.b);
          } else {
            pointSpecularColors.push(0, 0, 0);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (pointLocations.length) {
        Object.assign(uniforms, {
          pointLocation: pointLocations,
          pointColor: pointColors,
          enableSpecular: enableSpecular,
          pointSpecularColor: pointSpecularColors
        });
      }

      return uniforms;
    }

    // Setup effects like fog, etc.

  }, {
    key: 'getEffectsUniforms',
    value: function getEffectsUniforms() {
      var fog = this.config.effects.fog;


      if (fog) {
        var _fog$color = fog.color,
            color = _fog$color === undefined ? { r: 0.5, g: 0.5, b: 0.5 } : _fog$color;

        return {
          hasFog: true,
          fogNear: fog.near,
          fogFar: fog.far,
          fogColor: [color.r, color.g, color.b]
        };
      }
      return { hasFog: false };
    }
  }]);

  return Scene;
}(_group2.default);

exports.default = Scene;


Scene.MAX_TEXTURES = 4;
Scene.MAX_POINT_LIGHTS = 4;
Scene.PICKING_RES = 4;
//# sourceMappingURL=scene.js.map

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = "#define SHADER_NAME luma-default-fragment\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n// varyings\nvarying vec4 vColor;\nvarying vec4 vPickingColor;\nvarying vec2 vTexCoord;\nvarying vec3 lightWeighting;\nvarying vec3 vReflection;\nvarying vec4 vNormal;\n\n// texture configs\nuniform bool hasTexture1;\nuniform sampler2D sampler1;\nuniform bool hasTextureCube1;\nuniform samplerCube samplerCube1;\n\n// picking configs\nuniform bool enablePicking;\nuniform bool hasPickingColors;\nuniform vec3 pickColor;\n\n// reflection / refraction configs\nuniform float reflection;\nuniform float refraction;\n\n// fog configuration\nuniform bool hasFog;\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\n\nvoid main(){\n  // set color from texture\n  if (!hasTexture1) {\n    gl_FragColor = vec4(vColor.rgb, vColor.a);\n  } else {\n    gl_FragColor =\n      vec4(texture2D(sampler1, vec2(vTexCoord.s, vTexCoord.t)).rgb, 1.0);\n  }\n  // gl_FragColor.rgba *= lightWeighting\n\n  // has cube texture then apply reflection\n  // if (hasTextureCube1) {\n  //   vec3 nReflection = normalize(vReflection);\n  //   vec3 reflectionValue;\n  //   if (refraction > 0.0) {\n  //    reflectionValue = refract(nReflection, vNormal.xyz, refraction);\n  //   } else {\n  //    reflectionValue = -reflect(nReflection, vNormal.xyz);\n  //   }\n\n  //   // TODO(nico): check whether this is right.\n  //   vec4 cubeColor = textureCube(samplerCube1,\n  //       vec3(-reflectionValue.x, -reflectionValue.y, reflectionValue.z));\n  //   gl_FragColor = vec4(mix(gl_FragColor.xyz, cubeColor.xyz, reflection), 1.0);\n  // }\n\n  // set picking\n  // if (enablePicking) {\n  //   if (hasPickingColors) {\n  //     gl_FragColor = vPickingColor;\n  //   } else {\n  //     gl_FragColor = vec4(pickColor, 1.0);\n  //   }\n  // }\n\n  // handle fog\n  // if (hasFog) {\n  //   float depth = gl_FragCoord.z / gl_FragCoord.w;\n  //   float fogFactor = smoothstep(fogNear, fogFar, depth);\n  //   gl_FragColor = mix(gl_FragColor, vec4(fogColor, gl_FragColor.w), fogFactor);\n  // }\n}\n";
//# sourceMappingURL=default-fragment.glsl.js.map

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  hasTexture1: false,
  hasTextureCube1: false,

  enableLights: false,
  useReflection: false,

  // picking configs
  enablePicking: false,
  hasPickingColors: false,

  // fog configuration
  hasFog: false
};
//# sourceMappingURL=default-uniforms.js.map

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = "#define SHADER_NAME luma-default-vertex\n\n#define LIGHT_MAX 4\n\n// object attributes\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec4 colors;\nattribute vec4 pickingColors;\nattribute vec2 texCoords;\n\n// camera and object matrices\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 viewInverseMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\n\n// objectMatrix * viewMatrix = worldMatrix\nuniform mat4 worldMatrix;\nuniform mat4 worldInverseMatrix;\nuniform mat4 worldInverseTransposeMatrix;\nuniform mat4 objectMatrix;\nuniform vec3 cameraPosition;\n\n// lighting configuration\nuniform bool enableLights;\nuniform vec3 ambientColor;\nuniform vec3 directionalColor;\nuniform vec3 lightingDirection;\n\n// point lights configuration\nuniform vec3 pointLocation[LIGHT_MAX];\nuniform vec3 pointColor[LIGHT_MAX];\nuniform int numberPoints;\n\n// reflection / refraction configuration\nuniform bool useReflection;\n\n// varyings\nvarying vec3 vReflection;\nvarying vec4 vColor;\nvarying vec4 vPickingColor;\nvarying vec2 vTexCoord;\nvarying vec4 vNormal;\nvarying vec3 lightWeighting;\n\nvoid main(void) {\n\n  vec4 mvPosition = worldMatrix * vec4(positions, 1.0);\n  vec4 transformedNormal = worldInverseTransposeMatrix * vec4(normals, 1.0);\n\n  // lighting code\n  if(!enableLights) {\n    lightWeighting = vec3(1.0, 1.0, 1.0);\n  } else {\n    vec3 plightDirection;\n    vec3 pointWeight = vec3(0.0, 0.0, 0.0);\n    float directionalLightWeighting =\n      max(dot(transformedNormal.xyz, lightingDirection), 0.0);\n    for (int i = 0; i < LIGHT_MAX; i++) {\n      if (i < numberPoints) {\n        plightDirection = normalize(\n          (viewMatrix * vec4(pointLocation[i], 1.0)).xyz - mvPosition.xyz);\n         pointWeight += max(\n          dot(transformedNormal.xyz, plightDirection), 0.0) * pointColor[i];\n       } else {\n         break;\n       }\n     }\n\n    lightWeighting = ambientColor +\n      (directionalColor * directionalLightWeighting) + pointWeight;\n  }\n\n  // refraction / reflection code\n  if (useReflection) {\n    vReflection =\n      (viewInverseMatrix[3] - (worldMatrix * vec4(positions, 1.0))).xyz;\n  } else {\n    vReflection = vec3(1.0, 1.0, 1.0);\n  }\n\n  // pass results to varyings\n  vColor = colors;\n  vPickingColor = pickingColors;\n  vTexCoord = texCoords;\n  // vNormal = transformedNormal;\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(positions, 1.0);\n}\n";
//# sourceMappingURL=default-vertex.glsl.js.map

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.requestFile = requestFile;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Supports loading (requesting) assets with XHR (XmlHttpRequest)
/* eslint-disable guard-for-in, complexity, no-try-catch */

/* global XMLHttpRequest */
function noop() {}

var XHR_STATES = {
  UNINITIALIZED: 0,
  LOADING: 1,
  LOADED: 2,
  INTERACTIVE: 3,
  COMPLETED: 4
};

var XHR = function () {
  function XHR(_ref) {
    var url = _ref.url,
        _ref$path = _ref.path,
        path = _ref$path === undefined ? null : _ref$path,
        _ref$method = _ref.method,
        method = _ref$method === undefined ? 'GET' : _ref$method,
        _ref$asynchronous = _ref.asynchronous,
        asynchronous = _ref$asynchronous === undefined ? true : _ref$asynchronous,
        _ref$noCache = _ref.noCache,
        noCache = _ref$noCache === undefined ? false : _ref$noCache,
        _ref$sendAsBinary = _ref.sendAsBinary,
        sendAsBinary = _ref$sendAsBinary === undefined ? false : _ref$sendAsBinary,
        _ref$responseType = _ref.responseType,
        responseType = _ref$responseType === undefined ? false : _ref$responseType,
        _ref$onProgress = _ref.onProgress,
        onProgress = _ref$onProgress === undefined ? noop : _ref$onProgress,
        _ref$onError = _ref.onError,
        onError = _ref$onError === undefined ? noop : _ref$onError,
        _ref$onAbort = _ref.onAbort,
        onAbort = _ref$onAbort === undefined ? noop : _ref$onAbort,
        _ref$onComplete = _ref.onComplete,
        onComplete = _ref$onComplete === undefined ? noop : _ref$onComplete;

    _classCallCheck(this, XHR);

    this.url = path ? path.join(path, url) : url;
    this.method = method;
    this.async = asynchronous;
    this.noCache = noCache;
    this.sendAsBinary = sendAsBinary;
    this.responseType = responseType;

    this.req = new XMLHttpRequest();

    this.req.onload = function (e) {
      return onComplete(e);
    };
    this.req.onerror = function (e) {
      return onError(e);
    };
    this.req.onabort = function (e) {
      return onAbort(e);
    };
    this.req.onprogress = function (e) {
      if (e.lengthComputable) {
        onProgress(e, Math.round(e.loaded / e.total * 100));
      } else {
        onProgress(e, -1);
      }
    };
  }

  _createClass(XHR, [{
    key: 'setRequestHeader',
    value: function setRequestHeader(header, value) {
      this.req.setRequestHeader(header, value);
      return this;
    }

    // /* eslint-disable max-statements */

  }, {
    key: 'sendAsync',
    value: function sendAsync() {
      var _this = this;

      var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.body || null;

      return new Promise(function (resolve, reject) {
        try {
          var req = _this.req,
              method = _this.method,
              noCache = _this.noCache,
              sendAsBinary = _this.sendAsBinary,
              responseType = _this.responseType;


          var url = noCache ? _this.url + (_this.url.indexOf('?') >= 0 ? '&' : '?') + Date.now() : _this.url;

          req.open(method, url, _this.async);

          if (responseType) {
            req.responseType = responseType;
          }

          if (_this.async) {
            req.onreadystatechange = function (e) {
              if (req.readyState === XHR_STATES.COMPLETED) {
                if (req.status === 200) {
                  resolve(req.responseType ? req.response : req.responseText);
                } else {
                  reject(new Error(req.status + ': ' + url));
                }
              }
            };
          }

          if (sendAsBinary) {
            req.sendAsBinary(body);
          } else {
            req.send(body);
          }

          if (!_this.async) {
            if (req.status === 200) {
              resolve(req.responseType ? req.response : req.responseText);
            } else {
              reject(new Error(req.status + ': ' + url));
            }
          }
        } catch (error) {
          reject(error);
        }
      });
    }
    /* eslint-enable max-statements */

  }]);

  return XHR;
}();

function requestFile(opts) {
  var xhr = new XHR(opts);
  return xhr.sendAsync();
}
//# sourceMappingURL=browser-request-file.js.map

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _browserLoad = __webpack_require__(82);

Object.defineProperty(exports, 'setPathPrefix', {
  enumerable: true,
  get: function get() {
    return _browserLoad.setPathPrefix;
  }
});
Object.defineProperty(exports, 'loadFile', {
  enumerable: true,
  get: function get() {
    return _browserLoad.loadFile;
  }
});
Object.defineProperty(exports, 'loadImage', {
  enumerable: true,
  get: function get() {
    return _browserLoad.loadImage;
  }
});

var _loadFiles = __webpack_require__(184);

Object.defineProperty(exports, 'loadFiles', {
  enumerable: true,
  get: function get() {
    return _loadFiles.loadFiles;
  }
});
Object.defineProperty(exports, 'loadImages', {
  enumerable: true,
  get: function get() {
    return _loadFiles.loadImages;
  }
});
Object.defineProperty(exports, 'loadTextures', {
  enumerable: true,
  get: function get() {
    return _loadFiles.loadTextures;
  }
});
Object.defineProperty(exports, 'loadProgram', {
  enumerable: true,
  get: function get() {
    return _loadFiles.loadProgram;
  }
});
Object.defineProperty(exports, 'loadModel', {
  enumerable: true,
  get: function get() {
    return _loadFiles.loadModel;
  }
});
Object.defineProperty(exports, 'parseModel', {
  enumerable: true,
  get: function get() {
    return _loadFiles.parseModel;
  }
});
//# sourceMappingURL=index.js.map

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /* eslint-disable guard-for-in, complexity, no-try-catch */


exports.loadTexture = loadTexture;
exports.loadFiles = loadFiles;
exports.loadImages = loadImages;
exports.loadTextures = loadTextures;
exports.loadProgram = loadProgram;
exports.loadModel = loadModel;
exports.parseModel = parseModel;

var _assert = __webpack_require__(0);

var _assert2 = _interopRequireDefault(_assert);

var _browserLoad = __webpack_require__(82);

var _webgl = __webpack_require__(12);

var _core = __webpack_require__(10);

var _geometry = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function noop() {}

function loadTexture(gl, url) {
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var urls = opts.urls,
      _opts$onProgress = opts.onProgress,
      onProgress = _opts$onProgress === undefined ? noop : _opts$onProgress;

  (0, _assert2.default)(typeof url === 'string', 'loadTexture: url must be string');

  return loadImages(Object.assign({ urls: urls, onProgress: onProgress }, opts)).then(function (images) {
    return images.map(function (img, i) {
      return new _webgl.Texture2D(gl, Object.assign({ id: urls[i] }, opts, { data: img }));
    });
  });
}

/*
 * Loads (Requests) multiple files asynchronously
 */
function loadFiles() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var urls = opts.urls,
      _opts$onProgress2 = opts.onProgress,
      onProgress = _opts$onProgress2 === undefined ? noop : _opts$onProgress2;

  (0, _assert2.default)(urls.every(function (url) {
    return typeof url === 'string';
  }), 'loadImages: {urls} must be array of strings');
  var count = 0;
  return Promise.all(urls.map(function (url) {
    var promise = (0, _browserLoad.loadFile)(Object.assign({ url: url }, opts));
    promise.then(function (file) {
      return onProgress({
        progress: ++count / urls.length,
        count: count,
        total: urls.length,
        url: url
      });
    });
    return promise;
  }));
}

/*
 * Loads (requests) multiple images asynchronously
 */
function loadImages() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var urls = opts.urls,
      _opts$onProgress3 = opts.onProgress,
      onProgress = _opts$onProgress3 === undefined ? noop : _opts$onProgress3;

  (0, _assert2.default)(urls.every(function (url) {
    return typeof url === 'string';
  }), 'loadImages: {urls} must be array of strings');
  var count = 0;
  return Promise.all(urls.map(function (url) {
    var promise = (0, _browserLoad.loadImage)(url, opts);
    promise.then(function (file) {
      return onProgress({
        progress: ++count / urls.length,
        count: count,
        total: urls.length,
        url: url
      });
    });
    return promise;
  }));
}

function loadTextures(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var urls = opts.urls,
      _opts$onProgress4 = opts.onProgress,
      onProgress = _opts$onProgress4 === undefined ? noop : _opts$onProgress4;

  (0, _assert2.default)(urls.every(function (url) {
    return typeof url === 'string';
  }), 'loadTextures: {urls} must be array of strings');

  return loadImages(Object.assign({ urls: urls, onProgress: onProgress }, opts)).then(function (images) {
    return images.map(function (img, i) {
      var params = Array.isArray(opts.parameters) ? opts.parameters[i] : opts.parameters;
      params = params === undefined ? {} : params;
      return new _webgl.Texture2D(gl, Object.assign({ id: urls[i] }, params, { data: img }));
    });
  });
}

function loadProgram(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var vs = opts.vs,
      fs = opts.fs,
      _opts$onProgress5 = opts.onProgress,
      onProgress = _opts$onProgress5 === undefined ? noop : _opts$onProgress5;

  return loadFiles(Object.assign({ urls: [vs, fs], onProgress: onProgress }, opts)).then(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        vsText = _ref2[0],
        fsText = _ref2[1];

    return new _webgl.Program(gl, Object.assign({ vs: vsText, fs: fsText }, opts));
  });
}

// Loads a simple JSON format
function loadModel(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var url = opts.url,
      _opts$onProgress6 = opts.onProgress,
      onProgress = _opts$onProgress6 === undefined ? noop : _opts$onProgress6;

  return loadFiles(Object.assign({ urls: [url], onProgress: onProgress }, opts)).then(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
        file = _ref4[0];

    return parseModel(gl, Object.assign({ file: file }, opts));
  });
}

function parseModel(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var file = opts.file,
      _opts$program = opts.program,
      program = _opts$program === undefined ? new _webgl.Program(gl) : _opts$program;

  var json = typeof file === 'string' ? parseJSON(file) : file;
  // Remove any attributes so that we can create a geometry
  // TODO - change format to put these in geometry sub object?
  var attributes = {};
  var modelOptions = {};
  for (var key in json) {
    var value = json[key];
    if (Array.isArray(value)) {
      attributes[key] = key === 'indices' ? new Uint16Array(value) : new Float32Array(value);
    } else {
      modelOptions[key] = value;
    }
  }

  return new _core.Model(gl, Object.assign({ program: program, geometry: new _geometry.Geometry({ attributes: attributes }) }, modelOptions, opts));
}

function parseJSON(file) {
  try {
    return JSON.parse(file);
  } catch (error) {
    throw new Error('Failed to parse JSON: ' + error);
  }
}
//# sourceMappingURL=load-files.js.map

/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl__ = __webpack_require__(12);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// ClipSpaceQuad




var CLIPSPACE_QUAD_VERTEX_SHADER = 'attribute vec2 aClipSpacePosition;\nattribute vec2 aTexCoord;\nattribute vec2 aCoordinate;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\n  position = aClipSpacePosition;\n  coordinate = aCoordinate;\n  uv = aTexCoord;\n}\n';

/* eslint-disable indent, no-multi-spaces */
var POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];

var ClipSpaceQuad = /*#__PURE__*/function (_Model) {
  _inherits(ClipSpaceQuad, _Model);

  function ClipSpaceQuad(gl, opts) {
    _classCallCheck(this, ClipSpaceQuad);

    var TEX_COORDS = POSITIONS.map(function (coord) {
      return coord === -1 ? 0 : coord;
    });

    var _this = _possibleConstructorReturn(this, (ClipSpaceQuad.__proto__ || Object.getPrototypeOf(ClipSpaceQuad)).call(this, gl, Object.assign({}, opts, {
      vs: CLIPSPACE_QUAD_VERTEX_SHADER,
      geometry: new __WEBPACK_IMPORTED_MODULE_1__geometry__["Geometry"]({
        drawMode: __WEBPACK_IMPORTED_MODULE_2__webgl__["GL"].TRIANGLE_STRIP,
        vertexCount: 4,
        attributes: {
          aClipSpacePosition: { size: 2, value: new Float32Array(POSITIONS) },
          aTexCoord: { size: 2, value: new Float32Array(TEX_COORDS) },
          aCoordinate: { size: 2, value: new Float32Array(TEX_COORDS) }
        }
      })
    })));

    _this.setVertexCount(4);
    return _this;
  }

  return ClipSpaceQuad;
}(__WEBPACK_IMPORTED_MODULE_0__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (ClipSpaceQuad);
//# sourceMappingURL=clip-space-quad.js.map

/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core__ = __webpack_require__(10);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var Cone = /*#__PURE__*/function (_Model) {
  _inherits(Cone, _Model);

  function Cone(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Cone);

    return _possibleConstructorReturn(this, (Cone.__proto__ || Object.getPrototypeOf(Cone)).call(this, gl, Object.assign({}, opts, { geometry: new __WEBPACK_IMPORTED_MODULE_0__geometry__["ConeGeometry"](opts) })));
  }

  return Cone;
}(__WEBPACK_IMPORTED_MODULE_1__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (Cone);
//# sourceMappingURL=cone.js.map

/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Cube = /*#__PURE__*/function (_Model) {
  _inherits(Cube, _Model);

  function Cube(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Cube);

    var _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils__["uid"])('cube') : _opts$id;
    return _possibleConstructorReturn(this, (Cube.__proto__ || Object.getPrototypeOf(Cube)).call(this, gl, Object.assign({}, opts, { id: id, geometry: new __WEBPACK_IMPORTED_MODULE_0__geometry__["CubeGeometry"](opts) })));
  }

  return Cube;
}(__WEBPACK_IMPORTED_MODULE_1__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (Cube);
//# sourceMappingURL=cube.js.map

/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_model__ = __webpack_require__(22);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var Cylinder = /*#__PURE__*/function (_Model) {
  _inherits(Cylinder, _Model);

  function Cylinder(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Cylinder);

    return _possibleConstructorReturn(this, (Cylinder.__proto__ || Object.getPrototypeOf(Cylinder)).call(this, gl, Object.assign({}, opts, { geometry: new __WEBPACK_IMPORTED_MODULE_0__geometry__["CylinderGeometry"](opts) })));
  }

  return Cylinder;
}(__WEBPACK_IMPORTED_MODULE_1__core_model__["a" /* default */]);

/* harmony default export */ __webpack_exports__["a"] = (Cylinder);
//# sourceMappingURL=cylinder.js.map

/***/ }),
/* 189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geometry__ = __webpack_require__(6);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var IcoSphere = /*#__PURE__*/function (_Model) {
  _inherits(IcoSphere, _Model);

  function IcoSphere(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, IcoSphere);

    return _possibleConstructorReturn(this, (IcoSphere.__proto__ || Object.getPrototypeOf(IcoSphere)).call(this, gl, Object.assign({}, opts, { geometry: new __WEBPACK_IMPORTED_MODULE_1__geometry__["IcoSphereGeometry"](opts) })));
  }

  return IcoSphere;
}(__WEBPACK_IMPORTED_MODULE_0__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (IcoSphere);
//# sourceMappingURL=ico-sphere.js.map

/***/ }),
/* 190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core_model__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Plane = /*#__PURE__*/function (_Model) {
  _inherits(Plane, _Model);

  function Plane(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Plane);

    var _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils__["uid"])('plane') : _opts$id;
    return _possibleConstructorReturn(this, (Plane.__proto__ || Object.getPrototypeOf(Plane)).call(this, gl, Object.assign({}, opts, { id: id, geometry: new __WEBPACK_IMPORTED_MODULE_0__geometry__["PlaneGeometry"](opts) })));
  }

  return Plane;
}(__WEBPACK_IMPORTED_MODULE_1__core_model__["a" /* default */]);

/* unused harmony default export */ var _unused_webpack_default_export = (Plane);
//# sourceMappingURL=plane.js.map

/***/ }),
/* 191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__core__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(2);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Sphere = /*#__PURE__*/function (_Model) {
  _inherits(Sphere, _Model);

  function Sphere(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Sphere);

    var _opts$id = opts.id,
        id = _opts$id === undefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils__["uid"])('sphere') : _opts$id;
    return _possibleConstructorReturn(this, (Sphere.__proto__ || Object.getPrototypeOf(Sphere)).call(this, gl, Object.assign({}, opts, { id: id, geometry: new __WEBPACK_IMPORTED_MODULE_1__geometry__["SphereGeometry"](opts) })));
  }

  return Sphere;
}(__WEBPACK_IMPORTED_MODULE_0__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (Sphere);
//# sourceMappingURL=sphere.js.map

/***/ }),
/* 192 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__core__ = __webpack_require__(10);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var TruncatedCone = /*#__PURE__*/function (_Model) {
  _inherits(TruncatedCone, _Model);

  function TruncatedCone(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, TruncatedCone);

    return _possibleConstructorReturn(this, (TruncatedCone.__proto__ || Object.getPrototypeOf(TruncatedCone)).call(this, gl, Object.assign({}, opts, { geometry: new __WEBPACK_IMPORTED_MODULE_0__geometry__["TruncatedConeGeometry"](opts) })));
  }

  return TruncatedCone;
}(__WEBPACK_IMPORTED_MODULE_1__core__["Model"]);

/* unused harmony default export */ var _unused_webpack_default_export = (TruncatedCone);
//# sourceMappingURL=truncated-cone.js.map

/***/ }),
/* 193 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export stop */
/* unused harmony export get */
/* unused harmony export getWheel */
/* unused harmony export getKey */
/* unused harmony export isRightClick */
/* unused harmony export getPos */
/* unused harmony export EventsProxy */
/* unused harmony export Keys */
/* unused harmony export addEvents */
/* unused harmony export removeEvents */


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// event.js
// Handle keyboard/mouse/touch events in the Canvas
// TODO - this will not work under node

/* eslint-disable dot-notation, max-statements, no-loop-func */
/* global window, document */
function noop() {}

var KEYS = {
  enter: 13,
  up: 38,
  down: 40,
  left: 37,
  right: 39,
  esc: 27,
  space: 32,
  backspace: 8,
  tab: 9,
  delete: 46
};

// returns an O3D object or false otherwise.
function toO3D(n) {
  return n !== true ? n : false;
}

// Returns an element position
function _getPos(elem) {
  var bbox = elem.getBoundingClientRect();
  return {
    x: bbox.left,
    y: bbox.top,
    bbox: bbox
  };
}

// event object wrapper
function get(e, win) {
  win = win || window;
  return e || win.event;
}

function getWheel(e) {
  return e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
}

function getKey(e) {
  var code = e.which || e.keyCode;
  var key = keyOf(code);
  // onkeydown
  var fKey = code - 111;
  if (fKey > 0 && fKey < 13) {
    key = 'f' + fKey;
  }
  key = key || String.fromCharCode(code).toLowerCase();

  return {
    code: code,
    key: key,
    shift: e.shiftKey,
    control: e.ctrlKey,
    alt: e.altKey,
    meta: e.metaKey
  };
}

function isRightClick(e) {
  return e.which === 3 || e.button === 2;
}

function getPos(e, win) {
  // get mouse position
  win = win || window;
  e = e || win.event;
  var doc = win.document;
  doc = doc.documentElement || doc.body;
  // TODO(nico): make touch event handling better
  if (e.touches && e.touches.length) {
    var touchesPos = [];
    var l = e.touches.length;
    var evt = void 0;
    for (var i = 0; i < l; ++i) {
      evt = e.touches[i];
      touchesPos.push({
        x: evt.pageX || evt.clientX + doc.scrollLeft,
        y: evt.pageY || evt.clientY + doc.scrollTop
      });
    }
    return touchesPos;
  }
  var page = {
    x: e.pageX || e.clientX + doc.scrollLeft,
    y: e.pageY || e.clientY + doc.scrollTop
  };
  return [page];
}

function _stop(e) {
  if (e.stopPropagation) {
    e.stopPropagation();
  }
  e.cancelBubble = true;
  if (e.preventDefault) {
    e.preventDefault();
  } else {
    e.returnValue = false;
  }
}

var EventsProxy = /*#__PURE__*/function () {
  function EventsProxy(domElem, opt) {
    _classCallCheck(this, EventsProxy);

    this.scene = opt.scene;
    this.domElem = domElem;
    this.pos = _getPos(domElem);
    this.opt = this.callbacks = opt;

    this.size = {
      width: domElem.width || domElem.offsetWidth,
      height: domElem.height || domElem.offsetHeight
    };

    this.attachEvents();
  }

  _createClass(EventsProxy, [{
    key: 'attachEvents',
    value: function attachEvents() {
      var _this = this;

      var domElem = this.domElem;
      var opt = this.opt;

      if (opt.disableContextMenu) {
        domElem.oncontextmenu = function () {
          return false;
        };
      }

      if (opt.enableMouse) {
        ['mouseup', 'mousedown', 'mousemove', 'mouseover', 'mouseout'].forEach(function (action) {
          domElem.addEventListener(action, function (e, win) {
            _this[action](_this.eventInfo(action, e, win));
          }, false);
        });

        // "well, this is embarrassing..."
        var type = '';
        if (!document.getBoxObjectFor && window.mozInnerScreenX === null) {
          type = 'mousewheel';
        } else {
          type = 'DOMMouseScroll';
        }
        domElem.addEventListener(type, function (e, win) {
          _this['mousewheel'](_this.eventInfo('mousewheel', e, win));
        }, false);
      }

      if (opt.enableTouch) {
        ['touchstart', 'touchmove', 'touchend'].forEach(function (action) {
          domElem.addEventListener(action, function (e, win) {
            _this[action](_this.eventInfo(action, e, win));
          }, false);
        });
      }

      if (opt.enableKeyboard) {
        ['keydown', 'keyup'].forEach(function (action) {
          document.addEventListener(action, function (e, win) {
            _this[action](_this.eventInfo(action, e, win));
          }, false);
        });
      }
    }
  }, {
    key: 'eventInfo',
    value: function eventInfo(type, e, win) {
      var domElem = this.domElem;
      var scene = this.scene;
      var opt = this.opt;
      var size = this.getSize();
      var relative = opt.relative;
      var centerOrigin = opt.centerOrigin;
      var pos = opt.cachePosition && this.pos || _getPos(domElem);
      var ge = get(e, win);
      var epos = getPos(e, win);
      var origPos = { x: epos[0].x, y: epos[0].y };
      var evt = {};
      var x = void 0;
      var y = void 0;

      // get Position
      for (var i = 0, l = epos.length; i < l; ++i) {
        x = epos[i].x;
        y = epos[i].y;
        if (relative) {
          x -= pos.x;y -= pos.y;
          if (centerOrigin) {
            x -= size.width / 2;
            y -= size.height / 2;
            // y axis now points to the top of the screen
            y *= -1;
          }
        }
        epos[i].x = x;
        epos[i].y = y;
      }

      switch (type) {
        case 'mousewheel':
          evt.wheel = getWheel(ge);
          break;
        case 'keydown':
        case 'keyup':
          Object.assign(evt, getKey(ge));
          break;
        case 'mouseup':
          evt.isRightClick = isRightClick(ge);
          break;
        default:
          break;
      }

      var cacheTarget = void 0;

      Object.assign(evt, {
        x: epos[0].x,
        y: epos[0].y,
        posArray: epos,

        cache: false,
        // stop event propagation
        stop: function stop() {
          _stop(ge);
        },

        // get the target element of the event
        getTarget: function getTarget() {
          if (cacheTarget) {
            return cacheTarget;
          }
          return cacheTarget = opt.picking && scene.pick(origPos.x - pos.x, origPos.y - pos.y) || true;
        }
      });
      // wrap native event
      evt.event = ge;

      return evt;
    }
  }, {
    key: 'getSize',
    value: function getSize() {
      if (this.cacheSize) {
        return this.size;
      }
      var domElem = this.domElem;
      return {
        width: domElem.width || domElem.offsetWidth,
        height: domElem.height || domElem.offsetHeight
      };
    }
  }, {
    key: 'mouseup',
    value: function mouseup(e) {
      if (!this.moved) {
        if (e.isRightClick) {
          this.callbacks.onRightClick(e, this.hovered);
        } else {
          this.callbacks.onClick(e, toO3D(this.pressed));
        }
      }
      if (this.pressed) {
        if (this.moved) {
          this.callbacks.onDragEnd(e, toO3D(this.pressed));
        } else {
          this.callbacks.onDragCancel(e, toO3D(this.pressed));
        }
        this.pressed = this.moved = false;
      }
    }
  }, {
    key: 'mouseout',
    value: function mouseout(e) {
      // mouseout canvas
      var rt = e.relatedTarget;
      var domElem = this.domElem;
      while (rt && rt.parentNode) {
        if (domElem === rt.parentNode) {
          return;
        }
        rt = rt.parentNode;
      }
      if (this.hovered) {
        this.callbacks.onMouseLeave(e, this.hovered);
        this.hovered = false;
      }
      if (this.pressed && this.moved) {
        this.callbacks.onDragEnd(e);
        this.pressed = this.moved = false;
      }
    }
  }, {
    key: 'mouseover',
    value: function mouseover(e) {}
  }, {
    key: 'mousemove',
    value: function mousemove(e) {
      if (this.pressed) {
        this.moved = true;
        this.callbacks.onDragMove(e, toO3D(this.pressed));
        return;
      }
      if (this.hovered) {
        var target = toO3D(e.getTarget());
        if (!target || target.hash !== this.hash) {
          this.callbacks.onMouseLeave(e, this.hovered);
          this.hovered = target;
          this.hash = target;
          if (target) {
            this.hash = target.hash;
            this.callbacks.onMouseEnter(e, this.hovered);
          }
        } else {
          this.callbacks.onMouseMove(e, this.hovered);
        }
      } else {
        this.hovered = toO3D(e.getTarget());
        this.hash = this.hovered;
        if (this.hovered) {
          this.hash = this.hovered.hash;
          this.callbacks.onMouseEnter(e, this.hovered);
        }
      }
      if (!this.opt.picking) {
        this.callbacks.onMouseMove(e);
      }
    }
  }, {
    key: 'mousewheel',
    value: function mousewheel(e) {
      this.callbacks.onMouseWheel(e);
    }
  }, {
    key: 'mousedown',
    value: function mousedown(e) {
      this.pressed = e.getTarget();
      this.callbacks.onDragStart(e, toO3D(this.pressed));
    }
  }, {
    key: 'touchstart',
    value: function touchstart(e) {
      this.touched = e.getTarget();
      this.touchedLastPosition = { x: e.x, y: e.y };
      this.callbacks.onTouchStart(e, toO3D(this.touched));
    }
  }, {
    key: 'touchmove',
    value: function touchmove(e) {
      if (this.touched) {
        this.touchMoved = true;
        this.callbacks.onTouchMove(e, toO3D(this.touched));
      }
    }
  }, {
    key: 'touchend',
    value: function touchend(e) {
      if (this.touched) {
        if (this.touchMoved) {
          this.callbacks.onTouchEnd(e, toO3D(this.touched));
        } else {
          e.x = isNaN(e.x) ? this.touchedLastPosition.x : e.x;
          e.y = isNaN(e.y) ? this.touchedLastPosition.y : e.y;
          this.callbacks.onTap(e, toO3D(this.touched));
          this.callbacks.onTouchCancel(e, toO3D(this.touched));
        }
        this.touched = this.touchMoved = false;
      }
    }
  }, {
    key: 'keydown',
    value: function keydown(e) {
      this.callbacks.onKeyDown(e);
    }
  }, {
    key: 'keyup',
    value: function keyup(e) {
      this.callbacks.onKeyUp(e);
    }
  }]);

  return EventsProxy;
}();

Object.assign(EventsProxy.prototype, {
  hovered: false,
  pressed: false,
  touched: false,
  touchedLastPosition: { x: 0, y: 0 },
  touchMoved: false,
  moved: false
});

var DEFAULT_OPTS = {
  cachePosition: true,
  cacheSize: true,
  relative: true,
  centerOrigin: true,
  disableContextMenu: true,
  bind: false,
  picking: false,

  enableTouch: true,
  enableMouse: true,
  enableKeyboard: true,

  onClick: noop,
  onRightClick: noop,
  onDragStart: noop,
  onDragMove: noop,
  onDragEnd: noop,
  onDragCancel: noop,
  onTouchStart: noop,
  onTouchMove: noop,
  onTouchEnd: noop,
  onTouchCancel: noop,
  onTap: noop,
  onMouseMove: noop,
  onMouseEnter: noop,
  onMouseLeave: noop,
  onMouseWheel: noop,
  onKeyDown: noop,
  onKeyUp: noop
};

var Keys = KEYS;

function keyOf(code) {
  var keyMap = Keys;
  for (var name in keyMap) {
    if (keyMap[name] === code) {
      return name;
    }
  }
  return null;
}

function addEvents(domElement) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  opt = Object.assign({}, DEFAULT_OPTS, opt);

  var bind = opt.bind;
  if (bind) {
    for (var name in opt) {
      if (name.match(/^on[a-zA-Z0-9]+$/)) {
        (function (fname, fn) {
          opt[fname] = function f() {
            fn.apply(bind, Array.prototype.slice.call(arguments));
          };
        })(name, opt[name]);
      }
    }
  }

  return new EventsProxy(domElement, opt);
}

function removeEvents(domElement) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  opt = Object.assign({}, DEFAULT_OPTS, opt);

  var bind = opt.bind;
  if (bind) {
    for (var name in opt) {
      if (name.match(/^on[a-zA-Z0-9]+$/)) {
        (function (fname, fn) {
          opt[fname] = function f() {
            fn.apply(bind, Array.prototype.slice.call(arguments));
          };
        })(name, opt[name]);
      }
    }
  }

  return new EventsProxy(domElement, opt);
}
//# sourceMappingURL=add-events.js.map

/***/ }),
/* 194 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__add_events__ = __webpack_require__(193);
/* unused harmony reexport addEvents */

//# sourceMappingURL=index.js.map

/***/ }),
/* 195 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_shader_modules__ = __webpack_require__(38);
/* unused harmony reexport registerShaderModules */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_assemble_shaders__ = __webpack_require__(85);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__lib_assemble_shaders__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lib_shader_cache__ = __webpack_require__(86);
/* unused harmony reexport ShaderCache */



//# sourceMappingURL=index.js.map

/***/ }),
/* 196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export checkRendererVendor */
/* harmony export (immutable) */ __webpack_exports__["a"] = getPlatformShaderDefines;
/* harmony export (immutable) */ __webpack_exports__["b"] = getVersionDefines;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_context_features__ = __webpack_require__(26);



function checkRendererVendor(debugInfo, gpuVendor) {
  var vendor = debugInfo.vendor,
      renderer = debugInfo.renderer;

  var result = void 0;
  switch (gpuVendor) {
    case 'nvidia':
      result = vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i);
      break;
    case 'intel':
      result = vendor.match(/INTEL/i) || renderer.match(/INTEL/i);
      break;
    case 'amd':
      result = vendor.match(/AMD/i) || renderer.match(/AMD/i) || vendor.match(/ATI/i) || renderer.match(/ATI/i);
      break;
    default:
      result = false;
  }
  return result;
}

function getPlatformShaderDefines(gl) {
  /* eslint-disable */
  var platformDefines = '';
  var debugInfo = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl__["getContextInfo"])(gl);

  if (checkRendererVendor(debugInfo, 'nvidia')) {
    platformDefines += '#define NVIDIA_GPU\n#define NVIDIA_FP64_WORKAROUND 1\n#define NVIDIA_EQUATION_WORKAROUND 1\n';
  } else if (checkRendererVendor(debugInfo, 'intel')) {
    platformDefines += '#define INTEL_GPU\n#define INTEL_FP64_WORKAROUND 1\n#define NVIDIA_EQUATION_WORKAROUND 1\n#define INTEL_TAN_WORKAROUND 1\n';
  } else if (checkRendererVendor(debugInfo, 'amd')) {
    platformDefines += '#define AMD_GPU\n';
  } else {
    platformDefines += '#define DEFAULT_GPU\n#define INTEL_TAN_WORKAROUND 1\n';
  }

  return platformDefines;
}

function getVersionDefines(gl) {
  var versionDefines = '// Defines for shader portability\n#if (__VERSION__ > 120)\n# define attribute in\n# define varying out\n# define FRAG_DEPTH\n# define DERIVATIVES\n# define DRAW_BUFFERS\n# define TEXTURE_LOD\n#else\n// # define in attribute\n// # define out varying\n#endif // __VERSION\n';

  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["b" /* hasFeature */])(gl, __WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["c" /* FEATURES */].GLSL_FRAG_DEPTH)) {
    versionDefines += '// FRAG_DEPTH => gl_FragDepth is available\n#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n# define FRAG_DEPTH\n# define gl_FragDepth gl_FragDepthEXT\n#endif\n';
  }
  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["b" /* hasFeature */])(gl, __WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["c" /* FEATURES */].GLSL_DERIVATIVES)) {
    versionDefines += '// DERIVATIVES => dxdF, dxdY and fwidth are available\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n# define DERIVATIVES\n#endif\n';
  }
  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["b" /* hasFeature */])(gl, __WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["c" /* FEATURES */].GLSL_FRAG_DATA)) {
    versionDefines += '// DRAW_BUFFERS => gl_FragData[] is available\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers : require\n#define DRAW_BUFFERS\n#endif\n';
  }
  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["b" /* hasFeature */])(gl, __WEBPACK_IMPORTED_MODULE_1__webgl_context_features__["c" /* FEATURES */].GLSL_TEXTURE_LOD)) {
    versionDefines += '// TEXTURE_LOD => texture2DLod etc are available\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n# define TEXTURE_LOD\n#define texture2DLod texture2DLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define textureCubeLod textureCubeLodEXT\n#define texture2DGrad texture2DGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define textureCubeGrad textureCubeGradEXT\n#endif\n';
  }
  return versionDefines;
}
//# sourceMappingURL=platform-defines.js.map

/***/ }),
/* 197 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Minimal texture (diffuse map) support

/* eslint-disable camelcase */
var DEFAULT_MODULE_OPTIONS = {
  diffuseTexture: null,
  diffuseColor: [0.5, 0.5, 0.5, 1]
};

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;

  var uniforms = {};
  if (opts.diffuseTexture !== undefined) {
    uniforms.diffuse_uHasTexture = Boolean(opts.diffuseTexture);
    uniforms.diffuse_uTexture = opts.diffuseTexture;
  }
  if (opts.diffuseColor !== undefined) {
    uniforms.diffuse_uColor = opts.diffuseColor;
  }
  return uniforms;
}

var vs = 'varying vec2 diffuse_vTexCoord;\n\n/* Set the UV coordinate from attributes */\nvoid diffuse_setTextureCoordinate(vec2 uv) {\n  diffuse_vTexCoord = uv;\n}\n';

var fs = 'uniform vec4 diffuse_uColor;\nuniform bool diffuse_uHasTexture;\nuniform sampler2D diffuse_uTexture;\n\nvarying vec2 diffuse_vTexCoord;\n\n// Gets diffuse color of material from uniform\n// If we have a standard (diffuse) texture, set color to texture\n// return (vec4) - rgba\n//\nvec4 diffuse_getColor() {\n  vec2 texCoord = diffuse_vTexCoord;\n  return diffuse_uHasTexture ?\n    texture2D(diffuse_uTexture, vec2(texCoord.s, texCoord.t)) :\n    diffuse_uColor;\n}\n\nvec4 diffuse_filterColor(vec4 color) {\n  return diffuse_getColor();\n}\n';

/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'diffuse',
  getUniforms: getUniforms,
  vs: vs,
  fs: fs
});
//# sourceMappingURL=diffuse.js.map

/***/ }),
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__project_project__ = __webpack_require__(87);
// Cheap lighting - single directional light, single dot product, one uniform



/* eslint-disable camelcase */
var DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);

var DEFAULT_MODULE_OPTIONS = {
  lightDirection: DEFAULT_LIGHT_DIRECTION
};

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;

  var uniforms = {};
  if (opts.lightDirection) {
    uniforms.dirlight_uLightDirection = opts.lightDirection;
  }
  return uniforms;
}

// TODO - reuse normal from geometry module
var vs = null;

var fs = 'uniform vec3 dirlight_uLightDirection;\n\n/*\n * Returns color attenuated by angle from light source\n */\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n';

/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'dirlight',
  vs: vs,
  fs: fs,
  getUniforms: getUniforms,
  dependencies: [__WEBPACK_IMPORTED_MODULE_0__project_project__["a" /* default */]]
});
//# sourceMappingURL=dirlight.js.map

/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var fp32shader = '#ifdef INTEL_TAN_WORKAROUND\n\n// All these functions are for substituting tan() function from Intel GPU only\nconst float TWO_PI = 6.2831854820251465;\nconst float PI_2 = 1.5707963705062866;\nconst float PI_16 = 0.1963495463132858;\n\nconst float SIN_TABLE_0 = 0.19509032368659973;\nconst float SIN_TABLE_1 = 0.3826834261417389;\nconst float SIN_TABLE_2 = 0.5555702447891235;\nconst float SIN_TABLE_3 = 0.7071067690849304;\n\nconst float COS_TABLE_0 = 0.9807852506637573;\nconst float COS_TABLE_1 = 0.9238795042037964;\nconst float COS_TABLE_2 = 0.8314695954322815;\nconst float COS_TABLE_3 = 0.7071067690849304;\n\nconst float INVERSE_FACTORIAL_3 = 1.666666716337204e-01; // 1/3!\nconst float INVERSE_FACTORIAL_5 = 8.333333767950535e-03; // 1/5!\nconst float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04; // 1/7!\nconst float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06; // 1/9!\n\nfloat sin_taylor_fp32(float a) {\n  float r, s, t, x;\n\n  if (a == 0.0) {\n    return 0.0;\n  }\n\n  x = -a * a;\n  s = a;\n  r = a;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_3;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_5;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_7;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_9;\n  s = s + t;\n\n  return s;\n}\n\nvoid sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {\n  if (a == 0.0) {\n    sin_t = 0.0;\n    cos_t = 1.0;\n  }\n  sin_t = sin_taylor_fp32(a);\n  cos_t = sqrt(1.0 - sin_t * sin_t);\n}\n\nfloat tan_taylor_fp32(float a) {\n    float sin_a;\n    float cos_a;\n\n    if (a == 0.0) {\n        return 0.0;\n    }\n\n    // 2pi range reduction\n    float z = floor(a / TWO_PI);\n    float r = a - TWO_PI * z;\n\n    float t;\n    float q = floor(r / PI_2 + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return 0.0 / 0.0;\n    }\n\n    t = r - PI_2 * q;\n\n    q = floor(t / PI_16 + 0.5);\n    int k = int(q);\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return 0.0 / 0.0;\n    } else {\n        t = t - PI_16 * q;\n    }\n\n    float u = 0.0;\n    float v = 0.0;\n\n    float sin_t, cos_t;\n    float s, c;\n    sincos_taylor_fp32(t, sin_t, cos_t);\n\n    if (k == 0) {\n        s = sin_t;\n        c = cos_t;\n    } else {\n        if (abs(float(abs_k) - 1.0) < 0.5) {\n            u = COS_TABLE_0;\n            v = SIN_TABLE_0;\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\n            u = COS_TABLE_1;\n            v = SIN_TABLE_1;\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\n            u = COS_TABLE_2;\n            v = SIN_TABLE_2;\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\n            u = COS_TABLE_3;\n            v = SIN_TABLE_3;\n        }\n        if (k > 0) {\n            s = u * sin_t + v * cos_t;\n            c = u * cos_t - v * sin_t;\n        } else {\n            s = u * sin_t - v * cos_t;\n            c = u * cos_t + v * sin_t;\n        }\n    }\n\n    if (j == 0) {\n        sin_a = s;\n        cos_a = c;\n    } else if (j == 1) {\n        sin_a = c;\n        cos_a = -s;\n    } else if (j == -1) {\n        sin_a = -c;\n        cos_a = s;\n    } else {\n        sin_a = -s;\n        cos_a = -c;\n    }\n    return sin_a / cos_a;\n}\n#endif\n\nfloat tan_fp32(float a) {\n#ifdef INTEL_TAN_WORKAROUND\n  return tan_taylor_fp32(a);\n#else\n  return tan(a);\n#endif\n}\n';

/* unused harmony default export */ var _unused_webpack_default_export = ({
    name: 'fp32',
    vs: fp32shader,
    fs: null
});
//# sourceMappingURL=fp32.js.map

/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* harmony default export */ __webpack_exports__["a"] = ("uniform float ONE;\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\nvec2 split(float a) {\n  const float SPLIT = 4097.0;\n  float t = a * SPLIT;\n  float a_hi = t * ONE - (t - a);\n  float a_lo = a * ONE - a_hi;\n  return vec2(a_hi, a_lo);\n}\n#else\nvec2 split(float a) {\n  const float SPLIT = 4097.0;\n  float t = a * SPLIT;\n  float a_hi = t - (t - a);\n  float a_lo = a - a_hi;\n  return vec2(a_hi, a_lo);\n}\n#endif\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\nvec2 quickTwoSum(float a, float b) {\n  float sum = (a + b) * ONE;\n  float err = b - (sum - a) * ONE;\n  return vec2(sum, err);\n}\n#else\nvec2 quickTwoSum(float a, float b) {\n  float sum = a + b;\n  float err = b - (sum - a);\n  return vec2(sum, err);\n}\n#endif\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\n\n/* The purpose of this workaround is to prevent shader compilers from\noptimizing away necessary arithmetic operations by swapping their sequences\nor transform the equation to some 'equivalent' from.\n\nThe method is to multiply an artifical variable, ONE, which will be known to\nthe compiler to be 1 only at runtime. The whole expression is then represented\nas a polynomial with respective to ONE. In the coefficients of all terms, only one a\nand one b should appear\n\nerr = (a + b) * ONE^6 - a * ONE^5 - (a + b) * ONE^4 + a * ONE^3 - b - (a + b) * ONE^2 + a * ONE\n*/\n\nvec2 twoSum(float a, float b) {\n  float s = (a + b);\n  float v = (s * ONE - a) * ONE;\n  float err = (a - (s - v) * ONE) * ONE * ONE * ONE + (b - v);\n  return vec2(s, err);\n}\n#else\nvec2 twoSum(float a, float b) {\n  float s = a + b;\n  float v = s - a;\n  float err = (a - (s - v)) + (b - v);\n  return vec2(s, err);\n}\n#endif\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\n/* Same thing as in twoSum() */\nvec2 twoSub(float a, float b) {\n  float s = (a - b);\n  float v = (s * ONE - a) * ONE;\n  float err = (a - (s - v) * ONE) * ONE * ONE * ONE - (b + v);\n  return vec2(s, err);\n}\n#else\nvec2 twoSub(float a, float b) {\n  float s = a - b;\n  float v = s - a;\n  float err = (a - (s - v)) - (b + v);\n  return vec2(s, err);\n}\n#endif\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\nvec2 twoSqr(float a) {\n  float prod = a * a;\n  vec2 a_fp64 = split(a);\n\n  float err = ((a_fp64.x * a_fp64.x - prod) * ONE + 2.0 * a_fp64.x *\n    a_fp64.y * ONE * ONE) + a_fp64.y * a_fp64.y * ONE * ONE * ONE;\n  return vec2(prod, err);\n}\n#else\nvec2 twoSqr(float a) {\n  float prod = a * a;\n  vec2 a_fp64 = split(a);\n\n  float err = ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;\n  return vec2(prod, err);\n}\n#endif\n\nvec2 twoProd(float a, float b) {\n  float prod = a * b;\n  vec2 a_fp64 = split(a);\n  vec2 b_fp64 = split(b);\n  float err = ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +\n    a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;\n  return vec2(prod, err);\n}\n\nvec2 sum_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s = twoSum(a.x, b.x);\n  t = twoSum(a.y, b.y);\n  s.y += t.x;\n  s = quickTwoSum(s.x, s.y);\n  s.y += t.y;\n  s = quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 sub_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s = twoSub(a.x, b.x);\n  t = twoSub(a.y, b.y);\n  s.y += t.x;\n  s = quickTwoSum(s.x, s.y);\n  s.y += t.y;\n  s = quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 mul_fp64(vec2 a, vec2 b) {\n  vec2 prod = twoProd(a.x, b.x);\n  // y component is for the error\n  prod.y += a.x * b.y;\n  prod.y += a.y * b.x;\n  prod = quickTwoSum(prod.x, prod.y);\n  return prod;\n}\n\nvec2 div_fp64(vec2 a, vec2 b) {\n  float xn = 1.0 / b.x;\n  vec2 yn = a * xn;\n  float diff = (sub_fp64(a, mul_fp64(b, yn))).x;\n  vec2 prod = twoProd(xn, diff);\n  return sum_fp64(yn, prod);\n}\n\nvec2 sqrt_fp64(vec2 a) {\n  if (a.x == 0.0 && a.y == 0.0) return vec2(0.0, 0.0);\n  if (a.x < 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);\n\n  float x = 1.0 / sqrt(a.x);\n  float yn = a.x * x;\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  vec2 yn_sqr = twoSqr(yn) * ONE;\n#else\n  vec2 yn_sqr = twoSqr(yn);\n#endif\n  float diff = sub_fp64(a, yn_sqr).x;\n  vec2 prod = twoProd(x * 0.5, diff);\n  return sum_fp64(vec2(yn, 0.0), prod);\n}\n");
//# sourceMappingURL=fp64-arithmetic.glsl.js.map

/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/* harmony default export */ __webpack_exports__["a"] = ("const vec2 E_FP64 = vec2(2.7182817459106445e+00, 8.254840366817007e-08);\nconst vec2 LOG2_FP64 = vec2(0.6931471824645996e+00, -1.9046542121259336e-09);\nconst vec2 PI_FP64 = vec2(3.1415927410125732, -8.742278012618954e-8);\nconst vec2 TWO_PI_FP64 = vec2(6.2831854820251465, -1.7484556025237907e-7);\nconst vec2 PI_2_FP64 = vec2(1.5707963705062866, -4.371139006309477e-8);\nconst vec2 PI_4_FP64 = vec2(0.7853981852531433, -2.1855695031547384e-8);\nconst vec2 PI_16_FP64 = vec2(0.19634954631328583, -5.463923757886846e-9);\nconst vec2 PI_16_2_FP64 = vec2(0.39269909262657166, -1.0927847515773692e-8);\nconst vec2 PI_16_3_FP64 = vec2(0.5890486240386963, -1.4906100798128818e-9);\nconst vec2 PI_180_FP64 = vec2(0.01745329238474369, 1.3519960498364902e-10);\n\nconst vec2 SIN_TABLE_0_FP64 = vec2(0.19509032368659973, -1.6704714833615242e-9);\nconst vec2 SIN_TABLE_1_FP64 = vec2(0.3826834261417389, 6.22335089017767e-9);\nconst vec2 SIN_TABLE_2_FP64 = vec2(0.5555702447891235, -1.1769521357507529e-8);\nconst vec2 SIN_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617041793133e-8);\n\nconst vec2 COS_TABLE_0_FP64 = vec2(0.9807852506637573, 2.9739473106360492e-8);\nconst vec2 COS_TABLE_1_FP64 = vec2(0.9238795042037964, 2.8307490351764386e-8);\nconst vec2 COS_TABLE_2_FP64 = vec2(0.8314695954322815, 1.6870263741530778e-8);\nconst vec2 COS_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617152815436e-8);\n\nconst vec2 INVERSE_FACTORIAL_3_FP64 = vec2(1.666666716337204e-01, -4.967053879312289e-09); // 1/3!\nconst vec2 INVERSE_FACTORIAL_4_FP64 = vec2(4.16666679084301e-02, -1.2417634698280722e-09); // 1/4!\nconst vec2 INVERSE_FACTORIAL_5_FP64 = vec2(8.333333767950535e-03, -4.34617203337595e-10); // 1/5!\nconst vec2 INVERSE_FACTORIAL_6_FP64 = vec2(1.3888889225199819e-03, -3.3631094437103215e-11); // 1/6!\nconst vec2 INVERSE_FACTORIAL_7_FP64 = vec2(1.9841270113829523e-04,  -2.725596874933456e-12); // 1/7!\nconst vec2 INVERSE_FACTORIAL_8_FP64 = vec2(2.4801587642286904e-05, -3.406996025904184e-13); // 1/8!\nconst vec2 INVERSE_FACTORIAL_9_FP64 = vec2(2.75573188446287533e-06, 3.7935713937038186e-14); // 1/9!\nconst vec2 INVERSE_FACTORIAL_10_FP64 = vec2(2.755731998149713e-07, -7.575112367869873e-15); // 1/10!\n\nfloat nint(float d) {\n    if (d == floor(d)) return d;\n    return floor(d + 0.5);\n}\n\nvec2 nint_fp64(vec2 a) {\n    float hi = nint(a.x);\n    float lo;\n    vec2 tmp;\n    if (hi == a.x) {\n        lo = nint(a.y);\n        tmp = quickTwoSum(hi, lo);\n    } else {\n        lo = 0.0;\n        if (abs(hi - a.x) == 0.5 && a.y < 0.0) {\n            hi -= 1.0;\n        }\n        tmp = vec2(hi, lo);\n    }\n    return tmp;\n}\n\n/* k_power controls how much range reduction we would like to have\nRange reduction uses the following method:\nassume a = k_power * r + m * log(2), k and m being integers.\nSet k_power = 4 (we can choose other k to trade accuracy with performance.\nwe only need to calculate exp(r) and using exp(a) = 2^m * exp(r)^k_power;\n*/\n\nvec2 exp_fp64(vec2 a) {\n  // We need to make sure these two numbers match\n  // as bit-wise shift is not available in GLSL 1.0\n  const int k_power = 4;\n  const float k = 16.0;\n\n  const float inv_k = 1.0 / k;\n\n  if (a.x <= -88.0) return vec2(0.0, 0.0);\n  if (a.x >= 88.0) return vec2(1.0 / 0.0, 1.0 / 0.0);\n  if (a.x == 0.0 && a.y == 0.0) return vec2(1.0, 0.0);\n  if (a.x == 1.0 && a.y == 0.0) return E_FP64;\n\n  float m = floor(a.x / LOG2_FP64.x + 0.5);\n  vec2 r = sub_fp64(a, mul_fp64(LOG2_FP64, vec2(m, 0.0))) * inv_k;\n  vec2 s, t, p;\n\n  p = mul_fp64(r, r);\n  s = sum_fp64(r, p * 0.5);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_3_FP64);\n\n  s = sum_fp64(s, t);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_4_FP64);\n\n  s = sum_fp64(s, t);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_5_FP64);\n\n  // s = sum_fp64(s, t);\n  // p = mul_fp64(p, r);\n  // t = mul_fp64(p, INVERSE_FACTORIAL_6_FP64);\n\n  // s = sum_fp64(s, t);\n  // p = mul_fp64(p, r);\n  // t = mul_fp64(p, INVERSE_FACTORIAL_7_FP64);\n\n  s = sum_fp64(s, t);\n\n\n  // At this point, s = exp(r) - 1; but after following 4 recursions, we will get exp(r) ^ 512 - 1.\n  for (int i = 0; i < k_power; i++) {\n    s = sum_fp64(s * 2.0, mul_fp64(s, s));\n  }\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  s = sum_fp64(s, vec2(ONE, 0.0));\n#else\n  s = sum_fp64(s, vec2(1.0, 0.0));\n#endif\n\n  return s * pow(2.0, m);\n//   return r;\n}\n\nvec2 log_fp64(vec2 a)\n{\n  if (a.x == 1.0 && a.y == 0.0) return vec2(0.0, 0.0);\n  if (a.x <= 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);\n  vec2 x = vec2(log(a.x), 0.0);\n  vec2 s;\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  s = vec2(ONE, 0.0);\n#else\n  s = vec2(1.0, 0.0);\n#endif\n\n  x = sub_fp64(sum_fp64(x, mul_fp64(a, exp_fp64(-x))), s);\n  return x;\n}\n\nvec2 sin_taylor_fp64(vec2 a) {\n  vec2 r, s, t, x;\n\n  if (a.x == 0.0 && a.y == 0.0) {\n    return vec2(0.0, 0.0);\n  }\n\n  x = -mul_fp64(a, a);\n  s = a;\n  r = a;\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_3_FP64);\n  s = sum_fp64(s, t);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_5_FP64);\n  s = sum_fp64(s, t);\n\n  /* keep the following commented code in case we need them\n  for extra accuracy from the Taylor expansion*/\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_7_FP64);\n  // s = sum_fp64(s, t);\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_9_FP64);\n  // s = sum_fp64(s, t);\n\n  return s;\n}\n\nvec2 cos_taylor_fp64(vec2 a) {\n  vec2 r, s, t, x;\n\n  if (a.x == 0.0 && a.y == 0.0) {\n    return vec2(1.0, 0.0);\n  }\n\n  x = -mul_fp64(a, a);\n  r = x;\n  s = sum_fp64(vec2(1.0, 0.0), r * 0.5);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_4_FP64);\n  s = sum_fp64(s, t);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_6_FP64);\n  s = sum_fp64(s, t);\n\n  /* keep the following commented code in case we need them\n  for extra accuracy from the Taylor expansion*/\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_8_FP64);\n  // s = sum_fp64(s, t);\n\n  // r = mul_fp64(r, x);\n  // t = mul_fp64(r, INVERSE_FACTORIAL_10_FP64);\n  // s = sum_fp64(s, t);\n\n  return s;\n}\n\nvoid sincos_taylor_fp64(vec2 a, out vec2 sin_t, out vec2 cos_t) {\n  if (a.x == 0.0 && a.y == 0.0) {\n    sin_t = vec2(0.0, 0.0);\n    cos_t = vec2(1.0, 0.0);\n  }\n\n  sin_t = sin_taylor_fp64(a);\n  cos_t = sqrt_fp64(sub_fp64(vec2(1.0, 0.0), mul_fp64(sin_t, sin_t)));\n}\n\nvec2 sin_fp64(vec2 a) {\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(0.0, 0.0);\n    }\n\n    // 2pi range reduction\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n\n    if (k == 0) {\n        if (j == 0) {\n            return sin_taylor_fp64(t);\n        } else if (j == 1) {\n            return cos_taylor_fp64(t);\n        } else if (j == -1) {\n            return -cos_taylor_fp64(t);\n        } else {\n            return -sin_taylor_fp64(t);\n        }\n    }\n\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\n    if (abs(float(abs_k) - 1.0) < 0.5) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs(float(abs_k) - 2.0) < 0.5) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs(float(abs_k) - 3.0) < 0.5) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs(float(abs_k) - 4.0) < 0.5) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#else\n    if (abs_k == 1) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs_k == 2) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs_k == 3) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs_k == 4) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#endif\n\n    vec2 sin_t, cos_t;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n\n\n    vec2 result = vec2(0.0, 0.0);\n    if (j == 0) {\n        if (k > 0) {\n            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        }\n    } else if (j == 1) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    } else if (j == -1) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        } else {\n            result = -sum_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        }\n    } else {\n        if (k > 0) {\n            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));\n        }\n    }\n\n    return result;\n}\n\nvec2 cos_fp64(vec2 a) {\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(1.0, 0.0);\n    }\n\n    // 2pi range reduction\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n\n    if (k == 0) {\n        if (j == 0) {\n            return cos_taylor_fp64(t);\n        } else if (j == 1) {\n            return -sin_taylor_fp64(t);\n        } else if (j == -1) {\n            return sin_taylor_fp64(t);\n        } else {\n            return -cos_taylor_fp64(t);\n        }\n    }\n\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\n    if (abs(float(abs_k) - 1.0) < 0.5) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs(float(abs_k) - 2.0) < 0.5) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs(float(abs_k) - 3.0) < 0.5) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs(float(abs_k) - 4.0) < 0.5) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#else\n    if (abs_k == 1) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs_k == 2) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs_k == 3) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs_k == 4) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#endif\n\n    vec2 sin_t, cos_t;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n    vec2 result = vec2(0.0, 0.0);\n    if (j == 0) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    } else if (j == 1) {\n        if (k > 0) {\n            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));\n        }\n    } else if (j == -1) {\n        if (k > 0) {\n            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        }\n    } else {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        } else {\n            result = -sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    }\n\n    return result;\n}\n\nvec2 tan_fp64(vec2 a) {\n    vec2 sin_a;\n    vec2 cos_a;\n\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(0.0, 0.0);\n    }\n\n    // 2pi range reduction\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n    int abs_k = int(abs(float(k)));\n\n    // We just can't get PI/16 * 3.0 very accurately.\n    // so let's just store it\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n    vec2 sin_t, cos_t;\n    vec2 s, c;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n    if (k == 0) {\n        s = sin_t;\n        c = cos_t;\n    } else {\n#if defined(NVIDIA_EQUATION_WORKAROUND) || defined(INTEL_EQUATION_WORKAROUND)\n        if (abs(float(abs_k) - 1.0) < 0.5) {\n            u = COS_TABLE_0_FP64;\n            v = SIN_TABLE_0_FP64;\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\n            u = COS_TABLE_1_FP64;\n            v = SIN_TABLE_1_FP64;\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\n            u = COS_TABLE_2_FP64;\n            v = SIN_TABLE_2_FP64;\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\n            u = COS_TABLE_3_FP64;\n            v = SIN_TABLE_3_FP64;\n        }\n#else\n        if (abs_k == 1) {\n            u = COS_TABLE_0_FP64;\n            v = SIN_TABLE_0_FP64;\n        } else if (abs_k == 2) {\n            u = COS_TABLE_1_FP64;\n            v = SIN_TABLE_1_FP64;\n        } else if (abs_k == 3) {\n            u = COS_TABLE_2_FP64;\n            v = SIN_TABLE_2_FP64;\n        } else if (abs_k == 4) {\n            u = COS_TABLE_3_FP64;\n            v = SIN_TABLE_3_FP64;\n        }\n#endif\n        if (k > 0) {\n            s = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n            c = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            s = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n            c = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    }\n\n    if (j == 0) {\n        sin_a = s;\n        cos_a = c;\n    } else if (j == 1) {\n        sin_a = c;\n        cos_a = -s;\n    } else if (j == -1) {\n        sin_a = -c;\n        cos_a = s;\n    } else {\n        sin_a = -s;\n        cos_a = -c;\n    }\n    return div_fp64(sin_a, cos_a);\n}\n\nvec2 radians_fp64(vec2 degree) {\n  return mul_fp64(degree, PI_180_FP64);\n}\n\nvec2 mix_fp64(vec2 a, vec2 b, float x) {\n  vec2 range = sub_fp64(b, a);\n  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));\n}\n\n// Vector functions\n// vec2 functions\nvoid vec2_sum_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = sum_fp64(a[0], b[0]);\n    out_val[1] = sum_fp64(a[1], b[1]);\n}\n\nvoid vec2_sub_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = sub_fp64(a[0], b[0]);\n    out_val[1] = sub_fp64(a[1], b[1]);\n}\n\nvoid vec2_mul_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = mul_fp64(a[0], b[0]);\n    out_val[1] = mul_fp64(a[1], b[1]);\n}\n\nvoid vec2_div_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = div_fp64(a[0], b[0]);\n    out_val[1] = div_fp64(a[1], b[1]);\n}\n\nvoid vec2_mix_fp64(vec2 x[2], vec2 y[2], float a, out vec2 out_val[2]) {\n  vec2 range[2];\n  vec2_sub_fp64(y, x, range);\n  vec2 portion[2];\n  portion[0] = range[0] * a;\n  portion[1] = range[1] * a;\n  vec2_sum_fp64(x, portion, out_val);\n}\n\nvec2 vec2_length_fp64(vec2 x[2]) {\n  return sqrt_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])));\n}\n\nvoid vec2_normalize_fp64(vec2 x[2], out vec2 out_val[2]) {\n  vec2 length = vec2_length_fp64(x);\n  vec2 length_vec2[2];\n  length_vec2[0] = length;\n  length_vec2[1] = length;\n\n  vec2_div_fp64(x, length_vec2, out_val);\n}\n\nvec2 vec2_distance_fp64(vec2 x[2], vec2 y[2]) {\n  vec2 diff[2];\n  vec2_sub_fp64(x, y, diff);\n  return vec2_length_fp64(diff);\n}\n\nvec2 vec2_dot_fp64(vec2 a[2], vec2 b[2]) {\n  vec2 v[2];\n\n  v[0] = mul_fp64(a[0], b[0]);\n  v[1] = mul_fp64(a[1], b[1]);\n\n  return sum_fp64(v[0], v[1]);\n}\n\n// vec3 functions\nvoid vec3_sub_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {\n  for (int i = 0; i < 3; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvoid vec3_sum_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {\n  for (int i = 0; i < 3; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvec2 vec3_length_fp64(vec2 x[3]) {\n  return sqrt_fp64(sum_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])),\n    mul_fp64(x[2], x[2])));\n}\n\nvec2 vec3_distance_fp64(vec2 x[3], vec2 y[3]) {\n  vec2 diff[3];\n  vec3_sub_fp64(x, y, diff);\n  return vec3_length_fp64(diff);\n}\n\n// vec4 functions\nvoid vec4_fp64(vec4 a, out vec2 out_val[4]) {\n  out_val[0].x = a[0];\n  out_val[0].y = 0.0;\n\n  out_val[1].x = a[1];\n  out_val[1].y = 0.0;\n\n  out_val[2].x = a[2];\n  out_val[2].y = 0.0;\n\n  out_val[3].x = a[3];\n  out_val[3].y = 0.0;\n}\n\nvoid vec4_scalar_mul_fp64(vec2 a[4], vec2 b, out vec2 out_val[4]) {\n  out_val[0] = mul_fp64(a[0], b);\n  out_val[1] = mul_fp64(a[1], b);\n  out_val[2] = mul_fp64(a[2], b);\n  out_val[3] = mul_fp64(a[3], b);\n}\n\nvoid vec4_sum_fp64(vec2 a[4], vec2 b[4], out vec2 out_val[4]) {\n  for (int i = 0; i < 4; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvoid vec4_dot_fp64(vec2 a[4], vec2 b[4], out vec2 out_val) {\n  vec2 v[4];\n\n  v[0] = mul_fp64(a[0], b[0]);\n  v[1] = mul_fp64(a[1], b[1]);\n  v[2] = mul_fp64(a[2], b[2]);\n  v[3] = mul_fp64(a[3], b[3]);\n\n  out_val = sum_fp64(sum_fp64(v[0], v[1]), sum_fp64(v[2], v[3]));\n}\n\nvoid mat4_vec4_mul_fp64(vec2 b[16], vec2 a[4], out vec2 out_val[4]) {\n  vec2 tmp[4];\n\n  for (int i = 0; i < 4; i++)\n  {\n    for (int j = 0; j < 4; j++)\n    {\n      tmp[j] = b[j + i * 4];\n    }\n    vec4_dot_fp64(a, tmp, out_val[i]);\n  }\n}\n");
//# sourceMappingURL=fp64-functions.glsl.js.map

/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export fp64arithmetic */
/* unused harmony export fp64fs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(203);
/* unused harmony reexport fp64ify */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fp64_arithmetic_glsl__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fp64_functions_glsl__ = __webpack_require__(201);
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.






var fp64shader = __WEBPACK_IMPORTED_MODULE_1__fp64_arithmetic_glsl__["a" /* default */] + '\n' + __WEBPACK_IMPORTED_MODULE_2__fp64_functions_glsl__["a" /* default */];

/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'fp64',
  vs: fp64shader,
  fs: null
});

// Arithmetic only
var fp64arithmetic = {
  name: 'fp64-arithmetic',
  vs: '' + __WEBPACK_IMPORTED_MODULE_1__fp64_arithmetic_glsl__["a" /* default */],
  fs: null
};

// Fragment shader fp64
var fp64fs = {
  name: 'fp64-fs',
  vs: null,
  fs: fp64shader
};
//# sourceMappingURL=fp64.js.map

/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export fp64ify */
function fp64ify(a) {
  var hiPart = Math.fround(a);
  var loPart = a - hiPart;
  return [hiPart, loPart];
}
//# sourceMappingURL=utils.js.map

/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("  // empty\n");
//# sourceMappingURL=lighting-common.glsl.js.map

/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#ifdef GL_ES\nprecision highp float;\n#endif\n\n#define LIGHT_MAX 4\n\nvarying vec3 lighting_vLightWeighting;\n\nvec4 lighting_apply(vec4 color) {\n  // set color from texture\n  return vec4(color.rgb * lighting_vLightWeighting, color.a);\n}\n\n// spec-map.fs\n\nuniform mat4 viewMatrix;\n\n\nvarying vec4 lighting_vColor;\nvarying vec4 lighting_vTransformedNormal;\nvarying vec4 lighting_vPosition;\n\nuniform float shininess;\nuniform bool enableSpecularMap;\nuniform bool enableLights;\n\nuniform vec3 ambientColor;\nuniform vec3 directionalColor;\nuniform vec3 lightingDirection;\n\nuniform vec3 lighting_uPointLocation[LIGHT_MAX];\nuniform vec3 lighting_uPointColor[LIGHT_MAX];\nuniform float lighting_uPointSpecularEnable[LIGHT_MAX];\nuniform vec3 lighting_uPointSpecularColor[LIGHT_MAX];\nuniform int numberPoints;\n\n\nvec3 lighting__calculate_light_weighting() {\n\treturn lighting__calculate_light_weighting(shininess);\n}\n\nvec3 lighting__calculate_light_weighting(shininess) {\n  vec3 normal = vTransformedNormal.xyz;\n  vec3 eyeDirection = normalize(-vPosition.xyz);\n\n  vec3 specularLight = vec3(0., 0., 0.);\n  vec3 diffuseLight = vec3(0., 0., 0.);\n\n  for (int i = 0; i < LIGHT_MAX; i++) {\n    if (i < numberPoints) {\n      vec3 transformedPointLocation = (viewMatrix * vec4(lighting_uPointLocation[i], 1.0)).xyz;\n      vec3 lightDirection = normalize(transformedPointLocation - vPosition.xyz);\n\n      if (lighting_uPointSpecularEnable > 0.) {\n        vec3 reflectionDirection = reflect(-lightDirection, normal);\n        float specularLightWeighting =\n          pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininessVal);\n        specularLight += specularLightWeighting * lighting_uPointSpecularColor[i];\n      }\n\n      float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);\n      diffuseLight += diffuseLightWeighting * lighting_uPointColor[i];\n    } else {\n      break;\n    }\n  }\n\n  return ambientColor + diffuseLight + specularLight;\n}\n\nvoid lighting_filterColor(fragmentColor) {\n  if (!lighting_enable) {\n  \treturn fragmentColor;\n  } else {\n  \tvec3 lightWeighting = lighting__calculate_light_weighting();\n  \treturn vec4(fragmentColor.rgb * lightWeighting, fragmentColor.a);\n  }\n}\n\n// render-tex.fs\n\nuniform vec3 material_uAmbientColor;\nuniform vec3 material_uDiffuseColor;\nuniform vec3 material_uSpecularColor;\nuniform vec3 material_uEmissiveColor;\n\nuniform bool hasTexture1;\nuniform sampler2D sampler1;\n\nuniform mat4 viewMatrix;\n\nvoid apply_lighting(color) {\n  vec3 ambientLightWeighting = ambientColor;\n\n  vec3 normal = vTransformedNormal.xyz;\n  vec3 eyeDirection = normalize(-vPosition.xyz);\n\n  vec3 specularLight = vec3(0.0, 0.0, 0.0);\n  vec3 diffuseLight = vec3(0.0, 0.0, 0.0);\n\n  for (int i = 0; i < LIGHT_MAX; i++) {\n    if (i < numberPoints) {\n      vec3 transformedPointLocation = (viewMatrix * vec4(pointLocation[i], 1.0)).xyz;\n      vec3 lightDirection = normalize(transformedPointLocation - vPosition.xyz);\n\n      if (enableSpecularHighlights) {\n        vec3 reflectionDirection = reflect(-lightDirection, normal);\n        float specularLightWeighting =\n          pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininess);\n        specularLight += specularLightWeighting * pointSpecularColor[i];\n      }\n\n      float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);\n      diffuseLight += diffuseLightWeighting * pointColor[i];\n    } else {\n        break;\n    }\n  }\n\n  vec3 matAmbientColor = material_uAmbientColor * color.rgb;\n  vec3 matDiffuseColor = material_uDiffuseColor * color.rgb;\n  vec3 matSpecularColor = material_uSpecularColor * color.rgb;\n  vec3 matEmissiveColor = material_uEmissiveColor * color.rgb;\n  gl_FragColor = vec4(\n    matAmbientColor * ambientLightWeighting\n    + matDiffuseColor * diffuseLightWeighting\n    + matSpecularColor * specularLightWeighting\n    + matEmissiveColor,\n    color.a\n  );\n}\n\n/// frag-lighting\n\n  vec3 lightWeighting;\n  if (!enableLights) {\n    lightWeighting = vec3(1.0, 1.0, 1.0);\n  } else {\n    vec3 lightDirection;\n    float specularLightWeighting = 0.0;\n    float diffuseLightWeighting = 0.0;\n    vec3  specularLight = vec3(0.0, 0.0, 0.0);\n    vec3  diffuseLight = vec3(0.0, 0.0, 0.0);\n\n    vec3 transformedPointLocation;\n    vec3 normal = vTransformedNormal.xyz;\n\n    vec3 eyeDirection = normalize(-vPosition.xyz);\n    vec3 reflectionDirection;\n\n    vec3 pointWeight = vec3(0.0, 0.0, 0.0);\n\n    for (int i = 0; i < LIGHT_MAX; i++) {\n      if (i < numberPoints) {\n        transformedPointLocation = (viewMatrix * vec4(pointLocation[i], 1.0)).xyz;\n        lightDirection = normalize(transformedPointLocation - vPosition.xyz);\n\n        if (enableSpecular[i] > 0.0) {\n          reflectionDirection = reflect(-lightDirection, normal);\n          specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininess);\n          specularLight += specularLightWeighting * pointSpecularColor[i];\n        }\n\n        diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);\n        diffuseLight += diffuseLightWeighting * pointColor[i];\n      } else {\n        break;\n      }\n    }\n\n    lightWeighting = ambientColor + diffuseLight + specularLight;\n  }\n\n// reflection / refraction configs\nuniform float reflection;\nuniform float refraction;\n\n///\n  // has cube texture then apply reflection\n  // if (hasTextureCube1) {\n  //   vec3 nReflection = normalize(vReflection);\n  //   vec3 reflectionValue;\n  //   if (refraction > 0.0) {\n  //    reflectionValue = refract(nReflection, vNormal.xyz, refraction);\n  //   } else {\n  //    reflectionValue = -reflect(nReflection, vNormal.xyz);\n  //   }\n\n  //   // TODO(nico): check whether this is right.\n  //   vec4 cubeColor = textureCube(samplerCube1,\n  //       vec3(-reflectionValue.x, -reflectionValue.y, reflectionValue.z));\n  //   gl_FragColor = vec4(mix(gl_FragColor.xyz, cubeColor.xyz, reflection), 1.0);\n  // }\n");
//# sourceMappingURL=lighting-fragment.glsl.js.map

/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define LIGHT_MAX 4\n\n/*\n// lighting configuration\nuniform bool enableLights;\nuniform vec3 ambientColor;\nuniform vec3 directionalColor;\nuniform vec3 lightingDirection;\n\n// point lights configuration\nuniform vec3 pointLocation[LIGHT_MAX];\nuniform vec3 pointColor[LIGHT_MAX];\nuniform int numberPoints;\n\n// reflection / refraction configuration\nuniform bool useReflection;\n*/\n\nuniform bool lighting_uEnableLights;\nuniform vec3 lighting_uAmbientColor;\nuniform vec3 lighting_uDirection;\nuniform vec3 lighting_uDirectionalColor;\n\n// point lights configuration\nuniform int  lighting_uPointCount;\nuniform vec3 lighting_uPointLocation[LIGHT_MAX];\nuniform vec3 lighting_uPointColor[LIGHT_MAX];\n\n// reflection / refraction configuration\nuniform bool lighting_uEnableReflections;\n\n// varyings\nvarying vec4 lighting_vPosition;\nvarying vec4 lighting_vNormal;\nvarying vec3 lighting_vColor;\nvarying vec3 lighting_vLightWeighting;\nvarying vec3 lighting_vReflection;\n\nvoid lighting_setPositionAndNormal(vec3 position, vec3 normal) {\n  lighting_vPosition = worldMatrix * vec4(position, 1.);\n  lighting_vNormal = worldInverseTransposeMatrix * vec4(normal, 1.);;\n}\n\nvoid lighting__getLightWeigting() {\n  float directionalLightWeighting = max(dot(lighting_vNormal.xyz, lighting_uDirection), 0.);\n  vec3 pointWeight = vec3(0., 0., 0.);\n  for (int i = 0; i < LIGHT_MAX; i++) {\n    if (i < numberPoints) {\n      vec4 mvLightPosition = viewMatrix * vec4(lighting_uPointLocation[i], 1.);\n      vec3 pointLightDirection = normalize(mvLightPosition.xyz - lighting_vPosition.xyz);\n      pointWeight += max(dot(lighting_vNormal.xyz, pointLightDirection), 0.) * pointColor[i];\n     } else {\n       break;\n     }\n   }\n   return ambientColor + (directionalColor * directionalLightWeighting) + pointWeight;\n}\n\nvoid lighting_apply(vec3 position, vec3 normal) {\n  lighting_setPositionAndNormal(position, normal);\n\n  // lighting code\n  if(!lighting_uEnableLights) {\n    lighting_vLightWeighting = vec3(1., 1., 1.);\n  } else {\n    lighting_vLightWeighting = lighting__getLightWeighting();\n  }\n}\n\nvoid lighting_set_reflection(vec3 position) {\n    // refraction / reflection code\n  if (lighting_uEnableReflections) {\n    lighting_vReflection = (viewInverseMatrix[3] - (worldMatrix * vec4(position, 1.))).xyz;\n  } else {\n    lighting_vReflection = vec3(1., 1., 1.);\n  }\n}\n");
//# sourceMappingURL=lighting-vertex.glsl.js.map

/***/ }),
/* 207 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export vertexShader */
/* unused harmony export fragmentShader */
/* unused harmony export name */
/* unused harmony export config */
/* unused harmony export getUniforms */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__packages_math__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lighting_common_glsl__ = __webpack_require__(204);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lighting_vertex_glsl__ = __webpack_require__(206);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lighting_fragment_glsl__ = __webpack_require__(205);






var vertexShader = __WEBPACK_IMPORTED_MODULE_1__lighting_common_glsl__["a" /* default */] + '\n' + __WEBPACK_IMPORTED_MODULE_2__lighting_vertex_glsl__["a" /* default */] + '\n';

var fragmentShader = __WEBPACK_IMPORTED_MODULE_1__lighting_common_glsl__["a" /* default */] + '\n' + __WEBPACK_IMPORTED_MODULE_3__lighting_fragment_glsl__["a" /* default */] + '\n';

var name = 'lighting';

var config = {
  MAX_POINT_LIGHTS: 4
};

// Setup the lighting system: ambient, directional, point lights.
function getUniforms(_ref) {
  var _ref$lightingEnable = _ref.lightingEnable,
      lightingEnable = _ref$lightingEnable === undefined ? false : _ref$lightingEnable,
      _ref$lightingAmbientC = _ref.lightingAmbientColor,
      lightingAmbientColor = _ref$lightingAmbientC === undefined ? [0.2, 0.2, 0.2] : _ref$lightingAmbientC,
      _ref$lightingDirectio = _ref.lightingDirection,
      lightingDirection = _ref$lightingDirectio === undefined ? [1, 1, 1] : _ref$lightingDirectio,
      _ref$lightingDirectio2 = _ref.lightingDirectionalColor,
      lightingDirectionalColor = _ref$lightingDirectio2 === undefined ? [0, 0, 0] : _ref$lightingDirectio2,
      _ref$lightingPointLig = _ref.lightingPointLights,
      lightingPointLights = _ref$lightingPointLig === undefined ? [] : _ref$lightingPointLig;

  // Set light uniforms. Ambient, directional and point lights.
  return Object.assign({
    lightingEnable: lightingEnable,
    // Ambient
    lightingAmbientColor: lightingAmbientColor
  }, getDirectionalUniforms(lightingDirection), getPointUniforms(lightingPointLights));
}

function getDirectionalUniforms(_ref2) {
  var color = _ref2.color,
      direction = _ref2.direction;

  // Normalize lighting direction vector
  var dir = new __WEBPACK_IMPORTED_MODULE_0__packages_math__["Vector3"](direction.x, direction.y, direction.z).normalize().scale(-1, -1, -1);

  return {
    directionalColor: [color.r, color.g, color.b],
    lightingDirection: [dir.x, dir.y, dir.z]
  };
}

function getPointUniforms(points) {
  points = points instanceof Array ? points : [points];
  var numberPoints = points.length;
  var pointLocations = [];
  var pointColors = [];
  var enableSpecular = [];
  var pointSpecularColors = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var point = _step.value;
      var position = point.position,
          color = point.color,
          diffuse = point.diffuse,
          specular = point.specular;

      var pointColor = color || diffuse;

      pointLocations.push(position.x, position.y, position.z);
      pointColors.push(pointColor.r, pointColor.g, pointColor.b);

      // Add specular color
      enableSpecular.push(Number(Boolean(specular)));
      if (specular) {
        pointSpecularColors.push(specular.r, specular.g, specular.b);
      } else {
        pointSpecularColors.push(0, 0, 0);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return {
    numberPoints: numberPoints,
    pointLocation: pointLocations,
    pointColor: pointColors,
    enableSpecular: enableSpecular,
    pointSpecularColor: pointSpecularColors
  };
}
//# sourceMappingURL=lighting.js.map

/***/ }),
/* 208 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MODULE_INJECTORS_VS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return MODULE_INJECTORS_FS; });
var MODULE_INJECTORS_VS = "#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n";

var MODULE_INJECTORS_FS = "#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth();\n#endif\n";
//# sourceMappingURL=module-injectors.js.map

/***/ }),
/* 209 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 64, 128, 64]);

var DEFAULT_MODULE_OPTIONS = {
  pickingSelectedColor: null, //  Set to a picking color to visually highlight that item
  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR, // Color of visual highlight of "selected" item
  pickingThreshold: 1.0,
  pickingActive: false, // Set to true when rendering to off-screen "picking" buffer
  pickingValid: false
};

/* eslint-disable camelcase */
function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;

  var uniforms = {};
  uniforms.picking_uValid = opts.pickingValid ? 1 : 0;
  if (opts.pickingSelectedColor !== undefined) {
    if (opts.pickingSelectedColor) {
      var selectedColor = [opts.pickingSelectedColor[0], opts.pickingSelectedColor[1], opts.pickingSelectedColor[2]];
      // console.log('selected picking color', selectedColor);
      uniforms.picking_uSelectedPickingColor = selectedColor;
    }
  }
  if (opts.pickingHighlightColor !== undefined) {
    uniforms.picking_uHighlightColor = opts.pickingHighlightColor;
  }
  // TODO - major hack - decide on normalization and remove
  if (opts.pickingThreshold !== undefined) {
    uniforms.picking_uThreshold = opts.pickingThreshold;
  }
  if (opts.pickingActive !== undefined) {
    uniforms.picking_uActive = opts.pickingActive ? 1 : 0;
  }
  return uniforms;
}

var vs = 'uniform vec3 picking_uSelectedPickingColor;\nuniform float picking_uThreshold;\nuniform bool picking_uValid;\n\nvarying vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 256.;\n\nbool isVertexPicked(vec3 vertexColor, vec3 pickedColor, bool pickingValid) {\n  return\n    pickingValid &&\n    abs(vertexColor.r - pickedColor.r) < picking_uThreshold &&\n    abs(vertexColor.g - pickedColor.g) < picking_uThreshold &&\n    abs(vertexColor.b - pickedColor.b) < picking_uThreshold;\n}\n\nvoid picking_setPickingColor(vec3 pickingColor) {\n  // Do the comparison with selected item color in vertex shader as it should mean fewer compares\n  picking_vRGBcolor_Aselected.a =\n    float(isVertexPicked(pickingColor, picking_uSelectedPickingColor, picking_uValid));\n\n  // Stores the picking color so that the fragment shader can render it during picking\n  picking_vRGBcolor_Aselected.rgb = pickingColor * COLOR_SCALE;\n}\n';

var fs = 'uniform bool picking_uActive; // true during rendering to offscreen picking buffer\nuniform vec3 picking_uSelectedPickingColor;\nuniform vec4 picking_uHighlightColor;\n\nvarying vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 256.;\n\n/*\n * Returns highlight color if this item is selected.\n */\nvec4 picking_filterHighlightColor(vec4 color) {\n  bool selected = bool(picking_vRGBcolor_Aselected.a);\n  return selected ? picking_uHighlightColor : color;\n}\n\n/*\n * Returns picking color if picking enabled else unmodified argument.\n */\nvec4 picking_filterPickingColor(vec4 color) {\n  vec3 pickingColor = picking_vRGBcolor_Aselected.rgb;\n  return picking_uActive ? vec4(pickingColor, 1.0) : color;\n}\n';

/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'picking',
  vs: vs,
  fs: fs,
  getUniforms: getUniforms
});
//# sourceMappingURL=picking.js.map

/***/ }),
/* 210 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#ifdef GL_ES\nprecision highp float;\n#endif\n\n#define SHADER_NAME luma-default-fs\n\nvarying vec4 vColor;\nvarying vec2 vTexCoord;\nvarying vec3 lightWeighting;\n\nuniform bool hasTexture1;\nuniform sampler2D sampler1;\n\nuniform bool enablePicking;\nuniform vec3 pickColor;\n\nuniform bool hasFog;\nuniform vec3 fogColor;\n\nuniform float fogNear;\nuniform float fogFar;\n\nvoid main() {\n  if(!hasTexture1) {\n    gl_FragColor = vec4(vColor.rgb * lightWeighting, vColor.a);\n  } else {\n    gl_FragColor =\n      vec4(texture2D(sampler1, vec2(vTexCoord.s, vTexCoord.t)).rgb * lightWeighting, 1.0);\n  }\n\n  if (enablePicking) {\n    gl_FragColor = vec4(pickColor, 1.0);\n  }\n\n  /* handle fog */\n  if (hasFog) {\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\n    float fogFactor = smoothstep(fogNear, fogFar, depth);\n    gl_FragColor = mix(gl_FragColor, vec4(fogColor, gl_FragColor.w), fogFactor);\n  }\n}\n");
//# sourceMappingURL=default-fragment.glsl.js.map

/***/ }),
/* 211 */
/***/ (function(module, exports) {

module.exports = {
  hasTexture1: false,
  hasTextureCube1: false,

  enableLights: false,
  useReflection: false,

  // picking configs
  enablePicking: false,
  hasPickingColors: false,

  // fog configuration
  hasFog: false
};
//# sourceMappingURL=default-uniforms.js.map

/***/ }),
/* 212 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define SHADER_NAME luma-default-vs\n\n#define LIGHT_MAX 4\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec4 color;\nattribute vec2 texCoord1;\n\nuniform mat4 worldMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 worldInverseTransposeMatrix;\n\nuniform bool enableLights;\nuniform vec3 ambientColor;\nuniform vec3 directionalColor;\nuniform vec3 lightingDirection;\n\nuniform vec3 pointLocation[LIGHT_MAX];\nuniform vec3 pointColor[LIGHT_MAX];\nuniform int numberPoints;\n\nvarying vec4 vColor;\nvarying vec2 vTexCoord;\nvarying vec3 lightWeighting;\n\nvoid main(void) {\n  vec4 mvPosition = worldMatrix * vec4(position, 1.0);\n\n  if(!enableLights) {\n    lightWeighting = vec3(1.0, 1.0, 1.0);\n  } else {\n    vec3 plightDirection;\n    vec3 pointWeight = vec3(0.0, 0.0, 0.0);\n    vec4 transformedNormal = worldInverseTransposeMatrix * vec4(normal, 1.0);\n    float directionalLightWeighting = max(dot(transformedNormal.xyz, lightingDirection), 0.0);\n    for (int i = 0; i < LIGHT_MAX; i++) {\n      if (i < numberPoints) {\n        plightDirection =\n          normalize((viewMatrix * vec4(pointLocation[i], 1.0)).xyz - mvPosition.xyz);\n        pointWeight += max(dot(transformedNormal.xyz, plightDirection), 0.0) * pointColor[i];\n      } else {\n        break;\n      }\n    }\n\n    lightWeighting = ambientColor + (directionalColor * directionalLightWeighting) + pointWeight;\n  }\n\n  vColor = color;\n  vTexCoord = texCoord1;\n  gl_Position = projectionMatrix * worldMatrix * vec4(position, 1.0);\n}\n");
//# sourceMappingURL=default-vertex.glsl.js.map

/***/ }),
/* 213 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export MONOLITHIC_SHADERS_2 */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MODULAR_SHADERS; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__deprecated_shaderlib__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__deprecated_shaderlib___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__deprecated_shaderlib__);
/* unused harmony reexport SHADERS */
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__deprecated_shaderlib___default.a; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__default_vertex_glsl__ = __webpack_require__(212);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__default_fragment_glsl__ = __webpack_require__(210);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modular_vertex_glsl__ = __webpack_require__(215);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modular_fragment_glsl__ = __webpack_require__(214);
// Default Shaders




// A set of monolithic shaders


var defaultUniforms = __webpack_require__(211);

var MONOLITHIC_SHADERS_2 = {
  vs: __WEBPACK_IMPORTED_MODULE_1__default_vertex_glsl__["a" /* default */],
  fs: __WEBPACK_IMPORTED_MODULE_2__default_fragment_glsl__["a" /* default */],
  defaultUniforms: defaultUniforms
};

// A set of base shaders that leverage the shader module system,
// dynamically enabling features depending on which modules are included



var MODULAR_SHADERS = {
  vs: __WEBPACK_IMPORTED_MODULE_3__modular_vertex_glsl__["a" /* default */],
  fs: __WEBPACK_IMPORTED_MODULE_4__modular_fragment_glsl__["a" /* default */],
  defaultUniforms: {}
};
//# sourceMappingURL=index.js.map

/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define SHADER_NAME luma-modular-fragment\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n// varyings\nvarying vec4 vColor;\n\nvoid main(){\n  gl_FragColor = vec4(1., 0., 1., 1.);\n\n#ifdef MODULE_DIFFUSE\n  gl_FragColor = diffuse_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth(gl_Position);\n#endif\n}\n");
//# sourceMappingURL=modular-fragment.glsl.js.map

/***/ }),
/* 215 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define SHADER_NAME luma_modular_vertex\n\n// object attributes\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec4 colors;\nattribute vec2 texCoords;\nattribute vec3 pickingColors;\n\nvoid main(void) {\n\n  // Set up position\n#ifdef MODULE_GEOMETRY\n  geometry_setPosition(positions);\n  geometry_setNormal(normals);\n#endif\n\n#ifdef MODULE_PROJECT\n  project_setPositionAndNormal_Model(positions, normals);\n  gl_Position = project_model_to_clipspace(positions);\n#endif\n\n  // Set up depth\n#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n\n#ifdef MODULE_DIFFUSE\n  diffuse_setTextureCoordinate(texCoords);\n#endif\n\n  // Set up color calculations\n#ifdef MODULE_MATERIAL\n  material_setDiffuseColor(colors);\n  material_setDiffuseTextureCoordinates(texCoords);\n#endif\n\n#ifdef MODULE_LIGHTING\n  lighting_setPositionAndNormal(positions, normals);\n  lighting_apply_light(positions);\n  lighting_apply_reflection(positions);\n#endif\n\n#ifdef MODULE_PICKING\n  picking_setPickingColor(pickingColors);\n#endif\n\n}\n");
//# sourceMappingURL=modular-vertex.glsl.js.map

/***/ }),
/* 216 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = promisify;
/**
 * Converts a function that accepts a node style (err, result) callback
 * as the last argument into a function that takes the same arguments
 * and returns a promise that resolves or rejects with the values provided
 * by the original callback
 * @param {Function} func - function to wrap
 * @return {Function} promisified function
 */
/* eslint-disable no-try-catch */
function promisify(func) {
  return function promisifiedFunction() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new Promise(function (resolve, reject) {
      function callback(error, data) {
        try {
          if (error) {
            reject(error);
          } else {
            resolve(data);
          }
        } catch (e) {
          reject(e);
        }
      }
      func.apply(undefined, args.concat([callback]));
    });
  };
}
/* eslint-enable no-try-catch */
//# sourceMappingURL=promise-utils.js.map

/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = splat;
/* harmony export (immutable) */ __webpack_exports__["d"] = noop;
/* harmony export (immutable) */ __webpack_exports__["a"] = uid;
/* harmony export (immutable) */ __webpack_exports__["e"] = merge;
/* harmony export (immutable) */ __webpack_exports__["b"] = isPowerOfTwo;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);


/**
 * Wraps the argument in an array if it is not one.
 * @param {object} a - The object to wrap.
 * @return {Array} array
 **/
function splat(a) {
  return a ? Array.isArray(a) ? a : [a] : [];
}

/**
* Provides a standard noop function.
**/
function noop() {}

var uidCounters = {};

/**
 * Returns a UID.
 * @param {String} id= - Identifier base name
 * @return {number} uid
 **/
function uid() {
  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';

  uidCounters[id] = uidCounters[id] || 1;
  var count = uidCounters[id]++;
  return id + '-' + count;
}

/**
 * Merge multiple objects into one.
 * @param {...object} objects - The objects to merge.
 * @return {object} object
 **/
function merge(objects) {
  var mix = {};
  for (var i = 0, l = arguments.length; i < l; i++) {
    var object = arguments[i];
    if (!object || object.constructor.name !== 'Object') {
      /* eslint-disable no-continue */
      continue;
    }
    for (var key in object) {
      var op = object[key];
      var mp = mix[key];
      if (mp && op.constructor.name === 'Object' && mp.constructor.name === 'Object') {
        mix[key] = merge(mp, op);
      } else {
        mix[key] = detach(op);
      }
    }
  }
  return mix;
}

/**
 * Internal function for duplicating an object.
 * @param {object} elem - The object to recursively duplicate.
 * @return {object} object
 **/
function detach(elem) {
  var t = elem.constructor.name;
  var ans = void 0;
  if (t === 'Object') {
    ans = {};
    for (var p in elem) {
      ans[p] = detach(elem[p]);
    }
  } else if (t === 'Array') {
    ans = [];
    for (var i = 0, l = elem.length; i < l; i++) {
      ans[i] = detach(elem[i]);
    }
  } else {
    ans = elem;
  }

  return ans;
}

/**
 * Verifies if a given number is power of two or not.
 * @param {object} n - The number to check.
 * @return {Array} Returns true if the given number is power of 2, false otherwise.
 **/
function isPowerOfTwo(n) {
  __WEBPACK_IMPORTED_MODULE_0_assert___default()(typeof n === 'number', 'Input must be a number');
  return n && (n & n - 1) === 0;
}
//# sourceMappingURL=utils.js.map

/***/ }),
/* 218 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getKeyValue;
/* harmony export (immutable) */ __webpack_exports__["b"] = getKey;
/* harmony export (immutable) */ __webpack_exports__["c"] = getKeyType;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);


// Resolve a WebGL enumeration name (returns itself if already a number)
function getKeyValue(gl, name) {
  // If not a string, return (assume number)
  if (typeof name !== 'string') {
    return name;
  }

  // If string converts to number, return number
  var number = Number(name);
  if (!isNaN(number)) {
    return number;
  }

  // Look up string, after removing any 'GL.' or 'gl.' prefix
  name = name.replace(/^.*\./, '');
  var value = gl[name];
  __WEBPACK_IMPORTED_MODULE_0_assert___default()(value !== undefined, 'Accessing undefined constant GL.' + name);
  return value;
}

function getKey(gl, value) {
  value = Number(value);
  for (var key in gl) {
    if (gl[key] === value) {
      return 'gl.' + key;
    }
  }
  return String(value);
}

function getKeyType(gl, value) {
  __WEBPACK_IMPORTED_MODULE_0_assert___default()(value !== undefined, 'undefined key');
  value = Number(value);
  for (var key in gl) {
    if (gl[key] === value) {
      return 'gl.' + key;
    }
  }
  return String(value);
}
//# sourceMappingURL=constants-to-keys.js.map

/***/ }),
/* 219 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = getPageLoadPromise;
/* harmony export (immutable) */ __webpack_exports__["a"] = createCanvas;
/* harmony export (immutable) */ __webpack_exports__["b"] = getCanvas;
/* unused harmony export getCSSSize */
/* unused harmony export getDrawingBufferSize */
/* unused harmony export calculateDrawingBufferSize */
/* unused harmony export resizeCanvas */
/* harmony export (immutable) */ __webpack_exports__["d"] = resizeDrawingBuffer;
// Resizing a webgl canvas

/* global window, document */

var isBrowser = typeof window !== 'undefined';

var isPageLoaded = false;

var pageLoadPromise = isBrowser ? new Promise(function (resolve, reject) {
  window.onload = function () {
    isPageLoaded = true;
    resolve(document);
  };
}) : Promise.resolve({});

/**
 * Returns a promise that resolves when the page is loaded
 * at this point the DOM can be manipulated, and e.g. a new canvas can be inserted
 * @return {Promise} - resolves when the page is loaded
 */
function getPageLoadPromise() {
  return pageLoadPromise;
}

/**
 * Create a canvas
 * @param {Number} width - set to 100%
 * @param {Number} height - set to 100%
 */
function createCanvas(_ref) {
  var _ref$width = _ref.width,
      width = _ref$width === undefined ? 800 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === undefined ? 600 : _ref$height,
      _ref$id = _ref.id,
      id = _ref$id === undefined ? 'gl-canvas' : _ref$id,
      _ref$insert = _ref.insert,
      insert = _ref$insert === undefined ? true : _ref$insert;

  var canvas = document.createElement('canvas');
  canvas.id = id;
  canvas.style.width = Number.isFinite(width) ? width + 'px' : '100%';
  canvas.style.height = Number.isFinite(height) ? height + 'px' : '100%';
  // add the canvas to the body element once the page has loaded
  if (insert) {
    getPageLoadPromise().then(function (document) {
      var body = document.body;
      body.insertBefore(canvas, body.firstChild);
    });
  }
  return canvas;
}

/**
 * Gets an already created canvas from the DOM
 * @param {Number} id - DOM element id
 */
function getCanvas(_ref2) {
  var id = _ref2.id;

  if (!isPageLoaded) {
    throw new Error('createGLContext called on canvas \'' + id + '\' before page was loaded');
  }
  return document.getElementById(id);
}

// Gets current size of canvas in css (logical/window) coordinates
function getCSSSize(canvas) {
  return {
    width: canvas.clientWidth,
    height: canvas.clientHeight
  };
}

// Gets current size of canvas drawing buffer in actual pixels
// This is needed for the gl.viewport call
function getDrawingBufferSize(canvas) {
  return {
    width: canvas.width,
    height: canvas.height
  };
}

// Calculate the drawing buffer size that would cover current canvas size and device pixel ratio
// Intention is that every pixel in the drawing buffer will have a 1-to-1 mapping with
// actual device pixels in the hardware framebuffer, allowing us to render at the full
// resolution of the device.
function calculateDrawingBufferSize(canvas, _ref3) {
  var _ref3$useDevicePixelR = _ref3.useDevicePixelRatio,
      useDevicePixelRatio = _ref3$useDevicePixelR === undefined ? true : _ref3$useDevicePixelR;

  var cssToDevicePixels = useDevicePixelRatio ? window.devicePixelRatio || 1 : 1;

  // Lookup the size the browser is displaying the canvas in CSS pixels
  // and compute a size needed to make our drawingbuffer match it in
  // device pixels.
  var cssSize = getCSSSize(canvas);
  return {
    width: Math.floor(cssSize.width * cssToDevicePixels),
    height: Math.floor(cssSize.height * cssToDevicePixels),
    devicePixelRatio: cssToDevicePixels
  };
}

/**
 * Resizes canvas in "CSS coordinates" (note these can be very different from device coords,
 * depending on devicePixelRatio/retina screens and size of drawing buffer)
 * and can be changed separately from drawing buffer size.
 * Therefore, normally `resizeDrawingBuffer` should be called after calling `resizeCanvas`.
 *
 * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
 *
 * @param {Number} width, height - new width and height of canvas in CSS coordinates
 */
function resizeCanvas(canvas, _ref4) {
  var width = _ref4.width,
      height = _ref4.height,
      _ref4$useDevicePixelR = _ref4.useDevicePixelRatio,
      useDevicePixelRatio = _ref4$useDevicePixelR === undefined ? true : _ref4$useDevicePixelR;

  canvas.style.width = width + 'px';
  canvas.style.height = height + 'px';
}

/**
 * Resize the canvas' drawing buffer to match the canvas CSS size,
 * and by default to also consider devicePixelRatio
 * detects if anything has changed, can be called every frame
 * for best visual results, usually set to either:
 *  canvas CSS width x canvas CSS height
 *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio
 *
 * NOTE: Regardless of size, the drawing buffer will always be scaled to the viewport
 * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
 *
 * @param {Number} width - new width of canvas in CSS coordinates
 * @param {Number} height - new height of canvas in CSS coordinates
 */
function resizeDrawingBuffer(canvas, _ref5) {
  var _ref5$useDevicePixelR = _ref5.useDevicePixelRatio,
      useDevicePixelRatio = _ref5$useDevicePixelR === undefined ? true : _ref5$useDevicePixelR;

  // Resize the render buffer of the canvas to match canvas client size
  // multiplying with dpr (Optionally can be turned off)
  var newBufferSize = calculateDrawingBufferSize(canvas, { useDevicePixelRatio: useDevicePixelRatio });
  // Only update if the canvas size has not changed
  if (newBufferSize.width !== canvas.width || newBufferSize.height !== canvas.height) {
    // Make the canvas render buffer the same size as
    canvas.width = newBufferSize.width;
    canvas.height = newBufferSize.height;
    // Always reset CSS size after setting drawing buffer size
    // canvas.style.width = `${cssSize.width}px`;
    // canvas.style.height = `${cssSize.height}px`;
  }
}
//# sourceMappingURL=create-canvas.js.map

/***/ }),
/* 220 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createContext;
/* unused harmony export trackContextCreation */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);
// Create a WebGL context

/* global HTMLCanvasElement, WebGLRenderingContext */

/**
 * Create a WebGL context for a canvas
 * Note calling this multiple time on the same canvas does return the same context
 */
function createContext(_ref) {
  var canvas = _ref.canvas,
      _ref$opts = _ref.opts,
      opts = _ref$opts === undefined ? {} : _ref$opts,
      _ref$onError = _ref.onError,
      onError = _ref$onError === undefined ? function (message) {
    return null;
  } : _ref$onError;

  // See if we can extract any extra information about why context creation failed
  function onContextCreationError(error) {
    onError('WebGL context: ' + (error.statusMessage || 'Unknown error'));
  }
  canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);

  var _opts$webgl = opts.webgl1,
      webgl1 = _opts$webgl === undefined ? true : _opts$webgl,
      _opts$webgl2 = opts.webgl2,
      webgl2 = _opts$webgl2 === undefined ? true : _opts$webgl2;

  var gl = null;
  // Prefer webgl2 over webgl1, prefer conformant over experimental
  if (webgl2) {
    gl = gl || canvas.getContext('webgl2', opts);
    gl = gl || canvas.getContext('experimental-webgl2', opts);
  }
  if (webgl1) {
    gl = gl || canvas.getContext('webgl', opts);
    gl = gl || canvas.getContext('experimental-webgl', opts);
  }

  canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);

  if (!gl) {
    return onError('Failed to create ' + (webgl2 && !webgl1 ? 'WebGL2' : 'WebGL') + ' context');
  }

  return gl;
}

/**
 * Installs a spy on Canvas.getContext
 * calls the provided callback with the {context}
 */
function trackContextCreation(_ref2) {
  var _ref2$onContextCreate = _ref2.onContextCreate,
      onContextCreate = _ref2$onContextCreate === undefined ? function () {
    return null;
  } : _ref2$onContextCreate,
      _ref2$onContextCreate2 = _ref2.onContextCreated,
      onContextCreated = _ref2$onContextCreate2 === undefined ? function () {} : _ref2$onContextCreate2;

  __WEBPACK_IMPORTED_MODULE_0_assert___default()(onContextCreate || onContextCreated);
  if (typeof HTMLCanvasElement !== 'undefined') {
    var getContext = HTMLCanvasElement.prototype.getContext;
    HTMLCanvasElement.prototype.getContext = function getContextSpy(type, opts) {
      // Let intercepter create context
      var context = void 0;
      if (type === 'webgl') {
        context = onContextCreate({ canvas: this, type: type, opts: opts, getContext: getContext.bind(this) });
      }
      // If not, create context
      context = context || getContext.call(this, type, opts);
      // Report it created
      if (context instanceof WebGLRenderingContext) {
        onContextCreated({ canvas: this, context: context, type: type, opts: opts });
      }
      return context;
    };
  }
}
//# sourceMappingURL=create-context.js.map

/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = parseGLSLCompilerError;
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__get_shader_name__ = __webpack_require__(91);
// TODO - formatGLSLCompilerError should not depend on this


/**
 * Parse a GLSL compiler error log into a string showing the source code around each error.
 * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)
 */
/* eslint-disable no-continue, max-statements */
function parseGLSLCompilerError(errLog, src, shaderType) {
  var errorStrings = errLog.split(/\r?\n/);
  var errors = {};
  var warnings = {};

  // Parse the error - note: browser and driver dependent
  for (var i = 0; i < errorStrings.length; i++) {
    var errorString = errorStrings[i];
    if (errorString.length <= 1) {
      continue;
    }
    var segments = errorString.split(':');
    var _type = segments[0];
    var line = parseInt(segments[2], 10);
    if (isNaN(line)) {
      throw new Error('Could not parse GLSL compiler error: ' + errLog);
    }
    if (_type !== 'WARNING') {
      errors[line] = errorString;
    } else {
      warnings[line] = errorString;
    }
  }

  // Format the error inline with the code
  var lines = addLineNumbers(src);
  var name = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__get_shader_name__["a" /* default */])(src) || 'unknown name';
  var type = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__get_shader_name__["b" /* getShaderTypeName */])(shaderType);

  return {
    shaderName: type + ' shader ' + name + '\n',
    errors: formatErrors(errors, lines),
    warnings: formatErrors(warnings, lines)
  };
}

// Formats GLSL compiler error log into single string
function formatGLSLCompilerError(errLog, src, shaderType) {
  var _parseGLSLCompilerErr = parseGLSLCompilerError(errLog, src, shaderType),
      shaderName = _parseGLSLCompilerErr.shaderName,
      errors = _parseGLSLCompilerErr.errors,
      warnings = _parseGLSLCompilerErr.warnings;

  return 'GLSL compilation error in ' + shaderName + '\n' + errors + '\n' + warnings;
}

// helper function, outputs annotated errors or warnings
function formatErrors(errors, lines) {
  var message = '';
  for (var i = 0; i < lines.length; i++) {
    var line = lines[i];
    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {
      continue;
    }
    message += line + '\n';
    if (errors[i + 1]) {
      var error = errors[i + 1];
      var segments = error.split(':', 3);
      var type = segments[0];
      var column = parseInt(segments[1], 10) || 0;
      var err = error.substr(segments.join(':').length + 1).trim();
      message += padLeft('^^^ ' + type + ': ' + err + '\n\n', column);
    }
  }
  return message;
}

/**
 * Prepends line numbers to each line of a string.
 * The line numbers will be left-padded with spaces to ensure an
 * aligned layout when rendered using monospace fonts.
 * @param {String} string - multi-line string to add line numbers to
 * @param {Number} start=1 - number of spaces to add
 * @param {String} delim =': ' - injected between line number and original line
 * @return {String[]} strings - array of string, one per line, with line numbers added
 */
function addLineNumbers(string) {
  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var delim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ': ';

  var lines = string.split(/\r?\n/);
  var maxDigits = String(lines.length + start - 1).length;
  return lines.map(function (line, i) {
    var lineNumber = i + start;
    var digits = String(lineNumber).length;
    var prefix = padLeft(lineNumber, maxDigits - digits);
    return prefix + delim + line;
  });
}

/**
 * Pads a string with a number of spaces (space characters) to the left
 * @param {String} string - string to pad
 * @param {Number} digits - number of spaces to add
 * @return {String} string - The padded string
 */
function padLeft(string, digits) {
  var result = '';
  for (var i = 0; i < digits; ++i) {
    result += ' ';
  }
  return '' + result + string;
}
//# sourceMappingURL=format-glsl-error.js.map

/***/ }),
/* 222 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getParameterPolyfill;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(9);
var _WEBGL_PARAMETERS;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-inline-comments, max-len, camelcase */


var OES_element_index = 'OES_element_index';
var WEBGL_draw_buffers = 'WEBGL_draw_buffers';
var EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';
var EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';
var EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';
var WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';

var GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
var GL_DONT_CARE = 0x1100;
var GL_GPU_DISJOINT_EXT = 0x8FBB;
var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
var GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.
var GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.

var getWebGL2ValueOrZero = function getWebGL2ValueOrZero(gl) {
  return !isWebGL2(gl) ? 0 : undefined;
};

// if a function returns undefined in this table,
// the original getParameter will be called, defeating the override
var WEBGL_PARAMETERS = (_WEBGL_PARAMETERS = {}, _defineProperty(_WEBGL_PARAMETERS, GL_FRAGMENT_SHADER_DERIVATIVE_HINT, function (gl) {
  return !isWebGL2(gl) ? GL_DONT_CARE : undefined;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].RASTERIZER_DISCARD, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].SAMPLES, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, GL_GPU_DISJOINT_EXT, function (gl, getParameter) {
  var ext = isWebGL2(gl) ? gl.getExtension(EXT_disjoint_timer_query_webgl2) : gl.getExtension(EXT_disjoint_timer_query);
  return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;
}), _defineProperty(_WEBGL_PARAMETERS, GL_UNMASKED_VENDOR_WEBGL, function (gl, getParameter) {
  var ext = gl.getExtension(WEBGL_debug_renderer_info);
  return getParameter(ext && ext.UNMASKED_VENDOR_WEBGL || __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].VENDOR);
}), _defineProperty(_WEBGL_PARAMETERS, GL_UNMASKED_RENDERER_WEBGL, function (gl, getParameter) {
  var ext = gl.getExtension(WEBGL_debug_renderer_info);
  return getParameter(ext && ext.UNMASKED_RENDERER_WEBGL || __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].RENDERER);
}), _defineProperty(_WEBGL_PARAMETERS, GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, function (gl, getParameter) {
  var ext = gl.luma.extensions[EXT_texture_filter_anisotropic];
  return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_3D_TEXTURE_SIZE, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_ARRAY_TEXTURE_LAYERS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_CLIENT_WAIT_TIMEOUT_WEBGL, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_COLOR_ATTACHMENTS, function (gl, getParameter) {
  if (!isWebGL2(gl)) {
    var ext = gl.getExtension(WEBGL_draw_buffers);
    return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;
  }
  return undefined;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_COMBINED_UNIFORM_BLOCKS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_DRAW_BUFFERS, function (gl) {
  if (!isWebGL2(gl)) {
    var ext = gl.getExtension(WEBGL_draw_buffers);
    return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;
  }
  return undefined;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_ELEMENT_INDEX,
// Guess: per webglstats.com 99.6% of webgl2 supports 2147483647
function (gl) {
  return gl.getExtension(OES_element_index) ? 2147483647 : 65535;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_ELEMENTS_INDICES,
// Guess: "Reasonably safe" per webglstats.com - could be higher/lower (on some mobile devices)
function (gl) {
  return gl.getExtension(OES_element_index) ? 16777216 : 65535;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_ELEMENTS_VERTICES,
// Guess: "Reasonably safe" per webglstats.com - could be higher/lower (on some mobile devices)
function (gl) {
  return 16777216;
}), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_FRAGMENT_INPUT_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_FRAGMENT_UNIFORM_BLOCKS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_FRAGMENT_UNIFORM_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_SAMPLES, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_SERVER_WAIT_TIMEOUT, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_TEXTURE_LOD_BIAS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_UNIFORM_BLOCK_SIZE, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_UNIFORM_BUFFER_BINDINGS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_VARYING_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_VERTEX_OUTPUT_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_VERTEX_UNIFORM_BLOCKS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_VERTEX_UNIFORM_COMPONENTS, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MIN_PROGRAM_TEXEL_OFFSET, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].MAX_PROGRAM_TEXEL_OFFSET, getWebGL2ValueOrZero), _defineProperty(_WEBGL_PARAMETERS, __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* default */].UNIFORM_BUFFER_OFFSET_ALIGNMENT, getWebGL2ValueOrZero), _WEBGL_PARAMETERS);

// Return true if WebGL2 context
function isWebGL2(gl) {
  var GL_TEXTURE_BINDING_3D = 0x806A;
  return gl && gl.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D;
}

// A "replacement" gl.getParameter that accepts "enums" from extensions and WebGL2
// and returns reasonably safe defaults
function getParameterPolyfill(gl, originalGetParameter, pname) {

  // Return mock limits (usually 0) for WebGL2 constants to ensure these
  // can be queries without error
  var limit = WEBGL_PARAMETERS[pname];
  var value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;
  var result = value !== undefined ? value : originalGetParameter(pname);
  return result;
}
//# sourceMappingURL=polyfill-get-parameter.js.map

/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_texture__ = __webpack_require__(13);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import GL from './api';

// import {isWebGl2Context, assertWebGL2Context, withParameters} from './context';

// import Buffer from './buffer';

var Texture2DArray = /*#__PURE__*/function (_Texture) {
  _inherits(Texture2DArray, _Texture);

  _createClass(Texture2DArray, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__context__["b" /* isWebGL2 */])(gl);
    }
  }]);

  function Texture2DArray(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Texture2DArray);

    var _this = _possibleConstructorReturn(this, (Texture2DArray.__proto__ || Object.getPrototypeOf(Texture2DArray)).call(this, gl, opts));

    throw new Error('Texture2DArray not yet implemented');
    return _this;
  }

  return Texture2DArray;
}(__WEBPACK_IMPORTED_MODULE_1__webgl_texture__["a" /* default */]);

/* unused harmony default export */ var _unused_webpack_default_export = (Texture2DArray);
//# sourceMappingURL=texture-2d-array.js.map

/***/ }),
/* 224 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context_state__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_texture__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__buffer__ = __webpack_require__(18);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var Texture3D = /*#__PURE__*/function (_Texture) {
  _inherits(Texture3D, _Texture);

  _createClass(Texture3D, null, [{
    key: 'isSupported',
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["b" /* isWebGL2 */])(gl);
    }

    /**
     * @classdesc
     * 3D WebGL Texture
     * Note: Constructor will initialize your texture.
     *
     * @class
     * @param {WebGLRenderingContext} gl - gl context
     * @param {Image|ArrayBuffer|null} opts= - named options
     * @param {Image|ArrayBuffer|null} opts.data= - buffer
     * @param {GLint} width - width of texture
     * @param {GLint} height - height of texture
     */

  }]);

  function Texture3D(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Texture3D);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__context__["a" /* assertWebGL2Context */])(gl);

    var _this = _possibleConstructorReturn(this, (Texture3D.__proto__ || Object.getPrototypeOf(Texture3D)).call(this, gl, Object.assign({}, opts, { target: opts.target || __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].TEXTURE_3D })));

    _this.width = null;
    _this.height = null;
    _this.depth = null;
    Object.seal(_this);

    _this.setImageData(opts);
    if (opts.generateMipmap) {
      _this.generateMipmap();
    }
    return _this;
  }

  _createClass(Texture3D, [{
    key: 'initialize',
    value: function initialize() {
      var _this2 = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.opts = Object.assign({}, this.opts, opts);
      var _opts = this.opts,
          pixels = _opts.pixels,
          settings = _opts.settings;

      if (settings) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__context_state__["b" /* withParameters */])(settings, function () {
          if (pixels) {
            _this2.setImage3D(_this2.opts);
          }
        });
        this.setParameters(opts);
      }
    }

    // WebGL2

    // Image 3D copies from Typed Array or WebGLBuffer

  }, {
    key: 'setImage3D',
    value: function setImage3D(_ref) {
      var _ref$level = _ref.level,
          level = _ref$level === undefined ? 0 : _ref$level,
          _ref$internalformat = _ref.internalformat,
          internalformat = _ref$internalformat === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].RGBA : _ref$internalformat,
          width = _ref.width,
          height = _ref.height,
          _ref$depth = _ref.depth,
          depth = _ref$depth === undefined ? 1 : _ref$depth,
          _ref$border = _ref.border,
          border = _ref$border === undefined ? 0 : _ref$border,
          format = _ref.format,
          _ref$type = _ref.type,
          type = _ref$type === undefined ? __WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].UNSIGNED_BYTE : _ref$type,
          _ref$offset = _ref.offset,
          offset = _ref$offset === undefined ? 0 : _ref$offset,
          pixels = _ref.pixels;

      if (ArrayBuffer.isView(pixels)) {
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, pixels);
        return;
      }
      if (pixels instanceof __WEBPACK_IMPORTED_MODULE_4__buffer__["a" /* default */]) {
        this.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].PIXEL_UNPACK_BUFFER, pixels.handle);
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, offset);
        this.gl.bindBuffer(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* default */].PIXEL_UNPACK_BUFFER, pixels.handle);
      }
    }
  }]);

  return Texture3D;
}(__WEBPACK_IMPORTED_MODULE_3__webgl_texture__["a" /* default */]);

/* unused harmony default export */ var _unused_webpack_default_export = (Texture3D);
//# sourceMappingURL=texture-3d.js.map

/***/ }),
/* 225 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);
var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _UNIFORM_TYPES;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable camelcase */


var ERR_ARGUMENT = 'UniformBufferLayout illegal argument';

// Local constants - these will "collapse" during minification
var GL_INT = 0x1404;
var GL_INT_VEC2 = 0x8B53;
var GL_INT_VEC3 = 0x8B54;
var GL_INT_VEC4 = 0x8B55;

var GL_FLOAT = 0x1406;
var GL_FLOAT_VEC2 = 0x8B50;
var GL_FLOAT_VEC3 = 0x8B51;
var GL_FLOAT_VEC4 = 0x8B52;

var GL_BOOL = 0x8B56;
var GL_BOOL_VEC2 = 0x8B57;
var GL_BOOL_VEC3 = 0x8B58;
var GL_BOOL_VEC4 = 0x8B59;

var GL_UNSIGNED_INT = 0x1405;
var GL_UNSIGNED_INT_VEC2 = 0x8DC6;
var GL_UNSIGNED_INT_VEC3 = 0x8DC7;
var GL_UNSIGNED_INT_VEC4 = 0x8DC8;

var GL_FLOAT_MAT2 = 0x8B5A;
var GL_FLOAT_MAT3 = 0x8B5B;
var GL_FLOAT_MAT4 = 0x8B5C;

var GL_FLOAT_MAT2x3 = 0x8B65;
var GL_FLOAT_MAT2x4 = 0x8B66;
var GL_FLOAT_MAT3x2 = 0x8B67;
var GL_FLOAT_MAT3x4 = 0x8B68;
var GL_FLOAT_MAT4x2 = 0x8B69;
var GL_FLOAT_MAT4x3 = 0x8B6A;

// Uniform table for std140
var UNIFORM_TYPES = (_UNIFORM_TYPES = {}, _defineProperty(_UNIFORM_TYPES, GL_FLOAT, [GL_FLOAT, 1]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_VEC2, [GL_FLOAT, 2]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_VEC3, [GL_FLOAT, 3]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_VEC4, [GL_FLOAT, 4]), _defineProperty(_UNIFORM_TYPES, GL_INT, [GL_INT, 1]), _defineProperty(_UNIFORM_TYPES, GL_INT_VEC2, [GL_INT, 2]), _defineProperty(_UNIFORM_TYPES, GL_INT_VEC3, [GL_INT, 3]), _defineProperty(_UNIFORM_TYPES, GL_INT_VEC4, [GL_INT, 4]), _defineProperty(_UNIFORM_TYPES, GL_UNSIGNED_INT, [GL_UNSIGNED_INT, 1]), _defineProperty(_UNIFORM_TYPES, GL_UNSIGNED_INT_VEC2, [GL_UNSIGNED_INT, 2]), _defineProperty(_UNIFORM_TYPES, GL_UNSIGNED_INT_VEC3, [GL_UNSIGNED_INT, 3]), _defineProperty(_UNIFORM_TYPES, GL_UNSIGNED_INT_VEC4, [GL_UNSIGNED_INT, 4]), _defineProperty(_UNIFORM_TYPES, GL_BOOL, [GL_FLOAT, 1]), _defineProperty(_UNIFORM_TYPES, GL_BOOL_VEC2, [GL_FLOAT, 2]), _defineProperty(_UNIFORM_TYPES, GL_BOOL_VEC3, [GL_FLOAT, 3]), _defineProperty(_UNIFORM_TYPES, GL_BOOL_VEC4, [GL_FLOAT, 4]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT2, [GL_FLOAT, 8]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT2x3, [GL_FLOAT, 8]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT2x4, [GL_FLOAT, 8]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT3, [GL_FLOAT, 12]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT3x2, [GL_FLOAT, 12]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT3x4, [GL_FLOAT, 12]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT4, [GL_FLOAT, 16]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT4x2, [GL_FLOAT, 16]), _defineProperty(_UNIFORM_TYPES, GL_FLOAT_MAT4x3, [GL_FLOAT, 16]), _UNIFORM_TYPES);

// Std140 layout for uniforms

var UniformBufferLayout = /*#__PURE__*/function () {
  function UniformBufferLayout(layout) {
    var _typedArray;

    _classCallCheck(this, UniformBufferLayout);

    this.layout = {};
    this.size = 0;

    // Add layout (type, size and offset) definitions for each uniform in the layout
    for (var key in layout) {
      this._addUniform(key, layout[key]);
    }

    // Allocate three typed arrays pointing at same memory
    var data = new Float32Array(this.size);
    this.typedArray = (_typedArray = {}, _defineProperty(_typedArray, GL_FLOAT, data), _defineProperty(_typedArray, GL_INT, new Int32Array(data.buffer)), _defineProperty(_typedArray, GL_UNSIGNED_INT, new Uint32Array(data.buffer)), _typedArray);
  }

  // Get number of bytes needed for buffer allocation


  _createClass(UniformBufferLayout, [{
    key: 'getBytes',
    value: function getBytes() {
      return this.size * 4;
    }

    // Get the current data as Float32Array, for bufferSubData

  }, {
    key: 'getData',
    value: function getData() {
      return this.typedArray[GL_FLOAT];
    }

    // Get offset and data for one object (for bufferSubData)

  }, {
    key: 'getSubData',
    value: function getSubData(index) {
      var data = void 0;
      var offset = void 0;
      if (index === undefined) {
        data = this.data;
        offset = 0;
      } else {
        var begin = this.offsets[index];
        var end = begin + this.sizes[index];
        data = this.data.subarray(begin, end);
        offset = begin * 4;
      }
      return { data: data, offset: offset };
    }

    // Set a map of values

  }, {
    key: 'setUniforms',
    value: function setUniforms(values) {
      for (var key in values) {
        this._setValue(key, values[key]);
      }
      return this;
    }
  }, {
    key: '_setValue',
    value: function _setValue(key, value) {
      var layout = this.layout[key];
      __WEBPACK_IMPORTED_MODULE_0_assert___default()(layout, 'UniformLayoutStd140 illegal argument');
      var typedArray = this.typedArray[layout.type];
      if (layout.size === 1) {
        // single value -> just set it
        typedArray[layout.offset] = value;
      } else {
        // vector/matrix -> copy the supplied (typed) array, starting from offset
        typedArray.set(value, layout.offset);
      }
    }
  }, {
    key: '_addUniform',
    value: function _addUniform(key, uniformType) {
      var definition = UNIFORM_TYPES[uniformType];
      __WEBPACK_IMPORTED_MODULE_0_assert___default()(definition, ERR_ARGUMENT);

      var _definition = _slicedToArray(definition, 2),
          type = _definition[0],
          count = _definition[1];

      // Get the current offset and calculate the next offset based on aligned size of this element


      var offset = this.size;
      // First, align (bump) current offset to an even multiple of current object (1, 2, 4)
      this.size = this._alignTo(this.size, count);
      // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset
      this.size += count;

      this.layout[key] = { type: type, size: count, offset: offset };
    }

    // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)

  }, {
    key: '_alignTo',
    value: function _alignTo(size, count) {
      switch (count) {
        case 1:
          return size; // Pad upwards to even multiple of 2
        case 2:
          return size + size % 2; // Pad upwards to even multiple of 2
        default:
          return size + (4 - size % 4) % 4; // Pad upwards to even multiple of 4
      }
    }
  }]);

  return UniformBufferLayout;
}();

/* unused harmony default export */ var _unused_webpack_default_export = (UniformBufferLayout);
//# sourceMappingURL=uniform-buffer-layout.js.map

/***/ }),
/* 226 */
/***/ (function(module, exports) {

module.exports = {"_args":[["luma.gl@4.0.6","/Users/nico/dev/luma.gl/examples/core/myriahedral"]],"_from":"luma.gl@4.0.6","_id":"luma.gl@4.0.6","_inBundle":false,"_integrity":"sha1-gV3llPEh1Nyh1oq9lB/W22BEDGc=","_location":"/luma.gl","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"luma.gl@4.0.6","name":"luma.gl","escapedName":"luma.gl","rawSpec":"4.0.6","saveSpec":null,"fetchSpec":"4.0.6"},"_requiredBy":["/"],"_resolved":"https://registry.npmjs.org/luma.gl/-/luma.gl-4.0.6.tgz","_spec":"4.0.6","_where":"/Users/nico/dev/luma.gl/examples/core/myriahedral","babel":{"presets":[["es2015",{"modules":false}]],"env":{"test":{"plugins":["istanbul"]}}},"bugs":{"url":"https://github.com/uber/luma.gl/issues"},"contributors":[{"name":"Ib Green","email":"ib@uber.com"},{"name":"Nicolas Belmonte","email":"nico@uber.com"},{"name":"Rye Terrell"},{"name":"Shan He","email":"shan@uber.com"},{"name":"Mikola Lysenko"},{"name":"Wesam Manassra","email":"manassra@uber.com"},{"name":"Shaojing Li","email":"shaojing@uber.com"},{"name":"Ravi Akenapalli","email":"chandu@uber.com"}],"dependencies":{"gl-constants":"^1.0.0","gl-mat4":"^1.1.4","gl-quat":"^1.0.0","gl-vec2":"^1.0.0","gl-vec3":"^1.0.3","gl-vec4":"^1.0.1","seer":"^0.2.2","webgl-debug":"^1.0.2"},"description":"A WebGL JavaScript visualization library.","devDependencies":{"babel-cli":"^6.18","babel-core":"^6.18","babel-eslint":"^6.0.0","babel-plugin-istanbul":"^4.1.1","babel-plugin-transform-builtin-extend":"^1.1.0","babel-preset-es2015":"^6.18","babelify":"^7.2.0","benchmark":"^2.1.4","brfs-babel":"^1.0.0","browserify":"^13.0.0","buble":"^0.15.1","buble-loader":"^0.4.0","coveralls":"^2.13.0","disc":"^1.3.2","eslint":"^3.0","eslint-config-uber-es2015":"^3.0.0","eslint-config-uber-jsx":"^3.0.0","eslint-plugin-babel":"^4.0.0","eslint-plugin-react":"~6.7.0","faucet":"0.0.1","gl":"^4.0.2","mkdirp":"^0.5.1","module-alias":"^2.0.0","nyc":"^10.2.0","pre-commit":"^1.2.2","raw-loader":"^0.5.1","reify":"^0.4.4","source-map-loader":"^0.2.1","source-map-support":"^0.4.2","tap-browser-color":"^0.1.2","tape":"^4.6.3","tape-catch":"^1.0.4","tape-promise":"^1.1.0","webpack-dev-server":"^2.4.4"},"files":["src","dist","dist-es6","headless.js"],"homepage":"https://github.com/uber/luma.gl#readme","keywords":["webgl","visualization","animation","3d"],"license":"MIT","main":"dist/index.js","module":"dist-es6/index.js","name":"luma.gl","nyc":{"sourceMap":false,"instrument":false,"include":["src/**/*.js"],"exclude":["test/**/*.js"]},"repository":{"type":"git","url":"git+https://github.com/uber/luma.gl.git"},"scripts":{"bench":"node test/bench/node.js","bench-browser":"webpack-dev-server --env.bench --progress --hot --open","build":"npm run build-clean && npm run build-es6 && npm run build-es5","build-clean":"rm -fr dist dist-es6 && mkdir -p dist/packages dist-es6/packages ","build-es5":"babel src --out-dir dist --plugins=transform-es2015-modules-commonjs --source-maps && babel packages --out-dir dist/packages --plugins=transform-es2015-modules-commonjs --source-maps","build-es6":"babel src --out-dir dist-es6 --source-maps && babel packages --out-dir dist-es6/packages --source-maps","build-es6-packages":"","cover":"NODE_ENV=test nyc --reporter html --reporter cobertura --reporter=lcov npm run test-cover","docs":"npm run docs-build && open ./_docs/docs/index.html","docs-build":"rm -fr _docs/* && jekyll build --config=docs/_config.yml --layouts docs/_layouts","docs-gh-pages":"git subtree push --prefix _docs origin gh-pages","docs-gh-pages-force":"git push origin `git subtree split --prefix _docs dev`:gh-pages --force","docs-publish":"npm run docs-build && git add _docs -f && git commit -m 'UPDATE DOCS' --no-verify && npm run docs-gh-pages","lint":"eslint src test && npm run lint-yarn","lint-examples":"eslint examples","lint-yarn":"!(grep -q unpm.u yarn.lock) || (echo 'Please rebuild yarn.lock file using public npmrc' && false)","publish-beta":"npm run build && npm run test-fast && npm publish --tag beta","publish-prod":"npm run build && npm run test-fast && npm publish","start":"cat < docs/get-started/examples.md","test":"npm run lint && npm run build && npm run test-node","test-browser":"webpack-dev-server --env.test --progress --hot --open","test-cover":"NODE_ENV=test tape -r babel-register test/node.js && nyc report","test-fast":"node test/node.js","test-fp64":"(cd src/shadertools/modules/fp64/test && webpack-dev-server --progress --hot --open)","test-node":"node test/node.js | faucet","test-shader":"npm run build-dist && budo src/test/fp64-shader.spec.js:build/test-bundle.js --dir test --live --open --watch-glob '**/*.{html,css,scss,js,glsl}' -- -t babelify -t brfs-babel"},"version":"4.0.6"}

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isBrowser = window && window.addEventListener;

var timers = new Map();

/**
 * Utility method allowing to throttle a user action based on a key and a minimun delay.
 *
 * @param key {String} A unique key
 * @param delay {Number} The minimal delay to throttle
 * @returns {Boolean}
 */
var throttle = function throttle(key, delay) {
  var time = timers.get(key);
  var now = Date.now();
  if (time && now - time < delay) {
    return true;
  }
  timers.set(key, now);
  return false;
};

var replacer = function replacer(seen) {
  return function (key, value) {
    if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && seen.has(value)) {
      return;
    }
    seen.add(value);
    var isArray = Object.prototype.toString.call(value).slice(8, -1).includes('Array');
    if (isArray) {
      return Array.prototype.slice.call(value, 0, 20);
    }
    return value;
  };
};

/**
 * Check for the initialized boolean indicating if Seer is ready.
 *
 * @returns {Boolean}
 */
var isReady = function isReady() {
  return window && window.__SEER_INITIALIZED__;
};

/**
 * Low-level api leveraging window.postMessage
 *
 * @param type {String} The action type
 * @param payload {Any} The action payload
 */
var send = function send(type) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!isBrowser || !isReady()) {
    return;
  }

  var seen = new Set();
  var payload = JSON.stringify(data, replacer(seen));

  try {
    window.postMessage({ type: type, payload: payload, source: 'seer-agent' }, '*');
  } catch (e) {
    if (throttle('seer-log', 2E3)) {
      return;
    }
    console.log(e); // eslint-disable-line
  }
};

var listeners = new Map();

var listener = function listener(message) {
  if (!message || !message.data || message.data.source !== 'seer-core') {
    return;
  }
  var _message$data = message.data,
      type = _message$data.type,
      payload = _message$data.payload;


  var typeListeners = listeners.get(type);
  if (typeListeners) {
    typeListeners.forEach(function (cb) {
      return cb(payload);
    });
  }
};

/**
 * Initilize window listener. There will be only one for the whole process
 * to prevent too many registrations.
 *
 * This method will be called automatically if you use the `listenFor` method.
 */
var init = function init() {
  if (!isBrowser || window.__SEER_LISTENER__) {
    return;
  }
  window.addEventListener('message', listener);
  window.__SEER_LISTENER__ = true;
};

/**
 * Clean listener. Can be useful in case you want to unregister upcoming events
 * or liberate memory.
 */
var clean = function clean() {
  if (!isBrowser || !window.__SEER_LISTENER__) {
    return;
  }
  window.removeEventListener('message', listener);
  delete window.__SEER_LISTENER__;
};

/**
 * Create a listener that will be called upon events of the given key.
 *
 * @param key {String} The unique tab key
 * @param cb {Function} A callback that will receive the message payload
 */
var listenFor = function listenFor(type, cb) {
  if (!isReady) {
    return;
  }
  if (!type || !cb) {
    throw new Error('Please provide a type and callback');
  }
  if (!listeners.has(type)) {
    listeners.set(type, []);
  }
  if (!window.__SEER_LISTENER__) {
    init();
  }
  listeners.get(type).push(cb);
};

/**
 * Remove an identity listener callback
 *
 * @param cb {Function} The callback to unbind
 */
var removeListener = function removeListener(cb) {
  listeners.forEach(function (typeListeners, key) {
    listeners.set(key, typeListeners.filter(function (l) {
      return l !== cb;
    }));
  });
};

/**
 * Creates a new indexed list.
 * It works by index to get O(1) accessing and performance.
 *
 * @param key {String} The key of the tab
 * @param data {Object} The indexed object
 */
var list = function list(key, data) {
  return send('LIST', { key: key, data: data });
};

/**
 * Creates an element in the indexed list, based on the itemKey.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param data {Any} The value of the item
 */
var listItem = function listItem(key, itemKey) {
  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return send('LIST_ITEM', { key: key, itemKey: itemKey, data: data });
};

/**
 * Update an item property, can be deeply nested.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param path {String} The path of the variable you want to update
 * @param data {Object} The new value
 */
var updateItem = function updateItem(key, itemKey, path, data) {
  return send('UPDATE_ITEM', { key: key, itemKey: itemKey, path: path, data: data });
};

/**
 * Similar to updateItem, but allows to pass an array with {path,data} pairs for
 * multiple update of the same item without having to send multiple messages.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param array {Array} The array of updates
 * @param array.path {String} The path for this update
 * @param array.data {Object} The value of this update
 */
var multiUpdate = function multiUpdate(key, itemKey, array) {
  return send('MULTI_UPDATE_ITEM', { key: key, itemKey: itemKey, array: array });
};

/**
 * Remove a specific item in a specific tab.
 *
 * @param key {String} They key of the tab
 * @param itemKey {String} The key of the item
 */
var deleteItem = function deleteItem(key, itemKey) {
  return send('DELETE_ITEM', { key: key, itemKey: itemKey });
};

/**
 * Will create a log message to an item, that will be displayde with the current time.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param msg {String} The message to display
 */
var addLog = function addLog(key, itemKey, msg) {
  return send('ADD_LOG', { key: key, itemKey: itemKey, msg: msg });
};

exports.default = {

  send: send,
  throttle: throttle,

  list: list,
  listItem: listItem,
  updateItem: updateItem,
  multiUpdate: multiUpdate,
  deleteItem: deleteItem,
  addLog: addLog,

  isReady: isReady,
  listeners: listeners,
  listenFor: listenFor,
  removeListener: removeListener,
  init: init,
  clean: clean

};


/***/ }),
/* 228 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 229 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(229);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(228);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19), __webpack_require__(103)))

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*
** Copyright (c) 2012 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

//Ported to node by Marcin Ignac on 2016-05-20

// Various functions for helping debug WebGL apps.

WebGLDebugUtils = function() {

//polyfill window in node
if (typeof(window) == 'undefined') {
    window = global;
}

/**
 * Wrapped logging function.
 * @param {string} msg Message to log.
 */
var log = function(msg) {
  if (window.console && window.console.log) {
    window.console.log(msg);
  }
};

/**
 * Wrapped error logging function.
 * @param {string} msg Message to log.
 */
var error = function(msg) {
  if (window.console && window.console.error) {
    window.console.error(msg);
  } else {
    log(msg);
  }
};


/**
 * Which arguments are enums based on the number of arguments to the function.
 * So
 *    'texImage2D': {
 *       9: { 0:true, 2:true, 6:true, 7:true },
 *       6: { 0:true, 2:true, 3:true, 4:true },
 *    },
 *
 * means if there are 9 arguments then 6 and 7 are enums, if there are 6
 * arguments 3 and 4 are enums
 *
 * @type {!Object.<number, !Object.<number, string>}
 */
var glValidEnumContexts = {
  // Generic setters and getters

  'enable': {1: { 0:true }},
  'disable': {1: { 0:true }},
  'getParameter': {1: { 0:true }},

  // Rendering

  'drawArrays': {3:{ 0:true }},
  'drawElements': {4:{ 0:true, 2:true }},

  // Shaders

  'createShader': {1: { 0:true }},
  'getShaderParameter': {2: { 1:true }},
  'getProgramParameter': {2: { 1:true }},
  'getShaderPrecisionFormat': {2: { 0: true, 1:true }},

  // Vertex attributes

  'getVertexAttrib': {2: { 1:true }},
  'vertexAttribPointer': {6: { 2:true }},

  // Textures

  'bindTexture': {2: { 0:true }},
  'activeTexture': {1: { 0:true }},
  'getTexParameter': {2: { 0:true, 1:true }},
  'texParameterf': {3: { 0:true, 1:true }},
  'texParameteri': {3: { 0:true, 1:true, 2:true }},
  'texImage2D': {
     9: { 0:true, 2:true, 6:true, 7:true },
     6: { 0:true, 2:true, 3:true, 4:true }
  },
  'texSubImage2D': {
    9: { 0:true, 6:true, 7:true },
    7: { 0:true, 4:true, 5:true }
  },
  'copyTexImage2D': {8: { 0:true, 2:true }},
  'copyTexSubImage2D': {8: { 0:true }},
  'generateMipmap': {1: { 0:true }},
  'compressedTexImage2D': {7: { 0: true, 2:true }},
  'compressedTexSubImage2D': {8: { 0: true, 6:true }},

  // Buffer objects

  'bindBuffer': {2: { 0:true }},
  'bufferData': {3: { 0:true, 2:true }},
  'bufferSubData': {3: { 0:true }},
  'getBufferParameter': {2: { 0:true, 1:true }},

  // Renderbuffers and framebuffers

  'pixelStorei': {2: { 0:true, 1:true }},
  'readPixels': {7: { 4:true, 5:true }},
  'bindRenderbuffer': {2: { 0:true }},
  'bindFramebuffer': {2: { 0:true }},
  'checkFramebufferStatus': {1: { 0:true }},
  'framebufferRenderbuffer': {4: { 0:true, 1:true, 2:true }},
  'framebufferTexture2D': {5: { 0:true, 1:true, 2:true }},
  'getFramebufferAttachmentParameter': {3: { 0:true, 1:true, 2:true }},
  'getRenderbufferParameter': {2: { 0:true, 1:true }},
  'renderbufferStorage': {4: { 0:true, 1:true }},

  // Frame buffer operations (clear, blend, depth test, stencil)

  'clear': {1: { 0: { 'enumBitwiseOr': ['COLOR_BUFFER_BIT', 'DEPTH_BUFFER_BIT', 'STENCIL_BUFFER_BIT'] }}},
  'depthFunc': {1: { 0:true }},
  'blendFunc': {2: { 0:true, 1:true }},
  'blendFuncSeparate': {4: { 0:true, 1:true, 2:true, 3:true }},
  'blendEquation': {1: { 0:true }},
  'blendEquationSeparate': {2: { 0:true, 1:true }},
  'stencilFunc': {3: { 0:true }},
  'stencilFuncSeparate': {4: { 0:true, 1:true }},
  'stencilMaskSeparate': {2: { 0:true }},
  'stencilOp': {3: { 0:true, 1:true, 2:true }},
  'stencilOpSeparate': {4: { 0:true, 1:true, 2:true, 3:true }},

  // Culling

  'cullFace': {1: { 0:true }},
  'frontFace': {1: { 0:true }},

  // ANGLE_instanced_arrays extension

  'drawArraysInstancedANGLE': {4: { 0:true }},
  'drawElementsInstancedANGLE': {5: { 0:true, 2:true }},

  // EXT_blend_minmax extension

  'blendEquationEXT': {1: { 0:true }}
};

/**
 * Map of numbers to names.
 * @type {Object}
 */
var glEnums = null;

/**
 * Map of names to numbers.
 * @type {Object}
 */
var enumStringToValue = null;

/**
 * Initializes this module. Safe to call more than once.
 * @param {!WebGLRenderingContext} ctx A WebGL context. If
 *    you have more than one context it doesn't matter which one
 *    you pass in, it is only used to pull out constants.
 */
function init(ctx) {
  if (glEnums == null) {
    glEnums = { };
    enumStringToValue = { };
    for (var propertyName in ctx) {
      if (typeof ctx[propertyName] == 'number') {
        glEnums[ctx[propertyName]] = propertyName;
        enumStringToValue[propertyName] = ctx[propertyName];
      }
    }
  }
}

/**
 * Checks the utils have been initialized.
 */
function checkInit() {
  if (glEnums == null) {
    throw 'WebGLDebugUtils.init(ctx) not called';
  }
}

/**
 * Returns true or false if value matches any WebGL enum
 * @param {*} value Value to check if it might be an enum.
 * @return {boolean} True if value matches one of the WebGL defined enums
 */
function mightBeEnum(value) {
  checkInit();
  return (glEnums[value] !== undefined);
}

/**
 * Gets an string version of an WebGL enum.
 *
 * Example:
 *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());
 *
 * @param {number} value Value to return an enum for
 * @return {string} The string version of the enum.
 */
function glEnumToString(value) {
  checkInit();
  var name = glEnums[value];
  return (name !== undefined) ? ("gl." + name) :
      ("/*UNKNOWN WebGL ENUM*/ 0x" + value.toString(16) + "");
}

/**
 * Returns the string version of a WebGL argument.
 * Attempts to convert enum arguments to strings.
 * @param {string} functionName the name of the WebGL function.
 * @param {number} numArgs the number of arguments passed to the function.
 * @param {number} argumentIndx the index of the argument.
 * @param {*} value The value of the argument.
 * @return {string} The value as a string.
 */
function glFunctionArgToString(functionName, numArgs, argumentIndex, value) {
  var funcInfo = glValidEnumContexts[functionName];
  if (funcInfo !== undefined) {
    var funcInfo = funcInfo[numArgs];
    if (funcInfo !== undefined) {
      if (funcInfo[argumentIndex]) {
        if (typeof funcInfo[argumentIndex] === 'object' &&
            funcInfo[argumentIndex]['enumBitwiseOr'] !== undefined) {
          var enums = funcInfo[argumentIndex]['enumBitwiseOr'];
          var orResult = 0;
          var orEnums = [];
          for (var i = 0; i < enums.length; ++i) {
            var enumValue = enumStringToValue[enums[i]];
            if ((value & enumValue) !== 0) {
              orResult |= enumValue;
              orEnums.push(glEnumToString(enumValue));
            }
          }
          if (orResult === value) {
            return orEnums.join(' | ');
          } else {
            return glEnumToString(value);
          }
        } else {
          return glEnumToString(value);
        }
      }
    }
  }
  if (value === null) {
    return "null";
  } else if (value === undefined) {
    return "undefined";
  } else {
    return value.toString();
  }
}

/**
 * Converts the arguments of a WebGL function to a string.
 * Attempts to convert enum arguments to strings.
 *
 * @param {string} functionName the name of the WebGL function.
 * @param {number} args The arguments.
 * @return {string} The arguments as a string.
 */
function glFunctionArgsToString(functionName, args) {
  // apparently we can't do args.join(",");
  var argStr = "";
  var numArgs = args.length;
  for (var ii = 0; ii < numArgs; ++ii) {
    argStr += ((ii == 0) ? '' : ', ') +
        glFunctionArgToString(functionName, numArgs, ii, args[ii]);
  }
  return argStr;
};


function makePropertyWrapper(wrapper, original, propertyName) {
  //log("wrap prop: " + propertyName);
  wrapper.__defineGetter__(propertyName, function() {
    return original[propertyName];
  });
  // TODO(gmane): this needs to handle properties that take more than
  // one value?
  wrapper.__defineSetter__(propertyName, function(value) {
    //log("set: " + propertyName);
    original[propertyName] = value;
  });
}

// Makes a function that calls a function on another object.
function makeFunctionWrapper(original, functionName) {
  //log("wrap fn: " + functionName);
  var f = original[functionName];
  return function() {
    //log("call: " + functionName);
    var result = f.apply(original, arguments);
    return result;
  };
}

/**
 * Given a WebGL context returns a wrapped context that calls
 * gl.getError after every command and calls a function if the
 * result is not gl.NO_ERROR.
 *
 * @param {!WebGLRenderingContext} ctx The webgl context to
 *        wrap.
 * @param {!function(err, funcName, args): void} opt_onErrorFunc
 *        The function to call when gl.getError returns an
 *        error. If not specified the default function calls
 *        console.log with a message.
 * @param {!function(funcName, args): void} opt_onFunc The
 *        function to call when each webgl function is called.
 *        You can use this to log all calls for example.
 * @param {!WebGLRenderingContext} opt_err_ctx The webgl context
 *        to call getError on if different than ctx.
 */
function makeDebugContext(ctx, opt_onErrorFunc, opt_onFunc, opt_err_ctx) {
  opt_err_ctx = opt_err_ctx || ctx;
  init(ctx);
  opt_onErrorFunc = opt_onErrorFunc || function(err, functionName, args) {
        // apparently we can't do args.join(",");
        var argStr = "";
        var numArgs = args.length;
        for (var ii = 0; ii < numArgs; ++ii) {
          argStr += ((ii == 0) ? '' : ', ') +
              glFunctionArgToString(functionName, numArgs, ii, args[ii]);
        }
        error("WebGL error "+ glEnumToString(err) + " in "+ functionName +
              "(" + argStr + ")");
      };

  // Holds booleans for each GL error so after we get the error ourselves
  // we can still return it to the client app.
  var glErrorShadow = { };

  // Makes a function that calls a WebGL function and then calls getError.
  function makeErrorWrapper(ctx, functionName) {
    return function() {
      if (opt_onFunc) {
        opt_onFunc(functionName, arguments);
      }
      var result = ctx[functionName].apply(ctx, arguments);
      var err = opt_err_ctx.getError();
      if (err != 0) {
        glErrorShadow[err] = true;
        opt_onErrorFunc(err, functionName, arguments);
      }
      return result;
    };
  }

  // Make a an object that has a copy of every property of the WebGL context
  // but wraps all functions.
  var wrapper = {};
  for (var propertyName in ctx) {
    if (typeof ctx[propertyName] == 'function') {
      if (propertyName != 'getExtension') {
        wrapper[propertyName] = makeErrorWrapper(ctx, propertyName);
      } else {
        var wrapped = makeErrorWrapper(ctx, propertyName);
        wrapper[propertyName] = function () {
          var result = wrapped.apply(ctx, arguments);
          return makeDebugContext(result, opt_onErrorFunc, opt_onFunc, opt_err_ctx);
        };
      }
    } else {
      makePropertyWrapper(wrapper, ctx, propertyName);
    }
  }

  // Override the getError function with one that returns our saved results.
  wrapper.getError = function() {
    for (var err in glErrorShadow) {
      if (glErrorShadow.hasOwnProperty(err)) {
        if (glErrorShadow[err]) {
          glErrorShadow[err] = false;
          return err;
        }
      }
    }
    return ctx.NO_ERROR;
  };

  return wrapper;
}

function resetToInitialState(ctx) {
  var numAttribs = ctx.getParameter(ctx.MAX_VERTEX_ATTRIBS);
  var tmp = ctx.createBuffer();
  ctx.bindBuffer(ctx.ARRAY_BUFFER, tmp);
  for (var ii = 0; ii < numAttribs; ++ii) {
    ctx.disableVertexAttribArray(ii);
    ctx.vertexAttribPointer(ii, 4, ctx.FLOAT, false, 0, 0);
    ctx.vertexAttrib1f(ii, 0);
  }
  ctx.deleteBuffer(tmp);

  var numTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);
  for (var ii = 0; ii < numTextureUnits; ++ii) {
    ctx.activeTexture(ctx.TEXTURE0 + ii);
    ctx.bindTexture(ctx.TEXTURE_CUBE_MAP, null);
    ctx.bindTexture(ctx.TEXTURE_2D, null);
  }

  ctx.activeTexture(ctx.TEXTURE0);
  ctx.useProgram(null);
  ctx.bindBuffer(ctx.ARRAY_BUFFER, null);
  ctx.bindBuffer(ctx.ELEMENT_ARRAY_BUFFER, null);
  ctx.bindFramebuffer(ctx.FRAMEBUFFER, null);
  ctx.bindRenderbuffer(ctx.RENDERBUFFER, null);
  ctx.disable(ctx.BLEND);
  ctx.disable(ctx.CULL_FACE);
  ctx.disable(ctx.DEPTH_TEST);
  ctx.disable(ctx.DITHER);
  ctx.disable(ctx.SCISSOR_TEST);
  ctx.blendColor(0, 0, 0, 0);
  ctx.blendEquation(ctx.FUNC_ADD);
  ctx.blendFunc(ctx.ONE, ctx.ZERO);
  ctx.clearColor(0, 0, 0, 0);
  ctx.clearDepth(1);
  ctx.clearStencil(-1);
  ctx.colorMask(true, true, true, true);
  ctx.cullFace(ctx.BACK);
  ctx.depthFunc(ctx.LESS);
  ctx.depthMask(true);
  ctx.depthRange(0, 1);
  ctx.frontFace(ctx.CCW);
  ctx.hint(ctx.GENERATE_MIPMAP_HINT, ctx.DONT_CARE);
  ctx.lineWidth(1);
  ctx.pixelStorei(ctx.PACK_ALIGNMENT, 4);
  ctx.pixelStorei(ctx.UNPACK_ALIGNMENT, 4);
  ctx.pixelStorei(ctx.UNPACK_FLIP_Y_WEBGL, false);
  ctx.pixelStorei(ctx.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
  // TODO: Delete this IF.
  if (ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL) {
    ctx.pixelStorei(ctx.UNPACK_COLORSPACE_CONVERSION_WEBGL, ctx.BROWSER_DEFAULT_WEBGL);
  }
  ctx.polygonOffset(0, 0);
  ctx.sampleCoverage(1, false);
  ctx.scissor(0, 0, ctx.canvas.width, ctx.canvas.height);
  ctx.stencilFunc(ctx.ALWAYS, 0, 0xFFFFFFFF);
  ctx.stencilMask(0xFFFFFFFF);
  ctx.stencilOp(ctx.KEEP, ctx.KEEP, ctx.KEEP);
  ctx.viewport(0, 0, ctx.canvas.width, ctx.canvas.height);
  ctx.clear(ctx.COLOR_BUFFER_BIT | ctx.DEPTH_BUFFER_BIT | ctx.STENCIL_BUFFER_BIT);

  // TODO: This should NOT be needed but Firefox fails with 'hint'
  while(ctx.getError());
}

function makeLostContextSimulatingCanvas(canvas) {
  var unwrappedContext_;
  var wrappedContext_;
  var onLost_ = [];
  var onRestored_ = [];
  var wrappedContext_ = {};
  var contextId_ = 1;
  var contextLost_ = false;
  var resourceId_ = 0;
  var resourceDb_ = [];
  var numCallsToLoseContext_ = 0;
  var numCalls_ = 0;
  var canRestore_ = false;
  var restoreTimeout_ = 0;

  // Holds booleans for each GL error so can simulate errors.
  var glErrorShadow_ = { };

  canvas.getContext = function(f) {
    return function() {
      var ctx = f.apply(canvas, arguments);
      // Did we get a context and is it a WebGL context?
      if (ctx instanceof WebGLRenderingContext) {
        if (ctx != unwrappedContext_) {
          if (unwrappedContext_) {
            throw "got different context"
          }
          unwrappedContext_ = ctx;
          wrappedContext_ = makeLostContextSimulatingContext(unwrappedContext_);
        }
        return wrappedContext_;
      }
      return ctx;
    }
  }(canvas.getContext);

  function wrapEvent(listener) {
    if (typeof(listener) == "function") {
      return listener;
    } else {
      return function(info) {
        listener.handleEvent(info);
      }
    }
  }

  var addOnContextLostListener = function(listener) {
    onLost_.push(wrapEvent(listener));
  };

  var addOnContextRestoredListener = function(listener) {
    onRestored_.push(wrapEvent(listener));
  };


  function wrapAddEventListener(canvas) {
    var f = canvas.addEventListener;
    canvas.addEventListener = function(type, listener, bubble) {
      switch (type) {
        case 'webglcontextlost':
          addOnContextLostListener(listener);
          break;
        case 'webglcontextrestored':
          addOnContextRestoredListener(listener);
          break;
        default:
          f.apply(canvas, arguments);
      }
    };
  }

  wrapAddEventListener(canvas);

  canvas.loseContext = function() {
    if (!contextLost_) {
      contextLost_ = true;
      numCallsToLoseContext_ = 0;
      ++contextId_;
      while (unwrappedContext_.getError());
      clearErrors();
      glErrorShadow_[unwrappedContext_.CONTEXT_LOST_WEBGL] = true;
      var event = makeWebGLContextEvent("context lost");
      var callbacks = onLost_.slice();
      setTimeout(function() {
          //log("numCallbacks:" + callbacks.length);
          for (var ii = 0; ii < callbacks.length; ++ii) {
            //log("calling callback:" + ii);
            callbacks[ii](event);
          }
          if (restoreTimeout_ >= 0) {
            setTimeout(function() {
                canvas.restoreContext();
              }, restoreTimeout_);
          }
        }, 0);
    }
  };

  canvas.restoreContext = function() {
    if (contextLost_) {
      if (onRestored_.length) {
        setTimeout(function() {
            if (!canRestore_) {
              throw "can not restore. webglcontestlost listener did not call event.preventDefault";
            }
            freeResources();
            resetToInitialState(unwrappedContext_);
            contextLost_ = false;
            numCalls_ = 0;
            canRestore_ = false;
            var callbacks = onRestored_.slice();
            var event = makeWebGLContextEvent("context restored");
            for (var ii = 0; ii < callbacks.length; ++ii) {
              callbacks[ii](event);
            }
          }, 0);
      }
    }
  };

  canvas.loseContextInNCalls = function(numCalls) {
    if (contextLost_) {
      throw "You can not ask a lost contet to be lost";
    }
    numCallsToLoseContext_ = numCalls_ + numCalls;
  };

  canvas.getNumCalls = function() {
    return numCalls_;
  };

  canvas.setRestoreTimeout = function(timeout) {
    restoreTimeout_ = timeout;
  };

  function isWebGLObject(obj) {
    //return false;
    return (obj instanceof WebGLBuffer ||
            obj instanceof WebGLFramebuffer ||
            obj instanceof WebGLProgram ||
            obj instanceof WebGLRenderbuffer ||
            obj instanceof WebGLShader ||
            obj instanceof WebGLTexture);
  }

  function checkResources(args) {
    for (var ii = 0; ii < args.length; ++ii) {
      var arg = args[ii];
      if (isWebGLObject(arg)) {
        return arg.__webglDebugContextLostId__ == contextId_;
      }
    }
    return true;
  }

  function clearErrors() {
    var k = Object.keys(glErrorShadow_);
    for (var ii = 0; ii < k.length; ++ii) {
      delete glErrorShadow_[k];
    }
  }

  function loseContextIfTime() {
    ++numCalls_;
    if (!contextLost_) {
      if (numCallsToLoseContext_ == numCalls_) {
        canvas.loseContext();
      }
    }
  }

  // Makes a function that simulates WebGL when out of context.
  function makeLostContextFunctionWrapper(ctx, functionName) {
    var f = ctx[functionName];
    return function() {
      // log("calling:" + functionName);
      // Only call the functions if the context is not lost.
      loseContextIfTime();
      if (!contextLost_) {
        //if (!checkResources(arguments)) {
        //  glErrorShadow_[wrappedContext_.INVALID_OPERATION] = true;
        //  return;
        //}
        var result = f.apply(ctx, arguments);
        return result;
      }
    };
  }

  function freeResources() {
    for (var ii = 0; ii < resourceDb_.length; ++ii) {
      var resource = resourceDb_[ii];
      if (resource instanceof WebGLBuffer) {
        unwrappedContext_.deleteBuffer(resource);
      } else if (resource instanceof WebGLFramebuffer) {
        unwrappedContext_.deleteFramebuffer(resource);
      } else if (resource instanceof WebGLProgram) {
        unwrappedContext_.deleteProgram(resource);
      } else if (resource instanceof WebGLRenderbuffer) {
        unwrappedContext_.deleteRenderbuffer(resource);
      } else if (resource instanceof WebGLShader) {
        unwrappedContext_.deleteShader(resource);
      } else if (resource instanceof WebGLTexture) {
        unwrappedContext_.deleteTexture(resource);
      }
    }
  }

  function makeWebGLContextEvent(statusMessage) {
    return {
      statusMessage: statusMessage,
      preventDefault: function() {
          canRestore_ = true;
        }
    };
  }

  return canvas;

  function makeLostContextSimulatingContext(ctx) {
    // copy all functions and properties to wrapper
    for (var propertyName in ctx) {
      if (typeof ctx[propertyName] == 'function') {
         wrappedContext_[propertyName] = makeLostContextFunctionWrapper(
             ctx, propertyName);
       } else {
         makePropertyWrapper(wrappedContext_, ctx, propertyName);
       }
    }

    // Wrap a few functions specially.
    wrappedContext_.getError = function() {
      loseContextIfTime();
      if (!contextLost_) {
        var err;
        while (err = unwrappedContext_.getError()) {
          glErrorShadow_[err] = true;
        }
      }
      for (var err in glErrorShadow_) {
        if (glErrorShadow_[err]) {
          delete glErrorShadow_[err];
          return err;
        }
      }
      return wrappedContext_.NO_ERROR;
    };

    var creationFunctions = [
      "createBuffer",
      "createFramebuffer",
      "createProgram",
      "createRenderbuffer",
      "createShader",
      "createTexture"
    ];
    for (var ii = 0; ii < creationFunctions.length; ++ii) {
      var functionName = creationFunctions[ii];
      wrappedContext_[functionName] = function(f) {
        return function() {
          loseContextIfTime();
          if (contextLost_) {
            return null;
          }
          var obj = f.apply(ctx, arguments);
          obj.__webglDebugContextLostId__ = contextId_;
          resourceDb_.push(obj);
          return obj;
        };
      }(ctx[functionName]);
    }

    var functionsThatShouldReturnNull = [
      "getActiveAttrib",
      "getActiveUniform",
      "getBufferParameter",
      "getContextAttributes",
      "getAttachedShaders",
      "getFramebufferAttachmentParameter",
      "getParameter",
      "getProgramParameter",
      "getProgramInfoLog",
      "getRenderbufferParameter",
      "getShaderParameter",
      "getShaderInfoLog",
      "getShaderSource",
      "getTexParameter",
      "getUniform",
      "getUniformLocation",
      "getVertexAttrib"
    ];
    for (var ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {
      var functionName = functionsThatShouldReturnNull[ii];
      wrappedContext_[functionName] = function(f) {
        return function() {
          loseContextIfTime();
          if (contextLost_) {
            return null;
          }
          return f.apply(ctx, arguments);
        }
      }(wrappedContext_[functionName]);
    }

    var isFunctions = [
      "isBuffer",
      "isEnabled",
      "isFramebuffer",
      "isProgram",
      "isRenderbuffer",
      "isShader",
      "isTexture"
    ];
    for (var ii = 0; ii < isFunctions.length; ++ii) {
      var functionName = isFunctions[ii];
      wrappedContext_[functionName] = function(f) {
        return function() {
          loseContextIfTime();
          if (contextLost_) {
            return false;
          }
          return f.apply(ctx, arguments);
        }
      }(wrappedContext_[functionName]);
    }

    wrappedContext_.checkFramebufferStatus = function(f) {
      return function() {
        loseContextIfTime();
        if (contextLost_) {
          return wrappedContext_.FRAMEBUFFER_UNSUPPORTED;
        }
        return f.apply(ctx, arguments);
      };
    }(wrappedContext_.checkFramebufferStatus);

    wrappedContext_.getAttribLocation = function(f) {
      return function() {
        loseContextIfTime();
        if (contextLost_) {
          return -1;
        }
        return f.apply(ctx, arguments);
      };
    }(wrappedContext_.getAttribLocation);

    wrappedContext_.getVertexAttribOffset = function(f) {
      return function() {
        loseContextIfTime();
        if (contextLost_) {
          return 0;
        }
        return f.apply(ctx, arguments);
      };
    }(wrappedContext_.getVertexAttribOffset);

    wrappedContext_.isContextLost = function() {
      return contextLost_;
    };

    return wrappedContext_;
  }
}

return {
  /**
   * Initializes this module. Safe to call more than once.
   * @param {!WebGLRenderingContext} ctx A WebGL context. If
   *    you have more than one context it doesn't matter which one
   *    you pass in, it is only used to pull out constants.
   */
  'init': init,

  /**
   * Returns true or false if value matches any WebGL enum
   * @param {*} value Value to check if it might be an enum.
   * @return {boolean} True if value matches one of the WebGL defined enums
   */
  'mightBeEnum': mightBeEnum,

  /**
   * Gets an string version of an WebGL enum.
   *
   * Example:
   *   WebGLDebugUtil.init(ctx);
   *   var str = WebGLDebugUtil.glEnumToString(ctx.getError());
   *
   * @param {number} value Value to return an enum for
   * @return {string} The string version of the enum.
   */
  'glEnumToString': glEnumToString,

  /**
   * Converts the argument of a WebGL function to a string.
   * Attempts to convert enum arguments to strings.
   *
   * Example:
   *   WebGLDebugUtil.init(ctx);
   *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 2, 0, gl.TEXTURE_2D);
   *
   * would return 'TEXTURE_2D'
   *
   * @param {string} functionName the name of the WebGL function.
   * @param {number} numArgs The number of arguments
   * @param {number} argumentIndx the index of the argument.
   * @param {*} value The value of the argument.
   * @return {string} The value as a string.
   */
  'glFunctionArgToString': glFunctionArgToString,

  /**
   * Converts the arguments of a WebGL function to a string.
   * Attempts to convert enum arguments to strings.
   *
   * @param {string} functionName the name of the WebGL function.
   * @param {number} args The arguments.
   * @return {string} The arguments as a string.
   */
  'glFunctionArgsToString': glFunctionArgsToString,

  /**
   * Given a WebGL context returns a wrapped context that calls
   * gl.getError after every command and calls a function if the
   * result is not NO_ERROR.
   *
   * You can supply your own function if you want. For example, if you'd like
   * an exception thrown on any GL error you could do this
   *
   *    function throwOnGLError(err, funcName, args) {
   *      throw WebGLDebugUtils.glEnumToString(err) +
   *            " was caused by call to " + funcName;
   *    };
   *
   *    ctx = WebGLDebugUtils.makeDebugContext(
   *        canvas.getContext("webgl"), throwOnGLError);
   *
   * @param {!WebGLRenderingContext} ctx The webgl context to wrap.
   * @param {!function(err, funcName, args): void} opt_onErrorFunc The function
   *     to call when gl.getError returns an error. If not specified the default
   *     function calls console.log with a message.
   * @param {!function(funcName, args): void} opt_onFunc The
   *     function to call when each webgl function is called. You
   *     can use this to log all calls for example.
   */
  'makeDebugContext': makeDebugContext,

  /**
   * Given a canvas element returns a wrapped canvas element that will
   * simulate lost context. The canvas returned adds the following functions.
   *
   * loseContext:
   *   simulates a lost context event.
   *
   * restoreContext:
   *   simulates the context being restored.
   *
   * lostContextInNCalls:
   *   loses the context after N gl calls.
   *
   * getNumCalls:
   *   tells you how many gl calls there have been so far.
   *
   * setRestoreTimeout:
   *   sets the number of milliseconds until the context is restored
   *   after it has been lost. Defaults to 0. Pass -1 to prevent
   *   automatic restoring.
   *
   * @param {!Canvas} canvas The canvas element to wrap.
   */
  'makeLostContextSimulatingCanvas': makeLostContextSimulatingCanvas,

  /**
   * Resets a context to the initial state.
   * @param {!WebGLRenderingContext} ctx The webgl context to
   *     reset.
   */
  'resetToInitialState': resetToInitialState
};

}();

module.exports = WebGLDebugUtils;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19)))

/***/ }),
/* 232 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__myriahedral_js__ = __webpack_require__(21);


const TETRAHEDRON = {
  name: 'TETRAHEDRON',
  v: [[-1, -1, -1], [1, 1, -1], [-1, 1, 1], [1, -1, 1]],
  f: [[2, 3, 4], [1, 4, 3], [1, 3, 2], [1, 2, 4]]
};
/* harmony export (immutable) */ __webpack_exports__["TETRAHEDRON"] = TETRAHEDRON;


const ROT_TETRAHEDRON = {
  "name": "ROT_TETRAHEDRON",
  "v": [
    [
      -0.08671178767679688,
      1.726285173734457,
      -0.1114475877822868
    ],
    [
      0.645542784074652,
      -0.641979322665092,
      -1.4734778801188764
    ],
    [
      1.0281795343970843,
      -0.4422968819433293,
      1.3218246151703346
    ],
    [
      -1.5870105307949396,
      -0.6420089691260358,
      0.2631008527308284
    ]
  ],
  "f": [
    [
      2,
      3,
      4
    ],
    [
      1,
      4,
      3
    ],
    [
      1,
      3,
      2
    ],
    [
      1,
      2,
      4
    ]
  ],
  "w": {
    "2-3": 766,
    "0-2": 3060,
    "0-3": 831,
    "1-2": 0,
    "0-1": 0,
    "1-3": 0
  }
};
/* harmony export (immutable) */ __webpack_exports__["ROT_TETRAHEDRON"] = ROT_TETRAHEDRON;


const CUBE = {
  name: 'CUBE',
  v: [[-1.0, -1.0, -1.0],
      [-1.0, -1.0, 1.0],
      [-1.0, 1.0, -1.0],
      [-1.0, 1.0, 1.0],
      [1.0, -1.0, -1.0],
      [1.0, -1.0, 1.0],
      [1.0, 1.0, -1.0],
      [1.0, 1.0, 1.0]],

  f: [[1, 2, 4, 3],
      [5, 7, 8, 6],
      [1, 5, 6, 2],
      [4, 8, 7, 3],
      [1, 3, 7, 5],
      [2, 6, 8, 4]]
};
/* harmony export (immutable) */ __webpack_exports__["CUBE"] = CUBE;


const ROT_CUBE = {
  "name": "CUBE",
  "v": [
    [
      -1.1507094868266083,
      0.24712546697255144,
      -1.2707465052089821
    ],
    [
      -0.559669073503929,
      -1.533696429258986,
      -0.5783993352706147
    ],
    [
      -1.3414584983401976,
      0.913224906595052,
      0.6054001711308978
    ],
    [
      -0.7504180850175184,
      -0.8675969896364857,
      1.2977473410692653
    ],
    [
      0.7504180850175184,
      0.8675969896364857,
      -1.2977473410692653
    ],
    [
      1.3414584983401976,
      -0.913224906595052,
      -0.6054001711308978
    ],
    [
      0.559669073503929,
      1.533696429258986,
      0.5783993352706147
    ],
    [
      1.1507094868266083,
      -0.24712546697255144,
      1.2707465052089821
    ]
  ],
  "f": [
    [
      1,
      2,
      4,
      3
    ],
    [
      5,
      7,
      8,
      6
    ],
    [
      1,
      5,
      6,
      2
    ],
    [
      4,
      8,
      7,
      3
    ],
    [
      1,
      3,
      7,
      5
    ],
    [
      2,
      6,
      8,
      4
    ]
  ],
  "w": {
    "1-5": 2548,
    "0-1": 0,
    "0-4": 0,
    "4-5": 0,
    "2-3": 0,
    "0-2": 1,
    "1-3": 0,
    "2-6": 3570,
    "4-6": 0,
    "5-7": 0,
    "3-7": 2810,
    "6-7": 4590
  }
};
/* harmony export (immutable) */ __webpack_exports__["ROT_CUBE"] = ROT_CUBE;



const OCTAHEDRON = {
  name: 'OCTAHEDRON',
  v: [[1, 0, 0],
      [-1, 0, 0],
      [0, 1, 0],
      [0, -1, 0],
      [0, 0, 1],
      [0, 0, -1]],

  f: [[5, 2, 4],
      [5, 4, 1],
      [5, 1, 3],
      [5, 3, 2],
      [6, 1, 4],
      [6, 4, 2],
      [6, 2, 3],
      [6, 3, 1]]
};
/* harmony export (immutable) */ __webpack_exports__["OCTAHEDRON"] = OCTAHEDRON;


const ROT_OCTAHEDRON = {
  "name": "OCTAHEDRON",
  "v": [
    [
      -0.4515601194247348,
      -0.7896097425411768,
      -0.4154634918126693
    ],
    [
      0.4515601194247348,
      0.7896097425411768,
      0.4154634918126693
    ],
    [
      0.8027744472880923,
      -0.1563197846694946,
      -0.575427937888126
    ],
    [
      -0.8027744472880923,
      0.1563197846694946,
      0.575427937888126
    ],
    [
      0.3894183423086505,
      -0.5933637833613874,
      0.7044663052755917
    ],
    [
      -0.3894183423086505,
      0.5933637833613874,
      -0.7044663052755917
    ]
  ],
  "f": [
    [
      5,
      2,
      4
    ],
    [
      5,
      4,
      1
    ],
    [
      5,
      1,
      3
    ],
    [
      5,
      3,
      2
    ],
    [
      6,
      1,
      4
    ],
    [
      6,
      4,
      2
    ],
    [
      6,
      2,
      3
    ],
    [
      6,
      3,
      1
    ]
  ],
  "w": {
    "2-4": 0,
    "0-4": 514,
    "0-2": 507,
    "3-4": 2808,
    "0-3": 0,
    "3-5": 1785,
    "0-5": 0,
    "2-5": 0,
    "1-5": 0,
    "1-2": 3819,
    "1-4": 3066,
    "1-3": 4333
  }
};
/* harmony export (immutable) */ __webpack_exports__["ROT_OCTAHEDRON"] = ROT_OCTAHEDRON;


const DODECAHEDRON = {
  name: 'DODECAHEDRON',
  v: [[0.57735, 0.187592, -0.794654],
      [0, 0.607062, -0.794654],
      [-0.57735, 0.187592, -0.794654],
      [-0.356822, -0.491123, -0.794654],
      [0.356822, -0.491123, -0.794654],
      [0.934172, 0.303531, -0.187592],
      [0, 0.982247, -0.187592],
      [-0.934172, 0.303531, -0.187592],
      [-0.57735, -0.794654, -0.187592],
      [0.57735, -0.794654, -0.187592],
      [0.57735, -0.187592, 0.794654],
      [0, -0.607062, 0.794654],
      [-0.57735, -0.187592, 0.794654],
      [-0.356822, 0.491123, 0.794654],
      [0.356822, 0.491123, 0.794654],
      [0.934172, -0.303531, 0.187592],
      [0, -0.982247, 0.187592],
      [-0.934172, -0.303531, 0.187592],
      [-0.57735, 0.794654, 0.187592],
      [0.57735, 0.794654, 0.187592]],

  f: [[5, 4, 3, 2, 1],
      [6, 16, 10, 5, 1],
      [7, 20, 6, 1, 2],
      [8, 19, 7, 2, 3],
      [9, 18, 8, 3, 4],
      [10, 17, 9, 4, 5],
      [15, 14, 13, 12, 11],
      [16, 6, 20, 15, 11],
      [17, 10, 16, 11, 12],
      [18, 9, 17, 12, 13],
      [19, 8, 18, 13, 14],
      [20, 7, 19, 14, 15]]
};
/* harmony export (immutable) */ __webpack_exports__["DODECAHEDRON"] = DODECAHEDRON;


const ROT_DODECAHEDRON = {
  "name": "DODECAHEDRON",
  "v": [
    [
      -0.5647370281148928,
      -0.48288828055124994,
      0.669245663611066
    ],
    [
      -0.28640299686113146,
      0.11042813574946209,
      0.9517238054098789
    ],
    [
      0.4241676425688507,
      0.06543423250746477,
      0.9032158838803394
    ],
    [
      0.5849895987250783,
      -0.5556886023274521,
      0.5907588908817494
    ],
    [
      -0.026187230585937176,
      -0.8945706249387566,
      0.44615731135992953
    ],
    [
      -0.9502010914105499,
      -0.29562727539544204,
      0.09859793067537996
    ],
    [
      -0.49984673347330827,
      0.6643783429041414,
      0.5556568977246754
    ],
    [
      0.6498804085842089,
      0.5915772602745772,
      0.47716973046647315
    ],
    [
      0.9100961748594032,
      -0.4134215004136415,
      -0.028396763583476176
    ],
    [
      -0.07880849582434032,
      -0.9617440134723562,
      -0.2623669838527496
    ],
    [
      -0.4241676425688507,
      -0.06543423250746477,
      -0.9032158838803394
    ],
    [
      0.28640299686113146,
      -0.11042813574946209,
      -0.9517238054098789
    ],
    [
      0.5647370281148928,
      0.48288828055124994,
      -0.669245663611066
    ],
    [
      0.026187230585937176,
      0.8945706249387566,
      -0.44615731135992953
    ],
    [
      -0.5849895987250783,
      0.5556886023274521,
      -0.5907588908817494
    ],
    [
      -0.6498804085842089,
      -0.5915772602745772,
      -0.47716973046647315
    ],
    [
      0.49984673347330827,
      -0.6643783429041414,
      -0.5556568977246754
    ],
    [
      0.9502010914105499,
      0.29562727539544204,
      -0.09859793067537996
    ],
    [
      0.07880849582434032,
      0.9617440134723562,
      0.2623669838527496
    ],
    [
      -0.9100961748594032,
      0.4134215004136415,
      0.028396763583476176
    ]
  ],
  "f": [
    [
      5,
      4,
      3,
      2,
      1
    ],
    [
      6,
      16,
      10,
      5,
      1
    ],
    [
      7,
      20,
      6,
      1,
      2
    ],
    [
      8,
      19,
      7,
      2,
      3
    ],
    [
      9,
      18,
      8,
      3,
      4
    ],
    [
      10,
      17,
      9,
      4,
      5
    ],
    [
      15,
      14,
      13,
      12,
      11
    ],
    [
      16,
      6,
      20,
      15,
      11
    ],
    [
      17,
      10,
      16,
      11,
      12
    ],
    [
      18,
      9,
      17,
      12,
      13
    ],
    [
      19,
      8,
      18,
      13,
      14
    ],
    [
      20,
      7,
      19,
      14,
      15
    ]
  ],
  "w": {
    "4-9": 765,
    "0-4": 3825,
    "0-5": 0,
    "5-15": 0,
    "9-15": 0,
    "1-2": 1,
    "0-1": 889,
    "3-4": 298,
    "2-3": 0,
    "6-19": 0,
    "5-19": 0,
    "1-6": 5487,
    "7-18": 2573,
    "6-18": 4082,
    "2-7": 5583,
    "8-17": 1019,
    "7-17": 6126,
    "3-8": 0,
    "9-16": 2471,
    "8-16": 0,
    "10-14": 2,
    "10-15": 0,
    "14-19": 2735,
    "13-18": 0,
    "13-14": 257,
    "12-17": 4335,
    "12-13": 0,
    "11-16": 0,
    "11-12": 0,
    "10-11": 3475
  }
};
/* harmony export (immutable) */ __webpack_exports__["ROT_DODECAHEDRON"] = ROT_DODECAHEDRON;


const ICOSAHEDRON = {
  name: 'ICOSAHEDRON',
  v: [[0, 1, 0.618034],
      [0, -1, 0.618034],
      [0, 1, -0.618034],
      [0, -1, -0.618034],
      [0.618034, 0, 1],
      [0.618034, 0, -1],
      [-0.618034, 0, 1],
      [-0.618034, 0, -1],
      [1, 0.618034, 0],
      [-1, 0.618034, 0],
      [1, -0.618034, 0],
      [-1, -0.618034, 0]],
  f: [[7, 5, 1],
      [5, 7, 2],
      [8, 6, 4],
      [6, 8, 3],
      [11, 9, 5],
      [9, 11, 6],
      [10, 12, 7],
      [12, 10, 8],
      [2, 4, 11],
      [4, 2, 12],
      [3, 1, 9],
      [1, 3, 10],
      [1, 5, 9],
      [1, 10, 7],
      [3, 9, 6],
      [3, 8, 10],
      [2, 11, 5],
      [2, 7, 12],
      [4, 6, 11],
      [4, 12, 8]]
};
/* harmony export (immutable) */ __webpack_exports__["ICOSAHEDRON"] = ICOSAHEDRON;


const ROT_ICOSAHEDRON = {
  "name": "ICOSAHEDRON",
  "v": [
    [
      -0.464358512460375,
      0.8050743152558342,
      0.7198559189010936
    ],
    [
      1.1622950052648295,
      -0.16107443410776418,
      0.0713538546211307
    ],
    [
      -1.1622950052648295,
      0.16107443410776418,
      -0.0713538546211307
    ],
    [
      0.464358512460375,
      -0.8050743152558342,
      -0.7198559189010936
    ],
    [
      0.65134024360808,
      0.9559161931599437,
      0.20963335580762954
    ],
    [
      -0.4779447031819907,
      -0.08609748432069642,
      -1.0705709266788102
    ],
    [
      0.4779447031819907,
      0.08609748432069642,
      1.0705709266788102
    ],
    [
      -0.65134024360808,
      -0.9559161931599437,
      -0.20963335580762954
    ],
    [
      -0.36238365368687814,
      1.0022544927488628,
      -0.4961149508544048
    ],
    [
      -0.642943526486901,
      -0.4051417165846808,
      0.8969112756496073
    ],
    [
      0.642943526486901,
      0.4051417165846808,
      -0.8969112756496073
    ],
    [
      0.36238365368687814,
      -1.0022544927488628,
      0.4961149508544048
    ]
  ],
  "f": [
    [
      7,
      5,
      1
    ],
    [
      5,
      7,
      2
    ],
    [
      8,
      6,
      4
    ],
    [
      6,
      8,
      3
    ],
    [
      11,
      9,
      5
    ],
    [
      9,
      11,
      6
    ],
    [
      10,
      12,
      7
    ],
    [
      12,
      10,
      8
    ],
    [
      2,
      4,
      11
    ],
    [
      4,
      2,
      12
    ],
    [
      3,
      1,
      9
    ],
    [
      1,
      3,
      10
    ],
    [
      1,
      5,
      9
    ],
    [
      1,
      10,
      7
    ],
    [
      3,
      9,
      6
    ],
    [
      3,
      8,
      10
    ],
    [
      2,
      11,
      5
    ],
    [
      2,
      7,
      12
    ],
    [
      4,
      6,
      11
    ],
    [
      4,
      12,
      8
    ]
  ],
  "w": {
    "4-6": 4436,
    "0-4": 4205,
    "0-6": 5163,
    "4-8": 0,
    "0-8": 2552,
    "2-8": 3825,
    "0-2": 15,
    "2-9": 0,
    "0-9": 2044,
    "6-9": 1529,
    "5-8": 0,
    "2-5": 1,
    "5-7": 0,
    "2-7": 0,
    "7-9": 0,
    "4-10": 1024,
    "8-10": 0,
    "1-6": 4641,
    "1-4": 4335,
    "1-10": 0,
    "3-5": 1020,
    "3-7": 1275,
    "5-10": 2805,
    "3-10": 255,
    "9-11": 3479,
    "6-11": 0,
    "1-11": 0,
    "7-11": 766,
    "3-11": 4986,
    "1-3": 510
  }
};
/* harmony export (immutable) */ __webpack_exports__["ROT_ICOSAHEDRON"] = ROT_ICOSAHEDRON;


const GRATICULE = (degrees) => {
  const vertices = [];
  const faces = [];

  const pointsPerDisk = Math.round(360 / degrees);
  const levels = Math.round(180 / degrees) - 1;
  let levelBefore = [];
  let levelAfter = [];

  const northPole = vertices.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__myriahedral_js__["f" /* toCartesian */])(1, 0, 0));
  // first level connected to north pole
  for (let ppd = 0; ppd < pointsPerDisk; ppd++) {
    levelBefore.push(vertices.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__myriahedral_js__["f" /* toCartesian */])(1, ppd / pointsPerDisk * Math.PI * 2, degrees / 180 * Math.PI)));
    if (ppd !== 0) {
      faces.push([northPole, levelBefore[ppd - 1], levelBefore[ppd]]);
    }
  }
  // Connect last item
  faces.push([northPole, levelBefore[pointsPerDisk -1], levelBefore[0]]);

  // for each new level add the vertices
  // and connect them with the previous level
  for (let l = 1; l < levels; l++) {
    for (let ppd = 0; ppd < pointsPerDisk; ppd++) {
      levelAfter.push(vertices.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__myriahedral_js__["f" /* toCartesian */])(1, ppd / pointsPerDisk * Math.PI * 2, degrees / 180 * Math.PI * (l + 1))));
      if (ppd !== 0) {
        faces.push([levelBefore[ppd - 1], levelAfter[ppd - 1], levelAfter[ppd], levelBefore[ppd]]);
      }
    }
    // Connect last item
    faces.push([levelBefore[pointsPerDisk - 1], levelAfter[pointsPerDisk - 1], levelAfter[0], levelBefore[0]]);
    levelBefore = levelAfter;
    levelAfter = [];
  }

  // create south pole
  const southPole = vertices.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__myriahedral_js__["f" /* toCartesian */])(1, 0, Math.PI));
  // connect south pole to last row
  for (let ppd = 1; ppd < pointsPerDisk; ppd++) {
    faces.push([southPole, levelBefore[ppd], levelBefore[ppd - 1]]);
  }
  // Connect last item
  faces.push([southPole, levelBefore[0], levelBefore[pointsPerDisk -1]]);

  return {
    name: 'GRATICULE',
    v: vertices,
    f: faces
  };
};
/* harmony export (immutable) */ __webpack_exports__["GRATICULE"] = GRATICULE;


const IMG_COASTLINE_40 = {
  name: 'IMG_COASTLINE_40',
  "v": [
    [
      0.8653021716933508,
      -0.31852409331638254,
      0.3870330136302942
    ],
    [
      0.844424660663455,
      -0.3088201111762179,
      0.4376952494561911
    ],
    [
      0.8564826428164528,
      -0.268134589581079,
      0.4410683897360259
    ],
    [
      0.8763552662314904,
      -0.26629610997653913,
      0.40135748299950313
    ],
    [
      0.8794455677836853,
      -0.2790466814594363,
      0.38562733678009303
    ],
    [
      0.867378376926662,
      -0.3161631401218038,
      0.384311878645964
    ],
    [
      0.9025926451301766,
      -0.2711767961219998,
      0.33434961073989383
    ],
    [
      0.9025914012002837,
      -0.27547408335041035,
      0.33082138969776353
    ],
    [
      0.8926042024812025,
      -0.3130948976893309,
      0.324390694616544
    ],
    [
      0.8862867017320574,
      -0.32514598405537515,
      0.32981202431926726
    ],
    [
      0.922766149865975,
      -0.26705085720671756,
      0.27782453514166505
    ],
    [
      0.9141578278861217,
      -0.30818740290597785,
      0.2633172808696699
    ],
    [
      0.9070378365686128,
      -0.3186818520319492,
      0.27518037760424924
    ],
    [
      0.9403817885372472,
      -0.2542710095437931,
      0.22589454507151888
    ],
    [
      0.9366666839528794,
      -0.2801125374054149,
      0.21022009789983606
    ],
    [
      0.9351955112423522,
      -0.28405993347654857,
      0.21146940664184552
    ],
    [
      0.9198872712284688,
      -0.30984772768024726,
      0.24042003635976095
    ],
    [
      0.9347691957395731,
      -0.24268288759547607,
      0.2594447277643411
    ],
    [
      0.9574882390852858,
      -0.21638568707965702,
      0.19077082177425214
    ],
    [
      0.9552683569233592,
      -0.25446705907871964,
      0.15069466515033983
    ],
    [
      0.9549339645911762,
      -0.25555613159400226,
      0.15097081464603393
    ],
    [
      0.9438141930277065,
      -0.2786119648199116,
      0.17773615866966283
    ],
    [
      0.9550112494985091,
      -0.21881999057608284,
      0.20017823322124526
    ],
    [
      0.9668030487317852,
      -0.18958958034832765,
      0.171311575750941
    ],
    [
      0.9677585060448702,
      -0.18838630928796893,
      0.16719471418277176
    ],
    [
      0.9663896110846697,
      -0.22582562123295447,
      0.1228572683335058
    ],
    [
      0.9648014390875872,
      -0.23166833825530642,
      0.12445064959471144
    ],
    [
      0.9763132469390188,
      -0.15957306251258682,
      0.14611256472919984
    ],
    [
      0.9763405765859555,
      -0.19306636797403304,
      0.09738817212125474
    ],
    [
      0.9732087832765969,
      -0.20653601340477867,
      0.10103236768554419
    ],
    [
      0.9805609372452053,
      -0.1310498864590911,
      0.14603484381428927
    ],
    [
      0.9831030561354126,
      -0.12528033100646618,
      0.13346617429192373
    ],
    [
      0.9845958395080537,
      -0.15796364444734645,
      0.07495678659296512
    ],
    [
      0.9808363092498651,
      -0.1775458101418179,
      0.08023477898136501
    ],
    [
      0.9896121510820834,
      -0.09238942240045929,
      0.11014529068099628
    ],
    [
      0.9905203642474874,
      -0.12584473864287404,
      0.055068228289383916
    ],
    [
      0.9876985021246034,
      -0.1442871982659576,
      0.06027332177153582
    ],
    [
      0.9904333025007427,
      -0.08370035887406352,
      0.10970926680014444
    ],
    [
      0.9942546748526704,
      -0.0567252434111027,
      0.09077383044447161
    ],
    [
      0.9949537834748013,
      -0.09434171401570804,
      0.034155669306231644
    ],
    [
      0.9931054575346885,
      -0.11058118907141494,
      0.03890181021969482
    ],
    [
      0.9972587870937071,
      -0.02027035297680069,
      0.0711619586196461
    ],
    [
      0.997833514093922,
      -0.06491528185839238,
      0.010690385036117087
    ],
    [
      0.9970795123603886,
      -0.07509133954515561,
      0.013918935177804966
    ],
    [
      0.9956424747564803,
      -0.0295452542239841,
      0.08844851843661176
    ],
    [
      0.9987711497879795,
      0.013563107041797064,
      0.04766793973490023
    ],
    [
      0.9989428996315226,
      0.01616375575138512,
      0.04303273493255261
    ],
    [
      0.9991009237513977,
      -0.04069057521158774,
      -0.011900472597922495
    ],
    [
      0.9989629536641892,
      -0.04425059047801519,
      -0.010719255984715324
    ],
    [
      0.9988299105921706,
      0.041253191146143134,
      0.0252385405025018
    ],
    [
      0.9987927168552356,
      0.04605413857216851,
      0.017091666896840933
    ],
    [
      0.9990993119442825,
      -0.013319303251484343,
      -0.0402884727106436
    ],
    [
      0.9978597718723414,
      0.06531345882450626,
      0.003166666268841584
    ],
    [
      0.9968830489006384,
      0.07707684856610687,
      -0.016832891304961836
    ],
    [
      0.9978381660741902,
      0.010347787201775262,
      -0.06489928832987026
    ],
    [
      0.9990919028090559,
      -0.013260042427354684,
      -0.040491246167596216
    ],
    [
      0.9959256149438391,
      0.08687935583957827,
      -0.024169133779180126
    ],
    [
      0.9934432149091638,
      0.1024828015905325,
      -0.05067399855054411
    ],
    [
      0.9932218327743979,
      0.10297222228616966,
      -0.053917644029701846
    ],
    [
      0.9950939041842272,
      0.02834861199368187,
      -0.09478648666040884
    ],
    [
      0.9966852880727829,
      0.014343533139780953,
      -0.08007933314121414
    ],
    [
      0.989400478312685,
      0.11962534116122109,
      -0.08231932498928594
    ],
    [
      0.9879112644808878,
      0.12155642871765647,
      -0.09620482393925296
    ],
    [
      0.9911467075807078,
      0.04099385664821551,
      -0.12628423404775663
    ],
    [
      0.9922072557181026,
      0.03483855098773175,
      -0.11962874681876015
    ],
    [
      0.9847036259802838,
      0.13182577565256837,
      -0.11393302354839832
    ],
    [
      0.9812326941464011,
      0.13497694881791628,
      -0.13770847187446675
    ],
    [
      0.9857114683534485,
      0.05000024164444329,
      -0.16085048023548393
    ],
    [
      0.9786409930825909,
      0.14150806962069562,
      -0.14912167143156824
    ],
    [
      0.9730689807253011,
      0.1453380383551883,
      -0.1789234846443853
    ],
    [
      0.9787834722682056,
      0.05867723470181781,
      -0.1963158081824859
    ],
    [
      0.9855231720011793,
      0.049722460747880656,
      -0.16208563892556738
    ],
    [
      0.9710375571762813,
      0.1495260047984734,
      -0.18635459866106646
    ],
    [
      0.9636956149197505,
      0.15357002382531856,
      -0.21841934338957944
    ],
    [
      0.9700843713333656,
      0.06445091852282912,
      -0.23405638550638327
    ],
    [
      0.977228180810014,
      0.05674126001369754,
      -0.20446396269956385
    ],
    [
      0.9557528376584734,
      0.16682928877434217,
      -0.24229011889638252
    ],
    [
      0.9526326414837307,
      0.16353705638321903,
      -0.2564111572635672
    ],
    [
      0.9595706487984594,
      0.07012336507515263,
      -0.27259288992018904
    ],
    [
      0.9680437117986886,
      0.06234379258461488,
      -0.24290867331815047
    ],
    [
      0.9420977253915042,
      0.1677405620052168,
      -0.2903704180358737
    ],
    [
      0.9413486423090012,
      0.1579367244036075,
      -0.29819242899117854
    ],
    [
      0.9476881415636024,
      0.0747217299748708,
      -0.31032861519571164
    ],
    [
      0.9567074009125129,
      0.06757487082598576,
      -0.2830981912200704
    ],
    [
      0.9305292422429767,
      0.13552801158779937,
      -0.3402168241074635
    ],
    [
      0.932977335114874,
      0.08055749894727839,
      -0.3508044776300713
    ],
    [
      0.9446233671457103,
      0.07230836697457893,
      -0.3200909156907927
    ],
    [
      0.9175339064519576,
      0.14956191025008347,
      -0.3684599917404278
    ],
    [
      0.914465672669737,
      0.14497339868697376,
      -0.37780318577512434
    ],
    [
      0.9170960778328517,
      0.08680867512168569,
      -0.3891002929158723
    ],
    [
      0.9300970324543916,
      0.0785361105293996,
      -0.35881971735461893
    ],
    [
      0.8969103614883687,
      0.15834551967274033,
      -0.4128904211220861
    ],
    [
      0.8982180596290927,
      0.0932021085246107,
      -0.4295552168496087
    ],
    [
      0.9134135617206787,
      0.08447149918735948,
      -0.3981711078038987
    ],
    [
      0.8983348118506876,
      0.1596270843686619,
      -0.40928444846237394
    ],
    [
      0.8788260421477763,
      0.1729761213272228,
      -0.4446842127774102
    ],
    [
      0.8770582408474502,
      0.17185933088507618,
      -0.4485902501719248
    ],
    [
      0.8782717419174114,
      0.10101924200710673,
      -0.46736908337379945
    ],
    [
      0.8956421354364501,
      0.09181541154736662,
      -0.4351954680752356
    ],
    [
      0.8565684484181514,
      0.18679665244132684,
      -0.48103794425308577
    ],
    [
      0.8545950660827003,
      0.11042124541738883,
      -0.5074193744700508
    ],
    [
      0.8549259922602441,
      0.10995350335342363,
      -0.5069632874855395
    ],
    [
      0.8755911456499745,
      0.09975708500019254,
      -0.47264010584336724
    ],
    [
      0.8337180611493121,
      0.2068206512651737,
      -0.5119955202183719
    ],
    [
      0.8299652713851253,
      0.12210199042509398,
      -0.5442873801851791
    ],
    [
      0.8300219243459421,
      0.12202785076065374,
      -0.5442176115707711
    ],
    [
      0.8537100297831184,
      0.19221460257831474,
      -0.4839759618032363
    ],
    [
      0.8315154818084454,
      0.21043969243329877,
      -0.5140983751787663
    ],
    [
      0.8091240561643457,
      0.22677955315937845,
      -0.5421155743981069
    ],
    [
      0.8034360278372231,
      0.13464770645128118,
      -0.5799659854858339
    ],
    [
      0.8038320517826767,
      0.13416217957485682,
      -0.5795295869052554
    ],
    [
      0.7853038698277878,
      0.2488736980133794,
      -0.5668859801323772
    ],
    [
      0.7752475234130757,
      0.1629784764338073,
      -0.6102698531479395
    ],
    [
      0.787816223608232,
      0.14194433630312678,
      -0.5993307961477777
    ],
    [
      0.78990417452783,
      0.25445464880454166,
      -0.5579464371830551
    ],
    [
      0.7586432835239729,
      0.2421314591535691,
      -0.6048410740451812
    ],
    [
      0.7434422038828726,
      0.1874310404915761,
      -0.6419994505807792
    ],
    [
      0.7480449344743983,
      0.17998162462821107,
      -0.6387764795320683
    ],
    [
      0.7316358380749567,
      0.2625066876519871,
      -0.6291257738976666
    ],
    [
      0.7123332810666063,
      0.207841757720801,
      -0.6703604257654318
    ],
    [
      0.7098537200145025,
      0.3141818687104836,
      -0.6303946776069422
    ],
    [
      0.682550933986721,
      0.31070488701791327,
      -0.6615033603066885
    ],
    [
      0.6698016948280362,
      0.2647959750202275,
      -0.6937209678383501
    ],
    [
      0.672205419815344,
      0.21004369915012505,
      -0.7099447288474005
    ],
    [
      0.6574219642549297,
      0.3943596377634526,
      -0.6420878732839207
    ],
    [
      0.6636195480291999,
      0.33531549161045604,
      -0.6687096653702252
    ],
    [
      0.7343276589994193,
      0.3481498720736509,
      -0.5827130990492089
    ],
    [
      0.7315770733565381,
      0.35479596540404107,
      -0.582163901897135
    ],
    [
      0.7257325963287573,
      0.3620681737560259,
      -0.5849947317531135
    ],
    [
      0.6671771723817576,
      0.46147107461930914,
      -0.5847384611451368
    ],
    [
      0.6637320860509341,
      0.46298456767612434,
      -0.5874563882027563
    ],
    [
      0.6524621926092216,
      0.4553112908003437,
      -0.605792634228324
    ],
    [
      0.6408091753218013,
      0.42544613156811156,
      -0.6390298818968657
    ],
    [
      0.6415013137086807,
      0.41872720817306497,
      -0.6427624675147324
    ],
    [
      0.6412588819617211,
      0.5405045759703203,
      -0.544648372493986
    ],
    [
      0.6308376255858105,
      0.5236298138613118,
      -0.5725868564513377
    ],
    [
      0.6680342460740046,
      0.4617001826782087,
      -0.5835779188653772
    ],
    [
      0.6907140306145,
      0.48659969043933693,
      -0.5349157589533263
    ],
    [
      0.6853425089927996,
      0.5168813155495381,
      -0.512971101528374
    ],
    [
      0.6964436077627928,
      0.5290886606620544,
      -0.48480046448531655
    ],
    [
      0.6671639772378597,
      0.5712829410095414,
      -0.47804605299871417
    ],
    [
      0.6448052183858582,
      0.5823410451911284,
      -0.49508094027953636
    ],
    [
      0.635918905105471,
      0.5685238215341122,
      -0.5219078563096248
    ],
    [
      0.6761143883894858,
      0.5817818703440154,
      -0.4521052854720134
    ],
    [
      0.6679039786127593,
      0.6106848212128844,
      -0.4254037194165494
    ],
    [
      0.6225715448070277,
      0.6333752381451888,
      -0.45960905049957024
    ],
    [
      0.6166593198594815,
      0.622859730490663,
      -0.481432279104279
    ],
    [
      0.6686136447872874,
      0.6115014308656755,
      -0.42310967142514067
    ],
    [
      0.659531865417846,
      0.6392830428139511,
      -0.3953920961134556
    ],
    [
      0.6140475434703119,
      0.6618733882558172,
      -0.4299642220892799
    ],
    [
      0.6600545822281025,
      0.6398809903307975,
      -0.3935483028714046
    ],
    [
      0.6502513630750595,
      0.6660875775656736,
      -0.3653772075974634
    ],
    [
      0.6042987860393357,
      0.6895919413303968,
      -0.3991064164399763
    ],
    [
      0.6136549054739995,
      0.6623855168652311,
      -0.42973606322355284
    ],
    [
      0.6512431493759111,
      0.6671710179432099,
      -0.36161470269828044
    ],
    [
      0.6416220781196451,
      0.6897721289402174,
      -0.3354631410553298
    ],
    [
      0.5940335255459616,
      0.7170766151974006,
      -0.36458921879901285
    ],
    [
      0.5934185683130186,
      0.7156545508982547,
      -0.3683652624229717
    ],
    [
      0.6032930710062716,
      0.6908314963839809,
      -0.39848376890369264
    ],
    [
      0.6435237960748722,
      0.6915451601907621,
      -0.32808903563228003
    ],
    [
      0.6334254419530941,
      0.7123702494089024,
      -0.3021602840275762
    ],
    [
      0.5871595148456608,
      0.7393415561282864,
      -0.3295720975871778
    ],
    [
      0.58558460860102,
      0.7358299386545544,
      -0.3400661223192114
    ],
    [
      0.6272118606122461,
      0.7308230931742221,
      -0.26926360390997284
    ],
    [
      0.5737146729251668,
      0.7648829895769017,
      -0.2929257351723646
    ],
    [
      0.6360759225981885,
      0.7144852876453692,
      -0.2914072655737621
    ],
    [
      0.6359821990682928,
      0.7364462361441237,
      -0.23059398027141098
    ],
    [
      0.6339888340455117,
      0.7386063083735152,
      -0.22916997957075522
    ],
    [
      0.5381910046306357,
      0.800584512615024,
      -0.26346703910666275
    ],
    [
      0.5382948808196488,
      0.8003967585962091,
      -0.26382503693175496
    ],
    [
      0.5568311576379478,
      0.8038338603028612,
      -0.20926104968240816
    ],
    [
      0.5312291530135782,
      0.8121389006409336,
      -0.24130062796066645
    ],
    [
      0.5293898528279952,
      0.8110177917516743,
      -0.24899101426555828
    ],
    [
      0.6216412141479085,
      0.7576925440327004,
      -0.19865600818995757
    ],
    [
      0.5741031201982141,
      0.80211731946141,
      -0.16435757724765007
    ],
    [
      0.627068725605162,
      0.759817447619935,
      -0.1716457388350941
    ],
    [
      0.6226022438179504,
      0.7657425410062229,
      -0.16126005979840927
    ],
    [
      0.6278181699410601,
      0.7668937841325141,
      -0.13310998967309326
    ],
    [
      0.6214009638683755,
      0.774209727679896,
      -0.12025032086973804
    ],
    [
      0.5738463664086484,
      0.8088520766419036,
      -0.12829133202080162
    ],
    [
      0.5723420115836775,
      0.8091923681720947,
      -0.13278679553474756
    ],
    [
      0.6257531372532085,
      0.7743368030623949,
      -0.09399748209860206
    ],
    [
      0.6188619787668169,
      0.7812970471488417,
      -0.08114662872430706
    ],
    [
      0.5724646430891537,
      0.8150680009191607,
      -0.08915372280758209
    ],
    [
      0.5710702449275716,
      0.8155506080112481,
      -0.09357339969695945
    ],
    [
      0.6226129996648198,
      0.7805428418047701,
      -0.05573082410757094
    ],
    [
      0.6139703055331128,
      0.7882564667969907,
      -0.041136437331162796
    ],
    [
      0.5687063100296745,
      0.8208456490956728,
      -0.0527783411366379
    ],
    [
      0.6168127945233015,
      0.7868919867733899,
      -0.01851965615724169
    ],
    [
      0.6057570336936486,
      0.7956480863605649,
      -0.0015933616798324104
    ],
    [
      0.5633642352667931,
      0.8260291305923803,
      -0.017222480514083927
    ],
    [
      0.5675481533807004,
      0.8217682999706364,
      -0.050852283700214974
    ],
    [
      0.6077571009048041,
      0.7939191642140355,
      0.01799074744070884
    ],
    [
      0.5941873566593593,
      0.8034696025286012,
      0.03712119338996296
    ],
    [
      0.5556215622187543,
      0.8312471226877637,
      0.017688997170697936
    ],
    [
      0.5598412982888555,
      0.8285160921631287,
      -0.011781585503936823
    ],
    [
      0.5953083169027693,
      0.8017576858223914,
      0.0528452557105701
    ],
    [
      0.5789285785997205,
      0.8119879346787597,
      0.07427849498091153
    ],
    [
      0.5417805185761922,
      0.839009929601602,
      0.05036077562177798
    ],
    [
      0.5448749199964674,
      0.8378822871853887,
      0.03262812252988255
    ],
    [
      0.5794363711983342,
      0.8104057552338143,
      0.0865794641726167
    ],
    [
      0.5598354541460199,
      0.8211766421035861,
      0.1106941134143932
    ],
    [
      0.5220404406157527,
      0.8494837536426583,
      0.0764926836951758
    ],
    [
      0.4813938891359318,
      0.8630807151606293,
      0.15281231174352064
    ],
    [
      0.5039138704105297,
      0.8595479567328582,
      0.0851358989160758
    ],
    [
      0.559075754050053,
      0.8168118156881934,
      0.14231218846438085
    ],
    [
      0.3115912830660597,
      0.9468365462239732,
      0.08007138722355575
    ],
    [
      0.32961217440015755,
      0.940497636846393,
      0.08258334925122886
    ],
    [
      0.3564806261669454,
      0.9270182010475836,
      0.11644233806534655
    ],
    [
      0.35994263131627824,
      0.9229285566896062,
      0.13654369779654507
    ],
    [
      0.27617971591569956,
      0.9488920869544588,
      0.1527369366981517
    ],
    [
      0.2747340727068915,
      0.9491797590137886,
      0.1535544671196861
    ],
    [
      0.16371988209902,
      0.9782885202885891,
      0.12707230727835878
    ],
    [
      0.18312524067281682,
      0.9782764774352342,
      0.09716110294471068
    ],
    [
      0.2642628162004036,
      0.9624667693922184,
      0.061829457296162495
    ],
    [
      0.3000220846610463,
      0.9515941542919868,
      0.06674814029588089
    ],
    [
      0.04415464859571364,
      0.9987027966770639,
      -0.025359237307148112
    ],
    [
      0.08840590363928293,
      0.995895598309626,
      0.0193998316805509
    ],
    [
      0.08952793890632349,
      0.9944090815033194,
      0.055993988774778854
    ],
    [
      -0.027530909876168737,
      0.9980260314868983,
      0.05644545575954772
    ],
    [
      -0.023784806307543673,
      0.9995572415933288,
      0.01787746534741965
    ],
    [
      -0.034859862406551353,
      0.9990757650187138,
      -0.025147678725245877
    ],
    [
      0.02439506990689494,
      0.9980531956815069,
      -0.05739946998160749
    ],
    [
      0.04214354531158572,
      0.9983297704217889,
      -0.03951697202656601
    ],
    [
      -0.05166886688963352,
      0.9976319324972848,
      -0.04539664586810908
    ],
    [
      -0.05571484299455336,
      0.9966082746911422,
      -0.06056239003901056
    ],
    [
      0.007819175974270821,
      0.9957250336732061,
      -0.0920354160287004
    ],
    [
      0.02180027772182901,
      0.9967468185186921,
      -0.07759205928519095
    ],
    [
      -0.0744885499107775,
      0.9937138366607859,
      -0.08357192567537473
    ],
    [
      -0.0780523216819529,
      0.9923519752299387,
      -0.09563154467693175
    ],
    [
      -0.008898819140387586,
      0.9919368730313103,
      -0.12642013660320509
    ],
    [
      0.005052532749895467,
      0.9936800866502208,
      -0.11213544179973066
    ],
    [
      -0.09544906339977305,
      0.9884782141612714,
      -0.11747466290502753
    ],
    [
      -0.03220189517999767,
      0.9858192346860356,
      -0.16469205952278174
    ],
    [
      -0.011279166182780175,
      0.9894088981992754,
      -0.1447163175813877
    ],
    [
      -0.12018159691983524,
      0.9814082884235483,
      -0.14964676800839935
    ],
    [
      -0.053149317626473375,
      0.9789886087884533,
      -0.19686658908582935
    ],
    [
      -0.034269512325356764,
      0.9833435708190539,
      -0.17849656090192492
    ],
    [
      -0.09678517782555525,
      0.9882534468497025,
      -0.11826983615004202
    ],
    [
      -0.11900443944491165,
      0.9820920030685136,
      -0.14605903224818712
    ],
    [
      -0.14049274418242344,
      0.9744990819012924,
      -0.1749666488380864
    ],
    [
      -0.1442238656352178,
      0.9718217386301576,
      -0.18644566207636018
    ],
    [
      -0.06952500849410659,
      0.9708898626245691,
      -0.22921419643368476
    ],
    [
      -0.0564196473380163,
      0.9748245873947395,
      -0.21571705357928872
    ],
    [
      -0.15893107460688893,
      0.9658195451774636,
      -0.20477675570605375
    ],
    [
      -0.16308667181039868,
      0.9623252917532649,
      -0.21756095773323147
    ],
    [
      -0.07777691185503563,
      0.9593722566653164,
      -0.2712114030109949
    ],
    [
      -0.17678994672487652,
      0.9559135115588171,
      -0.23446678476131017
    ],
    [
      -0.18533703901060858,
      0.9471863560287722,
      -0.2617024816919322
    ],
    [
      -0.18504440017233487,
      0.9459330821214632,
      -0.26640040186352915
    ],
    [
      -0.07135275877772022,
      0.9516959511391423,
      -0.2986362342385328
    ],
    [
      -0.19943488746564475,
      0.9287647516792301,
      -0.31244481384683537
    ],
    [
      -0.19647280339478151,
      0.9286258898567719,
      -0.3147259033093943
    ],
    [
      -0.05898037349680354,
      0.9436870551448348,
      -0.32553964043453637
    ],
    [
      -0.060286891309126976,
      0.9466103931176203,
      -0.3166926812826369
    ],
    [
      -0.13851129988678104,
      0.9074352035928226,
      -0.3967064041380311
    ],
    [
      -0.10314592760340122,
      0.9014742038128035,
      -0.42036314952539056
    ],
    [
      -0.020106933828532774,
      0.9106406971998686,
      -0.4127096216655872
    ],
    [
      0.847853057198183,
      -0.364388854290401,
      0.3851830165890282
    ],
    [
      0.8318910850463989,
      -0.36694130568204564,
      0.41630673884130287
    ],
    [
      0.8306615825349584,
      -0.33050262438378675,
      0.44807292997451653
    ],
    [
      0.8734425549264521,
      -0.36206207526943335,
      0.32559047420823406
    ],
    [
      0.8676849509064364,
      -0.3682555183582332,
      0.3339321774989703
    ],
    [
      0.8505549543417616,
      -0.37173249758480265,
      0.3719828220281798
    ],
    [
      0.8907542083868639,
      -0.37256706180442567,
      0.26028969380194183
    ],
    [
      0.8784746237784113,
      -0.3760636814286409,
      0.29471756460672005
    ],
    [
      0.9056352152577316,
      -0.3629513169436246,
      0.21929705518763953
    ],
    [
      0.9039533040796626,
      -0.36677753801230395,
      0.21986964695722336
    ],
    [
      0.9028783631835364,
      -0.3681823067667188,
      0.2219289306939405
    ],
    [
      0.8907545674130615,
      -0.3725680217306496,
      0.26028709114452825
    ],
    [
      0.9248411982121437,
      -0.3286113835743697,
      0.19152889253286307
    ],
    [
      0.9369663342229589,
      -0.31401664932014695,
      0.15325675346469533
    ],
    [
      0.928622355223858,
      -0.33098683262086,
      0.1676551162658195
    ],
    [
      0.9483427546365155,
      -0.294343755317453,
      0.11835443985776455
    ],
    [
      0.9396624154877637,
      -0.313936200440708,
      0.13593604000614803
    ],
    [
      0.9587726478229305,
      -0.270950330386082,
      0.08567921714324833
    ],
    [
      0.9500918615311409,
      -0.29331516713645195,
      0.10626225755180731
    ],
    [
      0.9683331884597339,
      -0.24390412835888883,
      0.053306775337628114
    ],
    [
      0.959831322851749,
      -0.2696867939728895,
      0.07741359589429858
    ],
    [
      0.9768561626711878,
      -0.21227383044598194,
      0.026303200548835632
    ],
    [
      0.9757402980191325,
      -0.2172281124609027,
      0.027254687270412938
    ],
    [
      0.968513854295078,
      -0.2435239179049149,
      0.051739882554299337
    ],
    [
      0.9834838765833586,
      -0.1809710159904609,
      0.002992636287563039
    ],
    [
      0.9820860850294676,
      -0.18837689505390298,
      0.004589880319145104
    ],
    [
      0.9884336215742767,
      -0.1503364161583629,
      -0.019948376330389726
    ],
    [
      0.9874434470049686,
      -0.15689664328695135,
      -0.018408755857825986
    ],
    [
      0.9914216880506741,
      -0.12367807877787382,
      -0.042270193902627845
    ],
    [
      0.9912418712260799,
      -0.125241286314437,
      -0.04188284768881937
    ],
    [
      0.9932484880417326,
      -0.09394738864261182,
      -0.06805386961845979
    ],
    [
      0.993300352463167,
      -0.06846784889863682,
      -0.09309437933485447
    ],
    [
      0.9930953226158067,
      -0.09203897031278242,
      -0.07273587933317059
    ],
    [
      0.9917652321675792,
      -0.051632210683063604,
      -0.11719999609030562
    ],
    [
      0.9922184869230593,
      -0.062373479053776576,
      -0.10775909854319896
    ],
    [
      0.9882026168346162,
      -0.038803453702545544,
      -0.14815491912849574
    ],
    [
      0.9834897239681386,
      -0.026289650170886903,
      -0.17904417651229823
    ],
    [
      0.9880523959296045,
      -0.03885642584486713,
      -0.1491396696668274
    ],
    [
      0.9767181382561495,
      -0.01792755453621623,
      -0.21377624093849243
    ],
    [
      0.9810221047588946,
      -0.02735049165368014,
      -0.19195723633333053
    ],
    [
      0.9674392924227486,
      -0.011236776329318122,
      -0.2528536144378728
    ],
    [
      0.9721518265795371,
      -0.01997832097842985,
      -0.23349880678271664
    ],
    [
      0.9568590705460058,
      -0.005701861512531432,
      -0.2904964851579546
    ],
    [
      0.9617566449766716,
      -0.013614133574392537,
      -0.2735668313415117
    ],
    [
      0.9436633058532204,
      -0.0008085922099441727,
      -0.3309061972293799
    ],
    [
      0.9492256071212101,
      -0.008733220927629973,
      -0.3144749237023507
    ],
    [
      0.929172267459697,
      0.00329247884377961,
      -0.3696323267341053
    ],
    [
      0.9348938264334093,
      -0.0037798688517162566,
      -0.3549073764916167
    ],
    [
      0.9131723821382866,
      0.009587068205761983,
      -0.4074607816994233
    ],
    [
      0.9207444883251836,
      0.000885331837734169,
      -0.3901650976270596
    ],
    [
      0.8944614033731515,
      0.016133470557458437,
      -0.44685401307754186
    ],
    [
      0.903157428671761,
      0.006740395430962132,
      -0.42925659704243024
    ],
    [
      0.873955429842866,
      0.023090486062695963,
      -0.4854572443599535
    ],
    [
      0.8836815319855116,
      0.013211707898040393,
      -0.4679021273751126
    ],
    [
      0.8502393911228004,
      0.03007439788602689,
      -0.5255364006183799
    ],
    [
      0.8611625677749271,
      0.019817880554599054,
      -0.5079431892186544
    ],
    [
      0.8259198092762979,
      0.03762843373209681,
      -0.5625305055015888
    ],
    [
      0.8374870564461981,
      0.027544592619158953,
      -0.5457625176782729
    ],
    [
      0.7982534915556557,
      0.04403705366711921,
      -0.6007096645830863
    ],
    [
      0.8095611494108212,
      0.0349837320821591,
      -0.5859922216670062
    ],
    [
      0.7734509901303287,
      0.11483909429190144,
      -0.6233663034593946
    ],
    [
      0.7685439044380991,
      0.05112253110205884,
      -0.6377513259608021
    ],
    [
      0.7805431075281661,
      0.04208202246343798,
      -0.623683862766755
    ],
    [
      0.7407405061718202,
      0.11868555381900256,
      -0.6612240481342102
    ],
    [
      0.7369768972174254,
      0.058370414074602896,
      -0.6733928628434784
    ],
    [
      0.7487810316965381,
      0.04978511959081137,
      -0.6609450873096769
    ],
    [
      0.736424656441948,
      0.12898395061616785,
      -0.6641098296726264
    ],
    [
      0.656458109348277,
      0.1499556288574406,
      -0.7393078249584913
    ],
    [
      0.6857668573504334,
      0.05635481271080241,
      -0.7256362397538044
    ],
    [
      0.8931021290682998,
      -0.22616573208258506,
      0.3888671350027131
    ],
    [
      0.8962159459127109,
      -0.22345194846895627,
      0.3832312683187681
    ],
    [
      0.9096677271281893,
      -0.23669896208860428,
      0.3412890674598466
    ],
    [
      0.9120985461132701,
      -0.23167051711061779,
      0.3382381020520275
    ],
    [
      0.9317141614246359,
      -0.21080011907131935,
      0.29575670947639593
    ],
    [
      0.9376072084725927,
      -0.21426020802223344,
      0.27383441324731483
    ],
    [
      0.9540613191222868,
      -0.16802778850678957,
      0.24805979449350476
    ],
    [
      0.9612622674971437,
      -0.1275099795892024,
      0.24436869314912454
    ],
    [
      0.9621219789448572,
      -0.11704106937390128,
      0.24621674539122118
    ],
    [
      0.9744386346953058,
      -0.10500396854399206,
      0.1986039118526134
    ],
    [
      0.9840996826970153,
      -0.054349858149828234,
      0.16909733124661497
    ],
    [
      0.9846502730725185,
      -0.044066655223267345,
      0.1688844860715407
    ],
    [
      0.9896959349995258,
      -0.00012955402143566025,
      0.1431849833647708
    ],
    [
      0.9892480014599355,
      0.009374608948452106,
      0.14594693663995467
    ],
    [
      0.9913669230264791,
      0.05590732446265468,
      0.11860014755656245
    ],
    [
      0.9909743370841103,
      0.06401056943943198,
      0.11778162098030327
    ],
    [
      0.9909163690331589,
      0.07773101044701015,
      0.10973896116251089
    ],
    [
      0.9926010262697429,
      0.08575091442195736,
      0.08596501220875485
    ],
    [
      0.9913489783955601,
      0.1164282635466691,
      0.06059424462427497
    ],
    [
      0.9914597371543884,
      0.11783325402122631,
      0.05588303721631715
    ],
    [
      0.989058341947309,
      0.14345885587212479,
      0.03439698964009546
    ],
    [
      0.9889350468623848,
      0.1462937364421556,
      0.024609261774497522
    ],
    [
      0.9860464105108053,
      0.16630521035856427,
      0.007419792877842746
    ],
    [
      0.9851003324710439,
      0.17156821014836915,
      -0.011903118579762782
    ],
    [
      0.9825242901799333,
      0.18462116275754523,
      -0.023686398385369765
    ],
    [
      0.9803722774285422,
      0.19118156293800553,
      -0.0481643814675838
    ],
    [
      0.9781105753110223,
      0.2002257435730238,
      -0.05665116128880966
    ],
    [
      0.9742070517586147,
      0.20813801917279054,
      -0.08717330599796516
    ],
    [
      0.9730014896757433,
      0.21207600239382843,
      -0.09105970732128002
    ],
    [
      0.9671443282740689,
      0.2208351078323435,
      -0.12595119465879356
    ],
    [
      0.9657260608518654,
      0.2247122270902645,
      -0.12991378059186992
    ],
    [
      0.9585996436086109,
      0.23303208133775363,
      -0.16365442964013716
    ],
    [
      0.9573155979941201,
      0.23600436803707783,
      -0.1668795496895281
    ],
    [
      0.9476699560421882,
      0.24507611147795436,
      -0.2045955864573875
    ],
    [
      0.9447664961023896,
      0.24135014569165494,
      -0.22173492060798716
    ],
    [
      0.9341285000404982,
      0.2604074334435956,
      -0.24411455101940993
    ],
    [
      0.9240811540398906,
      0.2674490641196037,
      -0.27302933697654586
    ],
    [
      0.9368363805699247,
      0.18070143768810878,
      -0.299473849372685
    ],
    [
      0.9196078288139339,
      0.20200432647889793,
      -0.3369209006101125
    ],
    [
      0.9178394399737932,
      0.27680864548702444,
      -0.2845131564835489
    ],
    [
      0.910462233893835,
      0.28166275344162855,
      -0.30286071712377677
    ],
    [
      0.9144193006518396,
      0.20160122496665056,
      -0.35099043959536336
    ],
    [
      0.895998227816741,
      0.30074547343065283,
      -0.32670986511005784
    ],
    [
      0.9005274135974468,
      0.21675249129900517,
      -0.37692006430431335
    ],
    [
      0.8737478538291605,
      0.33936756397460405,
      -0.3484169118324755
    ],
    [
      0.868641057346394,
      0.25696495845829737,
      -0.423593819143604
    ],
    [
      0.8796444931076499,
      0.23678170613507615,
      -0.41250453256315633
    ],
    [
      0.8993783376916132,
      0.2167906229440472,
      -0.37963196848342823
    ],
    [
      0.8596457303744087,
      0.37481430648007424,
      -0.34716488000215456
    ],
    [
      0.8486532465861188,
      0.38159062505845903,
      -0.3663007806793956
    ],
    [
      0.8081043215013595,
      0.3803588768841233,
      -0.44977164244344686
    ],
    [
      0.8071179683155238,
      0.33333944546254934,
      -0.48728369490568946
    ],
    [
      0.8421657883287961,
      0.279210847475541,
      -0.4613004309780426
    ],
    [
      0.8647121051955922,
      0.2580589211084198,
      -0.4309043610414793
    ],
    [
      0.7599767932363539,
      0.4678706088755119,
      -0.4511456162844167
    ],
    [
      0.8068097939234417,
      0.3823797476712299,
      -0.45038171033035984
    ],
    [
      0.8053137657152484,
      0.45992556639316823,
      -0.3740831620474911
    ],
    [
      0.7663068897508458,
      0.4837340877166881,
      -0.42281802598906365
    ],
    [
      0.79875637580962,
      0.4892408405257369,
      -0.35018802387453446
    ],
    [
      0.7616635671346738,
      0.5170558408183052,
      -0.390540481865017
    ],
    [
      0.7997989187154743,
      0.4901040532746979,
      -0.34658290001855274
    ],
    [
      0.7926970399211828,
      0.517120975861168,
      -0.3228270422758726
    ],
    [
      0.7545896338506927,
      0.548323783492484,
      -0.3604656889935088
    ],
    [
      0.7596789646953694,
      0.5213292901254377,
      -0.38872051895504434
    ],
    [
      0.7467418752559736,
      0.577205768070283,
      -0.3304694736970221
    ],
    [
      0.7529125553162109,
      0.5516395465950239,
      -0.35891014847681574
    ],
    [
      0.7944037463435947,
      0.5184833191586868,
      -0.31638226174906386
    ],
    [
      0.7868566912801114,
      0.5432595884396472,
      -0.2927892876389105
    ],
    [
      0.7465229335809027,
      0.5776097562634077,
      -0.3302582006659181
    ],
    [
      0.7891081802900586,
      0.5451305930055986,
      -0.2830917101730053
    ],
    [
      0.782069025863991,
      0.5656054481779031,
      -0.26164578302663616
    ],
    [
      0.7394837684671407,
      0.6047498824035082,
      -0.29570481211265287
    ],
    [
      0.7390532976948547,
      0.6031131812693766,
      -0.30009117572080063
    ],
    [
      0.7326755774704902,
      0.624260659724146,
      -0.27108140271707626
    ],
    [
      0.7886400672039031,
      0.571619951356454,
      -0.22648946026662742
    ],
    [
      0.7567003574363919,
      0.6207934154143774,
      -0.20498805924684724
    ],
    [
      0.740297667480978,
      0.6369527675687346,
      -0.21505937647252857
    ],
    [
      0.7347886707761445,
      0.6362967237840712,
      -0.2349725273317802
    ],
    [
      0.7726679490299464,
      0.6199179180881612,
      -0.13669680089561698
    ],
    [
      0.7671024132028424,
      0.629873595081611,
      -0.12170925140408373
    ],
    [
      0.7196811932568453,
      0.6793019523246687,
      -0.14355430206126457
    ],
    [
      0.7199456606941015,
      0.6717458233128863,
      -0.17445857533932263
    ],
    [
      0.7291015567924719,
      0.6540487624857895,
      -0.2015716651059894
    ],
    [
      0.7682143886246965,
      0.614637930793908,
      -0.17907224000209188
    ],
    [
      0.7636258409830007,
      0.6400295439721089,
      -0.08507501293481663
    ],
    [
      0.7158139549905562,
      0.69062372307035,
      -0.10319522747310723
    ],
    [
      0.7169924096972985,
      0.6835740683749936,
      -0.1365590622467831
    ],
    [
      0.7686636015123799,
      0.6320955573435297,
      -0.09803812572968583
    ],
    [
      0.764563689394126,
      0.6417325709240981,
      -0.06018033129843908
    ],
    [
      0.7592225473881118,
      0.649099257316527,
      -0.0474476310118799
    ],
    [
      0.7111825013182106,
      0.70008558264171,
      -0.06402832807430672
    ],
    [
      0.7133092425204993,
      0.6940774918545133,
      -0.09719238568828067
    ],
    [
      0.7595168537643465,
      0.6500966074282523,
      -0.022551050046177575
    ],
    [
      0.7530701504268558,
      0.6578840962141714,
      -0.00859444498124123
    ],
    [
      0.7061351553189101,
      0.7075703717276927,
      -0.026782671186301208
    ],
    [
      0.7091152197041642,
      0.7025894969331717,
      -0.05935995268788159
    ],
    [
      0.7527475267532481,
      0.6581634701297808,
      0.01385667902469267
    ],
    [
      0.7442885363851149,
      0.6671682758995988,
      0.030349073113691755
    ],
    [
      0.6994660996948221,
      0.714608232694556,
      0.009069131318734895
    ],
    [
      0.7029271389243136,
      0.7109791498195809,
      -0.020052079331199086
    ],
    [
      0.7435114760134618,
      0.6668581219899891,
      0.04990921931134956
    ],
    [
      0.7328411169064478,
      0.6769167387037489,
      0.06875773581198354
    ],
    [
      0.6905040344524158,
      0.7219973409161644,
      0.04386363089080461
    ],
    [
      0.6940462360648904,
      0.7196645096975922,
      0.019565676218381924
    ],
    [
      0.6821244758466646,
      0.7288659675281642,
      0.05882687166717574
    ],
    [
      0.731668149989429,
      0.676183650434285,
      0.08624029902783965
    ],
    [
      0.7198485461088074,
      0.6860578395283486,
      0.10555904265732508
    ],
    [
      0.6785342539642581,
      0.730240063676826,
      0.07962861042635748
    ],
    [
      0.6673912372075615,
      0.7382102051867265,
      0.09815614833891707
    ],
    [
      0.7157224269885754,
      0.6831213995651543,
      0.14521212401768682
    ],
    [
      0.7124428132441635,
      0.6861059194406447,
      0.1472545590643952
    ],
    [
      0.664110088555908,
      0.7388647304393002,
      0.11417837094268057
    ],
    [
      0.6478352180022096,
      0.7471529582823,
      0.1485664405107605
    ],
    [
      0.651162648394033,
      0.7469255683738499,
      0.13449684251264016
    ],
    [
      0.6908644939580795,
      0.7003567087127116,
      0.1794623401974486
    ],
    [
      0.6878565074708339,
      0.6989225009773442,
      0.19585903797782966
    ],
    [
      0.6745375324714762,
      0.7064344071105209,
      0.21435845151917665
    ],
    [
      0.6252007434413108,
      0.7589991323188644,
      0.18178104285002683
    ],
    [
      0.6703383315631399,
      0.7043418881279739,
      0.2335573288626724
    ],
    [
      0.6563536231025068,
      0.7111708831437842,
      0.2518648375790127
    ],
    [
      0.6099141684583992,
      0.7625404501276792,
      0.21572382583473657
    ],
    [
      0.6191295690092761,
      0.7629336551135143,
      0.18603982012870643
    ],
    [
      0.5871262622434749,
      0.7712073928492329,
      0.24601201067975398
    ],
    [
      0.6520534420511569,
      0.7093030985902213,
      0.26779735442970526
    ],
    [
      0.6359604946789857,
      0.7161348598327811,
      0.28758496438434095
    ],
    [
      0.630981171794023,
      0.7141224178112533,
      0.3031368226079629
    ],
    [
      0.6131956462696893,
      0.7205784124124455,
      0.32366317516989473
    ],
    [
      0.5559604797593114,
      0.7874644924857646,
      0.26609700866400876
    ],
    [
      0.6077632362875901,
      0.7186756569198145,
      0.33783005900616364
    ],
    [
      0.5877644789005315,
      0.7246486954435855,
      0.35974600141585505
    ],
    [
      0.5205169496431926,
      0.8081312881355929,
      0.2756554484686516
    ],
    [
      0.5853382604605383,
      0.7239475639216307,
      0.36507402746972767
    ],
    [
      0.5611062354862809,
      0.7300964455595425,
      0.390024323189896
    ],
    [
      0.5277280972552943,
      0.7465663395230958,
      0.40514411764012115
    ],
    [
      0.4921092480664148,
      0.7690403518968829,
      0.4079282107452565
    ],
    [
      0.478714170128854,
      0.8307272373961081,
      0.2841214535477263
    ],
    [
      0.507154495214529,
      0.8165006586111287,
      0.2759003306835445
    ],
    [
      0.4371982551188972,
      0.8496228415816544,
      0.29495544203100726
    ],
    [
      0.47394768461365355,
      0.834282525551915,
      0.2816846815289662
    ],
    [
      0.4901900820490712,
      0.7687252272882334,
      0.4108225996599732
    ],
    [
      0.436801233197543,
      0.789239035157836,
      0.4316322833850985
    ],
    [
      0.4008618061749338,
      0.8090471579740883,
      0.4298284640693547
    ],
    [
      0.391698236032205,
      0.8169113192294764,
      0.42335373909299023
    ],
    [
      0.40507118206976905,
      0.8638381806125385,
      0.2995011438586156
    ],
    [
      0.3318252153241803,
      0.8453157933882788,
      0.4187281169487024
    ],
    [
      0.3241203665380203,
      0.8714827181604214,
      0.368054153546707
    ],
    [
      0.27628062421634053,
      0.8932594232194438,
      0.3546217978527204
    ],
    [
      0.17648617487941826,
      0.8942231744009551,
      0.41136060146872405
    ],
    [
      0.11856726923212477,
      0.949656885035785,
      0.2899889711195352
    ],
    [
      0.13876367364829176,
      0.9598778158457436,
      0.24367852084834057
    ],
    [
      0.26171210889878754,
      0.9251309515366731,
      0.2750263524911727
    ],
    [
      0.06518317759424089,
      0.9476251725951271,
      0.3126622548738066
    ],
    [
      -0.03482943263944185,
      0.9258820745824679,
      0.3762037939586469
    ],
    [
      -0.04706778925554573,
      0.9259271195734977,
      0.374758045214404
    ],
    [
      -0.027924170708030112,
      0.9653762454650109,
      0.2593625751378715
    ],
    [
      -0.05052766899401608,
      0.9725927034244122,
      0.22695900050807521
    ],
    [
      -0.09347575790384414,
      0.9205706743210259,
      0.3792254161635711
    ],
    [
      -0.12942757388264908,
      0.9339331254511136,
      0.3331927674844786
    ],
    [
      -0.13229462668537617,
      0.951224340197633,
      0.2786940730725264
    ],
    [
      -0.05970145610723569,
      0.9727262194521469,
      0.22414155823722096
    ],
    [
      -0.20172044495172456,
      0.9172225117500519,
      0.3435283482151136
    ],
    [
      -0.24844484370625133,
      0.931398319135753,
      0.2660306951215789
    ],
    [
      -0.2359617790802732,
      0.9377959935016351,
      0.25467766565907074
    ],
    [
      -0.18633138094521712,
      0.9533622297728478,
      0.23744699475376013
    ],
    [
      -0.2264110939415096,
      0.9054096448493871,
      0.35912587146280034
    ],
    [
      -0.28223613310019824,
      0.912671510243009,
      0.2955900532213361
    ],
    [
      -0.27476367174951655,
      0.9214261256997969,
      0.27473408882879136
    ],
    [
      -0.23997056870061678,
      0.8924134843131617,
      0.3821155573560764
    ],
    [
      -0.2451563629681362,
      0.8907452394801675,
      0.3827156595171598
    ],
    [
      -0.3080907249430065,
      0.8927333983207663,
      0.328796570430333
    ],
    [
      -0.3044589463826713,
      0.8985678646597047,
      0.3160388307921231
    ],
    [
      -0.2752240304916362,
      0.874063930271084,
      0.40032983755773766
    ],
    [
      -0.3290649107155484,
      0.8720747045058972,
      0.36221815843041383
    ],
    [
      -0.32473157787087853,
      0.8811978313588575,
      0.3435691842146732
    ],
    [
      -0.28599172922878224,
      0.8593962870227487,
      0.4238475582851034
    ],
    [
      -0.29463483659557377,
      0.8541054132884376,
      0.42859567899791845
    ],
    [
      -0.3470078584815068,
      0.8507685864758969,
      0.3946876719861959
    ],
    [
      -0.34291703338399093,
      0.861743338719618,
      0.37390684185701756
    ],
    [
      -0.30685807200817433,
      0.8353983412746837,
      0.4560128671857112
    ],
    [
      -0.3088436078276988,
      0.8340958702853885,
      0.4570554726472828
    ],
    [
      -0.362957932950758,
      0.8266968594679293,
      0.4299230645754841
    ],
    [
      -0.3589015702087575,
      0.8413279640592094,
      0.4041743680562563
    ],
    [
      -0.322642093782267,
      0.8106914161743911,
      0.48855041404235344
    ],
    [
      -0.375010656364121,
      0.8024636512206322,
      0.4641326276863142
    ],
    [
      -0.37115749448640895,
      0.8197325517466193,
      0.4362117122379308
    ],
    [
      -0.3213251842009119,
      0.8083011402419586,
      0.4933552398442723
    ],
    [
      -0.3331127948785777,
      0.7867875281944804,
      0.5196164463965727
    ],
    [
      -0.38543565503414406,
      0.7754546581967734,
      0.5001094169372595
    ],
    [
      -0.3817684599320969,
      0.7964093777664201,
      0.46902552809711595
    ],
    [
      -0.39248714945368407,
      0.7475862949909471,
      0.5357878022645067
    ],
    [
      -0.38884768322869495,
      0.772183386669537,
      0.5025239263947945
    ],
    [
      -0.32934030521429847,
      0.7806356757724847,
      0.5311712577621166
    ],
    [
      -0.33966402612160407,
      0.760468267338823,
      0.5534585474356238
    ],
    [
      -0.3954924702778331,
      0.717792816883008,
      0.5730263327149058
    ],
    [
      -0.39697084437411573,
      0.7187559093109311,
      0.5707925118180144
    ],
    [
      -0.3934763524066217,
      0.7465805527804765,
      0.536464200396241
    ],
    [
      -0.3337436823840466,
      0.7509351854909414,
      0.5698346265895238
    ],
    [
      -0.3421664071118573,
      0.733206251037752,
      0.5876484861576075
    ],
    [
      -0.3272522911070566,
      0.7083797816811992,
      0.6253831008833537
    ],
    [
      -0.39492258688704074,
      0.686312745271824,
      0.6107462370280313
    ],
    [
      -0.39874430770359776,
      0.688929938846319,
      0.6052920918326834
    ],
    [
      -0.3912039757573057,
      0.6533022906098566,
      0.6481940808396757
    ],
    [
      -0.39790893097218155,
      0.6581037649839563,
      0.6391931767208701
    ],
    [
      -0.32096578581649554,
      0.7060572362644387,
      0.6312401630550942
    ],
    [
      -0.33406595673178924,
      0.6736545604103871,
      0.6592340023020373
    ],
    [
      -0.3186608038894173,
      0.6441383615919091,
      0.6953711693694536
    ],
    [
      -0.3836680149976713,
      0.6172887761922699,
      0.6868430832837996
    ],
    [
      -0.39405286484809526,
      0.6249679570470305,
      0.6738971675036702
    ],
    [
      -0.3044466408934965,
      0.6088221858797714,
      0.7325624811777105
    ],
    [
      -0.37320009565066203,
      0.5796110460016806,
      0.7244119849637873
    ],
    [
      -0.3862810684940401,
      0.5900084114414211,
      0.7089971865610423
    ],
    [
      -0.2890112300455631,
      0.6321244790658546,
      0.718951425252967
    ],
    [
      -0.3044089568035101,
      0.5624206906478179,
      0.7687770507429512
    ],
    [
      -0.35983195671561646,
      0.5398608859860317,
      0.7609672704581897
    ],
    [
      -0.37586654384858165,
      0.5527617888486986,
      0.7437598711977603
    ],
    [
      -0.29297143223791466,
      0.5535567984582985,
      0.7795784827540224
    ],
    [
      -0.29366015511809995,
      0.515720816145771,
      0.8048575980196455
    ],
    [
      -0.34495076540134334,
      0.4966630174726839,
      0.7964513899315864
    ],
    [
      -0.3632953039170681,
      0.5108140672862513,
      0.779156923099758
    ],
    [
      -0.25059873350029205,
      0.4816338333544363,
      0.839779212255436
    ],
    [
      -0.3222453687705422,
      0.44776147791842785,
      0.8340668925201639
    ],
    [
      -0.3498546951641234,
      0.464485162501906,
      0.8135448519210212
    ],
    [
      -0.2222316999901904,
      0.4768996944061922,
      0.8503997606977265
    ],
    [
      -0.19897977961045493,
      0.4601502145469783,
      0.8652565095730541
    ],
    [
      -0.20446011310909917,
      0.42327300777530646,
      0.8826301734227421
    ],
    [
      -0.2332823203289206,
      0.3664701924298612,
      0.9007102514584673
    ],
    [
      -0.32904638395553754,
      0.41412911213297915,
      0.8486610369810408
    ],
    [
      0.7808978994118951,
      0.31248961545473575,
      -0.5408777227128522
    ],
    [
      0.7377529258790726,
      0.41561259870744904,
      -0.5319650253094733
    ],
    [
      0.7484717787442192,
      0.4746958370100992,
      -0.4630916310502121
    ],
    [
      0.7331089182578119,
      0.46123105941053455,
      -0.4998171903865419
    ],
    [
      0.731264008158821,
      0.43209464529349567,
      -0.52777567950805
    ],
    [
      0.7176943613810673,
      0.5500225951002125,
      -0.42707136232841647
    ],
    [
      0.7158817759620993,
      0.5175852019552326,
      -0.4686350835802967
    ],
    [
      0.7107890465865246,
      0.5790841964153225,
      -0.3992999182502289
    ],
    [
      0.7108900598609074,
      0.5622786469386915,
      -0.4224666211521922
    ],
    [
      0.7024396093461874,
      0.6083131330438039,
      -0.36950470550184705
    ],
    [
      0.7031878460263882,
      0.591822873371156,
      -0.3940463675197087
    ],
    [
      0.6952424674895751,
      0.6196352788414441,
      -0.36426643080867743
    ],
    [
      0.693632628664067,
      0.6355268278010833,
      -0.3390861654471747
    ],
    [
      0.6872722730774816,
      0.6449538682588033,
      -0.3342025291300436
    ],
    [
      0.6846834892362522,
      0.6617622466440771,
      -0.30541651639008416
    ],
    [
      0.6802687252010827,
      0.6679842533036053,
      -0.3017142669011835
    ],
    [
      0.6763581632042479,
      0.6853085492983028,
      -0.2699848649936355
    ],
    [
      0.6700883450633904,
      0.7046518992519486,
      -0.23333947520903578
    ],
    [
      0.6754228704533535,
      0.6865766650844717,
      -0.2691030082143965
    ],
    [
      0.6586271462194487,
      0.7189339935634532,
      -0.22213553331632796
    ],
    [
      0.6693318607915555,
      0.7181375302918296,
      -0.19045563188224543
    ],
    [
      0.6685288601754515,
      0.7281150067769055,
      -0.15138593071609488
    ],
    [
      0.6643005665078352,
      0.729098479284901,
      -0.1646820112878577
    ],
    [
      0.6658619661165492,
      0.7374179498421736,
      -0.11332523695086298
    ],
    [
      0.6624335033426572,
      0.7386447595918684,
      -0.12484299250116092
    ],
    [
      0.6622172374963349,
      0.745620230767146,
      -0.07428863865673377
    ],
    [
      0.6587787334895612,
      0.7473754570253824,
      -0.08625837082852071
    ],
    [
      0.6568559845856212,
      0.7531346745403187,
      -0.0364469137116199
    ],
    [
      0.6541191565150487,
      0.7549437349732422,
      -0.04677698263774849
    ],
    [
      0.6489081048816084,
      0.7608667388216006,
      0.00027780198315243863
    ],
    [
      0.6472357647961527,
      0.7622583326842975,
      -0.006935345852525798
    ],
    [
      0.638275765614093,
      0.7689743376923551,
      0.03581221859013006
    ],
    [
      0.6375697189269276,
      0.7697195294463628,
      0.032197818191738364
    ],
    [
      0.6252295596842059,
      0.7773149114114302,
      0.06978199047415037
    ],
    [
      0.6099392031770201,
      0.7855219423348826,
      0.10454399331484877
    ],
    [
      0.6239448355812247,
      0.7782764488985897,
      0.07055927466548613
    ],
    [
      0.5844659014573825,
      0.7964159889613658,
      0.15530995641071726
    ],
    [
      0.606445331617488,
      0.7879622464283306,
      0.10648736057849247
    ],
    [
      0.5727175750586345,
      0.8048760785306036,
      0.155464071180948
    ],
    [
      0.30737602674826187,
      0.9210727946342095,
      0.23904996374226617
    ],
    [
      0.1355821825749783,
      0.965861015455319,
      0.22074865932056117
    ],
    [
      0.14618941861273796,
      0.9768267946799588,
      0.15632679578673353
    ],
    [
      0.15916314908753298,
      0.9787116998843083,
      0.12957816360061325
    ],
    [
      0.016862199869312644,
      0.9897193151345544,
      0.14202585491788408
    ],
    [
      -0.010293992278183053,
      0.9770840129449291,
      0.21260495142496144
    ],
    [
      -0.0720405354299473,
      0.9799631544979587,
      0.18569431084816893
    ],
    [
      -0.025359770390044386,
      0.9936690647888649,
      0.10944711840604548
    ],
    [
      -0.1261155025046712,
      0.9806188744574501,
      0.14993833094241718
    ],
    [
      -0.05612053911819353,
      0.996568870063857,
      0.06083561710651641
    ],
    [
      -0.03297841323072361,
      0.9975478368133547,
      0.06173117145964622
    ],
    [
      -0.09661992210111611,
      0.9942160073315015,
      0.04689479095786492
    ],
    [
      -0.1929942996902348,
      0.9718016275183333,
      0.13547987688138216
    ],
    [
      -0.21474185705239596,
      0.9707689821053718,
      0.10720782719460797
    ],
    [
      -0.17432539560452232,
      0.9832597542241663,
      0.05301803627407247
    ],
    [
      -0.24383368023567578,
      0.9641296365224952,
      0.10487697727207569
    ],
    [
      -0.2933895083866707,
      0.9544512271873062,
      0.05427201202528507
    ],
    [
      -0.2595413345296748,
      0.9649721184673057,
      -0.03830282301966253
    ],
    [
      -0.20788092503273473,
      0.9769560733450992,
      -0.04839784872966773
    ],
    [
      -0.17510847010438638,
      0.9836007988863271,
      0.04320291804821168
    ],
    [
      -0.3378009622347504,
      0.938008424592817,
      -0.07765761589295882
    ],
    [
      -0.28828737815841476,
      0.9553842759239684,
      -0.0642749788936726
    ],
    [
      -0.3476357100621276,
      0.936830245723955,
      0.03871051260826321
    ],
    [
      -0.37969288764213927,
      0.9238452669910941,
      0.048406959542277424
    ],
    [
      -0.41270723368357826,
      0.9050980714089737,
      -0.1023240948995134
    ],
    [
      -0.4065651977277102,
      0.9075381510669004,
      -0.10525798950530929
    ],
    [
      -0.3439449402173874,
      0.9350240621267216,
      -0.08620836005227284
    ],
    [
      -0.3846088113900345,
      0.9216392601569017,
      0.05154741835032917
    ],
    [
      -0.4627418719251454,
      0.8846949559778834,
      -0.056433986519677744
    ],
    [
      -0.4625437414464347,
      0.8817799781301889,
      -0.09228953037835594
    ],
    [
      -0.38545374735621607,
      0.9212337228857107,
      0.052477008938998815
    ],
    [
      -0.4617235662463344,
      0.8868658316641238,
      0.016743506188038937
    ],
    [
      -0.46617594600893336,
      0.8836063788525303,
      -0.04381500443677499
    ],
    [
      -0.39659774323681496,
      0.9150117891835033,
      0.07391654560833842
    ],
    [
      -0.47784397324662026,
      0.8746183740268683,
      0.08190138610841928
    ],
    [
      -0.5039495503751692,
      0.8614943456714957,
      0.062147751791245154
    ],
    [
      0.6445135580144151,
      0.17001607355071785,
      -0.7454507416791507
    ],
    [
      0.6193148597533461,
      0.3054037564140336,
      -0.7233102032025339
    ],
    [
      0.566534752558125,
      0.24345112205958283,
      -0.7872546762718111
    ],
    [
      0.5848799561811067,
      0.17917883552786404,
      -0.7910817794365291
    ],
    [
      0.6471405058873713,
      0.3425373480174625,
      -0.681085406430795
    ],
    [
      0.6157457398964306,
      0.3195714605330635,
      -0.7202300086862266
    ],
    [
      0.5951412459394005,
      0.34200354728166876,
      -0.7272141851122359
    ],
    [
      0.5361495161740979,
      0.3134302655599685,
      -0.783776221211953
    ],
    [
      0.5499104743141977,
      0.2728303988319612,
      -0.7894061335667003
    ],
    [
      0.6186082994977341,
      0.37243232410384025,
      -0.6918221850700755
    ],
    [
      0.5954173858695893,
      0.3628049317772077,
      -0.7168338148290442
    ],
    [
      0.6174583771752565,
      0.3990891794456424,
      -0.6778443621551355
    ],
    [
      0.552818293463204,
      0.4085650612998928,
      -0.7262689068777801
    ],
    [
      0.525529591890415,
      0.40334730142846653,
      -0.7490858445317651
    ],
    [
      0.5361118397656152,
      0.3134807395704764,
      -0.7837818071258572
    ],
    [
      0.5681565754151896,
      0.428492438797669,
      -0.7025612682931716
    ],
    [
      0.5771309588932977,
      0.4626483047181771,
      -0.6729609219176843
    ],
    [
      0.5682670657853568,
      0.45276183372968093,
      -0.6870802455764812
    ],
    [
      0.5841102134256588,
      0.49696277367750846,
      -0.6417501539934282
    ],
    [
      0.577196754913028,
      0.4908708049210561,
      -0.652602297723525
    ],
    [
      0.6001902456313446,
      0.5389566764657485,
      -0.5910138491964302
    ],
    [
      0.5848060429127807,
      0.5273559242187692,
      -0.616358354663959
    ],
    [
      0.5836574828694495,
      0.5952454248840057,
      -0.5522923382097182
    ],
    [
      0.5721976153387671,
      0.5878065138949562,
      -0.571903305833501
    ],
    [
      0.5889015267054744,
      0.6337096562941205,
      -0.5016044889786664
    ],
    [
      0.5839365120752111,
      0.6301174774028432,
      -0.511830161808499
    ],
    [
      0.5570646678485587,
      0.6852746883831882,
      -0.46912424505252276
    ],
    [
      0.5537478534500033,
      0.6827545122444767,
      -0.47666507194184077
    ],
    [
      0.5552065441362859,
      0.7094385344279336,
      -0.43409982632683486
    ],
    [
      0.5423951820006919,
      0.7370147722102884,
      -0.4032576001593186
    ],
    [
      0.5443332453914174,
      0.7229650929208798,
      -0.4254677336526833
    ],
    [
      0.5294351603520363,
      0.7646389347134448,
      -0.36745844731520594
    ],
    [
      0.5326739637258754,
      0.7484904356901979,
      -0.39499432407170443
    ],
    [
      0.5201757872370495,
      0.7887565778717956,
      -0.32753657999724195
    ],
    [
      0.525376581461321,
      0.7693207669271379,
      -0.3634900345630624
    ],
    [
      0.5084290852886683,
      0.8496285316369544,
      -0.14011146798517674
    ],
    [
      0.5067920986166552,
      0.8499721390051973,
      -0.14390667703291635
    ],
    [
      0.5068182877857795,
      0.8423361362255849,
      -0.18331682076242672
    ],
    [
      0.5092338181386017,
      0.8547128992390953,
      -0.10073121829046644
    ],
    [
      0.5076786490299137,
      0.8552023364250295,
      -0.10436164569578489
    ],
    [
      0.5076945130752677,
      0.8590942562591605,
      -0.06483317249515806
    ],
    [
      0.48709885698549404,
      0.872808675254702,
      -0.030654851550080325
    ],
    [
      0.4693659660063105,
      0.8829309046240518,
      -0.011340529737036373
    ],
    [
      0.4681743151537841,
      0.8834823961215429,
      -0.016482304863770364
    ],
    [
      0.4669828316332991,
      0.8835011551576276,
      0.03677966550803923
    ],
    [
      0.46276672740057995,
      0.8693025106236956,
      0.17366663765472337
    ],
    [
      0.42553566459423786,
      0.8922754839956086,
      0.15087696583224006
    ],
    [
      0.4240580929272423,
      0.9027303621366788,
      0.07247501017241123
    ],
    [
      0.4046806020156105,
      0.9016524020769503,
      0.15250100386931403
    ],
    [
      0.36654368487822175,
      0.9195229225920459,
      0.14185669495542702
    ],
    [
      0.3891598427928208,
      0.9197340527117079,
      0.05141876155611144
    ],
    [
      0.3869791274591795,
      0.9208566191608654,
      0.04764705508793946
    ],
    [
      0.3621042139734106,
      0.9315650164345474,
      0.03266739013144227
    ],
    [
      0.3263235719624806,
      0.9452369935069267,
      0.00632079802193163
    ],
    [
      0.35740362032682993,
      0.9336183786415403,
      0.02488725055156807
    ],
    [
      0.2929716300952924,
      0.9557582233462502,
      -0.026340889607728173
    ],
    [
      0.3134506143009584,
      0.949521703694634,
      -0.012539800923118665
    ],
    [
      0.2131780409373985,
      0.9753959234285904,
      -0.05619533273306903
    ],
    [
      0.23118502894589937,
      0.9695411103462612,
      -0.0808920128308265
    ],
    [
      0.27562508984417233,
      0.9600483418235776,
      -0.04835277872254118
    ],
    [
      0.11840286487783196,
      0.9923750399757407,
      -0.03424239509539256
    ],
    [
      0.08989196984101036,
      0.9935336776843114,
      -0.06935607446496478
    ],
    [
      0.06993012255159427,
      0.9926500806155243,
      -0.09877041770647743
    ],
    [
      0.08923997250106845,
      0.9931461139441139,
      -0.07547863052357084
    ],
    [
      0.0549381064169666,
      0.9891206117434679,
      -0.13646325471549495
    ],
    [
      0.06891012122556942,
      0.990472397222318,
      -0.11923013685034581
    ],
    [
      0.03511766924089657,
      0.9840707465838904,
      -0.17427425232922783
    ],
    [
      0.053736317558680975,
      0.9869696970952753,
      -0.151668141647787
    ],
    [
      0.016793403848517883,
      0.9781876110760838,
      -0.2070434232822792
    ],
    [
      0.03380935052751134,
      0.9819161104557173,
      -0.1862731323740048
    ],
    [
      -0.0010946345024431317,
      0.9714629895273454,
      -0.23718866278534212
    ],
    [
      0.015499741918169123,
      0.9759520044438819,
      -0.21743376697845163
    ],
    [
      -0.0024447667435398644,
      0.9674116870221992,
      -0.2531968620035254
    ],
    [
      0.3462133483104268,
      0.9043752687158689,
      0.2494828466784499
    ],
    [
      0.313523227861766,
      0.9190256790950325,
      0.23894557278814213
    ],
    [
      -0.09916372865653494,
      0.9949763098878233,
      -0.013736727446636423
    ],
    [
      -0.1258931709972678,
      0.9915429908889614,
      -0.03151835521130237
    ],
    [
      -0.12754753607592756,
      0.9910674677059039,
      -0.038947406793867545
    ],
    [
      -0.15946441027043443,
      0.9852724712222347,
      -0.06171919724634448
    ],
    [
      -0.19840713949526576,
      0.9780537427508232,
      -0.06360411376957092
    ],
    [
      -0.19975025854805462,
      0.9764427344520267,
      -0.08160527278205973
    ],
    [
      -0.21785935222547828,
      0.9686548976221503,
      -0.11935238565071299
    ],
    [
      -0.24158418038063967,
      0.9604792384260766,
      -0.13826321398795238
    ],
    [
      -0.24742906641577253,
      0.9573461007959703,
      -0.14922231865029903
    ],
    [
      -0.28030031070582384,
      0.9435397902079907,
      -0.1765344162266367
    ],
    [
      -0.2807578970661327,
      0.9430548445383465,
      -0.17838879849294886
    ],
    [
      -0.30695237499926026,
      0.9254341191887178,
      -0.22215294399065633
    ],
    [
      -0.31891147930282665,
      0.9185956740755834,
      -0.2334040615295872
    ],
    [
      -0.31910337392168486,
      0.9160466327131662,
      -0.2429642019859447
    ],
    [
      -0.3141091543908057,
      0.9117929485572105,
      -0.2645166499282061
    ],
    [
      -0.2781452094956426,
      0.9106181262005197,
      -0.3056302842809908
    ],
    [
      -0.22671934390421275,
      0.9192668921796092,
      -0.32178676175704607
    ],
    [
      0.9174450154613895,
      -0.36739716322481997,
      0.1526891222694202
    ],
    [
      0.9073215520167834,
      -0.3786566841206762,
      0.1827203240381042
    ],
    [
      0.9276476410337523,
      -0.35645334525594813,
      0.11140406967592525
    ],
    [
      0.9179122843092334,
      -0.36928009556417163,
      0.1451525037135821
    ],
    [
      0.9377724479720237,
      -0.33950852538867604,
      0.07291636999305752
    ],
    [
      0.9357693530594362,
      -0.3441705191891723,
      0.07669662049777588
    ],
    [
      0.9277819735979884,
      -0.35681637911909553,
      0.10909940906787446
    ],
    [
      0.9467595076688232,
      -0.31972764177116003,
      0.037691772658504395
    ],
    [
      0.9437382010070388,
      -0.32769495089495665,
      0.044432275633261464
    ],
    [
      0.9545505956856214,
      -0.2980454284245427,
      0.0014432156651292144
    ],
    [
      0.9515390769903944,
      -0.30737334810426087,
      0.00974729887944005
    ],
    [
      0.9613209271323356,
      -0.27323642339484594,
      -0.03469772309272039
    ],
    [
      0.9577217697553628,
      -0.2868431182919431,
      -0.022136784437002104
    ],
    [
      0.967221564787574,
      -0.24490329380709813,
      -0.067117965495915
    ],
    [
      0.9625422257712931,
      -0.26709135534753775,
      -0.04663337330561006
    ],
    [
      0.9714766810615711,
      -0.21706735315870754,
      -0.09547157873559668
    ],
    [
      0.9676211874739173,
      -0.241606595686666,
      -0.07304444176161468
    ],
    [
      0.9746189182661887,
      -0.18792687789595194,
      -0.12166122110978493
    ],
    [
      0.9714773950028822,
      -0.21705485166028618,
      -0.095492734640627
    ],
    [
      0.974144984222355,
      -0.17191216455140346,
      -0.1465870301004802
    ],
    [
      0.9740960063060251,
      -0.17318551149203443,
      -0.1454089031245846
    ],
    [
      0.9730617155769972,
      -0.1564792951550199,
      -0.16930779032914933
    ],
    [
      0.9730548271946827,
      -0.1589436806249631,
      -0.16703655187567765
    ],
    [
      0.9713636546466777,
      -0.14271003882341424,
      -0.18996445786112004
    ],
    [
      0.9713910701176565,
      -0.14372978496486813,
      -0.1890532671223297
    ],
    [
      0.9681323153368667,
      -0.1249963735788461,
      -0.21701549850786048
    ],
    [
      0.9612586458061885,
      -0.11530959500787316,
      -0.2503707514107288
    ],
    [
      0.9519810607271494,
      -0.10735504844438702,
      -0.28671755019585865
    ],
    [
      0.9588454061368438,
      -0.1156336262176748,
      -0.25931515886662365
    ],
    [
      0.9402795875125074,
      -0.10867211562781486,
      -0.32259055874635223
    ],
    [
      0.9253264760602778,
      -0.12208243679956841,
      -0.358980210216312
    ],
    [
      0.9067133457953294,
      -0.11461444854770267,
      -0.4058749028219723
    ],
    [
      0.9251916578087573,
      -0.12228126477429595,
      -0.35925991789550055
    ],
    [
      0.8878599324080751,
      -0.11871087067274787,
      -0.44453624105178
    ],
    [
      0.8651804999509783,
      -0.1303271342145622,
      -0.48422881016312386
    ],
    [
      0.8710200474249806,
      -0.12977758032620307,
      -0.4737951631543534
    ],
    [
      0.8439279408710729,
      -0.13987705645346205,
      -0.5178996424936261
    ],
    [
      0.8136068902444424,
      -0.1614896330292672,
      -0.5585382051129899
    ],
    [
      0.787816442927641,
      -0.1847953622030407,
      -0.5875337661454753
    ],
    [
      0.750533769629433,
      -0.21083240007692114,
      -0.6262976606404006
    ],
    [
      0.778974805598465,
      -0.1944292757160639,
      -0.5961505757670292
    ],
    [
      0.7123050106550185,
      -0.2202529561151683,
      -0.6664159415247236
    ],
    [
      0.724565031730264,
      -0.22371515865962788,
      -0.6518872928502435
    ],
    [
      0.7329602061070923,
      -0.2233716937901131,
      -0.6425530504766004
    ],
    [
      0.6702488122299057,
      0.003528683043364331,
      -0.7421280739201153
    ],
    [
      0.657932933263686,
      -0.09446687732025323,
      -0.7471280107293544
    ],
    [
      0.6599025756355589,
      -0.12341140606359939,
      -0.7411465546860222
    ],
    [
      0.681620094983564,
      -0.21539612483365084,
      -0.6992843166561391
    ],
    [
      0.6903980155566924,
      -0.21784236331543025,
      -0.689851639746206
    ],
    [
      0.8252980845736183,
      -0.4261093009930435,
      0.37055894970481656
    ],
    [
      0.8125427659047127,
      -0.42652725017769333,
      0.39730184800951346
    ],
    [
      0.8076156602248779,
      -0.40914752578031827,
      0.42468252554982566
    ],
    [
      0.8384402551130353,
      -0.43332191265685144,
      0.33052996629261355
    ],
    [
      0.827193774091424,
      -0.43387352897388115,
      0.3570773319046403
    ],
    [
      0.8498448596186493,
      -0.43931765766180336,
      0.2911420791405885
    ],
    [
      0.8399574890507097,
      -0.4399841075269133,
      0.31762462390591306
    ],
    [
      0.861452276138893,
      -0.44339662406042013,
      0.2475871759743282
    ],
    [
      0.8509174627622066,
      -0.444580709534432,
      0.27979897118500957
    ],
    [
      0.8712394871424161,
      -0.44464056866133567,
      0.20793393360474835
    ],
    [
      0.8620114100257535,
      -0.4462969686884914,
      0.2403234169299281
    ],
    [
      0.8861016490903489,
      -0.4320009752658332,
      0.16792565274172092
    ],
    [
      0.8747785009553094,
      -0.44904355921735306,
      0.18199575871924445
    ],
    [
      0.8720247458907787,
      -0.44956168697347143,
      0.193564284308054
    ],
    [
      0.8984092419597635,
      -0.4190413338808969,
      0.1313970869563012
    ],
    [
      0.902968047833975,
      -0.42024049441782524,
      0.08970301802259492
    ],
    [
      0.899055150622688,
      -0.4247860633123863,
      0.10609729758283704
    ],
    [
      0.9069729250152878,
      -0.41895980918389053,
      0.0432757620130619
    ],
    [
      0.9032090532893232,
      -0.4241984492646051,
      0.06533821008956903
    ],
    [
      0.9194863981614239,
      -0.39300206948836647,
      0.009702421037699936
    ],
    [
      0.9069343238076895,
      -0.42001655777014435,
      0.0324995922806441
    ],
    [
      0.9256351701010187,
      -0.37760405388780977,
      -0.02479335313244707
    ],
    [
      0.9253053527013648,
      -0.37306847715041724,
      -0.06804348329466581
    ],
    [
      0.9242462273797709,
      -0.377732762344249,
      -0.05555962046346041
    ],
    [
      0.9349394926653949,
      -0.3399209427608483,
      -0.10169512145206462
    ],
    [
      0.9240036066179599,
      -0.3723346961292789,
      -0.08708736426899125
    ],
    [
      0.9405595559072126,
      -0.3126839247288894,
      -0.132576336530187
    ],
    [
      0.9371697052694871,
      -0.2987025565585761,
      -0.1802490672111046
    ],
    [
      0.9381045112524645,
      -0.2886935697969418,
      -0.19135294281947393
    ],
    [
      0.9369408321601433,
      -0.2987134201430762,
      -0.18141711511730144
    ],
    [
      0.9349540671244052,
      -0.2648674734611862,
      -0.2360214267176203
    ],
    [
      0.9290685080828185,
      -0.24010630986822795,
      -0.2813905955255582
    ],
    [
      0.9230109420333039,
      -0.25465591276217536,
      -0.28844612492119953
    ],
    [
      0.9117746846087499,
      -0.26226621232804137,
      -0.3160432856077112
    ],
    [
      0.8785003091400061,
      -0.21106377297364146,
      0.42858988623046734
    ],
    [
      0.8782517808773633,
      -0.19245770011816535,
      0.4377600290695418
    ],
    [
      0.9044664837616884,
      -0.15757257390112625,
      0.39637263238768344
    ],
    [
      0.9081054273473995,
      -0.16047129315969283,
      0.3867731853345743
    ],
    [
      0.9195601032351484,
      -0.15450639628812501,
      0.36129903133584546
    ],
    [
      0.921740784814201,
      -0.15618714964941594,
      0.3549640825414477
    ],
    [
      0.9321540625087914,
      -0.15023798902607766,
      0.3294197176881743
    ],
    [
      0.9495497408671436,
      -0.11562371637780486,
      0.29152434860595317
    ],
    [
      0.9619392904413853,
      -0.11624425223312712,
      0.24730563141159023
    ],
    [
      0.9667887414524462,
      -0.010070223136400467,
      0.25537838594285633
    ],
    [
      0.9638293283426976,
      0.017136084848932885,
      0.2659687583580348
    ],
    [
      0.9754063145944651,
      0.03936609143855686,
      0.21687054270715178
    ],
    [
      0.9764979023865696,
      0.09229216461457103,
      0.1947665345622456
    ],
    [
      0.9757812037631354,
      0.09899142301953107,
      0.19506855346553137
    ],
    [
      0.974513953434501,
      0.13362782064093953,
      0.18018368436740353
    ],
    [
      0.9870763536058079,
      0.10478264076391766,
      0.12124714572641233
    ],
    [
      0.9838779659105187,
      0.14115218252531542,
      0.1098189854447777
    ],
    [
      0.9743170393670936,
      0.13503575189187256,
      0.1801989248301386
    ],
    [
      0.9710393570562814,
      0.17507043307483017,
      0.1625820116455544
    ],
    [
      0.9816093135296529,
      0.1707763896775425,
      0.08531459617526103
    ],
    [
      0.9846545625224887,
      0.14681599049833177,
      0.09434223570405843
    ],
    [
      0.9690923916146496,
      0.18592936626899784,
      0.16214255232173805
    ],
    [
      0.968434950551953,
      0.20543751103948765,
      0.1411707321201413
    ],
    [
      0.9694122902701268,
      0.2063798808734389,
      0.13284259950743452
    ],
    [
      0.9688850212385488,
      0.2289285795703011,
      0.09409315105522369
    ],
    [
      0.9783433250693926,
      0.19838847647518015,
      0.059045327452912924
    ],
    [
      0.9817491516935638,
      0.17759500223170757,
      0.06803394984335212
    ],
    [
      0.9747633697251972,
      0.22110969907194164,
      0.030771318111091718
    ],
    [
      0.977601003901543,
      0.20701396106205713,
      0.03796705277068903
    ],
    [
      0.9650181709057787,
      0.24795655752482454,
      0.08519081759264698
    ],
    [
      0.963493185874798,
      0.2599655538315606,
      0.06402180561247894
    ],
    [
      0.9597411490830272,
      0.2752139775343599,
      0.056162205498959866
    ],
    [
      0.9568536155338828,
      0.28867593355218235,
      0.03312648226890884
    ],
    [
      0.9705850785188272,
      0.24075751823495523,
      -0.0006502076186044789
    ],
    [
      0.9727228730668036,
      0.23192721963548008,
      0.00446956427616916
    ],
    [
      0.9540134129466762,
      0.29851363756252464,
      0.02734988312633795
    ],
    [
      0.9496252828242433,
      0.3133803592747021,
      0.002138373642421285
    ],
    [
      0.9652518455717911,
      0.2589867614428735,
      -0.034853005861522166
    ],
    [
      0.966899074479277,
      0.2532524222129978,
      -0.03113503515923551
    ],
    [
      0.9592525293830787,
      0.27396203910769756,
      -0.06913310350416849
    ],
    [
      0.959687999256228,
      0.2726734080014048,
      -0.06817739106534797
    ],
    [
      0.9466294569269513,
      0.32230361945570674,
      -0.0036122242367204013
    ],
    [
      0.9405532023064748,
      0.3382606328965248,
      -0.030649924363334476
    ],
    [
      0.9266940817486843,
      0.37181264117871704,
      -0.05471232687127671
    ],
    [
      0.9512342128534372,
      0.29022234777589445,
      -0.10452014709398988
    ],
    [
      0.9523173621628389,
      0.28743486418546726,
      -0.10233689742167383
    ],
    [
      0.9243993032198482,
      0.3772310908337335,
      -0.05641482354001083
    ],
    [
      0.9169510525383204,
      0.391860826032239,
      -0.07513893977291336
    ],
    [
      0.9398335507848067,
      0.31012576041466533,
      -0.14330006820112723
    ],
    [
      0.9427290913872883,
      0.3036838188688634,
      -0.13797825339277578
    ],
    [
      0.9168909106721128,
      0.34792063212499175,
      -0.19560749389685925
    ],
    [
      0.9309450448460967,
      0.32202840632834234,
      -0.1721598936864419
    ],
    [
      0.9031674343110012,
      0.4187298024500627,
      -0.09462525107081435
    ],
    [
      0.8837808855836441,
      0.4384240914894561,
      -0.16344926515171224
    ],
    [
      0.8878161323049766,
      0.41841922117983765,
      -0.19159298151626108
    ],
    [
      0.8928360373709763,
      0.3982745372258966,
      -0.21028838144127343
    ],
    [
      0.901423230555708,
      0.3795745970815596,
      -0.20822892369909296
    ],
    [
      0.8868053610064168,
      0.45996111460715755,
      -0.044855598754446446
    ],
    [
      0.8421624694785731,
      0.5341989728404489,
      -0.07344271521370158
    ],
    [
      0.8421476021260573,
      0.5342041277996961,
      -0.07357558069834023
    ],
    [
      0.8453783827621324,
      0.5231578228764902,
      -0.10789477430168995
    ],
    [
      0.8633439874891271,
      0.47815240975539636,
      -0.16126819993874073
    ],
    [
      0.8786753379371279,
      0.4773002106090533,
      -0.01068454274302182
    ],
    [
      0.8377611581435277,
      0.5449557964511647,
      -0.034342711312474426
    ],
    [
      0.8375455514979204,
      0.5451191353821141,
      -0.036913106158933666
    ],
    [
      0.8843577164790387,
      0.46620288170962676,
      -0.023797108850027393
    ],
    [
      0.8747170796537653,
      0.48427267801113305,
      0.018708391002803845
    ],
    [
      0.8715135658195304,
      0.48973928288312646,
      0.024890548279379445
    ],
    [
      0.8322832275310116,
      0.5543244423558409,
      0.005389042349830144
    ],
    [
      0.8320524108292057,
      0.5546959975189494,
      0.0010658188234571265
    ],
    [
      0.865917756765226,
      0.49667465700710106,
      0.05916691309809544
    ],
    [
      0.8640892094915763,
      0.49947940476357716,
      0.06221062816951189
    ],
    [
      0.8260950593855221,
      0.5618096229383996,
      0.044010230999663336
    ],
    [
      0.82594775516128,
      0.5624776430443519,
      0.037804851795937844
    ],
    [
      0.8568353132824732,
      0.5059960016629403,
      0.09900147581346348
    ],
    [
      0.8554498819973994,
      0.5079282486626423,
      0.10106628320630293
    ],
    [
      0.8181333363790568,
      0.5694371133941664,
      0.07999511106681681
    ],
    [
      0.8181513829940185,
      0.5696414298432609,
      0.07833872548810208
    ],
    [
      0.8082543241225779,
      0.5770749474989907,
      0.11708737124981394
    ],
    [
      0.8466539040879578,
      0.5137889924159632,
      0.13855698453996582
    ],
    [
      0.8081824875296146,
      0.5768453647674241,
      0.11870337820290437
    ],
    [
      0.7972799249432352,
      0.58344141455566,
      0.1547282684702438
    ],
    [
      0.8466997953566882,
      0.5135281677797133,
      0.13924179487407168
    ],
    [
      0.8377135592637251,
      0.5181252312152103,
      0.17257530936923196
    ],
    [
      0.796536255828572,
      0.5819838441264568,
      0.16378277786871223
    ],
    [
      0.838128087512328,
      0.5149795829480455,
      0.17982585484180136
    ],
    [
      0.8055559064651927,
      0.5249012326760515,
      0.274878841481485
    ],
    [
      0.801030061610414,
      0.5296719217523038,
      0.27892381702471664
    ],
    [
      0.7834327322929655,
      0.5618890409737467,
      0.26554445881166855
    ],
    [
      0.7823117098187098,
      0.5787668254985231,
      0.2302549682045729
    ],
    [
      0.787618719166935,
      0.5860564489294217,
      0.19024876316568526
    ],
    [
      0.8617396091361864,
      0.3858862956086781,
      -0.32938824039000636
    ],
    [
      0.8258287937468992,
      0.4870463060608728,
      -0.2842405656675346
    ],
    [
      0.8325111906114704,
      0.45925165824467923,
      -0.3098596971311118
    ],
    [
      0.8264905804037032,
      0.48917608099720344,
      -0.27860380881130703
    ],
    [
      0.8255221484431051,
      0.5277132038594196,
      -0.20007987630520624
    ],
    [
      0.8251774422934056,
      0.5279847785030993,
      -0.2007841188917755
    ],
    [
      0.8199340975643286,
      0.5113749352067786,
      -0.2573008964104735
    ],
    [
      0.8064727128337895,
      0.5696441224931205,
      -0.1584529493684189
    ],
    [
      0.808328769237631,
      0.5736458641897269,
      -0.132419875097351
    ],
    [
      0.8042895384494773,
      0.5868452462936669,
      -0.09343979475176654
    ],
    [
      0.8029614862070469,
      0.5833453641788079,
      -0.12231532103242222
    ],
    [
      0.8001711949123712,
      0.5972490790330082,
      -0.05495085464969195
    ],
    [
      0.7996586820776109,
      0.5943676844147805,
      -0.08528216637322383
    ],
    [
      0.7949414566353328,
      0.6064501754471855,
      -0.01691937417794581
    ],
    [
      0.7953717833061714,
      0.6042880023651831,
      -0.04711407982606916
    ],
    [
      0.7881747494266692,
      0.6150703827396463,
      0.021656145610711573
    ],
    [
      0.7895887775674181,
      0.6135738059922559,
      -0.008760533075574662
    ],
    [
      0.7799023632566947,
      0.6231927801969928,
      0.05816409972625249
    ],
    [
      0.7823060673765045,
      0.622155886938417,
      0.030319454048179963
    ],
    [
      0.7692505675865967,
      0.6319021608379705,
      0.09462147428571722
    ],
    [
      0.7725155305778952,
      0.6312701356885492,
      0.0686860306300597
    ],
    [
      0.756936012801172,
      0.6401518952499706,
      0.13135228788466013
    ],
    [
      0.7610801803331874,
      0.6399500971236964,
      0.10592843006188009
    ],
    [
      0.7372774880945311,
      0.6570149735525339,
      0.15733159274850575
    ],
    [
      0.7390505693511744,
      0.6523808608969223,
      0.16793888256474596
    ],
    [
      0.7301104717191952,
      0.6509083139214897,
      0.20798333095192423
    ],
    [
      0.775224699865819,
      0.5705720698321588,
      0.2710612068249476
    ],
    [
      0.7149393097341995,
      0.6547906082132822,
      0.24517553465316724
    ],
    [
      0.7222438843476492,
      0.6563800213942113,
      0.2180115571178609
    ],
    [
      0.7511113176413007,
      0.590226691679156,
      0.2957435391358999
    ],
    [
      0.6973647464724663,
      0.6563468179968406,
      0.2879084314201568
    ],
    [
      0.7076541876265332,
      0.6592094308039678,
      0.25429997458462333
    ],
    [
      0.692139952586116,
      0.6589210411330214,
      0.29455958240441626
    ],
    [
      0.7088030416606426,
      0.6046616172252108,
      0.3632940637929748
    ],
    [
      0.6793944620865474,
      0.6551371053086003,
      0.33048228111957667
    ],
    [
      0.6754704067830137,
      0.6581422862404681,
      0.33254843349888086
    ],
    [
      0.6477895901425706,
      0.6695819025300941,
      0.3633575686663205
    ],
    [
      0.638052624710135,
      0.6635755700032531,
      0.39058457598241847
    ],
    [
      0.625306498841505,
      0.6676039756719249,
      0.4040998814323247
    ],
    [
      0.6144835472215339,
      0.6626870521854037,
      0.42808391824484704
    ],
    [
      0.5988567903462055,
      0.6662983735983354,
      0.4443163535100344
    ],
    [
      0.5739124157381369,
      0.6574709761200105,
      0.48821763038773663
    ],
    [
      0.57227481193029,
      0.6553667785656347,
      0.49294616864588114
    ],
    [
      0.5278106068685476,
      0.666622653401419,
      0.5263365855126424
    ],
    [
      0.5062558748518114,
      0.6757626628814598,
      0.5357702983867111
    ],
    [
      0.5019655368522197,
      0.680594567097386,
      0.5336868323747408
    ],
    [
      0.48268866610327693,
      0.7304821176570575,
      0.4831226835894793
    ],
    [
      0.3988684573439959,
      0.7641512221039656,
      0.5069288544687873
    ],
    [
      0.3984366451092343,
      0.7641811228839377,
      0.5072232755522387
    ],
    [
      0.3698251189241516,
      0.784136060699558,
      0.4983573213301038
    ],
    [
      0.36805769273078315,
      0.786289265918051,
      0.4962688032948927
    ],
    [
      0.32058310622256125,
      0.8164029219560974,
      0.4803256614279944
    ],
    [
      0.3137833617686543,
      0.8356572677011493,
      0.4507958881970992
    ],
    [
      0.18223111346940166,
      0.8662351428095416,
      0.4652187642877651
    ],
    [
      0.17541463619516126,
      0.8926505191859876,
      0.41521651701914036
    ],
    [
      0.0685497287464586,
      0.9034626908739491,
      0.4231502107852363
    ],
    [
      0.06098472626024783,
      0.9056093265112194,
      0.4197053858349428
    ],
    [
      0.07099842988261754,
      0.9475759206348754,
      0.31154309105992245
    ],
    [
      0.028547308903280555,
      0.9066048714329046,
      0.4210138456731644
    ],
    [
      -0.008620896604505504,
      0.9149535191443593,
      0.40346714605663647
    ],
    [
      -0.09899921447926373,
      0.9145676380369916,
      0.39212904889580275
    ],
    [
      -0.18708437715813475,
      0.8831305790704655,
      0.4302090377177321
    ],
    [
      -0.1999493689926129,
      0.8805099012477061,
      0.4297936291340423
    ],
    [
      -0.2227364634417647,
      0.859163481956435,
      0.46068056082924747
    ],
    [
      -0.2296036876749813,
      0.8559423511012851,
      0.4632977856597784
    ],
    [
      -0.24878574896598843,
      0.835560272060125,
      0.4898414874898228
    ],
    [
      -0.24861208104039417,
      0.8318204244611532,
      0.4962527728990854
    ],
    [
      -0.26405788921820683,
      0.8143411884104929,
      0.5168383306216862
    ],
    [
      -0.26259755266199875,
      0.8042191368213142,
      0.5331736164761991
    ],
    [
      -0.2746814219883027,
      0.789820082758767,
      0.548392517532304
    ],
    [
      -0.2710707211732091,
      0.773472989658594,
      0.5729399605466815
    ],
    [
      -0.27872514831604006,
      0.763798787599865,
      0.5821715415212065
    ],
    [
      -0.2685569995374599,
      0.7229743446113465,
      0.6365416208177049
    ],
    [
      -0.26393023209276417,
      0.6410015789777228,
      0.720734214766807
    ],
    [
      -0.22131860785076238,
      0.7167752350351317,
      0.6612498289295297
    ],
    [
      -0.21658164674117533,
      0.6977946313220307,
      0.6827701244145296
    ],
    [
      -0.2933742783689879,
      0.9424915449571543,
      0.1601287621751698
    ],
    [
      -0.33173289001322454,
      0.9163514393866334,
      0.2241725434069012
    ],
    [
      -0.3319452749287916,
      0.918834584968879,
      0.2134369694254409
    ],
    [
      -0.3223663287098034,
      0.9280854329391756,
      0.18637966434207928
    ],
    [
      -0.3061239007219589,
      0.9371558365795915,
      0.16741294863772715
    ],
    [
      -0.36583859963200127,
      0.8899324661024787,
      0.27236432364767754
    ],
    [
      -0.3684457493766725,
      0.8920531942469012,
      0.2617037034513699
    ],
    [
      -0.3747177207202936,
      0.8728632431640205,
      0.3125642150204912
    ],
    [
      -0.38845948238903794,
      0.8537221018775035,
      0.3467820688961557
    ],
    [
      -0.3833820487124837,
      0.8668163955666993,
      0.31882211513910724
    ],
    [
      -0.4023201499994844,
      0.8324854011164149,
      0.3809285416353495
    ],
    [
      -0.3980843077096442,
      0.8467396721221757,
      0.35293173788958626
    ],
    [
      -0.4139519256152995,
      0.809922982937419,
      0.4155340719954728
    ],
    [
      -0.41026391905185505,
      0.826383639076975,
      0.385711806651169
    ],
    [
      -0.42422300439597466,
      0.7859020506245888,
      0.44988088352953937
    ],
    [
      -0.4210011050147342,
      0.8042208883894221,
      0.41950784528361496
    ],
    [
      -0.43014701244376496,
      0.7808263390768213,
      0.45308252657721454
    ],
    [
      -0.4330367326628686,
      0.7600247472306668,
      0.48460455194068114
    ],
    [
      -0.43910050687141344,
      0.7326761895989731,
      0.5199772553294973
    ],
    [
      -0.43658663399680586,
      0.7567819199537675,
      0.48649073644461976
    ],
    [
      -0.44352274979354067,
      0.7037074667916683,
      0.5550525845334199
    ],
    [
      -0.4412420155792457,
      0.7306118526965232,
      0.5210679460367129
    ],
    [
      -0.44525337873545845,
      0.6732969199772088,
      0.5902717054661035
    ],
    [
      -0.44613889938564316,
      0.6736887751455862,
      0.5891549174010235
    ],
    [
      -0.4440616641980699,
      0.7031563998811708,
      0.5553200119712882
    ],
    [
      -0.44313916224890354,
      0.640905057122602,
      0.626792143087335
    ],
    [
      -0.4470824067571704,
      0.6425968306574625,
      0.6222432280042912
    ],
    [
      -0.4384271452467456,
      0.6067075799714869,
      0.6630893987358951
    ],
    [
      -0.4447898578989381,
      0.6095530767476598,
      0.6562065444185268
    ],
    [
      -0.429468838230741,
      0.5709076487234667,
      0.6997292144949934
    ],
    [
      -0.44005463098489106,
      0.5753199556563117,
      0.689462740380052
    ],
    [
      -0.41613038971891014,
      0.5327822562443043,
      0.7368707934119906
    ],
    [
      -0.43125067846604903,
      0.5384051760661134,
      0.7239770153173302
    ],
    [
      -0.3991257999604857,
      0.49253396781428793,
      0.7733749972393835
    ],
    [
      -0.41832648755839796,
      0.4990717290625924,
      0.7589007570542593
    ],
    [
      -0.37706331221368333,
      0.4488331857018154,
      0.8101679023481528
    ],
    [
      -0.4023521443703211,
      0.4561261379208588,
      0.7937642585969753
    ],
    [
      -0.3476842770983287,
      0.4020269608144968,
      0.8470477945410587
    ],
    [
      -0.38168865318381046,
      0.4098690183094783,
      0.8284450252495655
    ],
    [
      -0.23736579890997714,
      0.3409548101050198,
      0.9096193132151923
    ],
    [
      -0.35463582209151345,
      0.35874616921419095,
      0.86344346645488
    ],
    [
      -0.2299316551623325,
      0.614287366822288,
      0.7548393636508697
    ],
    [
      -0.22971874331505232,
      0.5728040333310485,
      0.7868448629618396
    ],
    [
      -0.2214672785847865,
      0.5661829041210096,
      0.793970505495858
    ],
    [
      -0.39569283920436854,
      0.9140289737545091,
      0.08932083821631151
    ],
    [
      -0.40671795822536627,
      0.9025448646576207,
      0.14139755916261887
    ],
    [
      -0.40693218650767016,
      0.9026268729611725,
      0.14025307052760794
    ],
    [
      -0.4118858483453932,
      0.891734407187578,
      0.18750945301667984
    ],
    [
      -0.4143245049826434,
      0.8923382589763367,
      0.17907438716345736
    ],
    [
      -0.40608176796548817,
      0.8791257563363489,
      0.24947044368434904
    ],
    [
      -0.41796366839416876,
      0.8819651494533695,
      0.21781608538440164
    ],
    [
      -0.425432540876914,
      0.854269425851459,
      0.2987154184477784
    ],
    [
      -0.4173139305133658,
      0.8709946558070321,
      0.25926317315630365
    ],
    [
      -0.43344312181627465,
      0.83699191505755,
      0.3340233439124532
    ],
    [
      -0.4272267830637767,
      0.8529714063784867,
      0.2998617276907529
    ],
    [
      -0.4650958004017897,
      0.8117683783608772,
      0.35315435200768835
    ],
    [
      -0.4636660589856123,
      0.8145728678681979,
      0.3485467381539097
    ],
    [
      -0.46414132270994235,
      0.8098099108381455,
      0.358860336149567
    ],
    [
      -0.4731310950951567,
      0.7882670081696443,
      0.39342355125911777
    ],
    [
      -0.4736830386001258,
      0.7892451928801856,
      0.39078946308475415
    ],
    [
      -0.4808460364139056,
      0.7649205094409218,
      0.4285833682046909
    ],
    [
      -0.4818204977302599,
      0.7664597069559442,
      0.42472170368368595
    ],
    [
      -0.4868957383170745,
      0.7392565990769568,
      0.46522276462985174
    ],
    [
      -0.48885632429249565,
      0.7420801100417166,
      0.45862468803990947
    ],
    [
      -0.4909673356484691,
      0.7132236360406953,
      0.5002630511232399
    ],
    [
      -0.49378969705105913,
      0.7170818177880213,
      0.4918997882537157
    ],
    [
      -0.49511694557097424,
      0.6845792034789432,
      0.5349864712052116
    ],
    [
      -0.4978311822970744,
      0.6884115700880583,
      0.5274975109908971
    ],
    [
      -0.4988593391651231,
      0.6537128891940066,
      0.569033231217089
    ],
    [
      -0.5016669817516082,
      0.6581603301779135,
      0.5613868712397285
    ],
    [
      -0.4998056586277981,
      0.620534425841644,
      0.6042609783438065
    ],
    [
      -0.504585685855688,
      0.6286246962606322,
      0.591797496514452
    ],
    [
      -0.49797164521681025,
      0.5863207974701787,
      0.638946134673336
    ],
    [
      -0.5045194535254279,
      0.598068312753461,
      0.6227153557562491
    ],
    [
      -0.49178373242577744,
      0.5488239087037983,
      0.6759741694447031
    ],
    [
      -0.5017835761028404,
      0.5668626141424665,
      0.6533605585287607
    ],
    [
      -0.4810637458448916,
      0.5106288361708948,
      0.7126260338385337
    ],
    [
      -0.49431882222729895,
      0.5350270657939167,
      0.6851240331938211
    ],
    [
      -0.46614200695174546,
      0.47046866414822874,
      0.7492468654653017
    ],
    [
      -0.4826895370524642,
      0.5015580516751724,
      0.7179486970667771
    ],
    [
      -0.4460919450014147,
      0.4286820215449336,
      0.785642222012669
    ],
    [
      -0.4466156562732117,
      0.42884389159102143,
      0.7852562462131177
    ],
    [
      -0.466752131426773,
      0.46715798160201283,
      0.750936660467511
    ],
    [
      -0.41772307323677726,
      0.38490821676567394,
      0.8230146406667934
    ],
    [
      -0.424719312863057,
      0.38664819290615604,
      0.8186065478626082
    ],
    [
      -0.3802976432559132,
      0.33839202687585335,
      0.8607348829232204
    ],
    [
      -0.3971216954279087,
      0.3412532147513295,
      0.8519627940481593
    ],
    [
      -0.3612800329924222,
      0.2915109280946912,
      0.8857189828395721
    ],
    [
      -0.23501823885738787,
      0.3202017750142639,
      0.9177348476995337
    ],
    [
      -0.24989572410997649,
      0.28200735439028635,
      0.9262958378084951
    ],
    [
      -0.38801494608042014,
      0.9060866561078877,
      -0.16867534864773562
    ],
    [
      -0.35594165504746145,
      0.9106955778887017,
      -0.20961656092980227
    ],
    [
      -0.5181531316112635,
      0.8532850839199843,
      0.05849698933369074
    ],
    [
      -0.5305912672433181,
      0.8464104255428264,
      0.045412538549847344
    ],
    [
      -0.5393348302286897,
      0.841116640424571,
      0.04050602551563468
    ],
    [
      -0.5501832212679189,
      0.8336005819192337,
      -0.04907639818865413
    ],
    [
      -0.4797560784352547,
      0.8714933087578663,
      -0.10165391283512966
    ],
    [
      -0.7089151486445886,
      0.6988141418486291,
      -0.09538399852483014
    ],
    [
      -0.6534158976952894,
      0.7542304624143895,
      -0.06468442011207431
    ],
    [
      -0.6490048222722974,
      0.7596392683186808,
      -0.04172436572990368
    ],
    [
      -0.6494135206015906,
      0.7593890301408698,
      -0.03987957072934231
    ],
    [
      -0.7059563233031741,
      0.708182377509634,
      -0.010168076173331164
    ],
    [
      -0.7356574342896797,
      0.6771916957076755,
      -0.014817106292678631
    ],
    [
      -0.7227848693998739,
      0.6846409328119556,
      -0.09406819699017517
    ],
    [
      -0.7635466502154971,
      0.6347123867752874,
      -0.11889785119467652
    ],
    [
      -0.7721773555347872,
      0.6353759459240645,
      0.006287999713980269
    ],
    [
      -0.774974303697308,
      0.6319861555932328,
      0.002885783664585241
    ],
    [
      -0.7847776705647586,
      0.617379012939864,
      -0.05447166386618216
    ],
    [
      -0.8177882036319285,
      0.5722176593310973,
      -0.0615581379681342
    ],
    [
      -0.831133439533075,
      0.5503353904882065,
      -0.07967536423583975
    ],
    [
      -0.8030114495425142,
      0.5787504060472838,
      -0.142199083695129
    ],
    [
      -0.7639989513410366,
      0.6330955120528411,
      -0.12448162502292165
    ],
    [
      -0.8446338392479933,
      0.5288425075856118,
      -0.08318220824044763
    ],
    [
      -0.8527585968665911,
      0.5069671316577742,
      -0.12564673847263885
    ],
    [
      -0.8249816371816421,
      0.5392735155329303,
      -0.16908392519057486
    ],
    [
      -0.8130891750960809,
      0.5589351553814471,
      -0.1627190382846828
    ],
    [
      -0.8586253859063913,
      0.4963258148621457,
      -0.1281527689069879
    ],
    [
      -0.8706160040089032,
      0.46884879331136453,
      -0.14902544270709955
    ],
    [
      -0.8727522197842871,
      0.45903824670342336,
      -0.16609470468695373
    ],
    [
      -0.8347731939358279,
      0.5077900082821338,
      -0.2128450661279394
    ],
    [
      -0.8258782340816357,
      0.5303466405357451,
      -0.1914617020258828
    ],
    [
      -0.8795513931799371,
      0.4404880831865366,
      -0.1798877297813349
    ],
    [
      -0.8811252611468982,
      0.43046455484330215,
      -0.19575122270976567
    ],
    [
      -0.8405297555638938,
      0.48434843181670106,
      -0.24272685596860416
    ],
    [
      -0.8345064305387541,
      0.5022782571055133,
      -0.22652940168665847
    ],
    [
      -0.8853836402651865,
      0.41678451866889715,
      -0.205879757501078
    ],
    [
      -0.8868725257921056,
      0.4018304707285008,
      -0.22801183256410684
    ],
    [
      -0.8429194512854195,
      0.4631066713466137,
      -0.27389598317417324
    ],
    [
      -0.8393723098417755,
      0.47587093303759803,
      -0.26268037719024306
    ],
    [
      -0.8886385400765691,
      0.3949643919212691,
      -0.2330765415155416
    ],
    [
      -0.8806105745480064,
      0.3868195739761309,
      -0.27367066555104996
    ],
    [
      -0.8413522059727392,
      0.4463160194246446,
      -0.3048417233741895
    ],
    [
      -0.8404056442872709,
      0.4506602345868676,
      -0.30103771526539075
    ],
    [
      -0.8372301156733336,
      0.4304160616828866,
      -0.33732439469301656
    ],
    [
      -0.8806394051348071,
      0.3718221738769894,
      -0.2936366958287113
    ],
    [
      -0.8752719864749828,
      0.36762792641056713,
      -0.3142429910359245
    ],
    [
      -0.874644201479641,
      0.3561891270945183,
      -0.3288264383496047
    ],
    [
      -0.8654535600122188,
      0.35004243766155874,
      -0.35841376549754667
    ],
    [
      -0.8304851774833387,
      0.41805323939066225,
      -0.3681383693877085
    ],
    [
      -0.834330958775926,
      0.43013256485327783,
      -0.3447866410996585
    ],
    [
      -0.8008482409689437,
      0.41458995725363634,
      -0.4321542112271689
    ],
    [
      -0.8545490149398728,
      0.29029276126005493,
      -0.4306693555679413
    ],
    [
      -0.8472679567255881,
      0.29003198498009164,
      -0.44499264847248304
    ],
    [
      -0.8361702294100514,
      0.3024677499613053,
      -0.4575288053026687
    ],
    [
      -0.8266320318965781,
      0.32012359151407765,
      -0.46281785834025757
    ],
    [
      -0.816008391868888,
      0.3516572505052068,
      -0.458767351243165
    ],
    [
      0.40747755783166656,
      -0.39276439482100245,
      -0.8244380935063788
    ],
    [
      0.3096974001947303,
      -0.37061023075644717,
      -0.8756343855578526
    ],
    [
      0.34703287404473027,
      -0.4552684574811567,
      -0.8199383000903071
    ],
    [
      0.364808012554261,
      -0.4590338888893082,
      -0.8100635794969234
    ],
    [
      0.4195526467217669,
      -0.4444226867147776,
      -0.7914948213109034
    ],
    [
      0.4431630406588085,
      -0.4498891755542759,
      -0.7753749087461711
    ],
    [
      0.5114653215769269,
      -0.3503248357598273,
      -0.7846500712254226
    ],
    [
      0.518989874524857,
      -0.34273614883372655,
      -0.7830590286966231
    ],
    [
      0.5329103260857094,
      -0.3131479675964725,
      -0.7860947364926325
    ],
    [
      0.3289197490546303,
      -0.2870159779659604,
      -0.8996852933521157
    ],
    [
      0.31145788855705697,
      -0.29000791131458387,
      -0.9049250770260112
    ],
    [
      0.27518658173576943,
      -0.3277951866612205,
      -0.9037824189672635
    ],
    [
      0.28022751249400285,
      -0.3395234555205387,
      -0.8978843825308559
    ],
    [
      0.5612072203986274,
      -0.28667063474217214,
      -0.7764447198281192
    ],
    [
      0.5308621165715768,
      -0.2595209607528758,
      -0.8067430099598323
    ],
    [
      0.42933464991821874,
      -0.20988753454630768,
      -0.8784184545088253
    ],
    [
      0.4649958009253831,
      -0.16855829392985933,
      -0.869118522797217
    ],
    [
      0.4417301572550095,
      -0.1848041484183191,
      -0.8779076801685041
    ],
    [
      0.6472645336918493,
      -0.23366406051705318,
      -0.7255685565453865
    ],
    [
      0.5735358437865542,
      -0.18172610099602646,
      -0.7987692157994244
    ],
    [
      0.47524065248803105,
      -0.15058105216454337,
      -0.8668746558481044
    ],
    [
      0.4725709890198522,
      -0.15250639065518165,
      -0.8679968094101084
    ],
    [
      0.49268562377394215,
      -0.11579273032333219,
      -0.8624690833477741
    ],
    [
      0.5095650058784396,
      -0.11068736262239959,
      -0.8532829615900012
    ],
    [
      0.6152768776335319,
      -0.10201734556777978,
      -0.7816820485675977
    ],
    [
      0.5228772213774332,
      -0.08669681589197001,
      -0.8479876611595293
    ],
    [
      0.6579857246958725,
      -0.22930667490792164,
      -0.7172678962139044
    ],
    [
      0.5412860259239206,
      -0.04401097477086675,
      -0.8396859366687088
    ],
    [
      0.5200777374062785,
      -0.07232031264892845,
      -0.8510516549732615
    ],
    [
      0.5508281987365043,
      0.03676012382077182,
      -0.833808724332733
    ],
    [
      0.5297920159519205,
      0.012895452039621544,
      -0.8480295555877129
    ],
    [
      0.4541162443359556,
      0.45509626211359505,
      -0.7659411392792795
    ],
    [
      0.4413115396001911,
      0.3778296687033615,
      -0.8139341904989721
    ],
    [
      0.4588118991620351,
      0.33662534088959956,
      -0.8222986203674961
    ],
    [
      -0.22963578892388273,
      0.5665418368877064,
      -0.7913897595377447
    ],
    [
      -0.1678138336689098,
      0.5858025748295025,
      -0.7928895639068965
    ],
    [
      -0.17246043774886735,
      0.6018584509256178,
      -0.7797588104413343
    ],
    [
      -0.27382091099304207,
      0.6997908986018779,
      -0.6597839092740265
    ],
    [
      -0.2800776136592642,
      0.7017901980850875,
      -0.6550168304697411
    ],
    [
      -0.31277147823210605,
      0.6937356246184849,
      -0.6487718285651002
    ],
    [
      -0.34347483601291057,
      0.6623360470500484,
      -0.6658348127005829
    ],
    [
      -0.3531112513642921,
      0.6457300699371206,
      -0.6770119060540553
    ],
    [
      -0.3348583681145721,
      0.6171503639141307,
      -0.7120360255101577
    ],
    [
      0.4579734661005565,
      0.5229222602838207,
      -0.7188968034756467
    ],
    [
      0.43266431960873947,
      0.5236776588580592,
      -0.7338687186073873
    ],
    [
      0.4379968635213627,
      0.49742868497163534,
      -0.7488146973135866
    ],
    [
      0.45207937694144884,
      0.4587224391521794,
      -0.7649823270916175
    ],
    [
      0.5081216035087577,
      0.5339656780010565,
      -0.6757907152103829
    ],
    [
      0.5302425179856127,
      0.5586493821577716,
      -0.63777248289262
    ],
    [
      0.5234942576414807,
      0.6092942798401586,
      -0.595578913974007
    ],
    [
      0.5255743426006318,
      0.65150593102838,
      -0.5470938056994956
    ],
    [
      0.5143829300674,
      0.6185525244235488,
      -0.5939722011883479
    ],
    [
      0.5190709151765622,
      0.6931149525970969,
      -0.5001570228479155
    ],
    [
      0.515005220256895,
      0.6775735039298605,
      -0.5250369223972333
    ],
    [
      0.49263968208277664,
      0.7374117892456697,
      -0.46209306066947253
    ],
    [
      0.4921322811728632,
      0.7354050510445269,
      -0.4658167329817496
    ],
    [
      0.5052590108033523,
      0.7078565078414348,
      -0.4936116857495844
    ],
    [
      0.4794828676366055,
      0.7644521576688332,
      -0.43093976177470883
    ],
    [
      0.47918432274788586,
      0.7632848255888,
      -0.43333435111761587
    ],
    [
      0.4681468962258024,
      0.7907936234247256,
      -0.3943145048117571
    ],
    [
      0.466878853046771,
      0.7866169674144619,
      -0.40405183226092056
    ],
    [
      0.4579722914497731,
      0.8132086862917287,
      -0.359100282377952
    ],
    [
      0.4567555521097228,
      0.8089516297466274,
      -0.37009677970392796
    ],
    [
      0.42043153653036275,
      0.8624983180361272,
      -0.28166287379697375
    ],
    [
      0.4420506730725371,
      0.8963943074373689,
      -0.03268712330561666
    ],
    [
      0.4165583977540952,
      0.907025303975026,
      -0.06151584519091634
    ],
    [
      0.41388431874333204,
      0.9078793498372503,
      -0.06674471392896948
    ],
    [
      0.4078548943448787,
      0.9083717669023337,
      -0.09227739839018122
    ],
    [
      0.41186544115603196,
      0.905272588165809,
      -0.10415565033604544
    ],
    [
      0.41431327830122683,
      0.8987208467299765,
      -0.14368488812761082
    ],
    [
      0.41062155405916023,
      0.8975570571992114,
      -0.16056546457420906
    ],
    [
      0.4116017935153727,
      0.8927881029503965,
      -0.18306656386451567
    ],
    [
      0.40759662635767563,
      0.8910025061065822,
      -0.19994880418154912
    ],
    [
      0.4089039952464447,
      0.8687507250608489,
      -0.2794095567043919
    ],
    [
      0.4010301748411885,
      0.9113474708329918,
      -0.09284711235765503
    ],
    [
      0.22453595117361283,
      0.9615270415358802,
      -0.15826988034941675
    ],
    [
      0.20697113420548482,
      0.9645579556702301,
      -0.16367925879280412
    ],
    [
      0.21915080096704959,
      0.9607841314650272,
      -0.16990226355317922
    ],
    [
      0.22413902911881056,
      0.9614073763177748,
      -0.1595542302399074
    ],
    [
      0.20598923477671283,
      0.9526621733642604,
      -0.22361399463581924
    ],
    [
      0.21426305217430477,
      0.9563978533709162,
      -0.1984804537994984
    ],
    [
      0.19867761341983559,
      0.9445403835615258,
      -0.2614778570878308
    ],
    [
      0.1942303398065973,
      0.9265279191999187,
      -0.3222120265317273
    ],
    [
      0.19544985662458644,
      0.9109968740248675,
      -0.36315843520748375
    ],
    [
      0.1212291068504567,
      0.8707895904847532,
      -0.4764755951312054
    ],
    [
      0.18513874142966344,
      0.8758876279794265,
      -0.4455833362844865
    ],
    [
      0.20020828074745378,
      0.8941731398386182,
      -0.40046353181194366
    ],
    [
      0.1818898543517067,
      -0.9027875040396943,
      0.38973170699045506
    ],
    [
      0.13894038529078384,
      -0.9016589431244527,
      0.4095201089311041
    ],
    [
      0.1333548276037787,
      -0.8878483396085991,
      0.44038825575737156
    ],
    [
      0.1414481686711704,
      -0.8670969036032338,
      0.4776351906437132
    ],
    [
      0.1668019228883651,
      -0.8457849273592315,
      0.5067790200597134
    ],
    [
      0.1759506406801719,
      -0.8413606620218738,
      0.5110319055072308
    ],
    [
      0.21265254194273545,
      -0.8513965407191149,
      0.4794818316232824
    ],
    [
      0.22688015276702436,
      -0.8816853727906186,
      0.41371040558279365
    ],
    [
      0.2903851264199948,
      -0.8642801724005943,
      0.4107265050483626
    ],
    [
      0.24665351204120603,
      -0.9257801388045352,
      0.28651907369805946
    ],
    [
      0.22804330624481414,
      -0.9311028474116182,
      0.28468181891176497
    ],
    [
      0.2069692666929564,
      -0.9310114674632132,
      0.3006349449025747
    ],
    [
      0.3397182467539824,
      -0.879976012382474,
      0.33201465397455
    ],
    [
      0.289432860859397,
      -0.9153948107976068,
      0.27978734678244227
    ],
    [
      0.3010601323689535,
      -0.8594674095688934,
      0.41313262832524394
    ],
    [
      0.3090265306340087,
      -0.858446069330802,
      0.4093567507868949
    ],
    [
      0.4129891171527079,
      -0.8644296060791948,
      0.2867079441647806
    ],
    [
      0.37799461997908046,
      -0.8768331493817295,
      0.2971257232421794
    ],
    [
      0.3545041436974928,
      -0.8757073044929584,
      0.32781630368086384
    ],
    [
      0.38444318495213753,
      -0.8579364643139882,
      0.3408056055059388
    ],
    [
      0.42022300237652316,
      -0.8456104263483126,
      0.3291741714118615
    ],
    [
      0.4599829339850348,
      -0.8183423175185812,
      0.3445744503018711
    ],
    [
      0.4439998402345858,
      -0.8591022561764998,
      0.2545730844062468
    ],
    [
      0.4361948643021378,
      -0.8632656731949888,
      0.2539811367791757
    ],
    [
      0.45950546074432386,
      -0.8181525379785777,
      0.3456604636711562
    ],
    [
      0.5140787786057083,
      -0.8119400056314876,
      0.27654373368854906
    ],
    [
      0.4576538087924538,
      -0.8534458268271111,
      0.24936561905994342
    ],
    [
      0.5500793675764609,
      -0.802551663023533,
      0.2309188548924544
    ],
    [
      0.5246826857138497,
      -0.8067308974744396,
      0.27183329150820856
    ],
    [
      0.5948162775205714,
      -0.7494646995025922,
      0.29068240434546366
    ],
    [
      0.57923239192703,
      -0.7851524108959242,
      0.2191472742399717
    ],
    [
      0.626675596213806,
      -0.7154270123901144,
      0.3089367039583122
    ],
    [
      0.6104186484870083,
      -0.7664788622105267,
      0.19974790953537047
    ],
    [
      0.5937878295690598,
      -0.7810319627717616,
      0.19340394666230276
    ],
    [
      0.6214723327697409,
      -0.7184028128804544,
      0.31252126015230913
    ],
    [
      0.65724989014805,
      -0.6935334225439757,
      0.2950152092940556
    ],
    [
      0.6795639854903319,
      -0.6955483358342451,
      0.23324944189152547
    ],
    [
      0.6739090931346688,
      -0.7125703886225898,
      0.19516653260397818
    ],
    [
      0.6429176377252218,
      -0.7433136074621393,
      0.1847749768324742
    ],
    [
      0.6764199380512534,
      -0.7123785442786749,
      0.18701036617828007
    ],
    [
      0.7326560123090367,
      -0.6492985344221794,
      0.20402593174552786
    ],
    [
      0.7221909621206599,
      -0.6820574905172949,
      0.11505561203385828
    ],
    [
      0.7199767381373721,
      -0.6846483714250104,
      0.11353459405023161
    ],
    [
      0.7928026635899275,
      -0.5742474804120983,
      0.20421500396658665
    ],
    [
      0.7933254168550333,
      -0.574306657903994,
      0.20200654855457637
    ],
    [
      0.7938496313221842,
      -0.5751848695355565,
      0.19739586800892553
    ],
    [
      0.7907368195232347,
      -0.5985881263000388,
      0.128169954758859
    ],
    [
      0.7808941405694585,
      -0.6127125139149212,
      0.12160475531961884
    ],
    [
      0.7900411670170691,
      -0.5770236434831253,
      0.20707165252580262
    ],
    [
      0.860661370012504,
      -0.4989252417800543,
      0.10166419862918276
    ],
    [
      0.8596885497805857,
      -0.5039907501276077,
      0.0832401415301812
    ],
    [
      0.8582062347275876,
      -0.5072650548947024,
      0.07851256432808348
    ],
    [
      0.8032634460239944,
      -0.5873403138406798,
      0.09899086836263933
    ],
    [
      0.8655403472321711,
      -0.4776533456549535,
      0.15062266993332168
    ],
    [
      0.8663178936361475,
      -0.484988183640478,
      0.11949798699115721
    ],
    [
      0.7999814051367163,
      -0.5604602052756628,
      0.21427577963420633
    ],
    [
      0.8091489477810694,
      -0.5363466603932118,
      0.24002133278072843
    ],
    [
      0.8111649537999376,
      -0.5135848189874775,
      0.27971780678452524
    ],
    [
      0.8026437535038627,
      -0.5073561732466596,
      0.31361236970141354
    ],
    [
      0.8028400784295883,
      -0.5026932723352368,
      0.3205421694817455
    ],
    [
      0.7933158794169493,
      -0.4959199754200996,
      0.35314769352813336
    ],
    [
      0.7934368832432307,
      -0.49124106477847285,
      0.359360722094917
    ],
    [
      0.7805259002307658,
      -0.4826876111651451,
      0.397230398001762
    ],
    [
      0.7664825858338683,
      -0.4887933623818851,
      0.4166359256051233
    ],
    [
      0.766565336940991,
      -0.47021278218465123,
      0.4373528594518556
    ],
    [
      0.8007675422516166,
      -0.4116194510396901,
      0.4351330495401258
    ],
    [
      0.7496531523018847,
      -0.45932316218664454,
      0.4764896472356022
    ],
    [
      0.7854070166058151,
      -0.39826177973330557,
      0.473838973776971
    ],
    [
      0.7131506251544415,
      -0.47361900010264,
      0.5168183709811452
    ],
    [
      0.71287305359351,
      -0.472888870806329,
      0.5178688302338532
    ],
    [
      0.7685391607611954,
      -0.3845651464696767,
      0.5113288633523765
    ],
    [
      0.7854012563175372,
      -0.3982042575602561,
      0.4738968620234992
    ],
    [
      0.6940332591841747,
      -0.45935802898298367,
      0.5543537105089679
    ],
    [
      0.6935669042504193,
      -0.4582008269808943,
      0.5558929316716612
    ],
    [
      0.6941503670124773,
      -0.4556435144849112,
      0.557264977981105
    ],
    [
      0.7498456147476829,
      -0.36862735283051523,
      0.5494046130028727
    ],
    [
      0.7683712359623116,
      -0.38344363998371145,
      0.512422305039302
    ],
    [
      0.6900193412866452,
      -0.4138130115477808,
      0.5938283423044917
    ],
    [
      0.7286055040985109,
      -0.3508040894428915,
      0.5882775792323711
    ],
    [
      0.7496379998756681,
      -0.3674720408502965,
      0.5504608690322371
    ],
    [
      0.7056684463018829,
      -0.33212787349909945,
      0.6258778790937197
    ],
    [
      0.728477401875925,
      -0.350185553329435,
      0.5888045118674444
    ],
    [
      0.6656830680356691,
      -0.3980388487997546,
      0.6312140110745205
    ],
    [
      0.6654019481251792,
      -0.3961472262048063,
      0.6326986823136702
    ],
    [
      0.7053636922418358,
      -0.33217026506627595,
      0.6261988315804851
    ],
    [
      0.6806266289414933,
      -0.312602645398966,
      0.6625911092561589
    ],
    [
      0.6388442955429796,
      -0.37874947317552843,
      0.6696467745173225
    ],
    [
      0.6765497032354745,
      -0.31317216050116164,
      0.6664860815793726
    ],
    [
      0.6084800835419225,
      -0.35903556329559927,
      0.7077043536829675
    ],
    [
      0.6450267767723505,
      -0.2939462303706906,
      0.7053623685011366
    ],
    [
      0.6512732963255697,
      -0.2931322509588449,
      0.6999404095642909
    ],
    [
      0.6386218537858266,
      -0.3788106435532127,
      0.6698243233848373
    ],
    [
      0.5671411638687834,
      -0.36996445368299197,
      0.7358513458957637
    ],
    [
      0.5523453832972904,
      -0.33636712182917045,
      0.7627396258898113
    ],
    [
      0.5508345899813942,
      -0.28354649541190485,
      0.7849730182749315
    ],
    [
      0.6199042523426348,
      -0.27384070375500924,
      0.7353434482569898
    ],
    [
      0.8497240111570327,
      -0.5266270596405013,
      0.02516038389220237
    ],
    [
      0.8372026820678633,
      -0.54634281627821,
      0.024519303407115303
    ],
    [
      0.806055709388164,
      -0.5887767610113839,
      0.06013417543865908
    ],
    [
      0.85866588168105,
      -0.5079533282496868,
      0.06838362345599379
    ],
    [
      0.8939014904022653,
      -0.44813263424098954,
      0.010829015875891216
    ],
    [
      0.8824676395606678,
      -0.46946608412598817,
      -0.029196934490351975
    ],
    [
      0.8760051852632476,
      -0.48157644265032057,
      -0.026439464369877895
    ],
    [
      0.856124924732991,
      -0.516768318548242,
      0.0007862542548505243
    ],
    [
      0.9139274640271288,
      -0.3914631668209779,
      -0.10720624757649361
    ],
    [
      0.8909364720812915,
      -0.4357367570952149,
      -0.12792842229734477
    ],
    [
      0.8821732839624318,
      -0.4647456780777747,
      -0.076037831182695
    ],
    [
      0.8827234499500637,
      -0.4688973000056907,
      -0.030571767296492885
    ],
    [
      0.4439990618745521,
      -0.457212959716154,
      -0.7705979123525525
    ],
    [
      0.4761258988075802,
      -0.4836837482033216,
      -0.7344073530464273
    ],
    [
      0.48613084688772557,
      -0.48253016123464837,
      -0.7285886652996235
    ],
    [
      0.5260694717838594,
      -0.4254528479402538,
      -0.7363700055247895
    ],
    [
      0.5239621084413532,
      -0.4977877536525281,
      -0.6911375125336938
    ],
    [
      0.5551426475551793,
      -0.4507794226216717,
      -0.6990096945009406
    ],
    [
      0.5068629608574883,
      -0.5000734774917459,
      -0.7021513056457935
    ],
    [
      0.5389295367761227,
      -0.512265601699431,
      -0.6686844604937322
    ],
    [
      0.561455165814674,
      -0.5085991706045644,
      -0.6527595119493597
    ],
    [
      0.5873161543095168,
      -0.4607996996492865,
      -0.6653746100432502
    ],
    [
      0.5699413912572288,
      -0.44701316491770215,
      -0.6894534363697331
    ],
    [
      0.6303960307132196,
      -0.4755064739508073,
      -0.6135914256994534
    ],
    [
      0.6054642670713208,
      -0.4561117795348182,
      -0.6522078394724873
    ],
    [
      0.5825053571107447,
      -0.5308652055058057,
      -0.6155238764829213
    ],
    [
      0.6173003597468986,
      -0.5057603904949131,
      -0.6026165391546955
    ],
    [
      0.6794967729148313,
      -0.5031296354850215,
      -0.5339894245161037
    ],
    [
      0.6891895082908536,
      -0.4751113859791276,
      -0.5470712865567009
    ],
    [
      0.6599024499748659,
      -0.45103028008157436,
      -0.6009163360790802
    ],
    [
      0.6338356921496731,
      -0.5223374915093746,
      -0.5704523295778875
    ],
    [
      0.6646840036167723,
      -0.5154596903979335,
      -0.5408294397597502
    ],
    [
      0.7186032068316986,
      -0.50618137970494,
      -0.476854109735045
    ],
    [
      0.7340988919056126,
      -0.45457952346077357,
      -0.5044365904185852
    ],
    [
      0.7323017907966882,
      -0.45290562733721906,
      -0.5085376878091173
    ],
    [
      0.7015402417612964,
      -0.4633778989035227,
      -0.5414076209264683
    ],
    [
      0.6917260951817202,
      -0.5138520522788895,
      -0.507416079380052
    ],
    [
      0.71917410054511,
      -0.5066368037858492,
      -0.47550789915078256
    ],
    [
      0.7439192765207389,
      -0.4985549641126501,
      -0.4450023121057853
    ],
    [
      0.7447912435673131,
      -0.49773359922343297,
      -0.44446289801235617
    ],
    [
      0.7608954443603612,
      -0.44517037352686945,
      -0.4720820493151546
    ],
    [
      0.7604081038558638,
      -0.4447073853993451,
      -0.47330207791811785
    ],
    [
      0.7700129639160315,
      -0.4884180311786263,
      -0.41052145159643344
    ],
    [
      0.770117831944848,
      -0.4883146283907028,
      -0.41044774164346043
    ],
    [
      0.7852100065489417,
      -0.4357248740381937,
      -0.4399875904611527
    ],
    [
      0.7847636087949986,
      -0.43525320453287575,
      -0.4412490524124817
    ],
    [
      0.7920060369964372,
      -0.4790298049910458,
      -0.3784929104903271
    ],
    [
      0.8091421722214087,
      -0.42557757526774975,
      -0.4051822707893855
    ],
    [
      0.8086868327034421,
      -0.4250260244607493,
      -0.4066675363772791
    ],
    [
      0.8305264329596953,
      -0.4171898219622347,
      -0.3690237073771325
    ],
    [
      0.829271149240071,
      -0.415339502509197,
      -0.3739016698190377
    ],
    [
      0.7930431844118979,
      -0.4797580146679968,
      -0.37538614121948977
    ],
    [
      0.8120791431930422,
      -0.4705962988391291,
      -0.34506026822827285
    ],
    [
      0.8134086670368704,
      -0.47151615782677775,
      -0.3406447611479955
    ],
    [
      0.8320726745908746,
      -0.46128323493151224,
      -0.30801435253946824
    ],
    [
      0.8498363637063003,
      -0.40609843105272253,
      -0.3359497272196691
    ],
    [
      0.8679300991662949,
      -0.39656007289268386,
      -0.29906094955465995
    ],
    [
      0.8624293097391381,
      -0.38725906651897846,
      -0.32595413956831903
    ],
    [
      0.8325992190315148,
      -0.461616218761939,
      -0.3060866005627191
    ],
    [
      0.8490674524900823,
      -0.451344480375914,
      -0.2745407458942986
    ],
    [
      0.8501754475574687,
      -0.4520480682983417,
      -0.26991526877558386
    ],
    [
      0.8660076635528049,
      -0.440680064621009,
      -0.23628755217623143
    ],
    [
      0.883966079105125,
      -0.3845944141476305,
      -0.26587799382038513
    ],
    [
      0.8765886316203847,
      -0.4464074898026248,
      -0.17975740307987545
    ],
    [
      0.907175460172794,
      -0.3646198999923332,
      -0.20996431361033774
    ],
    [
      0.8976800676784508,
      -0.36066146702384416,
      -0.2531675380000773
    ],
    [
      0.87549599988324,
      -0.45159887465008564,
      -0.1719453709851539
    ],
    [
      0.9185456934196701,
      -0.34487831311515743,
      -0.19321686842256014
    ],
    [
      0.7480568657422081,
      -0.28166192766266906,
      -0.6008972325791603
    ],
    [
      0.7637134170141751,
      -0.32681980389155457,
      -0.5567141389050746
    ],
    [
      0.7797594667295563,
      -0.3544201637720437,
      -0.516102239442376
    ],
    [
      0.8019677199783671,
      -0.369354288527436,
      -0.4694946066347203
    ],
    [
      0.8237447418241761,
      -0.36373624087738826,
      -0.4349029172003886
    ],
    [
      0.835550745557096,
      -0.35231493927747,
      -0.42157933436174694
    ],
    [
      0.8442322050492734,
      -0.3640687446449201,
      -0.39335217443191206
    ],
    [
      0.871338598163369,
      -0.35325159891658275,
      -0.3405618228950107
    ],
    [
      0.9050361295270445,
      -0.2813203239203404,
      -0.31901172329565186
    ],
    [
      0.9082162554050309,
      -0.26868556302976765,
      -0.3208602525047944
    ],
    [
      0.9002362406162949,
      -0.13217904176930914,
      0.41485348256702365
    ],
    [
      0.9144605094909638,
      -0.06813291803660444,
      0.3988983354958306
    ],
    [
      0.9246602433235835,
      -0.060658134904148654,
      0.3759308780703196
    ],
    [
      0.9298326740651377,
      -0.05077644093546439,
      0.3644625512817507
    ],
    [
      0.9343281481737015,
      -0.05099477805369076,
      0.3527469973529986
    ],
    [
      0.9614121927192907,
      0.020634500089654645,
      0.2743370428810798
    ],
    [
      0.9385421819089099,
      0.1356115837716042,
      0.3174083665006637
    ],
    [
      0.9407714918584602,
      0.0959875307674055,
      0.3251697926369907
    ],
    [
      0.9359826378606232,
      0.1523621806417589,
      0.31736771659001073
    ],
    [
      0.9471621313886007,
      0.1651997498563559,
      0.274941702022084
    ],
    [
      0.955102012492461,
      0.20858490881735278,
      0.2104102695842286
    ],
    [
      0.9343196895431555,
      0.27889968109047025,
      0.22194973669643248
    ],
    [
      0.958039904129036,
      0.2449034173455362,
      0.14893575215140825
    ],
    [
      0.9095264550578349,
      0.33931448167224637,
      0.24005688925215835
    ],
    [
      0.944707767828538,
      0.3016335467485852,
      0.12862517980663857
    ],
    [
      0.9505222848774268,
      0.2834377385780189,
      0.12716302253868594
    ],
    [
      0.907547244676483,
      0.33579286824724647,
      0.25219268092950564
    ],
    [
      0.9327477278377406,
      0.3507521129747576,
      0.08339443301129291
    ],
    [
      0.9431698860062038,
      0.3151797318235192,
      0.10532000179784977
    ],
    [
      0.9011182236134946,
      0.41487796026923895,
      0.12594532605260006
    ],
    [
      0.9074621419576061,
      0.40864325510868016,
      0.0975866331415106
    ],
    [
      0.9139224753457463,
      0.398380374638652,
      0.07770962720712903
    ],
    [
      0.914473100408845,
      0.39715116954711804,
      0.07752352646771808
    ],
    [
      0.9034773928116885,
      0.3374910682306519,
      0.2642505998909508
    ],
    [
      0.874177435383754,
      0.4060455316630105,
      0.26634721264241856
    ],
    [
      0.8543859582690837,
      0.4537134829103909,
      0.25331543525403666
    ],
    [
      0.8639741513324908,
      0.46697919919562864,
      0.1883589481493025
    ],
    [
      0.878503027559909,
      0.452252549627187,
      0.15394824430237106
    ],
    [
      0.8984275726617468,
      0.4200566212521747,
      0.12798566960143892
    ],
    [
      0.913107530366321,
      0.4021162058525352,
      0.067358703810863
    ],
    [
      0.9137271057501761,
      0.40500634082711917,
      0.03275118482183363
    ],
    [
      0.7079454321615156,
      0.599456565436663,
      0.37345025269307897
    ],
    [
      0.683532357884107,
      0.6093386838496363,
      0.4018580397227185
    ],
    [
      0.665906080939396,
      0.6021928162980725,
      0.4403781367948806
    ],
    [
      0.6625591379211655,
      0.5814332511674661,
      0.4721766228796087
    ],
    [
      0.6291992047190968,
      0.5999821211400121,
      0.4940949454236381
    ],
    [
      0.5965116736161108,
      0.6278081538956726,
      0.5000307441966085
    ],
    [
      0.46507035008306286,
      0.6965969392595464,
      0.5463170084189667
    ],
    [
      0.3979585437670477,
      0.7397123077277908,
      0.5426368023262307
    ],
    [
      0.38557015151811064,
      0.6364700469374689,
      0.6680131268244041
    ],
    [
      0.38022869186633784,
      0.6783499760182465,
      0.6287029918154182
    ],
    [
      0.49127710822502196,
      0.6467155871882502,
      0.5834430154023759
    ],
    [
      0.4917291360040708,
      0.6349705108535721,
      0.5958312740625854
    ],
    [
      0.44293469043611067,
      0.6174575241605674,
      0.6500423569781965
    ],
    [
      0.40074325780265835,
      0.6280995087643833,
      0.6670051337251105
    ],
    [
      0.3729713309803283,
      0.6908300996654052,
      0.6193917658986506
    ],
    [
      0.34751777669122713,
      0.7158147161416575,
      0.60567374636732
    ],
    [
      0.3519765248341767,
      0.7240620742037718,
      0.5931666196486346
    ],
    [
      0.3322012025270457,
      0.766696009161456,
      0.5493810977595437
    ],
    [
      0.30746662073634934,
      0.7828512733562637,
      0.5409326768993036
    ],
    [
      0.29810576129757055,
      0.8055802002805974,
      0.5120288038744194
    ],
    [
      0.2434588665482412,
      0.8141043331675766,
      0.5272209356776543
    ],
    [
      0.17221234407475405,
      0.8526904765731531,
      0.49321583481243525
    ],
    [
      0.1237137179162079,
      0.8335476788532229,
      0.5384172945566973
    ],
    [
      0.06073007410957129,
      0.8574623388907958,
      0.5109502867036791
    ],
    [
      0.023086634664522293,
      0.8630529423187236,
      0.5045855983427001
    ],
    [
      -0.01799238405680164,
      0.8623921559927542,
      0.5059209853308337
    ],
    [
      -0.008587829798697306,
      0.861525421060666,
      0.5076418009242252
    ],
    [
      -0.052073145339196665,
      0.8595867299308277,
      0.5083296580579468
    ],
    [
      -0.08387935688289593,
      0.8606859257537948,
      0.5021792416042753
    ],
    [
      -0.0894052365454356,
      0.8581970433362901,
      0.5054745675967334
    ],
    [
      -0.14892383086362485,
      0.8581175286457802,
      0.49138172496722055
    ],
    [
      -0.18052614926577967,
      0.8478473364349213,
      0.4985631389618358
    ],
    [
      -0.19456467698043498,
      0.8305681281827169,
      0.5218248469731553
    ],
    [
      -0.19875494042255376,
      0.8289670659445895,
      0.5227906629204905
    ],
    [
      -0.215607767499264,
      0.805449746671688,
      0.5520543416915557
    ],
    [
      -0.2114879285227305,
      0.8007287125915457,
      0.5604519470219104
    ],
    [
      -0.225683492713151,
      0.7798218123683491,
      0.5839048741630235
    ],
    [
      -0.1927739285431335,
      0.7460108401436805,
      0.6374213981834677
    ],
    [
      -0.15395470607620493,
      0.6810975614042467,
      0.7158240428528353
    ],
    [
      -0.1597218322443975,
      0.6266823549739472,
      0.7627307272352414
    ],
    [
      -0.14523526297110012,
      0.6130767687313807,
      0.7765588155649285
    ],
    [
      -0.14365028199889499,
      0.5811117648627394,
      0.8010453877401393
    ],
    [
      -0.10968084752889778,
      0.5452148853656992,
      0.831090151825306
    ],
    [
      -0.16144034149774691,
      0.4807378263050471,
      0.8618747928188811
    ],
    [
      -0.47169997778597095,
      0.8712473001884377,
      0.13574709157500547
    ],
    [
      -0.4724160929080829,
      0.8710024823465126,
      0.1348247414522815
    ],
    [
      -0.4669525643312422,
      0.8667010956501341,
      0.1754551608341407
    ],
    [
      -0.467063822983286,
      0.8577581420487939,
      0.21471458965156232
    ],
    [
      -0.47368435464674497,
      0.8607478805790677,
      0.18637654960198113
    ],
    [
      -0.46484919157929083,
      0.8487692642970115,
      0.25200389892378605
    ],
    [
      -0.47177823505819483,
      0.8523108814166104,
      0.22581288347704018
    ],
    [
      -0.46650485337228387,
      0.8367082958075589,
      0.2868666057715928
    ],
    [
      -0.47195665632347544,
      0.8399069257265314,
      0.267979981842995
    ],
    [
      -0.4767191457623967,
      0.8230608749023074,
      0.30872261379532784
    ],
    [
      -0.5280433295228749,
      0.8195609952789569,
      0.22246351872557074
    ],
    [
      -0.5282668006492823,
      0.8203626235611612,
      0.218950572494387
    ],
    [
      -0.5030266931448959,
      0.8452943547729506,
      0.18011551785643506
    ],
    [
      -0.5305232574771142,
      0.8081539061903437,
      0.25579745343759946
    ],
    [
      -0.5334280734557838,
      0.8120469352929374,
      0.23671557897738596
    ],
    [
      -0.5295125248397212,
      0.7973778552396447,
      0.28949100506110376
    ],
    [
      -0.5333887927813893,
      0.8022694832387289,
      0.2680672900580652
    ],
    [
      -0.5328955254912633,
      0.7808826143805884,
      0.3259519925840732
    ],
    [
      -0.5355608314121013,
      0.7839872810151889,
      0.31390848835861374
    ],
    [
      -0.5361519598089675,
      0.7628614287113044,
      0.3613634134462851
    ],
    [
      -0.538923228205333,
      0.7657801390097114,
      0.35091670350527565
    ],
    [
      -0.5399823819757003,
      0.7415003103514978,
      0.3982415308634717
    ],
    [
      -0.542989985956572,
      0.744250770212273,
      0.3889121574203103
    ],
    [
      -0.5441673548342681,
      0.7182592046671272,
      0.4335730674795442
    ],
    [
      -0.5467921856911854,
      0.7205130341381614,
      0.4264730628117993
    ],
    [
      -0.5476058363317872,
      0.6927866760697766,
      0.46922752420926284
    ],
    [
      -0.5506391726432253,
      0.6953520319698558,
      0.4618246996276584
    ],
    [
      -0.5520571987683396,
      0.6664550345067306,
      0.501069392668008
    ],
    [
      -0.5536529207308931,
      0.6679882589311776,
      0.49725258098500147
    ],
    [
      -0.5565205766315471,
      0.6380713945972564,
      0.5321181665592735
    ],
    [
      -0.5578084594829785,
      0.6393220432409251,
      0.5292608502009903
    ],
    [
      -0.559548591698429,
      0.6063283660558852,
      0.5650409596164735
    ],
    [
      -0.5618267276069017,
      0.6084271321189055,
      0.560506157903804
    ],
    [
      -0.5595260860352186,
      0.573466280211022,
      0.5983869855762597
    ],
    [
      -0.564021862189049,
      0.5774026885302126,
      0.590326582707301
    ],
    [
      -0.5557684397922386,
      0.5391483804977806,
      0.6328036544912816
    ],
    [
      -0.5633091248036668,
      0.5454023396262119,
      0.6206602273733844
    ],
    [
      -0.5478722601316441,
      0.5037353451913673,
      0.6678972140855044
    ],
    [
      -0.5589326000073342,
      0.5126879592421449,
      0.6517249458914136
    ],
    [
      -0.5352050310725064,
      0.4677117332652872,
      0.7034211464554206
    ],
    [
      -0.550469513388602,
      0.47968274913538766,
      0.6832918666365292
    ],
    [
      -0.5170109752801378,
      0.43058833594704937,
      0.7397927658379958
    ],
    [
      -0.5374850728730091,
      0.44568241407456816,
      0.7158749766707602
    ],
    [
      -0.49453679953220925,
      0.39244610635883875,
      0.7755123516180942
    ],
    [
      -0.5191679408336511,
      0.41032051939503855,
      0.74973443336553
    ],
    [
      -0.4670029183660124,
      0.35178596161791603,
      0.8112674721977862
    ],
    [
      -0.49693763543091235,
      0.37276443535219056,
      0.7836451124258328
    ],
    [
      -0.4336743547809321,
      0.30758685613930875,
      0.8469456180509338
    ],
    [
      -0.4696897197286918,
      0.33326164637102434,
      0.8175134508002038
    ],
    [
      -0.3918226632383791,
      0.2594912935713162,
      0.8826886592301211
    ],
    [
      -0.4361319211967203,
      0.29285691441902706,
      0.8508958661259464
    ],
    [
      -0.24645735700387408,
      0.1752232722010917,
      0.9531818168942414
    ],
    [
      -0.2696089612120738,
      0.16978331387602305,
      0.9478842937634436
    ],
    [
      -0.30610478704426114,
      0.1781298171077868,
      0.9351842746783834
    ],
    [
      -0.3933253289491718,
      0.25175833801621833,
      0.8842584038878779
    ],
    [
      -0.5148724014737179,
      0.8434817254535873,
      0.15311756602860968
    ],
    [
      -0.5123692088419884,
      0.8465130136527894,
      0.14454588042247005
    ],
    [
      -0.5273387682820954,
      0.842780508440095,
      0.10786490652745997
    ],
    [
      -0.5667763160083721,
      0.8220743762900876,
      -0.05439050890772604
    ],
    [
      -0.6100205726020473,
      0.7898033096867215,
      0.06391895657917875
    ],
    [
      -0.6344714886856777,
      0.7716489243558269,
      0.044764579585600976
    ],
    [
      -0.3876051468535912,
      0.8552442190395062,
      -0.3439761269799275
    ],
    [
      -0.3902478559541962,
      0.8511165287800337,
      -0.3511513425299394
    ],
    [
      -0.3779492024901601,
      0.8416877396043884,
      -0.38563732876461443
    ],
    [
      -0.3484870700445568,
      0.8507190133097741,
      -0.3934894184155461
    ],
    [
      -0.3438870482880807,
      0.8540349365594562,
      -0.39034090889323514
    ],
    [
      -0.338509581949704,
      0.872143264706484,
      -0.3532384304621351
    ],
    [
      -0.3471693204456479,
      0.8728908874772129,
      -0.3428337228169811
    ],
    [
      -0.34185378486054074,
      0.8912688333051277,
      -0.29795277571360135
    ],
    [
      -0.39864836492308764,
      0.8632201834021264,
      -0.30972632453724047
    ],
    [
      -0.4105741589222296,
      0.8694440062648179,
      -0.27476531803611426
    ],
    [
      -0.40050148094548527,
      0.8629564096190713,
      -0.30806622479238893
    ],
    [
      -0.42797715043333107,
      0.8712330660725391,
      -0.24039239440716187
    ],
    [
      -0.4203446103960918,
      0.8675616600072884,
      -0.2657953622551681
    ],
    [
      -0.44638481373187666,
      0.8689894729627033,
      -0.21353663374128773
    ],
    [
      -0.44240270691083367,
      0.8678732717212233,
      -0.22599962201266352
    ],
    [
      -0.4912145310836895,
      0.8613414387187475,
      -0.1296117679770989
    ],
    [
      -0.4904139887780717,
      0.8604610525229051,
      -0.13820599372659584
    ],
    [
      -0.4735737104389396,
      0.8611133769614154,
      -0.1849640310957854
    ],
    [
      -0.5773532930270864,
      0.8019910030829701,
      -0.15321098526134116
    ],
    [
      -0.6315408304805168,
      0.761624299493114,
      -0.14520539197151905
    ],
    [
      -0.5867794596928486,
      0.7934964056601451,
      -0.16141040823626876
    ],
    [
      -0.556225395959998,
      0.8144979505852693,
      0.16494361879605987
    ],
    [
      -0.5562238341311364,
      0.8146521473006227,
      0.16418564262121874
    ],
    [
      -0.5687099007272745,
      0.8108256363911692,
      0.13831426602353492
    ],
    [
      -0.582923403437974,
      0.8025133232548269,
      0.1271718196880995
    ],
    [
      -0.6076511288343163,
      0.7905601190236278,
      0.07599213009074529
    ],
    [
      -0.694853719497332,
      0.7117328716823048,
      0.10302731612336072
    ],
    [
      -0.7128335099706208,
      0.6951313438511915,
      0.09306342922223333
    ],
    [
      -0.7261082785648233,
      0.6815144202526953,
      0.09113101989587016
    ],
    [
      -0.7568724427494756,
      0.649557823580471,
      0.07224084185447655
    ],
    [
      -0.8097664743906229,
      0.5863676659382802,
      0.02124187597822184
    ],
    [
      -0.827281790693264,
      0.5615479917153245,
      0.016391820760132757
    ],
    [
      -0.837187864318568,
      0.5469117124468394,
      0.002014603231556133
    ],
    [
      -0.8556011216754719,
      0.5176227819687844,
      -0.003657345290048166
    ],
    [
      -0.8625505045249445,
      0.5045501669015674,
      -0.03789137399678432
    ],
    [
      -0.8774706509536816,
      0.4776829825714811,
      -0.04317667051240071
    ],
    [
      -0.8888761771098384,
      0.45349919269229383,
      -0.06509703521695087
    ],
    [
      -0.9005255677282834,
      0.4246327994699025,
      -0.09349164391541309
    ],
    [
      -0.8980423690299459,
      0.43442116954788057,
      -0.06926868611236946
    ],
    [
      -0.9085450056585229,
      0.4023675685950646,
      -0.11245582437495386
    ],
    [
      -0.9088993618140196,
      0.399558672378648,
      -0.11939354011453088
    ],
    [
      -0.91865103001145,
      0.36730788396710784,
      -0.14548265681691278
    ],
    [
      -0.9227347795906723,
      0.35616280593131483,
      -0.14733832564844068
    ],
    [
      -0.9210995361102585,
      0.34508841628197795,
      -0.18024879895706059
    ],
    [
      -0.8924493080519281,
      0.3874760340257092,
      -0.23107694738623794
    ],
    [
      -0.9252308067804439,
      0.3264126847244853,
      -0.19339781135101441
    ],
    [
      -0.922290863418777,
      0.32078765128356956,
      -0.21558025428646707
    ],
    [
      -0.908043391855667,
      0.3447528284790521,
      -0.23791318955230073
    ],
    [
      -0.9268004771248157,
      0.29795982397165116,
      -0.2286062529765895
    ],
    [
      -0.9240901510290538,
      0.29321261201373944,
      -0.24511988276592514
    ],
    [
      -0.9079000667291852,
      0.32092945744350004,
      -0.2696697094190631
    ],
    [
      -0.9271704649863481,
      0.27289057207570344,
      -0.2566820300083241
    ],
    [
      -0.9227586754954007,
      0.2669455484637342,
      -0.27795053688267957
    ],
    [
      -0.904829590582668,
      0.3004685281553726,
      -0.3016655028241472
    ],
    [
      -0.906253054177067,
      0.3211782002421828,
      -0.27486353975005556
    ],
    [
      -0.8990922804209436,
      0.28322914997999227,
      -0.3337878366403998
    ],
    [
      -0.9013416979013614,
      0.29989730269774656,
      -0.31248160179266116
    ],
    [
      -0.9242694042357679,
      0.25328098965052487,
      -0.2856130401002546
    ],
    [
      -0.9162718331399616,
      0.2468542762835133,
      -0.31545030365316984
    ],
    [
      -0.91784717334454,
      0.2309161040401823,
      -0.32285340214769565
    ],
    [
      -0.903731302277125,
      0.2183355950962549,
      -0.3682381039469656
    ],
    [
      -0.8735069728539951,
      0.27496468169502414,
      -0.40172128670983287
    ],
    [
      -0.9107759101134456,
      0.187011328830023,
      -0.3681222683379176
    ],
    [
      -0.8995642502351157,
      0.17015618444165453,
      -0.4022822797429584
    ],
    [
      -0.8589011495385074,
      0.22610691245087575,
      -0.4595263642745241
    ],
    [
      -0.8575919496672142,
      0.22864448128201645,
      -0.46071438988299895
    ],
    [
      -0.8992309794590814,
      0.15857606035564484,
      -0.407722060554913
    ],
    [
      -0.8829756446625382,
      0.1444264915246437,
      -0.44664863089307344
    ],
    [
      -0.8827912068585269,
      0.1420501132586715,
      -0.4477738831335122
    ],
    [
      -0.8657625663707199,
      0.126751476005623,
      -0.4841376271284652
    ],
    [
      -0.8480137154593475,
      0.19213013476380686,
      -0.49392180525714213
    ],
    [
      -0.8517755580132625,
      0.058768080149888546,
      -0.5206003376167666
    ],
    [
      -0.7796406897000168,
      0.0877086244032956,
      -0.620054507417988
    ],
    [
      -0.7872406407547171,
      0.1090675256800584,
      -0.6069237582976401
    ],
    [
      -0.8170927147216551,
      0.1686545057496184,
      -0.5512850018267754
    ],
    [
      -0.7742488316430904,
      0.5932052709891504,
      -0.22055895622258873
    ],
    [
      -0.7605709817501077,
      0.6191704189823743,
      -0.19534526863189786
    ],
    [
      -0.7558149606468362,
      0.637340640884857,
      -0.15013544797582382
    ],
    [
      -0.7857626530798443,
      0.5680390437814393,
      -0.24476253341717236
    ],
    [
      -0.7743654739843542,
      0.5924074431288328,
      -0.22228705321395886
    ],
    [
      -0.7932229444962607,
      0.5462583902394779,
      -0.2690708669062044
    ],
    [
      -0.7860799482086744,
      0.5636319658604564,
      -0.2537662745215073
    ],
    [
      -0.7948274286224207,
      0.5281922263200427,
      -0.29876802165651456
    ],
    [
      -0.7930734316571298,
      0.5332889756373232,
      -0.2943423185056443
    ],
    [
      -0.7937461128813909,
      0.5114608343728001,
      -0.3292034677647877
    ],
    [
      -0.7831433765569779,
      0.506534744354325,
      -0.3607062579396621
    ],
    [
      -0.7816356463000764,
      0.44482918311270675,
      -0.43723302057866553
    ],
    [
      -0.7605843678653392,
      0.5132915548228522,
      -0.39754647414663513
    ],
    [
      0.152616096548021,
      -0.8452997647136611,
      -0.5120318689783618
    ],
    [
      0.1404158433234217,
      -0.82977823010361,
      -0.5401402408540701
    ],
    [
      -0.017697958245896636,
      -0.8392914468597532,
      -0.543393641388992
    ],
    [
      0.1244817036168814,
      -0.8676203635742217,
      -0.48139298932989716
    ],
    [
      0.018051559206559323,
      -0.8116744678454314,
      -0.5838310538657977
    ],
    [
      -0.027629223587564974,
      -0.8375505915394382,
      -0.545660730322318
    ],
    [
      0.15236706098958797,
      -0.8197040836889975,
      -0.5521498835542539
    ],
    [
      0.13956707670425808,
      -0.8024771140834762,
      -0.5801305994967711
    ],
    [
      0.16463749297604607,
      -0.7800248831825797,
      -0.6037016461155007
    ],
    [
      0.16416430134299326,
      -0.7712021778937973,
      -0.615058763840034
    ],
    [
      0.16279803029794532,
      -0.7707611554728131,
      -0.6159740599613941
    ],
    [
      0.05294304296995125,
      -0.7764759462884133,
      -0.6279188952696
    ],
    [
      0.1438792637080174,
      -0.7392199573466858,
      -0.6579153533207769
    ],
    [
      0.09404548123458438,
      -0.7408564128652321,
      -0.6650467825467741
    ],
    [
      0.05608459296593697,
      -0.7673848951737005,
      -0.6387291609838195
    ],
    [
      0.1024954033954345,
      -0.7037049604754777,
      -0.7030604674457337
    ],
    [
      0.16210139887172315,
      -0.7229999616886684,
      -0.6715610112878907
    ],
    [
      0.15473870898328096,
      -0.7009141074973234,
      -0.6962581028996488
    ],
    [
      0.17378430758104518,
      -0.6819540179912279,
      -0.710448964939915
    ],
    [
      0.17595561646894747,
      -0.6604694270643192,
      -0.7299450369352221
    ],
    [
      0.1057513493449223,
      -0.6603557403405259,
      -0.7434695342184803
    ],
    [
      0.09682066468683581,
      -0.6978454179370728,
      -0.7096742432650572
    ],
    [
      0.0694870525142787,
      -0.6139310836597257,
      -0.7862952206705015
    ],
    [
      0.06899650756336079,
      -0.6154136069598645,
      -0.7851786894157969
    ],
    [
      0.19972806006749438,
      -0.6366952208008804,
      -0.7448005758798751
    ],
    [
      0.18254353673890894,
      -0.6142621866103815,
      -0.7676977421456205
    ],
    [
      0.1885265375536319,
      -0.5858216673974908,
      -0.7882072815228636
    ],
    [
      0.13074696647645778,
      -0.5667089775559077,
      -0.8134778211572469
    ],
    [
      0.06532561556208054,
      -0.5869937057611393,
      -0.8069516425091657
    ],
    [
      0.19898912742067845,
      -0.07511261796862048,
      -0.9771189394286947
    ],
    [
      0.15040428318853047,
      -0.03386668650226608,
      -0.9880443305560239
    ],
    [
      0.12019593560987385,
      -0.06879065928742012,
      -0.990363964539133
    ],
    [
      0.17034133151464556,
      -0.11369994481651821,
      -0.978803429359817
    ],
    [
      0.26505269808296694,
      -0.1504574311608452,
      -0.9524230303008318
    ],
    [
      0.2975225216185142,
      -0.07225236004479957,
      -0.9519768619024925
    ],
    [
      0.24626998152866555,
      -0.04503714741402836,
      -0.9681543015194829
    ],
    [
      0.2223824582684194,
      -0.06878366060326982,
      -0.9725301282163493
    ],
    [
      0.2470740030852119,
      -0.1425156338793833,
      -0.9584590398652445
    ],
    [
      0.37232383318214113,
      -0.1182682002951088,
      -0.9205365805026507
    ],
    [
      0.3592258544230925,
      -0.05321585486610016,
      -0.931732181640663
    ],
    [
      0.34636354839784556,
      -0.0489976343588072,
      -0.9368198995369889
    ],
    [
      0.30425423530485507,
      -0.07200483922461845,
      -0.949865602823523
    ],
    [
      0.3402062840009331,
      -0.1628763879251611,
      -0.9261376607085627
    ],
    [
      0.41767810014240875,
      -0.11700386913036916,
      -0.9010300212922716
    ],
    [
      0.4279018435903743,
      -0.10848862794430147,
      -0.8972904935742503
    ],
    [
      0.4337651058013463,
      -0.09241712480814235,
      -0.8962739023486866
    ],
    [
      0.38114038918338766,
      -0.04486904131893281,
      -0.9234277301793875
    ],
    [
      0.4618199987460028,
      -0.06808179981593848,
      -0.8843569173654178
    ],
    [
      0.4625526942600694,
      -0.06586594711077592,
      -0.8841417771171948
    ],
    [
      0.41554480126813453,
      -0.011039217385653445,
      -0.9095057195084255
    ],
    [
      0.40957302283403524,
      -0.011603191214349228,
      -0.9122035435801782
    ],
    [
      0.49741323838454704,
      0.0004805123896974625,
      -0.8675135960822984
    ],
    [
      0.45811073489831194,
      0.025879531437559545,
      -0.8885183196893022
    ],
    [
      0.4828355563120108,
      -0.04662857428729825,
      -0.8744687539419604
    ],
    [
      0.557554881486697,
      0.09249306066803217,
      -0.8249712648684286
    ],
    [
      0.5511148588388839,
      0.1439405280364162,
      -0.8219206389643678
    ],
    [
      0.4859289715323998,
      0.15151152441645135,
      -0.8607655270713781
    ],
    [
      0.45728180076930103,
      0.02936786320251197,
      -0.888836814773164
    ],
    [
      0.4405969187798708,
      0.25981701147361047,
      -0.8592842810796703
    ],
    [
      0.4450747678295591,
      0.22850890980990293,
      -0.8658476362380125
    ],
    [
      0.4782771828484291,
      0.15503246140555718,
      -0.8644164923675998
    ],
    [
      0.4304613961394907,
      0.29384926116388743,
      -0.8534375185958711
    ],
    [
      0.434073569572721,
      0.2727214086133135,
      -0.85860536306406
    ],
    [
      0.35037575032911683,
      0.40490290821719305,
      -0.8445652541388189
    ],
    [
      0.3643224406153277,
      0.3768591919543116,
      -0.8516139434647805
    ],
    [
      0.32687478923596613,
      0.4360229800695725,
      -0.8384729172806906
    ],
    [
      0.3366956150948348,
      0.41755066231363824,
      -0.8439712715355617
    ],
    [
      0.3913754716108455,
      0.5661763189817017,
      -0.7254444265729241
    ],
    [
      0.31110115259894466,
      0.4500489125812361,
      -0.8370615563601371
    ],
    [
      0.3600378143470288,
      0.6037709923102157,
      -0.7112196292882754
    ],
    [
      0.28253316770101905,
      0.4737983740201805,
      -0.8340803977583102
    ],
    [
      0.30846824769046083,
      0.45116229727359264,
      -0.8374365180033594
    ],
    [
      0.33965189709413063,
      0.6322516426597471,
      -0.6963436286449454
    ],
    [
      0.3215385519088078,
      0.6320923776524369,
      -0.7050334642767506
    ],
    [
      0.2500722469042297,
      0.4916012720471956,
      -0.8341415111657309
    ],
    [
      0.26305490441635715,
      0.48086934646213264,
      -0.8364010933132396
    ],
    [
      0.1711133094268613,
      0.5478269448897032,
      -0.8189052898777742
    ],
    [
      0.2353115146944613,
      0.4966274811392138,
      -0.8354577404210929
    ],
    [
      0.1990478293939712,
      0.6372605651136759,
      -0.7444991160267062
    ],
    [
      -0.06837792364594436,
      0.548215518327522,
      -0.8335371647519717
    ],
    [
      0.010825031122566298,
      0.5102486949260929,
      -0.8599587711206942
    ],
    [
      0.1407524537436808,
      0.5268948829211483,
      -0.8381948037995955
    ],
    [
      0.08208167489121136,
      0.6920103951879472,
      -0.7172058362833328
    ],
    [
      -0.40106945817165385,
      0.5120981686269453,
      -0.7595385147646068
    ],
    [
      -0.42824629045036966,
      0.4859863160648688,
      -0.7618545893496967
    ],
    [
      -0.36954784740775176,
      0.4193736197516759,
      -0.8291924719464557
    ],
    [
      -0.34384248228225534,
      0.42542662626506733,
      -0.8371287434096979
    ],
    [
      -0.3044253384004979,
      0.5031067536889021,
      -0.8088317548986048
    ],
    [
      -0.5099286522704838,
      0.4478575737121921,
      -0.7344360852124823
    ],
    [
      -0.5060577334903094,
      0.40328541576653965,
      -0.7624083182945082
    ],
    [
      -0.4833175017889962,
      0.3930489126977392,
      -0.7822510752255754
    ],
    [
      -0.4016743224847174,
      0.4026625079711763,
      -0.8225087496986312
    ],
    [
      -0.5544937731423817,
      0.341830876471209,
      -0.7587412651472504
    ],
    [
      -0.5438764300914762,
      0.27633478882620977,
      -0.7923619837393296
    ],
    [
      -0.49291327395848417,
      0.2747247050878293,
      -0.8255681926830355
    ],
    [
      -0.4621310449142794,
      0.30991735470101195,
      -0.830894777081649
    ],
    [
      -0.48119031753457137,
      0.23786883336920653,
      -0.8437264345879837
    ],
    [
      -0.5766184352970473,
      0.2113279929566592,
      -0.7892095155714325
    ],
    [
      -0.4870095248510766,
      0.21574789560460333,
      -0.8463300586925373
    ],
    [
      -0.6135959194325469,
      0.1636102464300789,
      -0.7724841324705746
    ],
    [
      -0.6140151548536528,
      0.15858934977620232,
      -0.7731977804854371
    ],
    [
      -0.5020171457301813,
      0.17586384424084847,
      -0.8467884586375469
    ],
    [
      -0.4828110636897236,
      0.19780785274673826,
      -0.8530917478035539
    ],
    [
      -0.6255513374598085,
      0.10317538068862786,
      -0.7733306957712215
    ],
    [
      -0.5021537873386406,
      0.1356875920601269,
      -0.8540670062836896
    ],
    [
      -0.5857650183747518,
      0.06479537805097887,
      -0.8078866889803652
    ],
    [
      -0.46424615997989566,
      0.10574958836294472,
      -0.8793705291314855
    ],
    [
      -0.6315254933154568,
      0.08413186263388357,
      -0.7707771279575064
    ],
    [
      -0.45615350928002046,
      0.09210640183069535,
      -0.8851216790438051
    ],
    [
      -0.4638322677562926,
      0.10564969749188523,
      -0.879600914510625
    ],
    [
      -0.5390421698312373,
      0.0295862062744288,
      -0.8417589889878921
    ],
    [
      -0.4679079447168712,
      0.06546768527486137,
      -0.8813490440543889
    ],
    [
      -0.5140949771431675,
      -0.012491233792062304,
      -0.8576423051333919
    ],
    [
      -0.45846222000389014,
      -0.045058415526563526,
      -0.8875709166141825
    ],
    [
      -0.28635520852048146,
      -0.02619694412615072,
      -0.9577653233812774
    ],
    [
      -0.38861359293206,
      -0.006558704939646469,
      -0.9213774789834782
    ],
    [
      -0.4455449727240253,
      -0.06048416582791819,
      -0.8932140521534849
    ],
    [
      -0.4456600402291391,
      -0.0658620567887819,
      -0.8927761858486781
    ],
    [
      -0.43575961627103793,
      -0.12133487733592084,
      -0.8918471866688793
    ],
    [
      -0.38640230429440703,
      -0.21825742267841752,
      -0.8961344523461572
    ],
    [
      -0.29577723012393364,
      -0.1830686634930315,
      -0.9375509023978852
    ],
    [
      -0.23468504149187333,
      -0.07844805121387974,
      -0.9689008383527709
    ],
    [
      -0.24778304514631852,
      -0.05077526198425167,
      -0.9674840749637423
    ],
    [
      -0.09408167762555965,
      -0.08541783155539828,
      -0.9918933571647377
    ],
    [
      -0.16576474748859446,
      -0.2851709234294487,
      -0.9440336820900185
    ],
    [
      -0.15620443409573154,
      -0.2997747314843253,
      -0.9411351046116243
    ],
    [
      -0.14529244056218024,
      -0.3103049117135842,
      -0.9394684499662083
    ],
    [
      -0.015930457849660577,
      -0.18506211957558608,
      -0.9825976961151963
    ],
    [
      -0.052508427857159444,
      -0.09338304002507848,
      -0.9942446745342135
    ],
    [
      -0.07553367397231514,
      -0.08094002910309636,
      -0.993852793820611
    ],
    [
      0.015145984153341197,
      -0.34332361251828225,
      -0.9390950411174702
    ],
    [
      -0.03704592693687176,
      -0.3622786007509359,
      -0.9313333531745397
    ],
    [
      0.0031874553685985072,
      -0.4646324262650788,
      -0.8854979099869742
    ],
    [
      0.01748322573325871,
      -0.46982433045324373,
      -0.8825867862890998
    ],
    [
      0.042837271519409977,
      -0.44942557408898565,
      -0.8922900994203388
    ],
    [
      0.10760980789648324,
      -0.43985774880593836,
      -0.8915970446675191
    ],
    [
      0.04673560300977305,
      -0.5203846555264351,
      -0.8526520941767202
    ],
    [
      0.048463578783121686,
      -0.5461949752264506,
      -0.8362549435243473
    ],
    [
      0.1376717548801808,
      -0.5008756302054803,
      -0.8544999069481952
    ],
    [
      0.14847042164298158,
      -0.47234196938544676,
      -0.8688208088289743
    ],
    [
      0.13951069904665278,
      -0.420309614280904,
      -0.8965916534267715
    ],
    [
      0.04681313477056055,
      -0.549939064866735,
      -0.833891812734994
    ],
    [
      0.05064723349346154,
      -0.5681070085490828,
      -0.8213947191070023
    ],
    [
      0.1604626189186709,
      -0.5342646743417794,
      -0.8299475921287042
    ],
    [
      0.22838894631726603,
      -0.538404459076139,
      -0.8111467978405753
    ],
    [
      0.2425358172738101,
      -0.5309572370656994,
      -0.811948760542735
    ],
    [
      0.2385001088051565,
      -0.5081039502440957,
      -0.8276158975311397
    ],
    [
      0.1753603741637714,
      -0.32757081463740556,
      -0.9284105237290929
    ],
    [
      0.4160543087286218,
      -0.1540398029536453,
      -0.8961978304450143
    ],
    [
      0.32726223268275767,
      -0.20228202088588126,
      -0.9230283934342542
    ],
    [
      0.3163578695486745,
      -0.22212870902981163,
      -0.9222670627314916
    ],
    [
      0.398126546358874,
      -0.5131298850705428,
      -0.7603900144872017
    ],
    [
      0.33690980456771974,
      -0.475333620230364,
      -0.8127421073531487
    ],
    [
      0.3524334943826815,
      -0.5247467204973277,
      -0.7748751585671796
    ],
    [
      0.397598909016665,
      -0.5149868056372421,
      -0.7594100984108042
    ],
    [
      0.0369174095005211,
      0.7861386788779511,
      -0.6169465798979686
    ],
    [
      0.014396757703160635,
      0.7832360296659976,
      -0.6215577649749707
    ],
    [
      -0.04460099842897224,
      0.7434332333516882,
      -0.6673213457453563
    ],
    [
      -0.14867232519920254,
      0.5801677041794367,
      -0.8008133207852028
    ],
    [
      -0.07897233578121157,
      0.5466494260489534,
      -0.8336292792252498
    ],
    [
      -0.15376383426963108,
      0.6886897935123207,
      -0.7085640772595364
    ],
    [
      -0.170811234598947,
      0.7211671299569442,
      -0.6713728418728653
    ],
    [
      -0.11470925836333323,
      0.7817826967308065,
      -0.6129091295926681
    ],
    [
      -0.1529512037175461,
      0.7553861562475783,
      -0.6371794756823724
    ],
    [
      0.35658792561248914,
      0.6664589205820749,
      -0.6547347237499761
    ],
    [
      0.3522252553421741,
      0.7052918972690236,
      -0.6152241129424312
    ],
    [
      0.3428332442395864,
      0.7333247489793967,
      -0.5871117263166057
    ],
    [
      0.32298698316014296,
      0.7681996237849599,
      -0.5527646395399725
    ],
    [
      0.3039573844979649,
      0.7914568392800084,
      -0.5302885817798221
    ],
    [
      0.2640931485181006,
      0.8275586701178987,
      -0.49538011306318225
    ],
    [
      0.22538585999991348,
      0.8542103724245401,
      -0.468535861759191
    ],
    [
      -0.2817694204647319,
      -0.2973842849806585,
      0.9122327448285945
    ],
    [
      -0.2826721711578333,
      -0.29592689951645207,
      0.9124273745320755
    ],
    [
      -0.2507403183535626,
      -0.24083638007064698,
      0.937617795685652
    ],
    [
      -0.21022955270314111,
      -0.2252301964403655,
      0.9513542420054013
    ],
    [
      -0.2069821938121297,
      -0.2753934044505827,
      0.9387847699179167
    ],
    [
      -0.3517247915507245,
      -0.4079732022678744,
      0.8425245024566914
    ],
    [
      -0.3564708243617555,
      -0.39949218793068614,
      0.8445913468424856
    ],
    [
      -0.321420200585415,
      -0.3515154917595051,
      0.8792757893338727
    ],
    [
      -0.31888757834267945,
      -0.35185343148914466,
      0.8800624268357644
    ],
    [
      -0.28984382801834135,
      -0.39682219862059026,
      0.8709320857802835
    ],
    [
      -0.3387899135042112,
      -0.41533672675442845,
      0.8442255610420276
    ],
    [
      -0.380097992962789,
      -0.4464560615255418,
      0.8100632696726603
    ],
    [
      -0.31821449405826346,
      -0.44892642391203647,
      0.8349877853506565
    ],
    [
      -0.3582100367898022,
      -0.46617339990167495,
      0.8089301148845688
    ],
    [
      -0.37462542614616795,
      -0.4568081139245861,
      0.8068346405165463
    ],
    [
      -0.3421207436207709,
      -0.4953782735575013,
      0.7984696380398945
    ],
    [
      -0.3729988901230154,
      -0.5130536515950819,
      0.7730768257760356
    ],
    [
      -0.39523230603983694,
      -0.5006987763242746,
      0.7701247688847611
    ],
    [
      -0.40075656050297376,
      -0.4897677126720922,
      0.7742879095257612
    ],
    [
      -0.36112670316147705,
      -0.5377495365546875,
      0.7618483708710948
    ],
    [
      -0.38823618964349654,
      -0.5542056244860155,
      0.7362939540965718
    ],
    [
      -0.4137881615795297,
      -0.539949868545152,
      0.7329621387184375
    ],
    [
      -0.4186464499354181,
      -0.5297680108224504,
      0.73761846822439
    ],
    [
      -0.3783247841997622,
      -0.5762695119514736,
      0.7244196347804315
    ],
    [
      -0.402238594429038,
      -0.5907449714958287,
      0.6994458462269573
    ],
    [
      -0.42928381426293477,
      -0.5767520394987002,
      0.6950341658839196
    ],
    [
      -0.4344348889481668,
      -0.5657880918791592,
      0.700821063005625
    ],
    [
      -0.4413878265786614,
      -0.6111431062404543,
      0.6570242691430314
    ],
    [
      -0.4467631337521241,
      -0.5994990951238717,
      0.6640809719195702
    ],
    [
      -0.39184873361907363,
      -0.6128544334603974,
      0.6861953172013516
    ],
    [
      -0.41132525483331345,
      -0.6253695069788687,
      0.6631172705316281
    ],
    [
      -0.4553964903184082,
      -0.6307263560832549,
      0.6283297703814574
    ],
    [
      -0.40042959481102036,
      -0.6479765917884963,
      0.6479062247684046
    ],
    [
      -0.4136321200942632,
      -0.658890362118168,
      0.6283088093717248
    ],
    [
      -0.44903160507308837,
      -0.6443185946083904,
      0.6190510207465574
    ],
    [
      -0.4123004578062685,
      -0.6908798436492322,
      0.5938799324206485
    ],
    [
      -0.4522983148807429,
      -0.6755648437643842,
      0.58227002002992
    ],
    [
      -0.45959297836354984,
      -0.6605038593608803,
      0.5937246382021754
    ],
    [
      -0.4030029337828928,
      -0.6812142719580859,
      0.6111757120853186
    ],
    [
      -0.4021651313572768,
      -0.7122004628051322,
      0.5753552884092922
    ],
    [
      -0.40842385558993005,
      -0.7201444861199909,
      0.5608759874482327
    ],
    [
      -0.45223316819247106,
      -0.7059261215396154,
      0.5451178519500498
    ],
    [
      -0.46080436110291256,
      -0.6891741149517954,
      0.5591944027518034
    ],
    [
      -0.4475307557445338,
      -0.7350412533464268,
      0.5093432816300225
    ],
    [
      -0.4579703447254718,
      -0.7160220394579675,
      0.526854441342659
    ],
    [
      -0.39677553621437817,
      -0.7435984609427166,
      0.5381733017768678
    ],
    [
      -0.3994395604464594,
      -0.748349457989195,
      0.5295480396315496
    ],
    [
      -0.45200284992699563,
      -0.7433364114384611,
      0.4930967482022821
    ],
    [
      -0.3867179423089099,
      -0.7722618915644325,
      0.5040444463871092
    ],
    [
      -0.3874473758659022,
      -0.7741426609529336,
      0.5005873264749495
    ],
    [
      -0.44054431497333324,
      -0.7629295066453102,
      0.47313769077787493
    ],
    [
      -0.43075518358610754,
      -0.7884948030006838,
      0.43900560070984485
    ],
    [
      -0.44302999504227353,
      -0.7688680752686637,
      0.46104913656301705
    ],
    [
      -0.37275117132994795,
      -0.7994636274593799,
      0.47107798997792455
    ],
    [
      -0.3706395550859786,
      -0.8010504943554156,
      0.4700472590055301
    ],
    [
      -0.35675484248248107,
      -0.8223133368349791,
      0.44331338625020383
    ],
    [
      -0.4194555871222157,
      -0.8131379444831828,
      0.4035637417727485
    ],
    [
      -0.43244080942502805,
      -0.7938552093308503,
      0.4275381304189117
    ],
    [
      -0.3550007786700598,
      -0.8429026542392307,
      0.404338425851552
    ],
    [
      -0.4056965526252665,
      -0.8357606276521994,
      0.3700195676641659
    ],
    [
      -0.41997434838542413,
      -0.8163276444923436,
      0.3965232950733415
    ],
    [
      -0.3456345086587102,
      -0.8302874054866302,
      0.4372180356693122
    ],
    [
      -0.4025691330410566,
      -0.8422277575063524,
      0.3585951723160715
    ],
    [
      -0.40578170233888505,
      -0.8381488044791344,
      0.3644829098835145
    ],
    [
      -0.3389033817980733,
      -0.8615609509187651,
      0.37796458254416204
    ],
    [
      -0.3623526991063283,
      -0.862037845230074,
      0.35438859299002495
    ],
    [
      -0.3277331992940387,
      -0.8663014051634593,
      0.37697854778794765
    ],
    [
      -0.3140271135819339,
      -0.8805903179100958,
      0.35489105925395714
    ],
    [
      -0.3372098906761917,
      -0.882340027520627,
      0.32827665994561644
    ],
    [
      -0.3520211188611149,
      -0.8756427153526422,
      0.33065233543046463
    ],
    [
      -0.2752366518291541,
      -0.8948574677000246,
      0.35138995146614027
    ],
    [
      -0.26583628603243664,
      -0.9144842189492877,
      0.3050404601379821
    ],
    [
      -0.29004491774569396,
      -0.9092171533910572,
      0.2986605324935927
    ],
    [
      -0.3263013985577308,
      -0.894134026700372,
      0.30667856070460353
    ],
    [
      -0.1990974668255084,
      -0.949857165486459,
      0.241104881488731
    ],
    [
      -0.19920201056245743,
      -0.9498377609606777,
      0.2410949747321191
    ],
    [
      -0.23589176835604864,
      -0.9381960943500355,
      0.25326500383628897
    ],
    [
      -0.25698883856416327,
      -0.9257386388125776,
      0.2774251420885977
    ],
    [
      -0.263548978567728,
      -0.9156174977503374,
      0.3036223537707954
    ],
    [
      -0.18489781196826566,
      -0.9243329487410595,
      0.3337984406809082
    ],
    [
      -0.10947581103803708,
      -0.9663525590381692,
      0.2327612047527371
    ],
    [
      -0.1674557679708927,
      -0.9585515932670153,
      0.23051552836749395
    ],
    [
      -0.1762923091126679,
      -0.923459440700564,
      0.34079859613667024
    ],
    [
      -0.0968095343732098,
      -0.9517339899009367,
      0.2912564617681227
    ],
    [
      -0.07983668100508605,
      -0.9673314007412539,
      0.24061601257201434
    ],
    [
      0.12736681070074424,
      -0.9459626631365445,
      0.29821525025313067
    ],
    [
      0.13921256717194128,
      -0.947553621368757,
      0.2876838469089845
    ],
    [
      0.11913585546652312,
      -0.9582039501245918,
      0.2600996691806597
    ],
    [
      0.09317788723401672,
      -0.9645871438723245,
      0.24675802561788426
    ],
    [
      0.008864704743708382,
      -0.9649836710731179,
      0.2621601258239997
    ],
    [
      0.02283253400341556,
      -0.9541093900151524,
      0.298586582544991
    ],
    [
      0.04200211993428368,
      -0.9461651721268152,
      0.3209474863202082
    ],
    [
      0.0490886443114171,
      -0.9377448355909885,
      0.3438385207071732
    ],
    [
      0.07683944953230216,
      -0.9246957005578318,
      0.37287204288526865
    ],
    [
      0.09522489167195305,
      -0.9199418196523008,
      0.3803146966143675
    ],
    [
      0.11663662724414241,
      -0.90909718400824,
      0.39992275155759655
    ],
    [
      0.36787923554386553,
      -0.8977912039171125,
      0.24214834755728298
    ],
    [
      0.33672217186338016,
      -0.9088128134219843,
      0.24632793007620113
    ],
    [
      0.29636208290923866,
      -0.9155010530616694,
      0.27207965314714716
    ],
    [
      0.4133765435783338,
      -0.881171554086381,
      0.22947009715477518
    ],
    [
      0.37834087250028453,
      -0.895420547148375,
      0.2346917722039442
    ],
    [
      0.5236669653748454,
      -0.8072579358147793,
      0.2722269906514822
    ],
    [
      0.5073345578259835,
      -0.8369977041871397,
      0.20505240701091826
    ],
    [
      0.4744269940519206,
      -0.8523128857535814,
      0.22018576723589856
    ],
    [
      0.522302558463258,
      -0.8077459233826305,
      0.27339817241795245
    ],
    [
      0.5340976800279401,
      -0.8282453368407191,
      0.1695562744058028
    ],
    [
      0.5252437775154215,
      -0.833418784810322,
      0.17184907129983668
    ],
    [
      0.5891655491042892,
      -0.7882966763206053,
      0.17740435690965511
    ],
    [
      0.5412772634453749,
      -0.8247231028198009,
      0.16386191672370462
    ],
    [
      0.6293698428371713,
      -0.7648341485155706,
      0.13755844645668264
    ],
    [
      0.6014274452771482,
      -0.7840908395039199,
      0.15325333103538397
    ],
    [
      0.6567957634893029,
      -0.74491928122299,
      0.11710930588440704
    ],
    [
      0.6406762404750648,
      -0.7593426600264752,
      0.11372193963635047
    ],
    [
      0.716039654338906,
      -0.6907227801768806,
      0.10094183651460162
    ],
    [
      0.6884742497606845,
      -0.7187085529615066,
      0.09726881985734212
    ],
    [
      0.7545955541330422,
      -0.6554153494926097,
      0.0318789794712302
    ],
    [
      0.7369970315174713,
      -0.6743217714063007,
      0.04610340705310312
    ],
    [
      0.7192403104874009,
      -0.6897331794418293,
      0.08343570546865675
    ],
    [
      0.7854575711531521,
      -0.618914504033426,
      -0.0011138290934331857
    ],
    [
      0.7589251958225632,
      -0.6507839265933544,
      0.02264570673261417
    ],
    [
      0.8041630072649409,
      -0.5928809780918212,
      -0.04259112071185733
    ],
    [
      0.7854970015241826,
      -0.6188640792631716,
      -0.0013084319872823673
    ],
    [
      0.8099764336358346,
      -0.5812185228932646,
      -0.07825091437386543
    ],
    [
      0.8149621197212429,
      -0.5707887237143638,
      -0.10018471090933014
    ],
    [
      0.8097842080883102,
      -0.5791970336011641,
      -0.09370342895753629
    ],
    [
      0.8242759093014097,
      -0.5555787993903805,
      -0.10909364332204481
    ],
    [
      0.816254081255717,
      -0.5684354158863841,
      -0.10300705218313475
    ],
    [
      0.8607187797961748,
      -0.4789430438058167,
      -0.17255938947563357
    ],
    [
      0.2803026865014443,
      -0.8287716562310489,
      0.48432215081298646
    ],
    [
      0.18032079838706494,
      -0.83444901748582,
      0.5207487368069184
    ],
    [
      0.2707134269626008,
      -0.8034991214356443,
      0.5301918542511875
    ],
    [
      0.2890339989609572,
      -0.8323287817164261,
      0.4729568125855545
    ],
    [
      0.32261713589027624,
      -0.8522077397062418,
      0.4118982301670322
    ],
    [
      0.39356172867624395,
      -0.8273289161812903,
      0.4007942491748826
    ],
    [
      0.4202519281909645,
      -0.8105725249280369,
      0.4078731404291822
    ],
    [
      0.4598644957102934,
      -0.8161948274301396,
      0.34978657673130065
    ],
    [
      0.48824115159759335,
      -0.7947867320855048,
      0.3604644620312799
    ],
    [
      0.5304814920495948,
      -0.7715319513528603,
      0.351180629640194
    ],
    [
      0.5528275201061086,
      -0.7516657736908361,
      0.3596947284505109
    ],
    [
      0.5750613104539882,
      -0.7388862323815476,
      0.3512144997233792
    ],
    [
      0.6199866644188876,
      -0.718623173694988,
      0.3149559813232397
    ],
    [
      0.686417794389948,
      -0.6582521237982234,
      0.3090869668232024
    ],
    [
      0.7494230782352383,
      -0.5971071890196775,
      0.2860560340727647
    ],
    [
      0.6680691489399346,
      -0.6795606236934532,
      0.30311874069419775
    ],
    [
      0.7531798484575785,
      -0.5703890886465985,
      0.3276833890057931
    ],
    [
      0.742295277975265,
      -0.5606074599509535,
      0.3670381399023326
    ],
    [
      0.7342698607824093,
      -0.5620615398745343,
      0.3807027671825468
    ],
    [
      0.7232957028151015,
      -0.5475757884010549,
      0.4207185309041801
    ],
    [
      0.711510638844336,
      -0.5515900768707582,
      0.4353171233813758
    ],
    [
      0.7126212428283603,
      -0.47577733720515103,
      0.5155646319053888
    ],
    [
      0.6107072415913227,
      -0.47976111321589454,
      0.6299729671293549
    ],
    [
      0.6105909651630256,
      -0.4795303507274807,
      0.6302613077069417
    ],
    [
      0.5839759766851599,
      -0.46358870778607925,
      0.6663764466634808
    ],
    [
      0.5836523658480969,
      -0.4603635580569919,
      0.6688911049289159
    ],
    [
      0.5662765437713237,
      -0.4346723417219641,
      0.700279109581564
    ],
    [
      0.5626335611210348,
      -0.3853166886985837,
      0.7314195275699313
    ],
    [
      0.8222156229474599,
      -0.33258986301330234,
      0.461893334441961
    ],
    [
      0.8060939880899042,
      -0.315546398668618,
      0.5006425397951905
    ],
    [
      0.78786400254437,
      -0.29825455930018546,
      0.5388084366000752
    ],
    [
      0.7883844820337361,
      -0.29817429005483803,
      0.5380910715099173
    ],
    [
      0.8060823548825008,
      -0.31545266642295955,
      0.5007203335133564
    ],
    [
      0.7679700838407826,
      -0.27958661200032575,
      0.5762406413259662
    ],
    [
      0.7682698567078277,
      -0.27955371806670126,
      0.5758568797793574
    ],
    [
      0.7446575688158757,
      -0.2599995700228887,
      0.6147237825179227
    ],
    [
      0.7470342671114619,
      -0.2598071020742735,
      0.6119150868159805
    ],
    [
      0.7178761070237889,
      -0.23993718838303746,
      0.6535166720101426
    ],
    [
      0.7230497854610746,
      -0.23966694818900194,
      0.6478879237109335
    ],
    [
      0.6877007116797353,
      -0.2200678941054774,
      0.6918365797926312
    ],
    [
      0.6965489095797933,
      -0.21978526233489204,
      0.6830183416450715
    ],
    [
      0.6508093026878705,
      -0.1998291638295064,
      0.7324722225573664
    ],
    [
      0.6661847297486616,
      -0.1995396866334858,
      0.7185971189115031
    ],
    [
      0.5138414483317849,
      -0.23202629733421656,
      0.8259120796559809
    ],
    [
      0.5274469528213048,
      -0.2183837571276062,
      0.8210409530482331
    ],
    [
      0.588212660474595,
      -0.1825040684553315,
      0.787843976339637
    ],
    [
      0.6323428567517354,
      -0.18207768926129292,
      0.7529875341520086
    ],
    [
      0.4048289135496384,
      -0.5296512920626704,
      -0.7453744425257437
    ],
    [
      0.43362649142761595,
      -0.5375102348089541,
      -0.7232225199810904
    ],
    [
      0.4388454971889933,
      -0.5483742962007863,
      -0.7118288142968348
    ],
    [
      0.4709997893488456,
      -0.5574743520252314,
      -0.6836530883916135
    ],
    [
      0.47198888634255287,
      -0.5592909578201336,
      -0.6814837603859348
    ],
    [
      0.5066297728598959,
      -0.5691122042403278,
      -0.6476400020355797
    ],
    [
      0.5145813171478454,
      -0.5830527448005492,
      -0.6286935380795114
    ],
    [
      0.5635978916614962,
      -0.5663715884688029,
      -0.6013157575600705
    ],
    [
      0.5983779315695767,
      -0.5807455592901449,
      -0.5519768531155013
    ],
    [
      0.6079222418534775,
      -0.5766749707577281,
      -0.5457806573720027
    ],
    [
      0.5696317548928254,
      -0.575394414371512,
      -0.586890902747508
    ],
    [
      0.627266231188011,
      -0.5795014713577664,
      -0.5203029116825819
    ],
    [
      0.6391893959178415,
      -0.5738488343580505,
      -0.5119906556296625
    ],
    [
      0.6557502633018832,
      -0.5756365484562375,
      -0.4885019511331563
    ],
    [
      0.6684058152559451,
      -0.569009575402337,
      -0.47902167929279305
    ],
    [
      0.6836710782061438,
      -0.5700628150751818,
      -0.4556558390858258
    ],
    [
      0.6956972943741588,
      -0.563145609331559,
      -0.44595100324033593
    ],
    [
      0.7094850312019565,
      -0.5634622280144257,
      -0.4232508808040191
    ],
    [
      0.7229408298526372,
      -0.5549334588562534,
      -0.41158888805920796
    ],
    [
      0.7350434338002018,
      -0.554439644806148,
      -0.39026635865065407
    ],
    [
      0.7454895142800989,
      -0.5472636666369117,
      -0.38045743950873856
    ],
    [
      0.7580561674682157,
      -0.546134869932513,
      -0.35649340920583317
    ],
    [
      0.7671438299069873,
      -0.53928066531704,
      -0.34737113905857264
    ],
    [
      0.787716846193337,
      -0.5309088913100767,
      -0.31247066958536723
    ],
    [
      0.7797450719479634,
      -0.5375381333100234,
      -0.32101460716054786
    ],
    [
      0.8066532946599412,
      -0.5219517259074725,
      -0.27726676331012506
    ],
    [
      0.7994598202185562,
      -0.5285256101080508,
      -0.2855252621328395
    ],
    [
      0.8232137859789641,
      -0.5135339987498091,
      -0.2420782821779176
    ],
    [
      0.8179847831130014,
      -0.5187463388488613,
      -0.2486023542255351
    ],
    [
      0.8345258912027517,
      -0.5092119145185422,
      -0.2104038094346532
    ],
    [
      0.8897105146528272,
      -0.26630025472813756,
      -0.37080908085958486
    ],
    [
      0.8572988436117968,
      -0.2890178770433555,
      -0.4260368053246433
    ],
    [
      0.9025680348519682,
      -0.060949112944481985,
      0.42621138897821215
    ],
    [
      0.8880185354618563,
      -0.024883584816990705,
      0.4591338452813464
    ],
    [
      0.8942333259257097,
      0.05139584843702487,
      0.44464055771744637
    ],
    [
      0.9133999368089469,
      0.048884689588824096,
      0.4041173623605101
    ],
    [
      0.8818103707301488,
      0.2740207959015025,
      0.3838268795775833
    ],
    [
      0.8863222608685618,
      -0.12641029747526103,
      0.4454809609636054
    ],
    [
      0.8818173390303422,
      -0.10613517114370535,
      0.4594926615646249
    ],
    [
      0.8675003406458094,
      -0.04879340417453628,
      0.4950377386507669
    ],
    [
      0.8744797126267683,
      -0.10194869799236646,
      0.47422747198139625
    ],
    [
      0.8664859631644574,
      -0.0713689646559765,
      0.4940734221984589
    ],
    [
      0.8392438414444088,
      -0.02099629774166195,
      0.5433497309089016
    ],
    [
      0.8257186977768652,
      0.05491579014575833,
      0.561402607879893
    ],
    [
      0.8919834682212926,
      0.05512674989414411,
      0.4486942543269557
    ],
    [
      0.8842190370915416,
      0.12355672190118726,
      0.4504336032290884
    ],
    [
      0.8217441556660511,
      0.0597103124966636,
      0.5667197025075443
    ],
    [
      0.842311984859628,
      0.13966432089698982,
      0.5205808271826926
    ],
    [
      0.8666102063866016,
      0.28544025004758294,
      0.4092806052567665
    ],
    [
      0.8794566545956021,
      0.27468044339258796,
      0.38872438398583015
    ],
    [
      0.8387786055140132,
      0.17469563065429428,
      0.5156858419253587
    ],
    [
      0.8494363076144207,
      0.2855668276216907,
      0.44374491125923105
    ],
    [
      0.8457001480285483,
      0.28770456093726987,
      0.4494633969973352
    ],
    [
      0.7790401504061216,
      0.3804771640585496,
      0.4983307854078163
    ],
    [
      0.7676385931452727,
      0.41709882076345434,
      0.4865794529485212
    ],
    [
      0.8034058572714906,
      0.4522632010706103,
      0.38729449448607695
    ],
    [
      0.7410666554973268,
      0.45828688183828886,
      0.4907069859345235
    ],
    [
      0.7233671046692906,
      0.4996973205392387,
      0.47648989467592384
    ],
    [
      0.7247659153908605,
      0.51028886614286,
      0.46294669345215367
    ],
    [
      0.7361728933981941,
      0.5122558010958106,
      0.44231602420602
    ],
    [
      0.7956502653871075,
      0.4708505538410585,
      0.381104199841715
    ],
    [
      0.7999698887916964,
      0.46206022129291524,
      0.3828165734726532
    ],
    [
      0.7225407303342616,
      0.5744116395261663,
      0.38468969492942434
    ],
    [
      0.6653670591590345,
      0.5773065936623301,
      0.47329036911821387
    ],
    [
      0.7102833203310311,
      0.49728036840714956,
      0.49820662385839015
    ],
    [
      0.6745652081215379,
      0.5074527503864811,
      0.5361468885642647
    ],
    [
      0.6478657360911578,
      0.5297299813836069,
      0.5474085629786821
    ],
    [
      0.6412549433407894,
      0.5317849130750181,
      0.5531698689071888
    ],
    [
      0.6205893399282302,
      0.5479208776354495,
      0.5609381276207229
    ],
    [
      0.5881429827851267,
      0.5579601166600966,
      0.5854642089976684
    ],
    [
      0.5846713739911464,
      0.5576585844214891,
      0.5892166729279866
    ],
    [
      0.5814235437894083,
      0.5598694651913564,
      0.5903328253398336
    ],
    [
      0.5264185114787694,
      0.5764247017403397,
      0.624994491172552
    ],
    [
      0.5234325856006159,
      0.5723742097146548,
      0.6311941796190599
    ],
    [
      0.48804248655863863,
      0.5620053448686525,
      0.6678057529347348
    ],
    [
      0.4816666892722744,
      0.5637817205405973,
      0.6709302288835779
    ],
    [
      0.44176198417311524,
      0.5539644754296059,
      0.7056696885239113
    ],
    [
      0.4483654666132341,
      0.5521471245758969,
      0.702923865842714
    ],
    [
      0.4094906758797506,
      0.544045335894643,
      0.7323469525155615
    ],
    [
      0.35372689094827875,
      0.6215334966319148,
      0.6989802566486195
    ],
    [
      0.32446954968657105,
      0.5394193972549177,
      0.7770110843426463
    ],
    [
      0.3105505354825378,
      0.5886051566427681,
      0.7463928821237857
    ],
    [
      0.317186917118443,
      0.6191621839855985,
      0.718352733363688
    ],
    [
      0.3840888496696077,
      0.4998515872975798,
      0.7762887003142371
    ],
    [
      0.2702474463591772,
      0.6561005863685331,
      0.704626382065851
    ],
    [
      0.2698618556942863,
      0.6601653053896308,
      0.7009681507750917
    ],
    [
      0.29740355634547405,
      0.7135956836886161,
      0.6342967167612023
    ],
    [
      0.3124801472789584,
      0.7211746290059485,
      0.6182744633531722
    ],
    [
      0.2807789712843401,
      0.750174294858012,
      0.5986665988835457
    ],
    [
      0.2746724215311149,
      0.7739735105031132,
      0.5705436581802664
    ],
    [
      0.2503645185606827,
      0.790433117592769,
      0.559046594174809
    ],
    [
      -0.09503482180927164,
      0.8513599169888405,
      0.5159018069249559
    ],
    [
      -0.14061026091759027,
      0.8178573653882771,
      0.5579767776573084
    ],
    [
      -0.14705280030813175,
      0.8018538718799652,
      0.5791423331726365
    ],
    [
      -0.1358674466647547,
      0.7722712564319163,
      0.6205941857815536
    ],
    [
      0.16408985123437905,
      0.6334228164071506,
      0.7562076807178784
    ],
    [
      0.15468071753120938,
      0.5291995943547408,
      0.8342791289243714
    ],
    [
      0.15300071754106664,
      0.5287070935731399,
      0.8349009460033938
    ],
    [
      0.09069614783899128,
      0.6405595470778725,
      0.7625337208376811
    ],
    [
      0.13492659480674848,
      0.6661729434354947,
      0.7334905748871928
    ],
    [
      0.14783271002246953,
      0.6594774583566758,
      0.7370447556063549
    ],
    [
      0.13748828144480668,
      0.5194286887632036,
      0.8433805841700961
    ],
    [
      0.0447151505952252,
      0.544456484490756,
      0.8375963776206374
    ],
    [
      0.037627668330793486,
      0.5608023132141652,
      0.827094265528198
    ],
    [
      0.048286974605797034,
      0.6293651573571747,
      0.7756080626116504
    ],
    [
      -0.04920513289919243,
      0.666029657176866,
      0.7443005781653265
    ],
    [
      -0.02034561743683898,
      0.6525551528016683,
      0.7574680378755958
    ],
    [
      -0.043306271515399744,
      0.5816278991807186,
      0.8123013934138352
    ],
    [
      -0.07843829508333873,
      0.5699230214462128,
      0.8179457093780973
    ],
    [
      -0.07749207661016418,
      0.6403341181194429,
      0.764177463181714
    ],
    [
      -0.10956550478909234,
      0.5452354418883636,
      0.8310918800404155
    ],
    [
      -0.06956362999322938,
      0.6998636791902226,
      0.7108809548247093
    ],
    [
      -0.6012535380739215,
      0.7545176459109941,
      0.263053806211815
    ],
    [
      -0.6106201321551031,
      0.7505238999399341,
      0.2526992873473058
    ],
    [
      -0.6108939035552314,
      0.7633145875158658,
      0.21014156914931265
    ],
    [
      -0.5989012921425046,
      0.7730510054982354,
      0.20906789607255702
    ],
    [
      -0.5868705715958248,
      0.752513422849198,
      0.2988418990479313
    ],
    [
      -0.580299945665721,
      0.7404121722316283,
      0.33917810700515866
    ],
    [
      -0.5911795592696337,
      0.7408466910759036,
      0.31883053339297035
    ],
    [
      -0.5913799685863729,
      0.7155310406193834,
      0.3718669959339264
    ],
    [
      -0.6040404317509509,
      0.6937150300628546,
      0.39229404007073265
    ],
    [
      -0.600503698011061,
      0.7058842088217429,
      0.3756631368808264
    ],
    [
      -0.6013543617550734,
      0.6902949104319267,
      0.402325574914057
    ],
    [
      -0.6032590768205621,
      0.6674274699720576,
      0.43659942574435573
    ],
    [
      -0.6060893138744201,
      0.6708668506271209,
      0.427309504149958
    ],
    [
      -0.6084771986461397,
      0.6415525771387504,
      0.4670822084969349
    ],
    [
      -0.6128637937292085,
      0.6126303265553078,
      0.499081209143942
    ],
    [
      -0.6135019297173169,
      0.6135663032280145,
      0.49714361484005476
    ],
    [
      -0.6088144759714613,
      0.6410207992868563,
      0.4673727299802961
    ],
    [
      -0.615372464506789,
      0.5830176666002663,
      0.5304782091272189
    ],
    [
      -0.6167500129921357,
      0.5849903946691482,
      0.5266931361039694
    ],
    [
      -0.6152325998297669,
      0.5509603714171223,
      0.5638541630906103
    ],
    [
      -0.6184609198450266,
      0.5552025722478807,
      0.5561080779792542
    ],
    [
      -0.612558189014527,
      0.5176052051772614,
      0.5973753565762887
    ],
    [
      -0.6175340006336886,
      0.5238641672851616,
      0.5867010246249582
    ],
    [
      -0.6057785449678572,
      0.48370914434371953,
      0.6317102327292892
    ],
    [
      -0.6141291508706312,
      0.49349001178105834,
      0.6158839130252133
    ],
    [
      -0.5960971355899921,
      0.44751896756837484,
      0.6666295662569599
    ],
    [
      -0.6069402665433625,
      0.46023005288000424,
      0.6479288628193226
    ],
    [
      -0.580389614794932,
      0.4114322490486379,
      0.7027598448125576
    ],
    [
      -0.5967434985912161,
      0.4300115297784191,
      0.6774860007016669
    ],
    [
      -0.5807904854730666,
      0.3984344314229448,
      0.7098819731762699
    ],
    [
      -0.5602120676297475,
      0.37517789733800905,
      0.7385147152433955
    ],
    [
      -0.5347012481877302,
      0.33841646276968357,
      0.7743183278942445
    ],
    [
      -0.5604945444443479,
      0.3668384020355156,
      0.7424792606128149
    ],
    [
      -0.50604461031567,
      0.29888804294462146,
      0.809064144648121
    ],
    [
      -0.5350560000502289,
      0.3317150995722435,
      0.7769685769231764
    ],
    [
      -0.47111961302652283,
      0.25649083174430687,
      0.8439542425113182
    ],
    [
      -0.47554829451685954,
      0.25668305353130905,
      0.8414081230960094
    ],
    [
      -0.506332976119966,
      0.29495018090352954,
      0.8103279015796465
    ],
    [
      -0.4248243669026517,
      0.2151659757514993,
      0.8793337592545087
    ],
    [
      -0.443758596318982,
      0.21564925611927235,
      0.8698124548017298
    ],
    [
      -0.4014442181447721,
      0.17234743269266492,
      0.8995214851032631
    ],
    [
      -0.44530208169797214,
      0.8058225271174894,
      -0.3903282091079706
    ],
    [
      -0.4029133175332593,
      0.8187150122060521,
      -0.40910461662365405
    ],
    [
      -0.44445897502749604,
      0.8220308099066954,
      -0.35597972847010545
    ],
    [
      -0.456055842682154,
      0.8261465343714728,
      -0.3309002449401862
    ],
    [
      -0.4558345962261755,
      0.8293371640897953,
      -0.3231326185064196
    ],
    [
      -0.4688204602270681,
      0.8331616720489183,
      -0.29334110571335004
    ],
    [
      -0.4881461217858976,
      0.8315470675899915,
      -0.26503365478345153
    ],
    [
      -0.4809299779645507,
      0.8300928280746066,
      -0.28222730745645147
    ],
    [
      -0.5075108877376616,
      0.8256327215510921,
      -0.24650214589708422
    ],
    [
      -0.5366850885958035,
      0.8138422476551807,
      -0.22277771793982903
    ],
    [
      -0.5157568561714421,
      0.8213094575129004,
      -0.24381476639452238
    ],
    [
      -0.5652148793129312,
      0.796970867383654,
      -0.21300135385723445
    ],
    [
      -0.695408581162197,
      0.6991544682926562,
      -0.16610218154013953
    ],
    [
      -0.6598981000486605,
      0.7246469810208209,
      -0.19854785430615504
    ],
    [
      -0.7413011379850136,
      0.6515134794906903,
      -0.16125386464844044
    ],
    [
      -0.6211714904793563,
      0.7590546780884481,
      0.1948896484877977
    ],
    [
      -0.6331450822434412,
      0.7515124702822651,
      0.18535455710932427
    ],
    [
      -0.639490413490644,
      0.7485853495310625,
      0.17513419289511184
    ],
    [
      -0.6851714103746509,
      0.7153104510335685,
      0.13737211160699456
    ],
    [
      -0.8136610791284528,
      0.5707487085017581,
      0.11046067198372952
    ],
    [
      -0.8152248385031297,
      0.569607444569578,
      0.10467006151933526
    ],
    [
      -0.7830223166638345,
      0.6114867629359859,
      0.1138419534287372
    ],
    [
      -0.837959036029746,
      0.5420579455150141,
      0.06322845593671336
    ],
    [
      -0.8490612549941807,
      0.5245591140397645,
      0.06271141160525731
    ],
    [
      -0.8627874165139824,
      0.5044851466972747,
      0.03305466180370227
    ],
    [
      -0.8635769064843994,
      0.5037548141005841,
      0.021587354106527103
    ],
    [
      -0.8935787075848859,
      0.44846439085635775,
      0.019919424809996037
    ],
    [
      -0.8939463293959943,
      0.4480151721218122,
      0.01193171019139891
    ],
    [
      -0.9102325648550595,
      0.41218074848842273,
      -0.03979583461749771
    ],
    [
      -0.9186143085591428,
      0.39378762565660463,
      -0.03284901810011617
    ],
    [
      -0.9296351146054012,
      0.3612332115604766,
      -0.07272634019601454
    ],
    [
      -0.9314038002459503,
      0.3564115906021971,
      -0.07387651163809528
    ],
    [
      -0.9370545377415911,
      0.3348579783149259,
      -0.09898953306655067
    ],
    [
      -0.9352979346779278,
      0.33075417753548036,
      -0.12577538483356235
    ],
    [
      -0.9404649820902536,
      0.3136663206686356,
      -0.1309162203097059
    ],
    [
      -0.94469301956978,
      0.28454896054352363,
      -0.16305516805588033
    ],
    [
      -0.9437267359906357,
      0.28294104046726437,
      -0.1712431470037931
    ],
    [
      -0.9452131187370811,
      0.2631658104407824,
      -0.1931732807154413
    ],
    [
      -0.9458243302222589,
      0.26019478532487017,
      -0.194203527386503
    ],
    [
      -0.9464481637747142,
      0.2334905752690885,
      -0.22297539000522434
    ],
    [
      -0.9460295934040325,
      0.23278229305393455,
      -0.22547818618295015
    ],
    [
      -0.9452349549071034,
      0.20722451064621197,
      -0.25216836084093525
    ],
    [
      -0.9421841524134579,
      0.20248721503836023,
      -0.266998034987044
    ],
    [
      -0.9398579498246299,
      0.1811237871474929,
      -0.2895879967830041
    ],
    [
      -0.9404117785738731,
      0.1677689300914792,
      -0.29576895174356105
    ],
    [
      -0.9306956238584415,
      0.15246535846884826,
      -0.3325055942352127
    ],
    [
      -0.9254493074680151,
      0.04013475757126557,
      -0.37673967211015463
    ],
    [
      -0.9240548146505123,
      0.0068386403919562634,
      -0.38219881281709495
    ],
    [
      -0.9223707141291394,
      -0.05688274736510608,
      -0.38209503892238494
    ],
    [
      -0.5803740623611593,
      0.3356257670514444,
      -0.74197122062081
    ],
    [
      -0.6056373264383094,
      0.3191976210168634,
      -0.7289144720485603
    ],
    [
      -0.6220184333594135,
      0.18147352560443097,
      -0.7616826294893423
    ],
    [
      -0.650537736464853,
      0.3037741230891704,
      -0.6960760989838619
    ],
    [
      -0.6517546857311411,
      0.21588077591792115,
      -0.7270566141756621
    ],
    [
      -0.6304423857608837,
      0.3176294568653349,
      -0.70827531819735
    ],
    [
      -0.6693969260431751,
      0.30385850139930964,
      -0.6779216522071806
    ],
    [
      -0.6878559504511222,
      0.29035859657308905,
      -0.6652413673435299
    ],
    [
      -0.6870341545046885,
      0.22752428805092975,
      -0.6900846099507982
    ],
    [
      -0.722666684316472,
      0.2063796541074009,
      -0.6596668111626856
    ],
    [
      -0.706068579348314,
      0.2904782834963324,
      -0.6458246883435765
    ],
    [
      -0.7199378614666927,
      0.2797211497920888,
      -0.635173640814665
    ],
    [
      -0.7384276963112317,
      0.2797060671099671,
      -0.6135870381146933
    ],
    [
      -0.7518754476106421,
      0.26853269724650647,
      -0.602140765759812
    ],
    [
      -0.7543183388801491,
      0.15329859014218386,
      -0.6383599187680186
    ],
    [
      -0.7802575859428225,
      0.2594015518988615,
      -0.5691299802779163
    ],
    [
      -0.7754106636131648,
      0.08554125132934913,
      -0.6256364735819041
    ],
    [
      -0.7700961468696277,
      0.26843517840804065,
      -0.578700682192095
    ],
    [
      -0.8046542739886794,
      0.25904336512957393,
      -0.5342546530766928
    ],
    [
      -0.7049534565129097,
      0.6713998917537758,
      -0.22861060671700933
    ],
    [
      -0.6599482092807584,
      0.7210619112882983,
      -0.21104047279227417
    ],
    [
      -0.7202969919251682,
      0.6494199245436459,
      -0.24377449626505066
    ],
    [
      -0.711576548489458,
      0.6601691602863223,
      -0.24049011507062398
    ],
    [
      -0.7338570639918215,
      0.6232052345365707,
      -0.27031286553828965
    ],
    [
      -0.7322830608883465,
      0.6252943619674709,
      -0.26975633380457964
    ],
    [
      -0.7446200913325691,
      0.5985107795719826,
      -0.29550933372740384
    ],
    [
      -0.7474079517720765,
      0.5808978532908775,
      -0.322395777996424
    ],
    [
      -0.7427330211977414,
      0.5936874776389087,
      -0.3096495407993134
    ],
    [
      -0.7323816254086235,
      0.546912776705923,
      -0.40559039613832054
    ],
    [
      -0.7314913969739966,
      0.5491466554820718,
      -0.4041760593180721
    ],
    [
      0.028994456239557907,
      -0.07053927592539748,
      -0.9970875247736746
    ],
    [
      0.04806065629888984,
      -0.07777723152371198,
      -0.9958116667184749
    ],
    [
      0.0825692114671413,
      -0.08090293709643309,
      -0.9932960485609842
    ],
    [
      0.1486377052550142,
      -0.020114067514488906,
      -0.98868713800906
    ],
    [
      0.07270542206502775,
      -0.00030981221490162495,
      -0.9973534105916205
    ],
    [
      0.2453551369650808,
      -0.008866786787479163,
      -0.9693927154961047
    ],
    [
      0.1702129899188525,
      0.014319085409980862,
      -0.9853032537528262
    ],
    [
      0.3249508854150972,
      0.022013904743790665,
      -0.9454746480291661
    ],
    [
      0.269918719905358,
      0.02993944349049214,
      -0.9624175363989024
    ],
    [
      0.36321598687659734,
      0.05540908350096601,
      -0.930055901730021
    ],
    [
      0.3718764292481441,
      0.05111909044023098,
      -0.926873648326574
    ],
    [
      0.41721304303012696,
      0.06079078341063749,
      -0.9067732667970877
    ],
    [
      0.4390090078682061,
      0.13023306129563172,
      -0.8889940611478468
    ],
    [
      0.47576337728968343,
      0.1542638164468202,
      -0.8659398846139241
    ],
    [
      0.4023005486912815,
      0.3100195126986528,
      -0.8614186962614543
    ],
    [
      0.3620561617297305,
      0.3650818687408417,
      -0.8576890840335034
    ],
    [
      0.09860719218911496,
      -0.29523676441370206,
      -0.9503219846910347
    ],
    [
      0.09013835105633011,
      -0.2790130204937721,
      -0.9560474946694791
    ],
    [
      -0.1369934996577356,
      -0.3276496645088868,
      -0.9348146759645678
    ],
    [
      -0.10840256137635891,
      -0.3643542251441904,
      -0.9249296639780894
    ],
    [
      0.11100936022933959,
      -0.17964799852418617,
      -0.9774474505402971
    ],
    [
      0.1387602785271286,
      -0.13596004958378916,
      -0.98094874994581
    ],
    [
      0.1685257288337052,
      -0.12032177365419938,
      -0.9783259934734312
    ],
    [
      0.19876977754452116,
      -0.1556894172467701,
      -0.9676008375834855
    ],
    [
      0.07324311574017245,
      0.02950693692376932,
      -0.9968775183893197
    ],
    [
      0.16094939488902313,
      0.04830477082030659,
      -0.9857798645746702
    ],
    [
      0.15928577665612123,
      0.050644878954792825,
      -0.985932623251057
    ],
    [
      0.4050088757088745,
      0.12405587191050596,
      -0.9058575777910993
    ],
    [
      0.36197373337545685,
      0.06394719952682981,
      -0.9299923505163413
    ],
    [
      0.2729621958403298,
      -0.6320533098168307,
      -0.7252587491313807
    ],
    [
      0.3010680617967082,
      -0.5918497988008321,
      -0.7477110657368848
    ],
    [
      0.2972303977263659,
      -0.5756471067999329,
      -0.7617640704970883
    ],
    [
      0.26182722781662127,
      -0.5374871694304051,
      -0.8015946890240442
    ],
    [
      0.28266673044008533,
      -0.6683260027524005,
      -0.6880696720153495
    ],
    [
      0.28701624291966843,
      -0.671940766930441,
      -0.6827278242734864
    ],
    [
      0.34788279363629865,
      -0.6572634307865733,
      -0.6685673821257418
    ],
    [
      0.3866869185059789,
      -0.6060085018108161,
      -0.6951452530150519
    ],
    [
      0.35071190069253,
      -0.5891723395365275,
      -0.7279265876705479
    ],
    [
      0.41758368727242956,
      -0.6189145527610685,
      -0.6652583261444598
    ],
    [
      0.39007050384176833,
      -0.6056400299957692,
      -0.6935741893260973
    ],
    [
      0.3832087169237215,
      -0.671525134311701,
      -0.634196399596629
    ],
    [
      0.3855061515008329,
      -0.6789693374506273,
      -0.624808487423845
    ],
    [
      0.45383373434234553,
      -0.6535011488931612,
      -0.6057814704728097
    ],
    [
      0.4543728808301573,
      -0.6530505941412897,
      -0.6058631913706362
    ],
    [
      0.4662542122664706,
      -0.6346768558245898,
      -0.6162729088840316
    ],
    [
      0.4305766995069101,
      -0.6169072068091607,
      -0.6588089283158325
    ],
    [
      0.5166120512286112,
      -0.6382235798072092,
      -0.5707737298645038
    ],
    [
      0.4891122306397123,
      -0.6219360109620988,
      -0.6115266340129406
    ],
    [
      0.4853899796197894,
      -0.6873547718888103,
      -0.5403147094484676
    ],
    [
      0.5379286142998154,
      -0.6328805930652214,
      -0.5568617071041014
    ],
    [
      0.48452376921215035,
      -0.6926582913113879,
      -0.5342856993650864
    ],
    [
      0.5170213827921214,
      -0.689843614727678,
      -0.5067589929692159
    ],
    [
      0.5478222255193462,
      -0.6386351555360625,
      -0.5404035041896562
    ],
    [
      0.5499062501013428,
      -0.686360704390615,
      -0.47593287296413794
    ],
    [
      0.5779618021388442,
      -0.6371161318899996,
      -0.5099443006387504
    ],
    [
      0.5701481988439047,
      -0.6323958607530622,
      -0.5244106279028342
    ],
    [
      0.5180629671019438,
      -0.6904836452298739,
      -0.504819866672852
    ],
    [
      0.548033926427389,
      -0.6873176724857499,
      -0.4767108479711266
    ],
    [
      0.5775270741666377,
      -0.6826378732371531,
      -0.4477365437696363
    ],
    [
      0.5803058365360705,
      -0.6810897434734192,
      -0.44649960517057974
    ],
    [
      0.608126900730917,
      -0.6335491858371569,
      -0.47832740014814645
    ],
    [
      0.6018048260695844,
      -0.6296247890518645,
      -0.49132837932563234
    ],
    [
      0.6066988394548023,
      -0.6767393740059027,
      -0.41706155166149633
    ],
    [
      0.6103052676874445,
      -0.6745440450378921,
      -0.41535263516303217
    ],
    [
      0.6363729771335223,
      -0.6283440150412135,
      -0.44745193343654777
    ],
    [
      0.6314149927169261,
      -0.625384052487512,
      -0.45848652528354733
    ],
    [
      0.6634871837713925,
      -0.6220328409735563,
      -0.4157642381464199
    ],
    [
      0.6592055293979526,
      -0.6194253477759962,
      -0.42633356488054197
    ],
    [
      0.6351291929220472,
      -0.6694749707158154,
      -0.3852455994339807
    ],
    [
      0.6379576438628951,
      -0.667623670715739,
      -0.38378207219325144
    ],
    [
      0.6614627047296003,
      -0.6616967612316271,
      -0.3530219347680488
    ],
    [
      0.663960864885431,
      -0.6599495544147446,
      -0.3515999936410272
    ],
    [
      0.689392379142402,
      -0.6142917831208695,
      -0.38390591656102574
    ],
    [
      0.6859758526737288,
      -0.6122070151074802,
      -0.39324254627613764
    ],
    [
      0.6874830251297853,
      -0.6519336328218038,
      -0.319921284934536
    ],
    [
      0.7141832702925234,
      -0.6060182462864317,
      -0.3502629606484167
    ],
    [
      0.7108056605130024,
      -0.6038512790556062,
      -0.3607200379318881
    ],
    [
      0.6856680310207729,
      -0.6532899351685522,
      -0.32104767845845783
    ],
    [
      0.7371388060159716,
      -0.5972228117369112,
      -0.31615074538328364
    ],
    [
      0.7339822936754762,
      -0.5952431262873492,
      -0.3270406904018976
    ],
    [
      0.7091879800934052,
      -0.6440043897800033,
      -0.2868985096425586
    ],
    [
      0.7092638531080739,
      -0.6440738865522614,
      -0.28655473357764166
    ],
    [
      0.7294094782765965,
      -0.6353879491459814,
      -0.2534639364492057
    ],
    [
      0.7581047522933058,
      -0.5884095538796323,
      -0.2811607750975898
    ],
    [
      0.7549445713131088,
      -0.5864515146893376,
      -0.29348477841865694
    ],
    [
      0.7742215273196787,
      -0.5775489248947722,
      -0.2588788635398354
    ],
    [
      0.7301003040069318,
      -0.6360602106815775,
      -0.24976179547059058
    ],
    [
      0.746536849213439,
      -0.6277412824629929,
      -0.2205076303854086
    ],
    [
      0.7775651048041659,
      -0.5795457993111526,
      -0.24396551865311591
    ],
    [
      0.7943900436467346,
      -0.5717745864646674,
      -0.2049836111207373
    ],
    [
      0.7906668313899216,
      -0.569788153290101,
      -0.22402549433061802
    ],
    [
      0.7479397015081369,
      -0.6292588594298306,
      -0.21123326143623253
    ],
    [
      0.7606679273792554,
      -0.6217522167838311,
      -0.1865703223477405
    ],
    [
      0.8041551332168232,
      -0.56378041167581,
      -0.18837772992497714
    ],
    [
      0.7668376390552784,
      -0.6303902491693573,
      -0.12069867058224824
    ],
    [
      0.024187280219380745,
      -0.7244014915404619,
      -0.688953884182057
    ],
    [
      0.03461747883662266,
      -0.6993797104479186,
      -0.7139115146660555
    ],
    [
      0.008190381509845805,
      -0.6600209336297503,
      -0.751202559115207
    ],
    [
      0.10014846734820732,
      -0.9742914247885487,
      0.20180808722968638
    ],
    [
      0.09468223898656984,
      -0.9764997668513572,
      0.19360650546852798
    ],
    [
      0.048763412164741754,
      -0.9813458030063661,
      0.18596382593354524
    ],
    [
      0.005917902781581373,
      -0.9656256138217825,
      0.2598694910103412
    ],
    [
      0.10249548377638482,
      -0.9829105466541593,
      0.15291021248257616
    ],
    [
      0.043288782776809816,
      -0.9879702883173217,
      0.14846141144381672
    ],
    [
      0.11711793410821601,
      -0.9830494938729502,
      0.14105701721771924
    ],
    [
      0.11887387895915791,
      -0.9842462477935116,
      0.1308752253315999
    ],
    [
      0.1121196926636567,
      -0.9870879961033132,
      0.11439607714319946
    ],
    [
      0.010797091816069604,
      -0.9943474315583188,
      0.10562484632741391
    ],
    [
      0.11859626863965195,
      -0.9894382056707062,
      0.08334843864095422
    ],
    [
      0.11255403103247495,
      -0.9908349184991893,
      0.0746843650374408
    ],
    [
      0.01967802505005208,
      -0.9975291556916124,
      0.0674415218934786
    ],
    [
      0.013329405446295437,
      -0.996534108519168,
      0.08211027650882281
    ],
    [
      0.010261881856271821,
      -0.9943968573805528,
      0.10521208966867017
    ],
    [
      0.11396904253028034,
      -0.9928248225368974,
      0.03619294267269806
    ],
    [
      0.026539973742357028,
      -0.9993107593852453,
      0.025954498081055245
    ],
    [
      0.024051474038133715,
      -0.9992116971672141,
      0.031583395017136695
    ],
    [
      0.03309567837748467,
      -0.9993565556491096,
      -0.013825727969335006
    ],
    [
      0.03064484462007478,
      -0.9994954119218872,
      -0.008355539797562482
    ],
    [
      0.11608540017148936,
      -0.9926638769991012,
      0.03380247281099961
    ],
    [
      0.11715874487273466,
      -0.9931091051478639,
      -0.0028519769028572304
    ],
    [
      0.12204748303711596,
      -0.9924915893437292,
      -0.008053382287170717
    ],
    [
      0.12299149817435975,
      -0.9915591041202513,
      -0.04103211441141308
    ],
    [
      0.03940219516691449,
      -0.9977016143506646,
      -0.055126724354944694
    ],
    [
      0.037421819800738575,
      -0.9980118414381106,
      -0.0507146108346771
    ],
    [
      0.042917566250208754,
      -0.9954159670425177,
      -0.0854700828592578
    ],
    [
      0.12990794585467222,
      -0.9903425829866446,
      -0.048430299680680494
    ],
    [
      0.13094475167221456,
      -0.9882539808778358,
      -0.0787879514177913
    ],
    [
      0.04772327370797234,
      -0.9942291136401529,
      -0.09607787849921513
    ],
    [
      0.05617561056811452,
      -0.9888833374893765,
      -0.13767369252392278
    ],
    [
      0.051181488455610255,
      -0.990631642806141,
      -0.12660728063849466
    ],
    [
      0.13890463006924073,
      -0.9864300896110001,
      -0.08752817863614906
    ],
    [
      0.14001652286112554,
      -0.9833377794519481,
      -0.1159404365542578
    ],
    [
      0.14871391350334853,
      -0.9808758621496049,
      -0.12556558040636764
    ],
    [
      0.14972153223799384,
      -0.976764505727113,
      -0.15334458952299534
    ],
    [
      0.06508568196145956,
      -0.9818783085543894,
      -0.17798550838195484
    ],
    [
      0.05925666785507695,
      -0.9845198532448405,
      -0.1649524352092779
    ],
    [
      0.06798860450599249,
      -0.9766959167387019,
      -0.2035746444999339
    ],
    [
      0.15980275564256916,
      -0.9733773114732105,
      -0.16431582029197853
    ],
    [
      0.1607515357101363,
      -0.9683396848757952,
      -0.19099004806920827
    ],
    [
      0.07372741351237845,
      -0.9734839740316051,
      -0.21654842599383622
    ],
    [
      0.07655692474295764,
      -0.9673909940569164,
      -0.24144088695055846
    ],
    [
      0.17151205691718532,
      -0.9640964843924219,
      -0.20273525375279217
    ],
    [
      0.17261271414868337,
      -0.9580380374949204,
      -0.2288404894836276
    ],
    [
      0.08197602921519512,
      -0.9637814163619696,
      -0.25378201691496105
    ],
    [
      0.1814208514673206,
      -0.9539846280933414,
      -0.23874631727941167
    ],
    [
      0.18253494224423736,
      -0.9459475743792584,
      -0.26807495479042914
    ],
    [
      0.08600227620699584,
      -0.9532504117693587,
      -0.28968476133335647
    ],
    [
      0.07908771257637924,
      -0.9415543435082654,
      -0.3274454946096454
    ],
    [
      0.18909478405413413,
      -0.9424960971799903,
      -0.27557987851802
    ],
    [
      0.1901189270244647,
      -0.9322749996333984,
      -0.30776308850414963
    ],
    [
      0.08337095537693773,
      -0.9285671291315949,
      -0.36167992824574124
    ],
    [
      0.07473843403383917,
      -0.9385777809418486,
      -0.3368767068237943
    ],
    [
      0.19560774118076585,
      -0.9290270544894265,
      -0.3140801547644464
    ],
    [
      0.19661866523260052,
      -0.9165829465426611,
      -0.3481620349626358
    ],
    [
      0.19921009384868862,
      -0.9148409563674087,
      -0.35125683347311804
    ],
    [
      0.20015640130286075,
      -0.8991028859947703,
      -0.3892960511145255
    ],
    [
      0.10473820430811095,
      -0.9125738533265306,
      -0.39527062980074834
    ],
    [
      0.08464039221545323,
      -0.9213406145126526,
      -0.3794304627399622
    ],
    [
      0.20073654909184946,
      -0.898663407026978,
      -0.3900114341007959
    ],
    [
      0.2015163290822063,
      -0.880856301095185,
      -0.4283495604458357
    ],
    [
      0.20076350140967222,
      -0.8804772306443156,
      -0.4294809225316595
    ],
    [
      0.1290552172470009,
      -0.8920189040725152,
      -0.4331824392546382
    ],
    [
      0.20131676305092383,
      -0.8601971534722508,
      -0.46854286684671165
    ],
    [
      0.12934148232843432,
      -0.8711564079121229,
      -0.4736636928272318
    ],
    [
      0.20236774560837553,
      -0.8592466964939098,
      -0.4698323212611991
    ],
    [
      0.20285795921024713,
      -0.836967951077587,
      -0.5082649872399627
    ],
    [
      0.20490499204759435,
      -0.8349255836958169,
      -0.5107966463517304
    ],
    [
      0.20564599303327138,
      -0.8115417662777032,
      -0.5469092128829293
    ],
    [
      0.20932531027642662,
      -0.8074862392846799,
      -0.5514969517989763
    ],
    [
      0.20963331326846452,
      -0.8029663827109977,
      -0.5579416297464291
    ],
    [
      0.18457362639782096,
      -0.7618103469832784,
      -0.6209489283891022
    ],
    [
      0.20296478638554316,
      -0.7275419408955793,
      -0.6553533548593188
    ],
    [
      0.20171201388625642,
      -0.7257262024009621,
      -0.657748996656497
    ],
    [
      0.21699875246621345,
      -0.6986842326542794,
      -0.6817271334400647
    ],
    [
      0.15571285644336877,
      -0.3154541575304611,
      -0.9360780847958112
    ],
    [
      -0.7074633152549858,
      -0.007392423160534341,
      -0.7067114047814993
    ],
    [
      -0.6525422160579547,
      -0.12490631835034853,
      -0.7473868261471666
    ],
    [
      -0.5880093727163963,
      -0.08689921285801011,
      -0.8041725588468736
    ],
    [
      -0.651011606363213,
      -0.13006737859476786,
      -0.7478411364761065
    ],
    [
      -0.6500843386864565,
      -0.13166863861732145,
      -0.7483673711481906
    ],
    [
      -0.10600864193622005,
      -0.5070882806269573,
      -0.8553500122672791
    ],
    [
      -0.09995019685220591,
      -0.5073764522970717,
      -0.855908344277378
    ],
    [
      -0.1341330780554238,
      -0.43884611307881916,
      -0.8884944605381566
    ],
    [
      -0.323973027184512,
      -0.40522038647052105,
      -0.854890587178023
    ],
    [
      -0.46256411765616684,
      -0.3954559885022507,
      -0.7935042521717698
    ],
    [
      -0.49238442675508537,
      -0.4251673969770823,
      -0.75946709002879
    ],
    [
      -0.5090093141042604,
      -0.5996872482085932,
      -0.6174825685726807
    ],
    [
      -0.4824429741748326,
      -0.6013893695228046,
      -0.6368513193001215
    ],
    [
      -0.14331083682714982,
      -0.4395763589941695,
      -0.8866987248560421
    ],
    [
      -0.14767030215978047,
      -0.5940385162758511,
      -0.7907665414272562
    ],
    [
      -0.4523926568172334,
      -0.3759350375703267,
      -0.8087111546064156
    ],
    [
      -0.11864920734865043,
      -0.6112177831853937,
      -0.7825184899498989
    ],
    [
      -0.06683644469158351,
      -0.6611778826939311,
      -0.7472460753308505
    ],
    [
      -0.07449520570015235,
      -0.7079909328582269,
      -0.7022814986301644
    ],
    [
      -0.0670622474933211,
      -0.7248595335469746,
      -0.6856247600453231
    ],
    [
      -0.09024119282165911,
      -0.842093448568189,
      -0.5317284560719493
    ],
    [
      -0.0640071441818569,
      -0.8435729942110946,
      -0.5331863547873403
    ],
    [
      -0.35256206638596516,
      -0.8413289518770822,
      -0.4097140271934419
    ],
    [
      -0.10053524550443996,
      -0.9428324974612272,
      -0.3177413195390032
    ],
    [
      -0.38946833432600525,
      0.01782422727543149,
      -0.9208673701893019
    ],
    [
      -0.4486813937615363,
      0.09043210894137439,
      -0.8891046285812602
    ],
    [
      -0.4726579755729937,
      0.19199830000981025,
      -0.8600762122745764
    ],
    [
      -0.45359097897521405,
      0.14071365581135142,
      -0.8800311874362814
    ],
    [
      -0.36986156874726056,
      0.058279044190298224,
      -0.9272572312859473
    ],
    [
      -0.3948710965432654,
      0.11077313498767738,
      -0.9120340616883346
    ],
    [
      -0.32051215266689004,
      0.08497859286368407,
      -0.9434249301071836
    ],
    [
      0.2590402987313095,
      0.06331072567941057,
      -0.9637893315694775
    ],
    [
      0.33063134614108636,
      0.11194522717136929,
      -0.9370972089716646
    ],
    [
      0.25861441272635544,
      0.08130969538756964,
      -0.9625525019271327
    ],
    [
      0.3547789426749096,
      0.15142520403130535,
      -0.9226062591477204
    ],
    [
      0.3324207936571621,
      0.13349750260232018,
      -0.9336352782234002
    ],
    [
      0.3624248045620091,
      0.19139649902336064,
      -0.9121489139388317
    ],
    [
      0.36321506989458874,
      0.21887837315954398,
      -0.905630758512817
    ],
    [
      0.3602626618558989,
      0.19718827762429703,
      -0.9117716806525993
    ],
    [
      0.35336079289360267,
      0.24500858542311035,
      -0.9028327326335542
    ],
    [
      0.35523558394513327,
      0.2547298323170844,
      -0.8994000180269457
    ],
    [
      0.34356394078448227,
      0.28932141636057035,
      -0.8934522576096331
    ],
    [
      0.30608274747580955,
      0.32346803284992187,
      -0.8953668429319134
    ],
    [
      0.30059407095052476,
      0.3239290152136783,
      -0.8970580792858885
    ],
    [
      0.2483814850890878,
      0.356946549904995,
      -0.9004975282452807
    ],
    [
      0.25228237104112733,
      0.34672294720763397,
      -0.9034029018890294
    ],
    [
      0.24126302834883467,
      0.39455854809296653,
      -0.8866316615589134
    ],
    [
      0.24143289022108483,
      0.3666549966417547,
      -0.8984844311156028
    ],
    [
      0.23034667524128002,
      0.4210780841693202,
      -0.8772876701730072
    ],
    [
      0.19541942143088142,
      0.44995961312923394,
      -0.8714055291769783
    ],
    [
      0.19248557363199625,
      0.450396296534713,
      -0.8718328280188675
    ],
    [
      0.15838176013006733,
      0.47879369856444937,
      -0.8635229077870934
    ],
    [
      -0.41190798656592015,
      0.3294788296929479,
      -0.8495737233385783
    ],
    [
      -0.43366721028846217,
      0.30639468958440413,
      -0.8473812866207865
    ],
    [
      -0.4232180254401391,
      0.2518101766011101,
      -0.8703321997390809
    ],
    [
      -0.41772710498360727,
      0.2736655782259452,
      -0.8663782182489779
    ],
    [
      -0.413088659229,
      0.21201545000576266,
      -0.8856676625999399
    ],
    [
      -0.4111251863451356,
      0.22033569835982977,
      -0.884549750540332
    ],
    [
      -0.4025433292102488,
      0.17731777062708254,
      -0.8980630692374398
    ],
    [
      -0.3757050919800425,
      0.1389758375150836,
      -0.9162594613139058
    ],
    [
      -0.38036314464312376,
      0.16285430026776881,
      -0.9103858275926144
    ],
    [
      -0.31366075779777414,
      0.10177619795006394,
      -0.9440648995426932
    ],
    [
      -0.31440672714535356,
      0.11098780008644533,
      -0.9427778731799545
    ],
    [
      -0.21808925920755182,
      0.05760307252720846,
      -0.9742273662003785
    ],
    [
      -0.2245298242334217,
      0.06521727645476781,
      -0.9722823997592115
    ],
    [
      -0.0725967414872703,
      -0.0189391176130714,
      -0.9971815396152642
    ],
    [
      -0.1940396707210246,
      0.07065443168142946,
      -0.9784459910849707
    ],
    [
      -0.5195308382926973,
      0.46203066266641746,
      -0.7187596085054573
    ],
    [
      -0.5283864575868114,
      0.46501122438530895,
      -0.7103325366576816
    ],
    [
      -0.6167787669082884,
      0.40308162902796646,
      -0.6760984787967299
    ],
    [
      -0.6377714286854056,
      0.3872944991912113,
      -0.6657706629529462
    ],
    [
      -0.6187158454268119,
      0.4025895187576467,
      -0.6746201761022803
    ],
    [
      -0.6692041633051636,
      0.37156704614195313,
      -0.6435089106114844
    ],
    [
      -0.6551999753992633,
      0.38325999833644314,
      -0.6510182531327017
    ],
    [
      -0.6916632041630426,
      0.366991912319678,
      -0.6220280928534168
    ],
    [
      -0.7013228212748159,
      0.3586150490604464,
      -0.6160694335434167
    ],
    [
      -0.7254282616755872,
      0.35409912093394613,
      -0.590226778209988
    ],
    [
      -0.7342300053103372,
      0.3461346542035229,
      -0.5840351876911098
    ],
    [
      -0.7568896033333437,
      0.34163404788149926,
      -0.55713939520913
    ],
    [
      -0.7633736579875453,
      0.33555559422363834,
      -0.5519629529922595
    ],
    [
      -0.29794702592926214,
      0.8859587233199561,
      -0.35539373983397754
    ],
    [
      -0.2976827716546742,
      0.8682565649753868,
      -0.39688223043761106
    ],
    [
      -0.28979940583450114,
      0.8790998048136673,
      -0.3784175439306985
    ],
    [
      -0.3405949394606027,
      0.8369984119600988,
      -0.4282858223080715
    ],
    [
      -0.2996364578812239,
      0.8476280907466395,
      -0.4378865296918829
    ],
    [
      -0.2901506524787474,
      0.8614452798283294,
      -0.41680286554634965
    ],
    [
      -0.3511340642449918,
      0.8263795296745604,
      -0.4402291924232721
    ],
    [
      -0.34535028196841017,
      0.8148582699088006,
      -0.4655525563301912
    ],
    [
      -0.3038179036745017,
      0.8248806301051946,
      -0.47672489706757315
    ],
    [
      -0.2933328692123732,
      0.84121278061933,
      -0.45422118572599823
    ],
    [
      -0.3091737446416705,
      0.7979136188329808,
      -0.5174412551247761
    ],
    [
      -0.2973605080119125,
      0.8178136326644643,
      -0.49270436420134334
    ],
    [
      -0.35824365180792256,
      0.8008863777301106,
      -0.4798359051859983
    ],
    [
      -0.3553643228703092,
      0.7912793238189775,
      -0.49758740913281596
    ],
    [
      -0.3714017852436853,
      0.7726696721269568,
      -0.5148225827341149
    ],
    [
      -0.37022738053551457,
      0.7651423420760329,
      -0.5267721358084674
    ],
    [
      -0.3177690166547378,
      0.7687018399126339,
      -0.5550858792738402
    ],
    [
      -0.30512864296357745,
      0.7917642295099189,
      -0.5291558523835583
    ],
    [
      -0.38747426012963987,
      0.743876813882129,
      -0.5445282210368537
    ],
    [
      -0.38678746051970037,
      0.7361872299342076,
      -0.5553591836519131
    ],
    [
      -0.3284916564205523,
      0.738788680810091,
      -0.5884594436059017
    ],
    [
      -0.31554212844083934,
      0.7632795634724155,
      -0.5637707629563488
    ],
    [
      -0.4046644940126195,
      0.7128599920252432,
      -0.5727803060993637
    ],
    [
      -0.4046305732932455,
      0.7086037648673505,
      -0.5780612455200538
    ],
    [
      -0.31879768369198797,
      0.7009038089703203,
      -0.6380453647222272
    ],
    [
      -0.42451888988560016,
      0.6812211673575796,
      -0.5964238704765883
    ],
    [
      -0.4314826960818801,
      0.6766621200268177,
      -0.5966163409618651
    ],
    [
      -0.45162538438990457,
      0.6482413204738244,
      -0.6130397235131042
    ],
    [
      -0.37129224093597374,
      0.6370439618895666,
      -0.6755124443271103
    ],
    [
      -0.4610357622945147,
      0.6095097382807821,
      -0.6449371324605276
    ],
    [
      -0.40217296073506037,
      0.6117385188577222,
      -0.6811995993828504
    ],
    [
      -0.4691229779019374,
      0.6352993410643575,
      -0.6134479430624994
    ],
    [
      -0.47224759957166684,
      0.619127539426019,
      -0.6274259275986943
    ],
    [
      -0.46601055915437123,
      0.572486324134662,
      -0.6746062313938501
    ],
    [
      -0.42454526607783233,
      0.5762022294134782,
      -0.6983926602347994
    ],
    [
      -0.4189302636074834,
      0.5805279264364719,
      -0.6982010891291525
    ],
    [
      -0.4745699365312456,
      0.565227447839965,
      -0.6747601852132721
    ],
    [
      -0.48526845697862947,
      0.5109972196142731,
      -0.7095043102110531
    ],
    [
      -0.4395915915014144,
      0.541809769948447,
      -0.7163807687743051
    ],
    [
      -0.40317190951728604,
      0.5237313691838912,
      -0.7504384480481741
    ],
    [
      -0.3694507596934688,
      0.5673664940556061,
      -0.7359357292488038
    ],
    [
      -0.2989128105404192,
      0.5092176992519152,
      -0.8070616249478186
    ],
    [
      -0.38561527860924816,
      0.559965518616266,
      -0.73330721724522
    ],
    [
      -0.3025601160470223,
      0.5047194454518076,
      -0.8085268440567897
    ],
    [
      0.07924922743513718,
      0.8382531897565769,
      -0.539491566026623
    ],
    [
      -0.2322744291733219,
      0.8931737579193063,
      -0.3850834035848751
    ],
    [
      -0.22955719924484355,
      0.8916087709035778,
      -0.3903041018522283
    ],
    [
      -0.23157778977896712,
      0.8738429255762618,
      -0.4275163958275849
    ],
    [
      -0.13131392861809052,
      0.8880515756891644,
      -0.4405917056265077
    ],
    [
      -0.23235520926844622,
      0.8743543924165293,
      -0.42604630404187105
    ],
    [
      -0.23448341297155292,
      0.8525668111265136,
      -0.4670624814805617
    ],
    [
      -0.23441525165161398,
      0.8525163292757324,
      -0.4671888248998917
    ],
    [
      -0.15674974994769092,
      0.8649094913791426,
      -0.4768239587244008
    ],
    [
      -0.1585700861346822,
      0.8425357069406845,
      -0.5147709299418533
    ],
    [
      -0.23717893903154622,
      0.8295326441382962,
      -0.5055904896146652
    ],
    [
      -0.23588269893299896,
      0.8284636589124482,
      -0.5079442077684151
    ],
    [
      -0.15860762314954316,
      0.8424989952413197,
      -0.5148194488325197
    ],
    [
      -0.16039702010909498,
      0.8150247232530498,
      -0.5567831682319538
    ],
    [
      -0.2384817850970214,
      0.8041445535881715,
      -0.544497911025762
    ],
    [
      -0.23913675184967603,
      0.8034469644261334,
      -0.5452399373387994
    ],
    [
      -0.24201273290530567,
      0.7750914804550338,
      -0.5836634595704352
    ],
    [
      -0.13295166146455525,
      0.789623244789596,
      -0.5990150140036258
    ],
    [
      -0.24280786727009077,
      0.7741943145946774,
      -0.5845233124872161
    ],
    [
      -0.2460600563312057,
      0.7440532612365023,
      -0.6211595552847989
    ],
    [
      0.16461654400296583,
      -0.9681778204474761,
      0.18850225843234406
    ],
    [
      0.16815356806995596,
      -0.9673288562130532,
      0.18973471343665324
    ],
    [
      0.2130957522526009,
      -0.9585097738980356,
      0.1893388858999515
    ],
    [
      0.2069495468535904,
      -0.9604002530129581,
      0.1865562624779443
    ],
    [
      0.4587380566049859,
      -0.8725310992520472,
      0.1680740201824625
    ],
    [
      0.4165184845608808,
      -0.8827007083755728,
      0.21760471376413074
    ],
    [
      0.5194359502826198,
      -0.8377702517870645,
      0.16830715604106142
    ],
    [
      0.4587978588338738,
      -0.8725479375801666,
      0.16782318479295605
    ],
    [
      0.5824895856700398,
      -0.8066649781713583,
      0.09998747710462301
    ],
    [
      0.5475757663002384,
      -0.8248077130313567,
      0.14090073344269594
    ],
    [
      0.6298789156320067,
      -0.7719878811386229,
      0.08536546735856747
    ],
    [
      0.5839098301661999,
      -0.8062766516956857,
      0.09469567659441111
    ],
    [
      0.6621898319893479,
      -0.7480339437817806,
      0.04415705334592808
    ],
    [
      0.6569568553387324,
      -0.7525320684732193,
      0.045860398415863854
    ],
    [
      0.6329544828402527,
      -0.7705457740965262,
      0.07501888211919215
    ],
    [
      0.6826557629814063,
      -0.7305165853896713,
      0.01807284534568572
    ],
    [
      0.701696624892222,
      -0.7124370738660729,
      -0.007433868172904607
    ],
    [
      0.6826707514797768,
      -0.730504031516014,
      0.01801402267366935
    ],
    [
      0.7204154358922177,
      -0.6926092644345624,
      -0.03597230250679813
    ],
    [
      0.7024435024037091,
      -0.7116616920039434,
      -0.010524355794763345
    ],
    [
      0.7342584270028525,
      -0.6760178178164937,
      -0.0621648805188471
    ],
    [
      0.722147992602323,
      -0.690355065999285,
      -0.04372824750156389
    ],
    [
      0.7581941988874015,
      -0.6412579973047047,
      -0.11802430964106884
    ],
    [
      0.7384688327085208,
      -0.6691167958954003,
      -0.08334564516990581
    ],
    [
      -0.08423889069505967,
      -0.9429127900870246,
      0.32220999299334047
    ],
    [
      -0.04913827009797047,
      -0.9322049488537758,
      0.3585796476995148
    ],
    [
      -0.031655809897962385,
      -0.9314377444528171,
      0.36252122407984955
    ],
    [
      -0.07251976102635332,
      -0.9689658649031915,
      0.23631766102661622
    ],
    [
      -0.009277823582707245,
      -0.9221272394836986,
      0.3867754855103175
    ],
    [
      -0.006946113923476967,
      -0.9130469436929645,
      0.4077953287058334
    ],
    [
      0.022006226500901192,
      -0.9109188506343436,
      0.41199826887281626
    ],
    [
      0.04571063668623807,
      -0.8968442188615265,
      0.4399783912743865
    ],
    [
      0.038217710926457815,
      -0.8786088612858945,
      0.4760103732498331
    ],
    [
      0.040701764941671804,
      -0.8763522818757505,
      0.4799479600767129
    ],
    [
      0.042287649336946696,
      -0.875768768032495,
      0.48087505617613546
    ],
    [
      0.06363818770407084,
      -0.8555921772381292,
      0.5137238629017141
    ],
    [
      0.0636518061618024,
      -0.8548111498343803,
      0.5150207235550477
    ],
    [
      0.08478057043690485,
      -0.8338518295159849,
      0.5454387053457408
    ],
    [
      0.08473372668354852,
      -0.8319346676183469,
      0.5483656666651081
    ],
    [
      0.10419407484674348,
      -0.8113790665372007,
      0.5751587651701503
    ],
    [
      0.17497900828459295,
      -0.8185404949537043,
      0.5471506234856041
    ],
    [
      0.10349620594488097,
      -0.8052225335551275,
      0.5838708819679881
    ],
    [
      0.12147858371481492,
      -0.78531835980781,
      0.607056856849022
    ],
    [
      0.18860304889609,
      -0.7906859858281858,
      0.582447046315808
    ],
    [
      0.18872564771848818,
      -0.7909892159116277,
      0.5819954383023509
    ],
    [
      0.19980865993337033,
      -0.7589819103420622,
      0.6196958602323761
    ],
    [
      0.20124283950500585,
      -0.7621627286618109,
      0.6153123553015535
    ],
    [
      0.1198752732139367,
      -0.7759423142495416,
      0.6193088436547227
    ],
    [
      0.13616077585977782,
      -0.7573555667624333,
      0.6386491905664775
    ],
    [
      0.13279840594979633,
      -0.7430731990449637,
      0.6559015202286673
    ],
    [
      0.14763246172958513,
      -0.7258916646583791,
      0.6717781980856108
    ],
    [
      0.20831923256506488,
      -0.7246777723526896,
      0.6568449007196796
    ],
    [
      0.2115489662182751,
      -0.7315548112001178,
      0.6481316171133292
    ],
    [
      0.15433290241433315,
      -0.6910949078619472,
      0.706094316334337
    ],
    [
      0.21407659165751874,
      -0.6871004048173955,
      0.6943084664643454
    ],
    [
      0.21940847410117106,
      -0.6984307255636593,
      0.6812154160625081
    ],
    [
      0.1418423077941754,
      -0.705776733780086,
      0.6940893038898784
    ],
    [
      0.14626032690810656,
      -0.6641181254700523,
      0.7331814456155294
    ],
    [
      0.15499446360212316,
      -0.6535081067401874,
      0.7408804698988536
    ],
    [
      0.21535307659964018,
      -0.6448044574893106,
      0.733382754092967
    ],
    [
      0.22417028934582775,
      -0.6633239466463834,
      0.7139671023093948
    ],
    [
      0.1444800833072467,
      -0.6183063870651734,
      0.7725430196707126
    ],
    [
      0.15017431659932032,
      -0.6112115542632387,
      0.7770895125846463
    ],
    [
      0.21174597440814244,
      -0.5991709732963689,
      0.7721125481955518
    ],
    [
      0.22377780904526778,
      -0.6251354272865524,
      0.7477494164024197
    ],
    [
      0.19828894605226413,
      -0.5401212437450353,
      0.8178939637439553
    ],
    [
      0.21851203235435754,
      -0.5837491634553131,
      0.7819778806856306
    ],
    [
      0.1245425644019141,
      -0.5223733152297699,
      0.8435729187142357
    ],
    [
      0.1372382796188897,
      -0.5112953283215279,
      0.8483765330581866
    ],
    [
      -0.07044753835330662,
      -0.9724345721959563,
      0.22227943480679235
    ],
    [
      -0.01688110082575821,
      -0.9921194562423244,
      0.1241531835288362
    ],
    [
      -0.04964190379527483,
      -0.984777316917596,
      0.16658126386890387
    ],
    [
      -0.320041452526399,
      -0.8377440477276801,
      0.4424459053507391
    ],
    [
      -0.3009859796486298,
      -0.8638410445812119,
      0.4039629806700055
    ],
    [
      -0.2809744153525446,
      -0.8725896071585293,
      0.3995506918980612
    ],
    [
      -0.26485418137195016,
      -0.8894990664122783,
      0.37234885989012967
    ],
    [
      -0.17670819607318644,
      -0.8969776488643109,
      0.4052225448792468
    ],
    [
      -0.15760811264447955,
      -0.8819621505321702,
      0.44418740173187554
    ],
    [
      -0.12441943376139586,
      -0.8884373866838725,
      0.44181309899642496
    ],
    [
      -0.0991877648166284,
      -0.8901076593327734,
      0.44482596833797
    ],
    [
      -0.07290586487693201,
      -0.8881294785470417,
      0.45377391309142723
    ],
    [
      -0.04071225313092691,
      -0.8949537097716654,
      0.4442976140054513
    ],
    [
      -0.38650142754150346,
      -0.8725935449796174,
      0.29865892213072187
    ],
    [
      -0.4058225824054795,
      -0.8538957547654292,
      0.3258374926298779
    ],
    [
      -0.3668626873554669,
      -0.8912253855488093,
      0.26670035766699157
    ],
    [
      -0.3864397694608722,
      -0.8741910899054435,
      0.29403102371852
    ],
    [
      -0.33258755227855996,
      -0.9108745310808706,
      0.24432173193877027
    ],
    [
      -0.35926335743224014,
      -0.9009808222497155,
      0.24323527282189317
    ],
    [
      -0.364440724764851,
      -0.8982047742483286,
      0.24578678086988173
    ],
    [
      -0.30307392185714366,
      -0.9259130655477433,
      0.22545774091414644
    ],
    [
      -0.2735102473628281,
      -0.9416382364903573,
      0.1962385695189774
    ],
    [
      -0.2988854128879395,
      -0.9301678576612399,
      0.213202407436467
    ],
    [
      -0.24265942649867714,
      -0.9543683702174485,
      0.17406153124635126
    ],
    [
      -0.24686568164541953,
      -0.9532362530853601,
      0.1743501678505808
    ],
    [
      -0.27123909354391124,
      -0.9433692376629386,
      0.1910074228000669
    ],
    [
      -0.20649388820197775,
      -0.9664848971567546,
      0.15253595544371373
    ],
    [
      -0.2122327867735047,
      -0.9651585363951756,
      0.1530563420504838
    ],
    [
      -0.17939306569292054,
      -0.974608646231544,
      0.13400042787996141
    ],
    [
      -0.14716920776122736,
      -0.98278957390522,
      0.11165069507230443
    ],
    [
      -0.17921562246006909,
      -0.9746867226714169,
      0.13366956764463067
    ],
    [
      -0.12101067523780605,
      -0.9883704792958915,
      0.09208806727747126
    ],
    [
      -0.1458810633210613,
      -0.9832475629856985,
      0.10928378309246745
    ],
    [
      -0.10399622286140917,
      -0.9922875469421192,
      0.06745524304419798
    ],
    [
      -0.11049119801560478,
      -0.9912491194940318,
      0.07222796039888514
    ],
    [
      -0.0891315070796476,
      -0.9952380821474315,
      0.03945547223406609
    ],
    [
      -0.07783852216089615,
      -0.9969207622726345,
      0.009495168116310772
    ],
    [
      -0.08872750281372921,
      -0.9956045691744116,
      0.029982863163377744
    ],
    [
      -0.07712831330798571,
      -0.9968753662106449,
      -0.017050733962436282
    ],
    [
      -0.07101600458997721,
      -0.9970620305496452,
      -0.028705998123995435
    ],
    [
      -0.07010323527517238,
      -0.9959250612302735,
      -0.05673454694830884
    ],
    [
      -0.06560100447996077,
      -0.9956988553193852,
      -0.06542398433973702
    ],
    [
      -0.0571067868323024,
      -0.9926524834785101,
      -0.1066764357374026
    ],
    [
      -0.06463852029854397,
      -0.9936000184077058,
      -0.09263295911186928
    ],
    [
      -0.05107728311109456,
      -0.9882854055707936,
      -0.14381609188738584
    ],
    [
      -0.05606618656454569,
      -0.9893353217893609,
      -0.13443289695625546
    ],
    [
      -0.04616689416771617,
      -0.9820395352867985,
      -0.18293979615325803
    ],
    [
      -0.04973942470654338,
      -0.983111993530316,
      -0.1761158647218077
    ],
    [
      -0.04429809075693785,
      -0.973998053119443,
      -0.22218341899166286
    ],
    [
      -0.0601813470344235,
      -0.9624715793511137,
      -0.2646255173079403
    ],
    [
      -0.30408301518319086,
      -0.2260351444086872,
      0.9254413181662267
    ],
    [
      -0.2856630426853398,
      -0.2934676114886679,
      0.9122901879615334
    ],
    [
      -0.31747979471409005,
      -0.23641282963030785,
      0.918322140609977
    ],
    [
      -0.354441602876477,
      -0.29454749574372485,
      0.8874755900313283
    ],
    [
      -0.27729924948210755,
      -0.32048729264034126,
      0.905755497633177
    ],
    [
      -0.3350640977719167,
      -0.34233713708679275,
      0.8778025603491425
    ],
    [
      -0.3563549625714611,
      -0.3018517419858426,
      0.8842492106362351
    ],
    [
      -0.3695721841340863,
      -0.39105609289674903,
      0.8429065979826532
    ],
    [
      -0.3873525967415631,
      -0.35308275084531415,
      0.8516399103218882
    ],
    [
      -0.3961472139795972,
      -0.4369358690186248,
      0.8075607910375184
    ],
    [
      -0.4115819190703047,
      -0.4025821276635502,
      0.8176355877652918
    ],
    [
      -0.41964342236477387,
      -0.47833097252852846,
      0.7714265219616785
    ],
    [
      -0.4317494063628385,
      -0.4479016313962289,
      0.7829282078823915
    ],
    [
      -0.4419986559638778,
      -0.5152000483667997,
      0.7343065424527913
    ],
    [
      -0.45072601888566294,
      -0.48921042772259615,
      0.7466720922245289
    ],
    [
      -0.4615441623791315,
      -0.5493408728280914,
      0.6965641331666572
    ],
    [
      -0.468453601520947,
      -0.5262499963271033,
      0.7096563707793917
    ],
    [
      -0.4774508659887204,
      -0.5815022292110037,
      0.6587076954076476
    ],
    [
      -0.4834889954655197,
      -0.5600731832947858,
      0.6727231381614489
    ],
    [
      -0.489547926139542,
      -0.6126089581246351,
      0.620526463930365
    ],
    [
      -0.4956129570055401,
      -0.5913292857194835,
      0.636158370768404
    ],
    [
      -0.4972732118744378,
      -0.6428918102897346,
      0.5825885967082333
    ],
    [
      -0.5036915103500076,
      -0.6211827245215279,
      0.6003556322358773
    ],
    [
      -0.501777307930379,
      -0.6714839633687171,
      0.5452786628731965
    ],
    [
      -0.5081377634489429,
      -0.6504057648530422,
      0.5645957442303611
    ],
    [
      -0.5028617160315945,
      -0.699828023994982,
      0.5073172886675942
    ],
    [
      -0.509816200273932,
      -0.6779735722606868,
      0.5295651775318438
    ],
    [
      -0.5008635082179097,
      -0.72550746782675,
      0.4719901061073899
    ],
    [
      -0.5078624823413785,
      -0.7049296852818273,
      0.4951260827693456
    ],
    [
      -0.4980861654968365,
      -0.7501707311405222,
      0.43491843589430906
    ],
    [
      -0.5052209120705768,
      -0.7307388586184626,
      0.45909971739433825
    ],
    [
      -0.49211479288786586,
      -0.772951191334609,
      0.4004615917105429
    ],
    [
      -0.5001388213997129,
      -0.7532887089340141,
      0.4271033602319609
    ],
    [
      -0.48490516245676457,
      -0.7954764359856491,
      0.3634339323925991
    ],
    [
      -0.49389275479442535,
      -0.7759224499382276,
      0.39244655488796487
    ],
    [
      -0.47591998464177193,
      -0.8161563181626529,
      0.32770265873464965
    ],
    [
      -0.4858606729958264,
      -0.7973814286651968,
      0.3579417042702518
    ],
    [
      -0.464619516198023,
      -0.8367005275446353,
      0.28993263420050536
    ],
    [
      -0.46502063905174995,
      -0.8363467499117747,
      0.2903100397297921
    ],
    [
      -0.4764244014990276,
      -0.8174011145157876,
      0.3238444188875914
    ],
    [
      -0.4526454320230202,
      -0.8539706191479537,
      0.25660532827818305
    ],
    [
      -0.45288265653233795,
      -0.8537748241942126,
      0.2568381766489432
    ],
    [
      -0.42635731677374406,
      -0.8811290735966296,
      0.20452626749696115
    ],
    [
      -0.4379052256632704,
      -0.8725315252906897,
      0.21662813924027227
    ],
    [
      -0.34921448726760984,
      -0.9175037914666067,
      0.1903576489842784
    ],
    [
      -0.41635894396588097,
      -0.8986180073910466,
      0.13831452046752504
    ],
    [
      -0.4233910125647774,
      -0.8951922527777654,
      0.13917931256491367
    ],
    [
      -0.3781478860856758,
      -0.9178024666544219,
      0.12100747271137274
    ],
    [
      -0.33197359515644825,
      -0.9254284040005389,
      0.18269045182471338
    ],
    [
      -0.3263322957495791,
      -0.9315093437214184,
      0.1606162361360203
    ],
    [
      -0.3011513811021068,
      -0.9447348695052924,
      0.12955258392294539
    ],
    [
      -0.35535716970796455,
      -0.9298369918483305,
      0.09552198975938779
    ],
    [
      -0.3084998572633728,
      -0.939047633208418,
      0.15171480031343973
    ],
    [
      -0.28045079414020885,
      -0.952701673095516,
      0.11707636032577472
    ],
    [
      -0.2736102744995774,
      -0.9563248411039159,
      0.10286017682191644
    ],
    [
      -0.33737689449749514,
      -0.9394768479185829,
      0.05966643347971939
    ],
    [
      -0.3483735063497102,
      -0.934584594867397,
      0.07202454519225945
    ],
    [
      -0.3211407377304565,
      -0.9469807889628752,
      0.00979856648640704
    ],
    [
      -0.2555973171366576,
      -0.9625227345113365,
      0.09066419922638748
    ],
    [
      -0.2507087933125025,
      -0.9645948947132453,
      0.08186446145264714
    ],
    [
      -0.2263817491335123,
      -0.9718598041182077,
      0.0651139370532176
    ],
    [
      -0.20657004738081008,
      -0.9778993588325564,
      0.03227475050197828
    ],
    [
      -0.2017646147026882,
      -0.9793697657952439,
      0.011220610502319948
    ],
    [
      -0.20200986112034247,
      -0.9793655127285205,
      0.005933674084587458
    ],
    [
      -0.31879853711976636,
      -0.9462694983301768,
      -0.05423586691712928
    ],
    [
      -0.1699378497679606,
      -0.9849537537825016,
      -0.03142021842701361
    ],
    [
      -0.16097582042333744,
      -0.9845542380549264,
      -0.06884575199035013
    ],
    [
      -0.16189516583773236,
      -0.9838711688062782,
      -0.07607547877037082
    ],
    [
      -0.35149480299508945,
      -0.9292086831310945,
      -0.11411672384545776
    ],
    [
      -0.18460651074457268,
      -0.9827742593871811,
      -0.008671290370617842
    ],
    [
      -0.15307159658686523,
      -0.9819195612322615,
      -0.11136903334316532
    ],
    [
      -0.15736327048259202,
      -0.9764731457703366,
      -0.1474347201048848
    ],
    [
      -0.17390470719848325,
      -0.9675077257287776,
      -0.18353733535533928
    ],
    [
      -0.35281933704683976,
      -0.8412518325577074,
      -0.4096509119044259
    ],
    [
      -0.5329495663436402,
      -0.7492400856481973,
      -0.39319721996983625
    ],
    [
      -0.20450632223602638,
      -0.2797715664149824,
      0.938032533972677
    ],
    [
      -0.24244608332316034,
      -0.34496343874568086,
      0.9067635428324267
    ],
    [
      -0.21434395521220528,
      -0.38018499118886667,
      0.8997310939045674
    ],
    [
      -0.23126750120407505,
      -0.39444781855486516,
      0.8893403517912202
    ],
    [
      -0.2827121814325251,
      -0.4007150827577466,
      0.8714936861045611
    ],
    [
      -0.2866496580058505,
      -0.4532156269060766,
      0.8440542453499426
    ],
    [
      -0.30315998243605763,
      -0.45639706043516665,
      0.8365379538762769
    ],
    [
      -0.3090437440256091,
      -0.503716700522753,
      0.8066978677876278
    ],
    [
      -0.3178030245691634,
      -0.5060976469442884,
      0.8017895043788901
    ],
    [
      -0.3243748482900606,
      -0.5488234862785656,
      0.7704373684510905
    ],
    [
      -0.3334011231896148,
      -0.5511249373562318,
      0.7649215609982456
    ],
    [
      -0.3400639805100537,
      -0.5897629152587389,
      0.7324863090496445
    ],
    [
      -0.34751210542091926,
      -0.5918553642182451,
      0.7272843765900711
    ],
    [
      -0.35409792428609305,
      -0.6280716858284083,
      0.6929217975189852
    ],
    [
      -0.35554684767801464,
      -0.6286320605021783,
      0.6916705658151229
    ],
    [
      -0.3610899498007189,
      -0.6603289322963318,
      0.6584677283856064
    ],
    [
      -0.35708869413272865,
      -0.6657271433044079,
      0.6552061013073177
    ],
    [
      -0.36169280663918035,
      -0.6917279378988429,
      0.6250526166297418
    ],
    [
      -0.35300713988151033,
      -0.7027581826157953,
      0.6176705399800289
    ],
    [
      -0.3556219093088557,
      -0.7229146991083681,
      0.5923912519885668
    ],
    [
      -0.34412136857859793,
      -0.737204224123889,
      0.5814726267172752
    ],
    [
      -0.3442943022808584,
      -0.7499982874867211,
      0.5647689812515577
    ],
    [
      -0.32125369792542535,
      -0.777111279897622,
      0.5411969329413457
    ],
    [
      -0.3129958028427796,
      -0.7820292580568663,
      0.538946998271473
    ],
    [
      -0.3107932758847747,
      -0.7998093307259286,
      0.5135295260727979
    ],
    [
      -0.2825734768049628,
      -0.8343561871306383,
      0.47328847778408734
    ],
    [
      -0.2845164175043369,
      -0.8279478812532242,
      0.48327291885516904
    ],
    [
      -0.23897954095173393,
      -0.8563120042234028,
      0.457841162882279
    ],
    [
      -0.16802253063080133,
      -0.8731606570776118,
      0.4575575331389644
    ],
    [
      0.27101173587256616,
      -0.8030092434577575,
      0.5307813051914494
    ],
    [
      0.3265253181921219,
      -0.782815088374192,
      0.5296996828328666
    ],
    [
      0.3552941518626167,
      -0.7947949015565319,
      0.49200318099781276
    ],
    [
      0.37356616247656527,
      -0.7922503700389057,
      0.48248074927995777
    ],
    [
      0.43288858628663573,
      -0.766617447830552,
      0.4742416689247465
    ],
    [
      0.44266196903088406,
      -0.756122191719535,
      0.48200582191810437
    ],
    [
      0.4913248087649923,
      -0.736777434560694,
      0.4644985944157485
    ],
    [
      0.49824962704108067,
      -0.7432001758524701,
      0.4465431757022847
    ],
    [
      0.6983296662114188,
      -0.6185500624115153,
      0.36018258922352
    ],
    [
      0.4407794632448969,
      -0.7537500163076525,
      0.4874160211746782
    ],
    [
      0.3448820541551918,
      -0.7526320433829519,
      0.5608933731065984
    ],
    [
      0.3512007375759011,
      -0.7480887226270444,
      0.5630464501303424
    ],
    [
      0.5366329691113317,
      -0.696780014676277,
      0.4759439752854149
    ],
    [
      0.5549750185207509,
      -0.6859275602046457,
      0.47064435720572934
    ],
    [
      0.607783102587709,
      -0.6534473677442221,
      0.45122747899147936
    ],
    [
      0.5880935485806557,
      -0.6586083913987482,
      0.4694475102681506
    ],
    [
      0.6514271734872726,
      -0.621210462210088,
      0.4355917805504503
    ],
    [
      0.656346129364215,
      -0.6160443097849396,
      0.4355446783628641
    ],
    [
      0.6820384324192761,
      -0.5776215714347098,
      0.44852747621116035
    ],
    [
      0.6523187017307215,
      -0.5608168491198056,
      0.5098674073871355
    ],
    [
      0.6517923128428237,
      -0.55555325306691,
      0.5162628825760929
    ],
    [
      0.6337636609252325,
      -0.5451271945682004,
      0.5487986550938789
    ],
    [
      0.6331372013585292,
      -0.5393588554293213,
      0.555184031944239
    ],
    [
      0.6136211860375348,
      -0.5280252395150328,
      0.5870761334622464
    ],
    [
      0.6082769535405889,
      -0.49130489831203983,
      0.6233928494023463
    ],
    [
      0.8398520545603212,
      -0.24783189854522542,
      0.48293672102489416
    ],
    [
      0.8403508658687482,
      -0.24776743058237422,
      0.48210136130927234
    ],
    [
      0.8564461107234504,
      -0.26778733274767574,
      0.441350205445246
    ],
    [
      0.822230042403152,
      -0.2292017279172464,
      0.5209648023518092
    ],
    [
      0.8239967267167966,
      -0.2290587787354568,
      0.5182291676895715
    ],
    [
      0.8040383575648072,
      -0.2088642453061611,
      0.5566848718953792
    ],
    [
      0.8042899373018163,
      -0.2088602596998182,
      0.5563228277476712
    ],
    [
      0.7830458405370291,
      -0.18680134172082533,
      0.5932490795180023
    ],
    [
      0.7842449884868011,
      -0.18685505998240567,
      0.5916459960080088
    ],
    [
      0.7598014983365304,
      -0.16315106850231786,
      0.6293515805748926
    ],
    [
      0.7619113688123286,
      -0.1634223421133733,
      0.6267249828853989
    ],
    [
      0.7322699533389083,
      -0.13944347676882266,
      0.6665855025603662
    ],
    [
      0.7400482251098406,
      -0.14088998351857532,
      0.657631079752098
    ],
    [
      0.7017580408095873,
      -0.11444797694132411,
      0.7031623658395888
    ],
    [
      0.7129541006146771,
      -0.11746780666524509,
      0.6913015006594253
    ],
    [
      0.6862278344738523,
      -0.09625015185898277,
      0.7209904766780557
    ],
    [
      0.664026586295043,
      -0.08883025575441812,
      0.7424135494156585
    ],
    [
      0.6254878028931573,
      -0.06849669305601605,
      0.7772214687412338
    ],
    [
      0.6570508650161612,
      -0.08048485205400474,
      0.7495374235962867
    ],
    [
      0.6173782871242284,
      -0.07030769454540194,
      0.7835182695223285
    ],
    [
      0.5839919976357447,
      -0.05682996929410872,
      0.8097676835287038
    ],
    [
      0.5643679881061614,
      -0.061944792298134474,
      0.823195977096672
    ],
    [
      0.46651840777655884,
      -0.22781780469922264,
      0.8546693062627505
    ],
    [
      0.44283305284966273,
      -0.196138992639589,
      0.8748876401402497
    ],
    [
      0.4460671853378497,
      -0.1019422031483627,
      0.8891748159850381
    ],
    [
      0.47182711227215274,
      -0.06353170724532077,
      0.8793991689212677
    ],
    [
      0.5294805127788973,
      -0.04681046813540751,
      0.847029613803638
    ],
    [
      0.470865817399685,
      -0.23108212311470686,
      0.851402627657048
    ],
    [
      0.7960674498648588,
      0.5160037448367495,
      0.31625424990047357
    ],
    [
      0.7716198621988762,
      0.3813343556793158,
      0.5091040143613368
    ],
    [
      0.7365948787112998,
      0.4028834097104233,
      0.5432429869187348
    ],
    [
      0.7233409634182842,
      0.4250638218780679,
      0.5441494261427817
    ],
    [
      0.6987911614003656,
      0.4467913659042809,
      0.5586308155679519
    ],
    [
      0.7072811345272282,
      0.434342581143782,
      0.5577633180366329
    ],
    [
      0.6749801010174122,
      0.4602025154749552,
      0.5767282791584332
    ],
    [
      0.6721361337401981,
      0.4639205450228562,
      0.5770708324170217
    ],
    [
      0.6426328128316015,
      0.4798286489981582,
      0.597316947250575
    ],
    [
      0.6419599305240631,
      0.4797143390557859,
      0.5981317584828703
    ],
    [
      0.6004916876862312,
      0.5006157212419381,
      0.6235331848948827
    ],
    [
      0.5956276693926618,
      0.5056589935993429,
      0.624128722016513
    ],
    [
      0.5528285901571428,
      0.4957347633965252,
      0.6697966812884765
    ],
    [
      0.5336477355496393,
      0.4681853506652597,
      0.7042886991605006
    ],
    [
      0.5303405874592869,
      0.46790365522593563,
      0.7069689036439631
    ],
    [
      0.5042909920016014,
      0.45363584549464003,
      0.7347823589801294
    ],
    [
      0.49397092629475536,
      0.44034304942944125,
      0.7497270988797737
    ],
    [
      0.44027392728917547,
      0.4507654878610021,
      0.7765110069424634
    ],
    [
      0.3925198821969681,
      0.4829347263861033,
      0.7827529572799184
    ],
    [
      0.8683836791749802,
      -0.18364019020844763,
      0.46063658808515207
    ],
    [
      0.8667454778161126,
      -0.17538744623744168,
      0.46689562044168614
    ],
    [
      0.8523008471526199,
      -0.1626596233848263,
      0.4971168000211147
    ],
    [
      0.8492438350451267,
      -0.15049186627692795,
      0.5060998980659184
    ],
    [
      0.8371494946066635,
      -0.13939107134114867,
      0.5289147879480915
    ],
    [
      0.8310067537533479,
      -0.1193061470950851,
      0.5433174196375895
    ],
    [
      0.8282191568532719,
      -0.11636358755402937,
      0.5481902440875897
    ],
    [
      0.8377145824239915,
      -0.025894240346902925,
      0.5454940574479749
    ],
    [
      0.7832974264268604,
      0.12203086942462324,
      0.6095519737155544
    ],
    [
      0.7928165747208857,
      0.17792833851425957,
      0.5829094142329468
    ],
    [
      0.8198292855509203,
      0.06034640630945672,
      0.5694192249991229
    ],
    [
      0.795614453991252,
      0.09566823904150946,
      0.5982016621833298
    ],
    [
      0.7855884223078049,
      0.22309820842721204,
      0.5771291191167729
    ],
    [
      0.788208408866983,
      0.26965049799472446,
      0.5531872315252551
    ],
    [
      0.7796425271140737,
      0.2761931883299191,
      0.5620274482935284
    ],
    [
      0.7459927741780839,
      0.3143172534368605,
      0.58711110112652
    ],
    [
      0.7332616575694324,
      0.3366757042770493,
      0.5907425934263426
    ],
    [
      0.7163993700967767,
      0.3541073417193271,
      0.6011488443517239
    ],
    [
      0.7158793976635094,
      0.36015037304420233,
      0.5981708759184561
    ],
    [
      0.701121494968827,
      0.40051045287304005,
      0.5899322218968119
    ],
    [
      0.6737405141572489,
      0.4253906431066022,
      0.6042487239047156
    ],
    [
      0.660426328391778,
      0.42177680123065564,
      0.6212418166145866
    ],
    [
      0.6422681352793741,
      0.4368943477980224,
      0.6297737460921153
    ],
    [
      0.6222770701987649,
      0.43578167999468626,
      0.6502811509538396
    ],
    [
      0.6135076426032743,
      0.4425980808336658,
      0.653999473478174
    ],
    [
      0.5740862488265771,
      0.4424645573013549,
      0.6889485426650857
    ],
    [
      0.1795323883959572,
      0.7376964443731358,
      0.6508241524990266
    ],
    [
      0.11795385127903057,
      0.7622510968893276,
      0.6364433629628494
    ],
    [
      0.18490270101507095,
      0.7682842458651089,
      0.612821596154062
    ],
    [
      0.11071155089236102,
      0.7631979621913784,
      0.6366096315686213
    ],
    [
      0.10981688966292369,
      0.7637610589005986,
      0.6360890626726713
    ],
    [
      0.07765463391039809,
      0.7632691538327749,
      0.6413968791938746
    ],
    [
      0.01530561277133025,
      0.7667746084186785,
      0.6417339309262651
    ],
    [
      -0.017699966546879463,
      0.7634033704289879,
      0.6456794910804438
    ],
    [
      -0.04174941365965562,
      0.7572425424619222,
      0.65179806561916
    ],
    [
      -0.04964844609786304,
      0.7599095741813884,
      0.6481299799172451
    ],
    [
      0.13676605186630722,
      0.5061671008205644,
      0.8515221154519753
    ],
    [
      0.11702850606434786,
      0.4700200523087992,
      0.8748631202628103
    ],
    [
      0.07096016998160266,
      0.44018215592898613,
      0.8951001753311704
    ],
    [
      -0.0037996589974628086,
      0.48028565628734626,
      0.8771038997497024
    ],
    [
      -0.005971568045911885,
      0.4842498421677424,
      0.8749093842996483
    ],
    [
      -0.005321490925270521,
      0.49438376963482644,
      0.869227455880215
    ],
    [
      0.07077176705954356,
      0.4228942381585992,
      0.9034112133018538
    ],
    [
      0.018854056493423563,
      0.38297262474286475,
      0.9235672651471054
    ],
    [
      -0.010864367717427596,
      0.3844591647895566,
      0.9230780661046047
    ],
    [
      -0.013222356762678699,
      0.39182004450030095,
      0.9199468582529224
    ],
    [
      -0.0785941489749366,
      0.4264602316860346,
      0.9010852515368338
    ],
    [
      -0.08184408414209274,
      0.4508423656445662,
      0.8888434661012891
    ],
    [
      0.24847106501472066,
      0.6526825944487692,
      0.7157286921411451
    ],
    [
      0.008923442732521877,
      0.6479953263695336,
      0.7615920359175514
    ],
    [
      -0.6195975308198083,
      0.7051639194431572,
      0.3447357633283226
    ],
    [
      -0.6164773418235467,
      0.7188160071040341,
      0.3213397500297574
    ],
    [
      -0.6464701533355,
      0.7114682928836853,
      0.2754799612813057
    ],
    [
      -0.6860732328485513,
      0.674884041718207,
      0.27172605580406656
    ],
    [
      -0.7001339211274875,
      0.6659136100886109,
      0.2576267773066353
    ],
    [
      -0.7157120744331439,
      0.653185240527098,
      0.24719479781775933
    ],
    [
      -0.7264546488663053,
      0.6415450940477591,
      0.2463402838428684
    ],
    [
      -0.7422075114310681,
      0.6429077086128007,
      0.18920277001550212
    ],
    [
      -0.7826703732104116,
      0.6116488633420859,
      0.1153809120739193
    ],
    [
      -0.8298561210343225,
      0.5394287855831938,
      0.1426723647596436
    ],
    [
      -0.8609108434842153,
      0.493959278847579,
      0.12180620021853066
    ],
    [
      -0.8878199041444219,
      0.44377505666990247,
      0.12181755572418226
    ],
    [
      -0.8932360767681355,
      0.4318860928756551,
      0.12491482674394724
    ],
    [
      -0.8945838129687965,
      0.4295384020418064,
      0.12335543257425209
    ],
    [
      -0.9047610378243143,
      0.4210146082934301,
      0.06445280473803751
    ],
    [
      -0.930192337702019,
      0.36680144734365877,
      0.014103655804436772
    ],
    [
      -0.9331118678682024,
      0.3592829833866229,
      0.01476414211262896
    ],
    [
      -0.9434337262721082,
      0.32931192728620945,
      -0.0385546194296779
    ],
    [
      -0.9591301836248325,
      0.2783348597544167,
      -0.050980356072552364
    ],
    [
      -0.9751038702851338,
      0.21793893534100997,
      -0.04092752884526573
    ],
    [
      -0.9731332512382752,
      0.22241828882504527,
      -0.05951285685095949
    ],
    [
      -0.9697441426610447,
      0.22302744680700545,
      -0.09927263341598104
    ],
    [
      -0.9672682012694845,
      0.20971120317518233,
      -0.14287560350078388
    ],
    [
      -0.9680451268312634,
      0.18226106936438938,
      -0.17224846882452238
    ],
    [
      -0.968265649038872,
      0.18044069476188063,
      -0.17292422781432876
    ],
    [
      -0.9674719137299044,
      0.15378088534306428,
      -0.2008719379278736
    ],
    [
      -0.9675331334400821,
      0.1530445090531128,
      -0.20113928990703947
    ],
    [
      -0.9652022912915299,
      0.12555194050845214,
      -0.22939321506998162
    ],
    [
      -0.9607074983204613,
      0.11840915220566105,
      -0.251038593337314
    ],
    [
      -0.9608059253557827,
      0.06324452763766113,
      -0.26991128825061633
    ],
    [
      -0.9248265696411185,
      -0.07600208169224931,
      -0.37271906265213467
    ],
    [
      -0.8888765519725902,
      -0.31665410514089765,
      -0.3311021791694166
    ],
    [
      -0.7823626233566497,
      -0.12335247447878879,
      -0.6104857841215149
    ],
    [
      -0.7579755218970703,
      -0.05382277425705753,
      -0.6500586259531811
    ],
    [
      -0.9246959261872619,
      -0.0946972809606261,
      -0.36874092405284525
    ],
    [
      -0.9249410608970003,
      -0.09813966058390483,
      -0.3672228763124755
    ],
    [
      -0.6652075265156938,
      0.6681686611038815,
      0.33324103436629576
    ],
    [
      -0.6647713033429664,
      0.6527817503132444,
      0.36325624662168
    ],
    [
      -0.6651620155834976,
      0.6519398451107062,
      0.364052099818044
    ],
    [
      -0.6635334277169623,
      0.6317527058847358,
      0.4007641562184589
    ],
    [
      -0.6613416568144024,
      0.6139064711075882,
      0.4309826651899229
    ],
    [
      -0.663593446965857,
      0.6316166683960692,
      0.40087918547640056
    ],
    [
      -0.6650144504470644,
      0.5855174584585892,
      0.46360013647192044
    ],
    [
      -0.6679406234747582,
      0.5994567246654576,
      0.44102943072488143
    ],
    [
      -0.6680770981914452,
      0.5552485534350622,
      0.49535041615039443
    ],
    [
      -0.6717112055640496,
      0.5698269353733423,
      0.4733934093781999
    ],
    [
      -0.6673388729481579,
      0.524937094606468,
      0.5282990397098999
    ],
    [
      -0.6728712211329764,
      0.5429614618996828,
      0.5024312596393428
    ],
    [
      -0.6666334673027454,
      0.4927868910792354,
      0.5592503019689675
    ],
    [
      -0.6723462764515508,
      0.511225621690753,
      0.5353492768918605
    ],
    [
      -0.6627959735491784,
      0.45833986259274373,
      0.5921368657713024
    ],
    [
      -0.6703698016793072,
      0.4814431623338543,
      0.5646386547504736
    ],
    [
      -0.6557218319092825,
      0.42565754484261475,
      0.6235740001604398
    ],
    [
      -0.6645997454745548,
      0.4521598420907892,
      0.5948601982950191
    ],
    [
      -0.6420569370641542,
      0.3912350610427681,
      0.6593163251267621
    ],
    [
      -0.6464399456590723,
      0.392243270659448,
      0.6544162385505686
    ],
    [
      -0.6568563559385389,
      0.4214741445685369,
      0.6252193799966246
    ],
    [
      -0.6237103813141341,
      0.3582617587535338,
      0.6947185562915404
    ],
    [
      -0.6303765817659229,
      0.35970514209712484,
      0.6879226525634972
    ],
    [
      -0.5999028863911061,
      0.32493627225572874,
      0.7311176005761115
    ],
    [
      -0.6124283777496781,
      0.3274473324053583,
      0.7195204838137079
    ],
    [
      -0.5741621898987084,
      0.29088713528800453,
      0.7653250644103182
    ],
    [
      -0.5891515182512668,
      0.29463169070527667,
      0.7523912913998789
    ],
    [
      -0.5473394293103265,
      0.2535594583377384,
      0.7975757959026332
    ],
    [
      -0.5635290906353538,
      0.25915990039044223,
      0.7843921914688514
    ],
    [
      -0.5153907690085735,
      0.21588761904723755,
      0.8293159175868181
    ],
    [
      -0.5383056567893401,
      0.2236795360118743,
      0.8125235289135385
    ],
    [
      -0.47511205552575203,
      0.1767925733772979,
      0.8619819723710743
    ],
    [
      -0.5072587786747029,
      0.18598947485437547,
      0.8414846681317744
    ],
    [
      -0.40878622811437815,
      0.16078940817931703,
      0.8983543765805143
    ],
    [
      -0.436608368476593,
      0.1413192772086286,
      0.888482973649714
    ],
    [
      -0.46892877115339104,
      0.14929814016357848,
      0.870526204618946
    ],
    [
      -0.3503667647910654,
      0.0960757608992288,
      0.9316719263224993
    ],
    [
      -0.3928287117974339,
      0.10804020476493141,
      0.9132430768102873
    ],
    [
      -0.4230216423950899,
      0.09476891423936099,
      0.9011501223210555
    ],
    [
      -0.43300356144995295,
      0.09792003099098245,
      0.8960578013177397
    ],
    [
      -0.5196458351525637,
      0.7829464840732052,
      -0.34199855129225437
    ],
    [
      -0.5193099748951003,
      0.7768335553647802,
      -0.35615555201872884
    ],
    [
      -0.5064352558343879,
      0.7723767514755909,
      -0.3833503429344643
    ],
    [
      -0.47013448988951895,
      0.7831926511821719,
      -0.40691870508808375
    ],
    [
      -0.5297041119452588,
      0.7857846926547858,
      -0.31930545027873947
    ],
    [
      -0.5476626864893245,
      0.7805464305188446,
      -0.30135170753056356
    ],
    [
      -0.5866122888170202,
      0.766311547073384,
      -0.2620164793116146
    ],
    [
      -0.551415875711441,
      0.7784849273954578,
      -0.2998362050044545
    ],
    [
      -0.6334456446803912,
      0.7267964317460428,
      -0.26554389851145727
    ],
    [
      -0.7145485101551055,
      -0.005092282437011273,
      -0.6995673629427697
    ],
    [
      -0.6659565730385314,
      0.6712872832547334,
      -0.3253847356088703
    ],
    [
      -0.6398275765549712,
      0.6956656802462593,
      -0.3266036337937802
    ],
    [
      -0.6790552109984915,
      0.6554547974024115,
      -0.3305495862619672
    ],
    [
      -0.6876501756614147,
      0.6408828384473978,
      -0.34118385556241115
    ],
    [
      -0.696961894653383,
      0.5991704386874583,
      -0.3940036837445119
    ],
    [
      0.2393434492949942,
      -0.7741482339782969,
      -0.5860112841130779
    ],
    [
      0.23900826127816385,
      -0.7614873054129246,
      -0.6025048835783428
    ],
    [
      0.2650584393858635,
      -0.7338587890650761,
      -0.6254560747344857
    ],
    [
      0.29209523050586694,
      -0.7193581215809278,
      -0.6302414372534415
    ],
    [
      0.3479508327924835,
      -0.7347049366000878,
      -0.5823563119727287
    ],
    [
      0.362844974231377,
      -0.7226704498854977,
      -0.5882949477407772
    ],
    [
      0.4270170780930302,
      -0.7024343636726338,
      -0.5694228479335132
    ],
    [
      0.45987176329792284,
      -0.7101591335524404,
      -0.5330965825751524
    ],
    [
      0.16416011605473116,
      -0.9835077809918044,
      0.07592035975595705
    ],
    [
      0.16544596922845528,
      -0.9855573434394098,
      0.0361158422123882
    ],
    [
      0.16597866934616753,
      -0.985492537148281,
      0.03543360759391437
    ],
    [
      0.16689372448652806,
      -0.9859748745302895,
      -0.00017754434599991434
    ],
    [
      0.1726981998928559,
      -0.9849502426592939,
      -0.006953505530666097
    ],
    [
      0.17324999715528117,
      -0.9841706036281715,
      -0.03731837938409893
    ],
    [
      0.1816873692770823,
      -0.9822476621358768,
      -0.04668222438763577
    ],
    [
      0.18187880184002117,
      -0.9804495526363329,
      -0.0750917850130939
    ],
    [
      0.1929208231968724,
      -0.9773593869624907,
      -0.08689179876919102
    ],
    [
      0.1931965877179522,
      -0.9746539455589587,
      -0.11280409966173197
    ],
    [
      0.2046853406318775,
      -0.9707490389481843,
      -0.12549985940864208
    ],
    [
      0.20527565810295234,
      -0.9672909882457285,
      -0.14903036015859908
    ],
    [
      0.21804456908986306,
      -0.9621386664077125,
      -0.16354128681652377
    ],
    [
      0.21891705507984288,
      -0.9581438538035522,
      -0.18448761046109916
    ],
    [
      0.23152067766743636,
      -0.9522273250487772,
      -0.19915144298463341
    ],
    [
      0.2325042068181102,
      -0.9467103072232443,
      -0.22289322109286275
    ],
    [
      0.24438426284682788,
      -0.9336970292080989,
      -0.26169866205386494
    ],
    [
      0.24312418243721354,
      -0.9409105921502082,
      -0.23574963307242094
    ],
    [
      0.25198643829360057,
      -0.9288892291167387,
      -0.2714178235617855
    ],
    [
      0.2533904726926402,
      -0.9197744318308682,
      -0.29968026778352275
    ],
    [
      0.2609507190703411,
      -0.9143794010882327,
      -0.3095400347001931
    ],
    [
      0.2617658178530245,
      -0.9089478193905878,
      -0.32448808642049193
    ],
    [
      0.24682707855260597,
      -0.9064040884519379,
      -0.34279443071729926
    ],
    [
      0.2516258297929229,
      -0.8893967005025707,
      -0.3816516093457009
    ],
    [
      0.2512446791707263,
      -0.8893030997311213,
      -0.382120541186964
    ],
    [
      0.25580181341778213,
      -0.870819131563931,
      -0.41980885216299946
    ],
    [
      0.25401861419556726,
      -0.8702785389349378,
      -0.4220068818294714
    ],
    [
      0.2583579300448122,
      -0.8498454046289637,
      -0.45936256727555924
    ],
    [
      0.25932568193227473,
      -0.8492091918995345,
      -0.4599934120003246
    ],
    [
      0.26375356143152145,
      -0.8272021056839436,
      -0.49615595852941086
    ],
    [
      0.2705631622247594,
      -0.8224319067413262,
      -0.5004011730809241
    ],
    [
      0.27608641400148204,
      -0.8018590679592532,
      -0.5299040735221047
    ],
    [
      0.3021719474317641,
      -0.7809737659774905,
      -0.5466004857665525
    ],
    [
      0.3457810661633806,
      -0.7602352965410245,
      -0.5499797706971562
    ],
    [
      0.36661267791841057,
      -0.7730060262876408,
      -0.5177420474642589
    ],
    [
      0.43732536820246,
      -0.7481681456322817,
      -0.4989899279421737
    ],
    [
      0.4564373828708067,
      -0.7544235324610528,
      -0.471709708599511
    ],
    [
      0.4871930461731523,
      -0.7400806405344333,
      -0.46359851301170885
    ],
    [
      0.511920714296882,
      -0.7375475608230473,
      -0.4404097839487032
    ],
    [
      0.5209975055830961,
      -0.7325702540913277,
      -0.43806668670050625
    ],
    [
      0.5457031149511353,
      -0.7296684799620031,
      -0.4120582721928633
    ],
    [
      0.5522958205125617,
      -0.7257453870122129,
      -0.41019868341432975
    ],
    [
      0.5749607013357928,
      -0.722196675560353,
      -0.3845154791800032
    ],
    [
      0.581734435681837,
      -0.7178460299146738,
      -0.3824684610234884
    ],
    [
      0.6086877595542153,
      -0.7104525398235153,
      -0.3532087202026394
    ],
    [
      0.6042679194231528,
      -0.7134834189567772,
      -0.3546853428459678
    ],
    [
      0.6312711225623483,
      -0.7050672563725947,
      -0.3230741924234964
    ],
    [
      0.6339950786457773,
      -0.7030798763320567,
      -0.3220697560309479
    ],
    [
      0.655735636964975,
      -0.6967201014541776,
      -0.29084682333458417
    ],
    [
      0.6583225206417171,
      -0.694708160442792,
      -0.2898137861284859
    ],
    [
      0.6793937094732062,
      -0.6871962506170638,
      -0.2572654284315834
    ],
    [
      0.6794882363449641,
      -0.6875373641813142,
      -0.25610175618964637
    ],
    [
      0.698625387245445,
      -0.6794005653313709,
      -0.22436006802362476
    ],
    [
      0.7001346638998057,
      -0.6907233135651303,
      -0.180866681573785
    ],
    [
      0.6983450506145789,
      -0.69404641547714,
      -0.1749678926130576
    ],
    [
      -0.5301381609473498,
      -0.6338081409170718,
      -0.5632413078020886
    ],
    [
      -0.5857169226556738,
      -0.705475818051291,
      -0.3990483136909981
    ],
    [
      -0.36212570276957595,
      0.3260868132360918,
      -0.8732309921361993
    ],
    [
      -0.332440866234942,
      0.40792674055840433,
      -0.8503404287662428
    ],
    [
      -0.36892452133449954,
      0.28776180459839695,
      -0.8837917409505389
    ],
    [
      -0.35937466116672834,
      0.317605407871417,
      -0.8774831381867859
    ],
    [
      -0.35900259733210815,
      0.24139397777568988,
      -0.9015797705153049
    ],
    [
      -0.3528809793814795,
      0.262579986809936,
      -0.8980683520298784
    ],
    [
      -0.3337908887634943,
      0.20188763627224973,
      -0.9207741443475053
    ],
    [
      -0.29594553546668856,
      0.13940969859184507,
      -0.9449768124011646
    ],
    [
      -0.32650023120032834,
      0.20148566800486006,
      -0.9234723193549266
    ],
    [
      -0.24663516650459902,
      0.15747305420532512,
      -0.956228702687017
    ],
    [
      -0.24841918202399513,
      0.15838721636454492,
      -0.9556157175846471
    ],
    [
      -0.03486455235949344,
      0.14731941391404396,
      -0.9884743058232696
    ],
    [
      -0.04248532247661642,
      0.16532728398252522,
      -0.9853232396249565
    ],
    [
      -0.075746029435234,
      0.16863348184977614,
      -0.982764105889108
    ],
    [
      -0.10482515133355888,
      0.16068381446615215,
      -0.9814236594949725
    ],
    [
      -0.22162684252855125,
      0.4274439089109446,
      -0.8764549317596181
    ],
    [
      -0.11973880934136069,
      0.45164900321212387,
      -0.8841243099445961
    ],
    [
      -0.28861206089970814,
      0.3841173517492717,
      -0.8770159282409582
    ],
    [
      -0.26072723969829664,
      0.3932834812570333,
      -0.8816742084521106
    ],
    [
      -0.29991271609090875,
      0.31239266278881517,
      -0.9013673984356698
    ],
    [
      -0.2850633122175569,
      0.3545072158731663,
      -0.8905411511667566
    ],
    [
      -0.3007759652751225,
      0.27772551729562645,
      -0.91236086925936
    ],
    [
      -0.2947284811908173,
      0.2926174642526877,
      -0.9096758444573985
    ],
    [
      -0.2857413698550699,
      0.23109970221555864,
      -0.9300240841984837
    ],
    [
      -0.2550725085316892,
      0.22283314432826126,
      -0.940895002208074
    ],
    [
      -0.13622268875727533,
      0.1663015133442011,
      -0.9766202873825461
    ],
    [
      0.02880068233670177,
      0.1093274501575168,
      -0.993588460751732
    ],
    [
      0.17070544227142154,
      0.11146909275701042,
      -0.9789965747329494
    ],
    [
      0.1568526946770092,
      0.16660572863928938,
      -0.9734679056636292
    ],
    [
      0.05418570522744339,
      0.11028903969991448,
      -0.9924214009537861
    ],
    [
      0.15618766400279085,
      0.09043446225929333,
      -0.9835786809651904
    ],
    [
      0.13411013294437485,
      0.25391230758823763,
      -0.957884655006467
    ],
    [
      0.14263718934369835,
      0.1899569067137154,
      -0.9713758313896258
    ],
    [
      0.1573777596530795,
      0.1744188400709296,
      -0.9720135333393712
    ],
    [
      0.21953530750043238,
      0.1956091270649265,
      -0.9557935541577941
    ],
    [
      0.21874722228629007,
      0.24847239184036124,
      -0.9436159829269333
    ],
    [
      0.13939897692171122,
      0.2584263398609744,
      -0.9559203691203784
    ],
    [
      0.22608108763419438,
      0.2575536715375145,
      -0.9394431585208792
    ],
    [
      0.22883814956423845,
      0.3133901151264972,
      -0.9216397002326973
    ],
    [
      0.14810173254191392,
      0.3123764769368632,
      -0.938342588543543
    ],
    [
      0.10379438275032737,
      0.3873657093717527,
      -0.916064699304802
    ],
    [
      0.10125585832316883,
      0.37808814697091764,
      -0.9202155205577311
    ],
    [
      0.13739524515429957,
      0.39084043948861996,
      -0.9101463055296837
    ],
    [
      0.24155356322877242,
      0.10969262573370525,
      -0.964167726047252
    ],
    [
      0.25382838607322783,
      0.16664570167038123,
      -0.9527855795184175
    ],
    [
      0.27877075879866775,
      0.17372869433111215,
      -0.9445132104977791
    ],
    [
      0.2946409904494662,
      0.20052593636864233,
      -0.9343318658755233
    ],
    [
      0.2912392340863648,
      0.24019360295483325,
      -0.9260057999971509
    ],
    [
      0.2918564271336447,
      0.24081183915742851,
      -0.9256508434946734
    ],
    [
      0.09971963655346562,
      0.3950712688736178,
      -0.9132221452616194
    ],
    [
      0.03933925276466529,
      0.45992438018425835,
      -0.8870862346491707
    ],
    [
      -0.5267372067442957,
      0.5672045636171505,
      -0.6331089148346395
    ],
    [
      -0.5807737011334128,
      0.5348308578996804,
      -0.6137245811519114
    ],
    [
      -0.5811415928475265,
      0.5339486661778038,
      -0.6141443404848603
    ],
    [
      -0.617900021218683,
      0.5052688881646991,
      -0.6024142382370787
    ],
    [
      -0.6292093472940178,
      0.479553290954887,
      -0.611656961386179
    ],
    [
      -0.6577574780176089,
      0.43849750593507786,
      -0.6124337004122414
    ],
    [
      -0.6885427807574497,
      0.4202962874352152,
      -0.5909821231094672
    ],
    [
      -0.6927048610971674,
      0.42213435892994644,
      -0.5847756479395813
    ],
    [
      -0.7194546983020046,
      0.405554729721925,
      -0.5638353467913729
    ],
    [
      -0.7491290876346544,
      0.39253972906771434,
      -0.5335898904243931
    ],
    [
      -0.7245139443289124,
      0.4086363029486817,
      -0.5550638849586549
    ],
    [
      -0.7548229568774821,
      0.3971023987060582,
      -0.5220651192261646
    ],
    [
      -0.39449549398173833,
      0.8140600180366967,
      -0.4262388910718931
    ],
    [
      -0.40058502943297286,
      0.7935101865184175,
      -0.45811921820164936
    ],
    [
      -0.41075215194188425,
      0.784920382703124,
      -0.46387785298749973
    ],
    [
      -0.4157611741114024,
      0.7691289054370123,
      -0.48536931600871874
    ],
    [
      -0.4457866997747949,
      0.741469927080043,
      -0.5014943325101615
    ],
    [
      -0.44558273794533226,
      0.7407379851654027,
      -0.5027556672761042
    ],
    [
      -0.45618933862401584,
      0.7137394890469809,
      -0.5314764614738243
    ],
    [
      -0.4756547618938656,
      0.6933668498321707,
      -0.5412900876992874
    ],
    [
      -0.4758143204465702,
      0.6929932958162989,
      -0.5416281237266324
    ],
    [
      -0.5167149653096489,
      0.6466696467764899,
      -0.5610918040419216
    ],
    [
      -0.5780155665648222,
      0.6158450669445276,
      -0.535381040315062
    ],
    [
      -0.6541432104783018,
      0.49911268143525694,
      -0.5683161016684711
    ],
    [
      -0.6884021298135709,
      0.4785945226489105,
      -0.5450227431572016
    ],
    [
      -0.710478051946304,
      0.4752674505463224,
      -0.5189814911475976
    ],
    [
      -0.7161299056556657,
      0.4691088612146582,
      -0.5168121849913118
    ],
    [
      -0.7436030553165421,
      0.450517686799938,
      -0.49405294251156595
    ],
    [
      0.18013417330225628,
      -0.976707029723822,
      0.11659784602119308
    ],
    [
      0.18429352412061953,
      -0.9782550701429132,
      0.09514680607821974
    ],
    [
      0.2976789658516708,
      -0.9457937231283549,
      0.12985170996365308
    ],
    [
      0.3286802251010508,
      -0.9379573633102178,
      0.11047757346930936
    ],
    [
      0.3147724619270521,
      -0.9427556515003224,
      0.11013663684980271
    ],
    [
      0.3571476638517879,
      -0.9245481289652222,
      0.13287702371786123
    ],
    [
      0.3356276714640765,
      -0.9356434721174407,
      0.10920329313542664
    ],
    [
      0.39661431982816975,
      -0.9044420013833756,
      0.15710425659692392
    ],
    [
      0.4539675502701771,
      -0.8775036854659383,
      0.15459865877616752
    ],
    [
      0.4539839072895873,
      -0.8775081849338157,
      0.15452507012209882
    ],
    [
      0.4966990096274386,
      -0.859867171185926,
      0.11797686956278809
    ],
    [
      0.481012178967249,
      -0.8684931685211283,
      0.1197785453130492
    ],
    [
      0.5203444172386955,
      -0.8495636759914732,
      0.08650576792548399
    ],
    [
      0.5697699361105617,
      -0.8190309498060435,
      0.06745756565706136
    ],
    [
      0.5216673487302144,
      -0.8495511522878452,
      0.0782688757756462
    ],
    [
      0.6016176600478054,
      -0.79850470719227,
      0.0211287413347441
    ],
    [
      0.597081240644071,
      -0.8018569236979167,
      0.02279179652091026
    ],
    [
      0.5716810142170506,
      -0.8184413424879801,
      0.05774588201973772
    ],
    [
      0.6213791914947359,
      -0.7834792074546378,
      -0.0069449163854524085
    ],
    [
      0.621485295820985,
      -0.7833945923632674,
      -0.006995693982212538
    ],
    [
      0.6391052043316823,
      -0.7684068177781478,
      -0.03309834117020096
    ],
    [
      0.639992244100184,
      -0.7674412683138475,
      -0.037997725990427826
    ],
    [
      0.6566613658075516,
      -0.7514554154856287,
      -0.06411403273139167
    ],
    [
      0.6692053192489027,
      -0.7372361689396955,
      -0.09298963327218274
    ],
    [
      0.6584861385103915,
      -0.7488657787182884,
      -0.07480675674245699
    ],
    [
      0.6736822816978414,
      -0.7288423978555002,
      -0.12223314777356904
    ],
    [
      0.6678065758916388,
      -0.7266949735067241,
      -0.16108628953435605
    ],
    [
      -0.0507051241934563,
      -0.8641280273396892,
      0.5007112368886316
    ],
    [
      -0.02420971344458197,
      -0.8534654969474921,
      0.5205867221655788
    ],
    [
      -0.02057473946733097,
      -0.8479321624209437,
      0.5297053218799995
    ],
    [
      0.0038878964186307187,
      -0.8368789230540578,
      0.5473742343308813
    ],
    [
      0.008191722716033654,
      -0.8268866152110438,
      0.5623090086987463
    ],
    [
      0.029334509510111264,
      -0.8164366485244794,
      0.5766894185763397
    ],
    [
      0.03383972307674731,
      -0.8022558173748071,
      0.5960205337321602
    ],
    [
      0.05018625293456426,
      -0.7937167106462947,
      0.6062137603661056
    ],
    [
      0.055473953302163,
      -0.773334653617688,
      0.6315664288252187
    ],
    [
      0.06664153945374633,
      -0.7671278945948342,
      0.6380232743041054
    ],
    [
      0.07836498183118348,
      -0.737376060369711,
      0.6709213629153886
    ],
    [
      0.07343361554863694,
      -0.7403272534195686,
      0.6682238112726101
    ],
    [
      0.08697122720868017,
      -0.704954915750559,
      0.7038995470924373
    ],
    [
      0.08328410582257155,
      -0.7008218472174284,
      0.708457829500166
    ],
    [
      0.0924293028633559,
      -0.6682227988325958,
      0.7381972060991061
    ],
    [
      0.05731795826163763,
      -0.6302524893739554,
      0.7742715617266654
    ],
    [
      0.02566940265015885,
      -0.6170775423927504,
      0.7864835589140484
    ],
    [
      0.04590918919694037,
      -0.5546522137444901,
      0.8308148218078538
    ],
    [
      0.26372403711861386,
      -0.7886773421116194,
      0.5553716613994736
    ],
    [
      0.2743291617398902,
      -0.7586581367696826,
      0.5909156814066138
    ],
    [
      0.2751769969801455,
      -0.7603466589329965,
      0.5883456285062535
    ],
    [
      0.28274004639286393,
      -0.7264537818338825,
      0.6263569022729859
    ],
    [
      0.28463997014023995,
      -0.7302294056069362,
      0.6210838128509742
    ],
    [
      0.28821071439460644,
      -0.6917169782263874,
      0.6621647877541557
    ],
    [
      0.29227256716925654,
      -0.6993697249438443,
      0.6522719787881922
    ],
    [
      0.29073617911269173,
      -0.6532521736404017,
      0.6990951807794439
    ],
    [
      0.2973719582930815,
      -0.6651086150307332,
      0.6849820790596188
    ],
    [
      0.2885820968870016,
      -0.6116750031453779,
      0.7365962692570491
    ],
    [
      0.29901988518323586,
      -0.6292758910306302,
      0.7173555333533093
    ],
    [
      0.28196342134951474,
      -0.5658026514537365,
      0.7748315872683544
    ],
    [
      0.2963826992964988,
      -0.5897024984902294,
      0.7512710954323361
    ],
    [
      0.26939705098689126,
      -0.5162761661170706,
      0.8129478145730051
    ],
    [
      0.2885095643686867,
      -0.5480151432768079,
      0.7851379713191118
    ],
    [
      0.14658448562659118,
      -0.47481748911630434,
      0.8677910696722316
    ],
    [
      0.1779342847458528,
      -0.43902825930871764,
      0.8806779081141636
    ],
    [
      0.2466081666720919,
      -0.4553717904829288,
      0.8554653380254523
    ],
    [
      0.2749119747264975,
      -0.502264796544181,
      0.8198496693323784
    ],
    [
      -0.2932754923614763,
      -0.20083324317964202,
      0.9346954017293978
    ],
    [
      -0.2232191058672896,
      -0.19870334566749998,
      0.9543009018105085
    ],
    [
      -0.20569564301986853,
      -0.21511725998419823,
      0.9546799814071382
    ],
    [
      -0.33799721023794127,
      -0.2329040333544085,
      0.9118736738817595
    ],
    [
      -0.36552794627665364,
      -0.25140113137510856,
      0.8962068910882616
    ],
    [
      -0.36093919422843823,
      -0.23932143078418333,
      0.9013590576663315
    ],
    [
      -0.39100873239357015,
      -0.35038365290971507,
      0.8510837015039224
    ],
    [
      -0.3986467945102682,
      -0.31571805228600325,
      0.8610475275427139
    ],
    [
      -0.4216178209588014,
      -0.39590315541122967,
      0.8157812847726919
    ],
    [
      -0.4274290955055649,
      -0.36339273815692574,
      0.8277983366557985
    ],
    [
      -0.4472481012244492,
      -0.4372234308236899,
      0.7802594488308917
    ],
    [
      -0.45109979434072783,
      -0.40834136687495814,
      0.7935781647981778
    ],
    [
      -0.46967625819132647,
      -0.47517568532770643,
      0.7440512620543956
    ],
    [
      -0.4725885482434478,
      -0.4487039825537907,
      0.7585016810195729
    ],
    [
      -0.49234011607202377,
      -0.5086426151255875,
      0.7063171385322529
    ],
    [
      -0.49431043382639506,
      -0.4853725626712076,
      0.7211592545453089
    ],
    [
      -0.5106591934611554,
      -0.5409810577239821,
      0.668256450262505
    ],
    [
      -0.512726900214833,
      -0.5177148883583584,
      0.6848959192228999
    ],
    [
      -0.5261815927679563,
      -0.5712989221833263,
      0.6298813165544334
    ],
    [
      -0.5282549296705581,
      -0.5487855991959131,
      0.647905159258619
    ],
    [
      -0.5376259368138168,
      -0.600810963083381,
      0.5915949109854531
    ],
    [
      -0.5400093355385766,
      -0.5778757716982419,
      0.6119227974306451
    ],
    [
      -0.54663635738682,
      -0.6280195447837087,
      0.5538773728475754
    ],
    [
      -0.5489720732550175,
      -0.6065837689924736,
      0.5750528619013847
    ],
    [
      -0.5549599891406051,
      -0.653172472191273,
      0.515155444525825
    ],
    [
      -0.5570023236919281,
      -0.6338446797568724,
      0.5366463764395512
    ],
    [
      -0.5596692791219671,
      -0.6776313266756011,
      0.47705983179781825
    ],
    [
      -0.5620348168630089,
      -0.6580119436701845,
      0.5011358564512721
    ],
    [
      -0.5605365084842666,
      -0.7008490755259336,
      0.4411455496666742
    ],
    [
      -0.5635697884922679,
      -0.6806854910486304,
      0.46803456685875805
    ],
    [
      -0.5648306068893937,
      -0.7041281817815249,
      0.4303137101487739
    ],
    [
      -0.5610451893948382,
      -0.7241733485898229,
      0.40100032001123526
    ],
    [
      -0.558104652712135,
      -0.7453993529928881,
      0.36455315274847244
    ],
    [
      -0.5627139058535059,
      -0.7256392885153934,
      0.3959806600352666
    ],
    [
      -0.5593617359095688,
      -0.7466015686686253,
      0.36013962023329504
    ],
    [
      -0.5522632848713374,
      -0.7663097761926335,
      0.32829040664435505
    ],
    [
      -0.5542861615273185,
      -0.7638577536808906,
      0.33058763328487545
    ],
    [
      -0.5448441858713498,
      -0.786265167742396,
      0.29143077928936706
    ],
    [
      -0.5455671152152047,
      -0.785456114638557,
      0.29225881470481163
    ],
    [
      -0.5371672536678199,
      -0.8042819779046866,
      0.2541295764067956
    ],
    [
      -0.5296240519545952,
      -0.820253840077298,
      0.21606018011110395
    ],
    [
      -0.5376371283128046,
      -0.8047337951733863,
      0.2516939354958698
    ],
    [
      -0.5343116420145073,
      -0.8259227927047772,
      0.17989610806935943
    ],
    [
      -0.6120570168410755,
      -0.7881428214215,
      -0.06493921140082513
    ],
    [
      -0.6224730137403416,
      -0.7779134559121217,
      -0.08589529833393585
    ],
    [
      -0.713606706819692,
      -0.6424209286017619,
      -0.2793936621979891
    ],
    [
      -0.783598457334881,
      0.5775225012191808,
      0.2290004765233815
    ],
    [
      -0.7270476713375349,
      0.6407282187263262,
      0.24671650396853653
    ],
    [
      -0.7551349714300557,
      0.6085625793723326,
      0.24376784429252002
    ],
    [
      -0.8100296735234794,
      0.541154909830128,
      0.22583908337174807
    ],
    [
      -0.9645185782632942,
      0.19882075635203347,
      0.1737072797224085
    ],
    [
      -0.9779066902719983,
      0.1587548760644185,
      0.13599777368411975
    ],
    [
      -0.9970739640162962,
      0.056897537286335884,
      -0.05105076426048547
    ],
    [
      -0.9909062694548233,
      0.08644653715832898,
      0.10311043287882476
    ],
    [
      -0.9913595052405586,
      0.027718042971909503,
      0.1282109256771911
    ],
    [
      -0.9866047116508931,
      -0.14394735851915136,
      0.07674829590040924
    ],
    [
      -0.9602192017266004,
      -0.27906970470612386,
      -0.009959144078041994
    ],
    [
      -0.9052600254215537,
      -0.4084561140016185,
      -0.1169097485604379
    ],
    [
      -0.9922222804699383,
      0.014343595455009902,
      -0.12364953460671929
    ],
    [
      -0.9939270346766815,
      0.03603802384623287,
      -0.10397264340237292
    ],
    [
      -0.994724715148213,
      0.04180063177344583,
      -0.09367736256239916
    ],
    [
      -0.7962528062809412,
      -0.5629145278066147,
      -0.22160483495172695
    ],
    [
      -0.7506056295183622,
      -0.252916286473868,
      -0.6104298001995082
    ],
    [
      -0.7462885543881179,
      -0.6138477600515987,
      -0.2573797215573289
    ],
    [
      -0.2371001367436067,
      -0.47484462835683106,
      0.8475294119243449
    ],
    [
      -0.2171848242231195,
      -0.4996726837371304,
      0.8385451456267018
    ],
    [
      -0.2669179161101666,
      -0.5197051550993151,
      0.8115795572971284
    ],
    [
      -0.27385415901091553,
      -0.5654102579858897,
      0.7780200124397533
    ],
    [
      -0.27931676024463736,
      -0.5678286682762914,
      0.7743079173881753
    ],
    [
      -0.28544403564522913,
      -0.6067193806788984,
      0.7418984402350359
    ],
    [
      -0.29142126895842785,
      -0.6095095597763961,
      0.7372731790454902
    ],
    [
      -0.29760382406703023,
      -0.646291434645066,
      0.7026658846173638
    ],
    [
      -0.29777305313087216,
      -0.646376845959275,
      0.702515609674873
    ],
    [
      -0.3039161889029287,
      -0.679742619063405,
      0.667521476771753
    ],
    [
      -0.29727593565417865,
      -0.6885837783083885,
      0.6614222541852345
    ],
    [
      -0.30017552020084837,
      -0.7100111825190107,
      0.6370076748125616
    ],
    [
      -0.2858740628682329,
      -0.7283662814819477,
      0.6227026418599569
    ],
    [
      -0.2858579172585736,
      -0.73773146800433,
      0.6115860791881766
    ],
    [
      -0.267198595107289,
      -0.7785228737314189,
      0.5678970380708673
    ],
    [
      -0.26819955611949164,
      -0.759417349073548,
      0.5927514555219688
    ],
    [
      -0.22036208381732295,
      -0.8038573326719718,
      0.5524979101545907
    ],
    [
      -0.1660900305029626,
      -0.8169218358655533,
      0.5523158660165203
    ],
    [
      -0.1555141353075017,
      -0.8111067849551256,
      0.5638449584055174
    ],
    [
      -0.11216671496027968,
      -0.8177742194743002,
      0.564503280786054
    ],
    [
      -0.07141350665015185,
      -0.8144117896923726,
      0.5758763303678971
    ],
    [
      -0.04450875646282595,
      -0.8011053111983919,
      0.5968661918452581
    ],
    [
      -0.040916373318088214,
      -0.7945216981487606,
      0.6058556936806855
    ],
    [
      -0.01984990252697288,
      -0.7834963220446717,
      0.6210792982479305
    ],
    [
      -0.012600500597456299,
      -0.7670194444436866,
      0.6415001163133113
    ],
    [
      -0.00046843406823684764,
      -0.7604049207436456,
      0.6494491027620053
    ],
    [
      0.010507340429389968,
      -0.731302978692063,
      0.6819718096470095
    ],
    [
      0.009853230983978736,
      -0.730113893629132,
      0.683254430039707
    ],
    [
      0.021704742039793015,
      -0.6998678298910992,
      0.7139425220957983
    ],
    [
      -0.015429365468645918,
      -0.6390859633277111,
      0.76898053691802
    ],
    [
      0.5552444974511789,
      -0.5495163298541139,
      0.6242878753218362
    ],
    [
      0.5381254529063808,
      -0.5261481751669019,
      0.6584748246537917
    ],
    [
      0.5719026761832915,
      -0.47438820134248977,
      0.6692407365077433
    ],
    [
      0.5635719239315164,
      -0.5812352095811766,
      0.5869857900317987
    ],
    [
      0.543286668471817,
      -0.5809591381465312,
      0.6060743152987377
    ],
    [
      0.5819592150693961,
      -0.6001987891427786,
      0.5487120242051879
    ],
    [
      0.5893947911582511,
      -0.6269461069431891,
      0.5094628142900137
    ],
    [
      0.5810966867575227,
      -0.6155921085161732,
      0.5323279032438949
    ],
    [
      0.4399179690308487,
      -0.7015455360727532,
      0.5606300396341305
    ],
    [
      0.44601467259299044,
      -0.6892601219485988,
      0.5709565623785843
    ],
    [
      0.5026942629929455,
      -0.6564632037607596,
      0.5624540337326586
    ],
    [
      0.8187349672293368,
      -0.11675536499391179,
      0.5621754514216315
    ],
    [
      0.7978565005699852,
      -0.0960807324883697,
      0.5951415775617726
    ],
    [
      0.7689946262325492,
      -0.08209372218137924,
      0.6339620537570594
    ],
    [
      0.7963276721619683,
      -0.09041844307911634,
      0.5980691796943304
    ],
    [
      0.7472341478984402,
      -0.05170448815589712,
      0.6625464316702859
    ],
    [
      0.7604482978261178,
      -0.0580537458506179,
      0.646798383521536
    ],
    [
      0.7212398801684099,
      -0.01978364102029072,
      0.692402803866823
    ],
    [
      0.7385440244787527,
      -0.02986367651995674,
      0.6735435284608107
    ],
    [
      0.6876961690718802,
      0.010136473940517329,
      0.7259278414139474
    ],
    [
      0.7154386394260455,
      -0.006521202635616721,
      0.6986451367700158
    ],
    [
      0.6427742175039092,
      0.03085912102490705,
      0.7654338769363473
    ],
    [
      0.6586828261849232,
      0.03263807688332446,
      0.7517125051682992
    ],
    [
      0.6857819240041505,
      0.014076558465583207,
      0.7276709443223156
    ],
    [
      0.5909952028816898,
      0.036741261247233904,
      0.8058379178797637
    ],
    [
      0.6272303740792248,
      0.042244285137797696,
      0.7776872624684246
    ],
    [
      0.535914726479889,
      0.03648421988899253,
      0.8434834364948001
    ],
    [
      0.5810056908218414,
      0.04454335882463852,
      0.8126796886949091
    ],
    [
      0.4724132941042214,
      0.03573541052178752,
      0.8806524058835232
    ],
    [
      0.5242900170407541,
      0.04715503907432442,
      0.8502331329237321
    ],
    [
      0.4670688905814077,
      -0.03821624598106362,
      0.8833946852874811
    ],
    [
      0.39617810162578626,
      0.02402830995974247,
      0.9178592223825323
    ],
    [
      0.396296134585892,
      0.035147978264016576,
      0.9174497225113935
    ],
    [
      0.45888012337447304,
      0.05101794040804641,
      0.887032244131153
    ],
    [
      0.36118880428455885,
      0.07189528292830802,
      0.9297170085311709
    ],
    [
      0.3694268460382242,
      0.07174562683575905,
      0.9264860336001802
    ],
    [
      0.3702846691380177,
      -0.032372786324602464,
      0.9283540631175857
    ],
    [
      0.335122854854176,
      0.01002804781197431,
      0.9421210699328764
    ],
    [
      0.2223837518616907,
      -0.031141969311206115,
      0.9744617204669139
    ],
    [
      0.2161127032585349,
      -0.025307507249891028,
      0.9760403831640805
    ],
    [
      0.21549319333728875,
      -0.023455206726978192,
      0.9762236100928376
    ],
    [
      0.2450899700836471,
      0.03880913918193367,
      0.9687232614531119
    ],
    [
      0.28767397822911817,
      0.04555216786839028,
      0.9566444910479143
    ],
    [
      0.2908732909079069,
      0.020258641713753835,
      0.9565470799037117
    ],
    [
      0.24203480742413108,
      -0.028289337107925208,
      0.9698550744318235
    ],
    [
      0.1927313928105054,
      0.08766080395890496,
      0.9773280890645685
    ],
    [
      0.21839691318911994,
      0.10075977789286457,
      0.9706442476357878
    ],
    [
      0.29577438265434347,
      0.07003927554098317,
      0.9526867346862431
    ],
    [
      0.8009477091249835,
      -0.06715229345253576,
      0.5949565839046622
    ],
    [
      0.7876819158409963,
      -0.018639060398056358,
      0.6158001176392669
    ],
    [
      0.7906090148934777,
      0.00963402764044219,
      0.6122455153617606
    ],
    [
      0.7718890303904709,
      0.12859257403767796,
      0.6226164747781919
    ],
    [
      0.7454889914505178,
      0.15700029389095352,
      0.6477631290404263
    ],
    [
      0.7204512531624089,
      0.20459999062547352,
      0.6626377861643349
    ],
    [
      0.713088875832347,
      0.21262253552980526,
      0.6680538245897827
    ],
    [
      0.7056612108973834,
      0.22612516756812642,
      0.6714980744776006
    ],
    [
      0.6920906353407642,
      0.24172080778108107,
      0.6801335189205713
    ],
    [
      0.6818525882027848,
      0.24908474809323372,
      0.6877745533446943
    ],
    [
      0.7093878931288634,
      0.3533118192210835,
      0.6098684903164621
    ],
    [
      0.6687301223904343,
      0.36848779489279215,
      0.6457683550799949
    ],
    [
      0.6692826044795486,
      0.36868265719555454,
      0.6450844081391964
    ],
    [
      0.6644953393889963,
      0.2553448314875626,
      0.7023140045327951
    ],
    [
      0.6569591826988583,
      0.25547745490699447,
      0.7093207330269521
    ],
    [
      0.6458686871955742,
      0.25983602765335706,
      0.7178710731277513
    ],
    [
      0.6258394821317578,
      0.37494938515359527,
      0.6839136650031158
    ],
    [
      0.634329611552971,
      0.3793601439517698,
      0.6735813425919319
    ],
    [
      0.5434614249565219,
      0.33629606461315165,
      0.7691258911972303
    ],
    [
      0.6033596147350402,
      0.38143363677403447,
      0.700332461081248
    ],
    [
      0.6093266827694781,
      0.26073371056449035,
      0.7488250301909094
    ],
    [
      0.5366326014758539,
      0.33969518013729605,
      0.7724199865518417
    ],
    [
      -0.10506563280816895,
      0.3905442556857831,
      0.914568967958927
    ],
    [
      -0.03196870402182001,
      0.35692675191235307,
      0.9335851839722301
    ],
    [
      -0.09295549453932207,
      0.3661458282929491,
      0.9259030772487044
    ],
    [
      0.3321209487053303,
      0.43084183389605685,
      0.8390893811723241
    ],
    [
      0.33007893494240914,
      0.4308375599581545,
      0.8398969541774683
    ],
    [
      0.29542797730989656,
      0.46195461459830695,
      0.8362536961197319
    ],
    [
      0.31002799597995745,
      0.5339760780957563,
      0.7866080280102195
    ],
    [
      0.2874112621074677,
      0.3942610281150304,
      0.87289919700013
    ],
    [
      0.24722083149976032,
      0.3972612347765208,
      0.8837790288394498
    ],
    [
      0.2467094982194801,
      0.39796524104448144,
      0.8836051665810358
    ],
    [
      0.2640071296489011,
      0.4731803754776879,
      0.8404763933373397
    ],
    [
      0.23666006930931155,
      0.49569173803399397,
      0.8356325223681461
    ],
    [
      0.22321881112903333,
      0.5187154788294763,
      0.825292441732534
    ],
    [
      0.23607125432267453,
      0.5258165797833011,
      0.8171825299818337
    ],
    [
      0.21311225251688706,
      0.4256375595588813,
      0.8794406379738989
    ],
    [
      0.17275775744715494,
      0.5296531042461669,
      0.8304350344272747
    ],
    [
      0.19681972073974938,
      0.42949801897303863,
      0.8813588651770414
    ],
    [
      0.15380385856204912,
      0.4017517027373558,
      0.9027402408439875
    ],
    [
      0.1460426807751006,
      0.4037575524845222,
      0.90313419501408
    ],
    [
      0.10646699171021802,
      0.3875411560089595,
      0.9156836965215749
    ],
    [
      0.09956546532018423,
      0.3547449928540237,
      0.9296465501256775
    ],
    [
      0.0636040116572224,
      0.3469061061928894,
      0.9357407136526633
    ],
    [
      0.04391997558343015,
      0.29742857566089087,
      0.9537333370104479
    ],
    [
      -0.02497807228064689,
      0.2827538278766165,
      0.9588672320640973
    ],
    [
      -0.09911870276347082,
      0.10789375473450229,
      0.9892089872477796
    ],
    [
      -0.17163570350343385,
      0.11308024689492906,
      0.9786490908620226
    ],
    [
      -0.13526501621299014,
      0.31976320606607517,
      0.9377925503197625
    ],
    [
      -0.05132265392100551,
      0.24171404460481014,
      0.9689893218375982
    ],
    [
      -0.05538905207011669,
      0.20482268140443627,
      0.9772306391497714
    ],
    [
      -0.9888264569202253,
      0.1054375801677144,
      0.10538099820636788
    ],
    [
      -0.9830181662569294,
      0.06470663631797818,
      -0.17172168187295672
    ],
    [
      -0.7848072974508262,
      -0.5788260899922195,
      -0.22144494442693785
    ],
    [
      -0.7066463685038439,
      0.6147080569843881,
      0.3504067844075054
    ],
    [
      -0.7270024833002694,
      0.6371524070700985,
      0.255937881994872
    ],
    [
      -0.7182959695130251,
      0.5809228921702038,
      0.38285701447661796
    ],
    [
      -0.7210712398508249,
      0.5849252924389748,
      0.3713740288781296
    ],
    [
      -0.7167605229160696,
      0.5645640130740478,
      0.4092943047866764
    ],
    [
      -0.7202052494665412,
      0.5694305751377119,
      0.3962994054236919
    ],
    [
      -0.7193390365312045,
      0.5449360936958552,
      0.43080854716435324
    ],
    [
      -0.7157851669946845,
      0.5409876854113593,
      0.4415698347301951
    ],
    [
      -0.7161811700828382,
      0.510364678000577,
      0.47603826218923206
    ],
    [
      -0.7185670198739255,
      0.5128416346807815,
      0.469739178361194
    ],
    [
      -0.7176711644905978,
      0.48754772672646307,
      0.497237683429733
    ],
    [
      -0.7138672754027454,
      0.4840284604560212,
      0.5060730802736249
    ],
    [
      -0.7108121338731312,
      0.45270056072222,
      0.5383384740667468
    ],
    [
      -0.7148491019294262,
      0.4558656867121177,
      0.5302614799786821
    ],
    [
      -0.705833099653366,
      0.42006483917110443,
      0.5703903631074735
    ],
    [
      -0.7109499145572986,
      0.42397793947168677,
      0.5610641013576902
    ],
    [
      -0.696340301643204,
      0.3885297404620216,
      0.6034524215577941
    ],
    [
      -0.7053476080154772,
      0.39462074787197027,
      0.5888626471562036
    ],
    [
      -0.6935863452318998,
      0.3429865737914027,
      0.633481011480763
    ],
    [
      -0.6941771593886316,
      0.34285801001339467,
      0.6329031966681677
    ],
    [
      -0.6645632730899941,
      0.32557911207376383,
      0.6725725967069827
    ],
    [
      -0.6466208318956104,
      0.2898512831049383,
      0.7055974301547941
    ],
    [
      -0.6629917014760829,
      0.3016796891552806,
      0.6851506176929434
    ],
    [
      -0.6270568144744646,
      0.25262731831663915,
      0.7368712163338179
    ],
    [
      -0.6448313504480849,
      0.26922477601250094,
      0.7153394644924308
    ],
    [
      -0.6037051910462479,
      0.21853373505969387,
      0.7666701043764996
    ],
    [
      -0.6258757749921914,
      0.24062004616698304,
      0.7418770165334162
    ],
    [
      -0.5723677567479615,
      0.182787848222132,
      0.7993645936477479
    ],
    [
      -0.6028915037567779,
      0.20978555212875222,
      0.7697479177080804
    ],
    [
      -0.5718588156872813,
      0.17574679968888868,
      0.8013055330645444
    ],
    [
      -0.5384570207299808,
      0.14447888894279456,
      0.8301746126426951
    ],
    [
      -0.4939135191044046,
      0.10960192846205921,
      0.8625757085168237
    ],
    [
      -0.5058729557604525,
      0.1091772349809875,
      0.855671013878634
    ],
    [
      -0.5384434335671439,
      0.1442703462808819,
      0.830219691426564
    ],
    [
      -0.4650013077966027,
      0.07577921081124275,
      0.8820608227079777
    ],
    [
      -0.4685589488577248,
      0.07592814369153708,
      0.8801632964631627
    ],
    [
      -0.3817771647044252,
      -0.005989980840156083,
      0.9242349899456224
    ],
    [
      -0.23993875559808617,
      0.010608397072271646,
      0.9707300631347516
    ],
    [
      -0.354592365310156,
      -0.020362555134512128,
      0.9347992409133327
    ],
    [
      -0.3820125494119122,
      -0.00862931940794189,
      0.9241168470157695
    ],
    [
      -0.3946498766331627,
      -0.013484649623241179,
      0.9187326265557177
    ],
    [
      -0.22618749154248563,
      -0.07618019712230699,
      0.9711003018412282
    ],
    [
      -0.2639182379854848,
      -0.10410972460538602,
      0.9589099691322578
    ],
    [
      -0.3058057602610992,
      -0.10555052343894342,
      0.9462250916102871
    ],
    [
      -0.3370655834625298,
      -0.07044028904030436,
      0.9388423499848005
    ],
    [
      -0.01603939115170428,
      0.028795115506994973,
      0.9994566420082571
    ],
    [
      -0.011062782278489341,
      0.022623905176507357,
      0.9996828365850957
    ],
    [
      -0.0033566466663228307,
      -0.050042098725209816,
      0.9987414686886361
    ],
    [
      -0.04409034190312195,
      -0.11592089685303855,
      0.9922793898009034
    ],
    [
      -0.07086834323765155,
      -0.1414482452785746,
      0.9874057280745148
    ],
    [
      -0.0740611014302914,
      -0.14235648572787996,
      0.9870408219654038
    ],
    [
      -0.20514432305042063,
      -0.09272037943906838,
      0.9743298917496372
    ],
    [
      -0.5987062778616902,
      0.7150178742908555,
      -0.36097123471765313
    ],
    [
      -0.6096425948458464,
      0.7028501324218254,
      -0.36652093787974205
    ],
    [
      -0.6020836346290107,
      0.6962365863418591,
      -0.3908323332977388
    ],
    [
      -0.5696129118532356,
      0.7132724193227381,
      -0.4083914623049385
    ],
    [
      -0.5397563105784596,
      0.7347573794218951,
      -0.41084634424051863
    ],
    [
      0.2294576849214745,
      -0.9704118309818593,
      0.0751668086386043
    ],
    [
      0.2147723478570192,
      -0.9759727657868029,
      0.036742333056595605
    ],
    [
      0.22275779122366113,
      -0.9747966171704721,
      0.012268724553102312
    ],
    [
      0.21847169173378603,
      -0.9758429420989789,
      0.0008199186462453168
    ],
    [
      0.2286281372216812,
      -0.9730530770085698,
      -0.02994802488810227
    ],
    [
      0.226279422470841,
      -0.973381874293381,
      -0.03640535349872679
    ],
    [
      0.23738170081856272,
      -0.9688283888963826,
      -0.07086240882813757
    ],
    [
      0.23730968191497895,
      -0.9688303839870219,
      -0.07107602924313698
    ],
    [
      0.24868961631568592,
      -0.9626302081774384,
      -0.10722199886692373
    ],
    [
      0.25340660753864974,
      -0.9610486821811409,
      -0.11032008762526085
    ],
    [
      0.2632617671451827,
      -0.9542405497308611,
      -0.14183869432894355
    ],
    [
      0.28942562470381616,
      -0.943877479054241,
      -0.15914808292598673
    ],
    [
      0.2865698695858265,
      -0.9420307133429778,
      -0.1745160306793699
    ],
    [
      0.29913038051602736,
      -0.9304575582585957,
      -0.2115886285502812
    ],
    [
      0.30821822781049335,
      -0.9258130699948022,
      -0.21879598595988528
    ],
    [
      0.3187036104219904,
      -0.9149085789320895,
      -0.24773029871304156
    ],
    [
      0.3243958619285991,
      -0.9115092898478035,
      -0.2528203696001451
    ],
    [
      0.33267643103417366,
      -0.902239058486866,
      -0.2743921893478351
    ],
    [
      0.3224958772440397,
      -0.9021577769354564,
      -0.28654450732036824
    ],
    [
      0.31330689931190503,
      -0.8900989509205443,
      -0.33100248399929927
    ],
    [
      0.28746648975966926,
      -0.8952922650456668,
      -0.3403157025684434
    ],
    [
      0.3296648918493442,
      -0.8791090173381766,
      -0.34422143268057204
    ],
    [
      0.32611975540143756,
      -0.8714456524143318,
      -0.36637191489668813
    ],
    [
      0.2951191810259248,
      -0.8774627815097303,
      -0.378105456262925
    ],
    [
      0.28735502000686713,
      -0.8822399921064432,
      -0.37293389334421717
    ],
    [
      0.2956007063022161,
      -0.862367562138666,
      -0.41102604565239537
    ],
    [
      0.35694298189338014,
      -0.8474273601724647,
      -0.3930121841726922
    ],
    [
      0.302483316002147,
      -0.857528870815526,
      -0.41611065746769127
    ],
    [
      0.3167250102561002,
      -0.8314410979778188,
      -0.456498596352401
    ],
    [
      0.3038085237596729,
      -0.8415229636763883,
      -0.4466984245509227
    ],
    [
      0.3613223054486381,
      -0.8452878717996479,
      -0.39361733368044527
    ],
    [
      0.3670026837416221,
      -0.8316943764303175,
      -0.41664552600577875
    ],
    [
      0.3195219988949436,
      -0.820613190625246,
      -0.4738139757267966
    ],
    [
      0.3904011046599904,
      -0.810432315791641,
      -0.43679107019358493
    ],
    [
      0.3645663720155677,
      -0.780756866290272,
      -0.5074545064693003
    ],
    [
      0.4451496637342884,
      -0.7935118424346861,
      -0.4149466625882895
    ],
    [
      0.45702392104685213,
      -0.7974491154520106,
      -0.3939594444302189
    ],
    [
      0.4789000822596202,
      -0.7897038784930812,
      -0.3834351255489172
    ],
    [
      0.48631761488153014,
      -0.7856062841531483,
      -0.3825152856488516
    ],
    [
      0.5158439784703102,
      -0.7742673997802042,
      -0.36662649046887436
    ],
    [
      0.5398239513457792,
      -0.7709353669915031,
      -0.33800704352883854
    ],
    [
      0.5451928763493469,
      -0.7674268851977243,
      -0.3373732405713953
    ],
    [
      0.5769868500996872,
      -0.7521775668170231,
      -0.31830030284192895
    ],
    [
      0.590547619257071,
      -0.750098232586732,
      -0.2976678532526922
    ],
    [
      0.6024331620683158,
      -0.7436299511089544,
      -0.2899806563446338
    ],
    [
      0.6180246161577599,
      -0.740458828521023,
      -0.26413310487011604
    ],
    [
      0.6260702042938173,
      -0.7356688042852279,
      -0.2585101732950581
    ],
    [
      0.6440722166350483,
      -0.7306841759059451,
      -0.22643236261512006
    ],
    [
      0.6502570215768202,
      -0.7394101969552382,
      -0.17446594661611914
    ],
    [
      -0.21899020776952705,
      0.3678548919557434,
      -0.9037289789341093
    ],
    [
      -0.11857084700287672,
      0.40489128019159837,
      -0.9066443654850721
    ],
    [
      -0.22852332927601662,
      0.32741022763063626,
      -0.9168312989964186
    ],
    [
      -0.22537038102971663,
      0.3292591714493591,
      -0.9169496111406569
    ],
    [
      -0.24204015943478263,
      0.2963484840208061,
      -0.9239015841740694
    ],
    [
      -0.23352831396450058,
      0.23765978789602216,
      -0.9428586064697694
    ],
    [
      -0.22047101733163119,
      0.2604182017865312,
      -0.9399866438918295
    ],
    [
      -0.038628292562294025,
      0.17155360188520413,
      -0.9844171964639458
    ],
    [
      -0.0029942683809629695,
      0.26679832057967584,
      -0.9637477317704708
    ],
    [
      -0.003440248929235204,
      0.2798419286564909,
      -0.9600399260724111
    ],
    [
      -0.041457109199480764,
      0.3290810191128891,
      -0.9433912184011704
    ],
    [
      -0.11168572431973094,
      0.38033528184522286,
      -0.918080264664747
    ],
    [
      -0.1582102682219058,
      0.32396674821109217,
      -0.9327459767175001
    ],
    [
      -0.166315430714847,
      0.27806187958859857,
      -0.9460553729173524
    ],
    [
      -0.4683947312236161,
      0.7773985200124014,
      -0.41983081931235655
    ],
    [
      -0.4821764888630869,
      0.7429109119516462,
      -0.46431585207791337
    ],
    [
      -0.4955082167996609,
      0.7340393699088278,
      -0.4643897183485777
    ],
    [
      -0.5206583410236785,
      0.7056603104360932,
      -0.4805813335926684
    ],
    [
      -0.526762959096249,
      0.7013385420372966,
      -0.480255176314803
    ],
    [
      -0.5875091735928377,
      0.6224394954993447,
      -0.5171093166698721
    ],
    [
      -0.601034537284722,
      0.6219889206358825,
      -0.5018837191991288
    ],
    [
      -0.6651127349926996,
      0.562311025691057,
      -0.49135665268397677
    ],
    [
      -0.6998499755535542,
      0.5392749250899873,
      -0.4683936025255662
    ],
    [
      0.3070395337330164,
      -0.9462862687335087,
      0.1013361847092407
    ],
    [
      0.4178529418109726,
      -0.9058802054415394,
      0.06913734453325816
    ],
    [
      0.3920509601738589,
      -0.9181098864678481,
      0.0580541212727435
    ],
    [
      0.45512071032618306,
      -0.8875469283283728,
      0.07159321928130374
    ],
    [
      0.5016809162233206,
      -0.8636915264384325,
      0.04850984905954855
    ],
    [
      0.5057863398304434,
      -0.8623930734379068,
      0.02140946816817778
    ],
    [
      0.5371376542917969,
      -0.8434844707788033,
      0.00413375094899585
    ],
    [
      0.5537040404617761,
      -0.8324579296934452,
      -0.02063082322173894
    ],
    [
      0.5501402832057426,
      -0.8348699711008543,
      -0.018379340259217312
    ],
    [
      0.5707528476382165,
      -0.8195889654747196,
      -0.0501509180867675
    ],
    [
      0.5697678402208312,
      -0.8203135214794031,
      -0.04950085583250394
    ],
    [
      0.5878544108530417,
      -0.8047598687530524,
      -0.08239384251989397
    ],
    [
      0.5994554522472927,
      -0.7925356381500339,
      -0.11198403025928341
    ],
    [
      0.5882770282772094,
      -0.8036896487539316,
      -0.08951584489417191
    ],
    [
      0.6010186171053202,
      -0.7815180595873623,
      -0.16735036430080624
    ],
    [
      0.35719676005831047,
      -0.7207283221857239,
      0.5941053443651195
    ],
    [
      0.35855390765210327,
      -0.7229663804186711,
      0.5905579633632352
    ],
    [
      0.3612910574978121,
      -0.6868121732478536,
      0.6306804344917266
    ],
    [
      0.3644401901137796,
      -0.6914893505031219,
      0.6237193487223262
    ],
    [
      0.3629693603631041,
      -0.6514257345923798,
      0.66625652398185
    ],
    [
      0.3679161916398898,
      -0.6584336632564096,
      0.6565841812136087
    ],
    [
      0.3628829607926018,
      -0.6120152653955381,
      0.7026757941534802
    ],
    [
      0.36963338834545123,
      -0.6219420142434383,
      0.6903327379887729
    ],
    [
      0.358115884770152,
      -0.5708590782195548,
      0.7388321364759464
    ],
    [
      0.3687348064337394,
      -0.5867095135792482,
      0.7209761363595016
    ],
    [
      0.3469781824455132,
      -0.5261626394351285,
      0.7763755648972133
    ],
    [
      0.3633404925696504,
      -0.5491395067722159,
      0.7526150998759003
    ],
    [
      0.35203339866903693,
      -0.5067546170084478,
      0.7869385264187719
    ],
    [
      0.33122945077707144,
      -0.477366447602475,
      0.8138847127457998
    ],
    [
      0.30801779309849,
      -0.42432460274764966,
      0.8515125780854826
    ],
    [
      0.3353567365834579,
      -0.4629139114902489,
      0.8205160387078921
    ],
    [
      0.1804724552936692,
      -0.41899400722391633,
      0.8898728643973359
    ],
    [
      0.295095334286628,
      -0.35396154909538097,
      0.8874851916760422
    ],
    [
      0.31244168416373214,
      -0.35392768290719767,
      0.8815414847123604
    ],
    [
      0.32483225698532575,
      -0.3712962987849135,
      0.8698408264334593
    ],
    [
      0.15731230768601212,
      -0.3613406548919388,
      0.9190678805032664
    ],
    [
      0.17226476400888555,
      -0.3349344970647971,
      0.9263604772208897
    ],
    [
      0.2097222794905338,
      -0.31362067283029954,
      0.9260986119516456
    ],
    [
      0.2485175337288592,
      -0.31398120940832797,
      0.9163268170078889
    ],
    [
      0.19799226122307995,
      -0.23643375460476673,
      0.9512613437848007
    ],
    [
      0.2193794735266356,
      -0.2560426751394372,
      0.9414429324726045
    ],
    [
      0.1442798194255135,
      -0.24207966702103767,
      0.959469003418831
    ],
    [
      0.07868959149343635,
      -0.11066972815909407,
      0.990737179810967
    ],
    [
      0.16262496082015387,
      -0.1780759343305501,
      0.970485488675923
    ],
    [
      0.13957596425974664,
      -0.23916756192892094,
      0.9608940771604005
    ],
    [
      0.11439979560197847,
      -0.23869845652670996,
      0.9643317549567638
    ],
    [
      0.27371347443758665,
      -0.24778008884219285,
      0.9293470619121038
    ],
    [
      0.2775520225062679,
      -0.2523816149326487,
      0.9269673107756651
    ],
    [
      0.21392432264892813,
      -0.14966309138756967,
      0.9653172241576927
    ],
    [
      0.2320305801010036,
      -0.17878208621686245,
      0.9561374250315371
    ],
    [
      0.310284341437431,
      -0.26167976137322846,
      0.9139186670302725
    ],
    [
      0.3240232452278812,
      -0.3280432150398617,
      0.8873536981487729
    ],
    [
      0.2710403025958208,
      -0.19383282604545546,
      0.9428499296897668
    ],
    [
      0.21512849452846627,
      -0.11692222073199547,
      0.9695612023699247
    ],
    [
      0.06274684017399192,
      -0.08427575806223679,
      0.9944648966410101
    ],
    [
      0.23977857923803278,
      -0.11107635503506698,
      0.9644523193453962
    ],
    [
      0.32378769372231164,
      -0.16066700226371503,
      0.9323881400884386
    ],
    [
      0.3239795942163199,
      -0.1614156070203068,
      0.932192160630894
    ],
    [
      0.21842046985303396,
      -0.11280659985141185,
      0.9693127304328275
    ],
    [
      0.32205905062049844,
      -0.07526723288746165,
      0.9437228467971345
    ],
    [
      0.052933692223734514,
      -0.07644653251710148,
      0.9956675910632397
    ],
    [
      0.3929984401350152,
      -0.19628685776879415,
      0.8983449757853038
    ],
    [
      0.32399824847703357,
      -0.0707653129647135,
      0.9434073380384639
    ],
    [
      0.36850457394935826,
      -0.05359004802908913,
      0.9280799996393856
    ],
    [
      -0.3018131846128869,
      -0.16816229849076417,
      0.938419012467315
    ],
    [
      -0.2589580005341307,
      -0.15713388129306316,
      0.953021351969169
    ],
    [
      -0.23248988825479944,
      -0.18020535727062698,
      0.9557585893259012
    ],
    [
      -0.41459567415430726,
      -0.3024410364899566,
      0.8582772549819879
    ],
    [
      -0.41705342143397683,
      -0.2696124315687074,
      0.867972108085175
    ],
    [
      -0.44792132575028093,
      -0.3148925866338065,
      0.8367850051364337
    ],
    [
      -0.4467332983814529,
      -0.34816709725157347,
      0.8241413910905343
    ],
    [
      -0.47434349327919323,
      -0.39004590115505755,
      0.7892163489030312
    ],
    [
      -0.4745164188494419,
      -0.357615892924828,
      0.8043289385381326
    ],
    [
      -0.4993363636280024,
      -0.39774228782346027,
      0.7697170054219428
    ],
    [
      -0.5000057071604048,
      -0.4278118729305184,
      0.7529749625231276
    ],
    [
      -0.5225654001536691,
      -0.46125904484443137,
      0.7170533425843844
    ],
    [
      -0.5213405466804162,
      -0.4351115156361539,
      0.7340858283251175
    ],
    [
      -0.5439485369073617,
      -0.49343455880212217,
      0.6787063616735116
    ],
    [
      -0.5427831593498578,
      -0.4677388525559728,
      0.697572080673968
    ],
    [
      -0.5629370453855839,
      -0.5218816474418255,
      0.6408911210150716
    ],
    [
      -0.5614696362885822,
      -0.4994417975596225,
      0.6597800681866499
    ],
    [
      -0.5807273452993343,
      -0.5485019515316959,
      0.60158237971828
    ],
    [
      -0.5789182865435378,
      -0.5282036409891916,
      0.6211719014501987
    ],
    [
      -0.5946260304585211,
      -0.5731814596837437,
      0.56381104829185
    ],
    [
      -0.5927726937423207,
      -0.5544888745922877,
      0.5840912784033426
    ],
    [
      -0.601519144668837,
      -0.5770610883467467,
      0.5524266638323487
    ],
    [
      -0.603194590111277,
      -0.5977890326831968,
      0.5280194682624653
    ],
    [
      -0.6106864722225058,
      -0.6230453809152151,
      0.4887499217029553
    ],
    [
      -0.609678284895669,
      -0.6008983433815683,
      0.5169270449956763
    ],
    [
      -0.6183130975086153,
      -0.6459816144778842,
      0.4476568632399685
    ],
    [
      -0.6179010570932896,
      -0.6259132982198184,
      0.47584748266076166
    ],
    [
      -0.6373490897393934,
      -0.6549915318578952,
      0.4059214591553576
    ],
    [
      -0.6245270637432724,
      -0.6866069202249945,
      0.37220543218947605
    ],
    [
      -0.6419385599665349,
      -0.654255286701655,
      0.39983109565293506
    ],
    [
      -0.6221881487293774,
      -0.7074248112013968,
      0.3353088786140001
    ],
    [
      -0.6227681384347368,
      -0.7065057723241276,
      0.3361687662814921
    ],
    [
      -0.6189389926339238,
      -0.7292273253738608,
      0.29179107478706245
    ],
    [
      -0.6296321096280854,
      -0.735279487152954,
      0.2508535076441538
    ],
    [
      -0.6483280087411757,
      -0.7312790632585616,
      0.21190027069681333
    ],
    [
      -0.8023723420919333,
      -0.5879404684555803,
      -0.10258962032358922
    ],
    [
      -0.830944048176637,
      0.48943710380539207,
      0.26454358850369547
    ],
    [
      -0.8593409948425885,
      0.44710918477268213,
      0.24824671493266107
    ],
    [
      -0.192180400423299,
      -0.38154478810023185,
      0.9041516843797227
    ],
    [
      -0.1667898547851303,
      -0.4584937285620898,
      0.8729058627423623
    ],
    [
      -0.19676618215585784,
      -0.5069721374141068,
      0.8392033850298625
    ],
    [
      -0.15158371765660283,
      -0.5585604674156048,
      0.8154952978294014
    ],
    [
      -0.17951299284138109,
      -0.5904464876819574,
      0.7868596003005685
    ],
    [
      -0.19033202065791124,
      -0.6374871284698699,
      0.746581464374462
    ],
    [
      -0.19140451812936085,
      -0.637708373487249,
      0.7461181815395699
    ],
    [
      -0.23459336330810912,
      -0.6652585361814444,
      0.7087997135506697
    ],
    [
      -0.23860365350593835,
      -0.6951899157967496,
      0.6780702600085969
    ],
    [
      -0.2340866536262888,
      -0.7008769357218938,
      0.6737766392263346
    ],
    [
      -0.24073043101628933,
      -0.7230836894788476,
      0.6474556645766327
    ],
    [
      -0.2113408329608468,
      -0.7508539496181452,
      0.6257422781515146
    ],
    [
      -0.1555367227541243,
      -0.7657577059752622,
      0.6240380305834017
    ],
    [
      -0.13010925765381054,
      -0.7384541179385685,
      0.661632146114701
    ],
    [
      -0.12689200470467019,
      -0.729900811121313,
      0.6716719623942029
    ],
    [
      -0.1181709415278685,
      -0.7211240785378417,
      0.682653420068607
    ],
    [
      -0.11164059897087977,
      -0.706666195658177,
      0.6986839518519244
    ],
    [
      -0.11153254575844125,
      -0.6993767734068923,
      0.7059976062676174
    ],
    [
      -0.027654130861437462,
      -0.6401313068007028,
      0.7677676465571618
    ],
    [
      0.5079639447901358,
      -0.6473080403856515,
      0.5683000366402694
    ],
    [
      0.5081538599897183,
      -0.6173354978543196,
      0.6005635167628061
    ],
    [
      0.5207792235528659,
      -0.5933984557231925,
      0.6137322486728268
    ],
    [
      0.7638771574310227,
      0.008210015001309223,
      0.6453094482562446
    ],
    [
      0.7390427070556214,
      0.042772332196633844,
      0.6722993416227327
    ],
    [
      0.7136187344777909,
      0.07873994876587746,
      0.6960950526118278
    ],
    [
      0.7200822260357327,
      0.07559575516718153,
      0.689758558879937
    ],
    [
      0.7389212084327843,
      0.044526244549936776,
      0.6723190174868721
    ],
    [
      0.6808518673158439,
      0.11592145555612712,
      0.7231894294818456
    ],
    [
      0.6982032345944258,
      0.10446619153671843,
      0.7082365833728831
    ],
    [
      0.6783990316462136,
      0.11602259724117656,
      0.7254746796345765
    ],
    [
      0.6606798869363283,
      0.1288899099164384,
      0.7395197618181227
    ],
    [
      0.6256803501083558,
      0.1279975192699537,
      0.7695068125423083
    ],
    [
      0.5739195368989894,
      0.11810522877206785,
      0.8103502453275047
    ],
    [
      0.6038628058840316,
      0.1436911069836288,
      0.7840297044396237
    ],
    [
      0.5184304400409808,
      0.11254194208317544,
      0.8476816561133443
    ],
    [
      0.5305351567202867,
      0.12513179755512707,
      0.8383760974195313
    ],
    [
      0.4559936960377857,
      0.10377532826701094,
      0.8839120037746255
    ],
    [
      0.4675655435817173,
      0.11748739161026664,
      0.8761159599435163
    ],
    [
      0.3962083207500829,
      0.11279921759000709,
      0.911205412121483
    ],
    [
      0.15366200499186625,
      0.06557804122562999,
      0.985944982608507
    ],
    [
      0.026404721899997652,
      0.03688906852952884,
      0.998970463669676
    ],
    [
      0.3039529888849784,
      0.009095336414659788,
      0.9526436140569002
    ],
    [
      0.3176958957751023,
      -0.0637202797123332,
      0.9460491761853806
    ],
    [
      0.3169190002614731,
      0.08671177832682427,
      0.9444804999430471
    ],
    [
      0.1717252605512097,
      0.0835500421941368,
      0.9815955507936948
    ],
    [
      0.5897389592489248,
      0.21170549594008567,
      0.7793514886960552
    ],
    [
      0.23027938512678955,
      0.3635567493775386,
      0.902661561587545
    ],
    [
      0.18333144533647788,
      0.3529036579356944,
      0.9175230729341058
    ],
    [
      0.17281481615661815,
      0.33688372448759957,
      0.9255508605647328
    ],
    [
      0.127320481948952,
      0.3297247867466225,
      0.9354523290265415
    ],
    [
      0.12011864915012513,
      0.29744616197802115,
      0.9471522004677463
    ],
    [
      0.07013632576194923,
      0.28063512870761287,
      0.9572485676896442
    ],
    [
      0.08328461906441693,
      0.22296452711360268,
      0.9712623187771172
    ],
    [
      0.24351932997509323,
      0.5872090346752392,
      0.7719351562950448
    ],
    [
      0.22642595961514106,
      0.5985968254668885,
      0.7683834494269941
    ],
    [
      0.21140956085745152,
      0.5997641272229466,
      0.7717441216326539
    ],
    [
      -0.7399163939080929,
      0.5775501057446742,
      0.3449052121675743
    ],
    [
      -0.7662629049669359,
      0.5503836755946748,
      0.3315402993763024
    ],
    [
      -0.8178114281912149,
      0.4925620283306309,
      0.29760227849709114
    ],
    [
      -0.7860812744541509,
      0.5174295993573927,
      0.33814618090610754
    ],
    [
      -0.9108329104716826,
      0.2682762844571436,
      0.31370566523343757
    ],
    [
      -0.9120426773081559,
      0.2642097891391338,
      0.3136420604632379
    ],
    [
      -0.8937885508572116,
      0.3278500418892095,
      0.30603329294344644
    ],
    [
      -0.775969529692612,
      0.512321205510156,
      0.3679650409661857
    ],
    [
      -0.7659410325726296,
      0.4968865444281982,
      0.40796825438724804
    ],
    [
      -0.7741606875117206,
      0.500085607653988,
      0.38805877767256036
    ],
    [
      -0.7632476759304581,
      0.477727459396481,
      0.4350051260908751
    ],
    [
      -0.7763560125984545,
      0.430025073034713,
      0.46081425570799994
    ],
    [
      -0.7725590888296037,
      0.40468758756826395,
      0.48926517425109184
    ],
    [
      -0.7809352879609675,
      0.40511077559561853,
      0.47542121904016577
    ],
    [
      -0.7765706887031454,
      0.4295475493359918,
      0.46089789358009225
    ],
    [
      -0.7543606401473094,
      0.3882025012323282,
      0.5293758991808237
    ],
    [
      -0.7446397900275397,
      0.3557274993222581,
      0.5647738745141055
    ],
    [
      -0.7504516350775111,
      0.36018473672824064,
      0.5541563848206552
    ],
    [
      -0.7406376570812732,
      0.33160631450140526,
      0.5843741208301045
    ],
    [
      -0.7186898935653987,
      0.31572527406073064,
      0.6195178675439735
    ],
    [
      -0.7243557237996158,
      0.28166262700782707,
      0.6292654050126897
    ],
    [
      -0.7044343761600883,
      0.26268417543233896,
      0.6593703311958914
    ],
    [
      -0.6961523043823741,
      0.22307374129958563,
      0.6823562669498361
    ],
    [
      -0.6935415548101656,
      0.1590558949590425,
      0.7026388361244176
    ],
    [
      -0.7028489564845679,
      0.16684947874706396,
      0.6914944654951238
    ],
    [
      -0.6416814584177578,
      0.15177243151469288,
      0.7518045191105047
    ],
    [
      -0.689314437401138,
      0.1518120762267228,
      0.7083775122786469
    ],
    [
      -0.6110010651590194,
      0.12340597840007063,
      0.7819518289956645
    ],
    [
      -0.5815173899389413,
      0.0863791548697481,
      0.8089352055650622
    ],
    [
      -0.5824449884676756,
      0.08655179160760608,
      0.8082491093582491
    ],
    [
      -0.6088828163071628,
      0.11427843326445532,
      0.784985449353349
    ],
    [
      -0.5475309020001902,
      0.04846353781238314,
      0.8353808693389896
    ],
    [
      -0.5304639764725061,
      -0.02068351484380557,
      0.8474551090640039
    ],
    [
      -0.5242243017342537,
      -0.020060381255092536,
      0.8513439155682823
    ],
    [
      -0.436358942970312,
      -0.04527719713557744,
      0.8986327661004677
    ],
    [
      -0.37662540717255416,
      -0.14355152615405478,
      0.9151755361737711
    ],
    [
      -0.3976728467911012,
      -0.13807634233872101,
      0.9070784037840509
    ],
    [
      -0.43402582576531573,
      -0.09340838415316403,
      0.8960448963855722
    ],
    [
      -0.3198690152589836,
      -0.15332956938867273,
      0.9349726499894702
    ],
    [
      -0.33982976352804917,
      -0.15897310819042823,
      0.9269537651321907
    ],
    [
      -0.3682195802803816,
      -0.15082326905631732,
      0.9174239381056641
    ],
    [
      -0.44048965287150194,
      -0.20372729340531964,
      0.8743363515460664
    ],
    [
      -0.4757543511482171,
      -0.15780308881985988,
      0.8653068718798264
    ],
    [
      -0.47524797013039083,
      -0.14670166706975565,
      0.867535582996973
    ],
    [
      -0.4243725077498771,
      -0.19885293412661498,
      0.8833829776803018
    ],
    [
      -0.45091315899592876,
      -0.23671654449264115,
      0.8606059496702168
    ],
    [
      -0.47881892224900124,
      -0.2494488610771994,
      0.841728997601718
    ],
    [
      -0.5133869750930803,
      -0.21059374172569878,
      0.8319159150723988
    ],
    [
      -0.510726797271757,
      -0.18092449537084884,
      0.8404906100149705
    ],
    [
      -0.48832034503664623,
      -0.28039236144297436,
      0.8263917740803832
    ],
    [
      -0.5077011063807297,
      -0.29156048676581825,
      0.8106985069288472
    ],
    [
      -0.5433633932836563,
      -0.25761946012288717,
      0.7989921380121726
    ],
    [
      -0.5371452916371917,
      -0.2177277326871482,
      0.8149046386485415
    ],
    [
      -0.5314001898467782,
      -0.33095165560168255,
      0.7797979481156087
    ],
    [
      -0.5969285136438479,
      -0.27413686945820953,
      0.754006184591744
    ],
    [
      -0.5974068438638968,
      -0.2693240390764329,
      0.7553605926179454
    ],
    [
      -0.5945957171857164,
      -0.2579986716641112,
      0.7615068079301444
    ],
    [
      -0.5167514152460746,
      -0.3220072090885264,
      0.7932712853344668
    ],
    [
      -0.6127970139376163,
      -0.3169870792862432,
      0.7238777598978421
    ],
    [
      -0.5401664070227566,
      -0.36096579884833935,
      0.760213091695944
    ],
    [
      -0.5552527448865363,
      -0.3694306039422991,
      0.7451277864680629
    ],
    [
      -0.5628457842789353,
      -0.3970954513656753,
      0.7249274623189005
    ],
    [
      -0.5801531349460061,
      -0.40638157458044855,
      0.7058869285188928
    ],
    [
      -0.6303495012355946,
      -0.35202076433892987,
      0.6919110403558197
    ],
    [
      -0.6168230276434673,
      -0.31920190428679196,
      0.719471678989821
    ],
    [
      -0.6447472812933426,
      -0.3570555512184307,
      0.6758788919687801
    ],
    [
      -0.585655213800209,
      -0.42860477547909415,
      0.6879723228336637
    ],
    [
      -0.6021477421116135,
      -0.43842396695640623,
      0.6672349824972412
    ],
    [
      -0.6543121935612324,
      -0.3799431139653385,
      0.6538492054804457
    ],
    [
      -0.6322390645024947,
      -0.4724212903231959,
      0.6140780811642579
    ],
    [
      -0.6726501840648856,
      -0.46817775876079076,
      0.5730194726876201
    ],
    [
      -0.699885403272243,
      -0.41935682814415925,
      0.5781870570804225
    ],
    [
      -0.7010261417060041,
      -0.3964422371671563,
      0.5927865562196006
    ],
    [
      -0.606018482064223,
      -0.4557373576382713,
      0.6519547992380003
    ],
    [
      0.34700507285214377,
      -0.8953226902923704,
      -0.2792575149615679
    ],
    [
      0.3801154927144406,
      -0.8688218311903231,
      -0.317270921840549
    ],
    [
      0.3870955445045522,
      -0.8647983952829922,
      -0.3198136565887795
    ],
    [
      0.39461214343048795,
      -0.8480891314236703,
      -0.35359027336486587
    ],
    [
      0.4295047378523228,
      -0.8268307093124319,
      -0.3631482593931963
    ],
    [
      0.28558738362434083,
      -0.9581896826208183,
      0.017674230778707882
    ],
    [
      0.28993174061914584,
      -0.9569154785340371,
      -0.015885613728372223
    ],
    [
      0.29067049431689124,
      -0.956731316700436,
      -0.013260896584480673
    ],
    [
      0.2954318485524706,
      -0.9539970653174717,
      -0.05108446169356819
    ],
    [
      0.30077408908922537,
      -0.9519060118645148,
      -0.058394279760442126
    ],
    [
      0.30437709814915254,
      -0.9488407300441596,
      -0.08399911387370373
    ],
    [
      0.31912694874957803,
      -0.9421062510865855,
      -0.10292619805163067
    ],
    [
      0.323469218946408,
      -0.9365113022673192,
      -0.1353301338201157
    ],
    [
      0.34341243522860987,
      -0.9281371330077579,
      -0.14362925072037186
    ],
    [
      0.3645040515918507,
      -0.9153859967967841,
      -0.170895503865618
    ],
    [
      0.4022989265560681,
      -0.8961537814840678,
      -0.18725376798249235
    ],
    [
      0.43454722794801737,
      -0.8756403795342528,
      -0.2107667725515664
    ],
    [
      0.42884900423743805,
      -0.8834599134511993,
      -0.1886454687750473
    ],
    [
      0.4570701972429318,
      -0.8532979783641963,
      -0.25093703375923426
    ],
    [
      0.48147747265625424,
      -0.8361651946642071,
      -0.26269223543286246
    ],
    [
      0.4798682871942946,
      -0.8348614977714529,
      -0.26969001925177005
    ],
    [
      0.5087523688098967,
      -0.8211038639240359,
      -0.2587652833734407
    ],
    [
      0.5408449492304946,
      -0.808658998122048,
      -0.23142464356267053
    ],
    [
      0.558783047963782,
      -0.8036437167926411,
      -0.20473954617517126
    ],
    [
      0.5616016618882476,
      -0.8035913030713243,
      -0.19709031176719327
    ],
    [
      -0.6183767522243608,
      0.6438228300863078,
      -0.4506687872130801
    ],
    [
      0.4764637320050222,
      -0.8790827908805384,
      -0.01399138526129164
    ],
    [
      0.39754208708483924,
      -0.9173849571365824,
      0.019108359839112504
    ],
    [
      0.496681000728692,
      -0.8655444498963752,
      -0.0643489608985747
    ],
    [
      0.47923602766580864,
      -0.8769215173387599,
      -0.03662625035931907
    ],
    [
      0.51390048558591,
      -0.8523149472459366,
      -0.09729091229771766
    ],
    [
      0.4973382027567311,
      -0.8647463066287973,
      -0.06977490416015475
    ],
    [
      0.5174154452716269,
      -0.8460877668805914,
      -0.12812785696084247
    ],
    [
      0.5164248402239809,
      -0.8459700495965121,
      -0.1328158860427122
    ],
    [
      0.43361243307328284,
      -0.6722863726917562,
      0.6000094090739152
    ],
    [
      0.4347253043085168,
      -0.6386964810297466,
      0.6348863795310827
    ],
    [
      0.43851526939171537,
      -0.6435564807097802,
      0.6273271990331312
    ],
    [
      0.4386497509050208,
      -0.6098311660749252,
      0.6600699545613785
    ],
    [
      0.43447450111362806,
      -0.6045910195330275,
      0.6676088727556565
    ],
    [
      0.43225948410832093,
      -0.5645748195312418,
      0.7031408191462604
    ],
    [
      0.43844249026886123,
      -0.5722884231403766,
      0.6930037110047398
    ],
    [
      0.4219461031493958,
      -0.5228928213408917,
      0.7406379570527032
    ],
    [
      0.43562683834773513,
      -0.538540026967397,
      0.7212516184142062
    ],
    [
      0.4082631384396294,
      -0.4802455072458877,
      0.7763281925587683
    ],
    [
      0.42511209515117115,
      -0.4998260344088298,
      0.7546215222767801
    ],
    [
      0.387896517110231,
      -0.4334275123806272,
      0.8134352362206185
    ],
    [
      0.4114603324196294,
      -0.4596281746075095,
      0.7870465907124539
    ],
    [
      0.35698780429939314,
      -0.3756510582429162,
      0.8552461575607782
    ],
    [
      0.39108531430102395,
      -0.4159663037055079,
      0.8209898361853492
    ],
    [
      0.07801087433391361,
      -0.2569101068308375,
      0.9632816309334596
    ],
    [
      0.10317103000387777,
      -0.3507431071211913,
      0.9307711917409732
    ],
    [
      0.06913144572170733,
      -0.2724439315701456,
      0.9596849208792584
    ],
    [
      -0.3776860142210291,
      -0.2202512131443655,
      0.8993568133784654
    ],
    [
      -0.6723314309525295,
      -0.47292088371546537,
      0.5694877388487898
    ],
    [
      -0.6803080008729363,
      -0.5134102461230519,
      0.5230592156956383
    ],
    [
      -0.6606456691008279,
      -0.562864512557737,
      0.49672008254293526
    ],
    [
      -0.6816855779739112,
      -0.5152585957366983,
      0.5194356093894799
    ],
    [
      -0.6606500748127808,
      -0.5886177002255858,
      0.46590844769225803
    ],
    [
      -0.7040377885881347,
      -0.6020460055449166,
      0.37665819976118803
    ],
    [
      -0.8230701817891117,
      -0.5242152230615912,
      0.21852660195071155
    ],
    [
      -0.8209870174864763,
      -0.507746054375059,
      0.26110201336875954
    ],
    [
      -0.1316893511538114,
      -0.5588508815569723,
      0.8187451416501249
    ],
    [
      0.5240013601531245,
      0.20551497817876768,
      0.8265507657136713
    ],
    [
      0.5172949805688506,
      0.19556012510596674,
      0.8331639337770276
    ],
    [
      0.45480630335439487,
      0.17722546200392345,
      0.8727785297809554
    ],
    [
      0.4637630198232597,
      0.19213175871380472,
      0.8648752792963568
    ],
    [
      0.38672222057252104,
      0.1560743883506752,
      0.9088931232088958
    ],
    [
      0.3964692722916183,
      0.17616018361527283,
      0.900988182962012
    ],
    [
      0.30835962495609737,
      0.12891256089186215,
      0.942494505735305
    ],
    [
      0.319382449603111,
      0.16066445781546587,
      0.9339067313604601
    ],
    [
      0.24075166023347283,
      0.14261501545310823,
      0.960051871235162
    ],
    [
      0.41795943616560066,
      0.3776976569852412,
      0.8262290176627739
    ],
    [
      0.37767285870669853,
      0.37260290863939155,
      0.8476616567179238
    ],
    [
      0.3697608603729547,
      0.3504695754946371,
      0.8604928720151382
    ],
    [
      0.31582322922519745,
      0.3445155120385333,
      0.8840615079543932
    ],
    [
      0.3082421539244857,
      0.31998173760760007,
      0.8958785978812166
    ],
    [
      0.25394559018042745,
      0.3204840110123685,
      0.9125796600370504
    ],
    [
      0.23754249089104468,
      0.2792699070967172,
      0.9303665320783358
    ],
    [
      0.19666549274712788,
      0.28841939330531374,
      0.937089610191002
    ],
    [
      0.154020290546395,
      0.24960659654176176,
      0.9560200296347573
    ],
    [
      0.08927779276723319,
      0.21908389973879477,
      0.97161294793444
    ],
    [
      0.15294824117866868,
      0.24087440481000316,
      0.9584291088170155
    ],
    [
      0.09140014944047857,
      0.20401456277075347,
      0.9746917824931718
    ],
    [
      -0.8077610278662118,
      0.4407301118561768,
      0.39150873599929154
    ],
    [
      -0.8077347119771607,
      0.44365544053796946,
      0.38824539295171745
    ],
    [
      -0.8214916210546445,
      0.44832061144936836,
      0.3523636557403117
    ],
    [
      -0.7947333410131862,
      0.3855117646553028,
      0.46880656564768075
    ],
    [
      -0.7963469612081149,
      0.384807890200614,
      0.4666416237477678
    ],
    [
      -0.8233410909343711,
      0.3872343604335625,
      0.41492047199265714
    ],
    [
      -0.8242929101549706,
      0.408876086272693,
      0.3916140247010758
    ],
    [
      -0.8478438508925557,
      0.39629172639421917,
      0.35229770378924
    ],
    [
      -0.959046560933744,
      -0.028983446760260028,
      0.2817616967848073
    ],
    [
      -0.9350975742559245,
      -0.21124773811348382,
      0.2845468674271829
    ],
    [
      -0.9503339362527312,
      -0.2146897821284803,
      0.225330217804926
    ],
    [
      -0.9397748187674276,
      -0.033227423858949855,
      0.3401752905699448
    ],
    [
      -0.9161852609312706,
      -0.2069752605429158,
      0.3431702335219238
    ],
    [
      -0.9350975742559243,
      -0.2112477381134812,
      0.2845468674271852
    ],
    [
      -0.9161852609312726,
      -0.20697526054290555,
      0.3431702335219244
    ],
    [
      -0.9307493506124833,
      -0.031070744107196503,
      0.3643353608903009
    ],
    [
      -0.9247894168990564,
      -0.03261285896205882,
      0.37907906275844894
    ],
    [
      -0.9013191499767154,
      -0.20361685987950842,
      0.3823139603232664
    ],
    [
      -0.9080661443179049,
      -0.03171816159458538,
      0.4176240363876026
    ],
    [
      -0.8847302381486615,
      -0.19986926155618231,
      0.4210756274001135
    ],
    [
      -0.9013191499767109,
      -0.2036168598795306,
      0.38231396032326476
    ],
    [
      -0.9117246557289223,
      -0.030626715321676077,
      0.4096585852201599
    ],
    [
      -0.8897412545722377,
      -0.030554256148236852,
      0.4554414752121818
    ],
    [
      -0.866555146195771,
      -0.19576332954358666,
      0.45908484772167674
    ],
    [
      -0.8847302381486547,
      -0.19986926155618906,
      0.4210756274001244
    ],
    [
      -0.8904796848882911,
      -0.030307229283428997,
      0.45401255781576294
    ],
    [
      -0.8697718930100655,
      -0.03018117005149497,
      0.4925301524820687
    ],
    [
      -0.8468261183482149,
      -0.19130634813038866,
      0.49627351979358075
    ],
    [
      -0.84682611834821,
      -0.19130634813040095,
      0.4962735197935846
    ],
    [
      -0.8665551461957736,
      -0.19576332954358724,
      0.4590848477216716
    ],
    [
      -0.8670605980298349,
      -0.029208771912320117,
      0.49734572179472797
    ],
    [
      -0.8482294934405022,
      -0.0298883418725235,
      0.5287848461120838
    ],
    [
      -0.8255781796335133,
      -0.18650622981478587,
      0.5325749670734523
    ],
    [
      -0.8255781796335142,
      -0.18650622981478915,
      0.5325749670734496
    ],
    [
      -0.8415095096115912,
      -0.027955118864880984,
      0.539518541444601
    ],
    [
      -0.7876293325310344,
      -0.03229638114901516,
      0.6153023470631286
    ],
    [
      -0.7295151118069472,
      -0.10541575036694636,
      0.6757922914771011
    ],
    [
      -0.7285641761676839,
      -0.11945556454493872,
      0.6744809925449005
    ],
    [
      -0.7340792452657127,
      -0.16583572070736188,
      0.6585029805609018
    ],
    [
      -0.7938420206296354,
      0.3115939320084244,
      0.5222298993912423
    ],
    [
      -0.7975448221562204,
      0.3144225247937924,
      0.5148404923411717
    ],
    [
      -0.8031132802712121,
      0.343823016806908,
      0.4866156513777688
    ],
    [
      -0.7820589286308153,
      0.28213514453002286,
      0.5556829962936104
    ],
    [
      -0.788290072304758,
      0.2866349815543269,
      0.5444622569610404
    ],
    [
      -0.7691337325445698,
      0.2334464656148412,
      0.5949252466940673
    ],
    [
      -0.7711491775179786,
      0.1503298531845442,
      0.6186516639069668
    ],
    [
      -0.7842770635470776,
      0.17190700395631586,
      0.596118670723151
    ],
    [
      -0.6895002802630368,
      0.10447970528901451,
      0.7167100911107046
    ],
    [
      -0.6684024525377308,
      0.042131735806462,
      0.7426056007595695
    ],
    [
      -0.6619090433073354,
      -0.0343797556809745,
      0.7487953330432053
    ],
    [
      -0.5523050853443487,
      -0.04277763335480616,
      0.8325437927144334
    ],
    [
      -0.6620777115784378,
      -0.03751492380752699,
      0.7484956474975485
    ],
    [
      -0.5458749735772757,
      -0.08760168381400532,
      0.8332745395216151
    ],
    [
      -0.5559635138172511,
      -0.14209225988043625,
      0.8189715263585455
    ],
    [
      -0.57505065270306,
      -0.16216992404386646,
      0.8018838211121304
    ],
    [
      -0.6813798144244428,
      -0.06250088085844624,
      0.7292565998239784
    ],
    [
      -0.5796372765378535,
      -0.18669938470106556,
      0.7931985674470319
    ],
    [
      -0.6034597795488285,
      -0.21200310533386024,
      0.768694333136182
    ],
    [
      -0.7287841454559485,
      -0.2209553048453862,
      0.648114513487181
    ],
    [
      -0.7288164910498739,
      -0.22093212059141504,
      0.6480860440286688
    ],
    [
      -0.7304388878135498,
      -0.23130637216195793,
      0.6426168324647108
    ],
    [
      -0.7480224467858866,
      -0.28364188478610475,
      0.6000080835284151
    ],
    [
      -0.13593047685797688,
      -0.19453423731570563,
      0.9714315909898955
    ],
    [
      0.38861592574982384,
      -0.9213751290710059,
      -0.006747872479119576
    ],
    [
      0.3867629747899216,
      -0.9214875007637783,
      -0.03570976431980846
    ],
    [
      0.39218455816900455,
      -0.9180279457757613,
      -0.05844624118382998
    ],
    [
      0.40452805466519637,
      -0.9111881250886535,
      -0.07805929596285237
    ],
    [
      0.4081705968057648,
      -0.9093218808950382,
      -0.08081139046406648
    ],
    [
      0.42769162839332037,
      -0.8968445839554403,
      -0.11291440666302621
    ],
    [
      0.43671294333743826,
      -0.8830316068359848,
      -0.17186327836454832
    ],
    [
      0.5047315795448428,
      -0.5833937322364826,
      0.636315790938238
    ],
    [
      0.49874924944031873,
      -0.5508726449140843,
      0.6691700197020783
    ],
    [
      0.4710574817639728,
      -0.5207892467245946,
      0.7119574491289586
    ],
    [
      0.501547193078282,
      -0.5448954260216161,
      0.6719668055908848
    ],
    [
      0.4583887077652105,
      -0.48231801171364247,
      0.7464912110466801
    ],
    [
      0.48392086903150416,
      -0.4989987186952597,
      0.7189025464249539
    ],
    [
      0.43864964609694046,
      -0.44304089441381234,
      0.7818575662203686
    ],
    [
      0.47255758124556085,
      -0.4562618411041438,
      0.7539989819353884
    ],
    [
      0.4281303249904047,
      -0.39261367595310026,
      0.8139772271250618
    ],
    [
      0.4528715005616694,
      -0.41485401862875115,
      0.7891790336841177
    ],
    [
      0.44504224059497705,
      -0.31606323412050497,
      0.8378791297815511
    ],
    [
      0.44747959853039054,
      -0.3408238602733255,
      0.8268017326829142
    ],
    [
      -0.14379601436152892,
      -0.32910120084782557,
      0.9332819005285906
    ],
    [
      -0.13423229191224179,
      -0.31127015040743,
      0.9407935933419841
    ],
    [
      0.041568521935829134,
      -0.28224331655326734,
      0.9584418439556375
    ],
    [
      -0.036038592381280016,
      -0.2719673652670251,
      0.9616314117627858
    ],
    [
      -0.03978872485807568,
      -0.2672364345118451,
      0.9628091947232145
    ],
    [
      0.022656606585667875,
      -0.3587767838436383,
      0.9331483791728074
    ],
    [
      0.01868727942346049,
      -0.3504315029118538,
      0.9364019155013988
    ],
    [
      0.06468943686395345,
      -0.370360307213115,
      0.92663289365273
    ],
    [
      0.054520181882821386,
      -0.433851775296139,
      0.899333190113571
    ],
    [
      -0.8256553118628629,
      -0.4826072935426149,
      0.29220456227121266
    ],
    [
      -0.0361605783811475,
      -0.3179703989570243,
      0.947410807389409
    ],
    [
      -0.061849083297404905,
      -0.3501595447966929,
      0.9346459137465073
    ],
    [
      -0.14146255716046766,
      -0.35448901107789066,
      0.9242975094344031
    ],
    [
      -0.02431358611311034,
      -0.40308115005890455,
      0.9148412080779436
    ],
    [
      -0.025715785033841934,
      -0.4153387859524373,
      0.909303244953876
    ],
    [
      -0.0962753226123379,
      -0.42430216771774326,
      0.9003881011685541
    ],
    [
      -0.1429610079546451,
      -0.3573166565365328,
      0.9229772246194081
    ],
    [
      -0.007530053335957043,
      -0.4755290559977918,
      0.8796677868369437
    ],
    [
      -0.08512082843553047,
      -0.4870814238088142,
      0.869198556802085
    ],
    [
      -0.105184107521033,
      -0.45207909211337965,
      0.8857543666270837
    ],
    [
      0.00004171433370006101,
      -0.4481686085408652,
      0.8939490458513053
    ],
    [
      0.021679542892086387,
      -0.5374103590929704,
      0.8430421717562857
    ],
    [
      -0.10745186462392521,
      -0.5416128693945316,
      0.833732329045158
    ],
    [
      0.5061024915342512,
      0.2536125501363438,
      0.8243427336224682
    ],
    [
      0.5346371265740671,
      0.33837104650589,
      0.7743824492943612
    ],
    [
      0.4527027912700993,
      0.2203599476694042,
      0.8640032848545185
    ],
    [
      0.4626068819206826,
      0.2628747531919345,
      0.846694594841554
    ],
    [
      0.38489731139348315,
      0.209118264385322,
      0.8989569573581032
    ],
    [
      0.398580147893125,
      0.2440178191965095,
      0.8840753189746189
    ],
    [
      0.32380812253373925,
      0.2233892083157943,
      0.9193723736273662
    ],
    [
      0.31088551330897446,
      0.18396557416117074,
      0.9324735198053434
    ],
    [
      0.2366144923591377,
      0.16281391354433894,
      0.9578649234427598
    ],
    [
      0.2451385595921398,
      0.1958263327241257,
      0.9495046782469853
    ],
    [
      0.16048974210657974,
      0.16062885729066476,
      0.9738795679569722
    ],
    [
      0.16605628030553352,
      0.16928287301809278,
      0.9714775451207456
    ],
    [
      0.4559221439321391,
      0.3288705531526399,
      0.8270303246806603
    ],
    [
      0.4392159807518016,
      0.29879385365231664,
      0.8472376026073388
    ],
    [
      0.3953431954982007,
      0.2910198714722611,
      0.871212483944956
    ],
    [
      0.3899208284707302,
      0.2829620845636253,
      0.8762957298903762
    ],
    [
      0.32802184868568995,
      0.2796314297726923,
      0.9023347107742793
    ],
    [
      0.31346706582354833,
      0.25236933827622404,
      0.9154496795247656
    ],
    [
      0.25030023228074993,
      0.2578834679164852,
      0.9331912508674574
    ],
    [
      0.23559765339497946,
      0.2150900469611345,
      0.9477499762136826
    ],
    [
      0.17222082903272784,
      0.21734533798098907,
      0.9607814476275078
    ],
    [
      0.1204288291124393,
      0.16824670022603117,
      0.9783608459978654
    ],
    [
      -0.9355417613694672,
      -0.2718976694239851,
      0.22546234740089133
    ],
    [
      -0.9012090828505963,
      -0.32753935350317054,
      0.2837959846338777
    ],
    [
      -0.8416566882460239,
      -0.4374551876181699,
      0.3166180316354187
    ],
    [
      -0.8458829449919646,
      -0.41269784731163617,
      0.3378794610450041
    ],
    [
      -0.8475576428349901,
      -0.3716125751255389,
      0.3788801077921099
    ],
    [
      -0.842469341550457,
      -0.3388035730402512,
      0.4188765300690627
    ],
    [
      -0.8313828642181705,
      -0.3153214091449644,
      0.45757506708651097
    ],
    [
      -0.8148715870530008,
      -0.30158930722411803,
      0.4950032185570114
    ],
    [
      -0.7944967409184714,
      -0.2941453768233975,
      0.5312752826580104
    ],
    [
      -0.8002419355767287,
      -0.29905090649216415,
      0.5197897650691341
    ],
    [
      -0.9013652107499693,
      0.24775911948970214,
      0.3551847062576749
    ],
    [
      -0.8883279358011302,
      0.2295829109665635,
      0.3976998434339924
    ],
    [
      -0.8992147750099297,
      0.24256603850043876,
      0.36410782107783
    ],
    [
      -0.8722927496550181,
      0.21070566250108141,
      0.4412578415045654
    ],
    [
      -0.8845071586547198,
      0.2220813502293211,
      0.4102766873329215
    ],
    [
      -0.8536275449697099,
      0.19221300026890156,
      0.4841220682809379
    ],
    [
      -0.8670413165147208,
      0.2019675542377412,
      0.4554651056795072
    ],
    [
      -0.8231216491209309,
      0.16928742320922596,
      0.5420447574616137
    ],
    [
      -0.8468936704766091,
      0.1823621970542657,
      0.499514904674723
    ],
    [
      -0.7824090064668134,
      0.007253690700519895,
      0.622722675491133
    ],
    [
      0.5046976119025828,
      -0.5416733214540062,
      0.6722130118978766
    ],
    [
      0.5152925168114214,
      -0.496384145829747,
      0.6986246502142788
    ],
    [
      0.5020336131006923,
      -0.488808865808098,
      0.7134620831021542
    ],
    [
      0.5085901413098932,
      -0.45947412656603337,
      0.7281617918970782
    ],
    [
      0.4921138201713519,
      -0.44337180976363,
      0.74916315065764
    ],
    [
      0.4964599947713662,
      -0.42525528211006675,
      0.7567598156807103
    ],
    [
      0.4812350710964595,
      -0.40411080415775485,
      0.77788640835906
    ],
    [
      0.48738701763838227,
      -0.38282891362075533,
      0.7847903655967723
    ],
    [
      -0.8287583515450224,
      -0.47239207383872905,
      0.30000887206668053
    ],
    [
      -0.7473680403042503,
      -0.4125575086345532,
      0.5208044876928721
    ]
  ],
  "f": [
    [
      1,
      2,
      3,
      4,
      5,
      6
    ],
    [
      6,
      5,
      7,
      8,
      9,
      10
    ],
    [
      11,
      12,
      13,
      9,
      8
    ],
    [
      14,
      15,
      16,
      17,
      12,
      11,
      18
    ],
    [
      19,
      20,
      21,
      22,
      15,
      14,
      23
    ],
    [
      19,
      24,
      25,
      26,
      27,
      20
    ],
    [
      25,
      28,
      29,
      30,
      26
    ],
    [
      28,
      31,
      32,
      33,
      34,
      29
    ],
    [
      35,
      36,
      37,
      33,
      32
    ],
    [
      35,
      38,
      39,
      40,
      41,
      36
    ],
    [
      42,
      43,
      44,
      40,
      39,
      45
    ],
    [
      42,
      46,
      47,
      48,
      49,
      43
    ],
    [
      47,
      50,
      51,
      52,
      48
    ],
    [
      51,
      53,
      54,
      55,
      56,
      52
    ],
    [
      55,
      54,
      57,
      58,
      59,
      60,
      61
    ],
    [
      60,
      59,
      62,
      63,
      64,
      65
    ],
    [
      64,
      63,
      66,
      67,
      68
    ],
    [
      68,
      67,
      69,
      70,
      71,
      72
    ],
    [
      71,
      70,
      73,
      74,
      75,
      76
    ],
    [
      75,
      74,
      77,
      78,
      79,
      80
    ],
    [
      79,
      78,
      81,
      82,
      83,
      84
    ],
    [
      85,
      86,
      87,
      83,
      82
    ],
    [
      85,
      88,
      89,
      90,
      91,
      86
    ],
    [
      92,
      93,
      94,
      90,
      89,
      95
    ],
    [
      92,
      96,
      97,
      98,
      99,
      93
    ],
    [
      98,
      97,
      100,
      101,
      102,
      103
    ],
    [
      104,
      105,
      106,
      101,
      100,
      107
    ],
    [
      104,
      108,
      109,
      110,
      111,
      105
    ],
    [
      112,
      113,
      114,
      110,
      109,
      115
    ],
    [
      112,
      116,
      117,
      118,
      113
    ],
    [
      119,
      120,
      117,
      116
    ],
    [
      119,
      121,
      122,
      123,
      124,
      120
    ],
    [
      125,
      126,
      122,
      121,
      127,
      128,
      129
    ],
    [
      125,
      129,
      130,
      131,
      132,
      133,
      134
    ],
    [
      135,
      136,
      131,
      130,
      137,
      138,
      139
    ],
    [
      135,
      139,
      140,
      141,
      142,
      143
    ],
    [
      142,
      141,
      144,
      145,
      146,
      147
    ],
    [
      146,
      145,
      148,
      149,
      150
    ],
    [
      150,
      149,
      151,
      152,
      153,
      154
    ],
    [
      153,
      152,
      155,
      156,
      157,
      158,
      159
    ],
    [
      157,
      156,
      160,
      161,
      162,
      163
    ],
    [
      164,
      165,
      162,
      161,
      166
    ],
    [
      164,
      167,
      168,
      169,
      170,
      165
    ],
    [
      171,
      172,
      173,
      169,
      168,
      174
    ],
    [
      175,
      171,
      174,
      176,
      177
    ],
    [
      175,
      177,
      178,
      179,
      180,
      181
    ],
    [
      180,
      179,
      182,
      183,
      184,
      185
    ],
    [
      184,
      183,
      186,
      187,
      188
    ],
    [
      188,
      187,
      189,
      190,
      191,
      192
    ],
    [
      191,
      190,
      193,
      194,
      195,
      196
    ],
    [
      195,
      194,
      197,
      198,
      199,
      200
    ],
    [
      199,
      198,
      201,
      202,
      203
    ],
    [
      204,
      205,
      203,
      202,
      206
    ],
    [
      207,
      208,
      209,
      210,
      211
    ],
    [
      207,
      211,
      212,
      213,
      214,
      215,
      216
    ],
    [
      217,
      218,
      219,
      220,
      221
    ],
    [
      217,
      221,
      222,
      223,
      224
    ],
    [
      223,
      222,
      225,
      226,
      227,
      228
    ],
    [
      227,
      226,
      229,
      230,
      231,
      232
    ],
    [
      231,
      230,
      233,
      234,
      235
    ],
    [
      236,
      237,
      238,
      234,
      233,
      239,
      240
    ],
    [
      236,
      241,
      242,
      243,
      244,
      237
    ],
    [
      243,
      242,
      245,
      246,
      247
    ],
    [
      246,
      248,
      249,
      250,
      251,
      247
    ],
    [
      251,
      250,
      252,
      253,
      254,
      255
    ],
    [
      253,
      256,
      257,
      258,
      254
    ],
    [
      1,
      259,
      260,
      261,
      2
    ],
    [
      1,
      6,
      10,
      262,
      263,
      264,
      259
    ],
    [
      10,
      9,
      13,
      265,
      266,
      262
    ],
    [
      12,
      17,
      267,
      268,
      269,
      270,
      265,
      13
    ],
    [
      17,
      16,
      271,
      267
    ],
    [
      272,
      273,
      271,
      16,
      15,
      22
    ],
    [
      272,
      22,
      21,
      274,
      275
    ],
    [
      20,
      27,
      276,
      277,
      274,
      21
    ],
    [
      26,
      30,
      278,
      279,
      276,
      27
    ],
    [
      29,
      34,
      280,
      281,
      282,
      278,
      30
    ],
    [
      33,
      37,
      283,
      284,
      280,
      34
    ],
    [
      36,
      41,
      285,
      286,
      283,
      37
    ],
    [
      40,
      44,
      287,
      288,
      285,
      41
    ],
    [
      43,
      49,
      289,
      287,
      44
    ],
    [
      49,
      48,
      52,
      56,
      290,
      291,
      289
    ],
    [
      55,
      61,
      292,
      293,
      290,
      56
    ],
    [
      60,
      65,
      294,
      292,
      61
    ],
    [
      65,
      64,
      68,
      72,
      295,
      296,
      294
    ],
    [
      71,
      76,
      297,
      298,
      295,
      72
    ],
    [
      75,
      80,
      299,
      300,
      297,
      76
    ],
    [
      79,
      84,
      301,
      302,
      299,
      80
    ],
    [
      83,
      87,
      303,
      304,
      301,
      84
    ],
    [
      86,
      91,
      305,
      306,
      303,
      87
    ],
    [
      91,
      90,
      94,
      307,
      308,
      305
    ],
    [
      94,
      93,
      99,
      309,
      310,
      307
    ],
    [
      99,
      98,
      103,
      311,
      312,
      309
    ],
    [
      103,
      102,
      313,
      314,
      311
    ],
    [
      102,
      101,
      106,
      315,
      316,
      313
    ],
    [
      105,
      111,
      317,
      318,
      315,
      106
    ],
    [
      110,
      114,
      319,
      320,
      321,
      317,
      111
    ],
    [
      322,
      323,
      324,
      320,
      319
    ],
    [
      322,
      325,
      326,
      327,
      323
    ],
    [
      5,
      4,
      328,
      329,
      330,
      7
    ],
    [
      18,
      11,
      8,
      7,
      330,
      331,
      332,
      333
    ],
    [
      14,
      18,
      333,
      334,
      23
    ],
    [
      19,
      23,
      334,
      335,
      24
    ],
    [
      25,
      24,
      335,
      336,
      337,
      31,
      28
    ],
    [
      35,
      32,
      31,
      337,
      338,
      38
    ],
    [
      39,
      38,
      338,
      339,
      340,
      45
    ],
    [
      42,
      45,
      340,
      341,
      342,
      46
    ],
    [
      47,
      46,
      342,
      343,
      344,
      345,
      50
    ],
    [
      51,
      50,
      345,
      346,
      347,
      53
    ],
    [
      54,
      53,
      347,
      348,
      349,
      57
    ],
    [
      58,
      57,
      349,
      350,
      351
    ],
    [
      59,
      58,
      351,
      352,
      353,
      62
    ],
    [
      66,
      63,
      62,
      353,
      354,
      355
    ],
    [
      67,
      66,
      355,
      356,
      357,
      69
    ],
    [
      358,
      359,
      73,
      70,
      69,
      357
    ],
    [
      359,
      360,
      361,
      362,
      77,
      74,
      73
    ],
    [
      81,
      78,
      77,
      362,
      363,
      364,
      365
    ],
    [
      366,
      365,
      364,
      367,
      368
    ],
    [
      369,
      366,
      368,
      370,
      371
    ],
    [
      371,
      370,
      372,
      373,
      374,
      375
    ],
    [
      372,
      376,
      377,
      378,
      379,
      380,
      381,
      373
    ],
    [
      382,
      383,
      378,
      377,
      384,
      385
    ],
    [
      386,
      387,
      385,
      384
    ],
    [
      386,
      388,
      389,
      390,
      391,
      387
    ],
    [
      392,
      393,
      390,
      389,
      394,
      395
    ],
    [
      396,
      392,
      395,
      397,
      398,
      399,
      400
    ],
    [
      401,
      399,
      398,
      402,
      403,
      404,
      405
    ],
    [
      406,
      407,
      408,
      409,
      410,
      404,
      403,
      411
    ],
    [
      412,
      413,
      414,
      408,
      407,
      415
    ],
    [
      412,
      416,
      417,
      418,
      419,
      413
    ],
    [
      417,
      420,
      421,
      422,
      423,
      418
    ],
    [
      421,
      424,
      425,
      426,
      427,
      422
    ],
    [
      426,
      425,
      428,
      429,
      430,
      431
    ],
    [
      432,
      430,
      429,
      433,
      434,
      435
    ],
    [
      436,
      435,
      434,
      437,
      438,
      439
    ],
    [
      440,
      441,
      439,
      438,
      442
    ],
    [
      440,
      442,
      443,
      444,
      445
    ],
    [
      445,
      444,
      446,
      447,
      448,
      449
    ],
    [
      450,
      448,
      447,
      451,
      452
    ],
    [
      450,
      452,
      453,
      454,
      455
    ],
    [
      456,
      457,
      458,
      455,
      454
    ],
    [
      458,
      457,
      459,
      460,
      461,
      462,
      463,
      464
    ],
    [
      465,
      466,
      463,
      462,
      467,
      468,
      469,
      470
    ],
    [
      471,
      465,
      470,
      472,
      473
    ],
    [
      474,
      475,
      476,
      477,
      478
    ],
    [
      479,
      480,
      481,
      482
    ],
    [
      483,
      482,
      481,
      484,
      485,
      486,
      487
    ],
    [
      486,
      485,
      488,
      489,
      490,
      491
    ],
    [
      489,
      488,
      492,
      493,
      494
    ],
    [
      495,
      496,
      497,
      498,
      493,
      492
    ],
    [
      497,
      496,
      499,
      500,
      501
    ],
    [
      500,
      499,
      502,
      503,
      504,
      505
    ],
    [
      504,
      503,
      506,
      507,
      508,
      509
    ],
    [
      507,
      510,
      511,
      512,
      508
    ],
    [
      513,
      514,
      515,
      516,
      511,
      510
    ],
    [
      517,
      518,
      515,
      514,
      519,
      520
    ],
    [
      521,
      522,
      523,
      517,
      520,
      524,
      525
    ],
    [
      521,
      525,
      526,
      527,
      528
    ],
    [
      529,
      530,
      527,
      526,
      531,
      532
    ],
    [
      529,
      532,
      533,
      534,
      535
    ],
    [
      536,
      537,
      538,
      534,
      533,
      539
    ],
    [
      536,
      540,
      541,
      542,
      537
    ],
    [
      541,
      540,
      543,
      544,
      545,
      546
    ],
    [
      545,
      544,
      547,
      548,
      549
    ],
    [
      548,
      547,
      550,
      551,
      552,
      553,
      554
    ],
    [
      85,
      82,
      81,
      365,
      366,
      369,
      88
    ],
    [
      88,
      369,
      371,
      375,
      95,
      89
    ],
    [
      92,
      95,
      375,
      374,
      96
    ],
    [
      96,
      374,
      373,
      381,
      107,
      100,
      97
    ],
    [
      104,
      107,
      381,
      380,
      108
    ],
    [
      115,
      109,
      108,
      380,
      379,
      555
    ],
    [
      555,
      379,
      378,
      383,
      556,
      128,
      127
    ],
    [
      382,
      557,
      558,
      559,
      556,
      383
    ],
    [
      382,
      385,
      387,
      391,
      560,
      561,
      557
    ],
    [
      562,
      563,
      560,
      391,
      390,
      393
    ],
    [
      562,
      393,
      392,
      396,
      564,
      565
    ],
    [
      566,
      564,
      396,
      400,
      567
    ],
    [
      568,
      567,
      400,
      399,
      401,
      569
    ],
    [
      570,
      569,
      401,
      405,
      571
    ],
    [
      405,
      404,
      410,
      572,
      573,
      571
    ],
    [
      574,
      572,
      410,
      409,
      575
    ],
    [
      575,
      409,
      408,
      414,
      576,
      577
    ],
    [
      576,
      414,
      413,
      419,
      578,
      579
    ],
    [
      578,
      419,
      418,
      423,
      580,
      581
    ],
    [
      580,
      423,
      422,
      427,
      582,
      583
    ],
    [
      426,
      431,
      584,
      585,
      582,
      427
    ],
    [
      431,
      430,
      432,
      586,
      587,
      584
    ],
    [
      432,
      435,
      436,
      588,
      586
    ],
    [
      436,
      439,
      441,
      589,
      590,
      588
    ],
    [
      440,
      445,
      449,
      591,
      592,
      589,
      441
    ],
    [
      450,
      455,
      458,
      464,
      593,
      591,
      449,
      448
    ],
    [
      213,
      212,
      594,
      478,
      477,
      595,
      596,
      597
    ],
    [
      598,
      596,
      595,
      599
    ],
    [
      483,
      487,
      600,
      601,
      598,
      599
    ],
    [
      601,
      600,
      602,
      603,
      604
    ],
    [
      605,
      603,
      602,
      606,
      607,
      608
    ],
    [
      609,
      610,
      611,
      612,
      613,
      608,
      607
    ],
    [
      614,
      615,
      611,
      610,
      616
    ],
    [
      614,
      616,
      617,
      618,
      619,
      620
    ],
    [
      617,
      621,
      622,
      623,
      618
    ],
    [
      624,
      625,
      626,
      622,
      621
    ],
    [
      624,
      627,
      628,
      629,
      625
    ],
    [
      114,
      113,
      118,
      325,
      322,
      319
    ],
    [
      118,
      117,
      120,
      124,
      630,
      326,
      325
    ],
    [
      631,
      632,
      633,
      630,
      124,
      123
    ],
    [
      122,
      126,
      634,
      635,
      631,
      123
    ],
    [
      631,
      635,
      636,
      637,
      638,
      632
    ],
    [
      635,
      634,
      639,
      640,
      636
    ],
    [
      125,
      134,
      641,
      639,
      634,
      126
    ],
    [
      642,
      643,
      644,
      637,
      636,
      640
    ],
    [
      641,
      645,
      642,
      640,
      639
    ],
    [
      641,
      134,
      133,
      646,
      647,
      645
    ],
    [
      132,
      648,
      649,
      646,
      133
    ],
    [
      131,
      136,
      650,
      651,
      648,
      132
    ],
    [
      135,
      143,
      652,
      653,
      650,
      136
    ],
    [
      142,
      147,
      654,
      655,
      652,
      143
    ],
    [
      146,
      150,
      154,
      656,
      657,
      654,
      147
    ],
    [
      153,
      159,
      658,
      656,
      154
    ],
    [
      658,
      159,
      158,
      659,
      660
    ],
    [
      157,
      163,
      661,
      662,
      659,
      158
    ],
    [
      663,
      664,
      661,
      163,
      162,
      165,
      170
    ],
    [
      175,
      181,
      665,
      666,
      667,
      172,
      171
    ],
    [
      180,
      185,
      668,
      669,
      665,
      181
    ],
    [
      184,
      188,
      192,
      670,
      668,
      185
    ],
    [
      191,
      196,
      671,
      670,
      192
    ],
    [
      195,
      200,
      672,
      673,
      671,
      196
    ],
    [
      199,
      203,
      205,
      674,
      672,
      200
    ],
    [
      204,
      675,
      676,
      677,
      674,
      205
    ],
    [
      678,
      679,
      210,
      209,
      680,
      677,
      676
    ],
    [
      681,
      680,
      209,
      208,
      682
    ],
    [
      207,
      216,
      683,
      684,
      682,
      208
    ],
    [
      215,
      685,
      686,
      683,
      216
    ],
    [
      215,
      214,
      687,
      688,
      689,
      685
    ],
    [
      213,
      597,
      219,
      218,
      690,
      687,
      214
    ],
    [
      217,
      224,
      691,
      690,
      218
    ],
    [
      223,
      228,
      692,
      693,
      691,
      224
    ],
    [
      227,
      232,
      694,
      695,
      692,
      228
    ],
    [
      231,
      235,
      696,
      697,
      694,
      232
    ],
    [
      234,
      238,
      698,
      699,
      696,
      235
    ],
    [
      237,
      244,
      700,
      701,
      698,
      238
    ],
    [
      243,
      247,
      251,
      255,
      702,
      700,
      244
    ],
    [
      678,
      676,
      675,
      466,
      465,
      471,
      703
    ],
    [
      678,
      703,
      704,
      679
    ],
    [
      679,
      704,
      594,
      212,
      211,
      210
    ],
    [
      597,
      596,
      598,
      601,
      604,
      220,
      219
    ],
    [
      221,
      220,
      604,
      603,
      605,
      705,
      225,
      222
    ],
    [
      226,
      225,
      705,
      706,
      707,
      229
    ],
    [
      230,
      229,
      707,
      708,
      239,
      233
    ],
    [
      240,
      239,
      708,
      709,
      710
    ],
    [
      236,
      240,
      710,
      711,
      241
    ],
    [
      242,
      241,
      711,
      712,
      713,
      245
    ],
    [
      246,
      245,
      713,
      714,
      715,
      248
    ],
    [
      248,
      715,
      716,
      249
    ],
    [
      250,
      249,
      716,
      717,
      718,
      719,
      720,
      721,
      252
    ],
    [
      271,
      273,
      722,
      723,
      268,
      267
    ],
    [
      272,
      275,
      724,
      725,
      722,
      273
    ],
    [
      275,
      274,
      277,
      726,
      727,
      728,
      724
    ],
    [
      277,
      276,
      279,
      729,
      730,
      726
    ],
    [
      278,
      282,
      731,
      732,
      729,
      279
    ],
    [
      731,
      282,
      281,
      733,
      734
    ],
    [
      281,
      280,
      284,
      735,
      736,
      733
    ],
    [
      286,
      737,
      738,
      735,
      284,
      283
    ],
    [
      286,
      285,
      288,
      739,
      740,
      737
    ],
    [
      288,
      287,
      289,
      291,
      741,
      742,
      739
    ],
    [
      290,
      293,
      743,
      744,
      741,
      291
    ],
    [
      745,
      746,
      743,
      293,
      292,
      294,
      296
    ],
    [
      745,
      296,
      295,
      298,
      747
    ],
    [
      297,
      300,
      748,
      747,
      298
    ],
    [
      749,
      750,
      748,
      300,
      299,
      302
    ],
    [
      304,
      751,
      749,
      302,
      301
    ],
    [
      304,
      303,
      306,
      752,
      751
    ],
    [
      305,
      308,
      753,
      754,
      752,
      306
    ],
    [
      307,
      310,
      755,
      753,
      308
    ],
    [
      310,
      309,
      312,
      756,
      757,
      755
    ],
    [
      312,
      311,
      314,
      758,
      756
    ],
    [
      314,
      313,
      316,
      759,
      758
    ],
    [
      315,
      318,
      760,
      759,
      316
    ],
    [
      318,
      317,
      321,
      761,
      762,
      760
    ],
    [
      321,
      320,
      324,
      763,
      764,
      765,
      761
    ],
    [
      327,
      766,
      767,
      768,
      769,
      770,
      763,
      324,
      323
    ],
    [
      264,
      771,
      772,
      773,
      260,
      259
    ],
    [
      264,
      263,
      774,
      775,
      771
    ],
    [
      263,
      262,
      266,
      776,
      777,
      774
    ],
    [
      265,
      270,
      778,
      779,
      776,
      266
    ],
    [
      270,
      269,
      780,
      781,
      778
    ],
    [
      268,
      723,
      782,
      783,
      784,
      780,
      269
    ],
    [
      723,
      722,
      725,
      785,
      782
    ],
    [
      724,
      728,
      786,
      787,
      785,
      725
    ],
    [
      788,
      789,
      786,
      728,
      727
    ],
    [
      726,
      730,
      790,
      791,
      788,
      727
    ],
    [
      729,
      732,
      792,
      790,
      730
    ],
    [
      731,
      734,
      793,
      794,
      792,
      732
    ],
    [
      733,
      736,
      795,
      796,
      793,
      734
    ],
    [
      735,
      738,
      797,
      795,
      736
    ],
    [
      737,
      740,
      798,
      797,
      738
    ],
    [
      739,
      742,
      799,
      800,
      798,
      740
    ],
    [
      741,
      744,
      801,
      799,
      742
    ],
    [
      744,
      743,
      746,
      802,
      803,
      801
    ],
    [
      745,
      747,
      748,
      750,
      802,
      746
    ],
    [
      754,
      804,
      803,
      802,
      750,
      749,
      751,
      752
    ],
    [
      805,
      806,
      807,
      808,
      329,
      328
    ],
    [
      808,
      809,
      810,
      331,
      330,
      329
    ],
    [
      332,
      331,
      810,
      811
    ],
    [
      334,
      333,
      332,
      811,
      812,
      813,
      336,
      335
    ],
    [
      337,
      336,
      813,
      814,
      339,
      338
    ],
    [
      340,
      339,
      814,
      815,
      816,
      341
    ],
    [
      342,
      341,
      816,
      817,
      343
    ],
    [
      817,
      818,
      819,
      820,
      344,
      343
    ],
    [
      821,
      820,
      819,
      822,
      823
    ],
    [
      824,
      825,
      821,
      823,
      826,
      827,
      828
    ],
    [
      824,
      828,
      829,
      830,
      831
    ],
    [
      832,
      833,
      830,
      829,
      834,
      835
    ],
    [
      832,
      835,
      836,
      837,
      838,
      839
    ],
    [
      837,
      840,
      841,
      842,
      843,
      838
    ],
    [
      844,
      845,
      842,
      841,
      846,
      847
    ],
    [
      848,
      849,
      850,
      844,
      847
    ],
    [
      848,
      851,
      852,
      853,
      854,
      849
    ],
    [
      855,
      856,
      853,
      852,
      857,
      858,
      859,
      860,
      861
    ],
    [
      857,
      862,
      863,
      864,
      865,
      866,
      858
    ],
    [
      867,
      868,
      869,
      863,
      862,
      870
    ],
    [
      867,
      871,
      872,
      873,
      874,
      868
    ],
    [
      873,
      872,
      875,
      876,
      877,
      878
    ],
    [
      877,
      876,
      879,
      880,
      881,
      882
    ],
    [
      883,
      881,
      880,
      884,
      885
    ],
    [
      886,
      885,
      884,
      887,
      888,
      889
    ],
    [
      890,
      891,
      892,
      893,
      894,
      895,
      889,
      888
    ],
    [
      345,
      344,
      820,
      821,
      825,
      346
    ],
    [
      824,
      831,
      348,
      347,
      346,
      825
    ],
    [
      833,
      350,
      349,
      348,
      831,
      830
    ],
    [
      832,
      839,
      352,
      351,
      350,
      833
    ],
    [
      354,
      353,
      352,
      839,
      838,
      843
    ],
    [
      354,
      843,
      842,
      845,
      356,
      355
    ],
    [
      358,
      357,
      356,
      845,
      844,
      850
    ],
    [
      358,
      850,
      849,
      854,
      360,
      359
    ],
    [
      360,
      854,
      853,
      856,
      361
    ],
    [
      363,
      362,
      361,
      856,
      855
    ],
    [
      363,
      855,
      861,
      367,
      364
    ],
    [
      367,
      861,
      860,
      896,
      376,
      372,
      370,
      368
    ],
    [
      897,
      898,
      896,
      860,
      859,
      899
    ],
    [
      899,
      859,
      858,
      866,
      900,
      901,
      902
    ],
    [
      903,
      900,
      866,
      865,
      904
    ],
    [
      905,
      906,
      904,
      865,
      864
    ],
    [
      905,
      864,
      863,
      869,
      907,
      908
    ],
    [
      868,
      874,
      909,
      910,
      907,
      869
    ],
    [
      873,
      878,
      911,
      912,
      909,
      874
    ],
    [
      877,
      882,
      913,
      914,
      911,
      878
    ],
    [
      883,
      915,
      916,
      913,
      882,
      881
    ],
    [
      883,
      885,
      886,
      917,
      918,
      915
    ],
    [
      919,
      917,
      886,
      889,
      895,
      920
    ],
    [
      920,
      895,
      894,
      921
    ],
    [
      922,
      923,
      924,
      921,
      894,
      893
    ],
    [
      922,
      925,
      926,
      927,
      923
    ],
    [
      928,
      926,
      925,
      929,
      930
    ],
    [
      386,
      384,
      377,
      376,
      896,
      898,
      388
    ],
    [
      897,
      394,
      389,
      388,
      898
    ],
    [
      897,
      899,
      902,
      397,
      395,
      394
    ],
    [
      402,
      398,
      397,
      902,
      901
    ],
    [
      903,
      411,
      403,
      402,
      901,
      900
    ],
    [
      903,
      904,
      906,
      406,
      411
    ],
    [
      406,
      906,
      905,
      908,
      415,
      407
    ],
    [
      412,
      415,
      908,
      907,
      910,
      416
    ],
    [
      417,
      416,
      910,
      909,
      912,
      420
    ],
    [
      421,
      420,
      912,
      911,
      914,
      424
    ],
    [
      914,
      913,
      916,
      428,
      425,
      424
    ],
    [
      916,
      915,
      918,
      433,
      429,
      428
    ],
    [
      919,
      437,
      434,
      433,
      918,
      917
    ],
    [
      442,
      438,
      437,
      919,
      920,
      921,
      924,
      443
    ],
    [
      443,
      924,
      923,
      927,
      446,
      444
    ],
    [
      447,
      446,
      927,
      926,
      928,
      451
    ],
    [
      931,
      453,
      452,
      451,
      928,
      930
    ],
    [
      931,
      932,
      456,
      454,
      453
    ],
    [
      456,
      932,
      933,
      934,
      459,
      457
    ],
    [
      459,
      934,
      935,
      936,
      460
    ],
    [
      937,
      461,
      460,
      936
    ],
    [
      937,
      938,
      939,
      940,
      941,
      942,
      467,
      462,
      461
    ],
    [
      467,
      942,
      943,
      468
    ],
    [
      468,
      943,
      944,
      945,
      946,
      469
    ],
    [
      469,
      946,
      947,
      948,
      472,
      470
    ],
    [
      474,
      473,
      472,
      948,
      949,
      950,
      475
    ],
    [
      950,
      951,
      952,
      953,
      476,
      475
    ],
    [
      479,
      953,
      952,
      954,
      955,
      480
    ],
    [
      495,
      492,
      488,
      485,
      484,
      956,
      957,
      958
    ],
    [
      495,
      958,
      959,
      960,
      502,
      499,
      496
    ],
    [
      503,
      502,
      960,
      961,
      506
    ],
    [
      507,
      506,
      961,
      962,
      963,
      513,
      510
    ],
    [
      513,
      963,
      964,
      965,
      519,
      514
    ],
    [
      519,
      965,
      966,
      967,
      524,
      520
    ],
    [
      524,
      967,
      968,
      531,
      526,
      525
    ],
    [
      969,
      539,
      533,
      532,
      531,
      968,
      970,
      971
    ],
    [
      471,
      473,
      474,
      478,
      594,
      704,
      703
    ],
    [
      483,
      599,
      595,
      477,
      476,
      953,
      479,
      482
    ],
    [
      486,
      491,
      606,
      602,
      600,
      487
    ],
    [
      491,
      490,
      972,
      609,
      607,
      606
    ],
    [
      489,
      494,
      973,
      974,
      975,
      976,
      972,
      490
    ],
    [
      494,
      493,
      498,
      977,
      978,
      973
    ],
    [
      498,
      497,
      501,
      979,
      977
    ],
    [
      501,
      500,
      505,
      980,
      981,
      979
    ],
    [
      505,
      504,
      509,
      982,
      983,
      980
    ],
    [
      984,
      985,
      982,
      509,
      508,
      512
    ],
    [
      984,
      512,
      511,
      516,
      986,
      987
    ],
    [
      988,
      986,
      516,
      515,
      518,
      989
    ],
    [
      517,
      523,
      990,
      991,
      989,
      518
    ],
    [
      523,
      522,
      992,
      993,
      990
    ],
    [
      521,
      528,
      994,
      995,
      996,
      992,
      522
    ],
    [
      528,
      527,
      530,
      997,
      998,
      994
    ],
    [
      529,
      535,
      999,
      1000,
      997,
      530
    ],
    [
      535,
      534,
      538,
      1001,
      1002,
      999
    ],
    [
      538,
      537,
      542,
      1003,
      1004,
      1001
    ],
    [
      541,
      546,
      1005,
      1006,
      1003,
      542
    ],
    [
      546,
      545,
      549,
      1007,
      1008,
      1005
    ],
    [
      549,
      548,
      554,
      1009,
      1010,
      1007
    ],
    [
      1009,
      554,
      553,
      1011,
      1012
    ],
    [
      969,
      1013,
      1014,
      543,
      540,
      536,
      539
    ],
    [
      543,
      1014,
      1015,
      550,
      547,
      544
    ],
    [
      112,
      115,
      555,
      127,
      121,
      119,
      116
    ],
    [
      130,
      129,
      128,
      556,
      559,
      137
    ],
    [
      558,
      138,
      137,
      559
    ],
    [
      139,
      138,
      558,
      557,
      561,
      140
    ],
    [
      141,
      140,
      561,
      560,
      563,
      144
    ],
    [
      562,
      565,
      148,
      145,
      144,
      563
    ],
    [
      149,
      148,
      565,
      564,
      566,
      151
    ],
    [
      568,
      155,
      152,
      151,
      566,
      567
    ],
    [
      568,
      569,
      570,
      160,
      156,
      155
    ],
    [
      570,
      571,
      573,
      166,
      161,
      160
    ],
    [
      574,
      167,
      164,
      166,
      573,
      572
    ],
    [
      574,
      575,
      577,
      176,
      174,
      168,
      167
    ],
    [
      177,
      176,
      577,
      576,
      579,
      178
    ],
    [
      179,
      178,
      579,
      578,
      581,
      182
    ],
    [
      183,
      182,
      581,
      580,
      583,
      186
    ],
    [
      187,
      186,
      583,
      582,
      585,
      189
    ],
    [
      190,
      189,
      585,
      584,
      587,
      193
    ],
    [
      194,
      193,
      587,
      586,
      588,
      590,
      197
    ],
    [
      198,
      197,
      590,
      589,
      592,
      201
    ],
    [
      591,
      593,
      206,
      202,
      201,
      592
    ],
    [
      204,
      206,
      593,
      464,
      463,
      466,
      675
    ],
    [
      609,
      972,
      976,
      1016,
      627,
      624,
      621,
      617,
      616,
      610
    ],
    [
      975,
      1017,
      1018,
      1016,
      976
    ],
    [
      975,
      974,
      1019,
      1020,
      1017
    ],
    [
      974,
      973,
      978,
      1021,
      1022,
      1019
    ],
    [
      981,
      1023,
      1024,
      1021,
      978,
      977,
      979
    ],
    [
      980,
      983,
      1025,
      1026,
      1023,
      981
    ],
    [
      1027,
      1028,
      1025,
      983,
      982,
      985,
      1029
    ],
    [
      984,
      987,
      1030,
      1031,
      1029,
      985
    ],
    [
      988,
      1032,
      1033,
      1030,
      987,
      986
    ],
    [
      988,
      989,
      991,
      1034,
      1035,
      1032
    ],
    [
      991,
      990,
      993,
      1036,
      1037,
      1034
    ],
    [
      992,
      996,
      1038,
      1039,
      1036,
      993
    ],
    [
      996,
      995,
      1040,
      1041,
      1038
    ],
    [
      995,
      994,
      998,
      1042,
      1043,
      1040
    ],
    [
      998,
      997,
      1000,
      1044,
      1045,
      1042
    ],
    [
      1000,
      999,
      1002,
      1046,
      1047,
      1044
    ],
    [
      1001,
      1004,
      1048,
      1049,
      1046,
      1002
    ],
    [
      1003,
      1006,
      1050,
      1051,
      1048,
      1004
    ],
    [
      1006,
      1005,
      1008,
      1052,
      1053,
      1054,
      1050
    ],
    [
      1008,
      1007,
      1010,
      1055,
      1056,
      1052
    ],
    [
      1010,
      1009,
      1012,
      1057,
      1058,
      1055
    ],
    [
      1059,
      1057,
      1012,
      1011,
      1060,
      1061
    ],
    [
      705,
      605,
      608,
      613,
      706
    ],
    [
      707,
      706,
      613,
      612,
      709,
      708
    ],
    [
      711,
      710,
      709,
      612,
      611,
      615,
      712
    ],
    [
      614,
      620,
      714,
      713,
      712,
      615
    ],
    [
      620,
      619,
      1062,
      1063,
      717,
      716,
      715,
      714
    ],
    [
      625,
      629,
      1064,
      1065,
      626
    ],
    [
      622,
      626,
      1065,
      1066,
      1067,
      1068,
      623
    ],
    [
      1069,
      1070,
      1071,
      1072,
      1073,
      1074,
      1075
    ],
    [
      1076,
      1075,
      1074,
      1077,
      1078,
      1079
    ],
    [
      1076,
      1079,
      1080,
      1081,
      1082,
      1083
    ],
    [
      1082,
      1081,
      1084,
      1085,
      1086,
      1087
    ],
    [
      1086,
      1085,
      1088,
      1089,
      1090,
      1091,
      1092
    ],
    [
      1091,
      1090,
      1093,
      1094,
      1095,
      1096
    ],
    [
      1095,
      1094,
      1097,
      1098,
      1099,
      1100
    ],
    [
      1099,
      1098,
      1101,
      1102,
      1103,
      1104
    ],
    [
      1105,
      1103,
      1102,
      1106,
      1107
    ],
    [
      1105,
      1107,
      1108,
      1109,
      1110,
      1111
    ],
    [
      1112,
      1110,
      1109,
      1113,
      1114,
      1115,
      1116,
      1117
    ],
    [
      1118,
      1119,
      1120,
      1121,
      1122
    ],
    [
      1123,
      1124,
      1118,
      1122
    ],
    [
      1124,
      1125,
      1126,
      1127,
      1128,
      1129,
      1130,
      1119,
      1118
    ],
    [
      1131,
      1132,
      1133,
      1127,
      1126
    ],
    [
      1132,
      1134,
      1135,
      1133
    ],
    [
      1131,
      1136,
      1137,
      1138,
      1139,
      1134,
      1132
    ],
    [
      1140,
      1138,
      1137,
      1141
    ],
    [
      1142,
      1143,
      1141,
      1137,
      1136,
      1144,
      769,
      768
    ],
    [
      1142,
      1145,
      1146,
      1143
    ],
    [
      1142,
      768,
      767,
      1147,
      1148,
      1145
    ],
    [
      643,
      1149,
      1150,
      1151,
      644
    ],
    [
      1152,
      1153,
      1154,
      1155,
      1156,
      1157,
      1158,
      1159,
      1160
    ],
    [
      1161,
      1162,
      1163,
      1164,
      1149,
      643,
      642,
      645,
      647
    ],
    [
      1161,
      647,
      646,
      649,
      1165
    ],
    [
      1165,
      649,
      648,
      651,
      1166
    ],
    [
      1166,
      651,
      650,
      653,
      1167
    ],
    [
      652,
      655,
      1168,
      1169,
      1167,
      653
    ],
    [
      1170,
      1171,
      1168,
      655,
      654,
      657
    ],
    [
      1170,
      657,
      656,
      658,
      660,
      1172,
      1173,
      1174
    ],
    [
      659,
      662,
      1175,
      1176,
      1172,
      660
    ],
    [
      661,
      664,
      1177,
      1178,
      1175,
      662
    ],
    [
      663,
      1179,
      1180,
      1177,
      664
    ],
    [
      663,
      170,
      169,
      173,
      1181,
      1179
    ],
    [
      669,
      668,
      670,
      671,
      673,
      1182,
      1183,
      1184,
      1185,
      1186
    ],
    [
      669,
      1186,
      1187,
      666,
      665
    ],
    [
      666,
      1187,
      1188,
      1189,
      667
    ],
    [
      173,
      172,
      667,
      1189,
      1190,
      1191,
      1181
    ],
    [
      681,
      1182,
      673,
      672,
      674,
      677,
      680
    ],
    [
      681,
      682,
      684,
      1183,
      1182
    ],
    [
      683,
      686,
      1184,
      1183,
      684
    ],
    [
      686,
      685,
      689,
      1192,
      1185,
      1184
    ],
    [
      688,
      1193,
      1192,
      689
    ],
    [
      691,
      693,
      1194,
      1195,
      1196,
      1193,
      688,
      687,
      690
    ],
    [
      692,
      695,
      1194,
      693
    ],
    [
      694,
      697,
      1197,
      1198,
      1195,
      1194,
      695
    ],
    [
      696,
      699,
      1199,
      1197,
      697
    ],
    [
      1200,
      1199,
      699,
      698,
      701
    ],
    [
      1200,
      701,
      700,
      702,
      1201
    ],
    [
      254,
      258,
      1202,
      1203,
      1204,
      1201,
      702,
      255
    ],
    [
      1205,
      1206,
      1207,
      1208,
      1209,
      1210,
      1211,
      1212
    ],
    [
      1205,
      1212,
      1213,
      1214,
      1215,
      1216
    ],
    [
      1217,
      1218,
      1214,
      1213,
      1219,
      1220
    ],
    [
      1221,
      1222,
      1223,
      1224,
      1225
    ],
    [
      1226,
      1227,
      1228,
      1221,
      1225,
      1229
    ],
    [
      1226,
      1230,
      1231,
      1227
    ],
    [
      1232,
      1233,
      1234,
      1235
    ],
    [
      1236,
      1237,
      1238,
      1235,
      1234,
      1239
    ],
    [
      1236,
      1240,
      1241,
      1242,
      1243,
      1237
    ],
    [
      1244,
      1242,
      1241,
      1245,
      1246,
      1247
    ],
    [
      1248,
      1249,
      1250,
      1251,
      1252,
      1246,
      1245,
      1253
    ],
    [
      1250,
      1254,
      1255,
      1256,
      1257,
      1251
    ],
    [
      1249,
      1258,
      1259,
      1254,
      1250
    ],
    [
      784,
      783,
      1258,
      1249,
      1248,
      1260
    ],
    [
      784,
      1260,
      1261,
      781,
      780
    ],
    [
      778,
      781,
      1261,
      1262,
      779
    ],
    [
      776,
      779,
      1262,
      1263,
      1264,
      777
    ],
    [
      774,
      777,
      1264,
      1265,
      1266,
      775
    ],
    [
      1266,
      1267,
      772,
      771,
      775
    ],
    [
      772,
      1267,
      1268,
      1269,
      1270,
      773
    ],
    [
      1270,
      1269,
      1271,
      1272
    ],
    [
      1272,
      1271,
      1273,
      1274,
      1275,
      1276
    ],
    [
      1275,
      1274,
      1277,
      1278,
      1279,
      1280,
      1281
    ],
    [
      1280,
      1279,
      1282,
      1283,
      1284
    ],
    [
      1285,
      1286,
      1283,
      1282,
      1287,
      1288,
      1289
    ],
    [
      1290,
      1289,
      1288,
      1291,
      1292
    ],
    [
      1293,
      1294,
      1295,
      1292,
      1291,
      1296
    ],
    [
      1293,
      1297,
      1298,
      1299,
      1300,
      1294
    ],
    [
      1301,
      1302,
      1303,
      1257,
      1256,
      1304
    ],
    [
      1301,
      1304,
      1305,
      1306,
      1307,
      1308
    ],
    [
      788,
      791,
      1305,
      1304,
      1256,
      1255,
      789
    ],
    [
      789,
      1255,
      1254,
      1259,
      787,
      786
    ],
    [
      783,
      782,
      785,
      787,
      1259,
      1258
    ],
    [
      793,
      796,
      1309,
      1310,
      1311,
      1312,
      794
    ],
    [
      792,
      794,
      1312,
      1306,
      1305,
      791,
      790
    ],
    [
      1123,
      1313,
      1314,
      1315,
      1316,
      1125,
      1124
    ],
    [
      1317,
      1318,
      1316,
      1315,
      1319
    ],
    [
      1317,
      1320,
      1321,
      1322,
      1323,
      1318
    ],
    [
      1324,
      1325,
      1322,
      1321,
      1326,
      1327
    ],
    [
      1328,
      1329,
      1330,
      1324,
      1327,
      1331,
      1332
    ],
    [
      1333,
      1334,
      1335,
      1336,
      1329,
      1328,
      1337
    ],
    [
      1333,
      1338,
      1339,
      1340,
      1341,
      1342,
      1334
    ],
    [
      1341,
      1340,
      1343,
      1344,
      1345,
      1346
    ],
    [
      1345,
      1344,
      1347,
      1348,
      1349
    ],
    [
      1350,
      1351,
      1348,
      1347,
      1352,
      1353
    ],
    [
      1350,
      1353,
      1354,
      1355,
      1356
    ],
    [
      1357,
      1358,
      1356,
      1355,
      1359,
      1360
    ],
    [
      1357,
      1360,
      1361,
      1362,
      1363
    ],
    [
      1364,
      1365,
      1366,
      1363,
      1362
    ],
    [
      1367,
      1310,
      1309,
      1368,
      1365,
      1364
    ],
    [
      795,
      797,
      798,
      800,
      1368,
      1309,
      796
    ],
    [
      1131,
      1126,
      1125,
      1316,
      1318,
      1323,
      1144,
      1136
    ],
    [
      1323,
      1322,
      1325,
      770,
      769,
      1144
    ],
    [
      1330,
      764,
      763,
      770,
      1325,
      1324
    ],
    [
      1329,
      1336,
      1369,
      765,
      764,
      1330
    ],
    [
      1336,
      1335,
      1370,
      1369
    ],
    [
      1371,
      1370,
      1335,
      1334,
      1342
    ],
    [
      1371,
      1342,
      1341,
      1346,
      1372
    ],
    [
      1345,
      1349,
      1373,
      1372,
      1346
    ],
    [
      1374,
      1373,
      1349,
      1348,
      1351,
      1375
    ],
    [
      1376,
      1375,
      1351,
      1350,
      1356,
      1358
    ],
    [
      1376,
      1358,
      1357,
      1363,
      1366,
      1377
    ],
    [
      799,
      801,
      803,
      804,
      1378,
      1377,
      1366,
      1365,
      1368,
      800
    ],
    [
      808,
      807,
      1379,
      1380,
      1381,
      809
    ],
    [
      811,
      810,
      809,
      1381,
      1382,
      1383,
      812
    ],
    [
      814,
      813,
      812,
      1383,
      1384,
      815
    ],
    [
      1385,
      818,
      817,
      816,
      815,
      1384,
      1386
    ],
    [
      1385,
      1387,
      1388,
      822,
      819,
      818
    ],
    [
      826,
      823,
      822,
      1388,
      1389
    ],
    [
      826,
      1389,
      1390,
      1391,
      827
    ],
    [
      1392,
      1393,
      1394,
      1391,
      1390,
      1395
    ],
    [
      1396,
      1397,
      1393,
      1392,
      1398,
      1399,
      1400,
      1401
    ],
    [
      1392,
      1395,
      1402,
      1403,
      1404,
      1405,
      1406,
      1407,
      1398
    ],
    [
      834,
      829,
      828,
      827,
      1391,
      1394
    ],
    [
      1393,
      1397,
      836,
      835,
      834,
      1394
    ],
    [
      1396,
      840,
      837,
      836,
      1397
    ],
    [
      1396,
      1401,
      846,
      841,
      840
    ],
    [
      848,
      847,
      846,
      1401,
      1400,
      1408,
      1409,
      851
    ],
    [
      857,
      852,
      851,
      1409,
      870,
      862
    ],
    [
      867,
      870,
      1409,
      1408,
      871
    ],
    [
      875,
      872,
      871,
      1408,
      1400,
      1399
    ],
    [
      875,
      1399,
      1398,
      1407,
      879,
      876
    ],
    [
      879,
      1407,
      1406,
      887,
      884,
      880
    ],
    [
      890,
      888,
      887,
      1406,
      1405
    ],
    [
      890,
      1405,
      1404,
      891
    ],
    [
      931,
      930,
      929,
      1410,
      1411,
      933,
      932
    ],
    [
      934,
      933,
      1411,
      1412,
      935
    ],
    [
      937,
      936,
      935,
      1412,
      1413,
      1414,
      1415,
      938
    ],
    [
      1416,
      1417,
      944,
      943,
      942,
      941
    ],
    [
      1418,
      1419,
      1420,
      1421,
      1422,
      1423
    ],
    [
      1424,
      1416,
      941,
      940,
      1420,
      1419
    ],
    [
      1424,
      1425,
      1426,
      1417,
      1416
    ],
    [
      1417,
      1426,
      1427,
      945,
      944
    ],
    [
      1428,
      1429,
      947,
      946,
      945,
      1427
    ],
    [
      1429,
      1430,
      1431,
      949,
      948,
      947
    ],
    [
      950,
      949,
      1431,
      1432,
      1433,
      951
    ],
    [
      951,
      1433,
      1434,
      954,
      952
    ],
    [
      1435,
      955,
      954,
      1434,
      1436
    ],
    [
      1435,
      1437,
      1438,
      956,
      484,
      481,
      480,
      955
    ],
    [
      1438,
      1439,
      1440,
      957,
      956
    ],
    [
      958,
      957,
      1440,
      1441,
      959
    ],
    [
      960,
      959,
      1441,
      1442,
      1443,
      962,
      961
    ],
    [
      962,
      1443,
      1444,
      964,
      963
    ],
    [
      964,
      1444,
      1445,
      1446,
      966,
      965
    ],
    [
      966,
      1446,
      1447,
      970,
      968,
      967
    ],
    [
      969,
      971,
      1448,
      1449,
      1013
    ],
    [
      1449,
      1450,
      1451,
      1015,
      1014,
      1013
    ],
    [
      1015,
      1451,
      1452,
      1453,
      551,
      550
    ],
    [
      1018,
      1454,
      1455,
      628,
      627,
      1016
    ],
    [
      1020,
      1456,
      1454,
      1018,
      1017
    ],
    [
      1020,
      1019,
      1022,
      1457,
      1458,
      1456
    ],
    [
      1021,
      1024,
      1459,
      1460,
      1457,
      1022
    ],
    [
      1461,
      1462,
      1459,
      1024,
      1023,
      1026
    ],
    [
      1461,
      1026,
      1025,
      1028,
      1463
    ],
    [
      1457,
      1460,
      1464,
      1465,
      1466,
      1458
    ],
    [
      1459,
      1462,
      1467,
      1468,
      1464,
      1460
    ],
    [
      1461,
      1463,
      1469,
      1470,
      1467,
      1462
    ],
    [
      1027,
      1471,
      1472,
      1469,
      1463,
      1028
    ],
    [
      1027,
      1029,
      1031,
      1473,
      1474,
      1471
    ],
    [
      1031,
      1030,
      1033,
      1475,
      1476,
      1473
    ],
    [
      1033,
      1032,
      1035,
      1477,
      1478,
      1475
    ],
    [
      1035,
      1034,
      1037,
      1479,
      1480,
      1477
    ],
    [
      1039,
      1481,
      1482,
      1479,
      1037,
      1036
    ],
    [
      1039,
      1038,
      1041,
      1483,
      1484,
      1481
    ],
    [
      1043,
      1485,
      1486,
      1483,
      1041,
      1040
    ],
    [
      1043,
      1042,
      1045,
      1487,
      1488,
      1485
    ],
    [
      1045,
      1044,
      1047,
      1489,
      1490,
      1487
    ],
    [
      1047,
      1046,
      1049,
      1491,
      1492,
      1489
    ],
    [
      1048,
      1051,
      1493,
      1494,
      1491,
      1049
    ],
    [
      1054,
      1495,
      1496,
      1493,
      1051,
      1050
    ],
    [
      1054,
      1053,
      1497,
      1498,
      1495
    ],
    [
      1053,
      1052,
      1056,
      1499,
      1500,
      1497
    ],
    [
      1058,
      1501,
      1502,
      1499,
      1056,
      1055
    ],
    [
      1058,
      1057,
      1059,
      1503,
      1504,
      1501
    ],
    [
      1059,
      1061,
      1505,
      1506,
      1507,
      1508,
      1503
    ],
    [
      1456,
      1458,
      1466,
      1509,
      1510,
      1455,
      1454
    ],
    [
      628,
      1455,
      1510,
      1511,
      1064,
      629
    ],
    [
      1512,
      1067,
      1066,
      1513,
      1514,
      1072,
      1071
    ],
    [
      1515,
      1516,
      1517,
      1518,
      1519,
      1520,
      1521
    ],
    [
      1515,
      1521,
      1522,
      1523
    ],
    [
      1523,
      1522,
      719,
      718,
      1524,
      1525
    ],
    [
      1526,
      1527,
      1524,
      718,
      717,
      1063
    ],
    [
      1528,
      1529,
      1526,
      1063,
      1062
    ],
    [
      619,
      618,
      623,
      1068,
      1530,
      1531,
      1532,
      1528,
      1062
    ],
    [
      1512,
      1533,
      1530,
      1068,
      1067
    ],
    [
      1512,
      1071,
      1070,
      1534,
      1535,
      1533
    ],
    [
      1465,
      1536,
      1537,
      1509,
      1466
    ],
    [
      1510,
      1509,
      1537,
      1538,
      1511
    ],
    [
      1065,
      1064,
      1511,
      1538,
      1539,
      1540,
      1513,
      1066
    ],
    [
      1073,
      1072,
      1514,
      1541,
      1542
    ],
    [
      1074,
      1073,
      1542,
      1543,
      1544,
      1077
    ],
    [
      1078,
      1545,
      1546,
      1547,
      1080,
      1079
    ],
    [
      1548,
      1549,
      1084,
      1081,
      1080,
      1547
    ],
    [
      1085,
      1084,
      1549,
      1550,
      1551,
      1088
    ],
    [
      1552,
      1089,
      1088,
      1551,
      1553
    ],
    [
      1552,
      1554,
      1555,
      1093,
      1090,
      1089
    ],
    [
      1094,
      1093,
      1555,
      1556,
      1097
    ],
    [
      1101,
      1098,
      1097,
      1556,
      1557,
      1558,
      1559
    ],
    [
      1559,
      1558,
      1560,
      1561,
      1562
    ],
    [
      1561,
      1563,
      1564,
      1565,
      1562
    ],
    [
      1565,
      1564,
      1566,
      1567,
      1568,
      1569
    ],
    [
      1570,
      1571,
      1568,
      1567,
      1572,
      1573
    ],
    [
      1570,
      1573,
      1574,
      1575,
      1576
    ],
    [
      1576,
      1575,
      1577,
      1578,
      1579,
      1580,
      1114,
      1113
    ],
    [
      1579,
      1578,
      1581,
      1582
    ],
    [
      1579,
      1582,
      1583,
      1584,
      1585,
      1580
    ],
    [
      1585,
      1584,
      1586,
      1587,
      1588,
      1589
    ],
    [
      1082,
      1087,
      1590,
      1591,
      1592,
      1083
    ],
    [
      1086,
      1092,
      1593,
      1594,
      1590,
      1087
    ],
    [
      1091,
      1096,
      1595,
      1596,
      1593,
      1092
    ],
    [
      1095,
      1100,
      1597,
      1598,
      1595,
      1096
    ],
    [
      1099,
      1104,
      1599,
      1597,
      1100
    ],
    [
      1105,
      1111,
      1600,
      1599,
      1104,
      1103
    ],
    [
      1112,
      1601,
      1602,
      1600,
      1111,
      1110
    ],
    [
      1603,
      1604,
      1605,
      1606
    ],
    [
      1607,
      1608,
      1605,
      1604,
      1609,
      1610
    ],
    [
      1607,
      1610,
      1611,
      1612,
      1613,
      1614
    ],
    [
      1615,
      1616,
      1617,
      1614,
      1613
    ],
    [
      1618,
      1616,
      1615,
      1619,
      1620
    ],
    [
      1618,
      1620,
      1621,
      1622,
      1623,
      1624
    ],
    [
      1625,
      1626,
      1623,
      1622,
      1627,
      1628
    ],
    [
      1625,
      1628,
      1629,
      1630,
      1631
    ],
    [
      1632,
      1633,
      1634,
      1635
    ],
    [
      1636,
      1637,
      1638,
      1639,
      1640
    ],
    [
      1641,
      1642,
      1643,
      1644,
      1645
    ],
    [
      1641,
      1646,
      1647,
      1648,
      1649,
      1642
    ],
    [
      1649,
      1648,
      1650,
      1651,
      1652,
      1653
    ],
    [
      1654,
      1655,
      1652,
      1651,
      1656
    ],
    [
      1654,
      1148,
      1147,
      1657,
      1658,
      1659,
      1660,
      1655
    ],
    [
      632,
      638,
      1661,
      1662,
      1663,
      1659,
      1658,
      633
    ],
    [
      637,
      644,
      1151,
      1664,
      1665,
      1661,
      638
    ],
    [
      766,
      1657,
      1147,
      767
    ],
    [
      326,
      630,
      633,
      1658,
      1657,
      766,
      327
    ],
    [
      1164,
      1666,
      1667,
      1150,
      1149
    ],
    [
      1163,
      1668,
      1669,
      1666,
      1164
    ],
    [
      1163,
      1162,
      1670,
      1671,
      1668
    ],
    [
      1671,
      1670,
      1672,
      1673,
      1674
    ],
    [
      1673,
      1672,
      1675,
      1676,
      1677,
      1678
    ],
    [
      1679,
      1680,
      1677,
      1676,
      1681
    ],
    [
      1682,
      1683,
      1684,
      1679,
      1681,
      1685
    ],
    [
      1686,
      1687,
      1688,
      1689,
      1690
    ],
    [
      1691,
      1692,
      1693,
      1694,
      1688,
      1687
    ],
    [
      1695,
      1696,
      1697,
      1698,
      1693,
      1692
    ],
    [
      1699,
      1697,
      1696,
      1700,
      1701
    ],
    [
      1701,
      1700,
      1702,
      1703,
      1704,
      1705
    ],
    [
      1706,
      1707,
      1704,
      1703
    ],
    [
      1708,
      1709,
      1707,
      1706,
      1710
    ],
    [
      1711,
      1712,
      1709,
      1708,
      1713,
      1714
    ],
    [
      1714,
      1713,
      1715,
      1716
    ],
    [
      1717,
      1718,
      1719,
      1720,
      1721,
      1722,
      1723,
      1724,
      1725
    ],
    [
      1726,
      1727,
      1728,
      1729,
      1730,
      1731,
      1732
    ],
    [
      1733,
      1734,
      1735,
      1736,
      1737
    ],
    [
      1738,
      1737,
      1736,
      1739
    ],
    [
      1738,
      1739,
      1740,
      1741,
      1742,
      1743
    ],
    [
      1744,
      1745,
      1631,
      1630,
      1746,
      1741,
      1740
    ],
    [
      1746,
      1630,
      1629,
      1747
    ],
    [
      1742,
      1741,
      1746,
      1747,
      1748,
      1749
    ],
    [
      1750,
      1743,
      1742,
      1749,
      1130,
      1129
    ],
    [
      1127,
      1133,
      1135,
      1751,
      1752,
      1753,
      1128
    ],
    [
      1134,
      1139,
      1647,
      1646,
      1751,
      1135
    ],
    [
      1140,
      1650,
      1648,
      1647,
      1139,
      1138
    ],
    [
      1140,
      1141,
      1143,
      1146,
      1656,
      1651,
      1650
    ],
    [
      1654,
      1656,
      1146,
      1145,
      1148
    ],
    [
      1754,
      1121,
      1120,
      1755,
      1756,
      1757
    ],
    [
      1758,
      1759,
      1760,
      1761,
      1762,
      1682,
      1685
    ],
    [
      1153,
      1761,
      1760,
      1763,
      1154
    ],
    [
      1764,
      1763,
      1760,
      1759,
      1765,
      1766
    ],
    [
      1161,
      1165,
      1166,
      1167,
      1169,
      1767,
      1675,
      1672,
      1670,
      1162
    ],
    [
      1768,
      1767,
      1169,
      1168,
      1171
    ],
    [
      1768,
      1171,
      1170,
      1174,
      1769
    ],
    [
      1769,
      1174,
      1173,
      1770
    ],
    [
      1173,
      1172,
      1176,
      1771,
      1770
    ],
    [
      1175,
      1178,
      1772,
      1771,
      1176
    ],
    [
      1180,
      1773,
      1772,
      1178,
      1177
    ],
    [
      1203,
      1773,
      1180,
      1179,
      1181,
      1191,
      1204
    ],
    [
      1185,
      1192,
      1193,
      1196,
      1188,
      1187,
      1186
    ],
    [
      1189,
      1188,
      1196,
      1195,
      1198,
      1190
    ],
    [
      1200,
      1201,
      1204,
      1191,
      1190,
      1198,
      1197,
      1199
    ],
    [
      1774,
      1775,
      1776,
      1777,
      1778
    ],
    [
      1779,
      1780,
      1781,
      1782,
      1783,
      1784
    ],
    [
      1785,
      1779,
      1784,
      1786,
      1787,
      1788
    ],
    [
      1789,
      1790,
      1791,
      1792,
      1788,
      1787
    ],
    [
      1791,
      1790,
      1793,
      1794,
      1795,
      1796
    ],
    [
      1797,
      1798,
      1799,
      1800,
      1795,
      1794
    ],
    [
      1801,
      1802,
      1799,
      1798,
      1803,
      1804
    ],
    [
      1805,
      1801,
      1804,
      1806,
      1807,
      1808
    ],
    [
      1809,
      1810,
      1811,
      1808,
      1807,
      1812
    ],
    [
      1809,
      1813,
      1814,
      1815,
      1816,
      1810
    ],
    [
      1817,
      1818,
      1815,
      1814,
      1819,
      1820
    ],
    [
      1821,
      1817,
      1820,
      1822,
      1823,
      1824
    ],
    [
      1825,
      1826,
      1824,
      1823,
      1827
    ],
    [
      1825,
      1827,
      1828,
      1829,
      1830,
      1831
    ],
    [
      1832,
      1833,
      1834,
      1830,
      1829,
      1835
    ],
    [
      1836,
      1837,
      1833,
      1832,
      1838,
      1839
    ],
    [
      1840,
      1841,
      1842,
      1843,
      1839,
      1838
    ],
    [
      1844,
      1845,
      1846,
      1847,
      1842,
      1841
    ],
    [
      1848,
      1849,
      1850,
      1851,
      1852,
      1853
    ],
    [
      1854,
      1855,
      1848,
      1853,
      1856,
      1857,
      1858
    ],
    [
      1859,
      1860,
      1861,
      1862,
      1863,
      1864,
      1865
    ],
    [
      1866,
      1867,
      1868,
      1859,
      1865
    ],
    [
      1205,
      1216,
      1860,
      1859,
      1868,
      1869,
      1206
    ],
    [
      1217,
      1223,
      1222,
      1870,
      1871,
      1872,
      1218
    ],
    [
      1228,
      1873,
      1874,
      1870,
      1222,
      1221
    ],
    [
      1875,
      1876,
      1877,
      1231,
      1230,
      1878
    ],
    [
      1879,
      1880,
      1876,
      1875,
      1233,
      1232
    ],
    [
      1879,
      1232,
      1235,
      1238,
      1881,
      1882
    ],
    [
      1243,
      1883,
      1884,
      1881,
      1238,
      1237
    ],
    [
      1244,
      1885,
      1886,
      1883,
      1243,
      1242
    ],
    [
      1244,
      1247,
      1887,
      1888,
      1885
    ],
    [
      1252,
      1889,
      1890,
      1891,
      1887,
      1247,
      1246
    ],
    [
      1252,
      1251,
      1257,
      1303,
      1892,
      1893,
      1889
    ],
    [
      1894,
      1895,
      1892,
      1303,
      1302
    ],
    [
      1301,
      1308,
      1896,
      1894,
      1302
    ],
    [
      1308,
      1307,
      1897,
      1898,
      1896
    ],
    [
      1899,
      1900,
      1897,
      1307,
      1306,
      1312,
      1311
    ],
    [
      1367,
      1901,
      1899,
      1311,
      1310
    ],
    [
      1902,
      1211,
      1210,
      1903,
      1904
    ],
    [
      1212,
      1211,
      1902,
      1905,
      1219,
      1213
    ],
    [
      1906,
      1907,
      1224,
      1223,
      1217,
      1220
    ],
    [
      1224,
      1907,
      1908,
      1909,
      1229,
      1225
    ],
    [
      1910,
      1911,
      1878,
      1230,
      1226,
      1229,
      1909
    ],
    [
      1875,
      1878,
      1911,
      1912,
      1913,
      1914,
      1239,
      1234,
      1233
    ],
    [
      1915,
      1916,
      1253,
      1245,
      1241,
      1240,
      1917
    ],
    [
      1918,
      1263,
      1262,
      1261,
      1260,
      1248,
      1253,
      1916
    ],
    [
      1265,
      1264,
      1263,
      1918,
      1919
    ],
    [
      1265,
      1919,
      1920,
      1921,
      1268,
      1267,
      1266
    ],
    [
      1921,
      1922,
      1923,
      1273,
      1271,
      1269,
      1268
    ],
    [
      1279,
      1278,
      1924,
      1925,
      1287,
      1282
    ],
    [
      1287,
      1925,
      1926,
      1927,
      1296,
      1291,
      1288
    ],
    [
      1293,
      1296,
      1927,
      1928,
      1929,
      1297
    ],
    [
      261,
      260,
      773,
      1270,
      1272,
      1276,
      1930
    ],
    [
      1930,
      1276,
      1275,
      1281,
      1931
    ],
    [
      1281,
      1280,
      1284,
      1932,
      1933,
      1934,
      1931
    ],
    [
      1286,
      1935,
      1936,
      1932,
      1284,
      1283
    ],
    [
      1285,
      1937,
      1938,
      1935,
      1286
    ],
    [
      1290,
      1939,
      1940,
      1937,
      1285,
      1289
    ],
    [
      1290,
      1292,
      1295,
      1941,
      1942,
      1939
    ],
    [
      1300,
      1943,
      1944,
      1941,
      1295,
      1294
    ],
    [
      1300,
      1299,
      1945,
      1946,
      1947,
      1948,
      1943
    ],
    [
      1123,
      1122,
      1121,
      1754,
      1313
    ],
    [
      1314,
      1313,
      1754,
      1757,
      1949,
      1950
    ],
    [
      1315,
      1314,
      1950,
      1951,
      1952,
      1319
    ],
    [
      1317,
      1319,
      1952,
      1953,
      1954,
      1320
    ],
    [
      1321,
      1320,
      1954,
      1955,
      1956,
      1326
    ],
    [
      1957,
      1958,
      1331,
      1327,
      1326,
      1956,
      1959
    ],
    [
      1332,
      1331,
      1958,
      1960,
      1961
    ],
    [
      1328,
      1332,
      1961,
      1962,
      1963,
      1337
    ],
    [
      1333,
      1337,
      1963,
      1964,
      1965,
      1338
    ],
    [
      1338,
      1965,
      1966,
      1967,
      1339
    ],
    [
      1339,
      1967,
      1968,
      1969,
      1343,
      1340
    ],
    [
      1969,
      1970,
      1971,
      1352,
      1347,
      1344,
      1343
    ],
    [
      1972,
      1354,
      1353,
      1352,
      1971,
      1973
    ],
    [
      1974,
      1359,
      1355,
      1354,
      1972,
      1975
    ],
    [
      1976,
      1361,
      1360,
      1359,
      1974,
      1977
    ],
    [
      1367,
      1364,
      1362,
      1361,
      1976,
      1978,
      1901
    ],
    [
      1376,
      1377,
      1378,
      1979,
      1980,
      1374,
      1375
    ],
    [
      1380,
      1981,
      1982,
      1983,
      1984,
      1382,
      1381
    ],
    [
      1386,
      1384,
      1383,
      1382,
      1984
    ],
    [
      1395,
      1390,
      1389,
      1388,
      1387,
      1985,
      1402
    ],
    [
      1380,
      1379,
      1986,
      1987,
      1981
    ],
    [
      1988,
      1982,
      1981,
      1987,
      1989,
      1990
    ],
    [
      1983,
      1982,
      1988,
      1991,
      1992,
      1993
    ],
    [
      1994,
      1993,
      1992,
      1995,
      1996
    ],
    [
      1997,
      1998,
      1994,
      1996,
      1999,
      2000
    ],
    [
      1997,
      2000,
      2001,
      2002,
      2003,
      2004
    ],
    [
      2003,
      2005,
      2006,
      2007,
      2008,
      2009,
      2010,
      2004
    ],
    [
      2011,
      2008,
      2007,
      2012,
      1413,
      1412,
      1411,
      1410
    ],
    [
      2007,
      2006,
      2013,
      2014,
      2015,
      2012
    ],
    [
      1413,
      2012,
      2015,
      2016,
      2017,
      1414
    ],
    [
      2018,
      1415,
      1414,
      2017
    ],
    [
      938,
      1415,
      2018,
      2019,
      2020,
      939
    ],
    [
      2020,
      2021,
      1421,
      1420,
      940,
      939
    ],
    [
      2022,
      2023,
      2024,
      1422,
      1421,
      2021
    ],
    [
      2025,
      1423,
      1422,
      2024,
      2026
    ],
    [
      2025,
      2027,
      2028,
      1418,
      1423
    ],
    [
      2029,
      2030,
      2031,
      2028,
      2027,
      2032
    ],
    [
      1424,
      1419,
      1418,
      2028,
      2031,
      2033,
      2034,
      2035,
      2036,
      1425
    ],
    [
      1428,
      1427,
      1426,
      1425,
      2036,
      2037,
      2038
    ],
    [
      1428,
      2038,
      2039,
      1430,
      1429
    ],
    [
      1440,
      1439,
      2040,
      2041,
      1442,
      1441
    ],
    [
      1442,
      2041,
      2042,
      1445,
      1444,
      1443
    ],
    [
      1445,
      2042,
      2043,
      1447,
      1446
    ],
    [
      2044,
      2045,
      2046,
      2047,
      2048,
      2049
    ],
    [
      2047,
      2046,
      2050,
      2051,
      2052,
      2053
    ],
    [
      2054,
      2055,
      2056,
      2057,
      2058
    ],
    [
      1450,
      2058,
      2057,
      2059,
      1452,
      1451
    ],
    [
      2054,
      2058,
      1450,
      1449,
      1448,
      2060
    ],
    [
      1470,
      2061,
      2062,
      2063,
      2064,
      1468,
      1467
    ],
    [
      1470,
      1469,
      1472,
      2065,
      2061
    ],
    [
      1474,
      2066,
      2067,
      2065,
      1472,
      1471
    ],
    [
      1474,
      1473,
      1476,
      2068,
      2066
    ],
    [
      2069,
      2070,
      2068,
      1476,
      1475,
      1478,
      2071
    ],
    [
      1480,
      2072,
      2073,
      2071,
      1478,
      1477
    ],
    [
      1480,
      1479,
      1482,
      2074,
      2072
    ],
    [
      2075,
      2076,
      2077,
      2074,
      1482,
      1481,
      1484
    ],
    [
      2075,
      1484,
      1483,
      1486,
      2078,
      2079
    ],
    [
      2078,
      1486,
      1485,
      1488,
      2080,
      2081
    ],
    [
      2082,
      2083,
      2080,
      1488,
      1487,
      1490
    ],
    [
      2082,
      1490,
      1489,
      1492,
      2084,
      2085
    ],
    [
      1492,
      1491,
      1494,
      2086,
      2087,
      2084
    ],
    [
      1493,
      1496,
      2088,
      2089,
      2086,
      1494
    ],
    [
      2090,
      2088,
      1496,
      1495,
      1498,
      2091
    ],
    [
      1497,
      1500,
      2092,
      2093,
      2091,
      1498
    ],
    [
      1502,
      2094,
      2095,
      2092,
      1500,
      1499
    ],
    [
      1502,
      1501,
      1504,
      2096,
      2097,
      2098,
      2094
    ],
    [
      1504,
      1503,
      1508,
      2099,
      2100,
      2096
    ],
    [
      2099,
      1508,
      1507,
      2101
    ],
    [
      2102,
      2103,
      1517,
      1516,
      2104
    ],
    [
      2105,
      2104,
      1516,
      1515,
      1523,
      1525,
      2106
    ],
    [
      1524,
      1527,
      2107,
      2106,
      1525
    ],
    [
      1526,
      1529,
      2108,
      2109,
      2107,
      1527
    ],
    [
      1528,
      1532,
      2110,
      2108,
      1529
    ],
    [
      2111,
      2112,
      2110,
      1532,
      1531
    ],
    [
      2111,
      1531,
      1530,
      1533,
      1535,
      2113
    ],
    [
      1069,
      2114,
      2115,
      1534,
      1070
    ],
    [
      1069,
      1075,
      1076,
      1083,
      1592,
      2116,
      2114
    ],
    [
      1468,
      2064,
      1536,
      1465,
      1464
    ],
    [
      1538,
      1537,
      1536,
      2064,
      2063,
      2117,
      1539
    ],
    [
      2118,
      2119,
      1540,
      1539,
      2117
    ],
    [
      1513,
      1540,
      2119,
      2120,
      1541,
      1514
    ],
    [
      2121,
      2122,
      1545,
      1078,
      1077,
      1544,
      2123
    ],
    [
      2124,
      1546,
      1545,
      2122
    ],
    [
      1548,
      1547,
      1546,
      2124,
      2125,
      2126,
      2127
    ],
    [
      1548,
      2127,
      2128,
      2129,
      1550,
      1549
    ],
    [
      1551,
      1550,
      2129,
      2130,
      1553
    ],
    [
      1552,
      1553,
      2130,
      2131,
      2132,
      1554
    ],
    [
      1557,
      1556,
      1555,
      1554,
      2132,
      2133,
      2134,
      2135
    ],
    [
      1557,
      2135,
      2136,
      2137,
      2138,
      1560,
      1558
    ],
    [
      1561,
      1560,
      2138,
      2139,
      1563
    ],
    [
      1563,
      2139,
      2140,
      2141,
      2142,
      1566,
      1564
    ],
    [
      1567,
      1566,
      2142,
      2143,
      2144,
      1572
    ],
    [
      1574,
      1573,
      1572,
      2144,
      2145
    ],
    [
      1574,
      2145,
      2146,
      2147,
      1577,
      1575
    ],
    [
      1581,
      1578,
      1577,
      2147,
      2148
    ],
    [
      1582,
      1581,
      2148,
      2149,
      1583
    ],
    [
      1583,
      2149,
      2150,
      1586,
      1584
    ],
    [
      1101,
      1559,
      1562,
      1565,
      1569,
      1106,
      1102
    ],
    [
      1107,
      1106,
      1569,
      1568,
      1571,
      1108
    ],
    [
      1570,
      1576,
      1113,
      1109,
      1108,
      1571
    ],
    [
      1695,
      2151,
      2152,
      2153,
      1702,
      1700,
      1696
    ],
    [
      2154,
      2155,
      2153,
      2152,
      2156
    ],
    [
      2154,
      2157,
      2158,
      2159,
      2155
    ],
    [
      2160,
      2159,
      2158,
      2161,
      2162
    ],
    [
      2163,
      2164,
      2165,
      2160,
      2162
    ],
    [
      2166,
      1588,
      1587,
      2167,
      2165,
      2164,
      2168
    ],
    [
      2166,
      2169,
      1589,
      1588
    ],
    [
      2169,
      1115,
      1114,
      1580,
      1585,
      1589
    ],
    [
      2116,
      2170,
      2171,
      2115,
      2114
    ],
    [
      2116,
      1592,
      1591,
      2172,
      2173,
      2170
    ],
    [
      1590,
      1594,
      2174,
      2175,
      2172,
      1591
    ],
    [
      1593,
      1596,
      2176,
      2174,
      1594
    ],
    [
      1595,
      1598,
      2177,
      2178,
      2176,
      1596
    ],
    [
      1600,
      1602,
      2179,
      2180,
      2177,
      1598,
      1597,
      1599
    ],
    [
      2181,
      2182,
      2183,
      1634,
      1633,
      2184,
      2185
    ],
    [
      1638,
      2186,
      2187,
      2184,
      1633,
      1632,
      1639
    ],
    [
      1638,
      1637,
      1644,
      1643,
      2188,
      2189,
      2186
    ],
    [
      2190,
      2188,
      1643,
      1642,
      1649,
      1653,
      2191
    ],
    [
      1655,
      1660,
      2192,
      2191,
      1653,
      1652
    ],
    [
      2193,
      2192,
      1660,
      1659,
      1663,
      2194
    ],
    [
      2195,
      1664,
      1151,
      1150,
      1667,
      2196
    ],
    [
      1733,
      2197,
      2198,
      1730,
      1729,
      2199,
      2200,
      1734
    ],
    [
      2181,
      1731,
      1730,
      2198,
      2201,
      2182
    ],
    [
      2182,
      2201,
      2202,
      2183
    ],
    [
      2202,
      2203,
      1635,
      1634,
      2183
    ],
    [
      1632,
      1635,
      2203,
      2204,
      1640,
      1639
    ],
    [
      1636,
      1753,
      1752,
      1645,
      1644,
      1637
    ],
    [
      2205,
      2185,
      2184,
      2187,
      2206,
      2207
    ],
    [
      2190,
      2191,
      2192,
      2193,
      2208,
      2209
    ],
    [
      2210,
      2211,
      2212,
      2213,
      1748,
      1747,
      1629,
      1628,
      1627
    ],
    [
      2210,
      2214,
      2215,
      2216,
      2217,
      2218,
      2211
    ],
    [
      2219,
      2220,
      2217,
      2216,
      2221
    ],
    [
      2219,
      2221,
      2222,
      2223,
      2224,
      2225,
      2226
    ],
    [
      2227,
      2228,
      2225,
      2224,
      2229
    ],
    [
      2230,
      2227,
      2229,
      2231,
      2232,
      2233
    ],
    [
      2234,
      2235,
      2236,
      2233,
      2232,
      2237,
      2238
    ],
    [
      2234,
      2239,
      2240,
      2241,
      2242,
      2235
    ],
    [
      2243,
      2244,
      2245,
      2246,
      2241,
      2240
    ],
    [
      2247,
      2248,
      2245,
      2244,
      2249,
      2250
    ],
    [
      2251,
      2252,
      2253,
      2254,
      2247,
      2250
    ],
    [
      2255,
      2256,
      2257,
      2253,
      2252,
      2258
    ],
    [
      2259,
      2260,
      2256,
      2255,
      2261
    ],
    [
      2259,
      2261,
      2262,
      2263,
      2264,
      2265
    ],
    [
      2266,
      2264,
      2263,
      2267,
      2268,
      2269
    ],
    [
      2270,
      2271,
      2269,
      2268,
      2272,
      2273
    ],
    [
      2274,
      2270,
      2273,
      2275,
      1898,
      1897,
      1900
    ],
    [
      2276,
      1617,
      1616,
      1618,
      1624,
      2277
    ],
    [
      2277,
      1624,
      1623,
      1626,
      2278
    ],
    [
      1862,
      2279,
      2280,
      2281,
      2282,
      1863
    ],
    [
      2283,
      2284,
      2281,
      2280
    ],
    [
      2285,
      2286,
      2287,
      2288,
      2284,
      2283
    ],
    [
      2289,
      2290,
      2291,
      2292,
      2293,
      2288,
      2287
    ],
    [
      2291,
      2290,
      2294,
      2295,
      2296
    ],
    [
      2297,
      2298,
      2295,
      2294,
      2299,
      2300
    ],
    [
      2301,
      2302,
      2303,
      2304,
      2297,
      2300
    ],
    [
      2305,
      2303,
      2302,
      2306,
      2307,
      2308
    ],
    [
      2309,
      2310,
      2308,
      2307,
      2311,
      2312
    ],
    [
      2309,
      2312,
      2313,
      2314,
      2315,
      2316
    ],
    [
      2317,
      2315,
      2314,
      2318,
      2319,
      2320
    ],
    [
      2321,
      2320,
      2319,
      2322,
      2323,
      2324
    ],
    [
      2325,
      2326,
      2327,
      2324,
      2323
    ],
    [
      2328,
      2327,
      2326,
      2329,
      2330
    ],
    [
      2331,
      2332,
      2328,
      2330,
      2333,
      2334
    ],
    [
      2331,
      2334,
      2335,
      2336,
      2337,
      2338
    ],
    [
      2337,
      2336,
      2339,
      2340,
      2341,
      2342
    ],
    [
      2342,
      2341,
      2343,
      2344
    ],
    [
      1603,
      1606,
      2344,
      2343,
      2345,
      2346
    ],
    [
      1603,
      2346,
      2347,
      2348,
      1609,
      1604
    ],
    [
      2348,
      2349,
      2350,
      1611,
      1610,
      1609
    ],
    [
      1612,
      2351,
      2352,
      2353,
      1619,
      1615,
      1613
    ],
    [
      2353,
      2354,
      1621,
      1620,
      1619
    ],
    [
      2210,
      1627,
      1622,
      1621,
      2354,
      2214
    ],
    [
      2355,
      2204,
      2203,
      2202,
      2201,
      2198,
      2197
    ],
    [
      1750,
      1129,
      1128,
      1753,
      1636,
      1640,
      2204,
      2355
    ],
    [
      1641,
      1645,
      1752,
      1751,
      1646
    ],
    [
      1750,
      2355,
      2197,
      1733,
      1737,
      1738,
      1743
    ],
    [
      1708,
      1710,
      2356,
      2357,
      2358,
      1715,
      1713
    ],
    [
      1719,
      1716,
      1715,
      2358,
      1720
    ],
    [
      2359,
      2360,
      1721,
      1720,
      2358,
      2357
    ],
    [
      1724,
      1723,
      1727,
      1726
    ],
    [
      2361,
      2362,
      1735,
      1734,
      2200,
      2363
    ],
    [
      1744,
      1740,
      1739,
      1736,
      1735,
      2362
    ],
    [
      2364,
      2365,
      2366,
      2367,
      2368,
      2369
    ],
    [
      2361,
      2363,
      2369,
      2368,
      2370
    ],
    [
      1722,
      2371,
      1728,
      1727,
      1723
    ],
    [
      2371,
      2365,
      2364,
      2199,
      1729,
      1728
    ],
    [
      2364,
      2369,
      2363,
      2200,
      2199
    ],
    [
      2361,
      2370,
      2372,
      1745,
      1744,
      2362
    ],
    [
      1625,
      1631,
      1745,
      2372,
      2373,
      2278,
      1626
    ],
    [
      2276,
      2277,
      2278,
      2373,
      2374,
      2375
    ],
    [
      2376,
      2377,
      1608,
      1607,
      1614,
      1617,
      2276,
      2375
    ],
    [
      2376,
      2378,
      2379,
      2332,
      2331,
      2338,
      2377
    ],
    [
      1711,
      1714,
      1716,
      1719,
      1718,
      2380,
      2381
    ],
    [
      2382,
      1705,
      1704,
      1707,
      1709,
      1712,
      2383
    ],
    [
      2380,
      2384,
      2385,
      2381
    ],
    [
      1717,
      2386,
      2384,
      2380,
      1718
    ],
    [
      2387,
      2206,
      2187,
      2186,
      2189
    ],
    [
      2190,
      2209,
      2388,
      2389,
      2387,
      2189,
      2188
    ],
    [
      2390,
      2391,
      2388,
      2209,
      2208
    ],
    [
      2193,
      2194,
      2392,
      2390,
      2208
    ],
    [
      2393,
      2394,
      2392,
      2194,
      1663,
      1662
    ],
    [
      2395,
      2393,
      1662,
      1661,
      1665,
      2396
    ],
    [
      2195,
      2397,
      2396,
      1665,
      1664
    ],
    [
      2195,
      2196,
      2398,
      2397
    ],
    [
      2399,
      2398,
      2196,
      1667,
      1666,
      1669,
      2400,
      2401
    ],
    [
      1668,
      1671,
      1674,
      2402,
      2403,
      2400,
      1669
    ],
    [
      2404,
      2402,
      1674,
      1673,
      1678
    ],
    [
      2404,
      1678,
      1677,
      1680,
      2405
    ],
    [
      2406,
      2405,
      1680,
      1679,
      1684,
      2407
    ],
    [
      2408,
      1694,
      1693,
      1698,
      2409
    ],
    [
      1699,
      2410,
      2411,
      2409,
      1698,
      1697
    ],
    [
      2382,
      2412,
      2413,
      2410,
      1699,
      1701,
      1705
    ],
    [
      2382,
      2383,
      2414,
      2412
    ],
    [
      1711,
      2381,
      2385,
      2415,
      2416,
      2414,
      2383,
      1712
    ],
    [
      2384,
      2386,
      2417,
      2418,
      2415,
      2385
    ],
    [
      1717,
      1725,
      2419,
      2420,
      2417,
      2386
    ],
    [
      1724,
      1726,
      1732,
      2421,
      2422,
      2419,
      1725
    ],
    [
      1695,
      1692,
      1691,
      2423,
      2424,
      2425,
      2151
    ],
    [
      2426,
      2156,
      2152,
      2151,
      2425,
      2427
    ],
    [
      2428,
      2157,
      2154,
      2156,
      2426,
      2429
    ],
    [
      2428,
      2430,
      2431,
      2161,
      2158,
      2157
    ],
    [
      2431,
      2432,
      2433,
      2163,
      2162,
      2161
    ],
    [
      2163,
      2433,
      2434,
      2435,
      2168,
      2164
    ],
    [
      2166,
      2168,
      2435,
      1116,
      1115,
      2169
    ],
    [
      719,
      1522,
      1521,
      1520,
      2436,
      720
    ],
    [
      1520,
      1519,
      2437,
      2438,
      2436
    ],
    [
      1518,
      2439,
      2440,
      2441,
      2437,
      1519
    ],
    [
      2442,
      2443,
      2444,
      2445,
      2440,
      2439
    ],
    [
      2446,
      2447,
      2444,
      2443,
      2448,
      2449
    ],
    [
      2446,
      2449,
      2450,
      2451,
      2452,
      2453
    ],
    [
      2451,
      2454,
      2455,
      2456,
      2457,
      2452
    ],
    [
      2455,
      2458,
      2459,
      2460,
      2456
    ],
    [
      1158,
      1157,
      2460,
      2459,
      2461
    ],
    [
      2462,
      2463,
      2464,
      1159,
      1158,
      2461
    ],
    [
      2465,
      2466,
      2464,
      2463,
      2467,
      2468
    ],
    [
      2465,
      2469,
      2470,
      2471,
      2466
    ],
    [
      2472,
      2473,
      2474,
      2470,
      2469
    ],
    [
      1686,
      2475,
      2474,
      2473,
      2423,
      1691,
      1687
    ],
    [
      1152,
      1160,
      2476,
      2477
    ],
    [
      2471,
      2478,
      2476,
      1160,
      1159,
      2464,
      2466
    ],
    [
      1686,
      1690,
      2479,
      2477,
      2476,
      2478,
      2475
    ],
    [
      2471,
      2470,
      2474,
      2475,
      2478
    ],
    [
      1768,
      1769,
      1770,
      1771,
      1772,
      1773,
      1203,
      1202,
      2480,
      1758,
      1685,
      1681,
      1676,
      1675,
      1767
    ],
    [
      253,
      252,
      721,
      2481,
      2482,
      256
    ],
    [
      2483,
      2484,
      257,
      256,
      2482,
      2485
    ],
    [
      2483,
      2486,
      2487,
      2488,
      2484
    ],
    [
      2489,
      2488,
      2487,
      2490,
      2491,
      2492
    ],
    [
      2493,
      2492,
      2491,
      2494
    ],
    [
      2493,
      2494,
      2495,
      2496,
      2497
    ],
    [
      1765,
      2497,
      2496,
      2498,
      2499,
      1766
    ],
    [
      1764,
      1766,
      2499,
      1156,
      1155
    ],
    [
      1764,
      1155,
      1154,
      1763
    ],
    [
      2285,
      2283,
      2280,
      2279,
      2500
    ],
    [
      1861,
      2501,
      2500,
      2279,
      1862
    ],
    [
      1215,
      2502,
      2503,
      2501,
      1861,
      1860,
      1216
    ],
    [
      1228,
      1227,
      1231,
      1877,
      2504,
      2505,
      1873
    ],
    [
      2504,
      1877,
      1876,
      1880,
      2506,
      2507
    ],
    [
      1881,
      1884,
      2508,
      2509,
      1882
    ],
    [
      1884,
      1883,
      1886,
      2510,
      2511,
      2508
    ],
    [
      1885,
      1888,
      2512,
      2513,
      2514,
      2510,
      1886
    ],
    [
      1887,
      1891,
      2515,
      2512,
      1888
    ],
    [
      1891,
      1890,
      2516,
      2517,
      2515
    ],
    [
      1893,
      2518,
      2519,
      2516,
      1890,
      1889
    ],
    [
      1893,
      1892,
      1895,
      2520,
      2521,
      2518
    ],
    [
      1894,
      1896,
      1898,
      2275,
      2522,
      2523,
      2520,
      1895
    ],
    [
      1857,
      2524,
      2525,
      2526,
      1864,
      1863,
      2282,
      2527,
      1858
    ],
    [
      2528,
      1866,
      1865,
      1864,
      2526
    ],
    [
      2528,
      2529,
      2530,
      1867,
      1866
    ],
    [
      2531,
      1869,
      1868,
      1867,
      2530
    ],
    [
      1206,
      1869,
      2531,
      2532,
      2533,
      2534,
      1207
    ],
    [
      2535,
      1208,
      1207,
      2534
    ],
    [
      2535,
      2536,
      2537,
      1209,
      1208
    ],
    [
      1210,
      1209,
      2537,
      2538,
      2539,
      2540,
      1903
    ],
    [
      2539,
      2541,
      2542,
      2543,
      2544,
      2540
    ],
    [
      2545,
      2546,
      2543,
      2542,
      2547,
      2548
    ],
    [
      2545,
      2548,
      2549,
      2550,
      2551,
      2552
    ],
    [
      2553,
      2554,
      2555,
      2551,
      2550,
      2556
    ],
    [
      2553,
      2557,
      2558,
      2559,
      2560,
      2554
    ],
    [
      2559,
      2558,
      2561,
      2562,
      2563,
      2564
    ],
    [
      2565,
      2566,
      2563,
      2562,
      2567,
      2568
    ],
    [
      2569,
      2527,
      2282,
      2281,
      2284,
      2288,
      2293,
      2570,
      2571
    ],
    [
      1840,
      1838,
      1832,
      1835,
      2572,
      2573
    ],
    [
      1840,
      2573,
      2574,
      2575,
      1844,
      1841
    ],
    [
      1852,
      1845,
      1844,
      2575,
      2576,
      1856,
      1853
    ],
    [
      2577,
      2578,
      2524,
      1857,
      1856,
      2576
    ],
    [
      2525,
      2524,
      2578,
      2579
    ],
    [
      2580,
      2581,
      2529,
      2528,
      2526,
      2525,
      2579
    ],
    [
      2531,
      2530,
      2529,
      2581,
      2532
    ],
    [
      1836,
      1839,
      1843,
      2582,
      2583
    ],
    [
      1843,
      1842,
      1847,
      2584,
      2585,
      2582
    ],
    [
      2586,
      2587,
      2588,
      2584,
      1847,
      1846
    ],
    [
      1852,
      1851,
      2589,
      2586,
      1846,
      1845
    ],
    [
      1851,
      1850,
      2590,
      2591,
      2589
    ],
    [
      1849,
      2592,
      2593,
      2594,
      2590,
      1850
    ],
    [
      1848,
      1855,
      2595,
      2596,
      2592,
      1849
    ],
    [
      1854,
      2597,
      2595,
      1855
    ],
    [
      1854,
      1858,
      2527,
      2569,
      2598,
      2599,
      2597
    ],
    [
      2569,
      2571,
      2600,
      2601,
      2598
    ],
    [
      2570,
      2602,
      2603,
      2600,
      2571
    ],
    [
      2292,
      2604,
      2602,
      2570,
      2293
    ],
    [
      2292,
      2291,
      2296,
      2605,
      2606,
      2604
    ],
    [
      2607,
      2605,
      2296,
      2295,
      2298,
      2608
    ],
    [
      2609,
      2608,
      2298,
      2297,
      2304,
      2610
    ],
    [
      2611,
      2612,
      2610,
      2304,
      2303,
      2305
    ],
    [
      2611,
      2305,
      2308,
      2310,
      2613,
      2614
    ],
    [
      2309,
      2316,
      2615,
      2616,
      2613,
      2310
    ],
    [
      2617,
      2615,
      2316,
      2315,
      2317
    ],
    [
      2617,
      2317,
      2320,
      2321,
      2618
    ],
    [
      2328,
      2332,
      2379,
      2618,
      2321,
      2324,
      2327
    ],
    [
      2619,
      1776,
      1775,
      2620,
      2621
    ],
    [
      2622,
      2620,
      1775,
      1774,
      2623,
      1782,
      1781,
      2624,
      2625
    ],
    [
      2626,
      2627,
      2624,
      1781,
      1780
    ],
    [
      1785,
      2628,
      2629,
      2626,
      1780,
      1779
    ],
    [
      1785,
      1788,
      1792,
      2630,
      2631,
      2628
    ],
    [
      2632,
      2633,
      2630,
      1792,
      1791,
      1796
    ],
    [
      2632,
      1796,
      1795,
      1800,
      2634,
      2635
    ],
    [
      2634,
      1800,
      1799,
      1802,
      2636,
      2637
    ],
    [
      1805,
      2638,
      2639,
      2636,
      1802,
      1801
    ],
    [
      1805,
      1808,
      1811,
      2640,
      2641,
      2638
    ],
    [
      1810,
      1816,
      2642,
      2643,
      2640,
      1811
    ],
    [
      2644,
      2645,
      2642,
      1816,
      1815,
      1818
    ],
    [
      1821,
      2646,
      2647,
      2644,
      1818,
      1817
    ],
    [
      1821,
      1824,
      1826,
      2648,
      2649,
      2646
    ],
    [
      1825,
      1831,
      2650,
      2651,
      2648,
      1826
    ],
    [
      1834,
      2652,
      2653,
      2650,
      1831,
      1830
    ],
    [
      1837,
      2654,
      2655,
      2652,
      1834,
      1833
    ],
    [
      1836,
      2583,
      2656,
      2657,
      2658,
      2654,
      1837
    ],
    [
      2582,
      2585,
      2659,
      2660,
      2656,
      2583
    ],
    [
      2661,
      2662,
      2659,
      2585,
      2584,
      2588
    ],
    [
      2663,
      2664,
      2665,
      2661,
      2588,
      2587
    ],
    [
      2666,
      2664,
      2663,
      2667,
      2668
    ],
    [
      2669,
      2670,
      2666,
      2668,
      2671
    ],
    [
      2669,
      2672,
      2673,
      2674,
      2675,
      2670
    ],
    [
      2676,
      2674,
      2673,
      2677,
      2678
    ],
    [
      2676,
      2678,
      2679,
      2680,
      2681,
      2682,
      2683
    ],
    [
      2684,
      2685,
      2686,
      2687,
      2683,
      2682,
      2688
    ],
    [
      2687,
      2686,
      2689,
      2690,
      2691,
      2692,
      2693
    ],
    [
      1774,
      1778,
      2694,
      2695,
      2623
    ],
    [
      1783,
      1782,
      2623,
      2695,
      2696,
      2697,
      2698
    ],
    [
      1783,
      2698,
      2699,
      2700,
      1786,
      1784
    ],
    [
      1789,
      1787,
      1786,
      2700,
      2701,
      2702
    ],
    [
      1789,
      2702,
      2703,
      2704,
      1793,
      1790
    ],
    [
      1797,
      1794,
      1793,
      2704,
      2705,
      2706
    ],
    [
      1797,
      2706,
      2707,
      2708,
      1803,
      1798
    ],
    [
      1804,
      1803,
      2708,
      2709,
      1806
    ],
    [
      1806,
      2709,
      2710,
      2711,
      1812,
      1807
    ],
    [
      1809,
      1812,
      2711,
      2712,
      2713,
      1813
    ],
    [
      2714,
      2715,
      1819,
      1814,
      1813,
      2713
    ],
    [
      1820,
      1819,
      2715,
      2716,
      1822
    ],
    [
      1828,
      1827,
      1823,
      1822,
      2716,
      2717,
      2718
    ],
    [
      2719,
      2572,
      1835,
      1829,
      1828,
      2718,
      2720
    ],
    [
      2719,
      2721,
      2574,
      2573,
      2572
    ],
    [
      2577,
      2576,
      2575,
      2574,
      2721,
      2722
    ],
    [
      1902,
      1904,
      2723,
      2724,
      2725,
      1905
    ],
    [
      2726,
      1906,
      1220,
      1219,
      1905,
      2725
    ],
    [
      2726,
      2727,
      1908,
      1907,
      1906
    ],
    [
      1910,
      1909,
      1908,
      2727,
      2728,
      2729,
      2730
    ],
    [
      1910,
      2730,
      1912,
      1911
    ],
    [
      1918,
      1916,
      1915,
      2731,
      1920,
      1919
    ],
    [
      2732,
      2728,
      2727,
      2726,
      2725,
      2724,
      2733,
      2734
    ],
    [
      2729,
      2735,
      2736,
      1913,
      1912,
      2730
    ],
    [
      2737,
      1914,
      1913,
      2736,
      2738
    ],
    [
      1236,
      1239,
      1914,
      2737,
      2739,
      1917,
      1240
    ],
    [
      1915,
      1917,
      2739,
      2740,
      2731
    ],
    [
      1920,
      2731,
      2740,
      2741,
      1922,
      1921
    ],
    [
      1923,
      1922,
      2741,
      2742,
      2743
    ],
    [
      1274,
      1273,
      1923,
      2743,
      2744,
      2745,
      1277
    ],
    [
      2745,
      2746,
      2747,
      1924,
      1278,
      1277
    ],
    [
      261,
      1930,
      1931,
      1934,
      2748,
      2749,
      2750,
      3,
      2
    ],
    [
      2751,
      2752,
      2748,
      1934,
      1933
    ],
    [
      2751,
      1933,
      1932,
      1936,
      2753,
      2754
    ],
    [
      1935,
      1938,
      2755,
      2756,
      2753,
      1936
    ],
    [
      2757,
      2758,
      2755,
      1938,
      1937,
      1940
    ],
    [
      2757,
      1940,
      1939,
      1942,
      2759,
      2760
    ],
    [
      1942,
      1941,
      1944,
      2761,
      2762,
      2759
    ],
    [
      2763,
      2761,
      1944,
      1943,
      1948,
      2764
    ],
    [
      2765,
      2766,
      2764,
      1948,
      1947,
      2767
    ],
    [
      2768,
      2767,
      1947,
      1946,
      2769
    ],
    [
      2770,
      2771,
      2772,
      2773,
      2774,
      2769,
      1946,
      1945,
      2775
    ],
    [
      1120,
      1119,
      1130,
      1749,
      1748,
      2213,
      1755
    ],
    [
      1755,
      2213,
      2212,
      1756
    ],
    [
      2211,
      2218,
      1949,
      1757,
      1756,
      2212
    ],
    [
      2217,
      2220,
      1951,
      1950,
      1949,
      2218
    ],
    [
      2219,
      2226,
      1953,
      1952,
      1951,
      2220
    ],
    [
      1955,
      1954,
      1953,
      2226,
      2225,
      2228
    ],
    [
      2230,
      1959,
      1956,
      1955,
      2228,
      2227
    ],
    [
      2230,
      2233,
      2236,
      1957,
      1959
    ],
    [
      1957,
      2236,
      2235,
      2242,
      1960,
      1958
    ],
    [
      2242,
      2241,
      2246,
      1962,
      1961,
      1960
    ],
    [
      1964,
      1963,
      1962,
      2246,
      2245,
      2248
    ],
    [
      2247,
      2254,
      1966,
      1965,
      1964,
      2248
    ],
    [
      1966,
      2254,
      2253,
      2257,
      1968,
      1967
    ],
    [
      1969,
      1968,
      2257,
      2256,
      2260,
      1970
    ],
    [
      2259,
      2265,
      1973,
      1971,
      1970,
      2260
    ],
    [
      1972,
      1973,
      2265,
      2264,
      2266,
      1975
    ],
    [
      1974,
      1975,
      2266,
      2269,
      2271,
      1977
    ],
    [
      1978,
      1976,
      1977,
      2271,
      2270,
      2274
    ],
    [
      1978,
      2274,
      1900,
      1899,
      1901
    ],
    [
      1371,
      1372,
      1373,
      1374,
      1980,
      762,
      761,
      765,
      1369,
      1370
    ],
    [
      756,
      758,
      759,
      760,
      762,
      1980,
      1979,
      757
    ],
    [
      753,
      755,
      757,
      1979,
      1378,
      804,
      754
    ],
    [
      1385,
      1386,
      1984,
      1983,
      1993,
      1994,
      1998,
      1985,
      1387
    ],
    [
      1403,
      1402,
      1985,
      1998,
      1997,
      2004,
      2010
    ],
    [
      1403,
      2010,
      2009,
      2776,
      892,
      891,
      1404
    ],
    [
      2776,
      2009,
      2008,
      2011
    ],
    [
      922,
      893,
      892,
      2776,
      2011,
      1410,
      929,
      925
    ],
    [
      2003,
      2002,
      2777,
      2778,
      2779,
      2005
    ],
    [
      2780,
      2013,
      2006,
      2005,
      2779,
      2781
    ],
    [
      2782,
      2783,
      2014,
      2013,
      2780
    ],
    [
      2783,
      2784,
      2016,
      2015,
      2014
    ],
    [
      2018,
      2017,
      2016,
      2784,
      2785,
      2786,
      2787,
      2019
    ],
    [
      2022,
      2021,
      2020,
      2019,
      2787,
      2788
    ],
    [
      2022,
      2788,
      2789,
      2790,
      2023
    ],
    [
      2026,
      2024,
      2023,
      2790,
      2791
    ],
    [
      2025,
      2026,
      2791,
      2792,
      2793,
      2794,
      2032,
      2027
    ],
    [
      1379,
      807,
      806,
      2795,
      2796,
      1986
    ],
    [
      1986,
      2796,
      2797,
      2798,
      1989,
      1987
    ],
    [
      2798,
      2799,
      2800,
      1990,
      1989
    ],
    [
      1988,
      1990,
      2800,
      2801,
      2802,
      1991
    ],
    [
      2803,
      2804,
      1999,
      1996,
      1995,
      2805,
      2806
    ],
    [
      2001,
      2000,
      1999,
      2804,
      2807,
      2808
    ],
    [
      2001,
      2808,
      2809,
      2810,
      2811,
      2777,
      2002
    ],
    [
      2777,
      2811,
      2812,
      2813,
      2778
    ],
    [
      2814,
      2781,
      2779,
      2778,
      2813
    ],
    [
      2814,
      2815,
      2782,
      2780,
      2781
    ],
    [
      2782,
      2815,
      2816,
      2817,
      2785,
      2784,
      2783
    ],
    [
      2817,
      2818,
      2819,
      2786,
      2785
    ],
    [
      2787,
      2786,
      2819,
      2820,
      2789,
      2788
    ],
    [
      2035,
      2034,
      2821
    ],
    [
      2822,
      2823,
      2037,
      2036,
      2035,
      2821
    ],
    [
      2039,
      2038,
      2037,
      2823
    ],
    [
      1431,
      1430,
      2039,
      2823,
      2822,
      2824,
      2825,
      1432
    ],
    [
      1434,
      1433,
      1432,
      2825,
      2826,
      2827,
      1436
    ],
    [
      1435,
      1436,
      2827,
      2828,
      1437
    ],
    [
      1438,
      1437,
      2828,
      2829,
      2830,
      2040,
      1439
    ],
    [
      2040,
      2830,
      2043,
      2042,
      2041
    ],
    [
      2051,
      2050,
      2831,
      2832,
      2833,
      2834,
      2835,
      2836
    ],
    [
      2837,
      2838,
      2839,
      2840,
      2834,
      2833
    ],
    [
      2834,
      2840,
      2841,
      2842,
      2835
    ],
    [
      1453,
      1452,
      2059,
      2836,
      2835,
      2842
    ],
    [
      2822,
      2821,
      2034,
      2033,
      2843,
      2049,
      2048,
      2824
    ],
    [
      2824,
      2048,
      2047,
      2053,
      2844,
      2826,
      2825
    ],
    [
      2054,
      2060,
      2829,
      2828,
      2827,
      2826,
      2844,
      2055
    ],
    [
      2830,
      2829,
      2060,
      1448,
      971,
      970,
      1447,
      2043
    ],
    [
      2055,
      2844,
      2053,
      2052,
      2056
    ],
    [
      2056,
      2052,
      2051,
      2836,
      2059,
      2057
    ],
    [
      2066,
      2068,
      2070,
      2845,
      2846,
      2067
    ],
    [
      2067,
      2846,
      2847,
      2062,
      2061,
      2065
    ],
    [
      2063,
      2062,
      2847,
      2848,
      2849,
      2118,
      2117
    ],
    [
      2118,
      2849,
      2850,
      2120,
      2119
    ],
    [
      1543,
      1542,
      1541,
      2120,
      2850,
      2851,
      2852
    ],
    [
      1543,
      2852,
      2853,
      2123,
      1544
    ],
    [
      2121,
      2854,
      2855,
      2125,
      2124,
      2122
    ],
    [
      2125,
      2855,
      2856,
      2126
    ],
    [
      2126,
      2856,
      2857,
      2858,
      2859,
      2128,
      2127
    ],
    [
      2128,
      2859,
      2860,
      2131,
      2130,
      2129
    ],
    [
      2133,
      2132,
      2131,
      2860,
      2861,
      2862
    ],
    [
      2133,
      2862,
      2863,
      2134
    ],
    [
      2136,
      2135,
      2134,
      2863,
      2864,
      2865
    ],
    [
      2136,
      2865,
      2866,
      2137
    ],
    [
      2139,
      2138,
      2137,
      2866,
      2867,
      2140
    ],
    [
      2140,
      2867,
      2868,
      2141
    ],
    [
      2141,
      2868,
      2869,
      2870,
      2143,
      2142
    ],
    [
      2871,
      2872,
      2873,
      2146,
      2145,
      2144,
      2143,
      2870
    ],
    [
      2874,
      2875,
      2150,
      2149,
      2148,
      2147,
      2146,
      2873
    ],
    [
      2876,
      2877,
      2878,
      2879,
      2880
    ],
    [
      2845,
      2881,
      2848,
      2847,
      2846
    ],
    [
      2069,
      2882,
      2881,
      2845,
      2070
    ],
    [
      2883,
      2882,
      2069,
      2071,
      2073,
      2884
    ],
    [
      2077,
      2885,
      2886,
      2884,
      2073,
      2072,
      2074
    ],
    [
      2077,
      2076,
      2887,
      2888,
      2885
    ],
    [
      2075,
      2079,
      2889,
      2890,
      2887,
      2076
    ],
    [
      2078,
      2081,
      2891,
      2892,
      2889,
      2079
    ],
    [
      2081,
      2080,
      2083,
      2893,
      2894,
      2891
    ],
    [
      2082,
      2085,
      2895,
      2896,
      2893,
      2083
    ],
    [
      2085,
      2084,
      2087,
      2897,
      2898,
      2895
    ],
    [
      2897,
      2087,
      2086,
      2089,
      2899,
      2900,
      2901
    ],
    [
      2090,
      2902,
      2903,
      2899,
      2089,
      2088
    ],
    [
      2090,
      2091,
      2093,
      2904,
      2905,
      2902
    ],
    [
      2904,
      2093,
      2092,
      2095,
      2906,
      2907
    ],
    [
      2094,
      2098,
      2908,
      2909,
      2906,
      2095
    ],
    [
      2097,
      2910,
      2911,
      2908,
      2098
    ],
    [
      2097,
      2096,
      2100,
      2912,
      2913,
      2910
    ],
    [
      2912,
      2100,
      2099,
      2101,
      2914,
      2915,
      2916
    ],
    [
      1506,
      2917,
      2918,
      2914,
      2101,
      1507
    ],
    [
      2919,
      2920,
      2915,
      2914,
      2918
    ],
    [
      2105,
      2921,
      2922,
      2923,
      2924,
      2102,
      2104
    ],
    [
      2105,
      2106,
      2107,
      2109,
      2925,
      2921
    ],
    [
      2110,
      2112,
      2926,
      2925,
      2109,
      2108
    ],
    [
      2927,
      2928,
      2926,
      2112,
      2111,
      2113
    ],
    [
      2927,
      2113,
      1535,
      1534,
      2115,
      2171,
      2929
    ],
    [
      2167,
      1587,
      1586,
      2150,
      2875,
      2879,
      2878,
      2930
    ],
    [
      2160,
      2165,
      2167,
      2930,
      2356,
      1710,
      1706,
      1703,
      1702,
      2153,
      2155,
      2159
    ],
    [
      2931,
      2932,
      2929,
      2171,
      2170,
      2173
    ],
    [
      2931,
      2173,
      2172,
      2175,
      2933
    ],
    [
      2176,
      2178,
      2934,
      2933,
      2175,
      2174
    ],
    [
      2935,
      2934,
      2178,
      2177,
      2180
    ],
    [
      1612,
      1611,
      2350,
      2936,
      2937,
      2351
    ],
    [
      2351,
      2937,
      2938,
      2352
    ],
    [
      2353,
      2352,
      2938,
      2939,
      2215,
      2214,
      2354
    ],
    [
      2221,
      2216,
      2215,
      2939,
      2940,
      2941,
      2222
    ],
    [
      2942,
      2223,
      2222,
      2941
    ],
    [
      2224,
      2223,
      2942,
      2943,
      2231,
      2229
    ],
    [
      2289,
      2944,
      2945,
      2299,
      2294,
      2290
    ],
    [
      2946,
      2947,
      2301,
      2300,
      2299,
      2945
    ],
    [
      2301,
      2947,
      2948,
      2949,
      2306,
      2302
    ],
    [
      2307,
      2306,
      2949,
      2950,
      2951,
      2311
    ],
    [
      2313,
      2312,
      2311,
      2951,
      2952,
      2953
    ],
    [
      2313,
      2953,
      2954,
      2955,
      2318,
      2314
    ],
    [
      2319,
      2318,
      2955,
      2956,
      2957,
      2322
    ],
    [
      2325,
      2323,
      2322,
      2957,
      2958,
      2959
    ],
    [
      2960,
      2329,
      2326,
      2325,
      2959,
      2961
    ],
    [
      2960,
      2962,
      2963,
      2333,
      2330,
      2329
    ],
    [
      2334,
      2333,
      2963,
      2964,
      2965,
      2966,
      2335
    ],
    [
      2335,
      2966,
      2967,
      2968,
      2339,
      2336
    ],
    [
      2340,
      2339,
      2968,
      2969,
      2970
    ],
    [
      2340,
      2970,
      2971,
      2345,
      2343,
      2341
    ],
    [
      2345,
      2971,
      2972,
      2973,
      2347,
      2346
    ],
    [
      2347,
      2973,
      2974,
      2975,
      2349,
      2348
    ],
    [
      2349,
      2975,
      2976,
      2936,
      2350
    ],
    [
      2977,
      2940,
      2939,
      2938,
      2937,
      2936,
      2976
    ],
    [
      2942,
      2941,
      2940,
      2977,
      2978,
      2979,
      2943
    ],
    [
      2943,
      2979,
      2980,
      2981,
      2237,
      2232,
      2231
    ],
    [
      2237,
      2981,
      2982,
      2983,
      2238
    ],
    [
      2234,
      2238,
      2983,
      2984,
      2985,
      2239
    ],
    [
      2986,
      2987,
      2243,
      2240,
      2239,
      2985
    ],
    [
      2988,
      2249,
      2244,
      2243,
      2987,
      2989
    ],
    [
      2988,
      2990,
      2991,
      2251,
      2250,
      2249
    ],
    [
      2251,
      2991,
      2992,
      2993,
      2258,
      2252
    ],
    [
      2255,
      2258,
      2993,
      2994,
      2262,
      2261
    ],
    [
      2262,
      2994,
      2995,
      2996,
      2267,
      2263
    ],
    [
      2268,
      2267,
      2996,
      2997,
      2272
    ],
    [
      2273,
      2272,
      2997,
      2998,
      2522,
      2275
    ],
    [
      2337,
      2342,
      2344,
      1606,
      1605,
      1608,
      2377,
      2338
    ],
    [
      2360,
      2366,
      2365,
      2371,
      1722,
      1721
    ],
    [
      2373,
      2372,
      2370,
      2368,
      2367,
      2999,
      2374
    ],
    [
      2376,
      2375,
      2374,
      2999,
      3000,
      2693,
      2692,
      2378
    ],
    [
      3001,
      3002,
      1689,
      1688,
      1694,
      2408
    ],
    [
      3001,
      2408,
      2409,
      2411,
      3003,
      3004
    ],
    [
      2413,
      3005,
      3006,
      3003,
      2411,
      2410
    ],
    [
      2414,
      2416,
      3007,
      3005,
      2413,
      2412
    ],
    [
      3008,
      3009,
      3007,
      2416,
      2415,
      2418
    ],
    [
      3008,
      2418,
      2417,
      2420,
      3010,
      3011
    ],
    [
      2422,
      2421,
      3012,
      3013,
      3014,
      3015
    ],
    [
      1152,
      2477,
      2479,
      3016,
      3017,
      1762,
      1761,
      1153
    ],
    [
      3018,
      3019,
      3016,
      2479,
      1690,
      1689,
      3002
    ],
    [
      3001,
      3004,
      3020,
      3021,
      3018,
      3002
    ],
    [
      3004,
      3003,
      3006,
      3022,
      3023,
      3020
    ],
    [
      3005,
      3007,
      3009,
      3024,
      3022,
      3006
    ],
    [
      3008,
      3011,
      3025,
      3024,
      3009
    ],
    [
      2420,
      2419,
      2422,
      3015,
      3026,
      3010
    ],
    [
      2181,
      2185,
      2205,
      3027,
      3012,
      2421,
      1732,
      1731
    ],
    [
      3028,
      3029,
      3030,
      3031
    ],
    [
      3032,
      3033,
      3034,
      3035,
      3036,
      3037
    ],
    [
      3038,
      3039,
      3040,
      3037,
      3036
    ],
    [
      3041,
      3042,
      3040,
      3039,
      2401,
      2400,
      2403,
      3043
    ],
    [
      2205,
      2207,
      3031,
      3030,
      3027
    ],
    [
      3028,
      3044,
      3045,
      3035,
      3034,
      3029
    ],
    [
      3045,
      3046,
      3047,
      3048,
      3038,
      3036,
      3035
    ],
    [
      2399,
      2401,
      3039,
      3038,
      3048,
      3049
    ],
    [
      2404,
      2405,
      2406,
      3043,
      2403,
      2402
    ],
    [
      3041,
      3043,
      2406,
      2407,
      3050
    ],
    [
      1684,
      1683,
      3051,
      3050,
      2407
    ],
    [
      3028,
      3031,
      2207,
      2206,
      2387,
      2389,
      3044
    ],
    [
      3045,
      3044,
      2389,
      2388,
      2391,
      3046
    ],
    [
      3047,
      3046,
      2391,
      2390,
      2392,
      2394
    ],
    [
      2395,
      3049,
      3048,
      3047,
      2394,
      2393
    ],
    [
      2399,
      3049,
      2395,
      2396,
      2397,
      2398
    ],
    [
      2465,
      2468,
      3052,
      2472,
      2469
    ],
    [
      2472,
      3052,
      3053,
      3054,
      2424,
      2423,
      2473
    ],
    [
      2424,
      3054,
      3055,
      3056,
      2427,
      2425
    ],
    [
      2426,
      2427,
      3056,
      3057,
      2429
    ],
    [
      2428,
      2429,
      3057,
      3058,
      2430
    ],
    [
      2431,
      2430,
      3058,
      3059,
      3060,
      2432
    ],
    [
      3061,
      2434,
      2433,
      2432,
      3060,
      3062
    ],
    [
      2435,
      2434,
      3061,
      3063,
      1117,
      1116
    ],
    [
      2442,
      2439,
      1518,
      1517,
      2103,
      3064
    ],
    [
      2442,
      3064,
      3065,
      2448,
      2443
    ],
    [
      3065,
      3066,
      3067,
      2450,
      2449,
      2448
    ],
    [
      2451,
      2450,
      3067,
      3068,
      3069,
      2454
    ],
    [
      3070,
      2458,
      2455,
      2454,
      3069
    ],
    [
      3070,
      3071,
      3072,
      2462,
      2461,
      2459,
      2458
    ],
    [
      3073,
      2467,
      2463,
      2462,
      3072
    ],
    [
      3073,
      3074,
      3053,
      3052,
      2468,
      2467
    ],
    [
      3075,
      3076,
      3059,
      3058,
      3057,
      3056,
      3055
    ],
    [
      3077,
      3078,
      3062,
      3060,
      3059,
      3076
    ],
    [
      3061,
      3062,
      3078,
      3079,
      3063
    ],
    [
      1112,
      1117,
      3063,
      3079,
      1601
    ],
    [
      721,
      720,
      2436,
      2438,
      2481
    ],
    [
      2482,
      2481,
      2438,
      2437,
      2441,
      2485
    ],
    [
      2483,
      2485,
      2441,
      2440,
      2445,
      2486
    ],
    [
      2487,
      2486,
      2445,
      2444,
      2447,
      2490
    ],
    [
      2446,
      2453,
      2495,
      2494,
      2491,
      2490,
      2447
    ],
    [
      2453,
      2452,
      2457,
      2498,
      2496,
      2495
    ],
    [
      1157,
      1156,
      2499,
      2498,
      2457,
      2456,
      2460
    ],
    [
      1202,
      258,
      257,
      2484,
      2488,
      2489,
      2480
    ],
    [
      1758,
      2480,
      2489,
      2492,
      2493,
      2497,
      1765,
      1759
    ],
    [
      2289,
      2287,
      2286,
      3080,
      3081,
      2944
    ],
    [
      2285,
      2500,
      2501,
      2503,
      3080,
      2286
    ],
    [
      1215,
      1214,
      1218,
      1872,
      3082,
      2502
    ],
    [
      1871,
      3083,
      3084,
      3082,
      1872
    ],
    [
      3085,
      3086,
      3083,
      1871,
      1870,
      1874
    ],
    [
      3085,
      1874,
      1873,
      2505,
      3087
    ],
    [
      3088,
      3087,
      2505,
      2504,
      2507
    ],
    [
      3089,
      3088,
      2507,
      2506,
      3090,
      3091
    ],
    [
      1879,
      1882,
      2509,
      3092,
      3090,
      2506,
      1880
    ],
    [
      2511,
      3093,
      3094,
      3092,
      2509,
      2508
    ],
    [
      2511,
      2510,
      2514,
      3095,
      3096,
      3097,
      3093
    ],
    [
      3098,
      3095,
      2514,
      2513,
      3099
    ],
    [
      2513,
      2512,
      2515,
      2517,
      3100,
      3099
    ],
    [
      3101,
      3100,
      2517,
      2516,
      2519,
      3102
    ],
    [
      2519,
      2518,
      2521,
      3103,
      3104,
      3102
    ],
    [
      2523,
      3105,
      3103,
      2521,
      2520
    ],
    [
      2523,
      2522,
      2998,
      3106,
      3105
    ],
    [
      3107,
      3108,
      2533,
      2532,
      2581,
      2580
    ],
    [
      2535,
      2534,
      2533,
      3108,
      3109,
      3110,
      2536
    ],
    [
      3111,
      3112,
      2538,
      2537,
      2536,
      3110
    ],
    [
      2539,
      2538,
      3112,
      3113,
      3114,
      2541
    ],
    [
      3114,
      3115,
      3116,
      2547,
      2542,
      2541
    ],
    [
      3117,
      2549,
      2548,
      2547,
      3116,
      3118
    ],
    [
      2556,
      2550,
      2549,
      3117,
      3119
    ],
    [
      2553,
      2556,
      3119,
      3120,
      3121,
      2557
    ],
    [
      2557,
      3121,
      3122,
      2561,
      2558
    ],
    [
      2567,
      2562,
      2561,
      3122,
      3123,
      3124
    ],
    [
      1904,
      1903,
      2540,
      2544,
      3125,
      2723
    ],
    [
      2544,
      2543,
      2546,
      3126,
      3127,
      3125
    ],
    [
      2545,
      2552,
      3128,
      3129,
      3126,
      2546
    ],
    [
      3130,
      3131,
      3128,
      2552,
      2551,
      2555
    ],
    [
      3130,
      2555,
      2554,
      2560,
      3132,
      3133
    ],
    [
      2559,
      2564,
      3134,
      3135,
      3132,
      2560
    ],
    [
      3136,
      3137,
      3134,
      2564,
      2563,
      2566
    ],
    [
      2565,
      3138,
      3139,
      3136,
      2566
    ],
    [
      3140,
      3141,
      3142,
      3143,
      3138,
      2565,
      2568
    ],
    [
      2663,
      2587,
      2586,
      2589,
      2591,
      2667
    ],
    [
      2668,
      2667,
      2591,
      2590,
      2594,
      2671
    ],
    [
      2669,
      2671,
      2594,
      2593,
      2672
    ],
    [
      2592,
      2596,
      2677,
      2673,
      2672,
      2593
    ],
    [
      2599,
      2679,
      2678,
      2677,
      2596,
      2595,
      2597
    ],
    [
      2601,
      2680,
      2679,
      2599,
      2598
    ],
    [
      2601,
      2600,
      2603,
      2681,
      2680
    ],
    [
      2681,
      2603,
      2602,
      2604,
      2606,
      2688,
      2682
    ],
    [
      2684,
      2688,
      2606,
      2605,
      2607
    ],
    [
      2684,
      2607,
      2608,
      2609,
      2685
    ],
    [
      2689,
      2686,
      2685,
      2609,
      2610,
      2612
    ],
    [
      2689,
      2612,
      2611,
      2614,
      2690
    ],
    [
      2691,
      2690,
      2614,
      2613,
      2616
    ],
    [
      2692,
      2691,
      2616,
      2615,
      2617,
      2618,
      2379,
      2378
    ],
    [
      2619,
      3144,
      3145,
      3146,
      1777,
      1776
    ],
    [
      3147,
      2621,
      2620,
      2622,
      3148,
      3149
    ],
    [
      2624,
      2627,
      3150,
      3151,
      2625
    ],
    [
      2626,
      2629,
      3152,
      3153,
      3150,
      2627
    ],
    [
      2631,
      3154,
      3155,
      3152,
      2629,
      2628
    ],
    [
      2631,
      2630,
      2633,
      3156,
      3157,
      3154
    ],
    [
      2632,
      2635,
      3158,
      3159,
      3156,
      2633
    ],
    [
      3160,
      3161,
      3158,
      2635,
      2634,
      2637
    ],
    [
      3160,
      2637,
      2636,
      2639,
      3162,
      3163
    ],
    [
      3164,
      3165,
      3162,
      2639,
      2638,
      2641
    ],
    [
      3164,
      2641,
      2640,
      2643,
      3166,
      3167
    ],
    [
      2642,
      2645,
      3168,
      3169,
      3166,
      2643
    ],
    [
      2644,
      2647,
      3170,
      3171,
      3168,
      2645
    ],
    [
      2646,
      2649,
      3172,
      3173,
      3170,
      2647
    ],
    [
      3174,
      3172,
      2649,
      2648,
      2651,
      3175
    ],
    [
      2650,
      2653,
      3176,
      3177,
      3175,
      2651
    ],
    [
      3178,
      3176,
      2653,
      2652,
      2655,
      3179,
      3180
    ],
    [
      2654,
      2658,
      3181,
      3182,
      3179,
      2655
    ],
    [
      2657,
      3183,
      3181,
      2658
    ],
    [
      2657,
      2656,
      2660,
      3184,
      3185,
      3183
    ],
    [
      3186,
      3184,
      2660,
      2659,
      2662
    ],
    [
      3187,
      3186,
      2662,
      2661,
      2665
    ],
    [
      3187,
      2665,
      2664,
      2666,
      2670,
      2675,
      3188
    ],
    [
      2676,
      2683,
      2687,
      2693,
      3000,
      3189,
      3188,
      2675,
      2674
    ],
    [
      3190,
      2853,
      2852,
      2851,
      3191,
      3192
    ],
    [
      2121,
      2123,
      2853,
      3190,
      3193,
      2854
    ],
    [
      2860,
      2859,
      2858,
      3194,
      3195,
      2861
    ],
    [
      3196,
      3197,
      3198,
      3199,
      3200,
      3201,
      3202,
      3203,
      3204
    ],
    [
      2876,
      2880,
      3202,
      3201,
      3205
    ],
    [
      2359,
      3206,
      3207,
      3189,
      3000,
      2999,
      2367,
      2366,
      2360
    ],
    [
      2698,
      2697,
      3208,
      2699
    ],
    [
      3209,
      3210,
      2701,
      2700,
      2699,
      3208
    ],
    [
      3211,
      3212,
      2703,
      2702,
      2701,
      3210
    ],
    [
      2705,
      2704,
      2703,
      3212,
      3213,
      3214
    ],
    [
      2705,
      3214,
      3215,
      3216,
      2707,
      2706
    ],
    [
      3216,
      3217,
      2710,
      2709,
      2708,
      2707
    ],
    [
      2712,
      2711,
      2710,
      3217,
      3218,
      3219
    ],
    [
      2714,
      2713,
      2712,
      3219,
      3220,
      3221
    ],
    [
      3222,
      2717,
      2716,
      2715,
      2714,
      3221,
      3223
    ],
    [
      3222,
      3224,
      2720,
      2718,
      2717
    ],
    [
      2719,
      2720,
      3224,
      3225,
      2722,
      2721
    ],
    [
      3107,
      2580,
      2579,
      2578,
      2577,
      2722,
      3225,
      3226,
      3227
    ],
    [
      3107,
      3227,
      3228,
      3109,
      3108
    ],
    [
      3111,
      3110,
      3109,
      3228,
      3229
    ],
    [
      3111,
      3229,
      3230,
      3231,
      3113,
      3112
    ],
    [
      3114,
      3113,
      3231,
      3232,
      3233,
      3115
    ],
    [
      3118,
      3116,
      3115,
      3233,
      3234
    ],
    [
      3235,
      3236,
      3120,
      3119,
      3117,
      3118,
      3234
    ],
    [
      3236,
      3237,
      3123,
      3122,
      3121,
      3120
    ],
    [
      1925,
      1924,
      2747,
      3238,
      3239,
      3240,
      1926
    ],
    [
      2746,
      3241,
      3242,
      3238,
      2747
    ],
    [
      2745,
      2744,
      3243,
      3241,
      2746
    ],
    [
      3243,
      2744,
      2743,
      2742,
      3244,
      3245
    ],
    [
      2737,
      2738,
      3244,
      2742,
      2741,
      2740,
      2739
    ],
    [
      2732,
      3246,
      3247,
      3248,
      2735,
      2729,
      2728
    ],
    [
      805,
      328,
      4,
      3,
      2750
    ],
    [
      805,
      2750,
      2749,
      2795,
      806
    ],
    [
      2795,
      2749,
      2748,
      2752,
      2797,
      2796
    ],
    [
      2751,
      2754,
      2799,
      2798,
      2797,
      2752
    ],
    [
      2754,
      2753,
      2756,
      3249,
      2801,
      2800,
      2799
    ],
    [
      3249,
      2756,
      2755,
      2758,
      3250
    ],
    [
      2757,
      2760,
      3251,
      3252,
      3250,
      2758
    ],
    [
      3251,
      2760,
      2759,
      2762,
      3253,
      3254
    ],
    [
      2763,
      3255,
      3256,
      3253,
      2762,
      2761
    ],
    [
      2763,
      2764,
      2766,
      3257,
      3258,
      3255
    ],
    [
      2765,
      3259,
      3260,
      3261,
      3257,
      2766
    ],
    [
      2768,
      3262,
      3263,
      3259,
      2765,
      2767
    ],
    [
      2768,
      2769,
      2774,
      3264,
      3265,
      3262
    ],
    [
      3266,
      3267,
      3264,
      2774,
      2773,
      3268
    ],
    [
      3266,
      3268,
      3269,
      3270,
      3271
    ],
    [
      3272,
      3273,
      3270,
      3269,
      3274,
      3275
    ],
    [
      3276,
      3277,
      3278,
      3279,
      3280,
      3281,
      3282
    ],
    [
      3279,
      3283,
      3284,
      3285,
      3280
    ],
    [
      3252,
      3286,
      2802,
      2801,
      3249,
      3250
    ],
    [
      3287,
      3288,
      2805,
      1995,
      1992,
      1991,
      2802,
      3286
    ],
    [
      2807,
      2804,
      2803,
      3289,
      3290,
      3291
    ],
    [
      2807,
      3291,
      3292,
      3293,
      2809,
      2808
    ],
    [
      2809,
      3293,
      3294,
      2810
    ],
    [
      2811,
      2810,
      3294,
      3295,
      3296,
      2812
    ],
    [
      3297,
      3298,
      3296,
      3295,
      3299
    ],
    [
      3297,
      3299,
      3300,
      3301,
      3302,
      3303
    ],
    [
      3304,
      3305,
      3302,
      3301,
      3306
    ],
    [
      2814,
      2813,
      2812,
      3296,
      3298,
      2816,
      2815
    ],
    [
      2817,
      2816,
      3298,
      3297,
      3303,
      2818
    ],
    [
      2818,
      3303,
      3302,
      3305,
      2820,
      2819
    ],
    [
      3304,
      3307,
      2792,
      2791,
      2790,
      2789,
      2820,
      3305
    ],
    [
      3308,
      2841,
      2840,
      2839,
      3309,
      3310
    ],
    [
      551,
      1453,
      2842,
      2841,
      3308,
      552
    ],
    [
      2029,
      2032,
      2794,
      3311,
      3312,
      3313,
      3314
    ],
    [
      3313,
      3312,
      3315,
      3316,
      3317,
      3318
    ],
    [
      3313,
      3318,
      3319,
      3320,
      3321,
      3314
    ],
    [
      3318,
      3317,
      3322,
      3319
    ],
    [
      2050,
      2046,
      2045,
      3323,
      3320,
      3319,
      3322,
      3324,
      2831
    ],
    [
      2832,
      2831,
      3324,
      3325,
      3326
    ],
    [
      2837,
      2833,
      2832,
      3326,
      3327
    ],
    [
      2837,
      3327,
      3328,
      3329,
      2838
    ],
    [
      3330,
      3331,
      3309,
      2839,
      2838,
      3329
    ],
    [
      3332,
      3333,
      1505,
      1061,
      1060,
      3334,
      3335,
      3336
    ],
    [
      2862,
      2861,
      3195,
      3337,
      2864,
      2863
    ],
    [
      3196,
      2869,
      2868,
      2867,
      2866,
      2865,
      2864,
      3337,
      3197
    ],
    [
      3196,
      3204,
      2871,
      2870,
      2869
    ],
    [
      2871,
      3204,
      3203,
      3338,
      2872
    ],
    [
      2874,
      2873,
      2872,
      3338
    ],
    [
      3203,
      3202,
      2880,
      2879,
      2875,
      2874,
      3338
    ],
    [
      2876,
      3205,
      3339,
      3207,
      3206,
      2877
    ],
    [
      2359,
      2357,
      2356,
      2930,
      2878,
      2877,
      3206
    ],
    [
      2883,
      3340,
      3341,
      3191,
      2851,
      2850,
      2849,
      2848,
      2881,
      2882
    ],
    [
      2883,
      2884,
      2886,
      3342,
      3343,
      3340
    ],
    [
      2886,
      2885,
      2888,
      3344,
      3345,
      3342
    ],
    [
      3346,
      3344,
      2888,
      2887,
      2890,
      3347
    ],
    [
      3348,
      3349,
      3347,
      2890,
      2889,
      2892
    ],
    [
      3350,
      3348,
      2892,
      2891,
      2894,
      3351
    ],
    [
      3352,
      3353,
      3351,
      2894,
      2893,
      2896
    ],
    [
      3352,
      2896,
      2895,
      2898,
      3354,
      3355
    ],
    [
      3356,
      3357,
      3354,
      2898,
      2897,
      2901
    ],
    [
      3356,
      2901,
      2900,
      3358,
      3359
    ],
    [
      2903,
      3360,
      3358,
      2900,
      2899
    ],
    [
      2903,
      2902,
      2905,
      3361,
      3362,
      3360
    ],
    [
      2904,
      2907,
      3363,
      3364,
      3361,
      2905
    ],
    [
      2907,
      2906,
      2909,
      3365,
      3366,
      3363
    ],
    [
      2909,
      2908,
      2911,
      3367,
      3368,
      3365
    ],
    [
      3369,
      3367,
      2911,
      2910,
      2913,
      3370
    ],
    [
      2912,
      2916,
      3371,
      3372,
      3373,
      3370,
      2913
    ],
    [
      2920,
      3374,
      3375,
      3371,
      2916,
      2915
    ],
    [
      2919,
      2918,
      2917,
      3376
    ],
    [
      3377,
      3378,
      3379,
      3376,
      2917,
      1506,
      1505,
      3333
    ],
    [
      3380,
      3374,
      2920,
      2919,
      3376,
      3379
    ],
    [
      3377,
      3381,
      3382,
      3383,
      3384,
      3378
    ],
    [
      3377,
      3333,
      3332,
      3385,
      3386,
      3387,
      3388,
      3389,
      3390,
      3391,
      3381
    ],
    [
      2923,
      2922,
      3392,
      3393,
      3394,
      3395,
      3396
    ],
    [
      2928,
      3392,
      2922,
      2921,
      2925,
      2926
    ],
    [
      2927,
      2929,
      2932,
      3393,
      3392,
      2928
    ],
    [
      2946,
      2945,
      2944,
      3081,
      3397,
      3398
    ],
    [
      2946,
      3398,
      3399,
      3400,
      2948,
      2947
    ],
    [
      3400,
      3401,
      3402,
      2950,
      2949,
      2948
    ],
    [
      2952,
      2951,
      2950,
      3402,
      3403,
      3404
    ],
    [
      3405,
      2954,
      2953,
      2952,
      3404
    ],
    [
      3405,
      3406,
      3407,
      2956,
      2955,
      2954
    ],
    [
      3408,
      3409,
      2958,
      2957,
      2956,
      3407
    ],
    [
      3410,
      2961,
      2959,
      2958,
      3409
    ],
    [
      2960,
      2961,
      3410,
      3411,
      3412,
      2962
    ],
    [
      2962,
      3412,
      3413,
      3414,
      3415,
      2964,
      2963
    ],
    [
      2965,
      2964,
      3415,
      3416,
      3417
    ],
    [
      3417,
      3416,
      3418,
      3419,
      3420,
      3421
    ],
    [
      3422,
      3420,
      3419,
      3423,
      3424
    ],
    [
      3425,
      3426,
      3424,
      3423,
      3427,
      3428
    ],
    [
      3429,
      3425,
      3428,
      3430,
      3431
    ],
    [
      3431,
      3430,
      3432,
      2980,
      2979,
      2978
    ],
    [
      2981,
      2980,
      3432,
      3433,
      3434,
      3435,
      2982
    ],
    [
      3436,
      2984,
      2983,
      2982,
      3435
    ],
    [
      3437,
      3438,
      2986,
      2985,
      2984,
      3436
    ],
    [
      2986,
      3438,
      3439,
      2989,
      2987
    ],
    [
      2988,
      2989,
      3439,
      3440,
      3441,
      2990
    ],
    [
      3442,
      3443,
      2992,
      2991,
      2990,
      3441
    ],
    [
      3444,
      2995,
      2994,
      2993,
      2992,
      3443
    ],
    [
      3444,
      3445,
      3106,
      2998,
      2997,
      2996,
      2995
    ],
    [
      3017,
      3016,
      3019,
      3446,
      3447
    ],
    [
      3018,
      3021,
      3448,
      3449,
      3446,
      3019
    ],
    [
      3021,
      3020,
      3023,
      3450,
      3448
    ],
    [
      3023,
      3022,
      3024,
      3025,
      3451,
      3452,
      3450
    ],
    [
      3010,
      3026,
      3451,
      3025,
      3011
    ],
    [
      3029,
      3034,
      3033,
      3453,
      3013,
      3012,
      3027,
      3030
    ],
    [
      3454,
      3453,
      3033,
      3032
    ],
    [
      3040,
      3042,
      3455,
      3454,
      3032,
      3037
    ],
    [
      3041,
      3050,
      3051,
      3456,
      3455,
      3042
    ],
    [
      1682,
      1762,
      3017,
      3447,
      3457,
      3456,
      3051,
      1683
    ],
    [
      3457,
      3447,
      3446,
      3449,
      3458
    ],
    [
      3459,
      3458,
      3449,
      3448,
      3450,
      3452
    ],
    [
      3459,
      3452,
      3451,
      3026,
      3015,
      3014
    ],
    [
      2102,
      2924,
      3460,
      3066,
      3065,
      3064,
      2103
    ],
    [
      3066,
      3460,
      3461,
      3068,
      3067
    ],
    [
      3070,
      3069,
      3068,
      3461,
      3462,
      3463,
      3071
    ],
    [
      3073,
      3072,
      3071,
      3463,
      3464,
      3465,
      3074
    ],
    [
      3075,
      3055,
      3054,
      3053,
      3074,
      3465,
      3466,
      3467
    ],
    [
      3075,
      3467,
      3468,
      3077,
      3076
    ],
    [
      3077,
      3468,
      2179,
      1602,
      1601,
      3079,
      3078
    ],
    [
      2502,
      3082,
      3084,
      3469,
      3397,
      3081,
      3080,
      2503
    ],
    [
      3089,
      3470,
      3471,
      3086,
      3085,
      3087,
      3088
    ],
    [
      3089,
      3091,
      3472,
      3470
    ],
    [
      3090,
      3092,
      3094,
      3473,
      3472,
      3091
    ],
    [
      3474,
      3473,
      3094,
      3093,
      3097,
      3475
    ],
    [
      3476,
      3477,
      3475,
      3097,
      3096
    ],
    [
      3476,
      3096,
      3095,
      3098,
      3478,
      3479
    ],
    [
      3101,
      3480,
      3478,
      3098,
      3099,
      3100
    ],
    [
      3101,
      3102,
      3104,
      3481,
      3482,
      3480
    ],
    [
      3481,
      3104,
      3103,
      3105,
      3106,
      3445,
      3483
    ],
    [
      2724,
      2723,
      3125,
      3127,
      2733
    ],
    [
      2734,
      2733,
      3127,
      3126,
      3129,
      3484,
      3485
    ],
    [
      3484,
      3129,
      3128,
      3131,
      3486,
      3487
    ],
    [
      3130,
      3133,
      3488,
      3489,
      3486,
      3131
    ],
    [
      3490,
      3491,
      3488,
      3133,
      3132,
      3135
    ],
    [
      3490,
      3135,
      3134,
      3137,
      3492,
      3493
    ],
    [
      3494,
      3495,
      3492,
      3137,
      3136,
      3139
    ],
    [
      3496,
      3494,
      3139,
      3138,
      3143,
      3497
    ],
    [
      3498,
      3499,
      3497,
      3143,
      3142
    ],
    [
      3141,
      3500,
      3501,
      3502,
      3503,
      3498,
      3142
    ],
    [
      3504,
      3505,
      3506,
      3507,
      3501,
      3500
    ],
    [
      3508,
      3509,
      3506,
      3505,
      3510
    ],
    [
      3511,
      3512,
      3513,
      3514
    ],
    [
      3509,
      3515,
      3516,
      3507,
      3506
    ],
    [
      3508,
      3510,
      3513,
      3512,
      3517,
      3518
    ],
    [
      3501,
      3507,
      3516,
      3519,
      3520,
      3502
    ],
    [
      3508,
      3518,
      3521,
      3515,
      3509
    ],
    [
      3522,
      3517,
      3512,
      3511,
      3523
    ],
    [
      3524,
      3525,
      3526,
      3521,
      3518,
      3517,
      3522,
      3527
    ],
    [
      3524,
      3528,
      3525
    ],
    [
      3276,
      3527,
      3522,
      3523,
      3529,
      3277
    ],
    [
      2771,
      3530,
      3526,
      3525,
      3528,
      3531,
      3532,
      2772
    ],
    [
      3533,
      3534,
      3535,
      3145,
      3144
    ],
    [
      2622,
      2625,
      3151,
      3536,
      3537,
      3148
    ],
    [
      3538,
      3536,
      3151,
      3150,
      3153,
      3539
    ],
    [
      3155,
      3540,
      3541,
      3539,
      3153,
      3152
    ],
    [
      3542,
      3540,
      3155,
      3154,
      3157,
      3543
    ],
    [
      3156,
      3159,
      3544,
      3545,
      3543,
      3157
    ],
    [
      3546,
      3547,
      3544,
      3159,
      3158,
      3161
    ],
    [
      3548,
      3549,
      3546,
      3161,
      3160,
      3163
    ],
    [
      3548,
      3163,
      3162,
      3165,
      3550,
      3551
    ],
    [
      3552,
      3553,
      3550,
      3165,
      3164,
      3167
    ],
    [
      3554,
      3552,
      3167,
      3166,
      3169,
      3555
    ],
    [
      3556,
      3557,
      3555,
      3169,
      3168,
      3171
    ],
    [
      3558,
      3559,
      3556,
      3171,
      3170,
      3173
    ],
    [
      3558,
      3173,
      3172,
      3174,
      3560
    ],
    [
      3174,
      3175,
      3177,
      3561,
      3562,
      3560
    ],
    [
      3178,
      3563,
      3564,
      3561,
      3177,
      3176
    ],
    [
      3178,
      3180,
      3565,
      3563
    ],
    [
      3565,
      3180,
      3179,
      3182,
      3566
    ],
    [
      3185,
      3567,
      3566,
      3182,
      3181,
      3183
    ],
    [
      3187,
      3188,
      3189,
      3207,
      3339,
      3568,
      3567,
      3185,
      3184,
      3186
    ],
    [
      3569,
      3570,
      2857,
      2856,
      2855,
      2854,
      3193
    ],
    [
      3209,
      3208,
      2697,
      2696,
      3571,
      3572,
      3573
    ],
    [
      3574,
      3575,
      3211,
      3210,
      3209,
      3573
    ],
    [
      3211,
      3575,
      3576,
      3577,
      3213,
      3212
    ],
    [
      3215,
      3214,
      3213,
      3577,
      3578
    ],
    [
      3216,
      3215,
      3578,
      3579,
      3218,
      3217
    ],
    [
      3219,
      3218,
      3579,
      3580,
      3581,
      3220
    ],
    [
      3582,
      3223,
      3221,
      3220,
      3581
    ],
    [
      3222,
      3223,
      3582,
      3583,
      3226,
      3225,
      3224
    ],
    [
      3584,
      3230,
      3229,
      3228,
      3227,
      3226,
      3583
    ],
    [
      3585,
      3586,
      3232,
      3231,
      3230,
      3584
    ],
    [
      3235,
      3234,
      3233,
      3232,
      3586,
      3587
    ],
    [
      3235,
      3587,
      3588,
      3589,
      3237,
      3236
    ],
    [
      3248,
      3590,
      3245,
      3244,
      2738,
      2736,
      2735
    ],
    [
      3243,
      3245,
      3590,
      3591,
      3592,
      3242,
      3241
    ],
    [
      3252,
      3251,
      3254,
      3287,
      3286
    ],
    [
      3287,
      3254,
      3253,
      3256,
      3593,
      3288
    ],
    [
      3594,
      3593,
      3256,
      3255,
      3258
    ],
    [
      3257,
      3261,
      3595,
      3596,
      3597,
      3594,
      3258
    ],
    [
      3598,
      3599,
      3595,
      3261,
      3260,
      3600
    ],
    [
      3601,
      3600,
      3260,
      3259,
      3263,
      3602
    ],
    [
      3602,
      3263,
      3262,
      3265,
      3603,
      3604
    ],
    [
      3605,
      3606,
      3603,
      3265,
      3264,
      3267
    ],
    [
      3605,
      3267,
      3266,
      3271,
      3607,
      3608
    ],
    [
      3271,
      3270,
      3273,
      3609,
      3607
    ],
    [
      3610,
      3278,
      3277,
      3529,
      3387,
      3386,
      3611
    ],
    [
      3282,
      3281,
      3612,
      3613
    ],
    [
      3268,
      2773,
      2772,
      3532,
      3274,
      3269
    ],
    [
      3531,
      3613,
      3612,
      3275,
      3274,
      3532
    ],
    [
      3272,
      3275,
      3612,
      3281,
      3280,
      3285,
      3614
    ],
    [
      3610,
      3615,
      3283,
      3279,
      3278
    ],
    [
      3594,
      3597,
      2806,
      2805,
      3288,
      3593
    ],
    [
      2803,
      2806,
      3597,
      3596,
      3289
    ],
    [
      3289,
      3596,
      3595,
      3599,
      3290
    ],
    [
      3598,
      3292,
      3291,
      3290,
      3599
    ],
    [
      3598,
      3600,
      3601,
      3300,
      3299,
      3295,
      3294,
      3293,
      3292
    ],
    [
      3601,
      3602,
      3604,
      3616,
      3306,
      3301,
      3300
    ],
    [
      3310,
      3309,
      3331,
      3335,
      3334
    ],
    [
      3308,
      3310,
      3334,
      1060,
      1011,
      553,
      552
    ],
    [
      3316,
      3617,
      3618,
      3325,
      3324,
      3322,
      3317
    ],
    [
      3619,
      3620,
      3328,
      3327,
      3326,
      3325,
      3618
    ],
    [
      3330,
      3329,
      3328,
      3620,
      3621,
      3622
    ],
    [
      3330,
      3622,
      3623,
      3336,
      3335,
      3331
    ],
    [
      2029,
      3314,
      3321,
      3624,
      2030
    ],
    [
      2031,
      2030,
      3624,
      3625,
      2843,
      2033
    ],
    [
      3626,
      3625,
      3624,
      3321,
      3320,
      3323
    ],
    [
      3626,
      2044,
      2049,
      2843,
      3625
    ],
    [
      3626,
      3323,
      2045,
      2044
    ],
    [
      3627,
      3341,
      3340,
      3343
    ],
    [
      3628,
      3192,
      3191,
      3341,
      3627
    ],
    [
      3629,
      3569,
      3193,
      3190,
      3192,
      3628,
      3630
    ],
    [
      3631,
      3632,
      3194,
      2858,
      2857,
      3570,
      3633
    ],
    [
      3628,
      3627,
      3343,
      3342,
      3345,
      3634,
      3630
    ],
    [
      3346,
      3635,
      3636,
      3634,
      3345,
      3344
    ],
    [
      3346,
      3347,
      3349,
      3637,
      3635
    ],
    [
      3350,
      3638,
      3637,
      3349,
      3348
    ],
    [
      3350,
      3351,
      3353,
      3639,
      3640,
      3641,
      3638
    ],
    [
      3352,
      3355,
      3642,
      3639,
      3353
    ],
    [
      3355,
      3354,
      3357,
      3643,
      3644,
      3642
    ],
    [
      3645,
      3643,
      3357,
      3356,
      3359,
      3646
    ],
    [
      3647,
      3646,
      3359,
      3358,
      3360,
      3362,
      3648
    ],
    [
      3362,
      3361,
      3364,
      3649,
      3648
    ],
    [
      3366,
      3650,
      3651,
      3649,
      3364,
      3363
    ],
    [
      3366,
      3365,
      3368,
      3652,
      3653,
      3650
    ],
    [
      3369,
      3654,
      3652,
      3368,
      3367
    ],
    [
      3369,
      3370,
      3373,
      3655,
      3656,
      3657,
      3654
    ],
    [
      3658,
      3655,
      3373,
      3372
    ],
    [
      3659,
      3658,
      3372,
      3371,
      3375,
      3660
    ],
    [
      3380,
      3661,
      3660,
      3375,
      3374
    ],
    [
      3380,
      3379,
      3378,
      3384,
      3662,
      3663,
      3664,
      3661
    ],
    [
      3662,
      3384,
      3383,
      3665,
      3666,
      3667
    ],
    [
      3668,
      3669,
      3670,
      3664,
      3663,
      3671
    ],
    [
      3668,
      3672,
      3673,
      3674,
      3675,
      3669
    ],
    [
      3676,
      3677,
      3678,
      3679,
      3674,
      3673
    ],
    [
      3680,
      3681,
      3682,
      3683,
      3678,
      3677,
      3684
    ],
    [
      3685,
      3681,
      3680,
      3686,
      3687
    ],
    [
      3685,
      3687,
      3688,
      3689,
      3690,
      3691
    ],
    [
      3692,
      3690,
      3689,
      3693,
      3694,
      3695
    ],
    [
      3696,
      3697,
      3698,
      3699,
      3695,
      3694,
      3700
    ],
    [
      3416,
      3415,
      3414,
      3701,
      3702,
      3418
    ],
    [
      3703,
      3704,
      3427,
      3423,
      3419,
      3418,
      3702
    ],
    [
      3705,
      3433,
      3432,
      3430,
      3428,
      3427,
      3704
    ],
    [
      2965,
      3417,
      3421,
      2967,
      2966
    ],
    [
      3422,
      2969,
      2968,
      2967,
      3421,
      3420
    ],
    [
      3422,
      3424,
      3426,
      2972,
      2971,
      2970,
      2969
    ],
    [
      3429,
      2974,
      2973,
      2972,
      3426,
      3425
    ],
    [
      3429,
      3431,
      2978,
      2977,
      2976,
      2975,
      2974
    ],
    [
      3469,
      3706,
      3399,
      3398,
      3397
    ],
    [
      3707,
      3401,
      3400,
      3399,
      3706,
      3708
    ],
    [
      3707,
      3709,
      3403,
      3402,
      3401
    ],
    [
      3405,
      3404,
      3403,
      3709,
      3710,
      3711,
      3406
    ],
    [
      3408,
      3407,
      3406,
      3711,
      3712,
      3713
    ],
    [
      3408,
      3713,
      3714,
      3715,
      3411,
      3410,
      3409
    ],
    [
      3716,
      3413,
      3412,
      3411,
      3715
    ],
    [
      3717,
      3701,
      3414,
      3413,
      3716,
      3718
    ],
    [
      3717,
      3719,
      3703,
      3702,
      3701
    ],
    [
      3705,
      3704,
      3703,
      3719,
      3720,
      3721
    ],
    [
      3705,
      3721,
      3434,
      3433
    ],
    [
      3437,
      3436,
      3435,
      3434,
      3721,
      3720,
      3722
    ],
    [
      3723,
      3440,
      3439,
      3438,
      3437,
      3722
    ],
    [
      3723,
      3724,
      3442,
      3441,
      3440
    ],
    [
      3442,
      3724,
      3725,
      3483,
      3445,
      3444,
      3443
    ],
    [
      3455,
      3456,
      3457,
      3458,
      3459,
      3014,
      3013,
      3453,
      3454
    ],
    [
      2923,
      3396,
      3462,
      3461,
      3460,
      2924
    ],
    [
      3396,
      3395,
      3464,
      3463,
      3462
    ],
    [
      3394,
      3726,
      3466,
      3465,
      3464,
      3395
    ],
    [
      3467,
      3466,
      3726,
      2935,
      2180,
      2179,
      3468
    ],
    [
      3474,
      3727,
      3728,
      3471,
      3470,
      3472,
      3473
    ],
    [
      3474,
      3475,
      3477,
      3729,
      3730,
      3727
    ],
    [
      3476,
      3479,
      3731,
      3732,
      3729,
      3477
    ],
    [
      3479,
      3478,
      3480,
      3482,
      3733,
      3731
    ],
    [
      3733,
      3482,
      3481,
      3483,
      3725,
      3734
    ],
    [
      2732,
      2734,
      3485,
      3246
    ],
    [
      3484,
      3487,
      3735,
      3247,
      3246,
      3485
    ],
    [
      3486,
      3489,
      3736,
      3737,
      3735,
      3487
    ],
    [
      3738,
      3736,
      3489,
      3488,
      3491,
      3739
    ],
    [
      3490,
      3493,
      3740,
      3741,
      3739,
      3491
    ],
    [
      3493,
      3492,
      3495,
      3742,
      3743,
      3740
    ],
    [
      3496,
      3744,
      3745,
      3742,
      3495,
      3494
    ],
    [
      3496,
      3497,
      3499,
      3746,
      3747,
      3744
    ],
    [
      3746,
      3499,
      3498,
      3503,
      3748,
      3749
    ],
    [
      3529,
      3523,
      3511,
      3514,
      3750,
      3388,
      3387
    ],
    [
      3504,
      3751,
      3752,
      3750,
      3514,
      3513,
      3510,
      3505
    ],
    [
      3531,
      3528,
      3524,
      3527,
      3276,
      3282,
      3613
    ],
    [
      3662,
      3667,
      3753,
      3671,
      3663
    ],
    [
      3533,
      3665,
      3383,
      3382,
      3534
    ],
    [
      3147,
      3149,
      3753,
      3667,
      3666
    ],
    [
      3668,
      3671,
      3753,
      3149,
      3148,
      3537,
      3672
    ],
    [
      3538,
      3676,
      3673,
      3672,
      3537,
      3536
    ],
    [
      3538,
      3539,
      3541,
      3684,
      3677,
      3676
    ],
    [
      3542,
      3686,
      3680,
      3684,
      3541,
      3540
    ],
    [
      3542,
      3543,
      3545,
      3688,
      3687,
      3686
    ],
    [
      3688,
      3545,
      3544,
      3547,
      3693,
      3689
    ],
    [
      3546,
      3549,
      3700,
      3694,
      3693,
      3547
    ],
    [
      3696,
      3700,
      3549,
      3548,
      3551
    ],
    [
      3696,
      3551,
      3550,
      3553,
      3754,
      3697
    ],
    [
      3554,
      3755,
      3754,
      3553,
      3552
    ],
    [
      3756,
      3757,
      3755,
      3554,
      3555,
      3557
    ],
    [
      3756,
      3557,
      3556,
      3559,
      3758
    ],
    [
      3558,
      3560,
      3562,
      3759,
      3758,
      3559
    ],
    [
      3562,
      3561,
      3564,
      3760,
      3761,
      3759
    ],
    [
      3565,
      3566,
      3567,
      3568,
      3760,
      3564,
      3563
    ],
    [
      3585,
      3584,
      3583,
      3582,
      3581,
      3580
    ],
    [
      3585,
      3580,
      3579,
      3578,
      3577,
      3576,
      3588,
      3587,
      3586
    ],
    [
      3574,
      3762,
      3589,
      3588,
      3576,
      3575
    ],
    [
      3763,
      3616,
      3604,
      3603,
      3606,
      3764
    ],
    [
      3605,
      3608,
      3765,
      3766,
      3764,
      3606
    ],
    [
      3608,
      3607,
      3609,
      3767,
      3768,
      3765
    ],
    [
      3272,
      3614,
      3769,
      3770,
      3767,
      3609,
      3273
    ],
    [
      3614,
      3285,
      3284,
      3771,
      3769
    ],
    [
      3772,
      3773,
      3311,
      2794,
      2793
    ],
    [
      3311,
      3773,
      3774,
      3775,
      3315,
      3312
    ],
    [
      3316,
      3315,
      3775,
      3776,
      3777,
      3617
    ],
    [
      3619,
      3618,
      3617,
      3777,
      3778,
      3779
    ],
    [
      3619,
      3779,
      3780,
      3621,
      3620
    ],
    [
      3781,
      3623,
      3622,
      3621,
      3780,
      3782
    ],
    [
      3332,
      3336,
      3623,
      3781,
      3783,
      3385
    ],
    [
      3637,
      3638,
      3641,
      3784,
      3785,
      3636,
      3635
    ],
    [
      3629,
      3630,
      3634,
      3636,
      3785,
      3786
    ],
    [
      3787,
      3788,
      3789,
      3790,
      3784,
      3641,
      3640
    ],
    [
      3786,
      3785,
      3784,
      3790,
      3791
    ],
    [
      3629,
      3786,
      3791,
      3633,
      3570,
      3569
    ],
    [
      3792,
      3793,
      3794,
      3199,
      3198
    ],
    [
      3792,
      3795,
      3796,
      3797,
      3793
    ],
    [
      3798,
      3796,
      3795,
      3799,
      3800,
      3801
    ],
    [
      3802,
      3803,
      3804,
      3801,
      3800,
      3805
    ],
    [
      3806,
      3807,
      3808,
      3803,
      3802,
      3809
    ],
    [
      3806,
      3810,
      3811,
      3812,
      3813,
      3807
    ],
    [
      3814,
      3815,
      3816,
      3817,
      3811,
      3810
    ],
    [
      3815,
      3818,
      3819,
      3820,
      3821,
      3822,
      3816
    ],
    [
      3787,
      3640,
      3639,
      3642,
      3644,
      3823,
      3824,
      3825
    ],
    [
      3645,
      3826,
      3827,
      3823,
      3644,
      3643
    ],
    [
      3645,
      3646,
      3647,
      3828,
      3826
    ],
    [
      3647,
      3648,
      3649,
      3651,
      3829,
      3830,
      3828
    ],
    [
      3831,
      3653,
      3652,
      3654,
      3657,
      3832
    ],
    [
      3832,
      3657,
      3656,
      3833
    ],
    [
      3659,
      3834,
      3835,
      3833,
      3656,
      3655,
      3658
    ],
    [
      3836,
      3837,
      3838,
      3839,
      3835,
      3834
    ],
    [
      3838,
      3840,
      3841,
      3821,
      3820,
      3839
    ],
    [
      3841,
      3683,
      3682,
      3842,
      3843,
      3822,
      3821
    ],
    [
      3685,
      3691,
      3842,
      3682,
      3681
    ],
    [
      3692,
      3844,
      3843,
      3842,
      3691,
      3690
    ],
    [
      3699,
      3845,
      3844,
      3692,
      3695
    ],
    [
      3381,
      3391,
      3535,
      3534,
      3382
    ],
    [
      3147,
      3666,
      3665,
      3533,
      3144,
      2619,
      2621
    ],
    [
      3390,
      3846,
      3146,
      3145,
      3535,
      3391
    ],
    [
      3836,
      3834,
      3659,
      3660,
      3661,
      3664,
      3670
    ],
    [
      3836,
      3670,
      3669,
      3675,
      3837
    ],
    [
      3838,
      3837,
      3675,
      3674,
      3679,
      3840
    ],
    [
      3841,
      3840,
      3679,
      3678,
      3683
    ],
    [
      3728,
      3847,
      3708,
      3706,
      3469,
      3084,
      3083,
      3086,
      3471
    ],
    [
      3847,
      3848,
      3710,
      3709,
      3707,
      3708
    ],
    [
      3848,
      3849,
      3712,
      3711,
      3710
    ],
    [
      3850,
      3714,
      3713,
      3712,
      3849
    ],
    [
      3716,
      3715,
      3714,
      3850,
      3851,
      3852,
      3853,
      3718
    ],
    [
      3723,
      3722,
      3720,
      3719,
      3717,
      3718,
      3853,
      3734,
      3725,
      3724
    ],
    [
      2931,
      2933,
      2934,
      2935,
      3726,
      3394,
      3393,
      2932
    ],
    [
      3728,
      3727,
      3730,
      3851,
      3850,
      3849,
      3848,
      3847
    ],
    [
      3730,
      3729,
      3732,
      3852,
      3851
    ],
    [
      3733,
      3734,
      3853,
      3852,
      3732,
      3731
    ],
    [
      3248,
      3247,
      3735,
      3737,
      3591,
      3590
    ],
    [
      3738,
      3854,
      3592,
      3591,
      3737,
      3736
    ],
    [
      3738,
      3739,
      3741,
      3855,
      3854
    ],
    [
      3743,
      3856,
      3857,
      3855,
      3741,
      3740
    ],
    [
      3743,
      3742,
      3745,
      3858,
      3859,
      3856
    ],
    [
      3745,
      3744,
      3747,
      3860,
      3861,
      3858
    ],
    [
      3746,
      3749,
      3862,
      3863,
      3860,
      3747
    ],
    [
      3749,
      3748,
      3864,
      3865,
      3862
    ],
    [
      2770,
      2775,
      3864,
      3748,
      3503,
      3502,
      3520
    ],
    [
      2770,
      3520,
      3519,
      3530,
      2771
    ],
    [
      3526,
      3530,
      3519,
      3516,
      3515,
      3521
    ],
    [
      3866,
      2694,
      1778,
      1777,
      3146,
      3846,
      3867
    ],
    [
      3868,
      3869,
      3870,
      3389,
      3388,
      3750,
      3752
    ],
    [
      3871,
      3872,
      3868,
      3752,
      3751,
      3873
    ],
    [
      3140,
      3874,
      3873,
      3751,
      3504,
      3500,
      3141
    ],
    [
      3756,
      3758,
      3759,
      3761,
      3875,
      3757
    ],
    [
      3390,
      3389,
      3870,
      3867,
      3846
    ],
    [
      3866,
      3867,
      3870,
      3869,
      3876,
      3877,
      3878
    ],
    [
      3877,
      3879,
      3880,
      3881,
      3882,
      3878
    ],
    [
      3883,
      3884,
      3885,
      3881,
      3880,
      3886
    ],
    [
      3883,
      3887,
      3888,
      3884
    ],
    [
      3888,
      3887,
      3124,
      3123,
      3237,
      3589,
      3762
    ],
    [
      3304,
      3306,
      3616,
      3763,
      3889,
      3890,
      3307
    ],
    [
      3766,
      3891,
      3892,
      3889,
      3763,
      3764
    ],
    [
      3766,
      3765,
      3768,
      3893,
      3894,
      3891
    ],
    [
      3895,
      3893,
      3768,
      3767,
      3770,
      3896
    ],
    [
      3896,
      3770,
      3769,
      3771,
      3897,
      3898
    ],
    [
      3899,
      3900,
      3897,
      3771,
      3284,
      3283,
      3615
    ],
    [
      3772,
      2793,
      2792,
      3307,
      3890,
      3901
    ],
    [
      3772,
      3901,
      3902,
      3903,
      3774,
      3773
    ],
    [
      3904,
      3905,
      3776,
      3775,
      3774,
      3903
    ],
    [
      3776,
      3905,
      3906,
      3907,
      3778,
      3777
    ],
    [
      3780,
      3779,
      3778,
      3907,
      3908,
      3909,
      3782
    ],
    [
      3910,
      3783,
      3781,
      3782,
      3909,
      3900,
      3899
    ],
    [
      3911,
      3200,
      3199,
      3794
    ],
    [
      3912,
      3911,
      3794,
      3793,
      3797
    ],
    [
      3913,
      3912,
      3797,
      3796,
      3798,
      3914
    ],
    [
      3798,
      3801,
      3804,
      3915,
      3914
    ],
    [
      3915,
      3804,
      3803,
      3808,
      3916
    ],
    [
      3917,
      3916,
      3808,
      3807,
      3813
    ],
    [
      3917,
      3813,
      3812,
      3918
    ],
    [
      3817,
      3919,
      3920,
      3918,
      3812,
      3811
    ],
    [
      3817,
      3816,
      3822,
      3843,
      3844,
      3845,
      3919
    ],
    [
      3631,
      3633,
      3791,
      3790,
      3789
    ],
    [
      3788,
      3921,
      3632,
      3631,
      3789
    ],
    [
      3787,
      3825,
      3922,
      3923,
      3921,
      3788
    ],
    [
      3824,
      3924,
      3925,
      3922,
      3825
    ],
    [
      3824,
      3823,
      3827,
      3926,
      3927,
      3924
    ],
    [
      3828,
      3830,
      3928,
      3929,
      3926,
      3827,
      3826
    ],
    [
      3831,
      3930,
      3829,
      3651,
      3650,
      3653
    ],
    [
      3831,
      3832,
      3833,
      3835,
      3839,
      3820,
      3819,
      3930
    ],
    [
      3854,
      3855,
      3857,
      3931,
      3239,
      3238,
      3242,
      3592
    ],
    [
      3239,
      3931,
      3932,
      3240
    ],
    [
      3933,
      3934,
      1928,
      1927,
      1926,
      3240,
      3932
    ],
    [
      1928,
      3934,
      3935,
      3936,
      1929
    ],
    [
      1298,
      1297,
      1929,
      3936,
      3937,
      3938
    ],
    [
      1298,
      3938,
      3865,
      3864,
      2775,
      1945,
      1299
    ],
    [
      3933,
      3932,
      3931,
      3857,
      3856,
      3859
    ],
    [
      3933,
      3859,
      3858,
      3861,
      3935,
      3934
    ],
    [
      3935,
      3861,
      3860,
      3863,
      3937,
      3936
    ],
    [
      3937,
      3863,
      3862,
      3865,
      3938
    ],
    [
      3868,
      3872,
      3876,
      3869
    ],
    [
      3871,
      3873,
      3874,
      3886,
      3880,
      3879
    ],
    [
      3883,
      3886,
      3874,
      3140,
      2568,
      2567,
      3124,
      3887
    ],
    [
      3871,
      3879,
      3877,
      3876,
      3872
    ],
    [
      3866,
      3878,
      3882,
      3571,
      2696,
      2695,
      2694
    ],
    [
      3882,
      3881,
      3885,
      3572,
      3571
    ],
    [
      3888,
      3762,
      3574,
      3573,
      3572,
      3885,
      3884
    ],
    [
      3902,
      3892,
      3891,
      3894,
      3904,
      3903
    ],
    [
      3902,
      3901,
      3890,
      3889,
      3892
    ],
    [
      3895,
      3906,
      3905,
      3904,
      3894,
      3893
    ],
    [
      3895,
      3896,
      3898,
      3908,
      3907,
      3906
    ],
    [
      3909,
      3908,
      3898,
      3897,
      3900
    ],
    [
      3910,
      3899,
      3615,
      3610,
      3611
    ],
    [
      3910,
      3611,
      3386,
      3385,
      3783
    ],
    [
      3913,
      3939,
      3875,
      3761,
      3760,
      3568,
      3339,
      3205,
      3201,
      3200,
      3911,
      3912
    ],
    [
      3913,
      3914,
      3915,
      3916,
      3917,
      3918,
      3920,
      3940,
      3939
    ],
    [
      3699,
      3698,
      3940,
      3920,
      3919,
      3845
    ],
    [
      3923,
      3799,
      3795,
      3792,
      3198,
      3197,
      3337,
      3195,
      3194,
      3632,
      3921
    ],
    [
      3923,
      3922,
      3925,
      3805,
      3800,
      3799
    ],
    [
      3809,
      3802,
      3805,
      3925,
      3924,
      3927
    ],
    [
      3814,
      3810,
      3806,
      3809,
      3927,
      3926,
      3929
    ],
    [
      3814,
      3929,
      3928,
      3818,
      3815
    ],
    [
      3930,
      3819,
      3818,
      3928,
      3830,
      3829
    ],
    [
      3757,
      3875,
      3939,
      3940,
      3698,
      3697,
      3754,
      3755
    ]
  ]
};
/* harmony export (immutable) */ __webpack_exports__["IMG_COASTLINE_40"] = IMG_COASTLINE_40;



const IMG_COASTLINE_70 = {
  name: 'IMG_COASTLINE_70',
  "v": [
    [
      0.8621597366988648,
      -0.304129577775355,
      0.40519845549746164
    ],
    [
      0.8592933080105905,
      -0.28948098523398613,
      0.4216820721778165
    ],
    [
      0.8604599162025405,
      -0.28472883505520086,
      0.4225378362902253
    ],
    [
      0.876488108570836,
      -0.27031409504142484,
      0.39837028698919535
    ],
    [
      0.8791624741364332,
      -0.2799897944538144,
      0.38558923619833607
    ],
    [
      0.8711750653201121,
      -0.305032545401214,
      0.3847195755489376
    ],
    [
      0.8870898092646292,
      -0.27751034855577367,
      0.3688626800630511
    ],
    [
      0.888110557546212,
      -0.2814215731513374,
      0.3634027183992753
    ],
    [
      0.8800840984970189,
      -0.30723784055479625,
      0.3620178019157556
    ],
    [
      0.871423993592054,
      -0.3064582736593109,
      0.3830189941736972
    ],
    [
      0.8959235896004427,
      -0.27879207167187847,
      0.3458264049640506
    ],
    [
      0.8966883273652831,
      -0.28167772292306226,
      0.3414787020821788
    ],
    [
      0.8887031696926162,
      -0.30855462573654735,
      0.3391175594316464
    ],
    [
      0.8801930603938058,
      -0.30790053002757267,
      0.3611889256930866
    ],
    [
      0.9049055425417185,
      -0.2797504508624451,
      0.3207579216785407
    ],
    [
      0.8978154908181237,
      -0.3071218097867534,
      0.3156002826366305
    ],
    [
      0.8963714195558545,
      -0.3090476683171866,
      0.31781726968673724
    ],
    [
      0.8887050358480086,
      -0.308566999639869,
      0.33910140959842494
    ],
    [
      0.9046291739349536,
      -0.27881349337001154,
      0.3223493346985131
    ],
    [
      0.9129388211624078,
      -0.2765849750501827,
      0.30007242524277894
    ],
    [
      0.9065345252147109,
      -0.30415460512368636,
      0.29272022611325144
    ],
    [
      0.9042500325055928,
      -0.3073650510726915,
      0.29640952092116757
    ],
    [
      0.9208374521916767,
      -0.27259907160545677,
      0.27883352165940267
    ],
    [
      0.9147196154505034,
      -0.29988546963064394,
      0.27084447606420065
    ],
    [
      0.9118611613325528,
      -0.3041227627866726,
      0.27571464888222613
    ],
    [
      0.9133597218412584,
      -0.27584905192215736,
      0.2994683941114757
    ],
    [
      0.9217868187289532,
      -0.270850593765777,
      0.2773968577224371
    ],
    [
      0.928220781793114,
      -0.267717949626542,
      0.2583278531152625
    ],
    [
      0.9227476135561636,
      -0.29434218204227597,
      0.24879614455814375
    ],
    [
      0.9193470621400293,
      -0.2997173438084891,
      0.25489310142662
    ],
    [
      0.9299926503115645,
      -0.26425563311494477,
      0.25550465892717433
    ],
    [
      0.935316092669427,
      -0.2613025992460413,
      0.23854718279799242
    ],
    [
      0.9306126744119593,
      -0.2869935137770588,
      0.22714482885092893
    ],
    [
      0.9264657075617135,
      -0.2940357274096824,
      0.23495591867163554
    ],
    [
      0.9428737576535395,
      -0.2461862438208267,
      0.22445803724011934
    ],
    [
      0.9384170797241794,
      -0.27778048301536085,
      0.2054541012919821
    ],
    [
      0.9335807090210508,
      -0.2865868836283869,
      0.2151627706549659
    ],
    [
      0.9426089105386929,
      -0.24577813224953987,
      0.22601228170386273
    ],
    [
      0.9487647761477125,
      -0.241547053834492,
      0.2037165195197922
    ],
    [
      0.9458586322542926,
      -0.2667314766272611,
      0.18494801206360661
    ],
    [
      0.9404776052138899,
      -0.2771869748625584,
      0.1966449975404664
    ],
    [
      0.9550836347185085,
      -0.22884612512526104,
      0.1882676331928461
    ],
    [
      0.9531447635937467,
      -0.25310215678455444,
      0.16569356615399264
    ],
    [
      0.9468777644851955,
      -0.2662306744622137,
      0.1803988001592956
    ],
    [
      0.9533759791444794,
      -0.23046215919921195,
      0.1948369461050503
    ],
    [
      0.9602088625501354,
      -0.21549766629844777,
      0.1776504886007865
    ],
    [
      0.9612907610813859,
      -0.21434635418889852,
      0.17313495633608278
    ],
    [
      0.9598107895349239,
      -0.23792953060256095,
      0.14883812266886123
    ],
    [
      0.9594154239106935,
      -0.23928797726517326,
      0.14920894175151267
    ],
    [
      0.9534015012932482,
      -0.25292133911378956,
      0.16448821706331468
    ],
    [
      0.965993641989212,
      -0.22144163409540885,
      0.13349114699324885
    ],
    [
      0.9650258758575031,
      -0.22504744739066776,
      0.13445707623031114
    ],
    [
      0.9666539401677241,
      -0.19911065093409155,
      0.16104380970039245
    ],
    [
      0.9671199735654696,
      -0.1985277848477802,
      0.15895180204753573
    ],
    [
      0.9719036158227012,
      -0.20313836963231147,
      0.1189040131109361
    ],
    [
      0.9702623769364754,
      -0.20986771463686263,
      0.12060871550050373
    ],
    [
      0.9722894780440043,
      -0.18246227981253155,
      0.14615295867867684
    ],
    [
      0.9750227110481642,
      -0.16805559237460707,
      0.14521718497446529
    ],
    [
      0.9794870130767508,
      -0.160254215618189,
      0.12216291413757216
    ],
    [
      0.9796182206107826,
      -0.1727773290126355,
      0.10245065361735733
    ],
    [
      0.9753175861247563,
      -0.19285614178092508,
      0.10752727455466539
    ],
    [
      0.9823697802506515,
      -0.14214544741665763,
      0.12142605416056687
    ],
    [
      0.9854066628713826,
      -0.1290242594612193,
      0.11102454340896717
    ],
    [
      0.9859871457279081,
      -0.14877444142927562,
      0.0754686294876208
    ],
    [
      0.9798847905019218,
      -0.17226004190543515,
      0.10075849991808537
    ],
    [
      0.9864083194440493,
      -0.12144568291524642,
      0.11067779105500662
    ],
    [
      0.988933629547251,
      -0.10881205658695943,
      0.100847472411642
    ],
    [
      0.9894289095209685,
      -0.12960496513037864,
      0.06506140190389653
    ],
    [
      0.9875515775017547,
      -0.14441074531966472,
      0.062349165271194745
    ],
    [
      0.9909387775589544,
      -0.09018443957697744,
      0.09953444623923755
    ],
    [
      0.9948106858396312,
      -0.07579157925781738,
      0.06787735891215009
    ],
    [
      0.9949105762440117,
      -0.08231635558376833,
      0.05811164152917396
    ],
    [
      0.993897797681291,
      -0.09501424277567494,
      0.05603089713760357
    ],
    [
      0.997758390716308,
      -0.023318486527894047,
      0.06272513006165534
    ],
    [
      0.9983072429246648,
      -0.054354480722844496,
      0.020693939922210417
    ],
    [
      0.9979213738821516,
      -0.06039188896975073,
      0.02248891495435286
    ],
    [
      0.9962509308411029,
      -0.07678335761064596,
      0.039854721078832096
    ],
    [
      0.9951582877773588,
      -0.06973075504452914,
      0.06926473900156774
    ],
    [
      0.9977717841299623,
      -0.022040593536774403,
      0.06297363758477581
    ],
    [
      0.9991070389047833,
      -0.011047557346314393,
      0.04078083235535883
    ],
    [
      0.9992806675789097,
      -0.03738062294385661,
      0.0063903389094691525
    ],
    [
      0.9990801141141824,
      -0.04214588073676608,
      0.007915195418596687
    ],
    [
      0.9998217268949856,
      0.013576486790024848,
      0.013122249623021415
    ],
    [
      0.9998725286962354,
      -0.011480378774035321,
      -0.01109627242817897
    ],
    [
      0.9996696484870035,
      -0.02484423421910295,
      -0.006584673107853717
    ],
    [
      0.9995959311088446,
      0.00641759159836685,
      0.02769095572056748
    ],
    [
      0.9997414638058304,
      0.019517559274377753,
      0.011664922946462649
    ],
    [
      0.9993243703172991,
      0.036722497454043095,
      -0.001503685695632452
    ],
    [
      0.9990991057831474,
      0.04114862506843622,
      -0.01038111161159319
    ],
    [
      0.9992581806614517,
      0.006355286791593081,
      -0.03798287391657131
    ],
    [
      0.9996976565081838,
      -0.007826572384646397,
      -0.023309661875569498
    ],
    [
      0.9985730335992331,
      0.05041610297676657,
      -0.017610029218059944
    ],
    [
      0.9979751422394706,
      0.056370780012281234,
      -0.029461001899385674
    ],
    [
      0.9983327419527764,
      0.019395950229365896,
      -0.054364818216850255
    ],
    [
      0.999085353471472,
      0.0075030356229092675,
      -0.042097041882123466
    ],
    [
      0.9975572929655308,
      0.06133231182809666,
      -0.033433438009024916
    ],
    [
      0.9963338133217569,
      0.06953837857216157,
      -0.04983318510070425
    ],
    [
      0.9969252433530302,
      0.031205413325134903,
      -0.07187684846116138
    ],
    [
      0.9978645265798455,
      0.021319450430245357,
      -0.061740324156364566
    ],
    [
      0.9960598424695675,
      0.07197420436644326,
      -0.051812200545024466
    ],
    [
      0.9957886239858065,
      0.07348028783022027,
      -0.0548239331026344
    ],
    [
      0.9945983216598993,
      0.0701179454209791,
      -0.07653530088300686
    ],
    [
      0.9950491576967604,
      0.040968509288097754,
      -0.09054697683345725
    ],
    [
      0.9959386171988551,
      0.034014549335209004,
      -0.08336234884859535
    ],
    [
      0.9925690270151796,
      0.07972892780785912,
      -0.09192401579972916
    ],
    [
      0.9920719718295845,
      0.0785026335332742,
      -0.09813531086464422
    ],
    [
      0.9926777103310475,
      0.048908202043809815,
      -0.11044886230627773
    ],
    [
      0.9933697991121143,
      0.04466033767288056,
      -0.10593345293580214
    ],
    [
      0.9899847358415832,
      0.05491874178198516,
      -0.130054429381526
    ],
    [
      0.9903225714731229,
      0.05321251794591639,
      -0.12817812748170865
    ],
    [
      0.9898223182887004,
      0.08745710961585182,
      -0.11226322726175157
    ],
    [
      0.9890157626928509,
      0.08537751189468146,
      -0.12065861596981867
    ],
    [
      0.9865573918266539,
      0.09378978237997644,
      -0.1338207358868821
    ],
    [
      0.9855089194577803,
      0.09140851084942433,
      -0.14288685668545242
    ],
    [
      0.9867529213376829,
      0.05994842345478644,
      -0.15074766584207602
    ],
    [
      0.9867204530949258,
      0.05988798571185419,
      -0.15098402767021754
    ],
    [
      0.9828646547895771,
      0.09922117672051496,
      -0.15534551314911538
    ],
    [
      0.9815867279335789,
      0.09671036528416257,
      -0.16472583522706405
    ],
    [
      0.9828531365053597,
      0.06512484286479842,
      -0.17250642568731253
    ],
    [
      0.9826206993033348,
      0.06474954189700725,
      -0.17396568088204337
    ],
    [
      0.9786520974740933,
      0.10439130559600644,
      -0.1770382089423605
    ],
    [
      0.9771154853322471,
      0.10164988090281518,
      -0.1868492173822803
    ],
    [
      0.9785356394823032,
      0.06960894594097299,
      -0.19396545287227476
    ],
    [
      0.9779643701190454,
      0.06881094595117455,
      -0.19710592201900845
    ],
    [
      0.9740806941667723,
      0.10875808807933356,
      -0.19833930404462685
    ],
    [
      0.9721309457865392,
      0.10529608572365602,
      -0.209461592124774
    ],
    [
      0.9738380103498733,
      0.0736234112445379,
      -0.21498633192488736
    ],
    [
      0.9739446270305128,
      0.07305179372015078,
      -0.21469815768344164
    ],
    [
      0.968851163597945,
      0.11231607501774979,
      -0.2207091345810479
    ],
    [
      0.9667080263736187,
      0.1088254618088097,
      -0.23158715553096224
    ],
    [
      0.9679438651008614,
      0.08797811194496988,
      -0.23525417282633657
    ],
    [
      0.9620023117927451,
      0.09113888984037051,
      -0.25738153559274424
    ],
    [
      0.9648323143609604,
      0.08501876478329035,
      -0.24873764250630903
    ],
    [
      0.9630250688477432,
      0.11603168157247581,
      -0.24314474216454549
    ],
    [
      0.9607057136267356,
      0.1126490054818208,
      -0.2536823473734451
    ],
    [
      0.9567736781943412,
      0.11961827115609334,
      -0.26509545058355577
    ],
    [
      0.9541202825902023,
      0.11600250602964203,
      -0.27603968001871637
    ],
    [
      0.9555801337036899,
      0.09409412128328949,
      -0.27930790252114907
    ],
    [
      0.9585081656098116,
      0.0882352213074983,
      -0.27106575250320863
    ],
    [
      0.949815249708616,
      0.1229391344482265,
      -0.2876403320851936
    ],
    [
      0.9470074585512717,
      0.11959263264219355,
      -0.29811822431037455
    ],
    [
      0.9485179360402635,
      0.09717610996012514,
      -0.30144738954407335
    ],
    [
      0.951680329440466,
      0.09114403757438988,
      -0.29325298799965227
    ],
    [
      0.9442224007345145,
      0.0941280606542376,
      -0.3155692731376459
    ],
    [
      0.9422958752580219,
      0.12642063980877846,
      -0.30999404075249165
    ],
    [
      0.9394453662947493,
      0.1234764849627001,
      -0.3196810307299771
    ],
    [
      0.9407331990385122,
      0.10052420851016142,
      -0.32390728878827757
    ],
    [
      0.9360487202203708,
      0.09755231338798892,
      -0.3380774164691537
    ],
    [
      0.9339793802375556,
      0.1307164301843709,
      -0.3325593663858021
    ],
    [
      0.9311039074497067,
      0.12818717859505563,
      -0.3414872776191339
    ],
    [
      0.9325059201731664,
      0.10361235162843901,
      -0.3459728160304234
    ],
    [
      0.9251743125791752,
      0.1352595323311701,
      -0.3546228281670596
    ],
    [
      0.9221965590336308,
      0.1330550788351275,
      -0.3631113500053517
    ],
    [
      0.923626798080915,
      0.10704319128238025,
      -0.3680425152980025
    ],
    [
      0.9274447282761296,
      0.10081825365599724,
      -0.36011380940276555
    ],
    [
      0.9159962543606667,
      0.13975607063012388,
      -0.3760573130777498
    ],
    [
      0.9127690837442263,
      0.13760993624303636,
      -0.38459862871299105
    ],
    [
      0.9140623225198137,
      0.11114158033951417,
      -0.39004822736338585
    ],
    [
      0.918291883737711,
      0.10441322950212824,
      -0.38188727887477775
    ],
    [
      0.9028898063686377,
      0.1425667855864049,
      -0.4055424875437394
    ],
    [
      0.9037401458189604,
      0.11589781949203054,
      -0.41209397504952305
    ],
    [
      0.9084297808606335,
      0.10856097031724626,
      -0.4036952426884411
    ],
    [
      0.9059464832921699,
      0.14441166717895695,
      -0.39800281380053626
    ],
    [
      0.8948653206988549,
      0.1500321375864415,
      -0.4203646220863247
    ],
    [
      0.8923120144331129,
      0.14868682311732706,
      -0.42622939543114213
    ],
    [
      0.892824446703485,
      0.12110165485910036,
      -0.4338189674956631
    ],
    [
      0.8978464291279155,
      0.1134724426188764,
      -0.42543600513867763
    ],
    [
      0.8811579171176254,
      0.15588855166406096,
      -0.44638490628717414
    ],
    [
      0.8812403802333303,
      0.12678785190010103,
      -0.45534627796521343
    ],
    [
      0.8866053737164226,
      0.11891140477880019,
      -0.44697985313735894
    ],
    [
      0.8830622058200057,
      0.1567084179355059,
      -0.44231619052489674
    ],
    [
      0.8708311427545633,
      0.1643005400250855,
      -0.46331247917172114
    ],
    [
      0.8692443031073168,
      0.16375189166505807,
      -0.4664757866080406
    ],
    [
      0.869110038607607,
      0.13305679052726582,
      -0.4763860108001358
    ],
    [
      0.8747909673383276,
      0.1249733198881779,
      -0.4681051514130134
    ],
    [
      0.8569879552673978,
      0.1721676174102874,
      -0.4857262151066889
    ],
    [
      0.856184980074582,
      0.1397330210452605,
      -0.49741528195689
    ],
    [
      0.8621704000728994,
      0.13147740235224145,
      -0.4892605583008336
    ],
    [
      0.8579905016234677,
      0.17243126537664027,
      -0.48385923350135734
    ],
    [
      0.8451061043088155,
      0.18093697638349224,
      -0.503048191565358
    ],
    [
      0.8439960624917248,
      0.18070380713346113,
      -0.5049918619007018
    ],
    [
      0.8427887079310562,
      0.14819515490408777,
      -0.5174411945785282
    ],
    [
      0.8496632438042937,
      0.138720324248341,
      -0.508752438587178
    ],
    [
      0.8304722310460166,
      0.19038849757924411,
      -0.5235151320171841
    ],
    [
      0.8287324323938751,
      0.15642074550827972,
      -0.5373407725765518
    ],
    [
      0.8356032007571748,
      0.14710174293479875,
      -0.5292715447763172
    ],
    [
      0.8236366471110842,
      0.20157817424464466,
      -0.5300838737443414
    ],
    [
      0.8152302053222305,
      0.20159878531456873,
      -0.542915870176922
    ],
    [
      0.8144427880150984,
      0.16308649834622246,
      -0.556853426951259
    ],
    [
      0.820304940841508,
      0.15552362729945413,
      -0.5503746045945711
    ],
    [
      0.8031694624137152,
      0.21034648178413737,
      -0.5573806349767627
    ],
    [
      0.7978164839613833,
      0.17174714949147288,
      -0.5779202147018647
    ],
    [
      0.8049891812650308,
      0.16264298982001493,
      -0.5705608433012748
    ],
    [
      0.7998229303342994,
      0.21527733209437938,
      -0.560302552553333
    ],
    [
      0.788506365617417,
      0.22361063332926212,
      -0.5729362931800519
    ],
    [
      0.7823010343764014,
      0.18174266604932346,
      -0.5957975284867306
    ],
    [
      0.7897656607749888,
      0.17249148630153088,
      -0.5886568509871725
    ],
    [
      0.7762650720560202,
      0.23610989140041874,
      -0.5845208782316883
    ],
    [
      0.7649374825810538,
      0.19278975322256536,
      -0.6145752669892781
    ],
    [
      0.7727686481386266,
      0.18337747103218377,
      -0.6076193870934667
    ],
    [
      0.7836563910997104,
      0.2304326488980413,
      -0.57687386403824
    ],
    [
      0.762235709548184,
      0.25505084137615047,
      -0.5949334344301841
    ],
    [
      0.7487954310362741,
      0.20318926229830306,
      -0.6308878871446748
    ],
    [
      0.7552242963475487,
      0.1957888668162545,
      -0.6255421503281429
    ],
    [
      0.7377733581173772,
      0.20757675777694357,
      -0.64234131245236
    ],
    [
      0.7589125518511687,
      0.261878663214184,
      -0.5962141430693331
    ],
    [
      0.7511793164200072,
      0.26877318425743746,
      -0.6029018245177967
    ],
    [
      0.730134139917261,
      0.21608559010152903,
      -0.6482369593580387
    ],
    [
      0.7297583492969015,
      0.2968012769846435,
      -0.6159234965576053
    ],
    [
      0.7182882703190835,
      0.300254289475443,
      -0.6276219581671886
    ],
    [
      0.6965194373854209,
      0.2863077177450779,
      -0.6579426753934583
    ],
    [
      0.7068786318778124,
      0.2502002093199309,
      -0.6616059666076289
    ],
    [
      0.7196894554138159,
      0.22528023965910235,
      -0.65673122461575
    ],
    [
      0.7261710762279858,
      0.2180693188945052,
      -0.6520132975689801
    ],
    [
      0.6680762042141903,
      0.3604376735059909,
      -0.6509676404248894
    ],
    [
      0.6650879423890851,
      0.35576848241388315,
      -0.6565720187531414
    ],
    [
      0.6650277634848311,
      0.3240684988860738,
      -0.6728429845246887
    ],
    [
      0.673319930553731,
      0.29431291890469174,
      -0.678247872746328
    ],
    [
      0.7048112479723303,
      0.3415220561382629,
      -0.6217747099253712
    ],
    [
      0.703506054856068,
      0.36320357009162013,
      -0.610870196894195
    ],
    [
      0.6975387805718402,
      0.3787468568584847,
      -0.6082684177385578
    ],
    [
      0.6735344384860383,
      0.38873649396453475,
      -0.6286774200124086
    ],
    [
      0.6680034279848092,
      0.38028130059103127,
      -0.6396542445894794
    ],
    [
      0.7002152391236991,
      0.38559497842921947,
      -0.6008453474140502
    ],
    [
      0.6986896862061951,
      0.4078631201545872,
      -0.5877758055643779
    ],
    [
      0.6982719148142416,
      0.4088499463444251,
      -0.587586635617092
    ],
    [
      0.6688392635427328,
      0.4219718553598448,
      -0.6120406790629075
    ],
    [
      0.6684153869884163,
      0.40059108217001993,
      -0.626695823604225
    ],
    [
      0.6966568312542001,
      0.42912301120777635,
      -0.5749110372212621
    ],
    [
      0.6692689938186669,
      0.4424218315887473,
      -0.5969438305624803
    ],
    [
      0.6684880068933334,
      0.42269684098562166,
      -0.6119241499242817
    ],
    [
      0.6686453278986868,
      0.4626099718089812,
      -0.5821558549582331
    ],
    [
      0.6679139590353799,
      0.44497652670923954,
      -0.5965625147488454
    ],
    [
      0.6967203701327608,
      0.4292588720969367,
      -0.574732587007327
    ],
    [
      0.6948857662354784,
      0.4495161967557244,
      -0.5613100397619848
    ],
    [
      0.6742564190562047,
      0.4887563748404268,
      -0.5536203459179836
    ],
    [
      0.6678582293651717,
      0.4848937243240274,
      -0.5646622544321446
    ],
    [
      0.6670355697628871,
      0.46549590882112657,
      -0.5817019060841163
    ],
    [
      0.6954800312829064,
      0.45072124734331726,
      -0.5596051137007343
    ],
    [
      0.6932036002429159,
      0.4715191161639393,
      -0.545104110883634
    ],
    [
      0.6888126672423541,
      0.4807500156899554,
      -0.5426016327478028
    ],
    [
      0.6648510248033985,
      0.5214863195277218,
      -0.5348131761309751
    ],
    [
      0.6646966547254674,
      0.5052143810034764,
      -0.5503969353330803
    ],
    [
      0.693182624223043,
      0.4895859713886208,
      -0.5289644847196417
    ],
    [
      0.6907689719766856,
      0.5066731543210733,
      -0.5158687255926713
    ],
    [
      0.6915634944513489,
      0.5082584730552634,
      -0.5132380127287642
    ],
    [
      0.6888946495280657,
      0.5251956847282392,
      -0.49959348934352577
    ],
    [
      0.6638215915303626,
      0.5396423098795242,
      -0.5178098801741696
    ],
    [
      0.6637516515337706,
      0.5233196926852208,
      -0.534387728465052
    ],
    [
      0.6895856224882045,
      0.5265301015458012,
      -0.49723004879404054
    ],
    [
      0.686510963907583,
      0.5440781071341086,
      -0.48237092550447785
    ],
    [
      0.6618208681315001,
      0.55716366862117,
      -0.5015593532915787
    ],
    [
      0.6620542466296622,
      0.5424551205349171,
      -0.5171330744838112
    ],
    [
      0.6869094528498846,
      0.5448709620988443,
      -0.48090647557186406
    ],
    [
      0.6835670178407456,
      0.5618561689155649,
      -0.46589030637247025
    ],
    [
      0.6587815809966382,
      0.5749961818481755,
      -0.48516617709769294
    ],
    [
      0.6592161055150433,
      0.5611321979410655,
      -0.5005644640437515
    ],
    [
      0.6838886466818062,
      0.5625327581767228,
      -0.46460005910225244
    ],
    [
      0.6802005630241078,
      0.5793526324776778,
      -0.4490854276224865
    ],
    [
      0.6801056002469232,
      0.5795116470092359,
      -0.4490240789683948
    ],
    [
      0.655515037811445,
      0.5921875943958581,
      -0.4686297987182488
    ],
    [
      0.6560901439481471,
      0.5789588622100285,
      -0.4840995340656393
    ],
    [
      0.6760670918997252,
      0.5962549132267216,
      -0.43291265366496645
    ],
    [
      0.6514789599384091,
      0.6094991231808088,
      -0.4517587670420952
    ],
    [
      0.6522203017055375,
      0.5968181690902699,
      -0.4673507794867531
    ],
    [
      0.6761093947247226,
      0.5963507515450088,
      -0.43271453349370204
    ],
    [
      0.6717624047857409,
      0.6128533378970008,
      -0.41610822840336015
    ],
    [
      0.6714839361955605,
      0.6132828729026918,
      -0.4159248023808359
    ],
    [
      0.6472882449574555,
      0.6259558055568091,
      -0.4349681108191993
    ],
    [
      0.6482802646117594,
      0.6138702097749338,
      -0.4504398562136639
    ],
    [
      0.6668545061250244,
      0.6293392961368693,
      -0.3990452580832149
    ],
    [
      0.6668255115584987,
      0.629382405572724,
      -0.3990257193342777
    ],
    [
      0.642371956107866,
      0.6423406738202528,
      -0.41803914740404086
    ],
    [
      0.6436242770504667,
      0.6307890130269256,
      -0.43342013224558584
    ],
    [
      0.6618921623441731,
      0.6450528031723516,
      -0.38184505567945515
    ],
    [
      0.6370202810663734,
      0.658319785424778,
      -0.4010239664015018
    ],
    [
      0.6386019272870437,
      0.6471835467642029,
      -0.41634244950879085
    ],
    [
      0.6316866865979444,
      0.6738728136825872,
      -0.3832327764615437
    ],
    [
      0.6335741940778057,
      0.6626512475592026,
      -0.3993457959048668
    ],
    [
      0.6620465953608586,
      0.6454237969723543,
      -0.38094937704750825
    ],
    [
      0.6571331422030706,
      0.659704968563135,
      -0.3646441935249102
    ],
    [
      0.626019827436799,
      0.689117639819693,
      -0.3649877451988441
    ],
    [
      0.6283452521245274,
      0.6779739534919103,
      -0.3814886138787281
    ],
    [
      0.6574559877258701,
      0.6605251209205538,
      -0.36257163269661374
    ],
    [
      0.652617962682928,
      0.6734750504016962,
      -0.34716156364150824
    ],
    [
      0.6530761852153236,
      0.6746628178979833,
      -0.3439790378068888
    ],
    [
      0.6480937207247911,
      0.6869738646332845,
      -0.32869657507784616
    ],
    [
      0.6208339380876894,
      0.7032848242995584,
      -0.3463461811951596
    ],
    [
      0.6236272001293158,
      0.6920357505079593,
      -0.36355967223793656
    ],
    [
      0.6159042238094068,
      0.7169264709575566,
      -0.32661662899196675
    ],
    [
      0.6192141388350627,
      0.7052324285162003,
      -0.34528404544069835
    ],
    [
      0.6485800809769714,
      0.6882400235247415,
      -0.32506852904975064
    ],
    [
      0.6436728856629338,
      0.6994584406478398,
      -0.31055290381647394
    ],
    [
      0.6445470063403594,
      0.7015676014135036,
      -0.3039112654453335
    ],
    [
      0.6401189137563088,
      0.7109366415879107,
      -0.29123335643285403
    ],
    [
      0.6117004897850055,
      0.7293785400791708,
      -0.3063159415844395
    ],
    [
      0.6155155410849276,
      0.7173868884166574,
      -0.32633827696241086
    ],
    [
      0.6411222224849944,
      0.7133966385738024,
      -0.28289137828414096
    ],
    [
      0.6371103119593972,
      0.7212916518179089,
      -0.27171456238632485
    ],
    [
      0.6087947644550268,
      0.7404496548758547,
      -0.2847863117608995
    ],
    [
      0.6078726326959425,
      0.7401107862234112,
      -0.28762281991362904
    ],
    [
      0.6116864850163336,
      0.7293947716604131,
      -0.3063052580724276
    ],
    [
      0.6067850719619887,
      0.7502506075444839,
      -0.26255647454065406
    ],
    [
      0.6051161175929627,
      0.7497759175763608,
      -0.2677135739026808
    ],
    [
      0.6382550879239691,
      0.7241181992103376,
      -0.2613106892408811
    ],
    [
      0.6347434903454378,
      0.7305461942977632,
      -0.25179944293255696
    ],
    [
      0.6051545439761232,
      0.7590453276461164,
      -0.24007950450559104
    ],
    [
      0.6031487270804046,
      0.7585748850751649,
      -0.24652739554558256
    ],
    [
      0.6360855258373364,
      0.7338349391661494,
      -0.2384983980643331
    ],
    [
      0.6333546226167265,
      0.738505175093224,
      -0.23124019626905393
    ],
    [
      0.6045085856516909,
      0.7663737469703591,
      -0.2173491426898307
    ],
    [
      0.601863461750625,
      0.7659497202124995,
      -0.2260119455160452
    ],
    [
      0.6347347915155117,
      0.742030825915197,
      -0.21564321883929177
    ],
    [
      0.6326206918834029,
      0.7454131673409715,
      -0.2101196567569664
    ],
    [
      0.6050239466883609,
      0.7722354489760135,
      -0.19390315953705903
    ],
    [
      0.6015320608619359,
      0.772038633158776,
      -0.2052206828405002
    ],
    [
      0.6338989778597351,
      0.7489332803884396,
      -0.1930570573560935
    ],
    [
      0.6324337524165405,
      0.7511223332097562,
      -0.18932191990856723
    ],
    [
      0.6061143649172801,
      0.7768102885132243,
      -0.17085418432371904
    ],
    [
      0.6022752987533871,
      0.776932496468244,
      -0.18341308689169458
    ],
    [
      0.6336353933034486,
      0.7546488831791074,
      -0.17032689590816177
    ],
    [
      0.6325437165329105,
      0.7561544681842634,
      -0.16768681200293195
    ],
    [
      0.6335612976616041,
      0.7594297129938328,
      -0.1478735714299517
    ],
    [
      0.6320824949125007,
      0.7612987937353992,
      -0.14455402547910773
    ],
    [
      0.606872534477996,
      0.7807262889636855,
      -0.14890328611970077
    ],
    [
      0.6033102065123543,
      0.7811061707397092,
      -0.16090352622105053
    ],
    [
      0.6328028003263351,
      0.7640556971887196,
      -0.12561650963391732
    ],
    [
      0.6309797002170128,
      0.7661912210466812,
      -0.12171947545501687
    ],
    [
      0.6070449865333537,
      0.7844870053616714,
      -0.1267932283026089
    ],
    [
      0.6035872937127246,
      0.7851947338797404,
      -0.13838933758087352
    ],
    [
      0.6314151230593523,
      0.7685173991900097,
      -0.10342122371237979
    ],
    [
      0.6297867493977094,
      0.7702981153331299,
      -0.1000473077963373
    ],
    [
      0.6058791403298,
      0.7887195747092263,
      -0.10407641319588151
    ],
    [
      0.6028064135720642,
      0.7895826461787407,
      -0.11482017509899119
    ],
    [
      0.6300042069751666,
      0.7722879207585474,
      -0.08164598363686436
    ],
    [
      0.6280060736046486,
      0.7743126205164682,
      -0.07777105647085297
    ],
    [
      0.605052618449315,
      0.7919857267730973,
      -0.08166968528968624
    ],
    [
      0.6018930017241554,
      0.79314050468463,
      -0.09302125727002625
    ],
    [
      0.6280378671792001,
      0.7758676121507947,
      -0.059982379116081924
    ],
    [
      0.6249197936535071,
      0.7787891216109546,
      -0.05443120024853036
    ],
    [
      0.603596657364394,
      0.795012911746916,
      -0.060212501810011726
    ],
    [
      0.6008080253191629,
      0.7962755768268613,
      -0.07053313023776449
    ],
    [
      0.6247623902938483,
      0.7798621286379248,
      -0.03856184630748348
    ],
    [
      0.6211723025449124,
      0.7829986409448928,
      -0.03252843109500748
    ],
    [
      0.6002563541106801,
      0.7988938862068241,
      -0.03822130205934724
    ],
    [
      0.5980401949442359,
      0.8000836322849447,
      -0.047054293967605104
    ],
    [
      0.620907061084087,
      0.7836961146570666,
      -0.017170363052069232
    ],
    [
      0.6163589275520641,
      0.787400803657402,
      -0.010082005085638161
    ],
    [
      0.596050434789795,
      0.8027665479212733,
      -0.01702200709253636
    ],
    [
      0.5943754192938296,
      0.8038111211476302,
      -0.02460777232246118
    ],
    [
      0.6160043316524,
      0.7877326320949322,
      0.003995462209840827
    ],
    [
      0.6103873683747031,
      0.7920089849983858,
      0.012207711105327876
    ],
    [
      0.5909723008253908,
      0.8066831611334001,
      0.003743955257307142
    ],
    [
      0.5896680883840681,
      0.8076412107520619,
      -0.002687049761815
    ],
    [
      0.5844724305690244,
      0.8110546680025087,
      0.02413096384476417
    ],
    [
      0.5836063038960275,
      0.81180350032038,
      0.019461729635270382
    ],
    [
      0.609936573519087,
      0.7920754239030763,
      0.024370045805400635
    ],
    [
      0.6030774860355275,
      0.7969643937194519,
      0.03384229573262856
    ],
    [
      0.6025663411803438,
      0.796825383751238,
      0.044532148906443754
    ],
    [
      0.5944294506641197,
      0.8022480749038822,
      0.055241782159594126
    ],
    [
      0.5763713733920827,
      0.8160324353441571,
      0.04344081491418321
    ],
    [
      0.5760398567245852,
      0.8163751805734767,
      0.04134789001076911
    ],
    [
      0.5938516807068862,
      0.8020375814082502,
      0.06384277038483568
    ],
    [
      0.5846238447011843,
      0.8077765875591046,
      0.07557740931107365
    ],
    [
      0.566752458871939,
      0.8215235341107444,
      0.062375742599216986
    ],
    [
      0.5839731234409199,
      0.8074976689957898,
      0.08320400029458899
    ],
    [
      0.5737432963702193,
      0.8133998774994672,
      0.09591282059290418
    ],
    [
      0.5568479105962615,
      0.8266740492521087,
      0.08081101878890082
    ],
    [
      0.5664415540380636,
      0.8217287324623798,
      0.062496848758271425
    ],
    [
      0.5541325954273876,
      0.8284048918679597,
      0.08174595900802283
    ],
    [
      0.5730678847527725,
      0.8131996781725678,
      0.10148636797627163
    ],
    [
      0.5618570700468087,
      0.8191752199403585,
      0.11518937396340335
    ],
    [
      0.5450717001946945,
      0.8325929275525158,
      0.09841675993648764
    ],
    [
      0.5409993621671304,
      0.835086528808296,
      0.09975058665325731
    ],
    [
      0.5612338268701476,
      0.8190405786877291,
      0.11911810122546146
    ],
    [
      0.5486838922661913,
      0.8251948375546748,
      0.1341620901772791
    ],
    [
      0.532392469675782,
      0.8386536916997784,
      0.1149706207291869
    ],
    [
      0.5483317377642807,
      0.8251472343364838,
      0.13588357894630218
    ],
    [
      0.5351777148037062,
      0.8310783010291084,
      0.1513065469041357
    ],
    [
      0.5341000801311441,
      0.831710228202062,
      0.15164168525830682
    ],
    [
      0.5113569451746415,
      0.8507679990638074,
      0.12127607509572605
    ],
    [
      0.49201765153577454,
      0.8626653263077609,
      0.11716298632053307
    ],
    [
      0.5216389994567494,
      0.836889755384836,
      0.16585623768092267
    ],
    [
      0.5169680697693291,
      0.8395164929087676,
      0.16720069668855203
    ],
    [
      0.48974923588589775,
      0.8633193232135202,
      0.1217597310909018
    ],
    [
      0.48987624037494865,
      0.8634799301618336,
      0.12009862332192077
    ],
    [
      0.466496979150963,
      0.8640147750713218,
      0.18936482487906559
    ],
    [
      0.5064056715504482,
      0.8435429155643831,
      0.17885369837573825
    ],
    [
      0.46151894346527,
      0.8654891195888599,
      0.19475330214402273
    ],
    [
      0.44664554407367024,
      0.8630930347652647,
      0.23575023075030171
    ],
    [
      0.4060831861661173,
      0.8941201317888262,
      0.18880051865158243
    ],
    [
      0.4253838798905575,
      0.8950629933251394,
      0.13383120977222532
    ],
    [
      0.3896305755040138,
      0.9024860013106278,
      0.18359474957297778
    ],
    [
      0.3860056525775367,
      0.9049132122066686,
      0.17925321350536144
    ],
    [
      0.41359076916433335,
      0.9026686399804307,
      0.11887809746936014
    ],
    [
      0.4186680058990657,
      0.900579863141474,
      0.11693165072205178
    ],
    [
      0.4216627679567037,
      0.8988062840601262,
      0.11978219338916278
    ],
    [
      0.37278886972278724,
      0.9112530904582817,
      0.17506074300378519
    ],
    [
      0.36694250075082924,
      0.9149878343708221,
      0.16778100040266966
    ],
    [
      0.3934226493649802,
      0.9113416230671275,
      0.12114068281140554
    ],
    [
      0.3370330667505039,
      0.9317193430976761,
      0.13530623642088857
    ],
    [
      0.3708422945454507,
      0.9214422940717908,
      0.11584511760096144
    ],
    [
      0.3543674425986767,
      0.9206483432951844,
      0.16379970578088837
    ],
    [
      0.33439895606701364,
      0.9320593617557227,
      0.13943702644852363
    ],
    [
      0.30506626239771545,
      0.9402474241926035,
      0.15122617777971645
    ],
    [
      0.2999279580011815,
      0.9421003369542659,
      0.14996724682376608
    ],
    [
      0.28734187508457315,
      0.9471518432438312,
      0.1426114745127285
    ],
    [
      0.3115775783064964,
      0.9456668613835715,
      0.092917167292186
    ],
    [
      0.3305760225917967,
      0.9377891916490148,
      0.10616461422562266
    ],
    [
      0.2661727785685342,
      0.9540958890737301,
      0.1373065417294979
    ],
    [
      0.29993666148121084,
      0.9515947292051691,
      0.06712280125595385
    ],
    [
      0.3036755741119698,
      0.9504432433782329,
      0.06662422085421078
    ],
    [
      0.22931489094128235,
      0.9636051988871827,
      0.1374034259768692
    ],
    [
      0.2508475194049912,
      0.9659736338885987,
      0.06301159131793083
    ],
    [
      0.269194762845171,
      0.9611977743506662,
      0.0602745239720534
    ],
    [
      0.1983233638061619,
      0.9677142820824511,
      0.15555356512229113
    ],
    [
      0.19256416109376825,
      0.968747785780325,
      0.15635463347138354
    ],
    [
      0.1877848672105482,
      0.9700351090194504,
      0.15417110921420907
    ],
    [
      0.17342418095033774,
      0.9788354762793422,
      0.10865157080639969
    ],
    [
      0.18494318349083758,
      0.9815458984804623,
      0.04861756942152222
    ],
    [
      0.22378749825128535,
      0.974210376250279,
      0.028866908956811432
    ],
    [
      0.13253503091830168,
      0.9877283929118714,
      0.08262619085505746
    ],
    [
      0.14270047305165598,
      0.989079593698302,
      0.03685284684302443
    ],
    [
      0.15517210381701238,
      0.987467953650608,
      0.02878643274327435
    ],
    [
      0.10894371752118039,
      0.9932037628443483,
      0.040957928225105016
    ],
    [
      0.11712082359681941,
      0.9898221851985055,
      0.0808378275862133
    ],
    [
      0.0987217687556256,
      0.992733933213111,
      0.06879934753315142
    ],
    [
      0.08766227498316674,
      0.9935650821293189,
      0.07171996317717602
    ],
    [
      0.06492316079047479,
      0.9963029116924725,
      0.056262699420447114
    ],
    [
      0.08916431534137569,
      0.9959847211487634,
      0.008010000494613027
    ],
    [
      0.09099657294843815,
      0.995815246124818,
      0.008462818502576715
    ],
    [
      0.08907095050606531,
      0.9959935642369259,
      0.0079489480166118
    ],
    [
      0.059909210510838494,
      0.9966498343842536,
      0.05567759080463169
    ],
    [
      0.0421718767273238,
      0.9981613481490842,
      0.04353683353779865
    ],
    [
      0.06920870565304789,
      0.9975814394155064,
      0.00643636508568818
    ],
    [
      0.053364719246482756,
      0.9985711042297627,
      -0.002820733432368926
    ],
    [
      0.03276665898791578,
      0.9985706350289733,
      0.04222597443046786
    ],
    [
      0.023637235201201482,
      0.9994341377955998,
      0.02393084454860037
    ],
    [
      0.014050295327666325,
      0.9997517361477806,
      0.017293214585604517
    ],
    [
      0.007357161464049106,
      0.999965974625223,
      0.0037311884192369163
    ],
    [
      0.0421746279677715,
      0.9989402043133726,
      -0.018432822956278624
    ],
    [
      0.045687280098818804,
      0.9988226098900681,
      -0.016311542219085047
    ],
    [
      0.0024162128643455557,
      0.9999970676229362,
      0.00016328172866847022
    ],
    [
      -0.005141232111160286,
      0.9998734775531959,
      -0.015053126521022883
    ],
    [
      0.030652169848024262,
      0.9988145542825168,
      -0.03781442366380059
    ],
    [
      0.0315151979847259,
      0.9988078438127405,
      -0.03727845804386012
    ],
    [
      -0.008406673855087268,
      0.9998125341928473,
      -0.017442026991452975
    ],
    [
      -0.017151421836303044,
      0.9992352824520114,
      -0.035137999829843655
    ],
    [
      0.01992613156569183,
      0.9981928051748858,
      -0.05669279476193852
    ],
    [
      -0.019094315429886856,
      0.9991492700932385,
      -0.03655329247021111
    ],
    [
      -0.028730770967230975,
      0.9980112427473441,
      -0.05610795085841453
    ],
    [
      0.010373655998167738,
      0.9970911460736632,
      -0.07550916290583784
    ],
    [
      0.019862773408220957,
      0.9980738522237572,
      -0.05877121523129454
    ],
    [
      -0.029933793538856255,
      0.9979257294639875,
      -0.056993038856878
    ],
    [
      -0.038990669373506266,
      0.9963954004578338,
      -0.07533879245301671
    ],
    [
      0.0004156481242352757,
      0.9953295461963766,
      -0.09653456223110836
    ],
    [
      0.010230180690898804,
      0.9968042633041818,
      -0.07922502168910368
    ],
    [
      -0.040800770201730355,
      0.9962207131588295,
      -0.0766784704089653
    ],
    [
      -0.050635736717573036,
      0.9940386843116389,
      -0.0965562854456117
    ],
    [
      -0.008637906766849179,
      0.9933000293533507,
      -0.11524078381076679
    ],
    [
      0.0002567823491964308,
      0.9950333407289944,
      -0.09954187511053947
    ],
    [
      -0.05150417285119464,
      0.9939292283353264,
      -0.09722144434051926
    ],
    [
      -0.06036901877852837,
      0.9915241411125467,
      -0.11504546563313214
    ],
    [
      -0.02041948379269662,
      0.9904755225389182,
      -0.13616638327023559
    ],
    [
      -0.017505439757439,
      0.9907868189416551,
      -0.13429459777062813
    ],
    [
      -0.008845879575333978,
      0.9928391537482414,
      -0.11913087424767203
    ],
    [
      -0.06401275103978363,
      0.9909630528008434,
      -0.11787533960906148
    ],
    [
      -0.07053065477054526,
      0.9888991501102135,
      -0.13078187049027773
    ],
    [
      -0.033181562293147546,
      0.9867889969332516,
      -0.15857635213124652
    ],
    [
      -0.03297202303538947,
      0.9868185015764973,
      -0.15843639305181798
    ],
    [
      -0.07804386544962863,
      0.9875545914877246,
      -0.13654700251998808
    ],
    [
      -0.0835845236538682,
      0.9855279118155332,
      -0.14747326007812614
    ],
    [
      -0.045421017585416,
      0.9828031793169563,
      -0.17898279773762604
    ],
    [
      -0.04435977509040061,
      0.9829921534916441,
      -0.1782095298455982
    ],
    [
      -0.08994553425262795,
      0.9842349726424047,
      -0.15228696429968716
    ],
    [
      -0.09872684429307003,
      0.9804707776011911,
      -0.17008840197393738
    ],
    [
      -0.05377674087052243,
      0.9796429183753961,
      -0.19341099921742227
    ],
    [
      -0.09944158646949944,
      0.980303198545753,
      -0.17063707041963372
    ],
    [
      -0.10823464619023834,
      0.9761057742221181,
      -0.1884218110896749
    ],
    [
      -0.10822272453386858,
      0.9759515901899244,
      -0.1892256206231712
    ],
    [
      -0.06329271777935186,
      0.9745650219547658,
      -0.2149815105036012
    ],
    [
      -0.0545292729468742,
      0.9783258625209842,
      -0.19976252179640105
    ],
    [
      -0.11766566520595187,
      0.9709711376694754,
      -0.20825427017107104
    ],
    [
      -0.07338519293086149,
      0.9688155203846801,
      -0.2366666451367022
    ],
    [
      -0.06405081524928719,
      0.973307433067536,
      -0.2203863285264892
    ],
    [
      -0.11989265433715646,
      0.9703759792730318,
      -0.2097527360629552
    ],
    [
      -0.12873011014481917,
      0.965176867523862,
      -0.22773267911946274
    ],
    [
      -0.08193341799402629,
      0.9628962296358567,
      -0.25713375112743886
    ],
    [
      -0.07464512658145007,
      0.966851171166073,
      -0.2441862360831019
    ],
    [
      -0.13316411471145115,
      0.9639109293003851,
      -0.23052774004094045
    ],
    [
      -0.14174393890739834,
      0.9583719965377132,
      -0.24785433632545759
    ],
    [
      -0.14164531057932642,
      0.958003147429947,
      -0.24933225925499777
    ],
    [
      -0.09441944677103856,
      0.9582740405606925,
      -0.26980702596288175
    ],
    [
      -0.08303321924665531,
      0.961273751098713,
      -0.2627893832523419
    ],
    [
      -0.10673553374467759,
      0.952299592642156,
      -0.285889859368643
    ],
    [
      -0.14979672590244952,
      0.9523408924667485,
      -0.26572121752796407
    ],
    [
      -0.14919848272070488,
      0.9505643641171712,
      -0.27233656093950676
    ],
    [
      -0.15611169898492996,
      0.9453704967324105,
      -0.28618833195634286
    ],
    [
      -0.14940770442635232,
      0.9247323114017024,
      -0.35006783643704376
    ],
    [
      -0.14337616745230664,
      0.9232275599366478,
      -0.3565026608317412
    ],
    [
      -0.11165692110356086,
      0.9438417861021549,
      -0.31095886348063373
    ],
    [
      0.8530022679637821,
      -0.3294879091360336,
      0.4047528240566199
    ],
    [
      0.8451914870493701,
      -0.3309897740107677,
      0.4196392733283854
    ],
    [
      0.8416690699310481,
      -0.3156994892192731,
      0.4380947491446282
    ],
    [
      0.8603505689924623,
      -0.3375756161740404,
      0.3818895151729925
    ],
    [
      0.8552116713986431,
      -0.33831399157174613,
      0.3926278647909899
    ],
    [
      0.8693219384614708,
      -0.33995876995511265,
      0.35875813863966544
    ],
    [
      0.8618928077198742,
      -0.3411560008940082,
      0.3751711223625287
    ],
    [
      0.8777770839084965,
      -0.3414544059223001,
      0.336030176682609
    ],
    [
      0.870505615012658,
      -0.3427724395187831,
      0.3531671402293485
    ],
    [
      0.8862287928825398,
      -0.3421970614778397,
      0.31224941598326195
    ],
    [
      0.8787118013978167,
      -0.3437512752787617,
      0.33121085554134405
    ],
    [
      0.8942595136549162,
      -0.3417032346795333,
      0.2890308316550614
    ],
    [
      0.8867506603420678,
      -0.34345758564545664,
      0.3093705759206921
    ],
    [
      0.9025795474508023,
      -0.33882478858557497,
      0.26560859015371696
    ],
    [
      0.9024943855831468,
      -0.33901857397047025,
      0.2656506926283599
    ],
    [
      0.9018879507063909,
      -0.3397643602982532,
      0.26675513836052966
    ],
    [
      0.8943044435698669,
      -0.3418072009320079,
      0.2887687649352275
    ],
    [
      0.9144951773281825,
      -0.3194858998859379,
      0.24824852550935397
    ],
    [
      0.9220692232630973,
      -0.31377941484383004,
      0.22656307362686462
    ],
    [
      0.9171045021705481,
      -0.3224403563242386,
      0.23441746673831534
    ],
    [
      0.9293591751672038,
      -0.3066432676939491,
      0.2055758495312904
    ],
    [
      0.9243299339556774,
      -0.31585582956989844,
      0.21412442205457116
    ],
    [
      0.9363429157481497,
      -0.29862798255713674,
      0.18461655440969488
    ],
    [
      0.931368609820697,
      -0.30817548973625614,
      0.1938565969124619
    ],
    [
      0.9433681880094983,
      -0.2885188124351539,
      0.16374784494058053
    ],
    [
      0.938018876322259,
      -0.29939586830995635,
      0.17459296005868577
    ],
    [
      0.9500411877469677,
      -0.27655625097082664,
      0.14470100771346436
    ],
    [
      0.9445208146940931,
      -0.28851715601789535,
      0.15696586027844428
    ],
    [
      0.9565044886274978,
      -0.2628625828219718,
      0.12650069481078285
    ],
    [
      0.9507585110862595,
      -0.27631395215121074,
      0.14038822402045442
    ],
    [
      0.9626010411479279,
      -0.24811771929663579,
      0.1087972102214071
    ],
    [
      0.9569278560378557,
      -0.2625883626425721,
      0.12384034134112361
    ],
    [
      0.9684786854345354,
      -0.23100439947391374,
      0.09319873004870151
    ],
    [
      0.9676940042635532,
      -0.23402644092335947,
      0.09380799039056188
    ],
    [
      0.9626700549929121,
      -0.2480446960666807,
      0.10835217567327182
    ],
    [
      0.9737624775406142,
      -0.21327271359456046,
      0.07938127594072424
    ],
    [
      0.9725006778820128,
      -0.21855836242376972,
      0.08046535735125895
    ],
    [
      0.978484998709179,
      -0.19661625105414612,
      0.0625232526545982
    ],
    [
      0.9872440806709869,
      -0.15046785163766,
      0.05204373933188562
    ],
    [
      0.985955346702742,
      -0.15922095911451853,
      0.050405758469927835
    ],
    [
      0.9790514502445027,
      -0.1951935149161382,
      0.057946091402435555
    ],
    [
      0.9926069895620042,
      -0.12015326089854837,
      0.017162696993783963
    ],
    [
      0.9916902567765286,
      -0.12723920580444523,
      0.018989974216851387
    ],
    [
      0.9890450408778959,
      -0.14356631181302817,
      0.03433105339551393
    ],
    [
      0.9946134811925489,
      -0.10355381410759967,
      0.004542093548995037
    ],
    [
      0.9941501898142732,
      -0.10785521209275697,
      0.005714308065820642
    ],
    [
      0.9961439288201281,
      -0.0872591506242631,
      -0.009116671932875017
    ],
    [
      0.9959507973517742,
      -0.08949820872582916,
      -0.008489987587337218
    ],
    [
      0.9972058083382739,
      -0.07095893904931788,
      -0.02335390300153171
    ],
    [
      0.9971214432979287,
      -0.07224910805670309,
      -0.022997689024472284
    ],
    [
      0.9977710022543718,
      -0.05440513601162939,
      -0.0386407587381856
    ],
    [
      0.9978270512311271,
      -0.03891695211318356,
      -0.053166217371689424
    ],
    [
      0.9977633363557503,
      -0.05425844953203993,
      -0.03904286463133784
    ],
    [
      0.9973257498086824,
      -0.02500755353613412,
      -0.06867292796063725
    ],
    [
      0.9976603247124285,
      -0.0374912376540994,
      -0.057168904081289204
    ],
    [
      0.9962358323621788,
      -0.012821329273859742,
      -0.08573085694945685
    ],
    [
      0.996777265701354,
      -0.022021927740461387,
      -0.07713700330921623
    ],
    [
      0.9946890602325446,
      -0.0034409375128097047,
      -0.1028680387813933
    ],
    [
      0.9951396867691465,
      -0.008388323037008557,
      -0.0981154414637765
    ],
    [
      0.9926382812958917,
      0.003676569464780998,
      -0.12106083323234244
    ],
    [
      0.9927469426792236,
      0.0027927356118292407,
      -0.12019030089344418
    ],
    [
      0.9899819046052811,
      0.01079891361450285,
      -0.14078072317915752
    ],
    [
      0.9868083869622899,
      0.01674366865791377,
      -0.1610243987126101
    ],
    [
      0.9895603212907755,
      0.010465914494247101,
      -0.1437387740336486
    ],
    [
      0.9830747582819255,
      0.02093612113148668,
      -0.18200466604156496
    ],
    [
      0.9856527902377954,
      0.015877153930455155,
      -0.16803717767064888
    ],
    [
      0.9788499070576447,
      0.02430384130482443,
      -0.20313094976165041
    ],
    [
      0.9814272762475097,
      0.019834236357991704,
      -0.1908064582384191
    ],
    [
      0.9731482399506676,
      0.06613351896153571,
      -0.22047417252522356
    ],
    [
      0.973983865921772,
      0.02704562442893056,
      -0.22499769581782172
    ],
    [
      0.9766242708747055,
      0.02292832074895682,
      -0.21372722251992812
    ],
    [
      0.9680207314585709,
      0.05956342354605148,
      -0.24369665989070674
    ],
    [
      0.9683513324509507,
      0.03038291271080235,
      -0.24773488966166274
    ],
    [
      0.9716076814021879,
      0.025683454067975543,
      -0.23519964631649143
    ],
    [
      0.9655921562696228,
      0.06678714495867023,
      -0.2513389444929891
    ],
    [
      0.9619620427812177,
      0.062466113247573875,
      -0.26594550747085044
    ],
    [
      0.9622876199187047,
      0.03322131825539643,
      -0.2699979269634643
    ],
    [
      0.965585102421404,
      0.02887886014396914,
      -0.2584790541197329
    ],
    [
      0.9592802029494517,
      0.06983546899029686,
      -0.2736868639525178
    ],
    [
      0.9552798335325687,
      0.06527072135504597,
      -0.2884097303833203
    ],
    [
      0.9558649939786955,
      0.03551512321651893,
      -0.29165182891424474
    ],
    [
      0.9590896580310089,
      0.03163168993665538,
      -0.281329813652435
    ],
    [
      0.9523700532325319,
      0.07250838759374122,
      -0.29619894570106137
    ],
    [
      0.948199823941716,
      0.06823480212670069,
      -0.31025973901817927
    ],
    [
      0.9483372109847833,
      0.038864960979853626,
      -0.31487465612468263
    ],
    [
      0.9525973635430746,
      0.03400308319637468,
      -0.3023277250004107
    ],
    [
      0.9404294679822893,
      0.04252438689139803,
      -0.33731897703814245
    ],
    [
      0.9451484989543734,
      0.03747253216259049,
      -0.3244843975565213
    ],
    [
      0.9448764589549689,
      0.07597740044313402,
      -0.31849004997742514
    ],
    [
      0.9404666544677713,
      0.07155339187197751,
      -0.3322688428754837
    ],
    [
      0.9368359047358982,
      0.07960587089193688,
      -0.34058977218526015
    ],
    [
      0.9320346335028039,
      0.07452121924490358,
      -0.35462378633355524
    ],
    [
      0.9322780762471754,
      0.04589637739860433,
      -0.35881905062378
    ],
    [
      0.9370227378097408,
      0.04113540494899409,
      -0.3468375228939626
    ],
    [
      0.9280854560758588,
      0.08285770560180773,
      -0.36303166093726513
    ],
    [
      0.9229922045138982,
      0.07761918742235435,
      -0.3769093420843637
    ],
    [
      0.9234998378492736,
      0.04852194840944589,
      -0.3805176343021654
    ],
    [
      0.9280469403905626,
      0.04424294500251346,
      -0.3698262270975654
    ],
    [
      0.9186620207190412,
      0.08598001345091567,
      -0.38557428463966353
    ],
    [
      0.9134653945689272,
      0.08128990906388986,
      -0.3987140875482314
    ],
    [
      0.9136036888202076,
      0.05143495467830932,
      -0.40333949126182717
    ],
    [
      0.9188069670216209,
      0.046776688766236016,
      -0.39192562909383316
    ],
    [
      0.9031930935003594,
      0.08548064528471917,
      -0.42063677339833133
    ],
    [
      0.9033828691716507,
      0.0548179902208814,
      -0.42531679914545995
    ],
    [
      0.9091425077416445,
      0.04989059940082764,
      -0.41348618925988334
    ],
    [
      0.9086110502373366,
      0.08986038670083206,
      -0.4078615822660685
    ],
    [
      0.8979327308525041,
      0.09384083620411142,
      -0.4300124513595828
    ],
    [
      0.8923220656559407,
      0.0898341969077092,
      -0.44236992236075673
    ],
    [
      0.8923442393676878,
      0.05790381700891196,
      -0.44762585542292005
    ],
    [
      0.8982534780058725,
      0.053102605856333016,
      -0.43625772486183023
    ],
    [
      0.8809353554472629,
      0.09456831129743289,
      -0.46369142112115513
    ],
    [
      0.8803107797551569,
      0.06136493600836756,
      -0.4704118149829536
    ],
    [
      0.8869556492897421,
      0.05623475717082762,
      -0.45841828964271275
    ],
    [
      0.8865631893917149,
      0.09814281402229881,
      -0.45207709438919236
    ],
    [
      0.8744310639823488,
      0.10329094098585061,
      -0.4740266826381769
    ],
    [
      0.8687755140401118,
      0.10003053495355438,
      -0.4849979363680277
    ],
    [
      0.8678588226430654,
      0.06516129496461448,
      -0.4925191058214157
    ],
    [
      0.8750154775975256,
      0.05992126059637557,
      -0.48037210211805104
    ],
    [
      0.8617090812654001,
      0.10880699839121112,
      -0.49559912869761497
    ],
    [
      0.8558169195891069,
      0.10566388552183188,
      -0.5063719417991497
    ],
    [
      0.8549363795513581,
      0.06950501008108971,
      -0.5140552893349544
    ],
    [
      0.8628057197127804,
      0.06396715844531937,
      -0.501472324930641
    ],
    [
      0.8476879539051753,
      0.11499343324691394,
      -0.5178818814306454
    ],
    [
      0.842308286733609,
      0.11291926491676497,
      -0.527035093433587
    ],
    [
      0.8410042526845147,
      0.07460612402913239,
      -0.5358598447578533
    ],
    [
      0.8500137205951978,
      0.06844424782407511,
      -0.5222949930256902
    ],
    [
      0.8339298585590195,
      0.12170154640138295,
      -0.5382840556873719
    ],
    [
      0.8281805142966252,
      0.11991862911579557,
      -0.5474820162620555
    ],
    [
      0.8262035675867636,
      0.07953458016967184,
      -0.5577292492456694
    ],
    [
      0.8353847814494524,
      0.073468078166031,
      -0.5447336123402343
    ],
    [
      0.819806170959164,
      0.12813127328508805,
      -0.5581220465665336
    ],
    [
      0.813046126818892,
      0.12597135786589728,
      -0.5684076113690071
    ],
    [
      0.8111218799757831,
      0.08539867279234292,
      -0.5786089893095834
    ],
    [
      0.8214455139847495,
      0.07872156177826381,
      -0.5648275694984458
    ],
    [
      0.8038595210224455,
      0.1345461158127526,
      -0.5794024621808797
    ],
    [
      0.7969676245657349,
      0.13246328972902505,
      -0.5893183199835333
    ],
    [
      0.7953986473382341,
      0.0902502083178232,
      -0.5993295351566591
    ],
    [
      0.8047349949733229,
      0.08437150706381917,
      -0.5876078936340678
    ],
    [
      0.786718066971524,
      0.14147640707228362,
      -0.6008819429326415
    ],
    [
      0.7812365089072442,
      0.14029356422950925,
      -0.6082657585185951
    ],
    [
      0.777200349897519,
      0.09520635691924731,
      -0.6220091363648439
    ],
    [
      0.7871913043978357,
      0.08911345179905383,
      -0.6102365467496123
    ],
    [
      0.7702139810129788,
      0.14957191842231352,
      -0.619998923121329
    ],
    [
      0.7640346122342698,
      0.14829947341577152,
      -0.6278999741142165
    ],
    [
      0.7595762885641539,
      0.099872383800475,
      -0.6427047290981417
    ],
    [
      0.7686407856592291,
      0.09450503204838538,
      -0.6326611585506863
    ],
    [
      0.7528444177733277,
      0.15733575271896505,
      -0.6391171594816525
    ],
    [
      0.7446086815416325,
      0.15576621298736873,
      -0.649072259663287
    ],
    [
      0.7431184494212212,
      0.10252337556700969,
      -0.6612593497200216
    ],
    [
      0.7483061136373648,
      0.09955938366543986,
      -0.6558398351862297
    ],
    [
      0.7342506285314623,
      0.16393407465805307,
      -0.6587880035847347
    ],
    [
      0.7252012340850316,
      0.16291264321473553,
      -0.6689862784559453
    ],
    [
      0.7234064371613886,
      0.1053632333262069,
      -0.6823354862063918
    ],
    [
      0.7284929438236039,
      0.10253144421953898,
      -0.6773369425518404
    ],
    [
      0.7118200045326009,
      0.1732687517967105,
      -0.680654259369629
    ],
    [
      0.6993179990398961,
      0.12930361893579187,
      -0.7030184281716544
    ],
    [
      0.7072207513917295,
      0.10634325606084143,
      -0.6989491545822885
    ],
    [
      0.7082318814445502,
      0.10578180637764271,
      -0.6980098935867567
    ],
    [
      0.6815278717400891,
      0.14956113655711373,
      -0.7163457450653065
    ],
    [
      0.7117232723865781,
      0.17344575299337278,
      -0.6807103306928011
    ],
    [
      0.6971712943852415,
      0.1849383127815623,
      -0.6926398824430455
    ],
    [
      0.6905667906971835,
      0.19674578322442743,
      -0.6959946870268472
    ],
    [
      0.6775309462255336,
      0.20820511623727816,
      -0.7054094176287657
    ],
    [
      0.6766594251823808,
      0.2085368729842495,
      -0.7061475730453238
    ],
    [
      0.6764012151314704,
      0.20809949955711915,
      -0.7065238810208376
    ],
    [
      0.6656438248975589,
      0.15388804559950803,
      -0.7302306264443525
    ],
    [
      0.6350420205541318,
      0.15761598462360282,
      -0.7562267077547962
    ],
    [
      0.6581219056410562,
      0.1511711236376405,
      -0.737579045725621
    ],
    [
      0.6258789081791207,
      0.17915255530962995,
      -0.7590651844357913
    ],
    [
      0.6420654967503842,
      0.26638350990653026,
      -0.7188822737643208
    ],
    [
      0.6048852916850819,
      0.2604130512109934,
      -0.7525282896091242
    ],
    [
      0.6047351971576318,
      0.2589644491368237,
      -0.7531485613091096
    ],
    [
      0.6052959088600379,
      0.23279230764026418,
      -0.7611994510119022
    ],
    [
      0.6102785978056081,
      0.20046441815219723,
      -0.7664033207882921
    ],
    [
      0.2592982603737306,
      0.5204818584911408,
      -0.8135496586864044
    ],
    [
      0.3029909671447809,
      0.48784179439218245,
      -0.8186616257483221
    ],
    [
      0.36268029173863375,
      0.4838058181856413,
      -0.7964891312969071
    ],
    [
      0.38673866408592983,
      0.48413163270717224,
      -0.7848883792701469
    ],
    [
      0.39170014405255704,
      0.5048516350224522,
      -0.7692176699506861
    ],
    [
      0.38357321373883546,
      0.5406386352374869,
      -0.7487198780522721
    ],
    [
      0.38306071001473746,
      0.5416829652703319,
      -0.748227276687335
    ],
    [
      0.30455881066113816,
      0.5991856890747826,
      -0.7404190981171751
    ],
    [
      0.2995821000239557,
      0.6013424384969358,
      -0.7407009092797143
    ],
    [
      0.2879200230983422,
      0.6080950218887415,
      -0.7398124793845945
    ],
    [
      0.2773286561793072,
      0.6114138616108395,
      -0.7411220589699788
    ],
    [
      0.24010085553920874,
      0.5293394245071098,
      -0.8137268293670928
    ],
    [
      0.25777003042493846,
      0.6200687319649397,
      -0.7409921585645276
    ],
    [
      0.25484607921261426,
      0.6209230994863413,
      -0.7412880549652969
    ],
    [
      0.22079280010532587,
      0.5379535373243858,
      -0.8135456539751351
    ],
    [
      0.24006150974839113,
      0.52934903194639,
      -0.8137321880783277
    ],
    [
      0.23825938909691524,
      0.6279620560340982,
      -0.7408752389495771
    ],
    [
      0.23206215253613452,
      0.6296694627500851,
      -0.7413929626320412
    ],
    [
      0.19997812134693765,
      0.5426137560741596,
      -0.8158302903800777
    ],
    [
      0.2254570415674345,
      0.6323735737104492,
      -0.741129398742443
    ],
    [
      0.20223904205282406,
      0.6170163450375715,
      -0.7605196906234791
    ],
    [
      0.17806495643727843,
      0.5432629994930883,
      -0.8204621774772819
    ],
    [
      0.14604250704974328,
      0.5986898007276324,
      -0.7875545115351277
    ],
    [
      0.10337255802967073,
      0.565748810959808,
      -0.8180723666913373
    ],
    [
      0.1679525432469793,
      0.541825290969152,
      -0.8235394934567895
    ],
    [
      0.06791710992016041,
      0.5843055956341068,
      -0.8086867360670413
    ],
    [
      0.05780327071624319,
      0.6545202260515854,
      -0.7538315830368786
    ],
    [
      -0.030915032338491282,
      0.6583639350223914,
      -0.7520646181262234
    ],
    [
      -0.02805648718376377,
      0.5974885972307438,
      -0.8013864296992714
    ],
    [
      -0.00822394964346336,
      0.5713976230059004,
      -0.8206321484535375
    ],
    [
      -0.047235628129261395,
      0.6612657941421193,
      -0.7486630383108455
    ],
    [
      -0.06009135800944999,
      0.6532589758834423,
      -0.7547461421698666
    ],
    [
      -0.07663836149627891,
      0.6275881601034621,
      -0.7747642627568189
    ],
    [
      -0.0715653502513675,
      0.6216293116833339,
      -0.7800355116912971
    ],
    [
      -0.12494017280471584,
      0.622159806995489,
      -0.7728564729488029
    ],
    [
      -0.14288861726445112,
      0.6535616921291812,
      -0.7432630474048165
    ],
    [
      -0.15852721868141528,
      0.6575298268448739,
      -0.736562046094207
    ],
    [
      -0.16992308372103138,
      0.601388230846621,
      -0.7806781292042877
    ],
    [
      -0.1635679876373901,
      0.6000318250133141,
      -0.7830755534374996
    ],
    [
      -0.15358677461680573,
      0.6011015888317537,
      -0.7842754506974879
    ],
    [
      -0.16074839152165457,
      0.6587074305586346,
      -0.7350268536251192
    ],
    [
      -0.18035324642913358,
      0.6627144401789068,
      -0.7268302946911545
    ],
    [
      -0.1934366678608924,
      0.598435487718458,
      -0.7774684704642666
    ],
    [
      -0.1834922765112361,
      0.6640563516081206,
      -0.724817043363107
    ],
    [
      -0.21254161581120448,
      0.6582162853194082,
      -0.7222031454436361
    ],
    [
      -0.22849659786895732,
      0.6073026208310994,
      -0.760902642585758
    ],
    [
      -0.20206214139811862,
      0.594712723629371,
      -0.7781308806151714
    ],
    [
      -0.22799058100505723,
      0.6612655304694433,
      -0.7146664908794467
    ],
    [
      -0.27859152159875916,
      0.608455062493014,
      -0.7430808845744254
    ],
    [
      -0.26298585194266033,
      0.602228533990934,
      -0.7537633809924197
    ],
    [
      -0.24767732297791578,
      0.6019432166317532,
      -0.7591576302939407
    ],
    [
      -0.28951193894143046,
      0.6083964953666756,
      -0.7389428541070819
    ],
    [
      -0.25192767285288725,
      0.6741815625645725,
      -0.6942706016741024
    ],
    [
      -0.2966918718172877,
      0.6569524867501709,
      -0.6930998220677311
    ],
    [
      0.8818933525936733,
      -0.2532122977174644,
      0.39767781800816254
    ],
    [
      0.8933391460877994,
      -0.2527981467469242,
      0.37153501459275945
    ],
    [
      0.8935636285229251,
      -0.2540942922613448,
      0.3701082712141815
    ],
    [
      0.9023323398069105,
      -0.2536532143859579,
      0.3485059473958189
    ],
    [
      0.9023395825563614,
      -0.25369214998534556,
      0.348458850924789
    ],
    [
      0.910376328756437,
      -0.2531486690818229,
      0.32730825131984304
    ],
    [
      0.9115633667620755,
      -0.2511547803281616,
      0.3255357195388897
    ],
    [
      0.9183858171536123,
      -0.25052293393494485,
      0.3062772443778988
    ],
    [
      0.9205492076029572,
      -0.24662313354547738,
      0.30292934222649576
    ],
    [
      0.9263283783376087,
      -0.24585011751244074,
      0.2854355535064529
    ],
    [
      0.9292345018780672,
      -0.24030831211161352,
      0.28066912129674604
    ],
    [
      0.9339503180118021,
      -0.23926111674222086,
      0.2655012645938229
    ],
    [
      0.9374657753324339,
      -0.2322213004865057,
      0.2592897755036137
    ],
    [
      0.9441491446597723,
      -0.22991164866539512,
      0.23605725247528472
    ],
    [
      0.9446551000191084,
      -0.22814059949518478,
      0.2357511587879599
    ],
    [
      0.9531417333368378,
      -0.20861554657209072,
      0.21908991282137188
    ],
    [
      0.9545494248541628,
      -0.20782379696076114,
      0.21364612078715384
    ],
    [
      0.9600547239996601,
      -0.19396089089721946,
      0.20167820836246408
    ],
    [
      0.9608187894710888,
      -0.19339417682442858,
      0.19855967911364394
    ],
    [
      0.9664371459217468,
      -0.1780397076240149,
      0.18520557629775497
    ],
    [
      0.9664638089019533,
      -0.17801463848080598,
      0.1850905037252768
    ],
    [
      0.9725493494250423,
      -0.15977846303286403,
      0.16917034516658844
    ],
    [
      0.9744704308158261,
      -0.1573156018176625,
      0.1601848335216694
    ],
    [
      0.9799326372297351,
      -0.12193362993726178,
      0.1576839128836523
    ],
    [
      0.9805687323659289,
      -0.11178238429583547,
      0.1612130877671332
    ],
    [
      0.9837378198528803,
      -0.10494277338938655,
      0.1457632193128489
    ],
    [
      0.9889101016204657,
      -0.07984199827119505,
      0.12522805686052413
    ],
    [
      0.9893941352477571,
      -0.07851843953519955,
      0.12220515451608496
    ],
    [
      0.9911239281672155,
      -0.05736469190140553,
      0.11992769128706263
    ],
    [
      0.9928372181723412,
      -0.04567073937743599,
      0.11040127615442398
    ],
    [
      0.9938409892274418,
      -0.025504236824101544,
      0.10784072531024665
    ],
    [
      0.9968110069318021,
      -0.011423677909163397,
      0.07897668037233793
    ],
    [
      0.9965900222188263,
      0.040972472894345864,
      0.07162111475536552
    ],
    [
      0.996754815175496,
      -0.0025884134468478503,
      0.08045581731789736
    ],
    [
      0.9964949795706909,
      0.042846188390108654,
      0.07184678023994873
    ],
    [
      0.9972426967614629,
      0.05524950611140759,
      0.049542868612649754
    ],
    [
      0.9970045891337981,
      0.06494535671594963,
      0.04199940341462909
    ],
    [
      0.997400322593297,
      0.0665871495952365,
      0.02754538073014315
    ],
    [
      0.9966754852906764,
      0.08099998762393046,
      0.00877376917394573
    ],
    [
      0.9965464882374864,
      0.08262746745640313,
      0.008233978581136656
    ],
    [
      0.9954163632789919,
      0.09527365861506515,
      -0.008318274492105636
    ],
    [
      0.9953751278733509,
      0.0954018852370126,
      -0.011262109231137194
    ],
    [
      0.9939453747660572,
      0.1067216252249631,
      -0.02613592719810949
    ],
    [
      0.9937762431595125,
      0.10682721145769425,
      -0.031570958552737435
    ],
    [
      0.9921304044031435,
      0.11691900815162098,
      -0.04480185477964219
    ],
    [
      0.9917506487165232,
      0.11681122048899156,
      -0.05278057917669695
    ],
    [
      0.9934515991698001,
      0.09482002944885147,
      -0.06374231029924952
    ],
    [
      0.9911658721148562,
      0.10258195831721865,
      -0.08406637724204032
    ],
    [
      0.9912428155252632,
      0.10204727783827537,
      -0.08380950874063763
    ],
    [
      0.9899351799546416,
      0.12592173449370764,
      -0.06459145663528013
    ],
    [
      0.9892964014292515,
      0.12548256036502853,
      -0.07447655445420723
    ],
    [
      0.987326843734867,
      0.1338723302237275,
      -0.08522853302160427
    ],
    [
      0.9864287951714764,
      0.13316200933493097,
      -0.09605264872159104
    ],
    [
      0.9883871316527314,
      0.1100736559650394,
      -0.10476005081029931
    ],
    [
      0.9852044493002122,
      0.11672380011528376,
      -0.12549002974624235
    ],
    [
      0.988324327306412,
      0.10962186026774401,
      -0.10582094218899935
    ],
    [
      0.9843419173456683,
      0.14091797567293302,
      -0.10589199161643928
    ],
    [
      0.9831080035990376,
      0.13979421677609208,
      -0.11813648977125416
    ],
    [
      0.9808533078104649,
      0.1472394489205941,
      -0.12746502751276198
    ],
    [
      0.9793259169452897,
      0.1459280385167571,
      -0.14009195542185618
    ],
    [
      0.9815412122520498,
      0.12282196935115833,
      -0.1466001790431372
    ],
    [
      0.9850481426655165,
      0.11590048573133237,
      -0.12746463838436664
    ],
    [
      0.9750859074353528,
      0.15141654291291315,
      -0.1621126264461729
    ],
    [
      0.9774149649616521,
      0.12823324977138248,
      -0.1679768434102824
    ],
    [
      0.9812487224880645,
      0.12155689463615803,
      -0.14958230504292788
    ],
    [
      0.9769561891185822,
      0.15290992255199737,
      -0.14891326377472033
    ],
    [
      0.9725713110849755,
      0.1580822418169603,
      -0.17063132677376605
    ],
    [
      0.9704489923771725,
      0.15654341220772763,
      -0.18363799522019356
    ],
    [
      0.9726925642345472,
      0.13330783549999056,
      -0.18999525382790108
    ],
    [
      0.9769760380429716,
      0.1266211225067295,
      -0.1717117131269551
    ],
    [
      0.9677120223176103,
      0.1632032677906335,
      -0.19208887329676239
    ],
    [
      0.9651610338023239,
      0.1612738045580974,
      -0.20604596281651838
    ],
    [
      0.9677121583159911,
      0.1373627039598744,
      -0.21134016704885544
    ],
    [
      0.972049633218861,
      0.1313758281862327,
      -0.19457621213154347
    ],
    [
      0.9620980886767372,
      0.141234258086966,
      -0.23328127251709124
    ],
    [
      0.9668564959170841,
      0.13525343499858317,
      -0.21655259089657974
    ],
    [
      0.9623371048692666,
      0.16757094889270274,
      -0.2140730568732026
    ],
    [
      0.9594835379594019,
      0.16554379806437486,
      -0.22800568262069798
    ],
    [
      0.9558865850899138,
      0.1453678634560378,
      -0.25524306203963676
    ],
    [
      0.9611504001778589,
      0.13923053198543411,
      -0.23833750691193076
    ],
    [
      0.9564117775567268,
      0.17185127036887632,
      -0.2361009373623609
    ],
    [
      0.9532855933832235,
      0.16977125927018247,
      -0.24984854807225126
    ],
    [
      0.9497602533796363,
      0.17646211115074725,
      -0.2584890412154262
    ],
    [
      0.9464231500686139,
      0.17453676830373455,
      -0.27169861524176087
    ],
    [
      0.9492048894738836,
      0.14914133442188707,
      -0.2770684755899367
    ],
    [
      0.9547272981459763,
      0.1431766483337823,
      -0.2607608742637371
    ],
    [
      0.9479418389264439,
      0.14701712224609198,
      -0.28247519498042556
    ],
    [
      0.9426622602210817,
      0.18101019255903444,
      -0.2803982406232658
    ],
    [
      0.9392260848441263,
      0.1793097120645386,
      -0.29274970317270427
    ],
    [
      0.9416698689613715,
      0.15341830134562615,
      -0.29953410941409675
    ],
    [
      0.9346909138986965,
      0.1865508811693106,
      -0.30257505549891783
    ],
    [
      0.9312389732210671,
      0.18510333026191692,
      -0.31389605266731296
    ],
    [
      0.9336520973311305,
      0.1582037207806901,
      -0.32134925529760705
    ],
    [
      0.9404650145966668,
      0.1516479457732404,
      -0.3041849057110621
    ],
    [
      0.9226391887429571,
      0.19171362018437457,
      -0.3346383349700678
    ],
    [
      0.9249656791746661,
      0.1637419454618901,
      -0.34296802714728986
    ],
    [
      0.9325464920977783,
      0.15676781933997683,
      -0.3252397437207154
    ],
    [
      0.9260059704778175,
      0.19277378713483856,
      -0.32457851073835325
    ],
    [
      0.9169957022023126,
      0.19928347455068735,
      -0.345550255264691
    ],
    [
      0.9135247618173464,
      0.19840887727109338,
      -0.3551146673492726
    ],
    [
      0.9156218798881265,
      0.16966701888073535,
      -0.36448549460061846
    ],
    [
      0.9238522839530156,
      0.1624023707479983,
      -0.34658682521155704
    ],
    [
      0.9038020595278009,
      0.2060555389007987,
      -0.3750772614830268
    ],
    [
      0.9056622948648203,
      0.1755103588838167,
      -0.3859688090826267
    ],
    [
      0.9143058096628854,
      0.16821979046116606,
      -0.3684385817390693
    ],
    [
      0.906935960943414,
      0.20659147336989156,
      -0.36713366214296356
    ],
    [
      0.8955720939730002,
      0.21551406370609003,
      -0.3892355493036359
    ],
    [
      0.8945652410138638,
      0.21548663410198748,
      -0.3915591144299977
    ],
    [
      0.8941583620222993,
      0.18250735989757505,
      -0.4088665885210185
    ],
    [
      0.9043377995378773,
      0.17427969549517042,
      -0.3896148509298646
    ],
    [
      0.8838966123218515,
      0.22708037840324535,
      -0.40885361741116283
    ],
    [
      0.8835728667386769,
      0.227099590461732,
      -0.4095421409028747
    ],
    [
      0.8831420384400618,
      0.19124217204137028,
      -0.4283533256236392
    ],
    [
      0.8832551673824403,
      0.19100967281027828,
      -0.42822378984022813
    ],
    [
      0.8940219270544824,
      0.18242327458423158,
      -0.4092023250615223
    ],
    [
      0.8714850991389773,
      0.20066701466777356,
      -0.447489073836502
    ],
    [
      0.8717252608006812,
      0.20019743293996248,
      -0.4472315479997284
    ],
    [
      0.8726798718745077,
      0.23841548318237551,
      -0.42613131615032374
    ],
    [
      0.8721099234326738,
      0.23848781481129003,
      -0.4272561803377357
    ],
    [
      0.8586234763811622,
      0.21167336783277213,
      -0.46686198298582804
    ],
    [
      0.8596156269453958,
      0.20981184545730722,
      -0.4658754805922641
    ],
    [
      0.8610282789302943,
      0.2495827485190851,
      -0.44310129149438787
    ],
    [
      0.8454084926786645,
      0.2229221418058952,
      -0.4853763480016934
    ],
    [
      0.8465497502597134,
      0.22092455835851937,
      -0.48429934942069663
    ],
    [
      0.8593879810946956,
      0.2526345979898504,
      -0.4445537738547383
    ],
    [
      0.8494537307241259,
      0.26239683636183825,
      -0.45779499738000967
    ],
    [
      0.8087028777447298,
      0.29318254075125527,
      -0.5099447551706275
    ],
    [
      0.813700138659483,
      0.2745455829664176,
      -0.512363940201853
    ],
    [
      0.8283517960458497,
      0.23581547893186408,
      -0.5081578119873299
    ],
    [
      0.8459733603667491,
      0.2684824479716757,
      -0.460701908701198
    ],
    [
      0.8300687921347802,
      0.2838301861873746,
      -0.48002731769426144
    ],
    [
      0.7887096035988523,
      0.3872184811233282,
      -0.47749241781151225
    ],
    [
      0.7821873358747359,
      0.41125049795090934,
      -0.46803418628590815
    ],
    [
      0.7793138921594833,
      0.41687467268909734,
      -0.4678518619794038
    ],
    [
      0.7525318280980878,
      0.4292982383020644,
      -0.49939850849806694
    ],
    [
      0.7459372625282413,
      0.40948886309357285,
      -0.5252584805352567
    ],
    [
      0.7683307776935102,
      0.36736431985460716,
      -0.5241290609636596
    ],
    [
      0.787085502366322,
      0.3393495416422144,
      -0.5151099887907179
    ],
    [
      0.7793771295223759,
      0.4319044554001979,
      -0.45390509072152974
    ],
    [
      0.7757735508241231,
      0.4434368855670625,
      -0.4489310931093052
    ],
    [
      0.7449663678302874,
      0.46190473302015667,
      -0.4813201932345315
    ],
    [
      0.7464621450712197,
      0.44528735099386485,
      -0.4944830037731731
    ],
    [
      0.7438979240666712,
      0.4645155454346427,
      -0.48045934960083103
    ],
    [
      0.7757046620024796,
      0.4518062640585041,
      -0.4406283889005746
    ],
    [
      0.7724160098451531,
      0.461589407755415,
      -0.43624388406360215
    ],
    [
      0.7420246235205928,
      0.48187879932129285,
      -0.4660389263288977
    ],
    [
      0.7723065531114228,
      0.4709076532561763,
      -0.426366708510308
    ],
    [
      0.7689576640733512,
      0.4801258404320196,
      -0.422117623669401
    ],
    [
      0.7394408938055161,
      0.5003028620585496,
      -0.4504710987223524
    ],
    [
      0.7417011947882018,
      0.4826341906173807,
      -0.46577202116149036
    ],
    [
      0.7393555327012141,
      0.5004932630250366,
      -0.4503997001893489
    ],
    [
      0.7685935986007943,
      0.4960960527625697,
      -0.403921510473605
    ],
    [
      0.7367748030911347,
      0.5178689891657496,
      -0.4347120881577419
    ],
    [
      0.7367006523717464,
      0.5180263945375778,
      -0.4346502080494624
    ],
    [
      0.7695058654248281,
      0.4973758320006973,
      -0.4005970604215669
    ],
    [
      0.7619388755156618,
      0.5159072731700388,
      -0.39152118137871406
    ],
    [
      0.7338168869197659,
      0.5350645571496968,
      -0.4185913235526776
    ],
    [
      0.7301982047325968,
      0.5524205450215883,
      -0.4020474141731844
    ],
    [
      0.7333732866214355,
      0.5359572139711443,
      -0.41822659798530604
    ],
    [
      0.7614149069244831,
      0.5258184627536867,
      -0.37915997117381817
    ],
    [
      0.7584852420990438,
      0.5324982830151982,
      -0.3756936466109336
    ],
    [
      0.7577108758398116,
      0.5424914466199038,
      -0.3627357977623794
    ],
    [
      0.7547829075169243,
      0.5488141237659545,
      -0.35931298344939566
    ],
    [
      0.7262475489189495,
      0.569178788456826,
      -0.3854867111328715
    ],
    [
      0.7297217709229937,
      0.5533371185987168,
      -0.4016518022141561
    ],
    [
      0.7259759867355806,
      0.5696811858204059,
      -0.3852560359106086
    ],
    [
      0.753692175582675,
      0.5592723964773321,
      -0.34519920481362093
    ],
    [
      0.7513654288225122,
      0.5640733517576776,
      -0.34244889575996823
    ],
    [
      0.7222627961188225,
      0.5855629003634711,
      -0.3680387792890035
    ],
    [
      0.7221486752489552,
      0.5852429599242783,
      -0.3687708891645986
    ],
    [
      0.7499313487102389,
      0.5746990017244341,
      -0.3276034640210337
    ],
    [
      0.7474944608761879,
      0.5794923427784353,
      -0.32471626941158616
    ],
    [
      0.7181357906047577,
      0.6008198696887608,
      -0.3511359714407796
    ],
    [
      0.718108580809398,
      0.600736633609491,
      -0.3513339767336038
    ],
    [
      0.7456656368477796,
      0.5901822932611005,
      -0.30930182467205625
    ],
    [
      0.7439076158007187,
      0.5935129125967388,
      -0.3071544916399987
    ],
    [
      0.7138183017851321,
      0.616140834671566,
      -0.332917262824889
    ],
    [
      0.7136602764033124,
      0.6156365617100388,
      -0.3341865254162549
    ],
    [
      0.7415408616169605,
      0.6048871931239753,
      -0.2902216982704331
    ],
    [
      0.7407625476713844,
      0.6063118595301258,
      -0.28923481284333835
    ],
    [
      0.7095885417137028,
      0.6309320442735183,
      -0.31370186001593864
    ],
    [
      0.7092643641311939,
      0.6298268744173539,
      -0.3166420219036633
    ],
    [
      0.7378780416151357,
      0.6181274811792258,
      -0.27102474557360634
    ],
    [
      0.7055442505357205,
      0.6449747554458565,
      -0.2936236968869276
    ],
    [
      0.7050976401370521,
      0.6432290553931871,
      -0.29848567833507234
    ],
    [
      0.7380911615431608,
      0.6184097754752622,
      -0.26979767761881013
    ],
    [
      0.7349860639899051,
      0.6294969771730964,
      -0.2520496805603235
    ],
    [
      0.7021199775119815,
      0.6575844456695387,
      -0.27314873968601844
    ],
    [
      0.7015519741512737,
      0.6550240219627049,
      -0.28065701169978347
    ],
    [
      0.7353951880812323,
      0.6300657260297202,
      -0.24942152719765476
    ],
    [
      0.7322084015300783,
      0.6400792896025969,
      -0.23274311966329436
    ],
    [
      0.6991210453237027,
      0.6691162711743442,
      -0.25201821290381926
    ],
    [
      0.6985170217118036,
      0.6659499132399415,
      -0.2618867759826487
    ],
    [
      0.732846875376192,
      0.6409817843934645,
      -0.22820562948166348
    ],
    [
      0.7297091991030369,
      0.6497226998525905,
      -0.21303731607552975
    ],
    [
      0.6966668518364442,
      0.679439343175045,
      -0.23025524206445644
    ],
    [
      0.6960548013188974,
      0.6756954255862856,
      -0.24278262994431576
    ],
    [
      0.7305897084626473,
      0.6509800126907894,
      -0.20606722438457745
    ],
    [
      0.7276070768194671,
      0.6583977988812678,
      -0.19261433017958826
    ],
    [
      0.6946821846752784,
      0.6884948349449931,
      -0.20830632383307324
    ],
    [
      0.6941401865135268,
      0.6844411961966443,
      -0.22295661106114986
    ],
    [
      0.6926633020810579,
      0.6921745550621091,
      -0.2027607833747356
    ],
    [
      0.7285384592608924,
      0.6597998469785691,
      -0.1841083249199281
    ],
    [
      0.725841468533294,
      0.6658409115321491,
      -0.17265585158768243
    ],
    [
      0.6931127496764803,
      0.6966266839747571,
      -0.18521873396134292
    ],
    [
      0.7268595191808611,
      0.6673972352901186,
      -0.16203755645921517
    ],
    [
      0.7241295493564084,
      0.6728786511465182,
      -0.1512306734102817
    ],
    [
      0.6917477362034846,
      0.7034726741037393,
      -0.16312959954186304
    ],
    [
      0.6915468825268428,
      0.6992533793661383,
      -0.18112874071345092
    ],
    [
      0.7221879808452488,
      0.6794862249859754,
      -0.1293947076853256
    ],
    [
      0.6903770011776087,
      0.7095275950286055,
      -0.1412451349177566
    ],
    [
      0.6904236312195116,
      0.7055278497798905,
      -0.15983010554532037
    ],
    [
      0.7250424114178159,
      0.674328480841156,
      -0.13998071857187072
    ],
    [
      0.7229087603552379,
      0.6807333478481915,
      -0.11834286344789134
    ],
    [
      0.7199685999067388,
      0.6855393249116154,
      -0.10807890241881958
    ],
    [
      0.6885925701597522,
      0.7153407635206489,
      -0.11886069310954718
    ],
    [
      0.6889010862267805,
      0.7116384085664723,
      -0.1377899446568601
    ],
    [
      0.7206037295298837,
      0.6867191152595309,
      -0.09564058617966192
    ],
    [
      0.7177234892356155,
      0.6909829875994428,
      -0.08611331980362574
    ],
    [
      0.6863646189403992,
      0.7207606989519799,
      -0.09699291063296324
    ],
    [
      0.6869411670995611,
      0.7175254394582883,
      -0.11519147830496403
    ],
    [
      0.6846558652311566,
      0.7228655722329901,
      -0.09333654528022776
    ],
    [
      0.7181729839691665,
      0.6920367248164293,
      -0.07288852174501184
    ],
    [
      0.715396534293702,
      0.695775995134927,
      -0.06405906114330746
    ],
    [
      0.6838094113556628,
      0.7257849763503897,
      -0.07510563923891592
    ],
    [
      0.6819888973658186,
      0.7278724823756603,
      -0.07136380924564892
    ],
    [
      0.7155855810173612,
      0.6965960207383858,
      -0.05187735663554915
    ],
    [
      0.7123711639522061,
      0.700536600836545,
      -0.04214019052826299
    ],
    [
      0.6808801970841135,
      0.7304588802854686,
      -0.05321636431397934
    ],
    [
      0.678699394270577,
      0.7327856550811179,
      -0.048911306710091446
    ],
    [
      0.7123657385206498,
      0.7011270599470676,
      -0.03091763884759297
    ],
    [
      0.7083679587795587,
      0.7055744205507373,
      -0.019482608628539146
    ],
    [
      0.6774220208420061,
      0.7348875286874272,
      -0.03224478032206803
    ],
    [
      0.6744822196336688,
      0.7378084799823418,
      -0.026690490145101175
    ],
    [
      0.7081923866626472,
      0.7059582895194181,
      -0.00929714643752802
    ],
    [
      0.7040486811385731,
      0.7101488332871037,
      0.0020221691326638407
    ],
    [
      0.672996284511716,
      0.7395714045025962,
      -0.01049469749362643
    ],
    [
      0.6697524383879192,
      0.7425704644553369,
      -0.0045581347086093476
    ],
    [
      0.7037562412255,
      0.7103558125507212,
      0.0110350582943935
    ],
    [
      0.6987542240758965,
      0.7149603438383275,
      0.02396332770447971
    ],
    [
      0.6681087158390149,
      0.7439883677824497,
      0.010585481772158116
    ],
    [
      0.6642789301009763,
      0.7472825620835055,
      0.017386069993357418
    ],
    [
      0.698391721269007,
      0.7150007647131381,
      0.03198296613107223
    ],
    [
      0.6927221815790562,
      0.719743985099996,
      0.04587564779629647
    ],
    [
      0.6625249003222133,
      0.7483837372537179,
      0.03134546645368968
    ],
    [
      0.6578057724746373,
      0.7521530315926356,
      0.03946368919720414
    ],
    [
      0.6923300340636559,
      0.7196618667502197,
      0.052592028664105624
    ],
    [
      0.685790994639505,
      0.724631012946035,
      0.06782777269055437
    ],
    [
      0.656066395389062,
      0.7529431286226723,
      0.05151242472554541
    ],
    [
      0.6503666643416187,
      0.7571657697935961,
      0.061018021649569466
    ],
    [
      0.6854044263209101,
      0.7244821228759781,
      0.07311925883664418
    ],
    [
      0.6779741271639783,
      0.7295973367246209,
      0.08965940631401575
    ],
    [
      0.6487146639697439,
      0.7576971901232004,
      0.07116356392163907
    ],
    [
      0.6776548117334663,
      0.7294556373675501,
      0.09315808739546841
    ],
    [
      0.6695332922602673,
      0.7345163451623884,
      0.11050298296613846
    ],
    [
      0.6401768094591096,
      0.7628157263696799,
      0.09102648094841807
    ],
    [
      0.6417489676378778,
      0.7624761823307815,
      0.08239134611107485
    ],
    [
      0.6691891294372537,
      0.734346236338725,
      0.11367283852424961
    ],
    [
      0.6606263614902189,
      0.7391536364911429,
      0.13124295091971272
    ],
    [
      0.6311023937816971,
      0.7677540104507578,
      0.11074090481745891
    ],
    [
      0.6327066892778933,
      0.7675474925530397,
      0.10272824352897764
    ],
    [
      0.6603458967171869,
      0.7390123687580573,
      0.13343168855777626
    ],
    [
      0.6510663451849431,
      0.7436991554671082,
      0.15173720811004332
    ],
    [
      0.6212206821517047,
      0.7727591190362246,
      0.1301084471251919
    ],
    [
      0.6226814952296664,
      0.772662076373291,
      0.1235357083318887
    ],
    [
      0.6108414032747458,
      0.7776707960855628,
      0.14866375806156124
    ],
    [
      0.6120772908061538,
      0.7776460525451856,
      0.14362453495238675
    ],
    [
      0.6508849413834868,
      0.743604822647189,
      0.1529727453373888
    ],
    [
      0.6406060060338611,
      0.7482512960373797,
      0.1724643238809874
    ],
    [
      0.6405391665122245,
      0.7482168192843449,
      0.1728617005118331
    ],
    [
      0.6297958069216709,
      0.7525420857541301,
      0.1924516842033474
    ],
    [
      0.6296987734653853,
      0.7526020784448441,
      0.19253458446910382
    ],
    [
      0.5995149451860748,
      0.7827042034547981,
      0.167200360025712
    ],
    [
      0.6005125795999965,
      0.78272411115141,
      0.16348580233278015
    ],
    [
      0.6191392420088968,
      0.7563840417773051,
      0.2110681888615069
    ],
    [
      0.6178656867872202,
      0.7571279102513961,
      0.21213043301070802
    ],
    [
      0.5872082726816571,
      0.787998385728455,
      0.18505401531329657
    ],
    [
      0.5875836714215439,
      0.7880104131449418,
      0.18380701252650067
    ],
    [
      0.5747929951564998,
      0.793021931064308,
      0.20181483981624382
    ],
    [
      0.6075347176824764,
      0.7603936186369994,
      0.2295715826198952
    ],
    [
      0.6046893735807337,
      0.7619601775515655,
      0.2318780914707699
    ],
    [
      0.5743667419055577,
      0.793262446685799,
      0.20208299401694899
    ],
    [
      0.5948888594124196,
      0.7646762770807006,
      0.24774469967486695
    ],
    [
      0.5779606289679712,
      0.7731940087212726,
      0.2610220991419609
    ],
    [
      0.5706497545859761,
      0.7777273987446937,
      0.26362653666271435
    ],
    [
      0.55304778622638,
      0.7979997988306601,
      0.23944616767934787
    ],
    [
      0.559937495619447,
      0.7985373566658318,
      0.2209255327221549
    ],
    [
      0.511635684535112,
      0.8229872669313515,
      0.24682156465582908
    ],
    [
      0.5655818537832308,
      0.7765366932938446,
      0.2776831479211256
    ],
    [
      0.553577564383339,
      0.7789842871378395,
      0.2945086766188088
    ],
    [
      0.5406793053448498,
      0.7843829756520196,
      0.30398887525548335
    ],
    [
      0.5377060083594601,
      0.784902209216393,
      0.30789733766527105
    ],
    [
      0.5218745044908429,
      0.7910611999111024,
      0.3191695153952583
    ],
    [
      0.5067848620566116,
      0.7989866724626202,
      0.3237119102185936
    ],
    [
      0.5067440685727224,
      0.7990129707526551,
      0.3237108610092975
    ],
    [
      0.4922017846950398,
      0.8333688340337533,
      0.2514632967338183
    ],
    [
      0.5064290782884862,
      0.8263898538141216,
      0.24618976050386224
    ],
    [
      0.4853685165587515,
      0.8064978254190824,
      0.3376072581089576
    ],
    [
      0.47786407724175484,
      0.8111863578889762,
      0.33707954025230313
    ],
    [
      0.4707562974657554,
      0.818912556144941,
      0.32828453174722105
    ],
    [
      0.4745519281436105,
      0.844156408371994,
      0.24940013171543596
    ],
    [
      0.44325886494737143,
      0.8383521775522026,
      0.31731247223998005
    ],
    [
      0.43116643388320525,
      0.8512517472662043,
      0.29910862419641765
    ],
    [
      0.42356024166814316,
      0.864587373434382,
      0.2703431067659405
    ],
    [
      0.4227310765526313,
      0.8680595863728572,
      0.2603286219815973
    ],
    [
      0.4464187436006129,
      0.8622264703668373,
      0.23932367028941318
    ],
    [
      0.4066872676637262,
      0.8750377885371825,
      0.2625153994571934
    ],
    [
      0.4064290252094729,
      0.8750814376066659,
      0.2627697186197997
    ],
    [
      0.3740680327432238,
      0.8824653185405241,
      0.2851807645210066
    ],
    [
      0.3241730018763581,
      0.8980262038966267,
      0.29742360694720377
    ],
    [
      0.35076482448074964,
      0.9034317567512467,
      0.24652606109769665
    ],
    [
      0.376482060678432,
      0.8936237597884622,
      0.24433140184768337
    ],
    [
      0.3240227203867755,
      0.898049843644784,
      0.29751597436563376
    ],
    [
      0.29918255079831535,
      0.920831473512579,
      0.25011836935032555
    ],
    [
      0.29734553455882506,
      0.924341967099498,
      0.23911829904161863
    ],
    [
      0.3267859709133222,
      0.9147797427226553,
      0.23746357935167653
    ],
    [
      0.2747566502194258,
      0.9326751403986852,
      0.23372176972309025
    ],
    [
      0.20837844951792667,
      0.9326435912723273,
      0.2945409197975063
    ],
    [
      0.2063193910826904,
      0.9333567755123756,
      0.2937302137479369
    ],
    [
      0.18523534618121376,
      0.9530152390635891,
      0.23968692212487536
    ],
    [
      0.26759517176173664,
      0.9379181328798938,
      0.2206862027062424
    ],
    [
      0.12955040166995815,
      0.9603919170949866,
      0.24670642270879153
    ],
    [
      0.13338622710660308,
      0.9736788042232561,
      0.18481802029195032
    ],
    [
      0.1726828351995731,
      0.9723299610994351,
      0.15733748814509538
    ],
    [
      0.07975680385971011,
      0.957435516049227,
      0.2774095976090844
    ],
    [
      0.07902552354858407,
      0.9578656128876736,
      0.2761311903338586
    ],
    [
      0.08909655720860381,
      0.9756822106266929,
      0.20026489297973196
    ],
    [
      0.029903608729385824,
      0.9681810233622365,
      0.24845780363315628
    ],
    [
      0.011557341501532946,
      0.9798744162494049,
      0.19928009493500606
    ],
    [
      0.015297036365728269,
      0.9820769529811136,
      0.1878586146594218
    ],
    [
      0.01763148682626749,
      0.9826993999057401,
      0.1843665373574977
    ],
    [
      0.01809647729238196,
      0.9827328769079036,
      0.18414290687919932
    ],
    [
      0.0577370844436366,
      0.9810290870853995,
      0.1850631226699039
    ],
    [
      0.08129783419000207,
      0.9776236679847057,
      0.19401707644469096
    ],
    [
      -0.058191209067864236,
      0.9753798165339231,
      0.21271576501395156
    ],
    [
      -0.03801533007229152,
      0.9836421658448357,
      0.1760764727372046
    ],
    [
      -0.009081726521079213,
      0.9778238221908327,
      0.2092321557493183
    ],
    [
      -0.07281090851554961,
      0.9730417160991008,
      0.2188341617116878
    ],
    [
      -0.07344892292011136,
      0.9730751753243265,
      0.21847187207832194
    ],
    [
      -0.07920621743903015,
      0.9763787200331286,
      0.20102479992645275
    ],
    [
      -0.0567818308834372,
      0.9847846112307851,
      0.1642409606783769
    ],
    [
      -0.042700705915450665,
      0.984882473013012,
      0.16787842048963864
    ],
    [
      -0.07597467469248297,
      0.9854962166372719,
      0.15174009291876248
    ],
    [
      -0.061847303563576574,
      0.9858638872435933,
      0.15571546766736558
    ],
    [
      -0.09359676816096983,
      0.9788272708779803,
      0.182035213009425
    ],
    [
      -0.0811668878414495,
      0.986323603599246,
      0.1434492429437368
    ],
    [
      -0.11205239661523471,
      0.9786439216611499,
      0.1723378513515455
    ],
    [
      -0.09588113795780584,
      0.9856584214157823,
      0.13886786408692361
    ],
    [
      -0.11741080223585056,
      0.9780584397493312,
      0.172094136894428
    ],
    [
      -0.13292525710977016,
      0.9774661739587197,
      0.16398400772271496
    ],
    [
      -0.1146448013825024,
      0.9854482723570241,
      0.12549211937218568
    ],
    [
      -0.10184136105922864,
      0.9862317402788655,
      0.13028926143057348
    ],
    [
      -0.17958821349842358,
      0.9705404576138782,
      0.1606215854332429
    ],
    [
      -0.18304456707652228,
      0.9708206341499369,
      0.15492573308680122
    ],
    [
      -0.17665586974755876,
      0.9756022886162871,
      0.13035673411986262
    ],
    [
      -0.12260534010824904,
      0.9855525851484432,
      0.11685047062019446
    ],
    [
      -0.12076901503202249,
      0.9856875649372132,
      0.11762172136277434
    ],
    [
      -0.2355612407640437,
      0.9602599441416007,
      0.14970551602019996
    ],
    [
      -0.24127369062548423,
      0.9660166044393086,
      0.09273039501429071
    ],
    [
      -0.23863315649825573,
      0.9668007276395153,
      0.09138145137489775
    ],
    [
      -0.1835690050848043,
      0.9791239739479323,
      0.08728495868466639
    ],
    [
      -0.18255338464659257,
      0.9792354451414708,
      0.08816010851092981
    ],
    [
      -0.18174643589323652,
      0.9792790587138002,
      0.08933508943701421
    ],
    [
      -0.24638299536272515,
      0.9566701140652042,
      0.15516994699541672
    ],
    [
      -0.26077025277461474,
      0.952405161085509,
      0.15787110060283047
    ],
    [
      -0.2817624080051505,
      0.9563653111959505,
      0.07730030385588364
    ],
    [
      -0.2722971345148991,
      0.9481986569230741,
      0.16362633511832178
    ],
    [
      -0.27390128952120685,
      0.9476828104467205,
      0.16393710495926506
    ],
    [
      -0.30826228127213107,
      0.9472947003853512,
      0.08721878562975488
    ],
    [
      -0.2950687110343103,
      0.9530856296971721,
      0.06754434271865697
    ],
    [
      -0.2926533480456554,
      0.9403891548784767,
      0.17326931426139142
    ],
    [
      -0.3372467394461733,
      0.9339004157729969,
      0.11872089180910253
    ],
    [
      -0.3292033239271128,
      0.9383717416822791,
      0.10527889592651817
    ],
    [
      -0.29726133928727055,
      0.9375453981657329,
      0.18067739909406333
    ],
    [
      -0.3067770706454815,
      0.9327581049624275,
      0.18934134929559962
    ],
    [
      -0.3598349449766574,
      0.9207098937001054,
      0.1510367637907628
    ],
    [
      -0.3592888597057291,
      0.9217960690066681,
      0.1456142934440527
    ],
    [
      -0.3508261148769242,
      0.9273952222970185,
      0.1298427463550688
    ],
    [
      -0.3383107458721771,
      0.9334599154287242,
      0.11915714630356887
    ],
    [
      -0.3674143932841473,
      0.9153163107803777,
      0.1649324553477604
    ],
    [
      -0.31290623338404644,
      0.9285770816557118,
      0.19958530139559413
    ],
    [
      -0.3171936235785029,
      0.9262878201026504,
      0.20341848365037712
    ],
    [
      -0.36785498613780304,
      0.9133940060809972,
      0.17433903415146032
    ],
    [
      -0.37356622645907495,
      0.9090950682035768,
      0.18437578858695425
    ],
    [
      -0.3267992300026235,
      0.9191508508441343,
      0.21991811353819046
    ],
    [
      -0.3287131453685384,
      0.9180726192215541,
      0.2215633857332875
    ],
    [
      -0.37352966351854183,
      0.9067132658861106,
      0.19582299134133416
    ],
    [
      -0.37962285015343605,
      0.902032229962214,
      0.20548563879448425
    ],
    [
      -0.33764924643342825,
      0.9109044032759327,
      0.23716271729649024
    ],
    [
      -0.37860696962635293,
      0.8992524050972026,
      0.21909330084976708
    ],
    [
      -0.38261912994861313,
      0.8919580158764178,
      0.24085991636461754
    ],
    [
      -0.38445426675185396,
      0.8947334700961881,
      0.22725961864336575
    ],
    [
      -0.3381803959943511,
      0.9098757758170739,
      0.2403332942943647
    ],
    [
      -0.34728713551856155,
      0.9020801360006151,
      0.25620904304185693
    ],
    [
      -0.34785425479270504,
      0.9005753278424915,
      0.2606942582873676
    ],
    [
      -0.3567572137550499,
      0.8924647445117533,
      0.27609956580426653
    ],
    [
      -0.3872144398348155,
      0.8840031696714343,
      0.2619224572163818
    ],
    [
      -0.38966242273119783,
      0.8865787913920675,
      0.24928145331138107
    ],
    [
      -0.402896359221602,
      0.8719816122113887,
      0.27806940085382487
    ],
    [
      -0.3571132392847648,
      0.891053085927276,
      0.2801687569787555
    ],
    [
      -0.36574708522752686,
      0.8827220492096256,
      0.2950099209971208
    ],
    [
      -0.3660248291565962,
      0.8804074014362316,
      0.3015105834580054
    ],
    [
      -0.37414586991097887,
      0.8721317546848086,
      0.3152793531123688
    ],
    [
      -0.41297785763074474,
      0.861457514270369,
      0.29553382245326415
    ],
    [
      -0.4133442009467065,
      0.8634021027481024,
      0.2892807987300299
    ],
    [
      -0.4087945125996266,
      0.8689117018947642,
      0.27906898928182305
    ],
    [
      -0.3742354820566899,
      0.870240791321126,
      0.3203572522834117
    ],
    [
      -0.3826974927521105,
      0.861162338335386,
      0.3345774291161592
    ],
    [
      -0.419505032759172,
      0.851292065486837,
      0.31514654801993425
    ],
    [
      -0.41984915192021094,
      0.8526640689420576,
      0.31095124242725547
    ],
    [
      -0.42635055341082606,
      0.8419369463706199,
      0.330707399285831
    ],
    [
      -0.38263993630153914,
      0.8591957959807672,
      0.3396605118587231
    ],
    [
      -0.39120512166775057,
      0.8495188869926766,
      0.35394379980958046
    ],
    [
      -0.4259610201633394,
      0.8407125998032324,
      0.3343045525168588
    ],
    [
      -0.4331666851006974,
      0.8302789065677874,
      0.3507186339895167
    ],
    [
      -0.39105139333333316,
      0.8476082478357295,
      0.35866288624961357
    ],
    [
      -0.3993176187488343,
      0.8377802499022564,
      0.37238379694942886
    ],
    [
      -0.4326986338065327,
      0.8290956163123273,
      0.35407958330528216
    ],
    [
      -0.4388596599978813,
      0.8166156670575412,
      0.37488805148031984
    ],
    [
      -0.4396812299163948,
      0.8183761358184899,
      0.3700552882773099
    ],
    [
      -0.39896493147929823,
      0.8351190651050225,
      0.3786860580320221
    ],
    [
      -0.4060970861938979,
      0.8261992174665824,
      0.3904868879263845
    ],
    [
      -0.40545457924237543,
      0.8226926469529104,
      0.3984763390980725
    ],
    [
      -0.4124271733934495,
      0.8135946317475113,
      0.4098385070223648
    ],
    [
      -0.4439477326641882,
      0.8043456547283411,
      0.394890463776935
    ],
    [
      -0.44506464316021727,
      0.8065237700205663,
      0.3891489069758275
    ],
    [
      -0.41150897576907913,
      0.8095309736299916,
      0.4187122706527256
    ],
    [
      -0.41812071766251196,
      0.800505108992549,
      0.4293793613323924
    ],
    [
      -0.44911058382078184,
      0.791486368306243,
      0.41454675524667983
    ],
    [
      -0.4502332255002962,
      0.7935825572938882,
      0.40928812273811715
    ],
    [
      -0.41706194177515293,
      0.7960940193382964,
      0.43851299763694024
    ],
    [
      -0.4233987472641686,
      0.7870481504382466,
      0.44865210320120846
    ],
    [
      -0.4539082733345259,
      0.7779755020084789,
      0.4344207610981831
    ],
    [
      -0.45527591013586133,
      0.7803687124894161,
      0.4286589765974512
    ],
    [
      -0.4221077482192793,
      0.7819555591824981,
      0.45866169706749677
    ],
    [
      -0.4279492212479291,
      0.7732229308716093,
      0.46795914694298857
    ],
    [
      -0.45820362099392337,
      0.7639049628734097,
      0.45442122464232626
    ],
    [
      -0.45987625154940415,
      0.7666638481121313,
      0.4480405977796744
    ],
    [
      -0.42646923211507914,
      0.7675256120845039,
      0.47856914741078144
    ],
    [
      -0.43192152065013445,
      0.7590306659224966,
      0.48715115538047005
    ],
    [
      -0.46178021928909746,
      0.7492588111279905,
      0.4747317800825884
    ],
    [
      -0.46390328452216256,
      0.7525698597622282,
      0.46736746654747974
    ],
    [
      -0.4670815036916579,
      0.7382091476596128,
      0.486705376198792
    ],
    [
      -0.430131380635334,
      0.7526012617798769,
      0.4985763092647691
    ],
    [
      -0.435430615909329,
      0.7440580791763599,
      0.5067324279550384
    ],
    [
      -0.46450769017561844,
      0.734404365495136,
      0.49485637685029216
    ],
    [
      -0.46987607000859644,
      0.7227652693226309,
      0.5067808641752976
    ],
    [
      -0.4333124242486009,
      0.7369139985174697,
      0.5188430415653612
    ],
    [
      -0.43828557024230835,
      0.7286018038031825,
      0.5263508054635456
    ],
    [
      -0.46721392942346074,
      0.7188354184443203,
      0.5147686716794916
    ],
    [
      -0.47235405101062417,
      0.7071904891465947,
      0.5260829426568143
    ],
    [
      -0.43585745331349285,
      0.7206272967733474,
      0.5391888162195264
    ],
    [
      -0.44047082272822335,
      0.7126121744290241,
      0.5460488468815407
    ],
    [
      -0.4693038826569345,
      0.7027834235759928,
      0.5346487868404202
    ],
    [
      -0.4743601664374081,
      0.6908871764416427,
      0.5455798217731014
    ],
    [
      -0.43780436463084776,
      0.7037528960207353,
      0.5595169341964621
    ],
    [
      -0.44188128567109336,
      0.696373695386504,
      0.5655126928260817
    ],
    [
      -0.47086261834635984,
      0.6859313779867482,
      0.5547851289798702
    ],
    [
      -0.4756669342945218,
      0.6741580243297345,
      0.5650238276840016
    ],
    [
      -0.4389444671143109,
      0.6865820689029506,
      0.5795971164961724
    ],
    [
      -0.4429295861487581,
      0.6791510432213899,
      0.5852924416096518
    ],
    [
      -0.4718845391349257,
      0.6687608782722623,
      0.5745292589746246
    ],
    [
      -0.47662099566334554,
      0.6567498620889399,
      0.584390319169508
    ],
    [
      -0.4396867035217837,
      0.668264965975685,
      0.6000812761582083
    ],
    [
      -0.4430032638407264,
      0.6618353918934873,
      0.6047495533389485
    ],
    [
      -0.47233696845931006,
      0.6506561418276376,
      0.5945959748675076
    ],
    [
      -0.43934677690986346,
      0.6493804787285957,
      0.6207087911936922
    ],
    [
      -0.4419967760957595,
      0.6440504864508392,
      0.624369939077301
    ],
    [
      -0.4721649249395852,
      0.6318305917003028,
      0.6146953611736803
    ],
    [
      -0.47684406261509216,
      0.638777965742875,
      0.6038066333108045
    ],
    [
      -0.4379107792650058,
      0.6299149170288172,
      0.641436938995638
    ],
    [
      -0.43994026028772454,
      0.6256996875286145,
      0.6441680436070725
    ],
    [
      -0.4709224824904968,
      0.6124512597940588,
      0.634929499914485
    ],
    [
      -0.47621844506498173,
      0.6206539400279861,
      0.6229002161724042
    ],
    [
      -0.4745896036302524,
      0.6018980553291485,
      0.6422487361739757
    ],
    [
      -0.4354307590477101,
      0.6098522728266098,
      0.6621784196146483
    ],
    [
      -0.4370923946434352,
      0.6063126592395657,
      0.6643306389070985
    ],
    [
      -0.4689790292121552,
      0.5926957025401385,
      0.6548056767848582
    ],
    [
      -0.47229783547480936,
      0.5828461086883753,
      0.6612300418104342
    ],
    [
      -0.43237294103328755,
      0.5889921692464972,
      0.6827458271044435
    ],
    [
      -0.43327412689390116,
      0.5870238039133269,
      0.6838688358182843
    ],
    [
      -0.46556852183211334,
      0.5718507670129094,
      0.6754499624293484
    ],
    [
      -0.42784985993895286,
      0.5669921997927546,
      0.703892280625659
    ],
    [
      -0.4604877595447617,
      0.5506695043054111,
      0.6962141339684786
    ],
    [
      -0.46831847214427735,
      0.5634454430348558,
      0.6805931540734926
    ],
    [
      -0.42748368461267106,
      0.5668186858982585,
      0.7042544119184102
    ],
    [
      -0.4219999690912711,
      0.5457814252315513,
      0.7239051470732771
    ],
    [
      -0.45424344730537414,
      0.5286924656367616,
      0.7170405618645652
    ],
    [
      -0.46291654117352465,
      0.5431246098880859,
      0.7005169048937041
    ],
    [
      -0.4149596063119909,
      0.5236620973300632,
      0.7440339595403405
    ],
    [
      -0.44622241096472465,
      0.5061002904217061,
      0.7380704952698577
    ],
    [
      -0.45614955130261703,
      0.5226637782612477,
      0.7202431268260034
    ],
    [
      -0.4203636584931253,
      0.5450122172275638,
      0.7254350954365042
    ],
    [
      -0.41162834924338165,
      0.5221649533834164,
      0.7469309630462935
    ],
    [
      -0.4063282995896332,
      0.5003824676032746,
      0.7645356100717972
    ],
    [
      -0.4367905928741134,
      0.48303724171956886,
      0.7588735079633702
    ],
    [
      -0.44771971099470975,
      0.5013717902522791,
      0.7403873231802651
    ],
    [
      -0.4023326296336148,
      0.49861091197313445,
      0.7677992013498188
    ],
    [
      -0.3970609166161791,
      0.47599213203556867,
      0.7847127619302195
    ],
    [
      -0.42602425400693555,
      0.4587225315895071,
      0.7797929045650183
    ],
    [
      -0.43812660734578046,
      0.4789486939532453,
      0.7606925952683888
    ],
    [
      -0.3913841301629687,
      0.47366817456508287,
      0.7889593925296526
    ],
    [
      -0.3862916796334265,
      0.4504128218182638,
      0.804926722247246
    ],
    [
      -0.4136098500621249,
      0.43329942169190055,
      0.8007362256655128
    ],
    [
      -0.42703230134764547,
      0.45574934297666,
      0.7809839626919853
    ],
    [
      -0.37834117739971385,
      0.4474832241231574,
      0.8103188987134278
    ],
    [
      -0.3736329578647067,
      0.42366776681380675,
      0.8251690954951428
    ],
    [
      -0.3992852892330349,
      0.4064172110587382,
      0.8218249864523034
    ],
    [
      -0.3998988419426888,
      0.4064619315472069,
      0.8215044822858911
    ],
    [
      -0.41429626622708166,
      0.43136441612581644,
      0.8014258195807847
    ],
    [
      -0.36259434491429093,
      0.4201131855227081,
      0.8318835569874782
    ],
    [
      -0.35845074987057385,
      0.39563132982028576,
      0.8455701690468128
    ],
    [
      -0.3802771916255219,
      0.37932427627169585,
      0.8435059875071191
    ],
    [
      -0.38432132597879554,
      0.3794300896405869,
      0.8416233869571571
    ],
    [
      -0.3430930530106195,
      0.39166488439685593,
      0.853748074847756
    ],
    [
      -0.33963615792718266,
      0.36591825327413124,
      0.866458950065882
    ],
    [
      -0.3580864083390914,
      0.3512334087677351,
      0.8651064771045276
    ],
    [
      -0.3657351291246289,
      0.35108933264585696,
      0.8619594513818373
    ],
    [
      -0.3437322920261795,
      0.32084683632813704,
      0.8825561846345279
    ],
    [
      -0.3025503834810818,
      0.3580567948379984,
      0.8833224762937881
    ],
    [
      -0.30276730019535175,
      0.3471015741318087,
      0.8876105334929494
    ],
    [
      -0.3310424421470227,
      0.3220000153531793,
      0.8869762632730864
    ],
    [
      -0.27853979133748347,
      0.32068381044287464,
      0.9053051852063533
    ],
    [
      -0.3176511551215554,
      0.29028000128024006,
      0.9026822611011504
    ],
    [
      0.8066223847780639,
      0.29632135834755197,
      -0.5114234849535271
    ],
    [
      0.7991363730176477,
      0.31033977314709144,
      -0.5148497669448932
    ],
    [
      0.7945267335339162,
      0.32387262829443586,
      -0.5136475351265488
    ],
    [
      0.7302197685400771,
      0.297659204766735,
      -0.614961858533447
    ],
    [
      0.7408904432290286,
      0.34170304793468226,
      -0.5782044432240571
    ],
    [
      0.7934859340521345,
      0.32790667548036223,
      -0.5126960938380827
    ],
    [
      0.7870973937922421,
      0.3393159332710926,
      -0.5151139583760351
    ],
    [
      0.729697573655956,
      0.3756839646219355,
      -0.5713169083149517
    ],
    [
      0.7332877287205107,
      0.3552323029328928,
      -0.5797405608208799
    ],
    [
      0.7366872331222393,
      0.4141328660495317,
      -0.5345894591294333
    ],
    [
      0.7329264874511351,
      0.41220750810730844,
      -0.5412058150579171
    ],
    [
      0.725600572805192,
      0.396711071954609,
      -0.5622491744177152
    ],
    [
      0.7293737020979328,
      0.37622125733252715,
      -0.5713769055702972
    ],
    [
      0.7190911080565228,
      0.45617710764641645,
      -0.5242236400367616
    ],
    [
      0.7241400614545902,
      0.4346855586926934,
      -0.5354153868358317
    ],
    [
      0.7214407916800107,
      0.4597233559855323,
      -0.5178586873477347
    ],
    [
      0.7195173017665044,
      0.47884826861016755,
      -0.5029902465333634
    ],
    [
      0.7173042351794088,
      0.47572045611777636,
      -0.5090821955487917
    ],
    [
      0.7173623677975893,
      0.49774299280192225,
      -0.48748656020901937
    ],
    [
      0.7150910625169378,
      0.49471066693135884,
      -0.4938685334506818
    ],
    [
      0.7127437453252129,
      0.5131730209895335,
      -0.4781734037232348
    ],
    [
      0.7149689368977798,
      0.5161367033081283,
      -0.47161671171564257
    ],
    [
      0.7102259603112744,
      0.5309937318357177,
      -0.46219556688820146
    ],
    [
      0.7124726750522827,
      0.5339800036192133,
      -0.45524503625923207
    ],
    [
      0.7075536731171285,
      0.5484445340908484,
      -0.44561911166862206
    ],
    [
      0.7095371348331028,
      0.5511667850539577,
      -0.43905834389761433
    ],
    [
      0.7057197955299555,
      0.5682723360396779,
      -0.4231147861859301
    ],
    [
      0.7041581471079343,
      0.5659624070833266,
      -0.42877483325163557
    ],
    [
      0.7000495155920137,
      0.5829309831790875,
      -0.4124586580122296
    ],
    [
      0.701536456349353,
      0.5852105362252316,
      -0.40666353254720194
    ],
    [
      0.6956911996883222,
      0.5994439959077456,
      -0.3958290672075232
    ],
    [
      0.6971247656749456,
      0.6018063440190677,
      -0.3896744607759861
    ],
    [
      0.6913241994525069,
      0.6151883127491646,
      -0.3789646304184423
    ],
    [
      0.6926508497774507,
      0.6175966413476285,
      -0.37257105214804875
    ],
    [
      0.6868549511219567,
      0.6302427427112676,
      -0.3619728738165795
    ],
    [
      0.6882705682534879,
      0.6328137743535852,
      -0.35472574175606497
    ],
    [
      0.6824434603128195,
      0.6447969042384968,
      -0.34424972877362736
    ],
    [
      0.6838986113149201,
      0.6474010051251995,
      -0.3363846429378208
    ],
    [
      0.6779905938206275,
      0.6588513407399197,
      -0.32595040342966775
    ],
    [
      0.6793923246538659,
      0.6614108626886563,
      -0.31774477166251447
    ],
    [
      0.6734494388409704,
      0.6722993643010393,
      -0.3073750446688872
    ],
    [
      0.6748782705748265,
      0.6750491756968302,
      -0.2980736994385136
    ],
    [
      0.6697206874648645,
      0.6841093162885103,
      -0.2889094047428298
    ],
    [
      0.6713275673055622,
      0.6872412987736672,
      -0.2775224218607909
    ],
    [
      0.6666675084767703,
      0.6950492872889327,
      -0.2691856634007877
    ],
    [
      0.6683031367150712,
      0.6983856651932814,
      -0.25618036636193364
    ],
    [
      0.6643068331572612,
      0.7048127384490214,
      -0.24886830883132158
    ],
    [
      0.6658561425905402,
      0.70831664702209,
      -0.2343568324709781
    ],
    [
      0.664290017688484,
      0.716808649113014,
      -0.21190595309289822
    ],
    [
      0.6627697045507355,
      0.7131003209812543,
      -0.22852625876726487
    ],
    [
      0.6633220676206535,
      0.723856234104152,
      -0.18983146987793229
    ],
    [
      0.6619804472474324,
      0.7202383608653682,
      -0.20745744382898584
    ],
    [
      0.6623732210763084,
      0.7302486476842496,
      -0.16732790728483
    ],
    [
      0.6612226980872218,
      0.726804780265908,
      -0.18584766589031937
    ],
    [
      0.6606121838274016,
      0.7325873901625579,
      -0.16403432065760976
    ],
    [
      0.6615118796852782,
      0.7357420676103401,
      -0.1452089631658862
    ],
    [
      0.6603144014897275,
      0.7407646006849442,
      -0.12350181195973685
    ],
    [
      0.6596860180064827,
      0.738021706433991,
      -0.14190954329787184
    ],
    [
      0.6585420011038855,
      0.7456903469278795,
      -0.10133281443179626
    ],
    [
      0.6581213295788715,
      0.74332564106051,
      -0.11976354576965483
    ],
    [
      0.6564525371220417,
      0.7501933698252271,
      -0.07924628935353678
    ],
    [
      0.6562423168329353,
      0.7482084924153216,
      -0.09762209522097269
    ],
    [
      0.6537844051470342,
      0.7529374292490565,
      -0.07517432555308202
    ],
    [
      0.6537555208389583,
      0.7545095995599794,
      -0.057610616594704046
    ],
    [
      0.6501994264359546,
      0.7589041652747894,
      -0.036127189081505924
    ],
    [
      0.6504466986797166,
      0.7577123295162783,
      -0.0528310313705196
    ],
    [
      0.6462481610411223,
      0.762509613917265,
      -0.03069858359454087
    ],
    [
      0.6458000843310192,
      0.7633628036312462,
      -0.014814894879543216
    ],
    [
      0.6412116353933833,
      0.767313725063591,
      -0.008791243665075827
    ],
    [
      0.6405766592774053,
      0.7678683055918257,
      0.006309426006991094
    ],
    [
      0.6345672446031212,
      0.7723969923741475,
      0.026968467664545342
    ],
    [
      0.6353618325718455,
      0.7721071602285874,
      0.012879240454801483
    ],
    [
      0.6282998254422942,
      0.7772066945667059,
      0.034483086722009317
    ],
    [
      0.6273586030259588,
      0.7772933482022378,
      0.04728883641909591
    ],
    [
      0.6192233210461201,
      0.7823464070131771,
      0.06705652918386006
    ],
    [
      0.6202834834904347,
      0.7824131399081453,
      0.055480434461606894
    ],
    [
      0.6110900787414579,
      0.7878928855764477,
      0.0761164668240554
    ],
    [
      0.6099021306044404,
      0.7877108138413627,
      0.08678170798931138
    ],
    [
      0.6014363280377354,
      0.7931262141749105,
      0.09604765330324155
    ],
    [
      0.600147393930478,
      0.7928529086170671,
      0.10586487073582079
    ],
    [
      0.5907322893584825,
      0.7985088522467555,
      0.11584030038313482
    ],
    [
      0.5894003068613881,
      0.7981596600376724,
      0.12469336534174036
    ],
    [
      0.5778677589048679,
      0.8035205397338461,
      0.14291114527598664
    ],
    [
      0.5792060333797193,
      0.8038899133341125,
      0.13520864667692092
    ],
    [
      0.5656240086748335,
      0.8090083267941478,
      0.15992188089297021
    ],
    [
      0.5667898834964885,
      0.8093315212218538,
      0.1540510198692532
    ],
    [
      0.5518030346444422,
      0.8150512484207689,
      0.17664901189910584
    ],
    [
      0.552768216801721,
      0.8153040750083844,
      0.17241393148051648
    ],
    [
      0.5370852654805619,
      0.8214613868817706,
      0.1916783959290987
    ],
    [
      0.5374932204141915,
      0.8215259300267335,
      0.1902529482097245
    ],
    [
      0.520968584644806,
      0.8281887887509632,
      0.20662783936439966
    ],
    [
      0.34710884619317256,
      0.9157814608409798,
      0.2021379847391517
    ],
    [
      0.35552638985485246,
      0.9123996563826228,
      0.202800032420233
    ],
    [
      0.37115988895553287,
      0.9021758116679928,
      0.2198161542555847
    ],
    [
      0.29386254462903244,
      0.9261728892565418,
      0.23632305023069505
    ],
    [
      0.3168609356318702,
      0.9290893157611896,
      0.19076737354406378
    ],
    [
      0.33810894314967843,
      0.9211857371643851,
      0.19261147475453236
    ],
    [
      0.09331428094546543,
      0.9870248124746839,
      0.13066929452226222
    ],
    [
      0.10073908522846156,
      0.9862982746876907,
      0.13064206847496435
    ],
    [
      0.0904063644477333,
      0.987436989739556,
      0.12959506380039273
    ],
    [
      0.07076757093892037,
      0.9879846212897504,
      0.1373984679621776
    ],
    [
      0.0387909717223052,
      0.9904145402453616,
      0.13256809187511293
    ],
    [
      0.03948944074421416,
      0.9904146022579403,
      0.1323612469870057
    ],
    [
      -0.008121984491036488,
      0.988707457311194,
      0.14963822113738504
    ],
    [
      0.012665478200761348,
      0.9932801962013845,
      0.11503928675059344
    ],
    [
      0.02242520193410348,
      0.9928663115386945,
      0.11710507132384404
    ],
    [
      -0.024361426881984984,
      0.9896485063940986,
      0.14142968101570233
    ],
    [
      -0.027440643452838087,
      0.9901703408476987,
      0.13714848592837742
    ],
    [
      -0.006018977978179568,
      0.9946603233589557,
      0.10302724416170715
    ],
    [
      0.001950434908388075,
      0.9944886421537956,
      0.10482622014919758
    ],
    [
      -0.034392334343788425,
      0.9904340586812153,
      0.13363211718236048
    ],
    [
      -0.040160481139144645,
      0.9928497181050727,
      0.11241251270810479
    ],
    [
      -0.021085264422394355,
      0.995644527520092,
      0.0908151223284467
    ],
    [
      -0.018081324161608507,
      0.9956346212221899,
      0.09156837194309597
    ],
    [
      -0.05693156057890795,
      0.9936722370256967,
      0.0968208798472606
    ],
    [
      -0.036926753388559976,
      0.9964519227639864,
      0.07563055271604904
    ],
    [
      -0.05460323155776831,
      0.9928692405297497,
      0.10596772297887166
    ],
    [
      -0.03699917611353658,
      0.9964669656220914,
      0.07539660065826152
    ],
    [
      -0.07050983713592684,
      0.9933759862134679,
      0.09073319613837641
    ],
    [
      -0.07289517595382436,
      0.9941248774425787,
      0.08001263258035386
    ],
    [
      -0.052121785611620106,
      0.9967864482340686,
      0.060828415083468534
    ],
    [
      -0.08526216839979221,
      0.9935746848323967,
      0.0744292167093591
    ],
    [
      -0.08752553688286825,
      0.9942025294138529,
      0.062454870910624065
    ],
    [
      -0.06627215240284176,
      0.9968290951019863,
      0.04404267219470017
    ],
    [
      -0.053379027875902325,
      0.9969674362987186,
      0.056626940081414674
    ],
    [
      -0.06804168218213326,
      0.9969475718126295,
      0.038286662726431615
    ],
    [
      -0.10006103235170899,
      0.993346212021467,
      0.05701835552971547
    ],
    [
      -0.10229410930581244,
      0.9937353286921474,
      0.045011239823407406
    ],
    [
      -0.07961248830290828,
      0.9964654039151101,
      0.026805792406043187
    ],
    [
      -0.11705897076055229,
      0.9927203404558427,
      0.02834648143449267
    ],
    [
      -0.09371580624658937,
      0.9955650786218616,
      0.008217170327934705
    ],
    [
      -0.08165574523882645,
      0.9964533946604681,
      0.020321701186693866
    ],
    [
      -0.11465567510826667,
      0.9926230104638979,
      0.03941618021899229
    ],
    [
      -0.12986564518282026,
      0.9912804353451876,
      0.022316198222484582
    ],
    [
      -0.13256640900578767,
      0.9911077945891691,
      0.01146676536358666
    ],
    [
      -0.10929932658247417,
      0.9939845875864701,
      -0.006949593453766838
    ],
    [
      -0.10504192744047407,
      0.9944427582917961,
      -0.007056483585661099
    ],
    [
      -0.09556715454569664,
      0.9954196433155107,
      0.002579277740067168
    ],
    [
      -0.13201821796136387,
      0.9910617746008809,
      -0.01917678417406424
    ],
    [
      -0.14626697586906767,
      0.9892357102778552,
      0.004322184769877038
    ],
    [
      -0.14867433973872685,
      0.9888833425291166,
      -0.0023823458387619524
    ],
    [
      -0.1644855233856835,
      0.9863157780487841,
      -0.011211537296875572
    ],
    [
      -0.16582385959547344,
      0.9860537347056022,
      -0.014159091142956558
    ],
    [
      -0.1495686445257445,
      0.988132201695545,
      -0.03498531902164038
    ],
    [
      -0.13420847455748938,
      0.9905841142591247,
      -0.02704067185587388
    ],
    [
      -0.157853457064763,
      0.9854382539576166,
      -0.06319599456980582
    ],
    [
      -0.18287358497924533,
      0.9828456539578291,
      -0.023909671956052606
    ],
    [
      -0.18320399203266383,
      0.9827678723745694,
      -0.024568401080608735
    ],
    [
      -0.15955674905626097,
      0.9851157666152386,
      -0.06394192831521486
    ],
    [
      -0.16288900969012898,
      0.9843461050813178,
      -0.06730465016184625
    ],
    [
      -0.20113748032582388,
      0.9789422701223874,
      -0.03486754616839896
    ],
    [
      -0.21241936872451953,
      0.9754452126348218,
      -0.05817773576278152
    ],
    [
      -0.21269787050772976,
      0.9752009537953344,
      -0.061177737765847576
    ],
    [
      -0.21298727573685394,
      0.975116701153387,
      -0.06151292145500373
    ],
    [
      -0.27703846345424904,
      0.9591140919370795,
      -0.05787787500090342
    ],
    [
      -0.2783304531354206,
      0.957085814173547,
      -0.0807397248273122
    ],
    [
      -0.2602562843183605,
      0.959382617222776,
      -0.10886533076961248
    ],
    [
      -0.24323384605330534,
      0.9640175919874283,
      -0.10727244973839786
    ],
    [
      -0.22442777345642456,
      0.969769075278146,
      -0.09581291737318828
    ],
    [
      -0.21343300920065963,
      0.9742320497593177,
      -0.07292642734502595
    ],
    [
      -0.3138446865285139,
      0.9440729179928056,
      -0.10113277535185175
    ],
    [
      -0.28899986313857834,
      0.945802392310176,
      -0.14811115355107746
    ],
    [
      -0.2742606432459342,
      0.9516638969682945,
      -0.1382639749661706
    ],
    [
      -0.26238499074902455,
      0.9575641212373038,
      -0.11926889933534328
    ],
    [
      -0.3360699714125403,
      0.9350564010611678,
      -0.11281179525790114
    ],
    [
      -0.34507224944196174,
      0.9301763058104742,
      -0.12528839840082537
    ],
    [
      -0.30583179091962764,
      0.9380141984200088,
      -0.1630836571375608
    ],
    [
      -0.29317437941936914,
      0.9435273477544521,
      -0.15428845482250805
    ],
    [
      -0.3160190333734505,
      0.9433336295887644,
      -0.10126022828632046
    ],
    [
      -0.3683824615759803,
      0.9192972403891384,
      -0.13851695136746273
    ],
    [
      -0.3747872557855789,
      0.9138957720468278,
      -0.15597766101479854
    ],
    [
      -0.3136151232490185,
      0.9316874603485028,
      -0.18331402210103864
    ],
    [
      -0.309747346116757,
      0.9340923943002212,
      -0.1775612020800325
    ],
    [
      -0.3538646821566791,
      0.9266241305752345,
      -0.1270728427235456
    ],
    [
      -0.364291847999412,
      0.9216715542774689,
      -0.1334653345139776
    ],
    [
      -0.3863878393485249,
      0.9063959607446026,
      -0.1707360534551721
    ],
    [
      -0.3848659925854541,
      0.9049726140813518,
      -0.18139111200380756
    ],
    [
      -0.3742439244132911,
      0.9042210866806009,
      -0.20573213517069266
    ],
    [
      -0.36197031363590026,
      0.9056636340893531,
      -0.22079600072101457
    ],
    [
      -0.3446230423409407,
      0.9121540356881055,
      -0.22183321181819593
    ],
    [
      -0.31781139980593276,
      0.9269813481264337,
      -0.19925233845326154
    ],
    [
      0.6574473526064266,
      0.28546357218677537,
      -0.6973331538835412
    ],
    [
      0.6177326483881705,
      0.34450263705103235,
      -0.7069118107516817
    ],
    [
      0.6106378716725863,
      0.3444052192716812,
      -0.7130963711992926
    ],
    [
      0.597011331610381,
      0.32288640577797645,
      -0.7343853476837481
    ],
    [
      0.5978170390420335,
      0.2696735515159474,
      -0.7549112288499831
    ],
    [
      0.6277052306563219,
      0.36006638637782445,
      -0.690172689120273
    ],
    [
      0.6364185013967002,
      0.37602679192286376,
      -0.6734800240810247
    ],
    [
      0.6274562854436074,
      0.3628274805570058,
      -0.6889519788852962
    ],
    [
      0.6410696712648595,
      0.39408154470621176,
      -0.6585813637708943
    ],
    [
      0.6351582007373736,
      0.3864002165332285,
      -0.6687816779032874
    ],
    [
      0.6431722626620154,
      0.4162641769526396,
      -0.642692442407848
    ],
    [
      0.6387287124730522,
      0.41082797502366863,
      -0.6505735982965101
    ],
    [
      0.6449757340707999,
      0.43693996426989534,
      -0.6269687153946801
    ],
    [
      0.6408700966095573,
      0.4316020411716599,
      -0.634826903437554
    ],
    [
      0.6459886263680971,
      0.45633197975655443,
      -0.6119312206894846
    ],
    [
      0.6425762140143307,
      0.45188143816188797,
      -0.6187883119676331
    ],
    [
      0.6459507020463479,
      0.47656865747867794,
      -0.596347218686229
    ],
    [
      0.6431252637615891,
      0.47301697409862203,
      -0.6021999977799485
    ],
    [
      0.6453068651791166,
      0.4960166436698705,
      -0.5809875549055918
    ],
    [
      0.6429028926746093,
      0.4930997742100751,
      -0.5861130294274243
    ],
    [
      0.6411216878712422,
      0.5170559045028106,
      -0.5671121343790043
    ],
    [
      0.6311344532313131,
      0.5417815399634724,
      -0.5551054538546886
    ],
    [
      0.6256154688280117,
      0.5412426474228077,
      -0.5618377717578781
    ],
    [
      0.6255405724738917,
      0.5409447117729947,
      -0.5622079784153435
    ],
    [
      0.6259210352495139,
      0.5383171884990475,
      -0.5643026335209306
    ],
    [
      0.6424459517474661,
      0.5527205026291303,
      -0.5308137574109154
    ],
    [
      0.6405937190454241,
      0.5704307716035053,
      -0.5140509915634653
    ],
    [
      0.6385690792712962,
      0.5687054771331723,
      -0.5184627385621263
    ],
    [
      0.6374778821146068,
      0.5884694385552373,
      -0.4973184791470747
    ],
    [
      0.636186190297792,
      0.5873613400453565,
      -0.5002737125759306
    ],
    [
      0.6337044937096913,
      0.6058853731201865,
      -0.48095896840703184
    ],
    [
      0.6328144789260978,
      0.6050646099352639,
      -0.483159034961966
    ],
    [
      0.6289771813186071,
      0.6233114369174493,
      -0.4646187232434836
    ],
    [
      0.6285602470133436,
      0.6228614625494838,
      -0.4657849443093264
    ],
    [
      0.6239163914159799,
      0.640073510262851,
      -0.44836841769046776
    ],
    [
      0.6235717785857683,
      0.6396549870930263,
      -0.4494438056513873
    ],
    [
      0.6187949285129406,
      0.6563057697066814,
      -0.4316892089181583
    ],
    [
      0.6183290847182761,
      0.6557535013548951,
      -0.43319336150529186
    ],
    [
      0.6133034920569553,
      0.6725160306959543,
      -0.4142233879052487
    ],
    [
      0.6128368155953179,
      0.6719700377117523,
      -0.41579719319477904
    ],
    [
      0.607344557497604,
      0.6879174279709453,
      -0.3973690989141943
    ],
    [
      0.6071258925795247,
      0.6876342842344706,
      -0.39819246816691894
    ],
    [
      0.6015841974775679,
      0.7030741123714771,
      -0.3791876130075062
    ],
    [
      0.6010179778187589,
      0.7023674422096386,
      -0.3813887340529867
    ],
    [
      0.5963980193651365,
      0.7174381585406371,
      -0.3599887375559991
    ],
    [
      0.5954023626360356,
      0.7162840891137632,
      -0.3639136302062527
    ],
    [
      0.5919821630398261,
      0.7307844954165758,
      -0.33986929826247847
    ],
    [
      0.5905082370494745,
      0.7292411835342723,
      -0.34569830519436373
    ],
    [
      0.586290269427097,
      0.7414849986947888,
      -0.32628778200492103
    ],
    [
      0.5877879221700599,
      0.7429788670662973,
      -0.3201370981999504
    ],
    [
      0.5840233167524873,
      0.754834347586448,
      -0.298566363130821
    ],
    [
      0.582022140762076,
      0.7531069763492872,
      -0.3067248112506783
    ],
    [
      0.5788889260456169,
      0.7633638662714838,
      -0.28664127227739616
    ],
    [
      0.5812409282340115,
      0.7652731510175446,
      -0.27661523399361576
    ],
    [
      0.5799409563913888,
      0.7738530725950211,
      -0.25459754345846775
    ],
    [
      0.5770653481715554,
      0.7718863900586073,
      -0.26680889187194107
    ],
    [
      0.579147976204471,
      0.7816632405423946,
      -0.23149557240480478
    ],
    [
      0.5758087701616886,
      0.7798821806491573,
      -0.24541402671974338
    ],
    [
      0.578717915731552,
      0.7885366055684961,
      -0.20807593731578433
    ],
    [
      0.5753253186329488,
      0.7868847875630572,
      -0.22318850517385166
    ],
    [
      0.5688544915833998,
      0.8012174052556088,
      -0.18562121894024217
    ],
    [
      0.576398653517488,
      0.8008204157704367,
      -0.16263841461503406
    ],
    [
      0.5667928160745029,
      0.8030861268579839,
      -0.18384389164336393
    ],
    [
      0.5760469058769805,
      0.8053063146504524,
      -0.14018452772565004
    ],
    [
      0.5752616528635882,
      0.8091234169595914,
      -0.11997219207919721
    ],
    [
      0.5758662455855192,
      0.8054983108957425,
      -0.13982323962540744
    ],
    [
      0.5737730991400081,
      0.8133008036761163,
      -0.09657242589400925
    ],
    [
      0.5732221875944573,
      0.8134943205856648,
      -0.09820037690504228
    ],
    [
      0.5740964431670627,
      0.8102955981751302,
      -0.11761937561871162
    ],
    [
      0.5724851950763208,
      0.8165379143592365,
      -0.07434067414474474
    ],
    [
      0.5708535539113925,
      0.8192199090501515,
      -0.05481752094535356
    ],
    [
      0.5721869024188889,
      0.8168015479139136,
      -0.07373859251241074
    ],
    [
      0.5677312680033132,
      0.8225269000847888,
      -0.03362597163291959
    ],
    [
      0.5691963256437162,
      0.8205803184242598,
      -0.05160895163082687
    ],
    [
      0.563924562428071,
      0.8257400119340476,
      -0.011938198418005815
    ],
    [
      0.5655193159132973,
      0.8242043708950215,
      -0.029581384796830885
    ],
    [
      0.5587737623485005,
      0.8292788396149732,
      0.008275788647921873
    ],
    [
      0.5602086886178314,
      0.8283327586138852,
      -0.005573706504704087
    ],
    [
      0.5516278457782515,
      0.833646495563802,
      0.027207355553920374
    ],
    [
      0.5527517314741103,
      0.833148453601776,
      0.018143252556871756
    ],
    [
      0.5425407230596042,
      0.8388432923203762,
      0.044626166663448645
    ],
    [
      0.5431281125158821,
      0.8386609834634462,
      0.0407382892505396
    ],
    [
      0.5319904984363494,
      0.84454951260396,
      0.06101008387027551
    ],
    [
      0.5204513705898957,
      0.8503246748297522,
      0.07796356986936473
    ],
    [
      0.5313986644579427,
      0.8448966569600473,
      0.06136039822272111
    ],
    [
      0.49230229282225163,
      0.8628096851286212,
      0.11488211231607671
    ],
    [
      0.5161585180196109,
      0.8527130969681934,
      0.08037884382542074
    ],
    [
      0.3461272529016377,
      0.9346016014854407,
      0.08194980963745523
    ],
    [
      0.3647711658688222,
      0.926074518496657,
      0.09658148239639416
    ],
    [
      0.32551920918465843,
      0.9442729361193138,
      0.04884533308725289
    ],
    [
      0.33634593199421414,
      0.94039096164653,
      0.050361227987986514
    ],
    [
      0.09195114315581224,
      0.9957313914131896,
      0.007998964101231062
    ],
    [
      0.15030268284793652,
      0.9886385067206296,
      0.0017339428814832332
    ],
    [
      0.07203871078752144,
      0.9967478564408856,
      -0.03611280698826293
    ],
    [
      0.08414859880951231,
      0.9961162374959763,
      -0.025912443251369304
    ],
    [
      0.060113338167536744,
      0.9967754854770208,
      -0.05315089958227405
    ],
    [
      0.07079487102648277,
      0.996514980715703,
      -0.04411325702695165
    ],
    [
      0.05054073479889176,
      0.9960991472000151,
      -0.07233341602185328
    ],
    [
      0.058606845011047154,
      0.9961379208877551,
      -0.06537950968974732
    ],
    [
      0.0420662659263611,
      0.9947570445138172,
      -0.09321401000465693
    ],
    [
      0.04885927344897821,
      0.9949945013387848,
      -0.08717060114293673
    ],
    [
      0.03361213629725561,
      0.9929023668046583,
      -0.11408380379020809
    ],
    [
      0.04019254927973953,
      0.9933311637488187,
      -0.10806367617202921
    ],
    [
      0.02287747415519496,
      0.9906438280045873,
      -0.13454154456039275
    ],
    [
      0.03186132461878603,
      0.9914193915370552,
      -0.12677715124513442
    ],
    [
      0.009298626936769043,
      0.9877541697800608,
      -0.15574092467682848
    ],
    [
      0.021462842187707304,
      0.9890600575366907,
      -0.14594365005283222
    ],
    [
      -0.00031184892878776435,
      0.9851441045816383,
      -0.17172942659395274
    ],
    [
      0.007840386445724754,
      0.9862916037942626,
      -0.1648253640230262
    ],
    [
      -0.008620103464075017,
      0.9812494289464109,
      -0.19254934954086744
    ],
    [
      -0.0023041841367862324,
      0.9823239684423049,
      -0.18717454890883362
    ],
    [
      -0.01566385387745382,
      0.9768845650735568,
      -0.21319284744745395
    ],
    [
      -0.010803209073495789,
      0.9778795393534936,
      -0.20888967707264408
    ],
    [
      -0.02433280316041507,
      0.9719630659825034,
      -0.23387114626701636
    ],
    [
      -0.01778898302713761,
      0.9733871787608088,
      -0.22847527723351946
    ],
    [
      -0.02679143235349372,
      0.9666119714255208,
      -0.2548401770704855
    ],
    [
      -0.03840610067768808,
      0.9514765152754767,
      -0.30531526707646117
    ],
    [
      -0.01054261375308863,
      0.9593344915276514,
      -0.28207478912628114
    ],
    [
      0.07505174687848709,
      0.9923469101607514,
      0.09805531696393216
    ],
    [
      0.05893819223064279,
      0.9933384216201873,
      0.09902055155218507
    ],
    [
      0.04133314006730916,
      0.9952885196675152,
      0.08770595276389409
    ],
    [
      0.03935348529855775,
      0.9953589763797569,
      0.08781691941248464
    ],
    [
      0.02138896841194603,
      0.9968618054512947,
      0.07621714283977087
    ],
    [
      0.006139409949987317,
      0.9981117676107532,
      0.06111633989698492
    ],
    [
      0.015607100073149164,
      0.997975746745562,
      0.06165085023699775
    ],
    [
      -0.011029115930681633,
      0.9987078403836294,
      0.04960854924359855
    ],
    [
      -0.024497247356170336,
      0.9991216026834765,
      0.033998645902038604
    ],
    [
      -0.01440523173899839,
      0.9990563072525672,
      0.04097541015548193
    ],
    [
      -0.037195247851528515,
      0.9991759462553513,
      0.01624629071470581
    ],
    [
      -0.029106126547719952,
      0.9993344670400524,
      0.021987641600740973
    ],
    [
      -0.04930272164614347,
      0.99877985152624,
      -0.002837221088463473
    ],
    [
      -0.04263397240123504,
      0.9990885244134257,
      0.0021130032405263116
    ],
    [
      -0.05507882611818342,
      0.9983303938639109,
      -0.01739964370242753
    ],
    [
      -0.06109632832767875,
      0.9978871317992571,
      -0.022102281654351696
    ],
    [
      -0.10205723800788662,
      0.9945678918512866,
      -0.020470189757033356
    ],
    [
      -0.07312328137624864,
      0.9964737648753722,
      -0.0411463441373749
    ],
    [
      -0.06680385726128917,
      0.9971150197861567,
      -0.036040005159070576
    ],
    [
      -0.11132870206618846,
      0.9929595734678502,
      -0.040462396800025564
    ],
    [
      -0.08653312644991351,
      0.9943572189059667,
      -0.06136561933521526
    ],
    [
      -0.07895202543743715,
      0.9953571922858434,
      -0.055051225637301034
    ],
    [
      -0.12686402717825657,
      0.9903689600272216,
      -0.05545125447376281
    ],
    [
      -0.1010408385611383,
      0.9915765366591149,
      -0.08103530644093881
    ],
    [
      -0.09158835614162293,
      0.9931248921563331,
      -0.07290076541948563
    ],
    [
      -0.12048840896683416,
      0.9917810217252074,
      -0.043045885405515474
    ],
    [
      -0.15348084907100393,
      0.986094956144125,
      -0.06372100466533556
    ],
    [
      -0.11351135413792311,
      0.9888246499399217,
      -0.09664876695005639
    ],
    [
      -0.10471460259324854,
      0.9905182339061718,
      -0.08892963680987605
    ],
    [
      -0.16440991502790864,
      0.9827149200013843,
      -0.08509268974000621
    ],
    [
      -0.12626687099312703,
      0.9855177460388131,
      -0.11318767394103593
    ],
    [
      -0.1177981430983278,
      0.9873911668248048,
      -0.1057463056514816
    ],
    [
      -0.1765228620181023,
      0.9787959661647606,
      -0.103914078952425
    ],
    [
      -0.13844579719903383,
      0.981572769886795,
      -0.13171051079807197
    ],
    [
      -0.13239990709892444,
      0.9831132676282862,
      -0.1263272243557576
    ],
    [
      -0.1911963966187077,
      0.9740917845938383,
      -0.12078548384144953
    ],
    [
      -0.14983527850415232,
      0.9771616848858456,
      -0.15067989549584404
    ],
    [
      -0.14552432010212205,
      0.978412929393306,
      -0.14673381292266796
    ],
    [
      -0.18192425148904795,
      0.9775048307656985,
      -0.10671397541968268
    ],
    [
      -0.15844925858804787,
      0.9728443005831774,
      -0.16872403289314308
    ],
    [
      -0.19447719489402424,
      0.9732132387002794,
      -0.12261571141034318
    ],
    [
      -0.20487214202683518,
      0.9689646547572149,
      -0.1383289675106682
    ],
    [
      -0.16009340931921676,
      0.9722989553196397,
      -0.1703080790123797
    ],
    [
      -0.20876112890710308,
      0.9678097591450044,
      -0.1405811550710848
    ],
    [
      -0.21955558765797573,
      0.9629240878557564,
      -0.15675632349388788
    ],
    [
      -0.16982776173818148,
      0.9673757349091342,
      -0.1879965926606434
    ],
    [
      -0.1675321403005833,
      0.9682114311684292,
      -0.18574069699742105
    ],
    [
      -0.17628994815190266,
      0.9635266097458113,
      -0.20134131839327607
    ],
    [
      -0.22188490698473237,
      0.9621539769976803,
      -0.15819864917224707
    ],
    [
      -0.23288852751249103,
      0.9567125995998591,
      -0.17453920911916512
    ],
    [
      -0.18148360587342505,
      0.9614933663097152,
      -0.20638364116758687
    ],
    [
      -0.2347445713407985,
      0.9560364582678359,
      -0.17575345427250433
    ],
    [
      -0.2452930700592717,
      0.9503856046756753,
      -0.19130737624605143
    ],
    [
      -0.24660997681148655,
      0.9488566488732945,
      -0.1971156493685362
    ],
    [
      -0.18884953102520885,
      0.9566515021815211,
      -0.22170646811809033
    ],
    [
      -0.19745785982736486,
      0.95004550299423,
      -0.2417104379890061
    ],
    [
      -0.1891118345934785,
      0.9559733220810139,
      -0.224391892647838
    ],
    [
      -0.25185345991665403,
      0.9458093684092339,
      -0.20497432365380902
    ],
    [
      -0.25473307872593093,
      0.9421709799495186,
      -0.2177725950246552
    ],
    [
      -0.26759767529882333,
      0.9327170894754128,
      -0.2417236338779894
    ],
    [
      -0.20268993751831887,
      0.9445382103742673,
      -0.2583879996667731
    ],
    [
      -0.19805425796188347,
      0.9481017871363397,
      -0.2487519088008102
    ],
    [
      -0.2679147547714037,
      0.9336756895638929,
      -0.23763709915155865
    ],
    [
      -0.26799448343385934,
      0.9329787522413376,
      -0.2402698581079526
    ],
    [
      -0.2682155008346773,
      0.9262315877847453,
      -0.26486881828888953
    ],
    [
      -0.2667943686548924,
      0.9253614378634156,
      -0.2693083254735908
    ],
    [
      -0.20595598860286848,
      0.9388188801582794,
      -0.276045722692762
    ],
    [
      -0.2036483726616338,
      0.9406956728756889,
      -0.27132819858102336
    ],
    [
      -0.2606871587476579,
      0.9156382835813136,
      -0.30602081449525514
    ],
    [
      -0.2565072366988199,
      0.915319311413607,
      -0.3104747907229441
    ],
    [
      -0.22445833369680182,
      0.9204059104946751,
      -0.3201115686140118
    ],
    [
      -0.20838781302364348,
      0.9253164498789965,
      -0.3168027571953147
    ],
    [
      -0.26719407384345506,
      0.9197524953786012,
      -0.28751117221383676
    ],
    [
      0.9120243742560207,
      -0.3408251423268176,
      0.22814417178796945
    ],
    [
      0.9054953435616422,
      -0.3472470750161451,
      0.24392140472069096
    ],
    [
      0.9191678603850013,
      -0.33574541910220357,
      0.20592585555763632
    ],
    [
      0.912689664066808,
      -0.34261781586128637,
      0.22273439195611183
    ],
    [
      0.9257727408018056,
      -0.33003021299272733,
      0.18445837172730292
    ],
    [
      0.9196942881627899,
      -0.33697154132538015,
      0.20152567245275935
    ],
    [
      0.9321095209937762,
      -0.3239150362288338,
      0.16202126458470342
    ],
    [
      0.9263008307513038,
      -0.331084994340054,
      0.17985966049198202
    ],
    [
      0.9386445088372484,
      -0.31528623153583923,
      0.13978940672887186
    ],
    [
      0.9383303322600282,
      -0.3159835320862703,
      0.14032318059062865
    ],
    [
      0.932293609294984,
      -0.32417035035189296,
      0.16044379084421667
    ],
    [
      0.9459419786036309,
      -0.3007849473461828,
      0.1213350261276682
    ],
    [
      0.9435882313541023,
      -0.3078418040646814,
      0.12196176991270427
    ],
    [
      0.9530691058353851,
      -0.2831603977340712,
      0.10714228230358999
    ],
    [
      0.9587540452155165,
      -0.2699432188505376,
      0.08900190660594816
    ],
    [
      0.9543048114780289,
      -0.2820170783038241,
      0.09883670540269078
    ],
    [
      0.9643317279544157,
      -0.25495847926447074,
      0.07113713735876216
    ],
    [
      0.9596520775937939,
      -0.2688351761223154,
      0.08243505352214263
    ],
    [
      0.969517516676112,
      -0.23901918439073702,
      0.05390375080986204
    ],
    [
      0.9649514684513626,
      -0.2539227419737938,
      0.06627144665743284
    ],
    [
      0.9772629962552608,
      -0.2085574568759451,
      0.03822071861737293
    ],
    [
      0.9710690546457272,
      -0.23528727390703663,
      0.04080183631711615
    ],
    [
      0.978389853060455,
      -0.20486542880949316,
      0.027990203769242
    ],
    [
      0.9825302885620137,
      -0.18560938348986278,
      0.013542112787859979
    ],
    [
      0.9821839321000598,
      -0.1874187080601788,
      0.013745959170552512
    ],
    [
      0.9858022228552897,
      -0.16791032496619035,
      -0.00031651748453084724
    ],
    [
      0.9856753410150789,
      -0.1686537115021289,
      -0.00021842931217104264
    ],
    [
      0.9885759947717092,
      -0.15006061818943456,
      -0.014117840831033302
    ],
    [
      0.9884417492763948,
      -0.1509549824375231,
      -0.013982187407821978
    ],
    [
      0.9906918259683603,
      -0.13331390465443196,
      -0.02751560984723406
    ],
    [
      0.9922819869384181,
      -0.11676999770367376,
      -0.04172800059707238
    ],
    [
      0.9907331131078823,
      -0.13268699195692174,
      -0.029018283150248673
    ],
    [
      0.9933434827553843,
      -0.10013659047248173,
      -0.05693319344591506
    ],
    [
      0.9923038511183102,
      -0.11549064402651649,
      -0.04466517880979455
    ],
    [
      0.9938616765634629,
      -0.0847554286935463,
      -0.07110193503299161
    ],
    [
      0.9933057967297215,
      -0.09877443414468895,
      -0.05989328295000692
    ],
    [
      0.9937664750601714,
      -0.07097917062041925,
      -0.08596598388036594
    ],
    [
      0.993646813871389,
      -0.08191419275567062,
      -0.07717560695209362
    ],
    [
      0.9931038052764961,
      -0.05883629724887923,
      -0.10140572997313765
    ],
    [
      0.9932316049974784,
      -0.0666906186547595,
      -0.09509647847096345
    ],
    [
      0.991723867466163,
      -0.04883405855144933,
      -0.11873923287334333
    ],
    [
      0.99186577306227,
      -0.052008240911843695,
      -0.11617844509564211
    ],
    [
      0.9897195403477691,
      -0.04028805583251116,
      -0.1372301133535831
    ],
    [
      0.9871857635497264,
      -0.03275406677121598,
      -0.15617758915635185
    ],
    [
      0.9893527664010014,
      -0.04037219690602377,
      -0.13982556751777117
    ],
    [
      0.9840157484164088,
      -0.028141789897613727,
      -0.17584381288476805
    ],
    [
      0.9857403291476923,
      -0.03317661174948192,
      -0.1649706517069727
    ],
    [
      0.9800158024937164,
      -0.02429205279224409,
      -0.1974308056857788
    ],
    [
      0.9817735103922496,
      -0.028768022885503647,
      -0.1878647789005127
    ],
    [
      0.9754975990571453,
      -0.020649274575706186,
      -0.21903890451981825
    ],
    [
      0.9773871525416362,
      -0.024983046865282077,
      -0.20997666874174245
    ],
    [
      0.9701678137364594,
      -0.01617991241899872,
      -0.24189382717203076
    ],
    [
      0.9726155056142696,
      -0.021418096597066803,
      -0.23143107694701984
    ],
    [
      0.9646709278195493,
      -0.01252198034944445,
      -0.26316002931276977
    ],
    [
      0.9669777045139465,
      -0.017064065585335474,
      -0.25428908084823115
    ],
    [
      0.9584802328894171,
      -0.009726582947099924,
      -0.28499304683522
    ],
    [
      0.9606414589098515,
      -0.01368787249386788,
      -0.27745383322301326
    ],
    [
      0.9538819595409819,
      -0.01105662134813458,
      -0.2999782631902193
    ],
    [
      0.9512554463299862,
      -0.006505378468229363,
      -0.3083354599758584
    ],
    [
      0.9434867485092446,
      -0.008513777415869485,
      -0.331300876819797
    ],
    [
      0.9357165134240113,
      -0.0014358515063604207,
      -0.3527499749625276
    ],
    [
      0.942192901313479,
      -0.010786019084345087,
      -0.334897295460565
    ],
    [
      0.9273078275305514,
      0.0010513892979543695,
      -0.3742981266064702
    ],
    [
      0.9300102363722034,
      -0.002514450429559605,
      -0.36752501653895026
    ],
    [
      0.9179534293522346,
      0.0041002742706743815,
      -0.39666697529713424
    ],
    [
      0.9212044930753855,
      -0.00004014564411119944,
      -0.38907875851304097
    ],
    [
      0.9078153436955859,
      0.007948811696114387,
      -0.41929478668770126
    ],
    [
      0.9117885279190276,
      0.0029969066994996307,
      -0.41064911896348566
    ],
    [
      0.8974859761308472,
      0.01105475828040573,
      -0.4409044283830932
    ],
    [
      0.9011221757687513,
      0.006720457463087285,
      -0.4335131598801572
    ],
    [
      0.8862418115015908,
      0.014751903979960453,
      -0.46298794031307655
    ],
    [
      0.8904675851653241,
      0.009757317730233656,
      -0.45494205622314954
    ],
    [
      0.8742209180455971,
      0.017838873581824007,
      -0.48520053693379706
    ],
    [
      0.8783014692680303,
      0.01313571749144846,
      -0.47792675381025085
    ],
    [
      0.8611922968105458,
      0.021478524926147897,
      -0.5078252660917667
    ],
    [
      0.8659025953213877,
      0.016146820602190866,
      -0.49995197329356117
    ],
    [
      0.8474097338456603,
      0.02583059365846803,
      -0.5303107800289171
    ],
    [
      0.8528318197410445,
      0.01985462622640306,
      -0.5218080883376457
    ],
    [
      0.8335960452399458,
      0.029829622158760845,
      -0.5515685152383046
    ],
    [
      0.8388032874328704,
      0.024335776465570665,
      -0.5438904439090902
    ],
    [
      0.8179451367175743,
      0.033863997216535976,
      -0.574298687977421
    ],
    [
      0.8235853054169291,
      0.02817271989514478,
      -0.5664923146477922
    ],
    [
      0.8028665242393914,
      0.037681963367016666,
      -0.5949667334335302
    ],
    [
      0.8081000188794822,
      0.03265634539992759,
      -0.5881393734414497
    ],
    [
      0.7865974846848008,
      0.03985859582005555,
      -0.6161782935375101
    ],
    [
      0.7905182742329816,
      0.036310967775499,
      -0.6113610812955917
    ],
    [
      0.7692005541809603,
      0.03816006338732829,
      -0.6378670057386402
    ],
    [
      0.7510499065710052,
      0.045496211114757774,
      -0.6586760452710313
    ],
    [
      0.764311738207889,
      0.03307049987853744,
      -0.6439983764540241
    ],
    [
      0.7306472421770799,
      0.052282222043397414,
      -0.680750451161975
    ],
    [
      0.7388396636655098,
      0.04367829120893002,
      -0.6724642431175833
    ],
    [
      0.7090081602654925,
      0.044628387054953936,
      -0.703786711828104
    ],
    [
      0.6992257558755637,
      0.02786994475736747,
      -0.7143574794873137
    ],
    [
      0.6767352415725152,
      0.09050908073127782,
      -0.730641854206949
    ],
    [
      0.6582229066429703,
      0.062375897369331364,
      -0.7502345317284791
    ],
    [
      0.6661203304733616,
      0.039059165837383274,
      -0.744820842145376
    ],
    [
      0.6735586610670028,
      0.033673453515483225,
      -0.7383663241440301
    ],
    [
      0.8480293891068931,
      -0.3757525554939931,
      0.37370599707620883
    ],
    [
      0.8405490760990642,
      -0.37632730907789064,
      0.38968577997048265
    ],
    [
      0.8374080817343004,
      -0.3680714339639861,
      0.404068217193303
    ],
    [
      0.8564793019669914,
      -0.3785893476348991,
      0.3508750648870858
    ],
    [
      0.849284881153739,
      -0.3792522956661127,
      0.36726405606275014
    ],
    [
      0.8644560964586732,
      -0.3809462760318384,
      0.3280176703668685
    ],
    [
      0.8575576292637183,
      -0.38168303644790796,
      0.344837602618241
    ],
    [
      0.8720894629485055,
      -0.3825360521902427,
      0.3051657539582236
    ],
    [
      0.8652976364086514,
      -0.38339693755502857,
      0.32290368331598
    ],
    [
      0.8797471647330156,
      -0.3832913423598805,
      0.2813053021472955
    ],
    [
      0.8727036746721526,
      -0.3843728136901379,
      0.30107446970749313
    ],
    [
      0.8866989946899171,
      -0.38309328550994737,
      0.2588521342641093
    ],
    [
      0.8801080970241084,
      -0.38435422649773276,
      0.2787141297565158
    ],
    [
      0.8939046728857781,
      -0.38201660614242805,
      0.2345159875667138
    ],
    [
      0.8933970546168255,
      -0.38258085185883856,
      0.23552833076499802
    ],
    [
      0.8870179396174735,
      -0.3840270708228496,
      0.2563637721519835
    ],
    [
      0.9009221053975954,
      -0.3787446387619081,
      0.21187698934777152
    ],
    [
      0.8994372281937144,
      -0.3804828543088692,
      0.21504759965222559
    ],
    [
      0.9073152462939944,
      -0.3751550416566191,
      0.18983608340378455
    ],
    [
      0.9057510968529732,
      -0.3770926084272741,
      0.1934324564780958
    ],
    [
      0.9129903468676869,
      -0.3715167990725487,
      0.16859387454266664
    ],
    [
      0.9115761648743675,
      -0.3733816670632247,
      0.1720901691963465
    ],
    [
      0.9191799789529302,
      -0.3663493741813304,
      0.14455553371987673
    ],
    [
      0.9169288816725709,
      -0.36955966519839084,
      0.1505559026180697
    ],
    [
      0.9243042223590202,
      -0.36155118382543294,
      0.12223929811527462
    ],
    [
      0.9225331932565207,
      -0.3642631958172527,
      0.12745521375341512
    ],
    [
      0.9435453132648185,
      -0.3081877338292034,
      0.12141895458788815
    ],
    [
      0.9329538790676918,
      -0.34479252107253044,
      0.10351413886515835
    ],
    [
      0.9244681862766755,
      -0.3614324378339214,
      0.12134729269226711
    ],
    [
      0.9456221677913583,
      -0.3106590855645118,
      0.09638282179825212
    ],
    [
      0.9388265998000999,
      -0.3343462237733968,
      0.08256644691551736
    ],
    [
      0.935733195778478,
      -0.34114097792697534,
      0.08958917064703394
    ],
    [
      0.9444307173832729,
      -0.3227615157248019,
      0.06225451011729999
    ],
    [
      0.940891913213674,
      -0.33122134677265674,
      0.07081544387504346
    ],
    [
      0.9504175341737537,
      -0.2988697269139017,
      0.08592669590698572
    ],
    [
      0.9510002273377008,
      -0.2990751337007335,
      0.07843871496607736
    ],
    [
      0.9571222229865242,
      -0.28572415576431287,
      0.047736328703671824
    ],
    [
      0.952556888404907,
      -0.30229734412774606,
      0.03537923240648977
    ],
    [
      0.9476003222483882,
      -0.316840226115415,
      0.04081544303181794
    ],
    [
      0.95575977965573,
      -0.28642641997748663,
      0.0669563255511445
    ],
    [
      0.9659783312806516,
      -0.25705990064077955,
      0.028391389166443442
    ],
    [
      0.9580667317214883,
      -0.2865065987010454,
      0.004701751722920572
    ],
    [
      0.9550903733950815,
      -0.2959671440467805,
      0.014346717144911536
    ],
    [
      0.9599398133024708,
      -0.2763049976234294,
      0.04659509765130075
    ],
    [
      0.9686719999629054,
      -0.24687783908173275,
      0.02694232837375212
    ],
    [
      0.969840978888688,
      -0.2434276555657838,
      0.01230659067238142
    ],
    [
      0.9647753220413946,
      -0.2630140406657496,
      -0.005673834029892048
    ],
    [
      0.9594880377373841,
      -0.28172986100255315,
      -0.0033152463477386165
    ],
    [
      0.9585388409079364,
      -0.2849619034686096,
      -0.00006358000110413706
    ],
    [
      0.9687029019416871,
      -0.2472371762237542,
      -0.02210127739879555
    ],
    [
      0.9673794495338338,
      -0.25240809969052047,
      -0.02161369543222343
    ],
    [
      0.9736414619145287,
      -0.22807222972421612,
      -0.002315527923337837
    ],
    [
      0.9771964120386332,
      -0.21170231510555268,
      -0.01641042588633618
    ],
    [
      0.9720395105205049,
      -0.2316324786476656,
      -0.03854328505194989
    ],
    [
      0.9708757563574824,
      -0.23655712682336835,
      -0.03796039339047306
    ],
    [
      0.9740435674292125,
      -0.22634476790216237,
      -0.0026785804243152685
    ],
    [
      0.9748339042247974,
      -0.21611995010881957,
      -0.05469027645569028
    ],
    [
      0.9738218130995601,
      -0.2208172581283019,
      -0.05395196793616015
    ],
    [
      0.9776491601928949,
      -0.20956065438869706,
      -0.01692488423322858
    ],
    [
      0.980406734803407,
      -0.1945593698468474,
      -0.030810484529126367
    ],
    [
      0.9805475256893303,
      -0.19381729429046668,
      -0.03100655250838
    ],
    [
      0.9830714505838282,
      -0.1773112256078508,
      -0.04616548841342047
    ],
    [
      0.9830757548136406,
      -0.17723784025321604,
      -0.0463552400486322
    ],
    [
      0.976879417397147,
      -0.2015651703780198,
      -0.0712606901193826
    ],
    [
      0.9763111586832224,
      -0.20452554430170716,
      -0.0706103615534873
    ],
    [
      0.9849735794578502,
      -0.1617753419040203,
      -0.06046310049796764
    ],
    [
      0.9849760332108765,
      -0.1614877879286088,
      -0.061187485240783386
    ],
    [
      0.9785271162486864,
      -0.18617340916589856,
      -0.08845419427916729
    ],
    [
      0.978005219990963,
      -0.18928125444877794,
      -0.08762645938713422
    ],
    [
      0.9792119052608621,
      -0.17438002929972807,
      -0.10361298170026055
    ],
    [
      0.9864291811291942,
      -0.14589169837768784,
      -0.07531987095887221
    ],
    [
      0.9863575256465362,
      -0.1445204838214645,
      -0.07882043742870444
    ],
    [
      0.9795524858777086,
      -0.17203405341226144,
      -0.10431304749334394
    ],
    [
      0.9872276690706226,
      -0.13033852154165387,
      -0.09161549663523534
    ],
    [
      0.9871197820975249,
      -0.1292761700118139,
      -0.09424546492437517
    ],
    [
      0.9798670467697951,
      -0.15754910591738544,
      -0.12263298854416207
    ],
    [
      0.9875723551538633,
      -0.11555069568673795,
      -0.10653112250494039
    ],
    [
      0.9871424288476855,
      -0.112959251040606,
      -0.1130930270752246
    ],
    [
      0.97970447765063,
      -0.14462389776164444,
      -0.13879144306309246
    ],
    [
      0.9798592102897424,
      -0.1575402839317583,
      -0.12270691483801277
    ],
    [
      0.986177345533419,
      -0.09727559528262229,
      -0.1341331492177492
    ],
    [
      0.9786928158215872,
      -0.13435272099223458,
      -0.15527304537876344
    ],
    [
      0.9791643258870352,
      -0.1439302650757693,
      -0.14325258010034855
    ],
    [
      0.9871659158733381,
      -0.10163924452699144,
      -0.12317840115026626
    ],
    [
      0.9859913750831762,
      -0.09124672387931607,
      -0.1396246527045959
    ],
    [
      0.984240066048695,
      -0.0850053348795891,
      -0.15506639038318193
    ],
    [
      0.9768459327612026,
      -0.12441217438231816,
      -0.17405066651225362
    ],
    [
      0.9775644965819036,
      -0.13296737620849236,
      -0.16336257798773493
    ],
    [
      0.9817947639551454,
      -0.07640577746839657,
      -0.17389996733671367
    ],
    [
      0.9810378686029048,
      -0.07677788346836531,
      -0.17796026797346562
    ],
    [
      0.9741755910880654,
      -0.11627639242062635,
      -0.19355029913142202
    ],
    [
      0.9749163188439997,
      -0.12231140815522498,
      -0.1859518504526125
    ],
    [
      0.9841485476656219,
      -0.0834907450607147,
      -0.15646383485283147
    ],
    [
      0.9764443226794128,
      -0.07090095907409427,
      -0.20378797488938427
    ],
    [
      0.9709388104561554,
      -0.11214722963174403,
      -0.2114256967256132
    ],
    [
      0.971115011763991,
      -0.1132037737894486,
      -0.2100488979415296
    ],
    [
      0.9783572792922441,
      -0.0697029859733132,
      -0.1948294839142213
    ],
    [
      0.9667244096744402,
      -0.10823006383977302,
      -0.23179768985225824
    ],
    [
      0.973984775734232,
      -0.0652334442932826,
      -0.21702132241688343
    ],
    [
      0.97192101040758,
      -0.06642560298743365,
      -0.22573699031409206
    ],
    [
      0.9664515816166136,
      -0.1068008387651751,
      -0.23359135521204788
    ],
    [
      0.9617578218033638,
      -0.10276796721745732,
      -0.2538909945508913
    ],
    [
      0.9689589710689471,
      -0.060283395214038214,
      -0.23975909710890084
    ],
    [
      0.9668575717885693,
      -0.06137167991828819,
      -0.24783049202856147
    ],
    [
      0.9614788033747103,
      -0.1014775971048905,
      -0.25546195009619865
    ],
    [
      0.9572742257243756,
      -0.05860237864716559,
      -0.283181598944372
    ],
    [
      0.9509992739431272,
      -0.0702842985868473,
      -0.30109881821720913
    ],
    [
      0.9518227694650695,
      -0.07847245002928654,
      -0.29643800382920943
    ],
    [
      0.9565945329929247,
      -0.09761277517689068,
      -0.274588138072849
    ],
    [
      0.9637276573834965,
      -0.05551298940768454,
      -0.2610503982014587
    ],
    [
      0.43356881624958216,
      -0.4406340953886537,
      -0.7860405050358148
    ],
    [
      0.40350322486034934,
      -0.4682126427271006,
      -0.7861056345796046
    ],
    [
      0.41995790028410035,
      -0.4870994789569522,
      -0.765747647458897
    ],
    [
      0.4432653083263985,
      -0.4851312557060079,
      -0.7537662311163952
    ],
    [
      0.4435359918309349,
      -0.4487394574540444,
      -0.7758277665013019
    ],
    [
      0.38300534293109256,
      -0.44311150649934045,
      -0.8105301352165267
    ],
    [
      0.38241879626231107,
      -0.44982183969827133,
      -0.8071035725331338
    ],
    [
      0.4014994413609932,
      -0.4683272896997565,
      -0.7870627346719515
    ],
    [
      0.43346484259352713,
      -0.4386678508431214,
      -0.7871967650289511
    ],
    [
      0.41345829110342797,
      -0.4209465600810579,
      -0.8073761422495449
    ],
    [
      0.4180770548372557,
      -0.35281746035279155,
      -0.8370970170110587
    ],
    [
      0.40921062992985857,
      -0.3578379938468697,
      -0.8393441669017877
    ],
    [
      0.38521204818363947,
      -0.37681706059131626,
      -0.8423898033461028
    ],
    [
      0.37411721311090435,
      -0.3905071738020243,
      -0.8411542415415176
    ],
    [
      0.36304470346048795,
      -0.4245540421604272,
      -0.8294289653578109
    ],
    [
      0.43064836569741743,
      -0.3389969976765756,
      -0.83643470796495
    ],
    [
      0.49631353371608455,
      -0.32597995940795477,
      -0.8046178859027688
    ],
    [
      0.5184003351046493,
      -0.2804516507726701,
      -0.8078415464323877
    ],
    [
      0.49519236803588607,
      -0.24590133212754994,
      -0.8332568952591439
    ],
    [
      0.40189634538550645,
      -0.23132526319155758,
      -0.8859841703863169
    ],
    [
      0.39343903177260864,
      -0.23924401103081283,
      -0.8876756341500653
    ],
    [
      0.38527978832708487,
      -0.25066596757801834,
      -0.8881025038838775
    ],
    [
      0.392183403105229,
      -0.29199622385634233,
      -0.8723132370785384
    ],
    [
      0.4770840667729363,
      -0.17185811648097568,
      -0.8618907013252943
    ],
    [
      0.44009460215733076,
      -0.18102559719586625,
      -0.8795149085216581
    ],
    [
      0.42638967054606247,
      -0.1908497459075278,
      -0.88417657927512
    ],
    [
      0.40945678074497754,
      -0.2133175940565823,
      -0.8870404437047222
    ],
    [
      0.539515893292648,
      -0.13517172793840634,
      -0.8310542731078286
    ],
    [
      0.48942340470868473,
      -0.08793689346260593,
      -0.8676011950726585
    ],
    [
      0.4780705075850163,
      -0.08831564742336707,
      -0.8738700911449003
    ],
    [
      0.470032523942787,
      -0.10553832732236872,
      -0.8763167737193953
    ],
    [
      0.4803237090829725,
      -0.16483782929508045,
      -0.8614624916536192
    ],
    [
      0.5319051842295867,
      -0.14888933998884255,
      -0.8336119237555185
    ],
    [
      0.5655504507856826,
      -0.10910865655644553,
      -0.8174643653888277
    ],
    [
      0.5235470446544469,
      -0.07550629832425551,
      -0.8486443842664388
    ],
    [
      0.6041982874713839,
      -0.09666184793573955,
      -0.7909493767430977
    ],
    [
      0.5377710500726622,
      -0.04401998476542237,
      -0.8419409353660138
    ],
    [
      0.5320647796594,
      -0.04970337341770261,
      -0.8452435417776906
    ],
    [
      0.6141207034003077,
      -0.095307554373505,
      -0.783436169534221
    ],
    [
      0.6141769352138463,
      -0.07783702394470614,
      -0.7853203740861165
    ],
    [
      0.555335913475749,
      -0.027654076191139906,
      -0.8311662139873528
    ],
    [
      0.5383257486880078,
      -0.042307803939804114,
      -0.8416741875721787
    ],
    [
      0.6190772835617505,
      -0.03333500473132452,
      -0.7846222622621453
    ],
    [
      0.5941877606484219,
      0.009580848991728877,
      -0.8042693034228096
    ],
    [
      0.5746790337888723,
      0.003189741063408608,
      -0.8183726740766926
    ],
    [
      0.5575796483774671,
      -0.01402339737016912,
      -0.8300049879617944
    ],
    [
      0.6240536791528796,
      0.10221931303902927,
      -0.7746665202379561
    ],
    [
      0.5773346892251146,
      0.0632163808817252,
      -0.8140567214915414
    ],
    [
      0.5935602365867906,
      0.026096888351924724,
      -0.8043663331849366
    ],
    [
      0.6531586006551645,
      0.06560679295123316,
      -0.7543736415787877
    ],
    [
      0.6221685805240501,
      0.11341576463028842,
      -0.7746245037061605
    ],
    [
      0.5798702461075466,
      0.13481850646434312,
      -0.803476488762364
    ],
    [
      0.5755059452087841,
      0.13240275397413204,
      -0.8070083133211265
    ],
    [
      0.5670252232048126,
      0.0690002989365123,
      -0.8208053088255486
    ],
    [
      0.5952981130562615,
      0.1882154805472402,
      -0.7811498508442705
    ],
    [
      0.582499940756671,
      0.16662592739918763,
      -0.7955687395422444
    ],
    [
      0.545882654742721,
      0.38877076554436946,
      -0.7422057794904889
    ],
    [
      0.540033223210183,
      0.38968678232214543,
      -0.7459948589049616
    ],
    [
      0.5149145555736021,
      0.37338114961305946,
      -0.7716537549782739
    ],
    [
      0.5183647479637742,
      0.33374170670210096,
      -0.787346468383533
    ],
    [
      0.527219807661322,
      0.31077993911485996,
      -0.790857195613293
    ],
    [
      0.5829026104717591,
      0.38017950658394734,
      -0.7181142593479084
    ],
    [
      0.5552915376021593,
      0.3901075205631685,
      -0.7344844659129877
    ],
    [
      0.6044501458592751,
      0.3854294744167914,
      -0.6971973475433602
    ],
    [
      0.609429752121262,
      0.4065460633846107,
      -0.6806729578702926
    ],
    [
      0.6115392930943296,
      0.42490185588973517,
      -0.6674414624992565
    ],
    [
      0.6057073684333693,
      0.41680333642148,
      -0.6777857792646916
    ],
    [
      0.6136337870781534,
      0.4460573529153955,
      -0.6515262184027851
    ],
    [
      0.6109363806677673,
      0.4425793324722176,
      -0.6564147113258623
    ],
    [
      0.6156663476209341,
      0.46695457924800776,
      -0.634750635546287
    ],
    [
      0.6129748477234749,
      0.4637385591909202,
      -0.6396939774438337
    ],
    [
      0.6166330501385082,
      0.48641096898838365,
      -0.6190056952279696
    ],
    [
      0.6149100805783632,
      0.4844276528771433,
      -0.6222663753820007
    ],
    [
      0.6157623043626776,
      0.5056611186030187,
      -0.6042711458104788
    ],
    [
      0.6165388586864119,
      0.5065394115700302,
      -0.6027417857224967
    ],
    [
      0.6154526084138282,
      0.5259951329723098,
      -0.5869814365770498
    ],
    [
      0.6120654371409482,
      0.5830305462822212,
      -0.5342764104462359
    ],
    [
      0.6112989464175526,
      0.582000081698981,
      -0.5362737202317205
    ],
    [
      0.6133520605283057,
      0.563908810687745,
      -0.5529973807120739
    ],
    [
      0.6099403811831919,
      0.599339413922861,
      -0.5184254992963828
    ],
    [
      0.6059863866149886,
      0.6169033436644012,
      -0.5022058978277647
    ],
    [
      0.6082574674055384,
      0.60215704720034,
      -0.5171360979977785
    ],
    [
      0.6014125006762316,
      0.6334040672889387,
      -0.48693150603774993
    ],
    [
      0.6037113147430755,
      0.6205971583977787,
      -0.5003916620406356
    ],
    [
      0.5959849663395181,
      0.6507649529163634,
      -0.4704326688837061
    ],
    [
      0.5984678089055322,
      0.6380113204462893,
      -0.4845387875972302
    ],
    [
      0.5905911427833509,
      0.6679658825516426,
      -0.4527954083389769
    ],
    [
      0.5933653792718272,
      0.6547042904966287,
      -0.4682732308032423
    ],
    [
      0.585754824435669,
      0.6834879459247979,
      -0.4355864017916987
    ],
    [
      0.5886432172241128,
      0.6707864429849574,
      -0.4511592963950033
    ],
    [
      0.5802127285002608,
      0.6987189223649406,
      -0.4185033538879452
    ],
    [
      0.5830585875981443,
      0.6872136485091953,
      -0.43333599519395727
    ],
    [
      0.5733030787687762,
      0.7146425416048062,
      -0.40076129753615813
    ],
    [
      0.5762807819334929,
      0.703897659314342,
      -0.41524516323000393
    ],
    [
      0.5671814742428859,
      0.7297473582767642,
      -0.38180357301071777
    ],
    [
      0.5707663693807903,
      0.7178886234706827,
      -0.39857455497715805
    ],
    [
      0.561668051931016,
      0.7440621714538534,
      -0.3618017198015977
    ],
    [
      0.5615200553802663,
      0.7438716028591588,
      -0.36242277227774833
    ],
    [
      0.5655494115741688,
      0.7317688626996751,
      -0.3803527239962078
    ],
    [
      0.5578686241733121,
      0.7565526684094989,
      -0.34119006152794495
    ],
    [
      0.5573615346661585,
      0.7559576350277681,
      -0.3433309973157221
    ],
    [
      0.5536045580759201,
      0.7686726861984123,
      -0.3204126944583846
    ],
    [
      0.5532328024273371,
      0.7682292917046345,
      -0.32211367820288334
    ],
    [
      0.5497084972528938,
      0.7801047448545461,
      -0.2987593598590491
    ],
    [
      0.5490117150054233,
      0.7792478232003404,
      -0.30225645869746937
    ],
    [
      0.5469391831588314,
      0.7907713172508073,
      -0.27484223427081467
    ],
    [
      0.545515206616197,
      0.7889905110532003,
      -0.28267849726942035
    ],
    [
      0.5411974631826447,
      0.8019272557791447,
      -0.2530177509251083
    ],
    [
      0.5259531705249952,
      0.8176584325204387,
      -0.23411097826228625
    ],
    [
      0.5503491824788119,
      0.8134356308115974,
      -0.18825050297686294
    ],
    [
      0.52545682686914,
      0.8180744663427294,
      -0.23377187729637866
    ],
    [
      0.5367269367362116,
      -0.002090910117432763,
      -0.8437534139051786
    ],
    [
      0.5299098595986443,
      -0.018456798647132264,
      -0.8478531047792679
    ],
    [
      0.5301320339894732,
      0.02451050035129915,
      -0.8475607718097345
    ],
    [
      0.5315952007970056,
      0.026546376007752847,
      -0.8465824427723778
    ],
    [
      0.5434182041912515,
      0.06982963906049917,
      -0.8365527340593871
    ],
    [
      0.5329992513438273,
      0.14460016302861586,
      -0.8336681539551678
    ],
    [
      0.5288048480479095,
      0.1400663822906068,
      -0.8371062305544315
    ],
    [
      0.537379497264518,
      0.07727122879866503,
      -0.8397930894688752
    ],
    [
      0.5381005530468592,
      0.07536222292840539,
      -0.8395048124733733
    ],
    [
      0.5373335457818624,
      0.1776868152408457,
      -0.8244392374620804
    ],
    [
      0.5337683019311624,
      0.20011923905303744,
      -0.8216104247235162
    ],
    [
      0.5336269060277935,
      0.19763700740844148,
      -0.822302826497538
    ],
    [
      0.5327884752941096,
      0.20490648760775443,
      -0.8210662408904845
    ],
    [
      0.5274200669200795,
      0.22585595767474292,
      -0.8190342846260121
    ],
    [
      0.5307823404668355,
      0.20918803759399263,
      -0.8212858649557551
    ],
    [
      0.5058537425818098,
      0.2679942432423339,
      -0.8199335806667176
    ],
    [
      0.1664616666872288,
      0.6823965437942219,
      -0.7117762784340389
    ],
    [
      0.1283515881193282,
      0.7198568659710065,
      -0.6821524480214424
    ],
    [
      0.10920104804661525,
      0.7237766923686239,
      -0.681338704822686
    ],
    [
      0.0888929211191608,
      0.5666955913764459,
      -0.8191179129340311
    ],
    [
      -0.050517836522474456,
      0.6698626981649889,
      -0.7407644118072962
    ],
    [
      -0.06368652341037959,
      0.686087952931633,
      -0.7247257050622535
    ],
    [
      -0.08534510672473025,
      0.6986108563974679,
      -0.7103936120783609
    ],
    [
      -0.09537047807271176,
      0.7006117077481941,
      -0.7071405142391018
    ],
    [
      -0.12059608270955728,
      0.6598356721446567,
      -0.7416693809242222
    ],
    [
      -0.10706962235197341,
      0.7066758629622696,
      -0.6993892483273798
    ],
    [
      -0.11493615051692464,
      0.7158031978495941,
      -0.6887782395318871
    ],
    [
      -0.1770529984587508,
      0.6857339853367606,
      -0.7059894737819601
    ],
    [
      -0.11719769344591575,
      0.7270870376412062,
      -0.6764681369769697
    ],
    [
      -0.15175299812187903,
      0.7445113038295587,
      -0.6501337908700268
    ],
    [
      -0.18285777491281735,
      0.7355038483412449,
      -0.6523780523815561
    ],
    [
      -0.19020643265238577,
      0.7298736405633158,
      -0.6565866140795934
    ],
    [
      0.11804774720802445,
      -0.09115995570458192,
      -0.9888147409171493
    ],
    [
      0.1671296537324618,
      -0.06622007146985572,
      -0.9837085853939644
    ],
    [
      0.1520645525360041,
      -0.034174607721932815,
      -0.9877795645026662
    ],
    [
      0.13950776473175838,
      -0.03534507997646999,
      -0.9895899700891301
    ],
    [
      0.12976078511944217,
      -0.04262309433607537,
      -0.9906287955003146
    ],
    [
      0.10747640284797133,
      -0.06885656394556784,
      -0.991820344836942
    ],
    [
      0.18097647099353076,
      -0.08778434510552263,
      -0.9795618539434466
    ],
    [
      0.2274743396816616,
      -0.08314667918643695,
      -0.9702278364006363
    ],
    [
      0.21843945371074677,
      -0.053560100353321365,
      -0.9743795568015026
    ],
    [
      0.2005700890937916,
      -0.056676201012805176,
      -0.9780385716318476
    ],
    [
      0.1782571034765816,
      -0.07371607854101418,
      -0.9812188057842524
    ],
    [
      0.26844006644360996,
      -0.06181837137795616,
      -0.9613107820512196
    ],
    [
      0.2660695375432378,
      -0.05976432306865445,
      -0.9620993851363138
    ],
    [
      0.2217754002260176,
      -0.04940764226744443,
      -0.9738452427055142
    ],
    [
      0.2340125911031714,
      -0.09160203854823341,
      -0.9679086598119617
    ],
    [
      0.23779171493196577,
      -0.0934221040684979,
      -0.9668130174863853
    ],
    [
      0.2729045773759252,
      -0.062134062083862365,
      -0.9600325254782915
    ],
    [
      0.2904811682763709,
      -0.09875687329827743,
      -0.9517708604770072
    ],
    [
      0.29255764942351037,
      -0.10002121082720401,
      -0.9510025126930267
    ],
    [
      0.32310958384005506,
      -0.06539805357622477,
      -0.9440991957517746
    ],
    [
      0.32222363994500464,
      -0.054522699864711754,
      -0.9450921653786231
    ],
    [
      0.29732513981684344,
      -0.04011843676152578,
      -0.9539330543936015
    ],
    [
      0.3489748034664453,
      -0.037482064121770714,
      -0.936382230403123
    ],
    [
      0.34204301100456314,
      -0.0894275935611404,
      -0.9354193092580438
    ],
    [
      0.3648458136773024,
      -0.06129799248607383,
      -0.9290479472876114
    ],
    [
      0.3599040317951795,
      -0.04004292384191229,
      -0.9321296326948121
    ],
    [
      0.38292775150344965,
      -0.025065423481068348,
      -0.9234381742565265
    ],
    [
      0.3891684034264742,
      -0.08228008872419709,
      -0.9174845724991932
    ],
    [
      0.396353450010353,
      -0.08137329330374768,
      -0.9144847345919958
    ],
    [
      0.4056639082664089,
      -0.07259901476258544,
      -0.911134554599662
    ],
    [
      0.4075100555034385,
      -0.0684613912906574,
      -0.9106308761326578
    ],
    [
      0.433381148882032,
      -0.0496465616195602,
      -0.899842207674793
    ],
    [
      0.4070971762633564,
      -0.014842486550455612,
      -0.9132642496404867
    ],
    [
      0.38381864734081383,
      -0.02324720525168404,
      -0.9231158179781419
    ],
    [
      0.4622910827117157,
      -0.04650312485553503,
      -0.8855079978316966
    ],
    [
      0.4310524895284406,
      0.0031721847448980102,
      -0.902321277880156
    ],
    [
      0.41642345161324523,
      0.00042389035434063036,
      -0.9091706821403112
    ],
    [
      0.46766472635171924,
      -0.048033345360289026,
      -0.8825998535349249
    ],
    [
      0.4844346322707372,
      -0.022115063797506055,
      -0.8745478894891622
    ],
    [
      0.44976381237593627,
      0.023976183688992306,
      -0.8928256580614019
    ],
    [
      0.44360204788970187,
      0.0217546136896526,
      -0.89595979814458
    ],
    [
      0.48518177429186987,
      -0.02154931497711979,
      -0.8741477408991056
    ],
    [
      0.48852634185709437,
      -0.017015407738001097,
      -0.8723832238249627
    ],
    [
      0.500417336744779,
      0.014421224549720432,
      -0.8656642058949585
    ],
    [
      0.48752585339478394,
      0.03675949970559436,
      -0.8723343862608433
    ],
    [
      0.46519669578983697,
      0.04856939396831235,
      -0.8838738870425853
    ],
    [
      0.46488032896494597,
      0.048346352766951345,
      -0.884052549295333
    ],
    [
      0.476357440642655,
      0.08440982518405332,
      -0.8751905907611078
    ],
    [
      0.46665768878776365,
      0.06891842921898228,
      -0.8817487463043261
    ],
    [
      0.5066058642218242,
      0.06638436816843912,
      -0.8596182955236212
    ],
    [
      0.4851744429048023,
      0.1067933363872555,
      -0.867871501580328
    ],
    [
      0.4769634113207163,
      0.09353986708992247,
      -0.8739314604281647
    ],
    [
      0.48728584115801465,
      0.14425051802823324,
      -0.8612457820248018
    ],
    [
      0.4605008040736819,
      0.16977751344861142,
      -0.8712718320792306
    ],
    [
      0.46046134558571195,
      0.17053900644972622,
      -0.8711439585398821
    ],
    [
      0.45480311595754347,
      0.2073388910109144,
      -0.8661204939208363
    ],
    [
      0.4546177831967548,
      0.20635737379932168,
      -0.8664521368661487
    ],
    [
      0.4552637591137885,
      0.191865802438039,
      -0.8694379928967849
    ],
    [
      0.45849193073714767,
      0.25771042978703984,
      -0.8505118951713149
    ],
    [
      0.4539101348214136,
      0.2348685799519997,
      -0.8595361188790946
    ],
    [
      0.4500317780204743,
      0.32711042328211837,
      -0.830945347030672
    ],
    [
      0.4485668437406915,
      0.27010236088010514,
      -0.8519580396612896
    ],
    [
      0.41266786234388764,
      0.44037049648677457,
      -0.7973575491663185
    ],
    [
      0.40646567872978906,
      0.40665801414529956,
      -0.8181777994703433
    ],
    [
      0.444825517035399,
      0.3321644438723031,
      -0.831743374858612
    ],
    [
      -0.06396473551760444,
      0.555609025486588,
      -0.8289795675455499
    ],
    [
      -0.056548552133561955,
      0.5420465536873067,
      -0.8384436742484921
    ],
    [
      -0.08741640090616128,
      0.6230656095185652,
      -0.7772693349720367
    ],
    [
      -0.09313749666654371,
      0.5871586501796144,
      -0.8040958439352505
    ],
    [
      -0.11144336169140759,
      0.6197643741043183,
      -0.7768349230859802
    ],
    [
      -0.11543157122851662,
      0.5898164392036337,
      -0.7992447187244106
    ],
    [
      -0.14140192634294138,
      0.590040353210396,
      -0.7948948841261065
    ],
    [
      -0.11853032545034405,
      0.5878650886466483,
      -0.8002282171350269
    ],
    [
      -0.2126963166784425,
      0.5543236431173995,
      -0.8046648840060548
    ],
    [
      -0.2479213586100168,
      0.5641377136480857,
      -0.7875808783768649
    ],
    [
      -0.2283883613661958,
      0.554738275322895,
      -0.800065123776961
    ],
    [
      -0.27619211967302615,
      0.5610910351449373,
      -0.7803170915150479
    ],
    [
      -0.2946642215511462,
      0.5492524438617357,
      -0.781981297378376
    ],
    [
      -0.2931456105448864,
      0.6060364661709242,
      -0.7394494253762889
    ],
    [
      -0.3488619323990911,
      0.5844371075533159,
      -0.732617648871146
    ],
    [
      -0.34880062043676274,
      0.5842350471026972,
      -0.7328079809335039
    ],
    [
      -0.33195076407758267,
      0.5622352459963363,
      -0.7574300089036268
    ],
    [
      -0.29506546290091784,
      0.5487945610044179,
      -0.782151457465263
    ],
    [
      -0.23352803696257826,
      0.7172667236076923,
      -0.6565006497768994
    ],
    [
      -0.24504023846376044,
      0.7012046424458418,
      -0.6695276924414872
    ],
    [
      0.898644888358928,
      -0.2306150938690319,
      0.37316758045970116
    ],
    [
      0.8820014726530335,
      -0.24063976347842259,
      0.4051739212621279
    ],
    [
      0.888424941658315,
      -0.2226286844672979,
      0.40141947124146804
    ],
    [
      0.8911719084794258,
      -0.22027091465556262,
      0.39660226133235765
    ],
    [
      0.904021898643572,
      -0.2254280195633044,
      0.3632170353502677
    ],
    [
      0.9074562150157294,
      -0.23030606719223515,
      0.35140053108066294
    ],
    [
      0.9133005870654507,
      -0.22430629167231123,
      0.33995400450960866
    ],
    [
      0.9159626452791498,
      -0.22787136611337128,
      0.3302833222535588
    ],
    [
      0.922441497110804,
      -0.22083733539887043,
      0.3167531463172944
    ],
    [
      0.9242381912092772,
      -0.22293286949014157,
      0.30997532419709617
    ],
    [
      0.9312407470271278,
      -0.21491481198337187,
      0.2942826781625259
    ],
    [
      0.9321337236578282,
      -0.2157846038536556,
      0.2907984283993164
    ],
    [
      0.9397724140131145,
      -0.20645464125973395,
      0.27240464563270156
    ],
    [
      0.9399346904496645,
      -0.20599297674760322,
      0.2721941792543604
    ],
    [
      0.9470583284725829,
      -0.19662649765630055,
      0.2538080827911795
    ],
    [
      0.948418696208219,
      -0.19252999660145081,
      0.2518614243812407
    ],
    [
      0.9531624679123103,
      -0.1855617033335112,
      0.23884757486581262
    ],
    [
      0.9557524097507123,
      -0.17720714151183717,
      0.23480834791997987
    ],
    [
      0.9594500993497938,
      -0.17120786100452784,
      0.22392716491735662
    ],
    [
      0.9625376613652492,
      -0.16039965862105177,
      0.21861655922588974
    ],
    [
      0.9651907303071497,
      -0.1555849713606143,
      0.21023836666000753
    ],
    [
      0.9687897063469014,
      -0.14179187421916115,
      0.20332626313809501
    ],
    [
      0.9699409646485324,
      -0.139405906225724,
      0.19945054125286046
    ],
    [
      0.9763316812790926,
      -0.1115112673037649,
      0.18531509759069428
    ],
    [
      0.9795822466541245,
      -0.10770112046177592,
      0.16976186465556992
    ],
    [
      0.9819529181029568,
      -0.07944350515202873,
      0.17163098822254458
    ],
    [
      0.9848297525321614,
      -0.061436986348006664,
      0.16228325617856104
    ],
    [
      0.985891062775722,
      -0.03591940513643972,
      0.1634888640660323
    ],
    [
      0.9858027298354519,
      -0.03319726875411853,
      0.16459319304344835
    ],
    [
      0.9906555852450427,
      -0.012240404236508521,
      0.13583697555131571
    ],
    [
      0.9907276850983783,
      0.0031415867327941847,
      0.13582630235859652
    ],
    [
      0.9917732900392073,
      0.021711364802021037,
      0.12615212167553844
    ],
    [
      0.9914109282876938,
      0.03551974533321706,
      0.1258678631072939
    ],
    [
      0.993667316777574,
      0.05790664836963291,
      0.09629165925796569
    ],
    [
      0.9935702298715746,
      0.05911079040162657,
      0.09656144557245122
    ],
    [
      0.9913280239296156,
      0.0924353612068744,
      0.09340478023291035
    ],
    [
      0.9914639215998903,
      0.1041823650833221,
      0.07839213590285661
    ],
    [
      0.9961154215250978,
      0.07587222900689913,
      0.0446930852079094
    ],
    [
      0.9910024917375113,
      0.11117847324580345,
      0.07452119468162081
    ],
    [
      0.9916195650916866,
      0.1166534095389119,
      0.055521348779735955
    ],
    [
      0.9944807387334252,
      0.09804825729455689,
      0.037344337318008396
    ],
    [
      0.993447313506278,
      0.11244423484986016,
      0.02046287702617436
    ],
    [
      0.9944657144546345,
      0.10221385486417042,
      0.024295486165945533
    ],
    [
      0.990438811610813,
      0.1313374453504319,
      0.04220705988081496
    ],
    [
      0.9904516618694293,
      0.13241416682940238,
      0.03836657298952918
    ],
    [
      0.988987442749794,
      0.1456502848449349,
      0.02626466462401659
    ],
    [
      0.9888812343275518,
      0.14737650789532702,
      0.01985117919410276
    ],
    [
      0.992141570473201,
      0.12509180212511406,
      0.0026730469621150848
    ],
    [
      0.9930909031549129,
      0.11718422344632,
      0.006189979502570322
    ],
    [
      0.9913531765669684,
      0.13056821891090367,
      -0.01306979422239419
    ],
    [
      0.9872148166896172,
      0.1591437262100666,
      0.008954335065251406
    ],
    [
      0.9868827438069507,
      0.16143821669757058,
      0.00039008405835164493
    ],
    [
      0.9905781707224539,
      0.13602290040657825,
      -0.015895227369846696
    ],
    [
      0.9846140953860416,
      0.17361098937344338,
      -0.019857178447633766
    ],
    [
      0.988723704918465,
      0.14550889613507376,
      -0.03539203975269919
    ],
    [
      0.989257108915876,
      0.142296253746122,
      -0.03349848696913974
    ],
    [
      0.9853126140652452,
      0.17055876703991887,
      -0.008292137826639382
    ],
    [
      0.9830726221356583,
      0.18118085222963815,
      -0.02723450738793059
    ],
    [
      0.9819597270573049,
      0.18468752745010442,
      -0.04056613910529665
    ],
    [
      0.9865432913375654,
      0.15382935871865788,
      -0.055397316839806116
    ],
    [
      0.9868158291082463,
      0.1524071413121038,
      -0.05446634464030898
    ],
    [
      0.9806745847108187,
      0.19014881146839213,
      -0.04605201840768023
    ],
    [
      0.9789485972533365,
      0.19435530327640063,
      -0.06233506255762681
    ],
    [
      0.9840562977659775,
      0.16108543359093266,
      -0.07539685611442344
    ],
    [
      0.9810445991204583,
      0.16834099241443112,
      -0.09598335694016737
    ],
    [
      0.9840463247236477,
      0.16100783460532564,
      -0.07569219242157951
    ],
    [
      0.9780325782597368,
      0.19777063162614467,
      -0.06587148949893178
    ],
    [
      0.9757031477493714,
      0.20237110546196546,
      -0.0839601283114219
    ],
    [
      0.9809404451543994,
      0.16781772586434976,
      -0.09794413686386101
    ],
    [
      0.9750121901991164,
      0.20466679049811562,
      -0.08638711611300845
    ],
    [
      0.9720181177973197,
      0.20958576904565976,
      -0.1060876245718384
    ],
    [
      0.9777068433935817,
      0.17455086329261,
      -0.11671043014727965
    ],
    [
      0.9716014687150176,
      0.21082845514429044,
      -0.1074334607666177
    ],
    [
      0.9680680086639427,
      0.21577837707631178,
      -0.12760886563143467
    ],
    [
      0.9738208018628373,
      0.18047889363459008,
      -0.13820425033860168
    ],
    [
      0.977500500428139,
      0.17378712228001106,
      -0.11954416670156048
    ],
    [
      0.9676036803300742,
      0.21703571437379263,
      -0.12899076128914472
    ],
    [
      0.9635453703986868,
      0.22195081320034177,
      -0.14939262265240727
    ],
    [
      0.9695099070164785,
      0.18598689234614976,
      -0.15956007041964093
    ],
    [
      0.9735068323780073,
      0.17955216058026702,
      -0.14158202196711447
    ],
    [
      0.9647359301583196,
      0.1911466071362517,
      -0.18096286813007006
    ],
    [
      0.9690622064870256,
      0.18489079258832503,
      -0.16350484633355186
    ],
    [
      0.9630706048127654,
      0.223120043085545,
      -0.15070652447415356
    ],
    [
      0.9584938159668556,
      0.22797891606528778,
      -0.17121687587090326
    ],
    [
      0.9581242585824115,
      0.2288071013575112,
      -0.1721778600293254
    ],
    [
      0.953118340603721,
      0.23355356725357515,
      -0.192401039570838
    ],
    [
      0.9593984592874122,
      0.19586117638999534,
      -0.20296057720667557
    ],
    [
      0.9640761188344111,
      0.18974736736525127,
      -0.18588483980985274
    ],
    [
      0.9527727305715232,
      0.23426623694535922,
      -0.1932445448304928
    ],
    [
      0.9472399989134311,
      0.2389869342219272,
      -0.2135922042811658
    ],
    [
      0.9535048186127227,
      0.20064220380544728,
      -0.2248805614863411
    ],
    [
      0.9586405240113762,
      0.194526531550273,
      -0.2077685593303633
    ],
    [
      0.9462752094664266,
      0.2408300372646402,
      -0.21578721255065722
    ],
    [
      0.9406448724854651,
      0.2452017348864168,
      -0.23465577571305282
    ],
    [
      0.947076673508968,
      0.2054938421320179,
      -0.24661316943952752
    ],
    [
      0.9526564565496479,
      0.19939657230490176,
      -0.22953579840043453
    ],
    [
      0.9335873681818307,
      0.251889682700511,
      -0.254884706721213
    ],
    [
      0.9398869422339979,
      0.21099285990681899,
      -0.26850428094607137
    ],
    [
      0.9462755211708864,
      0.20449587281838263,
      -0.2504876764094699
    ],
    [
      0.9391054067784383,
      0.2479085810415145,
      -0.23795455533670046
    ],
    [
      0.9312499579651137,
      0.25567879168687907,
      -0.2596187036242023
    ],
    [
      0.925679892144126,
      0.25947104136429777,
      -0.27530258984137074
    ],
    [
      0.9322240819180903,
      0.21665176855069454,
      -0.2898625058123765
    ],
    [
      0.9390938617384499,
      0.2101285916795923,
      -0.2719350911594831
    ],
    [
      0.9180667138263051,
      0.2672402160316607,
      -0.2928074041063866
    ],
    [
      0.9232908323154305,
      0.22361060886379988,
      -0.3123016723711873
    ],
    [
      0.9234289997154104,
      0.22332064368916707,
      -0.31210058088195347
    ],
    [
      0.9315805636538811,
      0.21603150001496144,
      -0.2923833860252715
    ],
    [
      0.9223866078199818,
      0.26437840645441163,
      -0.28161499234766035
    ],
    [
      0.9142783151146928,
      0.23124803565968707,
      -0.3325951119823844
    ],
    [
      0.9093503934890463,
      0.2792243747928956,
      -0.30840818793091895
    ],
    [
      0.9136836701024557,
      0.23242990200370303,
      -0.3334043965556784
    ],
    [
      0.9033786421994634,
      0.2425708882628743,
      -0.3536472719889326
    ],
    [
      0.9050142081837916,
      0.2394896624003162,
      -0.3515593614012391
    ],
    [
      0.900849406234141,
      0.2952408486083963,
      -0.31828161838313823
    ],
    [
      0.9000157922228217,
      0.2954049393892744,
      -0.32048010161934504
    ],
    [
      0.891479774710745,
      0.3018560977447399,
      -0.3378560455815425
    ],
    [
      0.89235124607261,
      0.25490202570003645,
      -0.37247041617647747
    ],
    [
      0.8958510040145705,
      0.24855354502589136,
      -0.3683369569580931
    ],
    [
      0.8776238651668713,
      0.3184175349202917,
      -0.3583107935087167
    ],
    [
      0.8750632210917255,
      0.2784382647643993,
      -0.3958995981401903
    ],
    [
      0.8858321413808786,
      0.2599382252108845,
      -0.3843612056006467
    ],
    [
      0.8673027609984706,
      0.3395044088843334,
      -0.3640366425410075
    ],
    [
      0.8547021094673426,
      0.301671710205409,
      -0.42246713876207986
    ],
    [
      0.8644547057601327,
      0.2863695687228959,
      -0.41317131047378525
    ],
    [
      0.8746530007294121,
      0.2784300933427835,
      -0.39681080055382034
    ],
    [
      0.8310693277424801,
      0.34893312707436963,
      -0.4330928830121364
    ],
    [
      0.8448939118367018,
      0.31631633430946593,
      -0.43139106897373036
    ],
    [
      0.854421411108569,
      0.3018997307279012,
      -0.42287185390572235
    ],
    [
      0.857860512215248,
      0.3625249812552176,
      -0.3642128217782792
    ],
    [
      0.8514955787967156,
      0.36714962557721087,
      -0.3743747210057861
    ],
    [
      0.831761187989329,
      0.36372728662617027,
      -0.4193754727188323
    ],
    [
      0.8068395676953193,
      0.431131339828457,
      -0.4039005816026386
    ],
    [
      0.8072306668129101,
      0.41687605005153033,
      -0.41784328336137994
    ],
    [
      0.8130420700711478,
      0.3973350632948083,
      -0.42554369901448813
    ],
    [
      0.8222809944625556,
      0.3784043238900677,
      -0.4250460372794591
    ],
    [
      0.8244263989319837,
      0.4213083869340794,
      -0.37791580523053786
    ],
    [
      0.8247455177620748,
      0.432240444323781,
      -0.3646409593314326
    ],
    [
      0.8197705468288301,
      0.44735423753815023,
      -0.35756179425187634
    ],
    [
      0.7976704602571933,
      0.4623667030645188,
      -0.3872194064484947
    ],
    [
      0.7979718583057482,
      0.4549986743294099,
      -0.3952431146908832
    ],
    [
      0.8049633369469628,
      0.43461361348382477,
      -0.4039121601855322
    ],
    [
      0.7903428481732241,
      0.4837534662043279,
      -0.3759531437250312
    ],
    [
      0.7898665906433366,
      0.48298914826366335,
      -0.37793154359620834
    ],
    [
      0.8198354405926269,
      0.4526469945876959,
      -0.3506858261165108
    ],
    [
      0.8155896488456346,
      0.4646877249887464,
      -0.34478811310809093
    ],
    [
      0.8155369418547889,
      0.4711520988673965,
      -0.3360285645640643
    ],
    [
      0.8118040095118844,
      0.48107515512076104,
      -0.3309697044533895
    ],
    [
      0.7891539715239686,
      0.5002858785490033,
      -0.35630050372178723
    ],
    [
      0.7854383851314041,
      0.5172897497644847,
      -0.33984975790894545
    ],
    [
      0.7865814681861896,
      0.5064482608789708,
      -0.3532700850039873
    ],
    [
      0.8116188696373134,
      0.48880027680132254,
      -0.319920458626203
    ],
    [
      0.8081801728810167,
      0.497351027028537,
      -0.31541522486346385
    ],
    [
      0.807799942451178,
      0.5054116984412159,
      -0.30334513026359705
    ],
    [
      0.8045713277085261,
      0.5129523763833115,
      -0.2992404354228434
    ],
    [
      0.7815536816318601,
      0.5337695674017919,
      -0.32289919734088685
    ],
    [
      0.7830592359732673,
      0.5226966182106019,
      -0.33705560115233696
    ],
    [
      0.7798218122270716,
      0.537523930856325,
      -0.3208519361506963
    ],
    [
      0.8039387260960482,
      0.5215763700363104,
      -0.2857282185973394
    ],
    [
      0.8012794816557514,
      0.5274552093877467,
      -0.2823866044401163
    ],
    [
      0.7778332837548779,
      0.5495630914805777,
      -0.30488652178378384
    ],
    [
      0.8002884785489446,
      0.5369225077153557,
      -0.26693177369970267
    ],
    [
      0.7985631289456632,
      0.5405655570344582,
      -0.264737242632271
    ],
    [
      0.7740240896500395,
      0.5648765378157673,
      -0.2860091006711145
    ],
    [
      0.7765347968714422,
      0.5522426153335438,
      -0.3033509569086531
    ],
    [
      0.7971754382550609,
      0.5504970685296946,
      -0.24791994309265292
    ],
    [
      0.7960815399007245,
      0.5526940099286374,
      -0.24654312648762783
    ],
    [
      0.7710774187349158,
      0.5786499030127888,
      -0.2657139515727194
    ],
    [
      0.7707614659949192,
      0.5781817151701666,
      -0.26764279698928434
    ],
    [
      0.7736994874797332,
      0.5655201575758,
      -0.285615220968772
    ],
    [
      0.7933981870172879,
      0.5647274194553453,
      -0.22716130514017366
    ],
    [
      0.7686472294973528,
      0.5905801844499761,
      -0.24575695782841256
    ],
    [
      0.7681114919414849,
      0.5897700134980381,
      -0.24935129260934275
    ],
    [
      0.7942661164373934,
      0.5630809448044702,
      -0.22821302740546193
    ],
    [
      0.7911204699723241,
      0.5753121369930144,
      -0.20771217349808863
    ],
    [
      0.7907915816294108,
      0.5759076779621399,
      -0.2073138222316862
    ],
    [
      0.7660130240833922,
      0.6019202915844549,
      -0.2256457611246022
    ],
    [
      0.7654578508515218,
      0.601072007598759,
      -0.22975360769956746
    ],
    [
      0.7881579367931105,
      0.5860761172776199,
      -0.1879410849889314
    ],
    [
      0.7634434020492223,
      0.6127404632958873,
      -0.20421384994032793
    ],
    [
      0.7626819551050369,
      0.6116218853574008,
      -0.21032095641903323
    ],
    [
      0.7613059275313819,
      0.6223781923039818,
      -0.18182043463266215
    ],
    [
      0.7602825788409667,
      0.6209463207995798,
      -0.19077753273484388
    ],
    [
      0.7884967929101413,
      0.5861141187686595,
      -0.18639486943169686
    ],
    [
      0.7857403268281428,
      0.5951734534759286,
      -0.16846572076698513
    ],
    [
      0.786560187699134,
      0.5951854622005013,
      -0.16455192709864766
    ],
    [
      0.7835952395123945,
      0.6035477030959193,
      -0.14733862596465658
    ],
    [
      0.7593427488639415,
      0.6305800523192205,
      -0.16052223324151155
    ],
    [
      0.7583750082654038,
      0.6292024887061741,
      -0.17021038465500737
    ],
    [
      0.7843984608276481,
      0.6035099418417446,
      -0.14316006688106397
    ],
    [
      0.7812231343343481,
      0.611314581129933,
      -0.1264313935648567
    ],
    [
      0.7572110034996032,
      0.6382705556838764,
      -0.13871623526508936
    ],
    [
      0.756287582929658,
      0.6369798263799759,
      -0.14928426806382308
    ],
    [
      0.7541082291795014,
      0.644137382338342,
      -0.12809297934729083
    ],
    [
      0.7820761260931702,
      0.6112048843031024,
      -0.12159573347420942
    ],
    [
      0.778735381189909,
      0.6184188313927144,
      -0.10549575850183121
    ],
    [
      0.7549625546505998,
      0.6453128671471675,
      -0.1166312332513993
    ],
    [
      0.7764323741887132,
      0.624518465325522,
      -0.08443609879152739
    ],
    [
      0.7524879510766125,
      0.6518209960555896,
      -0.09429354477174379
    ],
    [
      0.7517740461889837,
      0.6507793682523134,
      -0.10640487457707827
    ],
    [
      0.7797494711338829,
      0.618174582391831,
      -0.09925194180022479
    ],
    [
      0.7495673499964468,
      0.6564012304108419,
      -0.08535931428049914
    ],
    [
      0.7774947598195496,
      0.624131910053689,
      -0.07720917889651953
    ],
    [
      0.7740260114273045,
      0.630027207514337,
      -0.06284466107494457
    ],
    [
      0.7501470397301884,
      0.6573178056856379,
      -0.07219917667572938
    ],
    [
      0.7749993118243297,
      0.6295269206983947,
      -0.05542492929912175
    ],
    [
      0.7712444868823186,
      0.6352171115954364,
      -0.041001982756690904
    ],
    [
      0.7477885399385169,
      0.6620330605871828,
      -0.05024466365882547
    ],
    [
      0.7473588015404474,
      0.6613191163540759,
      -0.06412369378544913
    ],
    [
      0.7447293572173254,
      0.6667447788071247,
      -0.028802507392723685
    ],
    [
      0.7445387821197569,
      0.6662904439815611,
      -0.0414613817724825
    ],
    [
      0.7720958796100111,
      0.6346151717256322,
      -0.03363831899619208
    ],
    [
      0.7679632750731067,
      0.6402162815312136,
      -0.018855264552207384
    ],
    [
      0.7686661884283869,
      0.6395442387246906,
      -0.011638620237448723
    ],
    [
      0.7643477038452248,
      0.644797587353523,
      0.002942612718038477
    ],
    [
      0.7408715409479362,
      0.6716089433266089,
      -0.007126503851562661
    ],
    [
      0.740895738364921,
      0.6713504170689141,
      -0.019029513238489646
    ],
    [
      0.7648660574353721,
      0.6441179420081367,
      0.009591192129907172
    ],
    [
      0.7599522861037884,
      0.6494909812928719,
      0.02517911962019372
    ],
    [
      0.73664885709509,
      0.6761328105139818,
      0.01388826436102342
    ],
    [
      0.7368556359697899,
      0.6760448595430181,
      0.002668262546579696
    ],
    [
      0.7602920744730308,
      0.6488378032846864,
      0.03107195716716436
    ],
    [
      0.7549021573465372,
      0.6541324155690772,
      0.04726008606962342
    ],
    [
      0.731433312029192,
      0.6810320119317766,
      0.034651244972770445
    ],
    [
      0.7317860736539691,
      0.6810709339586513,
      0.025130167583965614
    ],
    [
      0.7255103925733754,
      0.6859808770159045,
      0.05536159893389344
    ],
    [
      0.7259778149713164,
      0.6861303295059134,
      0.0467052791617805
    ],
    [
      0.7550398856994378,
      0.6536718745443906,
      0.051262573409871004
    ],
    [
      0.7488324534458796,
      0.659170519939811,
      0.06887802485919606
    ],
    [
      0.7188926905954186,
      0.6909858270989233,
      0.07570922108235362
    ],
    [
      0.719424412812426,
      0.6912135642218632,
      0.06820793857905755
    ],
    [
      0.7488829898325882,
      0.6587909709206065,
      0.0718938396031845
    ],
    [
      0.7419831769420914,
      0.6642928695747987,
      0.09042095203546949
    ],
    [
      0.7419790371167371,
      0.6640083493644054,
      0.09252037858589518
    ],
    [
      0.7346646759817854,
      0.6692591751257332,
      0.1111754036403793
    ],
    [
      0.7115247834011716,
      0.6959961118927737,
      0.09654996031100925
    ],
    [
      0.712145773444447,
      0.696326538941794,
      0.08931824298849975
    ],
    [
      0.7043293647945872,
      0.7012252840390817,
      0.11046830727571852
    ],
    [
      0.7346245101355758,
      0.6689249671961668,
      0.11342934968372285
    ],
    [
      0.7269271546055805,
      0.6738891220377079,
      0.13209982246877414
    ],
    [
      0.7036408630566128,
      0.7008447455409044,
      0.11707338931050902
    ],
    [
      0.7268399876948612,
      0.6734950478398046,
      0.1345661652236295
    ],
    [
      0.7191016374623249,
      0.6779707851006875,
      0.1524744226057617
    ],
    [
      0.6952826466076296,
      0.7053166785073506,
      0.13824045842534222
    ],
    [
      0.696159120118137,
      0.705833202021307,
      0.13100370376706988
    ],
    [
      0.7189283618971465,
      0.6773801932671847,
      0.15587842772236638
    ],
    [
      0.710801675092474,
      0.6815757353856837,
      0.17382604988665393
    ],
    [
      0.6866681546973465,
      0.7095067026730303,
      0.15838902798674245
    ],
    [
      0.6875762187681006,
      0.7100047185710352,
      0.15209287620209616
    ],
    [
      0.677275643633305,
      0.7136337228118687,
      0.17895421818656754
    ],
    [
      0.6782842881077501,
      0.7141587104750889,
      0.1729386040151848
    ],
    [
      0.7105695253938855,
      0.680998210676513,
      0.17700956651236616
    ],
    [
      0.7022674627478356,
      0.6848089919337592,
      0.1945688961072293
    ],
    [
      0.7019049225689521,
      0.6840838686351798,
      0.19839037362382114
    ],
    [
      0.6935373345092122,
      0.6874746732024684,
      0.2153707021556473
    ],
    [
      0.6675701693655117,
      0.7173013857082325,
      0.1995715185950929
    ],
    [
      0.6687837400311555,
      0.7179088453875005,
      0.19322318386861803
    ],
    [
      0.6838431828508502,
      0.6901377555432056,
      0.2367876256103879
    ],
    [
      0.6577080329472074,
      0.7206669848116831,
      0.2192241784091173
    ],
    [
      0.6589065580463678,
      0.7212400736166217,
      0.21367008207275717
    ],
    [
      0.6931429947358836,
      0.6868138229887829,
      0.21872256719438843
    ],
    [
      0.6835006017927789,
      0.6896403012497481,
      0.23921367486217388
    ],
    [
      0.6738378003035637,
      0.6926683588682588,
      0.2572025728969438
    ],
    [
      0.6467401269578328,
      0.7241588637709135,
      0.23941835394260333
    ],
    [
      0.6479081571503402,
      0.7246876132392699,
      0.23461219728654423
    ],
    [
      0.6364238418063285,
      0.7279423092924028,
      0.25507780758528825
    ],
    [
      0.6731755842062788,
      0.6917822062575886,
      0.2612891347414176
    ],
    [
      0.6639219414101162,
      0.6942677895103603,
      0.2778486857313176
    ],
    [
      0.6352029946111891,
      0.7274391115596166,
      0.25951781174002936
    ],
    [
      0.6608080808402079,
      0.6906139915540391,
      0.29391324394466917
    ],
    [
      0.6543598377277831,
      0.6943200298616261,
      0.29955450072035317
    ],
    [
      0.6233649237341921,
      0.7304760068032747,
      0.2789641112089633
    ],
    [
      0.6245365623528186,
      0.7309109286445381,
      0.27517866318539813
    ],
    [
      0.6121771296655278,
      0.7336989366473281,
      0.2948305144944387
    ],
    [
      0.6413120969634749,
      0.6968256366040269,
      0.3211741372833486
    ],
    [
      0.6403265787225096,
      0.6973524064473798,
      0.32199610836712633
    ],
    [
      0.611489836719946,
      0.7340702489398621,
      0.29533209986315895
    ],
    [
      0.6277368208366554,
      0.6993731246149955,
      0.34179484538557187
    ],
    [
      0.598450554978885,
      0.7374220390820443,
      0.3131543860806434
    ],
    [
      0.5964221537946189,
      0.7384536751411255,
      0.3145898665461954
    ],
    [
      0.6273063642073597,
      0.6990622217244182,
      0.34321820403740777
    ],
    [
      0.615490631167907,
      0.7006221802276027,
      0.36097069620351746
    ],
    [
      0.5833455570917104,
      0.7414104892246176,
      0.33169028850582183
    ],
    [
      0.6147851525996364,
      0.7001823684686719,
      0.36302047742330307
    ],
    [
      0.6040501146292785,
      0.7013330092545026,
      0.378491042359498
    ],
    [
      0.6008090902901334,
      0.7026739431167258,
      0.38115320632199157
    ],
    [
      0.5688868404835414,
      0.7451685293793852,
      0.3479822201596198
    ],
    [
      0.580275203134375,
      0.7428582978585552,
      0.33382965406034537
    ],
    [
      0.5560881394005226,
      0.7488620076914018,
      0.36051584521969054
    ],
    [
      0.563677747791509,
      0.7474484002435738,
      0.35155125603248
    ],
    [
      0.5917089527186281,
      0.7034655752537732,
      0.39372160177656296
    ],
    [
      0.5816704421947468,
      0.7073819949659789,
      0.4015846235538899
    ],
    [
      0.5746786740980129,
      0.7078600764062919,
      0.4107049229885472
    ],
    [
      0.5626401278214317,
      0.7121966514738866,
      0.4197761501020115
    ],
    [
      0.5409942251427453,
      0.75415742832158,
      0.37225236287978286
    ],
    [
      0.5447681273207532,
      0.7535207672591197,
      0.3680137779549391
    ],
    [
      0.5593397814063393,
      0.712422430163439,
      0.4237844852473112
    ],
    [
      0.5464331579788978,
      0.7167968939791625,
      0.43314318261174817
    ],
    [
      0.5413665702129021,
      0.7195148196893649,
      0.4349950125039363
    ],
    [
      0.5256882509679436,
      0.7600684524365602,
      0.3820311641803021
    ],
    [
      0.5220846357156235,
      0.7620563295927779,
      0.38301146676994957
    ],
    [
      0.5311738862603204,
      0.7227654047230646,
      0.44211364182822144
    ],
    [
      0.5077801833955798,
      0.7345920735483288,
      0.45003752158094334
    ],
    [
      0.5018636451092712,
      0.7692980582748207,
      0.39536486851037483
    ],
    [
      0.4862126119131618,
      0.7798713098210214,
      0.3942055759811439
    ],
    [
      0.4821337136684507,
      0.7360663702530069,
      0.47513511838931843
    ],
    [
      0.4697589118708897,
      0.744866955687479,
      0.4738140806716753
    ],
    [
      0.47904980700284133,
      0.7822679076031583,
      0.398206231926017
    ],
    [
      0.4441916966293755,
      0.7978610044833803,
      0.40756785222866665
    ],
    [
      0.44906759056578804,
      0.7963986273684621,
      0.40507718453285824
    ],
    [
      0.46794750022285186,
      0.7458618362175311,
      0.47404140990993265
    ],
    [
      0.44954907744199507,
      0.7585147486869271,
      0.471763715217119
    ],
    [
      0.4263330304720308,
      0.7783291740698082,
      0.46091630901970115
    ],
    [
      0.4188618825669763,
      0.7808305711221322,
      0.46352814643075707
    ],
    [
      0.3905380662158405,
      0.8073842569650757,
      0.4422789622414168
    ],
    [
      0.41056859083403885,
      0.8214063055899467,
      0.39588522750618854
    ],
    [
      0.42802385157542067,
      0.8112717041477512,
      0.3982885945288238
    ],
    [
      0.3776744013477125,
      0.8141359403440888,
      0.4410722358148304
    ],
    [
      0.37124867215820373,
      0.8198169650315019,
      0.4359754204852698
    ],
    [
      0.3936827963939367,
      0.832498380336117,
      0.3898208595767961
    ],
    [
      0.3988207156094191,
      0.830523174715151,
      0.3888100989710242
    ],
    [
      0.3746922770224694,
      0.8425509207053502,
      0.38692847343958
    ],
    [
      0.34946711043663264,
      0.8305250557549821,
      0.43370597238942205
    ],
    [
      0.3481022208004952,
      0.830887928156096,
      0.4341083905181211
    ],
    [
      0.3333766470923719,
      0.8430046175937851,
      0.4221412392659645
    ],
    [
      0.35590143581403805,
      0.8536314214085907,
      0.38032560309484187
    ],
    [
      0.36740724501169253,
      0.8479107553985259,
      0.3821770102876669
    ],
    [
      0.31512846507655756,
      0.8533461673059605,
      0.4153244144553996
    ],
    [
      0.33831838212715454,
      0.8658465634923851,
      0.3685788935944267
    ],
    [
      0.3216535070417288,
      0.8482807259935675,
      0.42066474931420444
    ],
    [
      0.3026284039974643,
      0.8586682104612037,
      0.41364834514029136
    ],
    [
      0.29614323890654387,
      0.8635132288944712,
      0.4082206334498372
    ],
    [
      0.3236973437006415,
      0.8783673975316947,
      0.3516969499932387
    ],
    [
      0.3260624427083515,
      0.8778725475737074,
      0.35074645211535915
    ],
    [
      0.2748536833998612,
      0.8719461180769403,
      0.4051733208049159
    ],
    [
      0.299189776669185,
      0.8856063280405588,
      0.3552279680306175
    ],
    [
      0.2710422836899928,
      0.8726568029697809,
      0.4062095329785781
    ],
    [
      0.25685704465129683,
      0.8823924471771103,
      0.3942182489152327
    ],
    [
      0.2786587309490847,
      0.8939004949551655,
      0.3511284904201817
    ],
    [
      0.24089626730023403,
      0.8880357997967246,
      0.39161384893821827
    ],
    [
      0.23701854118745755,
      0.8904432504485879,
      0.3885010023975778
    ],
    [
      0.2582783497730143,
      0.9030536624795334,
      0.3432001991852995
    ],
    [
      0.2708307630996439,
      0.8983557526748869,
      0.34584337407965804
    ],
    [
      0.21691182073436024,
      0.8970874485512207,
      0.38494593344723826
    ],
    [
      0.23875743588985396,
      0.9132902297363796,
      0.3299937015692469
    ],
    [
      0.21598259853007884,
      0.9291937008090304,
      0.29991762787307613
    ],
    [
      0.20787214701121784,
      0.8983218479033968,
      0.38704912876322706
    ],
    [
      0.18971937035448103,
      0.9079807822709558,
      0.3736006685472104
    ],
    [
      0.2087921448262621,
      0.9323713790997621,
      0.2951092199414598
    ],
    [
      0.1741149260772819,
      0.9095818735692973,
      0.37728610866459084
    ],
    [
      0.14049783249754647,
      0.9181603547872108,
      0.3704617685544819
    ],
    [
      0.11052039292383649,
      0.9364578074849494,
      0.3329144297690358
    ],
    [
      0.10681166197868369,
      0.9393196828370108,
      0.32599049418706766
    ],
    [
      -0.03614319182647266,
      0.9520914900686702,
      0.303669992299888
    ],
    [
      -0.0067527007698776845,
      0.9499807853000176,
      0.3122353416784752
    ],
    [
      0.043788587489618586,
      0.9375645168071082,
      0.34504396303937507
    ],
    [
      0.04048283314752114,
      0.9353580254540842,
      0.35137800790457374
    ],
    [
      -0.02977928387280573,
      0.9310498243500765,
      0.3636748806691416
    ],
    [
      -0.042492935129162746,
      0.9318917852176171,
      0.3602388806167809
    ],
    [
      -0.11081544853206325,
      0.9224941963957075,
      0.36976261842278674
    ],
    [
      -0.12891510584314653,
      0.9328408087242737,
      0.33643561206283357
    ],
    [
      -0.13002223906188282,
      0.9361639513423682,
      0.3266363016512077
    ],
    [
      -0.11700793070822595,
      0.9410314836108638,
      0.3174411614843222
    ],
    [
      -0.05885708594511338,
      0.9555654555526001,
      0.2888433893801302
    ],
    [
      -0.21240118551491316,
      0.9280150433996072,
      0.3060617839846797
    ],
    [
      -0.1958184591212256,
      0.9327548730448897,
      0.30269370307028265
    ],
    [
      -0.18149065871378117,
      0.9354954869989051,
      0.3031655234427545
    ],
    [
      -0.16509273269315558,
      0.937249782060804,
      0.3070948316707425
    ],
    [
      -0.1409027439017488,
      0.9377172449996204,
      0.3175417849532246
    ],
    [
      -0.19717648475216407,
      0.9064560284601986,
      0.37344196648066125
    ],
    [
      -0.2353081106199976,
      0.9171710446757817,
      0.32160125603732087
    ],
    [
      -0.22735365791865011,
      0.9218924828356676,
      0.3137268944832396
    ],
    [
      -0.2537992441180473,
      0.9067611631754726,
      0.3367048212333346
    ],
    [
      -0.24211337704468483,
      0.9141977073772306,
      0.32499794535078774
    ],
    [
      -0.19730097182524406,
      0.9063630292865466,
      0.3736019079974418
    ],
    [
      -0.21430932039844255,
      0.8987278416786018,
      0.3825699697860248
    ],
    [
      -0.25583369552606916,
      0.9058245055817821,
      0.3376848905725492
    ],
    [
      -0.22509033603299586,
      0.8895350256995135,
      0.3975698412585125
    ],
    [
      -0.2270146379681417,
      0.8889703519731087,
      0.3977386924363794
    ],
    [
      -0.2700722678214835,
      0.8960954666733058,
      0.3522412309218093
    ],
    [
      -0.2698709734956384,
      0.8963340745097566,
      0.3517881244971958
    ],
    [
      -0.28298221714324767,
      0.886884775359527,
      0.3651800378117251
    ],
    [
      -0.2440096511410269,
      0.8805605831662734,
      0.4062909665792569
    ],
    [
      -0.2854114734104211,
      0.8836156699841652,
      0.3711652443375152
    ],
    [
      -0.29474619361548715,
      0.8766066838886415,
      0.38037534503558595
    ],
    [
      -0.2520096608999119,
      0.8727192876968599,
      0.41815329210111074
    ],
    [
      -0.2579540881552657,
      0.8696039433522637,
      0.4210091092959609
    ],
    [
      -0.297769066621768,
      0.8720949167720795,
      0.38830920553535786
    ],
    [
      -0.2677496354018538,
      0.859424093349794,
      0.43554604867001045
    ],
    [
      -0.3106092808764976,
      0.8581953712943353,
      0.4086839601970733
    ],
    [
      -0.3063462512039424,
      0.8653798287051573,
      0.3965724731288391
    ],
    [
      -0.26762497610087926,
      0.8594931029740276,
      0.4354864844137891
    ],
    [
      -0.2784205497630418,
      0.8477284739836265,
      0.45148469726784474
    ],
    [
      -0.32139039106917094,
      0.844656048808905,
      0.42809388659374004
    ],
    [
      -0.316626442794408,
      0.8532652145107509,
      0.41435029797175454
    ],
    [
      -0.2784285505796379,
      0.8464038903615635,
      0.4539581441090496
    ],
    [
      -0.28851043753091943,
      0.8348003943573016,
      0.46890300597950024
    ],
    [
      -0.33040244786896433,
      0.8312868614539438,
      0.446985879437201
    ],
    [
      -0.3250616046491744,
      0.8415066375170963,
      0.4315107555989469
    ],
    [
      -0.33293261226763665,
      0.8290300755733542,
      0.44929390100855604
    ],
    [
      -0.28831833830900067,
      0.8322520876524254,
      0.4735282445566645
    ],
    [
      -0.2971792928928876,
      0.8216262008369098,
      0.486430728854571
    ],
    [
      -0.3389167113581989,
      0.8168628975728889,
      0.4667659684798873
    ],
    [
      -0.2965560467813011,
      0.8170691821662576,
      0.4944213412380274
    ],
    [
      -0.30367019588720917,
      0.8081921879959263,
      0.5045887428314085
    ],
    [
      -0.34504836064252553,
      0.8016762833607368,
      0.4881155247631662
    ],
    [
      -0.34550356126016213,
      0.8031416089407705,
      0.4853770134076973
    ],
    [
      -0.339261357266137,
      0.8165434731392354,
      0.4670743922970445
    ],
    [
      -0.3026080745639774,
      0.8018533607886232,
      0.5152276593901693
    ],
    [
      -0.3087477063742729,
      0.7939158802201209,
      0.5238057167910029
    ],
    [
      -0.34991501989771073,
      0.7863396028870049,
      0.5091458610079161
    ],
    [
      -0.3507315782108166,
      0.7888454187695156,
      0.504688285312922
    ],
    [
      -0.3072667818173543,
      0.7859951149338366,
      0.5364688286300999
    ],
    [
      -0.3124692065666653,
      0.7790144082277554,
      0.5435987000730951
    ],
    [
      -0.35390259379739014,
      0.7705256420239347,
      0.5301350668339935
    ],
    [
      -0.35508822230713527,
      0.7741258868609174,
      0.5240624635199095
    ],
    [
      -0.3106102556371772,
      0.7693338882793541,
      0.5582532019057104
    ],
    [
      -0.3141915860497722,
      0.764301059968466,
      0.5631407790123248
    ],
    [
      -0.3566903418737704,
      0.7532500478374229,
      0.5526177389904282
    ],
    [
      -0.35858719450057813,
      0.7589994545843385,
      0.5434473772877014
    ],
    [
      -0.31184350241159675,
      0.752630172955985,
      0.5799150392599872
    ],
    [
      -0.3147652536496345,
      0.7484231773326807,
      0.5837684324508615
    ],
    [
      -0.35775540643451487,
      0.7361771524840046,
      0.574503498098504
    ],
    [
      -0.36026962541236146,
      0.74402204698979,
      0.5627050653747124
    ],
    [
      -0.311755134813575,
      0.7342228421339682,
      0.6030966373692427
    ],
    [
      -0.31294418955783365,
      0.732406766499907,
      0.6046869128790051
    ],
    [
      -0.3575469392272778,
      0.7182784048273906,
      0.5968553588666392
    ],
    [
      -0.36067935079002517,
      0.7282929286903833,
      0.5826661273261645
    ],
    [
      -0.3563278775224711,
      0.6999534981169412,
      0.6189471255076544
    ],
    [
      -0.3598568067566207,
      0.7117396317801276,
      0.6032659241034725
    ],
    [
      -0.3095391149994394,
      0.7159777587929527,
      0.625748659766191
    ],
    [
      -0.3097736870186622,
      0.7155978806300569,
      0.626067037998835
    ],
    [
      -0.30615932285024433,
      0.6977094821518982,
      0.6476634523787874
    ],
    [
      -0.35416467542909064,
      0.6811238091056017,
      0.6408102210075014
    ],
    [
      -0.358080982090825,
      0.6947465853153793,
      0.6237829690344958
    ],
    [
      -0.3059853554389322,
      0.6976120028880092,
      0.6478506430370281
    ],
    [
      -0.3023915064671167,
      0.6794082991897828,
      0.6685534681748306
    ],
    [
      -0.3509519997301588,
      0.6604514769993267,
      0.6638045950540042
    ],
    [
      -0.35552271944135977,
      0.6769268030088489,
      0.6444949180010958
    ],
    [
      -0.2802910789154769,
      0.6668657837222041,
      0.6904541531347091
    ],
    [
      -0.34560463873187075,
      0.6393971281565547,
      0.6868251205308114
    ],
    [
      -0.34660474208368003,
      0.6402346738843493,
      0.6855397254144405
    ],
    [
      -0.3514914702673131,
      0.6586872178094645,
      0.6652705430302396
    ],
    [
      -0.2727383585569686,
      0.6657967750390041,
      0.6944986984288107
    ],
    [
      -0.28477899221663844,
      0.6425988261712793,
      0.711314047517248
    ],
    [
      -0.3379530727302951,
      0.6177184340739403,
      0.7100786272219373
    ],
    [
      -0.3406498662216512,
      0.6200860424635821,
      0.7067184507178398
    ],
    [
      -0.279822781971388,
      0.6187033681526601,
      0.7341017320006451
    ],
    [
      -0.33079741580395033,
      0.5968509033745302,
      0.7309870510743919
    ],
    [
      -0.333329358244843,
      0.5992034614079261,
      0.7279057293144773
    ],
    [
      -0.27522395027912666,
      0.6161734722241079,
      0.7379580132501031
    ],
    [
      -0.2708093684162921,
      0.5949010093761326,
      0.7568058370686815
    ],
    [
      -0.32386654564848344,
      0.5747406778728692,
      0.7515208671806483
    ],
    [
      -0.3259756086590226,
      0.5767637169325562,
      0.7490550830142746
    ],
    [
      -0.2642196551971889,
      0.5687581501237607,
      0.7789108681198872
    ],
    [
      -0.3174071231885899,
      0.550985912953766,
      0.771794818507904
    ],
    [
      -0.31867316150543723,
      0.552215668770132,
      0.77039293305487
    ],
    [
      -0.26578458342173306,
      0.5919026391042804,
      0.7609269485546716
    ],
    [
      -0.26065699844931756,
      0.5659611433241497,
      0.782141875497415
    ],
    [
      -0.26004770009713896,
      0.5409006259087207,
      0.7998760570024226
    ],
    [
      -0.31082260342916784,
      0.5249939349822594,
      0.7923198075457646
    ],
    [
      -0.3118222782097201,
      0.5259536607525926,
      0.7912898416844782
    ],
    [
      -0.2554750810429318,
      0.5373301725174003,
      0.8037467067854949
    ],
    [
      -0.25522725514852346,
      0.5125565287558016,
      0.8198444078355074
    ],
    [
      -0.3013466707818668,
      0.4956937680213857,
      0.814541510515852
    ],
    [
      -0.30526805935109474,
      0.4992155934829633,
      0.8109224396719265
    ],
    [
      -0.24736944653770818,
      0.5071466510737365,
      0.8255971361531735
    ],
    [
      -0.24768663056585258,
      0.48223705136060024,
      0.840296828111334
    ],
    [
      -0.2946553833252555,
      0.46228396654019327,
      0.8363442708342732
    ],
    [
      -0.2227730429916897,
      0.4672943269847473,
      0.8555747677930285
    ],
    [
      -0.2456436298256692,
      0.43864146319115205,
      0.8644378947591288
    ],
    [
      -0.2751229841304114,
      0.4346896910522637,
      0.8575268019695157
    ],
    [
      -0.2982081271405272,
      0.4520790951656179,
      0.8406523684743744
    ],
    [
      0.45985980867918796,
      0.8155380795853439,
      0.3513212164213683
    ],
    [
      0.4407204303111814,
      0.8244856543549723,
      0.35494916265456955
    ],
    [
      0.41146494199098366,
      0.8400757155560761,
      0.35351010402151634
    ],
    [
      0.4326189172284546,
      0.8308360169488364,
      0.350074828282001
    ],
    [
      0.38577884732197953,
      0.8570825486116405,
      0.34144426459423777
    ],
    [
      0.39273246942229173,
      0.8542109963534018,
      0.34071216762892004
    ],
    [
      0.4102400571389739,
      0.8416865162277082,
      0.35109386767512124
    ],
    [
      0.327856985900731,
      0.8786196492588977,
      0.3471848336725835
    ],
    [
      0.35104949182148515,
      0.8739565149708153,
      0.33610156832711185
    ],
    [
      0.3736626352789686,
      0.8652539668595297,
      0.33423316386951235
    ],
    [
      0.29125312828477173,
      0.9067188724389966,
      0.3050122975017382
    ],
    [
      0.32132988188826567,
      0.8971151375388806,
      0.30320213885173775
    ],
    [
      0.27877690547908573,
      0.9132569789442367,
      0.29706081428076453
    ],
    [
      0.08466015493042771,
      0.9441934252535675,
      0.31832598680455204
    ],
    [
      0.007333118427612099,
      0.9659299687663429,
      0.25869967300555036
    ],
    [
      -0.05355254489311081,
      0.9618520845689416,
      0.2682772676651028
    ],
    [
      -0.027526203874470908,
      0.9657989529147921,
      0.25782686176764485
    ],
    [
      -0.10413866007818155,
      0.9684495362714788,
      0.22640811640194952
    ],
    [
      -0.1328478063401973,
      0.9657840166389231,
      0.22273907056326153
    ],
    [
      -0.14154429026152712,
      0.9640969910513574,
      0.2246824553454931
    ],
    [
      -0.18161487071400392,
      0.9608871470617221,
      0.20907398055980148
    ],
    [
      -0.17852566135904305,
      0.9621085591424726,
      0.20609635770947396
    ],
    [
      -0.20604685088070263,
      0.9528929477422224,
      0.22257521287260046
    ],
    [
      -0.22114341945223417,
      0.9488577010796087,
      0.22531012213145954
    ],
    [
      -0.23226226597622443,
      0.9447071052776135,
      0.23147942682143874
    ],
    [
      -0.25400801611131474,
      0.9356387096211357,
      0.24507168912318295
    ],
    [
      -0.24868086475500184,
      0.9386317432972286,
      0.23901522541359177
    ],
    [
      -0.2364180891629368,
      0.9434897166708417,
      0.2322361764517333
    ],
    [
      -0.273109109020456,
      0.9258207883847132,
      0.2612800841334083
    ],
    [
      -0.2637980424967828,
      0.9315145609606481,
      0.2503821389259957
    ],
    [
      -0.27704009100118154,
      0.9240622614943506,
      0.2633585481050567
    ],
    [
      -0.28933111489252983,
      0.915994612862805,
      0.277923326047609
    ],
    [
      -0.28970240803782504,
      0.915819972300024,
      0.2781120154065065
    ],
    [
      -0.30335515880697284,
      0.9057156380983759,
      0.2960655848443857
    ],
    [
      -0.3026334820741194,
      0.9067970667063711,
      0.2934826320933062
    ],
    [
      -0.31508109921920324,
      0.897028964187866,
      0.3099402173369286
    ],
    [
      -0.3160265051855411,
      0.895385155543189,
      0.31370793941676467
    ],
    [
      -0.32760173491846534,
      0.884176026513864,
      0.33303131596978464
    ],
    [
      -0.3259707360341185,
      0.8876195460125597,
      0.3253838053527444
    ],
    [
      -0.3383898783768907,
      0.8726640440238853,
      0.3520649890005415
    ],
    [
      -0.3367843006181665,
      0.8766534605959998,
      0.3435913923284317
    ],
    [
      -0.3482481436700083,
      0.8609359066197542,
      0.3708269072265591
    ],
    [
      -0.346613741878524,
      0.8656004094842341,
      0.3613790877204909
    ],
    [
      -0.3574630091415646,
      0.8490400433155454,
      0.38903881804030116
    ],
    [
      -0.3559254294203276,
      0.8540408793601081,
      0.37938274219285306
    ],
    [
      -0.36606444302639096,
      0.8360979712105491,
      0.40857925313136245
    ],
    [
      -0.3644859222685622,
      0.8424829156912849,
      0.39670209129313533
    ],
    [
      -0.3737667880414182,
      0.8228276625772598,
      0.42808063008602076
    ],
    [
      -0.3723181088485972,
      0.8300534393535507,
      0.41519936613721536
    ],
    [
      -0.38049921750150406,
      0.8088256206819139,
      0.4483541689437713
    ],
    [
      -0.3791620820145819,
      0.8174391049148181,
      0.4336235986641277
    ],
    [
      -0.3862733102837213,
      0.79449573013144,
      0.4685823989069222
    ],
    [
      -0.38504153437588834,
      0.8041352314977912,
      0.4528902143670753
    ],
    [
      -0.39103715259647864,
      0.7799637419273393,
      0.4886169323385561
    ],
    [
      -0.38990441484972566,
      0.7906047695015225,
      0.4721426116356556
    ],
    [
      -0.39435827281773084,
      0.7762967770262337,
      0.4917772530718541
    ],
    [
      -0.3953716243177765,
      0.7647706517077784,
      0.5087309003498638
    ],
    [
      -0.39920161287931877,
      0.7488675365632862,
      0.5289947872674983
    ],
    [
      -0.3982765811835048,
      0.7614626822450049,
      0.5114199335468084
    ],
    [
      -0.40221358050164546,
      0.7320013990150938,
      0.5499074353925322
    ],
    [
      -0.40134603126651514,
      0.7463412007851822,
      0.5309389561871967
    ],
    [
      -0.40401870867963646,
      0.7148345924124136,
      0.5707717481861007
    ],
    [
      -0.40314550363517115,
      0.7308554779609838,
      0.5507485571775619
    ],
    [
      -0.40393505013790665,
      0.7147715601079202,
      0.5709098809190262
    ],
    [
      -0.40423658417364366,
      0.6973097339548218,
      0.5919053293791843
    ],
    [
      -0.4048099400515231,
      0.6977697028535864,
      0.5909706881183704
    ],
    [
      -0.4034889439791424,
      0.6791372191339504,
      0.6131633629577041
    ],
    [
      -0.4051010482986892,
      0.6804817687342222,
      0.6106043752608129
    ],
    [
      -0.4017661749279443,
      0.660380033058655,
      0.6344148111616076
    ],
    [
      -0.4043180279538235,
      0.6625751122301867,
      0.6304927857832211
    ],
    [
      -0.3990248342230896,
      0.6408539196546085,
      0.6558089930281229
    ],
    [
      -0.40256393661783274,
      0.6439634586076365,
      0.6505792349228834
    ],
    [
      -0.39497198938953854,
      0.6202375194184889,
      0.6777186341714899
    ],
    [
      -0.39980582746184495,
      0.6245861500352607,
      0.6708557531330266
    ],
    [
      -0.3901069632299599,
      0.5991565814148364,
      0.6991623189122718
    ],
    [
      -0.3957278038587485,
      0.6045154883637807,
      0.6913468952569553
    ],
    [
      -0.38367388518014833,
      0.5773724017263726,
      0.7207187104241782
    ],
    [
      -0.3908577784980976,
      0.5842727263412247,
      0.7112352481713237
    ],
    [
      -0.3763830337035199,
      0.5545771189489687,
      0.7421455592256794
    ],
    [
      -0.38449972228423807,
      0.5624472795074316,
      0.7319925008755438
    ],
    [
      -0.368146194918777,
      0.531030699959662,
      0.7632003504108061
    ],
    [
      -0.37731957826695983,
      0.5398077210844632,
      0.7524875813686509
    ],
    [
      -0.35956465929346304,
      0.5061096552784928,
      0.7839427738177455
    ],
    [
      -0.36936357751497473,
      0.5152999728102259,
      0.7733281875291498
    ],
    [
      -0.3492195914290251,
      0.479284819352624,
      0.80519049851589
    ],
    [
      -0.3611188829901911,
      0.489688058094579,
      0.7935986127177119
    ],
    [
      -0.31623217436286205,
      0.44215539834404255,
      0.8393424900557325
    ],
    [
      -0.32603298192737645,
      0.4426364513636744,
      0.8353295556962632
    ],
    [
      -0.351128056608938,
      0.4629736809425956,
      0.813857763135853
    ],
    [
      -0.2810808769444665,
      0.38396020861047386,
      0.8795272018646899
    ],
    [
      -0.2867211505069215,
      0.3808105907293014,
      0.8790758077892872
    ],
    [
      -0.3225675565852457,
      0.40594555606856325,
      0.855077994657101
    ],
    [
      -0.048145414733393885,
      0.9895044749210827,
      0.13624578214132632
    ],
    [
      -0.06731388129005547,
      0.989920088874513,
      0.12460762026595523
    ],
    [
      -0.08342524576331314,
      0.9903381352558044,
      0.11077276843785691
    ],
    [
      -0.06825325291766254,
      0.9903788595280139,
      0.12037943373412323
    ],
    [
      -0.09935286355730014,
      0.9905447652317907,
      0.09460484435197387
    ],
    [
      -0.08490698910766388,
      0.9909388652098128,
      0.10407193962523961
    ],
    [
      -0.13024358721447535,
      0.9869524622288463,
      0.09466491055255516
    ],
    [
      -0.11462107010567607,
      0.9903581827726311,
      0.07779897237831249
    ],
    [
      -0.10119764268879201,
      0.9910408871484286,
      0.08716075443849235
    ],
    [
      -0.15433037563863178,
      0.9843274507005993,
      0.08533232067920046
    ],
    [
      -0.12925318348745007,
      0.9896713665995657,
      0.06200161845716243
    ],
    [
      -0.11655066392809348,
      0.9906279694448854,
      0.07121916098511573
    ],
    [
      -0.1460481884612854,
      0.9882878687743712,
      0.044238163169234686
    ],
    [
      -0.13136070491573176,
      0.9898088228487995,
      0.05498053668996052
    ],
    [
      -0.1945579275725177,
      0.9793998001637825,
      0.0540670348533166
    ],
    [
      -0.17730467080335735,
      0.9837721602327042,
      0.02748436760035841
    ],
    [
      -0.16317628862250225,
      0.986189202739389,
      0.028361157092653227
    ],
    [
      -0.14743298971578755,
      0.9882585823778046,
      0.040105958411142784
    ],
    [
      -0.22145562264967342,
      0.9743049389470005,
      0.04107667391996245
    ],
    [
      -0.20497215664587382,
      0.9787571147234068,
      0.0045744265489138965
    ],
    [
      -0.19898172844931894,
      0.979991905960885,
      0.004704890484750479
    ],
    [
      -0.1810476712559622,
      0.9833050678712435,
      0.018245115278401402
    ],
    [
      -0.24945011483156354,
      0.968368996856455,
      -0.006010502287065278
    ],
    [
      -0.24454416681279492,
      0.9696084677767399,
      -0.007587469504311323
    ],
    [
      -0.21932943833677188,
      0.9756314604344073,
      -0.006152307656609177
    ],
    [
      -0.22623918906330323,
      0.9732067691134269,
      0.041041611612898
    ],
    [
      -0.25995416250356923,
      0.9653015465243542,
      0.024834606394264484
    ],
    [
      -0.29721967866172716,
      0.9536054551187898,
      0.047928056333482356
    ],
    [
      -0.3067021259526934,
      0.9509772701393667,
      0.03969934022595157
    ],
    [
      -0.2828916781754385,
      0.9577907929320381,
      -0.05107930494536788
    ],
    [
      -0.2790545883458191,
      0.958800448676328,
      -0.053199965612937106
    ],
    [
      -0.3162887533002754,
      0.9480391316928383,
      0.0343981004540456
    ],
    [
      -0.34079095181259955,
      0.9394093116028881,
      -0.03703609639865341
    ],
    [
      -0.3908283234730299,
      0.9204049478054048,
      0.010390073464166927
    ],
    [
      -0.4082516054729471,
      0.9119391633716961,
      -0.04120180745661609
    ],
    [
      -0.40218909064979114,
      0.9137049447108092,
      -0.058199736883522764
    ],
    [
      -0.37901898511084914,
      0.923755146091254,
      -0.054963979072371084
    ],
    [
      -0.3606819529849901,
      0.9315097667903306,
      -0.046883719617340225
    ],
    [
      -0.35345170186072133,
      0.9345505547230224,
      -0.04107499383628646
    ],
    [
      -0.3724976635220881,
      0.9280330735081205,
      -0.0003242617101642499
    ],
    [
      -0.3917625175883076,
      0.9199869528570084,
      0.01208868833859318
    ],
    [
      -0.40586535674559676,
      0.913700742576122,
      0.020597699133950046
    ],
    [
      -0.4254432930676912,
      0.9048250548467522,
      -0.017018357890538696
    ],
    [
      -0.41068875436879126,
      0.9113211688606653,
      0.02878322812752727
    ],
    [
      -0.41306265408794784,
      0.9101966693771766,
      0.030352378037232283
    ],
    [
      -0.4397991081943571,
      0.8980470855018705,
      0.0093902424380058
    ],
    [
      -0.4400886695439129,
      0.8979517060082391,
      0.002167167728018802
    ],
    [
      -0.4285401747020259,
      0.9033914213691298,
      -0.015403196519571763
    ],
    [
      -0.42109693182638847,
      0.9059388608565607,
      0.04418319133243962
    ],
    [
      -0.4547016575285657,
      0.890128615331951,
      0.03028945044068195
    ],
    [
      -0.44045231823614905,
      0.8941596689303373,
      0.0804999491850259
    ],
    [
      -0.46534701430538317,
      0.8832490734017644,
      0.057647468391857776
    ],
    [
      -0.4583044059590843,
      0.8882303457294402,
      0.03168476611638844
    ],
    [
      -0.42176384957564944,
      0.9051280531336475,
      0.053464592223470005
    ],
    [
      -0.43483195787441387,
      0.8972862620739012,
      0.0761480945562669
    ],
    [
      -0.3728552268137829,
      0.9259089631703745,
      0.060593496007446755
    ],
    [
      -0.3727473678535002,
      0.9259750307966478,
      0.060246511097611546
    ],
    [
      -0.36231164108109554,
      0.9308555556858229,
      0.04730971555570069
    ],
    [
      -0.3452295756664186,
      0.9377395392068126,
      0.0382242945439042
    ],
    [
      -0.38520811705267394,
      0.9190755882845512,
      0.08315509350689147
    ],
    [
      -0.3824359416244189,
      0.9211275447323704,
      0.07257270071562127
    ],
    [
      -0.39429180002621306,
      0.9126714562558286,
      0.10753971065589601
    ],
    [
      -0.39017554169082114,
      0.9164098654573211,
      0.08919644140193561
    ],
    [
      -0.4004885101331423,
      0.9068094348728223,
      0.13155075855717727
    ],
    [
      -0.40060886938968604,
      0.906811521541346,
      0.1311693491871726
    ],
    [
      -0.3961977992041475,
      0.9115869090271229,
      0.10971149072073627
    ],
    [
      -0.4040790457729156,
      0.901615740394392,
      0.154302240555095
    ],
    [
      -0.4046439369393143,
      0.9016266555539866,
      0.15275031356034935
    ],
    [
      -0.4059130241265258,
      0.8964360316644786,
      0.17786809151194136
    ],
    [
      -0.40770838810524973,
      0.8964495407912547,
      0.173643574841592
    ],
    [
      -0.40700921437790777,
      0.8911716489312609,
      0.20039109649037706
    ],
    [
      -0.40918289264347374,
      0.8912041989452134,
      0.19576627940056476
    ],
    [
      -0.40898164050110997,
      0.8850693325189808,
      0.2222302732919767
    ],
    [
      -0.41039086207462133,
      0.8851466122918625,
      0.2193053010619859
    ],
    [
      -0.412167550311137,
      0.8781374242168085,
      0.2428838707291724
    ],
    [
      -0.41236989992380196,
      0.878160946101066,
      0.24245498217135947
    ],
    [
      -0.41558469891843713,
      0.870141834592301,
      0.2648443801880956
    ],
    [
      -0.34445670182189514,
      0.9379922323476747,
      -0.03898913470965777
    ],
    [
      -0.43957298302025694,
      0.8927293571440384,
      0.09904487615149367
    ],
    [
      -0.44149306905614577,
      0.8926725604110525,
      0.09066184348755137
    ],
    [
      -0.43979032456471895,
      0.889731955243475,
      0.12231728511490902
    ],
    [
      -0.4414778917895324,
      0.8897229887853364,
      0.11614764004472033
    ],
    [
      -0.442345566246168,
      0.8850640741273595,
      0.14488610944958388
    ],
    [
      -0.45537017698838916,
      0.8744247318436987,
      0.16738993473216487
    ],
    [
      -0.44990565481419104,
      0.872390092389899,
      0.19110318800626414
    ],
    [
      -0.458834320634124,
      0.8720097115902531,
      0.170499645455659
    ],
    [
      -0.44782202339755417,
      0.8687531058785932,
      0.21147925757959868
    ],
    [
      -0.44816667974811364,
      0.8632824944756119,
      0.23214211572981955
    ],
    [
      -0.44981321828915766,
      0.8659394074438002,
      0.21867101154069546
    ],
    [
      -0.44987734107210614,
      0.8564332896267088,
      0.25324375295170815
    ],
    [
      -0.45137177918596694,
      0.8585911131978912,
      0.24307368695953277
    ],
    [
      -0.45266512842766876,
      0.8485433001038097,
      0.27398640359422555
    ],
    [
      -0.4539386192018978,
      0.8502014589539936,
      0.2666405992897092
    ],
    [
      -0.45576298112024405,
      0.8400647893803691,
      0.29422993505709777
    ],
    [
      -0.4570307747348875,
      0.8414818041053646,
      0.28815142599822297
    ],
    [
      -0.4593687751082218,
      0.8302985077403505,
      0.315570462020321
    ],
    [
      -0.46083360671367446,
      0.8315927426760287,
      0.30997725279740584
    ],
    [
      -0.4642122784799099,
      0.8197151122741783,
      0.33552063307317176
    ],
    [
      -0.46503427964913774,
      0.82039252012701,
      0.3327149405585223
    ],
    [
      -0.4693242442897533,
      0.808238484542769,
      0.3556477271484526
    ],
    [
      -0.47005237824734697,
      0.8088023556516094,
      0.3533971012846885
    ],
    [
      -0.4736313612842704,
      0.7962016777853691,
      0.3764787137405943
    ],
    [
      -0.4749019469161316,
      0.7970813685027257,
      0.3730005801618673
    ],
    [
      -0.4774092724845208,
      0.7841561600060909,
      0.396458703108284
    ],
    [
      -0.4788506680762433,
      0.7850657378422402,
      0.3929043458007997
    ],
    [
      -0.4815222912870889,
      0.7711269976969958,
      0.41653263547584035
    ],
    [
      -0.4828311803803446,
      0.7719078086733329,
      0.4135606196939651
    ],
    [
      -0.4849862947163131,
      0.757687023929609,
      0.4366905857767415
    ],
    [
      -0.48671844189393776,
      0.7586250290175413,
      0.4331203339355847
    ],
    [
      -0.488467535612875,
      0.7435156074232113,
      0.45670998256046236
    ],
    [
      -0.4901744393365623,
      0.744446406392064,
      0.45335258577737114
    ],
    [
      -0.4910852795935615,
      0.7288735276891293,
      0.477052018967028
    ],
    [
      -0.4934009325475933,
      0.7301181150283699,
      0.4727399474008785
    ],
    [
      -0.4936659965908263,
      0.7139433843207129,
      0.49656694190680184
    ],
    [
      -0.49582040441047576,
      0.7151888522788403,
      0.49261245634505374
    ],
    [
      -0.4956034148128473,
      0.6982299903446311,
      0.516577328005383
    ],
    [
      -0.4983082642292866,
      0.6997388030300669,
      0.5119125719640464
    ],
    [
      -0.4975542050631933,
      0.6818848464040077,
      0.5361649646037276
    ],
    [
      -0.5001664633396421,
      0.6834672762955611,
      0.5317010355297811
    ],
    [
      -0.49901672344091025,
      0.6649310707643995,
      0.5557418293222198
    ],
    [
      -0.5019542233463037,
      0.6668345764758064,
      0.5507936140526151
    ],
    [
      -0.499995066907355,
      0.6474267330344868,
      0.5751900194028065
    ],
    [
      -0.5032451823639457,
      0.6496738625547327,
      0.569796594181374
    ],
    [
      -0.5007780213782477,
      0.6292827174389789,
      0.5943270436696463
    ],
    [
      -0.504112398336818,
      0.6318054699615808,
      0.5888060274570287
    ],
    [
      -0.5003631241302209,
      0.6105121355190934,
      0.613931328728679
    ],
    [
      -0.5046915299877878,
      0.6137608165086545,
      0.6071112910144365
    ],
    [
      -0.49945013909594416,
      0.5911497360772571,
      0.6333178886568983
    ],
    [
      -0.5041437956949573,
      0.5948730411946661,
      0.6260711605896653
    ],
    [
      -0.49699860069338875,
      0.5711428851014814,
      0.6532902844117381
    ],
    [
      -0.5030047248707201,
      0.5758623452464712,
      0.6444911218046103
    ],
    [
      -0.49284946036509025,
      0.5507262292510949,
      0.6736468138666655
    ],
    [
      -0.5002783618011604,
      0.5564942077650077,
      0.663351910706183
    ],
    [
      -0.49591302901988393,
      0.5365417708073624,
      0.682783417949809
    ],
    [
      -0.4876961797150344,
      0.5298860280713604,
      0.6938106611649307
    ],
    [
      -0.48047304057769574,
      0.5084803198704582,
      0.7145582002765489
    ],
    [
      -0.49054756473075206,
      0.5163363147885496,
      0.7019685867382588
    ],
    [
      -0.4715973759895763,
      0.4866347616667136,
      0.7353791700186557
    ],
    [
      -0.4831770976939502,
      0.49551777160453625,
      0.7218047037032425
    ],
    [
      -0.4611531404568684,
      0.464243435834846,
      0.7561850390817217
    ],
    [
      -0.47423154352175995,
      0.4740878082800441,
      0.7418525413916118
    ],
    [
      -0.44919930799422747,
      0.440963027623887,
      0.7770274061873765
    ],
    [
      -0.4638747375517624,
      0.4517518029661708,
      0.7620633414474793
    ],
    [
      -0.43577110563871924,
      0.41695341334657343,
      0.797654934535636
    ],
    [
      -0.45201872471386934,
      0.4286070990435101,
      0.7822883273816336
    ],
    [
      -0.42048782645312227,
      0.3915897960915228,
      0.8184420684457321
    ],
    [
      -0.4389590974606888,
      0.4041532024914215,
      0.8024805914615166
    ],
    [
      -0.40277747160583505,
      0.36509633325485746,
      0.8393300756023633
    ],
    [
      -0.423827713239735,
      0.37898884350414835,
      0.8226405812925625
    ],
    [
      -0.3819112893426733,
      0.33741808728401096,
      0.8604026972564744
    ],
    [
      -0.4062033974702168,
      0.3528956928083683,
      0.8428899274999998
    ],
    [
      -0.35731727773794636,
      0.3081650694338273,
      0.8816794502600067
    ],
    [
      -0.38538465963999674,
      0.3257559804419022,
      0.8633433299218214
    ],
    [
      -0.3214708265961998,
      0.27413523669448275,
      0.9063698911868244
    ],
    [
      -0.36061140330986824,
      0.2975332989914355,
      0.883987189836007
    ],
    [
      -0.40890841634240005,
      0.910154825369693,
      -0.0664236471492939
    ],
    [
      -0.43670581166820915,
      0.8953437588321878,
      -0.08745048642208801
    ],
    [
      -0.43590712946718907,
      0.8947933210343004,
      -0.09659134077174081
    ],
    [
      -0.4392052170377171,
      0.8894682365981154,
      -0.12627364495369175
    ],
    [
      -0.40602035409021625,
      0.8995002142886034,
      -0.16139032362323377
    ],
    [
      0.5408088465146638,
      0.8278355137165573,
      -0.14904413360183774
    ],
    [
      0.5399397645152013,
      0.8279061782107666,
      -0.15177750418198102
    ],
    [
      0.5421952978365916,
      0.822053961033954,
      -0.17392971037829147
    ],
    [
      0.5393953597941582,
      0.8324488150015807,
      -0.12681331253064393
    ],
    [
      0.538542317815123,
      0.8325990123754812,
      -0.1294258726595594
    ],
    [
      0.5385698213276424,
      0.8363963866570245,
      -0.10190010766522446
    ],
    [
      0.5368263312714309,
      0.8368685685860505,
      -0.10709103121359444
    ],
    [
      0.5372029221686379,
      0.8395329218413969,
      -0.08122495649690178
    ],
    [
      0.5361279770505044,
      0.8398868389145155,
      -0.08459840448800618
    ],
    [
      0.5351893455650552,
      0.8426739930282787,
      -0.0589313657352738
    ],
    [
      0.534218394764671,
      0.8430706368398819,
      -0.061988773124283594
    ],
    [
      0.531732066742248,
      0.8461091999767657,
      -0.036881308446083644
    ],
    [
      0.531553193444747,
      0.8461943634512524,
      -0.03750069068725484
    ],
    [
      0.5281411065278475,
      0.8489862509902594,
      -0.017009327589447152
    ],
    [
      0.5221367721613509,
      0.8528602739479824,
      0.001595079401757541
    ],
    [
      0.5250896198584291,
      0.85094425650235,
      -0.01321981250219019
    ],
    [
      0.5131136801468974,
      0.8581156078811264,
      0.018760457268206184
    ],
    [
      0.5151172066583125,
      0.8570604163347182,
      0.01008494703491366
    ],
    [
      0.5012496086031517,
      0.8646161985427616,
      0.03446243016171252
    ],
    [
      0.501903246415521,
      0.8643262866038324,
      0.0321434522599983
    ],
    [
      0.48940220266493506,
      0.8707120576499899,
      0.048435489980288356
    ],
    [
      0.4668768390319847,
      0.8824168456380943,
      0.05802178650832878
    ],
    [
      0.42380583840559477,
      0.9027812675736041,
      0.07331162425923668
    ],
    [
      0.4446204353231646,
      0.8942921721741626,
      0.05053888879919625
    ],
    [
      0.3868597448387629,
      0.9204088931461998,
      0.05645358483457568
    ],
    [
      0.35893743037733006,
      0.9324799923391232,
      0.040558414186801714
    ],
    [
      0.38145388602652197,
      0.9229938189098529,
      0.050747838273869375
    ],
    [
      0.2865950706216658,
      0.9580215786234296,
      0.00761054447684878
    ],
    [
      0.2927066082929961,
      0.9561779781339247,
      0.006820234111098733
    ],
    [
      0.32029111422234674,
      0.9466203103429864,
      0.03638117915015278
    ],
    [
      0.22983176910840764,
      0.9732302407588775,
      -0.0005063407121143636
    ],
    [
      0.25642975038573723,
      0.9665607234713348,
      -0.002037390408888182
    ],
    [
      0.15424663142501546,
      0.9879736192576543,
      -0.010775172618896631
    ],
    [
      0.21125950619873174,
      0.9766940453598477,
      -0.03792311695106026
    ],
    [
      0.12412633641028491,
      0.9915614205371274,
      -0.03739788646106639
    ],
    [
      0.1337007583217336,
      0.9904591693455883,
      -0.033387738519412694
    ],
    [
      0.11458829122651239,
      0.9922637384347526,
      -0.047772344523552564
    ],
    [
      0.11381162362988247,
      0.9922388820902811,
      -0.05008907261029151
    ],
    [
      0.09995850739294848,
      0.9928672736516221,
      -0.06498364187523356
    ],
    [
      0.08906222698646078,
      0.9927642220972117,
      -0.08054265359379677
    ],
    [
      0.0981460871360981,
      0.9926459078313462,
      -0.07086217076519646
    ],
    [
      0.07972734947313027,
      0.9919272909135287,
      -0.0986093265717663
    ],
    [
      0.08563913399241042,
      0.992026135510749,
      -0.09246667071242008
    ],
    [
      0.07217632643585706,
      0.9901695300106551,
      -0.1198118514200621
    ],
    [
      0.07466488791325557,
      0.9902962239620126,
      -0.11721153236555061
    ],
    [
      0.06159158668782142,
      0.9877660308155927,
      -0.14326459721817553
    ],
    [
      0.06731462006391584,
      0.9882276256926532,
      -0.13738595904790205
    ],
    [
      0.050012717581526374,
      0.9851587483325418,
      -0.16419795572408913
    ],
    [
      0.05782294787881301,
      0.9860410492083257,
      -0.15613954007473024
    ],
    [
      0.03968920202773225,
      0.9823307126353971,
      -0.18289652335578968
    ],
    [
      0.046387483452078805,
      0.9833188015619297,
      -0.17587591044197454
    ],
    [
      0.03177784607682538,
      0.9793115748464298,
      -0.19984746150632768
    ],
    [
      0.03551617193986132,
      0.9799793010778739,
      -0.19590602591462075
    ],
    [
      0.02638409052624917,
      0.9758689692657027,
      -0.2167570866001797
    ],
    [
      0.023776649072214995,
      0.9753428885172397,
      -0.21941039350437355
    ],
    [
      0.015455965954205236,
      0.9698162392566548,
      -0.24334661532575538
    ],
    [
      0.016579223516545845,
      0.970087751801586,
      -0.242187702313996
    ],
    [
      -0.009450972863699567,
      0.9594099291322853,
      -0.2818568200244813
    ],
    [
      0.009386342391013963,
      0.9650203485696639,
      -0.2620069148381451
    ],
    [
      0.9498242597231285,
      -0.06405412257735577,
      -0.3061550996182426
    ],
    [
      0.9507766024427987,
      -0.07003121996507693,
      -0.30186003458147836
    ],
    [
      0.9406911828250684,
      -0.04158945858614123,
      -0.3367052353167167
    ],
    [
      0.9274953598243845,
      -0.04520377324775035,
      -0.3710916010749927
    ],
    [
      0.9348599258396605,
      -0.04806356966046551,
      -0.35174822292452024
    ],
    [
      0.9179443524112306,
      -0.043541504272657794,
      -0.3943124437321255
    ],
    [
      0.9261445516074628,
      -0.046526153165534274,
      -0.37428810640925925
    ],
    [
      0.9080339538976583,
      -0.03884437857527434,
      -0.41709165997666026
    ],
    [
      0.9086031809061214,
      -0.04004797701168196,
      -0.41573599697951324
    ],
    [
      0.9173169767682983,
      -0.04408908375369459,
      -0.3957091315934335
    ],
    [
      0.8981922137420961,
      -0.034072333290507885,
      -0.43828053034239767
    ],
    [
      0.8983898917367112,
      -0.034486685879586705,
      -0.43784274679654456
    ],
    [
      0.8868679585876802,
      -0.02924166363765337,
      -0.4610966809013302
    ],
    [
      0.875715747586748,
      -0.02484873373475195,
      -0.48218717305664865
    ],
    [
      0.8866886241694573,
      -0.029383723204584888,
      -0.4614324225486448
    ],
    [
      0.8631019296330782,
      -0.02191795929113797,
      -0.5045539239012704
    ],
    [
      0.8739667624907889,
      -0.026244787925287845,
      -0.48527652855678666
    ],
    [
      0.8497777377147036,
      -0.017999519312303196,
      -0.5268337629546977
    ],
    [
      0.8619915642750509,
      -0.02274716463854095,
      -0.5064119959277802
    ],
    [
      0.8358581639077527,
      -0.014745853269706469,
      -0.5487473823537646
    ],
    [
      0.8479641030801872,
      -0.019313989493243856,
      -0.5297016610293653
    ],
    [
      0.8214513959093691,
      -0.011475839869517302,
      -0.5701630549744854
    ],
    [
      0.8338998549402977,
      -0.016074352963781218,
      -0.5516816537708554
    ],
    [
      0.8056221318851686,
      -0.00663899255820301,
      -0.5923925256066354
    ],
    [
      0.8206456015169658,
      -0.012012523611133178,
      -0.5713112076507423
    ],
    [
      0.7898340771435842,
      -0.0020000674308747824,
      -0.6133173161692197
    ],
    [
      0.80484117930699,
      -0.007209326328803101,
      -0.5934464606901102
    ],
    [
      0.7589626105297168,
      -0.027267371397783347,
      -0.6505630225235466
    ],
    [
      0.7245136030467961,
      -0.014445726894788239,
      -0.6891091060018223
    ],
    [
      0.7268568289345846,
      -0.022843074246586072,
      -0.6864090210582353
    ],
    [
      0.7482865320070693,
      -0.05218913663317425,
      -0.6613195596943411
    ],
    [
      0.8246776716561117,
      -0.4107927726703281,
      0.38878790592516954
    ],
    [
      0.8164393291237615,
      -0.4088036538758552,
      0.40780681019042847
    ],
    [
      0.8144323630027699,
      -0.3989587064695806,
      0.42134531755537935
    ],
    [
      0.831040504550712,
      -0.3682318336600865,
      0.4168656815755267
    ],
    [
      0.8329902010420337,
      -0.41463910950640365,
      0.3663355481463528
    ],
    [
      0.825063709903054,
      -0.41277357486549404,
      0.385859884535526
    ],
    [
      0.8407462055383674,
      -0.4182043283118126,
      0.3438763697233395
    ],
    [
      0.8333330765124911,
      -0.41651667815706334,
      0.3634141444787639
    ],
    [
      0.8481328292446028,
      -0.42153303565886235,
      0.3209059111418326
    ],
    [
      0.8410450202704083,
      -0.41998706179373824,
      0.34096061620693247
    ],
    [
      0.8500000374799888,
      -0.4351661186071608,
      0.2968676228563769
    ],
    [
      0.8615881279419026,
      -0.42648722512621745,
      0.2752717649772794
    ],
    [
      0.8496011830668238,
      -0.4375484648325677,
      0.2944981674885545
    ],
    [
      0.8690191439498625,
      -0.42530757435882727,
      0.25282245675900483
    ],
    [
      0.8752043645551097,
      -0.4261241992968726,
      0.22898796264713545
    ],
    [
      0.8693967972697139,
      -0.4272558362770107,
      0.24819681558069265
    ],
    [
      0.8811863719281399,
      -0.42601149526189386,
      0.2049994727623644
    ],
    [
      0.8754211706413346,
      -0.4273807966810771,
      0.22579510318251617
    ],
    [
      0.8864669529174466,
      -0.4254174002945728,
      0.182198729171926
    ],
    [
      0.8813353410714052,
      -0.4268761854171844,
      0.2025456464657373
    ],
    [
      0.8943347294983274,
      -0.41743022106960703,
      0.16098882616794438
    ],
    [
      0.889722995045154,
      -0.4245561070039708,
      0.16776502643135666
    ],
    [
      0.8865057523956501,
      -0.4256326829268223,
      0.1815058406606728
    ],
    [
      0.9008946834882271,
      -0.4109768666122086,
      0.1395950728795894
    ],
    [
      0.9046278735376431,
      -0.4095212021007654,
      0.11807114570760338
    ],
    [
      0.901242173552416,
      -0.4131232597120482,
      0.13073529322798977
    ],
    [
      0.9217615575903542,
      -0.3734193880806341,
      0.1044681365493283
    ],
    [
      0.9051960621810983,
      -0.4151190871967347,
      0.09108365636481164
    ],
    [
      0.8991103249388052,
      -0.43390214063891425,
      0.05770230443755515
    ],
    [
      0.9236906482375473,
      -0.3743254186366924,
      0.08170720482897818
    ],
    [
      0.899849918215186,
      -0.432487824492115,
      0.056783856457629595
    ],
    [
      0.9278110575585419,
      -0.365557510006894,
      0.07439320096393114
    ],
    [
      0.9287919565184651,
      -0.3652515500915432,
      0.06274397710001058
    ],
    [
      0.9155578404142642,
      -0.3998523515483966,
      0.04326589669920378
    ],
    [
      0.9014553044450636,
      -0.42950741745056026,
      0.05386754535718016
    ],
    [
      0.9240259395288734,
      -0.38132778331671774,
      0.02766197296906456
    ],
    [
      0.9330741532781225,
      -0.3555447662837202,
      0.05441087807203222
    ],
    [
      0.9338943923094939,
      -0.3548628537699204,
      0.04374493144524444
    ],
    [
      0.9412475530560817,
      -0.3365774680086293,
      0.027724572040679244
    ],
    [
      0.9279624190829917,
      -0.37257541600166794,
      0.008562018501851402
    ],
    [
      0.9275232410448069,
      -0.37364550518638606,
      0.009469623844027036
    ],
    [
      0.9413562380534056,
      -0.3362782993541961,
      0.027664751243946024
    ],
    [
      0.9428198103495041,
      -0.3332850076475416,
      0.003450925948700025
    ],
    [
      0.9312342039713665,
      -0.3642635107611377,
      -0.010721570863734113
    ],
    [
      0.9304452231232523,
      -0.3648809754089462,
      -0.03366839098824404
    ],
    [
      0.9456351245146698,
      -0.3251975540536931,
      -0.0045565471159960584
    ],
    [
      0.9462049418236477,
      -0.32309696750605993,
      -0.017451580355248412
    ],
    [
      0.9491356458909129,
      -0.3136643735127259,
      -0.02749884521409006
    ],
    [
      0.9494741592493259,
      -0.31191978952878535,
      -0.03471117713509291
    ],
    [
      0.9241041393273141,
      -0.3758753162584195,
      -0.06891506588371929
    ],
    [
      0.9238345298925825,
      -0.3768358977020696,
      -0.06726416268137425
    ],
    [
      0.9523826024005233,
      -0.30135722064331605,
      -0.04638107600026747
    ],
    [
      0.9526656541965036,
      -0.2992831754253458,
      -0.05345776109854796
    ],
    [
      0.9253783756774323,
      -0.36817909855410885,
      -0.09010556706708256
    ],
    [
      0.9552590896285503,
      -0.28758150400786786,
      -0.06911548476720704
    ],
    [
      0.9362781048745862,
      -0.33577894080836285,
      -0.10313007923039415
    ],
    [
      0.9258731772838985,
      -0.362799177753425,
      -0.10552542919911526
    ],
    [
      0.92500642150193,
      -0.3659987769977677,
      -0.10201968151455937
    ],
    [
      0.9551384688251293,
      -0.2888878897159336,
      -0.06522493806713829
    ],
    [
      0.9575646207957375,
      -0.2763776785463838,
      -0.08176414740965132
    ],
    [
      0.9576141552484755,
      -0.275177635158655,
      -0.08516101676376918
    ],
    [
      0.9459800733767916,
      -0.3049249127578454,
      -0.1101930050123896
    ],
    [
      0.9597737746054636,
      -0.26272482091492055,
      -0.09904529294622552
    ],
    [
      0.9597677679517763,
      -0.2623605733894355,
      -0.10006378531532771
    ],
    [
      0.9483948970823578,
      -0.2897508095468727,
      -0.12880833651233897
    ],
    [
      0.9619192770380676,
      -0.24711059359422285,
      -0.11682319545395257
    ],
    [
      0.9445654094423961,
      -0.28738736520710106,
      -0.15875984884169886
    ],
    [
      0.9619666674003999,
      -0.24687694652962722,
      -0.11692691769980103
    ],
    [
      0.9633584759869759,
      -0.23425713599546918,
      -0.13062940319565
    ],
    [
      0.962737728035215,
      -0.23107986328683183,
      -0.14049257560786527
    ],
    [
      0.9400315147628143,
      -0.2914591580766448,
      -0.17717875274982064
    ],
    [
      0.9378716441683892,
      -0.294445581939722,
      -0.1835717253311653
    ],
    [
      0.963517755133221,
      -0.220173485898177,
      -0.1521748062278499
    ],
    [
      0.9626112968016292,
      -0.21637757821017561,
      -0.1629731110268968
    ],
    [
      0.9374639800375265,
      -0.2902441557092201,
      -0.19214477929114318
    ],
    [
      0.9627918878575711,
      -0.21043278545701216,
      -0.1695577290495994
    ],
    [
      0.9616196361746053,
      -0.2061343757906644,
      -0.18109747220989275
    ],
    [
      0.9416835123477052,
      -0.26357886875225583,
      -0.20918494811952976
    ],
    [
      0.935596226929792,
      -0.28611636729302026,
      -0.20687465896475193
    ],
    [
      0.954825520175239,
      -0.182993840672068,
      -0.2341398733624196
    ],
    [
      0.9543486453888694,
      -0.18333696975521896,
      -0.23580970837818338
    ],
    [
      0.9516673579025159,
      -0.19825950678243615,
      -0.23456855687246303
    ],
    [
      0.961617050971793,
      -0.2013509063453242,
      -0.18641475208316724
    ],
    [
      0.9450769731980796,
      -0.15089838013290166,
      -0.2899296356084052
    ],
    [
      0.9415057341539093,
      -0.1395161220291055,
      -0.30676082580614494
    ],
    [
      0.9227537144539384,
      -0.12639382875593103,
      -0.3640744189226645
    ],
    [
      0.918332913644216,
      -0.13057015372069108,
      -0.3736523714297556
    ],
    [
      0.9023447118372996,
      -0.15186107088052278,
      -0.4033760480869949
    ],
    [
      0.8959198582776622,
      -0.16215472329827194,
      -0.413561909822211
    ],
    [
      0.8956262427264007,
      -0.2170863345921333,
      -0.38823595489488427
    ],
    [
      0.9025112612318203,
      -0.23591868547208458,
      -0.3602995936645957
    ],
    [
      0.904146209150163,
      -0.23612570572887534,
      -0.3560397219039335
    ],
    [
      0.9464103017368084,
      -0.1689962590037047,
      -0.2752231916267161
    ],
    [
      0.959827617462301,
      -0.2794372586792193,
      -0.02541187160532919
    ],
    [
      0.9635751601381022,
      -0.26515324454571343,
      -0.03488076363430101
    ],
    [
      0.9635532475557643,
      -0.26424729242725975,
      -0.04169541425147533
    ],
    [
      0.9667971579147367,
      -0.2504024999948897,
      -0.05100826839147556
    ],
    [
      0.9666207828272905,
      -0.24929008773899894,
      -0.059149931204001624
    ],
    [
      0.9693341600404329,
      -0.2360747872967208,
      -0.06826405336277871
    ],
    [
      0.9690518780127143,
      -0.23471560031189243,
      -0.07646597079916947
    ],
    [
      0.971230358798739,
      -0.2223702368825916,
      -0.08522363461184228
    ],
    [
      0.9707949641937998,
      -0.2209305784021027,
      -0.09352441939339269
    ],
    [
      0.9719232360010844,
      -0.2064053237974037,
      -0.11296931277683012
    ],
    [
      0.9727481971859071,
      -0.20801625530543144,
      -0.10242159147500685
    ],
    [
      0.9733210741264522,
      -0.19464349609590484,
      -0.12149072429158023
    ],
    [
      0.9726386282233044,
      -0.19300467749624467,
      -0.1293185731148442
    ],
    [
      0.9737020605132585,
      -0.18157286009610246,
      -0.13760666346059022
    ],
    [
      0.9723484870905412,
      -0.1796556708165811,
      -0.14920542750241958
    ],
    [
      0.9730131381461471,
      -0.1700281762806939,
      -0.15599952649174323
    ],
    [
      0.9709240172763366,
      -0.16822317532903588,
      -0.17031592984273822
    ],
    [
      0.9712997309880826,
      -0.1597312723799468,
      -0.1762462856526667
    ],
    [
      0.9675110042645533,
      -0.1569622814405155,
      -0.19820519375632917
    ],
    [
      0.9603266853825705,
      -0.16946995029891104,
      -0.22147820047988934
    ],
    [
      0.9523397273330632,
      -0.17846026151591993,
      -0.24738831581717086
    ],
    [
      0.9480853570989669,
      -0.17015741476088633,
      -0.2686644931069533
    ],
    [
      0.9515823441633475,
      -0.17785443989016086,
      -0.25071665379058
    ],
    [
      0.9299128990564858,
      -0.10801512145713653,
      -0.35156042681872196
    ],
    [
      0.6284425628134637,
      -0.02383523845969521,
      -0.7774907244797299
    ],
    [
      0.6374266889607083,
      -0.3745030796030786,
      -0.6733755709619993
    ],
    [
      0.6108384703102173,
      -0.39007972800283147,
      -0.6889950427908105
    ],
    [
      0.6117017063061054,
      -0.40432953921068177,
      -0.6799548854327593
    ],
    [
      0.6239840799663815,
      -0.4257492688982132,
      -0.6552720259412464
    ],
    [
      0.6450596216716538,
      -0.4232406235171116,
      -0.6362118036422065
    ],
    [
      0.6680671072592822,
      -0.4036309461504942,
      -0.6251147090797589
    ],
    [
      0.6604500646374657,
      -0.38737343439985505,
      -0.6432320999776274
    ],
    [
      0.09043862007139475,
      0.009376896654217027,
      -0.995857886351621
    ],
    [
      0.08102523183979422,
      -0.009294974581475386,
      -0.9966687088761427
    ],
    [
      0.08016144861030107,
      -0.01501948933002582,
      -0.9966687298681359
    ],
    [
      0.10410862354731494,
      0.005922192031924642,
      -0.9945483005589123
    ],
    [
      0.22625000820183652,
      -0.0233456218853417,
      -0.9737894617048675
    ],
    [
      0.19499764235808034,
      -0.009417330352305586,
      -0.9807584990015767
    ],
    [
      0.18012414685490152,
      -0.01402243276043194,
      -0.9835439304369038
    ],
    [
      0.2952299635680156,
      -0.016362169011438377,
      -0.9552861079471789
    ],
    [
      0.25237810045058395,
      -0.00000857581098617365,
      -0.9676286965253823
    ],
    [
      0.24628857549760896,
      -0.009482432652815518,
      -0.9691501540268894
    ],
    [
      0.3335919658153352,
      0.00017298355307313672,
      -0.9427175454080351
    ],
    [
      0.3153946691352045,
      0.005331501211824538,
      -0.9489456137081426
    ],
    [
      0.3691240070780886,
      0.01784141159135399,
      -0.9292088847137887
    ],
    [
      0.3652462587042433,
      0.018947754218296226,
      -0.9307180846597083
    ],
    [
      0.3962553613204212,
      0.03397779734544621,
      -0.9175114156850444
    ],
    [
      0.4114055383895901,
      0.0508712428589815,
      -0.9100316475993315
    ],
    [
      0.3996588289673799,
      0.04228878785933386,
      -0.9156879811648785
    ],
    [
      0.4176858926300908,
      0.06478064466443421,
      -0.9062791861091507
    ],
    [
      0.43394177578343396,
      0.08890109746255147,
      -0.8965439922836324
    ],
    [
      0.41771399818834676,
      0.06625810632109491,
      -0.9061594115078474
    ],
    [
      0.4478160115456862,
      0.10883374934388122,
      -0.8874773432640786
    ],
    [
      0.43411487000825055,
      0.09718961861949973,
      -0.895599496242777
    ],
    [
      0.4567906392493448,
      0.16617104923065595,
      -0.8739161826466871
    ],
    [
      0.4514446394400267,
      0.15754534433439454,
      -0.8782808218328699
    ],
    [
      0.4069641991848175,
      0.31914156772993846,
      -0.8558789635975038
    ],
    [
      0.40772849751221873,
      0.3118309703922135,
      -0.8582068038769438
    ],
    [
      0.42045898989241764,
      0.2909792116834179,
      -0.8593866046121178
    ],
    [
      0.4447302227594627,
      0.27191353436561777,
      -0.853392089717919
    ],
    [
      0.4059559841879605,
      0.4058809433064812,
      -0.8188164621956653
    ],
    [
      0.39494297613432455,
      0.35839620695301677,
      -0.8459150101776494
    ],
    [
      0.39788664004117774,
      0.33358984532914243,
      -0.854636786459617
    ],
    [
      -0.2108460109823082,
      0.552115724484043,
      -0.806667333186555
    ],
    [
      -0.259618070358323,
      0.5357146928010081,
      -0.8034974956156007
    ],
    [
      -0.25397167525815273,
      0.49392857597726164,
      -0.8315846018293279
    ],
    [
      -0.28310359373150934,
      0.5381188094348325,
      -0.793902073399952
    ],
    [
      -0.26872789636306177,
      0.45168910474974694,
      -0.8507421879551147
    ],
    [
      -0.2951778729140899,
      0.5464960964590828,
      -0.7837168110337421
    ],
    [
      -0.30575256424903813,
      0.5340433866746012,
      -0.7882341216949824
    ],
    [
      -0.2898028637927919,
      0.4506234585006756,
      -0.8443653230600996
    ],
    [
      -0.28607900198790553,
      0.44636598352200485,
      -0.8478892695252355
    ],
    [
      -0.2696876629170599,
      0.4486718449252529,
      -0.8520341190596208
    ],
    [
      -0.26925869303327515,
      0.44886202099184336,
      -0.8520696229400098
    ],
    [
      -0.32677563818084665,
      0.5218655366239187,
      -0.7879556104094506
    ],
    [
      -0.31615946310272397,
      0.47173245862330815,
      -0.8231109775551569
    ],
    [
      -0.34897633904361114,
      0.5202343768396752,
      -0.7794688627148318
    ],
    [
      -0.35675365432582756,
      0.5159722590599344,
      -0.7787807509214361
    ],
    [
      -0.3299194922558012,
      0.47716205191748035,
      -0.8145363741660492
    ],
    [
      -0.36134957133829315,
      0.477143495557217,
      -0.8010996017606499
    ],
    [
      -0.3699634510342015,
      0.5132148987670875,
      -0.7744272158068518
    ],
    [
      -0.37512998402793113,
      0.5137020366381391,
      -0.7716137068747756
    ],
    [
      -0.4042248322157391,
      0.5059875717037832,
      -0.7619572575292307
    ],
    [
      -0.444038887184215,
      0.45456555311523944,
      -0.7721396406021649
    ],
    [
      -0.375380540535225,
      0.46593811404775587,
      -0.8012434858799806
    ],
    [
      -0.5137702285240046,
      0.34203332252836105,
      -0.7867994398591055
    ],
    [
      -0.46669833424312296,
      0.3366667966503529,
      -0.8178313596627879
    ],
    [
      -0.43972736485683905,
      0.3686024030954359,
      -0.8190067844824792
    ],
    [
      -0.43715949816441546,
      0.40457093117094184,
      -0.8032520991669512
    ],
    [
      -0.4595888312746682,
      0.4341931409167893,
      -0.7747608808841587
    ],
    [
      -0.48885360333164185,
      0.3985141909277624,
      -0.7760210010939529
    ],
    [
      -0.4845457949114569,
      0.3158751402381564,
      -0.8157439968600133
    ],
    [
      -0.4687213792879631,
      0.33180178275645617,
      -0.8186622292240109
    ],
    [
      -0.5336315463521678,
      0.32054222945560745,
      -0.7826174364741837
    ],
    [
      -0.5439973502748516,
      0.3133656445167918,
      -0.7783757805395258
    ],
    [
      -0.540360168636188,
      0.2974788071093625,
      -0.7870941795441388
    ],
    [
      -0.4910720303429805,
      0.2936755330682375,
      -0.8201237359642198
    ],
    [
      -0.5407861671208378,
      0.2728399402909574,
      -0.7956812731444546
    ],
    [
      -0.49389763988713686,
      0.27153791446422465,
      -0.826034068499802
    ],
    [
      -0.48910766206346057,
      0.28734832510395913,
      -0.8235318056825522
    ],
    [
      -0.4915903626380586,
      0.2619104167016463,
      -0.8305069831040266
    ],
    [
      -0.5433425510012373,
      0.2634987974159901,
      -0.7970867305580961
    ],
    [
      -0.5005783160661581,
      0.24275990174687878,
      -0.830956665289
    ],
    [
      -0.4965561705743795,
      0.24555293839028186,
      -0.8325477307112225
    ],
    [
      -0.5514648357626373,
      0.24849083136370798,
      -0.7963283503966568
    ],
    [
      -0.557876588987724,
      0.22287090979891117,
      -0.7994387212443663
    ],
    [
      -0.5495956345937375,
      0.21473017183945997,
      -0.8073633579357581
    ],
    [
      -0.5063080390655021,
      0.23315827845248535,
      -0.8302345372042284
    ],
    [
      -0.5443212540528984,
      0.20280898055602875,
      -0.8139919470069126
    ],
    [
      -0.504413200066138,
      0.20454629896498755,
      -0.8388850548071316
    ],
    [
      -0.5034391386686906,
      0.20614730620414085,
      -0.8390782572569159
    ],
    [
      -0.5036271264222396,
      0.18245228736937552,
      -0.8444352434410588
    ],
    [
      -0.542535442805068,
      0.18330482475358856,
      -0.8197893842459568
    ],
    [
      -0.5389107345314431,
      0.17818002319001489,
      -0.8233025565020349
    ],
    [
      -0.5015386160356329,
      0.16348662678524523,
      -0.8495476087232805
    ],
    [
      -0.5014343988213854,
      0.17956395209228868,
      -0.846357094132042
    ],
    [
      -0.5347430669777048,
      0.15457335266296537,
      -0.8307568422624086
    ],
    [
      -0.5287984230791413,
      0.14930383871605227,
      -0.8355121731570788
    ],
    [
      -0.49124982645447035,
      0.1266132858883,
      -0.8617671865678226
    ],
    [
      -0.4908404946239993,
      0.15062591988566004,
      -0.8581302005499319
    ],
    [
      -0.5242798802669653,
      0.12708998707643857,
      -0.8420087543085091
    ],
    [
      -0.5139095249006452,
      0.1163185061176545,
      -0.8499217642530107
    ],
    [
      -0.4892264842242124,
      0.07452085446697557,
      -0.8689672544941658
    ],
    [
      -0.4736619776271307,
      0.10422693619087788,
      -0.8745176251640776
    ],
    [
      -0.4816399663284873,
      0.12094661116149749,
      -0.8679832141715894
    ],
    [
      -0.522986791010547,
      0.08181121175910452,
      -0.8484054113800769
    ],
    [
      -0.5122068562567378,
      0.06566337155657345,
      -0.8563483275159781
    ],
    [
      -0.4650965026737157,
      0.05665951334104726,
      -0.8834449290978097
    ],
    [
      -0.5139266780367532,
      0.04615264414885516,
      -0.8565916781291869
    ],
    [
      -0.48764709465782097,
      0.027480224525665325,
      -0.8726082444784745
    ],
    [
      -0.4646021471422736,
      0.05107818526055788,
      -0.8840451707131697
    ],
    [
      -0.4763609126664435,
      -0.01033632425455365,
      -0.8791890816454091
    ],
    [
      -0.4655031974017434,
      -0.002159071559447899,
      -0.8850435648140461
    ],
    [
      -0.4457590017476079,
      0.03229701880212898,
      -0.894570184467083
    ],
    [
      -0.4264200823862625,
      0.00184472348246509,
      -0.9045233608552995
    ],
    [
      -0.43084478496166306,
      0.022923140773165988,
      -0.9021348573735702
    ],
    [
      -0.4422059680435821,
      0.032840860019225,
      -0.8963120883597611
    ],
    [
      -0.430640517610165,
      -0.003878278897824665,
      -0.9025152095921929
    ],
    [
      -0.39733416261846544,
      -0.014145465376828245,
      -0.9175649671960868
    ],
    [
      -0.39123347646422035,
      0.002031581935698945,
      -0.9202892151756201
    ],
    [
      -0.42737692050264076,
      -0.02346133960644592,
      -0.9037690708170703
    ],
    [
      -0.4223136873631391,
      -0.02652525401960705,
      -0.9060615654385435
    ],
    [
      -0.3932947915137655,
      -0.039348859553346494,
      -0.9185700159595863
    ],
    [
      -0.3640962235957657,
      -0.03759361932335516,
      -0.930602310199944
    ],
    [
      -0.36315501199884487,
      -0.03509348175411213,
      -0.9310676048485913
    ],
    [
      -0.36905247967519095,
      -0.0036205516526071247,
      -0.9294015057289953
    ],
    [
      -0.3859508827454001,
      0.007004381498697931,
      -0.9224927396721706
    ],
    [
      -0.3862943644088212,
      0.00696806528773893,
      -0.9223492343424646
    ],
    [
      -0.3612146169830371,
      -0.054284117732146475,
      -0.9309013025234416
    ],
    [
      -0.3215864859842266,
      -0.053092298345078545,
      -0.9453905753119998
    ],
    [
      -0.31876686106396446,
      -0.037842256554749244,
      -0.9470774265635686
    ],
    [
      -0.32586660668064554,
      -0.028200018801047215,
      -0.9449950865428148
    ],
    [
      -0.2744201956292762,
      -0.04908256145158193,
      -0.9603564225807737
    ],
    [
      -0.3093039841909118,
      -0.0353112745042634,
      -0.9503074025053749
    ],
    [
      -0.3062799672555109,
      -0.125581714157881,
      -0.9436216480810152
    ],
    [
      -0.21496005591183615,
      -0.12087460554441876,
      -0.9691137725245996
    ],
    [
      -0.20246093365709328,
      -0.10699437384876673,
      -0.9734278475097209
    ],
    [
      -0.26478298931691546,
      -0.04289365577199961,
      -0.9633535710542165
    ],
    [
      -0.3066273317958215,
      -0.1405296399131067,
      -0.9413984808260887
    ],
    [
      -0.28690671846625526,
      -0.15450258785268364,
      -0.945417095913623
    ],
    [
      -0.27607274695012557,
      -0.16012325557352924,
      -0.9477047965563676
    ],
    [
      -0.07049004042721185,
      -0.10951160362781387,
      -0.9914829110334855
    ],
    [
      -0.0777882648306576,
      -0.09391070310605226,
      -0.9925370349245223
    ],
    [
      -0.12315932813997497,
      -0.06546342046692669,
      -0.9902253887236382
    ],
    [
      -0.15945861175810996,
      -0.10161560136243597,
      -0.9819609058898052
    ],
    [
      -0.14857440141400985,
      -0.11337155594509084,
      -0.9823810551649792
    ],
    [
      -0.09666221032716275,
      -0.1302273360681984,
      -0.9867609933693406
    ],
    [
      -0.13180333417783346,
      -0.16985086412153025,
      -0.9766158738505001
    ],
    [
      -0.11162920238150256,
      -0.17069645785600845,
      -0.9789798978789511
    ],
    [
      -0.08646560309159557,
      -0.15152875081519934,
      -0.984663768582145
    ],
    [
      -0.1040921935093871,
      -0.20553922968304097,
      -0.973097343697796
    ],
    [
      -0.0924175959414557,
      -0.1913273454194187,
      -0.9771657151451643
    ],
    [
      -0.1395639399763532,
      -0.18689150317681127,
      -0.9724163062693821
    ],
    [
      -0.12411738573568112,
      -0.2084194656313852,
      -0.9701320533329821
    ],
    [
      -0.1264278365169381,
      -0.22240179846193636,
      -0.9667230431693157
    ],
    [
      -0.1062106375956066,
      -0.24198276203556596,
      -0.9644499174862183
    ],
    [
      -0.09968273597048652,
      -0.2414125562152981,
      -0.9652892467292038
    ],
    [
      -0.08564130306680735,
      -0.22758697132952566,
      -0.9699844007457403
    ],
    [
      -0.1238928977875759,
      -0.2680776536101077,
      -0.9553977818232029
    ],
    [
      -0.10735067982342737,
      -0.2841771449569996,
      -0.9527429778411051
    ],
    [
      -0.09665359928273784,
      -0.28454668196012217,
      -0.9537773679067757
    ],
    [
      -0.08022797081692137,
      -0.26613461770086405,
      -0.9605914001071497
    ],
    [
      -0.12497325451114147,
      -0.3151944299970841,
      -0.9407625401533092
    ],
    [
      -0.11077277383392342,
      -0.3285485227163107,
      -0.9379686886021666
    ],
    [
      -0.08256602159116466,
      -0.323843177943069,
      -0.9425011661416346
    ],
    [
      -0.07813980204428973,
      -0.3051475329971722,
      -0.9490938596588954
    ],
    [
      -0.09907097876317614,
      -0.37843989623411645,
      -0.9203087449900808
    ],
    [
      -0.06975045759856312,
      -0.33798232240797527,
      -0.9385642350976849
    ],
    [
      -0.11528484949845431,
      -0.3665598474414676,
      -0.9232243940233635
    ],
    [
      -0.11505460581372187,
      -0.3669226807910255,
      -0.9231089773164252
    ],
    [
      -0.021143177260674734,
      -0.40731292070620406,
      -0.9130438930747553
    ],
    [
      -0.05882870907006136,
      -0.39024186117751153,
      -0.9188310360310332
    ],
    [
      -0.07883158560834885,
      -0.39605622600638135,
      -0.9148360765470805
    ],
    [
      -0.06264237749597826,
      -0.4574795349887285,
      -0.8870109399596761
    ],
    [
      -0.06268727531611591,
      -0.4585882610673626,
      -0.8864350581540951
    ],
    [
      -0.05819295424007599,
      -0.46340011753050137,
      -0.8842363434905455
    ],
    [
      -0.04046610825041981,
      -0.4743675404607071,
      -0.87939634445472
    ],
    [
      -0.008228476555713708,
      -0.42826106851010665,
      -0.9036175902294918
    ],
    [
      -0.015046265383405708,
      -0.40791313516988453,
      -0.9128967543232299
    ],
    [
      -0.01684176125876469,
      -0.4072594868199384,
      -0.9131571964743328
    ],
    [
      0.013422292089930987,
      -0.4395233662542751,
      -0.8981308660721794
    ],
    [
      -0.040076621483362954,
      -0.47476325398740526,
      -0.8792006125303654
    ],
    [
      -0.007812100761203982,
      -0.47052084455494814,
      -0.8823542972757571
    ],
    [
      0.014356643056878443,
      -0.4761312732109684,
      -0.879257014456319
    ],
    [
      0.04281149916860194,
      -0.453439293216354,
      -0.8902583798574378
    ],
    [
      0.03404704722459746,
      -0.4423644077538072,
      -0.8961888915445836
    ],
    [
      0.021095615560253817,
      -0.4380074353802072,
      -0.8987237960329011
    ],
    [
      0.06380041780488312,
      -0.4650815160983598,
      -0.8829658487572288
    ],
    [
      0.05494589988951011,
      -0.4569469035426305,
      -0.8877952891450449
    ],
    [
      0.018534021646575184,
      -0.48201528189161175,
      -0.8759667562553697
    ],
    [
      0.055168251991543585,
      -0.49480219933528524,
      -0.8672527010653597
    ],
    [
      0.146490153358403,
      -0.4959647666060025,
      -0.8558969478006596
    ],
    [
      0.14945092690772677,
      -0.48990576729692886,
      -0.8588694659933072
    ],
    [
      0.08012129325997162,
      -0.4632350403382238,
      -0.8826062971502038
    ],
    [
      0.056910774940619184,
      -0.5012068169864144,
      -0.8634540464332802
    ],
    [
      0.06751402238877269,
      -0.5087993299107159,
      -0.8582337086500942
    ],
    [
      0.15082149151466243,
      -0.4884630467764511,
      -0.8594514120246467
    ],
    [
      0.1995031869069779,
      -0.4862442711912878,
      -0.8507437846658727
    ],
    [
      0.2261809203515365,
      -0.4603352951326024,
      -0.8584483719619438
    ],
    [
      0.2317964823358321,
      -0.43576956098615677,
      -0.8696983847832916
    ],
    [
      0.21856962665595633,
      -0.39955325739241626,
      -0.8902721565962767
    ],
    [
      0.19305218411155223,
      -0.4143991992215647,
      -0.8893841452905967
    ],
    [
      0.1530572423784638,
      -0.4564249991288315,
      -0.8764985457636233
    ],
    [
      0.27468899805835884,
      -0.22851430402565107,
      -0.9339845647554178
    ],
    [
      0.2705231235647846,
      -0.23397229829606364,
      -0.9338491330224653
    ],
    [
      0.28216829259724774,
      -0.2744042841232857,
      -0.9192841473165634
    ],
    [
      0.30461631779808507,
      -0.2721565683298379,
      -0.912764866351714
    ],
    [
      0.36630221463272256,
      -0.24827940349242503,
      -0.8967608518198196
    ],
    [
      0.3656408011836187,
      -0.24745214357321677,
      -0.8972592942682854
    ],
    [
      0.30450246696965755,
      -0.20607598476719138,
      -0.9299521149562621
    ],
    [
      0.33918917259312803,
      -0.18892056801212495,
      -0.9215528873469853
    ],
    [
      0.33046175604155653,
      -0.18819613621228373,
      -0.9248660671192874
    ],
    [
      0.3067300682876385,
      -0.20298781584400954,
      -0.9298992482130196
    ],
    [
      0.3598336361692712,
      -0.17932491977435674,
      -0.9156212794759202
    ],
    [
      0.3788826151571363,
      -0.16623324294320885,
      -0.9103924828733339
    ],
    [
      0.3644339066182617,
      -0.17269517652404828,
      -0.9150761190809648
    ],
    [
      0.3923707032668175,
      -0.14667254203548144,
      -0.9080376625618306
    ],
    [
      0.4086423882842102,
      -0.12877659423390334,
      -0.9035640471349518
    ],
    [
      0.39373344332702864,
      -0.13986227159623063,
      -0.9085221629601469
    ],
    [
      0.4181367893208253,
      -0.12850153772512365,
      -0.8992491202212823
    ],
    [
      0.447484504187447,
      -0.11009776821707502,
      -0.8874886477841472
    ],
    [
      0.5668599064200069,
      -0.24474820603666803,
      -0.7866181806539521
    ],
    [
      0.34525431406114293,
      -0.46598873817937536,
      -0.814649590015341
    ],
    [
      0.32669092136653916,
      -0.4765310555146959,
      -0.8162053632675612
    ],
    [
      0.33350742814850864,
      -0.5105604072508226,
      -0.7925281483440456
    ],
    [
      0.36532134943779154,
      -0.4925467191548955,
      -0.7898974877126143
    ],
    [
      0.36252070925695895,
      -0.46659613997889127,
      -0.8067631483382408
    ],
    [
      0.34867097655594137,
      -0.43190493181060524,
      -0.8317972589430688
    ],
    [
      0.34128428153938917,
      -0.43212854587265204,
      -0.8347394557681638
    ],
    [
      0.31241707762082815,
      -0.4450915821644001,
      -0.8392193116803571
    ],
    [
      0.3172094191844676,
      -0.4724543347382442,
      -0.822292579297476
    ],
    [
      0.2917276451803417,
      -0.4288128024949317,
      -0.8549938955653282
    ],
    [
      0.29142386591769787,
      -0.43412741566091995,
      -0.8524115891663807
    ],
    [
      0.3268854817568692,
      -0.40343820958521254,
      -0.854624767288696
    ],
    [
      0.30395066906760676,
      -0.41081358148973174,
      -0.8595616278295197
    ],
    [
      0.3318239852168482,
      -0.3985311109896174,
      -0.8550238572158032
    ],
    [
      0.327530973464738,
      -0.3736082281358043,
      -0.8678365936571618
    ],
    [
      0.2973179352400111,
      -0.37652045643035226,
      -0.8774020693354306
    ],
    [
      0.33515541231790863,
      -0.34320569964987474,
      -0.8774284570959917
    ],
    [
      0.3349560699786,
      -0.3428711285060143,
      -0.8776353573218797
    ],
    [
      0.26723649656814985,
      -0.35164797587975705,
      -0.8971779956963116
    ],
    [
      0.33310685127399864,
      -0.3682603644203171,
      -0.8680000746724261
    ],
    [
      0.34041552147306525,
      -0.3213342100435907,
      -0.883663735928935
    ],
    [
      0.27261682916465574,
      -0.30897398287847094,
      -0.9111614249738754
    ],
    [
      0.25635842071663284,
      -0.34725343115231183,
      -0.9020506719029815
    ],
    [
      0.3492228898651427,
      -0.312009888291516,
      -0.8835684482837501
    ],
    [
      0.27603843206335615,
      -0.28825501624609773,
      -0.9169033916574667
    ],
    [
      0.5826926321862906,
      0.4259721508082849,
      -0.6921105570149729
    ],
    [
      0.578255925597358,
      0.460293805082215,
      -0.6736094547395239
    ],
    [
      0.5730639491903586,
      0.45425001718864383,
      -0.6820957645539715
    ],
    [
      0.5731227599752533,
      0.44792312675136275,
      -0.6862180225843904
    ],
    [
      0.58267792896441,
      0.48043223598238516,
      -0.6554931713806879
    ],
    [
      0.578000144115606,
      0.476054131516233,
      -0.6627882748424748
    ],
    [
      0.5824455757316095,
      0.4973356861259082,
      -0.642973068344504
    ],
    [
      0.586086962871711,
      0.5001291130882376,
      -0.6374738756948292
    ],
    [
      0.5877517323549548,
      0.5190462584215848,
      -0.6205955871034718
    ],
    [
      0.5859007692681382,
      0.5178733372982839,
      -0.6233197374434261
    ],
    [
      0.5878562328530945,
      0.5382838995083369,
      -0.6038836750781288
    ],
    [
      0.5878022656170773,
      0.5569153758089127,
      -0.5867995916179973
    ],
    [
      0.587404965489549,
      0.5389707562330507,
      -0.6037101377679482
    ],
    [
      0.5867134688526519,
      0.5760547280676162,
      -0.5691469544307807
    ],
    [
      0.5859406451958057,
      0.5595212225674289,
      -0.5861821916470787
    ],
    [
      0.5853132232942693,
      0.5947142691822613,
      -0.5511110311614908
    ],
    [
      0.5845030363398972,
      0.5789913686880814,
      -0.5684410220015292
    ],
    [
      0.5832185338823412,
      0.6116511139447679,
      -0.5345456543142568
    ],
    [
      0.582879445179782,
      0.5978695938578882,
      -0.5502758409444424
    ],
    [
      0.5788771583238801,
      0.6294561734962364,
      -0.5183494585878771
    ],
    [
      0.5786777193570607,
      0.6171678965983064,
      -0.5331377725580257
    ],
    [
      0.5746299110061189,
      0.646947069889905,
      -0.5012583706412953
    ],
    [
      0.5740525178886238,
      0.6350735297854335,
      -0.5168610243301398
    ],
    [
      0.5688972846707429,
      0.6644906637413702,
      -0.4845699508789305
    ],
    [
      0.5687878548386214,
      0.65336990185285,
      -0.4995879777785656
    ],
    [
      0.5636898153886767,
      0.6812618826968945,
      -0.4670503604659376
    ],
    [
      0.5638740437297646,
      0.6700243388827662,
      -0.4828182350663192
    ],
    [
      0.5588581752100723,
      0.6969912336851519,
      -0.44931142892977693
    ],
    [
      0.5592533503092945,
      0.686105405907083,
      -0.4652902987951785
    ],
    [
      0.553544132283819,
      0.7025857281815056,
      -0.4471713185903332
    ],
    [
      0.5527311726054145,
      0.7122948239298982,
      -0.43257870339733406
    ],
    [
      0.5461511537096507,
      0.7279468875970416,
      -0.4145024078813024
    ],
    [
      0.5469672786875013,
      0.7181560838758221,
      -0.43020766524706716
    ],
    [
      0.5412587255797455,
      0.7328320214250564,
      -0.41230597904693955
    ],
    [
      0.540237729125392,
      0.742523487649917,
      -0.39598240657590206
    ],
    [
      0.5339360889601852,
      0.7570360839880679,
      -0.3765748537089437
    ],
    [
      0.5354039983448389,
      0.7472417927230214,
      -0.39366516453001643
    ],
    [
      0.5293780203415736,
      0.7699694039854421,
      -0.3562387240398487
    ],
    [
      0.5312591370588914,
      0.7596900292577102,
      -0.37501305142336233
    ],
    [
      0.5261090893516338,
      0.7811533995096616,
      -0.3361675066631124
    ],
    [
      0.5281836474307879,
      0.7711451841977054,
      -0.3554674942598774
    ],
    [
      0.5209732929451462,
      0.7929411237038649,
      -0.31596076081871766
    ],
    [
      0.5232200220735246,
      0.7838316647430945,
      -0.3344379312330609
    ],
    [
      0.5172964355747515,
      0.8035683807267383,
      -0.29441850355890464
    ],
    [
      0.5166325569361844,
      0.8035905354893539,
      -0.2955216614488922
    ],
    [
      0.5191045859919864,
      0.7946407755781042,
      -0.31476414438547057
    ],
    [
      0.5087161836421067,
      0.8275780077888067,
      -0.23732358821853375
    ],
    [
      0.5306855292722449,
      0.4414966458437299,
      -0.7235009196468056
    ],
    [
      0.40872732510872195,
      0.4484381868230115,
      -0.79488688900268
    ],
    [
      0.5257760465701624,
      0.4511968302868717,
      -0.7210970594809899
    ],
    [
      0.5221060673324492,
      0.452780809731674,
      -0.7227688377298606
    ],
    [
      0.45860247379668895,
      0.5039649312611493,
      -0.73191742641264
    ],
    [
      0.39072561367013087,
      0.4767774488804226,
      -0.7874114293437552
    ],
    [
      0.5262708008298265,
      0.5943469959535832,
      -0.6081041790638217
    ],
    [
      0.5063190721727197,
      0.623939891461271,
      -0.5952646545843736
    ],
    [
      0.48128491951187363,
      0.6311266303745947,
      -0.6083124219366715
    ],
    [
      0.4790838063497512,
      0.6270869658302304,
      -0.6141991890089644
    ],
    [
      0.47598218320954316,
      0.6054614751517493,
      -0.6378537162815189
    ],
    [
      0.5181260617148611,
      0.5693383352608867,
      -0.6382783438079425
    ],
    [
      0.5273172565730405,
      0.5738236003404451,
      -0.6266282682840053
    ],
    [
      0.47365679947502526,
      0.5820171491113687,
      -0.6609881046216721
    ],
    [
      0.5098961811632122,
      0.5504679846718531,
      -0.661052858920133
    ],
    [
      0.5177863619879612,
      0.5564565839933598,
      -0.6498102442018844
    ],
    [
      0.469570921785545,
      0.597588784817736,
      -0.6499159897044656
    ],
    [
      0.5004178132581499,
      0.5309912828254568,
      -0.6838349725901032
    ],
    [
      0.5091038227101214,
      0.5394102418229716,
      -0.670708497574337
    ],
    [
      0.465309059535336,
      0.5618448101267144,
      -0.6839721401109972
    ],
    [
      0.48462768385184885,
      0.5099703490611525,
      -0.7106801327762292
    ],
    [
      0.49985524089919603,
      0.5254271660061505,
      -0.6885281630901905
    ],
    [
      0.052667644905608726,
      0.7737604324726688,
      -0.6312851275927585
    ],
    [
      0.0373674786324481,
      0.7885991663064047,
      -0.6137711515226966
    ],
    [
      0.03001553534626935,
      0.7850104347196384,
      -0.6187549474704515
    ],
    [
      -0.002823178892619232,
      0.7711354884303181,
      -0.6366648161664621
    ],
    [
      0.028047849309819232,
      0.813599301323154,
      -0.5807490809597285
    ],
    [
      0.02746138843139035,
      0.8137120827399373,
      -0.5806190821428914
    ],
    [
      0.021690802183342378,
      0.8131954817548093,
      -0.5815862941595226
    ],
    [
      -0.009154497293118444,
      0.8082604689338556,
      -0.5887539465159738
    ],
    [
      -0.08189196713630421,
      0.7876902567890396,
      -0.6106044260224154
    ],
    [
      -0.14936021853814038,
      0.7483349285993008,
      -0.6462865925860742
    ],
    [
      0.17220149350161487,
      -0.16827049854094275,
      -0.9705831674599533
    ],
    [
      0.17205654848697194,
      -0.16371740945877464,
      -0.9713872317273159
    ],
    [
      0.16689950340565626,
      -0.14578249696339937,
      -0.9751369233815638
    ],
    [
      0.11749532721876026,
      -0.10262919801417886,
      -0.9877560912475928
    ],
    [
      0.06956531616034997,
      -0.16121010671808528,
      -0.9844653210141301
    ],
    [
      0.0686888453259657,
      -0.1630361684155345,
      -0.9842261174730973
    ],
    [
      0.08374904230929757,
      -0.20778733824089515,
      -0.9745822284338245
    ],
    [
      0.13576447535853425,
      -0.23134342658098436,
      -0.9633525970320476
    ],
    [
      0.1688658274473236,
      -0.10399576045159593,
      -0.9801373445230138
    ],
    [
      0.11820920625579552,
      -0.10075065059702192,
      -0.9878643074636575
    ],
    [
      0.2024166449768764,
      -0.11267958048614637,
      -0.9727953607916576
    ],
    [
      0.2018848848058419,
      -0.10860439908023281,
      -0.973369188842216
    ],
    [
      0.18091081588812935,
      -0.08881080407790666,
      -0.9794814535118708
    ],
    [
      0.24598542493813916,
      -0.1124473029654765,
      -0.9627288168398167
    ],
    [
      0.24040117979184372,
      -0.14158796540799434,
      -0.9602916852739662
    ],
    [
      0.26820128413699706,
      -0.15228720525757175,
      -0.9512500608683838
    ],
    [
      0.29185626381997526,
      -0.1448949869558165,
      -0.9454233781878459
    ],
    [
      0.2926559198727179,
      -0.14414904401050332,
      -0.9452902018292114
    ],
    [
      0.2970428950698512,
      -0.10775891048926753,
      -0.9487642150179819
    ],
    [
      0.2407278834474098,
      -0.14557274123017885,
      -0.959613809374199
    ],
    [
      0.24107970563646963,
      -0.14587657682292546,
      -0.9594793379039792
    ],
    [
      0.32693335545909535,
      -0.14805073985884848,
      -0.9333785724535915
    ],
    [
      0.33862079264533856,
      -0.1390705948615526,
      -0.9305886999276837
    ],
    [
      0.33355847395160093,
      -0.10713789848992948,
      -0.9366217033371802
    ],
    [
      0.3683191661148142,
      -0.10270991375844613,
      -0.9240084769569057
    ],
    [
      0.3427931093714933,
      -0.09513110528567298,
      -0.934581701604814
    ],
    [
      0.34602472111249755,
      -0.14013470300281777,
      -0.9277010064634674
    ],
    [
      0.3719735655726843,
      -0.12695844950822358,
      -0.9195201023433972
    ],
    [
      -0.3593831352385766,
      0.6193129131756976,
      -0.6980653820953463
    ],
    [
      -0.36645296345469547,
      0.5931959385009578,
      -0.716819924472834
    ],
    [
      -0.36191423432818987,
      0.5894127872443751,
      -0.7222261787165134
    ],
    [
      -0.31975457666246543,
      0.6589154376576483,
      -0.6808725701038612
    ],
    [
      -0.33329099853050864,
      0.6549942353125118,
      -0.6781590241277591
    ],
    [
      -0.3431804508721053,
      0.64540655238816,
      -0.6824057152996652
    ],
    [
      -0.12147650956957588,
      0.5580918941838119,
      -0.8208391409217263
    ],
    [
      -0.06067566153601758,
      0.5362184413919653,
      -0.8418956272652437
    ],
    [
      -0.14326069347265596,
      0.5570767337973842,
      -0.8180109329143297
    ],
    [
      -0.16568281580467764,
      0.5555433728685235,
      -0.8148133316342449
    ],
    [
      -0.14376691381347217,
      0.5568670650398508,
      -0.8180648790691679
    ],
    [
      -0.20932982609448247,
      0.5514636064956854,
      -0.8075078418306696
    ],
    [
      -0.1671094275099559,
      0.5549356862476067,
      -0.8149360854485416
    ],
    [
      -0.40595073704229806,
      0.51734712834866,
      -0.7533630916657718
    ],
    [
      -0.42350186715005445,
      0.5588342854835664,
      -0.712986963336981
    ],
    [
      -0.42557976300485695,
      0.5439915266158016,
      -0.7231563346130209
    ],
    [
      -0.4065687591199849,
      0.5829980545766585,
      -0.7034309578540505
    ],
    [
      -0.41032523427008166,
      0.5795146693431964,
      -0.7041277938962844
    ],
    [
      0.9008788465840256,
      -0.1976600083461294,
      0.38645546299417693
    ],
    [
      0.9095298298763426,
      -0.19713859587639063,
      0.3659123700846916
    ],
    [
      0.9156853284511515,
      -0.18847618412572242,
      0.35496071230026804
    ],
    [
      0.9181336715359897,
      -0.19335832452311105,
      0.34589466536715896
    ],
    [
      0.9256732985591597,
      -0.19244458710105014,
      0.3257207780141009
    ],
    [
      0.9298879282794457,
      -0.1857150760130888,
      0.3175190567219757
    ],
    [
      0.9335659896589709,
      -0.1848924473457859,
      0.3070331022325638
    ],
    [
      0.9390033957699647,
      -0.17575764209118966,
      0.2956042523019927
    ],
    [
      0.9407152315730588,
      -0.17514869068474745,
      0.2904785521133447
    ],
    [
      0.9470440900369614,
      -0.16384290779540198,
      0.2761575512116429
    ],
    [
      0.9472699750369942,
      -0.16306619169219524,
      0.2758423671599718
    ],
    [
      0.953652408081342,
      -0.15094013607853157,
      0.2603155006549779
    ],
    [
      0.9595151771699142,
      -0.13605608639310673,
      0.2466158270184206
    ],
    [
      0.9551870393593903,
      -0.14501845572578292,
      0.25804528156653356
    ],
    [
      0.961905742659472,
      -0.12583868041096033,
      0.2426972780052504
    ],
    [
      0.964497337726784,
      -0.11990257107349495,
      0.23530460889645047
    ],
    [
      0.9696809468419106,
      -0.09440715928745369,
      0.22540219521346547
    ],
    [
      0.9710026263544846,
      -0.09267586012247556,
      0.22037487280371235
    ],
    [
      0.9758809154672394,
      -0.06362002882234688,
      0.20882751437362496
    ],
    [
      0.9760472553489733,
      -0.06309095398789095,
      0.20820971843464436
    ],
    [
      0.9801814849954857,
      -0.03178112538328294,
      0.19553571679214143
    ],
    [
      0.9829484952995428,
      -0.026190888653475717,
      0.18200629917644623
    ],
    [
      0.9829044667049746,
      0.0007194977386894801,
      0.18411488710697363
    ],
    [
      0.9842055621831192,
      0.020548569606014012,
      0.175832783220186
    ],
    [
      0.9841628637421546,
      0.02186648878800527,
      0.1759128031125798
    ],
    [
      0.9852332432754975,
      0.05220870442616578,
      0.16306350764958294
    ],
    [
      0.9852227063076884,
      0.05230097005941245,
      0.16309760116751815
    ],
    [
      0.9852066897458898,
      0.08358888080943477,
      0.14960172955207518
    ],
    [
      0.9852071547253187,
      0.08359434456491008,
      0.1495956143568551
    ],
    [
      0.9845649772968125,
      0.10433485812518051,
      0.14052061364983298
    ],
    [
      0.9870844973339997,
      0.10751389232141993,
      0.1187642963216769
    ],
    [
      0.9836198207978938,
      0.14338430885637926,
      0.10923821724697728
    ],
    [
      0.9896514789841934,
      0.12047983560621767,
      0.07793945956123444
    ],
    [
      0.9835045472517239,
      0.14330115039081237,
      0.11037928171469179
    ],
    [
      0.9836548226120395,
      0.1568707951371263,
      0.08840103837129178
    ],
    [
      0.9867704365400113,
      0.14457034201556707,
      0.07337248653369707
    ],
    [
      0.9823157494475362,
      0.16634045966039057,
      0.08594544704226727
    ],
    [
      0.9819505997835272,
      0.17424187021814116,
      0.07357166742473557
    ],
    [
      0.9853514673402487,
      0.16049452256771046,
      0.05765408950093333
    ],
    [
      0.9868064861371303,
      0.1502853626854557,
      0.06022681031061388
    ],
    [
      0.9849982002294763,
      0.1668381744596505,
      0.044085928454145544
    ],
    [
      0.9805769746228906,
      0.1827157143816339,
      0.07130052284119748
    ],
    [
      0.9798597228537859,
      0.1911142066498113,
      0.05788163392230058
    ],
    [
      0.983629427060134,
      0.17540191204358815,
      0.041319722564484074
    ],
    [
      0.9816383318224248,
      0.1891453787657239,
      0.024702453085834557
    ],
    [
      0.9828573822208647,
      0.18233533588068104,
      0.02729819597021496
    ],
    [
      0.9786107215038182,
      0.1979570807040167,
      0.055982586193563354
    ],
    [
      0.9774528007378956,
      0.2071670683413761,
      0.04083905146404986
    ],
    [
      0.9803384764550594,
      0.1971279136616355,
      0.008778225172754143
    ],
    [
      0.9767143877008692,
      0.2108246578868574,
      0.0397739674285292
    ],
    [
      0.975025366539248,
      0.2209470315423854,
      0.0225376098469484
    ],
    [
      0.9794072723089101,
      0.2017833705213497,
      0.0066982333091875216
    ],
    [
      0.9775734770983076,
      0.21035378143188047,
      -0.010068937939688102
    ],
    [
      0.9742810911439499,
      0.22429069756369538,
      0.021680369594299684
    ],
    [
      0.9720597086157673,
      0.2347080377754183,
      0.0034727351529393966
    ],
    [
      0.977078122657131,
      0.21258603296725,
      -0.011203607100557142
    ],
    [
      0.9717657964172074,
      0.2359266899600112,
      0.003135901488138712
    ],
    [
      0.968935189169573,
      0.24679164139780913,
      -0.016077466376854872
    ],
    [
      0.9744929335755854,
      0.22235142243332445,
      -0.030386960248220962
    ],
    [
      0.9655275460024095,
      0.2578567300728898,
      -0.03558742287215887
    ],
    [
      0.9713581857730136,
      0.23225425126829577,
      -0.05021192786144524
    ],
    [
      0.9744918480380272,
      0.22233417028402203,
      -0.03054758307208691
    ],
    [
      0.9688700505817516,
      0.24704231013527847,
      -0.016153082948434233
    ],
    [
      0.9655260058885632,
      0.25787282308283477,
      -0.03551251987915344
    ],
    [
      0.9618523816687915,
      0.26773659698589647,
      -0.056188170574286704
    ],
    [
      0.9680061034701724,
      0.2410258145220212,
      -0.06979068976941216
    ],
    [
      0.9713090062971685,
      0.23210365329437152,
      -0.05183346808205129
    ],
    [
      0.9618367752104053,
      0.2681872702272024,
      -0.05427343678936991
    ],
    [
      0.9578371143195323,
      0.2775614795287058,
      -0.0742137959807133
    ],
    [
      0.9578156711995938,
      0.2769430275562282,
      -0.07675740675962084
    ],
    [
      0.9643098297628112,
      0.24898044977068262,
      -0.09008489248928761
    ],
    [
      0.967820300148861,
      0.24075861513174956,
      -0.07320625560435755
    ],
    [
      0.9532556608875807,
      0.2860469803759344,
      -0.097369245676402
    ],
    [
      0.9602697895949451,
      0.25627877383835695,
      -0.11046773859904951
    ],
    [
      0.9639542067481627,
      0.248694001135096,
      -0.09457050857396013
    ],
    [
      0.9533371698971865,
      0.2866288195828826,
      -0.09482700183463766
    ],
    [
      0.9480272208486524,
      0.2960715652027355,
      -0.11655907003911371
    ],
    [
      0.9554961564201441,
      0.2637672653750794,
      -0.13211330282331127
    ],
    [
      0.9597402603926364,
      0.25600551547000877,
      -0.11558463838421427
    ],
    [
      0.9391361054092553,
      0.31928990877660585,
      -0.1267964103204928
    ],
    [
      0.9390679564459041,
      0.31868390048460843,
      -0.12880972303529553
    ],
    [
      0.9500718491308516,
      0.2716163552679953,
      -0.1535839739035766
    ],
    [
      0.9549547193832676,
      0.26360769741967033,
      -0.136280834267787
    ],
    [
      0.9351007728497235,
      0.31955910462343795,
      -0.1531943969866924
    ],
    [
      0.9442803081202307,
      0.2793096909800543,
      -0.17412867719301411
    ],
    [
      0.9495246433371411,
      0.2715463559132363,
      -0.1570526290315348
    ],
    [
      0.93772077871186,
      0.2870574307519069,
      -0.1956470613685195
    ],
    [
      0.94352509353143,
      0.2792850135071596,
      -0.17821413834713531
    ],
    [
      0.928334035146571,
      0.3298460495057098,
      -0.17145699989782304
    ],
    [
      0.9198249379172875,
      0.34718203955602484,
      -0.18272031905394975
    ],
    [
      0.9296410791847596,
      0.2973520213772708,
      -0.217598803477976
    ],
    [
      0.9307354325897993,
      0.29530292930225815,
      -0.21570288469880208
    ],
    [
      0.9374104311895752,
      0.28707794015810056,
      -0.19709880712870032
    ],
    [
      0.9116420480194314,
      0.3660483970924133,
      -0.18686184005572617
    ],
    [
      0.9198451826952443,
      0.3106436305524473,
      -0.23955244659478517
    ],
    [
      0.9233592458876148,
      0.30454663488643524,
      -0.23379275055741927
    ],
    [
      0.9155211779889586,
      0.31534677237029585,
      -0.24975465122665144
    ],
    [
      0.9095231930248955,
      0.37140215207153465,
      -0.18662262131486507
    ],
    [
      0.9086685007837036,
      0.37251881911717666,
      -0.18855048418670453
    ],
    [
      0.9061708545423052,
      0.3302847780237966,
      -0.26413320083594116
    ],
    [
      0.8989597105074836,
      0.3875236964027036,
      -0.20419800099581403
    ],
    [
      0.8868591075804023,
      0.36668626716647773,
      -0.2811087063276537
    ],
    [
      0.9000852778371979,
      0.3367710750701891,
      -0.276462900977334
    ],
    [
      0.8924132719884564,
      0.4008967483034003,
      -0.2070757088086806
    ],
    [
      0.8665466939458486,
      0.4153159568263879,
      -0.2767841816594689
    ],
    [
      0.877723528924247,
      0.37994970033736614,
      -0.291958270967466
    ],
    [
      0.8628888049206384,
      0.4236215975647515,
      -0.2756223002939355
    ],
    [
      0.8864011942036679,
      0.4148326059417171,
      -0.2054430139038939
    ],
    [
      0.8587047519214139,
      0.441329744953154,
      -0.2604883975288859
    ],
    [
      0.8528837838232333,
      0.46086586516609207,
      -0.2453403872501912
    ],
    [
      0.8567293834307617,
      0.4465418979979699,
      -0.2580990060010256
    ],
    [
      0.8803679768759651,
      0.43150478373621937,
      -0.19686504744133418
    ],
    [
      0.8528284426534423,
      0.46156798306809577,
      -0.24421024632016206
    ],
    [
      0.8485517031981916,
      0.4760347742127625,
      -0.2309781390947035
    ],
    [
      0.87884073874734,
      0.4376489140844587,
      -0.190006273366759
    ],
    [
      0.8750760803222274,
      0.4472221268315852,
      -0.1850249251320481
    ],
    [
      0.8482528330918143,
      0.4790886334438033,
      -0.22570160047429785
    ],
    [
      0.8440374148193872,
      0.4952332341463398,
      -0.20577873112146983
    ],
    [
      0.844696195511113,
      0.4899215910193884,
      -0.21555781577591374
    ],
    [
      0.8721262184272289,
      0.45790240568833135,
      -0.17239850926461173
    ],
    [
      0.8708724344289384,
      0.4608683507437057,
      -0.17082612866476624
    ],
    [
      0.8671626785475737,
      0.4729205210140247,
      -0.15612517330021022
    ],
    [
      0.8399572317008297,
      0.5104759670384957,
      -0.1840818730608515
    ],
    [
      0.8411387832662476,
      0.5032114882473986,
      -0.19815081473770138
    ],
    [
      0.8671975804701401,
      0.47406719880875553,
      -0.15240947293509916
    ],
    [
      0.863284493758875,
      0.4853860439334885,
      -0.13834836894622463
    ],
    [
      0.8366733157769285,
      0.5226133021688203,
      -0.16386915226192314
    ],
    [
      0.8383472541162035,
      0.5145372032397288,
      -0.1800703973396509
    ],
    [
      0.8633078843659505,
      0.4872009297205402,
      -0.13166150109666805
    ],
    [
      0.8598720204787099,
      0.49610541871718644,
      -0.12041396064122352
    ],
    [
      0.8336798180773223,
      0.5337306149693761,
      -0.14180829162984315
    ],
    [
      0.8335803102221081,
      0.5335812131050512,
      -0.14295088468196215
    ],
    [
      0.8359096126105419,
      0.5243974729261678,
      -0.16205681082244908
    ],
    [
      0.8310798582515642,
      0.5422932800739216,
      -0.12338665890292745
    ],
    [
      0.8598147950411082,
      0.49883007338389607,
      -0.10902786853017882
    ],
    [
      0.8572301780276524,
      0.5048921802027582,
      -0.10119440818931119
    ],
    [
      0.8314053537820092,
      0.542770661699494,
      -0.11901742099753995
    ],
    [
      0.8569522459036231,
      0.5079769915657935,
      -0.08713337064811706
    ],
    [
      0.8549980001502884,
      0.5121689382775085,
      -0.0816173903203065
    ],
    [
      0.829260856254731,
      0.5506425882280481,
      -0.09549435749397289
    ],
    [
      0.828818278460453,
      0.5499529286867185,
      -0.10301474418136582
    ],
    [
      0.854379665842363,
      0.5157002295836761,
      -0.0639426289922113
    ],
    [
      0.8530970847744663,
      0.5182276471857302,
      -0.060543122166346566
    ],
    [
      0.8272663616896224,
      0.557046840990016,
      -0.07300125861831912
    ],
    [
      0.8268834389582649,
      0.5563111112411852,
      -0.08235123487933348
    ],
    [
      0.8251365066584312,
      0.5626212603731165,
      -0.0510594041845999
    ],
    [
      0.8249050938697042,
      0.5619517570380704,
      -0.061170326708623775
    ],
    [
      0.8521158452644905,
      0.5216569902380641,
      -0.04210190951663873
    ],
    [
      0.8508317585125889,
      0.5239946781316033,
      -0.03892166486846607
    ],
    [
      0.8225324646890078,
      0.5673674089839674,
      -0.03917355939209109
    ],
    [
      0.849491096917193,
      0.5272152891127537,
      -0.02022165137123452
    ],
    [
      0.8481734565569373,
      0.5294405387224818,
      -0.017161105719196084
    ],
    [
      0.8225737844292301,
      0.5679033138877637,
      -0.029294969620577677
    ],
    [
      0.8195108904112722,
      0.5730161993894967,
      -0.007371277673541757
    ],
    [
      0.8196564964962155,
      0.5726011106185633,
      -0.01706446219302962
    ],
    [
      0.8464701595985706,
      0.5324335261958144,
      0.0016760345644341989
    ],
    [
      0.845180515969854,
      0.5344619902053254,
      0.004502938006911063
    ],
    [
      0.8414287852862216,
      0.5396994480045135,
      0.02687201360852735
    ],
    [
      0.8162036177630451,
      0.577610383207445,
      0.013337899439778563
    ],
    [
      0.8164995770981937,
      0.5773297391141836,
      0.0043373877875378134
    ],
    [
      0.8431213938678911,
      0.5372146593569032,
      0.023382150763155755
    ],
    [
      0.8389757392330087,
      0.542235044562128,
      0.04583519856107953
    ],
    [
      0.8377271837286534,
      0.5439451115747913,
      0.04834129948550109
    ],
    [
      0.81226997217517,
      0.5821937499298949,
      0.03560800254318455
    ],
    [
      0.812751800339349,
      0.5820399656525862,
      0.02576799232154783
    ],
    [
      0.8085361890384605,
      0.5864788295781467,
      0.048081321444091295
    ],
    [
      0.8349662306502902,
      0.5462233258050887,
      0.06686906624198047
    ],
    [
      0.8331018108096099,
      0.5486172230146411,
      0.07043092671158387
    ],
    [
      0.8079656311691072,
      0.5865022770436016,
      0.056627006562035
    ],
    [
      0.8282074775156583,
      0.5528373371175012,
      0.09188717470888248
    ],
    [
      0.8028165123714436,
      0.5910472927302992,
      0.07841393511319204
    ],
    [
      0.8034861004491901,
      0.5911245761893755,
      0.07058202186028115
    ],
    [
      0.8300405717700322,
      0.5506329288495007,
      0.08852133574624128
    ],
    [
      0.8247446033572946,
      0.5546621922134417,
      0.11020976255304157
    ],
    [
      0.8229875933190197,
      0.5566448791117267,
      0.11330445623036721
    ],
    [
      0.7971195898894861,
      0.5954423052386528,
      0.10024380552680764
    ],
    [
      0.7979138079942627,
      0.595590930386934,
      0.09276313197020235
    ],
    [
      0.8188163077628176,
      0.5583769341265157,
      0.13324809033205542
    ],
    [
      0.818197088787556,
      0.5590284986987564,
      0.1343155297878194
    ],
    [
      0.7909403591241777,
      0.5993645317139848,
      0.1231889054736355
    ],
    [
      0.792089893821189,
      0.5996319900228506,
      0.11417126016460347
    ],
    [
      0.786027922348871,
      0.6030156846334824,
      0.1361329841512695
    ],
    [
      0.8132123652449853,
      0.5606539748145424,
      0.15605373926090632
    ],
    [
      0.7846275578724451,
      0.6026824085859748,
      0.14537369021982954
    ],
    [
      0.8132339166037028,
      0.5605021801678006,
      0.15648611092536002
    ],
    [
      0.8079915726200405,
      0.5618156182976627,
      0.17751853315022845
    ],
    [
      0.7781565631794317,
      0.6051395385691486,
      0.16816213022286836
    ],
    [
      0.7801508629920443,
      0.6056556124464006,
      0.15667134417290285
    ],
    [
      0.7740258536598653,
      0.6075735421831816,
      0.1781526556217966
    ],
    [
      0.8080467073057885,
      0.5611520710308822,
      0.17935682866850994
    ],
    [
      0.8027343880479115,
      0.5621233984951595,
      0.19908487413562362
    ],
    [
      0.7714829319258222,
      0.6068716956748305,
      0.1911042404968902
    ],
    [
      0.764838042459627,
      0.6077614524799683,
      0.2136557644576086
    ],
    [
      0.7679830341829675,
      0.6086887289000337,
      0.19924881559794566
    ],
    [
      0.8027627321412553,
      0.5611458759453476,
      0.20171093622963454
    ],
    [
      0.7971601646494653,
      0.5618494967355087,
      0.22104482557638186
    ],
    [
      0.7967353805247911,
      0.5519975046243066,
      0.24599082972451422
    ],
    [
      0.7584154320155297,
      0.6081995082264708,
      0.23430619000311628
    ],
    [
      0.7616520767376658,
      0.609211680794024,
      0.22078777589649545
    ],
    [
      0.8009674387699495,
      0.5362292150074184,
      0.2662881728557149
    ],
    [
      0.772725582068072,
      0.5667536878018843,
      0.2858066342486184
    ],
    [
      0.764286074493929,
      0.5785695107121799,
      0.284822958359977
    ],
    [
      0.7625655177545928,
      0.582638991110036,
      0.28111498923029543
    ],
    [
      0.7577996866629414,
      0.6084529609769894,
      0.2356366464960026
    ],
    [
      0.8621289134977286,
      0.3761872477562638,
      -0.33943613705201375
    ],
    [
      0.8412856599825107,
      0.4413628509360969,
      -0.31214943876507617
    ],
    [
      0.8401277390226433,
      0.4363378527251108,
      -0.322171787101138
    ],
    [
      0.8436150558172772,
      0.4199191857839878,
      -0.33463639223629715
    ],
    [
      0.8307743389046843,
      0.4720410506613792,
      -0.2949427814135921
    ],
    [
      0.8305454208186914,
      0.4714182465923107,
      -0.29657906321406824
    ],
    [
      0.834833076667395,
      0.4546356202456374,
      -0.3104193726330816
    ],
    [
      0.826848716804604,
      0.48913195909729,
      -0.2776168692789159
    ],
    [
      0.8263149239393841,
      0.4877763842747806,
      -0.2815632174465826
    ],
    [
      0.8233253592400972,
      0.5046412288068486,
      -0.2597548517746658
    ],
    [
      0.8225972798812439,
      0.5027597128951062,
      -0.26564334401902306
    ],
    [
      0.8202205847706531,
      0.5189363063631479,
      -0.24071415051189005
    ],
    [
      0.8192697418919332,
      0.5165509411387713,
      -0.24894219254472438
    ],
    [
      0.8162317781864399,
      0.5296841429016689,
      -0.23065210390787005
    ],
    [
      0.8171472131582466,
      0.5321267680401788,
      -0.22161122436109798
    ],
    [
      0.8131397315278965,
      0.5420892187838185,
      -0.21199777331163125
    ],
    [
      0.8140301137607715,
      0.5446477788971126,
      -0.20177653687450167
    ],
    [
      0.8103032210733562,
      0.5532583061280185,
      -0.1931681563262941
    ],
    [
      0.811219792992431,
      0.5560678200160764,
      -0.18086190035462402
    ],
    [
      0.8079841573270683,
      0.5630537195937232,
      -0.17358603158128907
    ],
    [
      0.8088205120698372,
      0.5659901019220351,
      -0.15957626321408364
    ],
    [
      0.8066311858086617,
      0.5747304049254763,
      -0.1379532229964573
    ],
    [
      0.8059527187934143,
      0.5717814754845859,
      -0.15331718547564546
    ],
    [
      0.8043616617848481,
      0.5826505099017294,
      -0.11627854643902467
    ],
    [
      0.8039487950852747,
      0.5797999127044832,
      -0.13228150327543325
    ],
    [
      0.8018529017156183,
      0.5871051189100237,
      -0.11108331719880314
    ],
    [
      0.8019598690735253,
      0.5898808180376796,
      -0.09434505237039159
    ],
    [
      0.799692276518187,
      0.5960394864261703,
      -0.07231316268831711
    ],
    [
      0.7998991276115933,
      0.5933301901844611,
      -0.0901147660590816
    ],
    [
      0.7972854412945902,
      0.6014764834864401,
      -0.050615856334519614
    ],
    [
      0.7978201705552723,
      0.5989841954246773,
      -0.06856317587895268
    ],
    [
      0.7944329073990081,
      0.6066579651666855,
      -0.029025315525861406
    ],
    [
      0.7952775236997861,
      0.6044405428423502,
      -0.04674709045899101
    ],
    [
      0.7910752066890788,
      0.6116782047023361,
      -0.007056291799398328
    ],
    [
      0.7922395983146063,
      0.6096984939272254,
      -0.0249833017270387
    ],
    [
      0.7875038592393405,
      0.616128931342704,
      0.014926876620465003
    ],
    [
      0.7890077361389881,
      0.6143739660481787,
      -0.003379667892010007
    ],
    [
      0.7834406293170817,
      0.6204027699591387,
      0.03634808608830705
    ],
    [
      0.7852174873613982,
      0.6189333829466823,
      0.018840515280316984
    ],
    [
      0.7788499736980274,
      0.6245716107031877,
      0.05747191987577612
    ],
    [
      0.7808689914183224,
      0.6233739168669322,
      0.04060268477958889
    ],
    [
      0.7732040279527953,
      0.629292879398033,
      0.07839644823909897
    ],
    [
      0.7753752455997301,
      0.6283561157660749,
      0.06294299238620071
    ],
    [
      0.7667739715692125,
      0.6341465058934879,
      0.09957853979175
    ],
    [
      0.7692089132299469,
      0.6333876978603149,
      0.08448474422530049
    ],
    [
      0.7599090591912774,
      0.638769396452928,
      0.12046526434698844
    ],
    [
      0.7625972850186773,
      0.6381630157889319,
      0.10579861133926836
    ],
    [
      0.7524154423304983,
      0.6431588466037033,
      0.14218895940963522
    ],
    [
      0.7555616199937496,
      0.6426911939246406,
      0.1267859126407226
    ],
    [
      0.7485353763311852,
      0.6464219394972758,
      0.14776151906809593
    ],
    [
      0.7449379877876284,
      0.6467519518514954,
      0.16364384231372772
    ],
    [
      0.7371583190914305,
      0.6497638564424276,
      0.18548461784029754
    ],
    [
      0.7413061826047315,
      0.6495978303873744,
      0.16878330008628337
    ],
    [
      0.7292473196378669,
      0.6521185622485617,
      0.2072190328417138
    ],
    [
      0.7339046638692238,
      0.6521290599070483,
      0.19003061220695722
    ],
    [
      0.7505932181108256,
      0.6152573761293783,
      0.24097340526379124
    ],
    [
      0.7212144579864065,
      0.6538362590525568,
      0.22879652956181779
    ],
    [
      0.7263753812601903,
      0.6540503119472187,
      0.21118000601586082
    ],
    [
      0.7369686160567697,
      0.6241636796956306,
      0.25941657598576795
    ],
    [
      0.7122161404243725,
      0.6554652391653621,
      0.25122398286171915
    ],
    [
      0.7179444671211767,
      0.6558707587393481,
      0.23321511520645793
    ],
    [
      0.7085563969868772,
      0.6494663987524879,
      0.2759370021951554
    ],
    [
      0.7048396132815571,
      0.6566290726116852,
      0.2684015285914432
    ],
    [
      0.7094425208192621,
      0.6570275892644225,
      0.25496285337082386
    ],
    [
      0.730883632052777,
      0.6223213361564531,
      0.2802236088586895
    ],
    [
      0.7311353262708628,
      0.6207319339963516,
      0.28307772924754776
    ],
    [
      0.7251549035099542,
      0.6187003980908216,
      0.30225847104378734
    ],
    [
      0.7060650772687626,
      0.6417811091200766,
      0.2993144076686935
    ],
    [
      0.7253184754059235,
      0.6167875778994734,
      0.3057551193091096
    ],
    [
      0.7187657116395736,
      0.6143581642401835,
      0.32548409761874547
    ],
    [
      0.6976328024445126,
      0.6405120439654611,
      0.32101837095188573
    ],
    [
      0.6999298233409161,
      0.6451732526032277,
      0.3063490109716787
    ],
    [
      0.7187686578686908,
      0.612837426340712,
      0.3283320047478364
    ],
    [
      0.7089069101868322,
      0.6087729891986937,
      0.3561550790195836
    ],
    [
      0.7019160638121325,
      0.6106609815314156,
      0.36661560932067594
    ],
    [
      0.6964169382306427,
      0.6156612530781702,
      0.3687338736862597
    ],
    [
      0.6887812862919604,
      0.6349712003758986,
      0.34984555784972143
    ],
    [
      0.6925479141945275,
      0.6429759981524089,
      0.3270462541365103
    ],
    [
      0.697630457698341,
      0.6622637901690096,
      0.2733466969300732
    ],
    [
      0.6822606919978912,
      0.6671974932584159,
      0.29894456533652636
    ],
    [
      0.6770979083488015,
      0.6709092626173558,
      0.30235605474988236
    ],
    [
      0.6748245723781838,
      0.6629821479046836,
      0.3241395811595579
    ],
    [
      0.6661681837481309,
      0.6648772339554989,
      0.33787307488079193
    ],
    [
      0.6645754046622382,
      0.6619917060009457,
      0.3465638652600407
    ],
    [
      0.6573284482380015,
      0.6631367333370086,
      0.35800696087665956
    ],
    [
      0.6560135676305515,
      0.661299177253241,
      0.3637713529798933
    ],
    [
      0.6456751185863918,
      0.6627435831301662,
      0.3793080334744273
    ],
    [
      0.6442549511722521,
      0.6608248264388455,
      0.3850274102607616
    ],
    [
      0.6317307808132595,
      0.6622125068898109,
      0.40297743893645144
    ],
    [
      0.6315338619243532,
      0.6619971692892979,
      0.40363935523666244
    ],
    [
      0.6159271593995764,
      0.6633709639895797,
      0.4249384643092508
    ],
    [
      0.6154128197967691,
      0.6629372324217111,
      0.4263581676229875
    ],
    [
      0.6018223667644182,
      0.6639247483005851,
      0.4438623293951389
    ],
    [
      0.5799551100065424,
      0.6742596926085116,
      0.45719354468405904
    ],
    [
      0.6009384089495522,
      0.6633550772216024,
      0.44590701965040075
    ],
    [
      0.5991949118263882,
      0.6634759409557652,
      0.4480682240621721
    ],
    [
      0.5587227727446117,
      0.680890130597887,
      0.4735160961054707
    ],
    [
      0.5683875209905603,
      0.6757197548613436,
      0.4694022143879714
    ],
    [
      0.5520466018299852,
      0.681758933956973,
      0.48005135702111873
    ],
    [
      0.5375614656767919,
      0.6892152151479706,
      0.4858086638049552
    ],
    [
      0.5323251772056755,
      0.6898886230967622,
      0.4905951420821447
    ],
    [
      0.49212679690815014,
      0.7088699029702688,
      0.505286726946044
    ],
    [
      0.39652319941441516,
      0.779859441665829,
      0.4843434768537898
    ],
    [
      0.3721296825590695,
      0.7853565389097302,
      0.4947065859175676
    ],
    [
      0.362147719012894,
      0.8058099603325258,
      0.4685289077982821
    ],
    [
      0.34462039378591874,
      0.8165060760214639,
      0.46320040156164555
    ],
    [
      0.33960593957973073,
      0.8261676569061256,
      0.44957180570450644
    ],
    [
      0.32630257445291105,
      0.8285255277111243,
      0.4550517331429534
    ],
    [
      0.3062005260178583,
      0.8397208155345222,
      0.44845310772077807
    ],
    [
      0.29253773595267984,
      0.8416997958931745,
      0.45383160603583855
    ],
    [
      0.2874745941083445,
      0.8504052434471866,
      0.4406464338443848
    ],
    [
      0.2688514454601896,
      0.8597853752675987,
      0.43415205717573335
    ],
    [
      0.26370229496918207,
      0.8679919480746747,
      0.42077437862293576
    ],
    [
      0.22449915617328206,
      0.8714580038326396,
      0.4360746225515941
    ],
    [
      0.21872280695774804,
      0.8705388296810608,
      0.44082023516854674
    ],
    [
      0.20029579795588123,
      0.8786801261076286,
      0.4333622379773054
    ],
    [
      0.19756678287901547,
      0.8861626123274772,
      0.4191457870667165
    ],
    [
      0.1685677543289574,
      0.897294260777685,
      0.4079802958182172
    ],
    [
      0.16032428278084704,
      0.8971670251906475,
      0.41156707018585814
    ],
    [
      0.13639327031220097,
      0.9053435213936409,
      0.40218153125685024
    ],
    [
      0.09893219497208115,
      0.8911739385324803,
      0.4427430768273098
    ],
    [
      0.09796096364060006,
      0.8910532660874354,
      0.44320167711496644
    ],
    [
      0.0454122337870214,
      0.8758541087853362,
      0.48043450037056806
    ],
    [
      0.0306851585520506,
      0.8944135441356287,
      0.4461869934359128
    ],
    [
      -0.03255881695033898,
      0.9080792023018107,
      0.4175309399142791
    ],
    [
      -0.09078216942720614,
      0.9120822730288745,
      0.399830620313867
    ],
    [
      -0.10895987734724485,
      0.9161898894976496,
      0.38564728899702916
    ],
    [
      -0.06513166989760887,
      0.9087748915148922,
      0.4121723694383757
    ],
    [
      -0.1187890696422693,
      0.9096465297025564,
      0.3980356113887554
    ],
    [
      -0.14482369166516454,
      0.8963086438970795,
      0.41911443927387126
    ],
    [
      -0.17568988495068197,
      0.8942904089020515,
      0.4115552561586569
    ],
    [
      -0.2041967394777065,
      0.8843653315335792,
      0.41976380497629395
    ],
    [
      -0.2057097459826845,
      0.8841619547151022,
      0.41945338029643897
    ],
    [
      -0.21685648088751064,
      0.8716501860565363,
      0.43954433205842874
    ],
    [
      -0.22527962977517618,
      0.8683139191480505,
      0.44190499682863127
    ],
    [
      -0.23226505759412558,
      0.8598586132807498,
      0.4546384367689377
    ],
    [
      -0.23785819216517923,
      0.8575038702663252,
      0.4561913994127749
    ],
    [
      -0.2459360675164391,
      0.8467853690211514,
      0.47166724447035946
    ],
    [
      -0.24935359777821697,
      0.8452744112495685,
      0.47258221820309176
    ],
    [
      -0.25834224661627714,
      0.8326510457597756,
      0.489848465965146
    ],
    [
      -0.2582583476064343,
      0.8325283673421902,
      0.4901011563566662
    ],
    [
      -0.26717707505167576,
      0.8196132726340163,
      0.5068041967949644
    ],
    [
      -0.265824619846233,
      0.8179259042577209,
      0.5102298370614905
    ],
    [
      -0.27415891709747403,
      0.8054025929899211,
      0.5255126557762924
    ],
    [
      -0.2716034419703336,
      0.8026123732150443,
      0.5310790418308579
    ],
    [
      -0.2793808028761537,
      0.7905448402331097,
      0.5449635057185783
    ],
    [
      -0.27549242087295417,
      0.7866815118239604,
      0.5524817870264387
    ],
    [
      -0.28268813315609953,
      0.7751429737347351,
      0.5650139729620773
    ],
    [
      -0.277472029485573,
      0.7703376822655881,
      0.5740985352139817
    ],
    [
      -0.28449280488781364,
      0.7588357904302061,
      0.5858601259082484
    ],
    [
      -0.2780394414908823,
      0.7531153201925889,
      0.5962477534269228
    ],
    [
      -0.2841822991362012,
      0.7425273615478699,
      0.6065422806453162
    ],
    [
      -0.2756469625821925,
      0.7355290556651545,
      0.61888267086059
    ],
    [
      -0.28132304281243276,
      0.7254065957980596,
      0.6282058709972591
    ],
    [
      -0.2716130224277648,
      0.7176391103517307,
      0.6412647451257796
    ],
    [
      -0.2773501565038661,
      0.7072693217284287,
      0.6502668661627236
    ],
    [
      -0.2444808013513121,
      0.6802152334975101,
      0.6910400667751095
    ],
    [
      -0.25272937626083075,
      0.6735642076975918,
      0.6945783760552345
    ],
    [
      -0.2358843008781125,
      0.632298342360324,
      0.7379413275102774
    ],
    [
      -0.2345376748429194,
      0.631735830955538,
      0.7388517570975879
    ],
    [
      -0.22571330332357048,
      0.6079670625552938,
      0.7612027033258943
    ],
    [
      -0.226474050138215,
      0.6061912354682797,
      0.7623920845965244
    ],
    [
      -0.21285401830806466,
      0.5806203554540443,
      0.7858582376755552
    ],
    [
      -0.2168081073449932,
      0.5758365414557308,
      0.7882934238681585
    ],
    [
      -0.21736664703041558,
      0.5466006980236632,
      0.8086899391477546
    ],
    [
      -0.21391919937535986,
      0.5436741814118388,
      0.811576835921758
    ],
    [
      -0.214510866262271,
      0.5170129287896533,
      0.8286632124812559
    ],
    [
      -0.20923182482889438,
      0.47032916088783616,
      0.8573287140282394
    ],
    [
      -0.20763025287449738,
      0.5122424184290498,
      0.8333650957732934
    ],
    [
      -0.47359478118117104,
      0.8800206607905833,
      -0.035659778738289925
    ],
    [
      -0.455341772151204,
      0.8869539331366605,
      -0.07730841498575296
    ],
    [
      -0.49136343492626783,
      0.870835621185382,
      -0.01439776691466018
    ],
    [
      -0.49454365968280567,
      0.8690694866783831,
      -0.01203312063054081
    ],
    [
      -0.4931586333952076,
      0.8426769516955747,
      0.21607896100459528
    ],
    [
      -0.49770149534236097,
      0.8433225385193177,
      0.20273213252790437
    ],
    [
      -0.4967296390323016,
      0.8475726333387457,
      0.18676267539865574
    ],
    [
      -0.46087666953164785,
      0.8710402952855387,
      0.16994557796629475
    ],
    [
      -0.4916841607497911,
      0.837963702909524,
      0.2367773609827012
    ],
    [
      -0.49421370267102577,
      0.8384087492469999,
      0.22983382100612643
    ],
    [
      -0.4906902708004669,
      0.8323038130475885,
      0.25786318257597235
    ],
    [
      -0.4928888907112469,
      0.8326821185258365,
      0.2523906315629828
    ],
    [
      -0.492516551531503,
      0.824110767286068,
      0.2797657765179378
    ],
    [
      -0.49547966355774126,
      0.8150054835254527,
      0.30044294770247243
    ],
    [
      -0.49821997571723237,
      0.8179497080845686,
      0.2876371513568605
    ],
    [
      -0.4980293533824309,
      0.8063261524927178,
      0.3190687997529192
    ],
    [
      -0.498995445877273,
      0.8074087360373818,
      0.3147930716586038
    ],
    [
      -0.5010769698913592,
      0.7961198076516546,
      0.33928619498763335
    ],
    [
      -0.5019796743173252,
      0.7970357874737445,
      0.33578320395514183
    ],
    [
      -0.5041559037873393,
      0.7847177165061933,
      0.3606174289710311
    ],
    [
      -0.5051974820791724,
      0.78565519386115,
      0.3571014148107832
    ],
    [
      -0.5069583960662057,
      0.7727845670085046,
      0.3818339922681821
    ],
    [
      -0.5081209002282259,
      0.7737857107545759,
      0.3782443979536153
    ],
    [
      -0.5097809384357869,
      0.7608744950127198,
      0.40148897574736375
    ],
    [
      -0.5106722495476559,
      0.7616393351105908,
      0.398897702117014
    ],
    [
      -0.5128880590502536,
      0.7475135112001522,
      0.4221011602174097
    ],
    [
      -0.5136637471819661,
      0.7481788136202591,
      0.41997382975700154
    ],
    [
      -0.5158427415355108,
      0.7341769119456895,
      0.4414640732506097
    ],
    [
      -0.5164760199898231,
      0.7347304851128945,
      0.4397995395873472
    ],
    [
      -0.5185279653892421,
      0.7196555004031148,
      0.4617626120084165
    ],
    [
      -0.5193789896229857,
      0.7203792325217037,
      0.4596729560129111
    ],
    [
      -0.5209263917679575,
      0.7049049330198285,
      0.48139872222922203
    ],
    [
      -0.5218106941194015,
      0.7056636830576652,
      0.47932490642164566
    ],
    [
      -0.5231442640937533,
      0.6892071639046766,
      0.5013118432356026
    ],
    [
      -0.5241072942697735,
      0.6900606564856695,
      0.49912707246129595
    ],
    [
      -0.5253476871379054,
      0.6734109629287657,
      0.5201225650038712
    ],
    [
      -0.5261244784572974,
      0.6741448275997021,
      0.5183838197596498
    ],
    [
      -0.5277329947851608,
      0.6563983964998318,
      0.5391094798717001
    ],
    [
      -0.5283234902423217,
      0.6570042661795258,
      0.5377914873629689
    ],
    [
      -0.5296926770238366,
      0.6388013610019831,
      0.5579950618861566
    ],
    [
      -0.5305794270984628,
      0.6397915286288589,
      0.5560146323925433
    ],
    [
      -0.5311027335523067,
      0.6209504637484297,
      0.576498402412251
    ],
    [
      -0.5323631758017796,
      0.6224313598715273,
      0.573732212185027
    ],
    [
      -0.5336489585876732,
      0.6042595613575563,
      0.5916833371882847
    ],
    [
      -0.5316560351304015,
      0.6018567883456506,
      0.5959112909080344
    ],
    [
      -0.5312231418867368,
      0.583062739897329,
      0.6146867615846331
    ],
    [
      -0.5339072254777482,
      0.5863607001387956,
      0.6091996420840992
    ],
    [
      -0.5292869509267023,
      0.5632585044767352,
      0.6345038854990143
    ],
    [
      -0.5332892059648103,
      0.5679297837917936,
      0.6269436844594807
    ],
    [
      -0.5256738928021308,
      0.5431876001433505,
      0.6546863290742838
    ],
    [
      -0.5311032214788091,
      0.5492078230090909,
      0.6452132479114531
    ],
    [
      -0.5208781101306243,
      0.5230596679811367,
      0.6746069804843501
    ],
    [
      -0.5273145041416214,
      0.5299773057765207,
      0.6641260942650395
    ],
    [
      -0.5143969664969972,
      0.5019371471499521,
      0.6953091838668999
    ],
    [
      -0.5224521796208553,
      0.5101821838879903,
      0.6831967939420518
    ],
    [
      -0.5063395314490756,
      0.48064825008319184,
      0.7159591738248041
    ],
    [
      -0.5158042690766197,
      0.49023430724930905,
      0.7025783088013209
    ],
    [
      -0.4964133603518356,
      0.45901530965776777,
      0.736803040957339
    ],
    [
      -0.5076123497329778,
      0.4700740125761954,
      0.722052716288139
    ],
    [
      -0.48514206944594523,
      0.4367647445027762,
      0.7575445402173593
    ],
    [
      -0.49766289903913224,
      0.44905685625270136,
      0.7420778791827763
    ],
    [
      -0.47232205506700836,
      0.4136851388888727,
      0.7783164408900611
    ],
    [
      -0.4863857905489308,
      0.427414255145044,
      0.7620668719022622
    ],
    [
      -0.45810933111222885,
      0.3896991518774531,
      0.7989182760294697
    ],
    [
      -0.4735717974490354,
      0.40497122285631904,
      0.7821304631064739
    ],
    [
      -0.4418788743056042,
      0.3646428143429277,
      0.8196210578007872
    ],
    [
      -0.4593453953406757,
      0.38182613667347604,
      0.8020041203961027
    ],
    [
      -0.4234622786769711,
      0.3381443012779815,
      0.8404392482808813
    ],
    [
      -0.4430767540961739,
      0.3577835157029968,
      0.821993884326886
    ],
    [
      -0.40202597803506374,
      0.3105039736081031,
      0.8613723906409637
    ],
    [
      -0.42436192805168077,
      0.3334054993546106,
      0.8418775011962031
    ],
    [
      -0.37568071821929144,
      0.2820261422922484,
      0.8827940037301962
    ],
    [
      -0.3776789489829508,
      0.2815843059088035,
      0.8820821334552644
    ],
    [
      -0.4025155928256319,
      0.3081784178621588,
      0.8619786890035083
    ],
    [
      -0.35007622436645125,
      0.25197400709381657,
      0.9021949550304609
    ],
    [
      -0.31958200457772756,
      0.2610916418582333,
      0.9108778715622932
    ],
    [
      -0.4808255274665667,
      0.865393704333659,
      0.14106930437258738
    ],
    [
      -0.48442731316866494,
      0.8666268168480344,
      0.11953300203722633
    ],
    [
      -0.4849847162067474,
      0.8664369155384041,
      0.1186460974417501
    ],
    [
      -0.48802072522895895,
      0.8671603752262453,
      0.09934110621730742
    ],
    [
      -0.4908929541375138,
      0.8660709150610271,
      0.09457947802509757
    ],
    [
      -0.4943975208450428,
      0.8663215097065522,
      0.07112055400540461
    ],
    [
      -0.4927434774363091,
      0.8679160792261442,
      0.06265416877344188
    ],
    [
      0.5037501121457165,
      0.8451773037287007,
      -0.17863692164572714
    ],
    [
      0.4769380933242217,
      0.8466838697650955,
      -0.2359162559381169
    ],
    [
      0.5046802213307658,
      0.8490727397665085,
      -0.15611968736493192
    ],
    [
      0.5036124828078572,
      0.8492739373083587,
      -0.15845581898076141
    ],
    [
      0.505333591722959,
      0.8525238298516158,
      -0.1335705080154562
    ],
    [
      0.5042601316661871,
      0.8527960401880549,
      -0.13586991371003768
    ],
    [
      0.5057157119683229,
      0.855527125464511,
      -0.11101781957327021
    ],
    [
      0.5046246035310398,
      0.8558735928153258,
      -0.11328902255967642
    ],
    [
      0.5058318275214054,
      0.8580842775377281,
      -0.08846205349702382
    ],
    [
      0.5047097604597194,
      0.8585098691964418,
      -0.09071307617428248
    ],
    [
      0.5043888802149428,
      0.8609279864260555,
      -0.06629373804435612
    ],
    [
      0.4999514375772904,
      0.8647974300082586,
      -0.046625798819020424
    ],
    [
      0.49912324244239004,
      0.8645178658630421,
      -0.059032605036591294
    ],
    [
      0.4922040464471885,
      0.8699805530714445,
      -0.029479042360925415
    ],
    [
      0.47810321773990067,
      0.8781130311773513,
      -0.018298023480075084
    ],
    [
      0.4620665312594636,
      0.8867415873795819,
      -0.013560158604772327
    ],
    [
      0.4528260811171699,
      0.891494769910872,
      -0.013624077276193745
    ],
    [
      0.44098755102854614,
      0.8974982651752724,
      -0.005181104633340469
    ],
    [
      0.4178123035108641,
      0.9084188736826999,
      -0.014423209490276348
    ],
    [
      0.40931383772801105,
      0.9121623447593014,
      -0.020543588965442176
    ],
    [
      0.3604504567143212,
      0.9322205428578064,
      0.03225411180507252
    ],
    [
      0.35619074389090577,
      0.9343788442531161,
      0.008020559746923745
    ],
    [
      0.3773515411244509,
      0.9257986523240823,
      -0.02242029807818992
    ],
    [
      0.4035319502995669,
      0.9145581847044398,
      -0.027300034387295263
    ],
    [
      0.33518924399709277,
      0.9420946911744271,
      -0.010284141656851755
    ],
    [
      0.3348509711605024,
      0.9422032531526408,
      -0.011307380839482257
    ],
    [
      0.3632196284509288,
      0.9313268547736983,
      -0.026491339817006406
    ],
    [
      0.3136217098026099,
      0.9490747662468728,
      -0.029975176628859034
    ],
    [
      0.30927193560140853,
      0.9492419290893676,
      -0.05736401230784387
    ],
    [
      0.31638321159066607,
      0.946685730629688,
      -0.06072718374591155
    ],
    [
      0.34510089629490476,
      0.937203986135773,
      -0.05053770619716732
    ],
    [
      0.29889263865196825,
      0.952295214505931,
      -0.06161992363486623
    ],
    [
      0.2168237745182636,
      0.9716845711308563,
      -0.09389645909136941
    ],
    [
      0.22854513284564312,
      0.9669584994271313,
      -0.11295301075313512
    ],
    [
      0.17130223727087499,
      0.9815930869316466,
      -0.08444261479841775
    ],
    [
      0.149425736606389,
      0.9850218848331481,
      -0.08604554398334958
    ],
    [
      0.13098895421301046,
      0.9867706951643268,
      -0.09552742558602244
    ],
    [
      0.11793824249230488,
      0.9867184216352392,
      -0.11170195774241673
    ],
    [
      0.12216153512083282,
      0.9864283671292079,
      -0.10970704562481945
    ],
    [
      0.10802616579153321,
      0.9858573909218067,
      -0.12812319176959422
    ],
    [
      0.10842850622714324,
      0.985351337001122,
      -0.13162827092783524
    ],
    [
      0.09736767653065695,
      0.9840226863181736,
      -0.14906001602772864
    ],
    [
      0.08742430015472347,
      0.9814993896897013,
      -0.17034065803912074
    ],
    [
      0.09830863997065103,
      0.9832073811666919,
      -0.1537486810559893
    ],
    [
      0.07885153136958563,
      0.9783747390136208,
      -0.19122056913601304
    ],
    [
      0.08856593891133174,
      0.9804038347960908,
      -0.17596702867831157
    ],
    [
      0.07030422790443902,
      0.9747215519928368,
      -0.21207359953430374
    ],
    [
      0.07972136452067309,
      0.9771657778863534,
      -0.19695569696436754
    ],
    [
      0.07094618757681968,
      0.9733689181329709,
      -0.21798987976730635
    ],
    [
      0.06180607627860657,
      0.9705337926089318,
      -0.23290377055592287
    ],
    [
      0.05352634896075129,
      0.9666509858263492,
      -0.2504412137965297
    ],
    [
      0.06207664557605224,
      0.9696035695175913,
      -0.23667574453832552
    ],
    [
      0.05687512915809267,
      0.9595424883837501,
      -0.2757597372162423
    ],
    [
      0.1081086243097222,
      0.9298891841285711,
      -0.35159441205821185
    ],
    [
      -0.0331267717003252,
      0.922683639839612,
      -0.3841321618519332
    ],
    [
      0.15473277650199976,
      0.8930727552810519,
      -0.4224675391680318
    ],
    [
      0.16510145287636144,
      0.8998062762527885,
      -0.40384424655330314
    ],
    [
      -0.039503733071596256,
      0.949655280530691,
      -0.3107962407005311
    ],
    [
      0.885939337838394,
      -0.14997524215696947,
      -0.4388837162739426
    ],
    [
      0.8763254103533201,
      -0.14298423217591277,
      -0.46001009175685464
    ],
    [
      0.8687331256524279,
      -0.14023712945351052,
      -0.4750118987107609
    ],
    [
      0.8608264687446486,
      -0.13768309795625913,
      -0.48991953956316714
    ],
    [
      0.8676900457677468,
      -0.14017367649763796,
      -0.47693324993409836
    ],
    [
      0.8455764663045686,
      -0.13380094720144983,
      -0.516815001871921
    ],
    [
      0.8553136275945565,
      -0.13731601460176907,
      -0.4995827364760787
    ],
    [
      0.83488419360664,
      -0.13298807324892792,
      -0.5341184846448662
    ],
    [
      0.8190299010810351,
      -0.13568410158522023,
      -0.5574763185214251
    ],
    [
      0.7926577500241915,
      -0.1455382351560129,
      -0.59204080385921
    ],
    [
      0.7743194001571017,
      -0.15523070292934246,
      -0.6134597748902599
    ],
    [
      0.7547737012833143,
      -0.1681764753217696,
      -0.6340609852367771
    ],
    [
      0.7541809951475653,
      -0.2888740858619722,
      -0.5897141587885082
    ],
    [
      0.7402476641305588,
      -0.3636676836003881,
      -0.5654902401049725
    ],
    [
      0.7462679586901038,
      -0.3769701684472229,
      -0.5486142779160764
    ],
    [
      0.7552713831082374,
      -0.38507611977268946,
      -0.5303598022461538
    ],
    [
      0.7668013803287919,
      -0.38625473543287314,
      -0.5126625815110174
    ],
    [
      0.7815555508981236,
      -0.37880347342361304,
      -0.4956600139032165
    ],
    [
      0.7930917873558366,
      -0.34560901322829407,
      -0.5015574013052637
    ],
    [
      0.6448135570636337,
      -0.13907646079180142,
      -0.7515804778468973
    ],
    [
      0.6849886507843539,
      -0.03380285038144376,
      -0.7277691361982317
    ],
    [
      0.6802337218329252,
      -0.02579954625538616,
      -0.7325411026654701
    ],
    [
      0.8423991301596835,
      -0.4519708800721794,
      0.2934042076606745
    ],
    [
      0.8420892211830883,
      -0.4522941360296814,
      0.2937954357719398
    ],
    [
      0.828908697456566,
      -0.46064732242005024,
      0.31735534598947185
    ],
    [
      0.8219901113622156,
      -0.4569586577108709,
      0.33988386540965937
    ],
    [
      0.8219724827726986,
      -0.4561852447258735,
      0.3409637224968084
    ],
    [
      0.8148664471398521,
      -0.45241458129864875,
      0.36237234987515654
    ],
    [
      0.814840507042944,
      -0.45162130585774013,
      0.3634186899119905
    ],
    [
      0.8071917381477196,
      -0.44758201172162193,
      0.38485301174511954
    ],
    [
      0.8071590973760125,
      -0.44676815530109526,
      0.3858657887556203
    ],
    [
      0.7992406676948216,
      -0.44260663156506047,
      0.406587905375168
    ],
    [
      0.7991774286553889,
      -0.4407171812892907,
      0.4087588575727544
    ],
    [
      0.7905559401719002,
      -0.43627282564095204,
      0.42975263474024483
    ],
    [
      0.7904960657746118,
      -0.43497034158682363,
      0.4311806720328527
    ],
    [
      0.8087680953645012,
      -0.4011179785628261,
      0.43011456054654706
    ],
    [
      0.8002340895464561,
      -0.3943109063999978,
      0.45182331836876966
    ],
    [
      0.8003080481998469,
      -0.39428613706996696,
      0.4517139250687261
    ],
    [
      0.78132236396423,
      -0.43025004336132966,
      0.45212859205863243
    ],
    [
      0.7812200784077058,
      -0.4284182366316136,
      0.45404075105007546
    ],
    [
      0.7717049243227933,
      -0.4234995452234428,
      0.47446774913737705
    ],
    [
      0.7715632825266584,
      -0.42155573217289405,
      0.47642508931505995
    ],
    [
      0.7908261627561792,
      -0.38708318023681143,
      0.47408922354140604
    ],
    [
      0.7908683851829876,
      -0.38707042283872745,
      0.4740292027728905
    ],
    [
      0.7614967329738934,
      -0.4163311539234473,
      0.4967807322580636
    ],
    [
      0.7612767384877615,
      -0.41384046019346943,
      0.49919314993727015
    ],
    [
      0.7811007067988558,
      -0.3796405035709478,
      0.49573659728400626
    ],
    [
      0.7707843017024006,
      -0.37097418206016086,
      0.5179476001430429
    ],
    [
      0.7809485773737845,
      -0.37870249560505465,
      0.49669280176016795
    ],
    [
      0.7512406841730332,
      -0.4085558844218331,
      0.5183816390918244
    ],
    [
      0.7509245827454756,
      -0.4052907233992771,
      0.5213939974290307
    ],
    [
      0.7402553011210473,
      -0.3997048938387678,
      0.5406089964137916
    ],
    [
      0.7398464128125218,
      -0.39575397812077884,
      0.5440644026675717
    ],
    [
      0.7601775671792766,
      -0.3622776314335235,
      0.539337541916296
    ],
    [
      0.7706410740870581,
      -0.37019336401804964,
      0.5187188141632665
    ],
    [
      0.7288772624799598,
      -0.3899296229757736,
      0.5627546760051763
    ],
    [
      0.7283851954770849,
      -0.38581589497897006,
      0.5662164799715611
    ],
    [
      0.7488416803318518,
      -0.3524926012337595,
      0.5612353373347285
    ],
    [
      0.7598857164030004,
      -0.3607688938519453,
      0.5407582669137316
    ],
    [
      0.7162271214150259,
      -0.3757176326993689,
      0.5880943555487742
    ],
    [
      0.7367717162895343,
      -0.34178208102982904,
      0.5833973321525333
    ],
    [
      0.7484365776401395,
      -0.350478903484901,
      0.5630339487653804
    ],
    [
      0.7167557541854656,
      -0.3795325487597357,
      0.5849925070237767
    ],
    [
      0.7238536931817854,
      -0.33095594103382114,
      0.6053957350043917
    ],
    [
      0.7364581272959552,
      -0.34031600339378243,
      0.5846489926219129
    ],
    [
      0.7039057718352688,
      -0.3689671695390253,
      0.606943071613273
    ],
    [
      0.7033100026168229,
      -0.36496017219718696,
      0.6100484512962263
    ],
    [
      0.6897242543330334,
      -0.35746515089432473,
      0.6296817600032882
    ],
    [
      0.6892608002302951,
      -0.35476327830594423,
      0.6317139903718392
    ],
    [
      0.7094754490191749,
      -0.3199367365587129,
      0.6279212306007823
    ],
    [
      0.72373549541112,
      -0.3304232555762749,
      0.6058278673488009
    ],
    [
      0.6743796109178875,
      -0.3464548959355583,
      0.652059157945443
    ],
    [
      0.6739675100277426,
      -0.3442648051885652,
      0.6536432814123341
    ],
    [
      0.6943043407026902,
      -0.30867276942692345,
      0.650125067887492
    ],
    [
      0.6946200402906645,
      -0.3086122752533005,
      0.6498164842396481
    ],
    [
      0.7093764792178728,
      -0.3194982973906573,
      0.6282561967039608
    ],
    [
      0.6778773774553873,
      -0.29735964927995945,
      0.6723537016439383
    ],
    [
      0.6787995575933959,
      -0.29719000629996245,
      0.6714977742081043
    ],
    [
      0.6579657245194126,
      -0.335225145614265,
      0.6743183277247766
    ],
    [
      0.6576043482664434,
      -0.33342752608916837,
      0.675560956529552
    ],
    [
      0.6403769926153338,
      -0.323599928008858,
      0.6965632734515959
    ],
    [
      0.6400878761378863,
      -0.3222229466802123,
      0.6974667615406565
    ],
    [
      0.6598558533599576,
      -0.286463095273519,
      0.6946431802248669
    ],
    [
      0.6625395865368354,
      -0.2859242621841568,
      0.692306733006436
    ],
    [
      0.6215184321591521,
      -0.3115397787075782,
      0.7187891239920527
    ],
    [
      0.6147466784397865,
      -0.28158152359215644,
      0.7367485099535457
    ],
    [
      0.6161892046518428,
      -0.2805820983752946,
      0.7359242828863891
    ],
    [
      0.6440122136342923,
      -0.27460486367389875,
      0.7140311180449339
    ],
    [
      0.8482314839795503,
      -0.46965235136111494,
      0.2448060833533876
    ],
    [
      0.8464171099993506,
      -0.47054794605194394,
      0.24932450013314822
    ],
    [
      0.8420238776802811,
      -0.46589501256605476,
      0.27191474156863693
    ],
    [
      0.8565920324091711,
      -0.46543400327778744,
      0.2227583412712934
    ],
    [
      0.8512432442984363,
      -0.4728240190593999,
      0.22764530752200646
    ],
    [
      0.8669185907326246,
      -0.45596819013901807,
      0.2013583040838107
    ],
    [
      0.8701256282356444,
      -0.4595456193683749,
      0.17804273309197965
    ],
    [
      0.8665440103409066,
      -0.46266970880351777,
      0.18718498523644195
    ],
    [
      0.8738618753058977,
      -0.4692203548736262,
      0.12727011219892986
    ],
    [
      0.8683044154095002,
      -0.4811252086195678,
      0.1206895845180656
    ],
    [
      0.8975972308688067,
      -0.4370127274605088,
      0.05778483515748018
    ],
    [
      0.8666437098713419,
      -0.48505036696684245,
      0.11685384737255736
    ],
    [
      0.9110472141220864,
      -0.412142608740326,
      -0.011464889929861246
    ],
    [
      0.9109270182674631,
      -0.4095839970274941,
      -0.049526929738583296
    ],
    [
      0.9098441742148199,
      -0.41401921089096233,
      -0.027778978753319274
    ],
    [
      0.9251663434903591,
      -0.3453143578518817,
      -0.15756024604582744
    ],
    [
      0.5479201812649972,
      -0.45012599968626615,
      -0.705102871479738
    ],
    [
      0.5653981436259118,
      -0.45446006100529246,
      -0.688324772280817
    ],
    [
      0.5983731483553115,
      -0.3872033620548089,
      -0.701443605531339
    ],
    [
      0.5912498982450822,
      -0.38159896013577366,
      -0.7104968623776435
    ],
    [
      0.5703847550389813,
      -0.3770998601986103,
      -0.7296964620013653
    ],
    [
      0.5421608092827231,
      -0.4421726794332994,
      -0.7145243022043962
    ],
    [
      0.5672388797334599,
      -0.45681112672897684,
      -0.6852471436024612
    ],
    [
      0.585898268963201,
      -0.4614044502090544,
      -0.6662050373219982
    ],
    [
      0.5862698087559735,
      -0.46130490927351114,
      -0.6659470639783556
    ],
    [
      0.6029683076457292,
      -0.46535151311929,
      -0.6479793123336829
    ],
    [
      0.6061913119100936,
      -0.4644678405501543,
      -0.6456018265613845
    ],
    [
      0.6260857354270404,
      -0.4667941064627663,
      -0.6245958005513723
    ],
    [
      0.6211027417215759,
      -0.46821847727817834,
      -0.628492515278619
    ],
    [
      0.6393371849431673,
      -0.47023611547637373,
      -0.6083797824144362
    ],
    [
      0.6458899142541492,
      -0.4682831372394568,
      -0.6029403967573742
    ],
    [
      0.670029448712961,
      -0.404213366532663,
      -0.6226331923160994
    ],
    [
      0.6582211056667571,
      -0.4713928478954757,
      -0.5869699813515378
    ],
    [
      0.6639518461933438,
      -0.46965363469646376,
      -0.5818877979068223
    ],
    [
      0.6859555377570024,
      -0.4085092503829166,
      -0.6021504733636679
    ],
    [
      0.6722139329604446,
      -0.40389027983299775,
      -0.6204845446828419
    ],
    [
      0.6878521260473486,
      -0.40818743321356127,
      -0.6002020260367894
    ],
    [
      0.6734165745451742,
      -0.4718246222079243,
      -0.5691147889540329
    ],
    [
      0.6817989730802361,
      -0.4691873038378914,
      -0.5612605760465148
    ],
    [
      0.6950474346482476,
      -0.43178338523298954,
      -0.5748670905745341
    ],
    [
      0.6889592704968724,
      -0.4707466603080842,
      -0.551119501927851
    ],
    [
      0.6984118750360131,
      -0.4676421784227099,
      -0.5417856086762944
    ],
    [
      0.7119905245795435,
      -0.4305758441149272,
      -0.5546836353937841
    ],
    [
      0.7041028733041155,
      -0.46892266125580145,
      -0.5332454233893298
    ],
    [
      0.7153692182022677,
      -0.46503437102067857,
      -0.5215265241750203
    ],
    [
      0.7278774997386628,
      -0.4294184281947206,
      -0.5345971931285916
    ],
    [
      0.7277383256582893,
      -0.4288542954170481,
      -0.535239126625116
    ],
    [
      0.7122402516058526,
      -0.4302992117790918,
      -0.5545776882770566
    ],
    [
      0.7188791720155261,
      -0.46589618469665955,
      -0.5159006504428615
    ],
    [
      0.7330911244858117,
      -0.46075669447022566,
      -0.5002805929685854
    ],
    [
      0.7426249339949113,
      -0.42806152552657234,
      -0.515045180321996
    ],
    [
      0.7447108149372401,
      -0.4254331312368577,
      -0.514210514246368
    ],
    [
      0.7349746335866852,
      -0.46125394355978,
      -0.49704837544716823
    ],
    [
      0.7478339217075514,
      -0.45637145839227755,
      -0.4821509281422257
    ],
    [
      0.7582430956446923,
      -0.4241082901053023,
      -0.49517629807080904
    ],
    [
      0.764753994555853,
      -0.4505283173989218,
      -0.46062518714521317
    ],
    [
      0.7726219570601714,
      -0.41851557091741143,
      -0.4773887602030275
    ],
    [
      0.760930548498249,
      -0.4207005301381119,
      -0.4939592739322397
    ],
    [
      0.7490696734172352,
      -0.4567386126637656,
      -0.47987963498003877
    ],
    [
      0.7649100566143577,
      -0.45057703973235674,
      -0.46031829917595735
    ],
    [
      0.779078263611821,
      -0.44460100657958945,
      -0.4420033983082095
    ],
    [
      0.7795895243420126,
      -0.44411883457637863,
      -0.4415864969750704
    ],
    [
      0.7872067371161953,
      -0.41138495513406403,
      -0.45942134444126304
    ],
    [
      0.7761766129578845,
      -0.4139920841256416,
      -0.4755632658001813
    ],
    [
      0.7926251123252662,
      -0.43826040601251526,
      -0.42387881267303795
    ],
    [
      0.8018934831429607,
      -0.40346891286582764,
      -0.44065823269708404
    ],
    [
      0.7909209373369069,
      -0.4066161239678371,
      -0.4572826244364433
    ],
    [
      0.7926487801499198,
      -0.438267434328218,
      -0.42382728479205434
    ],
    [
      0.8071663843540928,
      -0.4313630567866379,
      -0.4029991826399015
    ],
    [
      0.8146438462731449,
      -0.3972181704096416,
      -0.4225791391274698
    ],
    [
      0.8041757463116855,
      -0.40058861235670135,
      -0.43912427932668013
    ],
    [
      0.8071728637367406,
      -0.43136481339691796,
      -0.402984324521527
    ],
    [
      0.819186074975931,
      -0.4252038788227424,
      -0.3848841851773373
    ],
    [
      0.8282765653182259,
      -0.38824848970127607,
      -0.4040062395425605
    ],
    [
      0.8186746819061513,
      -0.39190068982703063,
      -0.41974470159724403
    ],
    [
      0.8286192003731573,
      -0.42057728871176125,
      -0.3694657832503751
    ],
    [
      0.8427752486818492,
      -0.37862447995990434,
      -0.3825877459934378
    ],
    [
      0.8317901709751285,
      -0.38362602562136155,
      -0.40119344951671976
    ],
    [
      0.8198385785534473,
      -0.4253538045014231,
      -0.38332603109054303
    ],
    [
      0.8314394735821756,
      -0.4213225789651976,
      -0.36220945076503697
    ],
    [
      0.83978600917723,
      -0.41643298461467765,
      -0.34834326190568543
    ],
    [
      0.8577154195461454,
      -0.361049509367284,
      -0.3660157248786225
    ],
    [
      0.8571696484411575,
      -0.3601922719818988,
      -0.3681327491487009
    ],
    [
      0.842105172056489,
      -0.4171051234376217,
      -0.34188038141694743
    ],
    [
      0.8486419489597553,
      -0.41300812013236404,
      -0.3305013391357419
    ],
    [
      0.8679761105180445,
      -0.3629393423493008,
      -0.3389579698797838
    ],
    [
      0.8711195142788956,
      -0.3754185221845245,
      -0.3165623556951912
    ],
    [
      0.8690712023920353,
      -0.3622552673422598,
      -0.33687737599258555
    ],
    [
      0.8517863630954708,
      -0.41422003187554307,
      -0.32075186178355175
    ],
    [
      0.859467620720826,
      -0.40881315358278153,
      -0.30689935547371755
    ],
    [
      0.878890647967429,
      -0.3747923074817713,
      -0.2950965183933591
    ],
    [
      0.8616164322743406,
      -0.4098466379564625,
      -0.299404169961978
    ],
    [
      0.869342260728946,
      -0.40391454409762173,
      -0.28477548134819397
    ],
    [
      0.8708686531542128,
      -0.40473696586343966,
      -0.2788830891556966
    ],
    [
      0.8797054572285545,
      -0.39737528516670545,
      -0.2611727230416289
    ],
    [
      0.8806630253287657,
      -0.39592211328335924,
      -0.26015056415857446
    ],
    [
      0.8875718836406017,
      -0.36602513868421344,
      -0.27971726657801504
    ],
    [
      0.8843134496620741,
      -0.36719164159550893,
      -0.28837479274228817
    ],
    [
      0.8894889383862735,
      -0.38796717738107506,
      -0.24143507981116083
    ],
    [
      0.8977538470878652,
      -0.3544976045780444,
      -0.26147557895024637
    ],
    [
      0.894422831792004,
      -0.3561144428232995,
      -0.27053706138313754
    ],
    [
      0.8904665573345605,
      -0.3882475557093437,
      -0.23734604642684887
    ],
    [
      0.8977906931823595,
      -0.38119466706315547,
      -0.2205957774703509
    ],
    [
      0.907970221484068,
      -0.33899326062826063,
      -0.2463202105934315
    ],
    [
      0.9012518081727582,
      -0.38143632590017346,
      -0.2055517150235202
    ],
    [
      0.9077697362877901,
      -0.3712361165786796,
      -0.19528914877068063
    ],
    [
      0.9159740392219548,
      -0.32102930588317724,
      -0.24069014154215446
    ],
    [
      0.924912307540713,
      -0.29422158733511844,
      -0.24077142875706167
    ],
    [
      0.9146635359088405,
      -0.36331172773975406,
      -0.1771869198487635
    ],
    [
      0.920466996955727,
      -0.27995994783877204,
      -0.27269568225664603
    ],
    [
      0.9203943593608122,
      -0.2829003810876808,
      -0.2698918258066465
    ],
    [
      0.9187653941686013,
      -0.26656212547208086,
      -0.29122977825425284
    ],
    [
      0.8881432289513445,
      -0.33556302541032207,
      -0.3140048739197388
    ],
    [
      0.8853470942456444,
      -0.3360516640139319,
      -0.3212939492493773
    ],
    [
      0.8980358338215845,
      -0.325420323394927,
      -0.29602914433196037
    ],
    [
      0.5047744927814487,
      -0.3485885878435888,
      -0.7897396456190127
    ],
    [
      0.5036984143201929,
      -0.35293655817306485,
      -0.7884945740563305
    ],
    [
      0.5001941540821041,
      -0.3962590228447839,
      -0.7699250580648648
    ],
    [
      0.5073307985904206,
      -0.427977076482133,
      -0.7479646267086516
    ],
    [
      0.5265263023126853,
      -0.44342644893319183,
      -0.7253571791603295
    ],
    [
      0.5676721638035853,
      -0.37428649270978115,
      -0.733251618353186
    ],
    [
      0.6530715273446568,
      -0.20954464648895207,
      -0.7277283980301561
    ],
    [
      0.6678968403649452,
      -0.20033445511335382,
      -0.7167844283499458
    ],
    [
      0.6911716665490276,
      -0.20670942550919982,
      -0.6924976106568862
    ],
    [
      0.6808737211602168,
      -0.20483376187085947,
      -0.7031743068622966
    ],
    [
      -0.07657286656460693,
      -0.1569020384712207,
      -0.9846412272648625
    ],
    [
      -0.06940899055118241,
      -0.1570446444633825,
      -0.9851494159141727
    ],
    [
      -0.05585476389125139,
      -0.1153966784036439,
      -0.9917478772168149
    ],
    [
      -0.05852501237192934,
      -0.11295610069373875,
      -0.9918748621892438
    ],
    [
      -0.059703495996748936,
      -0.20430372287823975,
      -0.977085196584135
    ],
    [
      -0.047669712349306594,
      -0.19447474646266483,
      -0.9797485246290584
    ],
    [
      -0.04887205759863278,
      -0.16593957246679833,
      -0.9849241495037129
    ],
    [
      -0.08623125312574334,
      -0.19043694185604249,
      -0.977904873779082
    ],
    [
      -0.06446543063998662,
      -0.2243661891832755,
      -0.9723703108403586
    ],
    [
      -0.05046192219651812,
      -0.2461867570995243,
      -0.9679078856156986
    ],
    [
      -0.035159651094589205,
      -0.23965903753335444,
      -0.9702202557478858
    ],
    [
      -0.015246409159702103,
      -0.20392336009699844,
      -0.9788681270807038
    ],
    [
      -0.015504858362149654,
      -0.203709733794415,
      -0.9789085471710717
    ],
    [
      -0.0523586536280872,
      -0.26085445411319375,
      -0.9639572216439699
    ],
    [
      -0.03276801267387285,
      -0.2903968664677829,
      -0.9563450827452911
    ],
    [
      -0.0017372181597007463,
      -0.3072874087217343,
      -0.9516151693379774
    ],
    [
      0.00020337317149802443,
      -0.30646232249963834,
      -0.9518827677437389
    ],
    [
      0.0298157954132371,
      -0.25084931856753956,
      -0.9675668647272275
    ],
    [
      0.13668109457707017,
      -0.23266924967528055,
      -0.9629035770214772
    ],
    [
      0.23500008344919207,
      -0.22373088578593503,
      -0.9458961103230701
    ],
    [
      0.01945202317012597,
      -0.40388159129001033,
      -0.9146044385479648
    ],
    [
      0.0070563406970089995,
      -0.40165689628749174,
      -0.9157630401586793
    ],
    [
      0.05174679631579969,
      -0.41153803923056304,
      -0.9099223655550591
    ],
    [
      0.04250247102046391,
      -0.4024986539645663,
      -0.9144333619864636
    ],
    [
      0.030684983079578097,
      -0.400523219265749,
      -0.9157726697398251
    ],
    [
      0.07642958456696196,
      -0.4163935942305916,
      -0.9059662760206094
    ],
    [
      0.10254114979935412,
      -0.41800994872911557,
      -0.9026366906797599
    ],
    [
      0.08008879945130642,
      -0.41547141093537765,
      -0.9060735571121227
    ],
    [
      0.1141256135105379,
      -0.4152866894708471,
      -0.9025033572730838
    ],
    [
      0.12781745403180095,
      -0.3782967868752313,
      -0.9168174515598535
    ],
    [
      0.2292208088593441,
      -0.38129141303261405,
      -0.8955862209376942
    ],
    [
      0.2336552066265556,
      -0.361550039400216,
      -0.9026000295956143
    ],
    [
      0.14361824833076497,
      -0.3167105724548935,
      -0.9375863757764915
    ],
    [
      0.12804791428438567,
      -0.3510945942354874,
      -0.9275431620932996
    ],
    [
      0.14128116235684424,
      -0.2748902572277534,
      -0.9510388949166898
    ],
    [
      0.13901505139145293,
      -0.3027991971238884,
      -0.9428613162643593
    ],
    [
      0.29338976445741793,
      -0.48477986306369053,
      -0.8239605151216715
    ],
    [
      0.29469570299541886,
      -0.5086905112147547,
      -0.8089427708040337
    ],
    [
      0.3334178811618794,
      -0.5107276048491544,
      -0.7924580936343378
    ],
    [
      0.28011330253553857,
      -0.44357442605241953,
      -0.8513391018242381
    ],
    [
      0.27470613853194253,
      -0.4545853923602507,
      -0.8472831041072082
    ],
    [
      0.28007232669532656,
      -0.4823701880438005,
      -0.8299870441796395
    ],
    [
      0.2223279444240922,
      -0.5508294971581329,
      -0.8044607822564604
    ],
    [
      0.22178661692420826,
      -0.5561905484283043,
      -0.8009137097043205
    ],
    [
      0.22242559648054122,
      -0.556691692110021,
      -0.8003881645588952
    ],
    [
      0.23620794265845566,
      -0.5619284134058578,
      -0.7927435058278529
    ],
    [
      0.284963588276574,
      -0.539612898707075,
      -0.7922207223403636
    ],
    [
      0.2782302024519253,
      -0.52211729434154,
      -0.8062142924762811
    ],
    [
      0.24140196395286967,
      -0.5132439071714744,
      -0.8235932148524879
    ],
    [
      0.24119900499676158,
      -0.5121607454068406,
      -0.82432664087295
    ],
    [
      0.2500582152246889,
      -0.5019787153404007,
      -0.8279421829716397
    ],
    [
      0.2517549070880526,
      -0.4658693739822863,
      -0.8482836749239246
    ],
    [
      0.13684988008679513,
      -0.53307338891211,
      -0.8349280641791771
    ],
    [
      0.14156662786167362,
      -0.5652041126044346,
      -0.8127134802443651
    ],
    [
      0.15569294103587902,
      -0.5831303494581983,
      -0.7973196997769201
    ],
    [
      0.14612377450778882,
      -0.5042418469506017,
      -0.8511098650041855
    ],
    [
      0.06458230348162486,
      -0.5314140378089232,
      -0.8446468176087706
    ],
    [
      0.08171989729482101,
      -0.5457643476702614,
      -0.8339443237999633
    ],
    [
      0.07421081753876758,
      -0.5641549814795869,
      -0.8223271316404407
    ],
    [
      0.09142262829376076,
      -0.5770630605499026,
      -0.8115664650443858
    ],
    [
      0.08004982610482772,
      -0.6008283689859077,
      -0.7953598533760179
    ],
    [
      0.09364047572352578,
      -0.626427705032008,
      -0.773834473046144
    ],
    [
      0.10516860319945037,
      -0.6262505910921986,
      -0.772495800673213
    ],
    [
      0.15357696931481218,
      -0.5975346689307409,
      -0.786998369707274
    ],
    [
      0.013307367544145677,
      -0.5069916539731578,
      -0.8618482330263297
    ],
    [
      0.037070809379610804,
      -0.5101902775597214,
      -0.8592622625109723
    ],
    [
      0.027915603538891883,
      -0.5348783893881784,
      -0.844467777742033
    ],
    [
      0.051577542602137164,
      -0.5378659152999616,
      -0.8414511359892857
    ],
    [
      0.06446295846548056,
      -0.5667481222073233,
      -0.8213653833467481
    ],
    [
      0.04623352762237673,
      -0.5625799616105718,
      -0.8254491187940287
    ],
    [
      0.05606089381459139,
      -0.5930303815511426,
      -0.8032260844507076
    ],
    [
      -0.40278376246686454,
      0.029021122551081132,
      -0.914834966067056
    ],
    [
      -0.33173215397316236,
      0.003276933229849153,
      -0.9433679238393328
    ],
    [
      -0.26423200064075136,
      -0.04078810327871885,
      -0.9635962746235118
    ],
    [
      -0.27278989429451267,
      -0.0046886415015806905,
      -0.9620622070384317
    ],
    [
      -0.2810266442536978,
      -0.0021146948167357032,
      -0.9596976363862411
    ],
    [
      -0.19382563300400588,
      -0.10138376391194043,
      -0.9757832527798601
    ],
    [
      -0.1950038407076303,
      -0.09112594552931653,
      -0.9765600668472274
    ],
    [
      -0.21029251880869076,
      -0.043233051793826985,
      -0.976682118074089
    ],
    [
      -0.227645999247887,
      -0.02577476468403687,
      -0.9734027740518894
    ],
    [
      -0.26833537496305815,
      -0.18653211813922577,
      -0.9450935908395152
    ],
    [
      -0.18413991424122533,
      -0.2063852353657313,
      -0.9609878389481659
    ],
    [
      -0.17044681052250127,
      -0.18240019351153253,
      -0.9683377789747036
    ],
    [
      -0.2649332020031916,
      -0.23242535463745662,
      -0.9358359113637329
    ],
    [
      -0.18569994798443024,
      -0.23930256507638398,
      -0.9530214119664064
    ],
    [
      -0.1755870679347764,
      -0.21843415143660544,
      -0.9599248424018614
    ],
    [
      -0.26748900493820055,
      -0.24920066616233422,
      -0.9307785237216317
    ],
    [
      -0.2567501782233279,
      -0.2627966521876694,
      -0.9300630438745765
    ],
    [
      -0.18651988850407705,
      -0.275241844365005,
      -0.9431077660071393
    ],
    [
      -0.17657015134531398,
      -0.25401630967042693,
      -0.9509462109264176
    ],
    [
      -0.17764014459142524,
      -0.28932572594818196,
      -0.9406033187981504
    ],
    [
      -0.23629127131059927,
      -0.313244689152493,
      -0.9198066100111364
    ],
    [
      -0.18075583593431951,
      -0.3007631238868922,
      -0.9364127674724877
    ],
    [
      -0.17628755445016098,
      -0.31055724603563883,
      -0.9340647167518646
    ],
    [
      -0.23603790621508855,
      -0.3166895921771417,
      -0.918691356787617
    ],
    [
      -0.19282948815977635,
      -0.3396983694291554,
      -0.9205551620099752
    ],
    [
      -0.1530180665668754,
      -0.3342254832705936,
      -0.929988600810071
    ],
    [
      -0.15124810351237042,
      -0.32561892874583803,
      -0.9333254118614387
    ],
    [
      -0.18653064054458626,
      -0.3484184417255523,
      -0.9185918079340596
    ],
    [
      -0.18606040892509468,
      -0.35505050820432615,
      -0.916144454141636
    ],
    [
      -0.17305781830422487,
      -0.37296435712628545,
      -0.9115638100742912
    ],
    [
      -0.14132294411651145,
      -0.35539698879397,
      -0.9239701325380708
    ],
    [
      -0.1728045292626548,
      -0.37542871982834874,
      -0.9105997314925804
    ],
    [
      -0.1580741401356169,
      -0.39527778710655054,
      -0.9048580204874872
    ],
    [
      -0.1545125463173474,
      -0.42090579443245896,
      -0.8938479653966385
    ],
    [
      -0.14814911290097788,
      -0.42161303386836896,
      -0.8945916889950202
    ],
    [
      -0.09737042136928821,
      -0.3811826049407347,
      -0.919357831713508
    ],
    [
      -0.12206181112124527,
      -0.43337530377942207,
      -0.8929091557039244
    ],
    [
      -0.07897403065802515,
      -0.39600015298746777,
      -0.9148480646071934
    ],
    [
      -0.1105123597643044,
      -0.4474560657136787,
      -0.8874514564726124
    ],
    [
      -0.08685278926675308,
      -0.45744786455989767,
      -0.8849847706069153
    ],
    [
      -0.039729418666348604,
      -0.4775365406268101,
      -0.8777131796085854
    ],
    [
      -0.018504718918309526,
      -0.5235289020032511,
      -0.8518069406532356
    ],
    [
      -0.019887864327109362,
      -0.5461275400992353,
      -0.8374659293354355
    ],
    [
      -0.010400364358875298,
      -0.5496646878460393,
      -0.8353206350595673
    ],
    [
      0.014863055634610052,
      -0.5715276623984822,
      -0.8204481828187135
    ],
    [
      0.021490099530798636,
      -0.5980646791375142,
      -0.801159668973856
    ],
    [
      0.02037963462337224,
      -0.6005270024524798,
      -0.7993447252706789
    ],
    [
      0.025052510334762017,
      -0.6207196654078967,
      -0.7836322279627322
    ],
    [
      0.0748253265320518,
      -0.636271256740054,
      -0.767828143763827
    ],
    [
      -0.03191301277155001,
      -0.3451579364702065,
      -0.9380018968570756
    ],
    [
      -0.014241797633541973,
      -0.3443883989638755,
      -0.9387192348403561
    ],
    [
      -0.017355914886948626,
      -0.3387680129935035,
      -0.9407098413383749
    ],
    [
      0.00641451390484586,
      -0.36512320717588054,
      -0.9309371072166817
    ],
    [
      0.028419878395915574,
      -0.3709573883988858,
      -0.9282149139634848
    ],
    [
      0.06256766151765485,
      -0.3716633201249611,
      -0.9262568025153192
    ],
    [
      0.038651228742760425,
      -0.36578554514297196,
      -0.9298962401693716
    ],
    [
      0.07177504412051235,
      -0.37234268780412033,
      -0.9253157654986226
    ],
    [
      0.06316733955353727,
      -0.3714477556064249,
      -0.9263025704750462
    ],
    [
      -0.14548167310573004,
      -0.23524462494637954,
      -0.9609864979406291
    ],
    [
      -0.14790754544928608,
      -0.2537280333166899,
      -0.9559003311582291
    ],
    [
      -0.13866529572274386,
      -0.26593757055222506,
      -0.9539649596976318
    ],
    [
      -0.15156714592014686,
      -0.28647038190506685,
      -0.9460243763079185
    ],
    [
      -0.1354336745150691,
      -0.3146473304232112,
      -0.939497087416929
    ],
    [
      -0.14027425393280937,
      -0.18706946425730012,
      -0.9722798718610195
    ],
    [
      -0.16441398935347395,
      -0.21926216709378687,
      -0.9617131288415544
    ],
    [
      -0.4789114631916683,
      -0.01747172492508394,
      -0.8776893238793312
    ],
    [
      -0.452495303280064,
      -0.03609918510524698,
      -0.8910358294390973
    ],
    [
      -0.4168577520012679,
      -0.04616700111894703,
      -0.9077985583840352
    ],
    [
      -0.395102988126303,
      -0.04295118617426483,
      -0.9176321836007552
    ],
    [
      -0.38941148240231316,
      -0.0643123743542166,
      -0.9188158770276861
    ],
    [
      -0.362126144662244,
      -0.05698511419020578,
      -0.9303855932422797
    ],
    [
      -0.34025500500709305,
      -0.13707483810245108,
      -0.930288675802737
    ],
    [
      -0.2374174411676504,
      -0.31954396502555266,
      -0.9173465065312854
    ],
    [
      -0.24056064855804263,
      -0.3485915291321767,
      -0.9058777622740414
    ],
    [
      -0.220474320839943,
      -0.37028883851229766,
      -0.9023731212327745
    ],
    [
      -0.21625315820230387,
      -0.39715484840862364,
      -0.8919095234120177
    ],
    [
      -0.21492784976114476,
      -0.397741695992096,
      -0.891968364162307
    ],
    [
      -0.17661664052146644,
      -0.43630014496089864,
      -0.8822974247939354
    ],
    [
      -0.18592541804755705,
      -0.4677117701620187,
      -0.8641049930279029
    ],
    [
      -0.16600835480409648,
      -0.495192820192193,
      -0.8527750564863747
    ],
    [
      -0.15415031650769212,
      -0.5113591046000459,
      -0.845428616775667
    ],
    [
      -0.14195200014931098,
      -0.509532871758621,
      -0.8486612293789687
    ],
    [
      -0.16152084249381815,
      -0.5051192674942931,
      -0.8478004146295965
    ],
    [
      -0.10756820234527299,
      -0.5111768550476428,
      -0.8527175996235844
    ],
    [
      -0.08200038506286031,
      -0.5214949657528783,
      -0.849304973224546
    ],
    [
      -0.06786179320464712,
      -0.5383568852533485,
      -0.8399801432911154
    ],
    [
      -0.0330106692828208,
      -0.5515314197452655,
      -0.8335006831114609
    ],
    [
      -0.036340514801576775,
      -0.5568890757041792,
      -0.8297914945004565
    ],
    [
      -0.0412276924592818,
      -0.5918954074122283,
      -0.80495969095278
    ],
    [
      -0.030304961541714207,
      -0.6061169715569823,
      -0.7947979781658654
    ],
    [
      -0.03765841824282095,
      -0.6324423014583088,
      -0.773691526941821
    ],
    [
      0.012413027138389031,
      -0.6332646146851316,
      -0.7738357994723127
    ],
    [
      0.014187612326957937,
      -0.6711325029249784,
      -0.7412016427222176
    ],
    [
      -0.043775578819185784,
      -0.6370759047586513,
      -0.7695570091130294
    ],
    [
      -0.01661154110286773,
      -0.6760336368541847,
      -0.7366834995735224
    ],
    [
      -0.006627918154798414,
      -0.6815560027785382,
      -0.7317359399246933
    ],
    [
      0.013311993338764722,
      -0.7306803197900612,
      -0.6825899655758518
    ],
    [
      0.014564690166605738,
      -0.7293840735607117,
      -0.6839493716908681
    ],
    [
      0.012583830567134897,
      -0.7071243613762561,
      -0.706977216575244
    ],
    [
      -0.007678746023672849,
      -0.6893573226287831,
      -0.7243807828742972
    ],
    [
      -0.058488769752620066,
      -0.7242319453467109,
      -0.6870714323504826
    ],
    [
      -0.05915618955832949,
      -0.7252349599420073,
      -0.6859553907615669
    ],
    [
      -0.058959860594594696,
      -0.7310069204661165,
      -0.679818076450833
    ],
    [
      -0.06752999561530904,
      -0.7514334075136161,
      -0.6563440666027781
    ],
    [
      0.015176059016466289,
      -0.7513167756802706,
      -0.6597672239617021
    ],
    [
      0.038422775636861535,
      -0.7696970040276269,
      -0.6372520790890013
    ],
    [
      -0.08470374887797276,
      -0.7703122975574023,
      -0.6320160117891424
    ],
    [
      -0.08471730768943883,
      -0.770336871279701,
      -0.6319842423073968
    ],
    [
      0.044784388012022086,
      -0.7876402312641332,
      -0.6145056750629497
    ],
    [
      0.04648455119131018,
      -0.7815363280074281,
      -0.6221255134658988
    ],
    [
      0.0447432372872189,
      -0.7720754059354517,
      -0.6339539496419808
    ],
    [
      -0.08950002775023712,
      -0.7754219406143004,
      -0.6250684434897182
    ],
    [
      -0.061303924299179836,
      -0.7893420388783654,
      -0.6108854021212698
    ],
    [
      0.045316810930471164,
      -0.8059903917666053,
      -0.5901913884724226
    ],
    [
      0.047076252310407525,
      -0.799827432091164,
      -0.5983810703413514
    ],
    [
      -0.038494109389201586,
      -0.8060854275919118,
      -0.5905459228259027
    ],
    [
      -0.028927453464660635,
      -0.8225626206058554,
      -0.5679383220192818
    ],
    [
      0.045557806512434997,
      -0.8221641267381067,
      -0.5674245632423238
    ],
    [
      0.047265360170491905,
      -0.8162683295222954,
      -0.575736050588145
    ],
    [
      -0.0322827492126346,
      -0.833225063719754,
      -0.5519907764559894
    ],
    [
      -0.029572849684315762,
      -0.8378037242991057,
      -0.5451700341288919
    ],
    [
      0.04576491831812343,
      -0.8373960796766134,
      -0.5446773154754787
    ],
    [
      0.04740922285657719,
      -0.8318255963149125,
      -0.553008628236012
    ],
    [
      -0.0323706073547608,
      -0.8466685581345514,
      -0.5311351018769551
    ],
    [
      -0.028953700553121943,
      -0.8521871801326478,
      -0.5224353483847032
    ],
    [
      0.04144870700711204,
      -0.8519011818071636,
      -0.5220597486140801
    ],
    [
      0.0465196062552972,
      -0.8413032734757371,
      -0.5385580082710323
    ],
    [
      0.02043787440062875,
      -0.8842520509603357,
      -0.46656253992623986
    ],
    [
      0.033531409837292595,
      -0.880865493771763,
      -0.47217753698852677
    ],
    [
      0.035799961903818775,
      -0.8786906248882083,
      -0.47604742249197746
    ],
    [
      0.04229108383500148,
      -0.8655741195158635,
      -0.49899189156979157
    ],
    [
      -0.03170516886134708,
      -0.8604206503375286,
      -0.5085971753167903
    ],
    [
      -0.023155282938932122,
      -0.8733164869860417,
      -0.48660265764828786
    ],
    [
      -0.0031197113711485687,
      -0.8845653566147857,
      -0.46640582894933647
    ],
    [
      0.022264089319161656,
      -0.9119119711421195,
      -0.40978148715441337
    ],
    [
      -0.00451620710553847,
      -0.8851190837838324,
      -0.4653426816820579
    ],
    [
      -0.024870923436470155,
      -0.8982035429381074,
      -0.43887564596460404
    ],
    [
      -0.029214866930502684,
      -0.9087887264948521,
      -0.4162325577680076
    ],
    [
      -0.026633833074662175,
      -0.9121595932646696,
      -0.4089688439856803
    ],
    [
      0.021839149556140393,
      -0.9122902354502284,
      -0.40896158480819605
    ],
    [
      -0.029477126819899602,
      -0.9188283971380168,
      -0.39355492070005493
    ],
    [
      -0.026977675138830346,
      -0.9219808635894008,
      -0.38629456664447986
    ],
    [
      0.022519180766068222,
      -0.9221050524703548,
      -0.38628378001965
    ],
    [
      -0.02940602472798616,
      -0.9274946795659189,
      -0.3726780179814882
    ],
    [
      -0.02163884547112479,
      -0.9364208407227606,
      -0.3502110355582119
    ],
    [
      -0.013452130465879354,
      -0.9399737726533143,
      -0.34098144657711826
    ],
    [
      -0.0005656574345236176,
      -0.9407609207127742,
      -0.33907015511737426
    ],
    [
      0.03318361577507209,
      -0.9295716513927998,
      -0.3671449203937805
    ],
    [
      -0.6982377364962601,
      0.18720118346314793,
      -0.6909557006368615
    ],
    [
      -0.6987810199581467,
      0.18469266754200334,
      -0.6910815470713072
    ],
    [
      -0.6891142036664955,
      0.16753525694643134,
      -0.7050202493439356
    ],
    [
      -0.6591780243633165,
      0.17618815083290112,
      -0.7310554477620407
    ],
    [
      -0.6489418054100753,
      0.20174937517900632,
      -0.7336018830441976
    ],
    [
      -0.6529717482817307,
      0.21140882176860948,
      -0.7272786302541197
    ],
    [
      -0.6637031403043486,
      0.21885091649204444,
      -0.7152638799077851
    ],
    [
      -0.6834576232174718,
      0.21309414885953643,
      -0.698195216961384
    ],
    [
      -0.6017351488103465,
      0.15880387048808353,
      -0.782749092241054
    ],
    [
      -0.5967919904081456,
      0.20438782039141554,
      -0.7759284368163925
    ],
    [
      -0.6079235088077758,
      0.21508048418407824,
      -0.7643097492260482
    ],
    [
      -0.6548524146277829,
      0.1662998746910631,
      -0.737233115597705
    ],
    [
      -0.6144839654348095,
      0.14432958543021945,
      -0.7756148702758687
    ],
    [
      -0.6198799497326547,
      0.12455675152680025,
      -0.7747480000416472
    ],
    [
      -0.6029170092551472,
      0.09415742118895004,
      -0.7922281615708163
    ],
    [
      -0.6027795541043619,
      0.09408797531577788,
      -0.7923410011192934
    ],
    [
      -0.5651368011096163,
      0.12039542915248669,
      -0.8161650180391087
    ],
    [
      -0.5666263554487041,
      0.13090401826618134,
      -0.8135101175232464
    ],
    [
      -0.5804706635893292,
      0.15004946545719877,
      -0.8003367832532581
    ],
    [
      -0.5604328670862857,
      0.1134929028134227,
      -0.8203867152144949
    ],
    [
      -0.5873039837473355,
      0.07104622443163643,
      -0.806242187353477
    ],
    [
      -0.5818987236683062,
      0.06915979603703037,
      -0.8103152460649574
    ],
    [
      -0.5583901242245316,
      0.10114887858039649,
      -0.8233889564054405
    ],
    [
      -0.5375931867855805,
      0.08229148371612692,
      -0.8391791687294926
    ],
    [
      -0.5705354363338815,
      0.05092485216160221,
      -0.8196926102629122
    ],
    [
      -0.5646397866706557,
      0.04816274774171838,
      -0.8239309807492883
    ],
    [
      -0.5425218734515878,
      0.0105510013659483,
      -0.8399754122572607
    ],
    [
      -0.5442226287585704,
      -0.00618136300395465,
      -0.8389180657838551
    ],
    [
      -0.5314399144113169,
      -0.02354981801113378,
      -0.8467685772642574
    ],
    [
      -0.5091024339823698,
      -0.040486171717146656,
      -0.859753209713646
    ],
    [
      -0.4463083560013013,
      0.08036400583458876,
      -0.8912634166898324
    ],
    [
      -0.45567690784536086,
      0.09951689438025126,
      -0.8845648327790341
    ],
    [
      -0.4228925961485658,
      0.06045009644825128,
      -0.9041612897940959
    ],
    [
      -0.4300334933565275,
      0.07601066126524392,
      -0.8996074554857811
    ],
    [
      -0.40609010962573333,
      0.054363448960255446,
      -0.9122145790773712
    ],
    [
      -0.3034838792410379,
      0.02100778070732741,
      -0.952604959146531
    ],
    [
      -0.32847970004087007,
      0.008880636940329086,
      -0.944469280044933
    ],
    [
      -0.23303201857112008,
      0.009097696929136617,
      -0.9724265063392991
    ],
    [
      -0.2451624794693509,
      0.010739942382246494,
      -0.9694225148499833
    ],
    [
      -0.1859651295490485,
      0.0008801157937893122,
      -0.9825559505636283
    ],
    [
      -0.1684810956659069,
      -0.01665361609834348,
      -0.9855641924674742
    ],
    [
      -0.16964173343139877,
      -0.006414393857144187,
      -0.9854849252169389
    ],
    [
      -0.5735948113513203,
      0.32829985834703396,
      -0.7504719817555888
    ],
    [
      -0.5879356469108108,
      0.31968773472131917,
      -0.7430554672164911
    ],
    [
      -0.5955916379834387,
      0.3075750859830415,
      -0.7420701902426273
    ],
    [
      -0.6034742051802336,
      0.2719263264436206,
      -0.7495831886248269
    ],
    [
      -0.6096992924360539,
      0.25817284233230164,
      -0.7494088045152897
    ],
    [
      -0.4816106421328001,
      0.21273082250650138,
      -0.850174562393006
    ],
    [
      -0.4852281877203572,
      0.2379700171327182,
      -0.8413821229307594
    ],
    [
      -0.47650286841480327,
      0.18916141062677222,
      -0.858581957137555
    ],
    [
      -0.4784133073215169,
      0.21087227157352417,
      -0.8524397881722261
    ],
    [
      -0.45748896348288853,
      0.17493372885818542,
      -0.8718383100088704
    ],
    [
      -0.45296690532900946,
      0.14442895412982812,
      -0.8797506805258091
    ],
    [
      -0.45448538568797897,
      0.17480466547986737,
      -0.8734336626914037
    ],
    [
      -0.4347032719224686,
      0.1286659460642901,
      -0.8913350322428046
    ],
    [
      -0.43457577609798065,
      0.1249271147396197,
      -0.8919288709486153
    ],
    [
      -0.41095549182654867,
      0.10329249046475883,
      -0.9057848779656168
    ],
    [
      -0.39363992060402464,
      0.06254996955146278,
      -0.9171341855017554
    ],
    [
      -0.3840187642336218,
      0.07996051301680786,
      -0.9198564589513795
    ],
    [
      -0.40491995721432056,
      0.10436876541926535,
      -0.9083760174368383
    ],
    [
      -0.3676034947921665,
      0.03720896324302814,
      -0.9292379478212051
    ],
    [
      -0.3529878217924308,
      0.04536299587870243,
      -0.934527579192366
    ],
    [
      -0.3496106116024378,
      0.05454179193520556,
      -0.9353061601355281
    ],
    [
      -0.374817422758861,
      0.08191395971086385,
      -0.9234727948352849
    ],
    [
      -0.3292633744783147,
      0.06777754729457965,
      -0.9418024391080563
    ],
    [
      -0.30162377880700564,
      0.02872709720900376,
      -0.9529941500051965
    ],
    [
      -0.26409691682653996,
      0.050184419032698706,
      -0.9631896711494918
    ],
    [
      -0.2816513575322367,
      0.048864988067430205,
      -0.9582717389871299
    ],
    [
      -0.20446339048638165,
      0.025659928105458977,
      -0.9785378327077784
    ],
    [
      -0.122209544325149,
      -0.06318254089707373,
      -0.9904911881494095
    ],
    [
      -0.09202224591234927,
      -0.018783369153225926,
      -0.9955797764621883
    ],
    [
      -0.08802982508795325,
      0.0013904037108329584,
      -0.9961168689830051
    ],
    [
      -0.12983212807944097,
      0.009301765906119627,
      -0.9914923578471956
    ],
    [
      -0.3407229801646362,
      0.4229196925451815,
      -0.8396706404568508
    ],
    [
      -0.31851531435904823,
      0.42287672758089456,
      -0.8483650557332206
    ],
    [
      -0.4604444797904182,
      0.4393110968492671,
      -0.7713602538474646
    ],
    [
      -0.4146874855917236,
      0.40598927328136414,
      -0.8143752201989473
    ],
    [
      -0.455959347684508,
      0.2914795350589863,
      -0.8409166153079122
    ],
    [
      -0.45728281038494395,
      0.26761610458863166,
      -0.8481002605183269
    ],
    [
      -0.4526343866668315,
      0.28906743329922086,
      -0.8435414222268767
    ],
    [
      -0.4568213618667565,
      0.2440125963608178,
      -0.8554367867700421
    ],
    [
      -0.4538380029186348,
      0.2580168365544172,
      -0.8529117065448665
    ],
    [
      -0.4544834980363603,
      0.22333705530907016,
      -0.8623023308205232
    ],
    [
      -0.45262734003645205,
      0.2321787914428271,
      -0.8609422163279451
    ],
    [
      -0.44968998879098776,
      0.17852598273014458,
      -0.8751613493930118
    ],
    [
      -0.44462858734694377,
      0.2030928224292237,
      -0.872386797694459
    ],
    [
      -0.41812441608387185,
      0.14689695662069763,
      -0.896433632127944
    ],
    [
      -0.41678765233242066,
      0.15301892006192408,
      -0.8960319542105135
    ],
    [
      -0.4437216194611636,
      0.17752483818047368,
      -0.8784054054090054
    ],
    [
      -0.3910073314266482,
      0.1254084629044267,
      -0.9118036982830023
    ],
    [
      -0.36059144957925576,
      0.10088868598268576,
      -0.9272514651004969
    ],
    [
      -0.3898291121414303,
      0.12607628699069184,
      -0.9122160013865492
    ],
    [
      -0.3287939993958893,
      0.06894969421955388,
      -0.9418813330925961
    ],
    [
      -0.35076621654986523,
      0.10564549871164115,
      -0.9304848681893014
    ],
    [
      -0.29564348864505036,
      0.08210757126186273,
      -0.9517632449108665
    ],
    [
      -0.30730087767037295,
      0.08536276021695076,
      -0.9477760124370957
    ],
    [
      -0.19949756328833598,
      0.043524250050754526,
      -0.9789312345101344
    ],
    [
      -0.2058725135603267,
      0.05125448220972699,
      -0.9772356349487906
    ],
    [
      -0.25142841298446716,
      0.0644613898748799,
      -0.9657269191440772
    ],
    [
      -0.16964260138650256,
      0.0558030058616867,
      -0.9839244952391524
    ],
    [
      -0.3359658924981725,
      0.8589742526638006,
      -0.3863808384723184
    ],
    [
      -0.3138145345008494,
      0.8686887270004925,
      -0.38327579302413456
    ],
    [
      -0.30796124808051845,
      0.8721578549702059,
      -0.38013227394481863
    ],
    [
      -0.3267281697101315,
      0.8874596850918484,
      -0.3250600105435071
    ],
    [
      -0.3493027212295106,
      0.879682629143635,
      -0.32271671931370466
    ],
    [
      -0.3503890772576978,
      0.878576416202628,
      -0.32454733927586804
    ],
    [
      -0.34905108174653604,
      0.8561353336355528,
      -0.38104544720061095
    ],
    [
      -0.34397432884037316,
      0.8562488132293526,
      -0.3853824476311033
    ],
    [
      -0.3523112125689001,
      0.8440264395636129,
      -0.40434660727623567
    ],
    [
      -0.3413104772286235,
      0.8307506204109745,
      -0.4397278303914256
    ],
    [
      -0.3245765401915482,
      0.8351793161558714,
      -0.44398826496056765
    ],
    [
      -0.3172391891298714,
      0.8423073188737485,
      -0.4357495581775604
    ],
    [
      -0.3478545622007543,
      0.8238081914364616,
      -0.44759051294493263
    ],
    [
      -0.34326221628620995,
      0.8182018415833974,
      -0.4612123126064788
    ],
    [
      -0.3272068000849197,
      0.8222354140010192,
      -0.46568727053760023
    ],
    [
      -0.31936850318011295,
      0.8300168350680913,
      -0.45724808657887583
    ],
    [
      -0.35067140481885944,
      0.8102507545580319,
      -0.4695990636495217
    ],
    [
      -0.34663110704117195,
      0.8047269000858087,
      -0.4819351532205307
    ],
    [
      -0.3298887431092643,
      0.8084893495507293,
      -0.48735858341967114
    ],
    [
      -0.32188842846669297,
      0.816746820123728,
      -0.47886581777886517
    ],
    [
      -0.3549072674964209,
      0.7955499632678346,
      -0.4910611850093336
    ],
    [
      -0.3519819253466462,
      0.7903075923200622,
      -0.5015203223704243
    ],
    [
      -0.3336471997505744,
      0.7937446040164785,
      -0.508575510316142
    ],
    [
      -0.32514215254601764,
      0.802837094137277,
      -0.49973511074863974
    ],
    [
      -0.3298064579110983,
      0.7882942052242436,
      -0.5194419566515714
    ],
    [
      -0.36070340900464015,
      0.7801430553225224,
      -0.5111456387023869
    ],
    [
      -0.35863155843885874,
      0.7750786749414251,
      -0.5202273089167466
    ],
    [
      -0.33917632843928247,
      0.7780816180942762,
      -0.5287233811836213
    ],
    [
      -0.33579811382683256,
      0.7728477921589484,
      -0.5384662634793201
    ],
    [
      -0.3678108656527031,
      0.7638649785353311,
      -0.5303069504306233
    ],
    [
      -0.366654966526453,
      0.7594721519215717,
      -0.5373696920901873
    ],
    [
      -0.34599556276968396,
      0.7615316089341194,
      -0.54804806279915
    ],
    [
      -0.3758002413357032,
      0.7428622377269191,
      -0.5540125218543183
    ],
    [
      -0.35371524433215507,
      0.7446782961286649,
      -0.5659856545902487
    ],
    [
      -0.3432505667325562,
      0.7566283368835722,
      -0.556500321889016
    ],
    [
      -0.376459551782168,
      0.7470419551458496,
      -0.5479110540259573
    ],
    [
      -0.351064925882928,
      0.7395124277196748,
      -0.5743472704409476
    ],
    [
      -0.38515349263147275,
      0.7306266342245914,
      -0.5637743418030153
    ],
    [
      -0.38458491618197355,
      0.7253765799718679,
      -0.5708968904045814
    ],
    [
      -0.3613031030398781,
      0.7274395245437612,
      -0.5833453572844323
    ],
    [
      -0.3588740754302095,
      0.7223756943147884,
      -0.5910860802347992
    ],
    [
      -0.394471405585012,
      0.7120059550793996,
      -0.5808957136244483
    ],
    [
      -0.3944844826372281,
      0.7098831383495511,
      -0.5834791537368157
    ],
    [
      -0.37033879874027015,
      0.7085895926114242,
      -0.6006246443415301
    ],
    [
      -0.4076339778031919,
      0.691586174123503,
      -0.5962743528792451
    ],
    [
      -0.3790825722061291,
      0.6909230251201999,
      -0.6155662245512961
    ],
    [
      -0.36875851475627,
      0.703727173042623,
      -0.6072768921309191
    ],
    [
      -0.37777498715587793,
      0.684250643821174,
      -0.6237684790927522
    ],
    [
      -0.41663787490726745,
      0.6852821953843344,
      -0.5973283802750233
    ],
    [
      -0.41941452701222615,
      0.6666782712895085,
      -0.6161424649555841
    ],
    [
      -0.3973856054323802,
      0.662579054464103,
      -0.634880836992735
    ],
    [
      -0.391890550333898,
      0.6659921027277115,
      -0.6347253860240002
    ],
    [
      -0.4306321358080234,
      0.6584622295061366,
      -0.6172385729385582
    ],
    [
      -0.432934532618751,
      0.6551643511992615,
      -0.6191343661789694
    ],
    [
      -0.43208994206612417,
      0.6379210282625095,
      -0.6374598369040955
    ],
    [
      -0.4082345566455278,
      0.6349439599124459,
      -0.6558892547763926
    ],
    [
      -0.399405943617172,
      0.6464836976724572,
      -0.6500259385955484
    ],
    [
      -0.4089567641542664,
      0.6307305103692059,
      -0.6594947978125929
    ],
    [
      -0.4438028423254255,
      0.6267090624939308,
      -0.6405269612841071
    ],
    [
      -0.44372958085988257,
      0.617250387376059,
      -0.6496968665108507
    ],
    [
      -0.4183105349547438,
      0.6181359685232856,
      -0.6655255222481373
    ],
    [
      -0.4525145179245244,
      0.6081860986521943,
      -0.6521811715112287
    ],
    [
      -0.4535647693352078,
      0.5943962842899342,
      -0.6640572695485079
    ],
    [
      -0.4196367622563866,
      0.600662875443329,
      -0.6805211957221676
    ],
    [
      -0.4586162507171005,
      0.588631895433001,
      -0.6657203814343843
    ],
    [
      -0.4614025734988419,
      0.5731876557986867,
      -0.6771732248167023
    ],
    [
      -0.4657806314700073,
      0.5678977892811535,
      -0.6786313463707521
    ],
    [
      -0.47032012006244356,
      0.5492452192013576,
      -0.6907450136257962
    ],
    [
      -0.47006600915481,
      0.5484557165342707,
      -0.691544846006497
    ],
    [
      -0.4760842123070471,
      0.5269689566235519,
      -0.7040224013105432
    ],
    [
      -0.47341205052718066,
      0.5122804860876882,
      -0.7165540691318499
    ],
    [
      -0.47588022575123173,
      0.5034069402108816,
      -0.7211930832214591
    ],
    [
      -0.47365978127527136,
      0.4465867781994012,
      -0.7590827762106982
    ],
    [
      -0.5449352411428939,
      0.43947717753039434,
      -0.7140766019065842
    ],
    [
      -0.5646927029223712,
      0.3494355765770782,
      -0.7476743469509113
    ],
    [
      -0.5720674397186826,
      0.33373756204112864,
      -0.7492383359763135
    ],
    [
      -0.09473935815444322,
      0.49811677733163184,
      -0.8619188651823522
    ],
    [
      -0.07113778400613632,
      0.5107099746154464,
      -0.8568049588529388
    ],
    [
      -0.0643090295421937,
      0.5156670423090155,
      -0.8543721965253862
    ],
    [
      -0.14362241982552304,
      0.48528672523164995,
      -0.8624786344237185
    ],
    [
      -0.14325871716177455,
      0.4852929103146774,
      -0.8625356405131751
    ],
    [
      -0.11855011213579768,
      0.4897397864796646,
      -0.8637712732265657
    ],
    [
      -0.16436099725177186,
      0.4812547106465039,
      -0.8610338936783806
    ],
    [
      -0.16792764185930145,
      0.47991366063099644,
      -0.861094179192573
    ],
    [
      -0.18041407423627692,
      0.47730508605371896,
      -0.8600178001906235
    ],
    [
      -0.2281548447584268,
      0.4489949368510052,
      -0.8639148763017223
    ],
    [
      -0.4358067544501062,
      0.29720401315385614,
      -0.8495541462090026
    ],
    [
      -0.41666248119131116,
      0.33654221263973405,
      -0.844471264093132
    ],
    [
      0.06453748254819791,
      -0.05434164038313281,
      -0.9964345936722647
    ],
    [
      0.06801407450919196,
      -0.052590251143377294,
      -0.996297320659518
    ],
    [
      -0.007664809242564738,
      0.0008792842113984901,
      -0.999970238336397
    ],
    [
      -0.004854917258571755,
      -0.007801705125966011,
      -0.9999577806965352
    ],
    [
      0.023461047625688194,
      -0.05597075977401672,
      -0.9981567278211496
    ],
    [
      0.08040002197391495,
      0.04052944972987234,
      -0.9959383515916975
    ],
    [
      0.07116330771586894,
      0.049032595669662234,
      -0.9962587957939604
    ],
    [
      -0.029891423628831574,
      0.06653435732953222,
      -0.9973362933776089
    ],
    [
      -0.0353011134974501,
      0.05010638183441145,
      -0.9981198234106485
    ],
    [
      0.18019364852706302,
      0.04281283115305503,
      -0.9826989928351231
    ],
    [
      0.1486509595022892,
      0.05084083714998318,
      -0.987581946735023
    ],
    [
      0.14408023921306845,
      0.04459279648744743,
      -0.9885607554266628
    ],
    [
      0.1442222516997473,
      0.01514476777785725,
      -0.9894294204861758
    ],
    [
      0.16155855877240025,
      0.0022313409557442546,
      -0.9868606047486768
    ],
    [
      0.1839286614255724,
      0.0381580045914048,
      -0.982198663301778
    ],
    [
      0.20596688260887122,
      0.03338231396128124,
      -0.9779893989113451
    ],
    [
      0.22441615808796994,
      0.06802863488559753,
      -0.9721159873310579
    ],
    [
      0.20099268573576992,
      0.08226506717705678,
      -0.9761323675624513
    ],
    [
      0.1851484556436238,
      0.0798993799340713,
      -0.979457063101253
    ],
    [
      0.24852247711837275,
      0.1169867413162858,
      -0.9615355847409623
    ],
    [
      0.24308185179334543,
      0.11525472477349334,
      -0.9631342386947441
    ],
    [
      0.23363222223823155,
      0.07002352041465006,
      -0.9698003358015322
    ],
    [
      0.26149629438531824,
      0.05435194875556299,
      -0.9636729495473139
    ],
    [
      0.29044553628107944,
      0.09076608837779693,
      -0.9525769825347399
    ],
    [
      0.28149847744284107,
      0.10630884581028048,
      -0.953654568751101
    ],
    [
      0.33878308050295536,
      0.11432284732782864,
      -0.9338930939587176
    ],
    [
      0.31324077289548025,
      0.1436543146091026,
      -0.9387457888534207
    ],
    [
      0.295429368949357,
      0.14223483244982837,
      -0.9447172806719235
    ],
    [
      0.30767987595539953,
      0.08638172056213264,
      -0.9475607063849765
    ],
    [
      0.3409949334766928,
      0.11421013105243394,
      -0.9331015493011529
    ],
    [
      0.36755696424659395,
      0.137644119502528,
      -0.9197586500817494
    ],
    [
      0.36950368372931114,
      0.14733418901755152,
      -0.9174746124318698
    ],
    [
      0.3261764413799795,
      0.17125317901345147,
      -0.9296672941254196
    ],
    [
      0.3791924285559692,
      0.1904212368295692,
      -0.9055124817969785
    ],
    [
      0.37677182684100535,
      0.19543116777358976,
      -0.9054554926452998
    ],
    [
      0.3457337523522422,
      0.20577801704452975,
      -0.9154908957415467
    ],
    [
      0.3257779966953234,
      0.17329148991572954,
      -0.9294292637914778
    ],
    [
      0.3803737169453098,
      0.16045451221879592,
      -0.9108074357216445
    ],
    [
      0.3821200905530887,
      0.16872751316526732,
      -0.9085787047343581
    ],
    [
      0.3874991769580912,
      0.21923458193011203,
      -0.8954220155562018
    ],
    [
      0.3858626873346259,
      0.24235986105343738,
      -0.8901526185284516
    ],
    [
      0.3849798942262546,
      0.24405233524940215,
      -0.8900724345247724
    ],
    [
      0.335907076396081,
      0.23636121359701828,
      -0.9117564437578614
    ],
    [
      0.3325130201959193,
      0.22582348787085013,
      -0.9156630623357219
    ],
    [
      0.3835099890564188,
      0.2574800888806436,
      -0.8869183119791593
    ],
    [
      0.3805636846476478,
      0.2630525445837291,
      -0.8865521082911206
    ],
    [
      0.3327722485762435,
      0.26548828795561924,
      -0.9048638569066095
    ],
    [
      0.3525539610028965,
      0.31227058302923183,
      -0.882152360738071
    ],
    [
      0.3133670257470709,
      0.3012707455578245,
      -0.9005759518471872
    ],
    [
      0.31250274770562086,
      0.2981922150338994,
      -0.9018999032983726
    ],
    [
      0.3797283416044549,
      0.2788965292471874,
      -0.8820561844668418
    ],
    [
      0.36919601760060167,
      0.2985282452537154,
      -0.8800995326516164
    ],
    [
      0.35375345456677065,
      0.3399910779621434,
      -0.871357883012609
    ],
    [
      0.3375236796426374,
      0.3689659072796568,
      -0.8659918734871558
    ],
    [
      0.308608073603639,
      0.3765746725804904,
      -0.873471563863156
    ],
    [
      0.28193782286120905,
      0.3760975221811744,
      -0.8826447291234807
    ],
    [
      0.27169753747511116,
      0.3738672339570101,
      -0.8867940795378005
    ],
    [
      0.3539438050701315,
      0.3160306247863979,
      -0.8802547512223923
    ],
    [
      0.08728237565589272,
      0.5602492872306332,
      -0.8237126459254047
    ],
    [
      0.0935791333042149,
      0.5275027988449192,
      -0.8443836468222301
    ],
    [
      0.12256205318698635,
      0.45787525494820486,
      -0.8805275657381243
    ],
    [
      0.15653905855384015,
      0.44700996387163694,
      -0.8807256186500738
    ],
    [
      0.18531754691491584,
      0.4432390774804322,
      -0.8770384980146159
    ],
    [
      0.004562931493230275,
      0.47068266677523884,
      -0.8822907722817561
    ],
    [
      -0.32599847410771304,
      0.3974036881647802,
      -0.8577851149981987
    ],
    [
      -0.3761035224468427,
      0.3682146220035294,
      -0.8502729753119731
    ],
    [
      -0.37814686330856195,
      0.35772467306841493,
      -0.8538372257333311
    ],
    [
      -0.3579662850615441,
      0.34809271054347257,
      -0.8664246093144721
    ],
    [
      -0.3298287302906574,
      0.3704729115985536,
      -0.8683103307266031
    ],
    [
      -0.3272023937815135,
      0.3779858982063858,
      -0.8660630775300141
    ],
    [
      -0.364011878511767,
      0.33067736376714185,
      -0.8707168502988488
    ],
    [
      -0.40811862659815035,
      0.3360302385829689,
      -0.8488361828889674
    ],
    [
      -0.39725355426475345,
      0.30971401763229783,
      -0.8638673746045057
    ],
    [
      -0.3661902133326802,
      0.30803108807874036,
      -0.878078342994743
    ],
    [
      -0.36091728555389435,
      0.3205592526317978,
      -0.8757742166452218
    ],
    [
      -0.4109601657875501,
      0.3351251231948736,
      -0.8478224424603834
    ],
    [
      -0.40220101252108004,
      0.28820682860348873,
      -0.8690058512307827
    ],
    [
      -0.3978681364098219,
      0.2813691977955642,
      -0.8732309663323078
    ],
    [
      -0.364644892565708,
      0.28817923343978324,
      -0.885430308798949
    ],
    [
      -0.3636239008541545,
      0.290489297155734,
      -0.8850952643447911
    ],
    [
      -0.40185494961611934,
      0.26508475719205976,
      -0.8764945356209889
    ],
    [
      -0.3931224943994105,
      0.25388488667645653,
      -0.8837404419366969
    ],
    [
      -0.3617868807750776,
      0.2633561557723021,
      -0.8942895437809137
    ],
    [
      -0.39687643230578135,
      0.23686184875274924,
      -0.8867838305278599
    ],
    [
      -0.3786283071923885,
      0.225279255974341,
      -0.8977136858822381
    ],
    [
      -0.35708689698435103,
      0.23859308549561473,
      -0.9030848728418441
    ],
    [
      -0.3587060548684032,
      0.2599394866991558,
      -0.8965274281667714
    ],
    [
      -0.3820842747160875,
      0.20760320768263418,
      -0.9005068101766707
    ],
    [
      -0.35955924542731293,
      0.19278862468638694,
      -0.9129894277697156
    ],
    [
      -0.3439979850089619,
      0.20722438903537632,
      -0.9158184530236815
    ],
    [
      -0.34564412638874903,
      0.22925383897426704,
      -0.9099301155630136
    ],
    [
      -0.31775228593408494,
      0.17409898596444268,
      -0.9320531250255085
    ],
    [
      -0.3177831694539987,
      0.19719353804145484,
      -0.927431164974773
    ],
    [
      -0.36117033672845217,
      0.18351277493882276,
      -0.9142642119768822
    ],
    [
      -0.34063905119174104,
      0.15823868978586053,
      -0.926782365961958
    ],
    [
      -0.3299132759783215,
      0.15963346512538307,
      -0.9304162440248531
    ],
    [
      -0.2786781331731392,
      0.16480085031656824,
      -0.946139090105715
    ],
    [
      -0.3108001132756522,
      0.12472799274920922,
      -0.9422559192770269
    ],
    [
      -0.28114908624300233,
      0.13503058216574093,
      -0.9501167997592223
    ],
    [
      -0.2251624008831717,
      0.10918136525675463,
      -0.9681845499227908
    ],
    [
      -0.22079393656242158,
      0.1318145121725441,
      -0.9663720670414597
    ],
    [
      -0.22253629980564557,
      0.13829946678978347,
      -0.9650652064780252
    ],
    [
      -0.2796985825941248,
      0.13379021878051,
      -0.9507201903049608
    ],
    [
      -0.2671611973735066,
      0.09899279001678034,
      -0.9585537659112544
    ],
    [
      -0.2532392482715753,
      0.0926225822591656,
      -0.9629594697548238
    ],
    [
      -0.1631212711930903,
      0.06544610549514292,
      -0.984432962755651
    ],
    [
      -0.16894323372574535,
      0.10140527830029207,
      -0.9803954066146621
    ],
    [
      -0.21196297764415023,
      0.0943635374906553,
      -0.9727112721154594
    ],
    [
      -0.06203323568874157,
      0.028420704732921614,
      -0.9976693546523664
    ],
    [
      -0.16056668140746527,
      0.06590430657669086,
      -0.9848223003143456
    ],
    [
      0.19705168239413318,
      0.4345099613348048,
      -0.8788468171225677
    ],
    [
      0.20746537371179877,
      0.424164884735356,
      -0.8815000109291353
    ],
    [
      0.21554031974008725,
      0.41825597803816744,
      -0.8823855775122783
    ],
    [
      0.2236979993371241,
      0.41374282139621205,
      -0.8824829079566755
    ],
    [
      0.16774416876999035,
      -0.013204801788421398,
      -0.985742119955008
    ],
    [
      0.2089223237541116,
      0.027362256804126506,
      -0.9775493693618584
    ],
    [
      0.26529471111814895,
      0.042131496651153566,
      -0.963246413563358
    ],
    [
      0.2511082357765612,
      0.00815645356237503,
      -0.9679246490251541
    ],
    [
      0.3090592896533254,
      0.030946771269021026,
      -0.9505391379774979
    ],
    [
      0.3236375791149522,
      0.0548497326376329,
      -0.9445899767699175
    ],
    [
      0.3467330239440586,
      0.05455484975949156,
      -0.9363759813634308
    ],
    [
      0.36498995178212446,
      0.07672062381155126,
      -0.92784496602614
    ],
    [
      0.36505709948400183,
      0.07723209388446024,
      -0.9277761140439807
    ],
    [
      0.3918783246782635,
      0.095076488363432,
      -0.9150911648616413
    ],
    [
      0.39402155972288705,
      0.10681233043984395,
      -0.9128735599958808
    ],
    [
      0.4140231312184521,
      0.11679344186067445,
      -0.9027425650507489
    ],
    [
      0.4174580771589352,
      0.13421505028043676,
      -0.8987297002397241
    ],
    [
      0.22952445378214187,
      0.40363856459153274,
      -0.8856604509011885
    ],
    [
      0.2521237936998908,
      0.38173467169815495,
      -0.8892200138738876
    ],
    [
      0.5368806147258567,
      0.4794729668981709,
      -0.6941648792221137
    ],
    [
      0.5297397446897253,
      0.47382773115816185,
      -0.7034650553379133
    ],
    [
      0.5454438931158674,
      0.49808864064041736,
      -0.6740909920237679
    ],
    [
      0.5394271826288061,
      0.4941530210237043,
      -0.6817852348462051
    ],
    [
      0.5504358042852371,
      0.5177927338723931,
      -0.6549130553820234
    ],
    [
      0.5487146888276923,
      0.5166195510731744,
      -0.657279567394028
    ],
    [
      0.5541104799848227,
      0.5370907990357214,
      -0.6359992528000011
    ],
    [
      0.5537457829629859,
      0.5368320630767315,
      -0.6365351081468248
    ],
    [
      0.5570249067676392,
      0.5542409344188295,
      -0.6184983749817339
    ],
    [
      0.5601954252812809,
      0.571701959501837,
      -0.5994480419483282
    ],
    [
      0.5567799742003486,
      0.554877141311979,
      -0.6181483789341402
    ],
    [
      0.5618807478425893,
      0.5893368578553324,
      -0.5804929742701941
    ],
    [
      0.558497918307639,
      0.5756185672842526,
      -0.5972799513156776
    ],
    [
      0.5546287174415544,
      0.6096502482546236,
      -0.5663157781593343
    ],
    [
      0.5524926447610226,
      0.6085567409916611,
      -0.5695705140529826
    ],
    [
      0.5583452648214419,
      0.6243697627629791,
      -0.5462718779131644
    ],
    [
      0.5544669369565456,
      0.6427399438600663,
      -0.5286319895624789
    ],
    [
      0.5525080909825765,
      0.6352720881970967,
      -0.5395963151806072
    ],
    [
      0.5482479001894166,
      0.659724455113019,
      -0.5139921042815012
    ],
    [
      0.5476124295394112,
      0.6550687143573571,
      -0.5205819882440638
    ],
    [
      0.5418249067650217,
      0.6777093304041655,
      -0.497127583113443
    ],
    [
      0.5412105463452145,
      0.6719518923404386,
      -0.5055410951691445
    ],
    [
      0.5362712646284601,
      0.6947855886213616,
      -0.47925579451672784
    ],
    [
      0.5356746604222042,
      0.6880560721795334,
      -0.48952170505344195
    ],
    [
      0.5304163945401317,
      0.710109939842165,
      -0.4630359832026064
    ],
    [
      0.5301774673778399,
      0.7046901575148324,
      -0.4715120730018907
    ],
    [
      0.5241661748817118,
      0.7260396316164434,
      -0.44510254372687397
    ],
    [
      0.52391129984818,
      0.7202686255894382,
      -0.4546757711632458
    ],
    [
      0.5176467904958143,
      0.7415402493805225,
      -0.4268018964789813
    ],
    [
      0.5175253537565655,
      0.735955083917414,
      -0.43650615422380246
    ],
    [
      0.511827909618385,
      0.7556703557456943,
      -0.4086496107704622
    ],
    [
      0.5117669644661933,
      0.7499967024116247,
      -0.4190459646062075
    ],
    [
      0.5053801916352614,
      0.7706027613541984,
      -0.3882811431115229
    ],
    [
      0.5053986795537782,
      0.7644700384556413,
      -0.40019712019069775
    ],
    [
      0.5004420727908212,
      0.7842218454306769,
      -0.36681579700188743
    ],
    [
      0.5006541798959784,
      0.7768784207295454,
      -0.3818446170334901
    ],
    [
      0.49669659372836655,
      0.7950376005913066,
      -0.3481489730340389
    ],
    [
      0.49712114004993907,
      0.7885285555824786,
      -0.3620680725312007
    ],
    [
      0.49209745886345946,
      0.8069935218560816,
      -0.3264989229116138
    ],
    [
      0.4926019934306609,
      0.8000826969110884,
      -0.3423608537371328
    ],
    [
      0.4904459388630945,
      0.8176192072699685,
      -0.3015984299626343
    ],
    [
      0.49119985608692907,
      0.8080528636548406,
      -0.325228029110948
    ],
    [
      0.45498704750300134,
      0.8533400807376476,
      -0.254553517381251
    ],
    [
      0.4739883113748289,
      0.8480467231145551,
      -0.23696378646262273
    ],
    [
      0.5119729234832087,
      0.6250619583812479,
      -0.5892209040798327
    ],
    [
      0.5213442536033918,
      0.6461163954661471,
      -0.5574349941872646
    ],
    [
      0.5170608479284434,
      0.6609602240338384,
      -0.5438562878046528
    ],
    [
      0.5090003775768202,
      0.6797782333073736,
      -0.5280342499764199
    ],
    [
      0.5133595503205849,
      0.6655698741994666,
      -0.541736757708717
    ],
    [
      0.5019430744412025,
      0.6981556549110375,
      -0.510521137208102
    ],
    [
      0.507106831940565,
      0.6820828689382303,
      -0.5268829290271193
    ],
    [
      0.4941895374488974,
      0.7147916488516283,
      -0.494822796370595
    ],
    [
      0.4990619971682636,
      0.70157040322796,
      -0.5086610780244362
    ],
    [
      0.48694626101918853,
      0.7316686023245413,
      -0.4770161373076224
    ],
    [
      0.4867984431192172,
      0.7310765725460963,
      -0.4780735517166357
    ],
    [
      0.492445948512722,
      0.7168329947516336,
      -0.49360656947493103
    ],
    [
      0.48062336528608984,
      0.7467883145917119,
      -0.45968292760373886
    ],
    [
      0.47338312064795063,
      0.7628043465557345,
      -0.44049738927862764
    ],
    [
      0.4803565669792084,
      0.7470844211268957,
      -0.45948061577115584
    ],
    [
      0.46633255433733906,
      0.7703309471282489,
      -0.43488410026317104
    ],
    [
      0.46760635966930353,
      0.7766431316641792,
      -0.4221015736000972
    ],
    [
      0.46120001288153495,
      0.7894266987192329,
      -0.4050926257873937
    ],
    [
      0.4615532106789961,
      0.7912303025900213,
      -0.4011523924585439
    ],
    [
      0.4557382912567197,
      0.8046982525027097,
      -0.380477768472076
    ],
    [
      0.4554314650732957,
      0.8026952090233554,
      -0.38504880474057196
    ],
    [
      0.4499072071380714,
      0.8174352662558688,
      -0.35969861057059593
    ],
    [
      0.44971695324352795,
      0.8152979718944804,
      -0.3647518046426989
    ],
    [
      0.43943601848290664,
      0.8344006341459688,
      -0.33267336442326667
    ],
    [
      0.3955510878535461,
      0.8738641844987867,
      -0.2826671610713681
    ],
    [
      0.38970004030945393,
      0.5643676154694969,
      -0.7277520684904194
    ],
    [
      0.3597176935574682,
      0.660585432432222,
      -0.6589613550125907
    ],
    [
      0.3604508285004311,
      0.6750481624916637,
      -0.6437275654731444
    ],
    [
      0.35351530121037494,
      0.6854242144818927,
      -0.6365693819310022
    ],
    [
      0.3355191896562548,
      0.6963771095395023,
      -0.6344176815646125
    ],
    [
      0.32152711445921894,
      0.6984139419788901,
      -0.6394046295711628
    ],
    [
      0.8997967932451374,
      -0.181435662258121,
      0.39679570477353265
    ],
    [
      0.9105243598041319,
      -0.1550297877038828,
      0.38328991002603346
    ],
    [
      0.9109104485708879,
      -0.15481379112299212,
      0.3824589451987105
    ],
    [
      0.918883804048808,
      -0.1611595016673407,
      0.3601113295622985
    ],
    [
      0.9285539027255506,
      -0.14382352068156806,
      0.3422023445739486
    ],
    [
      0.9303913160804952,
      -0.14433481684845778,
      0.33695616867379974
    ],
    [
      0.9376555305952925,
      -0.13810608840347427,
      0.3189495481889765
    ],
    [
      0.9420475893261362,
      -0.1286088645617495,
      0.30984851040621936
    ],
    [
      0.944593950944343,
      -0.12616522035939515,
      0.3030257497491287
    ],
    [
      0.9500262276060675,
      -0.11355939408520714,
      0.2907824459550217
    ],
    [
      0.9502286851931226,
      -0.11268043575504962,
      0.2904626744251345
    ],
    [
      0.9553839088183123,
      -0.09994888653628602,
      0.2779420926221853
    ],
    [
      0.9567067729940962,
      -0.09337717020068549,
      0.2756680151786474
    ],
    [
      0.9629664179132938,
      -0.07643131880840556,
      0.2585612721898764
    ],
    [
      0.9630907653895877,
      -0.0741341236799514,
      0.25876690153012966
    ],
    [
      0.9673483945870522,
      -0.04530235799916795,
      0.24936876277827558
    ],
    [
      0.9674669282924467,
      -0.02312016624262902,
      0.25193888261499237
    ],
    [
      0.9717072967702387,
      -0.01554750364506517,
      0.23567605846560186
    ],
    [
      0.974226657757666,
      0.015498201159086811,
      0.22503827468935136
    ],
    [
      0.974277676071762,
      0.015730009046302517,
      0.2248011937771019
    ],
    [
      0.9753929593508038,
      0.03692436337461903,
      0.21735953220013213
    ],
    [
      0.9734561215345486,
      0.06227372950454888,
      0.2202388749982804
    ],
    [
      0.976194387446903,
      0.06962047267679845,
      0.20542031959235454
    ],
    [
      0.9758266205813116,
      0.10051939540518004,
      0.19405735675885583
    ],
    [
      0.9758916218012735,
      0.10119431349016474,
      0.1933785236662394
    ],
    [
      0.9745017425249956,
      0.13105695685753813,
      0.18212750444397088
    ],
    [
      0.9750293925258271,
      0.13317779966459492,
      0.17771144416501033
    ],
    [
      0.9812187121110902,
      0.12005666570987013,
      0.15098422441328732
    ],
    [
      0.9728406298604435,
      0.16570867481737764,
      0.1616222261417168
    ],
    [
      0.9806744995863941,
      0.14605027677227894,
      0.13018003885279866
    ],
    [
      0.9728071667461929,
      0.16039591345579654,
      0.1670908952454476
    ],
    [
      0.9727534621093913,
      0.16654840530412748,
      0.16128338614018797
    ],
    [
      0.9737997751425368,
      0.17933018922987803,
      0.13983805334429122
    ],
    [
      0.9791190321821467,
      0.165007599132969,
      0.11873673840505232
    ],
    [
      0.9819070706616748,
      0.14847185675146177,
      0.11753557902772306
    ],
    [
      0.9748149703091639,
      0.19659723433750906,
      0.10528675658403822
    ],
    [
      0.9776827567257302,
      0.18202902869746332,
      0.104889751227823
    ],
    [
      0.9717464065037914,
      0.1943525603907605,
      0.13392536621762033
    ],
    [
      0.9718010526319117,
      0.204861196435473,
      0.11676730834670629
    ],
    [
      0.970810696265253,
      0.20924556723262241,
      0.1172300499465591
    ],
    [
      0.9652447881138043,
      0.23962974731071385,
      0.10430763741423973
    ],
    [
      0.9733475366260147,
      0.21609380736107797,
      0.0767986937666402
    ],
    [
      0.9756444357012993,
      0.19992014346936385,
      0.09027663773248427
    ],
    [
      0.9612892838712472,
      0.2546582167970314,
      0.10522407201805467
    ],
    [
      0.9625432392303983,
      0.25656503453290935,
      0.08766353670129455
    ],
    [
      0.970931463349746,
      0.23133096961451163,
      0.06146605546747573
    ],
    [
      0.9734273173535967,
      0.2167407766874311,
      0.07391003687395473
    ],
    [
      0.9606973733677597,
      0.26946615577057065,
      0.06669743397251361
    ],
    [
      0.9686326100915984,
      0.24442291189292784,
      0.04481413626211491
    ],
    [
      0.970962354254114,
      0.23275462926467697,
      0.05529366308331619
    ],
    [
      0.9588645566000542,
      0.2767862689028372,
      0.06299304281448725
    ],
    [
      0.957226306574464,
      0.28502642445717086,
      0.04977685569590623
    ],
    [
      0.96592240051849,
      0.2573982632210823,
      0.027203864934386403
    ],
    [
      0.9684836160780198,
      0.24623187368700133,
      0.037541307502955666
    ],
    [
      0.9655413803042192,
      0.2595823114983002,
      0.018624351731604247
    ],
    [
      0.9553967523341856,
      0.29170107545352075,
      0.04612513640684561
    ],
    [
      0.953160119295255,
      0.30079084633127423,
      0.031790780870735544
    ],
    [
      0.9630949798991344,
      0.26899009399346413,
      0.00961192106049858
    ],
    [
      0.9598322048398066,
      0.28042656871830385,
      -0.009114719372211604
    ],
    [
      0.9624291379263268,
      0.2715326106567304,
      -0.0004425159070374827
    ],
    [
      0.951640131580361,
      0.3058699563221213,
      0.02871636789736318
    ],
    [
      0.9488998318386412,
      0.315261576201035,
      0.014115513020700184
    ],
    [
      0.9476925926569033,
      0.31897148451643254,
      0.011659412018613785
    ],
    [
      0.9441227791605641,
      0.3295594716357532,
      -0.004767863808471472
    ],
    [
      0.9563156099589889,
      0.29103007712244744,
      -0.027603412087442818
    ],
    [
      0.958896960282624,
      0.28306761322510793,
      -0.019731849983836168
    ],
    [
      0.9549220329670033,
      0.29408742646392516,
      -0.04045363457083759
    ],
    [
      0.9436913927972469,
      0.33077887512522136,
      -0.0056472056174038205
    ],
    [
      0.9396789458945144,
      0.34133827377569226,
      -0.02217344128467196
    ],
    [
      0.952248342887206,
      0.30153408920462754,
      -0.047961302277000704
    ],
    [
      0.938380519067272,
      0.34471718837356563,
      -0.02473987620948971
    ],
    [
      0.9342970501570251,
      0.3542744843089108,
      -0.039731748458085074
    ],
    [
      0.947771252580991,
      0.31165897534599263,
      -0.06781103057280044
    ],
    [
      0.9505797496134186,
      0.3045503502341406,
      -0.060392249479156945
    ],
    [
      0.9272883705642933,
      0.3706020697044972,
      -0.05282408302053972
    ],
    [
      0.9424498366083953,
      0.3225469496114554,
      -0.08804414104955695
    ],
    [
      0.9458923700687591,
      0.3145837719951525,
      -0.07952782307474343
    ],
    [
      0.9148563630448437,
      0.3864604239423424,
      -0.11698792981613983
    ],
    [
      0.9366727704507567,
      0.33002612304053136,
      -0.11716176512386682
    ],
    [
      0.9166973344773783,
      0.3946198644632333,
      -0.06277865507550219
    ],
    [
      0.9166452505816876,
      0.39471818554950283,
      -0.062920891463357
    ],
    [
      0.9107444224669975,
      0.4084523670221268,
      -0.060920118345887765
    ],
    [
      0.8835660275448446,
      0.45706630255126435,
      -0.10198759748488526
    ],
    [
      0.8836637996810418,
      0.4558400716341246,
      -0.10652754679358625
    ],
    [
      0.8881587077079888,
      0.44303585167389964,
      -0.1220382892950306
    ],
    [
      0.8954100017895373,
      0.425788565951351,
      -0.130173060962523
    ],
    [
      0.9031007689063097,
      0.4088226845180663,
      -0.13142683829520432
    ],
    [
      0.9114844946337353,
      0.3910714433927119,
      -0.12751134147606333
    ],
    [
      0.9024710006438146,
      0.4274975713972422,
      -0.05283861699942361
    ],
    [
      0.8796373273152486,
      0.46881665911549153,
      -0.08030636668082729
    ],
    [
      0.8799172771134675,
      0.4664456677980096,
      -0.09041031152302352
    ],
    [
      0.8956196775669416,
      0.4431393505982675,
      -0.038638181973706914
    ],
    [
      0.8760832507969786,
      0.4785678294351447,
      -0.05874495980705552
    ],
    [
      0.87658054265074,
      0.4759190861641729,
      -0.07146730490785697
    ],
    [
      0.8729475812751417,
      0.48638361285880044,
      -0.03732963284443473
    ],
    [
      0.8736990090465242,
      0.4836340785313646,
      -0.05242251114015267
    ],
    [
      0.8926651206844232,
      0.4501105130406126,
      -0.023441594736293897
    ],
    [
      0.8907136225179809,
      0.45412785925813115,
      -0.019928123507311712
    ],
    [
      0.8868369063842994,
      0.46207997023528163,
      -0.0015500264793775428
    ],
    [
      0.8862254114705473,
      0.4632539455538271,
      -0.0005495385982118677
    ],
    [
      0.8694975912515078,
      0.4936894229305227,
      -0.01564264985075464
    ],
    [
      0.8704629091853964,
      0.4912261738926337,
      -0.031482849542257614
    ],
    [
      0.86581251185994,
      0.5003327183047664,
      0.005988764525708524
    ],
    [
      0.8670028832037608,
      0.49819475852062545,
      -0.01039149166103599
    ],
    [
      0.8816006883299026,
      0.47159724015635407,
      0.019397665146922247
    ],
    [
      0.8816024613510935,
      0.47158371278509337,
      0.019644387888661147
    ],
    [
      0.8769055169151053,
      0.4791430999612677,
      0.03819167662408433
    ],
    [
      0.8617471900975237,
      0.5065263935332535,
      0.028684368795880676
    ],
    [
      0.8632645833241893,
      0.5046359141017199,
      0.010809874043460666
    ],
    [
      0.8722000293294362,
      0.48560152562391123,
      0.05880703316322448
    ],
    [
      0.8577234586826118,
      0.5116019252468338,
      0.0507339975684046
    ],
    [
      0.8596123686265517,
      0.5099129163021524,
      0.03248682028890374
    ],
    [
      0.8769468113517528,
      0.4787610549052877,
      0.04185859966565182
    ],
    [
      0.8722763033440718,
      0.4847743827752615,
      0.06424833405828476
    ],
    [
      0.8674981908743139,
      0.4910110883162857,
      0.07971825374560843
    ],
    [
      0.8536340163460322,
      0.5157265865215374,
      0.07304145461164636
    ],
    [
      0.8559836252672253,
      0.514204318511856,
      0.053721058237309494
    ],
    [
      0.8490622577227206,
      0.5196781002493815,
      0.09501554942213453
    ],
    [
      0.8517801445268486,
      0.5183439937914329,
      0.07609263755559953
    ],
    [
      0.8676155686200892,
      0.48953518610757557,
      0.08716952822323142
    ],
    [
      0.8628441870088619,
      0.4952182551871454,
      0.10128567852571947
    ],
    [
      0.8440018512091881,
      0.5232769148539316,
      0.11765264780877131
    ],
    [
      0.847278873083001,
      0.5220451383093873,
      0.09791519184852066
    ],
    [
      0.8629286168717968,
      0.4929986126395345,
      0.11093498149466645
    ],
    [
      0.8587458943021147,
      0.4974979869443517,
      0.12268350339625486
    ],
    [
      0.858664899973173,
      0.49510866623998007,
      0.13252168942527376
    ],
    [
      0.8539264591327688,
      0.4998304071923397,
      0.14484186700989363
    ],
    [
      0.8389268416741608,
      0.5260493036300543,
      0.1395488605075389
    ],
    [
      0.842645521781009,
      0.5249537992315314,
      0.11988341542845789
    ],
    [
      0.8537282241483429,
      0.4972706028139089,
      0.15449940734387393
    ],
    [
      0.8487829608646871,
      0.5018670129132237,
      0.1664241169282067
    ],
    [
      0.8336873030155322,
      0.5278373477287568,
      0.16233673377692334
    ],
    [
      0.8336651785649836,
      0.5279348995400694,
      0.16213300680561898
    ],
    [
      0.8381196999373471,
      0.5269805005687096,
      0.1408790992208686
    ],
    [
      0.8484854064447159,
      0.49835630817876153,
      0.1780828603453479
    ],
    [
      0.8440260870741069,
      0.5021614246073914,
      0.18829197533258643
    ],
    [
      0.8288761313023154,
      0.5278367416097139,
      0.18534490325915837
    ],
    [
      0.8287367229340754,
      0.5285602655536588,
      0.18390076057030091
    ],
    [
      0.8429735551281435,
      0.49471637774808674,
      0.211308520752077
    ],
    [
      0.8237717782682166,
      0.5274504438605444,
      0.2078366825181127
    ],
    [
      0.8236458982081348,
      0.5282819034702709,
      0.20621751824406773
    ],
    [
      0.84805750620521,
      0.47286447737165016,
      0.2391603065080748
    ],
    [
      0.8083501830967706,
      0.5227096548675338,
      0.27082207848637635
    ],
    [
      0.806256301640556,
      0.5273171130386631,
      0.2681183290292973
    ],
    [
      0.8490691384614913,
      0.4741631758794237,
      0.2329181846747901
    ],
    [
      0.922736994558691,
      -0.1185103036645749,
      0.36675843112070977
    ],
    [
      0.9260190055452424,
      -0.08947643280914051,
      0.3667189241650228
    ],
    [
      0.9370868370885055,
      -0.07778305073373155,
      0.3403205206478366
    ],
    [
      0.9367912910995304,
      -0.08866973054336531,
      0.33846677208470827
    ],
    [
      0.9280681433444757,
      -0.13046389682600945,
      0.34881039682628445
    ],
    [
      0.9164944398736943,
      -0.1226363717376816,
      0.38078637319056036
    ],
    [
      0.9132556679303112,
      -0.11546404701823694,
      0.39068163360891617
    ],
    [
      0.917740333840047,
      -0.08872375580731687,
      0.3871443849503732
    ],
    [
      0.9202089562199725,
      -0.08620857543958423,
      0.38181613168281175
    ],
    [
      0.9085781464613132,
      -0.11814379828446485,
      0.400659200193686
    ],
    [
      0.9037681948953933,
      -0.1067217263474398,
      0.41450394813673935
    ],
    [
      0.9102673278760918,
      -0.08404863003223814,
      0.40540007349656915
    ],
    [
      0.9011006285147655,
      -0.10792973548250495,
      0.41996289060936215
    ],
    [
      0.8950926741084068,
      -0.09429009783287637,
      0.43579637700206747
    ],
    [
      0.9058320096531739,
      -0.0658990940515848,
      0.41848020226872484
    ],
    [
      0.8870627553090603,
      -0.07987063811347293,
      0.4546870894481666
    ],
    [
      0.8873801312042847,
      -0.06306355837347712,
      0.45670503648322236
    ],
    [
      0.8972848405472129,
      -0.04272442837384823,
      0.43937971976900625
    ],
    [
      0.9055605773743716,
      -0.05301038028111145,
      0.4208918391794343
    ],
    [
      0.9055954521072646,
      -0.0531169930064885,
      0.4208033533333447
    ],
    [
      0.8939462821395319,
      -0.09463714146058688,
      0.43806832355818337
    ],
    [
      0.8810041021643265,
      -0.06300503111790999,
      0.46889459159118074
    ],
    [
      0.8737042941114593,
      -0.04850470613421359,
      0.48403315995294194
    ],
    [
      0.8744989853737458,
      -0.02331178469095491,
      0.4844668051320045
    ],
    [
      0.8777803647178434,
      -0.01048174446324118,
      0.47894860303462333
    ],
    [
      0.8855904602096323,
      -0.002481419891391729,
      0.4644603097585568
    ],
    [
      0.8954830969077717,
      -0.029075908463576182,
      0.4441448127576006
    ],
    [
      0.854071114854572,
      0.022997191668349896,
      0.5196476305598224
    ],
    [
      0.8895518185436315,
      0.04048062318522215,
      0.45503723064410234
    ],
    [
      0.8687123776120416,
      -0.0054732111692072415,
      0.4952866331157454
    ],
    [
      0.8448804182875281,
      0.029054430712139315,
      0.5341656286680048
    ],
    [
      0.8356166220049711,
      0.05350175700401372,
      0.5467014020710799
    ],
    [
      0.834858346081584,
      0.07557016123300629,
      0.5452528704272354
    ],
    [
      0.84460055613505,
      0.14908524134925796,
      0.5142212475075273
    ],
    [
      0.8495280848206588,
      0.1529082511981409,
      0.5048971180512617
    ],
    [
      0.8519379505997255,
      0.1534506539022519,
      0.5006541971709724
    ],
    [
      0.8592902535781007,
      0.15171139440751324,
      0.48847099495529034
    ],
    [
      0.861731131027295,
      0.15004975079424485,
      0.4846695060605771
    ],
    [
      0.8873910756420174,
      0.12303393681416268,
      0.4442968931501909
    ],
    [
      0.8923201124211501,
      0.10239213291493689,
      0.4396369730650915
    ],
    [
      0.8923496666703342,
      0.05654560417838915,
      0.44778864103664384
    ],
    [
      0.8571143244328847,
      0.26843004041878443,
      0.43965935478814666
    ],
    [
      0.8618231124264513,
      0.2502192443303344,
      0.4411929879931693
    ],
    [
      0.8338109333667959,
      0.2682854825817004,
      0.4824751052996379
    ],
    [
      0.8370325182721139,
      0.27428058336862,
      0.4734413637843791
    ],
    [
      0.8362501163988953,
      0.30491666150473556,
      0.4557538506251378
    ],
    [
      0.8398797385920259,
      0.31434596917412727,
      0.44248009714174596
    ],
    [
      0.8446676156353928,
      0.3137940310402245,
      0.43367029547842784
    ],
    [
      0.8570396004844869,
      0.2719438337025939,
      0.4376410338536905
    ],
    [
      0.8395783104368901,
      0.3579957759762035,
      0.40859183181646297
    ],
    [
      0.8566353489602462,
      0.33630858706787725,
      0.39124469731379796
    ],
    [
      0.8031570984994382,
      0.3556281926786493,
      0.4779824930916209
    ],
    [
      0.8112430728948291,
      0.40362084485023636,
      0.4230542403552248
    ],
    [
      0.7979941132875302,
      0.3592463476170581,
      0.483887855687919
    ],
    [
      0.7895244219861699,
      0.37721911298955296,
      0.48410425311370614
    ],
    [
      0.7871621004094274,
      0.3836507100367421,
      0.4828953927791424
    ],
    [
      0.7963000573826604,
      0.4187451458183646,
      0.4365303213591564
    ],
    [
      0.7971220325021594,
      0.41921290713188347,
      0.43457681000446985
    ],
    [
      0.736048095173432,
      0.49451961985367665,
      0.4622591774874108
    ],
    [
      0.7425665538637004,
      0.5055541714596676,
      0.4393289118675404
    ],
    [
      0.750576052264387,
      0.5060278204765933,
      0.4249369772930061
    ],
    [
      0.7932684926889783,
      0.45123880596685184,
      0.4087892348100255
    ],
    [
      0.7972994656357026,
      0.42736594939212563,
      0.4262298762372131
    ],
    [
      0.7628395255248942,
      0.4536314758156142,
      0.460754101931065
    ],
    [
      0.7530581221275966,
      0.5167986939611096,
      0.4072131808006087
    ],
    [
      0.7150928682397987,
      0.5448563220681504,
      0.4379198306710327
    ],
    [
      0.7087741583536922,
      0.5611002665123865,
      0.4275578128975592
    ],
    [
      0.7087313279470394,
      0.5634876001559835,
      0.42447806687375067
    ],
    [
      0.7457728889574486,
      0.5370838016522462,
      0.3941621342783088
    ],
    [
      0.7068660933755256,
      0.568053901170604,
      0.42149150810055536
    ],
    [
      0.7066961693560225,
      0.5757402063896446,
      0.4112222500837394
    ],
    [
      0.7116265519347705,
      0.5793298260507983,
      0.39744761067262846
    ],
    [
      0.7448724894362929,
      0.5457729153370859,
      0.38379278180476223
    ],
    [
      0.7103932147061807,
      0.593166114823749,
      0.37880792061982715
    ],
    [
      0.7434033675105237,
      0.5616601362739764,
      0.3631656984004842
    ],
    [
      0.7452206329928054,
      0.5464687708569038,
      0.3821231354418981
    ],
    [
      0.7431650586469423,
      0.5732974699316509,
      0.34501551642825423
    ],
    [
      0.7446987828139687,
      0.5633875523767035,
      0.35779629498134913
    ],
    [
      0.7434790377442709,
      0.5834119845450851,
      0.3269088201991779
    ],
    [
      0.745159158947073,
      0.5752794268398073,
      0.3373298221209532
    ],
    [
      0.7503091209127447,
      0.5869099335911272,
      0.30425803675039226
    ],
    [
      0.6860155029131083,
      0.6205636742745021,
      0.37984662159061633
    ],
    [
      0.6737654369854374,
      0.6210184994552786,
      0.40046992303809376
    ],
    [
      0.6626276278517889,
      0.6167159230335274,
      0.4249542293993738
    ],
    [
      0.669058707792628,
      0.6165886996150839,
      0.4149443589613416
    ],
    [
      0.6631009198923656,
      0.616355874691987,
      0.4247382791444328
    ],
    [
      0.6455406790162915,
      0.6251609725747923,
      0.43869236385481425
    ],
    [
      0.6310180375352356,
      0.6248883550270522,
      0.45970727648881593
    ],
    [
      0.6211373597042443,
      0.6154435656791649,
      0.4851985138515529
    ],
    [
      0.5978689731178544,
      0.6492400758359925,
      0.47014892843808215
    ],
    [
      0.6261885664766438,
      0.6165006042586701,
      0.47729957486113517
    ],
    [
      0.60622776313608,
      0.5948447913060247,
      0.527870792390635
    ],
    [
      0.6036152024458757,
      0.5960900706133776,
      0.5294575668477719
    ],
    [
      0.5743239893314998,
      0.6377779106707651,
      0.5132166130775435
    ],
    [
      0.5795391197368384,
      0.6479383459945093,
      0.4942775621900615
    ],
    [
      0.5599090545543289,
      0.647840515060112,
      0.5165312359138858
    ],
    [
      0.5409628530679322,
      0.6551940134740782,
      0.5273329084253439
    ],
    [
      0.4856899616511603,
      0.6965089427288937,
      0.5281860977439419
    ],
    [
      0.5132924531712351,
      0.6561162026504072,
      0.5532109779614512
    ],
    [
      0.49900141408853854,
      0.6734716370730287,
      0.5453746811099811
    ],
    [
      0.4847519256888472,
      0.6968084152274667,
      0.528652629813889
    ],
    [
      0.42732808821747686,
      0.7232710147698566,
      0.5424663530710252
    ],
    [
      0.4278513462018376,
      0.726866340593238,
      0.5372229969629655
    ],
    [
      0.42023147976012526,
      0.745981593328506,
      0.5166400737783308
    ],
    [
      0.4055896725536674,
      0.756324169376699,
      0.5132940369169071
    ],
    [
      0.37093030548073397,
      0.7852131096040202,
      0.49583372311890433
    ],
    [
      0.3198708832733925,
      0.8034451524310824,
      0.5021538659304482
    ],
    [
      0.31239748316636495,
      0.8045886740309093,
      0.5050196809358066
    ],
    [
      0.30638961797956565,
      0.8083350622256141,
      0.502712471668496
    ],
    [
      0.3040162450766385,
      0.8152932610604813,
      0.4928194610593897
    ],
    [
      0.2850248989305185,
      0.8369237998926308,
      0.46724657319548896
    ],
    [
      0.2737309009471333,
      0.8399206790866247,
      0.4686199384462145
    ],
    [
      0.2534142938095384,
      0.8507249369180062,
      0.46048700024959144
    ],
    [
      0.22682194436697378,
      0.8565907057070551,
      0.46346970607567745
    ],
    [
      0.18830515632190256,
      0.8783397004826573,
      0.43938654810840494
    ],
    [
      0.16389988805844788,
      0.882057655490587,
      0.4417138429853395
    ],
    [
      0.15590037835078605,
      0.8852082038206024,
      0.4382938602339583
    ],
    [
      -0.15008582226538808,
      0.8872303245786025,
      0.4362299818938057
    ],
    [
      -0.1783353939080203,
      0.8752735906511356,
      0.44954713744872116
    ],
    [
      -0.18147146975365877,
      0.8720198971815002,
      0.45458707041117313
    ],
    [
      -0.19394219199298837,
      0.8663538808643012,
      0.4602362211694327
    ],
    [
      -0.1994256732628609,
      0.8598868997088233,
      0.4699190574479853
    ],
    [
      -0.20828224857213237,
      0.855658375635046,
      0.47377974749384444
    ],
    [
      -0.2155664676619361,
      0.8463545336090755,
      0.487047329793645
    ],
    [
      -0.2195827373358742,
      0.8443046129061237,
      0.4888078785059884
    ],
    [
      -0.2284780956019693,
      0.8324386005141514,
      0.5048204989935912
    ],
    [
      -0.22827578822718067,
      0.8317539192078097,
      0.506039111523712
    ],
    [
      -0.23742115983296444,
      0.8191045129851783,
      0.5222058882001273
    ],
    [
      -0.23662291499651017,
      0.8168959720724072,
      0.52601384669078
    ],
    [
      -0.2448794506273427,
      0.8050703986162263,
      0.5402737342610331
    ],
    [
      -0.24285047471055451,
      0.800544069408332,
      0.5478620628114399
    ],
    [
      -0.24976325373521252,
      0.7903265342536386,
      0.5594660725533157
    ],
    [
      -0.2464764976688167,
      0.7836570797958221,
      0.5702025231291057
    ],
    [
      -0.2522951172611961,
      0.7747253425518904,
      0.5797825604603983
    ],
    [
      -0.24801796540750484,
      0.7660818427097089,
      0.5929634888470103
    ],
    [
      -0.2524022446775915,
      0.7589429322534997,
      0.6002488920974139
    ],
    [
      -0.24716033719504354,
      0.7482212178258065,
      0.6156921121087222
    ],
    [
      -0.2503968264908518,
      0.7426729705365935,
      0.6210783268780696
    ],
    [
      -0.24239773589605904,
      0.7264534649404935,
      0.6430464220477521
    ],
    [
      -0.23088163102111944,
      0.7221779731548524,
      0.6520373053338105
    ],
    [
      -0.22790748098745503,
      0.6980449140510365,
      0.6788162329212774
    ],
    [
      -0.23176130326111322,
      0.6865593588616132,
      0.6891465338157342
    ],
    [
      -0.18340713824563,
      0.6249491951919957,
      0.7588150796270625
    ],
    [
      -0.17384820971133694,
      0.6048371871282553,
      0.7771414138024964
    ],
    [
      -0.18335425894532978,
      0.5856677684676973,
      0.7895406770424667
    ],
    [
      -0.1742581880930269,
      0.6557171220841036,
      0.7346217664133537
    ],
    [
      -0.17171241327450246,
      0.654232409125105,
      0.7365424644769692
    ],
    [
      -0.2063932614644785,
      0.6817807282454356,
      0.7018382008805013
    ],
    [
      -0.18215349214682175,
      0.6669753048377242,
      0.7224707938978174
    ],
    [
      -0.15596069387229014,
      0.5616494316007006,
      0.8125430314447868
    ],
    [
      -0.1576096237376244,
      0.5515766863469022,
      0.8190985078632823
    ],
    [
      -0.14708054772951507,
      0.5246304508239467,
      0.8385285937568547
    ],
    [
      -0.139905789452618,
      0.5180721759020951,
      0.843817273249196
    ],
    [
      -0.14459483229989195,
      0.5004574540928282,
      0.8536010022926935
    ],
    [
      -0.19073596972069462,
      0.464823935404384,
      0.864614653432318
    ],
    [
      -0.5089519312401679,
      0.8607512118548503,
      -0.008676576358804552
    ],
    [
      -0.5197103578044815,
      0.8541933846276045,
      -0.015962632902344218
    ],
    [
      -0.5334072164840427,
      0.8452993629975128,
      -0.030752696121552646
    ],
    [
      -0.5381073645774588,
      0.8419868375241527,
      -0.03871213793602738
    ],
    [
      -0.5202848261943699,
      0.8499537611183402,
      -0.08295965038910008
    ],
    [
      -0.4742478929565821,
      0.8763084546222706,
      -0.08469019059944477
    ],
    [
      -0.6089738121601076,
      0.7922180384991975,
      -0.039261629865174494
    ],
    [
      -0.6332622378450391,
      0.7730682165705794,
      -0.03666702398445608
    ],
    [
      -0.6332330349744651,
      0.7696056140184208,
      -0.08199464792507774
    ],
    [
      -0.5994440395050552,
      0.7932053371244925,
      -0.10720138366216214
    ],
    [
      -0.5966387336424213,
      0.7952658695580421,
      -0.10758447022530163
    ],
    [
      -0.593412626864825,
      0.7985227639264951,
      -0.10110810931166145
    ],
    [
      -0.5834779449975348,
      0.8102976841948314,
      -0.05450826258418937
    ],
    [
      -0.6502201436324593,
      0.7554247092981561,
      -0.08091522351437005
    ],
    [
      -0.6474807018384785,
      0.7616198885206026,
      -0.02653085291912718
    ],
    [
      -0.6506385758953368,
      0.7587623652648641,
      -0.03080773627771163
    ],
    [
      -0.6504084157643393,
      0.755278537991353,
      -0.08076647047238564
    ],
    [
      -0.6803545109228738,
      0.7312289895592482,
      -0.04921284684976267
    ],
    [
      -0.6960515020921051,
      0.7142276978087798,
      -0.07342412490520082
    ],
    [
      -0.6942742356962889,
      0.7155055781566225,
      -0.07768560532744319
    ],
    [
      -0.789663102181716,
      0.6082743022313474,
      -0.0802156985740086
    ],
    [
      -0.77800002601934,
      0.6176780849371325,
      -0.1148466059677116
    ],
    [
      -0.7596727680753504,
      0.6399151625332605,
      -0.11578372167435969
    ],
    [
      -0.7540220704101132,
      0.6522681660804538,
      -0.07744002100004767
    ],
    [
      -0.7708086725611651,
      0.6344758955875692,
      -0.05739623875173704
    ],
    [
      -0.7836404247844893,
      0.6183187219145923,
      -0.05991362761084074
    ],
    [
      -0.8013357116126362,
      0.5912460900062353,
      -0.09104470520908241
    ],
    [
      -0.8065668090146646,
      0.5799524564424079,
      -0.11447764350439157
    ],
    [
      -0.8065039959480905,
      0.5794894922605587,
      -0.11723153534506991
    ],
    [
      -0.8032299853466245,
      0.582558739764607,
      -0.12428557987125556
    ],
    [
      -0.7887494931883423,
      0.6019441295851397,
      -0.12464951605650855
    ],
    [
      -0.8198436631576407,
      0.5608106086084176,
      -0.1155328059579484
    ],
    [
      -0.8296939228070713,
      0.5439154665808805,
      -0.12555460832289966
    ],
    [
      -0.830826193620432,
      0.5401972290991084,
      -0.13384614177416468
    ],
    [
      -0.8115060612824988,
      0.5613480468637957,
      -0.16231538061430673
    ],
    [
      -0.8034138261208539,
      0.5805327550410805,
      -0.13231758886203693
    ],
    [
      -0.8205190161859501,
      0.5444287754637753,
      -0.17420060999966333
    ],
    [
      -0.8114347159076868,
      0.5607891273814135,
      -0.16458814182864
    ],
    [
      -0.8365301613067507,
      0.5297086214310227,
      -0.14009306051959564
    ],
    [
      -0.8376944252635499,
      0.5251519151242988,
      -0.14994504301127165
    ],
    [
      -0.8424519690468748,
      0.5158706740577039,
      -0.15540954763557357
    ],
    [
      -0.8435371096035467,
      0.5103851548015189,
      -0.16718893049458616
    ],
    [
      -0.8261057721460039,
      0.530582143987072,
      -0.18982055133503542
    ],
    [
      -0.8232950047060047,
      0.5360226707064036,
      -0.18672180299824112
    ],
    [
      -0.8290822129784057,
      0.5202353449336151,
      -0.20488501654496868
    ],
    [
      -0.8475822094303205,
      0.5020182914727087,
      -0.1719942827074166
    ],
    [
      -0.8484518654328813,
      0.4959997784905543,
      -0.1846988136962034
    ],
    [
      -0.8306249417434498,
      0.5170540432506042,
      -0.2066816937028843
    ],
    [
      -0.8334761584464601,
      0.5056635405253767,
      -0.2227596846035478
    ],
    [
      -0.8522276420995285,
      0.48770976799503696,
      -0.1893336426621138
    ],
    [
      -0.852912647924451,
      0.48091121097272255,
      -0.2031364619443074
    ],
    [
      -0.8338007834650542,
      0.50495232709372,
      -0.2231577936252699
    ],
    [
      -0.8556690172055308,
      0.46761796879369355,
      -0.2217294934278729
    ],
    [
      -0.8366431784541694,
      0.4916987741462297,
      -0.2413721347819589
    ],
    [
      -0.8552060743160802,
      0.4754588499070339,
      -0.20630427164254225
    ],
    [
      -0.8578519347395694,
      0.4620806597320161,
      -0.2248811285217202
    ],
    [
      -0.8580207612509612,
      0.45364239710007154,
      -0.24085046982645084
    ],
    [
      -0.8387334229136744,
      0.47898440645566087,
      -0.25903703144498436
    ],
    [
      -0.8364845890887247,
      0.4914760465870151,
      -0.24237332330160746
    ],
    [
      -0.8399256876352574,
      0.46640696540789,
      -0.2774696053073979
    ],
    [
      -0.8381759440270306,
      0.4783000603058685,
      -0.26208803705205325
    ],
    [
      -0.859672603327162,
      0.44908393731941826,
      -0.2434884644708837
    ],
    [
      -0.8595614800679691,
      0.43989244255678495,
      -0.26009363883953035
    ],
    [
      -0.8602583042108387,
      0.43778002025576673,
      -0.2613509209877642
    ],
    [
      -0.8597139771236304,
      0.42680028032839823,
      -0.28059472241984645
    ],
    [
      -0.8399055896689636,
      0.45485435202115193,
      -0.29608464818400954
    ],
    [
      -0.8387331446618652,
      0.4651150330724677,
      -0.28318671941956564
    ],
    [
      -0.8598847340325412,
      0.4262330603769588,
      -0.28093348397703966
    ],
    [
      -0.8589439077900015,
      0.4149627311931304,
      -0.3000354895527848
    ],
    [
      -0.8580719094998092,
      0.4149118247554919,
      -0.3025901118764777
    ],
    [
      -0.8383918083862396,
      0.4448373880798536,
      -0.31499027571838556
    ],
    [
      -0.8377610001687705,
      0.45271468000629284,
      -0.30529645445537235
    ],
    [
      -0.8568631857702963,
      0.40472638268682365,
      -0.31934626352725265
    ],
    [
      -0.8546342486602317,
      0.4045684938487848,
      -0.3254606501589506
    ],
    [
      -0.8346837630450104,
      0.4372512890141986,
      -0.33483477412664714
    ],
    [
      -0.8345533343433875,
      0.4412446283602129,
      -0.3298846920964831
    ],
    [
      -0.8533321683737748,
      0.39631432105146036,
      -0.3387612276339069
    ],
    [
      -0.8452082377939478,
      0.39570179327689864,
      -0.3592257306523241
    ],
    [
      -0.8301737247422399,
      0.40651283339150623,
      -0.3815218251104452
    ],
    [
      -0.8292341275479368,
      0.40749570143624175,
      -0.38251537880299313
    ],
    [
      -0.8288706208581995,
      0.40845834285212057,
      -0.3822764392852928
    ],
    [
      -0.8296413895115036,
      0.4325552140884761,
      -0.35297471803840885
    ],
    [
      -0.5259606797326808,
      0.804990911736197,
      0.2745086435747749
    ],
    [
      -0.5292665080977658,
      0.8100505329059708,
      0.25237887697814615
    ],
    [
      -0.5293066693883934,
      0.8100455226889456,
      0.2523107229440692
    ],
    [
      -0.5323003126565908,
      0.8147598883643631,
      0.2298318982608516
    ],
    [
      -0.5331819224944097,
      0.8146203016516791,
      0.22827790445440108
    ],
    [
      -0.5352143174158775,
      0.8177842386197248,
      0.21160003189558674
    ],
    [
      -0.5411365912451968,
      0.8165139055599644,
      0.20118705634991121
    ],
    [
      -0.5422711245509916,
      0.8180386701571319,
      0.19171531395732067
    ],
    [
      -0.5057766226283121,
      0.8438995035364507,
      0.1789514904481939
    ],
    [
      -0.5508900423167022,
      0.8158227340481891,
      0.1759358629911477
    ],
    [
      -0.5515726609691404,
      0.8164508500794175,
      0.17080869145338615
    ],
    [
      -0.5159948441607066,
      0.8418658509326485,
      0.1581493276400989
    ],
    [
      -0.5224061797762086,
      0.8417621573859897,
      0.1361185282190188
    ],
    [
      -0.5161520411902332,
      0.8433227325237802,
      0.1496457122131483
    ],
    [
      -0.5621078821237803,
      0.8132622741821611,
      0.15046329202293063
    ],
    [
      -0.5632276714608464,
      0.8126899997267125,
      0.14936383245280296
    ],
    [
      -0.5572410359127146,
      0.8207400580355324,
      0.12596898439995358
    ],
    [
      -0.5294470717921902,
      0.8409032278026883,
      0.11210512763337568
    ],
    [
      -0.5225525322144557,
      0.8429708886121736,
      0.1278238320058611
    ],
    [
      -0.5641142288502049,
      0.8188444591114727,
      0.10615502150712557
    ],
    [
      -0.5386841694983379,
      0.8379528513873795,
      0.08748933868561434
    ],
    [
      -0.5380513524829228,
      0.8382890598630267,
      0.08816004880477477
    ],
    [
      -0.5295612705124202,
      0.8413199501141329,
      0.10837713002854518
    ],
    [
      -0.5461820240581454,
      0.8348133241768829,
      0.06907901542791338
    ],
    [
      -0.5719727366405213,
      0.813904537705032,
      0.10201270530238353
    ],
    [
      -0.5770655554590097,
      0.8117859669498394,
      0.08943650577979224
    ],
    [
      -0.5488169691146094,
      0.8333244808385499,
      0.06610782137550095
    ],
    [
      -0.586766680172952,
      0.8054637254577908,
      0.08326493866249679
    ],
    [
      -0.5943574790570371,
      0.8013792271856551,
      0.06730914740424235
    ],
    [
      -0.5748032420955097,
      0.8173414042920104,
      0.03942412594408744
    ],
    [
      -0.563290702885653,
      0.8250246395762959,
      0.045143417400436224
    ],
    [
      -0.5521453751086235,
      0.8317415764401428,
      0.05780514481448477
    ],
    [
      -0.6020766968275176,
      0.7956379322713953,
      0.06681266248372433
    ],
    [
      -0.6352005741294801,
      0.7711627505484271,
      0.04275795589318142
    ],
    [
      -0.6369678030077691,
      0.7703152486693572,
      0.02977306834913647
    ],
    [
      -0.6184455122483442,
      0.7856125764411367,
      0.018385540987478945
    ],
    [
      -0.5911920511716913,
      0.8063808521778798,
      0.015552487655836517
    ],
    [
      -0.5781974089546549,
      0.8153141637700753,
      0.03083132553145742
    ],
    [
      -0.6930400646918659,
      0.7204077425854856,
      0.02661114719020876
    ],
    [
      -0.6903673577868449,
      0.7234462544270069,
      -0.0042928146879485036
    ],
    [
      -0.6824382536080129,
      0.7309058426446455,
      -0.007394538549912424
    ],
    [
      -0.6509420712056976,
      0.7590553509223109,
      0.01045916682360182
    ],
    [
      -0.6497413641512338,
      0.7599945566727083,
      0.015634370430155156
    ],
    [
      -0.6717559294146205,
      0.7401501805619064,
      0.030359208001477234
    ],
    [
      -0.6887820103111152,
      0.7243357990157516,
      0.030281884617560775
    ],
    [
      -0.7090982950961511,
      0.7046053039360459,
      0.026664087400929386
    ],
    [
      -0.7058372439501296,
      0.7082367311613168,
      -0.013946959769703808
    ],
    [
      -0.7190130480589569,
      0.6941340854018089,
      0.03461369966302956
    ],
    [
      -0.7259227979848982,
      0.6869993783719782,
      0.032679435158708116
    ],
    [
      -0.7262057124886104,
      0.6867121472686385,
      0.03242976938871808
    ],
    [
      -0.7203671967400053,
      0.6932950253887173,
      -0.02032509857797607
    ],
    [
      -0.7135612095149164,
      0.699996722440402,
      -0.028896173592787212
    ],
    [
      -0.7428916840915346,
      0.6688401176042732,
      0.02765579126956117
    ],
    [
      -0.7361799110743038,
      0.6766508718389665,
      -0.013517994311165071
    ],
    [
      -0.7503358516775926,
      0.6607729342365114,
      -0.019371088449869827
    ],
    [
      -0.7465149526867423,
      0.6650361860842913,
      -0.021030849092961344
    ],
    [
      -0.7599063260388292,
      0.6492453632164851,
      0.031981775874129106
    ],
    [
      -0.7621233248456876,
      0.6465598912988071,
      0.03359084235069781
    ],
    [
      -0.7761067686789268,
      0.6305550974164836,
      -0.00765197574770402
    ],
    [
      -0.7691554372587475,
      0.6381745341202825,
      -0.033662699470858835
    ],
    [
      -0.796777488272526,
      0.6040512231143627,
      -0.016363191503106306
    ],
    [
      -0.7837467748305249,
      0.6181940737611928,
      -0.05980869593371122
    ],
    [
      -0.7896793560923485,
      0.6134678356911385,
      -0.007983052925053646
    ],
    [
      -0.8158320992192876,
      0.5762947686691692,
      -0.0479825539962103
    ],
    [
      -0.8013449928607179,
      0.5979732948793629,
      -0.016557204721042332
    ],
    [
      -0.8113947982951444,
      0.5837789067756091,
      -0.028994297774849607
    ],
    [
      -0.820342699133866,
      0.5698916172753448,
      -0.04755418527380438
    ],
    [
      -0.8403322158466031,
      0.5398493226910076,
      -0.049035454524235564
    ],
    [
      -0.8421698794429341,
      0.5359088819201561,
      -0.059595003466413825
    ],
    [
      -0.8316541496670178,
      0.548624346197625,
      -0.0858061891757126
    ],
    [
      -0.8222146249506477,
      0.563919849246615,
      -0.07718493468897261
    ],
    [
      -0.8171476801049921,
      0.5741004603073117,
      -0.051752588089509464
    ],
    [
      -0.8171759480654117,
      0.574261464155386,
      -0.04946959358543138
    ],
    [
      -0.832403244445325,
      0.546753424583452,
      -0.09036332963743642
    ],
    [
      -0.8509347229870485,
      0.5202518146249675,
      -0.07244409288812616
    ],
    [
      -0.852713393744791,
      0.5149195333772991,
      -0.08796443755714815
    ],
    [
      -0.8463405556472353,
      0.523114706965537,
      -0.10029290714247714
    ],
    [
      -0.8432206926537782,
      0.5280163146601627,
      -0.10088426504258559
    ],
    [
      -0.8660898109227467,
      0.4883602991697241,
      -0.10673639309372558
    ],
    [
      -0.8544593057762787,
      0.5038599384723843,
      -0.12658774496342426
    ],
    [
      -0.8488318239429828,
      0.514732291033034,
      -0.1205620306295198
    ],
    [
      -0.857560022521189,
      0.5067142964238478,
      -0.08849536469862503
    ],
    [
      -0.8657814341296661,
      0.489990162746935,
      -0.10164717766672396
    ],
    [
      -0.8722273190256933,
      0.474863714431875,
      -0.11714929219254465
    ],
    [
      -0.8724681906332277,
      0.47299608230396795,
      -0.12277606630886873
    ],
    [
      -0.8601572911833817,
      0.4896723357781582,
      -0.1426549613495085
    ],
    [
      -0.8555095453882986,
      0.4992741871618422,
      -0.1372177240132936
    ],
    [
      -0.861140869217946,
      0.4844528396466664,
      -0.15408390415887643
    ],
    [
      -0.8784012454996833,
      0.45888765559145456,
      -0.1335416468761093
    ],
    [
      -0.8789674762294039,
      0.4526427163280358,
      -0.15010245529667327
    ],
    [
      -0.8693424125688286,
      0.4659600116400276,
      -0.16469680404134726
    ],
    [
      -0.8731818140070533,
      0.4473892564277696,
      -0.1933814182396
    ],
    [
      -0.8703886312583522,
      0.4546120431770117,
      -0.18908072555031832
    ],
    [
      -0.8690655075078756,
      0.46591059269598295,
      -0.16629029819492314
    ],
    [
      -0.8881822676957366,
      0.43330378414098575,
      -0.15290549368796746
    ],
    [
      -0.8887407943399684,
      0.4256493282498307,
      -0.17018357687047783
    ],
    [
      -0.8944387588968494,
      0.4076161240808676,
      -0.18392499007028534
    ],
    [
      -0.8762806357421644,
      0.4332412079757901,
      -0.21079445707842093
    ],
    [
      -0.8737348302445704,
      0.4404282546891218,
      -0.20642286425923304
    ],
    [
      -0.8766575325258867,
      0.42577465217891325,
      -0.22402570439025374
    ],
    [
      -0.8957341989901544,
      0.4044723722529518,
      -0.1845598679115699
    ],
    [
      -0.8954207329293689,
      0.3944157062919304,
      -0.20653803928204006
    ],
    [
      -0.8781373903310562,
      0.4212028138864105,
      -0.22685438782781375
    ],
    [
      -0.8796090750018823,
      0.40639099551104146,
      -0.2472533800413605
    ],
    [
      -0.8782243246805551,
      0.41114838331905557,
      -0.24429294388809072
    ],
    [
      -0.8974880261734304,
      0.3864082762283719,
      -0.21261205736631755
    ],
    [
      -0.8971248803815524,
      0.38169755281679774,
      -0.22242735257619137
    ],
    [
      -0.880113111813009,
      0.3940880426485194,
      -0.2647555949480212
    ],
    [
      -0.8794558344095459,
      0.3966874276214805,
      -0.2630523143598282
    ],
    [
      -0.8994842290090825,
      0.37163694301319383,
      -0.22981319446834314
    ],
    [
      -0.8987363452963731,
      0.3662019768013366,
      -0.24118269803224182
    ],
    [
      -0.9005637322342022,
      0.3573542496812027,
      -0.24755384145512485
    ],
    [
      -0.8982019465995766,
      0.3453443359655015,
      -0.27197527965107043
    ],
    [
      -0.8814154970791209,
      0.3735435329113504,
      -0.2890881362644844
    ],
    [
      -0.879583065766908,
      0.38232404399653497,
      -0.2831288678291615
    ],
    [
      -0.9010971354655871,
      0.3353703248943489,
      -0.2748648715932471
    ],
    [
      -0.8979306400003259,
      0.32072107224862956,
      -0.30142753617460794
    ],
    [
      -0.8974283681465266,
      0.32054296378180114,
      -0.30310812000974374
    ],
    [
      -0.8762317129958017,
      0.36247724871275233,
      -0.317534611193924
    ],
    [
      -0.8771199872855171,
      0.3706081582074479,
      -0.3054670538279663
    ],
    [
      -0.8951985463082458,
      0.31183775515536155,
      -0.31839720028176804
    ],
    [
      -0.8928185104799871,
      0.3109907150710667,
      -0.32582185697691285
    ],
    [
      -0.8718885363042639,
      0.35451605367423583,
      -0.3378294657788965
    ],
    [
      -0.872732553841721,
      0.36027619853421816,
      -0.3294525007260381
    ],
    [
      -0.8661087808957112,
      0.34849008090387534,
      -0.35834375000403623
    ],
    [
      -0.8666531660603284,
      0.3512837344509135,
      -0.35427676704496014
    ],
    [
      -0.8904665823417914,
      0.30301518284147627,
      -0.33948647204281396
    ],
    [
      -0.8871839044423359,
      0.3017774074425941,
      -0.3490488734485171
    ],
    [
      -0.8848267386439009,
      0.2948112545536328,
      -0.36078798035593007
    ],
    [
      -0.8805949972083652,
      0.2930660378919708,
      -0.37237715870592974
    ],
    [
      -0.8592935823157244,
      0.3433023597046676,
      -0.37915436066622826
    ],
    [
      -0.8595671259156766,
      0.34444790368337763,
      -0.3774917187080927
    ],
    [
      -0.8781215572890142,
      0.28668932242588874,
      -0.3830297155982828
    ],
    [
      -0.8732518241561927,
      0.2844420171226568,
      -0.3956311293402936
    ],
    [
      -0.8515435676112438,
      0.33856815555661895,
      -0.40030632833232116
    ],
    [
      -0.834524595809834,
      0.34467649915157267,
      -0.4298450999151313
    ],
    [
      -0.8706285440702017,
      0.27852101617204095,
      -0.4055021353836434
    ],
    [
      -0.8620874852052016,
      0.2741450121095036,
      -0.42620380123604173
    ],
    [
      -0.8568967226705252,
      0.27521637607111654,
      -0.435871486815546
    ],
    [
      -0.8517739721357678,
      0.2824301268044441,
      -0.44126446023363586
    ],
    [
      -0.842818039593122,
      0.3030778987421247,
      -0.4447488498360227
    ],
    [
      -0.5321361317430358,
      0.790308029203408,
      0.303717560029353
    ],
    [
      -0.5262839455055154,
      0.8046594557786345,
      0.2748606354667387
    ],
    [
      -0.5382298133376826,
      0.7842556630745904,
      0.30862877858345955
    ],
    [
      -0.5384131438061281,
      0.7780192990460162,
      0.3237240443475695
    ],
    [
      -0.539795878609938,
      0.7789497615113512,
      0.31915149768900364
    ],
    [
      -0.5394560090502571,
      0.7682488050503539,
      0.34464617775085254
    ],
    [
      -0.54077265859424,
      0.7690927730046495,
      0.34067761627224075
    ],
    [
      -0.5411651559908766,
      0.7574645130513669,
      0.3652229256347772
    ],
    [
      -0.5418982285415739,
      0.7579264131905528,
      0.3631719456285241
    ],
    [
      -0.542972884558958,
      0.745754458884545,
      0.38604498920144537
    ],
    [
      -0.5435228970275328,
      0.746092831467239,
      0.384614543718768
    ],
    [
      -0.5451340858747258,
      0.7337113272368775,
      0.405581701635844
    ],
    [
      -0.5474304183793416,
      0.7203277996115367,
      0.4259668979390544
    ],
    [
      -0.5454854327682138,
      0.7332528101466155,
      0.40593836853611914
    ],
    [
      -0.549926773097888,
      0.7063671152544212,
      0.4456748172348213
    ],
    [
      -0.5482835371137653,
      0.719189137159111,
      0.42679286301712205
    ],
    [
      -0.5519050588112197,
      0.6918667297741601,
      0.4655332794658116
    ],
    [
      -0.5504696906437611,
      0.7056176260212532,
      0.44619153457981814
    ],
    [
      -0.5541296251399743,
      0.6768692942672256,
      0.4845496022291419
    ],
    [
      -0.5529454235695145,
      0.6903956102784821,
      0.4664817894213368
    ],
    [
      -0.5563856781757628,
      0.6609489193138656,
      0.5035687670802567
    ],
    [
      -0.5554076820283828,
      0.6750065922778845,
      0.4856834433303823
    ],
    [
      -0.5588538452908891,
      0.6448342859549162,
      0.5214126228435597
    ],
    [
      -0.5580356656848972,
      0.65846914587872,
      0.5049896828147707
    ],
    [
      -0.5611977966025976,
      0.6275788104569908,
      0.5396312349686384
    ],
    [
      -0.5606369295177622,
      0.6420792145346582,
      0.522896276065772
    ],
    [
      -0.5632310726726549,
      0.6093992148773444,
      0.5580352638345418
    ],
    [
      -0.5629475248124843,
      0.6248201577662564,
      0.5410081836316782
    ],
    [
      -0.5646518470094156,
      0.5909955093480485,
      0.5761012060387448
    ],
    [
      -0.5645641853445351,
      0.6072372577817264,
      0.559043999509869
    ],
    [
      -0.5651223708989077,
      0.5716072574457103,
      0.5948965028851579
    ],
    [
      -0.5653013305763397,
      0.5717317821771286,
      0.5946067397004379
    ],
    [
      -0.5654882882655008,
      0.5896005764585349,
      0.5767097676252043
    ],
    [
      -0.5633787237889685,
      0.5523000416872057,
      0.614466498300944
    ],
    [
      -0.5647558333182667,
      0.5532249246737571,
      0.6123667458743217
    ],
    [
      -0.5597209309136486,
      0.5329793407528544,
      0.6345435381656733
    ],
    [
      -0.5629412317147869,
      0.5349879463499169,
      0.62998814821847
    ],
    [
      -0.5553016137228286,
      0.513206953250374,
      0.6544148080019973
    ],
    [
      -0.5591688238639365,
      0.5156833816566819,
      0.6491539696418337
    ],
    [
      -0.5490472910872201,
      0.4933890889610421,
      0.674621582106575
    ],
    [
      -0.554752659668646,
      0.49688633194945253,
      0.6673480798746498
    ],
    [
      -0.5413720328136059,
      0.4731795413433099,
      0.6949945638214725
    ],
    [
      -0.5484751538196804,
      0.4773374201298277,
      0.6865304020844804
    ],
    [
      -0.5321743657067011,
      0.4522903506477949,
      0.7156981788404697
    ],
    [
      -0.5408104686257857,
      0.4572510633948866,
      0.7060067294643894
    ],
    [
      -0.5212805008029986,
      0.43144694042979875,
      0.736288107384834
    ],
    [
      -0.5316616912490266,
      0.4372667703757345,
      0.7253506859329488
    ],
    [
      -0.5208576466602836,
      0.41625307218603114,
      0.7452789355745955
    ],
    [
      -0.5092315276438019,
      0.40972235328684153,
      0.7568426814541134
    ],
    [
      -0.4955054377120822,
      0.3876058843271012,
      0.7773262118523752
    ],
    [
      -0.5089259091445293,
      0.3949332530159989,
      0.7648674033213961
    ],
    [
      -0.47990193439400025,
      0.36470517369485067,
      0.7979249774540872
    ],
    [
      -0.4954022017610174,
      0.3726863050333329,
      0.7846537940588434
    ],
    [
      -0.4626124977313237,
      0.3410017981914001,
      0.8183565546710173
    ],
    [
      -0.4800594248259442,
      0.3496881461947141,
      0.804525418521185
    ],
    [
      -0.46309815418457473,
      0.3257546492187762,
      0.8242718047484044
    ],
    [
      -0.4431881165054822,
      0.3159684102265948,
      0.8388970479905156
    ],
    [
      -0.42107460731465435,
      0.2898935063439967,
      0.8594521103903304
    ],
    [
      -0.4439180926637589,
      0.3014392593904106,
      0.8438430540710347
    ],
    [
      -0.39554065237711805,
      0.26259171641616025,
      0.8801097561024414
    ],
    [
      -0.42204382412476754,
      0.27639503495948414,
      0.8634146137099417
    ],
    [
      -0.3643731102033486,
      0.23468608403832283,
      0.9011962486159691
    ],
    [
      -0.3967107441536605,
      0.25049860431441695,
      0.8831030713962997
    ],
    [
      -0.29661232132069676,
      0.24449374256943715,
      0.9231705913238016
    ],
    [
      -0.2839503906955336,
      0.19475627940317752,
      0.938851515020818
    ],
    [
      -0.2869571006859228,
      0.18537162507735677,
      0.939836678887406
    ],
    [
      -0.36574404206846306,
      0.22391843440957232,
      0.9033780108144034
    ],
    [
      -0.5020147464665174,
      0.8635155495696067,
      0.04818806887247488
    ],
    [
      -0.5097117565194252,
      0.8602285358113558,
      0.014170089686842757
    ],
    [
      -0.578135478611081,
      0.8144513524347485,
      -0.04927842213733505
    ],
    [
      -0.7095485955812512,
      0.7018918791227857,
      -0.062358484027105296
    ],
    [
      -0.7359635517265308,
      0.6733779598015106,
      -0.07014109910476996
    ],
    [
      -0.7395472487681832,
      0.6691298664686991,
      -0.07304169110167098
    ],
    [
      -0.8272895306475513,
      0.35670495173006966,
      -0.4339972464108533
    ],
    [
      -0.8202976489981709,
      0.37585166369727985,
      -0.43110009736030025
    ],
    [
      -0.3767546273813219,
      0.8542948104381609,
      -0.3581010019606031
    ],
    [
      -0.3534207391024482,
      0.8551119704829192,
      -0.3793116121463964
    ],
    [
      -0.3853994056917547,
      0.8625737808999738,
      -0.3277709117605867
    ],
    [
      -0.3866496906401329,
      0.8592642274456589,
      -0.33491342785875955
    ],
    [
      -0.39160320046978303,
      0.8674501784482951,
      -0.30688291137149337
    ],
    [
      -0.392235833626246,
      0.8657082239210058,
      -0.31096675361694476
    ],
    [
      -0.3562686182042268,
      0.8846285340184046,
      -0.3008405366357718
    ],
    [
      -0.35586101720618446,
      0.8854903408311474,
      -0.2987805092835175
    ],
    [
      -0.3623166221358251,
      0.8897656229998241,
      -0.27756765202707
    ],
    [
      -0.39942702484283477,
      0.8709876736167527,
      -0.2860743334045867
    ],
    [
      -0.3994954846689865,
      0.8707719725020981,
      -0.2866348367416228
    ],
    [
      -0.362247148446932,
      0.8899124138561489,
      -0.27718748006861477
    ],
    [
      -0.36920512618228335,
      0.8941508157962776,
      -0.2533414561645515
    ],
    [
      -0.4068553850810335,
      0.873806237665536,
      -0.2663294100308201
    ],
    [
      -0.4164888896221234,
      0.875367698323385,
      -0.24549622716724143
    ],
    [
      -0.409897432211367,
      0.8732756234035108,
      -0.26338902907246825
    ],
    [
      -0.36509488983034366,
      0.902824137373911,
      -0.227187804238746
    ],
    [
      -0.4221413388155387,
      0.8785966141423132,
      -0.2233040073099626
    ],
    [
      -0.4248356742646878,
      0.8761286834653084,
      -0.22784463979083103
    ],
    [
      -0.4196755266834322,
      0.8747554071901785,
      -0.24223011764545033
    ],
    [
      -0.4224304950206757,
      0.8840782201061715,
      -0.19989541668205085
    ],
    [
      -0.4346153307451344,
      0.8819508603865174,
      -0.18240667242395225
    ],
    [
      -0.4338875061038164,
      0.8806799760554812,
      -0.1901168372920391
    ],
    [
      -0.45114023831981664,
      0.8816785520556732,
      -0.1382585122650703
    ],
    [
      -0.44714178216707706,
      0.8779314589998349,
      -0.17117412169738586
    ],
    [
      -0.49578020587366944,
      0.8571713117298829,
      -0.1394967017930306
    ],
    [
      -0.48354131457808724,
      0.862911040751683,
      -0.1468752288336678
    ],
    [
      -0.5226387281092602,
      0.8468662483465268,
      -0.09831743127143595
    ],
    [
      -0.5060433516078627,
      0.8520867492086661,
      -0.13367235359822416
    ],
    [
      -0.49686707224844345,
      0.8565749679667742,
      -0.13929262998443137
    ],
    [
      -0.5390322754546172,
      0.8353335899473411,
      -0.10799073813945849
    ],
    [
      0.47802965871287817,
      0.8756238028050781,
      -0.06906953997257277
    ],
    [
      0.4806256769384598,
      0.8722206317008813,
      -0.09072005457870336
    ],
    [
      0.4775574465863976,
      0.8734179180143303,
      -0.09528916885665795
    ],
    [
      0.4795217463618182,
      0.8701850169478982,
      -0.11330018113621056
    ],
    [
      0.4638554547684062,
      0.8754338940349132,
      -0.1358440806824625
    ],
    [
      0.4472996279090595,
      0.8822722942817085,
      -0.14669233659365866
    ],
    [
      0.45480364020523345,
      0.8763943086467042,
      -0.15838770352440204
    ],
    [
      0.4578829505906955,
      0.8871176552362491,
      -0.05801266522491596
    ],
    [
      0.45906158064427066,
      0.8863651800097146,
      -0.06016006019553152
    ],
    [
      0.3829226396417679,
      0.9215540498480019,
      -0.06409668679835961
    ],
    [
      0.39908094351974005,
      0.9154322488251382,
      -0.05213634366106312
    ],
    [
      0.3201010295026983,
      0.9451080619876617,
      -0.06562074426001886
    ],
    [
      0.3711363670864277,
      0.9247915954730935,
      -0.08377530643464327
    ],
    [
      0.365878492638846,
      0.9192299588639021,
      -0.1454276842674553
    ],
    [
      0.3467884174859132,
      0.9275243247964757,
      -0.13941456311468187
    ],
    [
      0.2295048678198801,
      0.9610385613100303,
      -0.15405323535105217
    ],
    [
      0.21099671427790898,
      0.9571386943841848,
      -0.19840843297719113
    ],
    [
      0.21099804480542778,
      0.9571381783620425,
      -0.19840950735808394
    ],
    [
      0.20926411174161683,
      0.9557586414318193,
      -0.20672191675145404
    ],
    [
      0.20857326049609956,
      0.9545298165904891,
      -0.21300240431918468
    ],
    [
      0.20823050036911198,
      0.9492568549947371,
      -0.23569361883922535
    ],
    [
      0.2099343886547783,
      0.942851960541313,
      -0.2587619233263405
    ],
    [
      0.21703200794350502,
      0.927665011057887,
      -0.30386631071407155
    ],
    [
      0.22095729029352396,
      0.9136571015174706,
      -0.34118701134837753
    ],
    [
      0.22428886966458303,
      0.9149838533233338,
      -0.33540878208861447
    ],
    [
      0.3511831252397693,
      0.8896255681029057,
      -0.2919533543640331
    ],
    [
      0.3632006747419477,
      0.8873461602242436,
      -0.2840810831475493
    ],
    [
      0.38114328400762837,
      0.9107829294449733,
      -0.15875847217554426
    ],
    [
      0.7339319777571343,
      -0.2016466362637661,
      -0.648600405572653
    ],
    [
      0.7538764749558947,
      -0.2625660531219032,
      -0.6022701455792576
    ],
    [
      0.7478298127617906,
      -0.24848938803716986,
      -0.6156326787765397
    ],
    [
      0.726755272336397,
      -0.3795553696528397,
      -0.5725072012638318
    ],
    [
      0.7390362401548257,
      -0.2215703267467236,
      -0.6361855280051323
    ],
    [
      0.18796038440211219,
      -0.8634372555841887,
      0.4681313913471885
    ],
    [
      0.19392134893975993,
      -0.8505918634764942,
      0.4887616926611261
    ],
    [
      0.20948122042607978,
      -0.8431628711761747,
      0.4951706685161688
    ],
    [
      0.22003311733260608,
      -0.8528170543161461,
      0.4735910674246582
    ],
    [
      0.21500247465446087,
      -0.8596692352285825,
      0.4634034331918161
    ],
    [
      0.19099495390276391,
      -0.8653280797022396,
      0.4633877879945862
    ],
    [
      0.22557927322073648,
      -0.8678831663599756,
      0.44259778698292995
    ],
    [
      0.18997586752448234,
      -0.8779955550318159,
      0.4393551810354507
    ],
    [
      0.1862853794900291,
      -0.8770003013440103,
      0.44290882676999216
    ],
    [
      0.24438917925975392,
      -0.8704652051598795,
      0.42727538621679667
    ],
    [
      0.1963387525851557,
      -0.8888843388468356,
      0.41392719937946676
    ],
    [
      0.19586870973598014,
      -0.8887549756934746,
      0.41442736604434505
    ],
    [
      0.2426965760310526,
      -0.8687421411912264,
      0.43172382850763136
    ],
    [
      0.25360903861590045,
      -0.8744488293547892,
      0.4135477002382646
    ],
    [
      0.20843445173246808,
      -0.8972236815090882,
      0.3892874833208281
    ],
    [
      0.19996613009562686,
      -0.8950957970950827,
      0.398518582800473
    ],
    [
      0.2515664893109619,
      -0.8725696099955149,
      0.4187321066840142
    ],
    [
      0.26639421269558666,
      -0.8779135090585978,
      0.3978718311902942
    ],
    [
      0.24365609693089557,
      -0.8987638791620445,
      0.36449306706986356
    ],
    [
      0.24036923913042588,
      -0.8996851299756335,
      0.36440265611077477
    ],
    [
      0.22147617110745932,
      -0.9015133472677181,
      0.3717821812967023
    ],
    [
      0.2095295155917526,
      -0.8987751163744785,
      0.3850982631510148
    ],
    [
      0.2695154433499485,
      -0.8774045617990877,
      0.396891245469123
    ],
    [
      0.2894336342922882,
      -0.8771942430928495,
      0.3830906305629527
    ],
    [
      0.2715737392099657,
      -0.9034147963401418,
      0.3317972421904944
    ],
    [
      0.29680176570038375,
      -0.8756378578730741,
      0.3810079444533784
    ],
    [
      0.320138577381072,
      -0.8748057277758472,
      0.36362924789267653
    ],
    [
      0.3360540330591482,
      -0.8780813887387221,
      0.3406475621743946
    ],
    [
      0.32771632342211693,
      -0.886352411045985,
      0.3270801351284724
    ],
    [
      0.300022485427713,
      -0.8991186251023918,
      0.31870394762500553
    ],
    [
      0.2732205389006985,
      -0.9044330154989852,
      0.3276453228694473
    ],
    [
      0.4418540994457945,
      -0.8523289493525454,
      0.27982193784357245
    ],
    [
      0.43665630132951694,
      -0.8549761065983456,
      0.2799055763202305
    ],
    [
      0.43232262570756574,
      -0.8565485995491705,
      0.28181845913933823
    ],
    [
      0.4024420766237275,
      -0.8535520344383776,
      0.3308916733145282
    ],
    [
      0.421694568667621,
      -0.836584142121029,
      0.3497151182145987
    ],
    [
      0.43557709712296666,
      -0.8300965972777686,
      0.3481554705154003
    ],
    [
      0.44591522459923966,
      -0.826295362197528,
      0.3440865979393351
    ],
    [
      0.45047462275873357,
      -0.8289928038316536,
      0.33142653099248137
    ],
    [
      0.44256694628890353,
      -0.851738483070168,
      0.28049252130822294
    ],
    [
      0.4753522578392642,
      -0.8307346371515799,
      0.28968982309316027
    ],
    [
      0.4765105453606057,
      -0.8279477265673222,
      0.29570299665735694
    ],
    [
      0.48509449497041246,
      -0.8212679672555366,
      0.30033690567321103
    ],
    [
      0.5071693668250877,
      -0.8100804630903898,
      0.2941919045002753
    ],
    [
      0.5026096364796491,
      -0.8220693468590686,
      0.26755474630904846
    ],
    [
      0.4796008850264455,
      -0.8310120719743693,
      0.2817834759433488
    ],
    [
      0.5160274593286341,
      -0.8026556883158492,
      0.29909782218037806
    ],
    [
      0.5259940791938249,
      -0.8013021264788948,
      0.28503531492332945
    ],
    [
      0.5199285013065769,
      -0.8167286304852046,
      0.25025726298123496
    ],
    [
      0.5179154710596875,
      -0.8186302835138781,
      0.24820963670053103
    ],
    [
      0.5105717394026362,
      -0.8221208149886491,
      0.25186080379004183
    ],
    [
      0.551816946578987,
      -0.7923491367871136,
      0.2601555359798427
    ],
    [
      0.5427904912692477,
      -0.7918492480670227,
      0.27991650705769283
    ],
    [
      0.552818264939254,
      -0.7901167609161348,
      0.264778152552185
    ],
    [
      0.5769678254352519,
      -0.7821211048216876,
      0.2353607992105299
    ],
    [
      0.555993909760667,
      -0.7925723718671276,
      0.25039929644861847
    ],
    [
      0.5779271971868548,
      -0.7675765244491352,
      0.27717581760740306
    ],
    [
      0.5836564895742887,
      -0.7647095907198894,
      0.27306472499910595
    ],
    [
      0.5854772122484406,
      -0.763473344302349,
      0.2726259094025754
    ],
    [
      0.6108571335794875,
      -0.755896063014497,
      0.2355306864810526
    ],
    [
      0.5807072129748346,
      -0.7819930703134281,
      0.22641989925971148
    ],
    [
      0.6392372168543528,
      -0.7454962368850339,
      0.1887091449256097
    ],
    [
      0.6200476795493441,
      -0.749450740699943,
      0.23208718695736022
    ],
    [
      0.6523343256066301,
      -0.716676734692473,
      0.24664627624571547
    ],
    [
      0.6531487885879931,
      -0.7166931676959254,
      0.24443314698300864
    ],
    [
      0.6459096451396924,
      -0.7386487722188241,
      0.1928697011330196
    ],
    [
      0.6400179091616339,
      -0.7449448940904334,
      0.18823968954756448
    ],
    [
      0.6678935316242774,
      -0.7100826672429245,
      0.22293684328891153
    ],
    [
      0.6645319748425275,
      -0.7213432058657161,
      0.19509288496319285
    ],
    [
      0.6846770667094879,
      -0.6961876578348202,
      0.215731452042948
    ],
    [
      0.6918052889446353,
      -0.6923504862907373,
      0.2050761963788317
    ],
    [
      0.6896030082198329,
      -0.6993164584432412,
      0.1881599904457891
    ],
    [
      0.6756350041537456,
      -0.713195763433631,
      0.18673281495893687
    ],
    [
      0.7118100266651272,
      -0.6834752104205678,
      0.16182744723795067
    ],
    [
      0.7054440371256789,
      -0.6910994090138445,
      0.15725875919814053
    ],
    [
      0.7174672256811041,
      -0.6623810798288137,
      0.21562023364766691
    ],
    [
      0.7323066206544587,
      -0.6397029312866706,
      0.23346771307589384
    ],
    [
      0.7289949638000742,
      -0.6649561385205044,
      0.16247977288889895
    ],
    [
      0.7617305190533494,
      -0.6008029944305433,
      0.2424920168294359
    ],
    [
      0.760773765647442,
      -0.6234030646350361,
      0.18053225890753152
    ],
    [
      0.7474598958803447,
      -0.6460158346649638,
      0.15481358277836804
    ],
    [
      0.7385069831759619,
      -0.6562244532242637,
      0.15484476998224883
    ],
    [
      0.7325553121582843,
      -0.6392322641397449,
      0.23397612508855273
    ],
    [
      0.7525837069181042,
      -0.6082236860615378,
      0.25235235642870674
    ],
    [
      0.7948259824726654,
      -0.5632580228116016,
      0.2258142097493588
    ],
    [
      0.7868329133662479,
      -0.6009106003516312,
      0.14071395392293035
    ],
    [
      0.7718712119337564,
      -0.6172276399335059,
      0.15246269278098284
    ],
    [
      0.7953728173822783,
      -0.5625544479308965,
      0.22564258127078188
    ],
    [
      0.8259280772414882,
      -0.5335658455443448,
      0.18207223756719912
    ],
    [
      0.8378713484199815,
      -0.52894478424745,
      0.13486667013869888
    ],
    [
      0.8290384459090104,
      -0.5466634097714794,
      0.11770459473526237
    ],
    [
      0.7955194458013415,
      -0.5933297979917138,
      0.12291689130074314
    ],
    [
      0.7924409912225484,
      -0.5968902114721885,
      0.12553625324547082
    ],
    [
      0.8050992970736197,
      -0.5363319759073119,
      0.2533044284471198
    ],
    [
      0.8383945759039231,
      -0.5086498972469142,
      0.1958821511153695
    ],
    [
      0.8067309810706874,
      -0.527231202463048,
      0.26685648451947847
    ],
    [
      0.8114671090645097,
      -0.5156671042228093,
      0.2749701229751145
    ],
    [
      0.8146060680433993,
      -0.49834600389900785,
      0.29676289239856574
    ],
    [
      0.8092510923049847,
      -0.4945738895507802,
      0.3170320762601186
    ],
    [
      0.8095153262408851,
      -0.49287301228374447,
      0.31900020430003045
    ],
    [
      0.8038085665250161,
      -0.48718867383420095,
      0.3413780667656775
    ],
    [
      0.8035596650936572,
      -0.4888349367053232,
      0.33960605013879275
    ],
    [
      0.7972523886337962,
      -0.4828847239827499,
      0.36223055111601216
    ],
    [
      0.7974751646819285,
      -0.4813671668159093,
      0.3637568039599475
    ],
    [
      0.7901540519769288,
      -0.4766769118928137,
      0.385273533755917
    ],
    [
      0.790273338169776,
      -0.4757692541299008,
      0.38614979969265417
    ],
    [
      0.7828220423851706,
      -0.47102254430299056,
      0.4066047376928205
    ],
    [
      0.7832155946331587,
      -0.4683038634631981,
      0.4089802242026745
    ],
    [
      0.7754507083703521,
      -0.4616371795905361,
      0.4307752468603717
    ],
    [
      0.7752119856782748,
      -0.46339201524957957,
      0.42931831717698665
    ],
    [
      0.7665502993419051,
      -0.45499854309784227,
      0.45318535320294345
    ],
    [
      0.7663894550766905,
      -0.45623615990228733,
      0.4522120846957408
    ],
    [
      0.756908055337543,
      -0.4492866347168208,
      0.47458583589270026
    ],
    [
      0.75707699148724,
      -0.4479434122628785,
      0.47558503800153173
    ],
    [
      0.7468333188093006,
      -0.44191277615658314,
      0.496943751531164
    ],
    [
      0.7470135013759227,
      -0.44044598409096236,
      0.49797405942501477
    ],
    [
      0.7358537616689262,
      -0.43391584049598536,
      0.5198425577079598
    ],
    [
      0.735984347928784,
      -0.4325651405648024,
      0.5207825254095948
    ],
    [
      0.724457561695373,
      -0.42564569709823347,
      0.5422056637883393
    ],
    [
      0.7245245288677463,
      -0.4243816066299913,
      0.5431063054532856
    ],
    [
      0.7123609021013897,
      -0.4169191573210869,
      0.56455324055041
    ],
    [
      0.7123732140960204,
      -0.4157396181532618,
      0.5654069098766706
    ],
    [
      0.7000290697403996,
      -0.4080193690969844,
      0.5860712379566921
    ],
    [
      0.7000202551107652,
      -0.40596079908914695,
      0.5875095505926354
    ],
    [
      0.685807185552545,
      -0.397029095374212,
      0.6099478679943328
    ],
    [
      0.673232499893006,
      -0.4023280699280196,
      0.6203951363734311
    ],
    [
      0.6724456771294571,
      -0.3860802377614702,
      0.6314735634371026
    ],
    [
      0.656825191659466,
      -0.3761285021615558,
      0.6535350162487167
    ],
    [
      0.6567154185068469,
      -0.3761743783503439,
      0.653618922743298
    ],
    [
      0.6406417456324652,
      -0.3659117256961165,
      0.6750457486356594
    ],
    [
      0.6405752934890662,
      -0.36489259692302384,
      0.6756601853610796
    ],
    [
      0.6234038613718118,
      -0.35400642649055236,
      0.6971707650426142
    ],
    [
      0.6233548251830412,
      -0.35292186901185146,
      0.6977642268662113
    ],
    [
      0.6049201293106319,
      -0.3413597821853274,
      0.7194060996830609
    ],
    [
      0.6048993661821123,
      -0.34045190103027034,
      0.7198536378162953
    ],
    [
      0.5740638898925363,
      -0.32131132034660487,
      0.7531332456734143
    ],
    [
      0.6119670824319833,
      -0.28138777571798,
      0.7391327415939399
    ],
    [
      0.8210420904291553,
      -0.3553679661368244,
      0.4467700688133659
    ],
    [
      0.8218550805542106,
      -0.35512045229444744,
      0.44547019084268613
    ],
    [
      0.8305203989963599,
      -0.3632286119369299,
      0.42225684401948804
    ],
    [
      0.8126320809077382,
      -0.3476841777903878,
      0.46770162881240984
    ],
    [
      0.8116450410602566,
      -0.3479671959265479,
      0.4692026831565543
    ],
    [
      0.8023169968258174,
      -0.3397494704425365,
      0.4907725888213576
    ],
    [
      0.802429773804791,
      -0.33971991502986093,
      0.49060863979723807
    ],
    [
      0.7921656737021182,
      -0.33082697140242945,
      0.5128616386519521
    ],
    [
      0.7815408736020186,
      -0.32129329160257897,
      0.5347564713592288
    ],
    [
      0.792113478030787,
      -0.33048527583135334,
      0.5131624697701931
    ],
    [
      0.7705610051635111,
      -0.31126021544453797,
      0.5561949438846233
    ],
    [
      0.7814343875207481,
      -0.3206731806226459,
      0.5352840453716412
    ],
    [
      0.7586190224278562,
      -0.30033045229672894,
      0.5781857817638256
    ],
    [
      0.7704138214396398,
      -0.3104789123780973,
      0.5568351539758284
    ],
    [
      0.7452860264381138,
      -0.28916746967919377,
      0.6007752602058608
    ],
    [
      0.7457498931300023,
      -0.28911110143057617,
      0.600226513848055
    ],
    [
      0.7585749113783692,
      -0.30011612732223825,
      0.5783549203978482
    ],
    [
      0.7320575347276093,
      -0.27801101152419516,
      0.6219337933573227
    ],
    [
      0.7323632611824674,
      -0.2779873536855595,
      0.6215843344720655
    ],
    [
      0.7170751818917611,
      -0.2665907157054513,
      0.6439973399126374
    ],
    [
      0.7188465804087889,
      -0.26647843578190467,
      0.6420660691064588
    ],
    [
      0.7009436116874528,
      -0.25535287844078636,
      0.6659376552700368
    ],
    [
      0.704037860398519,
      -0.2551657613147241,
      0.6627375991885118
    ],
    [
      0.6824720795524742,
      -0.24393128078990897,
      0.6890060891483586
    ],
    [
      0.6875856517519087,
      -0.24362223781503325,
      0.6840132869666338
    ],
    [
      0.6631765327909536,
      -0.23284138142292324,
      0.7113239609716757
    ],
    [
      0.6695817961931654,
      -0.2325683069382285,
      0.7053879789269308
    ],
    [
      0.64179049688554,
      -0.2223618780552943,
      0.7339347064249886
    ],
    [
      0.6509220407845977,
      -0.22196790220171894,
      0.7259688334997465
    ],
    [
      0.5979617857307368,
      -0.26126415562278166,
      0.7577484700033537
    ],
    [
      0.6191256954632453,
      -0.2119583137293083,
      0.7561461806146885
    ],
    [
      0.6296631906253268,
      -0.21152888888230825,
      0.7475157493590014
    ],
    [
      0.5708114546907923,
      -0.20764089188993645,
      0.7943925624078647
    ],
    [
      0.5786028346717204,
      -0.20276999685203165,
      0.7900019544826942
    ],
    [
      0.6073081675137703,
      -0.2012666845426668,
      0.7685496154213266
    ],
    [
      0.5741471141383466,
      -0.2542882170641055,
      0.778262548237397
    ],
    [
      0.5684523907917647,
      -0.2107314658510953,
      0.795269846469345
    ],
    [
      0.1421130801773517,
      -0.8856405561840942,
      0.4420912549287011
    ],
    [
      0.14390576341644787,
      -0.8841360507812396,
      0.44451611327879065
    ],
    [
      0.1366843490408685,
      -0.8998700791854152,
      0.41418743258832547
    ],
    [
      0.13624748673724937,
      -0.89759924930111,
      0.4192281121440532
    ],
    [
      0.14595214253380448,
      -0.912850353748866,
      0.38131640897076813
    ],
    [
      0.13350488018902887,
      -0.9060997192262745,
      0.40144706473429287
    ],
    [
      0.1635907274108553,
      -0.9219244075721349,
      0.3511316855938169
    ],
    [
      0.14986116861517101,
      -0.9186416030471409,
      0.3655670052018839
    ],
    [
      0.19292205426560502,
      -0.9220406092833056,
      0.33559230594638134
    ],
    [
      0.18548771404863967,
      -0.9228831280095414,
      0.33746264974413764
    ],
    [
      0.16368424248046323,
      -0.9219760366979387,
      0.3509524989487295
    ],
    [
      0.21693639669626258,
      -0.9212294497914633,
      0.322916243978775
    ],
    [
      0.21294869732139282,
      -0.9223931330046872,
      0.32224797981510994
    ],
    [
      0.2658850692884529,
      -0.9085619285460157,
      0.32221165703031196
    ],
    [
      0.24451640326143037,
      -0.9164677521275012,
      0.3166995229653158
    ],
    [
      0.36208268899959156,
      -0.8680267904327046,
      0.3397434582415423
    ],
    [
      0.3817508816617307,
      -0.8624604721095681,
      0.3323073854115076
    ],
    [
      0.37193715606379696,
      -0.8865556861557857,
      0.27510319388189336
    ],
    [
      0.3680453986378021,
      -0.8881877214954889,
      0.2750730010855179
    ],
    [
      0.33287850441268446,
      -0.8883895190340653,
      0.31615813095727335
    ],
    [
      0.33878820298222373,
      -0.8768187928361615,
      0.34119108729480624
    ],
    [
      0.4022453810083079,
      -0.8536613945739507,
      0.33084872203401183
    ],
    [
      0.3949738315161028,
      -0.8747045306702772,
      0.2808694651299413
    ],
    [
      0.3768587295190239,
      -0.8850892829517567,
      0.27311986231186564
    ],
    [
      0.4149601848228979,
      -0.867437124367059,
      0.27451936230720403
    ],
    [
      0.4746907185598115,
      -0.8427746268072126,
      0.25377086145405553
    ],
    [
      0.4638338476844293,
      -0.8500393482053176,
      0.24958218735506035
    ],
    [
      0.495064949120453,
      -0.8331959173761019,
      0.2463640789972423
    ],
    [
      0.5232809311353163,
      -0.819505397306835,
      0.23364068758485304
    ],
    [
      0.5498323092720767,
      -0.8049365627893922,
      0.22307299604688616
    ],
    [
      0.578329322417089,
      -0.7868145000461233,
      0.21554149797605027
    ],
    [
      0.5699255322011726,
      -0.7935073459727872,
      0.21337989509893787
    ],
    [
      0.5512341658399873,
      -0.8045104733789755,
      0.22114201915111042
    ],
    [
      0.6118268697967543,
      -0.7552747148518235,
      0.23500635416984408
    ],
    [
      0.6028955004894841,
      -0.7738217403291918,
      0.1942084696490742
    ],
    [
      0.5947122874600363,
      -0.7805499095586218,
      0.1925074903272041
    ],
    [
      0.6220120747455349,
      -0.7607537077159857,
      0.18535041156451615
    ],
    [
      0.6149328552580172,
      -0.752792916603257,
      0.23486253050706965
    ],
    [
      0.6701562202136123,
      -0.7258827593425462,
      0.15487046263976642
    ],
    [
      0.6614256037099154,
      -0.7342022651543326,
      0.15317703678822353
    ],
    [
      0.6414003686459122,
      -0.744834299066105,
      0.1839223587158232
    ],
    [
      0.703734751813824,
      -0.6947800262965224,
      0.1484523969120713
    ],
    [
      0.6872132473063358,
      -0.7116577031137975,
      0.14588100056373016
    ],
    [
      0.7313929929316809,
      -0.6717859295479438,
      0.11733692833819755
    ],
    [
      0.7181636137928433,
      -0.6845279602536133,
      0.12514989194973902
    ],
    [
      0.7049306123757402,
      -0.6942873176438077,
      0.14504465620811538
    ],
    [
      0.7605123372682694,
      -0.6389764887517085,
      0.11545575639738172
    ],
    [
      0.7551388640390405,
      -0.6469880716603635,
      0.10569641028451249
    ],
    [
      0.7481727724326688,
      -0.6550302838229548,
      0.10570160767572699
    ],
    [
      0.7328295989954897,
      -0.6705972864542793,
      0.1151523262303758
    ],
    [
      0.7899968097348109,
      -0.6058166522400125,
      0.0942932896738929
    ],
    [
      0.7823295566683443,
      -0.6158735986663509,
      0.09306006248047745
    ],
    [
      0.7698870064940604,
      -0.6276363857974849,
      0.11552733206771951
    ],
    [
      0.8278053130578202,
      -0.5504199327689446,
      0.10851848360475212
    ],
    [
      0.8007695259587241,
      -0.594463434548637,
      0.07335796671445274
    ],
    [
      0.8583221986532998,
      -0.4992682744854904,
      0.11838155849306209
    ],
    [
      0.8578811742122547,
      -0.5120212125200013,
      0.04329167196760379
    ],
    [
      0.8575773893134991,
      -0.5125486460974116,
      0.04306862804819128
    ],
    [
      0.8378472821155013,
      -0.5439245602674375,
      0.046454327995808835
    ],
    [
      0.8289103518311127,
      -0.5516181338806532,
      0.09287121729172478
    ],
    [
      0.8884070869501374,
      -0.45785791541565796,
      0.03315082424313258
    ],
    [
      0.8759878003167176,
      -0.4819610207187316,
      0.018945928429003
    ],
    [
      0.7779221262077651,
      -0.6241543135839787,
      0.07258483581921617
    ],
    [
      0.7634230136566461,
      -0.641493740184112,
      0.07530659681597361
    ],
    [
      0.7655297082082992,
      -0.6326667777615426,
      0.11703424356718511
    ],
    [
      0.7978285206477919,
      -0.5998391584484901,
      0.0605197127617364
    ],
    [
      0.7844427453865108,
      -0.6169265711748863,
      0.06364891977772939
    ],
    [
      0.8138367303133347,
      -0.5796814280517285,
      0.04048726175983272
    ],
    [
      0.8100082775599832,
      -0.5849301521845784,
      0.041752932227990466
    ],
    [
      0.7987379421817067,
      -0.5989292935660576,
      0.057457819553093516
    ],
    [
      0.8312614660426019,
      -0.5553412774357267,
      0.0245038904821122
    ],
    [
      0.8223626208347965,
      -0.5682686350729684,
      0.028115444973007244
    ],
    [
      0.8448097796825724,
      -0.5350653129831489,
      -0.0012437825085550443
    ],
    [
      0.843868466958015,
      -0.5365496737930378,
      -0.0006767765617680109
    ],
    [
      0.8340709481868306,
      -0.5514674737371675,
      0.014466471603937044
    ],
    [
      0.8680368601430739,
      -0.49621103985094334,
      -0.016929659270020693
    ],
    [
      0.863469590499407,
      -0.5037947637015795,
      -0.024720484413861998
    ],
    [
      0.8553803043344258,
      -0.5176741790650454,
      -0.01838421295776415
    ],
    [
      0.893925532842086,
      -0.44812566687158034,
      -0.008973763084354209
    ],
    [
      0.8876607381647625,
      -0.4596107986628004,
      -0.028571448569007597
    ],
    [
      0.901351220839011,
      -0.42940608102814554,
      -0.056359509118464435
    ],
    [
      0.8926173739443332,
      -0.4484461886265834,
      -0.0461545191613266
    ],
    [
      0.8950919992076063,
      -0.4239644602019789,
      -0.13807407229518256
    ],
    [
      0.8909433396300102,
      -0.4387966705825962,
      -0.11695061972710087
    ],
    [
      0.8947948714576809,
      -0.4347887062532056,
      -0.10149344278176851
    ],
    [
      0.9160657330174446,
      -0.3850713754136949,
      -0.11199825279091191
    ],
    [
      0.8979366742616196,
      -0.41665216045880665,
      -0.14181222162067322
    ],
    [
      0.8935569717285813,
      -0.43928806049393326,
      -0.09263875097779493
    ],
    [
      0.8983973773944441,
      -0.43440687233919106,
      -0.06459738040560609
    ],
    [
      0.4665995350708139,
      -0.4423832443490798,
      -0.7658863747259659
    ],
    [
      0.44697776686789725,
      -0.48766332013466523,
      -0.7499302381695399
    ],
    [
      0.4752659842766946,
      -0.46153499027743106,
      -0.7490712228747787
    ],
    [
      0.48546980214677166,
      -0.45997923139154356,
      -0.7434636358908344
    ],
    [
      0.49414692628611706,
      -0.4731725182789877,
      -0.7293329714112093
    ],
    [
      0.5060715040290164,
      -0.47140351505595635,
      -0.7222675119391
    ],
    [
      0.5137294859313961,
      -0.4841243834540324,
      -0.7083117933720408
    ],
    [
      0.5266200339670558,
      -0.4819138161948802,
      -0.7003073707915862
    ],
    [
      0.5327260581031422,
      -0.49266266392662794,
      -0.6881035144443066
    ],
    [
      0.5471994602764003,
      -0.4897389088713767,
      -0.6787698813373274
    ],
    [
      0.5521005083167533,
      -0.49958348421718424,
      -0.667533797656569
    ],
    [
      0.5669582869617521,
      -0.49633345011080604,
      -0.6574278722008216
    ],
    [
      0.5712650720066819,
      -0.5048306658528937,
      -0.6471492998680634
    ],
    [
      0.5862576601063066,
      -0.5015122999591496,
      -0.6362290224096683
    ],
    [
      0.5900212844364323,
      -0.5076295945046196,
      -0.627843195945499
    ],
    [
      0.6051131714271409,
      -0.5042285482169764,
      -0.6161100720880871
    ],
    [
      0.6082932283381076,
      -0.5090415824927988,
      -0.6089794870529137
    ],
    [
      0.6235170797426011,
      -0.5054567007023644,
      -0.5964394143451112
    ],
    [
      0.626372625726423,
      -0.5101053905136782,
      -0.5894487461259665
    ],
    [
      0.6408462134608125,
      -0.5065197808433821,
      -0.5768481969351303
    ],
    [
      0.6435475410672129,
      -0.5118462319256193,
      -0.5690869856620244
    ],
    [
      0.6582154112565075,
      -0.5079097190884603,
      -0.5556799345305785
    ],
    [
      0.6601717392633364,
      -0.5115001511461986,
      -0.5500371533409697
    ],
    [
      0.675324846653585,
      -0.5071949896298503,
      -0.5354340239344973
    ],
    [
      0.6768261909091274,
      -0.509769684279307,
      -0.531075490198161
    ],
    [
      0.6920767279860763,
      -0.505188886088183,
      -0.5155715197264754
    ],
    [
      0.6929946110662687,
      -0.5065554791123759,
      -0.5129912432140945
    ],
    [
      0.7086923828697955,
      -0.5015365028417116,
      -0.4962018165823629
    ],
    [
      0.7091567903287723,
      -0.5021325621032011,
      -0.4949338711446898
    ],
    [
      0.7242813107285551,
      -0.4969059886738131,
      -0.478017804427227
    ],
    [
      0.7249653824446107,
      -0.497727980990745,
      -0.4761218869111311
    ],
    [
      0.7398134749237264,
      -0.4922103662859712,
      -0.45869922350262465
    ],
    [
      0.7399988396394725,
      -0.49200856737035037,
      -0.4586167103000169
    ],
    [
      0.7542929191990734,
      -0.48626097255263706,
      -0.4411263522147637
    ],
    [
      0.7546761170370637,
      -0.4866323625539494,
      -0.440060111904069
    ],
    [
      0.768593603986291,
      -0.48065830531631293,
      -0.4221746859320376
    ],
    [
      0.7687867043059576,
      -0.48083838129547773,
      -0.4216176637138544
    ],
    [
      0.7824808733667594,
      -0.4745574487743043,
      -0.4031363424798326
    ],
    [
      0.7829343601338401,
      -0.474958937011401,
      -0.4017807808678936
    ],
    [
      0.7947092567431936,
      -0.4691631076145971,
      -0.3851274798038887
    ],
    [
      0.795787852914163,
      -0.4701151569547861,
      -0.3817242884015155
    ],
    [
      0.8068295830142863,
      -0.4643272906119536,
      -0.3652755003637053
    ],
    [
      0.808018931640993,
      -0.4653536170129937,
      -0.361318996515091
    ],
    [
      0.8181677979488908,
      -0.4596958000714047,
      -0.34537114210103603
    ],
    [
      0.8195527953036491,
      -0.4608624857872846,
      -0.34049814229146697
    ],
    [
      0.8291004271970381,
      -0.4552021181390658,
      -0.3246282693534205
    ],
    [
      0.8396698779115138,
      -0.45001409607187043,
      -0.3040424468140607
    ],
    [
      0.8301715074859488,
      -0.45602658448991035,
      -0.32071018442976496
    ],
    [
      0.8405478881938013,
      -0.45064955675484525,
      -0.3006563231492104
    ],
    [
      0.8495106452253192,
      -0.4445798963266381,
      -0.2840429182906304
    ],
    [
      0.8502586126370152,
      -0.4451182558634313,
      -0.28094488771585624
    ],
    [
      0.8591601168925135,
      -0.4386371726834372,
      -0.26351721818796414
    ],
    [
      0.8598369701710866,
      -0.4391438850575152,
      -0.26044775472942316
    ],
    [
      0.8689884239294752,
      -0.43194225769772615,
      -0.24142287607341142
    ],
    [
      0.875704382210673,
      -0.4272967093477772,
      -0.22485407969966748
    ],
    [
      0.8696627542170735,
      -0.4323571355943769,
      -0.2382309829308512
    ],
    [
      0.8824914907900684,
      -0.430551283670298,
      -0.1892996587767162
    ],
    [
      0.8820059233662443,
      -0.4313637970477829,
      -0.18971248178066197
    ],
    [
      0.8949056705632701,
      -0.41688472689192824,
      -0.15921986458336904
    ],
    [
      0.7816283053224521,
      -0.3788810274409432,
      -0.4954859830147033
    ],
    [
      0.7948841565158785,
      -0.37948980171165164,
      -0.47344130377153576
    ],
    [
      0.8099904594941172,
      -0.3708327794065521,
      -0.45431102258928346
    ],
    [
      0.8059726567279999,
      -0.3707539709703699,
      -0.46146459194234163
    ],
    [
      0.8222751583776876,
      -0.3625352327628115,
      -0.43867045594678805
    ],
    [
      0.8200127641153854,
      -0.36263562057037424,
      -0.4428029735462319
    ],
    [
      0.8353774170461641,
      -0.35132209668537556,
      -0.4227497551387476
    ],
    [
      0.8590238754194721,
      -0.34147296245567077,
      -0.38141079870798034
    ],
    [
      0.8406134272914119,
      -0.3430054421728826,
      -0.41918531999244857
    ],
    [
      0.8884907151764574,
      -0.28637174387237785,
      -0.35857422293957597
    ],
    [
      0.863708369046331,
      -0.3303912601006071,
      -0.38059094640894964
    ],
    [
      0.033933555350801226,
      -0.3211386661271807,
      -0.9464240439355444
    ],
    [
      0.055010132773274024,
      -0.3234803064155154,
      -0.944634520147126
    ],
    [
      0.05408952827494032,
      -0.2231546894916252,
      -0.9732812067891226
    ],
    [
      -0.01043153934353568,
      -0.13705420927430048,
      -0.9905086202083859
    ],
    [
      0.007177742911602737,
      -0.12736939699318647,
      -0.9918293788330164
    ],
    [
      -0.007976131133326741,
      -0.13392268191769124,
      -0.9909596846492378
    ],
    [
      -0.6267339008475202,
      0.6966439408916538,
      0.34913011492478946
    ],
    [
      -0.6304728379297284,
      0.7021665052250432,
      0.3308567659469635
    ],
    [
      -0.5924178421204656,
      0.7366232054936306,
      0.3262320546261809
    ],
    [
      -0.5863546209579976,
      0.7391654435083886,
      0.3313950898915823
    ],
    [
      -0.5840881306040635,
      0.7330936850342408,
      0.3484461287636409
    ],
    [
      -0.6202619837405008,
      0.6970925060281788,
      0.35963468904661033
    ],
    [
      -0.6068004891656525,
      0.7348379515281758,
      0.3029956292460326
    ],
    [
      -0.635896578832703,
      0.70149329905525,
      0.3217805034638447
    ],
    [
      -0.63805566770836,
      0.7044017501207203,
      0.3109712837740895
    ],
    [
      -0.6467538098537651,
      0.7030828159146124,
      0.29560795558512826
    ],
    [
      -0.6159954664862031,
      0.7377781022737138,
      0.27610334491607047
    ],
    [
      -0.6089439084943176,
      0.7388574743188452,
      0.28857745745439156
    ],
    [
      -0.6572296621585971,
      0.7005040489299138,
      0.2781065418354865
    ],
    [
      -0.628224054446602,
      0.735501113399449,
      0.25371765725475937
    ],
    [
      -0.6249425644430616,
      0.7372498780487029,
      0.25672827749296034
    ],
    [
      -0.6167256277803534,
      0.7387326501445005,
      0.2718888957817363
    ],
    [
      -0.6485329751117246,
      0.7021394297476107,
      0.2939476167388251
    ],
    [
      -0.6625838403290228,
      0.6975012965950947,
      0.27290034038638655
    ],
    [
      -0.6678021806935002,
      0.6962762442487945,
      0.2631342607031603
    ],
    [
      -0.6429296318328639,
      0.7299599638773465,
      0.23194813999564928
    ],
    [
      -0.6363241579142576,
      0.7337296154139784,
      0.2381856786609271
    ],
    [
      -0.6779907643194358,
      0.6901945837550457,
      0.2529030645380682
    ],
    [
      -0.679322756157671,
      0.6898156795619734,
      0.2503495979561345
    ],
    [
      -0.6592929752199242,
      0.7212600086749388,
      0.21240709195289964
    ],
    [
      -0.646667444428076,
      0.7289440168907898,
      0.22463712194555266
    ],
    [
      -0.6977395367862175,
      0.6780407063611684,
      0.23112840440456991
    ],
    [
      -0.6841208072043835,
      0.7051465243826561,
      0.18640574106256189
    ],
    [
      -0.6601886697794574,
      0.7209638962379812,
      0.2106228397305951
    ],
    [
      -0.7103853340139884,
      0.6849267482435358,
      0.16195069236767773
    ],
    [
      -0.7030268258804732,
      0.6939287653527653,
      0.15561539354579862
    ],
    [
      -0.6989810693363299,
      0.6978561505474936,
      0.1562762229274656
    ],
    [
      -0.6904211772344749,
      0.7046546132721446,
      0.1636474076190825
    ],
    [
      -0.7059576490762469,
      0.6694403481262752,
      0.23124320100558665
    ],
    [
      -0.7176210829333769,
      0.6612062409299139,
      0.2186922227351945
    ],
    [
      -0.7465757279442736,
      0.6423493952500992,
      0.1732395360947084
    ],
    [
      -0.7295272545313529,
      0.6498484112343967,
      0.21327687945972298
    ],
    [
      -0.7433250925332526,
      0.639233724780082,
      0.1970990916118435
    ],
    [
      -0.7519504754334654,
      0.6346386745726937,
      0.17833741960676652
    ],
    [
      -0.7967454591296814,
      0.589892437567575,
      0.13123865839308851
    ],
    [
      -0.7809898683938064,
      0.6021648633916152,
      0.1656873645236187
    ],
    [
      -0.800886417351968,
      0.5640889211406114,
      0.2009592882838472
    ],
    [
      -0.8177309529210885,
      0.5386778764733715,
      0.20283548514228827
    ],
    [
      -0.8225474418142463,
      0.5338402019761016,
      0.19603659025537543
    ],
    [
      -0.8219519935441697,
      0.550975668612083,
      0.14429391153556367
    ],
    [
      -0.8401401506950369,
      0.5298965997685476,
      0.11564653364391123
    ],
    [
      -0.8388298133079477,
      0.5323681894985384,
      0.11379215753206284
    ],
    [
      -0.8301952237214787,
      0.5447740408869477,
      0.11830948772499249
    ],
    [
      -0.8407026671152341,
      0.5095039643099029,
      0.1833704879685526
    ],
    [
      -0.8613062299509432,
      0.4935147362243464,
      0.12080887126824259
    ],
    [
      -0.8498595321477548,
      0.4951811485668023,
      0.18037296283440557
    ],
    [
      -0.8618305123262189,
      0.47741047729771957,
      0.17125245747109974
    ],
    [
      -0.872001045214133,
      0.46300284359725297,
      0.15887902305313076
    ],
    [
      -0.8796071841255022,
      0.4527713650382514,
      0.1459085077581267
    ],
    [
      -0.9139893818714245,
      0.3969499941167232,
      0.08398876113519285
    ],
    [
      -0.8977325364681983,
      0.41819923211261256,
      0.1385124370834486
    ],
    [
      -0.9136508578724906,
      0.36693974260948203,
      0.17492093986298252
    ],
    [
      -0.9363655699034118,
      0.3335647886217481,
      0.10933458414969811
    ],
    [
      -0.9266482797656017,
      0.3713905811669942,
      0.05824089480677092
    ],
    [
      -0.9230388101573354,
      0.37955390217446155,
      0.06275500209122636
    ],
    [
      -0.9462187650425066,
      0.31128569939210576,
      0.08815476184189575
    ],
    [
      -0.931025650083016,
      0.36163743667152204,
      0.049087710123294194
    ],
    [
      -0.9294029498347144,
      0.3654984261379871,
      0.051196262843940854
    ],
    [
      -0.9590293083473652,
      0.2743516530970664,
      0.07066792889056062
    ],
    [
      -0.942537725709542,
      0.33301012314311695,
      0.026960962491914743
    ],
    [
      -0.9359642501953709,
      0.3503103200015657,
      0.035406243187013325
    ],
    [
      -0.9873086408624067,
      0.024322592397413748,
      0.15693966731676395
    ],
    [
      -0.9915367003043307,
      0.12932015171670275,
      0.011457325585350451
    ],
    [
      -0.9907496643471518,
      0.1354553770230118,
      0.008181896574733864
    ],
    [
      -0.9684563009569759,
      0.24899662879252876,
      0.009647382374883414
    ],
    [
      -0.9593189130033536,
      0.2733405116121428,
      0.0706554163930571
    ],
    [
      -0.9436335867925567,
      0.07535262713651177,
      0.32230053592980623
    ],
    [
      -0.9447053406995972,
      0.05326599082640627,
      0.3235653774354408
    ],
    [
      -0.949263638691454,
      -0.02423070309679882,
      0.31354651534612116
    ],
    [
      -0.8415571036616512,
      -0.5101141356884952,
      -0.1776660064485961
    ],
    [
      -0.9550943829020312,
      -0.16145660694538283,
      -0.24844815117579863
    ],
    [
      -0.973978093874772,
      -0.10249350759764334,
      -0.2021429037893681
    ],
    [
      -0.9925281145439799,
      -0.10444556041726243,
      -0.06307984423646114
    ],
    [
      -0.992494362613712,
      -0.11538757439092706,
      -0.04050491150687184
    ],
    [
      -0.9513900186894652,
      -0.2776925858944206,
      0.13320608123253594
    ],
    [
      -0.4974334338926065,
      -0.667168252915335,
      -0.5544785849315639
    ],
    [
      -0.3743629552126067,
      -0.5938401274774179,
      -0.7121841621112392
    ],
    [
      -0.27549511635987206,
      -0.5094174100611756,
      -0.815227786074803
    ],
    [
      -0.2608258417204803,
      -0.45624677879020054,
      -0.8507695088179693
    ],
    [
      -0.27323836768503507,
      -0.4364158429280007,
      -0.8572525919857346
    ],
    [
      -0.3016615718252482,
      -0.41887487159556397,
      -0.8564719131586981
    ],
    [
      -0.3255210971357337,
      -0.4088423186449726,
      -0.8525749080312831
    ],
    [
      -0.32804476375289054,
      -0.4081973367659025,
      -0.8519164085939035
    ],
    [
      -0.6046305065617921,
      -0.4511170457381768,
      -0.6564414380424886
    ],
    [
      -0.6571454586506669,
      -0.483403725515621,
      -0.5783430507340975
    ],
    [
      -0.6574026084062397,
      -0.4908079904794645,
      -0.5717773403539023
    ],
    [
      -0.6316460084720598,
      -0.6553836491683513,
      -0.41412026318943873
    ],
    [
      -0.6157754540202949,
      -0.6678067608283046,
      -0.41815633490132287
    ],
    [
      -0.21352876912717697,
      -0.5502659131115619,
      -0.8072254267690852
    ],
    [
      -0.21604134770841163,
      -0.5228947299248257,
      -0.8245648776762061
    ],
    [
      -0.44421619227517806,
      -0.670626734268506,
      -0.5940805987447331
    ],
    [
      -0.21214544062600954,
      -0.6441014903442911,
      -0.7349337263712009
    ],
    [
      -0.1578007434376584,
      -0.6005202147986615,
      -0.7838841731969666
    ],
    [
      -0.15550430963751058,
      -0.5874626089861701,
      -0.794170065368447
    ],
    [
      -0.12849980640164144,
      -0.7146265518225193,
      -0.6876021314575724
    ],
    [
      -0.12088037707636559,
      -0.7057273549833831,
      -0.6980951474305157
    ],
    [
      -0.1382801460266743,
      -0.6807806129559073,
      -0.7193165911045154
    ],
    [
      -0.18396812795866463,
      -0.655066134982095,
      -0.7328329186758766
    ],
    [
      -0.6002322435063574,
      -0.6833868088842874,
      -0.4155763748076584
    ],
    [
      -0.5020896470268783,
      -0.7447649459299595,
      -0.43958066570581705
    ],
    [
      -0.2636454129545148,
      -0.8052823599590612,
      -0.5310474714814188
    ],
    [
      -0.24242474246320572,
      -0.8043027058821165,
      -0.5425194941680473
    ],
    [
      -0.19016116326057914,
      -0.9226127163009602,
      -0.33559575043070394
    ],
    [
      -0.24370821769121603,
      -0.897900125090213,
      -0.3665810551470856
    ],
    [
      -0.2858740886804312,
      -0.8772073592075094,
      -0.38572432432155557
    ],
    [
      -0.33400769063249863,
      -0.8520772160174048,
      -0.402992903836251
    ],
    [
      -0.3871468136291242,
      -0.8219431773414573,
      -0.4177639978727776
    ],
    [
      -0.48119142768750817,
      -0.8304434585170117,
      -0.2807462771371362
    ],
    [
      -0.3432098642307425,
      -0.9181413760363717,
      -0.19804899066835255
    ],
    [
      -0.13094791679455375,
      -0.9618760284732019,
      -0.24009820685666688
    ],
    [
      -0.12673096619520638,
      -0.9588829300531281,
      -0.25393461493061037
    ],
    [
      -0.15783905305526316,
      -0.9399540690676458,
      -0.30261061014741863
    ],
    [
      -0.32170439176278837,
      -0.9289817133771443,
      -0.18302803209180743
    ],
    [
      -0.3158327909935506,
      -0.9313960814999604,
      -0.18097233904589746
    ],
    [
      -0.13143827963008736,
      -0.967190365201888,
      -0.21740923648392108
    ],
    [
      -0.13144504070973229,
      -0.9713802623280677,
      -0.19784485647160777
    ],
    [
      -0.13110276519710193,
      -0.9674988743880067,
      -0.21623596605470985
    ],
    [
      -0.23353162860135718,
      -0.9615918132697223,
      -0.14423648323307517
    ],
    [
      -0.21461517130729885,
      -0.9653691855202922,
      -0.14833294945030456
    ],
    [
      -0.1794862749035969,
      -0.9703389014736182,
      -0.16194781075458245
    ],
    [
      -0.5376841984238938,
      -0.1065940003113433,
      -0.8363811462861177
    ],
    [
      -0.5670520673776003,
      -0.07200582717429667,
      -0.8205285575382095
    ],
    [
      -0.5943573948637404,
      -0.06600461335306101,
      -0.8014877904166106
    ],
    [
      -0.6618354726686426,
      -0.08104338667811126,
      -0.7452555109445461
    ],
    [
      -0.6936995621196363,
      -0.12116641678701523,
      -0.7099997302520756
    ],
    [
      -0.7174942969369646,
      -0.17827791444839114,
      -0.67336388311437
    ],
    [
      -0.6997779216757046,
      -0.30185177010886177,
      -0.6474537583622311
    ],
    [
      -0.5949058685262973,
      -0.1914921549237594,
      -0.7806521390450594
    ],
    [
      -0.5182340344874725,
      -0.16535454383578377,
      -0.8391015196814371
    ],
    [
      -0.5035068356230615,
      -0.1355253975132819,
      -0.8532958063354807
    ],
    [
      -0.527092361405195,
      -0.10206098208407643,
      -0.8436570384251703
    ],
    [
      -0.4799030163870513,
      -0.14373024423319622,
      -0.8654679149195974
    ],
    [
      -0.4953365038598506,
      -0.1755520965396248,
      -0.8507780023863114
    ],
    [
      -0.4171819832900739,
      -0.1368900344163425,
      -0.8984544013446943
    ],
    [
      -0.4228693005115964,
      -0.13229819684871608,
      -0.8964813114590909
    ],
    [
      -0.4490493516088992,
      -0.2804221108171993,
      -0.8483620215358851
    ],
    [
      -0.41765938833599225,
      -0.1965855924535166,
      -0.8870821496200364
    ],
    [
      -0.40958945872479585,
      -0.14619838353147607,
      -0.9004790435953034
    ],
    [
      0.10968878065572571,
      -0.8444714030293163,
      -0.5242484342980513
    ],
    [
      0.10674165701697046,
      -0.8463376184731322,
      -0.5218417904063437
    ],
    [
      0.10893003731746453,
      -0.8586254979600386,
      -0.5008956989462892
    ],
    [
      0.12246621185159383,
      -0.8661554396807839,
      -0.4845376984983815
    ],
    [
      0.14235238125391667,
      -0.8512561180313036,
      -0.5050730848754612
    ],
    [
      0.13667423504280501,
      -0.8407930979347933,
      -0.5238197399303287
    ],
    [
      0.14091023144524586,
      -0.8375028694319441,
      -0.5279519394483814
    ],
    [
      0.135161308251411,
      -0.8266645920337969,
      -0.5462207182351866
    ],
    [
      0.11314524185690056,
      -0.8291975283117672,
      -0.5473843378164919
    ],
    [
      0.10979887156221353,
      -0.8272123853257397,
      -0.5510570545482241
    ],
    [
      0.14026666861761142,
      -0.8227618044142734,
      -0.5508069306679846
    ],
    [
      0.13419803134696584,
      -0.8113690253583495,
      -0.5689210780693934
    ],
    [
      0.11273204283445408,
      -0.8138023579966922,
      -0.5701028053232106
    ],
    [
      0.13980422378060753,
      -0.8070910565616843,
      -0.5736364749832823
    ],
    [
      0.1335888575558457,
      -0.795195378743748,
      -0.591454416469698
    ],
    [
      0.11231301802773186,
      -0.797311227453595,
      -0.5930266373089358
    ],
    [
      0.10924329951573179,
      -0.8116890444434691,
      -0.5737828828410309
    ],
    [
      0.11211797129538344,
      -0.7796100059983997,
      -0.6161475465014713
    ],
    [
      0.108915100821318,
      -0.795162977268432,
      -0.5965344419182226
    ],
    [
      0.13972460666548198,
      -0.7905382989871125,
      -0.596260205050395
    ],
    [
      0.13313586955687873,
      -0.7781474212710932,
      -0.6138089531820805
    ],
    [
      0.14094668621869785,
      -0.77254905504752,
      -0.6191138741694874
    ],
    [
      0.13428588621549414,
      -0.7597142052155523,
      -0.6362402275532577
    ],
    [
      0.11283339417024921,
      -0.761182579856018,
      -0.6386467766173709
    ],
    [
      0.1094876285895748,
      -0.7777792654484235,
      -0.6189280034255535
    ],
    [
      0.13650138615104765,
      -0.7404191835959502,
      -0.6581388942631708
    ],
    [
      0.11347883777126443,
      -0.741197686498973,
      -0.6616256818675142
    ],
    [
      0.10994174707623791,
      -0.7590393622855949,
      -0.6416946772031866
    ],
    [
      0.14257669332728898,
      -0.7536962354662371,
      -0.6415714076888702
    ],
    [
      0.11503932213180715,
      -0.71964078977168,
      -0.6847503837605694
    ],
    [
      0.1110949731770816,
      -0.7391871294044882,
      -0.6642742616250731
    ],
    [
      0.14582811833039588,
      -0.7336098295278506,
      -0.6637399927112528
    ],
    [
      0.14141372246126802,
      -0.7204527134632949,
      -0.6789330208223954
    ],
    [
      0.11821712869098017,
      -0.6995331206048339,
      -0.7047539454738251
    ],
    [
      0.1138838037111422,
      -0.7184136845183815,
      -0.6862304694117024
    ],
    [
      0.15106125051214547,
      -0.7133255262874852,
      -0.6843589643895878
    ],
    [
      0.14562950819218898,
      -0.6979788441391582,
      -0.7011544619253776
    ],
    [
      0.15353142913500584,
      -0.6916805515701095,
      -0.7056954830856095
    ],
    [
      0.145927780669257,
      -0.6632319615448933,
      -0.7340493498493534
    ],
    [
      0.13108720774726862,
      -0.6632664976608658,
      -0.7368132036314992
    ],
    [
      0.12059839550016643,
      -0.6718450178469615,
      -0.7308079768290721
    ],
    [
      0.11492984029955444,
      -0.6959249839160236,
      -0.7088579184647663
    ],
    [
      0.16148939177979857,
      -0.6575147521925211,
      -0.735931740714992
    ],
    [
      0.16877919782134254,
      -0.6101452589273646,
      -0.7741035753639454
    ],
    [
      0.17654860061345268,
      -0.6116410504905427,
      -0.7711846840908194
    ],
    [
      0.21358150898255213,
      -0.6080908616905565,
      -0.764596915341131
    ],
    [
      0.2503049741363582,
      -0.620533866104854,
      -0.7431588934673123
    ],
    [
      0.26368338409349434,
      -0.6026158380396308,
      -0.7532099472901271
    ],
    [
      0.2602763304459269,
      -0.584221524742399,
      -0.7687271569531475
    ],
    [
      0.24902446181319227,
      -0.6339291306757773,
      -0.7322026186099742
    ],
    [
      0.2712749598747343,
      -0.6661236161848333,
      -0.6947583926127141
    ],
    [
      0.3158939168293798,
      -0.6090046266027795,
      -0.7275468356653074
    ],
    [
      0.3135460146770276,
      -0.6039596479240241,
      -0.7327493707671416
    ],
    [
      0.2837749795134287,
      -0.5976059977432826,
      -0.7498925472782143
    ],
    [
      0.33617240083864697,
      -0.6137109969367187,
      -0.7143857005521029
    ],
    [
      0.27356776214643946,
      -0.6736113469530943,
      -0.6865918968136946
    ],
    [
      0.27479184346278,
      -0.6739886999053838,
      -0.6857322182646646
    ],
    [
      0.2916967189270006,
      -0.6726321009917273,
      -0.6800581452219193
    ],
    [
      0.2938951693406754,
      -0.6717776001055163,
      -0.6799562378820335
    ],
    [
      0.3375268058178129,
      -0.6170668790093546,
      -0.7108474675934908
    ],
    [
      0.3306339435263453,
      -0.6603860020485882,
      -0.6742191955784851
    ],
    [
      0.35859708478312363,
      -0.6245307085059529,
      -0.6938079885084184
    ],
    [
      0.35767907432213675,
      -0.6219354073821938,
      -0.6966075141974886
    ],
    [
      0.32309760480448124,
      -0.6650905342663398,
      -0.673247739690912
    ],
    [
      0.3657861889235428,
      -0.6490752110531607,
      -0.6670096209119365
    ],
    [
      0.3790398084545719,
      -0.6314200632503145,
      -0.6764891184133639
    ],
    [
      0.378502786979717,
      -0.62953453591569,
      -0.678543961978886
    ],
    [
      0.37717366580392364,
      -0.6569609442389935,
      -0.6527957900972097
    ],
    [
      0.38804492193993,
      -0.6528159405118403,
      -0.6505785781673687
    ],
    [
      0.3987055238344902,
      -0.6367032982985166,
      -0.6600324349603245
    ],
    [
      0.3973537734559577,
      -0.660301582306545,
      -0.6372690162904394
    ],
    [
      0.4097257312503365,
      -0.6550502162454392,
      -0.6348496194754946
    ],
    [
      0.4182350166493053,
      -0.6418858931707574,
      -0.6426989738569172
    ],
    [
      0.39972913515794267,
      -0.6362873245117199,
      -0.659814412673443
    ],
    [
      0.42180571074351436,
      -0.6402935863068968,
      -0.64195332051358
    ],
    [
      0.4228237373550268,
      -0.6684796164787761,
      -0.6118456418750696
    ],
    [
      0.4384471434880794,
      -0.645453498688794,
      -0.6254229635994656
    ],
    [
      0.42211246943688974,
      -0.6733985004510883,
      -0.6069229957219584
    ],
    [
      0.4406161081347177,
      -0.673965013346132,
      -0.5929828041668349
    ],
    [
      0.4574211036425421,
      -0.6496127649802543,
      -0.6072636902673727
    ],
    [
      0.44139188694795367,
      -0.644107253007642,
      -0.6247391845878362
    ],
    [
      0.4424035876898272,
      -0.6754602333724256,
      -0.58994282666343
    ],
    [
      0.460516893985289,
      -0.6760405170316374,
      -0.5752333523760063
    ],
    [
      0.47588429985961006,
      -0.6529102700702065,
      -0.5892726978097481
    ],
    [
      0.46142124361733333,
      -0.647650683971973,
      -0.6063324397467689
    ],
    [
      0.4612197434138078,
      -0.6766816030736535,
      -0.57391493825041
    ],
    [
      0.4801088630161402,
      -0.6771903681194614,
      -0.5575918623685047
    ],
    [
      0.4943448158859679,
      -0.6549400557427009,
      -0.5715564070067068
    ],
    [
      0.48126719048635846,
      -0.6500787541285107,
      -0.5880301903746868
    ],
    [
      0.5007350775763465,
      -0.6513911561256992,
      -0.570047317163966
    ],
    [
      0.48024497851157455,
      -0.677323126348816,
      -0.5573133258118661
    ],
    [
      0.49895725217905335,
      -0.6776701686972264,
      -0.5401895990814717
    ],
    [
      0.5129003203701444,
      -0.655819199202185,
      -0.5539263843887632
    ],
    [
      0.5192309927185881,
      -0.6522057538045294,
      -0.5522923418849253
    ],
    [
      0.49899249973004306,
      -0.6777068704696152,
      -0.5401109913077525
    ],
    [
      0.5165383551158456,
      -0.6778372145004719,
      -0.5231871924392434
    ],
    [
      0.5179902825318107,
      -0.6771717759659645,
      -0.5226131007138232
    ],
    [
      0.5306664401322526,
      -0.6564971631486743,
      -0.5361013002176969
    ],
    [
      0.5366626535051268,
      -0.6757845375999445,
      -0.5052805706473043
    ],
    [
      0.548406134781287,
      -0.6560165893343632,
      -0.5185488847277163
    ],
    [
      0.5378988923577694,
      -0.6521218128065032,
      -0.5342302152277095
    ],
    [
      0.5339412764450074,
      -0.6771037250178705,
      -0.5063963456376834
    ],
    [
      0.5515652453997262,
      -0.6755503501173081,
      -0.4892928617132303
    ],
    [
      0.5548936169329436,
      -0.6738543054703442,
      -0.48786622027575943
    ],
    [
      0.5658858080754363,
      -0.6547115835088498,
      -0.5011247296214234
    ],
    [
      0.5560971768150227,
      -0.6511590450328931,
      -0.5164763576488395
    ],
    [
      0.5690013355250694,
      -0.673403683622349,
      -0.4719798290759243
    ],
    [
      0.5719748213796342,
      -0.6718267967527422,
      -0.4706310220041655
    ],
    [
      0.5830737708181915,
      -0.6530907982263836,
      -0.4832156734377314
    ],
    [
      0.573795633836807,
      -0.649498642597597,
      -0.4989088933399519
    ],
    [
      0.5853045688387132,
      -0.671195838872419,
      -0.4548787833883639
    ],
    [
      0.5889798115840816,
      -0.6691393965745609,
      -0.4531613945364414
    ],
    [
      0.5997768308448179,
      -0.6510509258114481,
      -0.4651886124807904
    ],
    [
      0.5909688420496062,
      -0.6476895666329922,
      -0.4808888156334211
    ],
    [
      0.6059626991316155,
      -0.6657949682578137,
      -0.4353461467656561
    ],
    [
      0.6159491538994808,
      -0.6485228940341797,
      -0.44724120530653905
    ],
    [
      0.6076255538158488,
      -0.6455201169954439,
      -0.4627039711350785
    ],
    [
      0.6015486395853242,
      -0.6684140106959474,
      -0.43744936223339453
    ],
    [
      0.622561052053227,
      -0.6620049011799861,
      -0.4173334964750083
    ],
    [
      0.6380754137273227,
      -0.6333086047220797,
      -0.4379269089490603
    ],
    [
      0.6370450083520341,
      -0.6328246578031478,
      -0.44012113083796095
    ],
    [
      0.6178233279270229,
      -0.6649540083594045,
      -0.4196790466963285
    ],
    [
      0.6337941357377016,
      -0.6609289331531057,
      -0.40184317690561483
    ],
    [
      0.6379264282356762,
      -0.658269855652341,
      -0.3996631948252412
    ],
    [
      0.6538258490389586,
      -0.629802150794176,
      -0.41935785432434086
    ],
    [
      0.6525843740665711,
      -0.6292000464656466,
      -0.42218590247871823
    ],
    [
      0.6488668692236678,
      -0.6569495109802667,
      -0.3839129146651153
    ],
    [
      0.6531956172557628,
      -0.6540475033760211,
      -0.3815197883799171
    ],
    [
      0.6687954786005738,
      -0.6258805718410859,
      -0.40123075355125115
    ],
    [
      0.6678453557263798,
      -0.6254134655115764,
      -0.4035351013127676
    ],
    [
      0.6836882026425188,
      -0.6212527278543996,
      -0.38290402152616426
    ],
    [
      0.6831587173275087,
      -0.6210029138176827,
      -0.3842519329416324
    ],
    [
      0.6635671522857308,
      -0.6525157259552311,
      -0.36592603322054484
    ],
    [
      0.6678494333328677,
      -0.6495251323251401,
      -0.3634477085840225
    ],
    [
      0.6780715016183483,
      -0.6477464114244481,
      -0.34733791209683396
    ],
    [
      0.6815255474291672,
      -0.6452426918157135,
      -0.34523151197390173
    ],
    [
      0.6982453156380557,
      -0.6166047066195338,
      -0.3636648387789926
    ],
    [
      0.6973741125272008,
      -0.616208360563568,
      -0.3660008245188237
    ],
    [
      0.711878177331098,
      -0.6117814236886093,
      -0.34489556429344226
    ],
    [
      0.7110995845950137,
      -0.6114627389677071,
      -0.3470600807395007
    ],
    [
      0.6918042971904448,
      -0.6431801144074706,
      -0.3282166278841274
    ],
    [
      0.6949265993520033,
      -0.6408237277667163,
      -0.32622380575952714
    ],
    [
      0.7051005951364419,
      -0.6384411950865219,
      -0.30858708844462246
    ],
    [
      0.7073363871831523,
      -0.6367007822594094,
      -0.307062451688483
    ],
    [
      0.7250869278962352,
      -0.6069659936196836,
      -0.32533249082019144
    ],
    [
      0.7239856554498291,
      -0.6065450041646807,
      -0.3285543008784831
    ],
    [
      0.7173584650688964,
      -0.6339784663912905,
      -0.288908526606856
    ],
    [
      0.7193756215101226,
      -0.6323533590402333,
      -0.2874507688065186
    ],
    [
      0.7374808859563808,
      -0.6021123816047058,
      -0.30591276986634713
    ],
    [
      0.7363336522681463,
      -0.6017117814023624,
      -0.30944415434622147
    ],
    [
      0.7493195440596381,
      -0.5971331110748576,
      -0.2862730664039456
    ],
    [
      0.7481260786865027,
      -0.596747610280953,
      -0.29017177673427913
    ],
    [
      0.7290217933687212,
      -0.6293371284943448,
      -0.26918767336552807
    ],
    [
      0.7309046330923443,
      -0.6277654702307731,
      -0.2677478883391647
    ],
    [
      0.7413211680061741,
      -0.6236705448447287,
      -0.2479475294473428
    ],
    [
      0.7606717235872722,
      -0.5922473276164133,
      -0.26574730829490145
    ],
    [
      0.7591749125753283,
      -0.5917787329684628,
      -0.27101915674446975
    ],
    [
      0.7405793415620431,
      -0.624307070220794,
      -0.24856170445959563
    ],
    [
      0.7505807004080038,
      -0.6199307577620169,
      -0.22872356187249665
    ],
    [
      0.77160937296533,
      -0.5875766484645313,
      -0.24366505233873573
    ],
    [
      0.7696259508919047,
      -0.5869963778580691,
      -0.25121932269480884
    ],
    [
      0.7506591910704365,
      -0.6201774192123951,
      -0.2277954072419613
    ],
    [
      0.7596392043996355,
      -0.6161176170124394,
      -0.20820029093640072
    ],
    [
      0.7809901096479173,
      -0.583608962413481,
      -0.22238486374480188
    ],
    [
      0.778782066747884,
      -0.5830628063872113,
      -0.23137903172017055
    ],
    [
      0.7874771297013071,
      -0.5792223440129983,
      -0.21066857001811765
    ],
    [
      0.7597976067255419,
      -0.6167869070305237,
      -0.2056246778231126
    ],
    [
      0.7672988817529532,
      -0.613002386325592,
      -0.18836268319334692
    ],
    [
      0.7900626124165666,
      -0.5797213964043368,
      -0.19930923463933073
    ],
    [
      0.7947629920023455,
      -0.576333057366001,
      -0.1902419342065192
    ],
    [
      0.7675243788605774,
      -0.6146570509766954,
      -0.18194240170811413
    ],
    [
      0.7732540765340192,
      -0.6114627763138627,
      -0.16790296693645476
    ],
    [
      0.7978804245341823,
      -0.5767089721337496,
      -0.17548102349139327
    ],
    [
      0.7866738063932212,
      -0.6051916180949146,
      -0.12201404723415997
    ],
    [
      0.8026994340113798,
      -0.5836380144979414,
      -0.12263884649943252
    ],
    [
      0.8043201326235412,
      -0.5749173281999562,
      -0.15013057647219222
    ],
    [
      0.800461457178341,
      -0.5747407410923326,
      -0.1701015464378944
    ],
    [
      0.7733861718823414,
      -0.6139020155286082,
      -0.15810801520191797
    ],
    [
      -0.43366037395021206,
      -0.07759935234557659,
      -0.897728812382063
    ],
    [
      -0.4320969063248633,
      -0.1169601410361967,
      -0.8942105954154621
    ],
    [
      -0.30298413423360393,
      -0.2690470149093155,
      -0.9142288106218814
    ],
    [
      -0.30551409232644067,
      -0.285907005509831,
      -0.9082501437326352
    ],
    [
      -0.29910864471532833,
      -0.3318656180351895,
      -0.8946503396426344
    ],
    [
      -0.2950007672337623,
      -0.33425295500592833,
      -0.8951254154593625
    ],
    [
      -0.2616127932531464,
      -0.363264782181566,
      -0.8942021272804409
    ],
    [
      -0.26125967187257737,
      -0.3632567294623826,
      -0.8943086337240218
    ],
    [
      -0.28184894998346366,
      -0.35399173581313453,
      -0.8917684791296578
    ],
    [
      -0.2404578786840667,
      -0.40443825417751494,
      -0.8823886372435915
    ],
    [
      -0.14360623338529835,
      -0.5647229140572693,
      -0.812690150101226
    ],
    [
      -0.12398781057273142,
      -0.5646601103652316,
      -0.8159570960483798
    ],
    [
      -0.08460335830323784,
      -0.5752669049666932,
      -0.8135786746307057
    ],
    [
      -0.07266242637671778,
      -0.5988938099430684,
      -0.7975251570984603
    ],
    [
      -0.06236058235628311,
      -0.6326477652698945,
      -0.7719248427581494
    ],
    [
      -0.05415149451738587,
      -0.6371657853237315,
      -0.7688220715187136
    ],
    [
      -0.07660811077194211,
      -0.6035272193991251,
      -0.7936536352895476
    ],
    [
      -0.07363782793803479,
      -0.6761076769198128,
      -0.7331138243865426
    ],
    [
      -0.08214755670948855,
      -0.666840336312023,
      -0.7406589935955207
    ],
    [
      -0.08061435422785354,
      -0.6715267469144807,
      -0.7365820755834892
    ],
    [
      -0.17582079904687353,
      -0.837679063240041,
      -0.5170888063300213
    ],
    [
      -0.12254740723099271,
      -0.856981340382042,
      -0.5005647962231863
    ],
    [
      -0.08812504891907944,
      -0.8721623287776351,
      -0.4812139316501365
    ],
    [
      -0.07146632820509288,
      -0.8850518020439259,
      -0.4599737727650149
    ],
    [
      -0.07161088463887465,
      -0.8956487126827255,
      -0.4389592972828053
    ],
    [
      -0.07226428922324847,
      -0.8960422541573813,
      -0.43804811524262677
    ],
    [
      -0.07257179748910361,
      -0.9063404807609802,
      -0.4162694645817251
    ],
    [
      -0.07302255047986148,
      -0.906600128154078,
      -0.41562472827350583
    ],
    [
      -0.07346594484759303,
      -0.9163456352340569,
      -0.39359043653923204
    ],
    [
      -0.07373767293458856,
      -0.9164946884314782,
      -0.39319237234091836
    ],
    [
      -0.07430072137470174,
      -0.9257555412355071,
      -0.3707506988192365
    ],
    [
      -0.07350858343480485,
      -0.9263352504452171,
      -0.36945837647021235
    ],
    [
      -0.07410627281510032,
      -0.934955395188761,
      -0.3469389994464179
    ],
    [
      -0.07998832321179718,
      -0.9380715037731376,
      -0.33708118007175847
    ],
    [
      -0.07392847393629882,
      -0.9425640538196801,
      -0.325741592659674
    ],
    [
      -0.028525782309978813,
      -0.9450294394633932,
      -0.3257386042382887
    ],
    [
      -0.07451489606986414,
      -0.9500407457370436,
      -0.30310082761863183
    ],
    [
      -0.06010210522763983,
      -0.9594427468669111,
      -0.27542213497045215
    ],
    [
      -0.05768346939111944,
      -0.9592239358002653,
      -0.2766984971893634
    ],
    [
      -0.036993869456337244,
      -0.9542266733054093,
      -0.29678765064459667
    ],
    [
      0.06353303337136108,
      -0.7278540862777642,
      -0.6827825296237409
    ],
    [
      0.056422408925215106,
      -0.7627164276271893,
      -0.6442671517303162
    ],
    [
      0.06698624793159491,
      -0.7422601631710223,
      -0.6667553470032125
    ],
    [
      0.06729257502998066,
      -0.7204531812658496,
      -0.6902310648976553
    ],
    [
      0.06393939633819182,
      -0.7058393602066865,
      -0.7054803690953584
    ],
    [
      0.06782722071441118,
      -0.6981515200869886,
      -0.7127299089629856
    ],
    [
      0.06254441822521258,
      -0.6742471592781468,
      -0.7358525422625236
    ],
    [
      0.05845055352732859,
      -0.6700175267409417,
      -0.7400405709502016
    ],
    [
      0.07832308106509371,
      -0.9088511136773669,
      -0.4097012913573506
    ],
    [
      0.08058263278445443,
      -0.9042813309471006,
      -0.4192632988875439
    ],
    [
      0.07734301098682894,
      -0.8958929453176788,
      -0.4374858731222138
    ],
    [
      0.06767988722577217,
      -0.9296661775560108,
      -0.36213289159299306
    ],
    [
      0.07515385571164411,
      -0.9245351456281239,
      -0.37361298487881445
    ],
    [
      0.08063090847734078,
      -0.9143548759467677,
      -0.3968045078253141
    ],
    [
      -0.6273393799646895,
      0.11874659295281506,
      -0.7696392330226008
    ],
    [
      -0.6600145757169344,
      0.1159589810658523,
      -0.7422494692159533
    ],
    [
      -0.6629247666340742,
      0.07671903429558455,
      -0.744744884883348
    ],
    [
      -0.6430770019012191,
      0.074072674995994,
      -0.7622107375553545
    ],
    [
      -0.6420367420121835,
      0.07231933742157667,
      -0.7632553539552049
    ],
    [
      -0.6206135442186209,
      0.06970339058259203,
      -0.7810123341367232
    ],
    [
      -0.6135189013952383,
      0.03918312311873318,
      -0.7887073224545604
    ],
    [
      -0.6136971583538742,
      0.03838498971791059,
      -0.7886078812646597
    ],
    [
      -0.6108417034514211,
      0.005452522787457461,
      -0.7917339725689547
    ],
    [
      -0.6115170942434125,
      0.0010605033809758622,
      -0.791230509257999
    ],
    [
      -0.5473675085357451,
      -0.006887019941176806,
      -0.8368640149723854
    ],
    [
      -0.5057518782304472,
      -0.06841096973456544,
      -0.8599621950332185
    ],
    [
      -0.35035274338942757,
      -0.22456461543969558,
      -0.9092984596335373
    ],
    [
      -0.44968729344317954,
      -0.28396153325212736,
      -0.8468454320292745
    ],
    [
      -0.42539050510308524,
      -0.28716186160526574,
      -0.8582429629234022
    ],
    [
      -0.3290223466685615,
      -0.2648027412180974,
      -0.9064346659501137
    ],
    [
      -0.3489208908052533,
      -0.32652807040848914,
      -0.878426793304358
    ],
    [
      -0.3288792270786578,
      -0.34728766170327086,
      -0.8781968651873104
    ],
    [
      -0.6999428166933921,
      0.127194028231858,
      -0.7027814258654491
    ],
    [
      -0.6870705462955041,
      0.1181077224631599,
      -0.7169272140934272
    ],
    [
      -0.6646163778324079,
      0.12078110700687472,
      -0.7373581182214812
    ],
    [
      -0.6408706506128433,
      0.25305247803363073,
      -0.7247408174955442
    ],
    [
      -0.6421080388211081,
      0.2911160077671205,
      -0.7091887876320692
    ],
    [
      -0.6458584563738468,
      0.2580077896248467,
      -0.7185393759727386
    ],
    [
      -0.6658290457788493,
      0.2521323253135646,
      -0.7022114868963637
    ],
    [
      -0.6465043948904593,
      0.29338732528512707,
      -0.7042413966456105
    ],
    [
      -0.6669206359250829,
      0.28627861353852607,
      -0.6879399834344143
    ],
    [
      -0.6872877705096071,
      0.27900386413252115,
      -0.6706656128854792
    ],
    [
      -0.6867975225578075,
      0.24256507951799286,
      -0.6851797904250297
    ],
    [
      -0.6677750544909447,
      0.24932796488048709,
      -0.7013644149286236
    ],
    [
      -0.6673016329543927,
      0.28645239233359365,
      -0.6874980418755837
    ],
    [
      -0.6870018779906519,
      0.27933913059291987,
      -0.6708189545301393
    ],
    [
      -0.7066028301942967,
      0.2326155578211234,
      -0.6682832054009569
    ],
    [
      -0.6881598269606635,
      0.24061094927736024,
      -0.68450158775953
    ],
    [
      -0.7074574900621775,
      0.27176906655912425,
      -0.6524151088199187
    ],
    [
      -0.7075167175849444,
      0.27169920804949,
      -0.6523799772242447
    ],
    [
      -0.7261015732351632,
      0.2647884002187409,
      -0.6345578054480309
    ],
    [
      -0.7264268238512525,
      0.2644007490403651,
      -0.6343471553465622
    ],
    [
      -0.7262398801134882,
      0.2216116205985904,
      -0.6507410592151173
    ],
    [
      -0.7076676474202028,
      0.2310972164508749,
      -0.6676829916535338
    ],
    [
      -0.7263865890444027,
      0.22140538484402533,
      -0.6506475073482624
    ],
    [
      -0.7445652890232692,
      0.2576062446024937,
      -0.6158421495184425
    ],
    [
      -0.7455652209514865,
      0.21245345688935469,
      -0.6316613253661524
    ],
    [
      -0.7427014579915613,
      0.21209911920873278,
      -0.6351444779954313
    ],
    [
      -0.764049849103292,
      0.2053911291606281,
      -0.6115899869580592
    ],
    [
      -0.758391651524562,
      0.20475741008768547,
      -0.6188024772995262
    ],
    [
      -0.7453153565749698,
      0.2579857401850327,
      -0.6147750622095096
    ],
    [
      -0.762204812621528,
      0.25152297494080467,
      -0.5964729806902479
    ],
    [
      -0.7705462162406053,
      0.25594447425666483,
      -0.5837387726841227
    ],
    [
      -0.7798555209418603,
      0.24421028290598978,
      -0.5763564037810947
    ],
    [
      -0.7807739133945781,
      0.1994150109507709,
      -0.592136597053433
    ],
    [
      -0.7749519256570953,
      0.19872866269290904,
      -0.5999636918553055
    ],
    [
      -0.7957894365316733,
      0.23811655779066884,
      -0.5567941070184964
    ],
    [
      -0.7978244385938671,
      0.19378121954343833,
      -0.5708984184026422
    ],
    [
      -0.7913984576913665,
      0.1928190860675187,
      -0.5800942002914812
    ],
    [
      -0.7963191099739563,
      0.2384562779713689,
      -0.5558907074113826
    ],
    [
      -0.8109239621287938,
      0.23269720462038587,
      -0.5368932283119214
    ],
    [
      -0.8145592639381568,
      0.18301752620918055,
      -0.5504523509194961
    ],
    [
      -0.824077821662944,
      0.23018787822225684,
      -0.5175995407289236
    ],
    [
      -0.8321264473848481,
      0.17785756920157303,
      -0.5252925476726082
    ],
    [
      -0.8225846298628893,
      0.17526093468654638,
      -0.5409603788505509
    ],
    [
      -0.8190644117118284,
      0.1766137159816254,
      -0.5458397977376863
    ],
    [
      -0.8135080317497473,
      0.23448473860521873,
      -0.5321856721482592
    ],
    [
      -0.8285108550643895,
      0.2334166666569966,
      -0.5090053268554375
    ],
    [
      -0.8437636173379778,
      0.2269408578756492,
      -0.4863751690653985
    ],
    [
      -0.8497862706777916,
      0.21959825742043976,
      -0.4792075745493152
    ],
    [
      -0.8550613139880751,
      0.2043295576218347,
      -0.4765706466024234
    ],
    [
      -0.852009974918651,
      0.18993320998310234,
      -0.48785692409213005
    ],
    [
      -0.8460839770780215,
      0.18126550985475254,
      -0.5012830723941658
    ],
    [
      -0.8324751460484936,
      0.17771067928903034,
      -0.5247895251223776
    ],
    [
      -0.4263424261076952,
      0.26225194552840336,
      -0.8657112987406205
    ],
    [
      -0.4250944351563973,
      0.28706326724955505,
      -0.8584226242330022
    ],
    [
      -0.42428699298181305,
      0.2380246160281126,
      -0.8736846283133981
    ],
    [
      -0.42174166805224106,
      0.2584546901810232,
      -0.8691001890184725
    ],
    [
      -0.41578732783492656,
      0.2174055781657816,
      -0.8830943961968581
    ],
    [
      -0.41397991331271405,
      0.22604136305449743,
      -0.8817743098787028
    ],
    [
      -0.4039111623817904,
      0.19138532850648796,
      -0.8945543186055582
    ],
    [
      -0.40312406782089943,
      0.19459501378247063,
      -0.8942168453761822
    ],
    [
      -0.39756239216118167,
      0.17073919804823628,
      -0.9015499268420601
    ],
    [
      -0.37856658241012847,
      0.14175633430053003,
      -0.9146542977365775
    ],
    [
      -0.3861704247233493,
      0.1657662028574895,
      -0.9074105846083115
    ],
    [
      -0.3478877249501151,
      0.11063483321519653,
      -0.9309855339952811
    ],
    [
      -0.3563720179017422,
      0.14079323314688133,
      -0.9236754031350451
    ],
    [
      -0.3135456536300983,
      0.120010400969366,
      -0.9419589305000757
    ],
    [
      -0.5597234702532,
      0.4460647690876835,
      -0.6983808836347589
    ],
    [
      -0.5720112613499347,
      0.46365963354612943,
      -0.6766260866303675
    ],
    [
      -0.6234154541915403,
      0.4140735572337188,
      -0.6632467570029797
    ],
    [
      -0.619598202478208,
      0.37877617992754353,
      -0.6874784891218566
    ],
    [
      -0.6132503580896195,
      0.3799938483744911,
      -0.6924800888837872
    ],
    [
      -0.5973996404005076,
      0.39198892535562635,
      -0.6996130016286758
    ],
    [
      -0.637747951210402,
      0.408791797418178,
      -0.6528145349871968
    ],
    [
      -0.6420432127905702,
      0.4043331660988372,
      -0.6513794621432678
    ],
    [
      -0.6404306847747729,
      0.3684829584771111,
      -0.6738463083751896
    ],
    [
      -0.6304189763901823,
      0.37029894366526134,
      -0.6822394055810221
    ],
    [
      -0.661037435311573,
      0.35875636522066634,
      -0.659032153639224
    ],
    [
      -0.6500329026265357,
      0.3607951457573769,
      -0.6687930085615683
    ],
    [
      -0.6584178936048657,
      0.3984213956146947,
      -0.6385501302931279
    ],
    [
      -0.6608099699343188,
      0.39589201346252184,
      -0.6376517053313626
    ],
    [
      -0.6780210176561593,
      0.38961503800201996,
      -0.623287751988751
    ],
    [
      -0.6790114463968727,
      0.38854786974665345,
      -0.6228755963893308
    ],
    [
      -0.6819969838165074,
      0.3502123743613463,
      -0.642052495446731
    ],
    [
      -0.6685399548095581,
      0.3526304549985851,
      -0.6547565127822136
    ],
    [
      -0.6865593974586751,
      0.3464347127502319,
      -0.6392332778906659
    ],
    [
      -0.6971725469698932,
      0.3820368618086165,
      -0.6066286145335844
    ],
    [
      -0.6987129649010347,
      0.3803248334555327,
      -0.6059316906518644
    ],
    [
      -0.700131120149139,
      0.34417754792868666,
      -0.6255863090737428
    ],
    [
      -0.7158686277319986,
      0.37390818736094855,
      -0.5896819271891882
    ],
    [
      -0.719849836241237,
      0.3371245880512592,
      -0.6067645551568854
    ],
    [
      -0.7061946847386357,
      0.3390079077141972,
      -0.6215808119256427
    ],
    [
      -0.7161832585910386,
      0.3740740586908193,
      -0.5891944829413283
    ],
    [
      -0.7334556459939826,
      0.3674677571768412,
      -0.5718481116476399
    ],
    [
      -0.7380959628378324,
      0.33102379246949465,
      -0.587909515539259
    ],
    [
      -0.724807624411903,
      0.3327967421204541,
      -0.6032414409076897
    ],
    [
      -0.7507574807007721,
      0.3611342319989073,
      -0.5531231975341383
    ],
    [
      -0.755251437431106,
      0.32510581300981906,
      -0.5691234282697146
    ],
    [
      -0.7428241292798509,
      0.3268022547465162,
      -0.5843052278152443
    ],
    [
      -0.7339029229796211,
      0.3677244417143904,
      -0.5711087765109273
    ],
    [
      -0.7512680641749844,
      0.3614456153257547,
      -0.5522258260101189
    ],
    [
      -0.7668266411427291,
      0.3551258999554995,
      -0.5346611053878491
    ],
    [
      -0.7723759539486821,
      0.31896005958010876,
      -0.5492721239554369
    ],
    [
      -0.7601091448279874,
      0.3206549773787718,
      -0.5651676507294849
    ],
    [
      -0.7680991265562033,
      0.3559636271573507,
      -0.5322721370920896
    ],
    [
      -0.7821574802530821,
      0.35001318091903405,
      -0.515480794275683
    ],
    [
      -0.7887861610047355,
      0.31361679923763724,
      -0.5286406108533006
    ],
    [
      -0.776175201777693,
      0.3154085347078931,
      -0.5459574272585522
    ],
    [
      -0.8043127736444301,
      0.30941875641114763,
      -0.5072878821077659
    ],
    [
      -0.7912006600897167,
      0.3113165415587161,
      -0.5263872399911653
    ],
    [
      -0.783959165297561,
      0.3512842139497761,
      -0.5118666117023449
    ],
    [
      -0.7967689127928604,
      0.3456339035679765,
      -0.49567782309807423
    ],
    [
      -0.8189520763228677,
      0.30701437472756327,
      -0.48482952715063393
    ],
    [
      -0.8186288155074412,
      0.3065756377192529,
      -0.485652386772594
    ],
    [
      -0.8052123202719031,
      0.3085407998196593,
      -0.5063948006535839
    ],
    [
      -0.7994859362755885,
      0.3477200251568197,
      -0.48980916876114744
    ],
    [
      -0.810253675478164,
      0.34277639697487683,
      -0.475387550374479
    ],
    [
      -0.4528830931705913,
      0.6425866981831702,
      -0.6180446903244853
    ],
    [
      -0.45776068670773096,
      0.6291064180665659,
      -0.6282358382425519
    ],
    [
      -0.4643243236145861,
      0.6247774771419007,
      -0.6277388203353834
    ],
    [
      -0.46958138730911214,
      0.6096430563889373,
      -0.6386146447503412
    ],
    [
      -0.47481347993162054,
      0.6060223583441446,
      -0.6381920247560491
    ],
    [
      -0.4808212392103077,
      0.5898523307192344,
      -0.6487566291525282
    ],
    [
      -0.4961322467840869,
      0.5784274095276389,
      -0.6475141122849131
    ],
    [
      -0.4938042240993386,
      0.5706172647477916,
      -0.6561656234773342
    ],
    [
      -0.5029824066225358,
      0.548827944442438,
      -0.6676800027163388
    ],
    [
      -0.5041757374656931,
      0.5478165326963154,
      -0.6676105693108155
    ],
    [
      -0.512732770140536,
      0.5288633318643177,
      -0.6763199558148384
    ],
    [
      -0.5328678950447325,
      0.5103603456574732,
      -0.6749697208104822
    ],
    [
      -0.5757917238207754,
      0.4851534691551486,
      -0.6580957393466579
    ],
    [
      -0.2898708348196357,
      0.8801890699650278,
      -0.3758218996214388
    ],
    [
      -0.284580101952248,
      0.8870863059931048,
      -0.363444701835583
    ],
    [
      -0.30388271894440677,
      0.8980344488730734,
      -0.3181028477775547
    ],
    [
      -0.311788984632778,
      0.8967405519136663,
      -0.31407644231179505
    ],
    [
      -0.2904306244207784,
      0.8797275561307296,
      -0.37646975892202905
    ],
    [
      -0.2996311852214986,
      0.8467289107303216,
      -0.4396263237980674
    ],
    [
      -0.2933212165055663,
      0.8550301172929289,
      -0.4276519174161796
    ],
    [
      -0.2950834369834444,
      0.8432908416256847,
      -0.44920632414101413
    ],
    [
      -0.3019097327210809,
      0.8340459963113237,
      -0.46175511835315575
    ],
    [
      -0.3045059309972235,
      0.8208065727626428,
      -0.48327291264580374
    ],
    [
      -0.2975729271670572,
      0.830553331482847,
      -0.47077756592681147
    ],
    [
      -0.30670472651981806,
      0.8066264250382001,
      -0.5052583706980979
    ],
    [
      -0.29973748443052295,
      0.8168923056969155,
      -0.4927924525806368
    ],
    [
      -0.31053469566920683,
      0.7911458417728741,
      -0.526931171815754
    ],
    [
      -0.3027886794138695,
      0.8029202033700149,
      -0.5134570699085355
    ],
    [
      -0.3155665581774608,
      0.7750207831170143,
      -0.5475039114898826
    ],
    [
      -0.30754035705692156,
      0.7877451292789689,
      -0.5337382692655285
    ],
    [
      -0.32052562292288844,
      0.7583207649373813,
      -0.5676380382908455
    ],
    [
      -0.3128485012478953,
      0.7711308243843352,
      -0.5545115570944229
    ],
    [
      -0.3190408632473432,
      0.755215544344177,
      -0.5725927079166468
    ],
    [
      -0.3272065331548482,
      0.7413077767486832,
      -0.5860022737095051
    ],
    [
      -0.32583316408605234,
      0.7379022720231504,
      -0.5910439798566129
    ],
    [
      -0.33447542716033657,
      0.7228699118098466,
      -0.6046364851924957
    ],
    [
      -0.3333469601647883,
      0.7191490649564647,
      -0.6096756732239998
    ],
    [
      -0.34124559221816597,
      0.7053606757141557,
      -0.6213032777539025
    ],
    [
      -0.3474745329027302,
      0.6870127048373494,
      -0.6381810028323458
    ],
    [
      -0.3400195445891787,
      0.7001745976738725,
      -0.6278074880642938
    ],
    [
      -0.3429606783697065,
      0.6655614115041371,
      -0.6628770478820423
    ],
    [
      -0.3717620223428823,
      0.8166413096918054,
      -0.44146344134977156
    ],
    [
      -0.36871003661913165,
      0.8305797036739172,
      -0.4173610723836933
    ],
    [
      -0.37273572926986076,
      0.8172147302764778,
      -0.4395772523059043
    ],
    [
      -0.37528328910192793,
      0.8040187406039773,
      -0.46121179264892304
    ],
    [
      -0.3804924877090092,
      0.7908183540096696,
      -0.4794077572989892
    ],
    [
      -0.3771724167411628,
      0.8023483610982991,
      -0.4625776426639142
    ],
    [
      -0.38815996928493307,
      0.7763302840756704,
      -0.4966317833885673
    ],
    [
      -0.3849715524285489,
      0.786688615329413,
      -0.4826157128936477
    ],
    [
      -0.39353136550694295,
      0.771141252696084,
      -0.5004740080689057
    ],
    [
      -0.3966019944741651,
      0.7615405504761827,
      -0.5126039874596635
    ],
    [
      -0.4053076569933206,
      0.7461930098966422,
      -0.5281303770509461
    ],
    [
      -0.40239974355928365,
      0.7557397889370518,
      -0.5166544471896115
    ],
    [
      -0.41295444075670074,
      0.7383459848521566,
      -0.5332108743377421
    ],
    [
      -0.4156912949030564,
      0.7290280989533343,
      -0.5438003110318231
    ],
    [
      -0.42338655656226387,
      0.7208226237360846,
      -0.5487791621705181
    ],
    [
      -0.4256121216725483,
      0.7136895393326742,
      -0.5563286468738664
    ],
    [
      -0.4354735432614606,
      0.7028327417677909,
      -0.5624846044279598
    ],
    [
      -0.43961449604183817,
      0.6894977868867042,
      -0.5756143646124701
    ],
    [
      -0.44526389445848674,
      0.6858639261199868,
      -0.5756133590692096
    ],
    [
      -0.4622284952835522,
      0.666022667590668,
      -0.5854559115794408
    ],
    [
      -0.462828294665177,
      0.6640627610597253,
      -0.587205772307339
    ],
    [
      -0.4750217552796679,
      0.6493350850698936,
      -0.5939009002420331
    ],
    [
      -0.47587012431850023,
      0.6466713780515708,
      -0.5961239414668542
    ],
    [
      -0.48786836779209136,
      0.6317399208077172,
      -0.6024027956158071
    ],
    [
      -0.48912875752943086,
      0.6278856043545514,
      -0.6054029454851
    ],
    [
      -0.5030685572039234,
      0.6099372914170488,
      -0.6122895779707482
    ],
    [
      -0.5342653857201077,
      0.5844737615668906,
      -0.6106970768402236
    ],
    [
      -0.5515655153105257,
      0.5768251105419622,
      -0.6025348738193396
    ],
    [
      -0.5610678596939593,
      0.5587410858111882,
      -0.6107464742796097
    ],
    [
      -0.575874933382962,
      0.5363411792401827,
      -0.6170139387018896
    ],
    [
      -0.5770352607335596,
      0.48663107347470463,
      -0.6559119652811721
    ],
    [
      -0.6304587105447225,
      0.4629103091329266,
      -0.6230857565349606
    ],
    [
      -0.6411016897171454,
      0.4544347480156986,
      -0.6184478015465247
    ],
    [
      -0.6527638923327248,
      0.4490075234977005,
      -0.610156983660019
    ],
    [
      -0.6573327410580405,
      0.44525274054942654,
      -0.6079997241498948
    ],
    [
      -0.6730574765183333,
      0.43797131365134756,
      -0.5959654031244482
    ],
    [
      -0.6753166812525847,
      0.43605272379410687,
      -0.5948154353190033
    ],
    [
      -0.6929989984125328,
      0.42779746961652515,
      -0.5802945055649973
    ],
    [
      -0.7099649076272512,
      0.4197748303464832,
      -0.5654546151066502
    ],
    [
      -0.6930680047385588,
      0.4277949759420328,
      -0.5802139255192593
    ],
    [
      -0.7124801942437873,
      0.41976455670130264,
      -0.5622896849024479
    ],
    [
      -0.7274230199183386,
      0.41245867587406004,
      -0.5483918223215053
    ],
    [
      -0.7307055932229878,
      0.4124911205759727,
      -0.5439856721262242
    ],
    [
      -0.7437959927667299,
      0.4058593790923714,
      -0.5310797355830001
    ],
    [
      -0.7482907683561244,
      0.4059381675517383,
      -0.5246666847797159
    ],
    [
      -0.7591765583319074,
      0.4002071623040528,
      -0.5133080756425498
    ],
    [
      -0.7741171390409746,
      0.39541706027144174,
      -0.49435615045158215
    ],
    [
      -0.765138448126456,
      0.40033819697808476,
      -0.5042742143308289
    ],
    [
      -0.7870694711577614,
      0.3924866174544567,
      -0.47589484415215183
    ],
    [
      -0.7816706944599906,
      0.3955502746315823,
      -0.4822145846625917
    ],
    [
      -0.7968276940315916,
      0.39259412938395655,
      -0.45927712287631905
    ],
    [
      -0.814268925675782,
      0.382027538655827,
      -0.43705957990573613
    ],
    [
      0.12380426539238257,
      0.09193905615609041,
      -0.9880383159694667
    ],
    [
      0.0711875702056706,
      0.049084602135587366,
      -0.9962545014610492
    ],
    [
      0.0900852489183075,
      0.04358949274599134,
      -0.9949797003202999
    ],
    [
      0.13154841291722977,
      0.07634449438847599,
      -0.9883655868328914
    ],
    [
      0.16246731160031472,
      0.13234929141209595,
      -0.9777975443434507
    ],
    [
      0.14881189290031274,
      0.13691912460575667,
      -0.9793406832398106
    ],
    [
      0.12716404925535074,
      0.11705290122673995,
      -0.9849507210471932
    ],
    [
      0.13144028159227242,
      0.10351869754600614,
      -0.9859043217439117
    ],
    [
      0.16341883405065988,
      0.10702513917117298,
      -0.9807343698794868
    ],
    [
      0.1674919878215818,
      0.12053489663378351,
      -0.9784772724540198
    ],
    [
      0.17025911034252333,
      0.14760431675854857,
      -0.9742816846372585
    ],
    [
      0.15778345423040496,
      0.17635492808752928,
      -0.9715983331142372
    ],
    [
      0.1340780747683133,
      0.14990066908777142,
      -0.9795676899905698
    ],
    [
      0.20068972437591517,
      0.19005508479415287,
      -0.9610425064864752
    ],
    [
      0.20411918332703857,
      0.21076069608591413,
      -0.9559891672938997
    ],
    [
      0.16134162530499443,
      0.22974995244056734,
      -0.9597832251594627
    ],
    [
      0.13383777218859844,
      0.20134991629616533,
      -0.9703327583582448
    ],
    [
      0.15792006630898098,
      0.1789215181871437,
      -0.9711067618890183
    ],
    [
      0.16562001192714207,
      0.26703404861296715,
      -0.9493486338172193
    ],
    [
      0.15388518100261916,
      0.25571981459248366,
      -0.9544248150025108
    ],
    [
      0.22200771580026069,
      0.22427789535930776,
      -0.9489004161545879
    ],
    [
      0.21783668679025325,
      0.26143375857279844,
      -0.9403188649424964
    ],
    [
      0.21760351317737203,
      0.2616595549427834,
      -0.9403100490582932
    ],
    [
      0.2109932436949709,
      0.2839684753064773,
      -0.935330827112626
    ],
    [
      0.19657267829492836,
      0.2984929155537433,
      -0.9339492285516299
    ],
    [
      0.1677783085283845,
      0.29419483793940693,
      -0.9409037339266756
    ],
    [
      0.1987128836596432,
      0.3166000257605336,
      -0.9275115166703315
    ],
    [
      0.18740180782865384,
      0.3275380636081384,
      -0.9260666171018063
    ],
    [
      0.1670716391154505,
      0.326105153548765,
      -0.9304528447117635
    ],
    [
      0.15857801525391288,
      0.3071390464708089,
      -0.9383595362179318
    ],
    [
      0.20375364271260893,
      0.3721114998318185,
      -0.9055481681137989
    ],
    [
      0.15660170651328717,
      0.34473264082101573,
      -0.9255459534078764
    ],
    [
      0.13456467794831592,
      0.35555596177537163,
      -0.9249174587468098
    ],
    [
      0.11646634609229944,
      0.3805182141141552,
      -0.9174102021207757
    ],
    [
      0.12511311446368825,
      0.35627076521300965,
      -0.925968601219141
    ],
    [
      0.1063406613130462,
      0.3903753449596659,
      -0.9144937144667129
    ],
    [
      0.07667383897424158,
      0.4031244297691953,
      -0.9119275281184428
    ],
    [
      0.11142221117472811,
      0.45350626169276925,
      -0.8842607994604215
    ],
    [
      0.062350292768584684,
      0.4632090548797936,
      -0.8840530597588813
    ],
    [
      0.013868943727302019,
      0.45200824311129373,
      -0.891905937058012
    ],
    [
      0.024082558873168555,
      0.4346949702417069,
      -0.9002556932364727
    ],
    [
      0.04568785805094885,
      0.4125929601716327,
      -0.9097690195008433
    ],
    [
      0.06508790740466473,
      0.40149769766546656,
      -0.9135442863260715
    ],
    [
      -0.2785862744421563,
      0.3501533674489631,
      -0.8943054886092285
    ],
    [
      -0.27203425965028455,
      0.3558908947832343,
      -0.8940576226322945
    ],
    [
      -0.26396738002543624,
      0.37404338746645793,
      -0.8890516107488496
    ],
    [
      -0.323467122190277,
      0.34151857037074,
      -0.8824591134743107
    ],
    [
      -0.2851145944345009,
      0.33566203341213185,
      -0.8977976761866133
    ],
    [
      -0.33014851405563744,
      0.3249913115401747,
      -0.8862181481386238
    ],
    [
      -0.32368298968047643,
      0.3100589545297112,
      -0.8939198884169941
    ],
    [
      -0.2880649549253927,
      0.3156193337914363,
      -0.9041034331761391
    ],
    [
      -0.28408932264703673,
      0.3238937084537018,
      -0.9024334448490129
    ],
    [
      -0.31862192801235933,
      0.27402149656591734,
      -0.90740965743674
    ],
    [
      -0.2838129362573096,
      0.2893140190827013,
      -0.9141923296414265
    ],
    [
      -0.32852601350050237,
      0.2976922240730727,
      -0.896353723805449
    ],
    [
      -0.27916656926253886,
      0.2861430717156957,
      -0.9166177879112375
    ],
    [
      -0.3193501189567769,
      0.27231924789188433,
      -0.9076660887958142
    ],
    [
      -0.31289134462773566,
      0.2444367214249653,
      -0.9177961078998219
    ],
    [
      -0.30123965400700525,
      0.2371292825273659,
      -0.9235931865392882
    ],
    [
      -0.27368755945925755,
      0.2541843474961206,
      -0.9276235428692001
    ],
    [
      -0.26658550969642214,
      0.19913559772711945,
      -0.943014941418089
    ],
    [
      -0.25447478528149714,
      0.21078555331602344,
      -0.9438283923305093
    ],
    [
      -0.2576964771373137,
      0.24819718764948692,
      -0.9338044129869506
    ],
    [
      -0.2996493801283043,
      0.21371055017555576,
      -0.9298053827185473
    ],
    [
      -0.2675305730489299,
      0.1778194146708036,
      -0.9469992862986983
    ],
    [
      -0.2204128400008087,
      0.1583264217037138,
      -0.9624712588712848
    ],
    [
      -0.21770248377192017,
      0.21100135914831167,
      -0.9529344442285115
    ],
    [
      -0.17091894477865088,
      0.12213283865234632,
      -0.9776861889371622
    ],
    [
      -0.1576686271949632,
      0.17233664083579128,
      -0.9723377428773868
    ],
    [
      -0.15854366854847504,
      0.17424056582031042,
      -0.9718560234858913
    ],
    [
      -0.21939892215817633,
      0.15671201684010105,
      -0.9629670070847383
    ],
    [
      -0.09281201692523358,
      0.09990911701594164,
      -0.9906584163329786
    ],
    [
      -0.11138811725480764,
      0.11555905045961275,
      -0.9870353555933555
    ],
    [
      -0.165898672253218,
      0.10973780465480966,
      -0.9800179818626606
    ],
    [
      0.14686926573362566,
      0.06742188354513971,
      -0.9868554647982101
    ],
    [
      0.1692007519623845,
      0.08755094603272943,
      -0.9816852537265383
    ],
    [
      0.12377835059220459,
      0.09208399324936553,
      -0.9880280654474973
    ],
    [
      0.20603137179268438,
      0.12074751483774954,
      -0.9710669964002134
    ],
    [
      0.21595907155784,
      0.1287887242763649,
      -0.9678714500961076
    ],
    [
      0.21016646957941315,
      0.1626559786864908,
      -0.9640399823980671
    ],
    [
      0.21006740794849438,
      0.16275923376244028,
      -0.9640441462624334
    ],
    [
      0.2556697001105065,
      0.16658228651023807,
      -0.9523042298900203
    ],
    [
      0.25485409489497135,
      0.20105636657436235,
      -0.9458465667195608
    ],
    [
      0.2248128113628221,
      0.2234441635153742,
      -0.9484365585731388
    ],
    [
      0.27958470451596085,
      0.20658465310384228,
      -0.9376327501227162
    ],
    [
      0.2830199090275109,
      0.2367733635076678,
      -0.9294289135955074
    ],
    [
      0.2676449917864258,
      0.2422016551085369,
      -0.932579496147288
    ],
    [
      0.29045114084846757,
      0.2412792326841645,
      -0.9259710938550751
    ],
    [
      0.29445755783476146,
      0.27421655344935325,
      -0.9154780327502928
    ],
    [
      0.2620544265152886,
      0.2695286538528492,
      -0.9266508416313095
    ],
    [
      0.25840244424279035,
      0.26466910611175126,
      -0.9290739696490039
    ],
    [
      0.3102597388825783,
      0.29661124970510533,
      -0.9031946971594165
    ],
    [
      0.2523417895421006,
      0.2972108678289981,
      -0.9208633564731654
    ],
    [
      0.2362568181813155,
      0.3258075015715788,
      -0.9154409799558497
    ],
    [
      0.23744258136430174,
      0.3195657198404302,
      -0.9173324213489484
    ],
    [
      0.2508111044432946,
      0.2980651132966836,
      -0.9210054169891565
    ],
    [
      0.011252976848800328,
      0.45377873972882465,
      -0.8910433355803521
    ],
    [
      0.2619595090280039,
      0.16048402124595978,
      -0.951641788991285
    ],
    [
      0.27892933717509916,
      0.15824369483534176,
      -0.9471839092319501
    ],
    [
      0.29656519414934013,
      0.19087673988722703,
      -0.9357431035221088
    ],
    [
      0.29474818598229624,
      0.19556666281470902,
      -0.9353486982166938
    ],
    [
      0.32507567443037577,
      0.2253971566486281,
      -0.9184344983004232
    ],
    [
      -0.03146868506878544,
      0.07569373755469788,
      -0.9966344264348097
    ],
    [
      0.4595347554813361,
      0.6658123855558767,
      -0.5878109183615946
    ],
    [
      0.46849155725936087,
      0.6481088959516851,
      -0.6003919717692657
    ],
    [
      0.4677987119870332,
      0.6723740983950266,
      -0.5736527145152788
    ],
    [
      0.4731312907298377,
      0.689656522177329,
      -0.5481976497127555
    ],
    [
      0.4652241239833048,
      0.7053296983570078,
      -0.5348612260012676
    ],
    [
      0.4534494078082212,
      0.7237945973844723,
      -0.520100966501143
    ],
    [
      0.453096919661993,
      0.7223160501594313,
      -0.5224583285534755
    ],
    [
      0.458128574277609,
      0.7114618351100235,
      -0.5328604569793512
    ],
    [
      0.44668789128918845,
      0.7415132755872971,
      -0.5006275960266426
    ],
    [
      0.44604063338934974,
      0.7392112187750368,
      -0.504593427823582
    ],
    [
      0.43858933141460343,
      0.7572529837790815,
      -0.48394970495596884
    ],
    [
      0.42977123310857523,
      0.7795911924608596,
      -0.45555928245376553
    ],
    [
      0.42089919456455693,
      0.7730547807918268,
      -0.47458421161034003
    ],
    [
      0.4177826440523239,
      0.8017372272689967,
      -0.4274050546491821
    ],
    [
      0.4175822543344119,
      0.8004047622490349,
      -0.4300898480946236
    ],
    [
      0.4098812958542196,
      0.8142649193830976,
      -0.411059563045191
    ],
    [
      0.4099403551633671,
      0.8151290286162347,
      -0.40928421899174905
    ],
    [
      0.401572453135937,
      0.828025273957442,
      -0.39129747069216897
    ],
    [
      0.4015763470236719,
      0.8276259519475314,
      -0.39213737538529275
    ],
    [
      0.422862813835406,
      0.6037795034965547,
      -0.6757494741638033
    ],
    [
      0.41180887571333225,
      0.6335008410359528,
      -0.6550497189454108
    ],
    [
      0.39339164594806303,
      0.6533566921297989,
      -0.6468137643460296
    ],
    [
      0.4196950795934266,
      0.6937123812470698,
      -0.5853368024219794
    ],
    [
      0.29394809964718116,
      0.7070954878317852,
      -0.6431255599039278
    ],
    [
      0.27174018076244916,
      0.7162048188969231,
      -0.6428125166391964
    ],
    [
      0.2322862282998465,
      0.7361085459756644,
      -0.6357572781210017
    ],
    [
      0.9396498131906766,
      -0.06803394598129184,
      0.3353052501302974
    ],
    [
      0.9409666436529941,
      -0.06802604680317474,
      0.3315934747378956
    ],
    [
      0.948418879402525,
      -0.060921342267874413,
      0.3111112650630625
    ],
    [
      0.9535337813644251,
      -0.047533647353677815,
      0.297512823532225
    ],
    [
      0.955276321155829,
      -0.0355706665465526,
      0.2935675014718411
    ],
    [
      0.962157892736569,
      -0.014450822588087168,
      0.27210910159576146
    ],
    [
      0.9609136715021689,
      -0.003647862260650656,
      0.27682414819005463
    ],
    [
      0.96368267328954,
      0.02931821474966406,
      0.2654357690391748
    ],
    [
      0.9639115612109577,
      0.030180861210690284,
      0.2645063662380078
    ],
    [
      0.9656947475143932,
      0.07225753799189408,
      0.2494243428907098
    ],
    [
      0.9654699809656428,
      0.07306633180023335,
      0.2500580472839446
    ],
    [
      0.9653055916196763,
      0.11542282187020904,
      0.23422785269754928
    ],
    [
      0.9650041906215067,
      0.1173895718232126,
      0.2344922184425178
    ],
    [
      0.9635482020220277,
      0.14840560129189753,
      0.2225997302004383
    ],
    [
      0.9633096097210043,
      0.14933763659710836,
      0.22300866825026405
    ],
    [
      0.9607655353562243,
      0.17998298566237572,
      0.21103485717701914
    ],
    [
      0.9607991126013502,
      0.18096002320699334,
      0.210044126852865
    ],
    [
      0.9586807023476621,
      0.19982732434017866,
      0.20248543501506086
    ],
    [
      0.9586811537237533,
      0.20225488411108494,
      0.2000585098117672
    ],
    [
      0.968364933448704,
      0.18507269599527995,
      0.16738414758849054
    ],
    [
      0.9546696661515199,
      0.2304508879739138,
      0.18840970453291445
    ],
    [
      0.9548230031075624,
      0.23181330423752078,
      0.18594521966197047
    ],
    [
      0.9622004459790326,
      0.21982750595803824,
      0.160767438811531
    ],
    [
      0.9655145018862945,
      0.20764568252686577,
      0.15705100182810902
    ],
    [
      0.9495630867909693,
      0.26183110674653476,
      0.17255264629640044
    ],
    [
      0.9601096574394208,
      0.24497751519572278,
      0.13481640382419183
    ],
    [
      0.963283017419649,
      0.226716541737576,
      0.14382433053364152
    ],
    [
      0.9496664728068503,
      0.26078934518597113,
      0.17355837019305095
    ],
    [
      0.9441420182705569,
      0.28732427196415666,
      0.16137103853004972
    ],
    [
      0.9510445285480912,
      0.28556383888147263,
      0.11818459562064378
    ],
    [
      0.9602546317353283,
      0.25720756672505646,
      0.10842190668967462
    ],
    [
      0.9465571780039024,
      0.3048662180725077,
      0.10529054016128321
    ],
    [
      0.9183120297638454,
      0.3696140935848405,
      0.14173368623747556
    ],
    [
      0.917828194181179,
      0.37127645881937876,
      0.14051760420907428
    ],
    [
      0.9402617815439237,
      0.3335957088501024,
      0.067982977315239
    ],
    [
      0.9446579185524409,
      0.3188281439115921,
      0.07726597935740757
    ],
    [
      0.9469002050531645,
      0.3066196891977667,
      0.09676966397864482
    ],
    [
      0.9163685009905385,
      0.3756519626088792,
      0.13839932579478387
    ],
    [
      0.9119883765218508,
      0.4004605532836324,
      0.08893000816825405
    ],
    [
      0.9124706479317749,
      0.40018130556891707,
      0.08516008064888073
    ],
    [
      0.9205110377541911,
      0.38806395656161957,
      0.04545101748524123
    ],
    [
      0.9225109289732857,
      0.3833074101865995,
      0.04526604931830598
    ],
    [
      0.933160455064,
      0.3558041409186304,
      0.05113685960150369
    ],
    [
      0.9395749603527408,
      0.3363466825659622,
      0.06379500768099013
    ],
    [
      0.8853869100216326,
      0.4468442184071465,
      0.12814157810192467
    ],
    [
      0.891101983196533,
      0.44063172806668827,
      0.10854001918264895
    ],
    [
      0.9026449525794287,
      0.420022401063364,
      0.0938790295425327
    ],
    [
      0.9076138877951542,
      0.3929157932257539,
      0.14783169523191506
    ],
    [
      0.8854523877041522,
      0.445523791663371,
      0.13222185965606784
    ],
    [
      0.8959333334841588,
      0.4118867464391028,
      0.16629122063348195
    ],
    [
      0.8799930422964397,
      0.4495477647869467,
      0.15335922758320278
    ],
    [
      0.8799826206787786,
      0.45085359675946834,
      0.149538027245111
    ],
    [
      0.8890696331322817,
      0.41930221593454126,
      0.18368679635295873
    ],
    [
      0.8741671060790448,
      0.4522477622528084,
      0.17692889019805483
    ],
    [
      0.8741301393862012,
      0.4547746252389257,
      0.1705184437398347
    ],
    [
      0.8832848985795406,
      0.42237928890490656,
      0.20347855967034043
    ],
    [
      0.8657335684861509,
      0.45892114509089277,
      0.19974176074296177
    ],
    [
      0.8866819873959078,
      0.4189392411666299,
      0.19566544262687655
    ],
    [
      0.8740085736017441,
      0.41949030419560834,
      0.24522825684761684
    ],
    [
      0.8594053586125388,
      0.4399717572376845,
      0.2604751090243321
    ],
    [
      0.8604793755746886,
      0.4660117274904816,
      0.2059327901329245
    ],
    [
      0.9177823348481017,
      0.3959151965411039,
      0.030442453721505433
    ],
    [
      0.9150013058479454,
      0.4028355215341924,
      0.02227448959751872
    ],
    [
      0.9148603931790313,
      0.40332711445715336,
      0.01891295154053293
    ],
    [
      0.9053826177415466,
      0.4238850128639818,
      0.02457257334441128
    ],
    [
      0.895349553998049,
      0.44388425650781227,
      0.036275928382346695
    ],
    [
      0.8908474547366707,
      0.4509857817856891,
      0.05479632301848528
    ],
    [
      0.8901171525664989,
      0.45232932543445614,
      0.055584494770736174
    ],
    [
      0.8848868793187489,
      0.4596645253612754,
      0.07539054936740656
    ],
    [
      0.8796954577732423,
      0.46588109024185476,
      0.09534522184245203
    ],
    [
      0.8849734369506953,
      0.45924325075295636,
      0.07692627983680918
    ],
    [
      0.8746346288668152,
      0.4708834232173957,
      0.11525219184933276
    ],
    [
      0.8798679338192585,
      0.46490618090935515,
      0.09846147464316538
    ],
    [
      0.8751308539709972,
      0.46837657844222963,
      0.1215292935663789
    ],
    [
      0.8695648955036491,
      0.4742672047188321,
      0.13757729113452244
    ],
    [
      0.8640701529321975,
      0.4774237569454222,
      0.15952845237087804
    ],
    [
      0.8700360486935501,
      0.4715929705896194,
      0.1436570362501359
    ],
    [
      0.8645284913295701,
      0.47434292219008484,
      0.16610021025750826
    ],
    [
      0.8587604969833746,
      0.47948775887761014,
      0.18061533131878413
    ],
    [
      0.7796244117469913,
      0.5038758563420241,
      0.37188021996840537
    ],
    [
      0.7898815455187829,
      0.48489863246244913,
      0.3754470139512442
    ],
    [
      0.7961525374071164,
      0.45597044445024953,
      0.39778397525296544
    ],
    [
      0.7802240044382,
      0.5065965265254062,
      0.3668929846846534
    ],
    [
      0.7743772492754961,
      0.5267777273471692,
      0.3504926558081748
    ],
    [
      0.7749423667442731,
      0.5258104585849765,
      0.3506960077723171
    ],
    [
      0.7700779959595402,
      0.5410255851813286,
      0.33804022884582746
    ],
    [
      0.7669663359260843,
      0.5561529854654995,
      0.3200882633179927
    ],
    [
      0.771264320490916,
      0.543508291173175,
      0.331285504306634
    ],
    [
      0.7245586074592202,
      0.4946980211072713,
      0.4798840404402979
    ],
    [
      0.7019206502236449,
      0.517595710551144,
      0.48928731968923117
    ],
    [
      0.6893226298961705,
      0.5420891182851012,
      0.4805972323577286
    ],
    [
      0.6729504271195624,
      0.5652428988444775,
      0.4771144390452778
    ],
    [
      0.6731338676305896,
      0.5624774739151491,
      0.4801144525909595
    ],
    [
      0.672805070310755,
      0.563022008882717,
      0.479937032200902
    ],
    [
      0.6683576108860809,
      0.5837087367498285,
      0.4610663885088236
    ],
    [
      0.6702587499923313,
      0.5932204823074241,
      0.4459177810198475
    ],
    [
      0.8155901433397992,
      0.3049358008820873,
      0.4917589606985986
    ],
    [
      0.8277998948422941,
      0.27579206968347647,
      0.48855508225663913
    ],
    [
      0.8080609150493842,
      0.31389588990173306,
      0.49850469192611524
    ],
    [
      0.8045644123123661,
      0.322823307080079,
      0.4984588436835462
    ],
    [
      0.7986357925137483,
      0.3508997555774957,
      0.488927635189085
    ],
    [
      0.761280839390607,
      0.40249230338063846,
      0.508381185033515
    ],
    [
      0.7544765485451597,
      0.41197186030183813,
      0.5109249690657389
    ],
    [
      0.7473502424698885,
      0.4336229280623657,
      0.5034270268259536
    ],
    [
      0.7270416441518327,
      0.4666433063504923,
      0.5036412138688418
    ],
    [
      0.7237851537649282,
      0.47454177896046135,
      0.5009442595843571
    ],
    [
      0.6919982600109625,
      0.5157566970292757,
      0.505107352561069
    ],
    [
      0.6728855129942597,
      0.5233494943763266,
      0.5228100928047344
    ],
    [
      0.663455598864891,
      0.5339977978610987,
      0.5240925683639541
    ],
    [
      0.645238606509764,
      0.5417480352841866,
      0.5386800599011085
    ],
    [
      0.6179120059439005,
      0.5845020792868885,
      0.5258726768141592
    ],
    [
      0.5906729105334324,
      0.5934606013838163,
      0.5467266477565575
    ],
    [
      0.5835237859952362,
      0.5940363531796744,
      0.5537335119701343
    ],
    [
      0.5133268955565737,
      0.6556588398468035,
      0.5537210344830634
    ],
    [
      0.5712728107838916,
      0.5903498302509373,
      0.5702056239478539
    ],
    [
      0.5549025544033293,
      0.59170121824558,
      0.5847844247612591
    ],
    [
      0.5111333438808484,
      0.6493523398678219,
      0.5631023383732011
    ],
    [
      0.5024902962196035,
      0.638620191203535,
      0.5828102209058241
    ],
    [
      0.503648654606381,
      0.6429501178887743,
      0.5770209516300024
    ],
    [
      0.550994859337591,
      0.5899736865537384,
      0.590199723956001
    ],
    [
      0.5345042113316002,
      0.5908653564170108,
      0.6043040448772313
    ],
    [
      0.532282554652202,
      0.5917875596412786,
      0.6053616821923451
    ],
    [
      0.5136353204816901,
      0.5917182169929244,
      0.6213278596943694
    ],
    [
      0.487763689301729,
      0.6270404568020608,
      0.6073770237111619
    ],
    [
      0.5110402111531167,
      0.589406326562606,
      0.6256501296991416
    ],
    [
      0.49312214619225925,
      0.5888544677046949,
      0.6403756435085274
    ],
    [
      0.4691477222455928,
      0.6232783852165098,
      0.6256392484760465
    ],
    [
      0.4735013254951135,
      0.6272414069962777,
      0.6183564603881003
    ],
    [
      0.473098140027529,
      0.5855643946104331,
      0.6582495648817474
    ],
    [
      0.4521125820879052,
      0.6142711700738666,
      0.6467342133627153
    ],
    [
      0.4593841418681118,
      0.6225903390269426,
      0.633519912828646
    ],
    [
      0.49105680237766564,
      0.586545111208276,
      0.6440714629265091
    ],
    [
      0.4702731045005,
      0.5814486790608718,
      0.6638980650685986
    ],
    [
      0.45183966775986056,
      0.5802292670054016,
      0.6776244626258952
    ],
    [
      0.43601905962124055,
      0.6056892323181338,
      0.6656034356137887
    ],
    [
      0.4414644921846468,
      0.6135957769645703,
      0.6546826136620684
    ],
    [
      0.4501133051247022,
      0.5777459625527006,
      0.6808873734354091
    ],
    [
      0.43070067111246296,
      0.5762283568721449,
      0.6945918316822492
    ],
    [
      0.41643326534986386,
      0.598772308815879,
      0.6841454945443635
    ],
    [
      0.4197358385740123,
      0.6050893822642611,
      0.6765269139418073
    ],
    [
      0.3983434670295057,
      0.5980363760586004,
      0.6954674508455514
    ],
    [
      0.42889633180956654,
      0.5733735683792679,
      0.6980620944044471
    ],
    [
      0.4093153766328113,
      0.5715866066313485,
      0.7111607930500667
    ],
    [
      0.39549385578317264,
      0.5918423927533868,
      0.7023583075451624
    ],
    [
      0.40593926114913675,
      0.5651689251137271,
      0.7181903663677809
    ],
    [
      0.3899831537703867,
      0.5638163350552315,
      0.7280276643783461
    ],
    [
      0.36531125485801563,
      0.590383340712171,
      0.7197188326586977
    ],
    [
      0.3538347406241681,
      0.5952357401252181,
      0.7214536644892807
    ],
    [
      0.3848221390441444,
      0.5521166975821996,
      0.7396479389225763
    ],
    [
      0.34967613584087026,
      0.5488613297553181,
      0.7592613783952278
    ],
    [
      0.34234958139268984,
      0.5873681305085819,
      0.7333453779653236
    ],
    [
      0.9245480905193423,
      -0.00506353458950696,
      0.3810317426862216
    ],
    [
      0.9245716495078959,
      -0.005033866952000821,
      0.3809749665132315
    ],
    [
      0.937421911698051,
      -0.0019312702412941295,
      0.34819022051692733
    ],
    [
      0.9373846192024092,
      -0.051967044224236064,
      0.34439730254075807
    ],
    [
      0.921623973983926,
      -0.05375788914193477,
      0.3843427375833698
    ],
    [
      0.9207093861893607,
      -0.05183046173018577,
      0.3867917132251497
    ],
    [
      0.9202107897807694,
      -0.005987149855421155,
      0.39137738361798724
    ],
    [
      0.9140878462243069,
      -0.0005414346350398497,
      0.40551586434262193
    ],
    [
      0.8802942354170675,
      0.25300410776030485,
      0.40133649291821516
    ],
    [
      0.8850875332110884,
      0.24132332593673422,
      0.3979737565633481
    ],
    [
      0.8757774695276691,
      0.2751160660268117,
      0.39664212343325767
    ],
    [
      0.859209169568704,
      0.33575014611074483,
      0.3860459070054645
    ],
    [
      0.8651511833021359,
      0.3304513669882312,
      0.3772470332375371
    ],
    [
      0.8745859317059359,
      0.31406935885594806,
      0.36940477242433356
    ],
    [
      0.8397469345334112,
      0.39863258036895016,
      0.36866943433126015
    ],
    [
      0.8337521925703486,
      0.4178186848039125,
      0.36094989681791717
    ],
    [
      0.8393269777650152,
      0.4022070482513215,
      0.3657317524262897
    ],
    [
      0.8234668685629879,
      0.44748539262758796,
      0.3487967026277633
    ],
    [
      0.8329610787437572,
      0.42285844711688597,
      0.35688454015259913
    ],
    [
      0.8234719047007294,
      0.4476419703174052,
      0.3485838329281842
    ],
    [
      0.8161476621526872,
      0.47441088589990144,
      0.3299049937517977
    ],
    [
      0.8186268467634225,
      0.4684505995480677,
      0.33227115664955326
    ],
    [
      0.8120246768912466,
      0.4892683837505057,
      0.3181703518271845
    ],
    [
      0.808550774792445,
      0.502586829318848,
      0.30602634458125355
    ],
    [
      0.8117585690055261,
      0.49197484387875173,
      0.31465660431107806
    ],
    [
      0.8072057564861992,
      0.5118823865368952,
      0.2939307555340805
    ],
    [
      0.9017130517266152,
      -0.1428081440617939,
      0.4080678942718972
    ],
    [
      0.9005022267644783,
      -0.1433133445967126,
      0.4105569690709439
    ],
    [
      0.8927735640753252,
      -0.1331996871671039,
      0.4303640396534391
    ],
    [
      0.8926321089681175,
      -0.1320411345911488,
      0.4310139867974273
    ],
    [
      0.8845906465986825,
      -0.12184308111881637,
      0.45017069155332445
    ],
    [
      0.884165145056472,
      -0.11884178210043862,
      0.45180596177392307
    ],
    [
      0.876979105490196,
      -0.10977682603679682,
      0.4678212233309885
    ],
    [
      0.8759613187678758,
      -0.10328741716314226,
      0.4711936730031623
    ],
    [
      0.8697543364427691,
      -0.09545167704917339,
      0.48416564478233975
    ],
    [
      0.8680721242669721,
      -0.08572949043479786,
      0.4889797966587335
    ],
    [
      0.863291912483599,
      -0.0796085056691907,
      0.4983869577602612
    ],
    [
      0.8605978274847955,
      -0.06545643374892302,
      0.5050612186748483
    ],
    [
      0.8490062806106481,
      -0.05024145402436138,
      0.5259887183022003
    ],
    [
      0.8489068291699566,
      -0.04925845260341078,
      0.5262421498091232
    ],
    [
      0.8476101857516402,
      -0.045360074068780294,
      0.5286770627618951
    ],
    [
      0.8486865149465692,
      -0.022026013969202604,
      0.5284373700415927
    ],
    [
      0.8444148590541329,
      -0.004541347122489982,
      0.535670534913861
    ],
    [
      0.8070989511360896,
      0.26026939621344486,
      0.5299538890032913
    ],
    [
      0.8044645953695506,
      0.2726347179222552,
      0.5277376482499212
    ],
    [
      0.8021191598453273,
      0.27770842465233253,
      0.5286614079788177
    ],
    [
      0.7163177668601994,
      0.4357185196845994,
      0.5450121360889851
    ],
    [
      0.733222534976377,
      0.41977037641908654,
      0.5349556479595238
    ],
    [
      0.706599552399723,
      0.4390721363197675,
      0.55491686913997
    ],
    [
      0.6949604647634905,
      0.45726261140495345,
      0.5549241899816909
    ],
    [
      0.6976896117446412,
      0.4755316866708429,
      0.5358160324547925
    ],
    [
      0.6787300162309462,
      0.4629550115756685,
      0.5700861534225438
    ],
    [
      0.6621066624637728,
      0.47712648597761,
      0.577897122245596
    ],
    [
      0.662305993572075,
      0.5021412924127765,
      0.5560619509843604
    ],
    [
      0.6703909249007225,
      0.5018058146094796,
      0.5465957667553515
    ],
    [
      0.68639939915655,
      0.4914550093677397,
      0.5360296993683111
    ],
    [
      0.6619399639706302,
      0.47710219054691094,
      0.5781081074279273
    ],
    [
      0.6370912408407381,
      0.48530778891558507,
      0.5988247664065629
    ],
    [
      0.6330734079487014,
      0.5228293471546263,
      0.570848083032679
    ],
    [
      0.6453950440445981,
      0.5223632070105413,
      0.557316711649968
    ],
    [
      0.6193322212788915,
      0.5308684227554274,
      0.5784516552028518
    ],
    [
      0.6329419703012631,
      0.4844288184106098,
      0.6039148798667369
    ],
    [
      0.6189268999662002,
      0.4955870593894592,
      0.6093627483395565
    ],
    [
      0.6130155493694546,
      0.5310844400179412,
      0.5849455135327524
    ],
    [
      0.6016575552170546,
      0.5374941156259166,
      0.5908538414174446
    ],
    [
      0.6007936629718071,
      0.5004635915676026,
      0.6233643942736661
    ],
    [
      0.5923434198528504,
      0.5377796700743582,
      0.5999352460155547
    ],
    [
      0.5804996190223972,
      0.5049021732753017,
      0.6388223444250591
    ],
    [
      0.5730066887036134,
      0.5427700648128091,
      0.6140553651292522
    ],
    [
      0.5836585122841391,
      0.5424939078497566,
      0.6041879682550501
    ],
    [
      0.5993459543968127,
      0.4999316925116221,
      0.6251821572714937
    ],
    [
      0.5781231511666336,
      0.5041362528062823,
      0.6415763872615652
    ],
    [
      0.5618579806159857,
      0.5084575265768853,
      0.6525232204952117
    ],
    [
      0.5515167629591462,
      0.5467910259051767,
      0.6299593908853406
    ],
    [
      0.5651819894126405,
      0.5468929467605391,
      0.6176385865756318
    ],
    [
      0.5563926405030216,
      0.5068109551318184,
      0.6584602382471164
    ],
    [
      0.5441801219033354,
      0.5100212029978477,
      0.6661429031505922
    ],
    [
      0.5273696332306784,
      0.5507961194186654,
      0.6469195504693601
    ],
    [
      0.5277926162877432,
      0.5511271290780021,
      0.6462923810369253
    ],
    [
      0.5432401164996691,
      0.5510187204944834,
      0.6334576114390357
    ],
    [
      0.522453013251055,
      0.5102639915198475,
      0.6831350583179917
    ],
    [
      0.5070727642174582,
      0.5502683527112413,
      0.6633867286834453
    ],
    [
      0.5078899503383228,
      0.5509124022283653,
      0.6622260364983453
    ],
    [
      0.5350656306043,
      0.507051202052853,
      0.675724684648104
    ],
    [
      0.505176779317221,
      0.5044438467972671,
      0.7002376932635483
    ],
    [
      0.4846174471454727,
      0.5467463996019677,
      0.6827988755442487
    ],
    [
      0.4883258793102554,
      0.5501605254248649,
      0.6773929670878658
    ],
    [
      0.5011349525341733,
      0.4987126584469287,
      0.7072124459123785
    ],
    [
      0.48439566429405023,
      0.5027923600814878,
      0.7159334347946136
    ],
    [
      0.46151783111689015,
      0.542086724306699,
      0.702241607206234
    ],
    [
      0.4664326856193525,
      0.5465007908289998,
      0.6955411097909282
    ],
    [
      0.445395061858428,
      0.5419719112311437,
      0.712663796125907
    ],
    [
      0.4647252761266145,
      0.49637032729916963,
      0.7332441039012568
    ],
    [
      0.4371229011027074,
      0.5353811404158492,
      0.7226967578580781
    ],
    [
      0.4118913397114678,
      0.5229463052992926,
      0.7462390274198417
    ],
    [
      0.42804312492114116,
      0.5353855933807671,
      0.7281080617656065
    ],
    [
      0.42963605292149115,
      0.43685205836210333,
      0.7902993996801688
    ],
    [
      0.39694476944274726,
      0.45125536212397205,
      0.7992518052318726
    ],
    [
      0.3954417254334027,
      0.4525818658386697,
      0.799246830772723
    ],
    [
      0.6118961266973252,
      0.5892846079240402,
      0.5275668497893146
    ],
    [
      0.4488084830526932,
      0.6633756765939278,
      0.5987517492613185
    ],
    [
      0.4491862104387146,
      0.6647248639050443,
      0.5969695165233543
    ],
    [
      0.4463572426011553,
      0.6729870081986364,
      0.5897912332116694
    ],
    [
      0.44323040921346024,
      0.6768431084798714,
      0.5877331119239187
    ],
    [
      0.44011890507983503,
      0.6871368433989424,
      0.5780469771870315
    ],
    [
      0.43182401305292195,
      0.6967911668632474,
      0.5727216527530841
    ],
    [
      0.42730924243975693,
      0.723267536757959,
      0.5424858353889395
    ],
    [
      0.3858565978534184,
      0.7348740708764594,
      0.5577407873254797
    ],
    [
      0.38583853187657746,
      0.7348883336767413,
      0.5577344926980488
    ],
    [
      0.3786459497439984,
      0.7432832008857585,
      0.5515046038098745
    ],
    [
      0.38057664509350925,
      0.7482267539233318,
      0.54343181901939
    ],
    [
      0.37084748775622367,
      0.7848691220504438,
      0.4964399279637598
    ],
    [
      0.33554165715106665,
      0.7618750032918012,
      0.5540381536279193
    ],
    [
      0.33506734997336896,
      0.7641068314936255,
      0.5512446109002757
    ],
    [
      0.31440638289580203,
      0.7938767737485947,
      0.520488515240155
    ],
    [
      0.299271939667168,
      0.8091827022619213,
      0.5056279862586187
    ],
    [
      0.24589721081911492,
      0.8235503299687827,
      0.5111745452579662
    ],
    [
      0.2444867791526866,
      0.8243877061271868,
      0.5105008568121119
    ],
    [
      0.2270320398063085,
      0.8305748373196576,
      0.5085291461782806
    ],
    [
      0.2186227275161609,
      0.8485780339698431,
      0.4817877367443783
    ],
    [
      0.18557203247973839,
      0.8551907054582001,
      0.483954417336225
    ],
    [
      0.17588000898378178,
      0.8597658918005383,
      0.47944638254583777
    ],
    [
      0.1543318360751756,
      0.8633113051345658,
      0.48049482286546813
    ],
    [
      0.08234801883133465,
      0.8556588683796651,
      0.5109468707779559
    ],
    [
      0.0592736134059925,
      0.8567498150466862,
      0.5123147403415853
    ],
    [
      0.04281013858761095,
      0.8625876765076338,
      0.5040930393997435
    ],
    [
      -0.06278065974612267,
      0.8759715103222963,
      0.4782598685500561
    ],
    [
      0.02545548898786636,
      0.8581508809639109,
      0.5127661100163039
    ],
    [
      -0.03390158846385436,
      0.8651898518541123,
      0.5002971142713962
    ],
    [
      -0.08408461910095122,
      0.8789919130020879,
      0.46936445722655434
    ],
    [
      -0.10422578333408528,
      0.8773897207767586,
      0.46832068496242835
    ],
    [
      -0.1294101571319122,
      0.8691121965660363,
      0.47738558944657444
    ],
    [
      -0.12954071403452405,
      0.8689490460660246,
      0.477647106919294
    ],
    [
      -0.15483328939271188,
      0.859919092091642,
      0.48638031164112616
    ],
    [
      -0.1689105135101554,
      0.8512888096648759,
      0.4967661431348703
    ],
    [
      -0.16316720260108414,
      0.8535086243558717,
      0.4948732081508194
    ],
    [
      -0.18092601200225944,
      0.8414347433663188,
      0.5091692752287941
    ],
    [
      -0.18162324553728829,
      0.8392039202354713,
      0.5125912376757124
    ],
    [
      -0.19250201444020582,
      0.829939658138888,
      0.5235868010986988
    ],
    [
      -0.20181262544736003,
      0.8164086650161078,
      0.5410624325312748
    ],
    [
      -0.19389926867404686,
      0.8233716142240421,
      0.5333500337468489
    ],
    [
      -0.20353008423250063,
      0.8064889352361403,
      0.5551135939192877
    ],
    [
      -0.20740053208314777,
      0.8029243437294116,
      0.5588358592094113
    ],
    [
      -0.20952855789911143,
      0.7892766632988374,
      0.5771829278457328
    ],
    [
      -0.21035554504050252,
      0.7884847328344337,
      0.577963987422854
    ],
    [
      -0.21257681499564107,
      0.7730227247745658,
      0.5977014009590532
    ],
    [
      -0.1982245885088634,
      0.7594438866607286,
      0.6196386007376704
    ],
    [
      -0.18835833034702107,
      0.7561164258570409,
      0.6267448363872307
    ],
    [
      -0.19263418638232713,
      0.7508183425673437,
      0.6317941806484496
    ],
    [
      -0.13063884234371304,
      0.6320559307452721,
      0.7638316524475941
    ],
    [
      -0.12836995924153818,
      0.6125222024725,
      0.7799600663127335
    ],
    [
      -0.17138818308331707,
      0.6542420326875618,
      0.7366094306783255
    ],
    [
      -0.15151732656007563,
      0.6496316367807721,
      0.7449974739860682
    ],
    [
      -0.1385788170874527,
      0.5746628178328409,
      0.8065721029486834
    ],
    [
      -0.12587863982476866,
      0.6101606441075227,
      0.7822138815043871
    ],
    [
      -0.44970981019358885,
      0.8696259222543413,
      -0.20374455074659686
    ],
    [
      -0.43577182450096796,
      0.8718401998779421,
      -0.2236013927682194
    ],
    [
      -0.4625581301755471,
      0.8668830005682124,
      -0.1858866308650358
    ],
    [
      -0.4506912001567096,
      0.8691925360034467,
      -0.20342511510922612
    ],
    [
      -0.46667845892497395,
      0.8649389248000031,
      -0.18463984494476257
    ],
    [
      -0.4814198547697377,
      0.8612970462197738,
      -0.16248791218603767
    ],
    [
      -0.5406202841968556,
      0.8274287563841123,
      -0.15195842004822402
    ],
    [
      -0.5376665323127804,
      0.8292361285815397,
      -0.15258487174634974
    ],
    [
      -0.5464417074126128,
      0.8244481055382771,
      -0.14726432587132035
    ],
    [
      -0.5885559918001547,
      0.7965728387267356,
      -0.1381070494904808
    ],
    [
      -0.6497267920323163,
      0.7506538018772039,
      -0.11989147360298288
    ],
    [
      -0.6348965525157577,
      0.7626729630769713,
      -0.12343548515317004
    ],
    [
      -0.6866993770731383,
      0.7138853905193029,
      -0.1371554400323451
    ],
    [
      -0.6861994833077419,
      0.7141685404197832,
      -0.13817946657468536
    ],
    [
      -0.7241387256207463,
      0.6774917433103416,
      -0.12894977240257438
    ],
    [
      -0.7535906705549499,
      0.6437466950394533,
      -0.13300862332316019
    ],
    [
      -0.737445155432943,
      0.6614840458816329,
      -0.13643130056020247
    ],
    [
      -0.7689012453815828,
      0.6169651777200962,
      -0.16776425224540897
    ],
    [
      -0.7539744151702998,
      0.6428077191707835,
      -0.13535441419864916
    ],
    [
      -0.7770888349119379,
      0.6037377679862795,
      -0.17785851163819055
    ],
    [
      -0.7699385124974448,
      0.6127684851167502,
      -0.17807153231481226
    ],
    [
      -0.7940819862475645,
      0.5776701751511725,
      -0.18902636815517715
    ],
    [
      -0.8007083538176925,
      0.5588181183505161,
      -0.21584356077898087
    ],
    [
      -0.7942308225454733,
      0.5742720865722493,
      -0.19851692900782017
    ],
    [
      -0.8055578948209812,
      0.5456359786513534,
      -0.2309931966374097
    ],
    [
      -0.8006899404968512,
      0.5583262976874244,
      -0.21718048829902403
    ],
    [
      -0.8093725895398493,
      0.5322154441604343,
      -0.24831981857811977
    ],
    [
      -0.8053781472192423,
      0.543671631466572,
      -0.2361931352096763
    ],
    [
      -0.8122508593439529,
      0.5194720957607585,
      -0.2653248635558593
    ],
    [
      -0.8090349095951757,
      0.5296368603465549,
      -0.2548476235293746
    ],
    [
      -0.8138262618769234,
      0.5070830975845267,
      -0.28381956878184883
    ],
    [
      -0.8115003353277831,
      0.5153264519177004,
      -0.2755101698972464
    ],
    [
      -0.8137251905981642,
      0.4964828142839585,
      -0.30225176477013593
    ],
    [
      -0.8125700949214074,
      0.5012357214414834,
      -0.29747704514878215
    ],
    [
      -0.8117771465238942,
      0.48846421968549947,
      -0.32003213974312067
    ],
    [
      -0.8119801420460844,
      0.4874621585494508,
      -0.3210434439528874
    ],
    [
      -0.8098305499576214,
      0.4794941872292955,
      -0.3380233790267381
    ],
    [
      -0.8013914246937308,
      0.4780324551931383,
      -0.35952295644280163
    ],
    [
      -0.792051452601867,
      0.48236864833517173,
      -0.3741323075257892
    ],
    [
      -0.8008538202991017,
      0.4474146506330902,
      -0.39806191592666085
    ],
    [
      -0.5568071266681579,
      0.7794447758274746,
      0.28710915193843595
    ],
    [
      -0.5528021305852802,
      0.7866593330308872,
      0.27491252822629697
    ],
    [
      -0.5578898536770589,
      0.7906170710724493,
      0.25235601457665224
    ],
    [
      -0.559786069618358,
      0.7870182286951434,
      0.2593103622356614
    ],
    [
      -0.5646897475501865,
      0.7909453557985142,
      0.23565002260230833
    ],
    [
      -0.5637186110894689,
      0.7930966514089097,
      0.23069249887097437
    ],
    [
      -0.5705577481177633,
      0.7932687933059792,
      0.2125758161919241
    ],
    [
      -0.5738081806691777,
      0.7916807685673419,
      0.20972775800487442
    ],
    [
      -0.5794400822062609,
      0.7913678006594188,
      0.19490047514635814
    ],
    [
      -0.5858819261581308,
      0.7880413948898397,
      0.18903208336500524
    ],
    [
      -0.5941972558459216,
      0.7868162940797638,
      0.16688241523828395
    ],
    [
      -0.5733279528903776,
      0.8059234274015925,
      0.14758891421715503
    ],
    [
      -0.5950274024153704,
      0.7947407442001388,
      0.11970605616687188
    ],
    [
      -0.5870184971281329,
      0.799963544494184,
      0.12436885265101442
    ],
    [
      -0.5984032375673418,
      0.7839102378138769,
      0.16552433150299778
    ],
    [
      -0.6160790352587077,
      0.7736236883554489,
      0.14816548562337736
    ],
    [
      -0.6316002168724651,
      0.7620084605040613,
      0.14291351289113768
    ],
    [
      -0.6120983017324125,
      0.7838578900638331,
      0.10441492805615565
    ],
    [
      -0.5997098641948674,
      0.7924412070189495,
      0.11128796972595059
    ],
    [
      -0.6453229278062683,
      0.7501943713750258,
      0.1441066410849117
    ],
    [
      -0.6300955016018742,
      0.7711590642378948,
      0.09106786757587419
    ],
    [
      -0.614590553676043,
      0.7825282446985655,
      0.0996393375186564
    ],
    [
      -0.6573297790666086,
      0.7440912380681816,
      0.11935573292642582
    ],
    [
      -0.6421097007595157,
      0.76361288911476,
      0.06775313843900031
    ],
    [
      -0.6464304699551123,
      0.7491427462122705,
      0.1446125627708409
    ],
    [
      -0.6467114932592521,
      0.7489235835052542,
      0.1444912127294831
    ],
    [
      -0.6861370312709024,
      0.7223249825803117,
      0.0863863059697833
    ],
    [
      -0.6773700604124292,
      0.731569693130583,
      0.0773019103883376
    ],
    [
      -0.6421986984455583,
      0.7635781144100887,
      0.06730003646926393
    ],
    [
      -0.6998576410493795,
      0.7098417647391229,
      0.07952327518937977
    ],
    [
      -0.7153326227026476,
      0.6934221440123617,
      0.08640005260791835
    ],
    [
      -0.7318866175217674,
      0.6765304555790238,
      0.08153846801715513
    ],
    [
      -0.7535433030348118,
      0.6509687610013146,
      0.09171784260327474
    ],
    [
      -0.7661392458729971,
      0.6378236904476536,
      0.07881367798099041
    ],
    [
      -0.7665199420312553,
      0.6374411107867333,
      0.07820491511009031
    ],
    [
      -0.770462910047095,
      0.6350396642627723,
      0.055781081513248065
    ],
    [
      -0.7999618337628656,
      0.5986746162509742,
      0.0406173408718771
    ],
    [
      -0.8016680188464393,
      0.5962545147585565,
      0.04253164926102923
    ],
    [
      -0.8310209715437495,
      0.5534467970550001,
      0.055684716790552674
    ],
    [
      -0.833228068303033,
      0.5502678978848871,
      0.05418696106392886
    ],
    [
      -0.834870129814343,
      0.5479853107542402,
      0.05199966866587411
    ],
    [
      -0.8212337657135113,
      0.5705730259483489,
      0.0046394085992171276
    ],
    [
      -0.8099502141069015,
      0.586335423646846,
      0.013835521134316648
    ],
    [
      -0.8001078636916853,
      0.598536392958231,
      0.039769243936461175
    ],
    [
      -0.8373823173473004,
      0.5443022474058631,
      0.05025851234359793
    ],
    [
      -0.842306039412969,
      0.5380926336503102,
      0.031254656928384736
    ],
    [
      -0.8328212757776227,
      0.5534988155345336,
      -0.00691258374280174
    ],
    [
      -0.8220332333452917,
      0.5694351386531342,
      0.002232967301813819
    ],
    [
      -0.8330403894364241,
      0.5531603074738387,
      -0.007575209769972429
    ],
    [
      -0.8520935720194516,
      0.5231890116957518,
      0.014484562953511844
    ],
    [
      -0.8433713292811325,
      0.5370726410480621,
      -0.01666670886033489
    ],
    [
      -0.8517771632778853,
      0.5230462332462797,
      -0.02997168672525911
    ],
    [
      -0.8475588421321015,
      0.5298296205643845,
      -0.03040694486941709
    ],
    [
      -0.8570696843806543,
      0.5150466286838087,
      0.012590726630681235
    ],
    [
      -0.8627826741959773,
      0.5055712991784046,
      0.0019283553350204004
    ],
    [
      -0.8659623817573661,
      0.5001086946144778,
      0.000668544772374511
    ],
    [
      -0.873950777841735,
      0.485770651842704,
      -0.01539193678978961
    ],
    [
      -0.8764636952752285,
      0.48008912642923834,
      -0.036411832539742756
    ],
    [
      -0.8740194060804831,
      0.48397590527288564,
      -0.04309757429380919
    ],
    [
      -0.8655056011128633,
      0.4990232046631602,
      -0.04331161102949972
    ],
    [
      -0.8973168564920604,
      0.4395174633960938,
      -0.040581503484594994
    ],
    [
      -0.898209095557682,
      0.4365676869913261,
      -0.051274509578291765
    ],
    [
      -0.883461338018321,
      0.46161348167023564,
      -0.0800565910288513
    ],
    [
      -0.8797732855439703,
      0.4693574632559125,
      -0.07551514900430635
    ],
    [
      -0.874687429107927,
      0.4813975883787268,
      -0.05637608769426064
    ],
    [
      -0.8811523372483074,
      0.471596326527571,
      -0.03416816306952875
    ],
    [
      -0.8861132456340763,
      0.45438872142813486,
      -0.09129187121944513
    ],
    [
      -0.9041112499259885,
      0.422102209092809,
      -0.06642719952126049
    ],
    [
      -0.8899226604847278,
      0.4458636449305534,
      -0.09614191845925055
    ],
    [
      -0.8919161371881524,
      0.4397380177366914,
      -0.10543282212086587
    ],
    [
      -0.9052729302824214,
      0.41949061052113296,
      -0.06714573242198868
    ],
    [
      -0.9102892370828247,
      0.4059764489009581,
      -0.0809730065449999
    ],
    [
      -0.8960703847095468,
      0.42984743429411104,
      -0.11085598259568354
    ],
    [
      -0.910873480677886,
      0.4045828185401007,
      -0.081377178249808
    ],
    [
      -0.9157632283032064,
      0.3900913122480796,
      -0.09595039237158332
    ],
    [
      -0.9158068513645893,
      0.38968164748919343,
      -0.09719066109346691
    ],
    [
      -0.8993362530879775,
      0.4178419694825543,
      -0.12885027132535387
    ],
    [
      -0.9200435971257485,
      0.3757823682227399,
      -0.11093868180586325
    ],
    [
      -0.9200626087261503,
      0.37520805611369107,
      -0.11271073884690781
    ],
    [
      -0.9064275711802809,
      0.3980822063124514,
      -0.1411368669824712
    ],
    [
      -0.8992188246851818,
      0.41731779349135734,
      -0.1313444500818555
    ],
    [
      -0.9117854405631105,
      0.37659859233773474,
      -0.16377060366980187
    ],
    [
      -0.909208018746726,
      0.3830448714636636,
      -0.1631484143105248
    ],
    [
      -0.9238395847784183,
      0.36142701873830635,
      -0.12605923894098228
    ],
    [
      -0.9232322707326951,
      0.35620717549670217,
      -0.144078528596086
    ],
    [
      -0.9140941789503395,
      0.3588873055231329,
      -0.1887636986908501
    ],
    [
      -0.9251544822398009,
      0.35060460655765147,
      -0.1454839986120827
    ],
    [
      -0.9288012167075697,
      0.3340044814263785,
      -0.1605282100742243
    ],
    [
      -0.9282190923354311,
      0.33242262801376954,
      -0.16704643967594024
    ],
    [
      -0.9152994321825729,
      0.3546700614632303,
      -0.1908824165498959
    ],
    [
      -0.9305850237966896,
      0.32019035947433394,
      -0.17745322534406455
    ],
    [
      -0.9293287214642841,
      0.3186708659956099,
      -0.18653955780790032
    ],
    [
      -0.9168909760331732,
      0.34118142343586894,
      -0.20713805630837
    ],
    [
      -0.9162849387069233,
      0.3435309210160827,
      -0.2059330410708582
    ],
    [
      -0.9176028854116711,
      0.3286120639187147,
      -0.22364940449564852
    ],
    [
      -0.9314782492579977,
      0.3065878805974047,
      -0.19583703079358333
    ],
    [
      -0.9296924424976981,
      0.3056545151692627,
      -0.2055414306637647
    ],
    [
      -0.918021315349749,
      0.32681506255575854,
      -0.2245635309888772
    ],
    [
      -0.9322726142064337,
      0.290331062607702,
      -0.21581391726620572
    ],
    [
      -0.9313806117548896,
      0.2894287948343107,
      -0.2208192219165853
    ],
    [
      -0.9183618290819054,
      0.31186275383310036,
      -0.24362506779264742
    ],
    [
      -0.9334372337972271,
      0.2746198095502888,
      -0.23082220595849043
    ],
    [
      -0.9321697997470632,
      0.273435878274635,
      -0.23725995218683485
    ],
    [
      -0.9195553204750107,
      0.2954132774045485,
      -0.2591312565461829
    ],
    [
      -0.9168584836355836,
      0.3095549575697063,
      -0.252083813898226
    ],
    [
      -0.9194654692779402,
      0.2758158275393812,
      -0.2801943612642186
    ],
    [
      -0.9189510544768603,
      0.27947376839024435,
      -0.27825055661691445
    ],
    [
      -0.9338430545293411,
      0.2586709159823995,
      -0.24703543618707052
    ],
    [
      -0.9289790342498532,
      0.2545570780516003,
      -0.2686980609123215
    ],
    [
      -0.9323233461750672,
      0.23898716051445887,
      -0.27140065454261914
    ],
    [
      -0.9249910664043178,
      0.23541042730430117,
      -0.2982841896390243
    ],
    [
      -0.9133345757000615,
      0.2632764878242155,
      -0.31065325330621335
    ],
    [
      -0.9139673195531226,
      0.2695824550293118,
      -0.3032969481040805
    ],
    [
      -0.9087429626178076,
      0.252274689133763,
      -0.33248114099159576
    ],
    [
      -0.9096938303224431,
      0.25932253942818795,
      -0.3243593001869961
    ],
    [
      -0.925356000271385,
      0.22682020922770046,
      -0.303757905983773
    ],
    [
      -0.92098553013202,
      0.2248150916358728,
      -0.3181883528041154
    ],
    [
      -0.9215786266297034,
      0.20302986791248823,
      -0.3308650898398732
    ],
    [
      -0.906523070451169,
      0.2345398282126827,
      -0.3510085351123961
    ],
    [
      -0.9048513942628407,
      0.24685789579446346,
      -0.34685030428777636
    ],
    [
      -0.9050876084308763,
      0.24827485763701268,
      -0.34521879457844945
    ],
    [
      -0.9216580492628816,
      0.2026496282028727,
      -0.3308769687031376
    ],
    [
      -0.9144260624295913,
      0.1975014179205651,
      -0.35329614527882885
    ],
    [
      -0.9036571111190915,
      0.21671006767093415,
      -0.36937862972017893
    ],
    [
      -0.8991110416674192,
      0.1983281009681507,
      -0.39021186439945105
    ],
    [
      -0.9024573097122554,
      0.2159579547951395,
      -0.372737127085053
    ],
    [
      -0.914376777650362,
      0.17910063950710722,
      -0.3630951244810176
    ],
    [
      -0.8958996923291958,
      0.18264692825858292,
      -0.4049738767897954
    ],
    [
      -0.899023592537062,
      0.19824148780053466,
      -0.3904572864941634
    ],
    [
      -0.9176495229552847,
      0.16595935816057764,
      -0.36107733861164354
    ],
    [
      -0.916247101289409,
      0.15633550326012874,
      -0.3688501861178299
    ],
    [
      -0.9153491520234631,
      0.1550967625819281,
      -0.37159241666984033
    ],
    [
      -0.8958628990801246,
      0.1826012712475667,
      -0.40507584696020443
    ],
    [
      -0.9126615386751968,
      0.13913926653991282,
      -0.3843035002829889
    ],
    [
      -0.9065622740043275,
      0.13264655323956123,
      -0.4006865798423586
    ],
    [
      -0.8949722317374703,
      0.17824323894441882,
      -0.40896705513947534
    ],
    [
      -0.9054566212933761,
      0.12824446044002225,
      -0.40460062447113365
    ],
    [
      -0.9004381470854763,
      0.12247508780479957,
      -0.4173859079323124
    ],
    [
      -0.887025068964443,
      0.16334409001480188,
      -0.4318625189639193
    ],
    [
      -0.8883938325403787,
      0.17114234600539724,
      -0.42598907932949
    ],
    [
      -0.9002475929109768,
      0.12180437745099151,
      -0.4179927811479149
    ],
    [
      -0.8917479829235657,
      0.11238219710698613,
      -0.4383557650187328
    ],
    [
      -0.8909156797226299,
      0.11240226356720623,
      -0.4400397513513212
    ],
    [
      -0.8885812427203293,
      0.11636287527924845,
      -0.44371506210894085
    ],
    [
      -0.8789986779286365,
      0.1564696724626547,
      -0.4504204322620575
    ],
    [
      -0.8784585342213055,
      0.15677127809947747,
      -0.4513683307641462
    ],
    [
      -0.8765508932119392,
      0.12288124468516176,
      -0.4653587125153852
    ],
    [
      -0.8685820073485951,
      0.1436867257662856,
      -0.4742567040631573
    ],
    [
      -0.869559043975266,
      0.14942222962576904,
      -0.4706804290965216
    ],
    [
      -0.8700882343274137,
      0.10857479979840888,
      -0.48078891140888325
    ],
    [
      -0.8678253991543498,
      0.109355647758123,
      -0.4846858971395753
    ],
    [
      -0.8582847888196674,
      0.13503312290817562,
      -0.4950891606553758
    ],
    [
      -0.8584390991959192,
      0.13566777071506814,
      -0.4946479242460262
    ],
    [
      -0.8476115808153776,
      0.1263548400264704,
      -0.5153533374972376
    ],
    [
      -0.8609965536064101,
      0.09551599681176567,
      -0.4995614366931649
    ],
    [
      -0.8582343738646818,
      0.09606609463564635,
      -0.5041875295746144
    ],
    [
      -0.8474999571423892,
      0.1259755535346867,
      -0.5156296951837411
    ],
    [
      -0.8520974092748549,
      0.08453435322929254,
      -0.5165113243978157
    ],
    [
      -0.8466839249339297,
      0.08626252236761917,
      -0.5250572430633174
    ],
    [
      -0.8361493347819899,
      0.1166306423112849,
      -0.5359585648328543
    ],
    [
      -0.8379992841060915,
      0.07040799254653209,
      -0.541109891263545
    ],
    [
      -0.8210757130643451,
      0.10824105621859867,
      -0.5604627973064397
    ],
    [
      -0.8327219239852318,
      0.11733276432365188,
      -0.541116641520573
    ],
    [
      -0.8223965907130214,
      -0.0023898184963380654,
      -0.5689096029697104
    ],
    [
      -0.8074220161675351,
      0.09907505704122684,
      -0.5815959257768492
    ],
    [
      -0.8190840093688185,
      0.10826653452584817,
      -0.5633646626280926
    ],
    [
      -0.8360467241608417,
      0.027312324048097684,
      -0.5479780214342699
    ],
    [
      -0.771185479407765,
      -0.05811325655775325,
      -0.6339525264267571
    ],
    [
      -0.7657808635843593,
      -0.003329854244396968,
      -0.6430929800881862
    ],
    [
      -0.7674753998312205,
      0.09968249295402519,
      -0.633281068130399
    ],
    [
      -0.8042906938126506,
      0.10091711303152512,
      -0.5856041462829199
    ],
    [
      -0.8214043079084605,
      -0.007023102692867349,
      -0.5703031114924662
    ],
    [
      -0.6894081524051225,
      0.7191966716277475,
      0.08644389461914136
    ],
    [
      -0.6942581256466667,
      0.7150478868429745,
      0.08192786153057982
    ],
    [
      -0.8938261886237422,
      0.25224272868151126,
      -0.3707402734498372
    ],
    [
      -0.8901477460026768,
      0.23942508598346451,
      -0.38770171329021047
    ],
    [
      -0.888854983624708,
      0.23973012317662862,
      -0.39046931521854367
    ],
    [
      -0.8847448204061772,
      0.22713761982403086,
      -0.40698292891117127
    ],
    [
      -0.8825979840752676,
      0.22736503381363662,
      -0.41149233274168984
    ],
    [
      -0.8776944487652908,
      0.2142642991128616,
      -0.42865284873924087
    ],
    [
      -0.8743727981274091,
      0.21376857544675773,
      -0.43563196169049506
    ],
    [
      -0.8576631431249261,
      0.2661235664339988,
      -0.4399911139029079
    ],
    [
      -0.8697773219692746,
      0.20360005432086242,
      -0.4494824001765795
    ],
    [
      -0.8632659048869422,
      0.20099312746447492,
      -0.46300511894770485
    ],
    [
      -0.5731984098651556,
      0.7585443241454858,
      0.30992594475894625
    ],
    [
      -0.5748389912381555,
      0.7655720581152052,
      0.28889367937971333
    ],
    [
      -0.5830601270416275,
      0.7428232841233174,
      0.32902045045627565
    ],
    [
      -0.5840130080475676,
      0.7330921702910657,
      0.3485752089422981
    ],
    [
      -0.5779408730910085,
      0.726524674472524,
      0.37168029890403914
    ],
    [
      -0.5791479484005416,
      0.7149840539747419,
      0.3916445536775493
    ],
    [
      -0.5806044665846449,
      0.7165202838794257,
      0.3866485952015176
    ],
    [
      -0.5805010214674036,
      0.7028773469800985,
      0.4110742015470191
    ],
    [
      -0.5817182543198898,
      0.7040805613871968,
      0.40727685383251266
    ],
    [
      -0.5821321091340993,
      0.6889917166244073,
      0.4317552801507327
    ],
    [
      -0.5832309425,
      0.6900068798386362,
      0.4286399112144265
    ],
    [
      -0.5845706430463838,
      0.6749152090735131,
      0.450296151271131
    ],
    [
      -0.58473889162106,
      0.6750828249033208,
      0.4498261977101006
    ],
    [
      -0.587101493911337,
      0.6596366227519234,
      0.46924552397600244
    ],
    [
      -0.5875528461424117,
      0.6589528824029639,
      0.46964108823949496
    ],
    [
      -0.5897746101553772,
      0.6441653880157875,
      0.4870491372526419
    ],
    [
      -0.5928633156932855,
      0.6269529038060921,
      0.5054138356973151
    ],
    [
      -0.5907745598155948,
      0.6425945689559079,
      0.48791150777888087
    ],
    [
      -0.5954696588156528,
      0.6096197984215587,
      0.5232395118895631
    ],
    [
      -0.5934809389129904,
      0.6259358236944813,
      0.5059493252914433
    ],
    [
      -0.5971466763649473,
      0.592016531808404,
      0.5412321802811119
    ],
    [
      -0.5974414728275388,
      0.5924066856941138,
      0.5404794217087053
    ],
    [
      -0.5955874398510824,
      0.6094165699436881,
      0.523342188027779
    ],
    [
      -0.5978278114747315,
      0.5737305143962869,
      0.5598528419843066
    ],
    [
      -0.5987587967715462,
      0.5749288555647009,
      0.5576241694257464
    ],
    [
      -0.5991979579808022,
      0.5566982832072248,
      0.5753684285966386
    ],
    [
      -0.5978396375035155,
      0.5549334033335855,
      0.5784779042403169
    ],
    [
      -0.596492431502787,
      0.5359600934887723,
      0.5974475352258133
    ],
    [
      -0.598958226429386,
      0.5390909610692158,
      0.5921401681072089
    ],
    [
      -0.5939262515448619,
      0.5158424854488135,
      0.6173800595515375
    ],
    [
      -0.5974248559196481,
      0.5203412315937043,
      0.6101873025825225
    ],
    [
      -0.5946552029694209,
      0.5016534235094264,
      0.6282746471589227
    ],
    [
      -0.5909268428334205,
      0.49644379391982657,
      0.6358844438240449
    ],
    [
      -0.5855402728790762,
      0.4757693349130994,
      0.6563429963007482
    ],
    [
      -0.5914998917082857,
      0.4839530510902319,
      0.644916523628866
    ],
    [
      -0.5784472447770477,
      0.45572358366330334,
      0.6765462292429975
    ],
    [
      -0.5859191300557585,
      0.4659769138666372,
      0.6629964470327333
    ],
    [
      -0.5701215194923425,
      0.4355687424569726,
      0.6965926525640318
    ],
    [
      -0.5787323205372674,
      0.4473889253417536,
      0.6818445942053807
    ],
    [
      -0.5600398842570148,
      0.4144199833286074,
      0.7173642069822734
    ],
    [
      -0.5703568703887103,
      0.4284311331271361,
      0.7008136732169216
    ],
    [
      -0.5484083941624297,
      0.3939788760097233,
      0.7375831332604481
    ],
    [
      -0.5601863468816497,
      0.409875363362864,
      0.7198565435387472
    ],
    [
      -0.5352429265826713,
      0.3722468830666516,
      0.7582527728867068
    ],
    [
      -0.5485690978051964,
      0.3899899002886764,
      0.7395808425087964
    ],
    [
      -0.5207689085858986,
      0.34982808562794354,
      0.7787297697893282
    ],
    [
      -0.5353695561157185,
      0.36961629508279176,
      0.7594492957358833
    ],
    [
      -0.5040964940147828,
      0.3274345068205716,
      0.7991704251692332
    ],
    [
      -0.5052175214015517,
      0.3275839287802527,
      0.7984009178813405
    ],
    [
      -0.52080034617432,
      0.3492610814402722,
      0.7789632189108032
    ],
    [
      -0.48831217718436243,
      0.30469793539592854,
      0.8177471404896054
    ],
    [
      -0.48583836711283873,
      0.30436314132466324,
      0.8193437369285943
    ],
    [
      -0.46509801112819854,
      0.2804624941017916,
      0.8396574476813724
    ],
    [
      -0.4706092937848742,
      0.28113528001154564,
      0.8363550961978601
    ],
    [
      -0.44176709500060485,
      0.2555073261183566,
      0.8599754880661276
    ],
    [
      -0.45060930246384767,
      0.2566827528484752,
      0.8550235206841817
    ],
    [
      -0.41341648751553395,
      0.23020520256427204,
      0.880961050536663
    ],
    [
      -0.42910310677477587,
      0.23191696610305984,
      0.8729748247170633
    ],
    [
      -0.3802098535959861,
      0.20464808322788652,
      0.9019754039105894
    ],
    [
      -0.4025763579346301,
      0.20676611750912544,
      0.891728685577789
    ],
    [
      -0.28753053489214897,
      0.18084696434233985,
      0.9405426981231608
    ],
    [
      -0.29527522124183436,
      0.1625817051577714,
      0.9414774202648608
    ],
    [
      -0.3234861694040264,
      0.14489105167539312,
      0.9350739443213613
    ],
    [
      -0.34555642506412426,
      0.14338423241892106,
      0.9273789511254497
    ],
    [
      -0.3508407662312164,
      0.14777737724341525,
      0.9247013591021429
    ],
    [
      -0.3663426381630498,
      0.16863859212912852,
      0.9150705419302068
    ],
    [
      -0.41580854231441466,
      0.835513581767431,
      -0.3591939738087488
    ],
    [
      -0.414763886581691,
      0.8293419610415655,
      -0.3743832662438062
    ],
    [
      -0.39900867554867164,
      0.8308745850605411,
      -0.3878653126245867
    ],
    [
      -0.4204287815708939,
      0.8420585439946864,
      -0.3379009442312383
    ],
    [
      -0.4194692389966723,
      0.83626994885833,
      -0.3531262241352784
    ],
    [
      -0.42605854593771486,
      0.8471612664859531,
      -0.3174774070691584
    ],
    [
      -0.4253489235311451,
      0.8429204860604227,
      -0.3294895255247986
    ],
    [
      -0.433631822550038,
      0.8503241495024244,
      -0.29818162794664405
    ],
    [
      -0.4332076884039859,
      0.8481384130127176,
      -0.30494643969055246
    ],
    [
      -0.44212414387606164,
      0.8524148351023578,
      -0.27913292586020655
    ],
    [
      -0.4419404771505558,
      0.8511694766448257,
      -0.2831945209288353
    ],
    [
      -0.4528895943976619,
      0.8532163531402691,
      -0.25867522111779623
    ],
    [
      -0.4528742677275791,
      0.8530911769847659,
      -0.2591145333263955
    ],
    [
      -0.4631591220463538,
      0.85347081568053,
      -0.2388957815593689
    ],
    [
      -0.46615687719891047,
      0.8524718183911174,
      -0.23662114167821455
    ],
    [
      -0.47363793074793487,
      0.8523033898251788,
      -0.2219144931033657
    ],
    [
      -0.48855295399647114,
      0.846792383417338,
      -0.21037744776402745
    ],
    [
      -0.4970237902421029,
      0.8423781022443416,
      -0.2082462119525721
    ],
    [
      -0.4990797949663476,
      0.8443843755511575,
      -0.19476751418403973
    ],
    [
      -0.5114398659894736,
      0.84114734981518,
      -0.17578509429291342
    ],
    [
      -0.5244391567407116,
      0.8336750817720054,
      -0.17305903301917347
    ],
    [
      -0.31760771133116805,
      0.9017495560475791,
      -0.2932116639408659
    ],
    [
      -0.3167635393608605,
      0.9031489068599929,
      -0.28979805411558635
    ],
    [
      -0.32189145366525124,
      0.9073696815286214,
      -0.27030751580361156
    ],
    [
      -0.3212320234464548,
      0.9084805416479195,
      -0.26734452034705947
    ],
    [
      -0.32657641091661643,
      0.9125678641975613,
      -0.24610514230044536
    ],
    [
      0.4526067729901559,
      0.8866051218923193,
      -0.09528098906782628
    ],
    [
      0.4280787161244466,
      0.8929893772124846,
      -0.13899131263105793
    ],
    [
      0.435256485050847,
      0.8929473627660482,
      -0.11487732391704421
    ],
    [
      0.3991025400435107,
      0.904756189431404,
      -0.14877298214522375
    ],
    [
      0.42481666366765014,
      0.9020823265045937,
      -0.07601498851112384
    ],
    [
      0.4029060562701669,
      0.9133786723835275,
      -0.0583618938668522
    ],
    [
      0.15393055985500342,
      0.8876159529964806,
      -0.43410056752885606
    ],
    [
      0.18291038665443102,
      0.868692067950009,
      -0.460345393736772
    ],
    [
      0.3591419710267785,
      0.8088382808532739,
      -0.46561537783166157
    ],
    [
      0.3654662529199604,
      0.8086589546548454,
      -0.46098276869442334
    ],
    [
      0.3621197993619683,
      0.8208991745744256,
      -0.44158101871918654
    ],
    [
      0.3510665256357642,
      0.8340420740439375,
      -0.4255891367299224
    ],
    [
      0.3422076867544107,
      0.8027658174061799,
      -0.48832462720037273
    ],
    [
      0.20554264203793043,
      0.8502740653894811,
      -0.4845474548794077
    ],
    [
      0.22314663528458115,
      0.8318778350774547,
      -0.5081189296493658
    ],
    [
      0.3400531424067146,
      0.7896639153705289,
      -0.5106806840884086
    ],
    [
      0.34289036882397966,
      0.7853293913758334,
      -0.5154453821783822
    ],
    [
      0.2356293537738223,
      0.8137602443907719,
      -0.5312937721159566
    ],
    [
      0.34205915941154824,
      0.7739269347839437,
      -0.5329471184635436
    ],
    [
      0.3433942245465582,
      0.7714651541489296,
      -0.5356509334277654
    ],
    [
      0.24275376246774322,
      0.7962368697525583,
      -0.554145701106128
    ],
    [
      0.3418666714809361,
      0.7582090014001708,
      -0.5551993237804792
    ],
    [
      0.244253820777469,
      0.7797108793948239,
      -0.5765336205191841
    ],
    [
      0.34134732066805645,
      0.7418271683614618,
      -0.5772126635422635
    ],
    [
      0.34317887183965184,
      0.7550551300038624,
      -0.5586770199119651
    ],
    [
      0.3424901707956111,
      0.7382610030080105,
      -0.5810948066761563
    ],
    [
      0.4814957518786004,
      -0.8018172108319908,
      0.35390818207053115
    ],
    [
      0.4837830651880997,
      -0.8008559187875146,
      0.35296422365476754
    ],
    [
      0.4910459994981816,
      -0.804757532709316,
      0.33352532126428736
    ],
    [
      0.5166621300348649,
      -0.800583679670315,
      0.30352267663780075
    ],
    [
      0.5211426842428067,
      -0.7962738026370133,
      0.3071780166193426
    ],
    [
      0.5476119411166711,
      -0.7789948483083856,
      0.3054311514162019
    ],
    [
      0.56339601939281,
      -0.7654558322752947,
      0.3109056033076155
    ],
    [
      0.5584306846389293,
      -0.7679599563519567,
      0.3136760684107053
    ],
    [
      0.5974956178501031,
      -0.7513096107965669,
      0.2802371413189816
    ],
    [
      0.6190216713751487,
      -0.7350847450668733,
      0.2765186936499727
    ],
    [
      0.6385312517627795,
      -0.71372233719997,
      0.2878858556860171
    ],
    [
      0.6449983168864271,
      -0.7104419632414425,
      0.28151267836337557
    ],
    [
      0.6533162833377824,
      -0.7123189217999465,
      0.2564753157157005
    ],
    [
      0.6830466906980807,
      -0.6864125320270194,
      0.24956973815480243
    ],
    [
      0.6862222903251423,
      -0.6844771465715869,
      0.24615036884419736
    ],
    [
      0.794012027815822,
      -0.5167503610622058,
      0.32017801927347583
    ],
    [
      0.7930791989406752,
      -0.5264484649780621,
      0.3063941871672161
    ],
    [
      0.7832117868531359,
      -0.5183652600974112,
      0.3433318424767227
    ],
    [
      0.776390400928044,
      -0.5236875751720614,
      0.3506697434299081
    ],
    [
      0.7767895006126077,
      -0.5131376163951114,
      0.36508609721319046
    ],
    [
      0.7770686408976807,
      -0.5125018365605664,
      0.3653849953890798
    ],
    [
      0.7788412764930707,
      -0.49422178663188027,
      0.38620084366691443
    ],
    [
      0.7710443044404929,
      -0.49656475221150015,
      0.398640348498503
    ],
    [
      0.7721453489952768,
      -0.4863706887136444,
      0.40894389980188894
    ],
    [
      0.7566673720775439,
      -0.49056674280936685,
      0.43220221989558594
    ],
    [
      0.7550290328730209,
      -0.4919786248110862,
      0.4334607159222428
    ],
    [
      0.7474635518685399,
      -0.4856316703918973,
      0.45327708892072
    ],
    [
      0.7474472167565221,
      -0.48525139575437753,
      0.4537110766571134
    ],
    [
      0.7385506740863945,
      -0.477640771999071,
      0.47581739641448983
    ],
    [
      0.7385396188077311,
      -0.4774041084936034,
      0.4760719994336561
    ],
    [
      0.7289351795498261,
      -0.4692815935373075,
      0.49842581191361685
    ],
    [
      0.7278126781496398,
      -0.46954660964230677,
      0.4998146525443847
    ],
    [
      0.7186799753878592,
      -0.4618946773298916,
      0.5197618685810084
    ],
    [
      0.7166050475130995,
      -0.46237110831442857,
      0.5221974378286773
    ],
    [
      0.7069131515832406,
      -0.4542740996325132,
      0.5421335984069975
    ],
    [
      0.7047223101541318,
      -0.45476628972422717,
      0.544567798627025
    ],
    [
      0.6944470103558761,
      -0.4461974716123224,
      0.564491954003382
    ],
    [
      0.6921309493634653,
      -0.44671150809552945,
      0.5669246664842216
    ],
    [
      0.6806351189620028,
      -0.437134268097412,
      0.587919608867165
    ],
    [
      0.6793108494229354,
      -0.43739534047716344,
      0.5892555353877944
    ],
    [
      0.6663225310488147,
      -0.4266328723787333,
      0.6115543122426438
    ],
    [
      0.6648894320516927,
      -0.41539043031931294,
      0.6207840474312413
    ],
    [
      0.6288652723346955,
      -0.4216480784105269,
      0.6532544429425027
    ],
    [
      0.62221012233874,
      -0.42542074169808564,
      0.6571695033948707
    ],
    [
      0.6190081123029544,
      -0.398272537922528,
      0.6769105867394021
    ],
    [
      0.6030122324943927,
      -0.3843077244710356,
      0.6990592395312596
    ],
    [
      0.5941925466501861,
      -0.38529863890937505,
      0.7060312856807052
    ],
    [
      0.5814976130810705,
      -0.37645518817331314,
      0.7212087196355941
    ],
    [
      0.5746756968761979,
      -0.37687641201027283,
      0.7264378937597621
    ],
    [
      0.5544859670267965,
      -0.3646777858635423,
      0.7480343741219535
    ],
    [
      0.5517021832312503,
      -0.3524877743843891,
      0.755894880209816
    ],
    [
      0.5534925911087017,
      -0.3310784744045458,
      0.7642205148867268
    ],
    [
      0.2679516266683635,
      -0.8175339670610262,
      0.5097451701264454
    ],
    [
      0.2708221829590998,
      -0.8178242823879694,
      0.5077585925948183
    ],
    [
      0.2810186639444696,
      -0.8266357101599902,
      0.48754683180506275
    ],
    [
      0.28056758080444183,
      -0.833283539766133,
      0.4763616010515188
    ],
    [
      0.24664012410434047,
      -0.8446016398447289,
      0.4752017667826902
    ],
    [
      0.240953111818761,
      -0.8364819925629736,
      0.49217829495288895
    ],
    [
      0.26011811769241855,
      -0.8208443122966242,
      0.5084812482466144
    ],
    [
      0.2874852131272124,
      -0.8390916682293094,
      0.4618196883431409
    ],
    [
      0.24943654802990134,
      -0.8582684330391512,
      0.44850496692394226
    ],
    [
      0.2430841986673626,
      -0.8482631108930692,
      0.47048885965159576
    ],
    [
      0.2884504392815343,
      -0.8392465144937235,
      0.4609356050343977
    ],
    [
      0.29585889941540844,
      -0.8454037337828832,
      0.4447021908453601
    ],
    [
      0.30492917600133407,
      -0.8464577018833361,
      0.43649462373038306
    ],
    [
      0.3083421051687683,
      -0.8492346606296598,
      0.42863228689089505
    ],
    [
      0.3213473985726218,
      -0.8504066873174962,
      0.4165865043376834
    ],
    [
      0.3304351346587629,
      -0.8485213215217665,
      0.4133088296976005
    ],
    [
      0.3370017895908988,
      -0.8489094852793282,
      0.40716394685104135
    ],
    [
      0.3559064293302831,
      -0.8454952204372507,
      0.3980809538010241
    ],
    [
      0.35241434197914695,
      -0.8453547286114074,
      0.40147168565384356
    ],
    [
      0.37629135010820236,
      -0.8402953703471185,
      0.3902672294812173
    ],
    [
      0.3983678273139417,
      -0.829352823679609,
      0.3917613661603565
    ],
    [
      0.8401655969321272,
      -0.3161557183704985,
      0.4406442232383359
    ],
    [
      0.8309458493042885,
      -0.30852431695570737,
      0.46297056209978266
    ],
    [
      0.8325224961083814,
      -0.3081010195430234,
      0.4604129181832538
    ],
    [
      0.8216613160074715,
      -0.30067097737874465,
      0.484220657488898
    ],
    [
      0.8227972104723877,
      -0.30040083382457056,
      0.48245630836000053
    ],
    [
      0.8120756148652122,
      -0.2917519970367022,
      0.5053849700637956
    ],
    [
      0.812428834658369,
      -0.29167658363182064,
      0.5048605343820352
    ],
    [
      0.8019087031454454,
      -0.28205454065564894,
      0.526676055953867
    ],
    [
      0.7911722836936405,
      -0.2711709653346425,
      0.548190409506102
    ],
    [
      0.8017569638804308,
      -0.2811408976938262,
      0.5273950763072623
    ],
    [
      0.7909662943009645,
      -0.2700506575178587,
      0.5490400382977293
    ],
    [
      0.7798592477263295,
      -0.25961187628759785,
      0.5695798692248142
    ],
    [
      0.7678879581817956,
      -0.24830695518057627,
      0.590501261377437
    ],
    [
      0.7798291598113682,
      -0.2594648896326973,
      0.5696880309044483
    ],
    [
      0.7549846155949151,
      -0.2363173264505309,
      0.6116799419911293
    ],
    [
      0.7549996697569531,
      -0.23631588051600436,
      0.611661919104694
    ],
    [
      0.7678685903093254,
      -0.24821700912783218,
      0.5905642593283165
    ],
    [
      0.7415632626923145,
      -0.22397092211945588,
      0.6323930371771103
    ],
    [
      0.7404807894711589,
      -0.22406456880156936,
      0.6336270744151768
    ],
    [
      0.7245248629413354,
      -0.21226395331201353,
      0.6557497518903033
    ],
    [
      0.7274791426663418,
      -0.21203667341105642,
      0.6525446698228538
    ],
    [
      0.7076883970104672,
      -0.2006166928187234,
      0.6774437801760628
    ],
    [
      0.7117478527721375,
      -0.20038428409214099,
      0.6732467101762413
    ],
    [
      0.68968670300302,
      -0.18870195322089034,
      0.6990878518122345
    ],
    [
      0.6947813115494659,
      -0.188525578827825,
      0.694072788149224
    ],
    [
      0.6691072671270846,
      -0.17707921654514788,
      0.7217606363230686
    ],
    [
      0.677194224772698,
      -0.17685337149445524,
      0.7142344621519946
    ],
    [
      0.6472327257006928,
      -0.16661277214737336,
      0.7438615347895192
    ],
    [
      0.6579123559148706,
      -0.16636336031974366,
      0.7344893220991492
    ],
    [
      0.6226490545304753,
      -0.15679782138437848,
      0.7666306790765797
    ],
    [
      0.6366268159619352,
      -0.15631847055917145,
      0.7551627857357709
    ],
    [
      0.5960232314234641,
      -0.14822827975740485,
      0.7891670828688259
    ],
    [
      0.613119917690344,
      -0.14740816723330652,
      0.7761151968389121
    ],
    [
      0.5547982920688648,
      -0.14160927991426295,
      0.8198449042103234
    ],
    [
      0.555954893667333,
      -0.1407232214115444,
      0.819213727401404
    ],
    [
      0.5868099582821334,
      -0.1389030774212002,
      0.7977217609817604
    ],
    [
      0.09869070262475298,
      -0.9165333048770166,
      0.3875910812527119
    ],
    [
      0.12463080639886813,
      -0.9078891084957039,
      0.400255579313073
    ],
    [
      0.13288351545456362,
      -0.9241838618247226,
      0.35808680632380047
    ],
    [
      0.08889610412425601,
      -0.9294342329227506,
      0.35811937861951515
    ],
    [
      0.0875828632134803,
      -0.9260499271566377,
      0.3670977723774891
    ],
    [
      0.08038429814555259,
      -0.9371105585904349,
      0.33965006343289583
    ],
    [
      0.09809427675994688,
      -0.9442371742914012,
      0.3143146060130409
    ],
    [
      0.0800210137414971,
      -0.9467302255296012,
      0.31192710274750685
    ],
    [
      0.13862880474765382,
      -0.9416007179551938,
      0.30687154061675465
    ],
    [
      0.1660531681638771,
      -0.9505142691551466,
      0.2625813578211459
    ],
    [
      0.2076885823852414,
      -0.9394436942725098,
      0.27260043660718525
    ],
    [
      0.200125156632647,
      -0.9440964100926398,
      0.2619768885473463
    ],
    [
      0.18048232559029762,
      -0.9491093732569436,
      0.25810371509400953
    ],
    [
      0.16746509382726524,
      -0.951400812630459,
      0.2584413590653162
    ],
    [
      0.24301910214701952,
      -0.9278354225073389,
      0.28295431562760176
    ],
    [
      0.2651970988793456,
      -0.9222025645496094,
      0.28144791469133673
    ],
    [
      0.25495284350664205,
      -0.9260428427616019,
      0.27828708370653654
    ],
    [
      0.29734875130877997,
      -0.911877460702154,
      0.2829544429029183
    ],
    [
      0.27699245750615004,
      -0.920217257443308,
      0.27654181887776075
    ],
    [
      0.328171732317111,
      -0.9062697092270219,
      0.2664179578135743
    ],
    [
      0.2998932331134461,
      -0.9120804811345843,
      0.2795947865502316
    ],
    [
      0.33143461174815514,
      -0.9064148213950445,
      0.26184588919961904
    ],
    [
      0.3648688939923622,
      -0.890448263217875,
      0.2719790078830727
    ],
    [
      0.41088257448040866,
      -0.876781736544644,
      0.24985855288564748
    ],
    [
      0.39413547418917044,
      -0.8858036374536368,
      0.24496763839246988
    ],
    [
      0.43105649106042376,
      -0.8691117970770955,
      0.24255924162170395
    ],
    [
      0.4265586774201376,
      -0.8716405346196865,
      0.2414342004055976
    ],
    [
      0.4608838703420854,
      -0.8554338169463702,
      0.23626054025813087
    ],
    [
      0.4473620933216301,
      -0.8632444888155829,
      0.23382923253607987
    ],
    [
      0.4877172989205669,
      -0.8456654639003947,
      0.21675276122752535
    ],
    [
      0.4742690031966075,
      -0.8536717265827125,
      0.2152057058727458
    ],
    [
      0.5174386649492041,
      -0.829676685483844,
      0.209508533430331
    ],
    [
      0.5034619366395143,
      -0.8386149503374077,
      0.20796885205668825
    ],
    [
      0.5431582021986315,
      -0.8179620097573647,
      0.1895186481010334
    ],
    [
      0.5224794560987844,
      -0.8284548683665787,
      0.20168725550820774
    ],
    [
      0.5611573030205549,
      -0.8075382902186016,
      0.18161605407428819
    ],
    [
      0.5486065970374044,
      -0.8163478380326127,
      0.18057410951329178
    ],
    [
      0.588734558466838,
      -0.7897539668423048,
      0.17227968981775277
    ],
    [
      0.5773905106086311,
      -0.7982368471022983,
      0.1715754475071719
    ],
    [
      0.60984785938668,
      -0.779957705451682,
      0.1405402650774194
    ],
    [
      0.6074882690761009,
      -0.7820095648404493,
      0.13935222794406302
    ],
    [
      0.6290348859583356,
      -0.7645116501831742,
      0.14084405909225858
    ],
    [
      0.6549012859309802,
      -0.7443507200398953,
      0.1305615229002713
    ],
    [
      0.644119713136237,
      -0.75370550201538,
      0.1305289675935414
    ],
    [
      0.6767795874230613,
      -0.7280100451215712,
      0.10941098779171507
    ],
    [
      0.6664051884701233,
      -0.7374782837387874,
      0.1096809272106684
    ],
    [
      0.6918709041224556,
      -0.7153097426967318,
      0.09821722879368587
    ],
    [
      0.691936470572312,
      -0.715263129995665,
      0.09809472748693769
    ],
    [
      0.7058103439324406,
      -0.7029753139862608,
      0.08750695014619096
    ],
    [
      0.7199893148584738,
      -0.689842592791401,
      0.07571382740598058
    ],
    [
      0.706391514706791,
      -0.7025274488793073,
      0.08640724229703015
    ],
    [
      0.7208701880800987,
      -0.6891062065463314,
      0.07401897078916916
    ],
    [
      0.7330541023383886,
      -0.677142344583489,
      0.06410872184683344
    ],
    [
      0.7542026684931967,
      -0.6549034359147213,
      0.047747507420111954
    ],
    [
      0.7487588722437815,
      -0.6610389685325115,
      0.04886341492050948
    ],
    [
      0.7347756959322708,
      -0.6755872493026557,
      0.06071692718606956
    ],
    [
      0.7714556366517231,
      -0.6358119558997576,
      0.02448177716606981
    ],
    [
      0.7612682708667773,
      -0.6475504931462285,
      0.033896586813178274
    ],
    [
      0.7888783161668106,
      -0.6139061864221688,
      0.028110434973634836
    ],
    [
      0.7720907537378112,
      -0.6350876996758589,
      0.023226745639556744
    ],
    [
      0.8001248545778381,
      -0.5996258375548124,
      0.015782015824454102
    ],
    [
      0.8079979775637589,
      -0.5891834372015092,
      -0.0014647799461370787
    ],
    [
      0.8024567615643163,
      -0.5967098413955408,
      -0.0007148436321477835
    ],
    [
      0.8178627176789774,
      -0.5752356593339569,
      -0.01430074338574701
    ],
    [
      0.8253019120690459,
      -0.5637955864369786,
      -0.03180079636361916
    ],
    [
      0.8192939677016239,
      -0.5729092354500357,
      -0.02307384718216932
    ],
    [
      0.8304325887989618,
      -0.5550239041611941,
      -0.04827195117581388
    ],
    [
      0.8271412527885594,
      -0.5603588412033929,
      -0.04284060014242624
    ],
    [
      0.86337911775589,
      -0.5027105826173873,
      -0.04311112556577385
    ],
    [
      0.833064609488964,
      -0.5493138472558373,
      -0.06525069831036763
    ],
    [
      0.8663996843439141,
      -0.4949691987976624,
      -0.06600817532977382
    ],
    [
      0.8663842617678978,
      -0.49493669190433115,
      -0.06645285522603135
    ],
    [
      0.8301708783304744,
      -0.5504686840239194,
      -0.08832066961353413
    ],
    [
      0.8682947713220834,
      -0.48897073139355024,
      -0.08349738879262833
    ],
    [
      0.8644344551626109,
      -0.4940188358958142,
      -0.09326554834377349
    ],
    [
      0.8302386303642082,
      -0.5469801466949518,
      -0.10731512368968625
    ],
    [
      0.8258865887258242,
      -0.5547415947368501,
      -0.10086181453670946
    ],
    [
      0.8571915574383292,
      -0.49848923973453135,
      -0.12934879870080213
    ],
    [
      0.8478817884647513,
      -0.5092347877775951,
      -0.14756830183654757
    ],
    [
      0.8450511690651271,
      -0.5129817194083672,
      -0.15079216562705497
    ],
    [
      0.8423268790193817,
      -0.5178028304780385,
      -0.1495515216585893
    ],
    [
      0.8708741070743939,
      -0.4839879560166028,
      -0.08563847300278109
    ],
    [
      0.878174329350706,
      -0.467651103982665,
      -0.1005598936616005
    ],
    [
      0.8796543152695516,
      -0.4602542559636151,
      -0.11989289176191979
    ],
    [
      0.8772428501200817,
      -0.4584887588430536,
      -0.14224289060530276
    ],
    [
      0.8768621349230687,
      -0.46230911310179396,
      -0.13184490995556383
    ],
    [
      0.8734902472526132,
      -0.45023524792442426,
      -0.1852107164313157
    ],
    [
      0.8733731547163806,
      -0.4507685128946104,
      -0.18446430658406146
    ],
    [
      0.8738091157152554,
      -0.46043667016060896,
      -0.1563831898393615
    ],
    [
      0.4664718091703944,
      -0.5045380811927281,
      -0.7265296799688635
    ],
    [
      0.4714955150347699,
      -0.5045146190086773,
      -0.7232959135157797
    ],
    [
      0.44804306526349474,
      -0.4913030197080867,
      -0.7469128158593927
    ],
    [
      0.48548192086597963,
      -0.5146688159249534,
      -0.706698885259263
    ],
    [
      0.4925693688331753,
      -0.5146431103795918,
      -0.7017961853886828
    ],
    [
      0.5147403675098645,
      -0.5224689449021644,
      -0.679756247245017
    ],
    [
      0.5032641237462046,
      -0.5225511210461825,
      -0.68823364320799
    ],
    [
      0.5224179571006402,
      -0.5282824229090656,
      -0.6693258995019696
    ],
    [
      0.5348130658329889,
      -0.5281770521511497,
      -0.6595483198335362
    ],
    [
      0.5410236131562529,
      -0.5331205661853379,
      -0.6504428583031548
    ],
    [
      0.5544699753915175,
      -0.5329669965294052,
      -0.6391472655028377
    ],
    [
      0.5746549494501182,
      -0.5367739001251084,
      -0.6177746103693177
    ],
    [
      0.5591933841892895,
      -0.5370124631632052,
      -0.6316014356271816
    ],
    [
      0.5941393819047894,
      -0.5391412671391714,
      -0.5969297185911951
    ],
    [
      0.5776991093478671,
      -0.5394911910102675,
      -0.6125463197840667
    ],
    [
      0.5956833346375379,
      -0.5404964369514964,
      -0.5941590414003982
    ],
    [
      0.6121874083635401,
      -0.5400052216607997,
      -0.5775992881056925
    ],
    [
      0.6293823578930695,
      -0.5402499050766049,
      -0.5585766622744631
    ],
    [
      0.6131247506531697,
      -0.5408419131296945,
      -0.575819472698432
    ],
    [
      0.629973116353307,
      -0.5408203074465326,
      -0.5573573967622037
    ],
    [
      0.6464163954002236,
      -0.5401720442859329,
      -0.5388506345266173
    ],
    [
      0.6476670492405592,
      -0.5394435511785214,
      -0.538078106244747
    ],
    [
      0.6625106712642517,
      -0.5387755033299327,
      -0.5203850184935844
    ],
    [
      0.6650563631948494,
      -0.5372102688642741,
      -0.5187534682301554
    ],
    [
      0.6786237688885285,
      -0.5365260253838604,
      -0.5016070218660482
    ],
    [
      0.682405437097108,
      -0.5340808695076881,
      -0.49907959710472727
    ],
    [
      0.6944929366126985,
      -0.5332711298163937,
      -0.4830129015869218
    ],
    [
      0.6986274584692896,
      -0.5305006887216713,
      -0.4800923802129891
    ],
    [
      0.7137823235787213,
      -0.5267990186589683,
      -0.4615166177793704
    ],
    [
      0.7098659656296779,
      -0.5295122275968663,
      -0.4644427969794013
    ],
    [
      0.7248215570005762,
      -0.5256351635905234,
      -0.4453553472278335
    ],
    [
      0.729499230581329,
      -0.5222669440212936,
      -0.44166515796914274
    ],
    [
      0.7390831104895016,
      -0.5209336485994636,
      -0.4270647369498138
    ],
    [
      0.7437929885201654,
      -0.517433347386639,
      -0.4231249475515464
    ],
    [
      0.7530609908121102,
      -0.5158959717132929,
      -0.40835094035287844
    ],
    [
      0.7579216632856132,
      -0.512144295479723,
      -0.4040581306321504
    ],
    [
      0.7670232595463938,
      -0.5103566364524361,
      -0.3888591299478274
    ],
    [
      0.7703536033671226,
      -0.5077065686155324,
      -0.3857322464662912
    ],
    [
      0.7798311067871152,
      -0.5056028627986064,
      -0.3690923868315853
    ],
    [
      0.7826567523212701,
      -0.5032602043321576,
      -0.3663025727202542
    ],
    [
      0.7918290329655285,
      -0.5009776957574762,
      -0.34932525088576893
    ],
    [
      0.794346521257482,
      -0.49879102715220563,
      -0.3467291672164089
    ],
    [
      0.8034141483325151,
      -0.4962953631807941,
      -0.32896294433322276
    ],
    [
      0.805324362919498,
      -0.4945516198939196,
      -0.32691186235529085
    ],
    [
      0.8141803869497114,
      -0.4918625411810103,
      -0.3085150532621985
    ],
    [
      0.816470462127999,
      -0.48964967406972837,
      -0.30597251699441985
    ],
    [
      0.824435505070884,
      -0.4869453273069884,
      -0.28842736727364526
    ],
    [
      0.8269731189595424,
      -0.4843608471853978,
      -0.28549961511737665
    ],
    [
      0.8347869889582742,
      -0.4813932993243305,
      -0.2671912693776008
    ],
    [
      0.8370121619853352,
      -0.4790249870124165,
      -0.2644724985823463
    ],
    [
      0.8442385972797722,
      -0.4758849148417248,
      -0.2465658911714409
    ],
    [
      0.8461132968391885,
      -0.4738128687384923,
      -0.24411811552959298
    ],
    [
      0.8536054241096562,
      -0.4697305401328753,
      -0.22519102912205757
    ],
    [
      0.853006721759571,
      -0.4704205141699236,
      -0.22601785876583871
    ],
    [
      0.8614328911077818,
      -0.46540240027124574,
      -0.20330759931554865
    ],
    [
      0.8093860855212641,
      -0.3353987432205113,
      -0.48208074801911194
    ],
    [
      0.8065535666577794,
      -0.3353255736868568,
      -0.4868553211614258
    ],
    [
      0.8230603951457883,
      -0.3261548389351189,
      -0.4649673181866284
    ],
    [
      0.8209971518426042,
      -0.32613964649952676,
      -0.4686113609885013
    ],
    [
      0.842737244631749,
      -0.30954009088810414,
      -0.44043032212084543
    ],
    [
      0.8534554065956579,
      -0.2828638140608703,
      -0.4377235790399892
    ],
    [
      0.8558161937865304,
      -0.2736741290843202,
      -0.43895456885955136
    ],
    [
      -0.053685644432559375,
      -0.06481256043361741,
      -0.9964522987037059
    ],
    [
      -0.04299143268119698,
      -0.0690859314088919,
      -0.996683937262653
    ],
    [
      -0.038483417656663486,
      -0.07427485486442549,
      -0.996494993715639
    ],
    [
      0.005139058182992701,
      -0.09119283735029929,
      -0.9958199920151201
    ],
    [
      -0.805764180292709,
      0.583050736898537,
      0.10390343574344177
    ],
    [
      -0.7997804560223689,
      0.5899452275396126,
      0.11097680238629307
    ],
    [
      -0.815421167094479,
      0.5703369407871868,
      0.09901562617986454
    ],
    [
      -0.8551966468062243,
      0.5121958882690214,
      0.07933515823201118
    ],
    [
      -0.8396216810811183,
      0.5319330799829687,
      0.10992102200375235
    ],
    [
      -0.8902039908047735,
      0.4348223451245505,
      0.13589107010999982
    ],
    [
      -0.8859424123132538,
      0.45586509911996875,
      0.08539937627941861
    ],
    [
      -0.8601718848698935,
      0.5061028978818328,
      0.06296177598341612
    ],
    [
      -0.8572197863748936,
      0.5108522676663061,
      0.06483979077367838
    ],
    [
      -0.8877270960691428,
      0.45470970807809663,
      0.07197002351103576
    ],
    [
      -0.9050670221830638,
      0.4238275520553213,
      0.03498416035115383
    ],
    [
      -0.9016012984048035,
      0.43101710280421746,
      0.03659721034493042
    ],
    [
      -0.8930125142654735,
      0.4470069620401571,
      0.052090548594607704
    ],
    [
      -0.9117482069583361,
      0.41005364540486,
      0.02390010456974165
    ],
    [
      -0.9104645747271466,
      0.4128571154601135,
      0.024561359507782654
    ],
    [
      -0.9195614792803988,
      0.39287141012762816,
      0.007664263041787442
    ],
    [
      -0.9234904338722407,
      0.3832273958905382,
      -0.017383370945169806
    ],
    [
      -0.9433258008783069,
      0.33143812247741644,
      0.01688799472838892
    ],
    [
      -0.9286904924523485,
      0.3700521011139315,
      -0.024401059193794532
    ],
    [
      -0.9255289648335433,
      0.37778900854650804,
      -0.02591525179495952
    ],
    [
      -0.9235851212801461,
      0.3827671860939792,
      -0.02190445159402141
    ],
    [
      -0.9512508718195924,
      0.3078120017840682,
      -0.019327452500267166
    ],
    [
      -0.947863941735829,
      0.31708173464114675,
      -0.031829569805112236
    ],
    [
      -0.9473421468864904,
      0.31860300524610796,
      -0.0321711327224221
    ],
    [
      -0.9660932361166817,
      0.258113218977285,
      -0.006436250366606422
    ],
    [
      -0.9662557493614917,
      0.2490802070802579,
      -0.06564203886777052
    ],
    [
      -0.9626995688950375,
      0.25856667030501823,
      -0.07970456107830416
    ],
    [
      -0.9622960500318767,
      0.26003319043810025,
      -0.07980634037237062
    ],
    [
      -0.949784590659579,
      0.3049307514477063,
      -0.07018880371649877
    ],
    [
      -0.9791117641266297,
      0.18986696994985672,
      -0.0727371093108559
    ],
    [
      -0.9710258427150075,
      0.20734719140274252,
      -0.11881058453270883
    ],
    [
      -0.9631289352970784,
      0.23425707253396516,
      -0.13231129188898613
    ],
    [
      -0.9620428990650586,
      0.25457595578293774,
      -0.09830840806208428
    ],
    [
      -0.9736348648810141,
      0.1862026510160343,
      -0.1317714788667501
    ],
    [
      -0.9718632666191748,
      0.17899786190292577,
      -0.15310635659726168
    ],
    [
      -0.9647668553351707,
      0.20153749515144342,
      -0.16913767438027452
    ],
    [
      -0.959714667729044,
      0.227871281508766,
      -0.1643850224603308
    ],
    [
      -0.9599141396949626,
      0.23658955710466442,
      -0.15030045203757172
    ],
    [
      -0.9719693784443874,
      0.15206530621202066,
      -0.1793088676364772
    ],
    [
      -0.9628750647976134,
      0.18607915552737236,
      -0.19556624828740687
    ],
    [
      -0.9745147443134441,
      0.16181704131806454,
      -0.15535848304734012
    ],
    [
      -0.9719726186844333,
      0.13397859729090142,
      -0.19318116884336237
    ],
    [
      -0.9697923609675598,
      0.137682535672983,
      -0.2013611084088084
    ],
    [
      -0.9584822645211394,
      0.18579895217587977,
      -0.21631111383554377
    ],
    [
      -0.965197279067264,
      0.13694041036810764,
      -0.22280380716981532
    ],
    [
      -0.953377873743203,
      0.17974272253971765,
      -0.2424111869343065
    ],
    [
      -0.9544482667661331,
      0.18564348510762632,
      -0.23359152917907539
    ],
    [
      -0.9565288877453572,
      0.18837940631849043,
      -0.2226335243931673
    ],
    [
      -0.9639376316011158,
      0.1294666160464133,
      -0.23251373661081243
    ],
    [
      -0.951601434470793,
      0.14866390755668868,
      -0.2689865284788537
    ],
    [
      -0.9480211057360202,
      0.1647758140071589,
      -0.272222178004166
    ],
    [
      -0.9507196459232562,
      0.17642412786871817,
      -0.2549640797471686
    ],
    [
      -0.9652259682917965,
      0.10586077652966701,
      -0.2390236936533689
    ],
    [
      -0.961382281952338,
      0.10611304174577987,
      -0.25393725665914746
    ],
    [
      -0.9522335235686944,
      0.14260655661111124,
      -0.270027196044159
    ],
    [
      -0.9593943268153307,
      0.09911587005689332,
      -0.26408061264966715
    ],
    [
      -0.9504108394867654,
      0.11324651995576533,
      -0.28964540718604603
    ],
    [
      -0.9485820435147299,
      0.10008384302298665,
      -0.3002920762976758
    ],
    [
      -0.9497262749700907,
      0.11215956886766681,
      -0.29230161433501317
    ],
    [
      -0.959314306292423,
      0.06917823477471949,
      -0.2737342389547589
    ],
    [
      -0.944612583828106,
      0.09424253227326797,
      -0.3143650928209296
    ],
    [
      -0.9598875057414232,
      0.06336237043793234,
      -0.2731321774049987
    ],
    [
      -0.940833498479783,
      0.06221713611177729,
      -0.33310862509448846
    ],
    [
      -0.9411511628021013,
      0.07230868843867105,
      -0.330160479664862
    ],
    [
      -0.9389364784439371,
      0.054292063381204854,
      -0.3397803132924407
    ],
    [
      -0.9503191717502922,
      -0.03225070287973094,
      -0.30960194438601646
    ],
    [
      -0.9464456646023018,
      -0.09495757521842765,
      -0.30858331591993693
    ],
    [
      -0.9170371519971122,
      0.024775472862159604,
      -0.3980314532816239
    ],
    [
      -0.9174109907952867,
      0.02927627618371628,
      -0.39686266342505105
    ],
    [
      -0.921998015087008,
      0.04886873971165729,
      -0.3840983031134239
    ],
    [
      -0.9270381475535918,
      0.05977528961839949,
      -0.3701718354108556
    ],
    [
      -0.9460269326799853,
      -0.10579025694912961,
      -0.3063355418144225
    ],
    [
      -0.9308691788869397,
      -0.0984890021137768,
      -0.3518273557598773
    ],
    [
      -0.9066410238311867,
      0.0011169502728417269,
      -0.4219014177843273
    ],
    [
      -0.9099222588616633,
      0.013398247226214572,
      -0.4145623834832985
    ],
    [
      -0.8875681594027256,
      -0.022839843007491926,
      -0.4601098825127004
    ],
    [
      -0.9197496057107716,
      -0.09734128620416174,
      -0.380243786004452
    ],
    [
      -0.8891493644848161,
      -0.031328157044693966,
      -0.45654348556564756
    ],
    [
      -0.8723505900027897,
      -0.09606854971185119,
      -0.4793488102395229
    ],
    [
      -0.8952243697184389,
      -0.11785118287202123,
      -0.4297492601016191
    ],
    [
      -0.8557001307312861,
      -0.11014700775573233,
      -0.5056134125484792
    ],
    [
      -0.8685561373940848,
      -0.09729539104042799,
      -0.48594633765196527
    ],
    [
      -0.6993905125677699,
      -0.3089602565392256,
      -0.644512583903067
    ],
    [
      -0.7774718615724532,
      -0.5889740014070862,
      -0.22056094425258005
    ],
    [
      -0.6335584266766602,
      -0.6550678252105177,
      -0.4116914674376401
    ],
    [
      -0.9991193074531848,
      -0.01122767228103193,
      -0.04042955415804489
    ],
    [
      -0.9445971931123454,
      -0.05650337738063511,
      0.32333189002766166
    ],
    [
      -0.9520003501891334,
      -0.23590394517425556,
      0.19505040858964917
    ],
    [
      -0.9979493287764982,
      -0.011623017995404378,
      -0.0629447586953433
    ],
    [
      -0.9790551017648216,
      -0.0768788802876606,
      -0.1885225330669792
    ],
    [
      -0.9804306614611006,
      -0.07151582680078687,
      -0.18341538807839594
    ],
    [
      -0.9944323836407952,
      -0.005463258837201067,
      -0.10523491421274647
    ],
    [
      -0.9816973903028442,
      0.15915922695581047,
      -0.10458763955369685
    ],
    [
      -0.9809043972914229,
      0.18163242242161617,
      -0.06954298310833235
    ],
    [
      -0.9830328235360448,
      0.14192001410244895,
      -0.11621177843881371
    ],
    [
      -0.9827649482517318,
      0.13374471789822043,
      -0.12761428964695345
    ],
    [
      -0.9850011736421211,
      0.10729983398777122,
      -0.13512747148467166
    ],
    [
      -0.9852501684069795,
      0.08605958636142323,
      -0.14790487905853347
    ],
    [
      -0.9799183754744353,
      0.08883187131045571,
      -0.17851855939096709
    ],
    [
      -0.9791529963091278,
      0.0853567747536506,
      -0.18431937180478802
    ],
    [
      -0.9713639716542463,
      0.05269247327265749,
      -0.2316798174906458
    ],
    [
      -0.9742416996620668,
      0.07652485351101417,
      -0.21212509854961822
    ],
    [
      -0.9918946990783639,
      0.04583385807875608,
      -0.1185080731168068
    ],
    [
      -0.9938467040990084,
      0.018512330987207032,
      -0.10920632927151266
    ],
    [
      -0.9924026569302661,
      0.12289468328967694,
      -0.005819221329235586
    ],
    [
      -0.9922139372914518,
      0.10808554710455283,
      -0.0618790526083294
    ],
    [
      -0.9922003407480519,
      0.11182685147640622,
      -0.0550748500526644
    ],
    [
      -0.6520603018309381,
      0.6401609490868322,
      0.4062158564610597
    ],
    [
      -0.6841060016408064,
      0.6249183469215024,
      0.3761330059964507
    ],
    [
      -0.6833668685568036,
      0.6279171333570911,
      0.3724644903819443
    ],
    [
      -0.6525613229737335,
      0.6598652945853458,
      0.3724802179452829
    ],
    [
      -0.6483379466830707,
      0.660807657174667,
      0.37814170242133766
    ],
    [
      -0.6461646226838561,
      0.656198622985584,
      0.3897109795523515
    ],
    [
      -0.6508302390562559,
      0.6419475458694553,
      0.4053681638734847
    ],
    [
      -0.6878234514724811,
      0.6359018551642102,
      0.35003961233437475
    ],
    [
      -0.6590643218206732,
      0.6656639592318853,
      0.3500367310480246
    ],
    [
      -0.6589309000319911,
      0.666261921797381,
      0.3491491379709976
    ],
    [
      -0.6982620913021742,
      0.6341746703871679,
      0.33204297807609345
    ],
    [
      -0.6685611827743521,
      0.6689915617522131,
      0.3247710504212077
    ],
    [
      -0.6637614431991886,
      0.6705459261441246,
      0.33134409222687
    ],
    [
      -0.67105685758905,
      0.6712827002804376,
      0.3147415291742
    ],
    [
      -0.7003500723498179,
      0.6329411887943771,
      0.3299927691437577
    ],
    [
      -0.6872980196264686,
      0.6633104317236057,
      0.2960417257485476
    ],
    [
      -0.6835858574009188,
      0.6662985969674103,
      0.2979203840637816
    ],
    [
      -0.6966480039783903,
      0.6590527205706427,
      0.28342736293688897
    ],
    [
      -0.734236360742507,
      0.6024685700648543,
      0.31293543846552274
    ],
    [
      -0.7403605059281587,
      0.6010533971409721,
      0.30100022433064355
    ],
    [
      -0.7388859706386326,
      0.6118451510072384,
      0.28229954584153194
    ],
    [
      -0.7164148123626974,
      0.6423677411498763,
      0.27223795061917166
    ],
    [
      -0.7640770234826602,
      0.5990337209017792,
      0.23946795904347576
    ],
    [
      -0.7532171690776391,
      0.6070839531389792,
      0.25320539103229406
    ],
    [
      -0.7406805733345951,
      0.6118846457700684,
      0.27746976151568886
    ],
    [
      -0.7814870290953434,
      0.5480704321369765,
      0.2981557055850544
    ],
    [
      -0.7813161812031016,
      0.5809365795774066,
      0.2281615995278463
    ],
    [
      -0.8108382281923597,
      0.5097505614977663,
      0.28756865746215576
    ],
    [
      -0.7902250374904466,
      0.5339203184471575,
      0.30078810427360353
    ],
    [
      -0.8174460038323063,
      0.49654670503475656,
      0.2919304720951885
    ],
    [
      -0.8387843196445082,
      0.4608229760311538,
      0.2899707741830034
    ],
    [
      -0.8490543922672431,
      0.44002117047447636,
      0.29238332460312144
    ],
    [
      -0.8599466091070239,
      0.4133175099785283,
      0.2994335743207174
    ],
    [
      -0.872896187298458,
      0.3726332953791,
      0.314955033893297
    ],
    [
      -0.9121982252158035,
      0.2865819621623134,
      0.29285692219296533
    ],
    [
      -0.6188560408243972,
      0.6922646642713383,
      0.37119649154651696
    ],
    [
      -0.7599860077031043,
      0.6260091011572884,
      0.17473944421263593
    ],
    [
      -0.7754397723258645,
      0.6091583863116736,
      0.1661903122368133
    ],
    [
      -0.7634006481544422,
      0.622657241816706,
      0.17180631423376067
    ],
    [
      -0.9339005233467101,
      0.138370459610742,
      0.32967169790543593
    ],
    [
      -0.5774375605079114,
      0.7648122150469147,
      0.28570638674993665
    ],
    [
      -0.5861266316906834,
      0.7674367764182175,
      0.2598006270657348
    ],
    [
      -0.5833023300099357,
      0.768391699091799,
      0.26331082122046995
    ],
    [
      -0.5903768041608305,
      0.7696569268677194,
      0.24307086216447812
    ],
    [
      -0.5970690454842609,
      0.7672250794611627,
      0.23425249704181678
    ],
    [
      -0.6091778351713478,
      0.7635867976792181,
      0.2140970984061835
    ],
    [
      -0.5986514761013759,
      0.7677502450315943,
      0.22842060199458963
    ],
    [
      -0.6252189136947301,
      0.7560860587820808,
      0.1934817347290477
    ],
    [
      -0.6205468785993814,
      0.7592331788574519,
      0.1961798959694213
    ],
    [
      -0.6100015486615351,
      0.7637956617838076,
      0.21098411710544482
    ],
    [
      -0.6386384944791733,
      0.7496040196148259,
      0.173881244378658
    ],
    [
      -0.7399241478450322,
      0.6624111387340015,
      0.11714836198994072
    ],
    [
      -0.7197309534440274,
      0.6817367250705931,
      0.1312341127320713
    ],
    [
      -0.7514315555765717,
      0.6524712897251188,
      0.09814190424183654
    ],
    [
      -0.8750810008630026,
      0.4830705799589099,
      0.02959825513046344
    ],
    [
      -0.8657856474021307,
      0.49870618897464664,
      0.04132008991831238
    ],
    [
      -0.8847718862531008,
      0.4657858751134753,
      0.014907308305127109
    ],
    [
      -0.8756328920755992,
      0.48221717596943225,
      0.02708566992687086
    ],
    [
      -0.8848357836435737,
      0.4656645169968892,
      0.014906159596506395
    ],
    [
      -0.8933738138141277,
      0.4493025499745816,
      0.003232240328151702
    ],
    [
      -0.8931643146217583,
      0.4497187603557777,
      0.0032471018320128827
    ],
    [
      -0.9013654803743498,
      0.43297485247366585,
      -0.008546807294241315
    ],
    [
      -0.9038747131715156,
      0.42727326367874074,
      -0.02116745224224408
    ],
    [
      -0.9208211615589329,
      0.3892650067460153,
      -0.023688456013047973
    ],
    [
      -0.9260668334397305,
      0.3748355480538363,
      -0.04357214612674818
    ],
    [
      -0.9335874215736953,
      0.35067769751486416,
      -0.07375417781422601
    ],
    [
      -0.9296616523443608,
      0.36253578773501044,
      -0.06555161913872368
    ],
    [
      -0.939976691183776,
      0.32783110207866006,
      -0.09471319095612515
    ],
    [
      -0.9347411422200342,
      0.34568336330456034,
      -0.08223143787890895
    ],
    [
      -0.9425562136981417,
      0.3116114520586011,
      -0.1203581611896467
    ],
    [
      -0.9418359796184199,
      0.31461083020636,
      -0.11817365617207737
    ],
    [
      -0.9398685063198964,
      0.327062587331507,
      -0.09837303896915758
    ],
    [
      -0.9505512582043825,
      0.2829634230916523,
      -0.12800002624343443
    ],
    [
      -0.942754532140363,
      0.31005916777895615,
      -0.122789269095578
    ],
    [
      -0.957722180408472,
      0.24471252620442605,
      -0.1512746002218819
    ],
    [
      -0.95112563817642,
      0.2731003919405291,
      -0.14413950300117992
    ],
    [
      -0.9532789198651704,
      0.2128107778188529,
      -0.2144081943042961
    ],
    [
      -0.9542923222508543,
      0.22804380132346513,
      -0.19318951413318408
    ],
    [
      -0.9587378391490374,
      0.22907742990426705,
      -0.16836058592286365
    ],
    [
      -0.09701185679725803,
      -0.6590705679112133,
      -0.7457980196768687
    ],
    [
      -0.10330910417854636,
      -0.6299706820178624,
      -0.7697169406942889
    ],
    [
      -0.14355999035379152,
      -0.605323919850376,
      -0.7829262297474742
    ],
    [
      -0.10209608871669781,
      -0.6840613046987023,
      -0.7222440862220066
    ],
    [
      -0.09448023030048515,
      -0.7076048091791481,
      -0.700263464782298
    ],
    [
      -0.6417327161224583,
      0.05244723493126375,
      -0.7651329352512262
    ],
    [
      -0.6738498352980832,
      0.05230292219632837,
      -0.7370147921164615
    ],
    [
      -0.6477810524121531,
      0.039955237854288436,
      -0.7607780800626491
    ],
    [
      -0.6750441336478704,
      0.06640245235217766,
      -0.7347830509403527
    ],
    [
      -0.6420296090106092,
      -0.03760981843689017,
      -0.7657568038945709
    ],
    [
      -0.6936642566893502,
      -0.06078602020422063,
      -0.7177290287701504
    ],
    [
      -0.2606764615733533,
      -0.2873794323512854,
      0.9216620010844806
    ],
    [
      -0.26668849171723025,
      -0.28208469450050644,
      0.9215777088852273
    ],
    [
      -0.23720722006386313,
      -0.24234619385141234,
      0.9407449479403585
    ],
    [
      -0.22465376149174207,
      -0.2486645318153452,
      0.9421765429390963
    ],
    [
      -0.23106379909556105,
      -0.28171218304554935,
      0.9312613847203357
    ],
    [
      -0.2505679519822846,
      -0.31384678305460634,
      0.9158143360996694
    ],
    [
      -0.25137007748812945,
      -0.31565165458168026,
      0.9149738341086369
    ],
    [
      -0.2870480866602038,
      -0.32644671369580686,
      0.9005753378046303
    ],
    [
      -0.3036065335471416,
      -0.3141951209510389,
      0.8995023617301127
    ],
    [
      -0.3042227948364963,
      -0.29587858879818496,
      0.9054856993860619
    ],
    [
      -0.29315431028317374,
      -0.2736743806584501,
      0.9160583407914642
    ],
    [
      -0.32759024666582737,
      -0.3326628022318385,
      0.8843189980435132
    ],
    [
      -0.27964565041618406,
      -0.34647380106262765,
      0.8954072902207821
    ],
    [
      -0.29138990985007024,
      -0.3712209426178555,
      0.8816387764835883
    ],
    [
      -0.3193496464723304,
      -0.35450647700767995,
      0.8788293128119936
    ],
    [
      -0.32768815686175595,
      -0.33660874409786784,
      0.8827882108690631
    ],
    [
      -0.32291857911867927,
      -0.3951610996541383,
      0.8599833118032614
    ],
    [
      -0.33655327438552785,
      -0.3870072221618312,
      0.85846217359588
    ],
    [
      -0.3394925913307172,
      -0.3802346133210004,
      0.8603292504990074
    ],
    [
      -0.2911095248176256,
      -0.3718978967877572,
      0.8814460839582299
    ],
    [
      -0.291936703499455,
      -0.3828631701823442,
      0.876463777955368
    ],
    [
      -0.31581915456103626,
      -0.41707433944519073,
      0.8522366203048952
    ],
    [
      -0.33728431617585636,
      -0.4258520114728386,
      0.8395768900978173
    ],
    [
      -0.3517779336046011,
      -0.41769631549097325,
      0.8377243421640213
    ],
    [
      -0.35516861113179765,
      -0.40948188180160505,
      0.8403450756343648
    ],
    [
      -0.36868639301305817,
      -0.4375485845490175,
      0.8201350984844948
    ],
    [
      -0.3309259037881356,
      -0.4469111902632485,
      0.8311187846628737
    ],
    [
      -0.34896012787631175,
      -0.45526581545474176,
      0.8191213990800613
    ],
    [
      -0.3653213791223663,
      -0.4462157553302603,
      0.8169649867963605
    ],
    [
      -0.34377169496830134,
      -0.47481060970249195,
      0.8101702948470582
    ],
    [
      -0.3595281012666313,
      -0.4830348947859894,
      0.7983838893782232
    ],
    [
      -0.3778116274099192,
      -0.47289708577849476,
      0.7960067339263377
    ],
    [
      -0.38097553438307563,
      -0.4642373549731203,
      0.7995882193035933
    ],
    [
      -0.37001833557705344,
      -0.5086663054604077,
      0.7773963088580021
    ],
    [
      -0.3892657753630995,
      -0.49819189392541846,
      0.7747754467960182
    ],
    [
      -0.3923454446260217,
      -0.4893860280246151,
      0.7788237076871118
    ],
    [
      -0.35541943349553073,
      -0.5008709488179849,
      0.7891801561898827
    ],
    [
      -0.36633740083804384,
      -0.5258378012114224,
      0.7676532521681667
    ],
    [
      -0.37949884976504955,
      -0.5331452638157382,
      0.7561327599686786
    ],
    [
      -0.40005148593719864,
      -0.5217282254447762,
      0.7534974899584498
    ],
    [
      -0.4027843401086131,
      -0.5134542001833982,
      0.7577133756753249
    ],
    [
      -0.3764318549180531,
      -0.5490556577668697,
      0.7462150784305714
    ],
    [
      -0.38850412208168805,
      -0.5558990196417991,
      0.734874701623905
    ],
    [
      -0.4098395061259738,
      -0.544405808102533,
      0.731883799057368
    ],
    [
      -0.412604689822124,
      -0.5358688783412084,
      0.7366151744039243
    ],
    [
      -0.39636658134596336,
      -0.5775266518000541,
      0.7136921602853241
    ],
    [
      -0.41886205384477526,
      -0.565899953744632,
      0.7101491548968849
    ],
    [
      -0.421470359103604,
      -0.5575262593722816,
      0.7152113019992277
    ],
    [
      -0.38562869055791593,
      -0.5713649844226184,
      0.7244532887594121
    ],
    [
      -0.4036638550220275,
      -0.5981035735568171,
      0.692334895442459
    ],
    [
      -0.4268801486962319,
      -0.5862541600709446,
      0.6885342391258362
    ],
    [
      -0.42930373650043496,
      -0.5781142856106919,
      0.6938891659332955
    ],
    [
      -0.3935952959767931,
      -0.5925536843759895,
      0.7028249242289155
    ],
    [
      -0.4007854598685548,
      -0.6132459627396847,
      0.680661740030559
    ],
    [
      -0.40912904063538397,
      -0.6181170929817928,
      0.6712262565428353
    ],
    [
      -0.4337328292377879,
      -0.6060109720251281,
      0.666803220318066
    ],
    [
      -0.4362172798369297,
      -0.5975439044744452,
      0.6727969730885425
    ],
    [
      -0.41263837937352565,
      -0.6374315080060341,
      0.65070011562097
    ],
    [
      -0.4393898397263894,
      -0.6254003033436337,
      0.6448341099251101
    ],
    [
      -0.4420425197500859,
      -0.6163250177313814,
      0.6517222439440036
    ],
    [
      -0.40630687652119296,
      -0.6332531493454004,
      0.6587147872453784
    ],
    [
      -0.40981849504474477,
      -0.6526626571811249,
      0.637244267954239
    ],
    [
      -0.41478694792889254,
      -0.6562953670606688,
      0.6302604057074632
    ],
    [
      -0.443329665249571,
      -0.644126570661736,
      0.6233456255379154
    ],
    [
      -0.44620820854378823,
      -0.634348219016701,
      0.6312690168687853
    ],
    [
      -0.44910117628727547,
      -0.6519800065134186,
      0.6109256947977783
    ],
    [
      -0.41190276917432384,
      -0.6717156140157878,
      0.6157387779195954
    ],
    [
      -0.41539813370885786,
      -0.6746778142851689,
      0.6101264110187208
    ],
    [
      -0.4459897338322096,
      -0.6623267566621557,
      0.6020103194511407
    ],
    [
      -0.4124466355738746,
      -0.6899144448572575,
      0.5948998500429241
    ],
    [
      -0.41516192547055214,
      -0.6925496811012932,
      0.5899283980671559
    ],
    [
      -0.4474826726835162,
      -0.6798363726551628,
      0.5810178689705573
    ],
    [
      -0.4508203717454234,
      -0.6690890884082774,
      0.5908305884027152
    ],
    [
      -0.412100344861198,
      -0.7075397754754802,
      0.5740738383565208
    ],
    [
      -0.4135018556933083,
      -0.709116562152897,
      0.5711128755496998
    ],
    [
      -0.44778609250444074,
      -0.6975825642191155,
      0.5593444211370023
    ],
    [
      -0.45165377316845284,
      -0.6856873989361382,
      0.5708254200041316
    ],
    [
      -0.4463944122416467,
      -0.7143694158682122,
      0.5388955060042198
    ],
    [
      -0.45064709905136285,
      -0.7018285272589859,
      0.5516827987549312
    ],
    [
      -0.4099393280138676,
      -0.7254025259815209,
      0.5529384438137465
    ],
    [
      -0.41032177036138395,
      -0.7259039648743368,
      0.5519959044659817
    ],
    [
      -0.44393357051774834,
      -0.7313055109113836,
      0.5177984498605644
    ],
    [
      -0.44871366065524493,
      -0.7178716667092891,
      0.5322746667627503
    ],
    [
      -0.40661774499122444,
      -0.7411882636299286,
      0.5341366560305547
    ],
    [
      -0.4057033565258084,
      -0.7422211692816764,
      0.5333971525737965
    ],
    [
      -0.40558077534583276,
      -0.7427307371086885,
      0.5327807117603426
    ],
    [
      -0.41720202521280797,
      -0.7532280977066497,
      0.5085173576030156
    ],
    [
      -0.44043375216343733,
      -0.7467626008625644,
      0.4983610417239837
    ],
    [
      -0.4453434912203008,
      -0.7336528124934466,
      0.5132472362791344
    ],
    [
      -0.4114605929212525,
      -0.7684886955695986,
      0.4900258210080648
    ],
    [
      -0.43615259880944857,
      -0.7624008178118307,
      0.47803337075105534
    ],
    [
      -0.4415527436933345,
      -0.748738235950243,
      0.4943907650462403
    ],
    [
      -0.40743262860705726,
      -0.764120103646726,
      0.5001191061629825
    ],
    [
      -0.40438000985622913,
      -0.7831807829125416,
      0.4723395694891278
    ],
    [
      -0.43100345331923856,
      -0.7778189704965467,
      0.45742067330039127
    ],
    [
      -0.4368904557837697,
      -0.7638290525831248,
      0.4750704243320308
    ],
    [
      -0.40152333834322035,
      -0.7793560982543473,
      0.4810229525495389
    ],
    [
      -0.3941057575523272,
      -0.7940739207734002,
      0.4627388682741768
    ],
    [
      -0.39650517518538947,
      -0.7975604319794257,
      0.4546218245883004
    ],
    [
      -0.41287952916898973,
      -0.794581763463396,
      0.4451632459722983
    ],
    [
      -0.42841126505361676,
      -0.7847331413698875,
      0.4479483059582968
    ],
    [
      -0.43125775650118015,
      -0.7784331969196637,
      0.4561343063079128
    ],
    [
      -0.4058459999353697,
      -0.8080238034840105,
      0.42706739203513655
    ],
    [
      -0.38605453636129267,
      -0.8082740627533145,
      0.4445840015510213
    ],
    [
      -0.3881134118491623,
      -0.8115241439208216,
      0.4368026366408291
    ],
    [
      -0.40519406060393665,
      -0.8084232567862857,
      0.42693045234364396
    ],
    [
      -0.37754656158285177,
      -0.8220242170550105,
      0.42630362467619587
    ],
    [
      -0.37894951917659764,
      -0.8247370805827933,
      0.4197689957912524
    ],
    [
      -0.3959987511234573,
      -0.8222283668806772,
      0.40880986021058296
    ],
    [
      -0.39823661821308187,
      -0.8209191988647626,
      0.4092667404632881
    ],
    [
      -0.3682188062056552,
      -0.837628636695461,
      0.40347636578142404
    ],
    [
      -0.38627261898276394,
      -0.8353870921936226,
      0.3910522599608399
    ],
    [
      -0.38913136098517864,
      -0.8337614250712532,
      0.39168695403469284
    ],
    [
      -0.3675283327611598,
      -0.8356441743507351,
      0.40819326120292626
    ],
    [
      -0.35611271263374794,
      -0.8487516631053297,
      0.3909019701620479
    ],
    [
      -0.3574425162693838,
      -0.8582030646199277,
      0.36840514035498395
    ],
    [
      -0.37561686412960754,
      -0.8516757172165978,
      0.36545922355993904
    ],
    [
      -0.30429489366449514,
      -0.8822471347812292,
      0.3592277980057018
    ],
    [
      -0.3335332698062678,
      -0.8839998260125664,
      0.3275665818457246
    ],
    [
      -0.3423136285640171,
      -0.8797152751323647,
      0.3300339594619377
    ],
    [
      -0.3516158096096829,
      -0.8687832394408548,
      0.348686112856795
    ],
    [
      -0.3499907521688968,
      -0.8641831943263156,
      0.36151608545155406
    ],
    [
      -0.30135804201489597,
      -0.8828987114230682,
      0.3601016465950049
    ],
    [
      -0.29703292602440723,
      -0.8926231612403565,
      0.3391096177855351
    ],
    [
      -0.3222527221936093,
      -0.8953363252387252,
      0.3074508867231064
    ],
    [
      -0.32287484663028104,
      -0.8951552985302562,
      0.30732527544391836
    ],
    [
      -0.27731577140187225,
      -0.9059371725338182,
      0.31995906355847364
    ],
    [
      -0.2728932006351205,
      -0.9127064964868057,
      0.3041318008987228
    ],
    [
      -0.27468330609621816,
      -0.9131597890905341,
      0.30114495004927894
    ],
    [
      -0.2919538050695235,
      -0.9088600157777835,
      0.2978866351917014
    ],
    [
      -0.2725366667479851,
      -0.917413018807942,
      0.28996054593616055
    ],
    [
      -0.21821707443881214,
      -0.9212541085277732,
      0.32198163914121514
    ],
    [
      -0.24446093719866965,
      -0.9328077970126128,
      0.2647800294894313
    ],
    [
      -0.25335397558487444,
      -0.9307163262425953,
      0.26377809446734946
    ],
    [
      -0.1795560327382082,
      -0.9347867621145582,
      0.3064854653693968
    ],
    [
      -0.1736260531525148,
      -0.9415252177417066,
      0.2887633252736782
    ],
    [
      -0.1925525078699483,
      -0.9468959413662806,
      0.2575104035511162
    ],
    [
      -0.19344449725169383,
      -0.946794811035105,
      0.25721355384201533
    ],
    [
      -0.2202511997824717,
      -0.941369639158659,
      0.255563321829792
    ],
    [
      -0.20695726094127445,
      -0.9214194995698997,
      0.3288689677607802
    ],
    [
      -0.021994810831731396,
      -0.9639770898477334,
      0.265074326454244
    ],
    [
      0.01923492718497911,
      -0.9558402408330896,
      0.29325663092303594
    ],
    [
      0.03082106230654206,
      -0.9562848453202352,
      0.2908081098063636
    ],
    [
      0.0406692745996113,
      -0.9653660667004574,
      0.2577098511249218
    ],
    [
      0.009857694519888197,
      -0.9738341030776276,
      0.22704617491106277
    ],
    [
      -0.0005841148281597199,
      -0.9727455671664567,
      0.23187436332608227
    ],
    [
      -0.024151482950364327,
      -0.9646411957891152,
      0.2624577475668114
    ],
    [
      0.0546714333290576,
      -0.9686704726569475,
      0.2422571975820582
    ],
    [
      0.05621972155072864,
      -0.9701764585089678,
      0.23579012333801355
    ],
    [
      0.02107181418968882,
      -0.9769389552835682,
      0.21247648410166628
    ],
    [
      0.020157095053278843,
      -0.9768594776866792,
      0.2129301584386804
    ],
    [
      0.03249454463904275,
      -0.9799419211264527,
      0.196616214457756
    ],
    [
      0.07405450491942926,
      -0.9736118574989234,
      0.215860791341629
    ],
    [
      0.08491298774212253,
      -0.9738592905305524,
      0.21068428218553822
    ],
    [
      0.08720713894060372,
      -0.9762385499963372,
      0.19837643110723427
    ],
    [
      0.08581301682793314,
      -0.9778280999994295,
      0.19101919535584522
    ],
    [
      0.04092674933438412,
      -0.9829390356207303,
      0.1793205326835418
    ],
    [
      0.03308524661838778,
      -0.9811776743545244,
      0.19025177477344996
    ],
    [
      0.08866477794334027,
      -0.9802512208529518,
      0.1767656673920468
    ],
    [
      0.08608841463876506,
      -0.9823562511182925,
      0.16602704825960815
    ],
    [
      0.046881824500397046,
      -0.9861792334700024,
      0.1589107107907851
    ],
    [
      0.04161597628658498,
      -0.9852189919076575,
      0.16616753143190607
    ],
    [
      0.05148408634520878,
      -0.9891820648126638,
      0.13736168136039256
    ],
    [
      0.04740695873889002,
      -0.988602039080892,
      0.1428936268286023
    ],
    [
      0.08931732137521065,
      -0.9843246554761531,
      0.1520769171311339
    ],
    [
      0.08658972342659252,
      -0.9859882023859755,
      0.14258150143892698
    ],
    [
      0.09028687454423212,
      -0.9876218854604064,
      0.12826258864012494
    ],
    [
      0.08737973874286085,
      -0.9889772297177564,
      0.11953585385574293
    ],
    [
      0.054973619983754364,
      -0.9917914234345586,
      0.11544554347194937
    ],
    [
      0.051873837708908035,
      -0.9914599264391445,
      0.11965082208926113
    ],
    [
      0.09162356130475259,
      -0.9903056070005909,
      0.10440271910743265
    ],
    [
      0.08887145402124003,
      -0.9913182253644115,
      0.09690222247453677
    ],
    [
      0.05825728991573742,
      -0.9939380590709994,
      0.09323745439386633
    ],
    [
      0.05529052382538839,
      -0.9937255765771479,
      0.09722364132004685
    ],
    [
      0.06088374318069546,
      -0.9956140647091481,
      0.07103382271591017
    ],
    [
      0.05850317845098527,
      -0.9955212691888616,
      0.07426156949412098
    ],
    [
      0.09327702475163059,
      -0.9922719096992236,
      0.0818281973120482
    ],
    [
      0.0901906887600981,
      -0.9931576181370193,
      0.07418615232899917
    ],
    [
      0.09694786689241604,
      -0.9939274781380786,
      0.05205073781503604
    ],
    [
      0.06334141589536652,
      -0.9967992633291449,
      0.04877595369487313
    ],
    [
      0.0610969400176935,
      -0.9967855027094317,
      0.05182495063943653
    ],
    [
      0.06667440791991103,
      -0.9974326017432685,
      0.026129070174493275
    ],
    [
      0.06350288494385378,
      -0.9975225018354711,
      0.030269488527398376
    ],
    [
      0.10184474709500421,
      -0.9936561353096577,
      0.047698346413996846
    ],
    [
      0.10426514904694709,
      -0.9938864796937332,
      0.03631038661617535
    ],
    [
      0.10265840977292562,
      -0.9942513741598907,
      0.030421306416116095
    ],
    [
      0.10641200723641214,
      -0.9942380638505393,
      0.012928925193098895
    ],
    [
      0.10498339767380445,
      -0.9944431858401409,
      0.007825365740638513
    ],
    [
      0.06938300827257156,
      -0.9975826447643263,
      0.003855519168677803
    ],
    [
      0.06671882076304456,
      -0.9977449373509679,
      0.007323861447477817
    ],
    [
      0.10894796671617599,
      -0.9939890672536167,
      -0.010773798248346605
    ],
    [
      0.1080328424665089,
      -0.9940472204791231,
      -0.014107742779624018
    ],
    [
      0.07280808325104564,
      -0.9971703157290492,
      -0.01871749027345915
    ],
    [
      0.0693733041605737,
      -0.9974866130780704,
      -0.014415318237363113
    ],
    [
      0.11228857348498765,
      -0.9930810134928144,
      -0.03437116385563723
    ],
    [
      0.11203004000470604,
      -0.9930754785975907,
      -0.035360485640190224
    ],
    [
      0.07651506244551014,
      -0.9962026542749585,
      -0.04154174809137438
    ],
    [
      0.07268084643764254,
      -0.9966742541051641,
      -0.03685004430150535
    ],
    [
      0.11640190193269152,
      -0.9915315631025853,
      -0.0575826067297747
    ],
    [
      0.07985945060910934,
      -0.9947635313665723,
      -0.06378075580861263
    ],
    [
      0.07637215081332727,
      -0.9953065862123588,
      -0.059431422853965486
    ],
    [
      0.11653272503418277,
      -0.9915461913230881,
      -0.057063775451554874
    ],
    [
      0.12083911037546255,
      -0.9895058224997902,
      -0.07922207168889484
    ],
    [
      0.08327541860719061,
      -0.992779060105308,
      -0.08634200873397709
    ],
    [
      0.07973403615248646,
      -0.9934509378258412,
      -0.08183958462621208
    ],
    [
      0.08322252424981667,
      -0.9911352636156449,
      -0.10356109633947891
    ],
    [
      0.12094519187337315,
      -0.9894815558902658,
      -0.07936315968818161
    ],
    [
      0.12521647798286592,
      -0.987038420593392,
      -0.10037923049151473
    ],
    [
      0.08750732870215251,
      -0.990178785044688,
      -0.10903412800971518
    ],
    [
      0.12617685576933277,
      -0.9867848167919362,
      -0.10166182379374224
    ],
    [
      0.1301423136367778,
      -0.9840463361405546,
      -0.12130864161145892
    ],
    [
      0.09272337934636736,
      -0.9869621812745547,
      -0.1315599774109232
    ],
    [
      0.08753283621279041,
      -0.9882938247097179,
      -0.12495326576437397
    ],
    [
      0.1358314229074864,
      -0.9803170741907355,
      -0.1432768599636504
    ],
    [
      0.09772989336768761,
      -0.9833249601084523,
      -0.15336522020996532
    ],
    [
      0.0928172921504406,
      -0.9847753332573072,
      -0.14697786665283746
    ],
    [
      0.13190865611891145,
      -0.9835191086127514,
      -0.12365382903283488
    ],
    [
      0.13758473843260263,
      -0.979729560942837,
      -0.1456036646695
    ],
    [
      0.1413739286472718,
      -0.9761622424296196,
      -0.16468360195724574
    ],
    [
      0.10282220685228012,
      -0.9790936256522101,
      -0.17550859234019453
    ],
    [
      0.09788294447289402,
      -0.9807469508789332,
      -0.16898031696914248
    ],
    [
      0.10841521857597003,
      -0.9742723796632766,
      -0.1975840849015444
    ],
    [
      0.10305877284253165,
      -0.9762722144313962,
      -0.1904506567838747
    ],
    [
      0.14345728893141868,
      -0.9753893929494332,
      -0.16743816283686283
    ],
    [
      0.14709792446667766,
      -0.9714950318566952,
      -0.18590213472511374
    ],
    [
      0.1530179214013949,
      -0.966190934758015,
      -0.2075104655708475
    ],
    [
      0.11406407691147405,
      -0.9689657055700696,
      -0.21930537564645017
    ],
    [
      0.10872090595689174,
      -0.971179191315028,
      -0.21211021419205853
    ],
    [
      0.1493950163499082,
      -0.9705633395801986,
      -0.18891250078473562
    ],
    [
      0.15600606220760552,
      -0.9648735615206422,
      -0.21137908797453947
    ],
    [
      0.15959820556162072,
      -0.960052781678147,
      -0.22984140004264403
    ],
    [
      0.11902408274630276,
      -0.9633191800715845,
      -0.2405190741554848
    ],
    [
      0.11443766531412856,
      -0.9654237439240422,
      -0.23422428444791313
    ],
    [
      0.16535466621467773,
      -0.9536318762717679,
      -0.25148375478233187
    ],
    [
      0.12363266464333661,
      -0.9569909095952129,
      -0.26245640244679735
    ],
    [
      0.11944129672786037,
      -0.9591027218722832,
      -0.25662374312043895
    ],
    [
      0.1616633181111211,
      -0.9590538022822566,
      -0.2325527379009947
    ],
    [
      0.16669485798275263,
      -0.9529293928900892,
      -0.2532555951765645
    ],
    [
      0.17066849563545278,
      -0.9465347648614204,
      -0.2737593898047458
    ],
    [
      0.17050838149111272,
      -0.946384226561606,
      -0.27437891237606393
    ],
    [
      0.1271614016735766,
      -0.9504155591205885,
      -0.28379612912425434
    ],
    [
      0.12413220584880459,
      -0.952105317365086,
      -0.2794399043018713
    ],
    [
      0.1745975375562019,
      -0.9392206117343104,
      -0.29560166165422425
    ],
    [
      0.17416127934946513,
      -0.9387898380302601,
      -0.2972229614051977
    ],
    [
      0.13027577934836754,
      -0.9432495963919428,
      -0.30546426995904497
    ],
    [
      0.12772328708678718,
      -0.9447943837077082,
      -0.301745479585226
    ],
    [
      0.1779919744799303,
      -0.9315018603874486,
      -0.31721150848520285
    ],
    [
      0.1771253938250159,
      -0.9306018307310591,
      -0.32032300495333493
    ],
    [
      0.13211864748192637,
      -0.935674322763813,
      -0.32719753163498405
    ],
    [
      0.13088506449212062,
      -0.9364945301202527,
      -0.32534150511076904
    ],
    [
      0.13276162399093566,
      -0.9279230367686889,
      -0.34832913893222306
    ],
    [
      0.18066944778614755,
      -0.9232975329320083,
      -0.3389398417393793
    ],
    [
      0.17948624500840593,
      -0.9219980265683352,
      -0.34308064191510107
    ],
    [
      0.13341005851082804,
      -0.9274535038967286,
      -0.34933043726222635
    ],
    [
      0.13404890103718173,
      -0.9189420884325434,
      -0.37091283374663536
    ],
    [
      0.1826545846536462,
      -0.9149687650856964,
      -0.35981865102098276
    ],
    [
      0.18059174095801628,
      -0.9126576853151921,
      -0.366664114051087
    ],
    [
      0.18361321832256758,
      -0.9054501651636283,
      -0.3826828771481516
    ],
    [
      0.1813286873508392,
      -0.9027331147853783,
      -0.3901189954533237
    ],
    [
      0.13439588559215648,
      -0.9098072912225814,
      -0.39266835723563087
    ],
    [
      0.13381072917190276,
      -0.9187950136437751,
      -0.37136291099384006
    ],
    [
      0.1839504312829186,
      -0.895923223081344,
      -0.40433132104051084
    ],
    [
      0.18131898050251533,
      -0.8926290063352185,
      -0.41271889266003925
    ],
    [
      0.1345137401272384,
      -0.8996904598023765,
      -0.4152868048199583
    ],
    [
      0.13395949995118162,
      -0.9095250275604457,
      -0.3934705536809583
    ],
    [
      0.1341046561402633,
      -0.8994189050776447,
      -0.41600669993454753
    ],
    [
      0.18383947736334363,
      -0.8856143095524228,
      -0.42648603878527863
    ],
    [
      0.18097096914869487,
      -0.8818877255475844,
      -0.4353430232057135
    ],
    [
      0.13446154517363035,
      -0.8889039434347308,
      -0.4379153710658086
    ],
    [
      0.183508571669531,
      -0.8743981606431401,
      -0.44916863290717657
    ],
    [
      0.18040773938609292,
      -0.8702209012290612,
      -0.4584415236796076
    ],
    [
      0.13435619011298716,
      -0.8776035389874759,
      -0.46017436101436654
    ],
    [
      0.13422396502697428,
      -0.8887449907065972,
      -0.43831069882717666
    ],
    [
      0.12279392721232794,
      -0.8672387489900489,
      -0.4825128015814174
    ],
    [
      0.12185839830211281,
      -0.869134103861305,
      -0.4793291564973385
    ],
    [
      0.182912031176418,
      -0.8623148624710335,
      -0.47218245076715815
    ],
    [
      0.17971235924820328,
      -0.8577683230901075,
      -0.4815983511564688
    ],
    [
      0.182207082872952,
      -0.8492056300712825,
      -0.49563129118949456
    ],
    [
      0.17929718897671099,
      -0.8447198868244028,
      -0.5042824910984098
    ],
    [
      0.1817619341206651,
      -0.8354776814941355,
      -0.5185939095572748
    ],
    [
      0.17916051812285172,
      -0.8311020026099776,
      -0.5264702935623586
    ],
    [
      0.1816229392982496,
      -0.82117004541225,
      -0.5410109651738194
    ],
    [
      0.17914911306025164,
      -0.8166911694216036,
      -0.5485627849922912
    ],
    [
      0.1818376400858488,
      -0.8052027987266948,
      -0.5644320380441805
    ],
    [
      0.17989696216776005,
      -0.8013521901224513,
      -0.570501314975489
    ],
    [
      0.18281992324509322,
      -0.7883563286189239,
      -0.5874275911047672
    ],
    [
      0.18110976801707288,
      -0.7845853194291679,
      -0.5929798718886103
    ],
    [
      0.1845244386518981,
      -0.7689774762250638,
      -0.6120656603655635
    ],
    [
      0.18425686691794532,
      -0.768253999965739,
      -0.6130539931606555
    ],
    [
      0.18831726924082817,
      -0.7505762091913392,
      -0.633381370346205
    ],
    [
      0.1898938971972325,
      -0.7484843056079606,
      -0.6353829963618919
    ],
    [
      0.191550734449351,
      -0.7421339365731454,
      -0.6422970779307351
    ],
    [
      0.16988612052519952,
      -0.7339215054353402,
      -0.6576457480379702
    ],
    [
      0.16404245822186836,
      -0.7132039104088018,
      -0.6814911988266029
    ],
    [
      0.17327851489184803,
      -0.7084310534215914,
      -0.684178338465089
    ],
    [
      0.17116427172438692,
      -0.6913834206235177,
      -0.7019200508405385
    ],
    [
      0.17873599080980743,
      -0.686974504722798,
      -0.7043574912287813
    ],
    [
      0.1817377064635894,
      -0.6604593686676902,
      -0.7285360858519161
    ],
    [
      0.18339475678841083,
      -0.6600301852006125,
      -0.7285097925261985
    ],
    [
      0.20485048482372945,
      -0.6455970886269343,
      -0.7356906129779754
    ],
    [
      0.29611892981361554,
      -0.5506057527152091,
      -0.7804786252569362
    ],
    [
      0.2951108175839148,
      -0.5455622078319236,
      -0.7843924290369652
    ],
    [
      0.31696557316776186,
      -0.5650486425521619,
      -0.7617433012349969
    ],
    [
      0.31670127001775095,
      -0.5637469452985192,
      -0.7628169421530516
    ],
    [
      0.3365091727846593,
      -0.5771602372089482,
      -0.7440750212288376
    ],
    [
      0.35605112926438554,
      -0.5880981387204921,
      -0.726201192909409
    ],
    [
      0.33864956596513107,
      -0.576985950949319,
      -0.7432386453076416
    ],
    [
      0.3764284277403517,
      -0.5978989880854096,
      -0.7076852682056974
    ],
    [
      0.3612079238219389,
      -0.5875395996755034,
      -0.7241036214392202
    ],
    [
      0.3825874177269629,
      -0.5970650979344791,
      -0.7050816524527533
    ],
    [
      0.3965571682899875,
      -0.6071287286781927,
      -0.6885761534437771
    ],
    [
      0.4156842323609723,
      -0.6149033619355034,
      -0.6701495910965586
    ],
    [
      0.4033722135052778,
      -0.6060193806330897,
      -0.6855883368822276
    ],
    [
      0.434519628067496,
      -0.6206870509003725,
      -0.6526410021356943
    ],
    [
      0.4242325050957974,
      -0.6132507153298523,
      -0.6662959866062295
    ],
    [
      0.4450422018173959,
      -0.6182884915655162,
      -0.6478092155867828
    ],
    [
      0.45470640799318546,
      -0.625869408559291,
      -0.633663606308251
    ],
    [
      0.47352260638688276,
      -0.6303901496586082,
      -0.6151297427811233
    ],
    [
      0.46436025184068325,
      -0.6234550966296694,
      -0.6290256743543516
    ],
    [
      0.49208535790085234,
      -0.6334455142334462,
      -0.5971589244389763
    ],
    [
      0.4837629703509198,
      -0.6275662221202981,
      -0.6100278890107499
    ],
    [
      0.5104446340897736,
      -0.6353319337213231,
      -0.5794821908591166
    ],
    [
      0.5028764254691538,
      -0.6301923563191207,
      -0.59158506974426
    ],
    [
      0.5288509481517297,
      -0.6368611325171177,
      -0.5610031840622928
    ],
    [
      0.5215314549741906,
      -0.6316671735546899,
      -0.5735865438849947
    ],
    [
      0.5464493282834182,
      -0.6374741373566261,
      -0.543157303016379
    ],
    [
      0.5398041672521893,
      -0.6329226093444793,
      -0.5549958843070335
    ],
    [
      0.5639940831204857,
      -0.6371219716106075,
      -0.5253439516127458
    ],
    [
      0.5579322824540766,
      -0.6329694617753692,
      -0.5367133579997652
    ],
    [
      0.5814777422810922,
      -0.6360412501908206,
      -0.5072821338144897
    ],
    [
      0.5757485554905092,
      -0.6321154795900561,
      -0.5185977451871784
    ],
    [
      0.5929201145563575,
      -0.6308378276129093,
      -0.5004891337552707
    ],
    [
      0.5984075285791994,
      -0.6344749129945161,
      -0.4892341101357671
    ],
    [
      0.6150360383349204,
      -0.6322005912765436,
      -0.4712250884013657
    ],
    [
      0.609808624616782,
      -0.6289470325602369,
      -0.4822437885309265
    ],
    [
      0.6370419023056717,
      -0.6327703808936415,
      -0.4402036571525581
    ],
    [
      0.6261920768574889,
      -0.6264771564982432,
      -0.4641226726489243
    ],
    [
      0.20540084088512717,
      -0.7287616019141439,
      -0.6532358089841781
    ],
    [
      0.21343170718240548,
      -0.7103982707217877,
      -0.67065729200889
    ],
    [
      0.22905426600375556,
      -0.6945149320428191,
      -0.6820433654798199
    ],
    [
      0.23655044085827479,
      -0.6897357525760859,
      -0.684330680700534
    ],
    [
      0.356240398786205,
      -0.6768332219161095,
      -0.6441968394701296
    ],
    [
      0.36653437488170737,
      -0.674374674476987,
      -0.6409924730089533
    ],
    [
      0.38868780171243894,
      -0.675622615543028,
      -0.6264629870684696
    ],
    [
      0.37697720614341435,
      -0.678587860143678,
      -0.6304020162673419
    ],
    [
      0.39812301551440993,
      -0.6798362108573799,
      -0.6158902425958646
    ],
    [
      0.4219830180276894,
      -0.6734820801564745,
      -0.606920274998579
    ],
    [
      0.12148674508998022,
      -0.9905523733458903,
      0.06361577183581427
    ],
    [
      0.144230110072869,
      -0.988102530631349,
      0.053395358490154234
    ],
    [
      0.14161439296014794,
      -0.9891883029541739,
      0.038103346377586965
    ],
    [
      0.14806464975625758,
      -0.9886759234524432,
      0.024429037599043472
    ],
    [
      0.14581286084745865,
      -0.9891739148023522,
      0.016540129566260255
    ],
    [
      0.1500092357260019,
      -0.9886842163020572,
      0.0008658129634679584
    ],
    [
      0.14842076086921827,
      -0.988913035471323,
      -0.004720806911544753
    ],
    [
      0.15330630703826711,
      -0.9879114784655632,
      -0.02298014225964919
    ],
    [
      0.15253263257450445,
      -0.9879625453192723,
      -0.025764414337531745
    ],
    [
      0.15767549945985565,
      -0.9863614205960293,
      -0.047218479749647865
    ],
    [
      0.15794989182630326,
      -0.9863655800180954,
      -0.046203617040502507
    ],
    [
      0.16310753175718887,
      -0.9842641732373356,
      -0.06797036387648704
    ],
    [
      0.1628419965384403,
      -0.9842400425941864,
      -0.06894942144477091
    ],
    [
      0.16839011534677845,
      -0.981567314025708,
      -0.0903901382334153
    ],
    [
      0.1688240387691334,
      -0.9814518121928603,
      -0.09083382782327751
    ],
    [
      0.1742137462252454,
      -0.9783339277367078,
      -0.11185837682280109
    ],
    [
      0.18076303290748624,
      -0.9744768763409903,
      -0.13311477532863672
    ],
    [
      0.175714377992822,
      -0.9778864335990131,
      -0.11341331645622085
    ],
    [
      0.18272235732238123,
      -0.9738225973595314,
      -0.13521127544139316
    ],
    [
      0.1876282913925564,
      -0.9700508084163068,
      -0.15426293579463543
    ],
    [
      0.18955715557423633,
      -0.9693336158806145,
      -0.15639829249201576
    ],
    [
      0.18966412881682757,
      -0.9692466136314226,
      -0.15680727089064941
    ],
    [
      0.1806798174397906,
      -0.9669714350021421,
      -0.17978055361974482
    ],
    [
      0.18966771622309603,
      -0.9623582441815898,
      -0.19466064645542192
    ],
    [
      0.1875662306571693,
      -0.961554422692436,
      -0.20057916471477708
    ],
    [
      0.19649073329084485,
      -0.9565217441240751,
      -0.21554012329184433
    ],
    [
      0.19414744394658418,
      -0.9555107762285319,
      -0.22204937856286971
    ],
    [
      0.20009450845811796,
      -0.948924408687483,
      -0.24393575851443972
    ],
    [
      0.20279039262492296,
      -0.950200889487725,
      -0.23663120308988406
    ],
    [
      0.2080260604855832,
      -0.9436104576059163,
      -0.25753536156342055
    ],
    [
      0.2045229601972047,
      -0.9419170676207209,
      -0.266388056182996
    ],
    [
      0.20853173082744855,
      -0.9345212505487425,
      -0.2884173183269738
    ],
    [
      0.212066587183638,
      -0.9364486556087551,
      -0.27944888264017
    ],
    [
      0.21606386235054315,
      -0.9286290632321442,
      -0.3016031669375437
    ],
    [
      0.21268983980749573,
      -0.9264614675309899,
      -0.3105353139708691
    ],
    [
      0.21985353810863523,
      -0.920314748950062,
      -0.3235508996218357
    ],
    [
      0.2166092983895839,
      -0.9178112029798988,
      -0.3327206148343732
    ],
    [
      0.22311311800773245,
      -0.9116603827934397,
      -0.3451027137212722
    ],
    [
      0.21951921822787385,
      -0.9084902400894712,
      -0.3556076440275125
    ],
    [
      0.22494001357021753,
      -0.9027738514243231,
      -0.36660791518940844
    ],
    [
      0.22120288333439234,
      -0.8990973146926978,
      -0.37774767122635067
    ],
    [
      0.22265125536956845,
      -0.8887860662184756,
      -0.4006067235809241
    ],
    [
      0.2266095671700257,
      -0.892999553584028,
      -0.38884431507447836
    ],
    [
      0.22343415552391258,
      -0.8779992451521735,
      -0.42331371777622506
    ],
    [
      0.22754589202948158,
      -0.8827861455787518,
      -0.4109884282978272
    ],
    [
      0.2279152129528942,
      -0.8720431981606794,
      -0.4331227496291679
    ],
    [
      0.22369278273316423,
      -0.8667468238228251,
      -0.44577066115452
    ],
    [
      0.228117527596984,
      -0.8604792482264778,
      -0.4555632304901646
    ],
    [
      0.22393621607793984,
      -0.8548812573343232,
      -0.4680070586937562
    ],
    [
      0.2287800036967361,
      -0.8476646742504449,
      -0.4786693116718561
    ],
    [
      0.22513903177076036,
      -0.8422641176988842,
      -0.48979952267253657
    ],
    [
      0.23039504479693496,
      -0.834010173752058,
      -0.5013433488250147
    ],
    [
      0.2271393906665753,
      -0.8286148095396739,
      -0.5116690283954529
    ],
    [
      0.23265774962911034,
      -0.8194570823383047,
      -0.5237942933472175
    ],
    [
      0.22974460744548095,
      -0.8138881076388714,
      -0.5336699013376516
    ],
    [
      0.2357096559848965,
      -0.8033608699193737,
      -0.5468567186730624
    ],
    [
      0.23386195730551226,
      -0.798632560851169,
      -0.5545219722189002
    ],
    [
      0.23904277446680422,
      -0.7891257682876875,
      -0.5658083366296218
    ],
    [
      0.22682317369870658,
      -0.783979405160414,
      -0.5778646382653725
    ],
    [
      0.22886526079175912,
      -0.7677396486555988,
      -0.5984952165931634
    ],
    [
      0.2344922160002776,
      -0.7645832643164177,
      -0.6003547555925
    ],
    [
      0.2381118171536389,
      -0.7507662998295803,
      -0.6161596591566123
    ],
    [
      0.256438227570881,
      -0.7395158856111747,
      -0.6223790568207007
    ],
    [
      0.25567820752430154,
      -0.7343735415946283,
      -0.6287480859636256
    ],
    [
      0.27107746303245156,
      -0.7088960242369702,
      -0.6511401046294927
    ],
    [
      0.33076470364890376,
      -0.7142558262320005,
      -0.6167927735582635
    ],
    [
      0.33838505717933626,
      -0.7121432035611709,
      -0.6150996754180336
    ],
    [
      0.3606545142394399,
      -0.7096223216746964,
      -0.6052804985622182
    ],
    [
      0.3536357272581026,
      -0.7117479467080441,
      -0.6069239101926338
    ],
    [
      0.3778027096393062,
      -0.7094189998801593,
      -0.5949704153974656
    ],
    [
      0.3812048048018951,
      -0.7082946400579311,
      -0.5941393773022916
    ],
    [
      0.40237541870991905,
      -0.7082348562846287,
      -0.5800839687161754
    ],
    [
      0.4084389824153772,
      -0.7115987759808986,
      -0.5716684175866096
    ],
    [
      0.4227200510116225,
      -0.7060174098472062,
      -0.5681964233127249
    ],
    [
      0.4410198666836532,
      -0.7062427637409712,
      -0.5538254561266099
    ],
    [
      0.4434492639835318,
      -0.7051755602730266,
      -0.5532451350586708
    ],
    [
      0.4607979583860822,
      -0.7054832548232366,
      -0.5384780577806589
    ],
    [
      0.4633000985641579,
      -0.7043008926190311,
      -0.537878491228714
    ],
    [
      0.47961978658234977,
      -0.7046276357790007,
      -0.5229385769047805
    ],
    [
      0.4825860145434786,
      -0.7031175594346438,
      -0.5222417411330806
    ],
    [
      0.4983678354280055,
      -0.7035596215126125,
      -0.5065899323790731
    ],
    [
      0.5017980238480625,
      -0.7016845638001469,
      -0.5058038317240953
    ],
    [
      0.5203252231196364,
      -0.7000534937152066,
      -0.4890672429458282
    ],
    [
      0.5168223382050039,
      -0.7020537344703988,
      -0.48991348690200337
    ],
    [
      0.5344805190802592,
      -0.7001324770941281,
      -0.47343963632308705
    ],
    [
      0.5381894029910242,
      -0.6979361331829708,
      -0.47247996836455136
    ],
    [
      0.5514422352947215,
      -0.6977955758828827,
      -0.45715729832458896
    ],
    [
      0.5558195158602779,
      -0.6950586229333992,
      -0.4560243156617565
    ],
    [
      0.5685281366949093,
      -0.6949031580458438,
      -0.44032415187464735
    ],
    [
      0.5733941329158918,
      -0.6916830184610628,
      -0.4390828740798548
    ],
    [
      0.5853567295914189,
      -0.6913798427258941,
      -0.42349901085404706
    ],
    [
      0.5903113832011259,
      -0.6879654375750338,
      -0.4221800890205103
    ],
    [
      0.6017927951202697,
      -0.6874517355242651,
      -0.4065163503058752
    ],
    [
      0.6065089940083079,
      -0.6840885317594667,
      -0.4051786283877858
    ],
    [
      0.6178445263048615,
      -0.6833909049410657,
      -0.3889023172455424
    ],
    [
      0.6220169121647635,
      -0.6803278996850722,
      -0.38761954271051796
    ],
    [
      0.6329926368173874,
      -0.6794061311133761,
      -0.37111673465437417
    ],
    [
      0.6373071726363568,
      -0.6761153646905754,
      -0.369739883344471
    ],
    [
      0.6480108329426973,
      -0.6749521583435468,
      -0.3528761033794993
    ],
    [
      0.6519434452627028,
      -0.6718802587829422,
      -0.35149205117152205
    ],
    [
      0.6622560254516862,
      -0.6703689414620948,
      -0.3346975337165277
    ],
    [
      0.6658865986005406,
      -0.6674626126756528,
      -0.33329971269773745
    ],
    [
      0.6760009885836595,
      -0.6656623595122276,
      -0.31609537573733804
    ],
    [
      0.6792282820298036,
      -0.6629999141926426,
      -0.3147698439676046
    ],
    [
      0.6918203899526159,
      -0.6586074198203861,
      -0.2960081326641962
    ],
    [
      0.6890814534508506,
      -0.6609486900902336,
      -0.2971760077429999
    ],
    [
      0.7015645236668447,
      -0.656325201519743,
      -0.27756881846162373
    ],
    [
      0.7038558653032421,
      -0.6542919838517826,
      -0.27656630442901575
    ],
    [
      0.7134967915051402,
      -0.6516967727429641,
      -0.2573201214601683
    ],
    [
      0.7150417341441143,
      -0.6502960437556848,
      -0.2565743048473132
    ],
    [
      0.7244539112278062,
      -0.6473132878840191,
      -0.2369642121408101
    ],
    [
      0.7250687739788876,
      -0.6467470557441198,
      -0.23662949707731962
    ],
    [
      0.7344955389250225,
      -0.643315386256595,
      -0.2160130021660005
    ],
    [
      0.7344780917462136,
      -0.643400288886526,
      -0.2158193712472895
    ],
    [
      0.7431786547170688,
      -0.639793320495541,
      -0.1958315455237429
    ],
    [
      0.742956088618443,
      -0.6406681725391639,
      -0.193805425827329
    ],
    [
      0.7504325215859976,
      -0.6371790858714527,
      -0.1756526204589648
    ],
    [
      0.7496610908013799,
      -0.6394921345318564,
      -0.1704642449617385
    ],
    [
      0.7558062902902757,
      -0.6363013849398735,
      -0.1545231344532278
    ],
    [
      0.7687673234587059,
      -0.6313792661227048,
      -0.10176946837088316
    ],
    [
      0.7491291497314044,
      -0.6515217832359633,
      -0.11968660322581356
    ],
    [
      0.33337619697183407,
      -0.5119023704020683,
      -0.7917172945372233
    ],
    [
      0.3468578196535198,
      -0.5322587664825462,
      -0.7722630759318256
    ],
    [
      0.3600228200845082,
      -0.5354948053997811,
      -0.7639560736117282
    ],
    [
      0.36657418780037476,
      -0.5464842116288797,
      -0.7529796619290972
    ],
    [
      0.38617936018111865,
      -0.5588602903150341,
      -0.7338533080112792
    ],
    [
      0.38155629483914943,
      -0.5503250734694558,
      -0.7426689083161205
    ],
    [
      0.40582565160852524,
      -0.5700002221605712,
      -0.7144265443230782
    ],
    [
      0.40248693000255115,
      -0.5632172271391768,
      -0.7216582475318759
    ],
    [
      0.4248859772851022,
      -0.5795379744292585,
      -0.6954190409392855
    ],
    [
      0.42283336610065786,
      -0.5746874463897991,
      -0.700675590750783
    ],
    [
      0.44365477995778124,
      -0.5872231088607333,
      -0.6770077227333142
    ],
    [
      0.4429243941348654,
      -0.5851565833648992,
      -0.6792714877167892
    ],
    [
      0.4623042809606818,
      -0.5939020750360087,
      -0.6584489935244415
    ],
    [
      0.46407951594397917,
      -0.5933747299088417,
      -0.6576751727006358
    ],
    [
      0.4807265853630692,
      -0.5999788291708635,
      -0.6394742799143086
    ],
    [
      0.48495371605901266,
      -0.5986905348752469,
      -0.6374868914192239
    ],
    [
      0.4986867093872274,
      -0.6044157396572474,
      -0.621283493692792
    ],
    [
      0.5168325568432565,
      -0.6075632805905524,
      -0.6031177068076412
    ],
    [
      0.5051632641407005,
      -0.6023965712839972,
      -0.6180035982646032
    ],
    [
      0.5246212931338416,
      -0.6050745803440538,
      -0.5988799971714225
    ],
    [
      0.5350056061691408,
      -0.6100532403251766,
      -0.5844690285518495
    ],
    [
      0.5526893718150498,
      -0.6113306950322439,
      -0.5664002468167533
    ],
    [
      0.5439423082955441,
      -0.6071285949175345,
      -0.5792422934140562
    ],
    [
      0.5700067243084456,
      -0.6118633869101973,
      -0.5483753550278658
    ],
    [
      0.5623763448751209,
      -0.6081052952251356,
      -0.5603042000949571
    ],
    [
      0.5806719829617796,
      -0.6082065786946539,
      -0.5412068050530949
    ],
    [
      0.5871056482810737,
      -0.6114363818470518,
      -0.5305209785769516
    ],
    [
      0.6041169636516862,
      -0.6101796306827023,
      -0.5125656177780443
    ],
    [
      0.5985941988524623,
      -0.6073678536501427,
      -0.5222923275835072
    ],
    [
      0.620574647271178,
      -0.6083376729826996,
      -0.4947851885356382
    ],
    [
      0.6158460149099138,
      -0.6058935035825496,
      -0.503613689484352
    ],
    [
      0.6369111495426933,
      -0.6057415470679351,
      -0.47688716248600094
    ],
    [
      0.6329127596860893,
      -0.6036521102201625,
      -0.4847943568702952
    ],
    [
      0.6528154355426831,
      -0.6029639610120586,
      -0.4585482186617516
    ],
    [
      0.6491072100834154,
      -0.6009315183121366,
      -0.466413057403837
    ],
    [
      0.664928498504146,
      -0.597978932909394,
      -0.4475391465263842
    ],
    [
      0.6682463308650947,
      -0.5998567459156045,
      -0.4400212786501132
    ],
    [
      0.6832230495154052,
      -0.59619383378381,
      -0.4216149631702282
    ],
    [
      0.6804059013634258,
      -0.5946286847491,
      -0.42832760436770756
    ],
    [
      0.6976098764926467,
      -0.5919351716733566,
      -0.4036746372463198
    ],
    [
      0.6953004334739483,
      -0.5906970334836271,
      -0.4094317059591041
    ],
    [
      0.7120662913955031,
      -0.5871888996246687,
      -0.3849295946219582
    ],
    [
      0.7099092216999955,
      -0.5859836488592464,
      -0.39070712844138145
    ],
    [
      0.7258042032368297,
      -0.5823666289744044,
      -0.36613845471452333
    ],
    [
      0.7237719816051345,
      -0.5811679597905336,
      -0.372018710761012
    ],
    [
      0.7392682853605792,
      -0.5772550028153116,
      -0.3467838865701863
    ],
    [
      0.7373271913311781,
      -0.5760478272878047,
      -0.35287039207147397
    ],
    [
      0.7519490080342367,
      -0.5722780025039025,
      -0.3272164072391101
    ],
    [
      0.7500013826546266,
      -0.5710026856601663,
      -0.3338470592726941
    ],
    [
      0.7620740175921197,
      -0.5660023903654615,
      -0.3144590367783846
    ],
    [
      0.7639805097133849,
      -0.5673383180792317,
      -0.3073451050807627
    ],
    [
      0.7756109617500339,
      -0.5621187887434441,
      -0.2871412602793106
    ],
    [
      0.7738012811205721,
      -0.5608488499626809,
      -0.2944149195127506
    ],
    [
      0.7844517601630027,
      -0.5559408006299563,
      -0.2748913643097764
    ],
    [
      0.7863221500393458,
      -0.5572959811202509,
      -0.2666808313034844
    ],
    [
      0.7965438546620621,
      -0.5524254630651868,
      -0.24565014829492315
    ],
    [
      0.794686096141317,
      -0.5510811796115921,
      -0.2545261127616764
    ],
    [
      0.8057377000258468,
      -0.548023021865073,
      -0.2246275278387142
    ],
    [
      0.8038747389896949,
      -0.5466745769605514,
      -0.2343764299567088
    ],
    [
      0.8143608439161673,
      -0.5437454938434252,
      -0.20287250632137757
    ],
    [
      0.8125070292449166,
      -0.5423813012594098,
      -0.2136699592168953
    ],
    [
      0.8219007932210086,
      -0.5403926785440463,
      -0.18015226637116716
    ],
    [
      0.8199333514260666,
      -0.5388357722375768,
      -0.19330108581265773
    ],
    [
      0.8336557300205821,
      -0.5291417105649637,
      -0.158199791226899
    ],
    [
      0.8153053867526906,
      -0.5694883520096036,
      -0.10469070282232057
    ],
    [
      -0.06710540752686298,
      -0.9632504535813168,
      -0.26008734678188594
    ],
    [
      0.11986668179045834,
      -0.8698857649596232,
      -0.4784670673276858
    ],
    [
      0.0866635925725816,
      -0.8931122252468318,
      -0.4414068133106534
    ],
    [
      -0.6002419009210794,
      0.3289399466809245,
      -0.7290460697762519
    ],
    [
      -0.6269560187868712,
      0.3356626494159975,
      -0.7030339510250906
    ],
    [
      -0.6442676795677117,
      0.3264602791102384,
      -0.6916233391288221
    ],
    [
      -0.6475205805839539,
      0.32790866094671994,
      -0.6878902585415412
    ],
    [
      -0.6661170504741798,
      0.31868704295215994,
      -0.6743342225647362
    ],
    [
      -0.6684633290798166,
      0.32020818549716124,
      -0.671284958580292
    ],
    [
      -0.6869256719291965,
      0.31129729425230696,
      -0.6566788528921991
    ],
    [
      -0.6894796755675012,
      0.3131344801770519,
      -0.6531191118805059
    ],
    [
      -0.7061159368338785,
      0.30477620091618335,
      -0.6391492400874089
    ],
    [
      -0.7089993121263498,
      0.30680910546395584,
      -0.6349709821785323
    ],
    [
      -0.725353139646833,
      0.2984181313932246,
      -0.6203301070077593
    ],
    [
      -0.7279578563017838,
      0.3001385546278696,
      -0.6164367019203227
    ],
    [
      -0.74309996853216,
      0.2921173237959551,
      -0.6020547366359574
    ],
    [
      -0.7699221139628385,
      0.2747089692752222,
      -0.5759817016457546
    ],
    [
      -0.7460632457706543,
      0.2941168014274347,
      -0.5973984770889956
    ],
    [
      -0.7637647526808384,
      0.28449060701190054,
      -0.5794208290046001
    ],
    [
      -0.7806044024237175,
      0.28094595178092635,
      -0.5583244030978947
    ],
    [
      -0.793260629568174,
      0.27361602895838494,
      -0.5439410283055953
    ],
    [
      -0.7971080060525222,
      0.27587953398079856,
      -0.5371306260282592
    ],
    [
      -0.8072161687857303,
      0.26990134845661684,
      -0.5249336329024721
    ],
    [
      -0.8126280932509232,
      0.27351460009631595,
      -0.5146118397331343
    ],
    [
      -0.8211067734989681,
      0.26832558437486154,
      -0.5037708281391483
    ],
    [
      -0.8269311504282645,
      0.2726154291975707,
      -0.49179843453879685
    ],
    [
      -0.8341240988930738,
      0.268036441516447,
      -0.4820720419864834
    ],
    [
      -0.7170163536234099,
      0.18114754263239646,
      -0.6731070616438617
    ],
    [
      -0.736058122472009,
      0.16775907379820434,
      -0.6558012911708467
    ],
    [
      -0.7289793214605084,
      0.16923173946047967,
      -0.663287092624421
    ],
    [
      -0.7554151866811939,
      0.147710124518424,
      -0.6383804624564952
    ],
    [
      -0.7749884706760587,
      0.15017642955258748,
      -0.6138728779853532
    ],
    [
      -0.7624343195330875,
      0.1329588981940865,
      -0.633258114665049
    ],
    [
      -0.7926506264187176,
      0.15362541105097288,
      -0.5900035741564912
    ],
    [
      -0.8116332588949634,
      0.15373530061867352,
      -0.5635751151348215
    ],
    [
      -0.7964466735408119,
      0.14953014753208224,
      -0.5859295445570304
    ],
    [
      -0.2749501432554958,
      0.8934489302853571,
      -0.3551780225404344
    ],
    [
      -0.2705206621117362,
      0.8763619520997965,
      -0.3985075912482242
    ],
    [
      -0.26814539981749974,
      0.8609973869940066,
      -0.43218230429554366
    ],
    [
      -0.2633993869244234,
      0.8677513287722483,
      -0.4214598372108967
    ],
    [
      -0.2697218582320987,
      0.8486980738923386,
      -0.4549304326633449
    ],
    [
      -0.2645422386284446,
      0.8563825030290905,
      -0.4434257688577433
    ],
    [
      -0.27165355563115257,
      0.8358198222467929,
      -0.47708444792540877
    ],
    [
      -0.2663775100752724,
      0.8440768786746004,
      -0.46537860394848635
    ],
    [
      -0.2729659928082415,
      0.8227219698879952,
      -0.4986162121650556
    ],
    [
      -0.2682237108982124,
      0.830674044440915,
      -0.48789002121806596
    ],
    [
      -0.26967308146388697,
      0.8174068489748372,
      -0.5090407374491747
    ],
    [
      -0.27526450803027047,
      0.8077269353410881,
      -0.521350792215133
    ],
    [
      -0.2785443699805821,
      0.792206687131815,
      -0.5429747681207253
    ],
    [
      -0.2725809659409923,
      0.802935172964321,
      -0.5300893556971611
    ],
    [
      -0.27578092975195434,
      0.7867374426450405,
      -0.5522581598541475
    ],
    [
      -0.2809945576691871,
      0.7768614136529338,
      -0.5634965860921103
    ],
    [
      -0.285228238106478,
      0.7586050581689934,
      -0.585801346795219
    ],
    [
      -0.2785455497223797,
      0.7715333597336124,
      -0.5719691001689005
    ],
    [
      -0.29035580692651225,
      0.7407628238034427,
      -0.6057754899752906
    ],
    [
      -0.28351546303734043,
      0.7542685256815443,
      -0.5921975796851182
    ],
    [
      -0.2962702540303471,
      0.722892606108348,
      -0.6242196861768092
    ],
    [
      -0.2891638824619101,
      0.7371232330566959,
      -0.6107647569789851
    ],
    [
      -0.2951619304674022,
      0.719453413816539,
      -0.6287020122048953
    ],
    [
      -0.3028285085586249,
      0.7036226265773537,
      -0.6428141984839357
    ],
    [
      -0.3015547475313747,
      0.7000248093623511,
      -0.6473252663989665
    ],
    [
      -0.4001714350686195,
      0.819910051145465,
      -0.4094024066682594
    ],
    [
      -0.40127137828284737,
      0.8188304018631107,
      -0.41048514462240954
    ],
    [
      -0.4022512416048543,
      0.8084332335171315,
      -0.4296855193887599
    ],
    [
      -0.40538115038382816,
      0.8052846455926796,
      -0.43264623248811085
    ],
    [
      -0.4062192175067022,
      0.7966739941814246,
      -0.4475449634654131
    ],
    [
      -0.4130685091700284,
      0.7897282043526102,
      -0.45354577495777887
    ],
    [
      -0.41378673026545676,
      0.7831641675301337,
      -0.4641491447294229
    ],
    [
      -0.42262764752521004,
      0.7739345871024765,
      -0.4716048414020218
    ],
    [
      -0.42329876270700423,
      0.7682718390542246,
      -0.48018385937780017
    ],
    [
      -0.4329874746284831,
      0.757753424187376,
      -0.4881921701002131
    ],
    [
      -0.4338180327686221,
      0.7521162019755255,
      -0.4961079853929719
    ],
    [
      -0.44340671018204386,
      0.7412096702856324,
      -0.5039828509389987
    ],
    [
      -0.44431745043646503,
      0.7367839850248228,
      -0.5096384626856386
    ],
    [
      -0.45762100611682993,
      0.7210051020094533,
      -0.5203216866871476
    ],
    [
      -0.46410688875623285,
      0.7164434551329962,
      -0.5208776933274298
    ],
    [
      -0.46699595526834525,
      0.7053125254706507,
      -0.5333376221280648
    ],
    [
      -0.47934698733342107,
      0.6897477915699718,
      -0.5426550006760463
    ],
    [
      -0.47981791984478755,
      0.6879960721093668,
      -0.5444595196687299
    ],
    [
      -0.49035148176535454,
      0.6743266630636994,
      -0.5521222471626163
    ],
    [
      -0.4927097277473617,
      0.6725425074391741,
      -0.5521989676471237
    ],
    [
      -0.5041282071512855,
      0.6570479889686708,
      -0.560484336040407
    ],
    [
      -0.5082449511441192,
      0.6538364429518282,
      -0.560522056216
    ],
    [
      -0.5180191016353018,
      0.6401752241987825,
      -0.5673022938989347
    ],
    [
      -0.5593144529616918,
      0.6050921523019297,
      -0.5665958259030697
    ],
    [
      -0.5940492940511545,
      0.5344896703697132,
      -0.601187348923279
    ],
    [
      -0.6183277270435706,
      0.5261060783492162,
      -0.5838520500033718
    ],
    [
      -0.6431826353257916,
      0.509018186588749,
      -0.5720284812291004
    ],
    [
      -0.6574505950323115,
      0.4995448322931879,
      -0.5641043127124896
    ],
    [
      -0.6517697838094733,
      0.5059230384117351,
      -0.565011529189618
    ],
    [
      -0.6735374462007596,
      0.48761942267494696,
      -0.5554949209448365
    ],
    [
      -0.6821640683595982,
      0.4845712221449579,
      -0.5475791399496728
    ],
    [
      -0.6896121139437192,
      0.47882210230953065,
      -0.5432904624986123
    ],
    [
      -0.7005962867546595,
      0.47480471310066413,
      -0.5326587344660547
    ],
    [
      -0.7055106808800357,
      0.4708858434170145,
      -0.5296425224938376
    ],
    [
      -0.7188583721183676,
      0.46587947811993097,
      -0.5159447186492283
    ],
    [
      -0.7215468205827322,
      0.46366167597996705,
      -0.5141867714502177
    ],
    [
      -0.7368949556545674,
      0.45769859343878133,
      -0.4974915294706174
    ],
    [
      -0.7372332984355935,
      0.4577658752851649,
      -0.49692803010313474
    ],
    [
      -0.7517320240556351,
      0.45186741262845914,
      -0.4803278103687938
    ],
    [
      -0.7542891807092528,
      0.45243122808086567,
      -0.4757665559097277
    ],
    [
      -0.7651743796520439,
      0.4477565934940926,
      -0.4626253362135235
    ],
    [
      -0.7696796664829112,
      0.44881748794163273,
      -0.4540441316882278
    ],
    [
      -0.7778197582924862,
      0.4451325026772248,
      -0.4436817312783218
    ],
    [
      -0.789050372112473,
      0.44449733083499743,
      -0.42405380926213915
    ],
    [
      -0.7843109335071979,
      0.4467481465548544,
      -0.4304328671591776
    ],
    [
      0.11428095847689335,
      0.12701837779830316,
      -0.9852949782837067
    ],
    [
      0.09338663749232244,
      0.10379523728539428,
      -0.9902047690527178
    ],
    [
      0.1110289630853439,
      0.14705883202723274,
      -0.9828765279926973
    ],
    [
      0.08188670862756679,
      0.15340049986440873,
      -0.9847653799720487
    ],
    [
      0.059527148463853104,
      0.13700263294034276,
      -0.9887804595374932
    ],
    [
      0.08871877179303676,
      0.10309105085394352,
      -0.9907074314677188
    ],
    [
      0.12484259329083035,
      0.19886909012308207,
      -0.9720418776441876
    ],
    [
      0.0845546453074561,
      0.182204660256409,
      -0.9796182796057742
    ],
    [
      0.12189124143846251,
      0.1527917549159809,
      -0.980712600556496
    ],
    [
      0.09791678620248341,
      0.23643604022827236,
      -0.9667007302474494
    ],
    [
      0.12619613428881482,
      0.20054809670800075,
      -0.9715220000583403
    ],
    [
      0.13462291521474704,
      0.2617105528320504,
      -0.955711388043182
    ],
    [
      0.11706814791689817,
      0.30920832748743027,
      -0.9437612298435094
    ],
    [
      0.1115298409108238,
      0.30080274646478067,
      -0.9471424403465676
    ],
    [
      0.11437876296440816,
      0.3417335206844202,
      -0.9328106449989529
    ],
    [
      0.057257796763610154,
      0.34973635799731145,
      -0.9350967995905843
    ],
    [
      -0.059359615103936836,
      0.4261525425125571,
      -0.9027017484223655
    ],
    [
      -0.0015168879109504084,
      0.44591872698718177,
      -0.895072169142353
    ],
    [
      -0.07836538080713508,
      0.41202633944802664,
      -0.9077957714662546
    ],
    [
      -0.0754638940162848,
      0.41237077363600666,
      -0.9078852051612805
    ],
    [
      -0.0978775310791534,
      0.4043397370806725,
      -0.9093565669897491
    ],
    [
      -0.11672366894564488,
      0.39540469248566207,
      -0.9110602144030803
    ],
    [
      -0.11287842094246592,
      0.3936752629460366,
      -0.9122928528876593
    ],
    [
      -0.13992828103051597,
      0.3998954122836099,
      -0.9058166124566089
    ],
    [
      -0.19571411926845386,
      0.3972199500913063,
      -0.896611562923674
    ],
    [
      -0.18198415821960368,
      0.39508931407491965,
      -0.9004366718769908
    ],
    [
      -0.2127447784195467,
      0.359606107979594,
      -0.9085279887592823
    ],
    [
      -0.2141141886047834,
      0.3253399208047143,
      -0.9210369428904019
    ],
    [
      -0.21353227288754276,
      0.32572009106405236,
      -0.9210376706262917
    ],
    [
      -0.21952809430094844,
      0.3196831180411668,
      -0.9217429792800547
    ],
    [
      -0.22894784184192332,
      0.30073441425437225,
      -0.9258194736550994
    ],
    [
      -0.22666098454910769,
      0.26497005067541973,
      -0.9372383209879409
    ],
    [
      -0.20587796055363672,
      0.2204438149467223,
      -0.9534247688255274
    ],
    [
      -0.2033152104132984,
      0.2475370343568774,
      -0.9473058333169908
    ],
    [
      -0.15569111729542356,
      0.19193223530136055,
      -0.9689800271664664
    ],
    [
      -0.12311060132312103,
      0.14837386620546614,
      -0.9812384907193062
    ],
    [
      0.2212144957933229,
      0.2628923623532474,
      -0.9391228634567655
    ],
    [
      0.41915610066606657,
      0.7026487056862813,
      -0.5749721381700263
    ],
    [
      0.40753889811457833,
      0.72477212626553,
      -0.5555334476987843
    ],
    [
      0.407777812202435,
      0.7323791943648127,
      -0.545287054253944
    ],
    [
      0.40209824702122066,
      0.7433043580160994,
      -0.5346172753444617
    ],
    [
      0.4025663718996345,
      0.7480882477581876,
      -0.5275455333728547
    ],
    [
      0.39892052758920854,
      0.7769790740272513,
      -0.4869968492626032
    ],
    [
      0.3960525985509715,
      0.7613289325350268,
      -0.513342571453118
    ],
    [
      0.36656016798265273,
      0.8079592359067023,
      -0.46134099791974614
    ],
    [
      0.3972805538869834,
      0.7781337037693573,
      -0.4864936798782012
    ],
    [
      0.9374989223489648,
      -0.0017006844556476694,
      0.34798402013154556
    ],
    [
      0.9499906671830364,
      0.013196836168995326,
      0.3119993201599293
    ],
    [
      0.9386977099078837,
      0.004523204347277714,
      0.3447116911799298
    ],
    [
      0.9530581268349326,
      0.04408922181742059,
      0.29956025669875425
    ],
    [
      0.9501052312329067,
      0.07094138751577009,
      0.3037554429490972
    ],
    [
      0.9584024335606107,
      0.08173027258073463,
      0.2734683489710975
    ],
    [
      0.9543924844424245,
      0.11067914873192443,
      0.2772816468426879
    ],
    [
      0.9543791059025704,
      0.12711268457356525,
      0.27019046548150394
    ],
    [
      0.953562177741457,
      0.1318699304422333,
      0.27079419237888097
    ],
    [
      0.9527857853217045,
      0.15906975890989541,
      0.25864272479474526
    ],
    [
      0.95088939291307,
      0.16489527573298723,
      0.26195211487284326
    ],
    [
      0.9491824145066893,
      0.19222788760946619,
      0.24920108991827053
    ],
    [
      0.948421521868376,
      0.19542309034879474,
      0.2496125650190717
    ],
    [
      0.9467468307123721,
      0.21379719901435812,
      0.24075131615360723
    ],
    [
      0.9431536179649435,
      0.2273180597416518,
      0.24246185810334825
    ],
    [
      0.9462399980929567,
      0.2406766106875687,
      0.21611255187282816
    ],
    [
      0.9328199333337487,
      0.28003001312154624,
      0.22678219446501377
    ],
    [
      0.9198810642573264,
      0.30551034844531005,
      0.24593140225199764
    ],
    [
      0.9180324409651238,
      0.33415204119311914,
      0.21344519367296272
    ],
    [
      0.9181051124270669,
      0.3382717046516227,
      0.20653149001391594
    ],
    [
      0.9214143909898999,
      0.33914085245359976,
      0.1896813176719246
    ],
    [
      0.9049422101531966,
      0.36666590265724713,
      0.21595303218893178
    ],
    [
      0.8807284878198196,
      0.4049264429598345,
      0.245666250296026
    ],
    [
      0.3932940278112035,
      0.4536265859043782,
      0.7997141540880579
    ],
    [
      0.3351548584551225,
      0.5059033318109951,
      0.7948163559693906
    ],
    [
      0.33138464080113145,
      0.513130812921064,
      0.7917581629968037
    ],
    [
      0.43653186535011407,
      0.657796202631695,
      0.6137948242998404
    ],
    [
      0.43576984553155335,
      0.6439427886919994,
      0.6288420522014867
    ],
    [
      0.41179853424125007,
      0.6397678233861117,
      0.6489368993643025
    ],
    [
      0.412239231144365,
      0.6403567606953512,
      0.6480756401356708
    ],
    [
      0.40313642890067414,
      0.6383419922660142,
      0.6557442493861975
    ],
    [
      0.3973616705712649,
      0.6309888425578458,
      0.6663008204469836
    ],
    [
      0.3840723336746095,
      0.6286253494618816,
      0.6762533641466537
    ],
    [
      0.3798129445008202,
      0.6227406092443902,
      0.6840586676503284
    ],
    [
      0.3533204622114955,
      0.6013137202252884,
      0.7166494686047558
    ],
    [
      0.36429016653563595,
      0.6196267431154536,
      0.6952376383522214
    ],
    [
      0.26597430319561377,
      0.5647234263538405,
      0.7812458779198687
    ],
    [
      0.2712433041851779,
      0.5763524464332526,
      0.7708728347951507
    ],
    [
      0.33379304760457057,
      0.5897496298444715,
      0.7353758056049721
    ],
    [
      0.26782026673426446,
      0.5567009906759296,
      0.786356351603283
    ],
    [
      0.9157181292268182,
      0.21467227561770585,
      0.3396706079225167
    ],
    [
      0.9196483392503738,
      0.20458562015739892,
      0.33524864822820977
    ],
    [
      0.9215894698980964,
      0.18861207848853903,
      0.3392614520118354
    ],
    [
      0.920933654270456,
      0.16422788404548103,
      0.35342666358667446
    ],
    [
      0.8915501961733321,
      0.2961545511494713,
      0.3426816737684528
    ],
    [
      0.8685238861561981,
      0.36242674343263814,
      0.3381022254007627
    ],
    [
      0.8639501834886114,
      0.38669333226984653,
      0.32258076078408143
    ],
    [
      0.8602539310614981,
      0.4050156254176347,
      0.30971844837013124
    ],
    [
      0.8639914472986147,
      0.38796172675919127,
      0.3209431064298966
    ],
    [
      0.8574058205414896,
      0.41944515200064947,
      0.2981962832845626
    ],
    [
      0.8601647957491195,
      0.40806688824724474,
      0.30593780229008355
    ],
    [
      0.8564681519918474,
      0.4316547420901622,
      0.283083889076622
    ],
    [
      0.8579292369179894,
      0.4385836851028022,
      0.26758508105453577
    ],
    [
      0.943356548495876,
      0.07757885784278136,
      0.32258323457017624
    ],
    [
      0.9345424417466837,
      0.05183825920222682,
      0.3520557050482623
    ],
    [
      0.9118381812089872,
      0.07427883250771507,
      0.4037744250578251
    ],
    [
      0.9241753142788799,
      0.15696139737756112,
      0.34822852871471793
    ],
    [
      0.9340979105095665,
      0.1272043440561486,
      0.33358679295635657
    ],
    [
      0.8927210104818133,
      -0.17970598257264986,
      0.41322506854246954
    ],
    [
      0.8909584652707891,
      -0.17316845046289206,
      0.41976862784943925
    ],
    [
      0.8846915584047611,
      -0.1713849658675497,
      0.4335297451870333
    ],
    [
      0.8822339486117646,
      -0.16284587697460648,
      0.4417516047161184
    ],
    [
      0.8736180450120358,
      -0.15108758745562323,
      0.4625624848019865
    ],
    [
      0.876664009048113,
      -0.16109416817330136,
      0.45333087719704485
    ],
    [
      0.8681686143685096,
      -0.14936508966254888,
      0.47325820332621915
    ],
    [
      0.8643613657587846,
      -0.13754820972663853,
      0.4836940348863164
    ],
    [
      0.8553127118870332,
      -0.12247867283999238,
      0.5034273925640153
    ],
    [
      0.8599344491997069,
      -0.13585320715770424,
      0.49199252960239415
    ],
    [
      0.8519866947423532,
      -0.12085728971097807,
      0.5094233872779271
    ],
    [
      0.8463504163892139,
      -0.10548021666611056,
      0.5220774813855453
    ],
    [
      0.8443127497787137,
      -0.10419519788061789,
      0.5256228127656998
    ],
    [
      0.8372840925954154,
      -0.0857632199810711,
      0.5400000170232873
    ],
    [
      0.8355057716112892,
      -0.042757594674615554,
      0.5478155654067027
    ],
    [
      0.8214288484245952,
      -0.018539069068561335,
      0.5700096050891726
    ],
    [
      0.8182927944775248,
      -0.017023885000357918,
      0.5745494668395906
    ],
    [
      0.8155361831513389,
      -0.004900716830462448,
      0.5786853350012365
    ],
    [
      0.8307207595262504,
      0.04389847854429623,
      0.5549558029912164
    ],
    [
      0.805932304435119,
      0.16467948415064687,
      0.5686420562777392
    ],
    [
      0.7840830233967971,
      0.19321493715045276,
      0.5898150561683588
    ],
    [
      0.7748533714665106,
      0.2463810445940516,
      0.5821500095265189
    ],
    [
      0.7621161618166494,
      0.3075234561905277,
      0.5697440476130413
    ],
    [
      0.7693698650010373,
      0.30444480144593733,
      0.5615900405997505
    ],
    [
      0.7626979401714192,
      0.2768929049382201,
      0.5844845346569473
    ],
    [
      0.7591506986467228,
      0.29119447229091,
      0.5821477441778943
    ],
    [
      0.6802264465594536,
      0.4261075811300604,
      0.5964262827077523
    ],
    [
      0.7028582080379971,
      0.412674068162314,
      0.5793879985467263
    ],
    [
      0.7193817774117401,
      0.3774718321796425,
      0.583099369094899
    ],
    [
      0.7208418359012709,
      0.3721291055654419,
      0.5847281217844319
    ],
    [
      0.7111336273495519,
      0.37104899768929267,
      0.59716966212831
    ],
    [
      0.6888909016068062,
      0.37729674500487875,
      0.618931734436105
    ],
    [
      0.6753093309203536,
      0.3877135074515547,
      0.6274038123182848
    ],
    [
      0.6654326318878812,
      0.39035671007925754,
      0.6362554921687247
    ],
    [
      0.6589680542050859,
      0.3951881941520857,
      0.6399901520648396
    ],
    [
      0.6607190778491331,
      0.43747688516194955,
      0.6099707166046494
    ],
    [
      0.6793173261650549,
      0.42719779463411783,
      0.5966825073954377
    ],
    [
      0.6455973331568419,
      0.39909925196416957,
      0.651094363746465
    ],
    [
      0.6369291481611743,
      0.4505004653715866,
      0.6255961883856589
    ],
    [
      0.6602768638672364,
      0.43799365081756364,
      0.6100787038449623
    ],
    [
      0.6335718152719324,
      0.4540378977431051,
      0.6264473978763501
    ],
    [
      0.6438465386375158,
      0.398728709070766,
      0.6530521045423943
    ],
    [
      0.6263952855842523,
      0.403765865660319,
      0.6667848767971543
    ],
    [
      0.6163364880553689,
      0.45420426334927155,
      0.6432945053759744
    ],
    [
      0.5943382099102088,
      0.4579659499636124,
      0.6610819018205345
    ],
    [
      0.6093374396457812,
      0.457891293878081,
      0.6473356529935463
    ],
    [
      0.6229622687225362,
      0.4030036212126028,
      0.6704521556663081
    ],
    [
      0.6069930428289841,
      0.4074925128414412,
      0.6822824180171865
    ],
    [
      0.5899880384382488,
      0.46019520979041156,
      0.6634263209925776
    ],
    [
      0.5962867386425393,
      0.4048161523650172,
      0.6932286838435258
    ],
    [
      0.5880332132340348,
      0.40713467022210464,
      0.6988979184664913
    ],
    [
      0.5709227983542862,
      0.4603553187732547,
      0.6797941885574531
    ],
    [
      0.5704416004571483,
      0.4605937213420653,
      0.6800366198434868
    ],
    [
      0.5702291950258819,
      0.4030283351228297,
      0.7158259748208742
    ],
    [
      0.5461007967466676,
      0.45881800854930793,
      0.7008993899437367
    ],
    [
      0.5496323264380002,
      0.46102774022759513,
      0.696676200594644
    ],
    [
      0.5200659498224057,
      0.45982483434118204,
      0.7197864471900145
    ],
    [
      0.5689423750085834,
      0.40170154151030096,
      0.7175935099120117
    ],
    [
      0.5514687797331708,
      0.39806872977631064,
      0.7330917209694038
    ],
    [
      0.5183675215607481,
      0.4567290808278597,
      0.7229755592806064
    ],
    [
      0.5105359800095894,
      0.35626911024883473,
      0.7825760884400645
    ],
    [
      0.5060792503087875,
      0.3583917435655195,
      0.7844992992673495
    ],
    [
      0.459488041946642,
      0.40449160633046827,
      0.7907321162797414
    ],
    [
      0.4501935492364282,
      0.4195495917633118,
      0.7882283351143539
    ],
    [
      0.7590093587597821,
      0.3177957882704227,
      0.5682522593643117
    ],
    [
      0.750932099886238,
      0.33529178470020704,
      0.568929169996578
    ],
    [
      0.7364843545775346,
      0.3569730616119823,
      0.5745964050930708
    ],
    [
      0.7317916789628109,
      0.36054964387437627,
      0.5783466891950284
    ],
    [
      0.4056824089741329,
      0.6695595508023258,
      0.6221830847735513
    ],
    [
      0.4014201298827232,
      0.673756323126782,
      0.6204146165038481
    ],
    [
      0.40067998118516773,
      0.6856583604270942,
      0.6077237575197161
    ],
    [
      0.39674035030340904,
      0.6912562527412154,
      0.603955203212375
    ],
    [
      0.39585285836089973,
      0.7036663346605251,
      0.5900459337991639
    ],
    [
      0.3894164231426192,
      0.7124466911560446,
      0.5837589927766527
    ],
    [
      0.3650513005025466,
      0.6805239622309871,
      0.6353146345165027
    ],
    [
      0.38860981103949027,
      0.6722160422766353,
      0.6301650635109728
    ],
    [
      0.38513545190764376,
      0.6558118734947082,
      0.6492930542268691
    ],
    [
      0.3578401934418133,
      0.6623909045296351,
      0.6581707115588915
    ],
    [
      0.3537082171974529,
      0.6978120849666122,
      0.6228553533217396
    ],
    [
      0.3473517472863518,
      0.7024027600872526,
      0.6212705741292822
    ],
    [
      0.3461886133034534,
      0.7045574782754065,
      0.6194773634486026
    ],
    [
      0.3464753196332978,
      0.7122941623198213,
      0.6104030465275448
    ],
    [
      0.3394503647235422,
      0.7251692786663313,
      0.5990851084508836
    ],
    [
      0.3353429171232872,
      0.7286519734652214,
      0.5971695148787173
    ],
    [
      0.3263492864471754,
      0.7464534587477032,
      0.5799166984654005
    ],
    [
      0.3293247967318508,
      0.7596726811973266,
      0.5607518129261735
    ],
    [
      0.2747433147475969,
      0.7754817332852729,
      0.5684577313594843
    ],
    [
      0.2756650166788609,
      0.7783878022015489,
      0.5640223647722541
    ],
    [
      0.2704266858985041,
      0.7954581815924202,
      0.542324339202688
    ],
    [
      0.2523280786883023,
      0.8072941681686928,
      0.5334853950637153
    ],
    [
      0.20350164635114182,
      0.8230585063260476,
      0.5302469001292798
    ],
    [
      0.19481712725705072,
      0.8242964250316922,
      0.5315841331410128
    ],
    [
      0.172725543453062,
      0.8313034818527426,
      0.5282995435341121
    ],
    [
      0.17008545050792018,
      0.8327478405941656,
      0.5268794677260369
    ],
    [
      -0.10257662137228596,
      0.8488770302632143,
      0.5185420178147115
    ],
    [
      -0.10763845958046617,
      0.8484802496614691,
      0.5181652515882896
    ],
    [
      -0.1279878939878229,
      0.8368713408979603,
      0.5322268856194806
    ],
    [
      -0.12884430581385706,
      0.8358681255896442,
      0.5335949976176689
    ],
    [
      -0.14025570279265684,
      0.8291169518453853,
      0.5411962841675423
    ],
    [
      -0.1472973530298191,
      0.8200439870368047,
      0.55302020678741
    ],
    [
      -0.14970322450346996,
      0.8185630303149549,
      0.5545660555559292
    ],
    [
      -0.1585406438725828,
      0.8065504716648804,
      0.5695096144031511
    ],
    [
      -0.15832355892765973,
      0.8016535321163746,
      0.5764419009178814
    ],
    [
      -0.16518707358122917,
      0.7920871362262819,
      0.5876318569874485
    ],
    [
      -0.1619210072725855,
      0.7626468142549253,
      0.6262199486687123
    ],
    [
      0.10909446212285803,
      0.6058556728377789,
      0.7880591995684123
    ],
    [
      0.12442512745834108,
      0.6083606099269232,
      0.7838467681545402
    ],
    [
      0.1537750096593648,
      0.5774257463430981,
      0.8018308760981823
    ],
    [
      0.13905594974558233,
      0.5553851227547691,
      0.8198846310689232
    ],
    [
      0.12762442914958141,
      0.5496744335951093,
      0.8255725420192578
    ],
    [
      0.11444532702701057,
      0.5502317600904114,
      0.8271319588248833
    ],
    [
      0.08583460360990074,
      0.5703974670505882,
      0.81687156298001
    ],
    [
      0.05344307867322768,
      0.6131014383993286,
      0.7881944325955376
    ],
    [
      0.0903805751788288,
      0.6155110583861034,
      0.7829287889934581
    ],
    [
      0.05986664728363164,
      0.5755415791118403,
      0.8155782459436166
    ],
    [
      0.046993554706326275,
      0.587027640304677,
      0.8082018035951085
    ],
    [
      0.09128266706241261,
      0.650349821505527,
      0.7541303497152876
    ],
    [
      0.09528693081607514,
      0.6443388763173388,
      0.7587804776625199
    ],
    [
      0.03670626651556367,
      0.6529480323221057,
      0.7565127342518293
    ],
    [
      -0.03960711858359563,
      0.6015031744654298,
      0.7978879666128044
    ],
    [
      -0.06293592221072766,
      0.5997738229163618,
      0.7976906863188125
    ],
    [
      -0.08014736266547899,
      0.6068990401292873,
      0.790727484882066
    ],
    [
      -0.09304600312076006,
      0.6413793783629179,
      0.7615608539795414
    ],
    [
      -0.012007788025110534,
      0.6871105251517465,
      0.7264536731632892
    ],
    [
      -0.00973187668465291,
      0.6862761371172709,
      0.7272759821412993
    ],
    [
      -0.0067382904095209615,
      0.6790566145838102,
      0.7340549772546547
    ],
    [
      -0.050037395892506775,
      0.6955989945828266,
      0.7166856338365221
    ],
    [
      -0.03006097606906727,
      0.6964959542410536,
      0.716930766143858
    ],
    [
      -0.10399624156615946,
      0.6429296332184986,
      0.7588321741133806
    ],
    [
      -0.10641313739995774,
      0.6688124863593243,
      0.7357758505676552
    ],
    [
      -0.09217575544331441,
      0.6825900657233126,
      0.724965124874499
    ],
    [
      -0.12768744161267154,
      0.6874104454205355,
      0.7149564999223041
    ],
    [
      -0.13547488468869887,
      0.6972360446085271,
      0.7039236135528057
    ],
    [
      -0.15038156713558906,
      0.6987739757535256,
      0.6993570726570624
    ],
    [
      -0.16982631814576232,
      0.7081092818784958,
      0.685376003798335
    ],
    [
      -0.15598376970891514,
      0.7068127679165332,
      0.6899889670839419
    ],
    [
      -0.18685429708248244,
      0.7207519478073616,
      0.6675343447296967
    ],
    [
      -0.17469638513003025,
      0.7197347440643819,
      0.6719100171965581
    ],
    [
      -0.09330718455637499,
      0.5723206593696842,
      0.8147041378125021
    ],
    [
      -0.09680078524418095,
      0.5268315374780154,
      0.844439541408774
    ],
    [
      -0.5342386944020636,
      0.820651945696804,
      -0.2027791937739874
    ],
    [
      -0.5249726711117713,
      0.8243791144991423,
      -0.21166664867990428
    ],
    [
      -0.5090909078437977,
      0.8328538861653347,
      -0.2172115371016872
    ],
    [
      -0.5504822547959679,
      0.8119673864362879,
      -0.19410886254514786
    ],
    [
      -0.5456591025218077,
      0.8140668046903176,
      -0.1988752909146622
    ],
    [
      -0.5907885378834418,
      0.7921675395702257,
      -0.15309961710206826
    ],
    [
      -0.5745330995251514,
      0.7971244259312924,
      -0.18575351176688434
    ],
    [
      -0.6355958236734385,
      0.7528361261164089,
      -0.17104302424513435
    ],
    [
      -0.6021900861869778,
      0.7816900889879427,
      -0.16225814271136804
    ],
    [
      -0.6783346324243832,
      0.7119586598887777,
      -0.18159568569504286
    ],
    [
      -0.6647226772321059,
      0.7203634545340689,
      -0.1980410456070256
    ],
    [
      -0.7153568002860488,
      0.672039580648209,
      -0.19138299382830637
    ],
    [
      -0.7286161406405827,
      0.6554890367460703,
      -0.1986268921967306
    ],
    [
      -0.7268343689772058,
      0.6570435169523043,
      -0.20001404176820697
    ],
    [
      -0.7259412916179476,
      0.6581030514369105,
      -0.19977390924115432
    ],
    [
      -0.7661508360065247,
      0.6156059906700673,
      -0.18450517807809172
    ],
    [
      -0.7730598309047073,
      0.5927705026495776,
      -0.22583540251730344
    ],
    [
      -0.7714093110049057,
      0.5952197225383293,
      -0.2250359011276441
    ],
    [
      -0.764833072887074,
      0.6106367077434092,
      -0.2053124004399297
    ],
    [
      -0.7780160668077446,
      0.5799614998907137,
      -0.24152775913654473
    ],
    [
      -0.7780566108381904,
      0.5798979712689281,
      -0.2415496910558366
    ],
    [
      -0.7828923868524298,
      0.5662294063273996,
      -0.25780568267326104
    ],
    [
      -0.7865749797841994,
      0.5526443481531652,
      -0.27547055311203283
    ],
    [
      -0.7824203160402923,
      0.5656287075025422,
      -0.2605429221767746
    ],
    [
      -0.7887781279740866,
      0.5402901748316636,
      -0.2931136158728654
    ],
    [
      -0.7855675169645,
      0.5515244115144923,
      -0.280543222683819
    ],
    [
      -0.7881988959591333,
      0.53041760710445,
      -0.3120891899479901
    ],
    [
      -0.786423934535393,
      0.5379350896117794,
      -0.3035839827036973
    ],
    [
      -0.7856390599879377,
      0.5219675450929112,
      -0.3321462769488007
    ],
    [
      -0.7847499565560403,
      0.5268036024389975,
      -0.3265661803411179
    ],
    [
      -0.7723751386775538,
      0.5079773403429628,
      -0.3813078373845983
    ],
    [
      -0.94043235222938,
      0.3085568677367948,
      -0.14275731243188025
    ],
    [
      -0.9416262807147388,
      0.2954660562235031,
      -0.1613683893674894
    ],
    [
      -0.9414162302836163,
      0.2953234366452172,
      -0.16284823955647612
    ],
    [
      -0.9420523867384253,
      0.2829175589274237,
      -0.18026357227954848
    ],
    [
      -0.9417823853063096,
      0.28269146146319857,
      -0.18202053824378864
    ],
    [
      -0.9419426495027826,
      0.2734311832240414,
      -0.19488312674107733
    ],
    [
      -0.9430076576519129,
      0.26792036118465296,
      -0.19737081261558892
    ],
    [
      -0.9426468204372297,
      0.2569162037611033,
      -0.21309865359632013
    ],
    [
      -0.9437522897526217,
      0.25067543161621186,
      -0.21562338363616654
    ],
    [
      -0.9430431714374006,
      0.2408150959961029,
      -0.2295161570471178
    ],
    [
      -0.936046992303579,
      0.22889915078533682,
      -0.267247463915329
    ],
    [
      -0.9434557459268388,
      0.2381808244577856,
      -0.23056701919017317
    ],
    [
      -0.942190139162933,
      0.22711970566933523,
      -0.24636229614291102
    ],
    [
      -0.9366560137787852,
      0.2240086071245335,
      -0.2692501732333012
    ],
    [
      -0.9335600159862362,
      0.20491836692009754,
      -0.29406488986374907
    ],
    [
      -0.9358775415755575,
      0.18183937553020452,
      -0.30177420148395057
    ],
    [
      -0.9279472506127443,
      0.18902827837447214,
      -0.32121987805089464
    ],
    [
      -0.922684483875329,
      0.16653772988256604,
      -0.3477334147609044
    ],
    [
      -0.9405180151887067,
      0.16998692110085004,
      -0.2941603470220774
    ],
    [
      -0.9375930868494824,
      0.14167651142134235,
      -0.3175641188855206
    ],
    [
      -0.9357569068033091,
      0.13836858907798066,
      -0.3243657579438247
    ],
    [
      -0.9348543756532925,
      0.1317761946007675,
      -0.3296700333036556
    ],
    [
      -0.9305979032114727,
      0.12523830565177255,
      -0.34395189974164075
    ],
    [
      -0.9296647248601084,
      0.11852951397423578,
      -0.34881836773285096
    ],
    [
      -0.9247884957736291,
      0.11226356151229638,
      -0.3635424746041693
    ],
    [
      -0.9218581555695153,
      0.09127472221936184,
      -0.37662510019082573
    ],
    [
      -0.9221874090168766,
      0.08377254262720105,
      -0.3775613112495953
    ],
    [
      -0.9090494085444766,
      0.0901976171378966,
      -0.40680900025390615
    ],
    [
      -0.9042767483011387,
      0.07395060081257362,
      -0.42049360413849135
    ],
    [
      -0.9022070326719658,
      0.07322826114633452,
      -0.42504128266173236
    ],
    [
      -0.8972193149741505,
      0.05855835984340719,
      -0.43768529713684245
    ],
    [
      -0.8944884709498321,
      0.05640101325794947,
      -0.44351922285432904
    ],
    [
      -0.88539556559583,
      0.09279746305895957,
      -0.4554814192401939
    ],
    [
      -0.8755207051001738,
      0.07724049996683814,
      -0.4769668752709849
    ],
    [
      -0.8787580060789734,
      0.08928713057165646,
      -0.4688413111772331
    ],
    [
      -0.8895871678362739,
      0.04345300201908542,
      -0.45469386122595323
    ],
    [
      -0.8892799628490867,
      0.04313358560548432,
      -0.45532476483049034
    ],
    [
      -0.8818528736397772,
      0.024198686012549677,
      -0.47090331581815514
    ],
    [
      -0.8669142061997115,
      0.06307424084968265,
      -0.49445060342804764
    ],
    [
      -0.8701328012247692,
      0.07439661806046735,
      -0.4871694278727895
    ],
    [
      -0.8535249459271768,
      0.04435788896799154,
      -0.5191604225731324
    ],
    [
      -0.8585084023475681,
      0.05862771076474788,
      -0.5094370565919908
    ],
    [
      -0.8808269916691198,
      0.018305179135663676,
      -0.4730842749066382
    ],
    [
      -0.8617474589731837,
      -0.02140207985512558,
      -0.506885852960147
    ],
    [
      -0.848052364509854,
      -0.020726040273685405,
      -0.5295069577482617
    ],
    [
      -0.8798540987258451,
      -0.011462394969615396,
      -0.47510564978422576
    ],
    [
      -0.7633678315353271,
      0.10775540217813726,
      -0.6369131236506911
    ],
    [
      -0.6185563089720012,
      0.6922752030608508,
      0.37167611687865015
    ],
    [
      -0.6123818267602651,
      0.6845262361454186,
      0.3954899875879886
    ],
    [
      -0.6160727090743989,
      0.6740114965349422,
      0.40763086202158255
    ],
    [
      -0.6143423641714527,
      0.6714276810141158,
      0.4144494284617085
    ],
    [
      -0.6184011462252084,
      0.6585154831492569,
      0.42887921469808865
    ],
    [
      -0.6177059490096516,
      0.6571944354883595,
      0.4318967868845774
    ],
    [
      -0.6212573251915559,
      0.6423053056347625,
      0.44886883412559125
    ],
    [
      -0.6217079558406915,
      0.6432746164326909,
      0.4468523083724232
    ],
    [
      -0.6246514609791132,
      0.6263352204054622,
      0.4663847595883688
    ],
    [
      -0.6251998778293971,
      0.6275189772621154,
      0.4640528482166827
    ],
    [
      -0.6276328924467909,
      0.6098779037595169,
      0.48386557515985007
    ],
    [
      -0.6283342599758576,
      0.611322482539354,
      0.4811245993321405
    ],
    [
      -0.629928909895934,
      0.5926081011988072,
      0.5020012020611749
    ],
    [
      -0.6310351701819139,
      0.5946983787893206,
      0.4981249363953151
    ],
    [
      -0.632951213949789,
      0.5778144477458166,
      0.5152700502995351
    ],
    [
      -0.6313503294833536,
      0.5750218914724943,
      0.5203331488466365
    ],
    [
      -0.6322918919636938,
      0.5569488861307705,
      0.5385303163190225
    ],
    [
      -0.6341278557468804,
      0.5600772531545053,
      0.5330997402595202
    ],
    [
      -0.6325371447248958,
      0.5389852878209334,
      0.5562298266506946
    ],
    [
      -0.6347206323322037,
      0.5426290047089304,
      0.5501667766599535
    ],
    [
      -0.631601963359013,
      0.5199252514864771,
      0.5751145040318177
    ],
    [
      -0.6347249586586778,
      0.5248303993766421,
      0.5671660063384387
    ],
    [
      -0.6298614781874194,
      0.5014283535186128,
      0.59316450044079
    ],
    [
      -0.6334285820610154,
      0.5069242097283286,
      0.5846332842213834
    ],
    [
      -0.6272963173671323,
      0.48257444955028733,
      0.6112456387238041
    ],
    [
      -0.631501402810904,
      0.4886932622615712,
      0.6019841141325937
    ],
    [
      -0.623033622493062,
      0.46239214411764307,
      0.6308903314376132
    ],
    [
      -0.6287922554100427,
      0.4700377692636721,
      0.6194229532411457
    ],
    [
      -0.6175794385063934,
      0.4421679333627341,
      0.6504484267333241
    ],
    [
      -0.6242558595915463,
      0.4511804339776551,
      0.6377623677839218
    ],
    [
      -0.610332469990881,
      0.422362383939479,
      0.6701524399028853
    ],
    [
      -0.6184207210408994,
      0.4333911127396619,
      0.655536387384813
    ],
    [
      -0.6016913171169559,
      0.40224521750182746,
      0.690048073617317
    ],
    [
      -0.6109654657431478,
      0.41505513882178796,
      0.6741293877341981
    ],
    [
      -0.5909204175092555,
      0.38187904502959985,
      0.7106204719384095
    ],
    [
      -0.602090471566764,
      0.39717839132806915,
      0.6926300524165544
    ],
    [
      -0.5783560956001578,
      0.3621751485892197,
      0.730981113590849
    ],
    [
      -0.5910933390276166,
      0.3795246639738045,
      0.7117370961195952
    ],
    [
      -0.5647893281504904,
      0.3420273799575568,
      0.7510194978605327
    ],
    [
      -0.5784718495382355,
      0.3606995599725897,
      0.7316188534526658
    ],
    [
      -0.5499295966349383,
      0.32078978785822637,
      0.77114936993478
    ],
    [
      -0.5502455702046468,
      0.3208119928539396,
      0.7709147019685427
    ],
    [
      -0.5648799022505928,
      0.34098797206645204,
      0.7514239142716774
    ],
    [
      -0.5332118140116844,
      0.29949922325874345,
      0.7911923765215247
    ],
    [
      -0.5351688079259265,
      0.2996469846051815,
      0.7898139221615209
    ],
    [
      -0.5156826233778427,
      0.2774149367708538,
      0.8106246880046087
    ],
    [
      -0.5187587626347391,
      0.27772741714208815,
      0.8085523037857595
    ],
    [
      -0.4963220315282864,
      0.25411932051222813,
      0.8301131320260138
    ],
    [
      -0.5016897625465737,
      0.25490234686173796,
      0.826639084316935
    ],
    [
      -0.47518150028635053,
      0.23073168295742022,
      0.8490968332677078
    ],
    [
      -0.48429785775271245,
      0.23221379337521278,
      0.8435237632351725
    ],
    [
      -0.44974273555617444,
      0.206835528362284,
      0.8688788960617836
    ],
    [
      -0.4640901295621107,
      0.208720136312643,
      0.8608462443088516
    ],
    [
      -0.4113204070696182,
      0.1948752724561139,
      0.8904151564934409
    ],
    [
      -0.44647987144128437,
      0.19942169783506886,
      0.872288203995877
    ],
    [
      -0.4158919826026302,
      0.1750922492774159,
      0.8923993293642868
    ],
    [
      -0.4446408038567161,
      0.8224553117718724,
      -0.3547700884853254
    ],
    [
      -0.4488990841157566,
      0.81479594029835,
      -0.3668748941442606
    ],
    [
      -0.432590677275414,
      0.8153502028104852,
      -0.3847978075708062
    ],
    [
      -0.4505980147247848,
      0.8282965512925243,
      -0.33299587421317
    ],
    [
      -0.45322816055729,
      0.8235703316473679,
      -0.3410515258844324
    ],
    [
      -0.4582049662531987,
      0.8322097598157487,
      -0.31221006480944674
    ],
    [
      -0.45980520971790545,
      0.8291632484814726,
      -0.31791111412456896
    ],
    [
      -0.4675072869619369,
      0.8348130267455522,
      -0.29073036823389964
    ],
    [
      -0.46851244636670747,
      0.8327534617375101,
      -0.29498772781876237
    ],
    [
      -0.4783183926650046,
      0.8350465053367441,
      -0.27186181998077164
    ],
    [
      -0.4896891470329595,
      0.8341021347847676,
      -0.253925516688705
    ],
    [
      -0.4797537345264547,
      0.834429212587824,
      -0.271227291008822
    ],
    [
      -0.5077132159593689,
      0.8305140052999176,
      -0.22907155506715288
    ],
    [
      -0.4945888443148683,
      0.8319118000559539,
      -0.2516041176271671
    ],
    [
      -0.08024812936331288,
      0.9139886523022246,
      -0.3977247555740681
    ],
    [
      -0.07712424535158828,
      0.8784090748032507,
      -0.4716453626213716
    ],
    [
      -0.06887629255147569,
      0.8666792981646891,
      -0.49408809989426505
    ],
    [
      -0.052858620893766015,
      0.85435954161382,
      -0.5169871757119633
    ],
    [
      -0.02187788122634286,
      0.8372826833907137,
      -0.5463323772275372
    ],
    [
      0.5239574669973939,
      -0.7714954150097548,
      0.3609202091828621
    ],
    [
      0.5267286350032241,
      -0.7699512109487407,
      0.36018339471192745
    ],
    [
      0.5310655246252628,
      -0.7669457188547041,
      0.36022725172442954
    ],
    [
      0.5755330834929532,
      -0.7537312729161034,
      0.31725516234312684
    ],
    [
      0.5972590100880274,
      -0.7383366831176398,
      0.31327402897704676
    ],
    [
      0.6128880974714491,
      -0.7214475303051752,
      0.32230674984305085
    ],
    [
      0.6285123032541895,
      -0.7125391732955758,
      0.3118656941335023
    ],
    [
      0.6666314443411073,
      -0.6863509157645831,
      0.29073172830774335
    ],
    [
      0.6848770820820231,
      -0.6702807239945154,
      0.28577462007708454
    ],
    [
      0.7322590236600085,
      -0.6097106396810221,
      0.3033968657192255
    ],
    [
      0.7320278501139504,
      -0.6094618417171805,
      0.30445277162188916
    ],
    [
      0.749668175365092,
      -0.5713442455376004,
      0.3340110476254397
    ],
    [
      0.7512822975462059,
      -0.565675171279973,
      0.3399801611727769
    ],
    [
      0.7623059627234169,
      -0.518509917039422,
      0.38734620835642164
    ],
    [
      0.7612434392228934,
      -0.5099340836908732,
      0.4005941294258449
    ],
    [
      0.7478146086587363,
      -0.5132834661949224,
      0.42108597032851514
    ],
    [
      0.7401728032266234,
      -0.5500808154496266,
      0.386723826312675
    ],
    [
      0.740189083044846,
      -0.5497199277964502,
      0.3872055298219482
    ],
    [
      0.7300167419781012,
      -0.536488163908707,
      0.423386355965261
    ],
    [
      0.7209239526438046,
      -0.5405596973022953,
      0.43366331197933305
    ],
    [
      0.711447325004308,
      -0.5336152214084632,
      0.4572718001642037
    ],
    [
      0.7116767924851715,
      -0.5329587535070945,
      0.457680139505946
    ],
    [
      0.7131266409455905,
      -0.5118275409706998,
      0.47904379995731633
    ],
    [
      0.7049155181854349,
      -0.5032467798336325,
      0.49983676416250056
    ],
    [
      0.7021648189048607,
      -0.5038192160463136,
      0.5031210238449414
    ],
    [
      0.6941198669573811,
      -0.4954633636768588,
      0.522219939823328
    ],
    [
      0.6912194380393126,
      -0.49604722918496813,
      0.5255024594562165
    ],
    [
      0.6826770706651877,
      -0.4872094837021213,
      0.544590613377343
    ],
    [
      0.6796151853783913,
      -0.4878117388793301,
      0.5478712505823053
    ],
    [
      0.6705557081438897,
      -0.4784614222817984,
      0.5669477133420024
    ],
    [
      0.6482176051704877,
      -0.48254105402367004,
      0.5890399541022352
    ],
    [
      0.6226050016883368,
      -0.4968213692476832,
      0.6045920433908498
    ],
    [
      0.6194705953728816,
      -0.49333712885075454,
      0.6106346360678057
    ],
    [
      0.6089268553090158,
      -0.48811509985688095,
      0.625261332704318
    ],
    [
      0.6064860565839568,
      -0.48549696368410805,
      0.6296565424282936
    ],
    [
      0.6101910560082727,
      -0.44323228370178874,
      0.6566673570781527
    ],
    [
      0.5261367353059859,
      -0.6713122265365118,
      0.5220345106064829
    ],
    [
      0.5281435931784547,
      -0.6604930833535877,
      0.5336789595127595
    ],
    [
      0.5812769976542062,
      -0.6279926669694974,
      0.5174381723748741
    ],
    [
      0.5891772130980485,
      -0.6279356540567222,
      0.5084948632290922
    ],
    [
      0.5917008269174745,
      -0.6317396330169969,
      0.5007945362129335
    ],
    [
      0.5730015355441985,
      -0.6593679516224268,
      0.4867269713476288
    ],
    [
      0.5449063791880352,
      -0.6816650252818663,
      0.48827229209495154
    ],
    [
      0.5428366180716367,
      -0.6823449040292588,
      0.48962622277187073
    ],
    [
      0.5240817835207567,
      -0.6574839651386002,
      0.5413438092075373
    ],
    [
      0.5277374777174489,
      -0.6367547396207999,
      0.5621712872273649
    ],
    [
      0.5312018899243325,
      -0.6317678705658623,
      0.5645298130847416
    ],
    [
      0.5598425261160651,
      -0.6192331859277588,
      0.5505693484001273
    ],
    [
      0.5255881723916312,
      -0.6061533200101424,
      0.5969382092668443
    ],
    [
      0.5626837739938442,
      -0.5926579290725841,
      0.5763189651498902
    ],
    [
      0.5640009791918992,
      -0.5947449811722016,
      0.5728711049102201
    ],
    [
      0.5231061446136793,
      -0.6222961081201589,
      0.5823293872765789
    ],
    [
      0.5234528320045758,
      -0.6029574210149885,
      0.6020294686386566
    ],
    [
      0.5238684624172361,
      -0.600190706803911,
      0.6044277868784845
    ],
    [
      0.5389467343730411,
      -0.5827599549935575,
      0.6082164519022334
    ],
    [
      0.5636638883929982,
      -0.574118723096032,
      0.5938608529885325
    ],
    [
      0.5650696222951771,
      -0.5760593446301265,
      0.5906369048946188
    ],
    [
      0.5371706411490094,
      -0.5656904046237355,
      0.6256533132687754
    ],
    [
      0.55022663775538,
      -0.5588057574610841,
      0.6204730232111256
    ],
    [
      0.5649436121466065,
      -0.5645102402781034,
      0.6018030439569934
    ],
    [
      0.552657258276063,
      -0.5377816469360166,
      0.6366795544805649
    ],
    [
      0.5575908864329449,
      -0.542601280691268,
      0.6282326428633892
    ],
    [
      0.5368737665720164,
      -0.5656338147733123,
      0.6259592209974756
    ],
    [
      0.5347878196953806,
      -0.5464734289330033,
      0.6444911010833796
    ],
    [
      0.5364276761656992,
      -0.5443644699939952,
      0.6449129181925453
    ],
    [
      0.5346160886485569,
      -0.5242543395275127,
      0.6628295597245869
    ],
    [
      0.5354152980543356,
      -0.5231397928060791,
      0.6630650162632616
    ],
    [
      0.5624266644115659,
      -0.5145713092591007,
      0.6472191397403625
    ],
    [
      0.5833919997730019,
      -0.49403790457730123,
      0.6446551973277862
    ],
    [
      0.535108244518626,
      -0.5026363741877121,
      0.6789814739679019
    ],
    [
      0.5688895713603848,
      -0.4904973926820619,
      0.6601340495456184
    ],
    [
      0.5556304897614578,
      -0.47095523098030867,
      0.685183135562841
    ],
    [
      0.5349896295841681,
      -0.5025512935060319,
      0.6791379047239292
    ],
    [
      0.5351684439614685,
      -0.4827856735936836,
      0.6931902552406186
    ],
    [
      0.5298575118601778,
      -0.4797892294433775,
      0.6993234676710569
    ],
    [
      0.5300427324282884,
      -0.46082989053559503,
      0.7118219677622386
    ],
    [
      0.5674884819013262,
      -0.4389295360440191,
      0.6966331066619719
    ],
    [
      0.5677850169941046,
      -0.43853857888557934,
      0.6966377030465842
    ],
    [
      0.5248199154992834,
      -0.4577858837076076,
      0.7176323160040731
    ],
    [
      0.5249388626050605,
      -0.42972861204128926,
      0.7346921195439436
    ],
    [
      0.5366285016877668,
      -0.4219892307680957,
      0.7307222045976798
    ],
    [
      0.5561803904095701,
      -0.4237268106975731,
      0.7149258445600642
    ],
    [
      0.5410935605877095,
      -0.3857472168622681,
      0.7472729376697173
    ],
    [
      0.5753008092813398,
      -0.436382501240116,
      0.6918087101588529
    ],
    [
      0.30769123489718087,
      -0.798488468599236,
      0.5174381793813586
    ],
    [
      0.3344771482434975,
      -0.8050965381266894,
      0.4898414045375479
    ],
    [
      0.3378788822492474,
      -0.8048432799217056,
      0.48791921021299267
    ],
    [
      0.3352091267382808,
      -0.8151031800019578,
      0.472484547156894
    ],
    [
      0.3401549564428635,
      -0.8229262276197967,
      0.4550681591836592
    ],
    [
      0.3483582505364913,
      -0.8246610768600817,
      0.445623874579365
    ],
    [
      0.3575317273027158,
      -0.8230715788601211,
      0.4412756961862323
    ],
    [
      0.36500564390200235,
      -0.8250857382645101,
      0.431282279293032
    ],
    [
      0.39808528205033794,
      -0.8274090476088518,
      0.3961342905504595
    ],
    [
      0.39875238064683327,
      -0.828407756248925,
      0.39336640465996137
    ],
    [
      0.38040734976012147,
      -0.8216647370213984,
      0.42444941769784156
    ],
    [
      0.439900169328591,
      -0.8000495542437756,
      0.40793204308930325
    ],
    [
      0.44379018391510766,
      -0.7994794464466338,
      0.4048245142898081
    ],
    [
      0.44980318046075085,
      -0.7969997110395541,
      0.40307388832602437
    ],
    [
      0.4772103093010583,
      -0.7985996717338729,
      0.36675452962893146
    ],
    [
      0.5655770224205461,
      -0.7240797717891999,
      0.3947545006654252
    ],
    [
      0.5730789194722536,
      -0.7174739825822124,
      0.3959944903330518
    ],
    [
      0.5753962212012527,
      -0.7159913504433081,
      0.3953170559407818
    ],
    [
      0.5791085622540374,
      -0.7181382068387391,
      0.3858896072745443
    ],
    [
      0.6568893410170845,
      -0.6613907223844118,
      0.3620203115875773
    ],
    [
      0.6598719561228265,
      -0.6586066586755778,
      0.36167149551882827
    ],
    [
      0.6839457212185006,
      -0.6315863972548853,
      0.3651258320490338
    ],
    [
      0.8497956012155421,
      -0.2690109143819152,
      0.4532996405228236
    ],
    [
      0.8505968056553835,
      -0.2687577361959781,
      0.4519450779062326
    ],
    [
      0.8592756826976032,
      -0.2769121380416311,
      0.4300755386322041
    ],
    [
      0.8402590262916864,
      -0.2606484592934408,
      0.47542312670220666
    ],
    [
      0.8407256199464956,
      -0.26051794297222824,
      0.47466918306869194
    ],
    [
      0.8306390017954596,
      -0.25185070942220283,
      0.4965984986483302
    ],
    [
      0.820876032061799,
      -0.24260656035714237,
      0.5170150837820425
    ],
    [
      0.8305297482325326,
      -0.25130271233641227,
      0.4970586324299867
    ],
    [
      0.8107642071174275,
      -0.2316424205225925,
      0.5375901686895731
    ],
    [
      0.8203666566417734,
      -0.24018375677911316,
      0.5189511649951954
    ],
    [
      0.7997426650922969,
      -0.21924348422367643,
      0.5588774143374672
    ],
    [
      0.8100185410315405,
      -0.22831014696541813,
      0.5401337241626039
    ],
    [
      0.7880464819230526,
      -0.20678329669110326,
      0.5798477477219852
    ],
    [
      0.7990922059125511,
      -0.21658901641069606,
      0.5608394105446409
    ],
    [
      0.7757694473998491,
      -0.19428107554881127,
      0.6003637465441511
    ],
    [
      0.7875213939614005,
      -0.20481804383157182,
      0.5812569336998062
    ],
    [
      0.7627661244503837,
      -0.1810076211878552,
      0.6208253220213038
    ],
    [
      0.7752114601550648,
      -0.19232882062792622,
      0.6017115727656593
    ],
    [
      0.748192671416129,
      -0.16731223590609354,
      0.6420392060889273
    ],
    [
      0.7492945789898422,
      -0.16736233138937484,
      0.6407397942443939
    ],
    [
      0.7622882049373418,
      -0.17943766869394823,
      0.621867200989959
    ],
    [
      0.7322183598747395,
      -0.1550474283308692,
      0.663186676909549
    ],
    [
      0.7353892331638372,
      -0.15524067101953484,
      0.6596233848250894
    ],
    [
      0.7155891289802253,
      -0.14210694736875604,
      0.6839136012647038
    ],
    [
      0.7189057225118448,
      -0.14243450800660581,
      0.6803579742081652
    ],
    [
      0.696868883269153,
      -0.12886500442909843,
      0.7055264489476579
    ],
    [
      0.7026589284026902,
      -0.12962381558178296,
      0.6996199659600939
    ],
    [
      0.6859752622493388,
      -0.11810533039986126,
      0.717975675432734
    ],
    [
      0.6757229572650796,
      -0.11657344388661749,
      0.7278798782803032
    ],
    [
      0.6525304670840342,
      -0.1052362582294352,
      0.75041942904016
    ],
    [
      0.6668369812661289,
      -0.10767289610210162,
      0.7373838809337118
    ],
    [
      0.6269275000637168,
      -0.09492675649733294,
      0.7732727982832155
    ],
    [
      0.6458894911544669,
      -0.09851184079904113,
      0.7570483356025612
    ],
    [
      0.599533112994372,
      -0.08676016303681514,
      0.7956335340677283
    ],
    [
      0.6235523035239189,
      -0.09148586470320723,
      0.7764102403559094
    ],
    [
      0.5695033010774749,
      -0.07922652032887062,
      0.818162055181269
    ],
    [
      0.597779529149031,
      -0.08493189278245072,
      0.7971487992330875
    ],
    [
      0.5394151666596535,
      -0.1436316385996225,
      0.8296994819636359
    ],
    [
      0.5237666656368477,
      -0.13380172086120345,
      0.8412880478541456
    ],
    [
      0.5378722887535886,
      -0.0727143817594997,
      0.8398845275847805
    ],
    [
      0.5379223228051953,
      -0.07268980160948114,
      0.8398546108522817
    ],
    [
      0.569501389627613,
      -0.07922446289864338,
      0.8181635849209126
    ],
    [
      0.47224158254017157,
      -0.08217560844238504,
      0.87763036473055
    ],
    [
      0.503828554070011,
      -0.06544971466276601,
      0.8613205692158318
    ],
    [
      0.5117660361115975,
      -0.13506461208095438,
      0.8484415565294078
    ],
    [
      0.12115017689363115,
      -0.9892556015600747,
      0.08182902553896491
    ],
    [
      0.12187670634825884,
      -0.9870388772887992,
      0.10440461278203661
    ],
    [
      0.12225453308809821,
      -0.9890045255221911,
      0.08320984098072054
    ],
    [
      0.12310317449316051,
      -0.984385570941205,
      0.12581993543339773
    ],
    [
      0.12337950213751017,
      -0.9866386979907457,
      0.1064029044689396
    ],
    [
      0.12617443481175564,
      -0.9810134682005544,
      0.14728403582552294
    ],
    [
      0.12623461195036612,
      -0.983429338789362,
      0.13012132167350052
    ],
    [
      0.1308865730414804,
      -0.9793555957718658,
      0.15404973881117465
    ],
    [
      0.13115415620148593,
      -0.9770377983833911,
      0.16791583558798834
    ],
    [
      0.13820715161303945,
      -0.9718980518077873,
      0.19055959733174815
    ],
    [
      0.13754755226476545,
      -0.974457725108008,
      0.17751848591991087
    ],
    [
      0.09589581574657649,
      -0.9704119383437075,
      0.22159571846564854
    ],
    [
      0.14974199756439485,
      -0.9663014737863393,
      0.20937716189635755
    ],
    [
      0.1085939979513224,
      -0.9605024590002318,
      0.25620766940795564
    ],
    [
      0.16566798980919495,
      -0.9521472060715386,
      0.25684589761711873
    ],
    [
      0.15603192549239805,
      -0.9642803490711109,
      0.21405010306568711
    ],
    [
      0.256899014324885,
      -0.9410075913517967,
      0.22024443116045506
    ],
    [
      0.2775933700224757,
      -0.9393037937032717,
      0.20161920556883078
    ],
    [
      0.2673483314756895,
      -0.940939864762756,
      0.20774272684599854
    ],
    [
      0.2932693544274041,
      -0.9373331394703254,
      0.18814800398738535
    ],
    [
      0.3241300424995213,
      -0.9247995697491825,
      0.19921212649079753
    ],
    [
      0.3028714928065401,
      -0.9345394037889551,
      0.186828695897933
    ],
    [
      0.2936172346958511,
      -0.937304006856672,
      0.187750148388727
    ],
    [
      0.3597637596275707,
      -0.9049502964154087,
      0.22723335643408377
    ],
    [
      0.32748900238870826,
      -0.9235163665966645,
      0.19967091411255664
    ],
    [
      0.3920406064853381,
      -0.8897488074234117,
      0.23377600936628432
    ],
    [
      0.41917914825329333,
      -0.8823390455401791,
      0.213931415142539
    ],
    [
      0.39487720323772796,
      -0.889762583999077,
      0.22889853315046674
    ],
    [
      0.43877691794736695,
      -0.8739596728032858,
      0.20897202346291066
    ],
    [
      0.4231218434399649,
      -0.8822309805368896,
      0.20648584112448023
    ],
    [
      0.4697975341585013,
      -0.8594401799045897,
      0.20162552929665994
    ],
    [
      0.4540896765944541,
      -0.8684552661665976,
      0.1989673749081696
    ],
    [
      0.4955332719703933,
      -0.850280144409898,
      0.17739913300971702
    ],
    [
      0.4739644152742466,
      -0.8592883698338621,
      0.19230504549284544
    ],
    [
      0.5120901435619654,
      -0.8439204816582705,
      0.15988091038131602
    ],
    [
      0.5077468135443058,
      -0.8470631526999332,
      0.15708974719456925
    ],
    [
      0.5040513923398788,
      -0.8490638612415898,
      0.15818581925618938
    ],
    [
      0.5432083486840282,
      -0.8236653221166175,
      0.1627885962298952
    ],
    [
      0.5479820647333998,
      -0.822389679251743,
      0.15294074731978757
    ],
    [
      0.5668048651683621,
      -0.81171668513277,
      0.1408838809038932
    ],
    [
      0.5649104688553054,
      -0.8130452031703345,
      0.14083202682411652
    ],
    [
      0.5820831640378933,
      -0.8027155624321876,
      0.12971860303291835
    ],
    [
      0.6043515733892907,
      -0.7859720757186378,
      0.13041116490709107
    ],
    [
      0.6028127538110839,
      -0.7872715949914695,
      0.12969278916842344
    ],
    [
      0.6325879929870448,
      -0.7684847521888263,
      0.09624768455345185
    ],
    [
      0.6206294001414042,
      -0.7781000044369049,
      0.09684797765265542
    ],
    [
      0.6573175005751534,
      -0.7489102016056088,
      0.0840667197449708
    ],
    [
      0.6467842005811366,
      -0.7579292875913638,
      0.08493169543737913
    ],
    [
      0.6764386971347958,
      -0.7339656579204843,
      0.061033613787246775
    ],
    [
      0.6629270561613703,
      -0.7451787201456165,
      0.07236292732719242
    ],
    [
      0.6904135300841145,
      -0.7218182990669278,
      0.04803645083599077
    ],
    [
      0.6771835903745264,
      -0.733407951875971,
      0.05945722035681884
    ],
    [
      0.7033918546481142,
      -0.7099336379697891,
      0.03513016501052706
    ],
    [
      0.6914784731720924,
      -0.7209460338694091,
      0.04576393107634698
    ],
    [
      0.715329456768949,
      -0.6984638953762146,
      0.021259236452061785
    ],
    [
      0.7056099088265574,
      -0.7079509511711223,
      0.030333270540456075
    ],
    [
      0.7270008557067121,
      -0.6866007273361381,
      0.007014058967134282
    ],
    [
      0.7177465953181584,
      -0.696120698529346,
      0.015993685885593485
    ],
    [
      0.7373489052691915,
      -0.6754637258380125,
      -0.008083747605856104
    ],
    [
      0.7307104131843262,
      -0.6826863728301559,
      -0.0012682334157096185
    ],
    [
      0.7726495223586283,
      -0.6346123186269432,
      0.016730829205951658
    ],
    [
      0.7465373341988473,
      -0.6649360253430894,
      -0.023282844504333378
    ],
    [
      0.741730769830795,
      -0.6704543291553514,
      -0.018068137786277187
    ],
    [
      0.7806833743657817,
      -0.6249015431645268,
      -0.00561518828267457
    ],
    [
      0.7538396390211534,
      -0.6559197016774608,
      -0.038667086673396106
    ],
    [
      0.7523142208153965,
      -0.6577700617007609,
      -0.036903375036708846
    ],
    [
      0.7910522274957156,
      -0.6115320769159205,
      -0.01627551157313346
    ],
    [
      0.7912578826234447,
      -0.6111140547006149,
      -0.02122675984782341
    ],
    [
      0.7611965600483466,
      -0.6460297523974035,
      -0.05679221767032648
    ],
    [
      0.7673948413267213,
      -0.6370005098628757,
      -0.07304456132781265
    ],
    [
      0.7612487241733161,
      -0.6459343789303517,
      -0.057176551665514705
    ],
    [
      0.7981356128507066,
      -0.6009638339683976,
      -0.042685053138436096
    ],
    [
      0.8045857304149187,
      -0.5906344755490227,
      -0.06158505261524636
    ],
    [
      0.8045329708916034,
      -0.590433897321848,
      -0.0641444591657289
    ],
    [
      0.7695782099594722,
      -0.6319186934468136,
      -0.09180492158945677
    ],
    [
      0.7993800838882722,
      -0.5992038996870185,
      -0.044115395075283954
    ],
    [
      0.09668872977308494,
      -0.9587665512481622,
      0.2672414446573967
    ],
    [
      0.07657821538538248,
      -0.9481231888368232,
      0.308542048541659
    ],
    [
      0.3775242269986911,
      -0.4933925009506322,
      -0.7836065964721846
    ],
    [
      0.39860207620808746,
      -0.5103610060614775,
      -0.7620026432595353
    ],
    [
      0.3861580678473329,
      -0.5093674293334916,
      -0.7690427612107178
    ],
    [
      0.4060617404237715,
      -0.5241194296495048,
      -0.7486071642910556
    ],
    [
      0.4195414736713417,
      -0.5252585911208174,
      -0.740329902356681
    ],
    [
      0.4258685586888915,
      -0.536739579151772,
      -0.7283862951018676
    ],
    [
      0.43998624851450185,
      -0.5380026614682254,
      -0.7190029467055341
    ],
    [
      0.4456786518740132,
      -0.5481437496245596,
      -0.7077492274890099
    ],
    [
      0.45995137033015593,
      -0.5491817446796471,
      -0.6977421789185679
    ],
    [
      0.4654448287897502,
      -0.5578853879193938,
      -0.6871135315935116
    ],
    [
      0.4802106601075356,
      -0.5587166455813574,
      -0.6761903813789433
    ],
    [
      0.4846389060922504,
      -0.5645366331667012,
      -0.66814932501239
    ],
    [
      0.5001983833093541,
      -0.5651299237683484,
      -0.6560714493073824
    ],
    [
      0.5038861173951369,
      -0.5695455705369934,
      -0.6493971233214273
    ],
    [
      0.5200374010827907,
      -0.5698630639309109,
      -0.636252457631663
    ],
    [
      0.5230804125835987,
      -0.5733050224778393,
      -0.6306411286722872
    ],
    [
      0.5395269065488821,
      -0.5733103867716666,
      -0.6166246163830276
    ],
    [
      0.5421775908500226,
      -0.576153643388715,
      -0.6116293315317498
    ],
    [
      0.5581834663081132,
      -0.5758179203954834,
      -0.5973817376616732
    ],
    [
      0.5602217202916131,
      -0.5779031831750797,
      -0.5934471627614508
    ],
    [
      0.5768841940058743,
      -0.5772381027444511,
      -0.5779280227209782
    ],
    [
      0.5784851135072588,
      -0.5788494254717261,
      -0.5747071568038338
    ],
    [
      0.5951176288594947,
      -0.577825728061903,
      -0.5585270233483646
    ],
    [
      0.5961304156479708,
      -0.5788035762709226,
      -0.5564305416090743
    ],
    [
      0.6129940452570372,
      -0.5773897688951792,
      -0.5393137818140614
    ],
    [
      0.6134522319505796,
      -0.5778147874556734,
      -0.5383367259554258
    ],
    [
      0.6304911141535047,
      -0.5759920745380442,
      -0.5203019172008041
    ],
    [
      0.6306398100509631,
      -0.5761249870778977,
      -0.5199744505678883
    ],
    [
      0.6470867502800096,
      -0.5739442280117903,
      -0.5018632888984873
    ],
    [
      0.647683877513707,
      -0.573555663459546,
      -0.5015371329446
    ],
    [
      0.6637349104147932,
      -0.5709946472145919,
      -0.4831367110342063
    ],
    [
      0.6639637045055092,
      -0.5708405540282371,
      -0.48300441092815705
    ],
    [
      0.6795189384657344,
      -0.5679098901816237,
      -0.4644699870823705
    ],
    [
      0.6797469611019906,
      -0.567750681617164,
      -0.4643309513653538
    ],
    [
      0.6945201782680769,
      -0.5645367530638002,
      -0.4460268785831864
    ],
    [
      0.695200621502492,
      -0.5640411902483391,
      -0.4455935721773664
    ],
    [
      0.7093851243240745,
      -0.5605412902686536,
      -0.42727767001292066
    ],
    [
      0.709910541992946,
      -0.5601419871032851,
      -0.42692853810827036
    ],
    [
      0.723707909616262,
      -0.5563310031328683,
      -0.4083413725206362
    ],
    [
      0.7246639139861553,
      -0.5555696695195783,
      -0.4076819275810159
    ],
    [
      0.737896183996191,
      -0.5514722594827928,
      -0.3890855544283325
    ],
    [
      0.7385753991472545,
      -0.5509101218516756,
      -0.38859286845726554
    ],
    [
      0.751232775178416,
      -0.5465359304572925,
      -0.370064581143504
    ],
    [
      0.7514324713850667,
      -0.5463641563280713,
      -0.3699127594826185
    ],
    [
      0.7640328639852719,
      -0.5415675806229372,
      -0.35065415778039943
    ],
    [
      0.7642004515534233,
      -0.5416923939448227,
      -0.35009573003375927
    ],
    [
      0.7762015786324588,
      -0.5366566782914912,
      -0.3309240380716123
    ],
    [
      0.776477603754464,
      -0.5368614864943932,
      -0.32994283624100107
    ],
    [
      0.7875919851815915,
      -0.5317330597575483,
      -0.3113821093746325
    ],
    [
      0.7878614126521561,
      -0.5319319485013868,
      -0.31035914134638776
    ],
    [
      0.7986263102069155,
      -0.52649454985866,
      -0.2915467468767481
    ],
    [
      0.7991535704451418,
      -0.5268984640567124,
      -0.28936409490373777
    ],
    [
      0.809099279341492,
      -0.5213903327498539,
      -0.27112815619937924
    ],
    [
      0.809563291452591,
      -0.5217277032818928,
      -0.2690863815964094
    ],
    [
      0.8185357839130785,
      -0.5163102638561644,
      -0.25183899993960435
    ],
    [
      0.8194201931788009,
      -0.5169781996535613,
      -0.24755623218529396
    ],
    [
      0.8274653366924454,
      -0.5116743925264369,
      -0.23127998747224054
    ],
    [
      0.828412913554027,
      -0.5123803394508536,
      -0.22627070601639157
    ],
    [
      0.8359225184115655,
      -0.5069827550255339,
      -0.2102427866044049
    ],
    [
      0.8370441413887857,
      -0.5077907822540775,
      -0.2037292979041121
    ],
    [
      0.8428901660786161,
      -0.5032710571249234,
      -0.1904059111170792
    ],
    [
      0.8463161030628761,
      -0.5057185873392549,
      -0.16732532419229237
    ],
    [
      0.809245913144011,
      -0.27257338197391334,
      -0.5204083046022796
    ],
    [
      0.8227521246096,
      -0.26919772528102104,
      -0.500611152646356
    ],
    [
      0.8224094435603109,
      -0.26910694010843966,
      -0.5012226670136664
    ],
    [
      0.8368543997947295,
      -0.26563239586212756,
      -0.47865869240279035
    ],
    [
      -0.9630640968181758,
      0.05224223943064434,
      -0.26415581356287154
    ],
    [
      -0.7886783201245426,
      0.47907215810493214,
      0.3853263223479709
    ],
    [
      -0.7886783201245153,
      0.47907215810487247,
      0.38532632234810094
    ],
    [
      -0.8284947799039092,
      0.4069238678628436,
      0.3847198531860763
    ],
    [
      -0.815091775350498,
      0.40937151443474457,
      0.4099272629691478
    ],
    [
      -0.8102216957289825,
      0.416734575365434,
      0.41215664190334683
    ],
    [
      -0.7801470225217908,
      0.47113863151069535,
      0.41158111369280975
    ],
    [
      -0.7803952634637473,
      0.47404072548037934,
      0.407760497534256
    ],
    [
      -0.842325032252821,
      0.39931821621841657,
      0.36198550003615604
    ],
    [
      -0.7964165920121585,
      0.4837726684633425,
      0.3628837516555349
    ],
    [
      -0.7964165920121594,
      0.483772668463376,
      0.36288375165548814
    ],
    [
      -0.7627498220834612,
      -0.3866675629019412,
      0.5183636799691135
    ],
    [
      -0.808286957347737,
      -0.25787018121019484,
      0.5293157509692668
    ],
    [
      -0.7369585484985117,
      -0.29155344935599037,
      0.6098267655355827
    ],
    [
      -0.6813326881109912,
      -0.40040825722349144,
      0.6127470894738686
    ],
    [
      -0.6813326881109644,
      -0.40040825722352086,
      0.6127470894738791
    ],
    [
      -0.6959736783117705,
      -0.4090125315708973,
      0.5901943646928103
    ],
    [
      -0.6631733931907619,
      -0.36275445785543076,
      0.6546833233479098
    ],
    [
      -0.6526054382288774,
      -0.38352571472875013,
      0.6534632110041821
    ],
    [
      -0.7365084009705917,
      -0.29165642481603277,
      0.6103211492020181
    ],
    [
      -0.7247160703138084,
      0.5775234416700527,
      0.3758367887135165
    ],
    [
      -0.7249514246448912,
      0.5765235087926392,
      0.3769165368019375
    ],
    [
      -0.758660364341714,
      0.5304246741434285,
      0.3782646119275967
    ],
    [
      -0.7650382452355413,
      0.5313615524173938,
      0.3638287838248934
    ],
    [
      -0.7310864673459306,
      0.593469787449685,
      0.3366098463326248
    ],
    [
      -0.7293033373172622,
      0.5926179744211136,
      0.34193651248575374
    ],
    [
      -0.765748368878987,
      0.5310665411697688,
      0.3627640616284214
    ],
    [
      -0.6878806381763037,
      0.6185359901609617,
      0.37978080059128827
    ],
    [
      -0.682086346404954,
      0.07062547455507688,
      -0.7278531846408389
    ],
    [
      -0.7036995504896317,
      0.06547127186189225,
      -0.7074747028703404
    ],
    [
      -0.7046191072870455,
      0.06423811574040261,
      -0.7066720442554169
    ],
    [
      -0.7242338012896273,
      0.06041808308987763,
      -0.6869025085886068
    ],
    [
      -0.14950253329274737,
      -0.9643966246529103,
      0.2181470671293208
    ],
    [
      -0.17842931137103654,
      -0.9577243605367881,
      0.2256701798600293
    ],
    [
      -0.13238975682423013,
      -0.9517223741901274,
      0.27694308937745377
    ],
    [
      -0.11327696535741089,
      -0.9542683900998526,
      0.27665893944648084
    ],
    [
      -0.09227665084887456,
      -0.9581847732043748,
      0.2708633605849923
    ],
    [
      -0.08409148075781472,
      -0.9620379915021104,
      0.2596372965707031
    ],
    [
      -0.1219955739164316,
      -0.9701867409949396,
      0.20941529920810092
    ],
    [
      -0.1473564092668514,
      -0.9651559811987731,
      0.2162406543742727
    ],
    [
      -0.06365178669507703,
      -0.9661065787873303,
      0.2501729970927405
    ],
    [
      -0.02691653128264042,
      -0.9802409139665788,
      0.19596747416261928
    ],
    [
      -0.03021337200822035,
      -0.9799790159015902,
      0.19679502164547685
    ],
    [
      -0.048015549174124386,
      -0.9762209900260087,
      0.21139320157031244
    ],
    [
      -0.061521109123383745,
      -0.9691095683597011,
      0.238834247221588
    ],
    [
      -0.014538908229536464,
      -0.9824888811825202,
      0.18575311168379652
    ],
    [
      -0.007176899244456751,
      -0.9856020804986803,
      0.16892907101475396
    ],
    [
      -0.007271192945205791,
      -0.9886923112241551,
      0.1497819864983501
    ],
    [
      -0.007517876780724088,
      -0.9915455530069831,
      0.1295411048308058
    ],
    [
      -0.011733980733600618,
      -0.9905311117554274,
      0.13678607509794385
    ],
    [
      -0.0011265232114112118,
      -0.9938573970295806,
      0.1106625741388697
    ],
    [
      -0.00393109679523304,
      -0.9933126832147183,
      0.11538830028544086
    ],
    [
      0.004201009606721707,
      -0.9960176788665086,
      0.08905691945972961
    ],
    [
      0.009225209724761685,
      -0.997609945686194,
      0.06847840370162842
    ],
    [
      0.004192492340673606,
      -0.996029634565621,
      0.08892350687556645
    ],
    [
      0.013287844847195125,
      -0.9988365157521253,
      0.04635782543941321
    ],
    [
      0.008874363454446348,
      -0.9979017157236704,
      0.06413588253881997
    ],
    [
      0.01757521034107788,
      -0.9995949091582291,
      0.02238592339883764
    ],
    [
      0.01282815628730229,
      -0.9990635370371959,
      0.04132175418585127
    ],
    [
      0.020744215784251036,
      -0.9997838035828566,
      0.0014225346717742686
    ],
    [
      0.017001007703192524,
      -0.9997203155839617,
      0.01643947522824304
    ],
    [
      0.020119064905641183,
      -0.999785281064061,
      -0.004961350116580079
    ],
    [
      0.0244512354572597,
      -0.9994529820096811,
      -0.022268224818558214
    ],
    [
      0.023950049042725418,
      -0.9993387293158332,
      -0.027358714155944514
    ],
    [
      0.02816193618195505,
      -0.9986243657061596,
      -0.04422987190184865
    ],
    [
      0.03158803600085997,
      -0.9973358578891637,
      -0.06575243379597637
    ],
    [
      0.027608902749368135,
      -0.9983786504668987,
      -0.04977769360737928
    ],
    [
      0.03441516289511208,
      -0.9955352719671008,
      -0.08789265516693416
    ],
    [
      0.030807317477200644,
      -0.9968312272366688,
      -0.07333766832737158
    ],
    [
      0.03744965683680891,
      -0.9930633485011606,
      -0.11145720733298246
    ],
    [
      0.03359080911346591,
      -0.9948313590808028,
      -0.09582392463547644
    ],
    [
      0.04097015493744396,
      -0.9899517898040625,
      -0.1353399433579573
    ],
    [
      0.03676765452172525,
      -0.9923143484222375,
      -0.11815402446095943
    ],
    [
      0.04499239530483357,
      -0.9865325374682906,
      -0.15725532385617125
    ],
    [
      0.04060324300325672,
      -0.989434008204043,
      -0.13918232670457997
    ],
    [
      0.04481418675825617,
      -0.9862338919726029,
      -0.15916783277336002
    ],
    [
      0.04966459298853423,
      -0.9825625055299577,
      -0.1791768705217695
    ],
    [
      0.0541603202166984,
      -0.9778548724984771,
      -0.20215466367366283
    ],
    [
      0.04936134796586697,
      -0.9820050183222456,
      -0.18228988265100912
    ],
    [
      0.05396318575501451,
      -0.9774400911405646,
      -0.20420294516557405
    ],
    [
      0.05882372454680226,
      -0.972720787984847,
      -0.22439705446502678
    ],
    [
      0.06329451286282468,
      -0.9672770430140595,
      -0.24570088868263162
    ],
    [
      0.05864254379211825,
      -0.9722902656011975,
      -0.22630221270403508
    ],
    [
      0.06673952615553454,
      -0.9613846263072275,
      -0.26699332566310946
    ],
    [
      0.06282962778937114,
      -0.9660697902610664,
      -0.25052265010730745
    ],
    [
      0.06973756739270053,
      -0.9551676636138332,
      -0.28773495804409965
    ],
    [
      0.06619464291469108,
      -0.9598237575509474,
      -0.2726841097133764
    ],
    [
      0.07259543973371557,
      -0.9479937361912597,
      -0.30989962612433836
    ],
    [
      0.0690409100136608,
      -0.9530783285534968,
      -0.2947457419304955
    ],
    [
      0.07491157514473269,
      -0.941003541400722,
      -0.33000089542398936
    ],
    [
      0.07185921652321503,
      -0.9457148623072654,
      -0.3169537067330493
    ],
    [
      0.07238384329104132,
      -0.9332368968225104,
      -0.35189412276920584
    ],
    [
      0.07654085203945282,
      -0.948127833383879,
      0.3085370472599133
    ],
    [
      -0.06412695533772218,
      -0.9396222021404296,
      0.33615152958730327
    ],
    [
      -0.046397912372320445,
      -0.9437365922603187,
      0.32742705776458303
    ],
    [
      0.003905100389148238,
      -0.9469616440244483,
      0.3213228826857255
    ],
    [
      0.030109504930137712,
      -0.9345495722219362,
      0.3545567863864095
    ],
    [
      0.005722068664875477,
      -0.9439488729354018,
      0.33004209309447063
    ],
    [
      0.02035544926421167,
      -0.9363831607517834,
      0.35038868695457576
    ],
    [
      0.03844883416324358,
      -0.9297309661237639,
      0.3662267300212533
    ],
    [
      0.04484206354905181,
      -0.9283841490602813,
      0.3689065750434385
    ],
    [
      0.055256335383619425,
      -0.9218726595196702,
      0.38353296733149717
    ],
    [
      0.05526785338681014,
      -0.9216323293383436,
      0.38410846632220047
    ],
    [
      0.06732230651225703,
      -0.9136129160579713,
      0.4009727505179373
    ],
    [
      0.06706310302189547,
      -0.911929354971173,
      0.40483007763126366
    ],
    [
      0.07837648410693246,
      -0.9040267726361456,
      0.4202293672461631
    ],
    [
      0.07773722435239207,
      -0.901719884263688,
      0.4252742341989073
    ],
    [
      0.08864622223069854,
      -0.893770734820355,
      0.4396768368505537
    ],
    [
      0.08770980347970159,
      -0.8910002205948072,
      0.4454498818874656
    ],
    [
      0.09817418839807511,
      -0.8830668633675833,
      0.45886244513417884
    ],
    [
      0.09683392100899291,
      -0.879767667726396,
      0.46543747438864636
    ],
    [
      0.10776101516447192,
      -0.8712575447105391,
      0.47885055538830235
    ],
    [
      0.1437192996219067,
      -0.8740440152885195,
      0.4641032452531558
    ],
    [
      0.10639038534468997,
      -0.8681771448542118,
      0.48471592820846876
    ],
    [
      0.11782803765793727,
      -0.8590268352213586,
      0.49818615989533127
    ],
    [
      0.15105326600305713,
      -0.8617097694236789,
      0.48439568960675095
    ],
    [
      0.15132103663295676,
      -0.8647835500191854,
      0.47880200029713993
    ],
    [
      0.15890154361248907,
      -0.84904838620594,
      0.5038522971255138
    ],
    [
      0.15922760849181425,
      -0.851237936147016,
      0.5000405431144022
    ],
    [
      0.11617863674678172,
      -0.8558328324123831,
      0.5040363948453099
    ],
    [
      0.12806800201391907,
      -0.8460823036706993,
      0.5174391966941099
    ],
    [
      0.12627354261191104,
      -0.8428940148418878,
      0.5230532211734877
    ],
    [
      0.1383543649114905,
      -0.8327175064128671,
      0.5361339610801339
    ],
    [
      0.16719228053458132,
      -0.8352705622740855,
      0.5238032351255374
    ],
    [
      0.16762215450061205,
      -0.8372161332680939,
      0.5205496705562249
    ],
    [
      0.14786418550392091,
      -0.8187400389821626,
      0.5547980995035481
    ],
    [
      0.1749276428873614,
      -0.8202170194703432,
      0.544650677705498
    ],
    [
      0.17571763111947972,
      -0.8229942103197395,
      0.5401887113721897
    ],
    [
      0.1360036773273297,
      -0.8289984292451715,
      0.5424616152894894
    ],
    [
      0.18312118817771583,
      -0.8080289381409896,
      0.5599605928698254
    ],
    [
      0.14457242555537703,
      -0.8142239032809461,
      0.5622617265073051
    ],
    [
      0.1566059506702275,
      -0.8036375675179529,
      0.5741439160075652
    ],
    [
      0.18220399413683344,
      -0.8051529436336546,
      0.5643850120960388
    ],
    [
      0.190799585037214,
      -0.7919662414481904,
      0.579987060852269
    ],
    [
      0.15298795073244256,
      -0.7988399615176546,
      0.5817640439328988
    ],
    [
      0.16520041802598526,
      -0.7878921015856859,
      0.5932409781386742
    ],
    [
      0.189848834998095,
      -0.7891568390305825,
      0.5841137759556142
    ],
    [
      0.17284084375741168,
      -0.7714441495235369,
      0.612372408665783
    ],
    [
      0.19694151509827976,
      -0.7717750370331916,
      0.6046299131230688
    ],
    [
      0.198365393346328,
      -0.7757509441800753,
      0.599050618333942
    ],
    [
      0.16091163381577633,
      -0.7824398843509891,
      0.6015773212809375
    ],
    [
      0.2028046071638058,
      -0.7535733764929965,
      0.6252978950500945
    ],
    [
      0.2048449036225771,
      -0.7591007448174115,
      0.6179034104757054
    ],
    [
      0.1675196757457377,
      -0.765092441614729,
      0.6217481113940398
    ],
    [
      0.17939146923040897,
      -0.7539413539766109,
      0.6319739990943218
    ],
    [
      0.17302450329923455,
      -0.7468440055043477,
      0.642095438934334
    ],
    [
      0.18516686877043778,
      -0.7353639964113226,
      0.6518842101874534
    ],
    [
      0.20802529103107312,
      -0.7347427588977232,
      0.645661332696019
    ],
    [
      0.21037052072094084,
      -0.7412444515213633,
      0.6374173727632418
    ],
    [
      0.21541496062366838,
      -0.7225551713934487,
      0.6568945265657854
    ],
    [
      0.1778244100993871,
      -0.727535043039787,
      0.6626245092976115
    ],
    [
      0.1898991449494025,
      -0.7158890156822139,
      0.6718937653922954
    ],
    [
      0.21256463926703809,
      -0.7144511921657702,
      0.6666151574530718
    ],
    [
      0.18109760787725984,
      -0.7070824332907899,
      0.6835481613995534
    ],
    [
      0.19310990540969725,
      -0.6952518579135182,
      0.6923390921365475
    ],
    [
      0.21548885594418632,
      -0.6933079312862742,
      0.6876690085930967
    ],
    [
      0.21909116502059897,
      -0.703556906300141,
      0.6760227370490516
    ],
    [
      0.18329565393514297,
      -0.6855688818733768,
      0.7045551869480319
    ],
    [
      0.19545305907024765,
      -0.6734535080411125,
      0.7129224882181804
    ],
    [
      0.21751583390641416,
      -0.6707528602218321,
      0.7090680238906762
    ],
    [
      0.2216766831789143,
      -0.6829231432959737,
      0.6960426915682272
    ],
    [
      0.22287619426716065,
      -0.6616787508672117,
      0.7158962443537423
    ],
    [
      0.18383544827161127,
      -0.6627473356969388,
      0.7259273358852006
    ],
    [
      0.19598641509422882,
      -0.6503919388430702,
      0.733879861412251
    ],
    [
      0.21797207384201722,
      -0.6469190452650485,
      0.7307420364932952
    ],
    [
      0.19470116868825016,
      -0.6259830697047809,
      0.755140153451271
    ],
    [
      0.21708969482600354,
      -0.6217637919032422,
      0.7525170107568695
    ],
    [
      0.22255447878152512,
      -0.6391100202840349,
      0.7362118485509618
    ],
    [
      0.18261571439246954,
      -0.6385929344481799,
      0.7475630842476042
    ],
    [
      0.17981797766227584,
      -0.613027893136659,
      0.7693258718812714
    ],
    [
      0.1920445321529826,
      -0.6000528024112377,
      0.7765665019742753
    ],
    [
      0.21432823897002776,
      -0.5952199224857182,
      0.7744524839240315
    ],
    [
      0.22061457174133936,
      -0.6157242979177623,
      0.7564474864054107
    ],
    [
      0.17539318823293826,
      -0.5858652015892839,
      0.7912011091298045
    ],
    [
      0.18781177155993806,
      -0.572459393957792,
      0.7981334354185365
    ],
    [
      0.20969135619160129,
      -0.5669801919413331,
      0.7965946253174798
    ],
    [
      0.21691018627383868,
      -0.5908330746146372,
      0.7770883148214642
    ],
    [
      0.20276683138528398,
      -0.5362482620482619,
      0.8193432818667585
    ],
    [
      0.21121682218306065,
      -0.5644361512019174,
      0.7979970458862962
    ],
    [
      0.13995470826091683,
      -0.5323805462085738,
      0.8348554567434188
    ],
    [
      0.14222226293371662,
      -0.530084078841138,
      0.835932830606117
    ],
    [
      0.14274083075774321,
      -0.5298399241469677,
      0.8359992284772306
    ],
    [
      0.18099242516160946,
      -0.5259781571144312,
      0.8310166786970199
    ],
    [
      -0.3895076837337895,
      -0.7610637405451811,
      0.5187154780221189
    ],
    [
      -0.3915755837730399,
      -0.7672614680987611,
      0.507915742779978
    ],
    [
      -0.3827409625292678,
      -0.7771217281058054,
      0.49959100803358764
    ],
    [
      -0.3840755298510659,
      -0.7821754031872863,
      0.49059925195461634
    ],
    [
      -0.37475405450658217,
      -0.7924209894377168,
      0.48127785543221047
    ],
    [
      -0.3757299467231029,
      -0.7967798624841714,
      0.4732534816302561
    ],
    [
      -0.36610137417919286,
      -0.8071524598415997,
      0.4631141224317841
    ],
    [
      -0.3667769017611098,
      -0.8108629740851865,
      0.4560437935026059
    ],
    [
      -0.35681992699570686,
      -0.8213312355302274,
      0.4450781293673827
    ],
    [
      -0.35722272545008343,
      -0.8242705534323513,
      0.4392834838305892
    ],
    [
      -0.3462610397934238,
      -0.8354439576006273,
      0.4267747485849863
    ],
    [
      -0.3463252885695359,
      -0.8366770285601148,
      0.42429982839619956
    ],
    [
      -0.3341936996448718,
      -0.848615266017613,
      0.410081335102598
    ],
    [
      -0.33335751320858864,
      -0.8490131343101632,
      0.40993836872903017
    ],
    [
      -0.3212503868200705,
      -0.8604698843405332,
      0.3954614609679994
    ],
    [
      -0.3530197375214728,
      -0.8610759497465,
      0.36595802175718634
    ],
    [
      -0.31788754393654184,
      -0.8619968291999114,
      0.39485310668562806
    ],
    [
      -0.30339809720307437,
      -0.8748423888794227,
      0.37762466714093096
    ],
    [
      -0.30092181880806845,
      -0.8828154837656647,
      0.3606700439305149
    ],
    [
      -0.24486430992707126,
      -0.8946522913381912,
      0.373682682669753
    ],
    [
      -0.21530612465259344,
      -0.8962026406677649,
      0.3878970218333817
    ],
    [
      -0.1254357306341955,
      -0.9281946700181146,
      0.35031490409377225
    ],
    [
      -0.12003160402330905,
      -0.9299724705291895,
      0.3474818241195177
    ],
    [
      -0.06481789501167444,
      -0.938767831750384,
      0.3383985794251186
    ],
    [
      -0.06585389243987366,
      -0.9385307453259762,
      0.3388558763373967
    ],
    [
      -0.04192484722335079,
      -0.9283203384022171,
      0.3694098760104985
    ],
    [
      -0.027430033557776005,
      -0.9274450463462707,
      0.3729521139057709
    ],
    [
      -0.010520752375697886,
      -0.9232020630750747,
      0.3841708793016137
    ],
    [
      -0.008892396337684303,
      -0.92223195800685,
      0.386534786168367
    ],
    [
      0.005752187291321146,
      -0.9182106838268573,
      0.39605056804350175
    ],
    [
      0.010930151159637209,
      -0.9147515919636712,
      0.40386886088872553
    ],
    [
      0.019594157611114,
      -0.9121705244224543,
      0.40934215927799994
    ],
    [
      0.027693008624142333,
      -0.9062508159584107,
      0.42183237885214314
    ],
    [
      0.032278601975403165,
      -0.9047985316338996,
      0.4246147771894577
    ],
    [
      0.04252172889739641,
      -0.8966815617107271,
      0.4406291858917063
    ],
    [
      0.04410560803830122,
      -0.8961591493302538,
      0.4415353603181152
    ],
    [
      0.05560305957368579,
      -0.8863961293611156,
      0.4595761108017667
    ],
    [
      0.055603293033012105,
      -0.8863544179357932,
      0.45965652351466324
    ],
    [
      0.06744959859528259,
      -0.8756583466660792,
      0.4781976699685642
    ],
    [
      0.06750574322257234,
      -0.8756396611178179,
      0.47822396270935785
    ],
    [
      0.07959327336625971,
      -0.8639811199315095,
      0.49719365969080753
    ],
    [
      0.07957541469574558,
      -0.8638901574754493,
      0.4973545507915289
    ],
    [
      0.09132059632054994,
      -0.851938528986629,
      0.5156173886863766
    ],
    [
      0.09122944403308679,
      -0.8515923355891245,
      0.5162050779557228
    ],
    [
      0.10282592892269621,
      -0.8392292289765277,
      0.5339673487889006
    ],
    [
      0.11383278466928133,
      -0.8261274123640281,
      0.5518655594210897
    ],
    [
      0.1026152040770449,
      -0.8385573811821353,
      0.5350622752140031
    ],
    [
      0.11320287355326174,
      -0.8244683164451416,
      0.5544701115456072
    ],
    [
      0.12398855274044485,
      -0.8121195275135618,
      0.5701655126544213
    ],
    [
      0.12297321759517144,
      -0.8098439777304378,
      0.5736116451816794
    ],
    [
      0.13382769636801367,
      -0.7970097451991598,
      0.588952980926662
    ],
    [
      0.14264356104837997,
      -0.7812820890573133,
      0.6076603589256728
    ],
    [
      0.13220841606202685,
      -0.793892876963397,
      0.5935107704407313
    ],
    [
      0.14011349013468907,
      -0.7769137660798585,
      0.6138185480725451
    ],
    [
      0.150223152599548,
      -0.7644887457043523,
      0.6268891146881075
    ],
    [
      0.14680502338158213,
      -0.7589752591821046,
      0.6343538768379919
    ],
    [
      0.15674273439523476,
      -0.746595612640261,
      0.6465498483493893
    ],
    [
      0.16207098407828258,
      -0.7277800050435759,
      0.6663852192078316
    ],
    [
      0.15247587368718662,
      -0.7399199746154325,
      0.6551866444826443
    ],
    [
      0.1568906340726641,
      -0.719803836800308,
      0.6762157684259019
    ],
    [
      0.1661819822142813,
      -0.7079057526930654,
      0.6864786916513846
    ],
    [
      0.15982403679992252,
      -0.6985441175919856,
      0.6974900666236123
    ],
    [
      0.16912576531738704,
      -0.6866213279664705,
      0.7070697472579128
    ],
    [
      0.1614673728242119,
      -0.6756367592331334,
      0.7193352883643315
    ],
    [
      0.16998392861993797,
      -0.6643868456782862,
      0.7278018846503415
    ],
    [
      0.16113019609259258,
      -0.6515871609355132,
      0.7412632674098727
    ],
    [
      0.16919611389865644,
      -0.640733717278596,
      0.7488878277712525
    ],
    [
      0.15906704594774917,
      -0.6262940048395921,
      0.7631864086810258
    ],
    [
      0.1672838239963964,
      -0.6153691186988245,
      0.7702836944794916
    ],
    [
      0.15565603620257518,
      -0.5994340309864348,
      0.7851433250617728
    ],
    [
      0.16431171496330071,
      -0.5882829154537549,
      0.7917858749125607
    ],
    [
      0.12758950371631758,
      -0.5409349054359236,
      0.8313304677578298
    ],
    [
      -0.4281299471594356,
      -0.803103521100219,
      0.4144025612151655
    ],
    [
      -0.4346627601889711,
      -0.7895545683767213,
      0.4332111130388442
    ],
    [
      -0.42071502654994075,
      -0.8166943375737388,
      0.394980031659924
    ],
    [
      -0.42113030193642415,
      -0.8163850507722624,
      0.3951768182301524
    ],
    [
      -0.4281546842421276,
      -0.8031260796989776,
      0.4143332794609617
    ],
    [
      -0.4124712283399466,
      -0.8295122201450338,
      0.3765328171910023
    ],
    [
      -0.4137756222536504,
      -0.82855833511945,
      0.37720129868902846
    ],
    [
      -0.39292592270678467,
      -0.8492609131013978,
      0.3526543927745719
    ],
    [
      -0.405455360553204,
      -0.8405073487927388,
      0.3593791135056024
    ],
    [
      -0.37989801870898016,
      -0.8673920644294342,
      0.3214163996217923
    ],
    [
      -0.3855206455984301,
      -0.8636648840158078,
      0.3247411275698401
    ],
    [
      -0.3939308427817439,
      -0.8525747434438518,
      0.3434163623750553
    ],
    [
      -0.3677041823432123,
      -0.878663973931535,
      0.30453777303013246
    ],
    [
      -0.3733797715416104,
      -0.8749919207646426,
      0.30818287557899166
    ],
    [
      -0.33547165888136765,
      -0.8953490585396502,
      0.2929314415687486
    ],
    [
      -0.36697161629070096,
      -0.8794498827452566,
      0.30314969334694186
    ],
    [
      -0.3147568998305263,
      -0.9105528843506792,
      0.26799540818778034
    ],
    [
      -0.32608764430308257,
      -0.9053155663730346,
      0.272159095963258
    ],
    [
      -0.3354093334774829,
      -0.8971183909309777,
      0.28753986100992035
    ],
    [
      -0.3014459664993644,
      -0.9201146895068222,
      0.25003857189447454
    ],
    [
      -0.3034762571828754,
      -0.919495475525394,
      0.24986042466665792
    ],
    [
      -0.27020205502584865,
      -0.932842493288472,
      0.23831855189043777
    ],
    [
      -0.27237611175285303,
      -0.9322409899398719,
      0.23819737702654242
    ],
    [
      -0.24775533876259284,
      -0.9448603882108633,
      0.2141404653601223
    ],
    [
      -0.2525435899465436,
      -0.9436166908286191,
      0.21403101636575525
    ],
    [
      -0.22764843519028927,
      -0.9518923625020493,
      0.2051270829648777
    ],
    [
      -0.19454278369461875,
      -0.9617513883953985,
      0.1928402764773788
    ],
    [
      -0.205074990064666,
      -0.9596344341857377,
      0.1924733778344323
    ],
    [
      -0.22484338771601575,
      -0.9533544637667607,
      0.20139691511137264
    ],
    [
      -0.16655060800776428,
      -0.9706775853983264,
      0.17333759020339115
    ],
    [
      -0.18596313206420015,
      -0.965524104381342,
      0.1821562992912413
    ],
    [
      -0.12169770817351418,
      -0.9704437347905137,
      0.20839535846835253
    ],
    [
      -0.15056833806763736,
      -0.9747307598663661,
      0.16501248844219657
    ],
    [
      -0.16522874743395127,
      -0.9711851146281292,
      0.17175253752464617
    ],
    [
      -0.13274611063845396,
      -0.9799235771752619,
      0.14875568226592828
    ],
    [
      -0.13740354026963655,
      -0.9792277289323245,
      0.14910842367690846
    ],
    [
      -0.10788769741536942,
      -0.9755825821528209,
      0.1913083117547274
    ],
    [
      -0.09175219739735792,
      -0.9784660257565339,
      0.18489394450054403
    ],
    [
      -0.08838065073670102,
      -0.9795478598101423,
      0.18076186245092518
    ],
    [
      -0.11250604414965129,
      -0.9838901142576032,
      0.13893391629100962
    ],
    [
      -0.07440906353337541,
      -0.9817270183309563,
      0.17514380589417444
    ],
    [
      -0.06781989257003652,
      -0.9836603281400849,
      0.16677176324284998
    ],
    [
      -0.09777439143895712,
      -0.9870376392469908,
      0.12726691277967217
    ],
    [
      -0.10576013260575234,
      -0.9856825643261743,
      0.13131898847688023
    ],
    [
      -0.08864935789116976,
      -0.9891579227520265,
      0.11708072088255697
    ],
    [
      -0.05674878442255904,
      -0.9851182702589703,
      0.16223923406049578
    ],
    [
      -0.039382331827794756,
      -0.9893508867771537,
      0.14012085773740238
    ],
    [
      -0.07715727125749425,
      -0.9908107664304183,
      0.11108906614813481
    ],
    [
      -0.06296540008761378,
      -0.9942530897199676,
      0.08658032094018026
    ],
    [
      -0.07181943782085096,
      -0.9927390573673808,
      0.09649420878177682
    ],
    [
      -0.055961880179118746,
      -0.9960332961345971,
      0.0691804955031971
    ],
    [
      -0.05760244220286333,
      -0.9958093781715704,
      0.07103267556424876
    ],
    [
      -0.049290426717211566,
      -0.9975461466219304,
      0.0497206113575987
    ],
    [
      -0.04298156215923057,
      -0.9986695138776439,
      0.028491882453477967
    ],
    [
      -0.0494748049092401,
      -0.9976540700416281,
      0.04731384795772486
    ],
    [
      -0.03788122828169782,
      -0.9992451782152008,
      0.008607343233638735
    ],
    [
      -0.043359728722837845,
      -0.9987625724112786,
      0.024356885586772865
    ],
    [
      -0.03411053145871545,
      -0.9993155776116485,
      -0.014312511530174401
    ],
    [
      -0.03890468110023155,
      -0.999242702658166,
      -0.0006685603139214063
    ],
    [
      -0.030201023891495014,
      -0.9988816616794776,
      -0.03637752213044752
    ],
    [
      -0.03503138070271389,
      -0.9991283330757538,
      -0.02270190325340801
    ],
    [
      -0.026427711096219695,
      -0.9979397060365117,
      -0.058462972914273964
    ],
    [
      -0.0311719161962999,
      -0.998495616463331,
      -0.045108929760785815
    ],
    [
      -0.022972383432232804,
      -0.9965455515861448,
      -0.07980747592368133
    ],
    [
      -0.027430036258502544,
      -0.9973515431741066,
      -0.0673609118041429
    ],
    [
      -0.01965013532904623,
      -0.9945900679143718,
      -0.10200229893309144
    ],
    [
      -0.024149485190666394,
      -0.9956761677625596,
      -0.08969822358714345
    ],
    [
      -0.01696220716399893,
      -0.9920948993045416,
      -0.12433822542579939
    ],
    [
      -0.02106679909314729,
      -0.9933480198770135,
      -0.1132073380235808
    ],
    [
      -0.013941312847510903,
      -0.9889752464960421,
      -0.14742320581977833
    ],
    [
      -0.018386757584680623,
      -0.9906064939733572,
      -0.13550166509432676
    ],
    [
      -0.0152311195548741,
      -0.9873646372510749,
      -0.15773105624181458
    ],
    [
      -0.010265110629796717,
      -0.9852146339185268,
      -0.17101681968900395
    ],
    [
      -0.006675790131304995,
      -0.9812796382935535,
      -0.1924726092112733
    ],
    [
      -0.011291856698911923,
      -0.9836061456496504,
      -0.1799762323545244
    ],
    [
      -0.00268113945936396,
      -0.9766856515187989,
      -0.2146577499381251
    ],
    [
      -0.007642736371032921,
      -0.9794952153319156,
      -0.20132240740326696
    ],
    [
      0.0008684363803334072,
      -0.9715675701616031,
      -0.23676085493284568
    ],
    [
      -0.003734409631539925,
      -0.9744977090253631,
      -0.224366372901606
    ],
    [
      0.0044526273343610595,
      -0.9662805090142056,
      -0.25745320353234846
    ],
    [
      -0.00004051465728421945,
      -0.9693980559083444,
      -0.24549421084759795
    ],
    [
      0.007512160908994448,
      -0.9600494450171713,
      -0.2797295668332163
    ],
    [
      0.0032017423663460013,
      -0.963270472921491,
      -0.26851395651516236
    ],
    [
      0.010686397802031355,
      -0.9532241084726952,
      -0.30207548713600074
    ],
    [
      0.006210099583892069,
      -0.9567891124501395,
      -0.29071640641703106
    ],
    [
      0.007825611615770002,
      -0.945678986857376,
      -0.325007713168851
    ],
    [
      -0.3011668346763359,
      -0.2534083262742005,
      0.9192838287851826
    ],
    [
      -0.24007860317771482,
      -0.2387878850734739,
      0.9409264637783203
    ],
    [
      -0.35430230861124173,
      -0.37094843255976007,
      0.8584096542410282
    ],
    [
      -0.36072725427709934,
      -0.3532841475256163,
      0.8631721491850878
    ],
    [
      -0.37031120121008093,
      -0.40039954548205364,
      0.8381824492532111
    ],
    [
      -0.3762091252777202,
      -0.3830837169945604,
      0.843631175236788
    ],
    [
      -0.3844116466909598,
      -0.4282760165388313,
      0.8178064193597256
    ],
    [
      -0.3898797940275473,
      -0.41120768406863023,
      0.8239550878366799
    ],
    [
      -0.3976177944252191,
      -0.45441059495577846,
      0.7971267783410363
    ],
    [
      -0.4024948984104673,
      -0.4380144782205705,
      0.8038290699039871
    ],
    [
      -0.4099356605141108,
      -0.4791000548806675,
      0.7761545539724682
    ],
    [
      -0.4142841630141405,
      -0.4634359685678804,
      0.7833235189327737
    ],
    [
      -0.42127187050401504,
      -0.5024198117475772,
      0.7550525437912102
    ],
    [
      -0.4251394806652152,
      -0.48756597553316383,
      0.7625849732863252
    ],
    [
      -0.4325446787375533,
      -0.524253921340203,
      0.7335277273936187
    ],
    [
      -0.43580291665337967,
      -0.510476381917863,
      0.7412757120939923
    ],
    [
      -0.4426909213205646,
      -0.5449461757407558,
      0.712080342184697
    ],
    [
      -0.4454656581902005,
      -0.5320997184224159,
      0.7200209976299005
    ],
    [
      -0.45206316399410545,
      -0.5647855963608193,
      0.6904028721717431
    ],
    [
      -0.4545856303604701,
      -0.5524852166817305,
      0.698650119886854
    ],
    [
      -0.4603150180673356,
      -0.5840487149006239,
      0.6685784791365919
    ],
    [
      -0.46277912174945446,
      -0.5718341264762659,
      0.677378192939461
    ],
    [
      -0.4674767247874789,
      -0.6025411584995947,
      0.6468459353632349
    ],
    [
      -0.469834393546094,
      -0.5905837905030502,
      0.656099404843674
    ],
    [
      -0.4733989767348581,
      -0.6207657916183319,
      0.6249345892034261
    ],
    [
      -0.47581287066736644,
      -0.6085493984350377,
      0.6350352287642267
    ],
    [
      -0.47766538396695857,
      -0.6385679701376625,
      0.6033794233100458
    ],
    [
      -0.48017549691529704,
      -0.6260346339637264,
      0.6144201569285066
    ],
    [
      -0.4801838578060974,
      -0.6561702529422316,
      0.5821203156188429
    ],
    [
      -0.48295490873396335,
      -0.6429521858773242,
      0.5944468376611486
    ],
    [
      -0.48160474313545787,
      -0.6732412096666568,
      0.5610732082322292
    ],
    [
      -0.48454057835952535,
      -0.6598815500161381,
      0.5742619331553465
    ],
    [
      -0.4818085260648289,
      -0.6901497718459414,
      0.5399572544491203
    ],
    [
      -0.4850301246278732,
      -0.6762804903082273,
      0.5544280626302508
    ],
    [
      -0.4811064892826197,
      -0.7062242006678804,
      0.5194072817752614
    ],
    [
      -0.48443912076292794,
      -0.6926571998465276,
      0.5343638664573129
    ],
    [
      -0.4681356524821176,
      -0.7259381287923109,
      0.5038480366545655
    ],
    [
      -0.4824538656513324,
      -0.7113526486416045,
      0.511092630340783
    ],
    [
      -0.4831968391419475,
      -0.7084172964134586,
      0.5144567511321789
    ],
    [
      -0.4651646697221939,
      -0.7412062131992703,
      0.4839784907999943
    ],
    [
      -0.47245211664509695,
      -0.7340029722132292,
      0.4878817830783531
    ],
    [
      -0.46191679646453726,
      -0.7557469953340502,
      0.4641975357404371
    ],
    [
      -0.4688572603774711,
      -0.7489141679886254,
      0.46829524701542424
    ],
    [
      -0.45844342508821445,
      -0.769833489727617,
      0.4440563298582576
    ],
    [
      -0.4651638514871626,
      -0.7632407348994567,
      0.4484263282410682
    ],
    [
      -0.4544264488340044,
      -0.7835901635078601,
      0.4236544089866654
    ],
    [
      -0.46120653633578096,
      -0.7769250964789375,
      0.42857429379553963
    ],
    [
      -0.456479769577293,
      -0.7901026890451103,
      0.4091014064145309
    ],
    [
      -0.44955342948216026,
      -0.7968840951040694,
      0.403580788704067
    ],
    [
      -0.4441769601365737,
      -0.8095830777531251,
      0.3837734596081521
    ],
    [
      -0.45109720148258214,
      -0.8028862546582072,
      0.38972423185567906
    ],
    [
      -0.4379542502667629,
      -0.822235746241399,
      0.36348927394921476
    ],
    [
      -0.4454429260472178,
      -0.8151628320173603,
      0.3702568796550979
    ],
    [
      -0.43070490919690513,
      -0.8344537981403093,
      0.3437733846051752
    ],
    [
      -0.4386634455353686,
      -0.827094374686835,
      0.3514104109334723
    ],
    [
      -0.4222389282548539,
      -0.8463647448690395,
      0.3246244077529571
    ],
    [
      -0.43094142492619963,
      -0.838567121309956,
      0.33330867276521653
    ],
    [
      -0.41355951824248327,
      -0.8576044125396313,
      0.30575021907367295
    ],
    [
      -0.4221763610023729,
      -0.850098707122528,
      0.3148004262376413
    ],
    [
      -0.4051290327732343,
      -0.8681844038042278,
      0.2865768793802481
    ],
    [
      -0.4131733994125159,
      -0.8613434831275428,
      0.29559287219352554
    ],
    [
      -0.40453946898656906,
      -0.870989773595109,
      0.2787913777806004
    ],
    [
      -0.37197157643966516,
      -0.883520069212409,
      0.2846566943177172
    ],
    [
      -0.3948974933320712,
      -0.8788218432317478,
      0.2678210925576995
    ],
    [
      -0.3840839348229254,
      -0.889534106498732,
      0.24740372751121023
    ],
    [
      -0.3940799829159152,
      -0.8817462057444202,
      0.25927706362173747
    ],
    [
      -0.36202152750905603,
      -0.8929254317401132,
      0.2676277021755076
    ],
    [
      -0.36978997098339905,
      -0.8996465477467216,
      0.2321453563772121
    ],
    [
      -0.3741867343514393,
      -0.8978895240725612,
      0.23190232943236044
    ],
    [
      -0.38339029536931285,
      -0.8910324489504527,
      0.24304949358924827
    ],
    [
      -0.3581115535865493,
      -0.8946066550401996,
      0.2672733580916982
    ],
    [
      -0.34885442734996147,
      -0.9027434033483596,
      0.25170406478511886
    ],
    [
      -0.3426932109504685,
      -0.9052543659945291,
      0.2511491509368506
    ],
    [
      -0.3333637160837616,
      -0.9124904900673263,
      0.23712810532603654
    ],
    [
      -0.3513456317844992,
      -0.9097370701753038,
      0.2212119123709336
    ],
    [
      -0.3167667915271002,
      -0.9191550347235157,
      0.23412138289365897
    ],
    [
      -0.3163419007696413,
      -0.9215363459680441,
      0.22516341815960153
    ],
    [
      -0.3385549100422977,
      -0.9186770430382756,
      0.20350199871426852
    ],
    [
      -0.348991635962265,
      -0.9132546479402278,
      0.21016847062286134
    ],
    [
      -0.3004999198015599,
      -0.9317451171237697,
      0.20384021908168376
    ],
    [
      -0.2998295200053195,
      -0.933336198502967,
      0.1974482197878974
    ],
    [
      -0.3158304285412065,
      -0.9314754500678093,
      0.1805675118299248
    ],
    [
      -0.3172709061710362,
      -0.9309546146983975,
      0.18072818670359014
    ],
    [
      -0.3359403276260159,
      -0.9217766535977863,
      0.19357659248109516
    ],
    [
      -0.2702522802575923,
      -0.9440183560389968,
      0.18919050842207094
    ],
    [
      -0.2692361848993212,
      -0.9452366302728256,
      0.18449821010332934
    ],
    [
      -0.2964067803448508,
      -0.9427248187068467,
      0.15301286468706637
    ],
    [
      -0.3093980966746374,
      -0.9369008270367751,
      0.16275643788163502
    ],
    [
      -0.2943012903260877,
      -0.9442363696676712,
      0.1476632273425471
    ],
    [
      -0.25530946050440967,
      -0.9521760838481491,
      0.16786239818538812
    ],
    [
      -0.281088100593291,
      -0.9497698901868001,
      0.13757410875382584
    ],
    [
      -0.22625496658055685,
      -0.9644624709801985,
      0.13645817003170174
    ],
    [
      -0.24217890231849265,
      -0.9633864232892393,
      0.11504772354886741
    ],
    [
      -0.2616920174759032,
      -0.9577621522155829,
      0.11920129098615623
    ],
    [
      -0.2789855951139009,
      -0.9510972033946271,
      0.13259391921902725
    ],
    [
      -0.24553395411327558,
      -0.9553010321280603,
      0.16466030302584442
    ],
    [
      -0.23014992694120845,
      -0.9619245417663863,
      0.14741840820089008
    ],
    [
      -0.21092317687150017,
      -0.9678929670566527,
      0.13672826255278459
    ],
    [
      -0.19147706171899986,
      -0.9729545383533225,
      0.12921300682644682
    ],
    [
      -0.18255599794138178,
      -0.9758350546434266,
      0.12008019713794138
    ],
    [
      -0.2062512130224663,
      -0.9743045260193547,
      0.09050484906877582
    ],
    [
      -0.22954282616772978,
      -0.9693086912151402,
      0.0880383557872561
    ],
    [
      -0.230436592580164,
      -0.9690319440638588,
      0.08874721507665544
    ],
    [
      -0.24119803307615542,
      -0.964353729119132,
      0.10883654705207178
    ],
    [
      -0.16569074999286876,
      -0.9796514602706233,
      0.11326778781470094
    ],
    [
      -0.16364795695488651,
      -0.9805374393543074,
      0.1084697018018842
    ],
    [
      -0.18918922055494947,
      -0.9789669157175033,
      0.07636240407667672
    ],
    [
      -0.1450575318081148,
      -0.9853661698409927,
      0.08950879173930223
    ],
    [
      -0.14402445362271468,
      -0.9857408669584083,
      0.08701666487957353
    ],
    [
      -0.17726764427166963,
      -0.9822468596620577,
      0.06137824515574406
    ],
    [
      -0.18867925453109846,
      -0.9794209115016499,
      0.07165763757525126
    ],
    [
      -0.13003402758008012,
      -0.9888423840172567,
      0.07267662101646932
    ],
    [
      -0.12656004563391896,
      -0.9898406004341168,
      0.06479305966974865
    ],
    [
      -0.16794854423025618,
      -0.9848083926604615,
      0.04411027359307315
    ],
    [
      -0.17590554811001613,
      -0.9830426660681936,
      0.05181075982508674
    ],
    [
      -0.1656443667293762,
      -0.985780581725072,
      0.02825930757472182
    ],
    [
      -0.11989688408369546,
      -0.991105960221053,
      0.057738313114649734
    ],
    [
      -0.11446375028094904,
      -0.992371146692717,
      0.04579909478802813
    ],
    [
      -0.16048754593595807,
      -0.9867768286073232,
      0.02269885730884414
    ],
    [
      -0.10518589517242001,
      -0.9942030174876907,
      0.022277510524008497
    ],
    [
      -0.1552665573325102,
      -0.9878703763085271,
      0.002101377205387764
    ],
    [
      -0.15735246494421087,
      -0.9875313270475534,
      0.0046989228211311955
    ],
    [
      -0.11373482082360505,
      -0.9924911737443789,
      0.045007339087394654
    ],
    [
      -0.10574182456519586,
      -0.9940137184313145,
      0.027484433921309507
    ],
    [
      -0.09852910544825681,
      -0.9951037226544239,
      0.0077843778732556695
    ],
    [
      -0.09714285184463037,
      -0.9952540071184496,
      -0.005720808523395391
    ],
    [
      -0.15192087904579332,
      -0.9882669561470483,
      -0.01576292795776292
    ],
    [
      -0.09500182672645024,
      -0.9954223036417352,
      -0.010444631693770587
    ],
    [
      -0.09308080666952,
      -0.99524103781274,
      -0.02883123450654921
    ],
    [
      -0.14857733927583705,
      -0.9881920405492115,
      -0.03743347764900281
    ],
    [
      -0.15238019331817684,
      -0.9881686618954879,
      -0.01740610042473147
    ],
    [
      -0.14920872244804362,
      -0.9880059766425218,
      -0.0397611275504037
    ],
    [
      -0.09122285044554379,
      -0.9952861078899033,
      -0.03292347183936639
    ],
    [
      -0.08927667686998872,
      -0.9946964602377449,
      -0.051074719358523084
    ],
    [
      -0.14508654197962237,
      -0.9876160903258435,
      -0.05970220654121939
    ],
    [
      -0.1454441625595288,
      -0.9875920565063211,
      -0.05922774268003752
    ],
    [
      -0.13911411709401042,
      -0.986744722043641,
      -0.0835590566256681
    ],
    [
      -0.1408042721317648,
      -0.9866837273407976,
      -0.08142099944310877
    ],
    [
      -0.08754636210131882,
      -0.9946474991617613,
      -0.05488157153433873
    ],
    [
      -0.08586217000405637,
      -0.9938273742778414,
      -0.07024840139252977
    ],
    [
      -0.0810218383851711,
      -0.9923676319407928,
      -0.09296206097602457
    ],
    [
      -0.13375121822884145,
      -0.9854322255181157,
      -0.10504256533765068
    ],
    [
      -0.13511706778931823,
      -0.9854268219552687,
      -0.10333129517796552
    ],
    [
      -0.08277508634159167,
      -0.9935966609448083,
      -0.07690227851286159
    ],
    [
      -0.0781918361993084,
      -0.9920161659775137,
      -0.09894424283936208
    ],
    [
      -0.07616347091091344,
      -0.990152083277777,
      -0.11746479336158692
    ],
    [
      -0.1290236249276469,
      -0.9836715024691604,
      -0.1254722257736526
    ],
    [
      -0.12972865437605505,
      -0.9836877740741878,
      -0.1246147638554427
    ],
    [
      -0.07518487197704196,
      -0.9899807179364706,
      -0.11952160114299866
    ],
    [
      -0.07296756550015424,
      -0.9875360613190617,
      -0.13945702556492146
    ],
    [
      -0.12375967336677891,
      -0.9812578660530111,
      -0.14770424353158979
    ],
    [
      -0.12460648607012781,
      -0.9812952564492712,
      -0.14674073496958573
    ],
    [
      -0.07177184895036193,
      -0.9872735135319167,
      -0.1419148025281035
    ],
    [
      -0.06948310938490261,
      -0.9843090220304977,
      -0.16219693788592576
    ],
    [
      -0.11917577986959897,
      -0.9782885847809474,
      -0.16955405739693727
    ],
    [
      -0.06843440731090053,
      -0.9840318746172618,
      -0.16431068630263634
    ],
    [
      -0.06607222326642033,
      -0.9805365806205354,
      -0.1848850328653473
    ],
    [
      -0.12747324300921986,
      -0.972855760904064,
      -0.193137880263006
    ],
    [
      -0.06280915955768832,
      -0.9762646371836954,
      -0.20727365404277634
    ],
    [
      -0.06523457057062719,
      -0.9802782061602199,
      -0.18654514019337856
    ],
    [
      -0.06144921943977099,
      -0.9757856687857523,
      -0.20991979902473498
    ],
    [
      -0.0589047913834347,
      -0.9711394080311943,
      -0.2311243728404595
    ],
    [
      -0.06495930309961898,
      -0.9644121997097638,
      -0.25629943033839653
    ],
    [
      -0.21371972481920923,
      -0.2972703107811896,
      0.9305666239185975
    ],
    [
      -0.2175342213846302,
      -0.3123300183345403,
      0.9247317568753267
    ],
    [
      -0.2472600927272709,
      -0.3338318592902222,
      0.9096256022492631
    ],
    [
      -0.2593029339381359,
      -0.3491143889561436,
      0.9004893846541742
    ],
    [
      -0.28243673090522986,
      -0.39987830330714863,
      0.8719672216200348
    ],
    [
      -0.3033519111983294,
      -0.42403847739457945,
      0.853328182858862
    ],
    [
      -0.29863194903967316,
      -0.4329484202201248,
      0.8505143293570452
    ],
    [
      -0.3152199565847643,
      -0.4546316456716498,
      0.8330344805136141
    ],
    [
      -0.31080068165629493,
      -0.4636494741549422,
      0.8297180854952049
    ],
    [
      -0.3256356998566934,
      -0.4834338247842732,
      0.8125596150642057
    ],
    [
      -0.3214528338567501,
      -0.49254456507440547,
      0.8087446612010056
    ],
    [
      -0.33522830392589714,
      -0.5111898553287104,
      0.7913955496816863
    ],
    [
      -0.3318858476082127,
      -0.5192422308613597,
      0.7875527219478685
    ],
    [
      -0.34411818964418006,
      -0.5367448751125133,
      0.7703814708288774
    ],
    [
      -0.34120287144749495,
      -0.5442973978891791,
      0.7663686731378397
    ],
    [
      -0.35288217135939254,
      -0.5610295039789184,
      0.7488124390004811
    ],
    [
      -0.35036444049293364,
      -0.5679645308405963,
      0.7447556985650361
    ],
    [
      -0.3610671060433337,
      -0.5835146677922433,
      0.7274209080063618
    ],
    [
      -0.35867084908746993,
      -0.5903439577191993,
      0.7230831443197286
    ],
    [
      -0.3687791269075311,
      -0.6049565425299811,
      0.7057120781221548
    ],
    [
      -0.36633628946246766,
      -0.612073672671615,
      0.7008306088101116
    ],
    [
      -0.37480650881164385,
      -0.6247169230741597,
      0.6850174063315336
    ],
    [
      -0.3718059272360891,
      -0.633386960278789,
      0.6786614111771111
    ],
    [
      -0.37872789352848546,
      -0.6439674188306177,
      0.6647338912287443
    ],
    [
      -0.3749165518238721,
      -0.6547495988918681,
      0.6563082674471163
    ],
    [
      -0.38004504032962133,
      -0.6631921224914203,
      0.6447805642124934
    ],
    [
      -0.3760908423249897,
      -0.674356256582883,
      0.6354520576147351
    ],
    [
      -0.3801679693017248,
      -0.6813498605273445,
      0.6254875559724359
    ],
    [
      -0.37552469875093486,
      -0.6941591817206967,
      0.6141044138099583
    ],
    [
      -0.3784554481033966,
      -0.6994942458468608,
      0.6062006877495181
    ],
    [
      -0.3757616452933169,
      -0.7169640395821066,
      0.5871675671156974
    ],
    [
      -0.3735561394333631,
      -0.7126941890444884,
      0.5937363081316998
    ],
    [
      -0.37192482356912043,
      -0.7331634958450679,
      0.5693357655841742
    ],
    [
      -0.37057047686525174,
      -0.7305353443486554,
      0.5735814086363429
    ],
    [
      -0.3661438587383926,
      -0.7483551432928838,
      0.5530852142439241
    ],
    [
      -0.36690526110231075,
      -0.7497769784006403,
      0.5506496272911214
    ],
    [
      -0.3607662689448237,
      -0.7653540736794625,
      0.5329923461869627
    ],
    [
      -0.35316839189891613,
      -0.7803565731871297,
      0.5160578510663059
    ],
    [
      -0.3588485586967325,
      -0.7670681417413012,
      0.5318215657970489
    ],
    [
      -0.34933967959385165,
      -0.7836979673139921,
      0.5135944745508679
    ],
    [
      -0.34394247052998544,
      -0.7952741856953986,
      0.4992419719256892
    ],
    [
      -0.3395994092716542,
      -0.7989803400890011,
      0.49628888499905754
    ],
    [
      -0.33425590750751666,
      -0.8096032262487579,
      0.4825096935232794
    ],
    [
      -0.32773676054297507,
      -0.815002953945532,
      0.4778690205996344
    ],
    [
      -0.3230014000400499,
      -0.8233890668972275,
      0.4665839046584018
    ],
    [
      -0.30775128555625336,
      -0.8355370539500778,
      0.45515599272655755
    ],
    [
      -0.3046057870326796,
      -0.8371310588105806,
      0.45434227723257076
    ],
    [
      -0.2974528241854108,
      -0.8469373329198111,
      0.44070281538787587
    ],
    [
      -0.28367318259179664,
      -0.8571170702805977,
      0.42997657298025677
    ],
    [
      -0.2792149571264788,
      -0.8592513656244959,
      0.42863282467549946
    ],
    [
      -0.26923294460537883,
      -0.866187451612242,
      0.4209904039388631
    ],
    [
      -0.20969145682928786,
      -0.8915689689517836,
      0.40141532922281936
    ],
    [
      -0.19323230531340588,
      -0.8890332489242921,
      0.41506765531703904
    ],
    [
      -0.14829601809569035,
      -0.902965277112705,
      0.40331377281930053
    ],
    [
      -0.1349412741253309,
      -0.910111120399025,
      0.39177621298831283
    ],
    [
      -0.0953671052654262,
      -0.9142119412002315,
      0.3938548486437581
    ],
    [
      -0.07495022586512066,
      -0.9117557180970244,
      0.4038365686266496
    ],
    [
      -0.06326077282239052,
      -0.9124691480908458,
      0.4042253435947331
    ],
    [
      -0.03817332298621284,
      -0.9051266122874303,
      0.4234248612697064
    ],
    [
      -0.05357271592559009,
      -0.9076456672758855,
      0.4163043439404261
    ],
    [
      -0.03272683332101226,
      -0.9021053358734428,
      0.4302730730239131
    ],
    [
      -0.022430167367457163,
      -0.9001996176099585,
      0.43489945510054673
    ],
    [
      -0.013928267631492656,
      -0.8950311988625446,
      0.4457859984605412
    ],
    [
      -0.0070178731532434,
      -0.8936265297537609,
      0.44875647602753965
    ],
    [
      0.007589554298385737,
      -0.8858561188823585,
      0.4638979794138324
    ],
    [
      0.0033224276310456257,
      -0.8867844017026212,
      0.4621713820343709
    ],
    [
      0.01942753004738827,
      -0.8773797790268768,
      0.4794030605148517
    ],
    [
      0.021621410625948245,
      -0.8768786697252188,
      0.48022527337019105
    ],
    [
      0.03483509693317163,
      -0.8667571861655079,
      0.49751230763882387
    ],
    [
      0.035268883524556795,
      -0.8666520690398483,
      0.49766484413094847
    ],
    [
      0.04841263634379871,
      -0.8561575044232841,
      0.5144419736587765
    ],
    [
      0.061166261802144066,
      -0.8446398567019918,
      0.5318291087253407
    ],
    [
      0.04838447581981862,
      -0.8552388716440921,
      0.5159703624517417
    ],
    [
      0.06108004834231953,
      -0.8432285978724271,
      0.5340737396882573
    ],
    [
      0.07367879328984302,
      -0.8323869441205207,
      0.5492753505092447
    ],
    [
      0.07344999619010582,
      -0.8302352594451368,
      0.5525527233067808
    ],
    [
      0.08558194583963671,
      -0.8194441799080214,
      0.5667335939938372
    ],
    [
      0.0966419630842114,
      -0.8052335841655301,
      0.5850292350841657
    ],
    [
      0.08498988815000681,
      -0.8158802146505709,
      0.5719407261718539
    ],
    [
      0.09585601103305891,
      -0.8009276729619428,
      0.5910384825310424
    ],
    [
      0.10691483867740893,
      -0.7905938725948432,
      0.602934943328111
    ],
    [
      0.10563747327110687,
      -0.7849505637689338,
      0.6104861478196938
    ],
    [
      0.11630728420858716,
      -0.7748152095448967,
      0.6213968190278422
    ],
    [
      0.11414497768353664,
      -0.7675605675993492,
      0.6307310830585329
    ],
    [
      0.12437516665668787,
      -0.7577516745968342,
      0.6405803755695413
    ],
    [
      0.13103144769577227,
      -0.7395358825917911,
      0.6602404395929792
    ],
    [
      0.12122642282626939,
      -0.7489953998303941,
      0.6513908545885908
    ],
    [
      0.1266946416458743,
      -0.7290527289622242,
      0.6726296054820641
    ],
    [
      0.13593890122341562,
      -0.72003252182831,
      0.6804952480684453
    ],
    [
      0.1307094955802311,
      -0.7079672752409887,
      0.6940442096531111
    ],
    [
      0.139448601177347,
      -0.6993113715836916,
      0.7010832284425418
    ],
    [
      0.13332605173182077,
      -0.685327794862554,
      0.7159259581258616
    ],
    [
      0.14081130077709644,
      -0.6776390499218999,
      0.7217877081208899
    ],
    [
      0.13347521172599563,
      -0.6613064299159351,
      0.7381450898072418
    ],
    [
      0.14013136859636957,
      -0.6542935728295777,
      0.7431440776116126
    ],
    [
      0.13189470166186715,
      -0.6358354097595079,
      0.7604716427122615
    ],
    [
      0.13784646660140404,
      -0.6293575108858417,
      0.7647924392520402
    ],
    [
      0.1292564567981045,
      -0.6092172134095377,
      0.7823983354158657
    ],
    [
      0.1352452324859873,
      -0.6027049898504852,
      0.7864193679577951
    ],
    [
      0.11196276231980369,
      -0.5472848270369243,
      0.8294236902505757
    ],
    [
      0.20821146121011697,
      -0.9627023065682884,
      -0.17277805517149805
    ],
    [
      0.2085454527337747,
      -0.9599008488689396,
      -0.18734768342510724
    ],
    [
      0.2156302138811268,
      -0.9571154902852466,
      -0.1934775157934679
    ],
    [
      0.21599108402956027,
      -0.9538453431215305,
      -0.20863104520925319
    ],
    [
      0.22238858930118333,
      -0.951124905731235,
      -0.21425388922112712
    ],
    [
      0.2228065249358768,
      -0.9473316912850979,
      -0.23004329838731358
    ],
    [
      0.22884168594979265,
      -0.9445672159626896,
      -0.23542356997579966
    ],
    [
      0.22944278617648037,
      -0.940093577947616,
      -0.2521508924696154
    ],
    [
      0.23395820404430004,
      -0.9378072094739193,
      -0.2564784525434957
    ],
    [
      0.23481652962618343,
      -0.932694554868988,
      -0.27375548347394973
    ],
    [
      0.23905254515865895,
      -0.9303640434975468,
      -0.27798673928815804
    ],
    [
      0.240126555237768,
      -0.924855839705227,
      -0.29492526719964585
    ],
    [
      0.24416183065455563,
      -0.9224742343706382,
      -0.2990422835883259
    ],
    [
      0.24537883786676906,
      -0.9163521954387209,
      -0.31636668573316934
    ],
    [
      0.2491337896753388,
      -0.9140000646949898,
      -0.3202127989002916
    ],
    [
      0.25050956703563027,
      -0.9070217931066143,
      -0.3384618496275218
    ],
    [
      0.25370557219249884,
      -0.9048782299952977,
      -0.34180238664914836
    ],
    [
      0.2553752061980073,
      -0.8968805281547867,
      -0.3610939244519579
    ],
    [
      0.2567212260849901,
      -0.8958912203453191,
      -0.3625922412098669
    ],
    [
      0.25865636495881683,
      -0.8867446583963856,
      -0.38311981894933184
    ],
    [
      0.2614662220240127,
      -0.8759120185881752,
      -0.40547940814951117
    ],
    [
      0.2593059334791131,
      -0.8862333707186757,
      -0.3838630556424257
    ],
    [
      0.26162839833527046,
      -0.875776060626841,
      -0.4056684271883292
    ],
    [
      0.2639661135141972,
      -0.8645333144529702,
      -0.427672817837622
    ],
    [
      0.26380898361503263,
      -0.864408513091266,
      -0.428021895070042
    ],
    [
      0.266144771710663,
      -0.8532100725215787,
      -0.4485527088746667
    ],
    [
      0.26541206250252314,
      -0.8525504425106293,
      -0.4502379149439627
    ],
    [
      0.26759488921974006,
      -0.8404993472821882,
      -0.4711197538648646
    ],
    [
      0.26784102029029877,
      -0.8407519754212814,
      -0.47052874904203773
    ],
    [
      0.2702634531699272,
      -0.8275670472875529,
      -0.4920268774410884
    ],
    [
      0.270951877088242,
      -0.8268680876737285,
      -0.49282273272359234
    ],
    [
      0.2736929943848773,
      -0.8138644055603064,
      -0.5125591421354307
    ],
    [
      0.27665528985528864,
      -0.8107828557063131,
      -0.5158420412178537
    ],
    [
      0.27916112151882794,
      -0.8001732384347836,
      -0.5308407074868517
    ],
    [
      0.28496811269866007,
      -0.7939644580272212,
      -0.5370415385559153
    ],
    [
      0.28703500258831377,
      -0.7864811150533775,
      -0.5468622888383533
    ],
    [
      0.24537699966301288,
      -0.7860011486803814,
      -0.567443673248278
    ],
    [
      0.26066092345727226,
      -0.7670675077920125,
      -0.5862280456206039
    ],
    [
      0.297365735369975,
      -0.7751569932370582,
      -0.5574094144016203
    ],
    [
      0.3036728787155912,
      -0.75617335730144,
      -0.5796418173665997
    ],
    [
      0.29779999981938854,
      -0.7509894469503783,
      -0.5893471054283179
    ],
    [
      0.2897046281471635,
      -0.7520288725523935,
      -0.5920505073705196
    ],
    [
      0.34824317324901055,
      -0.751317524057368,
      -0.5605788707485915
    ],
    [
      0.30869776480560396,
      -0.7344779503669839,
      -0.604357369797654
    ],
    [
      0.36384121819942944,
      -0.7534472064661364,
      -0.547664929503004
    ],
    [
      0.3691917467597543,
      -0.7559586977249381,
      -0.5405773778641658
    ],
    [
      0.3974383530473481,
      -0.7382135478854123,
      -0.5450536792330125
    ],
    [
      0.42463019739239427,
      -0.7352237026636289,
      -0.5283325680895321
    ],
    [
      0.42647988705850853,
      -0.7344086297776056,
      -0.5279762025344907
    ],
    [
      0.44417428681110077,
      -0.7322822199987339,
      -0.5162092145725178
    ],
    [
      0.44640715765373357,
      -0.7312264234764605,
      -0.5157795723032649
    ],
    [
      0.46489458767911446,
      -0.7289394320202565,
      -0.5025140065636499
    ],
    [
      0.46643364984801816,
      -0.7281592099717182,
      -0.5022188917422555
    ],
    [
      0.4848960182092974,
      -0.7256951215930214,
      -0.48810085230499084
    ],
    [
      0.48522370607790255,
      -0.7255197118909043,
      -0.4880359645740922
    ],
    [
      0.5035475226765919,
      -0.7228495786178691,
      -0.47321071321160535
    ],
    [
      0.5095942244450289,
      -0.7274610950436521,
      -0.4594715242647364
    ],
    [
      0.5218728294325602,
      -0.7201822726666058,
      -0.4571501329287967
    ],
    [
      0.5401723435193421,
      -0.716962619786057,
      -0.44065682920651056
    ],
    [
      0.5402022161008505,
      -0.716990921733227,
      -0.4405741525235765
    ],
    [
      0.5572418431636177,
      -0.7135771494263285,
      -0.42460473389283976
    ],
    [
      0.5574172587408693,
      -0.7134634309129886,
      -0.4245655808089979
    ],
    [
      0.5740532300117738,
      -0.7097478012444263,
      -0.40831476552012175
    ],
    [
      0.5743024880137878,
      -0.7095801187557176,
      -0.40825568866556516
    ],
    [
      0.590654987323754,
      -0.7055422744931735,
      -0.39158241131666693
    ],
    [
      0.59069889504816,
      -0.7055116736331043,
      -0.39157131375561616
    ],
    [
      0.6063930197352803,
      -0.7012423653356705,
      -0.3748955196781659
    ],
    [
      0.6064625230278009,
      -0.7013205939893397,
      -0.3746366674648837
    ],
    [
      0.6219366368426842,
      -0.6967250080307418,
      -0.357448014314493
    ],
    [
      0.6221413833935425,
      -0.6969863577062462,
      -0.3565811495866681
    ],
    [
      0.6364741124174211,
      -0.6923124219566535,
      -0.3400061979243444
    ],
    [
      0.636943214807777,
      -0.6929790590864937,
      -0.3377622903432706
    ],
    [
      0.6504846342476583,
      -0.6881432718613335,
      -0.32144762870438004
    ],
    [
      0.6508531691046713,
      -0.6886532698422825,
      -0.3196041711272537
    ],
    [
      0.6640468251922138,
      -0.6835175559958008,
      -0.3030603316134737
    ],
    [
      0.6644291098307448,
      -0.6840709185488428,
      -0.30096666992420723
    ],
    [
      0.6771051002690622,
      -0.6787010838599745,
      -0.2844178650452867
    ],
    [
      0.6775373608482528,
      -0.6793593859686448,
      -0.28180480718236584
    ],
    [
      0.6893191182427693,
      -0.6739450461011841,
      -0.2657766507063476
    ],
    [
      0.6898862455554096,
      -0.6748878428738022,
      -0.26188426400722753
    ],
    [
      0.7004316666798961,
      -0.6696508573536836,
      -0.246907289397254
    ],
    [
      0.70113117854017,
      -0.6710343808017054,
      -0.24109734602633875
    ],
    [
      0.7106788649478626,
      -0.6659122683589969,
      -0.2269281863616616
    ],
    [
      0.711363470946861,
      -0.6674386649037991,
      -0.2201990935355292
    ],
    [
      0.7199616750814755,
      -0.6624693809853017,
      -0.20685624397350671
    ],
    [
      0.7206420445683049,
      -0.6643806487737883,
      -0.19817516780700195
    ],
    [
      0.7279005750859109,
      -0.6598920841760031,
      -0.18628792239823563
    ],
    [
      0.7336516036306793,
      -0.6589832706341834,
      -0.16582030489179325
    ],
    [
      0.7285763884711736,
      -0.6622723708316681,
      -0.1748477995151869
    ],
    [
      0.7349972294985893,
      -0.6668545080252571,
      -0.12281749775903349
    ],
    [
      0.18695714193233218,
      -0.9817861639319905,
      0.03380762328529611
    ],
    [
      0.191934374147859,
      -0.9811896045444382,
      0.02069192969247923
    ],
    [
      0.19073081850991205,
      -0.9816272079586681,
      0.005457056515071083
    ],
    [
      0.19434908445122984,
      -0.9809246410255932,
      -0.003909220098672174
    ],
    [
      0.193433795360639,
      -0.9809983103193056,
      -0.01502271490262717
    ],
    [
      0.19789003469168417,
      -0.9795746383766616,
      -0.035679994660269346
    ],
    [
      0.1985327686852456,
      -0.9796916391611783,
      -0.028089711921882834
    ],
    [
      0.2034430432322484,
      -0.9778132767227868,
      -0.04992117812159722
    ],
    [
      0.2026827625148797,
      -0.9775361596246235,
      -0.057816558231007904
    ],
    [
      0.20885160563355495,
      -0.9751709732460999,
      -0.07363816783801856
    ],
    [
      0.20841610974694666,
      -0.9749060963181326,
      -0.07823572431880722
    ],
    [
      0.21518499625503557,
      -0.9718714803836517,
      -0.09571438242818843
    ],
    [
      0.21493470107152804,
      -0.9716720250308836,
      -0.09826774673144188
    ],
    [
      0.2221171797432725,
      -0.9679866589223111,
      -0.11690075539241063
    ],
    [
      0.22188612118993437,
      -0.9677889503107227,
      -0.11895838297385983
    ],
    [
      0.22986455502893216,
      -0.9631495109815743,
      -0.13966139709062558
    ],
    [
      0.22985014104324247,
      -0.9631347909784602,
      -0.13978657685657608
    ],
    [
      0.23772366564687114,
      -0.9579990786211522,
      -0.16039084809439053
    ],
    [
      0.24599562485516815,
      -0.9521887916612911,
      -0.18117024476090346
    ],
    [
      0.23829597136557004,
      -0.9577747099018259,
      -0.16088081023979434
    ],
    [
      0.24652087131279649,
      -0.9519657011699942,
      -0.18162809199873467
    ],
    [
      0.2542625987117246,
      -0.9457748859926409,
      -0.2021395456657795
    ],
    [
      0.2545223760671249,
      -0.9456550584913528,
      -0.20237309710250811
    ],
    [
      0.26201977713423225,
      -0.9391057928227183,
      -0.22231946895704124
    ],
    [
      0.2620002331911182,
      -0.9390590410551366,
      -0.22253987332702177
    ],
    [
      0.2644834205585991,
      -0.9367692072403637,
      -0.2291549096482199
    ],
    [
      0.25808696837303,
      -0.9337298618288854,
      -0.24807188854247314
    ],
    [
      0.26564315573787073,
      -0.9268456400150672,
      -0.2653127840769943
    ],
    [
      0.26436843827903556,
      -0.9261487533376167,
      -0.26899408085138665
    ],
    [
      0.27172185302281854,
      -0.9188754694037788,
      -0.28606835951889337
    ],
    [
      0.27015120549936805,
      -0.9179973777850637,
      -0.2903431427586763
    ],
    [
      0.2772822780755813,
      -0.9103600653571232,
      -0.3071792468058189
    ],
    [
      0.27557332876134283,
      -0.9093724690479139,
      -0.31161041865299316
    ],
    [
      0.28251472445657244,
      -0.9013394345869055,
      -0.32828745654347574
    ],
    [
      0.2807689486252982,
      -0.9003134603363938,
      -0.3325725043128991
    ],
    [
      0.2878668770619553,
      -0.8914939894566046,
      -0.3498158484879502
    ],
    [
      0.2859636413209694,
      -0.8903262072200582,
      -0.354321944817983
    ],
    [
      0.29034954604657875,
      -0.879978165583863,
      -0.37594623180210884
    ],
    [
      0.29251245976863816,
      -0.881430894114374,
      -0.37083155176014365
    ],
    [
      0.2967407816784539,
      -0.8704579595162368,
      -0.3927439995769374
    ],
    [
      0.29504851972496193,
      -0.8690745348523232,
      -0.397058967760869
    ],
    [
      0.29984414135694487,
      -0.8576221144852905,
      -0.4178250825880318
    ],
    [
      0.3012281128837738,
      -0.8589862065794743,
      -0.4140100492919044
    ],
    [
      0.30582050275231926,
      -0.8470270771961671,
      -0.4347630970917805
    ],
    [
      0.30419036546654854,
      -0.845200363618816,
      -0.43943664719268555
    ],
    [
      0.3105562569225661,
      -0.8328198370437078,
      -0.4582203949113757
    ],
    [
      0.31014999099477614,
      -0.8321306243384028,
      -0.4597451545412091
    ],
    [
      0.3163714884900498,
      -0.8195169959131724,
      -0.4778085125654834
    ],
    [
      0.316134077872586,
      -0.8189296338803157,
      -0.47897129304406316
    ],
    [
      0.32211078585289177,
      -0.8066016386720759,
      -0.49561924713307326
    ],
    [
      0.32565210894439234,
      -0.8034951113350579,
      -0.4983435662278913
    ],
    [
      0.33045925612355226,
      -0.7937542966651198,
      -0.5106376372418406
    ],
    [
      0.3411674931919116,
      -0.7839328365941439,
      -0.5187042021216005
    ],
    [
      0.34184645479805975,
      -0.78270797213038,
      -0.5201050198811259
    ],
    [
      0.3690559322318209,
      -0.7566478101069055,
      -0.5397052995338528
    ],
    [
      -0.7141832941169457,
      0.1196602373546527,
      -0.6896547324571161
    ],
    [
      -0.7100013234851817,
      0.12013293190625736,
      -0.6938776544326074
    ],
    [
      -0.731117579422359,
      0.10852723674944863,
      -0.6735643428382472
    ],
    [
      -0.2338265469568085,
      0.9044991050840238,
      -0.35666022323838636
    ],
    [
      -0.224020135704007,
      0.8982510684094953,
      -0.3781005116372609
    ],
    [
      -0.22610788714311233,
      0.8968935973946449,
      -0.380075121948504
    ],
    [
      -0.23217564880000988,
      0.8852007450773324,
      -0.40313038711914306
    ],
    [
      -0.23299743747007556,
      0.8742327799328096,
      -0.4259451145668067
    ],
    [
      -0.22880955415690502,
      0.8827623857919824,
      -0.4103373711439962
    ],
    [
      -0.2296689252605599,
      0.8717173287748798,
      -0.43285226519361947
    ],
    [
      -0.23390546612692703,
      0.862594601858704,
      -0.4485741697424955
    ],
    [
      -0.23488385021773972,
      0.8502960807838856,
      -0.4709842374331166
    ],
    [
      -0.23065692983908034,
      0.859970355916474,
      -0.4552453927961299
    ],
    [
      -0.23570133856754064,
      0.8376066710580067,
      -0.4928082219247095
    ],
    [
      -0.23164023744467224,
      0.847478710138137,
      -0.47762185488017117
    ],
    [
      -0.23634395574704392,
      0.8234029787700886,
      -0.5158963744148474
    ],
    [
      -0.2320566287130445,
      0.8343227701806394,
      -0.5000552331777363
    ],
    [
      -0.2372639664550338,
      0.8085355517330601,
      -0.5384942634845246
    ],
    [
      -0.23302598096881072,
      0.8201030948090596,
      -0.5226182221068512
    ],
    [
      -0.23887650967896665,
      0.7935884291994806,
      -0.5596029111470878
    ],
    [
      -0.23467513916808214,
      0.8055622014576459,
      -0.5440561723196902
    ],
    [
      -0.23614469109877653,
      0.7903081328490371,
      -0.5653748668083257
    ],
    [
      -0.2410000021565455,
      0.7761025580588343,
      -0.5827382073753863
    ],
    [
      -0.24450215954155838,
      0.7587003441096892,
      -0.6038149400498082
    ],
    [
      -0.2393799097736113,
      0.7739265357340852,
      -0.5862891573988176
    ],
    [
      -0.24807429174644752,
      0.7397065197707482,
      -0.6255344997545269
    ],
    [
      -0.2426417285863188,
      0.755986355319746,
      -0.6079552797032114
    ],
    [
      -0.2369478356433352,
      0.7197606652596209,
      -0.6525337599917472
    ],
    [
      -0.43503076013820413,
      0.807481599165488,
      -0.39839892663349696
    ],
    [
      -0.4346227078981732,
      0.8071400829394101,
      -0.399534714751824
    ],
    [
      -0.4379531636385642,
      0.7956817838332706,
      -0.41843461297421053
    ],
    [
      -0.44012072516460893,
      0.7934240264200779,
      -0.4204426971418701
    ],
    [
      -0.4427098860321516,
      0.7839743912823515,
      -0.4351920387861729
    ],
    [
      -0.4490552785129608,
      0.7772725733036675,
      -0.44067755063032443
    ],
    [
      -0.4508529670822477,
      0.7703729997909649,
      -0.4508403744854753
    ],
    [
      -0.461373175999042,
      0.755906493891703,
      -0.46447837943321946
    ],
    [
      -0.4602013122464475,
      0.7601686736159605,
      -0.45864838368798266
    ],
    [
      -0.473155366979306,
      0.7409287010103938,
      -0.4766011526609319
    ],
    [
      -0.47244767862320963,
      0.7433131354187859,
      -0.4735807995236232
    ],
    [
      -0.4843995719587424,
      0.7276617257085954,
      -0.4856598270651752
    ],
    [
      -0.48741227160190864,
      0.7172394556541083,
      -0.49799281194096134
    ],
    [
      -0.4957716129734693,
      0.7110371968843994,
      -0.49863474850481543
    ],
    [
      -0.5092558321994265,
      0.6939483026217381,
      -0.5090130161982875
    ],
    [
      -0.5288068328094079,
      0.6786105823962753,
      -0.5097558347227337
    ],
    [
      -0.5367438080705546,
      0.6637188836685677,
      -0.5209446496122886
    ],
    [
      -0.5318768875895321,
      0.6769195989387686,
      -0.5088092304790163
    ],
    [
      -0.5553293802241936,
      0.6376803349733615,
      -0.5338286896075131
    ],
    [
      -0.565212528192471,
      0.6086265556467993,
      -0.5568738759681483
    ],
    [
      -0.5894051206749389,
      0.6034859803749286,
      -0.5370347057808014
    ],
    [
      -0.6205367276544189,
      0.5726070142000294,
      -0.5357754911535921
    ],
    [
      -0.6275142283604568,
      0.567895482644515,
      -0.5326543100333779
    ],
    [
      -0.635739622142532,
      0.5592640756367113,
      -0.5320327307039348
    ],
    [
      -0.6556842048124109,
      0.5417794386686999,
      -0.5258833172818328
    ],
    [
      -0.6468363929105739,
      0.5513912207112258,
      -0.5268495065282135
    ],
    [
      -0.6769280661471209,
      0.5333515853589058,
      -0.5072518897524787
    ],
    [
      -0.6775158415548724,
      0.5326953557951242,
      -0.5071567236629116
    ],
    [
      -0.6945197133992302,
      0.5194269629995778,
      -0.49783330323401065
    ],
    [
      -0.7058944477547505,
      0.5148952332443443,
      -0.486411273935204
    ],
    [
      -0.7102181843817839,
      0.5113508592943169,
      -0.48384959364704033
    ],
    [
      -0.7244442746569698,
      0.5054401753495509,
      -0.4687331032254412
    ],
    [
      -0.7383863572729863,
      0.49981701738583023,
      -0.45273450997760556
    ],
    [
      -0.7252348129672547,
      0.50555787905849,
      -0.4673817465222967
    ],
    [
      -0.742083257313593,
      0.5004622442576193,
      -0.4459259818484169
    ],
    [
      -0.7517532879450166,
      0.49599444718491054,
      -0.4345762331577648
    ],
    [
      -0.7615906575383684,
      0.4977249324092655,
      -0.41502959172626197
    ],
    [
      -0.768949535716931,
      0.5108657989854899,
      -0.3843601786705189
    ],
    [
      0.08397052911325632,
      0.23950498350859403,
      -0.9672571080715757
    ],
    [
      0.0776396794300246,
      0.23887973693326423,
      -0.9679403656531209
    ],
    [
      0.06923729484841246,
      0.19890956523689834,
      -0.9775690164174303
    ],
    [
      0.10478981062223604,
      0.29888678956736997,
      -0.9485176764888816
    ],
    [
      0.05398811949070516,
      0.30115914450129966,
      -0.9520443543433796
    ],
    [
      0.04369835532669043,
      0.2806368148912048,
      -0.9588187690431711
    ],
    [
      0.05769883762015516,
      0.24976508091703947,
      -0.9665858722802583
    ],
    [
      0.04355315037473547,
      0.3361690244818006,
      -0.9407940848407744
    ],
    [
      0.003514028719372651,
      0.3620369319802433,
      -0.9321571281090394
    ],
    [
      0.014437084478754572,
      0.3429225761648433,
      -0.9392527228324763
    ],
    [
      -0.014296121768486249,
      0.3741711827711385,
      -0.9272494523514305
    ],
    [
      -0.03601333818882057,
      0.38270369747403943,
      -0.9231689549655558
    ],
    [
      -0.03490933048208212,
      0.380581994906321,
      -0.9240880281652922
    ],
    [
      -0.027204575416578017,
      0.37636083728503783,
      -0.9260736640432601
    ],
    [
      -0.14404463637427067,
      0.3127222563659475,
      -0.9388588462091598
    ],
    [
      -0.1326725136750684,
      0.30822372993468844,
      -0.9420170573934885
    ],
    [
      -0.11148198971372113,
      0.31019151945096557,
      -0.9441149226816463
    ],
    [
      -0.10993059382178197,
      0.3178137577214188,
      -0.9417588226000231
    ],
    [
      -0.17282457735159323,
      0.26366028282863196,
      -0.9490073343878692
    ],
    [
      -0.15430552256439725,
      0.19336494613554828,
      -0.9689168196043068
    ],
    [
      -0.14955661205089818,
      0.20756314355091432,
      -0.9667214496591662
    ],
    [
      0.5771803367634767,
      0.2725791652000267,
      0.769781434923223
    ],
    [
      0.5928966877121914,
      0.23619594397735258,
      0.7698603728914482
    ],
    [
      0.5950760901498232,
      0.21157724228744135,
      0.7753189778910619
    ],
    [
      0.5935019461952823,
      0.2066909673455705,
      0.7778394975058572
    ],
    [
      0.540089190487731,
      0.20021176701843074,
      0.8174465821481334
    ],
    [
      0.5181764301187812,
      0.2569290758725556,
      0.8157699658853778
    ],
    [
      0.5523761060635728,
      0.29903254270044427,
      0.778113215320336
    ],
    [
      0.5347377214621546,
      0.19399913596612248,
      0.8224475086532035
    ],
    [
      0.5054607572085085,
      0.1908768080595091,
      0.8414722021951851
    ],
    [
      0.4880703213313807,
      0.24529422236016535,
      0.837626471592323
    ],
    [
      0.4929574552809396,
      0.2515627555632758,
      0.8328920261932827
    ],
    [
      0.4565599982593511,
      0.23910505774163596,
      0.8569607571830756
    ],
    [
      0.5020510496025397,
      0.18673608886284188,
      0.8444373136646658
    ],
    [
      0.46813982472845894,
      0.1835892851959066,
      0.8643726504607049
    ],
    [
      0.45356002088797354,
      0.23517083177192577,
      0.8596382886632037
    ],
    [
      0.4405596896981107,
      0.1778764817794043,
      0.879924495080621
    ],
    [
      0.41893309137061047,
      0.22921456594299153,
      0.8786101227018898
    ],
    [
      0.419017813668859,
      0.22933295436489115,
      0.8785388254769622
    ],
    [
      0.4650481305616723,
      0.17952956503083908,
      0.8668906341292029
    ],
    [
      0.37809678782758804,
      0.21876104940185181,
      0.8995478988353318
    ],
    [
      0.4066396090027417,
      0.222151121442249,
      0.8861676521020436
    ],
    [
      0.4145999267502451,
      0.1697989633218609,
      0.8940219308235747
    ],
    [
      0.39635857228673527,
      0.1693431891890584,
      0.9023429317338834
    ],
    [
      0.3780451803370146,
      0.21869774559357508,
      0.899584980808507
    ],
    [
      0.3696337716616335,
      0.163015279318145,
      0.9147660321393786
    ],
    [
      0.348109609926519,
      0.1623537748258393,
      0.9232881193195369
    ],
    [
      0.3326958216111784,
      0.2059939964057999,
      0.9202608128825384
    ],
    [
      0.33703975207453357,
      0.2111238121858633,
      0.9175134557322008
    ],
    [
      0.36212518190942533,
      0.2113439585502119,
      0.9078541093212014
    ],
    [
      0.31907480667380766,
      0.1319034035169663,
      0.9385055992836232
    ],
    [
      0.3024304889872621,
      0.13300262140879107,
      0.9438464398562487
    ],
    [
      0.28832353272890476,
      0.14746799555108614,
      0.9461092594213784
    ],
    [
      0.27887593784210385,
      0.18291455807845244,
      0.9427462414327895
    ],
    [
      0.29004621206257947,
      0.20203937740525124,
      0.9354428282080351
    ],
    [
      0.31859417297105297,
      0.20075257731446494,
      0.9263887713322579
    ],
    [
      0.3194629073330469,
      0.13259013940538472,
      0.9382767746090583
    ],
    [
      0.2274345664359055,
      0.1589619218996958,
      0.9607312971773464
    ],
    [
      0.23944162661568488,
      0.18720854115231045,
      0.9526912771529183
    ],
    [
      0.2348320164148921,
      0.14137304227864625,
      0.9617003623704193
    ],
    [
      -0.011854511387966345,
      0.1332001462940403,
      -0.9910182599664846
    ],
    [
      0.9255301915736628,
      0.21803198826504638,
      0.3096060667668024
    ],
    [
      0.9295586356042659,
      0.24652396614062128,
      0.27412894245561437
    ],
    [
      0.9185350238357647,
      0.3026738791259086,
      0.25432642977462255
    ],
    [
      0.354477182072927,
      0.6580254431095693,
      0.6643406081296641
    ],
    [
      0.3554570954045749,
      0.6612552252967315,
      0.6605995612656065
    ],
    [
      0.33689340196241496,
      0.6460958822163274,
      0.6848817027029532
    ],
    [
      0.3380080485897556,
      0.6501492305161927,
      0.6804825766672854
    ],
    [
      0.3185644077962222,
      0.6371734290108367,
      0.701802493190224
    ],
    [
      0.3175789177528006,
      0.6342447732431613,
      0.704895168526988
    ],
    [
      0.29469150361042457,
      0.6236143756650204,
      0.7240594092778256
    ],
    [
      0.26973985927847205,
      0.6248202579939397,
      0.7326936969271789
    ],
    [
      0.8923783516091149,
      0.3444504004757158,
      0.2915729740416933
    ],
    [
      0.9049938136966678,
      0.31399131284397114,
      0.28704642939650105
    ],
    [
      0.8876099625588784,
      0.35992238838059526,
      0.2874098618847909
    ],
    [
      0.8855393672211098,
      0.3759776409696607,
      0.27287514103070193
    ],
    [
      0.8855132491673092,
      0.37605381738370725,
      0.2728549284515423
    ],
    [
      0.8360461928375361,
      -0.08607015356871371,
      0.5418659355472712
    ],
    [
      0.8233741476518146,
      -0.07705807737965291,
      0.5622428885181201
    ],
    [
      0.8196296032709807,
      -0.0625194097785412,
      0.5694722441373221
    ],
    [
      0.8150902547226165,
      -0.058645295196793325,
      0.5763580536502471
    ],
    [
      0.810071040419786,
      -0.04095715164215885,
      0.5848994966680744
    ],
    [
      0.8107869892013324,
      -0.002461685789526515,
      0.5853361412427154
    ],
    [
      0.7939373790522625,
      0.02604636312585636,
      0.6074413758639924
    ],
    [
      0.7845618293587168,
      0.03149475081187813,
      0.6192502051550742
    ],
    [
      0.7805150081820027,
      0.04408660808936352,
      0.6235805425041927
    ],
    [
      0.7820530738341978,
      0.05992393739325436,
      0.6203241986524242
    ],
    [
      0.7783435362849666,
      0.07242674395825126,
      0.6236471007573264
    ],
    [
      0.7891213906809015,
      0.12671766140806598,
      0.601024180093539
    ],
    [
      0.8007436978548238,
      0.1556104416603577,
      0.5784418041532364
    ],
    [
      0.7365648892796847,
      0.2918398844380163,
      0.6101652610003385
    ],
    [
      0.718998803037205,
      0.3023291000173845,
      0.6258097446618619
    ],
    [
      0.712119792936841,
      0.31144505416109197,
      0.6291958190787548
    ],
    [
      0.6975367978410796,
      0.32322921259037857,
      0.6395039419626877
    ],
    [
      0.7017423708590041,
      0.3178616191163216,
      0.637590492427494
    ],
    [
      0.6830737978905527,
      0.33228012697786014,
      0.6503845814984806
    ],
    [
      0.6690681021693246,
      0.33966310051385007,
      0.6610422473706627
    ],
    [
      0.6803531804293839,
      0.332542393398584,
      0.6530965521822663
    ],
    [
      0.6503196655849932,
      0.3453810983153038,
      0.6766064066205234
    ],
    [
      0.6583588761501074,
      0.3403922657114161,
      0.6713394786828915
    ],
    [
      0.6337925057935727,
      0.34626855591222067,
      0.691668379200878
    ],
    [
      0.630052530829114,
      0.34854047923542897,
      0.6939404460976213
    ],
    [
      0.6133964468027326,
      0.34985101427217324,
      0.7080600729193209
    ],
    [
      0.6041013342559342,
      0.34393060230338135,
      0.7188694726787564
    ],
    [
      0.5962467050341296,
      0.34453078392078734,
      0.725112684806211
    ],
    [
      0.5471156720468037,
      0.3140820839081196,
      0.7758974712993382
    ],
    [
      0.883532103849045,
      -0.20869541609340742,
      0.4193056698515772
    ],
    [
      0.8776018133009631,
      -0.2087147292886249,
      0.43157064203770557
    ],
    [
      0.8742690124721788,
      -0.19987054740669707,
      0.4423860961990877
    ],
    [
      0.8650092793077153,
      -0.18936883155605674,
      0.4646486762562019
    ],
    [
      0.8691403983938584,
      -0.19962879572580564,
      0.45248570341705807
    ],
    [
      0.8607512505474891,
      -0.18887656398629252,
      0.47268692414500496
    ],
    [
      0.8559505713088085,
      -0.17765901581031726,
      0.4855778965083087
    ],
    [
      0.8518863418031619,
      -0.17699109826242504,
      0.4929135946442205
    ],
    [
      0.8464539878176209,
      -0.16496307596100898,
      0.5062635974244339
    ],
    [
      0.8434838590986111,
      -0.16429892458005432,
      0.5114106401141375
    ],
    [
      0.8369752939386544,
      -0.1504887511660478,
      0.5261420845254505
    ],
    [
      0.8341670536342567,
      -0.14975328652261716,
      0.5307911828646158
    ],
    [
      0.82720389407932,
      -0.13551297256496417,
      0.5453163777905596
    ],
    [
      0.8244983791396829,
      -0.1346050816072253,
      0.5496215923720136
    ],
    [
      0.8196275240307763,
      -0.12482206970983428,
      0.5591334123127794
    ],
    [
      0.8203524394062592,
      -0.1158235472647276,
      0.5600060544844274
    ],
    [
      0.8121159340439321,
      -0.09660016827002679,
      0.5754442780688276
    ],
    [
      0.8095662978739171,
      -0.09658416260910141,
      0.5790284180243822
    ],
    [
      0.8022514554057637,
      -0.07965413163239278,
      0.5916483935693762
    ],
    [
      0.7923141560224317,
      -0.0616328080200441,
      0.6069923188492802
    ],
    [
      0.806303359086193,
      -0.04148836619514849,
      0.590045429265221
    ],
    [
      0.8001171895418243,
      -0.07951514599391483,
      0.5945501026467481
    ],
    [
      0.7806900572896175,
      -0.04018276878261054,
      0.6236251915550695
    ],
    [
      0.781364229359625,
      -0.02005724172251505,
      0.6237528742472647
    ],
    [
      0.7847358650388372,
      -0.020577639201180723,
      0.6194886462935814
    ],
    [
      0.7897924351827066,
      -0.06130022133750209,
      0.6103033607904707
    ],
    [
      0.7779199992900606,
      -0.014220730583579505,
      0.6282023921684965
    ],
    [
      0.7739534489642667,
      -0.014751673502031,
      0.6330706492684728
    ],
    [
      0.7572761948538537,
      -0.00505662995003919,
      0.653075183421646
    ],
    [
      0.7508744309214529,
      0.010524077644944322,
      0.6603611381495033
    ],
    [
      0.7754967358879791,
      0.04212567981466023,
      0.6299446322711566
    ],
    [
      0.7393689461488773,
      0.027011703645604034,
      0.6727584479862447
    ],
    [
      0.7531344585661274,
      0.04644520707241083,
      0.6562250605244417
    ],
    [
      0.7443566076680332,
      0.014895250928017483,
      0.6676161862333243
    ],
    [
      0.7307114667383118,
      0.03368849080243465,
      0.6818547044382692
    ],
    [
      0.7259579958303486,
      0.044842301921210845,
      0.686275568739257
    ],
    [
      0.7446349691259939,
      0.06789020186879809,
      0.6640103035683587
    ],
    [
      0.7126583465811921,
      0.05940641912671438,
      0.6989913865096642
    ],
    [
      0.732682797211715,
      0.08728066552686185,
      0.6749503715794256
    ],
    [
      0.7458091914392132,
      0.0795604487803571,
      0.6613915519226529
    ],
    [
      0.7147578875479111,
      0.054692218865503794,
      0.6972301796276574
    ],
    [
      0.7013741044339519,
      0.07051147951329681,
      0.7092971851673443
    ],
    [
      0.7183538171078081,
      0.11006933394839429,
      0.6869152314301953
    ],
    [
      0.7254639563560031,
      0.10481210211771431,
      0.6802326596672356
    ],
    [
      0.6961832868623532,
      0.07203442331255398,
      0.714240766794754
    ],
    [
      0.6869302336619548,
      0.08143896834709784,
      0.7221457945011468
    ],
    [
      0.700002454704348,
      0.12981007840277492,
      0.7022434812463216
    ],
    [
      0.7150430979487948,
      0.11769382882454181,
      0.6891019741173361
    ],
    [
      0.6884748184618142,
      0.14096839876454634,
      0.7114283765030263
    ],
    [
      0.6993626949116395,
      0.1311400470338223,
      0.7026336947726717
    ],
    [
      0.6734890903408678,
      0.08545909330125398,
      0.7342405522469854
    ],
    [
      0.6690237882561674,
      0.09004140346567918,
      0.7377667086615509
    ],
    [
      0.6782212956961988,
      0.1425140805356633,
      0.7209061040893215
    ],
    [
      0.6721007006359898,
      0.14809366424030196,
      0.7254990798178123
    ],
    [
      0.6491758458551462,
      0.09619015435746853,
      0.7545317590154452
    ],
    [
      0.653817002077326,
      0.15013715177999037,
      0.7416078232125185
    ],
    [
      0.6522946614431494,
      0.15154160989953855,
      0.7426619790468765
    ],
    [
      0.6452508727736016,
      0.09500189186696915,
      0.7580408641535112
    ],
    [
      0.631059669025026,
      0.09982820505473536,
      0.7692840981104279
    ],
    [
      0.6236010534647702,
      0.153354476214924,
      0.7665534102347176
    ],
    [
      0.6163032377915618,
      0.09454431983899522,
      0.7818130791140676
    ],
    [
      0.6043621447558521,
      0.0988813092775987,
      0.7905497357292925
    ],
    [
      0.5930367164242859,
      0.1640463090082753,
      0.7882869157061168
    ],
    [
      0.59813104697521,
      0.1756061197578871,
      0.7819218255989008
    ],
    [
      0.5865375047099147,
      0.09189771232330517,
      0.8046915968483888
    ],
    [
      0.5760058607600008,
      0.09605231126822669,
      0.8117827307045663
    ],
    [
      0.5662347016910975,
      0.14252285736611142,
      0.8118284903407819
    ],
    [
      0.5467697192224427,
      0.14578949138167827,
      0.8244927521476964
    ],
    [
      0.5561142279065372,
      0.08759188419043547,
      0.8264772394590703
    ],
    [
      0.5432752243616974,
      0.09345922638660152,
      0.8343365050133941
    ],
    [
      0.5359664526949477,
      0.1362441285379965,
      0.8331731506862882
    ],
    [
      0.5028472986647705,
      0.1319687664066256,
      0.8542416747728107
    ],
    [
      0.5110781488082639,
      0.13985893094841007,
      0.8480793625862417
    ],
    [
      0.5233566838410252,
      0.08417695223185667,
      0.847945766067548
    ],
    [
      0.50798739283505,
      0.09223532448303233,
      0.8564119649083368
    ],
    [
      0.4874996519563786,
      0.0817280858486594,
      0.8692897154147884
    ],
    [
      0.4704976534257023,
      0.09184868556471873,
      0.8776079859942827
    ],
    [
      0.4660891959188519,
      0.12798128100598066,
      0.875432266460282
    ],
    [
      0.4729393334547676,
      0.13543023459211107,
      0.8706245105840323
    ],
    [
      0.42590116067618183,
      0.12357462832523172,
      0.8962909753918992
    ],
    [
      0.4312907697025299,
      0.13075616514322766,
      0.8926875697837605
    ],
    [
      0.44767705452454903,
      0.07862141387357967,
      0.8907322426704578
    ],
    [
      0.42976231476508003,
      0.09082839722482576,
      0.8983621513984934
    ],
    [
      0.40374435244822987,
      0.07455683349687625,
      0.9118288087382842
    ],
    [
      0.38494439411048914,
      0.08949297761031413,
      0.9185906707567567
    ],
    [
      0.38081682720164406,
      0.1187163450778228,
      0.9169978045401398
    ],
    [
      0.38480138584290746,
      0.12426205135622832,
      0.9145965427696083
    ],
    [
      0.3549484293298968,
      0.06837963375806279,
      0.9323818092409099
    ],
    [
      0.33439952008747015,
      0.08835710062114943,
      0.9382803332347395
    ],
    [
      0.32983045190406723,
      0.12027481345812475,
      0.9363470736027171
    ],
    [
      0.2777871772781705,
      0.09823149605947598,
      0.9556070621975036
    ],
    [
      0.3078643822612136,
      0.06664705829553888,
      0.9490930890884584
    ],
    [
      0.2665382073287554,
      0.07647908355180476,
      0.960785269356816
    ],
    [
      0.2451458946590587,
      0.055719642500408076,
      0.9678836767770373
    ],
    [
      0.21934166918635425,
      0.06375830665135056,
      0.9735625868384098
    ],
    [
      0.21795333781586587,
      0.08443868113468246,
      0.9722995688897319
    ],
    [
      0.23410855701280955,
      0.11002951108547829,
      0.9659641247084028
    ],
    [
      0.2714544309530613,
      0.09557377844936203,
      0.9576941812441286
    ],
    [
      0.17216041898791315,
      0.10172671204190309,
      0.9798022587190999
    ],
    [
      0.19416406324289404,
      0.036515393803873204,
      0.980289213732538
    ],
    [
      0.15703891434805692,
      0.0807452355705828,
      0.9842860287096605
    ],
    [
      0.23031563243237474,
      0.12279652921666216,
      0.9653371027105592
    ],
    [
      0.1731613357246945,
      0.12778846259133023,
      0.976568103430879
    ],
    [
      0.30434325283090735,
      0.6863649170856336,
      0.6605137281316215
    ],
    [
      0.2994584437213123,
      0.7047942231324791,
      0.6431094335516272
    ],
    [
      0.308953285334877,
      0.7132646406741837,
      0.6291275068256941
    ],
    [
      0.3262911943744491,
      0.6854853446714718,
      0.6508793273060137
    ],
    [
      0.30096438432399464,
      0.7293205079896903,
      0.6144200810472742
    ],
    [
      0.2927852166110224,
      0.7341651045734868,
      0.6125997193605608
    ],
    [
      0.28733146234346374,
      0.746572229654954,
      0.6000587776673192
    ],
    [
      0.2715166236082558,
      0.7743312115715503,
      0.5715679293754223
    ],
    [
      0.2840476281637775,
      0.7491230952784944,
      0.5984409186000739
    ],
    [
      0.22828239279513937,
      0.7920343955958365,
      0.5661878357337462
    ],
    [
      0.25241504544635174,
      0.7773536297479471,
      0.5762013356024158
    ],
    [
      0.23702727348164562,
      0.7827578101210494,
      0.5754200920374231
    ],
    [
      0.22197897094172148,
      0.7957104882356225,
      0.5635336328662928
    ],
    [
      0.005056335875387774,
      0.8397797338448537,
      0.542903704252404
    ],
    [
      -0.07559099725372445,
      0.8207249920820818,
      0.5663007050199163
    ],
    [
      -0.08545982048167222,
      0.8151840778451032,
      0.5728625823974446
    ],
    [
      -0.08828099079831653,
      0.8119940137111574,
      0.5769507677097867
    ],
    [
      -0.09708491812913808,
      0.8069368204470618,
      0.5826040563527212
    ],
    [
      -0.10570673631625516,
      0.7963130925042682,
      0.5955766488065617
    ],
    [
      -0.10617456830968106,
      0.7919518411334648,
      0.6012813337943963
    ],
    [
      -0.13253317187095298,
      0.7577031148887304,
      0.6389999593440832
    ],
    [
      -0.0003367092246859112,
      0.5843579743056787,
      0.8114959300528019
    ],
    [
      -0.0354250598630511,
      0.5970141074048906,
      0.8014482021273995
    ],
    [
      -0.04695287047466764,
      0.5433182932817757,
      0.8382127773659666
    ],
    [
      -0.07297166497197345,
      0.5201918502526452,
      0.8509263041191919
    ],
    [
      0.26812764773587555,
      0.7227538413682442,
      0.6369728795695097
    ],
    [
      0.2988738329926554,
      0.6815455991618249,
      0.6679596007360231
    ],
    [
      0.2917342106631159,
      0.6799039325432693,
      0.6727717241687303
    ],
    [
      0.26325215857839945,
      0.7073160230293343,
      0.6560505655586159
    ],
    [
      0.2668226424552114,
      0.7228586791936397,
      0.6374017629310772
    ],
    [
      0.2831390197229576,
      0.6727974018560493,
      0.6835027077971764
    ],
    [
      0.2653485234509833,
      0.6684626725143513,
      0.6948005588349465
    ],
    [
      0.26097510900693355,
      0.6723829234888972,
      0.6926710595075725
    ],
    [
      0.24524043863108824,
      0.7036445326134915,
      0.6668894203563082
    ],
    [
      0.21525057672560044,
      0.6934735999605643,
      0.6875765814634989
    ],
    [
      0.21795041545814045,
      0.6971890803846872,
      0.682953148169022
    ],
    [
      0.2435759351789366,
      0.7042737682549206,
      0.6668352293855814
    ],
    [
      0.12013198484344866,
      0.6952457765066685,
      0.7086618491687081
    ],
    [
      0.10954574479126238,
      0.7172945873088642,
      0.6881047920306427
    ],
    [
      0.11202086166353377,
      0.719004572454713,
      0.6859181812296382
    ],
    [
      0.13543339874778262,
      0.7221997239083323,
      0.6782959186744033
    ],
    [
      0.15953976869379763,
      0.7204690726865677,
      0.6748861959673549
    ],
    [
      0.19530165076950218,
      0.6938282783059307,
      0.6931519208872866
    ],
    [
      0.18359002214232767,
      0.6711749242811949,
      0.7182053500120367
    ],
    [
      0.12668239039996956,
      0.6913262233616219,
      0.7113505639662533
    ],
    [
      0.10995931668616972,
      0.6639856833822895,
      0.7396160902368639
    ],
    [
      0.05015538642995249,
      0.7170447424600583,
      0.6952203064658359
    ],
    [
      -0.11655089730643631,
      0.7177338835027725,
      0.6864939626894714
    ],
    [
      -0.12943951293710834,
      0.7328619928362675,
      0.6679511299089618
    ],
    [
      -0.1319385023450796,
      0.7487946902753502,
      0.6495373302700775
    ],
    [
      -0.13009024884555787,
      0.755475551610496,
      0.6421317762532218
    ],
    [
      0.25161187775719557,
      0.642126275489706,
      0.7241307266628147
    ],
    [
      0.23593391649279882,
      0.6437793132444514,
      0.7279308915596807
    ],
    [
      0.23016363500330994,
      0.6461263040987563,
      0.7276987702846175
    ],
    [
      0.21002619469947328,
      0.6920698632712511,
      0.6905999579291695
    ],
    [
      0.19295306782631075,
      0.6517890946381749,
      0.7334439922224214
    ],
    [
      0.18623141396748452,
      0.6478919337762467,
      0.7386162079181224
    ],
    [
      0.16176693398882486,
      0.6484460419164366,
      0.7438744449104042
    ],
    [
      0.1511733222527241,
      0.6429865873183553,
      0.7508094799399971
    ],
    [
      0.13949384188991928,
      0.6440413125277497,
      0.7521650456065635
    ],
    [
      0.12148149554977633,
      0.6275356150459972,
      0.7690522076477199
    ],
    [
      0.1262530056635697,
      0.6125322415823855,
      0.7802976557589884
    ],
    [
      -0.4788767540413128,
      0.8077497605602763,
      -0.3438275421685594
    ],
    [
      -0.4793566950822164,
      0.8058621646278444,
      -0.34756773512680933
    ],
    [
      -0.47212792109030255,
      0.8011926217737663,
      -0.3676759564374965
    ],
    [
      -0.48568846265932664,
      0.811910722683301,
      -0.3238945748719782
    ],
    [
      -0.4926727486619854,
      0.8151425302343673,
      -0.3046575423798955
    ],
    [
      -0.4867872819867538,
      0.8117470211776842,
      -0.3226529338237992
    ],
    [
      -0.5015071540921888,
      0.8152951355477236,
      -0.2894553788523763
    ],
    [
      -0.498873759915998,
      0.813962419748646,
      -0.29764097652071375
    ],
    [
      -0.5147745891598428,
      0.812269050093662,
      -0.2742737913386097
    ],
    [
      -0.528254486146056,
      0.8084587524470914,
      -0.2595026848767834
    ],
    [
      -0.5162613789128219,
      0.8115520845092495,
      -0.2736008091576553
    ],
    [
      -0.543270151337934,
      0.8024631314933826,
      -0.24680045635916606
    ],
    [
      -0.5352846826305196,
      0.8048357747130901,
      -0.2563390026568798
    ],
    [
      -0.5581445991409946,
      0.7951662829600629,
      -0.23703415132257996
    ],
    [
      -0.5542205463140779,
      0.7964927144020743,
      -0.2417414775079791
    ],
    [
      -0.5820683262905931,
      0.7834632243043493,
      -0.21767370004642403
    ],
    [
      -0.5719258367870047,
      0.7872465211299595,
      -0.23052928704236395
    ],
    [
      -0.607475006934683,
      0.765927434899667,
      -0.21054519804004862
    ],
    [
      -0.59103114968949,
      0.7764264246236517,
      -0.21873314161976554
    ],
    [
      -0.6567959749484152,
      0.7217055355016976,
      -0.218540996881063
    ],
    [
      -0.7415479442055566,
      0.6271811060549289,
      -0.23822364838997107
    ],
    [
      -0.7349983000821275,
      0.6354997172436139,
      -0.2364690429203566
    ],
    [
      -0.7496080482237057,
      0.6133309301769146,
      -0.24882311815136296
    ],
    [
      -0.7560422785877291,
      0.5987335561284656,
      -0.2644205017649656
    ],
    [
      -0.7507110260020958,
      0.6084366405700009,
      -0.2573670721960602
    ],
    [
      -0.7606032063164597,
      0.5854024556431008,
      -0.2806897352383025
    ],
    [
      -0.757150410744702,
      0.592075230722123,
      -0.27598945029561156
    ],
    [
      -0.7619357592473005,
      0.5745801976479862,
      -0.2988502890261962
    ],
    [
      -0.7618700456499983,
      0.5747215548572182,
      -0.2987459923141581
    ],
    [
      -0.7628323925344348,
      0.5649123157613425,
      -0.314580381462906
    ],
    [
      -0.7603603520155275,
      0.5570076150108025,
      -0.33405785711879415
    ],
    [
      -0.7600413970219511,
      0.5633692844461499,
      -0.3239631524657614
    ],
    [
      -0.752187847559043,
      0.5363814056631243,
      -0.3827641958743589
    ],
    [
      -0.7474074974982846,
      0.5497439721988353,
      -0.3730463747503761
    ],
    [
      -0.6551582190584011,
      0.6259346192406712,
      0.4230526686315312
    ],
    [
      -0.6557878417917254,
      0.6273521775988475,
      0.41996613175366276
    ],
    [
      -0.6579985195778255,
      0.6100214111731943,
      0.4414881947953474
    ],
    [
      -0.6588837894825851,
      0.611715027074055,
      0.4378091794479148
    ],
    [
      -0.6601974288556461,
      0.5937869703827706,
      0.45995259400947464
    ],
    [
      -0.6613888951474615,
      0.5957770561496025,
      0.4556472635069081
    ],
    [
      -0.6616917303841983,
      0.5772558423729306,
      0.47847648467556253
    ],
    [
      -0.6632634687853743,
      0.5795913815730708,
      0.4734505268568321
    ],
    [
      -0.662359116189938,
      0.5604889888488074,
      0.49712422449456806
    ],
    [
      -0.6644359681720114,
      0.5632491186464449,
      0.49119779574355277
    ],
    [
      -0.6630451743632587,
      0.5435270924568656,
      0.5147323542570273
    ],
    [
      -0.6649379199692326,
      0.5459580752298917,
      0.5096933810422325
    ],
    [
      -0.6634512116936798,
      0.5254843951218252,
      0.5326336829244257
    ],
    [
      -0.6655080986598111,
      0.5280730364632025,
      0.5274825483167537
    ],
    [
      -0.6628931198002779,
      0.5071697943848573,
      0.5507735572674816
    ],
    [
      -0.6655893027692397,
      0.5104987929122813,
      0.5444096458313915
    ],
    [
      -0.6613716955188337,
      0.4887083480003809,
      0.56899176704174
    ],
    [
      -0.6647202381540531,
      0.4927875669404001,
      0.5615224117142427
    ],
    [
      -0.658249467096962,
      0.4703338083729972,
      0.5877871619624899
    ],
    [
      -0.6628596647709838,
      0.4755349929213294,
      0.5783455155242497
    ],
    [
      -0.6544729356760673,
      0.4514545505423599,
      0.6065096580122579
    ],
    [
      -0.6595959795649923,
      0.457131434130463,
      0.5966271831483415
    ],
    [
      -0.6507162512546864,
      0.4321216822698633,
      0.62437105319298
    ],
    [
      -0.6556673262884214,
      0.4380786886089898,
      0.6149694462527553
    ],
    [
      -0.651653406899621,
      0.41997426063510446,
      0.6316402913685243
    ],
    [
      -0.6450345062562071,
      0.4120701199870343,
      0.6435283225722722
    ],
    [
      -0.6366587101356149,
      0.39347049938324613,
      0.6632093582900909
    ],
    [
      -0.6456029709915453,
      0.40331039015760867,
      0.6484886529753681
    ],
    [
      -0.627031918518126,
      0.3740422806550199,
      0.6833178948643666
    ],
    [
      -0.6372489723811472,
      0.3847296124544712,
      0.6677550991941614
    ],
    [
      -0.6160152826378422,
      0.3541453628591402,
      0.7036378567999217
    ],
    [
      -0.6275039948880615,
      0.3664051162646786,
      0.6870123923005982
    ],
    [
      -0.6036221808939869,
      0.33468754955977653,
      0.7236190343699225
    ],
    [
      -0.6162684678201286,
      0.3487866124133738,
      0.7060885741688744
    ],
    [
      -0.5895933148093043,
      0.3155922273771586,
      0.7434926153979611
    ],
    [
      -0.6037562604442063,
      0.3313491120367798,
      0.7250421669991789
    ],
    [
      -0.5750420905142081,
      0.29539143742419194,
      0.7629354447353452
    ],
    [
      -0.5897670132266257,
      0.31205488093427697,
      0.7448467099979964
    ],
    [
      -0.5600259941466567,
      0.2736807297014441,
      0.7819653087382675
    ],
    [
      -0.5752337873973702,
      0.29190902566738475,
      0.7641303622880034
    ],
    [
      -0.5445181560591085,
      0.25119965376289616,
      0.8002491559954246
    ],
    [
      -0.5445645577433956,
      0.2512040242937221,
      0.800216208676367
    ],
    [
      -0.5601353786902513,
      0.2716556603344141,
      0.7825928441710941
    ],
    [
      -0.5275492643065781,
      0.22919245705866426,
      0.8180235885089137
    ],
    [
      -0.5291895007460471,
      0.22938605189327732,
      0.8169091207086404
    ],
    [
      -0.5071562635194931,
      0.20664798475567764,
      0.8367132930516664
    ],
    [
      -0.5126575777124475,
      0.20711418489763633,
      0.8332382146950497
    ],
    [
      -0.4831324053546643,
      0.1851576189360073,
      0.8557451343981832
    ],
    [
      -0.4936575854885628,
      0.18514715512002822,
      0.8497192002306189
    ],
    [
      -0.4466360074273058,
      0.17671071147082665,
      0.877091558117435
    ],
    [
      -0.45633337078282993,
      0.16363639083906542,
      0.8746330580895881
    ],
    [
      -0.4696577061486939,
      0.16276838902100293,
      0.867714290876124
    ],
    [
      -0.41760926027795015,
      0.17262087053922623,
      0.8920787749881638
    ],
    [
      -0.41799258498656355,
      0.15286320411901863,
      0.8954970908510634
    ],
    [
      -0.42404864800666797,
      0.1428710788473205,
      0.8942989427214592
    ],
    [
      -0.44311573248687813,
      0.1398951212355843,
      0.8854816783407201
    ],
    [
      -0.3616425074431737,
      0.1274721909907632,
      0.923561333823709
    ],
    [
      -0.4118860782024495,
      0.11750565023116873,
      0.9036272908377413
    ],
    [
      -0.13478618538279236,
      0.9144535189748882,
      -0.3815854371754762
    ],
    [
      -0.13442626181110312,
      0.9142999611075767,
      -0.38208004561109504
    ],
    [
      0.48418803530671756,
      -0.7678502028800611,
      0.4194854138141991
    ],
    [
      0.4847868053057618,
      -0.7670813348044828,
      0.4201999276487401
    ],
    [
      0.5793008837402496,
      -0.7119105377836663,
      0.39698094701173875
    ],
    [
      0.6287616059415813,
      -0.6777815893190977,
      0.3811442772413638
    ],
    [
      0.6798402168974631,
      -0.6109418256278457,
      0.4056690340503269
    ],
    [
      0.6808113539267011,
      -0.6096862728279526,
      0.4059292414813836
    ],
    [
      0.6709367443034163,
      -0.5619867523167335,
      0.4837507368097981
    ],
    [
      0.6638300429197483,
      -0.5571446132880128,
      0.49891838410837874
    ],
    [
      0.6628180131217544,
      -0.5549483341808686,
      0.5026973521625202
    ],
    [
      0.6535019205794721,
      -0.548469638830477,
      0.5216476733199408
    ],
    [
      0.6525321325675393,
      -0.5463520416951999,
      0.525072625931257
    ],
    [
      0.6409261641844022,
      -0.5381042662552099,
      0.5474097648944628
    ],
    [
      0.6247491460381034,
      -0.5357296700148056,
      0.568051252256773
    ],
    [
      0.6220685292528119,
      -0.5251164976817461,
      0.5807610599684696
    ],
    [
      0.5695232344851721,
      -0.5392272686205483,
      0.6203847501007507
    ],
    [
      0.572685475366944,
      -0.5533267630035821,
      0.6048643150721615
    ],
    [
      0.5129633736749449,
      -0.5894702622709271,
      0.6240139318687229
    ],
    [
      0.5171992641391425,
      -0.57548873965122,
      0.6334963549291974
    ],
    [
      0.5162769553206131,
      -0.554405475011455,
      0.6527577457849127
    ],
    [
      0.5116429095587814,
      -0.5705700362493831,
      0.6423950239787061
    ],
    [
      0.5106974021229741,
      -0.5497705738446682,
      0.6610147347823266
    ],
    [
      0.5148156232598976,
      -0.5339625396131601,
      0.6707077458456757
    ],
    [
      0.508120266956362,
      -0.5289081670466297,
      0.6797572692804174
    ],
    [
      0.5121244616521219,
      -0.5120319720134179,
      0.6896026358806749
    ],
    [
      0.5050081627582756,
      -0.5060145391698117,
      0.6992253154000319
    ],
    [
      0.5079080567607793,
      -0.4918195637471646,
      0.7072078355003129
    ],
    [
      0.49880587451677016,
      -0.4837824357328105,
      0.719129511579096
    ],
    [
      0.5012916140601299,
      -0.4696340050914746,
      0.7267397188366208
    ],
    [
      0.49379296900741815,
      -0.4491109702942313,
      0.744625973304862
    ],
    [
      0.52213992938513,
      -0.42964146967394345,
      0.7367347566649108
    ],
    [
      0.49216026357136355,
      -0.4601272111438082,
      0.7389595554063749
    ],
    [
      0.4831677327253043,
      -0.4385888932680941,
      0.7577524165286161
    ],
    [
      0.48502839868360026,
      -0.42550754388391104,
      0.7639965854428303
    ],
    [
      0.5068437489377317,
      -0.4099902762653436,
      0.75829900931665
    ],
    [
      0.4722302458871337,
      -0.4145633083705077,
      0.7779047873758567
    ],
    [
      0.47432526960261084,
      -0.4010747511942648,
      0.7836801532327262
    ],
    [
      0.5005480913644713,
      -0.38628994973727226,
      0.7747462055172394
    ],
    [
      0.509092854608401,
      -0.4011850248899923,
      0.7614952666896135
    ],
    [
      0.462467370685508,
      -0.38862601460499324,
      0.7969276954802565
    ],
    [
      0.4645133049635488,
      -0.3756073034012435,
      0.8019641782171367
    ],
    [
      0.49547317684159703,
      -0.36444313293868885,
      0.7884716443121647
    ],
    [
      0.5024244609842342,
      -0.3783511784633386,
      0.7774445618564094
    ],
    [
      0.45555149069382916,
      -0.36032510594449685,
      0.814026201883402
    ],
    [
      0.4578071557911654,
      -0.3472445780069865,
      0.8184337548947707
    ],
    [
      0.5002311510700879,
      -0.34413644184114167,
      0.7945683764761932
    ],
    [
      0.5161534587619205,
      -0.3222721873231963,
      0.7935529246912453
    ],
    [
      0.4548271651214802,
      -0.33657544386199295,
      0.8245296965280633
    ],
    [
      0.46019736391516985,
      -0.32370967437204157,
      0.8266985139477847
    ],
    [
      0.5137625546521528,
      -0.32000880310066615,
      0.796016584862007
    ],
    [
      0.4602393043535775,
      -0.30837473351417655,
      0.8325171508492757
    ],
    [
      0.4687544869504264,
      -0.28749873766453166,
      0.8352327261339461
    ],
    [
      0.4776349059348064,
      -0.2819614857121076,
      0.8320832994404284
    ],
    [
      0.4959294428102777,
      -0.28022953316915716,
      0.8219035201857233
    ],
    [
      0.5175540225418037,
      -0.25417514027221183,
      0.817026824417901
    ],
    [
      0.5387953768739473,
      -0.26999646556138734,
      0.7979984025319974
    ],
    [
      0.5302996645128726,
      -0.32086074226123135,
      0.7847487813900105
    ],
    [
      0.5526406151505097,
      -0.33011437379627095,
      0.7652534552023678
    ],
    [
      0.5704671062842176,
      -0.25850764712115487,
      0.7795774990516309
    ],
    [
      0.6015301789436313,
      -0.5751852407207054,
      0.5543675519699066
    ],
    [
      0.5983910783863372,
      -0.6079713430742543,
      0.5218227316897223
    ],
    [
      0.615047738933758,
      -0.5488059369111826,
      0.5661522078412402
    ],
    [
      0.5154410264861196,
      -0.7014296889604331,
      0.4922569853844691
    ],
    [
      0.4989665808363616,
      -0.6935929691493908,
      0.5195778520635794
    ],
    [
      0.5001829121856819,
      -0.68691604653012,
      0.5272223433968638
    ],
    [
      0.4872727882193502,
      -0.6788591228574594,
      0.5492863744661259
    ],
    [
      0.4876401414047809,
      -0.674791501198993,
      0.5539526355207046
    ],
    [
      0.4874631904056524,
      -0.6745578264684079,
      0.5543928000522373
    ],
    [
      0.4886078926478584,
      -0.6586989797594853,
      0.5721695389533002
    ],
    [
      0.4870151698802856,
      -0.6570586193523137,
      0.5754043752365008
    ],
    [
      0.487844251284922,
      -0.6393574163571825,
      0.5943316251364402
    ],
    [
      0.4873046744869893,
      -0.6388823489972113,
      0.5952843844440528
    ],
    [
      0.48744819092906394,
      -0.6208593817567655,
      0.613944532710073
    ],
    [
      0.4865637807807061,
      -0.6202008204128469,
      0.6153101897349146
    ],
    [
      0.4862872172054041,
      -0.6009538737168574,
      0.634333653566739
    ],
    [
      0.4858090992968728,
      -0.6006121151927131,
      0.6350233114808433
    ],
    [
      0.4853874065559096,
      -0.5805883881850403,
      0.6536942626806703
    ],
    [
      0.48476820062231296,
      -0.580106558056873,
      0.6545809139936887
    ],
    [
      0.4845959530179424,
      -0.560956500440671,
      0.6711889204478779
    ],
    [
      0.48365009951893284,
      -0.5601821455064547,
      0.6725165760716323
    ],
    [
      0.48330335208807473,
      -0.5400409215115126,
      0.6890382231439899
    ],
    [
      0.4806373451530975,
      -0.5379929066288944,
      0.6924964800352243
    ],
    [
      0.4804087077369152,
      -0.5198423993721192,
      0.7063790436766831
    ],
    [
      0.47524528500568836,
      -0.5163030560641365,
      0.7124416280501127
    ],
    [
      0.47498809918155904,
      -0.4980783419117213,
      0.7254683114749809
    ],
    [
      0.46809477015114315,
      -0.49395879440053914,
      0.7327291420378437
    ],
    [
      0.4679080687096234,
      -0.47569165434258553,
      0.7448352094424945
    ],
    [
      0.45970819093462617,
      -0.471441243111797,
      0.7526031713199306
    ],
    [
      0.45963350831926225,
      -0.4515226344845036,
      0.7647642437890909
    ],
    [
      0.45116714351373116,
      -0.4281462065191145,
      0.78303194983152
    ],
    [
      0.4509535522362394,
      -0.4468841287024917,
      0.7726159907996547
    ],
    [
      0.4394402072163419,
      -0.4220552699526841,
      0.7929449245608584
    ],
    [
      0.43992678125403695,
      -0.4035546223410198,
      0.8022518893232098
    ],
    [
      0.42671562687015385,
      -0.3964042616868795,
      0.8128821778716099
    ],
    [
      0.4275622518051552,
      -0.37775401025622646,
      0.8212748800289972
    ],
    [
      0.4133881020075537,
      -0.3688894506058113,
      0.832484744815384
    ],
    [
      0.4145632937859703,
      -0.35172228487806756,
      0.8393025138562845
    ],
    [
      0.434128388562931,
      -0.33884198662804316,
      0.834696741542528
    ],
    [
      0.3984629987547842,
      -0.3403680778482657,
      0.8516905601245219
    ],
    [
      0.40003178434963865,
      -0.32396171704755894,
      0.8573350438408788
    ],
    [
      0.42087002275272023,
      -0.31399041397025335,
      0.8510455004774502
    ],
    [
      0.3869424339905744,
      -0.2980514910560419,
      0.8726057881178191
    ],
    [
      0.4228629100807837,
      -0.2811744999037908,
      0.861468432318831
    ],
    [
      0.42532784573939775,
      -0.30734755230283806,
      0.8512541957207244
    ],
    [
      0.3855633694871578,
      -0.3081135444096605,
      0.8697165813418907
    ],
    [
      0.3727053048482907,
      -0.2739414473248118,
      0.8865928260343245
    ],
    [
      0.42180983453582693,
      -0.24520936453568726,
      0.8728968043433672
    ],
    [
      0.42954161979088806,
      -0.2479700930802534,
      0.8683345149222105
    ],
    [
      0.4319435430047302,
      -0.26492167395365546,
      0.862114425309143
    ],
    [
      0.37135097966013814,
      -0.2733962784892459,
      0.8873290961158021
    ],
    [
      0.3594601702491808,
      -0.24454490733243722,
      0.9005477079545534
    ],
    [
      0.4037092017012977,
      -0.22277371234292467,
      0.8873504119290488
    ],
    [
      0.35149057526545374,
      -0.23913468266012616,
      0.9051347850174587
    ],
    [
      0.3474968237070757,
      -0.22141360429784396,
      0.9111651734703929
    ],
    [
      0.3736155137159201,
      -0.19488784075956941,
      0.9068793621176203
    ],
    [
      0.40315598318318246,
      -0.2154257455280103,
      0.8894138527071087
    ],
    [
      0.350120855639293,
      -0.15737011648429644,
      0.9233905094184846
    ],
    [
      0.3596894177166647,
      -0.16161248128489045,
      0.9189694927883012
    ],
    [
      0.37448541045967215,
      -0.18497278493804895,
      0.9085954799497481
    ],
    [
      0.3244595222964517,
      -0.2067732540938122,
      0.9230226648260671
    ],
    [
      0.32168997499526236,
      -0.19008964568809808,
      0.9275675105294066
    ],
    [
      0.3221478050170509,
      -0.1885284522668774,
      0.927727230606363
    ],
    [
      0.3058844443200836,
      -0.16406496557297842,
      0.9378258867159357
    ],
    [
      0.3131460478309947,
      -0.14080112395417982,
      0.9392095592683606
    ],
    [
      0.3368530922157181,
      -0.12110592692756483,
      0.9337362308102456
    ],
    [
      0.3388484137463224,
      -0.1223908566735334,
      0.9328463060463495
    ],
    [
      0.2593436370623724,
      -0.1266622832583092,
      0.9574432327376137
    ],
    [
      0.26321315331513045,
      -0.11348677419946164,
      0.9580394501291197
    ],
    [
      0.2875475776727951,
      -0.11943235138195726,
      0.9502906418658896
    ],
    [
      0.2851827078171257,
      -0.13642561793852576,
      0.948714326829833
    ],
    [
      0.2659345968737472,
      -0.13977432549968252,
      0.9538039254043288
    ],
    [
      0.2023303009265864,
      -0.10988170452338444,
      0.973133320947337
    ],
    [
      0.19541325523074224,
      -0.08340541990319682,
      0.9771679464712789
    ],
    [
      0.2412264238022116,
      -0.09017496215744115,
      0.9662702979288456
    ],
    [
      0.23817193714619456,
      -0.09447688646203505,
      0.9666169077149793
    ],
    [
      0.32016037099227734,
      -0.09157478106329808,
      0.942927036583052
    ],
    [
      0.289345496861976,
      -0.14146501359912225,
      0.9467137019041694
    ],
    [
      0.13612314165293743,
      -0.06070634101525366,
      0.9888302333904815
    ],
    [
      0.19298537687629128,
      -0.06097916703315434,
      0.9793049502069611
    ],
    [
      0.18962995406307806,
      -0.07635080236532504,
      0.9788825442821043
    ],
    [
      0.1568020266448658,
      -0.09647717780902401,
      0.9829065462199693
    ],
    [
      0.3193600411639952,
      -0.0868763798352868,
      0.9436427601240028
    ],
    [
      0.25220501768099746,
      -0.08140873132667419,
      0.9642433549267058
    ],
    [
      0.2570406610946896,
      -0.07020530581367417,
      0.9638471422272379
    ],
    [
      0.30987466185621887,
      -0.08140827900017025,
      0.9472857995608952
    ],
    [
      0.19636075947236223,
      -0.053760015181133845,
      0.9790568486595461
    ],
    [
      0.25356695281671515,
      -0.06060802315501046,
      0.9654172507100168
    ],
    [
      0.11738164046169217,
      -0.04004913683069962,
      0.9922790016530825
    ],
    [
      0.12115248379117462,
      -0.03470807623128838,
      0.9920269276161571
    ],
    [
      0.12786664885853122,
      -0.03297954356925609,
      0.9912428914325957
    ],
    [
      0.1952057463150024,
      -0.050347737060745926,
      0.9794691531531072
    ],
    [
      0.1975585443338373,
      0.006319658096798747,
      0.9802707194863237
    ],
    [
      0.1979950396732211,
      0.00590912907041641,
      0.9801852102834591
    ],
    [
      0.260809950287126,
      -0.014696877151483824,
      0.9652782871448115
    ],
    [
      0.2987747033851598,
      -0.015417702869046732,
      0.9541991254740027
    ],
    [
      0.2546833561410714,
      -0.005124581669277485,
      0.9670109238097753
    ],
    [
      0.30975420251321795,
      -0.011092847419117044,
      0.9507519564857789
    ],
    [
      0.3314616776140046,
      -0.024491654199066844,
      0.9431507382957949
    ],
    [
      0.3469521717030261,
      -0.05454395193643759,
      0.9362954383407566
    ],
    [
      0.34683317354396326,
      -0.05573346218706655,
      0.9362694755902629
    ],
    [
      0.3844017672613634,
      -0.02576982834791209,
      0.9228061536819419
    ],
    [
      0.4228638778222624,
      -0.0715744626496011,
      0.9033621849123084
    ],
    [
      0.4238144628501952,
      -0.07613340218272587,
      0.9025436311619975
    ],
    [
      0.40005409915691315,
      -0.08317094017178489,
      0.9127098731024509
    ],
    [
      0.3778227973610637,
      -0.022608220710004134,
      0.9256018594139644
    ],
    [
      0.3076749716561502,
      -0.7883047859876071,
      0.5328336290113642
    ],
    [
      0.3154040823718213,
      -0.7791571777847734,
      0.5416958160533052
    ],
    [
      0.34484228548424156,
      -0.7741085103296813,
      0.5308858750966788
    ],
    [
      0.35128865305491397,
      -0.7849246104436344,
      0.5103818552366189
    ],
    [
      0.34504861085175864,
      -0.8003737694789562,
      0.49024818743093596
    ],
    [
      0.351871785071785,
      -0.7991704834162038,
      0.48735283451182143
    ],
    [
      0.3782018356915812,
      -0.8017923622770082,
      0.4627011770827615
    ],
    [
      0.3791590730216635,
      -0.8047461848881475,
      0.4567515465253779
    ],
    [
      0.3938722788107109,
      -0.8056819624282018,
      0.442426494914465
    ],
    [
      0.40968646781441326,
      -0.8044876740320706,
      0.43006578615395424
    ],
    [
      0.3981563953716179,
      -0.8039745661682437,
      0.44169716070998727
    ],
    [
      0.42058309154359275,
      -0.7994903343622309,
      0.42886486026369913
    ],
    [
      0.43988107750517563,
      -0.800034064516095,
      0.40798300610042887
    ],
    [
      0.8719585535767108,
      -0.24414056659713645,
      0.42436265691745256
    ],
    [
      0.8680472301618715,
      -0.23485329064419022,
      0.4374219222694474
    ],
    [
      0.8630418717014356,
      -0.23634611066975017,
      0.4464294386141721
    ],
    [
      0.8585026811300774,
      -0.2266555668627654,
      0.460000435328693
    ],
    [
      0.8541622587197338,
      -0.2276732639741629,
      0.4675165458570997
    ],
    [
      0.845158426248295,
      -0.21762212941968734,
      0.488208811194909
    ],
    [
      0.8486990591916465,
      -0.21703768582009658,
      0.4822909390202882
    ],
    [
      0.835953264908817,
      -0.20662282565001433,
      0.5084182793809571
    ],
    [
      0.8388562993084877,
      -0.206298475292992,
      0.503747008132312
    ],
    [
      0.8266808786892702,
      -0.1939588426293272,
      0.5281843354127685
    ],
    [
      0.8283885368907269,
      -0.1939107969537483,
      0.5255197758151477
    ],
    [
      0.8185435183350319,
      -0.18092519302784665,
      0.5452087518735771
    ],
    [
      0.8166559177387298,
      -0.1808873373686701,
      0.5480445996467678
    ],
    [
      0.8058927329019918,
      -0.16744604545548541,
      0.5678897119310037
    ],
    [
      0.8079534885491134,
      -0.167567796797201,
      0.5649178646651648
    ],
    [
      0.7945577382788698,
      -0.15400164585234105,
      0.5873342264979432
    ],
    [
      0.796910174454898,
      -0.1542348113295992,
      0.5840768757829633
    ],
    [
      0.7783137247901964,
      -0.14881693646301644,
      0.6099846434337285
    ],
    [
      0.7873684240264187,
      -0.14354159703898867,
      0.5995388017181627
    ],
    [
      0.7649175422989114,
      -0.13489336760029116,
      0.6298451657835009
    ],
    [
      0.7654219524329363,
      -0.13460099537628326,
      0.6292946899326782
    ],
    [
      0.7502140596381749,
      -0.12119781404060721,
      0.649992272717905
    ],
    [
      0.7513735960328746,
      -0.1205949859966025,
      0.6487638773368212
    ],
    [
      0.7353599256069407,
      -0.10730545676227934,
      0.6691272814348501
    ],
    [
      0.7364798791401184,
      -0.10682691799340033,
      0.6679711050740054
    ],
    [
      0.7190475518718447,
      -0.09355540935043546,
      0.6886348840484189
    ],
    [
      0.7210032359104926,
      -0.09270872570581767,
      0.686701846498611
    ],
    [
      0.7040474991583248,
      -0.07904820211176383,
      0.7057396833619366
    ],
    [
      0.7004500732874049,
      -0.08082175761770781,
      0.7091103851497689
    ],
    [
      0.6800484112722004,
      -0.06948351835117135,
      0.7298672475208752
    ],
    [
      0.6850490601148636,
      -0.06666429532810586,
      0.7254403193675887
    ],
    [
      0.6572186720567014,
      -0.060737512605926296,
      0.7512486749821732
    ],
    [
      0.663935611650361,
      -0.05560403240013688,
      0.7457195821240754
    ],
    [
      0.6318445285233473,
      -0.0540901733870108,
      0.7732054997981275
    ],
    [
      0.6392439171846637,
      -0.046349355538782715,
      0.7676059871988665
    ],
    [
      0.6116367856467931,
      -0.03922211946796446,
      0.7901658482800301
    ],
    [
      0.6045531714944534,
      -0.04841712430199101,
      0.7950919726109198
    ],
    [
      0.5750950990726637,
      -0.042734012089608524,
      0.8169696635942661
    ],
    [
      0.5812836423456693,
      -0.03325549034027983,
      0.813021155631008
    ],
    [
      0.5479554616786247,
      -0.028402940646093486,
      0.8360251700632103
    ],
    [
      0.5434385284898829,
      -0.03623879608922913,
      0.8386663910106056
    ],
    [
      0.5091545242508126,
      -0.02822515094444632,
      0.8602121896887371
    ],
    [
      0.5111028958317836,
      -0.02416265697016004,
      0.8591798390794022
    ],
    [
      0.46551336646261904,
      -0.08168361589467014,
      0.8812633502756207
    ],
    [
      0.4637031800959809,
      -0.08052881874500614,
      0.8823233364931522
    ],
    [
      0.47101650564060105,
      -0.022354655224556725,
      0.8818410972527356
    ],
    [
      0.4700168214550166,
      -0.01703560082719279,
      0.8824930457821067
    ],
    [
      0.4253242129354063,
      -0.0770983142285814,
      0.9017511651414641
    ],
    [
      0.42785711461864673,
      -0.02400944192092336,
      0.9035274407392683
    ],
    [
      0.4236093928955287,
      -0.002294790228075096,
      0.9058420481455312
    ],
    [
      0.3611140781691187,
      0.005944270074778098,
      0.9325027014445297
    ],
    [
      0.37149796774542043,
      0.007461951505403012,
      0.9284037802813782
    ],
    [
      0.14617811778739898,
      -0.9877195158912363,
      0.05515537877410641
    ],
    [
      0.14923432302972542,
      -0.9854856927038076,
      0.08091394382895817
    ],
    [
      0.15088709680482257,
      -0.9854838194536472,
      0.07781211739095302
    ],
    [
      0.15278251526762154,
      -0.9829250372180484,
      0.1025469367577458
    ],
    [
      0.1533345497816736,
      -0.9829592293700963,
      0.10138870370706016
    ],
    [
      0.156832777322885,
      -0.9799028817583242,
      0.12326322354588241
    ],
    [
      0.17388637103243113,
      -0.9749001298057053,
      0.1390441184444369
    ],
    [
      0.19054229986425866,
      -0.9697653009168199,
      0.1524758771089666
    ],
    [
      0.19252468956761656,
      -0.9703799642030598,
      0.14593481072095543
    ],
    [
      0.190064814718709,
      -0.9651746296472324,
      0.1797590067041719
    ],
    [
      0.20860159444397083,
      -0.9579508458418255,
      0.19701662809611797
    ],
    [
      0.3854798099040432,
      -0.9043659648640386,
      0.18310520951594797
    ],
    [
      0.4059662621079104,
      -0.8983418004171165,
      0.16784934808769691
    ],
    [
      0.41260728284906967,
      -0.8948458395701395,
      0.17031193012798607
    ],
    [
      0.4433861436021071,
      -0.8809674421881617,
      0.1652425292293108
    ],
    [
      0.4384393459267995,
      -0.883995416416214,
      0.16224377861232295
    ],
    [
      0.46564353430268135,
      -0.8691689361713734,
      0.1664976256792588
    ],
    [
      0.4780904410927614,
      -0.864305356435916,
      0.1562234968623898
    ],
    [
      0.5013370084613635,
      -0.8509299195847138,
      0.15677842932802732
    ],
    [
      0.5358785100161312,
      -0.8352665606728317,
      0.12314217443536606
    ],
    [
      0.532138126008642,
      -0.8376142183804218,
      0.1234157040856862
    ],
    [
      0.5161115948695232,
      -0.8455103877960819,
      0.13689779315298145
    ],
    [
      0.5525198449889558,
      -0.8260246786611977,
      0.11137796521774666
    ],
    [
      0.5492595128921991,
      -0.8281536666498939,
      0.11169374159620828
    ],
    [
      0.5679984891664088,
      -0.8171871483452188,
      0.09789219010772293
    ],
    [
      0.5851270630384604,
      -0.8062457950398099,
      0.0871437782094071
    ],
    [
      0.5716474516587832,
      -0.8156659721544681,
      0.0889281332387326
    ],
    [
      0.6108360925521729,
      -0.7883168753008438,
      0.07372768917785956
    ],
    [
      0.5978116753570788,
      -0.7980548266367289,
      0.07569474544896271
    ],
    [
      0.6308284112538182,
      -0.7743142585394518,
      0.049929395925472304
    ],
    [
      0.6295715827567497,
      -0.7753188293558466,
      0.05020293847416223
    ],
    [
      0.6148919465429695,
      -0.7860139280131325,
      0.06395310036240616
    ],
    [
      0.6440296397545131,
      -0.7640914647258936,
      0.03728346350207395
    ],
    [
      0.644089094868632,
      -0.764048599303727,
      0.037134563055447295
    ],
    [
      0.6579132178194521,
      -0.7527247745686427,
      0.023571414235049874
    ],
    [
      0.6706757047572461,
      -0.7416853015601202,
      0.009849492273437687
    ],
    [
      0.6584454180442789,
      -0.7523012882140636,
      0.02219016016064658
    ],
    [
      0.6820115112275258,
      -0.7313313652067936,
      -0.003838335305033252
    ],
    [
      0.671839300000003,
      -0.7406662559002211,
      0.006741835525593116
    ],
    [
      0.6935538199596492,
      -0.7201229885759468,
      -0.020148948950883185
    ],
    [
      0.6842650851452887,
      -0.7291625783466349,
      -0.010160097932515507
    ],
    [
      0.702622132502791,
      -0.7106897411612184,
      -0.03524529366356133
    ],
    [
      0.6963143567463265,
      -0.7171860888002086,
      -0.028114597994793357
    ],
    [
      0.7113778526592971,
      -0.7008399105456526,
      -0.052582987098574986
    ],
    [
      0.7064637209497544,
      -0.7062030410531013,
      -0.04675762813893797
    ],
    [
      0.7171981248989664,
      -0.6932561491854322,
      -0.07087144176600618
    ],
    [
      0.7174975484180925,
      -0.690341936460126,
      -0.09287237898595194
    ],
    [
      0.7248825822344384,
      -0.6786254037654412,
      -0.11837568727287201
    ],
    [
      0.7150629979594043,
      -0.6911194584977324,
      -0.10506570817878788
    ],
    [
      -0.8110227109206064,
      -0.47494280550586043,
      0.34157209175986986
    ],
    [
      -0.7990926430732478,
      -0.49025128903780374,
      0.34800089279049673
    ],
    [
      -0.7830994139510002,
      -0.5350896882450128,
      0.31691376335441007
    ],
    [
      -0.7683028915593118,
      -0.5904299726207016,
      0.2471904412648634
    ],
    [
      -0.7521721330989314,
      -0.6587641568156444,
      0.01633609146572516
    ],
    [
      -0.7576691894763906,
      -0.6523375929901911,
      -0.01982584399093915
    ],
    [
      -0.761990124995496,
      -0.6457685250193689,
      -0.048518671701284204
    ],
    [
      -0.7513690355733735,
      0.4947615174636311,
      0.4366412866628896
    ],
    [
      -0.774309858630889,
      0.47064965982230844,
      0.42300489422246407
    ],
    [
      -0.7551484657498573,
      0.5133272931988109,
      0.4077326142618696
    ],
    [
      -0.7498095106587688,
      0.5027507324546902,
      0.43014811256348695
    ],
    [
      -0.7583236834615751,
      0.5258941539863649,
      0.38520193393106733
    ],
    [
      -0.7547040428134948,
      0.5164944285768036,
      0.40454333885269667
    ],
    [
      -0.7580472716811893,
      0.5285335678517211,
      0.3821211869952193
    ],
    [
      -0.7748401254674655,
      0.3544406837415849,
      0.523444917516982
    ],
    [
      -0.776552410027188,
      0.3406258900167023,
      0.5300380717753165
    ],
    [
      -0.8094352229257699,
      0.3176627536474957,
      0.49386738587620826
    ],
    [
      -0.7927730235151823,
      0.3611838655453548,
      0.4909757106581864
    ],
    [
      -0.7840323780430746,
      0.36389835732282766,
      0.502863018840985
    ],
    [
      -0.7724154527328483,
      0.3340643472553654,
      0.5401623647315273
    ],
    [
      -0.7733518150202734,
      0.3226756007445783,
      0.5457173507311035
    ],
    [
      -0.8280020131553248,
      0.28140442767962476,
      0.48499918999214026
    ],
    [
      -0.7987907305855059,
      0.2693266700611178,
      0.5379558657775407
    ],
    [
      -0.8290735852656123,
      0.27962090455552335,
      0.48419948363290766
    ],
    [
      -0.7626790149476526,
      0.30106449824070297,
      0.57243417792577
    ],
    [
      -0.7561991901824655,
      0.30094290433246507,
      0.5810302514493753
    ],
    [
      -0.7478122579735081,
      0.2811840898605256,
      0.6014252525741425
    ],
    [
      -0.7474651313226657,
      0.27843629306062295,
      0.6031327450598656
    ],
    [
      -0.7910806475484232,
      0.2426014559717282,
      0.561547809749771
    ],
    [
      -0.792268426606484,
      0.24361810842580534,
      0.5594291353241434
    ],
    [
      -0.7858214990747273,
      0.2250303894158316,
      0.5760606699222812
    ],
    [
      -0.7450173351441302,
      0.27226990403135354,
      0.6089484951073418
    ],
    [
      -0.7799776987473104,
      0.2216980096657848,
      0.5852219937485942
    ],
    [
      -0.7405131376844811,
      0.2672914889048962,
      0.6165999942229066
    ],
    [
      -0.7361329780085498,
      0.2564927780125321,
      0.6263542875367564
    ],
    [
      -0.7437392681608584,
      0.2192440936005044,
      0.6314934112220365
    ],
    [
      -0.7663007775736344,
      0.1805624937500794,
      0.616587628922926
    ],
    [
      -0.7502412155611873,
      0.15139629653560838,
      0.6435971409729646
    ],
    [
      -0.7350224196582512,
      0.12220787853702411,
      0.6669387355846184
    ],
    [
      -0.729656048789396,
      0.08742798743952987,
      0.678202327832425
    ],
    [
      -0.7652065854410625,
      0.026585994348008447,
      0.6432356228491684
    ],
    [
      -0.7603950703940963,
      0.15237412458677424,
      0.6313330840980628
    ],
    [
      -0.7597505963328819,
      0.15468727840130178,
      0.631546417353965
    ],
    [
      -0.8870798678185577,
      -0.1214057328156415,
      0.44536496960415184
    ],
    [
      -0.9002355000069192,
      -0.09724937974231063,
      0.4244038202785501
    ],
    [
      -0.8607424906730152,
      -0.05377864260480212,
      0.5061918829353145
    ],
    [
      -0.8345437265466943,
      -0.03290434768810696,
      0.549958246037621
    ],
    [
      -0.775144685735783,
      -0.0004963447138343891,
      0.6317835624780841
    ],
    [
      -0.7401249131200894,
      -0.012815844184191318,
      0.672347281631172
    ],
    [
      -0.7346631414455161,
      -0.019599142176202875,
      0.6781489085940953
    ],
    [
      -0.7036426972795854,
      -0.06958415883784291,
      0.7071385998543281
    ],
    [
      -0.699075137327022,
      -0.09567540919300574,
      0.708618492876778
    ],
    [
      -0.6913370549341694,
      -0.11622832034935013,
      0.7131227482164049
    ],
    [
      -0.8729964639884683,
      -0.1467690932463551,
      0.46511934719088344
    ],
    [
      -0.6857565111238607,
      -0.12572745913304373,
      0.7168895406345241
    ],
    [
      -0.6841490346684301,
      -0.13416633246446416,
      0.7168957341170961
    ],
    [
      -0.6861309234490965,
      -0.13702378158088968,
      0.714457024017654
    ],
    [
      -0.8590768649388831,
      -0.17156195221587162,
      0.4822379461206461
    ],
    [
      -0.69624360684602,
      -0.16130349601993715,
      0.6994469401590021
    ],
    [
      -0.8454178079216108,
      -0.19586369867441603,
      0.49689650994004364
    ],
    [
      -0.6986733794838061,
      -0.18452280307702784,
      0.6912357368837884
    ],
    [
      -0.831959556080547,
      -0.21972428582885387,
      0.5094747641083506
    ],
    [
      -0.8338490840909001,
      -0.2166870447547438,
      0.507683395036929
    ],
    [
      -0.6933288097109217,
      -0.20596020271841037,
      0.6905617687948181
    ],
    [
      -0.8176830501975852,
      -0.24290086380274328,
      0.5219134025712067
    ],
    [
      -0.8234166350586228,
      -0.2342263188893536,
      0.5168395076310224
    ],
    [
      -0.6788735584525698,
      -0.22710386251427056,
      0.6982510488821657
    ],
    [
      -0.68059584565398,
      -0.23838300235997864,
      0.6927935039132412
    ],
    [
      -0.7063336064726454,
      -0.28136571312239855,
      0.6495584437496523
    ],
    [
      -0.6721586533079719,
      -0.44706387098560335,
      0.5902005083381252
    ],
    [
      -0.6910307854789808,
      -0.45961603916881305,
      0.5578795121341837
    ],
    [
      -0.7569390326212896,
      -0.4079133698823719,
      0.5105389148395582
    ],
    [
      -0.6573344179839331,
      -0.4387095204475159,
      0.612736011347819
    ],
    [
      -0.6710085519597667,
      -0.4473390411406444,
      0.5912996748419757
    ],
    [
      -0.6389115901629739,
      -0.3958077003716426,
      0.6596425124883416
    ],
    [
      -0.632056882382603,
      -0.4059238710035278,
      0.6600984081046519
    ],
    [
      -0.6335264308280812,
      -0.4287481421476819,
      0.644064664491962
    ],
    [
      -0.6409032534267753,
      -0.44215121502911514,
      0.6274912930035378
    ],
    [
      0.21020415640543,
      -0.8367075935820886,
      0.505702101510318
    ],
    [
      0.21134737119695987,
      -0.8401167927688581,
      0.49953584775859877
    ],
    [
      0.21601691084871458,
      -0.8222416257352505,
      0.5265504753920849
    ],
    [
      0.21713668011440213,
      -0.8252191397080568,
      0.5214067832397181
    ],
    [
      0.22141105818880696,
      -0.8072924915345505,
      0.5470429383728943
    ],
    [
      0.22273891097677812,
      -0.8104670397789445,
      0.5417846020041854
    ],
    [
      0.22696544230804042,
      -0.7920786832704957,
      0.5666551398393852
    ],
    [
      0.22827263107857695,
      -0.7949095052344928,
      0.5621480982697691
    ],
    [
      0.23455319740401648,
      -0.7779150746780908,
      0.5829519141199666
    ],
    [
      0.23342812375665728,
      -0.7756076223896189,
      0.5864674987845183
    ],
    [
      0.23932855254347452,
      -0.7579487828771737,
      0.6068240984605477
    ],
    [
      0.2409627306716755,
      -0.7611297553426333,
      0.6021780948849874
    ],
    [
      0.24469112856282935,
      -0.7397694612758396,
      0.6267913494667129
    ],
    [
      0.24664644978706585,
      -0.7435944840133267,
      0.6214762844649753
    ],
    [
      0.24934957585231618,
      -0.7207374713992222,
      0.646809312195894
    ],
    [
      0.25184584495089213,
      -0.7255168929602634,
      0.6404677262831101
    ],
    [
      0.2531484417995924,
      -0.7001437288722366,
      0.6676186226696483
    ],
    [
      0.2564659964752927,
      -0.7063845141001954,
      0.6597318477164537
    ],
    [
      0.2553445925596721,
      -0.6791281936165456,
      0.6881744224291272
    ],
    [
      0.2596109052498477,
      -0.6870056992924936,
      0.6786938536740896
    ],
    [
      0.25641471912834723,
      -0.6567049718277409,
      0.7092179296880874
    ],
    [
      0.26172821723764395,
      -0.666153615627732,
      0.6983822024419756
    ],
    [
      0.2558492651541087,
      -0.6333731511835764,
      0.7303284226153937
    ],
    [
      0.2624175422718281,
      -0.6445422500747964,
      0.7181241684949281
    ],
    [
      0.25377670995921287,
      -0.6084873518793554,
      0.7518912980512057
    ],
    [
      0.26179695409499665,
      -0.6215164721220093,
      0.7383628035780201
    ],
    [
      0.24938415101589234,
      -0.5824258966049773,
      0.7736844448390899
    ],
    [
      0.25927018646382477,
      -0.5976726841000566,
      0.7586608814823969
    ],
    [
      0.24315709830472598,
      -0.554836887289239,
      0.795632235424894
    ],
    [
      0.2547337005014542,
      -0.5721724145098398,
      0.7795700545190377
    ],
    [
      0.23511418757882013,
      -0.5257404381830356,
      0.817507376393792
    ],
    [
      0.24825925254426992,
      -0.5452677438331845,
      0.8006562502480257
    ],
    [
      0.21629837069036995,
      -0.4888530367965409,
      0.8451258623728723
    ],
    [
      0.2213195564123704,
      -0.4896208694196483,
      0.8433795457433025
    ],
    [
      0.2400854355735591,
      -0.5167224097296024,
      0.8218010312166123
    ],
    [
      -0.2884064363775487,
      -0.228879428044819,
      0.9297504691442104
    ],
    [
      -0.267023912594252,
      -0.2203736455045715,
      0.9381544043865502
    ],
    [
      -0.2418799124985347,
      -0.23357361518674602,
      0.9417735790614935
    ],
    [
      -0.30136590777126476,
      -0.25312326520616535,
      0.91929712402714
    ],
    [
      -0.30173920628168416,
      -0.25125667503282684,
      0.9196866502477611
    ],
    [
      -0.3388262237052277,
      -0.3239451939641934,
      0.8833211768304642
    ],
    [
      -0.34916285694538335,
      -0.2888539791730095,
      0.89143069166686
    ],
    [
      -0.34776680154022993,
      -0.2870469708123668,
      0.8925594032297921
    ],
    [
      -0.36196376219743887,
      -0.3524208378350744,
      0.8630074089574783
    ],
    [
      -0.3703734282084079,
      -0.3203895887220428,
      0.8718795989789367
    ],
    [
      -0.3810950747792194,
      -0.3799750287478504,
      0.842843711198637
    ],
    [
      -0.38742948512650355,
      -0.3517878162012965,
      0.8521406729096641
    ],
    [
      -0.3973460921302835,
      -0.40661008408327726,
      0.8226690237213156
    ],
    [
      -0.4019991016490107,
      -0.3813550146116824,
      0.8324452385015556
    ],
    [
      -0.41152261441198457,
      -0.4323512613330259,
      0.802322581416768
    ],
    [
      -0.41508992384397636,
      -0.409095689389867,
      0.8126137286840724
    ],
    [
      -0.42751670690828536,
      -0.43499252922758574,
      0.7924714284000927
    ],
    [
      -0.4246275463015499,
      -0.45690368738098025,
      0.781620411312031
    ],
    [
      -0.43718341857100795,
      -0.47998031334229635,
      0.7605850099301181
    ],
    [
      -0.4394173841889855,
      -0.459495145276844,
      0.7718656450053478
    ],
    [
      -0.44923035731907385,
      -0.5014916802201865,
      0.7393904115776126
    ],
    [
      -0.4507588209189347,
      -0.48277732575344273,
      0.7508279024531027
    ],
    [
      -0.46125964382831663,
      -0.52169970056621,
      0.7176830521926104
    ],
    [
      -0.462283880223735,
      -0.5043702002296325,
      0.7293177052599285
    ],
    [
      -0.47253462041706923,
      -0.5407900728436438,
      0.6958858596214343
    ],
    [
      -0.473064313440791,
      -0.5248309578119177,
      0.7076458302505697
    ],
    [
      -0.4823613333584623,
      -0.5594717030768714,
      0.6740318668556491
    ],
    [
      -0.4827038914434387,
      -0.544051761331448,
      0.6862977736941234
    ],
    [
      -0.4911437122763053,
      -0.5626327072301406,
      0.6649979628888594
    ],
    [
      -0.49090027891356636,
      -0.577535208961305,
      0.652280613365601
    ],
    [
      -0.4981736388188101,
      -0.5952558096311176,
      0.6304708928145918
    ],
    [
      -0.49844107837501045,
      -0.5804504463417821,
      0.6439206245570821
    ],
    [
      -0.5040721692689063,
      -0.6127472920827385,
      0.6086476848011582
    ],
    [
      -0.5044251292517251,
      -0.5977867679401094,
      0.6230620106017525
    ],
    [
      -0.5085632129642665,
      -0.6300937049151029,
      0.5868094933160348
    ],
    [
      -0.5090190633289673,
      -0.6148602315761802,
      0.6023674034953973
    ],
    [
      -0.5115931482313169,
      -0.6467616794610098,
      0.5656604817941093
    ],
    [
      -0.5121530551275492,
      -0.6318112470716734,
      0.5818193845148635
    ],
    [
      -0.5139668658972334,
      -0.6629734982391013,
      0.5443383151978038
    ],
    [
      -0.514652928528788,
      -0.6483842545063786,
      0.5610082188925131
    ],
    [
      -0.5153574396095013,
      -0.6784526864232993,
      0.5235538766203032
    ],
    [
      -0.516206932325747,
      -0.6643443749813418,
      0.5405339530959105
    ],
    [
      -0.5158747578166867,
      -0.6936663154788508,
      0.5026930246358808
    ],
    [
      -0.5169398611696377,
      -0.6795263449613154,
      0.5205930526211727
    ],
    [
      -0.49187737065992465,
      -0.7191088774480865,
      0.4908554518471114
    ],
    [
      -0.5163123872221257,
      -0.7082206954220607,
      0.4815028196977486
    ],
    [
      -0.5175456369192025,
      -0.6948648919866859,
      0.4993088178574741
    ],
    [
      -0.48468162167359974,
      -0.72946215763326,
      0.48266829830938607
    ],
    [
      -0.48954272306247143,
      -0.7340323443599024,
      0.4706850748962475
    ],
    [
      -0.5161133098411405,
      -0.7219025905368668,
      0.46095954397428823
    ],
    [
      -0.5175291497478377,
      -0.7091975060955104,
      0.47875095457783556
    ],
    [
      -0.5155995544554285,
      -0.735389337742679,
      0.439726757634497
    ],
    [
      -0.5173468348821226,
      -0.7229658156485432,
      0.4579002968344599
    ],
    [
      -0.48291110983340774,
      -0.7436690821367743,
      0.46233446364435576
    ],
    [
      -0.4870918432013,
      -0.748254672899598,
      0.45039591557947756
    ],
    [
      -0.48077470851997656,
      -0.7572786026865955,
      0.4420235260261256
    ],
    [
      -0.48427058037272674,
      -0.7616969565693187,
      0.43046457617148914
    ],
    [
      -0.5145059776164999,
      -0.7490576856544822,
      0.41736816188928516
    ],
    [
      -0.5165891935290094,
      -0.7363039674439222,
      0.43702639812188354
    ],
    [
      -0.47762201640272145,
      -0.7707190860946213,
      0.4217455391309673
    ],
    [
      -0.48097540596407085,
      -0.7751281959810705,
      0.40968150880022436
    ],
    [
      -0.5123652944448918,
      -0.7613051420034637,
      0.3973616561867606
    ],
    [
      -0.5146635340105032,
      -0.7492217633653576,
      0.41687911444389186
    ],
    [
      -0.5105011781631457,
      -0.7727177653369743,
      0.37722115824363955
    ],
    [
      -0.5128565406282618,
      -0.7618398022943577,
      0.39569974017543413
    ],
    [
      -0.47451634166660406,
      -0.7835976383063387,
      0.40100995340773155
    ],
    [
      -0.4773547913139509,
      -0.7880894866610393,
      0.38864812391667847
    ],
    [
      -0.4714474798370763,
      -0.7957679314843331,
      0.38011928782477655
    ],
    [
      -0.4733696607000246,
      -0.799956048977312,
      0.3687702320325653
    ],
    [
      -0.5088631925862069,
      -0.784524534135125,
      0.3543719889763266
    ],
    [
      -0.5114942227222926,
      -0.7738044319487488,
      0.3736313172342383
    ],
    [
      -0.509002654196331,
      -0.7846916865801336,
      0.3538011518255924
    ],
    [
      -0.46723859163521125,
      -0.8076875694434517,
      0.3596232593329773
    ],
    [
      -0.46856218560620533,
      -0.811491767890065,
      0.34918560804619764
    ],
    [
      -0.5042357206715157,
      -0.7968819453338867,
      0.3327544187531667
    ],
    [
      -0.5063898433571139,
      -0.7942032814730924,
      0.335872705414015
    ],
    [
      -0.49901215209300775,
      -0.8088532629276628,
      0.3110358035898411
    ],
    [
      -0.5014112219354759,
      -0.8060089283644017,
      0.31454156150506024
    ],
    [
      -0.46191615666941566,
      -0.8195018669752717,
      0.33919043947582
    ],
    [
      -0.46273800038222607,
      -0.8227099384430061,
      0.3301846455990407
    ],
    [
      -0.4551910577142306,
      -0.8313276215034693,
      0.3188972980481091
    ],
    [
      -0.4557206116599811,
      -0.8345756845387168,
      0.3095192253883191
    ],
    [
      -0.49573380920144344,
      -0.8179759239755334,
      0.29182765155310286
    ],
    [
      -0.4490181228861804,
      -0.8419619670249235,
      0.29913671022342375
    ],
    [
      -0.449138557241289,
      -0.8448403276225703,
      0.2907221649991644
    ],
    [
      -0.490285360403105,
      -0.8288133426899157,
      0.26960843524186306
    ],
    [
      -0.49229144092591376,
      -0.8266033109424513,
      0.27271982606709166
    ],
    [
      -0.49573424865488586,
      -0.81797654804086,
      0.29182515581377594
    ],
    [
      -0.44233934484276505,
      -0.8552302060279829,
      0.27003184756877724
    ],
    [
      -0.4859752674473539,
      -0.8375198716688884,
      0.2497769084387135
    ],
    [
      -0.48664482699258493,
      -0.8368109511826747,
      0.2508470536843206
    ],
    [
      -0.44238642625765934,
      -0.8519337593016072,
      0.28018408167704273
    ],
    [
      -0.43483867299289275,
      -0.8626896949895836,
      0.2582282297281987
    ],
    [
      -0.4346040369976447,
      -0.864164970068157,
      0.25364982856775453
    ],
    [
      -0.4797819366937952,
      -0.8482288223901854,
      0.22431486372710668
    ],
    [
      -0.48124740065980487,
      -0.8467458213075367,
      0.2267651945436209
    ],
    [
      -0.4258712529151345,
      -0.8752331583145309,
      0.22934819495096287
    ],
    [
      -0.47685778223472897,
      -0.8532428077143847,
      0.21114773644500542
    ],
    [
      -0.4265138956729117,
      -0.8717794436357117,
      0.2410114073070516
    ],
    [
      -0.4194182670338115,
      -0.8810155132913335,
      0.218860646573025
    ],
    [
      -0.41829490861420754,
      -0.8842180950204496,
      0.20781657745675394
    ],
    [
      -0.4734118842178439,
      -0.8598395956009802,
      0.19119900030610407
    ],
    [
      -0.4737488994047999,
      -0.85952597195149,
      0.19177352229540728
    ],
    [
      -0.477134634528349,
      -0.8542019790917282,
      0.20659506153166793
    ],
    [
      -0.46785029423622704,
      -0.8677671505432882,
      0.16761943390030296
    ],
    [
      -0.4125650297188147,
      -0.889148323784663,
      0.19800342058671017
    ],
    [
      -0.4113214435715197,
      -0.8916619748721359,
      0.18908620421745054
    ],
    [
      -0.40494254944083435,
      -0.8968695032834421,
      0.17789498512456525
    ],
    [
      -0.4045965383746263,
      -0.8974347900227558,
      0.17581933566044916
    ],
    [
      -0.4579208022414965,
      -0.8778812346281235,
      0.1401180814966641
    ],
    [
      -0.4662194767670386,
      -0.871182987099732,
      0.15388178082884554
    ],
    [
      -0.4681175286438144,
      -0.8687374142032516,
      0.16174450389381353
    ],
    [
      -0.4382780136667701,
      -0.8906043346376842,
      0.12139317056934658
    ],
    [
      -0.4569842307377906,
      -0.8789554821612457,
      0.13639161717525664
    ],
    [
      -0.3969271712738368,
      -0.9033592382920712,
      0.16245278482352693
    ],
    [
      -0.3939372687370644,
      -0.905082025118653,
      0.16012481415164845
    ],
    [
      -0.3851973028824378,
      -0.911396516527734,
      0.14484276824614775
    ],
    [
      -0.42741168842873406,
      -0.8982414886716442,
      0.10237908293908174
    ],
    [
      -0.3805503308504384,
      -0.9138851445244793,
      0.14140505050065713
    ],
    [
      -0.37272511194238667,
      -0.9191164504004626,
      0.1276751406139392
    ],
    [
      -0.41436626737213555,
      -0.9060986891213364,
      0.08535667540784225
    ],
    [
      -0.42599137491971945,
      -0.8996472019832974,
      0.0957405893946293
    ],
    [
      -0.40763885926771154,
      -0.9101614692691425,
      0.07373371191493519
    ],
    [
      -0.36939615796819836,
      -0.9207850113924713,
      0.12530539203601954
    ],
    [
      -0.35970959622980303,
      -0.9267727766576913,
      0.10817220912223875
    ],
    [
      -0.359349881401461,
      -0.9273985891263332,
      0.1039207372146804
    ],
    [
      -0.35027017591611537,
      -0.9332205668082718,
      0.08006358441727095
    ],
    [
      -0.40105787621510885,
      -0.9141762514509524,
      0.05860342318424221
    ],
    [
      -0.4060941237464349,
      -0.9113542507365308,
      0.0672383248086375
    ],
    [
      -0.35095031861017667,
      -0.932123547775588,
      0.08932841401069747
    ],
    [
      -0.33885126193974047,
      -0.9388967786595832,
      0.06043725096745402
    ],
    [
      -0.338134303653948,
      -0.9394469411496225,
      0.05571927365891795
    ],
    [
      -0.39042107799780246,
      -0.9205010040657214,
      0.015788710176335066
    ],
    [
      -0.3063739785180373,
      -0.9513838471575593,
      0.03168218197522375
    ],
    [
      -0.39521914902758365,
      -0.9184531305630976,
      -0.01567390189959946
    ],
    [
      -0.3063039360051094,
      -0.9513585246531485,
      0.033088613714726434
    ],
    [
      -0.30366863868205274,
      -0.9525620588558148,
      0.020270222232629947
    ],
    [
      -0.4216524530135408,
      -0.900270042522401,
      -0.10827307792973374
    ],
    [
      -0.2916604652809945,
      -0.956521367602145,
      0.0010228942252162798
    ],
    [
      -0.4393068474006049,
      -0.883705801184886,
      -0.1614730651815357
    ],
    [
      -0.2915603327988363,
      -0.9565519696014005,
      0.0009496261964760403
    ],
    [
      -0.2766892855087418,
      -0.9606943049843454,
      -0.02257192183461034
    ],
    [
      -0.2725531447432542,
      -0.9609963634941336,
      -0.04691239326248328
    ],
    [
      -0.2738434203235216,
      -0.9600574471075374,
      -0.0574410950354636
    ],
    [
      -0.3783387994152525,
      -0.8988214343935107,
      0.22131376353904716
    ],
    [
      -0.3725697434782104,
      -0.9062853358261131,
      0.19959628330991025
    ],
    [
      -0.3662605518713428,
      -0.9093631066660063,
      0.1972611172472898
    ],
    [
      -0.36150211769303076,
      -0.9145991415478338,
      0.18117568596094671
    ],
    [
      -0.35555456046181794,
      -0.9174143158966109,
      0.17869506854627215
    ],
    [
      -0.3505783774411019,
      -0.9221597105807845,
      0.16345112251779767
    ],
    [
      -0.3386279939446886,
      -0.9297582678563878,
      0.14450136701666624
    ],
    [
      -0.34413366670613343,
      -0.9250717605113521,
      0.1606681590851763
    ],
    [
      -0.33178050231157274,
      -0.9327289611511015,
      0.14120334031412748
    ],
    [
      -0.32551578424822547,
      -0.937171887968887,
      0.12549233684211467
    ],
    [
      -0.32031184932884477,
      -0.9393815736092445,
      0.12232161846114965
    ],
    [
      -0.3130078018076062,
      -0.9438198365117211,
      0.1059727899725134
    ],
    [
      -0.30503754519241566,
      -0.9476119582100192,
      0.094782238211375
    ],
    [
      -0.30899849088152365,
      -0.9454639701740726,
      0.1030427762418177
    ],
    [
      -0.294298267706232,
      -0.9517487244594055,
      0.08696490737651373
    ],
    [
      -0.284123093229739,
      -0.956507726643164,
      0.06608355896508102
    ],
    [
      -0.28312723411338175,
      -0.9575177473602551,
      0.054760686568459276
    ],
    [
      -0.24306922664035815,
      -0.9697806795701465,
      0.02104244740810932
    ],
    [
      -0.268005993124311,
      -0.962063937300923,
      0.05104672560015301
    ],
    [
      -0.25190716292995147,
      -0.9669726360023052,
      0.03881626575723356
    ],
    [
      -0.2429114985861956,
      -0.9698230521983902,
      0.020910554253949772
    ],
    [
      -0.2364734256716129,
      -0.9716043284852026,
      0.008083799846029863
    ],
    [
      -0.23631924798534262,
      -0.9716609407862978,
      0.005313114146031898
    ],
    [
      -0.2284524217502128,
      -0.9735041509181501,
      -0.00995786832582479
    ],
    [
      -0.22848686642583796,
      -0.9734080218540113,
      -0.016449159892277184
    ],
    [
      -0.21402818067878893,
      -0.9759216172783992,
      -0.04205870663776278
    ],
    [
      -0.2018375837325323,
      -0.9781296460228094,
      -0.05023928108867064
    ],
    [
      -0.19993049950351674,
      -0.9770915399999612,
      -0.07293776682061376
    ],
    [
      -0.20558342868056614,
      -0.9737632987729423,
      -0.09757300761368459
    ],
    [
      -0.21874148673876634,
      -0.967871619139803,
      -0.12400278562601003
    ],
    [
      -0.2220514874840791,
      -0.9729320789257934,
      0.06400239607422058
    ],
    [
      -0.21268171555324233,
      -0.9754823292663183,
      0.05657484563379826
    ],
    [
      -0.20899529633147113,
      -0.9769289500574379,
      0.04394078573481247
    ],
    [
      -0.19728678780623346,
      -0.9801511614329844,
      0.0195352015262156
    ],
    [
      -0.2021076555493113,
      -0.9786035135329747,
      0.03857018108951306
    ],
    [
      -0.19703968333391847,
      -0.9801854640475417,
      0.020293330470245712
    ],
    [
      -0.1918683286547927,
      -0.9814206250384083,
      0.0003181327339466901
    ],
    [
      -0.19381174369595666,
      -0.9810265261559972,
      -0.00489520008063018
    ],
    [
      -0.18886646831699574,
      -0.9817555704282209,
      -0.02203309053727326
    ],
    [
      -0.1977717981561333,
      -0.9791729883100513,
      -0.045897438033663106
    ],
    [
      -0.21564826194415923,
      -0.38112645343435486,
      0.8990208304666882
    ],
    [
      -0.23600590839431537,
      -0.3803801534072963,
      0.8942103500277861
    ],
    [
      -0.24102016479558402,
      -0.3773714456485449,
      0.8941476791733214
    ],
    [
      -0.23178469997540202,
      -0.34380614396625925,
      0.9099852681380972
    ],
    [
      -0.26383799400127367,
      -0.4099620323927664,
      0.8731097553674316
    ],
    [
      -0.2590823908848111,
      -0.42083578269412847,
      0.8693523789221665
    ],
    [
      -0.279318966622854,
      -0.4415527072659446,
      0.8526500581075779
    ],
    [
      -0.27299887537444373,
      -0.4553533202957189,
      0.8474225437996993
    ],
    [
      -0.2900290142147559,
      -0.47264682457179114,
      0.832158728930857
    ],
    [
      -0.28417612090479194,
      -0.48635707648999543,
      0.8262570583393583
    ],
    [
      -0.2994875156673792,
      -0.5017899356693086,
      0.8114888097936855
    ],
    [
      -0.3074342465916318,
      -0.5295545336392924,
      0.7906049455478427
    ],
    [
      -0.29393022461002255,
      -0.5155489386625692,
      0.8048691290542831
    ],
    [
      -0.30245851093914766,
      -0.5428112545526212,
      0.7835016216265814
    ],
    [
      -0.3145512657538308,
      -0.5561196255931511,
      0.7692778842803141
    ],
    [
      -0.3105621897984432,
      -0.5678989482670761,
      0.7622610516251926
    ],
    [
      -0.32171233063228427,
      -0.5807915543704606,
      0.7477849601931615
    ],
    [
      -0.3183090922123327,
      -0.5916955309587876,
      0.7406589771671975
    ],
    [
      -0.32855686847512733,
      -0.604032031460804,
      0.7260824258630367
    ],
    [
      -0.33473560793659773,
      -0.6253484423717073,
      0.7049052407257275
    ],
    [
      -0.3256564652090197,
      -0.6140511969111292,
      0.7189499247093473
    ],
    [
      -0.33162294830008404,
      -0.6363052368549285,
      0.6965212600572601
    ],
    [
      -0.3388568316459996,
      -0.6457834934656416,
      0.6842073714994208
    ],
    [
      -0.3355144812408059,
      -0.6576940533693789,
      0.6744394450506801
    ],
    [
      -0.3406760188764068,
      -0.6648069496007832,
      0.6648094237637007
    ],
    [
      -0.3367627406308628,
      -0.6785649601312669,
      0.6527943408186399
    ],
    [
      -0.3409383752119252,
      -0.6842827666505185,
      0.6446069496778363
    ],
    [
      -0.3365010380495207,
      -0.6996371545875818,
      0.6302974720813874
    ],
    [
      -0.3383316689309965,
      -0.7025412623358434,
      0.6260730440722763
    ],
    [
      -0.33351399022544476,
      -0.718656520023082,
      0.610164915864732
    ],
    [
      -0.3346897495750784,
      -0.7205966164005794,
      0.6072258953317189
    ],
    [
      -0.32950838278922734,
      -0.7381024243070914,
      0.5887521014006001
    ],
    [
      -0.3296770402127658,
      -0.7384177319646742,
      0.5882621033830898
    ],
    [
      -0.32432940220979256,
      -0.7550812693315333,
      0.5697918177430412
    ],
    [
      -0.3221144159036479,
      -0.7572957585313885,
      0.5681068888663652
    ],
    [
      -0.3178514071523664,
      -0.7689757233859512,
      0.5546591924905903
    ],
    [
      -0.31067007316170053,
      -0.7759740574399481,
      0.5489520633187271
    ],
    [
      -0.30738444378189816,
      -0.7837685089589117,
      0.539649634564147
    ],
    [
      -0.2988683867713963,
      -0.7918297027366281,
      0.5326193849764447
    ],
    [
      -0.2956258244512801,
      -0.7987115357150799,
      0.5240851597146781
    ],
    [
      -0.28228081249118986,
      -0.8108543356058975,
      0.5126722045600213
    ],
    [
      -0.2591087099282659,
      -0.8263152610857746,
      0.5000657614114947
    ],
    [
      -0.26051078114012094,
      -0.822617349236019,
      0.5054056090366128
    ],
    [
      -0.24124713484535115,
      -0.8400282672349604,
      0.48595507011979944
    ],
    [
      -0.18684375575225787,
      -0.8652970033239586,
      0.4651349341588607
    ],
    [
      -0.12899967306291163,
      -0.8641880826033693,
      0.48635176799922697
    ],
    [
      -0.10617198810081163,
      -0.8934443504663375,
      0.4364455310373853
    ],
    [
      -0.17181232109758401,
      -0.8595477753715932,
      0.4813087867188857
    ],
    [
      -0.0943208032587712,
      -0.8936201434733161,
      0.4388013505578011
    ],
    [
      -0.11315066125888472,
      -0.8632750643362729,
      0.49188727484239836
    ],
    [
      -0.0826675616106476,
      -0.8903038868880745,
      0.44780024927341944
    ],
    [
      -0.0760729741193791,
      -0.8902444679999671,
      0.4490853925525609
    ],
    [
      -0.10183714178172695,
      -0.8603982361399947,
      0.4993436409937693
    ],
    [
      -0.09699126414726009,
      -0.8600252251068077,
      0.500948407382538
    ],
    [
      -0.06067661072325975,
      -0.8854822217360641,
      0.46069467535505765
    ],
    [
      -0.05954089561564211,
      -0.8854428012811824,
      0.46091856917314583
    ],
    [
      -0.08032786021695015,
      -0.8553106725855051,
      0.5118506503212603
    ],
    [
      -0.0413948798905968,
      -0.8784343392126872,
      0.4760667764198764
    ],
    [
      -0.042688601018038876,
      -0.8798714171184568,
      0.4732905795397591
    ],
    [
      -0.026257755645515333,
      -0.8730950206688355,
      0.4868424952197026
    ],
    [
      -0.07015580176614176,
      -0.8488426408393219,
      0.5239697840252583
    ],
    [
      -0.06453587621139573,
      -0.848284334512039,
      0.5255937675649269
    ],
    [
      -0.023875059345250145,
      -0.8702235759604489,
      0.49207815373563335
    ],
    [
      -0.04505622853969648,
      -0.8419390281011807,
      0.5376882081930177
    ],
    [
      -0.007498093423167985,
      -0.8611714461351468,
      0.5082593028725765
    ],
    [
      -0.010588052983470698,
      -0.8652512412825993,
      0.501226677854382
    ],
    [
      -0.038465402579692144,
      -0.8368935926185769,
      0.5460123876235353
    ],
    [
      -0.029029164309665945,
      -0.8336012334374554,
      0.5516033821787493
    ],
    [
      0.008081617834809826,
      -0.8507345794607274,
      0.5255334078466863
    ],
    [
      0.004277512590152478,
      -0.8565410186801817,
      0.5160612233101395
    ],
    [
      0.018774495247236397,
      -0.8463777169963758,
      0.5322520817246414
    ],
    [
      -0.02034771132514813,
      -0.8264823393536651,
      0.5625948039044811
    ],
    [
      -0.014726290849742574,
      -0.8244311971059884,
      0.5657705697508449
    ],
    [
      0.02297611311533329,
      -0.838863824373638,
      0.5438562148062166
    ],
    [
      -0.002623562296094681,
      -0.8138019083592364,
      0.5811364477226872
    ],
    [
      -0.0008623410826461702,
      -0.8131335496807796,
      0.5820765299781399
    ],
    [
      0.0368546955626104,
      -0.8264597731177289,
      0.5617881939247027
    ],
    [
      0.032541333588139945,
      -0.8348368855323296,
      0.5495347451826731
    ],
    [
      0.012057773720816642,
      -0.8013307067433278,
      0.5981000823634255
    ],
    [
      0.050359023993486,
      -0.812771712008616,
      0.5804016823381949
    ],
    [
      0.04565001698468807,
      -0.8226320951840252,
      0.5667384863607187
    ],
    [
      0.01252897242716283,
      -0.7993278317214197,
      0.6007645481263462
    ],
    [
      0.024554910224412183,
      -0.7880474980508958,
      0.615124537959261
    ],
    [
      0.06245667485000393,
      -0.7980315247041364,
      0.5993703774337469
    ],
    [
      0.057276229789441364,
      -0.8096380693462191,
      0.584128093971206
    ],
    [
      0.025485496513329375,
      -0.7833847548228627,
      0.6210143439394877
    ],
    [
      0.03553972616751856,
      -0.7737870708476103,
      0.6324480190916983
    ],
    [
      0.07397886170261814,
      -0.7819720018554102,
      0.6189078415527043
    ],
    [
      0.06831026684456874,
      -0.7953044785356231,
      0.6023491461476512
    ],
    [
      0.04468700789868133,
      -0.7580636318044321,
      0.6506478321338953
    ],
    [
      0.08465202290465892,
      -0.7646166650003502,
      0.6389017065416959
    ],
    [
      0.07817501775251552,
      -0.7799371699422076,
      0.6209562605706893
    ],
    [
      0.036962866704971974,
      -0.7655307165592294,
      0.6423367251599921
    ],
    [
      0.04669914553539566,
      -0.7455174094918703,
      0.6648480893789158
    ],
    [
      0.05139784104438828,
      -0.7408955957093191,
      0.6696506389114469
    ],
    [
      0.0930422876356722,
      -0.7456660808057486,
      0.6597918070477351
    ],
    [
      0.09361554041753482,
      -0.74648597910631,
      0.6587828273338845
    ],
    [
      0.0863127266408962,
      -0.7637674870150635,
      0.6396947232848718
    ],
    [
      0.05422851771468715,
      -0.7238093151784163,
      0.6878657886008142
    ],
    [
      0.05537897736502388,
      -0.7226456771535775,
      0.6889966575806095
    ],
    [
      0.09803572578911246,
      -0.7248975346200586,
      0.681844968281473
    ],
    [
      0.10049543526516265,
      -0.728134423692914,
      0.6780272328780411
    ],
    [
      0.05883116609255338,
      -0.7027280890663675,
      0.7090219508120478
    ],
    [
      0.10117371035285858,
      -0.7029037390532432,
      0.7040527068042606
    ],
    [
      0.1052489249086401,
      -0.7080672144401758,
      0.6982574622877333
    ],
    [
      0.05454220993926638,
      -0.695449467617585,
      0.716502048374852
    ],
    [
      0.06739029577943777,
      -0.6810799312476364,
      0.7291012791694134
    ],
    [
      0.10211725516207991,
      -0.6794965933049272,
      0.7265372983441118
    ],
    [
      0.10813896242284214,
      -0.6867756839919237,
      0.7187803034888591
    ],
    [
      0.10078769750100705,
      -0.6545225316212308,
      0.7492943985060748
    ],
    [
      0.10890064104095269,
      -0.663875714320565,
      0.7398713984985696
    ],
    [
      0.06510826419418973,
      -0.6581399972188686,
      0.7500751015694143
    ],
    [
      0.0644289051726029,
      -0.657588863394046,
      0.7506169481955404
    ],
    [
      0.06291858683573702,
      -0.6326318587685413,
      0.7718925979057283
    ],
    [
      0.09769429756908815,
      -0.62858236225449,
      0.7715828134977136
    ],
    [
      0.10730396477073927,
      -0.6393796242802209,
      0.7613668992015371
    ],
    [
      0.05972148282100734,
      -0.6040140842867138,
      0.7947328673667289
    ],
    [
      0.0781259041301489,
      -0.582459782215707,
      0.8090963757211361
    ],
    [
      0.10471389371854707,
      -0.6126127346529147,
      0.7834160055828439
    ],
    [
      0.06140676144687183,
      -0.6313547325220072,
      0.7730591254041774
    ],
    [
      0.0805250826606065,
      -0.5683017980981325,
      0.8188704276873917
    ],
    [
      0.08788019650451603,
      -0.5569381121524978,
      0.8258916456135996
    ],
    [
      0.10424700150849422,
      -0.5485929973379595,
      0.8295651185701105
    ],
    [
      0.40932368079781806,
      -0.771807481377977,
      -0.48658743924099573
    ],
    [
      0.40132004923776216,
      -0.7744995204004393,
      -0.4889710737654014
    ],
    [
      0.4294840881536222,
      -0.768802288126082,
      -0.4738000208895653
    ],
    [
      0.4446632470868186,
      -0.7700160848006941,
      -0.45754762138865634
    ],
    [
      0.444898882358492,
      -0.7701129094676102,
      -0.4571554343409877
    ],
    [
      0.4689533896670011,
      -0.754874110268094,
      -0.4585278573508737
    ],
    [
      0.500846903196384,
      -0.7417266140666975,
      -0.44608744607278994
    ],
    [
      0.5014298757777853,
      -0.7413134333502869,
      -0.4461193486186006
    ],
    [
      0.5180144121123768,
      -0.7417622964679755,
      -0.425969205908624
    ],
    [
      0.5268292772732092,
      -0.7375999547158542,
      -0.4223709500083523
    ],
    [
      0.5362906404349166,
      -0.7378822117599007,
      -0.4097831018358665
    ],
    [
      0.5444648351740736,
      -0.7337837165124804,
      -0.4063489887276705
    ],
    [
      0.5534347555706275,
      -0.7339085790768689,
      -0.39381235237591417
    ],
    [
      0.5615233290373781,
      -0.7296423461855347,
      -0.39027374700285533
    ],
    [
      0.5781594755515502,
      -0.7249587231588115,
      -0.374388128211756
    ],
    [
      0.5698510175071516,
      -0.7295896101200785,
      -0.3781121773374879
    ],
    [
      0.5865049644860314,
      -0.7248461689138561,
      -0.36139999729405736
    ],
    [
      0.5943372467449065,
      -0.720260731600962,
      -0.3577537080804771
    ],
    [
      0.6027222905558111,
      -0.7199431061315142,
      -0.34410429291257566
    ],
    [
      0.609191031403356,
      -0.7160287541257286,
      -0.34086523806758606
    ],
    [
      0.6175962532552326,
      -0.7154822918721527,
      -0.32658836167639255
    ],
    [
      0.6234683714597803,
      -0.7117668725619556,
      -0.32353532869327006
    ],
    [
      0.6318578820194541,
      -0.7110960252730054,
      -0.30837973307405064
    ],
    [
      0.6377793755880271,
      -0.7071396956351341,
      -0.3052718770728745
    ],
    [
      0.6459834503621225,
      -0.7062797395109075,
      -0.2896106203416098
    ],
    [
      0.6511232618377415,
      -0.7027166389090359,
      -0.28675394207258476
    ],
    [
      0.6634661135397125,
      -0.6986126682676472,
      -0.2678676089423052
    ],
    [
      0.6593781594543666,
      -0.7015231997315567,
      -0.2703435648817449
    ],
    [
      0.671799396026367,
      -0.6970199937946048,
      -0.2506964294703411
    ],
    [
      0.6748292743429833,
      -0.6948052657070144,
      -0.2486988002293693
    ],
    [
      0.6833695624169036,
      -0.6927794173833747,
      -0.23035346754950692
    ],
    [
      0.6850847735196048,
      -0.6914908351868944,
      -0.22912720908727335
    ],
    [
      0.6944028957027158,
      -0.6886477180436807,
      -0.20873173901664868
    ],
    [
      0.6940128724190254,
      -0.6889484860335673,
      -0.20903616076829676
    ],
    [
      0.7028265803472741,
      -0.6858245539280816,
      -0.1888901246405024
    ],
    [
      0.7027087229341908,
      -0.6865903528290765,
      -0.18653186889709455
    ],
    [
      0.7096756496839856,
      -0.6839000037050957,
      -0.16923728069720073
    ],
    [
      0.7090800248731955,
      -0.6862508331262863,
      -0.16206576553765528
    ],
    [
      0.22611976894931013,
      -0.9738590894585993,
      0.02164079409768098
    ],
    [
      0.18789101182553034,
      -0.981397625389471,
      0.03944196439182779
    ],
    [
      0.22287818398520418,
      -0.9734633656036407,
      0.05190752287568811
    ],
    [
      0.2262565456759581,
      -0.9729242611662772,
      0.04718429370920665
    ],
    [
      0.23840586560838609,
      -0.9711643045445202,
      0.0015927404291055003
    ],
    [
      0.2393056017095069,
      -0.9709148821722529,
      0.0075578149548118055
    ],
    [
      0.24249754475678725,
      -0.9700820226361064,
      -0.011653760988224697
    ],
    [
      0.24140769711786678,
      -0.9702436185295915,
      -0.01869878271045485
    ],
    [
      0.24663416818966333,
      -0.9684551981276232,
      -0.03558252802962345
    ],
    [
      0.2457791928464875,
      -0.9684628035188663,
      -0.04089482319446765
    ],
    [
      0.2504269364330432,
      -0.9662168931336876,
      -0.06092015209965166
    ],
    [
      0.25093468217135334,
      -0.9662744917167962,
      -0.05783936324864586
    ],
    [
      0.2560820176315433,
      -0.9633681458631745,
      -0.07964807456497067
    ],
    [
      0.25561373914520996,
      -0.9632790190449279,
      -0.08218970633872684
    ],
    [
      0.26202659244090853,
      -0.9594935229843236,
      -0.10350963339195741
    ],
    [
      0.2620068907186346,
      -0.9594876313601023,
      -0.10361406508256443
    ],
    [
      0.2678170110339591,
      -0.9555557868238501,
      -0.12323630499284283
    ],
    [
      0.27080486996552233,
      -0.9543340988308417,
      -0.12613940784577113
    ],
    [
      0.2757655007786554,
      -0.9505122820753004,
      -0.14310761756210588
    ],
    [
      0.2807407192164808,
      -0.9483162283264938,
      -0.147922208158297
    ],
    [
      0.2850988682004086,
      -0.9445901156004115,
      -0.16269034655088563
    ],
    [
      0.29090195682041375,
      -0.9418088519221947,
      -0.16844030978079913
    ],
    [
      0.2914358706236438,
      -0.9413280536456606,
      -0.1701958540432488
    ],
    [
      0.28599006677411676,
      -0.9399056554160126,
      -0.1865128430525148
    ],
    [
      0.29468116277764866,
      -0.932936953779516,
      -0.20686143327505568
    ],
    [
      0.29508609614544423,
      -0.9327730940706666,
      -0.20702306837518641
    ],
    [
      0.30343474509275215,
      -0.9254531577025622,
      -0.226856360653284
    ],
    [
      0.2821242182303964,
      -0.9296913055488134,
      -0.23681216580832665
    ],
    [
      0.2880619825224667,
      -0.9225057606307995,
      -0.2569112995339366
    ],
    [
      0.30396639766746875,
      -0.9252225330086519,
      -0.22708521198465711
    ],
    [
      0.3122576510601449,
      -0.917321777107217,
      -0.2470140008162658
    ],
    [
      0.2887992610796328,
      -0.9221789995215666,
      -0.25725644722972557
    ],
    [
      0.32019607489556395,
      -0.9088314413775047,
      -0.26739462370279965
    ],
    [
      0.2950085971474091,
      -0.9141970618181806,
      -0.27787345999955304
    ],
    [
      0.3125171380962903,
      -0.9171997417413601,
      -0.24713897334432416
    ],
    [
      0.3204574103250391,
      -0.9090268628264068,
      -0.2664154853377533
    ],
    [
      0.3279791358537385,
      -0.9001442587551018,
      -0.2866531002359177
    ],
    [
      0.32766175161307776,
      -0.8998534948398794,
      -0.28792614392288984
    ],
    [
      0.3011613896318806,
      -0.9056843201212726,
      -0.2983919061929509
    ],
    [
      0.29492635012974405,
      -0.9141716564238447,
      -0.2780442960940428
    ],
    [
      0.33518482300963665,
      -0.8907615935124075,
      -0.30691190584145667
    ],
    [
      0.33502854525572295,
      -0.8905835571737886,
      -0.3075984420563849
    ],
    [
      0.3070367770755729,
      -0.896458040062624,
      -0.31951744855347697
    ],
    [
      0.30074123502625894,
      -0.9055284838216451,
      -0.2992872776155932
    ],
    [
      0.34256513429871566,
      -0.8807764473612322,
      -0.3269280938320069
    ],
    [
      0.312962460815509,
      -0.8866020796641476,
      -0.34057488230271665
    ],
    [
      0.3066005894279619,
      -0.8962530739574637,
      -0.32050975957718286
    ],
    [
      0.35153576600130054,
      -0.8697145487552973,
      -0.34643788607086334
    ],
    [
      0.31925696198915504,
      -0.876391439028054,
      -0.3605732072960937
    ],
    [
      0.3128402895848042,
      -0.8865254809520222,
      -0.34088638112321473
    ],
    [
      0.3442629181851367,
      -0.8797178075115099,
      -0.3279933266238747
    ],
    [
      0.3533862828068673,
      -0.8684566424178974,
      -0.34770849193566866
    ],
    [
      0.3603529791657347,
      -0.8584737680382362,
      -0.36492262193047464
    ],
    [
      0.325112255825966,
      -0.8653915081361568,
      -0.3813129407161258
    ],
    [
      0.3186992112754776,
      -0.8759774695992614,
      -0.3620694484306339
    ],
    [
      0.3315957812165321,
      -0.8536975096707579,
      -0.401552985123189
    ],
    [
      0.32488412967583474,
      -0.8651783468100572,
      -0.38199048482362996
    ],
    [
      0.36209792040089833,
      -0.8571886158937039,
      -0.36621410789807196
    ],
    [
      0.3691761909725694,
      -0.8466811037166716,
      -0.38319714068362215
    ],
    [
      0.3841905204087544,
      -0.83459852417896,
      -0.3947694864935136
    ],
    [
      0.3863683162724766,
      -0.8251381978942403,
      -0.4121486122221172
    ],
    [
      0.3606948456160311,
      -0.8258071075905152,
      -0.4335226054071629
    ],
    [
      0.35610079297660474,
      -0.8281246855431341,
      -0.43289921510152757
    ],
    [
      0.33856560376788203,
      -0.8408605584196273,
      -0.4222876427738824
    ],
    [
      0.3314148226555141,
      -0.8534947895145237,
      -0.402132887980793
    ],
    [
      0.36768366909616795,
      -0.8029001901260266,
      -0.46921211000524043
    ],
    [
      0.3601636016211818,
      -0.8148852099088665,
      -0.4541412497660185
    ],
    [
      0.41643280293360857,
      -0.8060133640557885,
      -0.4206259354870183
    ],
    [
      0.3801037250420519,
      -0.7930283793133766,
      -0.47605372366231474
    ],
    [
      0.3781433695471704,
      -0.7941089513476425,
      -0.47581358267399193
    ],
    [
      0.4260524640988689,
      -0.8011642204358693,
      -0.4202561001682993
    ],
    [
      0.443971086887403,
      -0.7853043612732706,
      -0.43149360849634677
    ],
    [
      0.48473301329920865,
      -0.7742344119579682,
      -0.40693363237506974
    ],
    [
      0.46578798949088,
      -0.7816565868310718,
      -0.4147945625362551
    ],
    [
      0.49980846234459486,
      -0.7715049402164307,
      -0.3936643598173113
    ],
    [
      0.5007849996044336,
      -0.7708988121556554,
      -0.39361072849731493
    ],
    [
      0.5200464686669702,
      -0.7623674030798441,
      -0.3851592049377872
    ],
    [
      0.5299331717683166,
      -0.7606694898885985,
      -0.37490366844323
    ],
    [
      0.538100519320817,
      -0.7567065957780732,
      -0.37127208218855706
    ],
    [
      0.5496501971414581,
      -0.7546507120173445,
      -0.3583112664068368
    ],
    [
      0.5556440476978294,
      -0.7515544330787799,
      -0.3555638147753592
    ],
    [
      0.5669743296940499,
      -0.7492383202914168,
      -0.3423186364702909
    ],
    [
      0.571396471814429,
      -0.74684647744903,
      -0.3401858479125759
    ],
    [
      0.5827638458050773,
      -0.7442252679925104,
      -0.3263664359335257
    ],
    [
      0.5865243291080545,
      -0.7420827386251937,
      -0.32450334420292
    ],
    [
      0.5985645787263676,
      -0.7390262833936173,
      -0.30912877178862375
    ],
    [
      0.6018404963859642,
      -0.7370508428932728,
      -0.30748019757410766
    ],
    [
      0.6139425911922987,
      -0.7336284264810305,
      -0.2913139656436902
    ],
    [
      0.6162217129391888,
      -0.7321876865758712,
      -0.2901240978081031
    ],
    [
      0.6290254959537849,
      -0.7280861655183486,
      -0.27242881826429977
    ],
    [
      0.6288823685312875,
      -0.7281799159365097,
      -0.27250867248066746
    ],
    [
      0.6414297489374573,
      -0.7237317611469598,
      -0.2545195770174671
    ],
    [
      0.6418679930045803,
      -0.7241022993443028,
      -0.2523516190567554
    ],
    [
      0.653017712367024,
      -0.7197597350756695,
      -0.235613647946677
    ],
    [
      0.6633821164819889,
      -0.7163618010709739,
      -0.21621733856984587
    ],
    [
      0.6538136177214803,
      -0.7204650856563505,
      -0.23120945835354062
    ],
    [
      0.6643902419342514,
      -0.7172414586622607,
      -0.21011971920450342
    ],
    [
      0.6725509614972794,
      -0.713413098565948,
      -0.19676624452282954
    ],
    [
      0.6738708240312682,
      -0.7146160995088826,
      -0.1876750991531114
    ],
    [
      0.6801830822413373,
      -0.7113938264891057,
      -0.17683268438233554
    ],
    [
      0.6818630848381836,
      -0.7129903692659649,
      -0.16342419303438174
    ],
    [
      0.6850392274810478,
      -0.7112590405943674,
      -0.15758119806927862
    ],
    [
      0.6894314069349398,
      -0.7155892959882085,
      -0.11232228006415164
    ],
    [
      -0.17284912413259665,
      0.8921442962157623,
      -0.41737481358639317
    ],
    [
      -0.14925683660852496,
      0.9026709827711298,
      -0.4036180045397117
    ],
    [
      -0.1912867698116161,
      0.8785877798450521,
      -0.43759900000111995
    ],
    [
      -0.19545496298627768,
      0.8663415334479142,
      -0.4596190867089282
    ],
    [
      -0.19619488437797286,
      0.8539148628061154,
      -0.482013458756835
    ],
    [
      -0.19296386138210161,
      0.8639576769653756,
      -0.46512587609495615
    ],
    [
      -0.19355835274793554,
      0.8513375308697436,
      -0.48760596039641896
    ],
    [
      -0.1968269845087229,
      0.840738608531491,
      -0.5043983845074599
    ],
    [
      -0.19661792710172676,
      0.8270522795540013,
      -0.5266174300445724
    ],
    [
      -0.19357926494093025,
      0.8375099448150288,
      -0.5109835227488813
    ],
    [
      -0.1968635221985417,
      0.8117698651655341,
      -0.5497949068850265
    ],
    [
      -0.19346474609218126,
      0.823798964682451,
      -0.5328476872499399
    ],
    [
      -0.19811039549256187,
      0.7954821667216816,
      -0.5726782636223935
    ],
    [
      -0.1943752653945099,
      0.8090908619431418,
      -0.5546081800000047
    ],
    [
      -0.2003628075441733,
      0.7783052320799786,
      -0.5950594181003669
    ],
    [
      -0.19631141913815886,
      0.7934437376944946,
      -0.576115319905097
    ],
    [
      -0.2021932488819977,
      0.7609597382424176,
      -0.6164885780617301
    ],
    [
      -0.1982781914286956,
      0.7758143465880074,
      -0.5989973776503438
    ],
    [
      -0.47406121718662514,
      0.7965180396632786,
      -0.3752665384103717
    ],
    [
      -0.4715150121997222,
      0.793757487712054,
      -0.3842169230673531
    ],
    [
      -0.4755949457642798,
      0.7822675083836432,
      -0.4023269726114799
    ],
    [
      -0.4781213731190606,
      0.7795827452810659,
      -0.40453763215154753
    ],
    [
      -0.48123437720320567,
      0.770354755426171,
      -0.4182905987350505
    ],
    [
      -0.48864423218845565,
      0.7622773047416875,
      -0.4244527359137918
    ],
    [
      -0.4902634805626287,
      0.7575376931384596,
      -0.43102014233800945
    ],
    [
      -0.49944791904428776,
      0.7471617119945839,
      -0.4385215528245483
    ],
    [
      -0.5005891635556166,
      0.7434368954520082,
      -0.4435223464622364
    ],
    [
      -0.5129747283493276,
      0.727425309828962,
      -0.45575140887897664
    ],
    [
      -0.512351178929066,
      0.7296865377999443,
      -0.45282869388271596
    ],
    [
      -0.5249622191080071,
      0.7127912106175669,
      -0.4651272498742039
    ],
    [
      -0.5252819760938261,
      0.7116032743663318,
      -0.46658292457191397
    ],
    [
      -0.5383770939090237,
      0.6949225146012196,
      -0.47668942032983275
    ],
    [
      -0.5424833786603757,
      0.679897033835004,
      -0.49340835750885587
    ],
    [
      -0.5796591481685472,
      0.652894852026049,
      -0.48756905576789594
    ],
    [
      -0.5507775434714892,
      0.6759140562819158,
      -0.4896777370149055
    ],
    [
      -0.6042717038773281,
      0.6402038058114465,
      -0.47433616235506465
    ],
    [
      -0.6085970465372789,
      0.6221277863937554,
      -0.49251056064099485
    ],
    [
      -0.6373804053425952,
      0.5955317418143592,
      -0.4889664235679833
    ],
    [
      -0.6528810775026154,
      0.5839335689412146,
      -0.4824602426134195
    ],
    [
      -0.6460369445633684,
      0.590582176878875,
      -0.4835793198765188
    ],
    [
      -0.6650127540174662,
      0.5766040581631705,
      -0.47464281002019626
    ],
    [
      -0.6758828151006948,
      0.5656710303580409,
      -0.47243910259972377
    ],
    [
      -0.684453912442224,
      0.5637264304389129,
      -0.4623152099673271
    ],
    [
      -0.6979272727409614,
      0.5548424056570024,
      -0.45282162807126813
    ],
    [
      -0.7112792217470194,
      0.5485605926498995,
      -0.4395032933921489
    ],
    [
      -0.7043028151865258,
      0.5533484104146216,
      -0.4447056118511954
    ],
    [
      -0.7217628410932967,
      0.5459962350851204,
      -0.4253780818164078
    ],
    [
      -0.7243870917978706,
      0.5441294548982715,
      -0.42330423757474167
    ],
    [
      -0.019494537736240446,
      0.17798522093545335,
      -0.9838400399084234
    ],
    [
      -0.019928646170769466,
      0.17894156356966437,
      -0.983657850011397
    ],
    [
      -0.01943835567930477,
      0.1844343588277081,
      -0.9826525925332397
    ],
    [
      -0.045617956595435605,
      0.29492369081447,
      -0.9544312540106951
    ],
    [
      -0.09855451083014886,
      0.2988525404755433,
      -0.9491965905155495
    ],
    [
      -0.052694357467308967,
      0.28670020726818196,
      -0.956570068444277
    ],
    [
      -0.09097407100402458,
      0.19614490542782112,
      -0.9763456839048688
    ],
    [
      -0.11102184415605872,
      0.25400835576422104,
      -0.9608089848258834
    ],
    [
      -0.07549492666023375,
      0.1866048573094631,
      -0.979530062467243
    ],
    [
      0.46708404127003245,
      0.3037373597175106,
      0.8304071981279366
    ],
    [
      0.43688357828241087,
      0.2895720982955217,
      0.8516341579081275
    ],
    [
      0.44394093791516076,
      0.2997925928601744,
      0.8444174589083181
    ],
    [
      0.4014708623008023,
      0.27534915912272595,
      0.8735009944435427
    ],
    [
      0.4077426708700078,
      0.28526516770502564,
      0.8673924708262206
    ],
    [
      0.3645506078166372,
      0.26430459879629087,
      0.892886293654266
    ],
    [
      0.36966070262014855,
      0.2717755945076488,
      0.8885319303032346
    ],
    [
      0.323743860177689,
      0.24967165895305757,
      0.9126083364252581
    ],
    [
      0.33076545275306113,
      0.2615737585078816,
      0.9067377703201311
    ],
    [
      0.2789692535808736,
      0.22750086687033608,
      0.932962759776496
    ],
    [
      0.2913560943967079,
      0.24919322210380923,
      0.9235877675215378
    ],
    [
      0.23050259525388186,
      0.20428738014189884,
      0.9513859468669823
    ],
    [
      0.25055913625158993,
      0.23336425117454443,
      0.9395537480711794
    ],
    [
      0.19165341921282894,
      0.16605092414243727,
      0.9673138360922344
    ],
    [
      0.18514664119068458,
      0.17991032616398236,
      0.966101959316602
    ],
    [
      0.2075275291958178,
      0.21162654801697983,
      0.9550636255246537
    ],
    [
      0.17230284148312058,
      0.12953395019361547,
      0.9764899828283343
    ],
    [
      0.14520168950851386,
      0.14184730555437466,
      0.979181194300032
    ],
    [
      0.15238609043044113,
      0.1922290507892988,
      0.9694464768495322
    ],
    [
      0.15356641839958496,
      0.19240247777783365,
      0.9692257949956108
    ],
    [
      0.1189673872208678,
      0.09017048866079928,
      0.988795248649847
    ],
    [
      0.10226655829675001,
      0.09509395263467654,
      0.9902013387319022
    ],
    [
      0.084902821251011,
      0.110489855992476,
      0.9902441631569362
    ],
    [
      0.11376742263398092,
      0.14805333860816808,
      0.9824139567790129
    ],
    [
      0.12987613183517357,
      0.13938019737959306,
      0.9816849550430924
    ],
    [
      0.06907632707593828,
      0.12197675562701694,
      0.9901263212966338
    ],
    [
      0.09270745967535285,
      0.16370521758041645,
      0.9821435377059157
    ],
    [
      0.09989807653235201,
      0.1651075369827884,
      0.9812032794159493
    ],
    [
      0.08103198353425535,
      0.11147436172167023,
      0.9904581184094815
    ],
    [
      0.06039127268876819,
      0.12399815985531744,
      0.9904430072121899
    ],
    [
      0.05074594944816427,
      0.16283536761856074,
      0.9853473964379936
    ],
    [
      0.0650304151499248,
      0.16893344322267959,
      0.9834798100959461
    ],
    [
      0.008386141105361029,
      -0.014783872249706053,
      0.9998555444456291
    ],
    [
      3.574849180676077e-15,
      -7.149698361352144e-15,
      1
    ],
    [
      -3.574849180676073e-15,
      7.149698361352146e-15,
      1
    ],
    [
      0,
      0,
      1
    ],
    [
      0.007642277444602288,
      0.05404193177044551,
      0.9985094216911417
    ],
    [
      0.02160354215107696,
      0.05915042052446563,
      0.9980152878179299
    ],
    [
      0.03336999260541839,
      0.0404024328128946,
      0.9986260997071496
    ],
    [
      0.02510404253474379,
      -0.012805306276361294,
      0.9996028267164826
    ],
    [
      -0.024265935189663024,
      0.07923995270652379,
      0.9965601809647218
    ],
    [
      -0.01687248647256638,
      0.08207026342816394,
      0.9964837133947875
    ],
    [
      -0.027741453508236022,
      0.07911160138225075,
      0.9964796868396195
    ],
    [
      -0.05576128725616294,
      0.061708470701819805,
      0.9965353699127685
    ],
    [
      -0.05526606745576615,
      0.0625572628297072,
      0.9965100354011642
    ],
    [
      -0.04294310359965696,
      0.0732199902615907,
      0.9963908484522134
    ],
    [
      -0.06057830105347955,
      0.05751295452799786,
      0.9965051577904324
    ],
    [
      -0.06634399907777068,
      0.027919610818714274,
      0.9974061204534993
    ],
    [
      -0.05338768193995273,
      -0.02732072436263008,
      0.998200046802934
    ],
    [
      -0.05774114514196188,
      -0.024826231265059444,
      0.998022854647562
    ],
    [
      -0.06902078164097038,
      -0.011978187686520621,
      0.9975433096970858
    ],
    [
      -0.07428911450509514,
      0.004641342323226025,
      0.9972259450132088
    ],
    [
      -0.07118332363942648,
      0.02175658585708049,
      0.9972259450132092
    ],
    [
      -0.0038363593469193857,
      -0.02704380149557593,
      0.9996268879675202
    ],
    [
      -0.20837336875749868,
      -0.3919380095213626,
      0.8960832192855102
    ],
    [
      -0.16168967520725738,
      -0.43283835633543083,
      0.8868525278851125
    ],
    [
      -0.16431955824854044,
      -0.4382264790101379,
      0.8837175090895176
    ],
    [
      -0.19720546330077066,
      -0.45009850467356305,
      0.8709313068979384
    ],
    [
      -0.2230594251960818,
      -0.44489627629346784,
      0.8673590929778738
    ],
    [
      -0.22570917558606712,
      -0.43853286925030593,
      0.8699105072611504
    ],
    [
      -0.21029277868942026,
      -0.3831458500982249,
      0.8994310450410254
    ],
    [
      -0.19826695884941903,
      -0.3749988819844854,
      0.9055749839405839
    ],
    [
      -0.14326403128550372,
      -0.3745855182714229,
      0.9160573709332597
    ],
    [
      -0.1422916198032964,
      -0.3759788309322979,
      0.9156380363574553
    ],
    [
      -0.16037620741463043,
      -0.43219135670846703,
      0.8874063912784232
    ],
    [
      -0.1060135426124099,
      -0.41902813839714814,
      0.9017630220929372
    ],
    [
      -0.10756732449230687,
      -0.4290710316251299,
      0.8968429742835217
    ],
    [
      -0.11259843381159607,
      -0.4358773509397828,
      0.8929347835317499
    ],
    [
      -0.12297438037038891,
      -0.3867243420845923,
      0.9139592906753332
    ],
    [
      -0.10684361403087783,
      -0.46952503979057153,
      0.8764306470853714
    ],
    [
      -0.15064675438340322,
      -0.47374937084354657,
      0.8676791394398568
    ],
    [
      -0.10482480781735354,
      -0.46611601428925586,
      0.8784916737733791
    ],
    [
      -0.13825848579683772,
      -0.5326466143428942,
      0.8349683678644465
    ],
    [
      -0.1554297192463826,
      -0.4822553254032502,
      0.8621318944890022
    ],
    [
      -0.10042659798129679,
      -0.5022791149599607,
      0.8588539975414573
    ],
    [
      -0.12304656068789431,
      -0.5354441910708101,
      0.8355591314511537
    ],
    [
      -0.13159094239815208,
      -0.5408667948220994,
      0.8307508255413504
    ],
    [
      -0.10275233757267521,
      -0.6549161056729492,
      0.748683412166671
    ],
    [
      -0.07638737420231792,
      -0.6795659867260222,
      0.7296266433920591
    ],
    [
      -0.08009772824676654,
      -0.6931473819074627,
      0.7163316696088043
    ],
    [
      -0.10911420823582905,
      -0.6982911409149358,
      0.707448635648402
    ],
    [
      -0.15215769715362437,
      -0.6724051939841852,
      0.7243751033131911
    ],
    [
      -0.15655107594765322,
      -0.657819972377018,
      0.7367256236629289
    ],
    [
      -0.14732175682363893,
      -0.6357996849498828,
      0.757664213609186
    ],
    [
      -0.09119135387938253,
      -0.739399574808543,
      0.6670625201213085
    ],
    [
      -0.0689579244326641,
      -0.7026470313747109,
      0.7081892077391783
    ],
    [
      0.42447450829019356,
      0.16533220102840024,
      0.8902171954724887
    ],
    [
      0.38087055056371055,
      0.1569422179640352,
      0.9112117009421166
    ],
    [
      0.23738138450816748,
      0.5816284789050445,
      0.778047807538579
    ],
    [
      0.2161087266324694,
      0.6101443812775644,
      0.7622472382821146
    ],
    [
      0.7568904774266285,
      0.08873432115621373,
      0.647489787896177
    ],
    [
      0.7525727644345949,
      0.11474742377402115,
      0.6484344708361031
    ],
    [
      0.7480725033534312,
      0.12302963075639549,
      0.6521129040913664
    ],
    [
      0.7456173138788862,
      0.13560509861078013,
      0.6524308993868968
    ],
    [
      0.7519496781067486,
      0.18672656833343093,
      0.6322221684452212
    ],
    [
      0.7672379886789336,
      0.19653778761888158,
      0.6105069751983019
    ],
    [
      0.7404381547331406,
      0.14540287752688244,
      0.6562083070354139
    ],
    [
      0.7320522488162897,
      0.19437163563990753,
      0.652931215566908
    ],
    [
      0.7196538668598467,
      0.211222664776259,
      0.6614252019680579
    ],
    [
      0.7362531350467935,
      0.23784457337526702,
      0.6335308043415926
    ],
    [
      0.7348586644191399,
      0.24164763770453174,
      0.6337106299565577
    ],
    [
      0.7144466718192096,
      0.21336708179079297,
      0.6663635955951792
    ],
    [
      0.7058055411001719,
      0.2252108313910292,
      0.6716536455469106
    ],
    [
      0.7206715375883279,
      0.2554283669317634,
      0.6445066983954844
    ],
    [
      0.7261068270881416,
      0.252811613464407,
      0.6394178319014218
    ],
    [
      0.6907364447017627,
      0.23826955461070168,
      0.6827230648706594
    ],
    [
      0.7038161119611853,
      0.27052925481308543,
      0.6568537149427695
    ],
    [
      0.7104895982892443,
      0.26783957315259654,
      0.6507430320612148
    ],
    [
      0.6973159163417867,
      0.2294439678907972,
      0.6790478469260771
    ],
    [
      0.6943901925401834,
      0.2816692929936174,
      0.6621817498908308
    ],
    [
      0.6781592741740601,
      0.2450592401768924,
      0.6928534965312914
    ],
    [
      0.6815156269885685,
      0.2859275122238886,
      0.6736333631314859
    ],
    [
      0.674990055843194,
      0.24469018400505702,
      0.6960712164458268
    ],
    [
      0.6623154968134294,
      0.25163425177874776,
      0.7057041774090119
    ],
    [
      0.6564946555094036,
      0.2939608472808371,
      0.6946954638930083
    ],
    [
      0.6600363150356835,
      0.29559891878848515,
      0.6906325665976044
    ],
    [
      0.6782843721967176,
      0.28959863337969366,
      0.6753243235500395
    ],
    [
      0.628982915640805,
      0.2937410616994746,
      0.7197893306403321
    ],
    [
      0.6415148644819814,
      0.29926881478157247,
      0.7063263092564923
    ],
    [
      0.6472150305710556,
      0.24833482187634046,
      0.72072360891437
    ],
    [
      0.6453266691602458,
      0.24935472377589626,
      0.7220635095344377
    ],
    [
      0.6265737001333332,
      0.29452810267010066,
      0.7215667640896264
    ],
    [
      0.8092864662886183,
      -0.12926997398656898,
      0.5730136903317343
    ],
    [
      0.7879661304242971,
      -0.13451048784200612,
      0.6008463247492365
    ],
    [
      0.7988642016157139,
      -0.11366477940132143,
      0.5906744495071181
    ],
    [
      0.7993069908712155,
      -0.11355083365754691,
      0.5900970619483533
    ],
    [
      0.7777615676919437,
      -0.1163214174760056,
      0.6177024135113469
    ],
    [
      0.788370036198392,
      -0.09730186453961956,
      0.6074578447774459
    ],
    [
      0.7740923193410847,
      -0.11701161319511055,
      0.6221650613097927
    ],
    [
      0.7655776800596913,
      -0.1012949225779432,
      0.6353189391591827
    ],
    [
      0.7769905871615691,
      -0.08053612715942071,
      0.6243392985264355
    ],
    [
      0.7779106554937611,
      -0.0805225003841806,
      0.6231943027669191
    ],
    [
      0.7883759762132524,
      -0.0970163417391007,
      0.6074958020969061
    ],
    [
      0.766303557782403,
      -0.06395291403523788,
      0.6392877928730007
    ],
    [
      0.7608565463333431,
      -0.10162825019859797,
      0.64091264199052
    ],
    [
      0.7527507699593026,
      -0.08618207065480589,
      0.6526399689134333
    ],
    [
      0.7646510645064942,
      -0.06387030857173119,
      0.641271653226647
    ],
    [
      0.7537891704763723,
      -0.04726135776279155,
      0.6554145638715698
    ],
    [
      0.7465819377299139,
      -0.08606363391173118,
      0.659703312992556
    ],
    [
      0.7390041467840937,
      -0.0712204047517108,
      0.669925760799595
    ],
    [
      0.7516561735619058,
      -0.04697266389466494,
      0.657880358114538
    ],
    [
      0.7242560268703622,
      -0.05716778627540738,
      0.6871572249160498
    ],
    [
      0.7374952952935668,
      -0.029658680400208828,
      0.67470071298078
    ],
    [
      0.7407913183600887,
      -0.030426771186701264,
      0.6710457765588529
    ],
    [
      0.7308380082295971,
      -0.07032672398850905,
      0.6789182260184502
    ],
    [
      0.7132754141956317,
      -0.05491806310226661,
      0.6987289816868523
    ],
    [
      0.7080635508979217,
      -0.044418510823557425,
      0.7047503130797771
    ],
    [
      0.7215900882322623,
      -0.013084755072431738,
      0.6921968894394502
    ],
    [
      0.727902109780836,
      -0.01491472855789379,
      0.6855188323078019
    ],
    [
      0.7130284851441268,
      -0.00008742219130362963,
      0.7011350595501784
    ],
    [
      0.6934832876542907,
      -0.039990214945795854,
      0.7193620176606388
    ],
    [
      0.6903347780426461,
      -0.033699264989296956,
      0.7227048178641067
    ],
    [
      0.7036067599330376,
      0.003387797850909419,
      0.7105814873765388
    ],
    [
      0.6979844790201145,
      0.011984035632043474,
      0.7160126045936547
    ],
    [
      0.6703066181431188,
      -0.02582719728647878,
      0.7416346766123201
    ],
    [
      0.6833206675559994,
      0.01807892092911153,
      0.729894525194471
    ],
    [
      0.6802767068719685,
      0.022692122741714765,
      0.7326040333310382
    ],
    [
      0.6698925500333349,
      -0.026006746493139277,
      0.7420024397174698
    ],
    [
      0.6501425586820633,
      -0.016286673859593953,
      0.759637675240592
    ],
    [
      0.659279440346165,
      0.030716392835194752,
      0.7512703393240289
    ],
    [
      0.6614862778588105,
      0.03126953747066883,
      0.7493050915554137
    ],
    [
      0.6422455713687562,
      0.03910800884283485,
      0.7655006137826206
    ],
    [
      0.643363510875638,
      -0.018856244587385836,
      0.7653285797053664
    ],
    [
      0.6272270665921893,
      -0.009834700259637862,
      0.7787743483223881
    ],
    [
      0.6312641703711145,
      0.035790820249101025,
      0.7747416113721821
    ],
    [
      0.6177046460783067,
      0.042690913139650566,
      0.7852505690214918
    ],
    [
      0.6147093112072903,
      -0.014367776098071912,
      0.7886228691364804
    ],
    [
      0.6003973864174662,
      -0.005365150098786915,
      0.7996838084815105
    ],
    [
      0.6022437949746678,
      0.03747774718965429,
      0.7974320221060217
    ],
    [
      0.5838870548068262,
      -0.011160049198705942,
      0.8117581909231916
    ],
    [
      0.5704189022869987,
      -0.001295928843147211,
      0.8213529061750064
    ],
    [
      0.571977085261812,
      0.037451950526567156,
      0.8194141598344254
    ],
    [
      0.5898373588750143,
      0.044116134548942705,
      0.8063161022501083
    ],
    [
      0.558439315212401,
      0.045370416361286706,
      0.8283037224015766
    ],
    [
      0.5502279167295758,
      -0.00798836391880649,
      0.8349763024741071
    ],
    [
      0.5379585529414609,
      0.0027045566644135683,
      0.8429669511258306
    ],
    [
      0.539432796036542,
      0.03756879734080443,
      0.8411901354786347
    ],
    [
      0.5245144264943549,
      0.047173740147952094,
      0.8500936740381918
    ],
    [
      0.5129394408847399,
      -0.0046578485951455605,
      0.858412158832408
    ],
    [
      0.5028182996091416,
      0.005986397777536504,
      0.8643714020140998
    ],
    [
      0.5039556716906876,
      0.03808241291745944,
      0.862889570453353
    ],
    [
      0.4881950779027488,
      0.04923448649707727,
      0.871344668458411
    ],
    [
      0.47136826316526076,
      -0.0011578370795122326,
      0.8819357232212917
    ],
    [
      0.46425358796502114,
      0.008177413692405352,
      0.8856645730562489
    ],
    [
      0.46517870590098637,
      0.03854798777829521,
      0.884377082592334
    ],
    [
      0.4220952515667476,
      0.03753614872814485,
      0.9057740535826043
    ],
    [
      0.44893036350399257,
      0.05135028418793898,
      0.8920900610577337
    ],
    [
      0.4240739494564159,
      0.003478016366345357,
      0.9056208857985734
    ],
    [
      0.42162329668771104,
      0.007711322100036127,
      0.9067382925638775
    ],
    [
      0.3736278241004761,
      0.010886438497694212,
      0.9275148163316743
    ],
    [
      0.3739186206002241,
      0.03508675463413694,
      0.9267975964673568
    ],
    [
      0.4050068585503094,
      0.0530298629515952,
      0.9127744946932648
    ],
    [
      0.32113932440252685,
      0.022711648874569865,
      0.9467595868686447
    ],
    [
      0.3192934039256668,
      0.03166800180323716,
      0.9471266334927717
    ],
    [
      0.3556944174332654,
      0.054954544946795574,
      0.9329852514356808
    ],
    [
      0.30568933460166753,
      0.04963317524870524,
      0.9508367781199468
    ],
    [
      0.31793261462375133,
      0.032860911961541374,
      0.9475436734122397
    ],
    [
      0.2588924449059328,
      0.008816502241666602,
      0.9658659178472192
    ],
    [
      0.2608338446871721,
      0.02615985019089427,
      0.9650292056221398
    ],
    [
      0.28578539254276936,
      0.04783825868107142,
      0.9570988509111993
    ],
    [
      0.19437315181273224,
      0.015046367831492088,
      0.9808122576056357
    ],
    [
      0.1934685081079215,
      0.031048136414793575,
      0.9806150873791732
    ],
    [
      0.11992469163308253,
      0.019988821284965715,
      0.9925817424073182
    ],
    [
      0.12971970530175847,
      0.043516573528228464,
      0.9905953290243131
    ],
    [
      0.7335310628465787,
      0.14756060700688023,
      0.6634440798582272
    ],
    [
      0.7185054005981802,
      0.16375670641980383,
      0.6759687347901431
    ],
    [
      0.7171480501603766,
      0.16744155965270427,
      0.6765072048782924
    ],
    [
      0.6973727593199847,
      0.18189080589320208,
      0.693243802200894
    ],
    [
      0.7044462519146021,
      0.18063871466071374,
      0.6863855570517159
    ],
    [
      0.6869761065355536,
      0.1924977557203578,
      0.7007199462637532
    ],
    [
      0.6733410896556907,
      0.19560067337593792,
      0.7129881861266474
    ],
    [
      0.6709249087480817,
      0.19802204146999278,
      0.7145957164113388
    ],
    [
      0.6468357776091012,
      0.19765501646677328,
      0.7365704116174834
    ],
    [
      0.6551885285330825,
      0.2022968818187096,
      0.7278763381818928
    ],
    [
      0.1329195210866593,
      0.07614568998201857,
      0.9881974675191469
    ],
    [
      0.244816233395916,
      0.7356873100947616,
      0.6315292500204328
    ],
    [
      0.24746688773917425,
      0.7448394758396671,
      0.6196565941742063
    ],
    [
      0.24736972078392344,
      0.7450292795249143,
      0.6194671854827105
    ],
    [
      0.19648624942738602,
      0.7953601368602535,
      0.5734068420237048
    ],
    [
      0.1787529389393864,
      0.8032177080097676,
      0.568232963105862
    ],
    [
      0.1520346148135727,
      0.8021985846874286,
      0.5773758798425641
    ],
    [
      0.14176655645243302,
      0.7987584848882245,
      0.5847111477393663
    ],
    [
      0.1017952023914751,
      0.8092192255444679,
      0.5786207581648711
    ],
    [
      0.21511880788595894,
      0.7697532403633391,
      0.6010023689170146
    ],
    [
      0.215012630464402,
      0.769921139951094,
      0.600825271603306
    ],
    [
      0.1954211134651235,
      0.7728590116896338,
      0.6037379700351584
    ],
    [
      0.18566688421339095,
      0.7775561555461208,
      0.6007780231323615
    ],
    [
      0.17234154208117378,
      0.7796066127769306,
      0.6020896296960812
    ],
    [
      0.1529192535278707,
      0.7882450170779008,
      0.5960582982832625
    ],
    [
      0.00016801137436377845,
      0.8194352241456652,
      0.5731717763476509
    ],
    [
      -0.019281145686280025,
      0.7864976756752996,
      0.6172921865521834
    ],
    [
      -0.0324014028622018,
      0.7827019988834267,
      0.6215526767993599
    ],
    [
      -0.04055356704920853,
      0.7783847083664066,
      0.6264763794277718
    ],
    [
      -0.06555739878176375,
      0.7530326529781627,
      0.6547091346648822
    ],
    [
      0.005830669248961081,
      0.543052262917724,
      0.8396786546269045
    ],
    [
      -0.005762508491948014,
      0.5337946133036713,
      0.8455945271250661
    ],
    [
      -0.005214887755049045,
      0.5155635172798962,
      0.8568354944770229
    ],
    [
      -0.04470349428077425,
      0.48658929884410657,
      0.8724863619848103
    ],
    [
      -0.059547875036430775,
      0.4966019033772943,
      0.8659333693424073
    ],
    [
      0.08832573119180923,
      0.5174559239462914,
      0.8511391965961398
    ],
    [
      0.08172186161847643,
      0.5152109229457171,
      0.8531583922174317
    ],
    [
      0.045933624886904036,
      0.5437126727167201,
      0.8380135032515825
    ],
    [
      0.03964528080637604,
      0.4879128696937011,
      0.8719915614827021
    ],
    [
      0.03239365490946196,
      0.4985327816469006,
      0.8662653847089876
    ],
    [
      0.033841586054255655,
      0.5373941468658315,
      0.8426519316821611
    ],
    [
      0.06482769729055705,
      0.4959871758288567,
      0.8659065140517876
    ],
    [
      -0.030872669598429405,
      0.6986266258285075,
      0.7148200584450193
    ],
    [
      0.22043801862105747,
      0.7325298765875473,
      0.6440551683303651
    ],
    [
      0.21179335043234507,
      0.7289848803951502,
      0.650941334428772
    ],
    [
      0.22026824367738648,
      0.7325543335019303,
      0.6440854363318753
    ],
    [
      0.1739380877324356,
      0.7261435804317892,
      0.665177451687657
    ],
    [
      0.1863183900711904,
      0.6139432127638759,
      0.7670457541910065
    ],
    [
      0.17975297417135652,
      0.608742264681119,
      0.772736516199056
    ],
    [
      0.15477850160158863,
      0.6212278849293473,
      0.7681923785277857
    ],
    [
      0.17718607704007158,
      0.5863269556137694,
      0.7904592305893067
    ],
    [
      0.17403144554075028,
      0.5830095892299688,
      0.7936075067871398
    ],
    [
      -0.518173034033309,
      0.779936749997025,
      -0.35099198396087805
    ],
    [
      -0.5184817203887503,
      0.778495473128813,
      -0.3537251813776728
    ],
    [
      -0.513776806391708,
      0.7743085320732509,
      -0.3694315773895143
    ],
    [
      -0.5236541737996538,
      0.7846605469020882,
      -0.33180435861742047
    ],
    [
      -0.5311795590243206,
      0.7865279798058488,
      -0.3149952587853642
    ],
    [
      -0.5283165876817519,
      0.7842229850179204,
      -0.32538576021376886
    ],
    [
      -0.5400363881699298,
      0.7853745788574373,
      -0.30256812511710446
    ],
    [
      -0.5520938757953547,
      0.782495213003936,
      -0.2879124761714714
    ],
    [
      -0.5438754559217469,
      0.7837043917940165,
      -0.3000115243264541
    ],
    [
      -0.5659940722546369,
      0.7779461469309686,
      -0.2728561940800916
    ],
    [
      -0.55987022603079,
      0.7787620113420936,
      -0.28297536941339807
    ],
    [
      -0.5828566405616082,
      0.7698608958579513,
      -0.2599852641632385
    ],
    [
      -0.5803986754518257,
      0.7701849721565575,
      -0.26448532321845225
    ],
    [
      -0.5991325115921705,
      0.7604991519631199,
      -0.25036228433338986
    ],
    [
      -0.6539676974702933,
      0.7180913960943051,
      -0.23805671072400955
    ],
    [
      -0.645972321210185,
      0.7183095437853768,
      -0.25836245767752236
    ],
    [
      -0.7010119571242622,
      0.6680980317563535,
      -0.24945391544751852
    ],
    [
      -0.7187110177337392,
      0.6443473871104111,
      -0.2612870408422864
    ],
    [
      -0.7059544040636865,
      0.6595813054819447,
      -0.2580327127358441
    ],
    [
      -0.726905131450261,
      0.6247621642390299,
      -0.2850985233329738
    ],
    [
      -0.7189266144598759,
      0.6403501215380977,
      -0.270363172172921
    ],
    [
      -0.7323706651780614,
      0.6114714727548999,
      -0.29955942113977585
    ],
    [
      -0.7268583135087774,
      0.623043955970189,
      -0.2889519354705778
    ],
    [
      -0.7335797220687426,
      0.6025062551165542,
      -0.31439943370650664
    ],
    [
      -0.7319903748886325,
      0.606199551343817,
      -0.3109858437629504
    ],
    [
      -0.7326654302239854,
      0.5941557645184741,
      -0.3319341724561815
    ],
    [
      -0.716239796153393,
      0.5921874273977507,
      -0.3692080785115354
    ],
    [
      -0.6884628413642314,
      0.6060777188618057,
      0.39835752127951474
    ],
    [
      -0.6899658023299057,
      0.6082724328470249,
      0.39236696988101716
    ],
    [
      -0.6906426654969299,
      0.5942619165672438,
      0.41214740459345617
    ],
    [
      -0.6887535513644497,
      0.5920636104150098,
      0.41842469657657877
    ],
    [
      -0.6900768489756784,
      0.57673384628504,
      0.4372322186859775
    ],
    [
      -0.6911165609702752,
      0.5778743530000466,
      0.43407272581607514
    ],
    [
      -0.6916127695193325,
      0.5604726944642779,
      0.4555679266561146
    ],
    [
      -0.6922843581505707,
      0.5612572405193016,
      0.45357764211291457
    ],
    [
      -0.6916596768992375,
      0.5443677144986919,
      0.47462688794790464
    ],
    [
      -0.6933764855654994,
      0.5462589148641813,
      0.46992578903082555
    ],
    [
      -0.69207034595965,
      0.528034599548304,
      0.4921565786649129
    ],
    [
      -0.6932137385669646,
      0.5293482986381807,
      0.4891268663556273
    ],
    [
      -0.6921540267472607,
      0.5112236148685084,
      0.5094832861422711
    ],
    [
      -0.6933841201399399,
      0.512591356275467,
      0.5064272538178003
    ],
    [
      -0.6923181284719782,
      0.4929033121491933,
      0.5270122710728969
    ],
    [
      -0.6932719421597533,
      0.49399598248546966,
      0.5247303912508395
    ],
    [
      -0.6913888080980771,
      0.4744873992983264,
      0.544833207453282
    ],
    [
      -0.6931535972236029,
      0.4765165637557205,
      0.5408050065619027
    ],
    [
      -0.689681096808665,
      0.45482265124030113,
      0.5634503887863955
    ],
    [
      -0.6919897297104931,
      0.4577146632562561,
      0.5582539753691064
    ],
    [
      -0.6865508192884857,
      0.4367738041535454,
      0.5812715514624377
    ],
    [
      -0.6900230157099537,
      0.44128719580920145,
      0.5737018812984601
    ],
    [
      -0.682474116188112,
      0.41936812602390755,
      0.59863131859973
    ],
    [
      -0.6867105140481651,
      0.42453437204085875,
      0.5900840930338477
    ],
    [
      -0.6768787082686912,
      0.4002673535452152,
      0.6177550161499441
    ],
    [
      -0.6825199701405202,
      0.40618003489538856,
      0.6076053567997606
    ],
    [
      -0.6678923678220811,
      0.3815594688001129,
      0.6390087298104695
    ],
    [
      -0.6768470635341544,
      0.38920650508013055,
      0.6248170524149471
    ],
    [
      -0.6584791591451624,
      0.3641502740973031,
      0.6586347810785117
    ],
    [
      -0.6678532578190574,
      0.37195556529715923,
      0.644686810369921
    ],
    [
      -0.6485040372682135,
      0.34603369814395024,
      0.6780141542738242
    ],
    [
      -0.6584320705948915,
      0.3541315542677305,
      0.6641220149069336
    ],
    [
      -0.6484430027073059,
      0.33521504407958036,
      0.6834855861411109
    ],
    [
      -0.6381437498387168,
      0.3263369438346716,
      0.6973354670676286
    ],
    [
      -0.6379831420214694,
      0.31722948738846657,
      0.7016715491080312
    ],
    [
      -0.6258153902167342,
      0.3062048946778711,
      0.7173518382517678
    ],
    [
      -0.6120086953868916,
      0.2876248622659142,
      0.7366934880785554
    ],
    [
      -0.6256217613105336,
      0.30037476037961414,
      0.7199808435657126
    ],
    [
      -0.6118102814970399,
      0.28107678844654294,
      0.7393808345170234
    ],
    [
      -0.5985714011680413,
      0.2677805504131985,
      0.7549873207704433
    ],
    [
      -0.5846587055317468,
      0.24704232066004228,
      0.7727511176626294
    ],
    [
      -0.5983871983613771,
      0.2613779762918739,
      0.757373299203759
    ],
    [
      -0.5692748651463266,
      0.2260263988331043,
      0.7904670739146382
    ],
    [
      -0.58452588415836,
      0.24158589509182254,
      0.774574558090808
    ],
    [
      -0.5520276265988273,
      0.20502904346773418,
      0.8082255816332292
    ],
    [
      -0.5692108581122605,
      0.2213570581257438,
      0.7918333485178684
    ],
    [
      -0.5336366805818449,
      0.18267753400087447,
      0.8257486371220659
    ],
    [
      -0.552047041881929,
      0.200062092083242,
      0.8094561278171215
    ],
    [
      -0.5122065559288013,
      0.16049282106464074,
      0.8437336655901961
    ],
    [
      -0.5336630421042382,
      0.1802184264352607,
      0.826271793216523
    ],
    [
      -0.5104220201047883,
      0.16088882249658704,
      0.8447391006623339
    ],
    [
      -0.48451091075721114,
      0.14025077734705058,
      0.8634691058809029
    ],
    [
      -0.4902231577226766,
      0.13942378479679293,
      0.8603733281926779
    ],
    [
      -0.4673962872361929,
      0.118363052262128,
      0.8760884079458049
    ],
    [
      -0.45450959328838275,
      0.12057976392697312,
      0.8825426619377356
    ],
    [
      -0.42036538374305454,
      0.1011924759255913,
      0.9016945308509989
    ],
    [
      -0.4387656857138278,
      0.09787571286143766,
      0.8932552926638274
    ],
    [
      -0.3775490406993653,
      0.08569153551922523,
      0.9220160967181357
    ],
    [
      -0.405976118251021,
      0.07678918002972217,
      0.9106518617123648
    ],
    [
      -0.32161838170439705,
      0.07716262081283005,
      0.9437200572728864
    ],
    [
      -0.33981640618889636,
      0.04558315475436893,
      0.939386494520494
    ],
    [
      -0.3549659260505158,
      0.039929630611018084,
      0.9340261323658816
    ],
    [
      -0.1471211369484644,
      0.8715854941582497,
      -0.46764740717330067
    ],
    [
      -0.14845033557661866,
      0.8700205689630024,
      -0.47013477583399743
    ],
    [
      -0.14750274001139171,
      0.8591356376448607,
      -0.49002948668186336
    ],
    [
      -0.1477617001738482,
      0.8460328630913344,
      -0.5122449360718104
    ],
    [
      -0.14889794707775628,
      0.8573892921083804,
      -0.4926591145345024
    ],
    [
      -0.14876607130751426,
      0.8447023386501199,
      -0.5141464918743935
    ],
    [
      -0.14742284151562532,
      0.8332752070470578,
      -0.5328404405824897
    ],
    [
      -0.1485797126494065,
      0.819760313589051,
      -0.553097728483313
    ],
    [
      -0.15001547076662006,
      0.8298214953833739,
      -0.5374864131588541
    ],
    [
      -0.1529315178215943,
      0.8139864088510392,
      -0.5603910037309415
    ],
    [
      -0.15080666764689835,
      0.8027232219879022,
      -0.576968610822633
    ],
    [
      -0.1546229767251264,
      0.7974233867342526,
      -0.58327324416429
    ],
    [
      -0.1527436033426873,
      0.787793124372014,
      -0.5967004146387637
    ],
    [
      -0.15759366007043962,
      0.7809327252374678,
      -0.6044074097484116
    ],
    [
      0.39818204610966834,
      -0.7603263964203166,
      0.5131810879820237
    ],
    [
      0.3931510841234872,
      -0.7527855069746442,
      0.5279642085799515
    ],
    [
      0.4031813965886633,
      -0.7344298313348299,
      0.5459465031395551
    ],
    [
      0.440021525539325,
      -0.7215687704266449,
      0.5345274236248547
    ],
    [
      0.4432722306885051,
      -0.7240762104356697,
      0.5284159071995812
    ],
    [
      0.44317791359569386,
      -0.7326796543287429,
      0.5165015595655847
    ],
    [
      0.39939769573380624,
      -0.7607455386004662,
      0.5116128479055352
    ],
    [
      0.4223370852050265,
      -0.7729371132588724,
      0.47349720739151513
    ],
    [
      0.41383498862323004,
      -0.7733082038646842,
      0.48034885658944465
    ],
    [
      0.40618392764060746,
      -0.7708000169527932,
      0.4907972603754258
    ],
    [
      0.44798702431989124,
      -0.7357979906160609,
      0.507847361956697
    ],
    [
      0.423183437085755,
      -0.7727162508351525,
      0.47310186458262077
    ],
    [
      0.46323486566561456,
      -0.7342962500520754,
      0.49620809786945225
    ],
    [
      0.45006731552397033,
      -0.7675160565554932,
      0.45646304825971634
    ],
    [
      0.44967520151095625,
      -0.767702097607047,
      0.4565366387003576
    ],
    [
      0.4343507418198933,
      -0.7720843702254653,
      0.4639236557172474
    ],
    [
      0.4867345986544432,
      -0.7246123759462245,
      0.48787942680365776
    ],
    [
      0.46686708397948273,
      -0.7624274130474527,
      0.4480396921370513
    ],
    [
      0.4815949310166898,
      -0.7248303549549121,
      0.49263300635966933
    ],
    [
      0.5019995639749287,
      -0.7192082222682856,
      0.48034984208457254
    ],
    [
      0.4918599697096014,
      -0.7560926118432513,
      0.4317380369081703
    ],
    [
      0.48575139817567076,
      -0.76062980749637,
      0.4306830332372245
    ],
    [
      0.501602719116073,
      -0.7188578644678135,
      0.481287941743959
    ],
    [
      0.519904105283454,
      -0.7203681561571891,
      0.4590963307456322
    ],
    [
      0.5113431415903094,
      -0.7450324226673135,
      0.42831633254293067
    ],
    [
      0.5444973215533574,
      -0.7070970604317526,
      0.4511501013520824
    ],
    [
      0.5867921295222279,
      -0.6907850148690754,
      0.42248202324252815
    ],
    [
      0.6256227570596282,
      -0.6410353658760924,
      0.4446007484757686
    ],
    [
      0.6282445731345219,
      -0.6355277677130861,
      0.4487908341228062
    ],
    [
      0.6735278597165559,
      -0.6105862186482895,
      0.4165869558476579
    ],
    [
      0.6692928361290521,
      -0.5702190939156656,
      0.4763373641027197
    ],
    [
      0.4343036842783528,
      -0.2437357962166238,
      0.8671638665586207
    ],
    [
      0.4659184263788957,
      -0.23086696767136228,
      0.854178238542076
    ],
    [
      0.474730129820973,
      -0.23443971434277192,
      0.8483332624499889
    ],
    [
      0.4981532028098864,
      -0.226879028646357,
      0.8368806921483717
    ],
    [
      0.5189768497916454,
      -0.23981764526798688,
      0.8204575104162664
    ],
    [
      0.5439282195944194,
      -0.21376510713395327,
      0.8114472077103073
    ],
    [
      0.47885987590308815,
      -0.7102026369512587,
      0.5160478986659646
    ],
    [
      0.4733916519172767,
      -0.7097558082234948,
      0.5216771382646986
    ],
    [
      0.4726313904429605,
      -0.6947267662741712,
      0.5421939588285608
    ],
    [
      0.6133786806940282,
      -0.6300165516358756,
      0.47628325472862615
    ],
    [
      0.5942373552871189,
      -0.631058421882131,
      0.49864539880861697
    ],
    [
      0.4443444692961712,
      -0.7064688148185687,
      0.5508718601405873
    ],
    [
      0.4415842654198756,
      -0.7025514284655194,
      0.5580545017242017
    ],
    [
      0.4457281380284413,
      -0.687352275969204,
      0.5734747384930342
    ],
    [
      0.44833074683454466,
      -0.6697052289978473,
      0.592025715400708
    ],
    [
      0.4442709033585746,
      -0.6850784294718263,
      0.5773135282507869
    ],
    [
      0.44638022980762576,
      -0.6665972997711229,
      0.5969863736926824
    ],
    [
      0.45005449884255105,
      -0.6514871664826036,
      0.6107498833238109
    ],
    [
      0.4479158970440348,
      -0.6480185843481305,
      0.6159896618569848
    ],
    [
      0.45145683458396285,
      -0.6329135861614384,
      0.6289730669589086
    ],
    [
      0.4488763494977947,
      -0.6288579678625372,
      0.6348603619043591
    ],
    [
      0.45230986469121165,
      -0.6136215526704938,
      0.6472127752148209
    ],
    [
      0.44876446190596575,
      -0.6084886511073702,
      0.654486072581978
    ],
    [
      0.45198930561205625,
      -0.5937693482887931,
      0.6656903399066514
    ],
    [
      0.44732409270785073,
      -0.5875049827635922,
      0.6743434223828757
    ],
    [
      0.4506128085425319,
      -0.5722465991289499,
      0.6851875119722792
    ],
    [
      0.4458672348726203,
      -0.5655289726819841,
      0.6938150977921304
    ],
    [
      0.4487812811327721,
      -0.5519921742496156,
      0.702780194137548
    ],
    [
      0.44236243072395404,
      -0.5430172459839879,
      0.7137560861022203
    ],
    [
      0.4450797798753737,
      -0.5304369263186877,
      0.7214850357032168
    ],
    [
      0.43710389160648994,
      -0.5193166338283431,
      0.7343367223363275
    ],
    [
      0.43940315864966806,
      -0.5086866931856538,
      0.7403801134177898
    ],
    [
      0.4299692308288979,
      -0.4952126984846434,
      0.7549111496063385
    ],
    [
      0.43204284852923736,
      -0.4857503020163463,
      0.7598589481777329
    ],
    [
      0.4218574935529385,
      -0.4702076503452678,
      0.7752038575046017
    ],
    [
      0.42351976659697604,
      -0.46279161352738396,
      0.7787521619554988
    ],
    [
      0.41172035298853404,
      -0.44436453283168587,
      0.7956296329928106
    ],
    [
      0.4130731119083608,
      -0.4386485918018237,
      0.7980964961260135
    ],
    [
      0.3994072960453996,
      -0.4172034453906823,
      0.8163425120743416
    ],
    [
      0.4004368391474127,
      -0.4131431813329294,
      0.8179016136258292
    ],
    [
      0.38610946278379105,
      -0.3868994228502968,
      0.8373937660067213
    ],
    [
      0.3856356417532917,
      -0.38864259503792153,
      0.8368046875655735
    ],
    [
      0.3704860384304992,
      -0.3590103433879579,
      0.8566514277514135
    ],
    [
      0.3687097929930017,
      -0.35863293613401415,
      0.8575753644263308
    ],
    [
      0.35452697231280283,
      -0.3291831593142679,
      0.8751851652802363
    ],
    [
      0.3492850075743924,
      -0.3278647023541763,
      0.8777839827850381
    ],
    [
      0.3373732558092353,
      -0.29787159267149044,
      0.8930015680523892
    ],
    [
      0.32656652341686354,
      -0.2949251426830849,
      0.8979829987236869
    ],
    [
      0.31760951229589374,
      -0.26501964045859483,
      0.9104332967715766
    ],
    [
      0.30089127412215627,
      -0.25985604236628135,
      0.9175724921786174
    ],
    [
      0.2951473245477838,
      -0.230395217241128,
      0.9272573001517425
    ],
    [
      0.28120096735582134,
      -0.22550389622138822,
      0.932777577317939
    ],
    [
      0.2758757097180919,
      -0.20576534799582058,
      0.9389106530185383
    ],
    [
      0.2836062776665937,
      -0.18924191016037806,
      0.9400824318680518
    ],
    [
      0.2572373719118961,
      -0.17966745875895912,
      0.9494990988700087
    ],
    [
      0.23445427906911756,
      -0.16695183473628825,
      0.9576838078950523
    ],
    [
      0.23326480637935074,
      -0.15671540686532406,
      0.959701938810087
    ],
    [
      0.2342261661845799,
      -0.15582641825469679,
      0.9596125418357067
    ],
    [
      0.2617235646892573,
      -0.15176828799092165,
      0.9531354376197817
    ],
    [
      0.2679698140114581,
      -0.16077426811956327,
      0.9499177930164712
    ],
    [
      0.26237701746720166,
      -0.17699679077892372,
      0.9485939261659742
    ],
    [
      0.2852143053876713,
      -0.16088237982809458,
      0.9448648897398384
    ],
    [
      0.288049834230013,
      -0.16413029829280792,
      0.9434450371814862
    ],
    [
      0.2835642646954328,
      -0.18914014270050203,
      0.940115585556889
    ],
    [
      0.20941254792631914,
      -0.1503920885267983,
      0.9661928402133576
    ],
    [
      0.2072901435009565,
      -0.12941747283834099,
      0.9696813466966817
    ],
    [
      0.2318646613187558,
      -0.121014480231494,
      0.9651913149245801
    ],
    [
      0.24000940009918456,
      -0.1324596536577304,
      0.9616911812099057
    ],
    [
      0.1989094222985471,
      -0.1194115892040457,
      0.97271574166589
    ],
    [
      0.1509321426625317,
      -0.12508836525919037,
      0.980597975313064
    ],
    [
      0.15089278700344377,
      -0.12441123108947144,
      0.9806901714655528
    ],
    [
      0.4304482303079265,
      -0.16934754203136962,
      0.8865865615001773
    ],
    [
      0.4415194236437189,
      -0.170212994091188,
      0.8809586455605232
    ],
    [
      0.44500149025298147,
      -0.17508703876717477,
      0.8782472331458651
    ],
    [
      0.4932195624386279,
      -0.18412412995130145,
      0.8501957233469977
    ],
    [
      0.46887082549304543,
      -0.190060337307281,
      0.8625759196639521
    ],
    [
      0.4575869669521788,
      -0.1487311294607696,
      0.8766374500355488
    ],
    [
      0.5009083386956285,
      -0.1481588210571535,
      0.8527249263204049
    ],
    [
      0.5285842655528499,
      -0.1872719334499782,
      0.8279661207753981
    ],
    [
      0.4994042729138851,
      -0.19037139509325252,
      0.8451947137350082
    ],
    [
      0.42079346183377325,
      -0.1617838121089929,
      0.8926135001317372
    ],
    [
      0.41471154799164245,
      -0.14933549911590804,
      0.8976153077271901
    ],
    [
      0.39111704164298655,
      -0.14330178469394217,
      0.9091160862287991
    ],
    [
      0.3769980575551766,
      -0.10945734271559054,
      0.9197236295351259
    ],
    [
      0.11873869511517586,
      0.018798905525532563,
      0.9927475627939801
    ],
    [
      0.3593748241014932,
      -0.7578497051368794,
      0.5445305870435249
    ],
    [
      0.18281262140004587,
      -0.981815453083702,
      0.05116601941609774
    ],
    [
      0.18409419438601976,
      -0.9801996674658773,
      0.07292420375393824
    ],
    [
      0.18788873916033258,
      -0.9777393011256872,
      0.09340064630929028
    ],
    [
      0.18693418092500733,
      -0.9793129939511466,
      0.07747045811364557
    ],
    [
      0.19705059439491146,
      -0.9699730230664809,
      0.1425601549237522
    ],
    [
      0.19399264995346135,
      -0.9755569196917581,
      0.10322571484645908
    ],
    [
      0.27347622401569094,
      -0.9484421429576332,
      0.16021315913511056
    ],
    [
      0.2502813431482752,
      -0.958071683835535,
      0.13949156929520132
    ],
    [
      0.46656673558345313,
      -0.8750686988288151,
      0.12872549699668895
    ],
    [
      0.4454328618479516,
      -0.8833679804790634,
      0.14577577525187355
    ],
    [
      0.48505532917050315,
      -0.8662284927897845,
      0.11987295742757434
    ],
    [
      0.4698574979382206,
      -0.8745047346680423,
      0.12031375928966653
    ],
    [
      0.5014399831357609,
      -0.858446856158146,
      0.10782828230572644
    ],
    [
      0.4994258209929069,
      -0.8596052221318108,
      0.10794772535482773
    ],
    [
      0.5177928332183231,
      -0.8503265973950275,
      0.0939960617809956
    ],
    [
      0.5346634356643262,
      -0.8410125232276627,
      0.08266163764321968
    ],
    [
      0.5215934872701342,
      -0.849064849208115,
      0.0838398227370583
    ],
    [
      0.5610863777104197,
      -0.8249404079976457,
      0.06823049172091693
    ],
    [
      0.5495301080273612,
      -0.8325668661572585,
      0.06963529097029857
    ],
    [
      0.581405748277113,
      -0.8125045749027402,
      0.04246965543123344
    ],
    [
      0.5809870053903964,
      -0.8127999326504809,
      0.04254843182625259
    ],
    [
      0.5655252809409068,
      -0.8227848251123333,
      0.05662409541507347
    ],
    [
      0.5952804965499353,
      -0.8029732649379017,
      0.029581518254290097
    ],
    [
      0.6091893385883759,
      -0.7928767337625855,
      0.015324320808157415
    ],
    [
      0.595901010855448,
      -0.8025700886907116,
      0.027986389557046115
    ],
    [
      0.6228921283689505,
      -0.7823073131483206,
      0.0008149911990116308
    ],
    [
      0.6098937781127909,
      -0.7923678184888647,
      0.013521081410274173
    ],
    [
      0.6347698160466642,
      -0.7725772608138473,
      -0.013844013488030967
    ],
    [
      0.6245530856602162,
      -0.7809747508019873,
      -0.003446998995724224
    ],
    [
      0.6458492891540191,
      -0.7628939913896235,
      -0.029520392965832955
    ],
    [
      0.6373814920017469,
      -0.7702755673130646,
      -0.020503269353045528
    ],
    [
      0.6497448382568074,
      -0.7591251207732381,
      -0.03950564731341456
    ],
    [
      0.6553874414520946,
      -0.7538974188435809,
      -0.04589099528081351
    ],
    [
      0.6609381238189144,
      -0.7480105987193922,
      -0.06034020787327357
    ],
    [
      0.6628362631440399,
      -0.7461375736434037,
      -0.06266425981992903
    ],
    [
      0.6695958662337,
      -0.7383137266875393,
      -0.08083450319942911
    ],
    [
      0.6715834429320802,
      -0.7335806847892326,
      -0.10409158507609613
    ],
    [
      -0.8502955996644589,
      0.2626129915395944,
      0.4561050425788812
    ],
    [
      -0.7972678623247769,
      0.39337729864261783,
      0.4578408638563374
    ],
    [
      -0.7967032501931325,
      0.39346284538151005,
      0.4587493002021747
    ],
    [
      -0.868206365554365,
      0.24307352555994668,
      0.43258868221757496
    ],
    [
      -0.8076109626190033,
      0.39767861057349957,
      0.4354494870245429
    ],
    [
      -0.7683602447785698,
      0.170895837932181,
      0.6167796582421262
    ],
    [
      -0.7215818904128782,
      0.20685881849164364,
      0.6607034165496787
    ],
    [
      -0.7146097836188529,
      0.17913844642354226,
      0.676196919668506
    ],
    [
      -0.7063120841336629,
      0.17741898806213183,
      0.6853070424866292
    ],
    [
      -0.7002494871994611,
      0.15241728474427327,
      0.6974379018866661
    ],
    [
      -0.6945930538477496,
      0.1455007213519745,
      0.7045353288746506
    ],
    [
      -0.6870219790970307,
      0.11657271559688913,
      0.7172249313959783
    ],
    [
      -0.6948179018735088,
      0.09316228031086626,
      0.7131261268270674
    ],
    [
      -0.6650872013973307,
      0.04335604366380874,
      0.7455060482754573
    ],
    [
      -0.6617435591265961,
      0.04367219426441517,
      0.7484572141429304
    ],
    [
      -0.6507364822771475,
      0.03953763616938326,
      0.7582735693400511
    ],
    [
      -0.6273849267252317,
      0.015327610569484632,
      0.7785584230307998
    ],
    [
      -0.6383457226818338,
      -0.013161524252910901,
      0.7696372604111286
    ],
    [
      -0.6627927401366608,
      -0.01366557715352739,
      0.7486781922983985
    ],
    [
      -0.6708525191290979,
      0.024327336924279904,
      0.7411916609462871
    ],
    [
      -0.6642830010798473,
      -0.01772156005778018,
      0.747271062456904
    ],
    [
      -0.6149441733404039,
      -0.04336200839982869,
      0.7873775459728456
    ],
    [
      -0.651458887083889,
      -0.06082362439668051,
      0.7562418959266092
    ],
    [
      -0.6659072885566067,
      -0.0439490413389643,
      0.7447388567897972
    ],
    [
      -0.6505179872454165,
      -0.07589285335643506,
      0.7556895017661623
    ],
    [
      -0.6581859378018899,
      -0.0978482613127899,
      0.7464696839376069
    ],
    [
      -0.8217446598199873,
      0.16563897192574983,
      0.5452517263032863
    ],
    [
      -0.7701095992732085,
      0.17009347284674867,
      0.6148165706958381
    ],
    [
      -0.8481697238463092,
      0.15190103223132978,
      0.5074782714141879
    ],
    [
      -0.7311671010274079,
      -0.004569224278668949,
      0.682183107797802
    ],
    [
      -0.6866975267700716,
      0.0752572850229867,
      0.7230372381688482
    ],
    [
      -0.6743491398183139,
      0.06299549223467002,
      0.7357206029359324
    ],
    [
      -0.7709796339224931,
      0.45522387887456783,
      0.4453780688124766
    ],
    [
      -0.7713132556242684,
      0.45401781921899403,
      0.446031032025711
    ],
    [
      -0.7685219448615006,
      0.44072826109717483,
      0.46382391069947765
    ],
    [
      -0.7731459425210044,
      0.4202437767755227,
      0.47501633618724354
    ],
    [
      -0.7754955472918241,
      0.4147345192063897,
      0.47602724156207576
    ],
    [
      -0.7648976892038164,
      0.40838160403867,
      0.49815257756380704
    ],
    [
      -0.7611226386104977,
      0.3930866589583335,
      0.5159217067962625
    ],
    [
      -0.7551894741101802,
      0.37541232431936733,
      0.5373587674378446
    ],
    [
      -0.7551934805747739,
      0.3753914145023617,
      0.5373677444872131
    ],
    [
      -0.7599095613275711,
      0.3925283872335599,
      0.5181302189785487
    ],
    [
      -0.7503068901574809,
      0.3586280639749748,
      0.5553606776787237
    ],
    [
      -0.7438150913669728,
      0.3558789027601679,
      0.5657643647535261
    ],
    [
      -0.7545569797986507,
      0.3049968378966366,
      0.5810513687361828
    ],
    [
      -0.7235117136606637,
      0.2576649763644249,
      0.640421392639979
    ],
    [
      -0.706979745631298,
      0.2484309404409549,
      0.6621644109273225
    ],
    [
      -0.7015515485556739,
      0.23274992186439725,
      0.6735375999832918
    ],
    [
      -0.6871492322588356,
      0.2018703012858773,
      0.6979070955828159
    ],
    [
      -0.6954161525697967,
      0.22968155537156779,
      0.6809131793900884
    ],
    [
      -0.6869032715726162,
      0.20578652467315067,
      0.6970048792984045
    ],
    [
      -0.6700553260634005,
      0.1925101043264473,
      0.716914025351918
    ],
    [
      -0.664615910965307,
      0.17708314071153639,
      0.7258975493604406
    ],
    [
      -0.6561135222799367,
      0.1714760885951316,
      0.7349224427934757
    ],
    [
      -0.6528265092310234,
      0.16182562464047698,
      0.7400202808402997
    ],
    [
      -0.6823496684307515,
      0.11903249332744373,
      0.7212698493107108
    ],
    [
      -0.6581628313157625,
      0.11792177187563783,
      0.7435833128790137
    ],
    [
      -0.643789651927401,
      0.15553251037198443,
      0.7492292855251884
    ],
    [
      -0.6428111590192711,
      0.13510362921622351,
      0.7540164608368352
    ],
    [
      -0.6317209450956013,
      0.12439448139625389,
      0.7651500901951703
    ],
    [
      -0.6313717102620329,
      0.11406570153881454,
      0.7670454870561809
    ],
    [
      -0.6439778671011176,
      0.09844248972051206,
      0.758684112725133
    ],
    [
      -0.6480232234864552,
      0.09831415768047509,
      0.7552484546305291
    ],
    [
      -0.6174291455342926,
      0.10317441965051342,
      0.7798309364051756
    ],
    [
      -0.617298507034915,
      0.09379933733440272,
      0.7811173007481603
    ],
    [
      -0.630633326233637,
      0.07869712097144295,
      0.7720805469601635
    ],
    [
      -0.6329921033402512,
      0.07869849986856295,
      0.7701477411687464
    ],
    [
      -0.6028718292325644,
      0.08167899384604017,
      0.7936460794851066
    ],
    [
      -0.6028232522421969,
      0.07510191394252554,
      0.7943323165264713
    ],
    [
      -0.6167000655449939,
      0.05565549366650875,
      0.7852283076797075
    ],
    [
      -0.6168829834791599,
      0.05572130022155115,
      0.7850799458625027
    ],
    [
      -0.5848677803153659,
      0.06064285751787342,
      0.8088585311295442
    ],
    [
      -0.5848603870893297,
      0.05671030049787814,
      0.8091491021011886
    ],
    [
      -0.6064994814460256,
      0.032197265095591183,
      0.7944316931782531
    ],
    [
      -0.5727109414464071,
      -0.010616466219618606,
      0.8196886410049719
    ],
    [
      -0.5761809789314783,
      -0.017350554536467645,
      0.8171379551672044
    ],
    [
      -0.5763304075902606,
      -0.017379985051661072,
      0.817031943932701
    ],
    [
      -0.6068601022787105,
      0.020102223143193033,
      0.7945544140504
    ],
    [
      -0.571822857176207,
      0.04219815376333208,
      0.8192911178755725
    ],
    [
      -0.6017161161246494,
      -0.0671174266666583,
      0.7958850209882788
    ],
    [
      -0.6023157948619531,
      -0.04735144569180469,
      0.7968522597387233
    ],
    [
      -0.5512346612003044,
      -0.038766320140544146,
      0.8334491710441293
    ],
    [
      -0.549151904162426,
      -0.06754729803936009,
      0.8329883244574101
    ],
    [
      -0.5611215091378337,
      -0.09278238949179657,
      0.8225169178704305
    ],
    [
      -0.561202085626542,
      -0.09280457220961695,
      0.8224594400123385
    ],
    [
      -0.5759240727313418,
      -0.11513562228939092,
      0.8093548362298078
    ],
    [
      -0.606418907653519,
      -0.08727823587495984,
      0.7903408239379184
    ],
    [
      -0.612161956745885,
      -0.09565774002946481,
      0.7849250508714221
    ],
    [
      -0.5756698403007158,
      -0.11690773197993734,
      0.809281667388713
    ],
    [
      -0.5905727974241763,
      -0.13457385044769557,
      0.7956843907720347
    ],
    [
      -0.6163630310100314,
      -0.11231155713108247,
      0.7794117834231906
    ],
    [
      -0.6248941948938022,
      -0.13547630780443398,
      0.7688650175497029
    ],
    [
      -0.6194666613200078,
      -0.11617880862302095,
      0.7763784772518995
    ],
    [
      -0.589197616141223,
      -0.14173254718573372,
      0.7954609067715043
    ],
    [
      -0.6048122821464769,
      -0.1551618660124266,
      0.7811062019343542
    ],
    [
      -0.6027622250656488,
      -0.16452338357128882,
      0.7807750996875878
    ],
    [
      -0.6161193613223945,
      -0.17862032977142775,
      0.7671321335963127
    ],
    [
      -0.6415341463647787,
      -0.15148732705507895,
      0.7519877185098983
    ],
    [
      -0.65987500033837,
      -0.16632313967445375,
      0.7327356939151172
    ],
    [
      -0.6621423569491312,
      -0.15578677669468638,
      0.7330061250364347
    ],
    [
      -0.614646850132796,
      -0.18663060764191874,
      0.7664060711613919
    ],
    [
      -0.6248238016712108,
      -0.20405112586652316,
      0.7536301180935776
    ],
    [
      -0.6243240173083763,
      -0.2075461756831901,
      0.7530897067223882
    ],
    [
      -0.6325169234258226,
      -0.22683304636289142,
      0.7405870041107003
    ],
    [
      -0.6611767435141936,
      -0.20080661610974807,
      0.7228568438927022
    ],
    [
      -0.6320955448889652,
      -0.23004534475337854,
      0.7399556483255069
    ],
    [
      -0.6369062639167825,
      -0.24439933231445474,
      0.7311767073340169
    ],
    [
      -0.6754351428433312,
      -0.224979837496987,
      0.7022616610153498
    ],
    [
      -0.6361853257462309,
      -0.249623569293858,
      0.7300385640212143
    ],
    [
      -0.6439511879518791,
      -0.26887823322416493,
      0.7162620771991319
    ],
    [
      -0.6466372225651515,
      -0.26979998340523187,
      0.7134902041007734
    ],
    [
      -0.6552710065429351,
      -0.2894453647084682,
      0.6977401298714233
    ],
    [
      -0.6749996600463112,
      -0.29388153225579694,
      0.676763698743032
    ],
    [
      -0.6517732704876626,
      -0.4775544600348243,
      0.5891802284349531
    ],
    [
      -0.652307280824515,
      -0.48437925789144376,
      0.582985373665465
    ],
    [
      -0.667309114620672,
      -0.4906825628956748,
      0.5602938229307075
    ],
    [
      -0.6739019645304759,
      -0.4886562081794501,
      0.554140101788029
    ],
    [
      -0.638808906478512,
      -0.4477227695089755,
      0.6256736391018407
    ],
    [
      -0.6388385763650151,
      -0.4735122836908596,
      0.606359126707752
    ],
    [
      -0.6769345616677079,
      -0.5024250496970434,
      0.5378928040573434
    ],
    [
      -0.6833739644390229,
      -0.5064550593854604,
      0.5258358085465109
    ],
    [
      -0.7564678721547984,
      -0.41771982033903254,
      0.5032559091491305
    ],
    [
      -0.6853501204885398,
      -0.5158116323203729,
      0.5140365476396948
    ],
    [
      -0.6929123481364038,
      -0.5205661591652597,
      0.4988821020361672
    ],
    [
      -0.7422011692940504,
      -0.4874032033585922,
      0.45997341407338643
    ],
    [
      -0.7580015483761421,
      -0.47236413285569917,
      0.4497841467313567
    ],
    [
      0.2629668472234201,
      -0.8061541587382671,
      0.5300602886562727
    ],
    [
      0.2668943058789756,
      -0.7908660493018707,
      0.5507252686694436
    ],
    [
      0.2687236549590643,
      -0.7947897543714127,
      0.5441478141200893
    ],
    [
      0.27094846963554364,
      -0.7756868960542637,
      0.5699971632314136
    ],
    [
      0.2725743559092981,
      -0.7790113080246092,
      0.5646632646723345
    ],
    [
      0.27608625338803594,
      -0.7587761925616483,
      0.589944972257418
    ],
    [
      0.2775177903962773,
      -0.7615452339855687,
      0.5856899628706583
    ],
    [
      0.28122196083799006,
      -0.7411043952000926,
      0.6096543973084594
    ],
    [
      0.2827438589967796,
      -0.744001493130389,
      0.6054070435825478
    ],
    [
      0.2859022295131187,
      -0.7223466323904937,
      0.6296628128082052
    ],
    [
      0.28785653872540035,
      -0.7260242705739419,
      0.6245217143147287
    ],
    [
      0.2900532354800547,
      -0.7029564759534584,
      0.6494007341408283
    ],
    [
      0.29237183454555865,
      -0.7074013162735346,
      0.6435076441651141
    ],
    [
      0.29274672250601486,
      -0.6820233840155137,
      0.6701816620275534
    ],
    [
      0.296254490733322,
      -0.6884764237007128,
      0.6619920624362625
    ],
    [
      0.2936220244204186,
      -0.6606541287075516,
      0.6908851054965081
    ],
    [
      0.2983180830805776,
      -0.6689179055889333,
      0.680848850252128
    ],
    [
      0.2934149311177909,
      -0.6379346840363169,
      0.7120021187472876
    ],
    [
      0.29912658008671217,
      -0.6477319240637677,
      0.700690119549489
    ],
    [
      0.29158608942295655,
      -0.6144219619542739,
      0.733118820603651
    ],
    [
      0.29848580836898,
      -0.626047012423167,
      0.7203966688140248
    ],
    [
      0.28807565917067757,
      -0.5893151815444063,
      0.7547980070155612
    ],
    [
      0.2964645146580389,
      -0.6031315629993602,
      0.7405005801905372
    ],
    [
      0.2828645189356904,
      -0.5632278163426349,
      0.7763775439985289
    ],
    [
      0.2924522678929145,
      -0.5792497079617094,
      0.7608820189954323
    ],
    [
      0.27601769149284294,
      -0.5356612440755325,
      0.7980484105481414
    ],
    [
      0.2868873968501018,
      -0.5541118806311663,
      0.7814445887405992
    ],
    [
      0.26699468332589477,
      -0.5063534859293309,
      0.8199512097453847
    ],
    [
      0.2795909570554951,
      -0.5277499497649963,
      0.8020653883916424
    ],
    [
      0.25600761441649517,
      -0.4750364343703062,
      0.8419028966463536
    ],
    [
      0.27013199880126876,
      -0.49962544041730933,
      0.8230450306705224
    ],
    [
      0.20878933768519278,
      -0.4349381424846261,
      0.8759199876021792
    ],
    [
      0.24117414069851778,
      -0.4399736959229959,
      0.8650191794140698
    ],
    [
      0.25833413375301173,
      -0.47018280169796317,
      0.8439144555732737
    ],
    [
      0.2011296713310845,
      -0.4634826479559881,
      0.8629778040911339
    ],
    [
      -0.3491176436409327,
      -0.2635709504160387,
      0.8992481442824272
    ],
    [
      -0.375047586136912,
      -0.29509371964920844,
      0.8787826834641599
    ],
    [
      -0.3732710342396476,
      -0.31807946893398914,
      0.871489636450334
    ],
    [
      -0.39391062238396923,
      -0.3469894311151885,
      0.8511361561274622
    ],
    [
      -0.3958333809228864,
      -0.32696915910701246,
      0.8581416570357194
    ],
    [
      -0.4116791473070929,
      -0.3744890662266232,
      0.8308298375414889
    ],
    [
      -0.41368780883548617,
      -0.35658057844425145,
      0.8376829280206547
    ],
    [
      -0.4277251864143571,
      -0.40050548512793116,
      0.8103372885960783
    ],
    [
      -0.4296969690779207,
      -0.3846533169247781,
      0.8169469631157305
    ],
    [
      -0.44231124050281984,
      -0.4250524886518787,
      0.7897411907806894
    ],
    [
      -0.44409494828318224,
      -0.4114271542240072,
      0.7959317644600526
    ],
    [
      -0.45472848002823424,
      -0.44887782984057795,
      0.7692403417195597
    ],
    [
      -0.4566048652777013,
      -0.436151735875211,
      0.7754248256909063
    ],
    [
      -0.46741249838411386,
      -0.4707882963765321,
      0.7482539250476427
    ],
    [
      -0.46909232233333475,
      -0.4601691863159934,
      0.7537882415461223
    ],
    [
      -0.48095312339279656,
      -0.48209697159490084,
      0.7323022621006566
    ],
    [
      -0.479230664139182,
      -0.4916492245703934,
      0.7270619028171188
    ],
    [
      -0.49019883668887715,
      -0.5117364581707937,
      0.7055713272856848
    ],
    [
      -0.49221316862084646,
      -0.502558254207988,
      0.7107470701759138
    ],
    [
      -0.5015921017981115,
      -0.5303843106976078,
      0.6834455694344476
    ],
    [
      -0.5034905166100562,
      -0.5225098343423386,
      0.6880993915847337
    ],
    [
      -0.5116743542492087,
      -0.5483105163676922,
      0.661471792931679
    ],
    [
      -0.5135198490771447,
      -0.5410337755990476,
      0.6660178813401529
    ],
    [
      -0.5202334666734862,
      -0.5660189343817226,
      0.6395152117614294
    ],
    [
      -0.5222178830819456,
      -0.5587037649592146,
      0.6443124906517103
    ],
    [
      -0.5276349418662749,
      -0.583227655095954,
      0.6176138522192063
    ],
    [
      -0.5296287720907631,
      -0.5761609988899392,
      0.6225205756694134
    ],
    [
      -0.5336763551669017,
      -0.600055739580938,
      0.5959216872473635
    ],
    [
      -0.5357437797050129,
      -0.5929972980223179,
      0.6011096464419922
    ],
    [
      -0.5389439521483491,
      -0.6161804588823024,
      0.5743353188985624
    ],
    [
      -0.5408745848809778,
      -0.609686909420915,
      0.5794277831711238
    ],
    [
      -0.5439596804037141,
      -0.6312156229804924,
      0.5528785611691217
    ],
    [
      -0.5454800457198842,
      -0.6260107940840846,
      0.5572809035052673
    ],
    [
      -0.5479011924542166,
      -0.6462258061228776,
      0.5312216964771719
    ],
    [
      -0.5495563130362248,
      -0.6407125535125866,
      0.5361672151236141
    ],
    [
      -0.5511291561790493,
      -0.6610771208510895,
      0.5091499715178261
    ],
    [
      -0.5528341786736332,
      -0.6555313746317326,
      0.5144443485584038
    ],
    [
      -0.553966789967517,
      -0.6742452208419346,
      0.4883791332406573
    ],
    [
      -0.5552666719559028,
      -0.6700447429303532,
      0.49266516569208807
    ],
    [
      -0.5563862803574116,
      -0.6875253511279288,
      0.46662961606231346
    ],
    [
      -0.5577268829606048,
      -0.6833452819174193,
      0.47114748190375644
    ],
    [
      -0.5576662612731496,
      -0.7006828921867629,
      0.44503014014156445
    ],
    [
      -0.5593786344493156,
      -0.6956572473886826,
      0.45072889576464936
    ],
    [
      -0.5579226255948435,
      -0.7137565941886813,
      0.42340744927496277
    ],
    [
      -0.560102613114087,
      -0.7077496296872661,
      0.43055258036656713
    ],
    [
      -0.558407140944452,
      -0.7261711638591177,
      0.4010697018246798
    ],
    [
      -0.5603322699901262,
      -0.7210953084737233,
      0.4074914763585836
    ],
    [
      -0.5578714369122966,
      -0.7378813536129345,
      0.37988230791621896
    ],
    [
      -0.5601483789232514,
      -0.7321904600335525,
      0.38746731968710385
    ],
    [
      -0.5571520713019309,
      -0.7487031555479532,
      0.3592007159186985
    ],
    [
      -0.5593530425764551,
      -0.7435327556724456,
      0.3664467423823027
    ],
    [
      -0.5541272334856518,
      -0.7610979089791011,
      0.33715424075217826
    ],
    [
      -0.5581008277676486,
      -0.7525637312913769,
      0.3495301079876607
    ],
    [
      -0.549162148192993,
      -0.7743537840698338,
      0.3143201426711089
    ],
    [
      -0.5547429710034845,
      -0.7633925588389306,
      0.3308958102357552
    ],
    [
      -0.5447214944442796,
      -0.7849964474158306,
      0.29505774186575023
    ],
    [
      -0.5496374189794553,
      -0.7760356383307182,
      0.3093014641061976
    ],
    [
      -0.5400189382588524,
      -0.7948741595820032,
      0.2766850497417336
    ],
    [
      -0.5450833741133994,
      -0.7862828870234959,
      0.29093527946804304
    ],
    [
      -0.5358299255564611,
      -0.8051247866067749,
      0.25428403188079385
    ],
    [
      -0.5409332630056464,
      -0.7972484785526043,
      0.2679292227802372
    ],
    [
      -0.532791004687221,
      -0.8132979476964709,
      0.23383796440503438
    ],
    [
      -0.5367622810938715,
      -0.807539419613724,
      0.2444715512382448
    ],
    [
      -0.5314670111662021,
      -0.8196042108061572,
      0.21399007844028756
    ],
    [
      -0.5338192432612715,
      -0.8163465313120213,
      0.22048890298333512
    ],
    [
      -0.5328866224277611,
      -0.8245589002695798,
      0.1900906826326688
    ],
    [
      -0.5218168897878953,
      -0.8365427835521013,
      0.1670428233088437
    ],
    [
      -0.533753314363857,
      -0.8245069264275608,
      0.1878715723002664
    ],
    [
      -0.5191784235957608,
      -0.8412551050308383,
      0.15080985621693932
    ],
    [
      -0.5208961186502862,
      -0.839637130318038,
      0.15387242432078993
    ],
    [
      -0.5104474760996847,
      -0.851075670443332,
      0.12293729020478222
    ],
    [
      -0.5180209459062891,
      -0.8446395068343237,
      0.13504963197663297
    ],
    [
      -0.4917453724006838,
      -0.866381375598499,
      0.08700460182407249
    ],
    [
      -0.5096803586894076,
      -0.8525739224246494,
      0.1155146690584571
    ],
    [
      -0.4917091872270898,
      -0.8692321891254561,
      0.05155071856571993
    ],
    [
      -0.5043411327641284,
      -0.8634100410938594,
      0.012771951319038468
    ],
    [
      -0.24897351922708705,
      -0.14996650791276372,
      0.9568292602278268
    ],
    [
      -0.24588701872437646,
      -0.15252813792133676,
      0.9572224094561764
    ],
    [
      -0.23982376475667244,
      -0.19599480669160166,
      0.950826270991635
    ],
    [
      -0.2672780560069488,
      -0.19400280797409292,
      0.9438884209880496
    ],
    [
      -0.2675023871105605,
      -0.1706507743506083,
      0.9483252533301482
    ],
    [
      -0.25694030665439543,
      -0.15198205221578415,
      0.9544019774815138
    ],
    [
      -0.3152890671677793,
      -0.18453428207000303,
      0.9308812506788285
    ],
    [
      -0.30282380733132347,
      -0.1862044005019262,
      0.934679443952353
    ],
    [
      -0.2930091741839338,
      -0.193628149510437,
      0.9362979032130815
    ],
    [
      -0.33084478515098703,
      -0.21654790790756143,
      0.9185035284196004
    ],
    [
      -0.3515194918681551,
      -0.2612763675143349,
      0.8989820390949245
    ],
    [
      -0.3450857736597859,
      -0.21651323525931127,
      0.9132567151547112
    ],
    [
      -0.3802193830193938,
      -0.2904482485009325,
      0.8781076447219281
    ],
    [
      -0.3726191089836802,
      -0.25360846705158585,
      0.8926576863837296
    ],
    [
      -0.40765830385547625,
      -0.31757319876869305,
      0.8561319820690595
    ],
    [
      -0.3926150227572965,
      -0.2866364970744119,
      0.8738952811694306
    ],
    [
      -0.426908463644849,
      -0.3465676002344373,
      0.8352485032229258
    ],
    [
      -0.42897422203588276,
      -0.342666188972573,
      0.8357996169918493
    ],
    [
      -0.40853667101737295,
      -0.3173211244379982,
      0.8558066910345158
    ],
    [
      -0.4429864322214428,
      -0.3746518725620015,
      0.8144930909796
    ],
    [
      -0.4465858252420141,
      -0.36718037263079095,
      0.8159287190972154
    ],
    [
      -0.4577161229380333,
      -0.40116924462160314,
      0.7934476592518926
    ],
    [
      -0.4623431156048893,
      -0.3908218676761982,
      0.7959253176013766
    ],
    [
      -0.47160350819306746,
      -0.42592207024513984,
      0.7721272700391338
    ],
    [
      -0.47675789005075286,
      -0.4135989817294496,
      0.7756531419305389
    ],
    [
      -0.48428539704509627,
      -0.44890480382256487,
      0.7509674635521156
    ],
    [
      -0.48870085403530783,
      -0.43657705398625213,
      0.7553621324886798
    ],
    [
      -0.4961981010529846,
      -0.471096183965903,
      0.7292844643650213
    ],
    [
      -0.5007140588961508,
      -0.45765638233984973,
      0.7347353720403988
    ],
    [
      -0.5119448277492112,
      -0.4783595839289054,
      0.7135016480739165
    ],
    [
      -0.5084304502870012,
      -0.49118431611009805,
      0.7072739531669553
    ],
    [
      -0.5196517454160562,
      -0.5098055530851204,
      0.6856094817967592
    ],
    [
      -0.5221605228725001,
      -0.4981284197303362,
      0.6922546249830875
    ],
    [
      -0.5301823185586528,
      -0.528160663109083,
      0.6632895469038728
    ],
    [
      -0.5327052569210599,
      -0.5158062602100014,
      0.6709463549173212
    ],
    [
      -0.5393669291804694,
      -0.5461146539211545,
      0.6409696564417134
    ],
    [
      -0.542058520825388,
      -0.5329354601199364,
      0.6497325260038503
    ],
    [
      -0.5476616141089644,
      -0.5631077166975516,
      0.6188509156713221
    ],
    [
      -0.5501800019697791,
      -0.5499417626474208,
      0.6283836591834497
    ],
    [
      -0.5549580738737724,
      -0.5796432348005862,
      0.5966868999669969
    ],
    [
      -0.5574255113654952,
      -0.5662519854643472,
      0.6071535952595528
    ],
    [
      -0.5635336370131037,
      -0.582241672386844,
      0.5860242954783996
    ],
    [
      -0.5612004366893861,
      -0.5955165839197014,
      0.5748165517243318
    ],
    [
      -0.567342274003014,
      -0.6102122932245223,
      0.552959041274088
    ],
    [
      -0.5693707350797113,
      -0.5976846278617344,
      0.56443781911967
    ],
    [
      -0.5752834875091185,
      -0.6120161592987999,
      0.542664841091158
    ],
    [
      -0.573366367563497,
      -0.6243881225910819,
      0.5304625160312697
    ],
    [
      -0.5791474679744394,
      -0.6374067810323155,
      0.5082330231624246
    ],
    [
      -0.5805414875297236,
      -0.6260974742761888,
      0.5205511828454075
    ],
    [
      -0.5855970668339663,
      -0.6391856357615723,
      0.49851559489300823
    ],
    [
      -0.5845971269850937,
      -0.6496604830446473,
      0.4859912096848766
    ],
    [
      -0.588484646382653,
      -0.6622624846295249,
      0.46378251629854733
    ],
    [
      -0.5895752708449403,
      -0.6512066876788362,
      0.47783977432866975
    ],
    [
      -0.591429853090565,
      -0.6749432600348818,
      0.4412055355577021
    ],
    [
      -0.592673596111371,
      -0.6634787152087687,
      0.4566552342165115
    ],
    [
      -0.5944354199640334,
      -0.6758081152741239,
      0.43580950290444537
    ],
    [
      -0.5930408196965713,
      -0.6876210382025869,
      0.4189032036101122
    ],
    [
      -0.5948755589707962,
      -0.6881700007326932,
      0.41538550700613974
    ],
    [
      -0.5934358676837076,
      -0.6993336621085703,
      0.39845489078225793
    ],
    [
      -0.5935297501771591,
      -0.7114389215376076,
      0.37626732063261203
    ],
    [
      -0.5952858561279389,
      -0.6997463959501079,
      0.39495535298165246
    ],
    [
      -0.5935432493534578,
      -0.7224929337110345,
      0.3545565848839389
    ],
    [
      -0.5953382419377151,
      -0.7117072684431116,
      0.372887572509135
    ],
    [
      -0.5901253592983806,
      -0.7357463764941437,
      0.33230908773112855
    ],
    [
      -0.5921713347102909,
      -0.733464050283853,
      0.3337118476899469
    ],
    [
      -0.594177138814372,
      -0.722581054444847,
      0.3533131011832701
    ],
    [
      -0.586490505852929,
      -0.7478276377326755,
      0.31109919766457395
    ],
    [
      -0.587887970189003,
      -0.7462517334853481,
      0.3122436304829402
    ],
    [
      -0.5833866526060936,
      -0.758060853611328,
      0.2915540357860302
    ],
    [
      -0.5839148400083836,
      -0.7574557452247888,
      0.29206891933915835
    ],
    [
      -0.5800793799600578,
      -0.7687859864610188,
      0.2692137068693069
    ],
    [
      -0.5773808113331371,
      -0.7772398607408993,
      0.25005918815303624
    ],
    [
      -0.5802971831820347,
      -0.7688846300753623,
      0.26846155185588355
    ],
    [
      -0.5822350236221693,
      -0.7801670052734531,
      0.22878334981012868
    ],
    [
      -0.5931614155006308,
      -0.7778787494924552,
      0.20751912261124786
    ],
    [
      -0.6479932101350444,
      -0.7501685456809329,
      0.13172681082389487
    ],
    [
      -0.23632330528512496,
      -0.4701219839081501,
      0.8503743973247189
    ],
    [
      -0.23626315251690022,
      -0.47042716332497014,
      0.8502223278465451
    ],
    [
      -0.25253103847164915,
      -0.49885168072045166,
      0.8290808617081997
    ],
    [
      -0.2675262956488556,
      -0.5251991438588887,
      0.8078338569447876
    ],
    [
      -0.25177121304168465,
      -0.5016298157370198,
      0.827634450858084
    ],
    [
      -0.26334687951059355,
      -0.5360236715507468,
      0.8020767074222328
    ],
    [
      -0.27441361348805515,
      -0.5524916359271685,
      0.7870515618197765
    ],
    [
      -0.27017336051228386,
      -0.5639842116105062,
      0.7803384934267791
    ],
    [
      -0.2801457296722892,
      -0.5789967286061741,
      0.7656899884481506
    ],
    [
      -0.27654807872798165,
      -0.5894677135252803,
      0.7589789027786874
    ],
    [
      -0.28582900992407145,
      -0.6037035638374616,
      0.7442068154053502
    ],
    [
      -0.2827697447484628,
      -0.6131327237087327,
      0.7376378071739544
    ],
    [
      -0.2917685081945744,
      -0.6268378324383006,
      0.7224579361111383
    ],
    [
      -0.2889120347737796,
      -0.6359008613455633,
      0.7156534990502352
    ],
    [
      -0.2966937296020028,
      -0.6478005230073899,
      0.7016603973477523
    ],
    [
      -0.2933538300524846,
      -0.658216025656976,
      0.6933218545249191
    ],
    [
      -0.2998751273518718,
      -0.668042145859868,
      0.6810246686799544
    ],
    [
      -0.2958801024615613,
      -0.6801946504547479,
      0.6706640011660676
    ],
    [
      -0.30073571123817955,
      -0.6876428433827232,
      0.6608368572731019
    ],
    [
      -0.29643269873582784,
      -0.7006127957415276,
      0.6490526677885505
    ],
    [
      -0.2996238386855238,
      -0.7051772095161777,
      0.6426123703060251
    ],
    [
      -0.2936567943059517,
      -0.7241541156353084,
      0.6239923909523227
    ],
    [
      -0.2833262205083065,
      -0.7331046564434033,
      0.6182910443096181
    ],
    [
      -0.28759852795170443,
      -0.7412028300851425,
      0.6065521011370647
    ],
    [
      -0.28210881280929867,
      -0.7568477432304405,
      0.5895728210342783
    ],
    [
      -0.27569069929599355,
      -0.7621727211931785,
      0.5857366143504019
    ],
    [
      -0.27213011719112346,
      -0.7710746143410951,
      0.5756640847197928
    ],
    [
      -0.2591400874156419,
      -0.7857940558831324,
      0.5615817988796913
    ],
    [
      -0.26203781346005434,
      -0.7791996817137116,
      0.5693716188345925
    ],
    [
      -0.2452447396458102,
      -0.796596866115913,
      0.5525291400192074
    ],
    [
      -0.23741042520284109,
      -0.8102915646991892,
      0.5357834172334431
    ],
    [
      -0.22714708493200045,
      -0.8118347116429019,
      0.5378927428201472
    ],
    [
      -0.19794339683554826,
      -0.8220552241780567,
      0.5338947649591347
    ],
    [
      -0.1724230683486473,
      -0.8380730443121978,
      0.5175942985568164
    ],
    [
      -0.14414545961184977,
      -0.8220210131584383,
      0.5509115540622316
    ],
    [
      -0.13019657916149968,
      -0.8253867649236316,
      0.5493501060922306
    ],
    [
      -0.0971486310741761,
      -0.8254990604927896,
      0.5559797160022434
    ],
    [
      -0.09337306055721363,
      -0.8211833284834793,
      0.5629737228174803
    ],
    [
      -0.07361097432384468,
      -0.8136483457857442,
      0.5766782411875935
    ],
    [
      -0.07265034076504859,
      -0.8122984308085428,
      0.5786995656579512
    ],
    [
      -0.05609846621660767,
      -0.805618840411944,
      0.5897721984473826
    ],
    [
      -0.05398983095942729,
      -0.8022406957038525,
      0.5945544250189139
    ],
    [
      -0.040119400042160094,
      -0.796398500258775,
      0.6034400239674454
    ],
    [
      -0.036496501304481094,
      -0.7894593440758088,
      0.612716859115143
    ],
    [
      -0.025906552232867593,
      -0.7848448594916702,
      0.6191505447634738
    ],
    [
      -0.021427855820128593,
      -0.7751305326994774,
      0.6314376487603318
    ],
    [
      -0.013044332677997756,
      -0.7713861885301914,
      0.6362335998120893
    ],
    [
      -0.006421820003590815,
      -0.755235189148698,
      0.6554224357613735
    ],
    [
      -0.016780443195147907,
      -0.7355385179452881,
      0.6772750588535086
    ],
    [
      -0.02116488912607338,
      -0.7318966322372666,
      0.6810869013481528
    ],
    [
      -0.020602566889597402,
      -0.7305717966466544,
      0.6825250062686635
    ],
    [
      -0.003195843946230808,
      -0.7191819263644698,
      0.69481446687023
    ],
    [
      0.012641718395683663,
      -0.6876364747444668,
      0.725945084394823
    ],
    [
      -0.1803001107800435,
      -0.29307211055954474,
      0.9389358913498185
    ],
    [
      -0.18470638453020768,
      -0.2915823765355689,
      0.9385431632096889
    ],
    [
      -0.2048859390294493,
      -0.25195795555052547,
      0.9458006875778957
    ],
    [
      -0.205493286925863,
      -0.24895321629227918,
      0.9464643707642325
    ],
    [
      -0.1918519887880462,
      -0.23995401424374171,
      0.9516380012622371
    ],
    [
      -0.1661570277205152,
      -0.27075224231010847,
      0.9482009625723506
    ],
    [
      -0.16509000608987504,
      -0.2056622728567436,
      0.9645974908803379
    ],
    [
      -0.13966646551551662,
      -0.21484571301708966,
      0.9666098478748193
    ],
    [
      -0.1319202263902604,
      -0.24616957449183102,
      0.960207058120098
    ],
    [
      -0.13880591156924932,
      -0.2590185987618626,
      0.9558463707149131
    ],
    [
      -0.14194969188623427,
      -0.25995384302879704,
      0.9551305065110017
    ],
    [
      -0.17467522672493313,
      -0.21594330596257916,
      0.9606544924053315
    ],
    [
      -0.10770287580892894,
      -0.2686327344239952,
      0.957202457444805
    ],
    [
      -0.11594298210003809,
      -0.24134121732834743,
      0.9634893054519191
    ],
    [
      -0.09323475731202911,
      -0.1852995765113702,
      0.9782491231652978
    ],
    [
      -0.06671899129132278,
      -0.20233484637368815,
      0.9770410360593891
    ],
    [
      -0.07892798269484529,
      -0.23936035218837787,
      0.9677174150277434
    ],
    [
      -0.08378237004798714,
      -0.24018999749005024,
      0.9671035516297476
    ],
    [
      -0.10707969398006148,
      -0.22289183207294302,
      0.9689443587390885
    ],
    [
      -0.11046223971543719,
      -0.21601384247970223,
      0.9701217003315634
    ],
    [
      -0.06063558502830025,
      -0.2455731384209838,
      0.967479797987712
    ],
    [
      -0.04880301957784325,
      -0.20352410393096854,
      0.9778528541652782
    ],
    [
      -0.04951126103547024,
      -0.2433001127412989,
      0.9686865799476881
    ],
    [
      -0.027546747729411934,
      -0.25198949715071295,
      0.9673378262092633
    ],
    [
      -0.03816955246641235,
      -0.2779253660680989,
      0.9598440374146349
    ],
    [
      -0.04755167049569381,
      -0.281945025097794,
      0.9582514500149077
    ],
    [
      -0.06599867556048059,
      -0.275903491508718,
      0.9589168046277848
    ],
    [
      -0.017389671484096612,
      -0.2981634086095403,
      0.9543564224607154
    ],
    [
      -0.019498669370635456,
      -0.30402548727783774,
      0.9524643326541147
    ],
    [
      -0.043916305032139426,
      -0.31879162785819093,
      0.9468068737392271
    ],
    [
      -0.05370466610736734,
      -0.3149466216124263,
      0.9475887474918723
    ],
    [
      -0.028279756788398287,
      -0.3495807232266649,
      0.9364793501750645
    ],
    [
      0.0032678359007623095,
      -0.33333419556888166,
      0.9428030734532913
    ],
    [
      -0.01208898268619163,
      -0.3474478574301181,
      0.9376213750042356
    ],
    [
      0.013046825974234386,
      -0.3801083807871213,
      0.9248499333337225
    ],
    [
      0.00017979263959969126,
      -0.39440981225649263,
      0.9189346373221574
    ],
    [
      -0.023829884786993227,
      -0.3977670123605618,
      0.9171769406547415
    ],
    [
      -0.0363093413389801,
      -0.3585027327979055,
      0.9328222887066769
    ],
    [
      -0.018914620909285456,
      -0.44133718529765065,
      0.8971419764950279
    ],
    [
      -0.02832112695469853,
      -0.40238352115587817,
      0.9150330134318722
    ],
    [
      0.020476729347786667,
      -0.4249686971533911,
      0.9049764140545138
    ],
    [
      0.012561221896332297,
      -0.4358635598230458,
      0.899925092950993
    ],
    [
      -0.018329115677086113,
      -0.44165664473185723,
      0.89699690728714
    ],
    [
      -0.011979784904101887,
      -0.4776247550985387,
      0.8784822582560858
    ],
    [
      0.029607666519339743,
      -0.4650354391624636,
      0.8847968277555329
    ],
    [
      0.023610322669212806,
      -0.4738441721013923,
      0.8802921408424602
    ],
    [
      -0.008178814011554115,
      -0.4798942274637352,
      0.8772882294026001
    ],
    [
      0.038548858284374654,
      -0.5022710200866012,
      0.8638505703570127
    ],
    [
      0.034584456170224605,
      -0.5091085860299438,
      0.8600071877734518
    ],
    [
      -0.00396072489893081,
      -0.516141917883366,
      0.8564939189871436
    ],
    [
      -0.013810775457453812,
      -0.5381506797454148,
      0.8427354913439993
    ],
    [
      -0.014073850876249891,
      -0.527606384537989,
      0.8493723740011002
    ],
    [
      0.05076625899804643,
      -0.5408007782889022,
      0.8396173563888856
    ],
    [
      -0.0047842999608791745,
      -0.5506104276002803,
      0.8347486253308363
    ],
    [
      0.0010030526429701313,
      -0.5811440673587377,
      0.8138000779424505
    ],
    [
      -0.005154101631487473,
      -0.5726311225642087,
      0.8197969460221394
    ],
    [
      0.001095830140850863,
      -0.6029944629124339,
      0.7977446188181075
    ],
    [
      0.004771518527206239,
      -0.6080596610054141,
      0.793876993789923
    ],
    [
      0.005081044203949068,
      -0.6328461128375192,
      0.7742609253063462
    ],
    [
      0.007735896776470645,
      -0.636395433627555,
      0.7713241912186211
    ],
    [
      0.008578270405617537,
      -0.6601722365279455,
      0.7510652644041916
    ],
    [
      0.010556383163392288,
      -0.6627821412252018,
      0.7487378687147086
    ],
    [
      0.011326373075169429,
      -0.6858400748436255,
      0.727664143002424
    ],
    [
      0.2593622413466573,
      -0.9654449725261207,
      0.025440770186383476
    ],
    [
      0.28909823481632935,
      -0.9572551460106864,
      0.009208477732066676
    ],
    [
      0.28535345105371146,
      -0.9584040368806573,
      -0.005925374468893601
    ],
    [
      0.28918241765373615,
      -0.9569605087910538,
      -0.024497222991755527
    ],
    [
      0.28871319839584425,
      -0.9570526712459971,
      -0.026360453959349227
    ],
    [
      0.2928029674187962,
      -0.9550323797469624,
      -0.04668592834678337
    ],
    [
      0.29234682564061504,
      -0.9550880787828652,
      -0.04837453157097652
    ],
    [
      0.29659738215946563,
      -0.9524339954527556,
      -0.06999626562933352
    ],
    [
      0.29647268351476774,
      -0.9524399898032088,
      -0.07044156268295065
    ],
    [
      0.30024138761477004,
      -0.9495879316299561,
      -0.09021013948497848
    ],
    [
      0.3036413744600691,
      -0.9481052204624779,
      -0.09433136619277975
    ],
    [
      0.3064319011599987,
      -0.945592118914963,
      -0.10933908083288119
    ],
    [
      0.3128057439565105,
      -0.9425966168719331,
      -0.11689390236192936
    ],
    [
      0.3147731143505798,
      -0.9405539870711161,
      -0.12757775623776785
    ],
    [
      0.3235562942819428,
      -0.9361104209574224,
      -0.13787169472177496
    ],
    [
      0.3249843300451388,
      -0.934429616252336,
      -0.1456930935069478
    ],
    [
      0.33603192282014804,
      -0.9275963081540654,
      -0.16324103633811624
    ],
    [
      0.3121284724014131,
      -0.9326777953821305,
      -0.18079808272625333
    ],
    [
      0.3349691741259216,
      -0.9289898317443491,
      -0.15739614004480507
    ],
    [
      0.3467135079763929,
      -0.9213521634679693,
      -0.17578377132032466
    ],
    [
      0.347720099083118,
      -0.9198653470401278,
      -0.18148960303106024
    ],
    [
      0.322298109980541,
      -0.9253340246261612,
      -0.19970195585452344
    ],
    [
      0.31540953217130363,
      -0.9285401824184858,
      -0.19578037861268013
    ],
    [
      0.35937114130858705,
      -0.9118188256820159,
      -0.19859207417828434
    ],
    [
      0.3328703542333603,
      -0.9172526715826862,
      -0.21873468802863005
    ],
    [
      0.32590507273680674,
      -0.9207444419913621,
      -0.21451236818988254
    ],
    [
      0.3585995088762408,
      -0.9130375828167473,
      -0.19434187556435203
    ],
    [
      0.3367063762090493,
      -0.9123324524310988,
      -0.23297706423857925
    ],
    [
      0.371910529945864,
      -0.9033836170435875,
      -0.2134961315167827
    ],
    [
      0.3721455933935347,
      -0.9030169563213054,
      -0.21463465217429242
    ],
    [
      0.3436497276172785,
      -0.9085807085701191,
      -0.23745728189042864
    ],
    [
      0.3479789962841068,
      -0.9029777636600628,
      -0.2520749421909633
    ],
    [
      0.38512349564699133,
      -0.8937136156259932,
      -0.2301214165290929
    ],
    [
      0.35407580948899875,
      -0.8993818695426326,
      -0.25640314715835544
    ],
    [
      0.4000146825963041,
      -0.8826045245150953,
      -0.24697673374806117
    ],
    [
      0.36314679025802493,
      -0.8905627733533347,
      -0.27390209097871276
    ],
    [
      0.35873678513675433,
      -0.8933826857914798,
      -0.27050932648939896
    ],
    [
      0.386181362317011,
      -0.8931500292652453,
      -0.23053628916608535
    ],
    [
      0.4160410397661738,
      -0.8712414870091452,
      -0.26047672553296286
    ],
    [
      0.3726033466458262,
      -0.880638997679471,
      -0.2926460350567336
    ],
    [
      0.3684756597567368,
      -0.8834639552565206,
      -0.2893391227078393
    ],
    [
      0.4129266870148472,
      -0.8750213205762258,
      -0.2526444926927566
    ],
    [
      0.42747982509656274,
      -0.8618048015659265,
      -0.27304483722151934
    ],
    [
      0.3846081709589693,
      -0.8688778565062129,
      -0.31165337364573054
    ],
    [
      0.3773584753057361,
      -0.8740919550302335,
      -0.30588206104045157
    ],
    [
      0.45152976174681614,
      -0.8453979351495889,
      -0.28534751707641465
    ],
    [
      0.4549759650294873,
      -0.8416850328089257,
      -0.2907974841550808
    ],
    [
      0.4331910763887771,
      -0.8353008554040946,
      -0.3385527614690517
    ],
    [
      0.4265909912466477,
      -0.8378770048691522,
      -0.3405616697438237
    ],
    [
      0.40507959414805617,
      -0.8505972806520478,
      -0.33525331997190944
    ],
    [
      0.38854423456814835,
      -0.8633188845143495,
      -0.32204639638528954
    ],
    [
      0.4647014417728932,
      -0.8094739288961665,
      -0.35889347786160486
    ],
    [
      0.4451899531396639,
      -0.8223433173412387,
      -0.3543407597888093
    ],
    [
      0.4813855970836998,
      -0.8279392159273555,
      -0.28772306416060156
    ],
    [
      0.49200534129029233,
      -0.8187501515054318,
      -0.29593738113265694
    ],
    [
      0.5000339574591076,
      -0.7955156294005636,
      -0.3422293452747854
    ],
    [
      0.4900961870522351,
      -0.7964288460917283,
      -0.35426941802794487
    ],
    [
      0.5161534256579977,
      -0.786469600202643,
      -0.33919199450843274
    ],
    [
      0.5192260004174852,
      -0.8028209809079222,
      -0.29305772998592483
    ],
    [
      0.5319030792899498,
      -0.7809026484404885,
      -0.3275212480137742
    ],
    [
      0.5314013298565,
      -0.7809133311347475,
      -0.3283092991110296
    ],
    [
      0.5504517320088127,
      -0.7744965375932307,
      -0.3117017869448228
    ],
    [
      0.5484721618186086,
      -0.7744719137846025,
      -0.31523252127411794
    ],
    [
      0.5353188031950057,
      -0.7964375867095862,
      -0.2812844635277197
    ],
    [
      0.5360627427526586,
      -0.7964115033176863,
      -0.2799383025163935
    ],
    [
      0.5506701968952763,
      -0.7902151501765485,
      -0.26892815152522137
    ],
    [
      0.5682481853019812,
      -0.7682568927224348,
      -0.29474624117276615
    ],
    [
      0.5654504518325076,
      -0.7682029579628388,
      -0.30021659164602776
    ],
    [
      0.5808082812274373,
      -0.7626018470235091,
      -0.28478090415960544
    ],
    [
      0.5533677753500134,
      -0.7901173177295862,
      -0.2636261167410797
    ],
    [
      0.565061546211284,
      -0.784799515131767,
      -0.2545489541173884
    ],
    [
      0.5847478582768546,
      -0.7625899872315434,
      -0.27663415120846147
    ],
    [
      0.5993468502798839,
      -0.7575606431164512,
      -0.25862177994239277
    ],
    [
      0.5948442733630374,
      -0.7577634813452502,
      -0.2682439128605285
    ],
    [
      0.5696645702321737,
      -0.7846372685487596,
      -0.2445948368762811
    ],
    [
      0.5787466193042681,
      -0.7802220958705873,
      -0.23728849900319332
    ],
    [
      0.5838354738127961,
      -0.7798603948784593,
      -0.22572971452115362
    ],
    [
      0.5910767588910449,
      -0.7761312430780105,
      -0.21965554538194468
    ],
    [
      0.6131380770562757,
      -0.7528950249189553,
      -0.23918775034691514
    ],
    [
      0.6077187443731378,
      -0.7533244815399929,
      -0.25135662563385436
    ],
    [
      0.5993360070935898,
      -0.77516004024541,
      -0.19980806442145171
    ],
    [
      0.6259495617478573,
      -0.7486722598954302,
      -0.21835062035802583
    ],
    [
      0.6196097916024116,
      -0.7494287333990788,
      -0.23332440872370935
    ],
    [
      0.5992819319349583,
      -0.7809626618502313,
      -0.1759502397045972
    ],
    [
      0.6371319803004624,
      -0.7452521192659302,
      -0.19662685067927804
    ],
    [
      0.6298807013025921,
      -0.7464583275635618,
      -0.21459326023331915
    ],
    [
      0.5991767202187505,
      -0.7811246895381002,
      -0.17558894424737473
    ],
    [
      0.603032312441733,
      -0.7807998182162776,
      -0.1634125883296752
    ],
    [
      0.6070072687979419,
      -0.7783344047723862,
      -0.1604298288164589
    ],
    [
      0.6467796533448814,
      -0.7429697372137681,
      -0.17225576798348288
    ],
    [
      0.6467972069124724,
      -0.7423606055105204,
      -0.17479732411074816
    ],
    [
      0.6391720300517081,
      -0.7440466168078399,
      -0.19456039683446805
    ],
    [
      0.6527574286621304,
      -0.7413476305851135,
      -0.15592122996000787
    ],
    [
      0.6347831196475339,
      -0.7632591231981963,
      -0.12035739223356916
    ],
    [
      0.6516111726365607,
      -0.7487911184507702,
      -0.12130433060880781
    ],
    [
      -0.5157446772069375,
      0.7672378837683228,
      -0.3812524854258887
    ],
    [
      -0.5232493634593529,
      0.7560720466898655,
      -0.3931477633836668
    ],
    [
      -0.523504833039316,
      0.7571435931948596,
      -0.3907381080320358
    ],
    [
      -0.5295288919935379,
      0.7415892014646189,
      -0.4118793619679978
    ],
    [
      -0.5377304343290273,
      0.7326920691592959,
      -0.4171430351658592
    ],
    [
      -0.5398113277746065,
      0.7277328913116963,
      -0.4230940431031086
    ],
    [
      -0.5493537490077797,
      0.7169470765716185,
      -0.42918218491277943
    ],
    [
      -0.5510395891752056,
      0.7126067925501525,
      -0.4342199101526837
    ],
    [
      -0.5635627305863459,
      0.697858597623216,
      -0.4420298931264944
    ],
    [
      -0.580889069587164,
      0.6844028801246627,
      -0.440636569648078
    ],
    [
      -0.6082914374706012,
      0.6686884243457778,
      -0.427594806149362
    ],
    [
      -0.6121216342754465,
      0.6492214968657654,
      -0.45146268157991926
    ],
    [
      -0.6476521185490985,
      0.6178912480361941,
      -0.44582186906783616
    ],
    [
      -0.6595753783111105,
      0.6111955640044968,
      -0.4374932032237535
    ],
    [
      -0.6635907393792494,
      0.6074283136473114,
      -0.4366671208022013
    ],
    [
      -0.67848936210001,
      0.5986003760018037,
      -0.4258283402588662
    ],
    [
      -0.6795970768113433,
      0.5983969583590052,
      -0.4243452526141517
    ],
    [
      -0.6919616084948147,
      0.5907332836051695,
      -0.4149979759111159
    ],
    [
      -0.7039733373820791,
      0.5885071817838524,
      -0.3975938093632308
    ],
    [
      -0.7135637688057531,
      0.5944224929327908,
      -0.3707946166590018
    ],
    [
      -0.03845605587456668,
      0.2711125525690495,
      -0.9617791407626112
    ],
    [
      0.41991019695567244,
      0.3399343039110673,
      0.8414987198547283
    ],
    [
      0.38861585694704737,
      0.32271131106531925,
      0.8630383105284578
    ],
    [
      0.3982193877481526,
      0.33804592109715026,
      0.8527287226610031
    ],
    [
      0.3546640595888321,
      0.30801963234722796,
      0.8828008331014691
    ],
    [
      0.363366701225559,
      0.32160365307339206,
      0.8743773388934005
    ],
    [
      0.3183487724037469,
      0.2899209631904484,
      0.9025518789586281
    ],
    [
      0.32805930462460364,
      0.3075540962033462,
      0.893189549064343
    ],
    [
      0.2791876670493294,
      0.2731962194663236,
      0.9205531338477215
    ],
    [
      0.2918601307835392,
      0.29232649894614016,
      0.9106936268981505
    ],
    [
      0.25605859453680296,
      0.27706159122983043,
      0.926105215852406
    ],
    [
      0.24055991411803854,
      0.25088542698455546,
      0.937649950805896
    ],
    [
      0.20013542302923792,
      0.2231180997909847,
      0.9540252229341571
    ],
    [
      0.21662972495150815,
      0.2567014551763464,
      0.9419001673095616
    ],
    [
      0.17768087231916133,
      0.23053869361067114,
      0.9567034119099749
    ],
    [
      0.1119752578004111,
      0.19886382911938302,
      0.9736091202882747
    ],
    [
      0.13035710016361268,
      0.2015142742031334,
      0.9707723851291394
    ],
    [
      0.17550052518026296,
      0.23363241471743093,
      0.9563553003224033
    ],
    [
      0.1406072433095564,
      0.237455525927789,
      0.9611682872084598
    ],
    [
      0.13078153092881778,
      0.256893280878697,
      0.957550016138736
    ],
    [
      0.14160351087975215,
      0.2734043695995106,
      0.951419201188636
    ],
    [
      0.17412954827448604,
      0.2632902133149826,
      0.9488715213295604
    ],
    [
      0.12783015904954226,
      0.07941598010086708,
      0.9886114264674405
    ],
    [
      0.07990996560560096,
      0.032290239966878936,
      0.9962789457776337
    ],
    [
      0.028934214619632286,
      -0.013385010266548111,
      0.9994916971763744
    ],
    [
      0.057305139434659445,
      0.06938170688912669,
      0.9959429199223847
    ],
    [
      0.06770504229571458,
      0.0629564560735189,
      0.9957170842595795
    ],
    [
      0.07739572443662414,
      0.0480829982333776,
      0.9958403120580223
    ],
    [
      0.05399747149974274,
      0.0742834299184129,
      0.9957741938367306
    ],
    [
      0.030833917962949077,
      0.08442315622003371,
      0.9959528102259172
    ],
    [
      0.03884796009871062,
      0.08351400298114618,
      0.9957490885269411
    ],
    [
      -0.012436155607114835,
      0.08570421984392783,
      0.9962430068686351
    ],
    [
      0.004488198091640001,
      0.09140083761505088,
      0.9958040685602552
    ],
    [
      0.022142056667266943,
      0.0896143415624186,
      0.9957303847492441
    ],
    [
      0.057003257242141385,
      0.1225436337753531,
      0.9908247506420691
    ],
    [
      0.03107491758571643,
      0.12576782366687403,
      0.9915728939554262
    ],
    [
      0.019921151107245457,
      0.1375742657140876,
      0.9902911032377257
    ],
    [
      0.006759155014741916,
      0.13764820921551255,
      0.9904581184094808
    ],
    [
      0.010537154114107208,
      0.13894411004716054,
      0.9902441631569348
    ],
    [
      -0.019728439315498107,
      0.13595925892950428,
      0.9905179799445918
    ],
    [
      -0.008995738178738957,
      0.13988904378190092,
      0.9901263212966338
    ],
    [
      -0.045774267310887747,
      0.13053662051224146,
      0.9903862414015021
    ],
    [
      -0.02837699778739363,
      0.13707940361329365,
      0.9901535149165497
    ],
    [
      -0.07774866647790692,
      0.13256509486227627,
      0.9881202560847859
    ],
    [
      -0.07806018778796923,
      0.1337985632856972,
      0.9879294263990673
    ],
    [
      -0.07955684436712133,
      0.09005269692755813,
      0.9927543604993226
    ],
    [
      -0.0763423702688758,
      0.058523592953943125,
      0.9953626633390922
    ],
    [
      -0.10639682372099236,
      0.0815631526911265,
      0.9909728391964979
    ],
    [
      -0.12362581923420485,
      0.0791067510862089,
      0.9891707530812142
    ],
    [
      -0.12161019886209384,
      0.08548030166969511,
      0.9888903263553446
    ],
    [
      -0.1025926841068482,
      0.0459324748478219,
      0.9936623918223466
    ],
    [
      0.3704905218946629,
      0.37989036088610817,
      0.8475966534219227
    ],
    [
      0.3403186680910011,
      0.36378415137312664,
      0.8670895544051382
    ],
    [
      0.30564824572863836,
      0.4095831539686373,
      0.8595468514677426
    ],
    [
      0.31328684601234236,
      0.42338339701438055,
      0.8500575576090141
    ],
    [
      0.3052894672528963,
      0.344346206228931,
      0.8878198192427252
    ],
    [
      0.2786369784125874,
      0.3936300957547063,
      0.8760232770750125
    ],
    [
      0.28288987185512127,
      0.40138960652494987,
      0.8711255387000998
    ],
    [
      0.339820309678336,
      0.3624683761258586,
      0.8678357180012833
    ],
    [
      0.2500082330826229,
      0.3818370074891761,
      0.8897732200412731
    ],
    [
      0.3051653509730814,
      0.34408939917318987,
      0.8879620453274505
    ],
    [
      0.2742257525111507,
      0.330835004207934,
      0.9029664648537228
    ],
    [
      0.2461321981394132,
      0.3703621889210196,
      0.8956845371316241
    ],
    [
      0.2382977831727087,
      0.3108896357601113,
      0.9200879310761108
    ],
    [
      0.2034756302546067,
      0.35347949944692053,
      0.9130443096385
    ],
    [
      0.2732020611629003,
      0.32858335419669793,
      0.904098232008663
    ],
    [
      0.23719969902045013,
      0.30650872321403766,
      0.9218398480095706
    ],
    [
      0.20001798849812444,
      0.28451240572141084,
      0.9375742612016285
    ],
    [
      0.19236132244938334,
      0.2934823341929414,
      0.9364108292529444
    ],
    [
      0.18691922466548727,
      0.351187986562361,
      0.9174574657959507
    ],
    [
      0.19528873589071646,
      0.35560051564543704,
      0.9140079774853748
    ],
    [
      0.16425590100966486,
      0.30273605302300605,
      0.9388135497443328
    ],
    [
      0.19955831620053094,
      0.28025495897754316,
      0.9389534793607746
    ],
    [
      0.13865405983396423,
      0.2869478647703008,
      0.9478586258484567
    ],
    [
      0.0990030582290413,
      0.21154657942685046,
      0.9723407011917666
    ],
    [
      0.10333828875467403,
      0.2526767046803676,
      0.9620164660696436
    ],
    [
      0.06251903274438649,
      0.21203644951613015,
      0.975259921570296
    ],
    [
      0.06783008737861394,
      0.2147542083070641,
      0.9743098630623708
    ],
    [
      0.04831563771047294,
      0.1632515843783321,
      0.9854006897453415
    ],
    [
      0.05887349572766293,
      0.2914688958970283,
      0.9547668795184362
    ],
    [
      0.07977475849539362,
      0.2596477171103167,
      0.9624027488044714
    ],
    [
      0.06573487470906539,
      0.25104564911893634,
      0.9657406527145036
    ],
    [
      0.052549829427208594,
      0.2543708583824423,
      0.9656779907572455
    ],
    [
      0.04683635019353019,
      0.26033275912780246,
      0.9643822949564423
    ],
    [
      0.04895674900446097,
      0.29116617760137603,
      0.9554190147510767
    ],
    [
      0.033362820301146824,
      0.229397747223045,
      0.9727608111918085
    ],
    [
      0.006948068390092974,
      0.2602683043402285,
      0.9655113329741443
    ],
    [
      -0.10672307644074877,
      0.032619013229526365,
      0.9937535836065972
    ],
    [
      -0.10699104990762161,
      0.033486506854044355,
      0.9936959137977668
    ],
    [
      -0.11479717695121701,
      0.007172154352921761,
      0.9933630596946762
    ],
    [
      -0.11797165937680747,
      0.0042525755026796425,
      0.99300785655778
    ],
    [
      -0.10863718716687638,
      -0.018853403086485948,
      0.9939026666412197
    ],
    [
      -0.11555355104511005,
      -0.04968310162005187,
      0.9920579450083935
    ],
    [
      -0.11627397416301838,
      -0.047255506923728055,
      0.9920923747301554
    ],
    [
      -0.08603626778603558,
      -0.09699336755267178,
      0.9915594017890416
    ],
    [
      -0.11678734263599426,
      -0.08268657568716802,
      0.9897088697193499
    ],
    [
      -0.11755652484031244,
      -0.08171926551807347,
      0.9896981484829885
    ],
    [
      -0.2907850354175957,
      -0.17138883775418387,
      0.94131287544071
    ],
    [
      -0.2869148980707874,
      -0.14204729244820732,
      0.9473660369535964
    ],
    [
      -0.24448248691183955,
      -0.11888242058947952,
      0.9623384454900409
    ],
    [
      -0.24270149776208663,
      -0.1147656391362566,
      0.9632885502577545
    ],
    [
      -0.19490891026593304,
      -0.11554449509652684,
      0.9739917794067028
    ],
    [
      -0.1984580045322836,
      -0.15499801767604632,
      0.967775818541443
    ],
    [
      -0.2097048385521779,
      -0.15977256652017197,
      0.9646225208211564
    ],
    [
      -0.18043619114956724,
      -0.07040250151430481,
      0.9810638453760108
    ],
    [
      -0.1475449635246668,
      -0.13206084678312485,
      0.9801991718449005
    ],
    [
      -0.1928680529296719,
      -0.11334854465934933,
      0.9746558477651097
    ],
    [
      -0.18664509144782504,
      -0.08018774139642987,
      0.9791493941009065
    ],
    [
      -0.2686810609075602,
      -0.1949710525819814,
      0.9432903986390735
    ],
    [
      -0.21964483880055619,
      -0.19790768770046022,
      0.9552950810808851
    ],
    [
      -0.23443930006782301,
      -0.2004963092922487,
      0.9512304897047278
    ],
    [
      -0.1399950515811201,
      -0.1607378614918531,
      0.9770182830509495
    ],
    [
      -0.16287546742813036,
      -0.180972057861144,
      0.9699075710517837
    ],
    [
      -0.21053710725189753,
      -0.3225172005449952,
      0.9228525244168877
    ],
    [
      -0.19516684074251933,
      -0.3326627090318863,
      0.9226296257405517
    ],
    [
      -0.21266368009480036,
      -0.2966127895921986,
      0.9310182663185886
    ],
    [
      -0.1693025005935333,
      -0.3093245403853344,
      0.9357643891536899
    ],
    [
      -0.16589139547337461,
      -0.320320154480658,
      0.9326709192107278
    ],
    [
      -0.14889536374402917,
      -0.27033688027037245,
      0.9511824965910672
    ],
    [
      -0.14409163707021405,
      -0.2816559411980962,
      0.9486345613112777
    ],
    [
      -0.09613635635218734,
      -0.2869849782799155,
      0.953098852810663
    ],
    [
      -0.10284022543121597,
      -0.3155091468422574,
      0.9433333802490652
    ],
    [
      -0.10013687389091736,
      -0.2743032608252837,
      0.9564153530699782
    ],
    [
      -0.09885349949797247,
      -0.31942280357050445,
      0.9424420715333984
    ],
    [
      -0.10266704938129433,
      -0.3172611597602846,
      0.9427644634153846
    ],
    [
      -0.07298265930935409,
      -0.3631215425372744,
      0.9288790431404323
    ],
    [
      -0.05904172490564519,
      -0.4051206515843012,
      0.9123548281124386
    ],
    [
      -0.06577341762915605,
      -0.40102178007508976,
      0.9137042133200366
    ],
    [
      -0.07663022105813415,
      -0.37336414509748367,
      0.9245144803496625
    ],
    [
      -0.04844378489047076,
      -0.4459304726269305,
      0.893755678744593
    ],
    [
      -0.060504353124986955,
      -0.43888967543563634,
      0.8965015761552952
    ],
    [
      -0.06068582650431608,
      -0.4386250470786911,
      0.8966188145118884
    ],
    [
      -0.040039517533608335,
      -0.482568219507801,
      0.874942712728523
    ],
    [
      -0.05269120138662021,
      -0.4754462140925502,
      0.878165437034216
    ],
    [
      -0.043499860139387884,
      -0.5112921735323636,
      0.8583053509400982
    ],
    [
      -0.216342943750886,
      -0.4839582123665725,
      0.8479269894113246
    ],
    [
      -0.20345497535150542,
      -0.5052837017771972,
      0.8386265281536536
    ],
    [
      -0.23545005285456036,
      -0.5126224387826169,
      0.8257006163660937
    ],
    [
      -0.18476438409510385,
      -0.47835827491233995,
      0.8585077071248965
    ],
    [
      -0.18062409212139846,
      -0.4811599819382897,
      0.8578228308493924
    ],
    [
      -0.13589224581616785,
      -0.3359088751371869,
      0.9320399804359832
    ],
    [
      -0.05941269218219038,
      -0.4766175836293182,
      0.8771007986446109
    ],
    [
      -0.08699092344575586,
      -0.46553365818585873,
      0.8807445670193752
    ],
    [
      -0.054848584558319764,
      -0.5127589470618389,
      0.8567787899918994
    ],
    [
      -0.07561180154508904,
      -0.5011524700482709,
      0.8620493357294715
    ],
    [
      -0.052057075880487635,
      -0.546970244559446,
      0.8355319338106432
    ],
    [
      -0.06875479717090821,
      -0.534836269832945,
      0.842153752195624
    ],
    [
      -0.04879389925140703,
      -0.5773615512822498,
      0.8150293212497313
    ],
    [
      -0.05954554276769949,
      -0.5672061997273008,
      0.8214203889163049
    ],
    [
      -0.04628375499582199,
      -0.6078076514294487,
      0.7927343015710273
    ],
    [
      -0.05570326312922327,
      -0.597877352747775,
      0.7996498093215987
    ],
    [
      -0.04458419766617791,
      -0.6356737048435067,
      0.7706693131875653
    ],
    [
      -0.05161806128034351,
      -0.6274728397059235,
      0.7769256149600443
    ],
    [
      -0.041594184126293024,
      -0.6620952876508762,
      0.7482644946256447
    ],
    [
      -0.048909760428820954,
      -0.6533795977518357,
      0.7554488312099269
    ],
    [
      -0.03903468444211976,
      -0.6867915883712581,
      0.7258054887867607
    ],
    [
      -0.04602155443771864,
      -0.6784819036197907,
      0.733174142334276
    ],
    [
      -0.04400631181383203,
      -0.703015958935299,
      0.7098112467429815
    ],
    [
      -0.21285187182267062,
      -0.5519376556442916,
      0.8062623052973944
    ],
    [
      -0.20167269172516397,
      -0.5063849453402731,
      0.8383927555418497
    ],
    [
      -0.20621594443216873,
      -0.5566765413381851,
      0.8047274150827127
    ],
    [
      -0.1899224743417649,
      -0.5059297087705465,
      0.8414063129803886
    ],
    [
      -0.1372752582798042,
      -0.5641066056874668,
      0.8142108086263519
    ],
    [
      -0.1570689384564477,
      -0.5942629740772789,
      0.7887844231556502
    ],
    [
      -0.1494833703975708,
      -0.6225695495446999,
      0.7681548528482339
    ],
    [
      -0.16043276463979464,
      -0.5972953052424312,
      0.7858114572627349
    ],
    [
      -0.09103667815886378,
      -0.743485431990743,
      0.6625267810793294
    ],
    [
      -0.08025073941082464,
      -0.7478230683728748,
      0.6590299516967302
    ],
    [
      -0.15243308175091627,
      -0.7439324798589008,
      0.6506370885516016
    ],
    [
      -0.1551368162683598,
      -0.7435166977142108,
      0.6504732803569045
    ],
    [
      -0.16385700604077602,
      -0.7119886992182538,
      0.6828052238792934
    ],
    [
      0.2134804834020398,
      0.7411393996719142,
      0.6365048887953542
    ],
    [
      0.19172707954658183,
      0.7542721250202677,
      0.6279444946696708
    ],
    [
      0.17897265802073933,
      0.7536194594136989,
      0.6324764802536105
    ],
    [
      0.16892373629136093,
      0.7592025881764364,
      0.6285508741729401
    ],
    [
      0.15473840330864452,
      0.7580442165660497,
      0.6335810857911204
    ],
    [
      0.14259032349460043,
      0.7686923580168376,
      0.6235222998195167
    ],
    [
      0.11025079575007216,
      0.7296258199272521,
      0.6749006778274571
    ],
    [
      0.11545271802248663,
      0.7652867082317057,
      0.633251075091942
    ],
    [
      0.09287948903033547,
      0.793284372231663,
      0.6017252739336117
    ],
    [
      0.06491917028293932,
      0.779801657764994,
      0.622651488295613
    ],
    [
      0.06036194962407827,
      0.7790183474574762,
      0.6240888152836928
    ],
    [
      0.033139052606466116,
      0.7643082033070078,
      0.6439990477865316
    ],
    [
      0.0012183136001464956,
      0.7745120847816699,
      0.6325579390373052
    ],
    [
      -0.5569854069430576,
      0.7514144579612371,
      -0.35375636929855653
    ],
    [
      -0.557574036552355,
      0.7497251776422158,
      -0.3564033554444473
    ],
    [
      -0.5533386665385867,
      0.744689127689881,
      -0.37316808975819843
    ],
    [
      -0.5610475810322393,
      0.7561475026944803,
      -0.3368479864668538
    ],
    [
      -0.5665259179534556,
      0.7600584847813555,
      -0.3183700425587566
    ],
    [
      -0.5633591921658696,
      0.7557929609455579,
      -0.3337715098497252
    ],
    [
      -0.5818730620097685,
      0.7554724616300643,
      -0.3011396676394308
    ],
    [
      -0.5963550081995578,
      0.7461219937743244,
      -0.29607883173494903
    ],
    [
      -0.6438861416473577,
      0.7157407848846077,
      -0.27041776096855136
    ],
    [
      -0.6268130348081205,
      0.7193213917161574,
      -0.299469789484957
    ],
    [
      -0.681881144196591,
      0.6687739986509706,
      -0.2962759590610405
    ],
    [
      -0.6877608610207359,
      0.6572789204101451,
      -0.30817108695088524
    ],
    [
      -0.6884943667750408,
      0.6529756043902033,
      -0.31559208955594
    ],
    [
      -0.6912313915524055,
      0.6471910211411102,
      -0.321469976027081
    ],
    [
      -0.6986618826920381,
      0.6346542539446302,
      -0.330281019168831
    ],
    [
      -0.6915575374706608,
      0.645229354089927,
      -0.3246956313044743
    ],
    [
      -0.7125771096884302,
      0.5958872460844941,
      -0.37034072514634486
    ],
    [
      -0.7183656385877785,
      0.5696882806349348,
      0.3992569000074823
    ],
    [
      -0.7202985951086218,
      0.5567507439052253,
      0.41376145669397946
    ],
    [
      -0.7199174350897766,
      0.5562293114862829,
      0.4151238847588189
    ],
    [
      -0.7218094980055829,
      0.5411896374961656,
      0.4313986843462753
    ],
    [
      -0.7211060935366006,
      0.5248422094860443,
      0.45226834623505396
    ],
    [
      -0.72329426960001,
      0.5274238777857393,
      0.44572351598860194
    ],
    [
      -0.7218427505099136,
      0.5411189760594535,
      0.4314316832183877
    ],
    [
      -0.7204785417274828,
      0.5098699639821044,
      0.4700460517216663
    ],
    [
      -0.7222333087801615,
      0.51177684547747,
      0.46525638966229094
    ],
    [
      -0.720224204609282,
      0.49280924595805264,
      0.4882787545994426
    ],
    [
      -0.7215201144699288,
      0.49416803824371985,
      0.48498110725434884
    ],
    [
      -0.7208912560143258,
      0.4789910836323783,
      0.5008825598908069
    ],
    [
      -0.7188939102204862,
      0.47724174968079697,
      0.5054026693731555
    ],
    [
      -0.7193939084165014,
      0.45941080878983703,
      0.5209741963862492
    ],
    [
      -0.7185510915069898,
      0.4586994834985398,
      0.52276104745121
    ],
    [
      -0.7187567932536765,
      0.44260962569179435,
      0.5361766419722716
    ],
    [
      -0.7170839127848908,
      0.44141112746697364,
      0.5393949189355107
    ],
    [
      -0.7145584166129249,
      0.42221976976622677,
      0.5577963205921892
    ],
    [
      -0.7168993851075779,
      0.4236211681789987,
      0.5537150688784236
    ],
    [
      -0.7089044056001959,
      0.40475966312330963,
      0.5776020765448633
    ],
    [
      -0.7141874097831137,
      0.40700931882418007,
      0.5694556682460575
    ],
    [
      -0.7028988337076768,
      0.3872305798931571,
      0.5966453784016073
    ],
    [
      -0.7084244798030862,
      0.3894769929420051,
      0.588593602058823
    ],
    [
      -0.6948950534402853,
      0.36933564051064793,
      0.6170186782851979
    ],
    [
      -0.7022525572465779,
      0.3721841192609935,
      0.6068939999790413
    ],
    [
      -0.6856079305325458,
      0.3528359542497244,
      0.6367484236176532
    ],
    [
      -0.6940410504064042,
      0.35627741947260133,
      0.6255984500657904
    ],
    [
      -0.6753402517937472,
      0.3361786113427939,
      0.656429345461329
    ],
    [
      -0.6846612854893007,
      0.33970512078981524,
      0.6448560731367236
    ],
    [
      -0.6659182667764875,
      0.318254923425909,
      0.6747345149676038
    ],
    [
      -0.6743414987082215,
      0.3217831035729153,
      0.6646195734214667
    ],
    [
      -0.655573374290096,
      0.29908498269256273,
      0.6933770432093114
    ],
    [
      -0.6648225493932125,
      0.30290369321438704,
      0.6828325786423741
    ],
    [
      -0.6440087912816927,
      0.2787850820610107,
      0.7124124892027994
    ],
    [
      -0.6543864238652809,
      0.2838884266462692,
      0.7008464664083817
    ],
    [
      -0.6321405152453622,
      0.2592145173256633,
      0.7302096979587107
    ],
    [
      -0.6427609405606639,
      0.26585676552060744,
      0.7184556726176581
    ],
    [
      -0.6309064267503042,
      0.2470627810912938,
      0.7354706403960655
    ],
    [
      -0.6190439277753068,
      0.23929516802520456,
      0.7480123247943913
    ],
    [
      -0.6040254823542229,
      0.2191458229777694,
      0.7662429934023177
    ],
    [
      -0.6178891119630765,
      0.22788415135927995,
      0.7525170156725637
    ],
    [
      -0.6030098362504202,
      0.2088114497208275,
      0.7699200710792827
    ],
    [
      -0.5870461882246668,
      0.19904728730605825,
      0.7847018225459838
    ],
    [
      -0.5688081342674134,
      0.18010702214080462,
      0.8025077986953123
    ],
    [
      -0.5862133214763697,
      0.19019466575867633,
      0.7875150353108109
    ],
    [
      -0.5680534975358461,
      0.16969292828867652,
      0.8053071054114116
    ],
    [
      -0.5494732457165468,
      0.15892312098563408,
      0.8202576387074423
    ],
    [
      -0.5301198451237273,
      0.13590315691577556,
      0.8369607408632268
    ],
    [
      -0.5488526011527461,
      0.1502696746717103,
      0.8223015548337015
    ],
    [
      -0.5090551326540659,
      0.11381456356277696,
      0.8531759004095029
    ],
    [
      -0.5298320652978256,
      0.13217758982033267,
      0.8377392597530144
    ],
    [
      -0.48154143663467014,
      0.09361393733726868,
      0.8714093616320816
    ],
    [
      -0.49024301023976136,
      0.09268616734937037,
      0.8666435630021962
    ],
    [
      -0.5089674239869967,
      0.11259451130633326,
      0.853390085098092
    ],
    [
      -0.46522981342064046,
      0.07359762851386137,
      0.8821250533692668
    ],
    [
      -0.45107604306120985,
      0.0743607798263868,
      0.8893823012629907
    ],
    [
      -0.4375726425035151,
      0.055061714577334026,
      0.8974956212262515
    ],
    [
      -0.4153913101126689,
      0.05133472463992713,
      0.9081931543064082
    ],
    [
      -0.3924051599043874,
      0.008470353366294361,
      0.9197534689221141
    ],
    [
      -0.37905680196581165,
      0.00919084655096214,
      0.9253277631321392
    ],
    [
      -0.38124295387551854,
      0.0075111342911604465,
      0.9244443698686955
    ],
    [
      0.4041040183169312,
      -0.7141544169786295,
      0.5715622547807221
    ],
    [
      0.3998438567345579,
      -0.7290690850741771,
      0.5555026187343645
    ],
    [
      0.4023621765787273,
      -0.7115193681433407,
      0.576059777814534
    ],
    [
      0.4065843468347638,
      -0.6960323990846872,
      0.5918006998419006
    ],
    [
      0.4048253825676146,
      -0.6933777250589622,
      0.5961071548145037
    ],
    [
      0.4086782896811196,
      -0.6779818345654405,
      0.6110013809661926
    ],
    [
      0.41020097907676517,
      -0.6591101892741513,
      0.6303244522937815
    ],
    [
      0.40643986578310703,
      -0.6746169968567075,
      0.6161968379132168
    ],
    [
      0.4075427178941012,
      -0.6549667172544215,
      0.6363391645816371
    ],
    [
      0.41118656122252867,
      -0.6396623310090804,
      0.649428759879035
    ],
    [
      0.40855448841768366,
      -0.6352143270587605,
      0.655428095745865
    ],
    [
      0.4121141300937358,
      -0.6201227261200273,
      0.6675400724499984
    ],
    [
      0.41214252932253964,
      -0.599875464817934,
      0.6857754459246023
    ],
    [
      0.40875344748627657,
      -0.6143883625396309,
      0.6748685495294284
    ],
    [
      0.4074282137134916,
      -0.5920591850893839,
      0.695318755695205
    ],
    [
      0.4104890462522041,
      -0.5789314976857146,
      0.7045119331099589
    ],
    [
      0.40748257494920453,
      -0.5574087300740345,
      0.7233626053024984
    ],
    [
      0.40470045810749344,
      -0.5692552307646996,
      0.7156577544152047
    ],
    [
      0.4004642521186741,
      -0.5455798396522237,
      0.7361868114412842
    ],
    [
      0.4028509785147133,
      -0.5355866791468541,
      0.7421980855743181
    ],
    [
      0.39391159273392734,
      -0.5208343446578294,
      0.7573409024571893
    ],
    [
      0.3959259844598641,
      -0.5126350788738637,
      0.7618713085144203
    ],
    [
      0.3876128452304061,
      -0.48833275762850925,
      0.7818487066174151
    ],
    [
      0.38570691108632726,
      -0.49570240950085365,
      0.7781447808443439
    ],
    [
      0.3762113352460688,
      -0.46925952440410357,
      0.7989120915272246
    ],
    [
      0.37791967077924077,
      -0.4630473021423491,
      0.8017255879768352
    ],
    [
      0.365173993339802,
      -0.4414093856409957,
      0.8196375472465259
    ],
    [
      0.36652048840868295,
      -0.4368588770423558,
      0.821472490790746
    ],
    [
      0.35161831973476243,
      -0.41150160090566995,
      0.8408513481460164
    ],
    [
      0.35225355650935763,
      -0.4095030210951775,
      0.8415608757781171
    ],
    [
      0.33621208579167466,
      -0.38063707282629605,
      0.8614388267067143
    ],
    [
      0.33474528656737473,
      -0.3803978512829503,
      0.8621154608637063
    ],
    [
      0.3183900667683265,
      -0.34874078525962837,
      0.8814803628440956
    ],
    [
      0.31471280855318506,
      -0.3481879824501947,
      0.8830181068414334
    ],
    [
      0.29930223691682406,
      -0.31449730808782417,
      0.9008382841454383
    ],
    [
      0.2908802979417723,
      -0.3135511020574807,
      0.9039216551603602
    ],
    [
      0.27713031556317735,
      -0.2773572113115377,
      0.9199303047129933
    ],
    [
      0.2660087371784503,
      -0.2763754723733598,
      0.9235020032545291
    ],
    [
      0.25421155946607793,
      -0.23977751503072708,
      0.9369542285082629
    ],
    [
      0.24132012239712938,
      -0.2362410720476662,
      0.9412516955650088
    ],
    [
      0.2316315555752447,
      -0.23737976915187395,
      0.9433968770666963
    ],
    [
      0.2219011681886772,
      -0.19510977565829885,
      0.9553491754322441
    ],
    [
      0.2219938770150487,
      -0.1950441654401766,
      0.9553410344455913
    ],
    [
      0.251218689032516,
      -0.19753620667447194,
      0.9475592948905331
    ],
    [
      0.2537518230066659,
      -0.20111849427551148,
      0.9461296758801855
    ],
    [
      0.15572565740116934,
      -0.19271373697808833,
      0.9688193511728148
    ],
    [
      0.13190035286800827,
      -0.19791618593638596,
      0.9713040102139436
    ],
    [
      0.13037236756021287,
      -0.19529760234143773,
      0.9720400672279051
    ],
    [
      0.13891717156349687,
      -0.1531441253647564,
      0.9783909731344937
    ],
    [
      0.13710053719295798,
      -0.19835889408697316,
      0.9704932724331453
    ],
    [
      0.08496503266592355,
      -0.054309677761876125,
      0.9949027098794534
    ],
    [
      0.2256924704213088,
      -0.9718181484631228,
      0.06806170077829857
    ],
    [
      0.23749794552191084,
      -0.9678831530499553,
      0.08244348315633071
    ],
    [
      0.2504485447441514,
      -0.9587308442602047,
      0.13457598113947322
    ],
    [
      0.2391016199806105,
      -0.9674178726079715,
      0.08326508921099031
    ],
    [
      0.3848964671139762,
      -0.9184458207898887,
      0.09117008213645311
    ],
    [
      0.37341124510859214,
      -0.9244888568686289,
      0.07670981392355551
    ],
    [
      0.43030805633033453,
      -0.8962620018219144,
      0.10746813828937538
    ],
    [
      0.461444349143783,
      -0.8811336033603875,
      0.1033086911755726
    ],
    [
      0.479087693604833,
      -0.874834063770997,
      0.07169618331769613
    ],
    [
      0.475863516645714,
      -0.8766698883555974,
      0.0707376870992994
    ],
    [
      0.4723427419160994,
      -0.8784796701929165,
      0.07187352236342592
    ],
    [
      0.5119002741975293,
      -0.8564561908994789,
      0.06664009563655936
    ],
    [
      0.515298661127992,
      -0.8552376508343023,
      0.05509855202383219
    ],
    [
      0.5307459901382842,
      -0.8465995286817631,
      0.03972319206645952
    ],
    [
      0.5298801890146416,
      -0.8471311123380788,
      0.039948264025572285
    ],
    [
      0.5447501518390813,
      -0.838228445950726,
      0.02490671536611922
    ],
    [
      0.5450359476019463,
      -0.8380451810017162,
      0.024821168817142324
    ],
    [
      0.558720649224059,
      -0.8292942721673868,
      0.010111690314194404
    ],
    [
      0.5586520280397701,
      -0.8293402256489147,
      0.010134184114129039
    ],
    [
      0.5720820803232312,
      -0.8201835248310717,
      -0.004591183804077832
    ],
    [
      0.5854044287279921,
      -0.8104948992835244,
      -0.019991824855245203
    ],
    [
      0.5722855652933774,
      -0.8200376547545737,
      -0.0052418070794395056
    ],
    [
      0.5962660626273103,
      -0.8020484172457312,
      -0.03442555667729971
    ],
    [
      0.5862818289735297,
      -0.8097841815288132,
      -0.022873485986250303
    ],
    [
      0.5987280826271457,
      -0.7998060159023014,
      -0.042837133425444464
    ],
    [
      0.6059670747233958,
      -0.7938144976660498,
      -0.05159891129052338
    ],
    [
      0.6136177218695293,
      -0.7866016159245617,
      -0.06878364073322502
    ],
    [
      0.6093221020228268,
      -0.7903941302942736,
      -0.06327475628434065
    ],
    [
      0.6197473388437578,
      -0.7800556217352417,
      -0.08617692843984469
    ],
    [
      0.6176927072875693,
      -0.7819828644650344,
      -0.08341773820245188
    ],
    [
      0.6251078548278248,
      -0.7732435475179498,
      -0.10646401295466593
    ],
    [
      -0.7475646331578484,
      0.488929554027384,
      0.4495497863976304
    ],
    [
      -0.748786743860049,
      0.4810774763825356,
      0.45594174401657533
    ],
    [
      -0.7446397956621458,
      0.4758504056140437,
      0.46805765263820637
    ],
    [
      -0.7465225994632791,
      0.46440366660701454,
      0.4764800551256572
    ],
    [
      -0.7413331424690403,
      0.4596153208945665,
      0.48905922818812286
    ],
    [
      -0.7430867251167734,
      0.4477117722689616,
      0.49736936770072016
    ],
    [
      -0.7399583275556143,
      0.4445141032992665,
      0.5048454074755432
    ],
    [
      -0.7418573368846427,
      0.4299577702209263,
      0.5145716738580495
    ],
    [
      -0.7373500127252788,
      0.4264205944880203,
      0.523908804402555
    ],
    [
      -0.738787387497814,
      0.41294227958632856,
      0.5326085521320525
    ],
    [
      -0.7342323836467356,
      0.40967210531239123,
      0.5413608527898429
    ],
    [
      -0.7355688031518494,
      0.39508094250245385,
      0.5503177125089913
    ],
    [
      -0.7290853104177776,
      0.3915725563365581,
      0.5613426255479499
    ],
    [
      -0.7303004947874386,
      0.3679386715185705,
      0.5755712999397832
    ],
    [
      -0.7315208957650887,
      0.36497550634731324,
      0.5759080298325112
    ],
    [
      -0.7209570412217033,
      0.3530579443751196,
      0.596297771777207
    ],
    [
      -0.7209163432457073,
      0.34399873417719895,
      0.6016182318760979
    ],
    [
      -0.7124905755700702,
      0.3351730483816594,
      0.6164545460635162
    ],
    [
      -0.7123077869013459,
      0.32866492978181916,
      0.6201588350182706
    ],
    [
      -0.7020449489522812,
      0.3187624001215539,
      0.636807209380779
    ],
    [
      -0.7016964564808783,
      0.3106343826473156,
      0.641192922044138
    ],
    [
      -0.6930156179204219,
      0.3017661176694678,
      0.654726327212426
    ],
    [
      -0.6924766285755147,
      0.29298138546930735,
      0.6592708295117977
    ],
    [
      -0.6833290080982839,
      0.2835473124411543,
      0.6728018937984745
    ],
    [
      -0.682698636605506,
      0.2741224627105318,
      0.6773325970411408
    ],
    [
      -0.6738383622952328,
      0.2646812065069298,
      0.6898447074677855
    ],
    [
      -0.6732118204357188,
      0.2559493388743593,
      0.6937404275054208
    ],
    [
      -0.6626457202655817,
      0.24538499272023784,
      0.7075922941647946
    ],
    [
      -0.6620772169263769,
      0.23738885051899966,
      0.7108447738263898
    ],
    [
      -0.6497980632816412,
      0.22607676065264645,
      0.7257077753808583
    ],
    [
      -0.6492805383083384,
      0.2184253236039481,
      0.72850886101855
    ],
    [
      -0.6357923293339658,
      0.20630577637731773,
      0.7437782200316451
    ],
    [
      -0.6354040823168374,
      0.20072675876495963,
      0.7456342404227501
    ],
    [
      -0.6197150637650208,
      0.18725762523840436,
      0.7621599710905772
    ],
    [
      -0.6193613342648312,
      0.18175137743915268,
      0.7637787470312712
    ],
    [
      -0.6378717162255332,
      0.15847750627269835,
      0.753660768280451
    ],
    [
      -0.6024781531768337,
      0.16306723442765753,
      0.7812996557024373
    ],
    [
      -0.6170059259950275,
      0.14748572173181476,
      0.7730146500372839
    ],
    [
      -0.6027375094885926,
      0.16634762501191128,
      0.7804075616678667
    ],
    [
      -0.6190203228884212,
      0.135157239426563,
      0.773657779952936
    ],
    [
      -0.5868989193130713,
      0.14515544229168797,
      0.7965422500296224
    ],
    [
      -0.5868122823985794,
      0.14417255642930343,
      0.7967845500502687
    ],
    [
      -0.6054769247475245,
      0.12477382841347953,
      0.7860211099845373
    ],
    [
      -0.5719466627268793,
      0.12431267622474887,
      0.8108164857262253
    ],
    [
      -0.5915284405401625,
      0.10413125304095172,
      0.7995316042360331
    ],
    [
      -0.6065522670988454,
      0.11495822986259885,
      0.7866885995513783
    ],
    [
      -0.5715561353426242,
      0.12419761971782178,
      0.8111094472441012
    ],
    [
      -0.5587619103847898,
      0.10550024895103399,
      0.8225903141749299
    ],
    [
      -0.5747000693947628,
      0.08284842266508428,
      0.8141596705189728
    ],
    [
      -0.5924967733540957,
      0.09365854145288614,
      0.8001097744546704
    ],
    [
      -0.5398849434344336,
      0.08606483118675752,
      0.8373273509718844
    ],
    [
      -0.5551231552614923,
      0.06359697203710649,
      0.8293332910478373
    ],
    [
      -0.574973317340157,
      0.07500032233552312,
      0.814727338436868
    ],
    [
      -0.5515746828776956,
      0.10367613049209112,
      0.8276573138531166
    ],
    [
      -0.5407312984677299,
      0.039445373156719796,
      0.840270031236346
    ],
    [
      -0.5552039638382449,
      0.05494736368439062,
      0.8298971898750087
    ],
    [
      -0.5325002965370693,
      0.08418078835673509,
      0.8422333578406711
    ],
    [
      -0.5197471079100929,
      0.06514363051746103,
      0.8518328775188821
    ],
    [
      -0.5088945121188696,
      0.06191527350993811,
      0.8585993678319868
    ],
    [
      -0.4898045419696626,
      0.02920505302880231,
      0.8713429723957575
    ],
    [
      -0.48887702473334543,
      0.020920629598682308,
      0.8721018185653936
    ],
    [
      -0.4984194885743739,
      0.011474530033945685,
      0.8668600513172583
    ],
    [
      -0.5399311270980686,
      0.020409924644792774,
      0.8414617121215934
    ],
    [
      -0.43924043414179526,
      -0.01282170894475496,
      0.8982780442572685
    ],
    [
      -0.48841742832593554,
      -0.041614096336139314,
      0.8716172799420662
    ],
    [
      -0.5088325697748328,
      -0.037498481344479744,
      0.8600484171447544
    ],
    [
      -0.5091217601835027,
      -0.03710428815658341,
      0.8598943569462735
    ],
    [
      -0.4661078233038325,
      0.013914021690420537,
      0.884618503681311
    ],
    [
      -0.43305972101984946,
      -0.016098738378009163,
      0.9012214537242478
    ],
    [
      -0.45819544196016704,
      -0.06319657436075345,
      0.8866020132821676
    ],
    [
      -0.46323416733970113,
      -0.06453233383644806,
      0.8838832977824137
    ],
    [
      -0.47670626284835405,
      -0.0869354708585718,
      0.8747533154368462
    ],
    [
      -0.4823132004950257,
      -0.08763823812547826,
      0.8716039902653654
    ],
    [
      -0.5061149823871824,
      -0.06095856083770542,
      0.8603090598522242
    ],
    [
      -0.4967538185511595,
      -0.1100472161471496,
      0.8608863188441922
    ],
    [
      -0.49691587988019326,
      -0.11005718458077303,
      0.8607915104396924
    ],
    [
      -0.5196499889871665,
      -0.08997728888349878,
      0.849628140088835
    ],
    [
      -0.5141251881815253,
      -0.13011279021374647,
      0.8477888609200435
    ],
    [
      -0.5349494028084043,
      -0.1128383636512897,
      0.8373151378802552
    ],
    [
      -0.525259974201091,
      -0.09167478738432554,
      0.8459891801082966
    ],
    [
      -0.5133860875135499,
      -0.1375369232118205,
      0.8470645311314572
    ],
    [
      -0.5323192322455823,
      -0.15063554936943022,
      0.8330337125516852
    ],
    [
      -0.5494862092505355,
      -0.13457982073544425,
      0.8245927344418531
    ],
    [
      -0.5413243864324364,
      -0.11510646670512627,
      0.8328975987336066
    ],
    [
      -0.5575311875870256,
      -0.13782571367410032,
      0.8186348682520345
    ],
    [
      -0.5307721223033218,
      -0.16294611175996065,
      0.8317027827583229
    ],
    [
      -0.5437367993510537,
      -0.17614625596924227,
      0.8205624836290593
    ],
    [
      -0.565278359761163,
      -0.1568392756947879,
      0.8098529604720005
    ],
    [
      -0.5426194900696133,
      -0.18619492190486378,
      0.8190821326664589
    ],
    [
      -0.5513029968323029,
      -0.198694634199285,
      0.810299603865221
    ],
    [
      -0.580647747053229,
      -0.18178826245859844,
      0.7936001647393309
    ],
    [
      -0.5806589870572414,
      -0.18168062998504575,
      0.7936165884341728
    ],
    [
      -0.572044490781447,
      -0.1600958078619707,
      0.8044466625399211
    ],
    [
      -0.5871168904880718,
      -0.20652682722330706,
      0.7827135022092641
    ],
    [
      -0.587722472560963,
      -0.20104288710139395,
      0.7836861953567668
    ],
    [
      -0.5501164401991204,
      -0.20910667842287065,
      0.80848395114659
    ],
    [
      -0.5611148086470511,
      -0.22047874517037738,
      0.7978341271499226
    ],
    [
      -0.5614229170329652,
      -0.25356966155986566,
      0.7877224987053572
    ],
    [
      -0.5933317582272184,
      -0.22675407762495628,
      0.7723600280694574
    ],
    [
      -0.5936548833242171,
      -0.22396130028043118,
      0.7729263971957542
    ],
    [
      -0.5571816768496909,
      -0.25056385514048907,
      0.7916857542485546
    ],
    [
      -0.6017614723645461,
      -0.2443649976952133,
      0.7603741699183844
    ],
    [
      -0.566788293942254,
      -0.2708305159967797,
      0.7780757427493463
    ],
    [
      -0.5719422321900087,
      -0.27397383255655616,
      0.7731884777412181
    ],
    [
      -0.6004732769477564,
      -0.25399061658478717,
      0.7582351946187295
    ],
    [
      -0.5792790834658857,
      -0.29501123334792945,
      0.7598711177939697
    ],
    [
      -0.5845587629492156,
      -0.2972313169045306,
      0.7549467510430661
    ],
    [
      -0.6089857911036377,
      -0.27560856864284633,
      0.74375817516483
    ],
    [
      -0.6098429084085583,
      -0.2693584491020988,
      0.7453439829777274
    ],
    [
      -0.5918207492376844,
      -0.31655342775331063,
      0.7413110872969427
    ],
    [
      -0.5984142271534947,
      -0.3185655506033462,
      0.7351301943935323
    ],
    [
      -0.6211701859370123,
      -0.2951629308181426,
      0.725965869978625
    ],
    [
      -0.6214555057759956,
      -0.2928354143457277,
      0.7266639350109976
    ],
    [
      -0.612269464639078,
      -0.3388571655562523,
      0.7143542006748188
    ],
    [
      -0.6336324272875965,
      -0.314379346577027,
      0.706877339808987
    ],
    [
      -0.6339059721595156,
      -0.3121874844924781,
      0.707603132403156
    ],
    [
      -0.6056281369961583,
      -0.33699314359847554,
      0.7208676583438737
    ],
    [
      -0.6189576403242761,
      -0.35542840740471865,
      0.7004013754226568
    ],
    [
      -0.6476260097808595,
      -0.3358053172738776,
      0.6839702773848528
    ],
    [
      -0.6480080536694575,
      -0.33191814055957386,
      0.6855041286141146
    ],
    [
      -0.6187842657023563,
      -0.355379784923568,
      0.7005792182093858
    ],
    [
      -0.7958965080434023,
      -0.4885897295135254,
      0.35753157161042237
    ],
    [
      -0.7621784011527878,
      -0.477641935921092,
      0.4369694106750856
    ],
    [
      -0.7710215717288293,
      -0.48336186335782727,
      0.4145926253324518
    ],
    [
      -0.2866262401628861,
      -0.10593613570417025,
      0.9521674924098991
    ],
    [
      -0.2520496647711258,
      -0.09201442820349978,
      0.9633298041123539
    ],
    [
      -0.28675412302941145,
      -0.1216519367331577,
      0.9502488512040964
    ],
    [
      -0.34283461403570253,
      -0.11607055986163266,
      0.9321974321743212
    ],
    [
      -0.31603686759587407,
      -0.12274880819643157,
      0.9407727825604563
    ],
    [
      -0.30348209418362526,
      -0.1363118267683884,
      0.9430364279247043
    ],
    [
      -0.3084810446072474,
      -0.14286114459884755,
      0.9404414593593419
    ],
    [
      -0.3477213081932203,
      -0.14956644800621308,
      0.9255915781051599
    ],
    [
      -0.3486324489044063,
      -0.15131276287782772,
      0.924964790335932
    ],
    [
      -0.3466613400194495,
      -0.16260471497354612,
      0.923788732343219
    ],
    [
      -0.3491269388985881,
      -0.1653412812895749,
      0.922373374093606
    ],
    [
      -0.38697033612990916,
      -0.1759186383891975,
      0.9051555621122791
    ],
    [
      -0.4009472806395866,
      -0.15528429873510524,
      0.9028444299623647
    ],
    [
      -0.39762867222844916,
      -0.14494404655243368,
      0.9060257515053568
    ],
    [
      -0.3786495694523022,
      -0.14132897559460245,
      0.9146860795983321
    ],
    [
      -0.4153994969760795,
      -0.20341000264549278,
      0.8866045503694309
    ],
    [
      -0.4331197238303611,
      -0.18166626438521694,
      0.8828389848740438
    ],
    [
      -0.4270877181300531,
      -0.1663551188251166,
      0.8887755934222911
    ],
    [
      -0.3843275194363842,
      -0.1901469964819881,
      0.9034027216766366
    ],
    [
      -0.41323926853514253,
      -0.21675235049178038,
      0.8844499564683288
    ],
    [
      -0.4387159159528828,
      -0.22861662854577808,
      0.8690585608818228
    ],
    [
      -0.46090253530581365,
      -0.20663206694058062,
      0.863059697738538
    ],
    [
      -0.45343494014677665,
      -0.18981198203711655,
      0.8708433650945676
    ],
    [
      -0.47105931973082066,
      -0.21162685042170493,
      0.8563394148790103
    ],
    [
      -0.4361744882012606,
      -0.24449625746942188,
      0.8660100437788321
    ],
    [
      -0.4597247079810654,
      -0.253277535784328,
      0.8511778208686729
    ],
    [
      -0.4810984617535485,
      -0.2317125795225773,
      0.8454901244777273
    ],
    [
      -0.4572972245025914,
      -0.27021960076706036,
      0.84726655535523
    ],
    [
      -0.4781698393140441,
      -0.27701200354413713,
      0.8334374329623335
    ],
    [
      -0.5012596285885352,
      -0.2571002247701969,
      0.8262192561120795
    ],
    [
      -0.4890035783567753,
      -0.23502375985072288,
      0.8400234119712966
    ],
    [
      -0.47520229387542195,
      -0.2961429770365323,
      0.8285421637113448
    ],
    [
      -0.4944699979029688,
      -0.3011587082523272,
      0.8153544343520968
    ],
    [
      -0.5167251813094268,
      -0.2806834524881992,
      0.8088336581152177
    ],
    [
      -0.5030603635835673,
      -0.2578688366475471,
      0.8248841941007293
    ],
    [
      -0.5091367526398873,
      -0.3246152720377161,
      0.7971227585956818
    ],
    [
      -0.532557045859425,
      -0.3049680618187501,
      0.7895425727444958
    ],
    [
      -0.5325366827048285,
      -0.30396966596483577,
      0.78994121537426
    ],
    [
      -0.5174125257017362,
      -0.28093207423749217,
      0.8083077680633599
    ],
    [
      -0.49188184054600226,
      -0.3200333163276776,
      0.8097103996994147
    ],
    [
      -0.5064876986412392,
      -0.3439516195500634,
      0.7906753407903839
    ],
    [
      -0.5237588513182773,
      -0.3471556176254758,
      0.7779200748257068
    ],
    [
      -0.5461482882402318,
      -0.3261821127669667,
      0.7715745437500791
    ],
    [
      -0.5461370939892303,
      -0.3255236455779299,
      0.77186049953256
    ],
    [
      -0.5215301735992719,
      -0.3657996882447938,
      0.7708416608522952
    ],
    [
      -0.5377929682503736,
      -0.36897586947168487,
      0.7580471826001776
    ],
    [
      -0.5602380945492481,
      -0.3472598113252736,
      0.7520265293552901
    ],
    [
      -0.5360682142573442,
      -0.38637534522616857,
      0.7505630967908702
    ],
    [
      -0.5526515052990307,
      -0.3889906544564534,
      0.7370634873850797
    ],
    [
      -0.573477269971633,
      -0.36629585032791745,
      0.7327695209671529
    ],
    [
      -0.5611908499425471,
      -0.34752931435795775,
      0.7511911911109245
    ],
    [
      -0.5515634064171677,
      -0.40475072696675035,
      0.7293522178765054
    ],
    [
      -0.5668336735535264,
      -0.4077172767741875,
      0.7158674519390128
    ],
    [
      -0.5875933018898991,
      -0.3851808280106991,
      0.711596684440785
    ],
    [
      -0.5754796067042621,
      -0.3667951741533117,
      0.7309476879266734
    ],
    [
      -0.6012678413778781,
      -0.40309505209756336,
      0.6899212722472394
    ],
    [
      -0.5900427015397134,
      -0.3856869358171665,
      0.7092920399240934
    ],
    [
      -0.5661195151738543,
      -0.42215426799080913,
      0.7080215170151711
    ],
    [
      -0.5805291393967195,
      -0.42488107897041966,
      0.694594836609254
    ],
    [
      -0.579682187453654,
      -0.43930413099470406,
      0.6862801483650353
    ],
    [
      -0.5928388486582635,
      -0.44185104715436446,
      0.6732828169871381
    ],
    [
      -0.6251598380763433,
      -0.40767622777919066,
      0.6655638738393856
    ],
    [
      -0.6037469464433657,
      -0.4582834590841179,
      0.6522774684060514
    ],
    [
      -0.5920384971079883,
      -0.45580282715906495,
      0.6646308755210806
    ],
    [
      -0.6028228915629535,
      -0.4720556485645906,
      0.6432480284197872
    ],
    [
      -0.6147464717166476,
      -0.4741124901514307,
      0.630320650299784
    ],
    [
      -0.6141145726139455,
      -0.48612718385957604,
      0.6217263488191158
    ],
    [
      -0.6261810016686226,
      -0.48795816950986765,
      0.6081070448184758
    ],
    [
      -0.6256427424801555,
      -0.4991951049521551,
      0.5994792790194812
    ],
    [
      -0.6360489912403203,
      -0.5010487047682683,
      0.5868491085383121
    ],
    [
      -0.635169520055515,
      -0.5129825871606787,
      0.5774154016497858
    ],
    [
      -0.6451696919221519,
      -0.5145160275168008,
      0.56482681067156
    ],
    [
      -0.6542120589364938,
      -0.5267643143705698,
      0.5427024406134334
    ],
    [
      -0.6443232889821644,
      -0.5254749516148605,
      0.5556289899749349
    ],
    [
      -0.6528464094036961,
      -0.5389199131022524,
      0.5323127774068197
    ],
    [
      -0.6596758391935079,
      -0.541001671201633,
      0.5216751661152573
    ],
    [
      -0.6583134374681839,
      -0.5531570532595794,
      0.5105298154642903
    ],
    [
      -0.662273131800093,
      -0.555066602993656,
      0.5032845766927295
    ],
    [
      -0.6863311897225015,
      -0.5366276423424344,
      0.4908974144239263
    ],
    [
      -0.6870715171738819,
      -0.5514813575005117,
      0.47307614885742544
    ],
    [
      -0.6603870539914067,
      -0.5684267322420221,
      0.4906933757380543
    ],
    [
      -0.6652856171768587,
      -0.5705604547766232,
      0.48151408600652473
    ],
    [
      -0.6931858555241853,
      -0.5542348490304039,
      0.4607787992317449
    ],
    [
      -0.6636528090383583,
      -0.5809736256156303,
      0.4712054704632851
    ],
    [
      -0.6749987545423312,
      -0.5851957479054865,
      0.4493580064933083
    ],
    [
      -0.6924644029420958,
      -0.5778399556336508,
      0.4319653184358061
    ],
    [
      -0.6946637326096459,
      -0.5704355900445126,
      0.43823000377359284
    ],
    [
      0.31190430450350703,
      -0.7721795439469304,
      0.5535832879902483
    ],
    [
      0.315813644896169,
      -0.7565738355153697,
      0.5725886596073648
    ],
    [
      0.3172977334766934,
      -0.7596258696080203,
      0.5677065144533858
    ],
    [
      0.319829096985036,
      -0.7396778654717883,
      0.5921030349971496
    ],
    [
      0.3213917385309866,
      -0.7427625189508096,
      0.5873765324269248
    ],
    [
      0.3240096563445135,
      -0.7217221505150626,
      0.611665660350018
    ],
    [
      0.32563407275582085,
      -0.7248024599635691,
      0.6071440065513416
    ],
    [
      0.3278369799772058,
      -0.7029430777303666,
      0.6311845562356424
    ],
    [
      0.32978440308813467,
      -0.7064786890460317,
      0.6262029298906251
    ],
    [
      0.3309175519747085,
      -0.6827917026748993,
      0.6513747497050971
    ],
    [
      0.3335696663634962,
      -0.6874253800168144,
      0.645118302787081
    ],
    [
      0.3328738852158694,
      -0.6614220619028179,
      0.672098082551585
    ],
    [
      0.3364025921357343,
      -0.6677467935154945,
      0.6640387908504551
    ],
    [
      0.33780211989725784,
      -0.6478078260850139,
      0.6828138459755536
    ],
    [
      0.3336512680174509,
      -0.639811831610695,
      0.6923277052677548
    ],
    [
      0.33243714200630986,
      -0.6169677498107475,
      0.7133276542432232
    ],
    [
      0.33804946648760376,
      -0.6276351893385552,
      0.7012821310367192
    ],
    [
      0.3294791328102822,
      -0.5933511585394194,
      0.7344235179394196
    ],
    [
      0.33634321857327304,
      -0.6061826070101666,
      0.7207051312972105
    ],
    [
      0.32499278139738025,
      -0.5686386005161498,
      0.7556651600031784
    ],
    [
      0.3330868955289682,
      -0.5835349273609289,
      0.740634936103307
    ],
    [
      0.3192533856701328,
      -0.5426260468506312,
      0.7769390252892526
    ],
    [
      0.328390852587611,
      -0.5596078244623923,
      0.7609195297383622
    ],
    [
      0.31164378951014354,
      -0.5150396050157895,
      0.7985063266655668
    ],
    [
      0.32223779092220745,
      -0.5348908092333019,
      0.7810599389927249
    ],
    [
      0.30215486951397214,
      -0.48619008654910084,
      0.8199522148091145
    ],
    [
      0.31403429195414595,
      -0.5090158346980831,
      0.8014270668647723
    ],
    [
      0.29068517896572504,
      -0.4548991357894969,
      0.8417653491250595
    ],
    [
      0.3040887462336184,
      -0.48153408600112035,
      0.8219823346235196
    ],
    [
      0.274985836907724,
      -0.4220441908619969,
      0.8638642778005124
    ],
    [
      0.27703789013613545,
      -0.42247696488416375,
      0.8629966521204956
    ],
    [
      0.2915128974772167,
      -0.4529696014915137,
      0.8425192999148785
    ],
    [
      0.19976066369652726,
      -0.4182007302953796,
      0.8861172757710652
    ],
    [
      0.2550335268410314,
      -0.3878601190330574,
      0.8857327070006433
    ],
    [
      0.2600709057190368,
      -0.3886874813741167,
      0.883903369052028
    ],
    [
      0.1860176171573393,
      -0.3899981519389889,
      0.9018308530934606
    ],
    [
      0.1962937842891498,
      -0.37051837497356793,
      0.9078462887826282
    ],
    [
      0.23255019214889608,
      -0.35058795024074424,
      0.9071981576687118
    ],
    [
      0.23989323469283738,
      -0.3514498419469539,
      0.9049498574750252
    ],
    [
      0.1995056364065106,
      -0.4180410619099155,
      0.8862500615510632
    ],
    [
      0.17836943601061575,
      -0.31663921856328836,
      0.9316243607618282
    ],
    [
      0.1837039574619895,
      -0.3073653554249781,
      0.9336912735467117
    ],
    [
      0.21728847147458616,
      -0.3095669649964503,
      0.9257181073885962
    ],
    [
      -0.692648442924598,
      -0.7164391901722085,
      0.08338477858410272
    ],
    [
      -0.7493495042477485,
      -0.6618196562450517,
      0.02168093843299084
    ],
    [
      -0.3159275359211459,
      -0.1835214872865297,
      0.9308650040424408
    ],
    [
      -0.29307588820032626,
      -0.13613741095124635,
      0.9463472560826081
    ],
    [
      -0.3507580827024721,
      -0.21432248770628717,
      0.9116110128131812
    ],
    [
      -0.3596435051743285,
      -0.2037243777095396,
      0.910578347597165
    ],
    [
      -0.38273428982228463,
      -0.24253827636156658,
      0.8914536711987852
    ],
    [
      -0.3925595845541237,
      -0.23163615158292153,
      0.8900795840005249
    ],
    [
      -0.3796285442300726,
      -0.19585749722845178,
      0.9041692370265441
    ],
    [
      -0.42441468168533664,
      -0.2561429957513446,
      0.8684831280442131
    ],
    [
      -0.40361133792944415,
      -0.2272258992985778,
      0.8862653544976
    ],
    [
      -0.3825664555834621,
      -0.24319905062699684,
      0.8913456842529919
    ],
    [
      -0.4088312402544049,
      -0.27234645011154945,
      0.8710249296683088
    ],
    [
      -0.40909015943781163,
      -0.2723049486458539,
      0.8709163314544771
    ],
    [
      -0.4238492066974243,
      -0.2575136505880421,
      0.8683539426655377
    ],
    [
      -0.43101402738060307,
      -0.30058222430461967,
      0.8508097523143702
    ],
    [
      -0.4456400463815408,
      -0.2870746273396225,
      0.847934612690669
    ],
    [
      -0.4489131153806521,
      -0.2784671169366098,
      0.8490777818458388
    ],
    [
      -0.4295076117460955,
      -0.30061906844315855,
      0.8515582112460268
    ],
    [
      -0.4469541418232384,
      -0.3270896077377133,
      0.8326129854962877
    ],
    [
      -0.4496193176564454,
      -0.3271396843306653,
      0.8311570827022923
    ],
    [
      -0.46386443199440974,
      -0.31523095422584235,
      0.827924654922396
    ],
    [
      -0.46881950094595676,
      -0.3016525430182169,
      0.8301891464138922
    ],
    [
      -0.46587809287689,
      -0.35282343263758215,
      0.81146363317109
    ],
    [
      -0.48054593910029575,
      -0.3411145678199432,
      0.807908690407046
    ],
    [
      -0.4856118950053037,
      -0.32542988285755675,
      0.8113423930577489
    ],
    [
      -0.4646827748859744,
      -0.3527668488943945,
      0.8121732998845691
    ],
    [
      -0.4796612482794548,
      -0.37746451489033117,
      0.7921146551463382
    ],
    [
      -0.4811834804612791,
      -0.3775658225316193,
      0.7911425331678177
    ],
    [
      -0.49607383572125796,
      -0.36551651411872205,
      0.7875966146570822
    ],
    [
      -0.5004859117363067,
      -0.3491452333135295,
      0.7922193245610201
    ],
    [
      -0.5108945065690166,
      -0.3885373636425008,
      0.7668282207974196
    ],
    [
      -0.514550149882563,
      -0.3719069470877792,
      0.7726081581006505
    ],
    [
      -0.49321457266437546,
      -0.4009497687359419,
      0.77199654679415
    ],
    [
      -0.49447676815503394,
      -0.401068154615505,
      0.7711271367992869
    ],
    [
      -0.5054842900345061,
      -0.4235183095671564,
      0.7517432234411493
    ],
    [
      -0.5076415210070663,
      -0.4236992216851838,
      0.7501860140611806
    ],
    [
      -0.5254106645350242,
      -0.4095606233833452,
      0.7457906739606697
    ],
    [
      -0.5274967217316896,
      -0.3945939576112908,
      0.7523581708062851
    ],
    [
      -0.5173701199838632,
      -0.4450298204996665,
      0.7309422807677209
    ],
    [
      -0.5192169793762198,
      -0.44522330372919744,
      0.7295134941479102
    ],
    [
      -0.5392862149089218,
      -0.42973365582696255,
      0.7242232828753864
    ],
    [
      -0.540315071056412,
      -0.41574975468387304,
      0.73158168748924
    ],
    [
      -0.5309528598526246,
      -0.46533755662078385,
      0.7082019620224996
    ],
    [
      -0.5524337557431049,
      -0.44852235181689776,
      0.7025984951849857
    ],
    [
      -0.5524845509587658,
      -0.43620725469259286,
      0.7102704075951934
    ],
    [
      -0.5276867860954455,
      -0.46513840306190035,
      0.7107692465049994
    ],
    [
      -0.5385935991783091,
      -0.48440064708878033,
      0.6894004264751552
    ],
    [
      -0.5434489819381442,
      -0.4845016283736495,
      0.6855081152938137
    ],
    [
      -0.5641720877174884,
      -0.46586069665815955,
      0.6816770985955629
    ],
    [
      -0.5637193770319103,
      -0.45494191754804314,
      0.6893825611490795
    ],
    [
      -0.57521519232011,
      -0.4718156230254229,
      0.668219649810802
    ],
    [
      -0.5498194629324652,
      -0.5021078850638181,
      0.6675224565041952
    ],
    [
      -0.5539576949937466,
      -0.5023904704774481,
      0.663878518503697
    ],
    [
      -0.5759296628270829,
      -0.48355127456831903,
      0.6591533875656232
    ],
    [
      -0.5639319277222246,
      -0.5200156993495678,
      0.6415328934088069
    ],
    [
      -0.5866638784705159,
      -0.49958389220584043,
      0.6373707150053217
    ],
    [
      -0.5857182843623747,
      -0.4886778907173273,
      0.6466281856582347
    ],
    [
      -0.5595515930732925,
      -0.5195325436270941,
      0.6457460420331682
    ],
    [
      -0.5977878622728647,
      -0.5144189918688091,
      0.6148355654351142
    ],
    [
      -0.596633395894725,
      -0.5045380457600628,
      0.6240752769368012
    ],
    [
      -0.5685856981200395,
      -0.5357664743740456,
      0.6242311982191795
    ],
    [
      -0.5730385365633851,
      -0.5365197354685732,
      0.6194944786404688
    ],
    [
      -0.5770623476487893,
      -0.5514860529069242,
      0.6023804282803427
    ],
    [
      -0.5818793579764213,
      -0.5526025274585742,
      0.5966966225875119
    ],
    [
      -0.6077720495508149,
      -0.5281178083992996,
      0.5930469764161374
    ],
    [
      -0.6064841451392236,
      -0.518813413575594,
      0.602502799652238
    ],
    [
      -0.5853106770183539,
      -0.5662244089888042,
      0.5803458710403611
    ],
    [
      -0.5888978741700219,
      -0.5673873389285901,
      0.5755613793693617
    ],
    [
      -0.6174400180218479,
      -0.5425128954944534,
      0.5696030041769481
    ],
    [
      -0.6159500215648687,
      -0.5320468479529619,
      0.5809748036856295
    ],
    [
      -0.6261008461724308,
      -0.5559478324645425,
      0.546735528386571
    ],
    [
      -0.6244907547186218,
      -0.5458808910019545,
      0.5585922932782715
    ],
    [
      -0.5918993521184293,
      -0.5805141803488069,
      0.5591586924798153
    ],
    [
      -0.5954309272523203,
      -0.5817930842203333,
      0.5540566920675485
    ],
    [
      -0.5979945164473657,
      -0.5943450448352084,
      0.5377327644645761
    ],
    [
      -0.6014997336389699,
      -0.5956514139007096,
      0.532350883863579
    ],
    [
      -0.6316714203096948,
      -0.5706744843845332,
      0.5247112059374949
    ],
    [
      -0.6295959158318944,
      -0.5577101675272182,
      0.540895878894044
    ],
    [
      -0.6035637654232698,
      -0.6072326792675458,
      0.5167003525232414
    ],
    [
      -0.6069407178487041,
      -0.6084140439738287,
      0.5113270148473594
    ],
    [
      -0.6359635769534354,
      -0.5858430333820528,
      0.5023328269447526
    ],
    [
      -0.6336271048777461,
      -0.5715127669549586,
      0.5214305794367389
    ],
    [
      -0.608627392726873,
      -0.6200854417765713,
      0.4950421615572183
    ],
    [
      -0.6123803656539534,
      -0.6211475299465918,
      0.4890460446653036
    ],
    [
      -0.6392526658735617,
      -0.5998366084822103,
      0.48119857886126804
    ],
    [
      -0.6369881994944625,
      -0.5861878530051824,
      0.5006294385011507
    ],
    [
      -0.6136247996078419,
      -0.6331701067596495,
      0.4717628866413825
    ],
    [
      -0.6168389404457205,
      -0.6340485180878227,
      0.46636058823665283
    ],
    [
      -0.6436065322586104,
      -0.6116839556591914,
      0.4600145324043258
    ],
    [
      -0.6417588848700025,
      -0.6004517961384498,
      0.47707774440285955
    ],
    [
      -0.6176982538924833,
      -0.6452965612680941,
      0.44948995000305647
    ],
    [
      -0.6198599550690121,
      -0.6459698026393365,
      0.4455296288463194
    ],
    [
      -0.649187529190475,
      -0.6228435609551288,
      0.4366021650430754
    ],
    [
      -0.6474217825820476,
      -0.6125086844096849,
      0.4535175266304501
    ],
    [
      -0.6203980804719178,
      -0.6576202283511716,
      0.42736618608649024
    ],
    [
      -0.6216711960862614,
      -0.6580469563993102,
      0.4248518884626517
    ],
    [
      -0.6533828406301394,
      -0.6341269090268733,
      0.41348993557052055
    ],
    [
      -0.6515744329961297,
      -0.6234809517599463,
      0.4321137131106624
    ],
    [
      -0.6218430009289618,
      -0.6700597080138933,
      0.4053779346387756
    ],
    [
      -0.6232113688474886,
      -0.6705437341953342,
      0.40246576285519803
    ],
    [
      -0.6564073055534501,
      -0.6442157369828474,
      0.3925755130413845
    ],
    [
      -0.6549434069296164,
      -0.6346386217075167,
      0.4102230534192468
    ],
    [
      -0.6230344167975149,
      -0.6809478456556092,
      0.38488718734554567
    ],
    [
      -0.6583049929992507,
      -0.6574661322036508,
      0.36656898559129086
    ],
    [
      -0.6592728663228594,
      -0.6550860992990254,
      0.3690819559875942
    ],
    [
      -0.6579232002526464,
      -0.6447695550923558,
      0.3891134582552006
    ],
    [
      -0.6216043936176671,
      -0.692429816938986,
      0.36626346589450426
    ],
    [
      -0.6572633300228236,
      -0.6710187442306398,
      0.34313082038552617
    ],
    [
      -0.6590873951297747,
      -0.666649472206657,
      0.3481124628444575
    ],
    [
      -0.6220296263986478,
      -0.682628707747043,
      0.3835325165379866
    ],
    [
      -0.6574123830869129,
      -0.6778051815305985,
      0.32922499062838234
    ],
    [
      -0.6201056349072219,
      -0.6947309188225397,
      0.36444197341730666
    ],
    [
      -0.6195016506043748,
      -0.7066884933199308,
      0.34177343124892146
    ],
    [
      -0.6195547257765484,
      -0.7066995618768984,
      0.3416543150773098
    ],
    [
      -0.6578984257023499,
      -0.6882677518074206,
      0.3057076434771111
    ],
    [
      -0.6579597281972134,
      -0.6781899198847948,
      0.327333818352618
    ],
    [
      -0.61857030884111,
      -0.7169860513218197,
      0.32140593527525074
    ],
    [
      -0.6173487546501205,
      -0.7187411959725267,
      0.31983059319572166
    ],
    [
      -0.6160395180475982,
      -0.727422931708383,
      0.30224359485101465
    ],
    [
      -0.6650077442494191,
      -0.6933777470885485,
      0.2774743230115324
    ],
    [
      -0.6154185175077126,
      -0.7282890367965152,
      0.3014218425904356
    ],
    [
      -0.6135285713418319,
      -0.7383065714603764,
      0.2801537054648307
    ],
    [
      -0.6202879565461872,
      -0.740085701052356,
      0.259838422989361
    ],
    [
      -0.7482079521657615,
      -0.6629740668782264,
      0.025499940448212983
    ],
    [
      -0.17865862589183729,
      -0.5886963420163331,
      0.7883639465951173
    ],
    [
      -0.17130975964528064,
      -0.5943012618049817,
      0.7857855791927483
    ],
    [
      -0.21718045206758435,
      -0.6068883643721363,
      0.7645385303759601
    ],
    [
      -0.2438266670514195,
      -0.6259658854565189,
      0.7407531752744855
    ],
    [
      -0.246447626988291,
      -0.6458298132023204,
      0.7226115273996784
    ],
    [
      -0.2503797346917366,
      -0.6484531946203023,
      0.718900857450052
    ],
    [
      -0.2555592045181971,
      -0.669358771659041,
      0.6976018404427602
    ],
    [
      -0.25291322566340113,
      -0.6677739491057126,
      0.7000806047736894
    ],
    [
      -0.25875568858883463,
      -0.6887725807398799,
      0.6772280455236949
    ],
    [
      -0.24741724469741136,
      -0.7045546974594584,
      0.6651220830149548
    ],
    [
      -0.2546799698306822,
      -0.7098192677634139,
      0.6567303252316385
    ],
    [
      -0.25851227472003685,
      -0.7336592054312528,
      0.6284230852738104
    ],
    [
      -0.23811885298940405,
      -0.7463582527163544,
      0.6214891555395002
    ],
    [
      -0.23779002591393508,
      -0.7567312108687982,
      0.6089448070826227
    ],
    [
      -0.2268693394301098,
      -0.7710544177738472,
      0.5949835188120585
    ],
    [
      -0.21107375468036585,
      -0.7799948129895127,
      0.589114557445823
    ],
    [
      -0.1906299498751773,
      -0.7853946273244581,
      0.5889104359581879
    ],
    [
      -0.1790968551674654,
      -0.7862069705500874,
      0.5914413884127302
    ],
    [
      -0.17499467372427985,
      -0.7858076858694448,
      0.5931973912591328
    ],
    [
      -0.15386099688846905,
      -0.7990065641601981,
      0.5813048288681264
    ],
    [
      -0.11689795263127215,
      -0.7964689227269218,
      0.5932723858404616
    ],
    [
      -0.10676997473217588,
      -0.7913164285381079,
      0.6020120284690198
    ],
    [
      -0.1000583869744399,
      -0.7906695910499054,
      0.6040115205731167
    ],
    [
      -0.08401213078252523,
      -0.7819175892586572,
      0.6176947834402601
    ],
    [
      -0.07722536606931694,
      -0.7683700298584124,
      0.6353296310190817
    ],
    [
      -0.07936933263543729,
      -0.7495855220248062,
      0.6571316871128678
    ],
    [
      -0.012138939637890745,
      -0.24729733088550776,
      0.9688636004522883
    ],
    [
      -0.009816837701185443,
      -0.2479505002519436,
      0.9687229630407032
    ],
    [
      0.004770777258457211,
      -0.2860298141980361,
      0.9582088420976855
    ],
    [
      0.017084757643966126,
      -0.29063397326945084,
      0.9566817676938654
    ],
    [
      0.020880839288532925,
      -0.32105605801898845,
      0.9468299732052816
    ],
    [
      0.014845490707913012,
      -0.33018003090850484,
      0.9438012283287727
    ],
    [
      0.04119818519573787,
      -0.35986719680348134,
      0.9320935093655476
    ],
    [
      0.03033073133005092,
      -0.37623273023875187,
      0.9260286061640206
    ],
    [
      0.05282163813780143,
      -0.40579538768946094,
      0.9124362870219483
    ],
    [
      0.04579967382345013,
      -0.4186158937019997,
      0.9070077857536515
    ],
    [
      0.06481799638700532,
      -0.44704554160083615,
      0.8921596892256393
    ],
    [
      0.05949108675243779,
      -0.45769067585868606,
      0.8871189637410718
    ],
    [
      0.07606139103188642,
      -0.48506524657413425,
      0.87116380282945
    ],
    [
      0.07298388455888709,
      -0.4920673607606198,
      0.8674924005827216
    ],
    [
      -0.025337249530182546,
      -0.1917033624786853,
      0.9811258046757363
    ],
    [
      -0.17998382639838756,
      -0.21876967583347479,
      0.9590337070044574
    ],
    [
      -0.09773064242552197,
      -0.1646276511996744,
      0.981502143651033
    ],
    [
      -0.06237507544878986,
      -0.12190945707217443,
      0.990579342727843
    ],
    [
      -0.04488801595997822,
      -0.12341552460176865,
      0.9913393335838374
    ],
    [
      -0.011283708599005054,
      -0.15947065234750168,
      0.9871381812897904
    ],
    [
      -0.014625268700040092,
      -0.17478271916997212,
      0.9844984015197802
    ],
    [
      0.329916180835237,
      -0.9439833854291103,
      -0.007119105062233335
    ],
    [
      0.325491255889971,
      -0.9453583121094613,
      -0.018791063427061765
    ],
    [
      0.31182533131796836,
      -0.9498049402060654,
      0.025209885136424054
    ],
    [
      0.32468808884274664,
      -0.9453797098814704,
      0.028893755520380603
    ],
    [
      0.32914215225690885,
      -0.9436029912547321,
      -0.035760851539244104
    ],
    [
      0.3267149972559248,
      -0.9442171059336303,
      -0.041368676923254695
    ],
    [
      0.3314493971800463,
      -0.941404283758715,
      -0.06244414808230465
    ],
    [
      0.3403997192486774,
      -0.9376247837665013,
      -0.07062433010120008
    ],
    [
      0.3410657959794918,
      -0.936641293855062,
      -0.07985743207986938
    ],
    [
      0.34756262743160166,
      -0.9332679917776722,
      -0.09061498516312062
    ],
    [
      0.3480882230360205,
      -0.9323096451805835,
      -0.09814944975332317
    ],
    [
      0.3561264792918715,
      -0.9271386142236924,
      -0.11656723708893246
    ],
    [
      0.35584285497537604,
      -0.927933460007178,
      -0.1109745752957878
    ],
    [
      0.3668653102221379,
      -0.9205576099607017,
      -0.13410268788900184
    ],
    [
      0.3692964491259329,
      -0.9193961598017709,
      -0.13539141038017788
    ],
    [
      0.37896150772519593,
      -0.9129769139949931,
      -0.1511996368210754
    ],
    [
      0.385912459264617,
      -0.9094134936953595,
      -0.15504409459613652
    ],
    [
      0.3929391159567049,
      -0.9044657489585874,
      -0.1659534877968662
    ],
    [
      0.39982214833261476,
      -0.9006775487107176,
      -0.170065290259787
    ],
    [
      0.4056144206180935,
      -0.8963914144696967,
      -0.17877184859945003
    ],
    [
      0.42165616103620573,
      -0.8869240830043863,
      -0.18860475298103602
    ],
    [
      0.4463988483633188,
      -0.8738654605811997,
      -0.19258043769581196
    ],
    [
      0.47618083502824293,
      -0.860571229778217,
      -0.18074559698596396
    ],
    [
      0.48161999755040374,
      -0.8585262811580298,
      -0.17599659803675996
    ],
    [
      0.494518591053096,
      -0.8268877198671626,
      -0.26778361009543816
    ],
    [
      0.48859674044200646,
      -0.8556637148221605,
      -0.17062482927811848
    ],
    [
      0.5157791899076587,
      -0.8192052223625171,
      -0.2507481423902839
    ],
    [
      0.48538657026134147,
      -0.8573026199223774,
      -0.17155784821499626
    ],
    [
      0.4886035504405745,
      -0.8556604742689816,
      -0.17062157914708895
    ],
    [
      0.5020142016660534,
      -0.8476848094860894,
      -0.1714998690732077
    ],
    [
      0.5354369876097302,
      -0.8106432666954713,
      -0.2369909839228334
    ],
    [
      0.5201968519610614,
      -0.8166451298461287,
      -0.24997193264124898
    ],
    [
      0.5137139325576865,
      -0.8409797079826921,
      -0.1698561928734505
    ],
    [
      0.5525052014899794,
      -0.8044697159841344,
      -0.21809740574092876
    ],
    [
      0.5504671635113279,
      -0.8042371599280019,
      -0.22402788327959228
    ],
    [
      0.5358077940956391,
      -0.8104173432876344,
      -0.2369255948287941
    ],
    [
      0.5302070462164291,
      -0.831942536204076,
      -0.1635607061515057
    ],
    [
      0.5668485150783451,
      -0.7994968032355831,
      -0.19871492789812867
    ],
    [
      0.564240255534896,
      -0.7990900141083703,
      -0.20757669278172783
    ],
    [
      0.5401589453860814,
      -0.8268940406061782,
      -0.15644347007588486
    ],
    [
      0.5873835113143183,
      -0.7891031701838302,
      -0.17971309758025716
    ],
    [
      0.5511899301095284,
      -0.8220704699910952,
      -0.14279286857008305
    ],
    [
      0.5971184137052229,
      -0.787181141915965,
      -0.15425773830195924
    ],
    [
      0.5904296945724755,
      -0.7978615924705331,
      -0.12169492605461472
    ],
    [
      0.5645903453083436,
      -0.8182303431494898,
      -0.10833673215522775
    ],
    [
      0.5704666444344265,
      -0.8144819298345862,
      -0.10576858494209757
    ],
    [
      0.5764886301151428,
      -0.8099525264829864,
      -0.10787846954695382
    ],
    [
      -0.5627524260517422,
      0.731742605138192,
      -0.38452888941983315
    ],
    [
      -0.5628588333356691,
      0.7293545679054146,
      -0.38888539187209825
    ],
    [
      -0.5740028409632689,
      0.7134226737155337,
      -0.401931371249714
    ],
    [
      -0.6141057316564587,
      0.6787454317320395,
      -0.4027142774344771
    ],
    [
      -0.613684129474805,
      0.673536111558732,
      -0.4119962325763357
    ],
    [
      -0.6564903455761633,
      0.6354270010727652,
      -0.40651316396023623
    ],
    [
      -0.6697699654800204,
      0.6289527811905116,
      -0.3947487712122897
    ],
    [
      -0.6711749494946991,
      0.6276437145527665,
      -0.39444588317435064
    ],
    [
      -0.6889396672688145,
      0.6183993707969475,
      -0.37807982366356796
    ],
    [
      0.01472817198740681,
      0.19420734737763287,
      0.9808499310161839
    ],
    [
      -0.012404210543497196,
      0.1928928029387209,
      0.9811414282024974
    ],
    [
      -0.0010948726891653242,
      0.19671952961866013,
      0.9804591923789626
    ],
    [
      0.0021287826678561585,
      0.19714834405964066,
      0.9803713575573771
    ],
    [
      0.014294012309466005,
      0.1949771218063377,
      0.9807036265784956
    ],
    [
      -0.039891388602912574,
      0.19270141964863297,
      0.9804462453295095
    ],
    [
      -0.056207217247434244,
      0.19745317914727506,
      0.9786996427780761
    ],
    [
      -0.08073886063409146,
      0.13584450725572222,
      0.987434811130314
    ],
    [
      -0.08513961707908325,
      0.148851999801801,
      0.9851874581817572
    ],
    [
      -0.07706423516380151,
      0.18480024992886251,
      0.9797499534497811
    ],
    [
      -0.07113168454404303,
      0.19152311994342622,
      0.9789071345030961
    ],
    [
      -0.06948144846785673,
      0.19263151293887182,
      0.9788081673860767
    ],
    [
      -0.15898376461685695,
      0.22966382211915273,
      0.9601972148459264
    ],
    [
      -0.1362282920277514,
      0.226525432716773,
      0.9644314806058958
    ],
    [
      -0.13275238419817195,
      0.19506959606478572,
      0.9717636838145488
    ],
    [
      -0.1483840947320251,
      0.17901329404659017,
      0.9725926182041207
    ],
    [
      -0.16821353651405552,
      0.17885553201017662,
      0.9693889337117436
    ],
    [
      -0.1828259480210883,
      0.19603787748679388,
      0.963402212640527
    ],
    [
      -0.24275594190944538,
      0.21921691815995417,
      0.9449939129222525
    ],
    [
      -0.2176273605722942,
      0.26327468583800456,
      0.9398535905805949
    ],
    [
      -0.18095619452970804,
      0.25593010486894335,
      0.9496076226963946
    ],
    [
      -0.18034158995621083,
      0.2537034107521209,
      0.9503217825056977
    ],
    [
      -0.20188211484000712,
      0.211439944982203,
      0.9563141541217767
    ],
    [
      -0.25788570848496684,
      0.29275110701054435,
      0.9207560755723024
    ],
    [
      -0.2272550891626978,
      0.286109479652929,
      0.9308579322874058
    ],
    [
      -0.26732170988158027,
      0.31675121023621833,
      0.9100592146887362
    ],
    [
      0.15738800942645895,
      0.3374894440131755,
      0.9280786010184991
    ],
    [
      0.16870080565245954,
      0.34923409442634434,
      0.9217242458905062
    ],
    [
      0.12426363733472237,
      0.3005457226331314,
      0.9456377832147325
    ],
    [
      0.12941053452294676,
      0.32896044817196607,
      0.9354346247028621
    ],
    [
      0.09778284492854211,
      0.29728254846951113,
      0.949769235979537
    ],
    [
      0.09344540312148378,
      0.2603177219550041,
      0.9609904475444179
    ],
    [
      0.0361131953095382,
      0.21281566350301193,
      0.97642476949958
    ],
    [
      0.038145006872767034,
      0.29686746744420967,
      0.9541565202962969
    ],
    [
      0.03750304097911514,
      0.30871051153893253,
      0.9504164045210338
    ],
    [
      0.06319319095463942,
      0.3338881955888844,
      0.9404920485912517
    ],
    [
      0.0785640430876837,
      0.3310119382398584,
      0.9403503537918241
    ],
    [
      0.08399468208514314,
      0.3062421937878271,
      0.9482407985978217
    ],
    [
      0.017838106796765382,
      0.28812379198809285,
      0.9574270115451671
    ],
    [
      0.005604265302802376,
      0.26091925723251463,
      0.965344360016491
    ],
    [
      0.0028079174948180104,
      0.26004358862937604,
      0.965592795961164
    ],
    [
      -0.023741447163723346,
      0.24747733673854977,
      0.968602762481796
    ],
    [
      -0.015281668618954228,
      0.26082995330650144,
      0.9652638012804317
    ],
    [
      0.30230466857925087,
      0.4886721384764217,
      0.8184200806627794
    ],
    [
      0.28170548003499646,
      0.4547256761242626,
      0.8449062563335559
    ],
    [
      0.25710244692914036,
      0.4296615600344251,
      0.8656149696093712
    ],
    [
      0.27053174844446093,
      0.4547657533906208,
      0.8485285396653691
    ],
    [
      0.22542409230282393,
      0.40803436791356074,
      0.8846987810610054
    ],
    [
      0.2423837014521166,
      0.4307147877640731,
      0.8693301518247947
    ],
    [
      0.19110932525034488,
      0.3858680256730821,
      0.9025425710544159
    ],
    [
      0.2165830632191034,
      0.4089655447779302,
      0.8864755833699655
    ],
    [
      -0.153251101866118,
      0.031212637883608212,
      0.9876942193883528
    ],
    [
      -0.14229739147886017,
      0.044601320931939505,
      0.9888185751438118
    ],
    [
      -0.14439945709618893,
      0.005205229773743751,
      0.9895057869327134
    ],
    [
      -0.1537432222793453,
      -0.01741658422169165,
      0.9879573291378594
    ],
    [
      -0.1521509335416453,
      -0.00754184245618112,
      0.9883284950029377
    ],
    [
      -0.19068954029145901,
      0.005785761094068119,
      0.9816333450897001
    ],
    [
      -0.1817836023477413,
      0.03719129957004032,
      0.9826349928400524
    ],
    [
      -0.3357940825518511,
      -0.03931250373659408,
      0.9411146907646915
    ],
    [
      -0.34984571390325014,
      -0.07618081011320374,
      0.9337046966969917
    ],
    [
      -0.3531886828561608,
      -0.07504458008035202,
      0.9325374337274048
    ],
    [
      -0.37477361824129823,
      -0.055309834499917485,
      0.9254650491930624
    ],
    [
      -0.3751314702221285,
      -0.05440659287352252,
      0.9253736016879232
    ],
    [
      -0.3710266006103028,
      -0.0200686405781608,
      0.928405359368906
    ],
    [
      -0.415127278499807,
      -0.059313300233720674,
      0.9078277783041937
    ],
    [
      -0.39233080447785346,
      -0.09210065070089739,
      0.9152016225937494
    ],
    [
      -0.4180203973716247,
      -0.08735202487324593,
      0.9042281632042948
    ],
    [
      -0.31910307567749385,
      -0.03767040859937213,
      0.9469710488758989
    ],
    [
      -0.31313983673730894,
      -0.05549982039402351,
      0.9480839691632607
    ],
    [
      -0.33638599125475444,
      -0.08483699630103121,
      0.9378950628648043
    ],
    [
      -0.34028683907642754,
      -0.08584876427817337,
      0.9363946052937747
    ],
    [
      -0.38379716150994286,
      -0.09936367824674928,
      0.9180558797056895
    ],
    [
      -0.3839361438521367,
      -0.09933583256361599,
      0.9180007787648357
    ],
    [
      -0.30635276644487625,
      -0.09354639084592535,
      0.9473104323564016
    ],
    [
      -0.2926756353865222,
      -0.0700266571148071,
      0.9536441892783811
    ],
    [
      -0.3005023010392949,
      -0.09153482103202898,
      0.9493786092011571
    ],
    [
      -0.3444170125563153,
      -0.11312774100971855,
      0.9319758771963044
    ],
    [
      -0.3669045998385766,
      -0.11227860345615537,
      0.923457919898481
    ],
    [
      -0.39790631036352464,
      -0.1441697206796757,
      0.9060274056627816
    ],
    [
      -0.25156003933348275,
      -0.07787936055646358,
      0.9647032454645589
    ],
    [
      -0.010001311624655352,
      -0.07827372344306185,
      0.9968817372106611
    ],
    [
      -0.16249552715190993,
      -0.7465941513639363,
      0.6451297364133719
    ],
    [
      -0.196871003877596,
      -0.7395063880300473,
      0.6437174146277082
    ],
    [
      -0.2330907597225837,
      -0.7066017289297548,
      0.6681187726785037
    ],
    [
      -0.21781612499702926,
      -0.6969896924605933,
      0.6831994615739727
    ],
    [
      -0.1923785986127461,
      -0.6642707711693239,
      0.7223121329217084
    ],
    [
      -0.2175923200013106,
      -0.6800620022783981,
      0.7001208862286165
    ],
    [
      0.1861244926850973,
      0.5272228043847779,
      0.8290921467239727
    ],
    [
      0.2176749901984806,
      0.5179788311112428,
      0.8272336605595314
    ],
    [
      0.21902498986617097,
      0.5041907800473543,
      0.8353560385424673
    ],
    [
      0.19484136252335899,
      0.48395127639555785,
      0.8531283640374122
    ],
    [
      0.1726704333551688,
      0.5082965150542355,
      0.8436940050922832
    ],
    [
      0.18044158525314058,
      0.5357806869255295,
      0.8248514350044748
    ],
    [
      0.1998503752772359,
      0.5563214115556684,
      0.8065769117364174
    ],
    [
      0.2421730715456305,
      0.5439773771035246,
      0.8033933137745949
    ],
    [
      0.25319577696785883,
      0.5474868180470587,
      0.7975901720748251
    ],
    [
      -0.6211185828736348,
      0.7119340953181026,
      -0.3276607238175529
    ],
    [
      -0.620354298236003,
      0.7037538808604578,
      -0.3462528264634977
    ],
    [
      -0.6088354633333437,
      0.7113064511354277,
      -0.3512299975241239
    ],
    [
      -0.6245489260816778,
      0.6872163937731156,
      -0.37104213650163403
    ],
    [
      -0.6220716340956758,
      0.699897054057626,
      -0.3509572563361414
    ],
    [
      -0.6590354985061702,
      0.6576410944025098,
      -0.364938902642337
    ],
    [
      -0.6729670627070624,
      0.6489754650239821,
      -0.3548889661687651
    ],
    [
      -0.4312758321430023,
      -0.016158512800303303,
      0.9020754176195266
    ],
    [
      -0.3044713856808446,
      -0.01411840308858136,
      0.9524168446619445
    ],
    [
      -0.42638966339875234,
      -0.0950127459187073,
      0.8995356763684728
    ],
    [
      -0.4488960259617845,
      -0.1166978329699883,
      0.8859311336982268
    ],
    [
      -0.42916516825146594,
      -0.10285061732947724,
      0.8973511067996943
    ],
    [
      -0.4537226735364482,
      -0.12884593648488615,
      0.8817791447807497
    ],
    [
      -0.4718986287585536,
      -0.13814394165076344,
      0.8707628469112513
    ],
    [
      -0.478834343909092,
      -0.15385934387506733,
      0.8643176345507959
    ],
    [
      -0.49466590656878084,
      -0.159608365756935,
      0.8543013581043206
    ],
    [
      -0.5038407062527849,
      -0.17894170967449521,
      0.8450588188176392
    ],
    [
      -0.5044298357029128,
      -0.17918782258597896,
      0.8446551160619511
    ],
    [
      -0.5170442548030681,
      -0.19953222699300288,
      0.8323773957564878
    ],
    [
      -0.5163799142077334,
      -0.20768662343096306,
      0.8307936269920823
    ],
    [
      -0.5322580161104162,
      -0.22357886948607936,
      0.816525500768672
    ],
    [
      -0.5311671468973913,
      -0.2331770133806253,
      0.8145489196406664
    ],
    [
      -0.550933571386803,
      -0.25118958358702775,
      0.7958492275653462
    ],
    [
      0.3559803044692643,
      -0.7524197617690519,
      0.5542044071724557
    ],
    [
      0.3612402500935238,
      -0.7378485912007721,
      0.5701622033907583
    ],
    [
      0.3596611810480084,
      -0.7352894334292895,
      0.574450419039264
    ],
    [
      0.3645813422499385,
      -0.7206568446061842,
      0.5896898822308989
    ],
    [
      0.36769772816200713,
      -0.702747776111652,
      0.6090516758655427
    ],
    [
      0.3629363670098779,
      -0.7180784541570511,
      0.5938354377915578
    ],
    [
      0.3657662256368312,
      -0.6998637387920232,
      0.6135192053289263
    ],
    [
      0.37041714501781986,
      -0.6843451074833404,
      0.6280628253132505
    ],
    [
      0.36798127024228683,
      -0.6809697380963524,
      0.633142954274829
    ],
    [
      0.37254677846797307,
      -0.6652151857095205,
      0.6470685083934954
    ],
    [
      0.3694540022490462,
      -0.6613786341263994,
      0.6527496017181933
    ],
    [
      0.374129004943662,
      -0.6447359958618955,
      0.6665905664647792
    ],
    [
      0.3705480651087799,
      -0.640624709683077,
      0.6725281501822898
    ],
    [
      0.37517330656562903,
      -0.6239039232350849,
      0.6855573532626441
    ],
    [
      0.3702671058993207,
      -0.6184926519823634,
      0.6930866538411805
    ],
    [
      0.3745470497930681,
      -0.6030295905647772,
      0.7043222418712802
    ],
    [
      0.36796721347851624,
      -0.5958445043881649,
      0.7138413383905966
    ],
    [
      0.37204482831920666,
      -0.5811531704396304,
      0.7237704319802639
    ],
    [
      0.3641577355102181,
      -0.5724216127300527,
      0.7346581796642542
    ],
    [
      0.3680756195223978,
      -0.5584355464703431,
      0.7434178359116577
    ],
    [
      0.35897312182308533,
      -0.548230601509684,
      0.7553684566997212
    ],
    [
      0.36283234645602613,
      -0.5348216184562468,
      0.7630979785041074
    ],
    [
      0.35171859823884005,
      -0.5229261902297871,
      0.7764291514521244
    ],
    [
      0.3557092548306675,
      -0.5097227118903184,
      0.7833605064151439
    ],
    [
      0.342936497141822,
      -0.4963214250993762,
      0.7975334487752983
    ],
    [
      0.3469953356159037,
      -0.4835329511909383,
      0.8036106782350444
    ],
    [
      0.3325594562555871,
      -0.4683525918316638,
      0.8185658542716958
    ],
    [
      0.3367172316446983,
      -0.4559991750288204,
      0.823824167093055
    ],
    [
      0.3202229044384643,
      -0.4385441116041046,
      0.8397239746787993
    ],
    [
      0.3242366056933857,
      -0.4272839905204846,
      0.8439780891547614
    ],
    [
      0.3044626607163663,
      -0.4068859070071398,
      0.8612469720750767
    ],
    [
      0.3082564300983907,
      -0.39687970800234335,
      0.8645602759084936
    ],
    [
      0.2891790873420665,
      -0.3642271797853709,
      0.8852762376510535
    ],
    [
      0.2855061911457058,
      -0.3731795668824309,
      0.8827362152301859
    ],
    [
      0.2642300360412253,
      -0.33623102265463733,
      0.9039530891911757
    ],
    [
      0.2674191460583009,
      -0.3291319472754769,
      0.9056263918438452
    ],
    [
      0.23963354203320447,
      -0.2956383227613815,
      0.9247560476403804
    ],
    [
      0.24200677129122394,
      -0.29106939575971175,
      0.9255870188703348
    ],
    [
      0.21557875984794286,
      -0.24897207499198312,
      0.9442132726119715
    ],
    [
      0.2064186181563605,
      -0.2500737718622245,
      0.9459674744435026
    ],
    [
      0.25830231043177065,
      -0.9653109833537208,
      0.03813950500834761
    ],
    [
      0.2675216066924709,
      -0.9613961220174049,
      0.06441806053098813
    ],
    [
      0.2676145449266973,
      -0.9617710823988095,
      0.058127793740164094
    ],
    [
      0.2876900685409432,
      -0.9544657929423453,
      0.07892702050532065
    ],
    [
      0.304217008918041,
      -0.9491288763032381,
      0.08127968782120885
    ],
    [
      0.3730631263732591,
      -0.9248495079163962,
      0.074008725481591
    ],
    [
      0.35759587000492327,
      -0.9314559872615276,
      0.06719328500732213
    ],
    [
      0.4259889661135593,
      -0.9037192623932885,
      0.04271879596654477
    ],
    [
      0.40868705962337276,
      -0.9117311457687888,
      0.041487409313350085
    ],
    [
      0.3957561318012322,
      -0.9172066262819749,
      0.04592481732313437
    ],
    [
      0.4896303109209993,
      -0.871609743737861,
      0.02363500049980371
    ],
    [
      0.4886592236626263,
      -0.8723924193204878,
      0.011984566808415567
    ],
    [
      0.488443156423327,
      -0.8725096319522996,
      0.012256634680047233
    ],
    [
      0.5085640326478486,
      -0.86091577386023,
      0.013662174629222748
    ],
    [
      0.5257851897506389,
      -0.8506143726491054,
      0.002263466733470423
    ],
    [
      0.5395673746894072,
      -0.8418328491952154,
      -0.013583158198538857
    ],
    [
      0.5274983880367036,
      -0.8495379656979845,
      -0.005540348040460575
    ],
    [
      0.5530143222291853,
      -0.8326603896770065,
      -0.02918621031121575
    ],
    [
      0.5411421624894176,
      -0.8406648496048587,
      -0.021160591086192903
    ],
    [
      0.5547213532862353,
      -0.8311721012379438,
      -0.03790987116819521
    ],
    [
      0.5646445915800693,
      -0.8241030675383472,
      -0.04506239311513976
    ],
    [
      0.5739836935067224,
      -0.8164940460966585,
      -0.062291189401781764
    ],
    [
      0.566735474905254,
      -0.8219557525215287,
      -0.05656538146855917
    ],
    [
      0.5775128375747598,
      -0.8120893200000058,
      -0.08360537529535632
    ],
    [
      0.18191154880903326,
      -0.3013748697141889,
      0.935992188169674
    ],
    [
      0.018047848580012935,
      -0.21604635727093507,
      0.9762162909271656
    ],
    [
      0.005309573222413807,
      -0.24267566309625885,
      0.9700929496563651
    ],
    [
      0.02796482848062822,
      -0.2495734893168692,
      0.967951983209008
    ],
    [
      0.040255616738110574,
      -0.27896956063166956,
      0.9594558194945756
    ],
    [
      0.05233417377923392,
      -0.31781209291901513,
      0.9467083013522594
    ],
    [
      0.05377555882767543,
      -0.2808869408083903,
      0.9582331218216552
    ],
    [
      0.057034356523323074,
      -0.2846309294271866,
      0.9569390347296877
    ],
    [
      0.05315547072424067,
      -0.13538981865113686,
      0.9893655001755907
    ],
    [
      -0.005957385953562082,
      -0.1589026449806306,
      0.9872762829982091
    ],
    [
      0.05650253644119753,
      -0.10851308418768689,
      0.9924879716831772
    ],
    [
      0.1364234548944463,
      -0.338469467999652,
      0.9310354774049674
    ],
    [
      0.11059797269384714,
      -0.28961475089772837,
      0.9507320255984111
    ],
    [
      0.12808435491825385,
      -0.2614398584112347,
      0.9566836459661513
    ],
    [
      0.1579809516848349,
      -0.38488051206342294,
      0.9093453746176703
    ],
    [
      0.13611516317886457,
      -0.3390379561984283,
      0.9308737436460348
    ],
    [
      -0.6942209943221948,
      -0.5817270328291005,
      0.4238524157276371
    ],
    [
      -0.6943105308256077,
      -0.5815433719277674,
      0.42395777307598137
    ],
    [
      -0.688292535988709,
      -0.6026154316154826,
      0.4038663472995954
    ],
    [
      -0.6915444998963105,
      -0.6137179556726261,
      0.380941564479612
    ],
    [
      -0.6970382007323142,
      -0.6220429740200822,
      0.3566514898218001
    ],
    [
      -0.6947062904680763,
      -0.6140380987307186,
      0.3746203188446259
    ],
    [
      -0.7079000193240833,
      -0.6237925172312345,
      0.33130115920002823
    ],
    [
      -0.7263650135911045,
      -0.6171764323878158,
      0.30246837576157015
    ],
    [
      0.07089126868659479,
      -0.3359184718688607,
      0.9392194675800191
    ],
    [
      0.06156793978398578,
      -0.3533307668547345,
      0.9334702769690103
    ],
    [
      0.08690406967753447,
      -0.3833801368619328,
      0.9194929871038756
    ],
    [
      0.08035789517529876,
      -0.39667542463123984,
      0.9144349163153281
    ],
    [
      0.10172462435022979,
      -0.42661470347135405,
      0.8986946064057875
    ],
    [
      0.09715114307902746,
      -0.43663646301531106,
      0.8943770203688807
    ],
    [
      0.11664766870118551,
      -0.4670016269623562,
      0.8765288368337295
    ],
    [
      0.11429418473265021,
      -0.47220919812778706,
      0.8740453721288222
    ],
    [
      0.37026283620594885,
      -0.9279075546535541,
      -0.04350864444668688
    ],
    [
      0.37053094530409164,
      -0.9281318890874803,
      -0.035749336091194316
    ],
    [
      0.3746938547565288,
      -0.9268089542569701,
      -0.025093375954522944
    ],
    [
      0.3836614973153644,
      -0.9233626304309972,
      -0.01432857987667332
    ],
    [
      0.4504899711601163,
      -0.8926251857958295,
      -0.01670519581203738
    ],
    [
      0.43343564304660426,
      -0.9011676348316066,
      -0.005516998167921781
    ],
    [
      0.4740411621755972,
      -0.8804012260343045,
      0.013366291950374247
    ],
    [
      0.4898764420520019,
      -0.87179120265706,
      0.0010818928914123902
    ],
    [
      0.45959814255454484,
      -0.887219098003491,
      -0.040147471879112905
    ],
    [
      0.4754972249635193,
      -0.8781751682243547,
      -0.05206498791048203
    ],
    [
      0.45962403166666455,
      -0.8867438681198103,
      -0.04930579952092214
    ],
    [
      0.5005515044125742,
      -0.8654682342298623,
      -0.020320604551856296
    ],
    [
      0.5102534365019106,
      -0.8596183914165575,
      -0.026413096683287653
    ],
    [
      0.5156270214780259,
      -0.855981384759909,
      -0.037744452124890034
    ],
    [
      0.48975962991721744,
      -0.8695657006787009,
      -0.06317433898752103
    ],
    [
      0.5232501759171249,
      -0.851105097681636,
      -0.042771089570299306
    ],
    [
      0.5295604324534281,
      -0.8464156944978375,
      -0.05609118012202661
    ],
    [
      0.4973791963435143,
      -0.863744969296251,
      -0.08098495576400748
    ],
    [
      0.49680850356628126,
      -0.86412157728785,
      -0.08046869235790112
    ],
    [
      0.5051408792537144,
      -0.8571730113297611,
      -0.10043465913046881
    ],
    [
      0.533674729653891,
      -0.8436241838177384,
      -0.059072154241243395
    ],
    [
      0.5409174058521387,
      -0.8377694286418657,
      -0.07450331857893629
    ],
    [
      0.5051113200115701,
      -0.8549218519536574,
      -0.118199752319106
    ],
    [
      0.5422239785195666,
      -0.8368336426340833,
      -0.07551563860674003
    ],
    [
      0.5522749279318239,
      -0.8279354664407387,
      -0.09754623205155188
    ],
    [
      0.384125490908964,
      -0.9208067207492763,
      -0.06754694853886271
    ],
    [
      0.38438842207974666,
      -0.9201899502624179,
      -0.07413498773920056
    ],
    [
      0.3921669502378417,
      -0.915674680899741,
      -0.08800546517295191
    ],
    [
      0.39244053606506907,
      -0.9148938123691283,
      -0.09465589121467095
    ],
    [
      0.39940462206973865,
      -0.910466187441464,
      -0.10736512187453703
    ],
    [
      0.4128077463567122,
      -0.9034123978874209,
      -0.11591291511817253
    ],
    [
      0.43685250585716656,
      -0.8917196874605465,
      -0.1183042143018557
    ],
    [
      0.44372461999245516,
      -0.8885215402735527,
      -0.11678156567911131
    ],
    [
      0.25856364742907667,
      0.4910181531002964,
      0.831893030115138
    ],
    [
      0.2578421798254597,
      0.4915295909779759,
      0.8318149262281118
    ],
    [
      0.23524378536326654,
      0.465245570514863,
      0.8533504090139414
    ],
    [
      0.2347966185818926,
      0.4927495207096382,
      0.8378952546368377
    ],
    [
      0.2610456586290789,
      0.4624375717734838,
      0.8473527342985059
    ],
    [
      0.22296206295696241,
      0.4574322271783824,
      0.8608389373283485
    ],
    [
      0.19440146356017965,
      0.48080238596850644,
      0.8550070974048412
    ],
    [
      0.22296370520521902,
      0.4538385122843421,
      0.8627385414647333
    ],
    [
      0.1962835480903679,
      0.43367430976970184,
      0.8794312717858224
    ],
    [
      0.19479835864074638,
      0.43397957745522064,
      0.8796108945565985
    ],
    [
      0.17079611072382245,
      0.4644298596079878,
      0.8689842311953195
    ],
    [
      0.17141037669977718,
      0.466608505353469,
      0.8676952146297928
    ],
    [
      0.16816563858190428,
      0.41758036165635515,
      0.8929428646667646
    ],
    [
      0.14487803514994865,
      0.4467294776011485,
      0.8828607640921049
    ],
    [
      0.1450607811667107,
      0.4474229409810831,
      0.8824795077797228
    ],
    [
      0.11965912028218026,
      0.43023523715495054,
      0.8947509908591988
    ],
    [
      0.16647764287678835,
      0.40703194033676326,
      0.898114799993786
    ],
    [
      0.14304677986909828,
      0.3988569804207591,
      0.9057873524943456
    ],
    [
      0.11924984790055974,
      0.4282595433216808,
      0.89575288854103
    ],
    [
      0.133616898723897,
      0.3806844874069451,
      0.91500046197973
    ],
    [
      0.12061583413785389,
      0.37803418619654017,
      0.9179008522830499
    ],
    [
      0.0927412528065193,
      0.4014333599139385,
      0.9111807271755058
    ],
    [
      0.09412457681582868,
      0.41101669034164273,
      0.9067556695713809
    ],
    [
      0.10223857395508738,
      0.34998622178867345,
      0.931158911547175
    ],
    [
      0.09618536419360832,
      0.34888872221304273,
      0.9322151228270722
    ],
    [
      0.06750504982595727,
      0.3781549225652725,
      0.9232778145215274
    ],
    [
      0.07047286512207045,
      0.3898886317967918,
      0.9181614400948845
    ],
    [
      0.04575947034422711,
      0.36714430867863135,
      0.9290377427632882
    ],
    [
      0.042949309775717086,
      0.35037747768751637,
      0.9356233109104986
    ],
    [
      0.01792305184960115,
      0.3328474246788067,
      0.9428103500158888
    ],
    [
      0.022280921403220074,
      0.34118643060199727,
      0.9397315468337178
    ],
    [
      -0.01207755333962839,
      0.31708231602998477,
      0.9483211152169867
    ],
    [
      -0.012055451690249725,
      0.32068293159214356,
      0.9471098793012417
    ],
    [
      -0.036058536133090194,
      0.28160867803828343,
      0.9588515705913345
    ],
    [
      -0.04900656921901748,
      0.22650880466607812,
      0.972775471309863
    ],
    [
      -0.06887030093857395,
      0.2615995862451332,
      0.9627162292830662
    ],
    [
      -0.04615865374676889,
      0.2822098941165529,
      0.9582415949785367
    ],
    [
      -0.12270105283868465,
      0.23955167190471258,
      0.9630988776444168
    ],
    [
      -0.1641728185890145,
      0.2756382882001831,
      0.9471382262978363
    ],
    [
      -0.11997808733991856,
      0.24584909954413856,
      0.9618541879160225
    ],
    [
      -0.20925820289286975,
      0.305414750119982,
      0.9289417823153373
    ],
    [
      -0.19968668495067415,
      0.30933939583275316,
      0.929749625457971
    ],
    [
      -0.16328609750990747,
      0.27853507813514217,
      0.9464437968565461
    ],
    [
      -0.24424252838269256,
      0.34203658259304504,
      0.9073899732184066
    ],
    [
      -0.2314032350018261,
      0.34604265612440227,
      0.9092343058711865
    ],
    [
      -0.2719451064205685,
      0.3833258166844127,
      0.8826704806195422
    ],
    [
      -0.12389537539130385,
      0.0946402111452609,
      0.9877718189901088
    ],
    [
      -0.133732079855931,
      0.1499166981790101,
      0.9796125328028988
    ],
    [
      -0.1441831620755637,
      0.1334140453780935,
      0.9805161438088328
    ],
    [
      -0.19079748117054887,
      0.1310927958822479,
      0.9728365741720185
    ],
    [
      -0.19078613711724687,
      0.13916872026631494,
      0.9717163769245197
    ],
    [
      -0.18905956786762523,
      0.1977390691097778,
      0.9618501652260113
    ],
    [
      -0.21858209752321137,
      0.17073493659414607,
      0.9607660735416016
    ],
    [
      -0.13921229943420135,
      0.06015104924432239,
      0.9884340073879739
    ],
    [
      -0.17907509096121058,
      0.07737502116281421,
      0.9807880596221021
    ],
    [
      -0.180651988365498,
      0.09331943285708359,
      0.9791099746968286
    ],
    [
      -0.13156041652223596,
      0.09954357253686981,
      0.9862975889512722
    ],
    [
      -0.1845183669758735,
      0.04020488329506676,
      0.9820063847082598
    ],
    [
      -0.18762926300414476,
      0.05338578244467211,
      0.9807880596221039
    ],
    [
      -0.2586150536669728,
      -0.0531226580088813,
      0.9645186557153264
    ],
    [
      -0.25979098944946666,
      -0.058666899599672924,
      0.9638811320345622
    ],
    [
      -0.27834065461933244,
      0.003614487895777963,
      0.9604756194007908
    ],
    [
      -0.262470761012937,
      0.00489537021180927,
      0.9649275283479993
    ],
    [
      -0.25691798689145373,
      -0.003345036475128297,
      0.9664274203180614
    ],
    [
      -0.21394446067804723,
      -0.014963858026387599,
      0.9767312069848826
    ],
    [
      -0.18432484292625229,
      -0.04666102579716287,
      0.9817571496820224
    ],
    [
      -0.18291793006075624,
      -0.06149260081725174,
      0.9812031853326906
    ],
    [
      0.04592075398995188,
      -0.23653677197032855,
      0.9705367792406691
    ],
    [
      0.03529210559081615,
      -0.21324145681720633,
      0.9763618941649875
    ],
    [
      0.126119956873743,
      -0.21279706050162603,
      0.9689226839743368
    ],
    [
      0.07530396911769068,
      -0.24075087787026395,
      0.9676612666836568
    ],
    [
      0.04621517620908375,
      -0.19920360796218806,
      0.978867754123513
    ],
    [
      0.10126625890591173,
      -0.18308729490889136,
      0.977867162374392
    ],
    [
      0.09827354539805432,
      -0.29511666527518476,
      0.9503938468612637
    ],
    [
      0.11707562636606954,
      -0.34747565047605167,
      0.9303515303567986
    ],
    [
      0.07856773270320522,
      -0.33275289670972447,
      0.9397353995190163
    ],
    [
      0.1362718128739296,
      -0.3951625918509467,
      0.9084473121858498
    ],
    [
      0.10129853380244701,
      -0.37782799159139313,
      0.920317671143768
    ],
    [
      0.15161742307750603,
      -0.44044722510896056,
      0.8848832685236812
    ],
    [
      0.12428493115489203,
      -0.41780615784684616,
      0.8999951501830885
    ],
    [
      0.16783372846227426,
      -0.47923898201443044,
      0.8614881529703262
    ],
    [
      0.14321737392678366,
      -0.4560303823523129,
      0.8783650005419837
    ],
    [
      -0.7301900972955367,
      -0.5714528438944807,
      0.3745184495007486
    ],
    [
      -0.7032125730616596,
      -0.5767028355350777,
      0.41581957213892795
    ],
    [
      0.4190987146584157,
      -0.9068747822070596,
      -0.04398177768760654
    ],
    [
      0.4426269386607273,
      -0.8943109054363457,
      -0.06549349272604255
    ],
    [
      0.4378908193827884,
      -0.896781169382179,
      -0.06352294500258797
    ],
    [
      0.42073786656718115,
      -0.9059142260959887,
      -0.047948541097753386
    ],
    [
      0.4462830228115682,
      -0.8889886263082045,
      -0.1026191300139543
    ],
    [
      -0.09368242174263121,
      0.25972669013099003,
      0.9611272810039451
    ],
    [
      -0.10235040891569618,
      0.26227845650465137,
      0.95954906338776
    ],
    [
      -0.10348376632458893,
      0.2673811045138458,
      0.9580179826371913
    ],
    [
      -0.08370384289563389,
      0.303133827467975,
      0.949264741433663
    ],
    [
      -0.047958862553352605,
      0.2844589271792935,
      0.9574878935269072
    ],
    [
      -0.0875337779230149,
      0.32103363809481056,
      0.943013913436135
    ],
    [
      -0.12340921964927663,
      0.2886777006755415,
      0.9494394923523242
    ],
    [
      -0.11387824689711078,
      0.31258604204056845,
      0.9430385523429319
    ],
    [
      -0.09003394037652337,
      0.32132175158845583,
      0.9426803389996014
    ],
    [
      -0.15224256529713232,
      0.29014834664255706,
      0.9447942306409046
    ],
    [
      -0.15257961603377557,
      0.31181054796979585,
      0.9378132239128223
    ],
    [
      -0.14737130637713203,
      0.31870830098919356,
      0.9363261808457986
    ],
    [
      -0.1325933800890259,
      0.32422927561047543,
      0.9366399374325619
    ],
    [
      -0.1879259226650656,
      0.32324592934476043,
      0.9274674747679974
    ],
    [
      -0.18772933530765584,
      0.32453201068920884,
      0.9270580729937931
    ],
    [
      -0.17848451288600262,
      0.33926782831080465,
      0.9236019810140712
    ],
    [
      -0.15827311518518902,
      0.3465526091933334,
      0.9245814783299894
    ],
    [
      -0.21916902715473463,
      0.3561575978775536,
      0.9083593468502088
    ],
    [
      -0.19716887361388014,
      0.37573726944409186,
      0.9055086634751385
    ],
    [
      -0.19438065715190217,
      0.37306675205388123,
      0.9072140643955883
    ],
    [
      -0.19695792391794095,
      0.3768235604442714,
      0.9051030772790672
    ],
    [
      -0.22127064034087987,
      0.3552632918159924,
      0.9082000314970277
    ],
    [
      -0.24943489576127187,
      0.39091112757062435,
      0.8859857352790882
    ],
    [
      -0.22605017529097626,
      0.4087569918408928,
      0.8842053154511701
    ],
    [
      -0.22209144415406104,
      0.40856615947446123,
      0.8852960430081299
    ],
    [
      0.14780990554695586,
      0.4890419038313997,
      0.8596454199954537
    ],
    [
      0.16090572481462978,
      0.5085804247239798,
      0.8458459075443086
    ],
    [
      0.11797813817291114,
      0.4763197386448339,
      0.8713212183176596
    ],
    [
      0.12398706026083234,
      0.4890936046984619,
      0.8633739947038835
    ],
    [
      0.12564406694264746,
      0.4897579299237815,
      0.862757636024674
    ],
    [
      0.09447159393974248,
      0.45487141725478525,
      0.8855321065343185
    ],
    [
      0.09971760270299682,
      0.46893010645922595,
      0.8775881465512774
    ],
    [
      0.07351547236649678,
      0.43081370405688785,
      0.8994415087817079
    ],
    [
      0.07538183025759455,
      0.44719186487353996,
      0.8912558643049373
    ],
    [
      0.05041602996514956,
      0.4068394138688946,
      0.9121074033497193
    ],
    [
      0.05115980572138621,
      0.4204047359265521,
      0.9058932234480375
    ],
    [
      0.023141092259208202,
      0.38425617645207805,
      0.9229364445656485
    ],
    [
      0.02846141254695411,
      0.39738414080414436,
      0.9172108768615777
    ],
    [
      0.00045794950374976556,
      0.36916624115581387,
      0.9293632641078189
    ],
    [
      0.009279081604558372,
      0.3801831924095957,
      0.9248646597496437
    ],
    [
      -0.02833610319292719,
      0.33725037035514915,
      0.9409884446427355
    ],
    [
      -0.026734958946088738,
      0.34717445835362215,
      0.9374194031686245
    ],
    [
      -0.010959080813519753,
      0.36594521121395107,
      0.9305718676906687
    ],
    [
      -0.05570231060209645,
      0.33038772547392153,
      0.9422001928729139
    ],
    [
      -0.07153824396878967,
      0.33328553822051843,
      0.9401079882986428
    ],
    [
      -0.12348293862429592,
      0.34913224089454825,
      0.9289018474718733
    ],
    [
      -0.1177788169764957,
      0.35046336017119606,
      0.9291413151125784
    ],
    [
      -0.14951232770633274,
      0.3585524132511561,
      0.9214587515540814
    ],
    [
      -0.14706214698854073,
      0.3600530114620436,
      0.9212679055845994
    ],
    [
      -0.1995139968441802,
      0.11505949720630446,
      0.9731163739069921
    ],
    [
      -0.24358844224109058,
      0.10285876719937712,
      0.9644090132390838
    ],
    [
      -0.24912552415507103,
      0.07088319178474368,
      0.9658737217343002
    ],
    [
      -0.25697130593135925,
      0.05525174827493033,
      0.964838324404921
    ],
    [
      -0.25943516750822015,
      0.015141413050846448,
      0.9656418235923739
    ],
    [
      0.08250727947767872,
      -0.06802732203115462,
      0.9942659766332457
    ],
    [
      0.07584975147047589,
      -0.08361776818045148,
      0.9936070068424373
    ],
    [
      -0.1753789212848121,
      0.392434445714541,
      0.9029050004212495
    ],
    [
      -0.14504360409837905,
      0.3726450356775993,
      0.9165686173413278
    ],
    [
      -0.15923008184363224,
      0.4223991407906326,
      0.892314264648619
    ],
    [
      -0.1820769615990424,
      0.43938394491070815,
      0.8796531867784966
    ],
    [
      -0.16252992548947232,
      0.42853420767627876,
      0.888787070209536
    ],
    [
      0.13634719310555157,
      0.5314784905580696,
      0.8360263494689347
    ],
    [
      0.03217474033756732,
      0.4715705320879525,
      0.8812411811476444
    ],
    [
      0.02572959339881697,
      0.4403774985311425,
      0.8974439519050675
    ],
    [
      0.026909738778871064,
      0.4676656450577699,
      0.8834957330918769
    ],
    [
      0.010088665060346015,
      0.423155215825293,
      0.9060010387174785
    ],
    [
      -0.015858837748301612,
      0.4126560259290507,
      0.9107488685305712
    ],
    [
      -0.015698537339306467,
      0.41650026486499625,
      0.9090000469157272
    ],
    [
      -0.03142199383059277,
      0.3888914612158739,
      0.9207475711057252
    ],
    [
      -0.05671540973946591,
      0.3763071258868166,
      0.9247574326843164
    ],
    [
      -0.057136703184584456,
      0.3824147442517852,
      0.9222225113973517
    ],
    [
      -0.07397867111518239,
      0.347654696415752,
      0.9346996139295785
    ],
    [
      -0.10209711255254424,
      0.36693076821805903,
      0.924628569179721
    ],
    [
      -0.09945632472903594,
      0.394227587718922,
      0.9136153723272787
    ],
    [
      -0.12090176163951606,
      0.40062334001277655,
      0.908231084839904
    ],
    [
      -0.12868835956721317,
      0.4102166760471535,
      0.9028629933742573
    ],
    [
      -0.04577233290839435,
      0.4416767841404667,
      0.8960058659916567
    ],
    [
      -0.03568440559498199,
      0.4694269716466633,
      0.8822499314185157
    ],
    [
      -0.06357202563185131,
      0.43181880970142295,
      0.8997172406623702
    ],
    [
      -0.07852622834917508,
      0.4017356483891658,
      0.9123826501389588
    ],
    [
      -0.10361380958625456,
      0.4497291583137101,
      0.8871346361322306
    ],
    [
      -0.11116201265113317,
      0.46245229060186566,
      0.8796481602666131
    ],
    [
      -0.12193564672616924,
      0.46614475912878084,
      0.876265234728756
    ]
  ],
  "f": [
    [
      1,
      2,
      3,
      4,
      5,
      6
    ],
    [
      6,
      5,
      7,
      8,
      9,
      10
    ],
    [
      9,
      8,
      11,
      12,
      13,
      14
    ],
    [
      15,
      16,
      17,
      18,
      13,
      12,
      19
    ],
    [
      15,
      20,
      21,
      22,
      16
    ],
    [
      23,
      24,
      25,
      21,
      20,
      26
    ],
    [
      23,
      27,
      28,
      29,
      30,
      24
    ],
    [
      31,
      32,
      33,
      34,
      29,
      28
    ],
    [
      35,
      36,
      37,
      33,
      32,
      38
    ],
    [
      35,
      39,
      40,
      41,
      36
    ],
    [
      42,
      43,
      44,
      40,
      39,
      45
    ],
    [
      42,
      46,
      47,
      48,
      49,
      50,
      43
    ],
    [
      51,
      52,
      48,
      47,
      53,
      54
    ],
    [
      55,
      56,
      51,
      54,
      57
    ],
    [
      58,
      59,
      60,
      61,
      55,
      57
    ],
    [
      62,
      63,
      64,
      65,
      60,
      59
    ],
    [
      64,
      63,
      66,
      67,
      68,
      69
    ],
    [
      68,
      67,
      70,
      71,
      72,
      73
    ],
    [
      74,
      75,
      76,
      77,
      72,
      71,
      78
    ],
    [
      74,
      79,
      80,
      81,
      82,
      75
    ],
    [
      83,
      84,
      85,
      81,
      80,
      86
    ],
    [
      83,
      87,
      88,
      89,
      90,
      91,
      84
    ],
    [
      90,
      89,
      92,
      93,
      94,
      95
    ],
    [
      94,
      93,
      96,
      97,
      98,
      99
    ],
    [
      100,
      101,
      102,
      103,
      104,
      98,
      97
    ],
    [
      103,
      102,
      105,
      106,
      107,
      108
    ],
    [
      109,
      110,
      107,
      106,
      111,
      112
    ],
    [
      109,
      112,
      113,
      114,
      115
    ],
    [
      116,
      115,
      114,
      117,
      118,
      119
    ],
    [
      120,
      119,
      118,
      121,
      122,
      123
    ],
    [
      124,
      123,
      122,
      125,
      126,
      127,
      128
    ],
    [
      127,
      126,
      129,
      130,
      131
    ],
    [
      132,
      133,
      131,
      130,
      134,
      135
    ],
    [
      132,
      135,
      136,
      137,
      138,
      139
    ],
    [
      138,
      137,
      140,
      141,
      142,
      143
    ],
    [
      144,
      142,
      141,
      145,
      146,
      147
    ],
    [
      148,
      147,
      146,
      149,
      150,
      151
    ],
    [
      152,
      153,
      154,
      155,
      151,
      150
    ],
    [
      153,
      156,
      157,
      158,
      159,
      154
    ],
    [
      160,
      161,
      162,
      158,
      157,
      163
    ],
    [
      160,
      164,
      165,
      166,
      167,
      161
    ],
    [
      168,
      169,
      170,
      166,
      165,
      171
    ],
    [
      168,
      172,
      173,
      174,
      175,
      169
    ],
    [
      176,
      177,
      178,
      174,
      173,
      179
    ],
    [
      176,
      180,
      181,
      182,
      183,
      177
    ],
    [
      184,
      185,
      186,
      182,
      181
    ],
    [
      184,
      187,
      188,
      189,
      190,
      185
    ],
    [
      191,
      192,
      193,
      189,
      188
    ],
    [
      191,
      194,
      195,
      196,
      197,
      192
    ],
    [
      198,
      199,
      200,
      196,
      195,
      201
    ],
    [
      198,
      202,
      203,
      204,
      199
    ],
    [
      205,
      203,
      202,
      206,
      207,
      208
    ],
    [
      208,
      207,
      209,
      210,
      211,
      212,
      213,
      214
    ],
    [
      215,
      216,
      217,
      218,
      211,
      210,
      219
    ],
    [
      215,
      219,
      220,
      221,
      222,
      223
    ],
    [
      222,
      221,
      224,
      225,
      226,
      227,
      228
    ],
    [
      229,
      230,
      231,
      227,
      226
    ],
    [
      232,
      233,
      230,
      229,
      234,
      235
    ],
    [
      236,
      237,
      238,
      232,
      235,
      239,
      240,
      241
    ],
    [
      242,
      243,
      236,
      241,
      244,
      245
    ],
    [
      242,
      245,
      246,
      247,
      248,
      249
    ],
    [
      248,
      247,
      250,
      251,
      252,
      253
    ],
    [
      252,
      251,
      254,
      255,
      256,
      257
    ],
    [
      256,
      255,
      258,
      259,
      260,
      261,
      262
    ],
    [
      261,
      260,
      263,
      264,
      265
    ],
    [
      264,
      263,
      266,
      267,
      268,
      269,
      270
    ],
    [
      269,
      268,
      271,
      272,
      273,
      274
    ],
    [
      273,
      272,
      275,
      276,
      277
    ],
    [
      278,
      279,
      276,
      275,
      280,
      281
    ],
    [
      282,
      283,
      278,
      281,
      284,
      285
    ],
    [
      282,
      285,
      286,
      287,
      288,
      289
    ],
    [
      290,
      291,
      288,
      287,
      292,
      293
    ],
    [
      290,
      293,
      294,
      295,
      296,
      297
    ],
    [
      298,
      299,
      300,
      301,
      302,
      296,
      295
    ],
    [
      303,
      304,
      300,
      299,
      305,
      306
    ],
    [
      307,
      308,
      303,
      306,
      309,
      310
    ],
    [
      311,
      312,
      307,
      310,
      313,
      314
    ],
    [
      315,
      316,
      311,
      314,
      317,
      318
    ],
    [
      319,
      320,
      315,
      318,
      321,
      322
    ],
    [
      319,
      322,
      323,
      324,
      325,
      326
    ],
    [
      325,
      324,
      327,
      328,
      329,
      330
    ],
    [
      329,
      328,
      331,
      332,
      333,
      334
    ],
    [
      333,
      332,
      335,
      336,
      337,
      338
    ],
    [
      337,
      336,
      339,
      340,
      341,
      342
    ],
    [
      341,
      340,
      343,
      344,
      345,
      346
    ],
    [
      345,
      344,
      347,
      348,
      349,
      350
    ],
    [
      349,
      348,
      351,
      352,
      353,
      354
    ],
    [
      355,
      356,
      353,
      352,
      357,
      358
    ],
    [
      355,
      358,
      359,
      360,
      361,
      362
    ],
    [
      361,
      360,
      363,
      364,
      365
    ],
    [
      365,
      364,
      366,
      367,
      368,
      369
    ],
    [
      370,
      368,
      367,
      371,
      372,
      373
    ],
    [
      374,
      373,
      372,
      375,
      376,
      377
    ],
    [
      376,
      378,
      379,
      380,
      381,
      377
    ],
    [
      382,
      381,
      380,
      383,
      384,
      385,
      386
    ],
    [
      387,
      385,
      384,
      388
    ],
    [
      389,
      390,
      391,
      392
    ],
    [
      392,
      391,
      393,
      394,
      395,
      396,
      397
    ],
    [
      394,
      398,
      399,
      400,
      395
    ],
    [
      401,
      402,
      400,
      399,
      403,
      404
    ],
    [
      401,
      404,
      405,
      406,
      407,
      408,
      409
    ],
    [
      408,
      407,
      410,
      411,
      412
    ],
    [
      410,
      413,
      414,
      415,
      411
    ],
    [
      413,
      416,
      417,
      418,
      419,
      420,
      421,
      414
    ],
    [
      419,
      422,
      423,
      424,
      420
    ],
    [
      425,
      423,
      422,
      426,
      427
    ],
    [
      425,
      427,
      428,
      429,
      430,
      431
    ],
    [
      432,
      430,
      429,
      433,
      434,
      435
    ],
    [
      436,
      435,
      434,
      437,
      438
    ],
    [
      436,
      438,
      439,
      440,
      441,
      442
    ],
    [
      441,
      440,
      443,
      444,
      445,
      446
    ],
    [
      445,
      444,
      447,
      448,
      449
    ],
    [
      449,
      448,
      450,
      451,
      452,
      453
    ],
    [
      452,
      451,
      454,
      455,
      456,
      457
    ],
    [
      456,
      455,
      458,
      459,
      460,
      461
    ],
    [
      460,
      459,
      462,
      463,
      464,
      465,
      466
    ],
    [
      464,
      463,
      467,
      468,
      469,
      470
    ],
    [
      468,
      471,
      472,
      473,
      474,
      469
    ],
    [
      472,
      475,
      476,
      477,
      473
    ],
    [
      477,
      476,
      478,
      479,
      480,
      481,
      482
    ],
    [
      481,
      480,
      483,
      484,
      485
    ],
    [
      483,
      486,
      487,
      488,
      489,
      484
    ],
    [
      488,
      487,
      490,
      491,
      492,
      493,
      494
    ],
    [
      495,
      493,
      492,
      496,
      497
    ],
    [
      495,
      497,
      498,
      499,
      500,
      501
    ],
    [
      1,
      502,
      503,
      504,
      2
    ],
    [
      1,
      6,
      10,
      505,
      506,
      502
    ],
    [
      10,
      9,
      14,
      507,
      508,
      505
    ],
    [
      14,
      13,
      18,
      509,
      510,
      507
    ],
    [
      17,
      511,
      512,
      509,
      18
    ],
    [
      17,
      16,
      22,
      513,
      514,
      511
    ],
    [
      21,
      25,
      515,
      516,
      517,
      518,
      513,
      22
    ],
    [
      25,
      24,
      30,
      519,
      515
    ],
    [
      34,
      520,
      521,
      519,
      30,
      29
    ],
    [
      37,
      522,
      523,
      520,
      34,
      33
    ],
    [
      37,
      36,
      41,
      524,
      525,
      522
    ],
    [
      41,
      40,
      44,
      526,
      527,
      524
    ],
    [
      43,
      50,
      528,
      529,
      526,
      44
    ],
    [
      49,
      530,
      531,
      528,
      50
    ],
    [
      48,
      52,
      532,
      533,
      530,
      49
    ],
    [
      51,
      56,
      534,
      535,
      536,
      532,
      52
    ],
    [
      55,
      61,
      537,
      538,
      534,
      56
    ],
    [
      60,
      65,
      539,
      537,
      61
    ],
    [
      64,
      69,
      540,
      541,
      542,
      539,
      65
    ],
    [
      68,
      73,
      543,
      544,
      545,
      540,
      69
    ],
    [
      72,
      77,
      546,
      547,
      543,
      73
    ],
    [
      548,
      549,
      546,
      77,
      76
    ],
    [
      75,
      82,
      550,
      551,
      548,
      76
    ],
    [
      81,
      85,
      552,
      550,
      82
    ],
    [
      84,
      91,
      553,
      554,
      552,
      85
    ],
    [
      90,
      95,
      555,
      556,
      553,
      91
    ],
    [
      95,
      94,
      99,
      557,
      558,
      555
    ],
    [
      99,
      98,
      104,
      559,
      560,
      557
    ],
    [
      103,
      108,
      561,
      562,
      559,
      104
    ],
    [
      108,
      107,
      110,
      563,
      561
    ],
    [
      109,
      115,
      116,
      564,
      565,
      563,
      110
    ],
    [
      116,
      119,
      120,
      566,
      567,
      564
    ],
    [
      120,
      123,
      124,
      568,
      569,
      566
    ],
    [
      124,
      128,
      570,
      571,
      572,
      568
    ],
    [
      570,
      573,
      574,
      575,
      571
    ],
    [
      576,
      577,
      578,
      579,
      574,
      573
    ],
    [
      580,
      581,
      582,
      583,
      578,
      577
    ],
    [
      584,
      585,
      586,
      587,
      582,
      581
    ],
    [
      588,
      589,
      586,
      585,
      590,
      591
    ],
    [
      588,
      591,
      592,
      593,
      594,
      595
    ],
    [
      593,
      596,
      597,
      598,
      599,
      594
    ],
    [
      600,
      601,
      602,
      603,
      598,
      597
    ],
    [
      604,
      605,
      606,
      602,
      601,
      607
    ],
    [
      608,
      609,
      610,
      611,
      605,
      604
    ],
    [
      612,
      613,
      614,
      610,
      609,
      615
    ],
    [
      612,
      616,
      617,
      618,
      619,
      613
    ],
    [
      617,
      620,
      621,
      622,
      623,
      618
    ],
    [
      621,
      624,
      625,
      626,
      627,
      622
    ],
    [
      625,
      628,
      629,
      630,
      631,
      626
    ],
    [
      632,
      633,
      634,
      635,
      630,
      629
    ],
    [
      636,
      637,
      638,
      639,
      634,
      633
    ],
    [
      637,
      640,
      641,
      642,
      643,
      638
    ],
    [
      641,
      644,
      645,
      646,
      647,
      642
    ],
    [
      645,
      648,
      649,
      650,
      651,
      646
    ],
    [
      652,
      653,
      654,
      655,
      650,
      649
    ],
    [
      656,
      657,
      658,
      659,
      654,
      653
    ],
    [
      660,
      657,
      656,
      661,
      662
    ],
    [
      660,
      662,
      663,
      664,
      665,
      666,
      667
    ],
    [
      668,
      669,
      667,
      666,
      670
    ],
    [
      671,
      672,
      673,
      674,
      675,
      670,
      666,
      665
    ],
    [
      676,
      677,
      678,
      679,
      680,
      681,
      682,
      683,
      684
    ],
    [
      676,
      684,
      685,
      686,
      687
    ],
    [
      688,
      689,
      690,
      691,
      687,
      686
    ],
    [
      689,
      692,
      693,
      694,
      690
    ],
    [
      693,
      695,
      696,
      697,
      694
    ],
    [
      696,
      698,
      699,
      700,
      697
    ],
    [
      701,
      702,
      703,
      704,
      705
    ],
    [
      706,
      707,
      708,
      709,
      704,
      703
    ],
    [
      710,
      711,
      712,
      713,
      714,
      715
    ],
    [
      716,
      717,
      718,
      713,
      712
    ],
    [
      719,
      720,
      721,
      722,
      718,
      717
    ],
    [
      720,
      723,
      724,
      725,
      726,
      721
    ],
    [
      727,
      724,
      723,
      728,
      729
    ],
    [
      730,
      731,
      732,
      7,
      5,
      4
    ],
    [
      8,
      7,
      732,
      733,
      734,
      11
    ],
    [
      11,
      734,
      735,
      19,
      12
    ],
    [
      15,
      19,
      735,
      736,
      737,
      26,
      20
    ],
    [
      23,
      26,
      737,
      738,
      739,
      27
    ],
    [
      31,
      28,
      27,
      739,
      740,
      741
    ],
    [
      38,
      32,
      31,
      741,
      742,
      743
    ],
    [
      35,
      38,
      743,
      744,
      745,
      746,
      45,
      39
    ],
    [
      42,
      45,
      746,
      747,
      748,
      46
    ],
    [
      47,
      46,
      748,
      749,
      750,
      53
    ],
    [
      58,
      57,
      54,
      53,
      750,
      751,
      752
    ],
    [
      58,
      752,
      753,
      62,
      59
    ],
    [
      62,
      753,
      754,
      755,
      66,
      63
    ],
    [
      70,
      67,
      66,
      755,
      756,
      757
    ],
    [
      70,
      757,
      758,
      759,
      78,
      71
    ],
    [
      74,
      78,
      759,
      760,
      761,
      79
    ],
    [
      762,
      86,
      80,
      79,
      761,
      763
    ],
    [
      83,
      86,
      762,
      764,
      765,
      87
    ],
    [
      88,
      87,
      765,
      766,
      767
    ],
    [
      88,
      767,
      768,
      92,
      89
    ],
    [
      96,
      93,
      92,
      768,
      769,
      770,
      771
    ],
    [
      100,
      97,
      96,
      771,
      772,
      773
    ],
    [
      100,
      773,
      774,
      775,
      776,
      101
    ],
    [
      777,
      778,
      776,
      775,
      779,
      780
    ],
    [
      777,
      780,
      781,
      782,
      783
    ],
    [
      784,
      785,
      783,
      782,
      786,
      787
    ],
    [
      784,
      787,
      788,
      789,
      790,
      791
    ],
    [
      792,
      793,
      794,
      790,
      789,
      795
    ],
    [
      792,
      796,
      797,
      798,
      799,
      793
    ],
    [
      800,
      801,
      802,
      803,
      798,
      797
    ],
    [
      804,
      805,
      802,
      801,
      806,
      807
    ],
    [
      808,
      809,
      804,
      807,
      810,
      811
    ],
    [
      808,
      811,
      812,
      813,
      814,
      815
    ],
    [
      816,
      814,
      813,
      817,
      818,
      819
    ],
    [
      819,
      818,
      820,
      821,
      822,
      823
    ],
    [
      824,
      825,
      826,
      822,
      821,
      827
    ],
    [
      824,
      828,
      829,
      830,
      831,
      825
    ],
    [
      832,
      833,
      834,
      830,
      829,
      835
    ],
    [
      832,
      836,
      837,
      838,
      839,
      833
    ],
    [
      837,
      840,
      841,
      842,
      843,
      844,
      838
    ],
    [
      845,
      846,
      842,
      841,
      847,
      848
    ],
    [
      849,
      850,
      845,
      848,
      851
    ],
    [
      852,
      853,
      849,
      851,
      854,
      855
    ],
    [
      856,
      857,
      858,
      852,
      855,
      859,
      860
    ],
    [
      861,
      862,
      863,
      864,
      865,
      866,
      867
    ],
    [
      868,
      869,
      870,
      871,
      864,
      863
    ],
    [
      872,
      870,
      869,
      873,
      874,
      875
    ],
    [
      874,
      876,
      877,
      878,
      879,
      875
    ],
    [
      880,
      878,
      877,
      881,
      882
    ],
    [
      883,
      882,
      881,
      884,
      885,
      886
    ],
    [
      887,
      888,
      886,
      885,
      889,
      890
    ],
    [
      887,
      890,
      891,
      892,
      893,
      894
    ],
    [
      895,
      893,
      892,
      896,
      897,
      898,
      899
    ],
    [
      898,
      897,
      900,
      901,
      902,
      903
    ],
    [
      902,
      901,
      904,
      905,
      906,
      907
    ],
    [
      906,
      905,
      908,
      909,
      910,
      911
    ],
    [
      910,
      909,
      912,
      913,
      914
    ],
    [
      913,
      912,
      915,
      916,
      917,
      918
    ],
    [
      917,
      916,
      919,
      920,
      921,
      922
    ],
    [
      921,
      920,
      923,
      924,
      925,
      926
    ],
    [
      925,
      924,
      927,
      928,
      929,
      930
    ],
    [
      931,
      929,
      928,
      932,
      933,
      934
    ],
    [
      935,
      936,
      937,
      938,
      934,
      933
    ],
    [
      939,
      940,
      941,
      937,
      936,
      942
    ],
    [
      939,
      943,
      944,
      945,
      946,
      940
    ],
    [
      945,
      944,
      947,
      948,
      949,
      950
    ],
    [
      951,
      949,
      948,
      952,
      953,
      954
    ],
    [
      955,
      954,
      953,
      956,
      957,
      958
    ],
    [
      959,
      958,
      957,
      960,
      961,
      962
    ],
    [
      963,
      962,
      961,
      964,
      965,
      966
    ],
    [
      967,
      966,
      965,
      968,
      969,
      970
    ],
    [
      971,
      970,
      969,
      972,
      973,
      974
    ],
    [
      975,
      974,
      973,
      976,
      977,
      978
    ],
    [
      979,
      978,
      977,
      980,
      981,
      982
    ],
    [
      981,
      983,
      984,
      985,
      986,
      982
    ],
    [
      987,
      988,
      989,
      990,
      985,
      984
    ],
    [
      991,
      992,
      993,
      994,
      989,
      988
    ],
    [
      995,
      996,
      993,
      992,
      997,
      998
    ],
    [
      995,
      998,
      999,
      1000,
      1001,
      1002,
      1003
    ],
    [
      1002,
      1001,
      1004,
      1005,
      1006,
      1007
    ],
    [
      1008,
      1006,
      1005,
      1009,
      1010
    ],
    [
      1011,
      1008,
      1010,
      1012,
      1013,
      1014,
      1015,
      1016
    ],
    [
      1017,
      1015,
      1014,
      1018,
      1019,
      1020
    ],
    [
      1017,
      1020,
      1021,
      1022,
      1023,
      1024,
      1025,
      1026
    ],
    [
      1025,
      1024,
      1027,
      1028,
      1029,
      1030
    ],
    [
      1030,
      1029,
      1031,
      1032,
      1033,
      1034,
      1035
    ],
    [
      1036,
      1037,
      1038,
      1039,
      1040,
      1041
    ],
    [
      1040,
      1039,
      1042,
      1043,
      1044,
      1045
    ],
    [
      1046,
      1047,
      1048,
      1049,
      417,
      416,
      1050
    ],
    [
      417,
      1049,
      1051,
      1052,
      1053,
      418
    ],
    [
      1052,
      1051,
      1054,
      1055,
      1056
    ],
    [
      1056,
      1055,
      1057,
      1058,
      1059,
      1060,
      1061,
      1062,
      1063
    ],
    [
      1064,
      1065,
      1059,
      1058,
      1066
    ],
    [
      1064,
      1067,
      1068,
      1069,
      1070,
      1071,
      1065
    ],
    [
      1072,
      1073,
      1070,
      1069,
      1074
    ],
    [
      1075,
      1072,
      1074,
      1076,
      1077
    ],
    [
      1078,
      1079,
      1080,
      1081,
      1077,
      1076
    ],
    [
      1079,
      1082,
      1083,
      1084,
      1085,
      1086,
      1080
    ],
    [
      1084,
      1083,
      1087,
      1088,
      1089,
      1090,
      1091,
      1092
    ],
    [
      1088,
      1087,
      1093,
      1094,
      1095
    ],
    [
      1095,
      1094,
      1096,
      1097,
      1098,
      1099
    ],
    [
      1098,
      1097,
      1100,
      1101,
      1102
    ],
    [
      1101,
      1100,
      1103,
      1104,
      1105,
      1106,
      1107,
      1108
    ],
    [
      1109,
      1105,
      1104,
      1110,
      1111,
      1112
    ],
    [
      1113,
      1112,
      1111,
      1114,
      1115,
      1116
    ],
    [
      1117,
      1116,
      1115,
      1118,
      1119
    ],
    [
      1120,
      1121,
      1119,
      1118,
      1122,
      1123
    ],
    [
      1120,
      1123,
      1124,
      1125,
      1126,
      1127
    ],
    [
      1128,
      1126,
      1125,
      1129,
      1130
    ],
    [
      1128,
      1130,
      1131,
      1132,
      1133,
      1134,
      1135
    ],
    [
      1133,
      1132,
      1136,
      1137,
      1138,
      1139
    ],
    [
      1140,
      1138,
      1137,
      1141,
      1142,
      1143
    ],
    [
      1144,
      1143,
      1142,
      1145,
      1146,
      1147
    ],
    [
      1148,
      1149,
      1147,
      1146,
      1150,
      1151
    ],
    [
      1148,
      1151,
      1152,
      1153,
      1154,
      1155
    ],
    [
      1154,
      1153,
      1156,
      1157,
      1158,
      1159
    ],
    [
      1158,
      1157,
      1160,
      1161,
      1162,
      1163
    ],
    [
      1162,
      1161,
      1164,
      1165,
      1166,
      1167
    ],
    [
      1166,
      1165,
      1168,
      1169,
      1170,
      1171
    ],
    [
      1172,
      1170,
      1169,
      1173,
      1174,
      1175
    ],
    [
      1176,
      1175,
      1174,
      1177,
      1178,
      1179
    ],
    [
      1180,
      1179,
      1178,
      1181,
      1182,
      1183
    ],
    [
      1184,
      1183,
      1182,
      1185,
      1186,
      1187
    ],
    [
      1188,
      1187,
      1186,
      1189,
      1190,
      1191
    ],
    [
      1192,
      1191,
      1190,
      1193,
      1194,
      1195
    ],
    [
      1195,
      1194,
      1196,
      1197,
      1198,
      1199
    ],
    [
      1198,
      1197,
      1200,
      1201,
      1202,
      1203
    ],
    [
      1204,
      1202,
      1201,
      1205,
      1206,
      1207
    ],
    [
      1208,
      1207,
      1206,
      1209,
      1210,
      1211
    ],
    [
      1212,
      1213,
      1214,
      1211,
      1210
    ],
    [
      1212,
      1215,
      1216,
      1217,
      1218,
      1213
    ],
    [
      1219,
      1220,
      1221,
      1217,
      1216,
      1222
    ],
    [
      1219,
      1223,
      1224,
      1225,
      1226,
      1220
    ],
    [
      1224,
      1227,
      1228,
      1229,
      1230,
      1225
    ],
    [
      1228,
      1231,
      1232,
      1233,
      1234,
      1229
    ],
    [
      1235,
      1236,
      1237,
      1238,
      1239,
      1233,
      1232
    ],
    [
      1240,
      1241,
      1242,
      1243,
      1237,
      1236
    ],
    [
      1244,
      1245,
      1246,
      1247,
      1242,
      1241
    ],
    [
      1248,
      1246,
      1245,
      1249,
      1250,
      1251
    ],
    [
      1251,
      1250,
      1252,
      1253
    ],
    [
      102,
      101,
      776,
      778,
      105
    ],
    [
      106,
      105,
      778,
      777,
      783,
      785,
      111
    ],
    [
      784,
      791,
      113,
      112,
      111,
      785
    ],
    [
      114,
      113,
      791,
      790,
      794,
      117
    ],
    [
      793,
      799,
      121,
      118,
      117,
      794
    ],
    [
      798,
      803,
      125,
      122,
      121,
      799
    ],
    [
      802,
      805,
      129,
      126,
      125,
      803
    ],
    [
      804,
      809,
      134,
      130,
      129,
      805
    ],
    [
      135,
      134,
      809,
      808,
      815,
      136
    ],
    [
      137,
      136,
      815,
      814,
      816,
      140
    ],
    [
      145,
      141,
      140,
      816,
      819,
      823
    ],
    [
      146,
      145,
      823,
      822,
      826,
      149
    ],
    [
      152,
      150,
      149,
      826,
      825,
      831
    ],
    [
      152,
      831,
      830,
      834,
      156,
      153
    ],
    [
      163,
      157,
      156,
      834,
      833,
      839
    ],
    [
      160,
      163,
      839,
      838,
      844,
      164
    ],
    [
      165,
      164,
      844,
      843,
      171
    ],
    [
      168,
      171,
      843,
      842,
      846,
      172
    ],
    [
      173,
      172,
      846,
      845,
      850,
      179
    ],
    [
      176,
      179,
      850,
      849,
      853,
      180
    ],
    [
      184,
      181,
      180,
      853,
      852,
      858,
      187
    ],
    [
      191,
      188,
      187,
      858,
      857,
      194
    ],
    [
      201,
      195,
      194,
      857,
      856,
      1254
    ],
    [
      198,
      201,
      1254,
      1255,
      206,
      202
    ],
    [
      1256,
      1257,
      209,
      207,
      206,
      1255
    ],
    [
      1258,
      1257,
      1256,
      1259,
      1260
    ],
    [
      1258,
      1260,
      867,
      866,
      1261,
      1262
    ],
    [
      1261,
      866,
      865,
      1263,
      1264,
      1265,
      1266
    ],
    [
      1267,
      1268,
      1263,
      865,
      864,
      871,
      1269
    ],
    [
      1270,
      1271,
      1269,
      871,
      870,
      872
    ],
    [
      1270,
      872,
      875,
      879,
      1272,
      1273
    ],
    [
      1274,
      1272,
      879,
      878,
      880,
      1275
    ],
    [
      1276,
      1275,
      880,
      882,
      883,
      1277
    ],
    [
      1278,
      1277,
      883,
      886,
      888,
      1279
    ],
    [
      887,
      894,
      1280,
      1281,
      1279,
      888
    ],
    [
      1282,
      1280,
      894,
      893,
      895,
      1283
    ],
    [
      1284,
      1283,
      895,
      899,
      1285
    ],
    [
      1286,
      1285,
      899,
      898,
      903,
      1287
    ],
    [
      1288,
      1287,
      903,
      902,
      907,
      1289
    ],
    [
      1290,
      1289,
      907,
      906,
      911,
      1291
    ],
    [
      1292,
      1291,
      911,
      910,
      914,
      1293
    ],
    [
      1294,
      1293,
      914,
      913,
      918,
      1295
    ],
    [
      1296,
      1295,
      918,
      917,
      922,
      1297
    ],
    [
      1298,
      1297,
      922,
      921,
      926,
      1299
    ],
    [
      1300,
      1299,
      926,
      925,
      930,
      1301
    ],
    [
      931,
      1302,
      1303,
      1301,
      930,
      929
    ],
    [
      931,
      934,
      938,
      1304,
      1305,
      1302
    ],
    [
      1304,
      938,
      937,
      941,
      1306,
      1307
    ],
    [
      1308,
      1306,
      941,
      940,
      946,
      1309
    ],
    [
      945,
      950,
      1310,
      1311,
      1309,
      946
    ],
    [
      1310,
      950,
      949,
      951,
      1312,
      1313
    ],
    [
      951,
      954,
      955,
      1314,
      1315,
      1312
    ],
    [
      1316,
      1314,
      955,
      958,
      959,
      1317
    ],
    [
      959,
      962,
      963,
      1318,
      1319,
      1317
    ],
    [
      1320,
      1318,
      963,
      966,
      967,
      1321
    ],
    [
      1322,
      1321,
      967,
      970,
      971,
      1323
    ],
    [
      971,
      974,
      975,
      1324,
      1325,
      1323
    ],
    [
      1326,
      1324,
      975,
      978,
      979,
      1327
    ],
    [
      979,
      982,
      986,
      1328,
      1329,
      1327
    ],
    [
      1330,
      1328,
      986,
      985,
      990,
      1331
    ],
    [
      1332,
      1331,
      990,
      989,
      994,
      1333
    ],
    [
      1334,
      1333,
      994,
      993,
      996,
      1335
    ],
    [
      995,
      1003,
      1336,
      1337,
      1335,
      996
    ],
    [
      1003,
      1002,
      1007,
      1338,
      1339,
      1336
    ],
    [
      1011,
      1340,
      1341,
      1338,
      1007,
      1006,
      1008
    ],
    [
      1342,
      1343,
      1340,
      1011,
      1016
    ],
    [
      1342,
      1016,
      1015,
      1017,
      1026,
      1344
    ],
    [
      1040,
      1045,
      1345,
      1346,
      1347,
      1041
    ],
    [
      1345,
      1045,
      1044,
      1348,
      1349,
      1350
    ],
    [
      406,
      405,
      1349,
      1348,
      1046,
      1050
    ],
    [
      407,
      406,
      1050,
      416,
      413,
      410
    ],
    [
      1052,
      1056,
      1063,
      1351,
      1352,
      1053
    ],
    [
      1353,
      1351,
      1063,
      1062,
      1354
    ],
    [
      1062,
      1061,
      1355,
      1356,
      1354
    ],
    [
      1060,
      1357,
      1358,
      1359,
      1355,
      1061
    ],
    [
      1357,
      1360,
      1361,
      1362,
      1363,
      1358
    ],
    [
      1364,
      1365,
      1366,
      1367,
      1362,
      1361
    ],
    [
      1368,
      1369,
      1366,
      1365,
      1370
    ],
    [
      1371,
      1369,
      1368,
      1372,
      1373,
      1374
    ],
    [
      1373,
      1375,
      1376,
      1377,
      1378,
      1374
    ],
    [
      1379,
      1377,
      1376,
      1380,
      1381,
      1382
    ],
    [
      1383,
      1384,
      1385,
      1382,
      1381,
      1386
    ],
    [
      1383,
      1387,
      1388,
      1389,
      1390,
      1391,
      1384
    ],
    [
      1392,
      1389,
      1388,
      1393,
      1394
    ],
    [
      1392,
      1394,
      1395,
      1396,
      1397,
      1398
    ],
    [
      1399,
      1397,
      1396,
      1400,
      1401,
      1402
    ],
    [
      1403,
      1402,
      1401,
      1404,
      1405,
      1406
    ],
    [
      1407,
      1408,
      1409,
      1410,
      1411,
      1412,
      1413
    ],
    [
      1414,
      1415,
      1416,
      1417,
      1410,
      1409
    ],
    [
      1418,
      1419,
      1420,
      1421,
      1415,
      1414,
      1422
    ],
    [
      1423,
      1424,
      1425,
      1426,
      1420,
      1419,
      1427,
      1428
    ],
    [
      1429,
      1430,
      1431,
      1432,
      1433,
      1434,
      1425,
      1424
    ],
    [
      127,
      131,
      133,
      576,
      573,
      570,
      128
    ],
    [
      132,
      139,
      580,
      577,
      576,
      133
    ],
    [
      138,
      143,
      584,
      581,
      580,
      139
    ],
    [
      143,
      142,
      144,
      590,
      585,
      584
    ],
    [
      144,
      147,
      148,
      592,
      591,
      590
    ],
    [
      148,
      151,
      155,
      596,
      593,
      592
    ],
    [
      155,
      154,
      159,
      600,
      597,
      596
    ],
    [
      159,
      158,
      162,
      607,
      601,
      600
    ],
    [
      161,
      167,
      608,
      604,
      607,
      162
    ],
    [
      166,
      170,
      615,
      609,
      608,
      167
    ],
    [
      170,
      169,
      175,
      616,
      612,
      615
    ],
    [
      178,
      620,
      617,
      616,
      175,
      174
    ],
    [
      178,
      177,
      183,
      624,
      621,
      620
    ],
    [
      183,
      182,
      186,
      628,
      625,
      624
    ],
    [
      186,
      185,
      190,
      632,
      629,
      628
    ],
    [
      193,
      636,
      633,
      632,
      190,
      189
    ],
    [
      193,
      192,
      197,
      640,
      637,
      636
    ],
    [
      196,
      200,
      644,
      641,
      640,
      197
    ],
    [
      645,
      644,
      200,
      199,
      204,
      648
    ],
    [
      205,
      652,
      649,
      648,
      204,
      203
    ],
    [
      205,
      208,
      214,
      661,
      656,
      653,
      652
    ],
    [
      661,
      214,
      213,
      663,
      662
    ],
    [
      212,
      664,
      663,
      213
    ],
    [
      212,
      211,
      218,
      1435,
      671,
      665,
      664
    ],
    [
      1435,
      1436,
      1437,
      1438,
      1439,
      672,
      671
    ],
    [
      218,
      217,
      1440,
      1436,
      1435
    ],
    [
      216,
      1441,
      1442,
      1440,
      217
    ],
    [
      215,
      223,
      1443,
      1444,
      1441,
      216
    ],
    [
      222,
      228,
      1445,
      1446,
      1443,
      223
    ],
    [
      231,
      1447,
      1448,
      1445,
      228,
      227
    ],
    [
      231,
      230,
      233,
      1449,
      1450,
      1447
    ],
    [
      232,
      238,
      1451,
      1452,
      1449,
      233
    ],
    [
      237,
      1453,
      1454,
      1451,
      238
    ],
    [
      236,
      243,
      1455,
      1453,
      237
    ],
    [
      242,
      249,
      1456,
      1457,
      1458,
      1459,
      1455,
      243
    ],
    [
      248,
      253,
      1460,
      1456,
      249
    ],
    [
      252,
      257,
      1461,
      1462,
      1460,
      253
    ],
    [
      256,
      262,
      1463,
      1464,
      1461,
      257
    ],
    [
      261,
      265,
      1465,
      1466,
      1463,
      262
    ],
    [
      264,
      270,
      1467,
      1468,
      1465,
      265
    ],
    [
      269,
      274,
      1469,
      1470,
      1467,
      270
    ],
    [
      273,
      277,
      1471,
      1472,
      1469,
      274
    ],
    [
      279,
      1473,
      1474,
      1471,
      277,
      276
    ],
    [
      278,
      283,
      1475,
      1476,
      1473,
      279
    ],
    [
      282,
      289,
      1477,
      1478,
      1475,
      283
    ],
    [
      289,
      288,
      291,
      1479,
      1480,
      1477
    ],
    [
      290,
      297,
      1481,
      1482,
      1479,
      291
    ],
    [
      1483,
      1481,
      297,
      296,
      302,
      1484
    ],
    [
      301,
      1485,
      1486,
      1484,
      302
    ],
    [
      1487,
      1485,
      301,
      300,
      304,
      1488
    ],
    [
      303,
      308,
      1489,
      1490,
      1488,
      304
    ],
    [
      307,
      312,
      1491,
      1492,
      1489,
      308
    ],
    [
      311,
      316,
      1493,
      1494,
      1491,
      312
    ],
    [
      315,
      320,
      1495,
      1493,
      316
    ],
    [
      319,
      326,
      1496,
      1497,
      1495,
      320
    ],
    [
      325,
      330,
      1498,
      1496,
      326
    ],
    [
      329,
      334,
      1499,
      1500,
      1498,
      330
    ],
    [
      333,
      338,
      1501,
      1502,
      1503,
      1499,
      334
    ],
    [
      337,
      342,
      1504,
      1501,
      338
    ],
    [
      341,
      346,
      1505,
      1506,
      1504,
      342
    ],
    [
      345,
      350,
      1507,
      1508,
      1505,
      346
    ],
    [
      349,
      354,
      1509,
      1510,
      1507,
      350
    ],
    [
      354,
      353,
      356,
      1511,
      1512,
      1509
    ],
    [
      355,
      362,
      1513,
      1514,
      1511,
      356
    ],
    [
      362,
      361,
      365,
      369,
      1515,
      1516,
      1513
    ],
    [
      370,
      1517,
      1515,
      369,
      368
    ],
    [
      370,
      373,
      374,
      1518,
      1519,
      1517
    ],
    [
      374,
      377,
      381,
      382,
      1520,
      1521,
      1518
    ],
    [
      389,
      392,
      397,
      386,
      385,
      387
    ],
    [
      401,
      409,
      1522,
      1523,
      402
    ],
    [
      408,
      412,
      1524,
      1525,
      1522,
      409
    ],
    [
      424,
      423,
      425,
      431,
      1526,
      1527
    ],
    [
      432,
      435,
      436,
      442,
      1528,
      1529
    ],
    [
      441,
      446,
      1530,
      1531,
      1528,
      442
    ],
    [
      445,
      449,
      453,
      1532,
      1533,
      1530,
      446
    ],
    [
      452,
      457,
      1534,
      1535,
      1532,
      453
    ],
    [
      456,
      461,
      1536,
      1537,
      1534,
      457
    ],
    [
      460,
      466,
      1538,
      1539,
      1536,
      461
    ],
    [
      1540,
      1541,
      1538,
      466,
      465
    ],
    [
      464,
      470,
      1542,
      1543,
      1540,
      465
    ],
    [
      469,
      474,
      1544,
      1545,
      1542,
      470
    ],
    [
      473,
      477,
      482,
      1546,
      1547,
      1544,
      474
    ],
    [
      481,
      485,
      1548,
      1549,
      1546,
      482
    ],
    [
      484,
      489,
      1550,
      1548,
      485
    ],
    [
      488,
      494,
      1551,
      1552,
      1550,
      489
    ],
    [
      1258,
      1262,
      220,
      219,
      210,
      209,
      1257
    ],
    [
      221,
      220,
      1262,
      1261,
      1266,
      224
    ],
    [
      225,
      224,
      1266,
      1265
    ],
    [
      229,
      226,
      225,
      1265,
      1264,
      234
    ],
    [
      239,
      235,
      234,
      1264,
      1263,
      1268
    ],
    [
      239,
      1268,
      1267,
      240
    ],
    [
      241,
      240,
      1267,
      1269,
      1271,
      244
    ],
    [
      246,
      245,
      244,
      1271,
      1270,
      1273
    ],
    [
      246,
      1273,
      1272,
      1274,
      250,
      247
    ],
    [
      250,
      1274,
      1275,
      1276,
      254,
      251
    ],
    [
      254,
      1276,
      1277,
      1278,
      258,
      255
    ],
    [
      258,
      1278,
      1279,
      1281,
      259
    ],
    [
      259,
      1281,
      1280,
      1282,
      266,
      263,
      260
    ],
    [
      266,
      1282,
      1283,
      1284,
      267
    ],
    [
      267,
      1284,
      1285,
      1286,
      271,
      268
    ],
    [
      271,
      1286,
      1287,
      1288,
      280,
      275,
      272
    ],
    [
      284,
      281,
      280,
      1288,
      1289,
      1290
    ],
    [
      284,
      1290,
      1291,
      1292,
      286,
      285
    ],
    [
      286,
      1292,
      1293,
      1294,
      292,
      287
    ],
    [
      292,
      1294,
      1295,
      1296,
      294,
      293
    ],
    [
      294,
      1296,
      1297,
      1298,
      298,
      295
    ],
    [
      298,
      1298,
      1299,
      1300,
      305,
      299
    ],
    [
      305,
      1300,
      1301,
      1303,
      309,
      306
    ],
    [
      309,
      1303,
      1302,
      1305,
      313,
      310
    ],
    [
      1304,
      1307,
      317,
      314,
      313,
      1305
    ],
    [
      317,
      1307,
      1306,
      1308,
      321,
      318
    ],
    [
      321,
      1308,
      1309,
      1311,
      323,
      322
    ],
    [
      1310,
      1313,
      327,
      324,
      323,
      1311
    ],
    [
      328,
      327,
      1313,
      1312,
      1315,
      331
    ],
    [
      1316,
      335,
      332,
      331,
      1315,
      1314
    ],
    [
      1316,
      1317,
      1319,
      339,
      336,
      335
    ],
    [
      1320,
      343,
      340,
      339,
      1319,
      1318
    ],
    [
      1320,
      1321,
      1322,
      347,
      344,
      343
    ],
    [
      1322,
      1323,
      1325,
      351,
      348,
      347
    ],
    [
      1326,
      357,
      352,
      351,
      1325,
      1324
    ],
    [
      1326,
      1327,
      1329,
      359,
      358,
      357
    ],
    [
      360,
      359,
      1329,
      1328,
      1330,
      363
    ],
    [
      364,
      363,
      1330,
      1331,
      1332,
      366
    ],
    [
      367,
      366,
      1332,
      1333,
      1334,
      371
    ],
    [
      372,
      371,
      1334,
      1335,
      1337,
      375
    ],
    [
      376,
      375,
      1337,
      1336,
      1339,
      378
    ],
    [
      1339,
      1338,
      1341,
      379,
      378
    ],
    [
      380,
      379,
      1341,
      1340,
      1343,
      383
    ],
    [
      1342,
      1344,
      388,
      384,
      383,
      1343
    ],
    [
      389,
      387,
      388,
      1344,
      1026,
      1025,
      1030,
      1035,
      390
    ],
    [
      1036,
      1041,
      1347,
      393,
      391,
      390,
      1035,
      1034
    ],
    [
      1346,
      398,
      394,
      393,
      1347
    ],
    [
      403,
      399,
      398,
      1346,
      1345,
      1350
    ],
    [
      403,
      1350,
      1349,
      405,
      404
    ],
    [
      1553,
      1353,
      1354,
      1356,
      1554
    ],
    [
      1555,
      1554,
      1356,
      1355,
      1359,
      1556
    ],
    [
      1363,
      1557,
      1556,
      1359,
      1358
    ],
    [
      1558,
      1559,
      1557,
      1363,
      1362,
      1367
    ],
    [
      1558,
      1367,
      1366,
      1369,
      1371,
      1560
    ],
    [
      1371,
      1374,
      1378,
      1561,
      1562,
      1560
    ],
    [
      1379,
      1563,
      1564,
      1561,
      1378,
      1377
    ],
    [
      1379,
      1382,
      1385,
      1565,
      1566,
      1563
    ],
    [
      1567,
      1565,
      1385,
      1384,
      1391,
      1568
    ],
    [
      1568,
      1391,
      1390,
      1569,
      1570,
      1571
    ],
    [
      1569,
      1572,
      1573,
      1574,
      1570
    ],
    [
      1575,
      1576,
      1577,
      1573,
      1572,
      1578
    ],
    [
      1575,
      1579,
      1580,
      1581,
      1576
    ],
    [
      1399,
      1402,
      1403,
      1582,
      1583,
      1584,
      1580,
      1579
    ],
    [
      1582,
      1585,
      1586,
      1587,
      1583
    ],
    [
      1588,
      1589,
      1590,
      1586,
      1585,
      1591
    ],
    [
      1592,
      1589,
      1588,
      1593,
      1594,
      1595
    ],
    [
      1595,
      1594,
      1596,
      1597,
      1598,
      1599
    ],
    [
      1600,
      1598,
      1597,
      1601,
      1602,
      1603
    ],
    [
      1602,
      1604,
      1605,
      1606,
      1607,
      1603
    ],
    [
      1608,
      1609,
      1607,
      1606,
      1610,
      1611
    ],
    [
      1612,
      1613,
      1614,
      1608,
      1611,
      1615,
      1616
    ],
    [
      1617,
      1618,
      1619,
      1620,
      1613,
      1612
    ],
    [
      1621,
      1622,
      1623,
      1624,
      1619,
      1618,
      1625
    ],
    [
      419,
      418,
      1053,
      1352,
      426,
      422
    ],
    [
      1553,
      428,
      427,
      426,
      1352,
      1351,
      1353
    ],
    [
      429,
      428,
      1553,
      1554,
      1555,
      433
    ],
    [
      434,
      433,
      1555,
      1556,
      1557,
      1559,
      437
    ],
    [
      438,
      437,
      1559,
      1558,
      1560,
      1562,
      439
    ],
    [
      440,
      439,
      1562,
      1561,
      1564,
      443
    ],
    [
      444,
      443,
      1564,
      1563,
      1566,
      447
    ],
    [
      448,
      447,
      1566,
      1565,
      1567,
      450
    ],
    [
      451,
      450,
      1567,
      1568,
      1571,
      454
    ],
    [
      455,
      454,
      1571,
      1570,
      1574,
      458
    ],
    [
      459,
      458,
      1574,
      1573,
      1577,
      462
    ],
    [
      463,
      462,
      1577,
      1576,
      1581,
      467
    ],
    [
      468,
      467,
      1581,
      1580,
      1584,
      471
    ],
    [
      472,
      471,
      1584,
      1583,
      1587,
      475
    ],
    [
      476,
      475,
      1587,
      1586,
      1590,
      478
    ],
    [
      1592,
      479,
      478,
      1590,
      1589
    ],
    [
      483,
      480,
      479,
      1592,
      1595,
      1599,
      486
    ],
    [
      487,
      486,
      1599,
      1598,
      1600,
      490
    ],
    [
      1600,
      1603,
      1607,
      1609,
      491,
      490
    ],
    [
      492,
      491,
      1609,
      1608,
      1614,
      496
    ],
    [
      496,
      1614,
      1613,
      1620,
      498,
      497
    ],
    [
      499,
      498,
      1620,
      1619,
      1624
    ],
    [
      515,
      519,
      521,
      1626,
      1627,
      516
    ],
    [
      521,
      520,
      523,
      1628,
      1629,
      1626
    ],
    [
      522,
      525,
      1630,
      1631,
      1628,
      523
    ],
    [
      524,
      527,
      1632,
      1633,
      1630,
      525
    ],
    [
      526,
      529,
      1634,
      1635,
      1636,
      1632,
      527
    ],
    [
      529,
      528,
      531,
      1637,
      1638,
      1634
    ],
    [
      530,
      533,
      1639,
      1637,
      531
    ],
    [
      1640,
      1641,
      1639,
      533,
      532,
      536
    ],
    [
      1640,
      536,
      535,
      1642,
      1643
    ],
    [
      538,
      1644,
      1645,
      1642,
      535,
      534
    ],
    [
      538,
      537,
      539,
      542,
      1646,
      1647,
      1644
    ],
    [
      1648,
      1646,
      542,
      541,
      1649,
      1650
    ],
    [
      1651,
      1652,
      1649,
      541,
      540,
      545
    ],
    [
      1653,
      1654,
      1651,
      545,
      544
    ],
    [
      1653,
      544,
      543,
      547,
      1655
    ],
    [
      547,
      546,
      549,
      1656,
      1657,
      1655
    ],
    [
      551,
      1658,
      1659,
      1656,
      549,
      548
    ],
    [
      551,
      550,
      552,
      554,
      1660,
      1661,
      1658
    ],
    [
      553,
      556,
      1662,
      1663,
      1660,
      554
    ],
    [
      555,
      558,
      1664,
      1665,
      1662,
      556
    ],
    [
      557,
      560,
      1666,
      1667,
      1664,
      558
    ],
    [
      1668,
      1666,
      560,
      559,
      562
    ],
    [
      1668,
      562,
      561,
      563,
      565,
      1669,
      1670
    ],
    [
      1669,
      565,
      564,
      567,
      1671,
      1672
    ],
    [
      566,
      569,
      1673,
      1674,
      1671,
      567
    ],
    [
      572,
      1675,
      1676,
      1673,
      569,
      568
    ],
    [
      1677,
      1678,
      1675,
      572,
      571,
      575
    ],
    [
      1679,
      1680,
      1677,
      575,
      574,
      579
    ],
    [
      1679,
      579,
      578,
      583,
      1681,
      1682
    ],
    [
      1683,
      1681,
      583,
      582,
      587,
      1684
    ],
    [
      586,
      589,
      1685,
      1684,
      587
    ],
    [
      588,
      595,
      1686,
      1687,
      1685,
      589
    ],
    [
      595,
      594,
      599,
      1688,
      1689,
      1686
    ],
    [
      603,
      1690,
      1691,
      1688,
      599,
      598
    ],
    [
      603,
      602,
      606,
      1692,
      1693,
      1690
    ],
    [
      606,
      605,
      611,
      1694,
      1695,
      1692
    ],
    [
      611,
      610,
      614,
      1696,
      1697,
      1694
    ],
    [
      614,
      613,
      619,
      1698,
      1699,
      1696
    ],
    [
      618,
      623,
      1700,
      1701,
      1698,
      619
    ],
    [
      622,
      627,
      1702,
      1703,
      1700,
      623
    ],
    [
      627,
      626,
      631,
      1704,
      1705,
      1702
    ],
    [
      631,
      630,
      635,
      1706,
      1707,
      1704
    ],
    [
      634,
      639,
      1708,
      1709,
      1706,
      635
    ],
    [
      638,
      643,
      1710,
      1711,
      1708,
      639
    ],
    [
      643,
      642,
      647,
      1712,
      1710
    ],
    [
      647,
      646,
      651,
      1713,
      1714,
      1712
    ],
    [
      651,
      650,
      655,
      1715,
      1716,
      1713
    ],
    [
      655,
      654,
      659,
      1717,
      1715
    ],
    [
      1718,
      1717,
      659,
      658,
      1719,
      1720,
      1721,
      1722
    ],
    [
      505,
      508,
      1723,
      1724,
      1725,
      506
    ],
    [
      507,
      510,
      1726,
      1727,
      1723,
      508
    ],
    [
      509,
      512,
      1728,
      1729,
      1726,
      510
    ],
    [
      512,
      511,
      514,
      1730,
      1731,
      1728
    ],
    [
      514,
      513,
      518,
      1732,
      1733,
      1730
    ],
    [
      518,
      517,
      1734,
      1735,
      1732
    ],
    [
      516,
      1627,
      1736,
      1737,
      1738,
      1734,
      517
    ],
    [
      1739,
      1740,
      1736,
      1627,
      1626,
      1629
    ],
    [
      1739,
      1629,
      1628,
      1631,
      1741,
      1742
    ],
    [
      1630,
      1633,
      1743,
      1744,
      1741,
      1631
    ],
    [
      1636,
      1745,
      1746,
      1743,
      1633,
      1632
    ],
    [
      1747,
      1748,
      1745,
      1636,
      1635
    ],
    [
      1638,
      1749,
      1750,
      1751,
      1747,
      1635,
      1634
    ],
    [
      1752,
      1753,
      1754,
      1750,
      1749
    ],
    [
      1755,
      1756,
      1753,
      1752,
      1757,
      1758
    ],
    [
      1759,
      1760,
      1761,
      1755,
      1758,
      1762
    ],
    [
      1763,
      1764,
      1765,
      1760,
      1759,
      1766
    ],
    [
      1767,
      1768,
      1769,
      1770,
      1771,
      1764,
      1763
    ],
    [
      1772,
      1773,
      1769,
      1768,
      1774
    ],
    [
      1775,
      1776,
      1777,
      1772,
      1774,
      1778
    ],
    [
      1779,
      1780,
      1776,
      1775,
      1781,
      1782
    ],
    [
      1779,
      1782,
      1783,
      1784,
      1785,
      1786,
      1787
    ],
    [
      1786,
      1785,
      1788,
      1789,
      1790,
      1791
    ],
    [
      1792,
      1790,
      1789,
      1793,
      1794,
      1795
    ],
    [
      1796,
      1797,
      1798,
      1795,
      1794
    ],
    [
      1799,
      1800,
      1801,
      1802,
      1798,
      1797
    ],
    [
      1803,
      1804,
      1805,
      1801,
      1800,
      1806
    ],
    [
      1803,
      1807,
      1808,
      1809,
      1810,
      1804
    ],
    [
      1811,
      1812,
      1813,
      1814,
      1809,
      1808,
      1815
    ],
    [
      1816,
      1817,
      1818,
      1813,
      1812,
      1819
    ],
    [
      1820,
      1817,
      1816,
      1821,
      1822,
      1823
    ],
    [
      1824,
      1823,
      1822,
      1825,
      1826,
      1827
    ],
    [
      1828,
      1829,
      1830,
      1831,
      1827,
      1826,
      1832
    ],
    [
      1833,
      1834,
      1835,
      1836,
      1837
    ],
    [
      1838,
      1839,
      1840,
      1834,
      1833,
      1841,
      1842
    ],
    [
      1838,
      1842,
      1843,
      1844,
      1845,
      1846,
      1847
    ],
    [
      1848,
      1849,
      1850,
      1851,
      1852,
      1853,
      1854,
      1855
    ],
    [
      1856,
      1857,
      1858,
      1859,
      1852,
      1851
    ],
    [
      1860,
      1861,
      1862,
      1863,
      1864,
      1865
    ],
    [
      1860,
      1866,
      1867,
      1861
    ],
    [
      1866,
      1868,
      1869,
      1870,
      1867
    ],
    [
      1868,
      1871,
      1872,
      1873,
      1874,
      1869
    ],
    [
      1875,
      1876,
      1877,
      1878,
      1873,
      1872
    ],
    [
      1879,
      1880,
      1881,
      1882
    ],
    [
      668,
      1883,
      1879,
      1882,
      1720,
      1719,
      669
    ],
    [
      660,
      667,
      669,
      1719,
      658,
      657
    ],
    [
      1883,
      1884,
      1885,
      1886,
      1880,
      1879
    ],
    [
      668,
      670,
      675,
      1887,
      1888,
      1884,
      1883
    ],
    [
      1438,
      1889,
      1890,
      1891,
      1892,
      1893,
      1439
    ],
    [
      1438,
      1437,
      1894,
      1895,
      1889
    ],
    [
      1436,
      1440,
      1442,
      1896,
      1894,
      1437
    ],
    [
      1897,
      1896,
      1442,
      1441,
      1444
    ],
    [
      1897,
      1444,
      1443,
      1446,
      1898,
      1899
    ],
    [
      1900,
      1901,
      1898,
      1446,
      1445,
      1448
    ],
    [
      1900,
      1448,
      1447,
      1450,
      1902,
      1903
    ],
    [
      1449,
      1452,
      1904,
      1905,
      1902,
      1450
    ],
    [
      1906,
      1904,
      1452,
      1451,
      1454,
      1907
    ],
    [
      1454,
      1453,
      1455,
      1459,
      1908,
      1907
    ],
    [
      1457,
      1456,
      1460,
      1462,
      1909,
      1910,
      1911
    ],
    [
      1462,
      1461,
      1464,
      1912,
      1909
    ],
    [
      1913,
      1914,
      1912,
      1464,
      1463,
      1466
    ],
    [
      1913,
      1466,
      1465,
      1468,
      1915,
      1916
    ],
    [
      1467,
      1470,
      1917,
      1918,
      1915,
      1468
    ],
    [
      1469,
      1472,
      1919,
      1920,
      1917,
      1470
    ],
    [
      1471,
      1474,
      1921,
      1922,
      1919,
      1472
    ],
    [
      1474,
      1473,
      1476,
      1923,
      1924,
      1921
    ],
    [
      1475,
      1478,
      1925,
      1926,
      1923,
      1476
    ],
    [
      1477,
      1480,
      1927,
      1928,
      1925,
      1478
    ],
    [
      1480,
      1479,
      1482,
      1929,
      1930,
      1931,
      1927
    ],
    [
      1483,
      1932,
      1933,
      1929,
      1482,
      1481
    ],
    [
      1483,
      1484,
      1486,
      1934,
      1935,
      1932
    ],
    [
      1487,
      1936,
      1937,
      1934,
      1486,
      1485
    ],
    [
      1487,
      1488,
      1490,
      1938,
      1939,
      1936
    ],
    [
      1489,
      1492,
      1940,
      1938,
      1490
    ],
    [
      1941,
      1940,
      1492,
      1491,
      1494
    ],
    [
      1495,
      1497,
      1942,
      1943,
      1941,
      1494,
      1493
    ],
    [
      1873,
      1878,
      1944,
      1945,
      1874
    ],
    [
      1946,
      1944,
      1878,
      1877,
      1947
    ],
    [
      1876,
      1881,
      1880,
      1886,
      1948,
      1947,
      1877
    ],
    [
      1886,
      1885,
      1949,
      1950,
      1951,
      1952,
      1948
    ],
    [
      1884,
      1888,
      1953,
      1949,
      1885
    ],
    [
      1887,
      1954,
      1955,
      1953,
      1888
    ],
    [
      1887,
      675,
      674,
      1956,
      1954
    ],
    [
      674,
      673,
      1957,
      1958,
      1956
    ],
    [
      672,
      1439,
      1893,
      1959,
      1957,
      673
    ],
    [
      696,
      695,
      1960,
      698
    ],
    [
      1961,
      1962,
      702,
      701,
      1963,
      699,
      698,
      1960
    ],
    [
      706,
      1964,
      1965,
      1966,
      1967,
      1968,
      707
    ],
    [
      716,
      712,
      711,
      1968,
      1967,
      1969
    ],
    [
      716,
      1969,
      1970,
      1971,
      719,
      717
    ],
    [
      1970,
      1972,
      1973,
      1974,
      1975,
      1971
    ],
    [
      1976,
      1977,
      1978,
      1979,
      1980,
      1981
    ],
    [
      1982,
      1983,
      1984,
      1985,
      1986
    ],
    [
      1987,
      1988,
      1989,
      1984,
      1983,
      1990,
      1991
    ],
    [
      1992,
      1993,
      1994,
      1995,
      1996,
      1997
    ],
    [
      1998,
      1996,
      1995,
      1999,
      2000,
      2001
    ],
    [
      2002,
      2001,
      2000,
      2003,
      2004,
      2005,
      2006
    ],
    [
      2002,
      2006,
      2007,
      2008,
      2009
    ],
    [
      2010,
      2011,
      2012,
      2008,
      2007
    ],
    [
      2010,
      2013,
      2014,
      2015,
      2016,
      2011
    ],
    [
      2017,
      2018,
      2019,
      2020,
      2021,
      2022,
      2015,
      2014
    ],
    [
      2023,
      2024,
      2021,
      2020,
      2025
    ],
    [
      2023,
      2025,
      1952,
      1951,
      2026,
      2027
    ],
    [
      2028,
      2026,
      1951,
      1950
    ],
    [
      2029,
      2028,
      1950,
      1949,
      1953,
      1955,
      2030
    ],
    [
      1958,
      2031,
      2032,
      2033,
      2030,
      1955,
      1954,
      1956
    ],
    [
      2034,
      2035,
      2031,
      1958,
      1957,
      1959
    ],
    [
      2036,
      2037,
      2034,
      1959,
      1893,
      1892
    ],
    [
      2036,
      1892,
      1891,
      2038,
      2039,
      2040
    ],
    [
      2041,
      2042,
      705,
      704,
      709
    ],
    [
      708,
      2043,
      2044,
      2041,
      709
    ],
    [
      2045,
      2046,
      2044,
      2043
    ],
    [
      2045,
      710,
      715,
      2047,
      2048,
      2046
    ],
    [
      2049,
      722,
      721,
      726,
      2050,
      2051
    ],
    [
      725,
      2052,
      2050,
      726
    ],
    [
      2053,
      2052,
      725,
      724,
      727,
      2054
    ],
    [
      2053,
      2054,
      2055,
      2056,
      2057,
      2058
    ],
    [
      708,
      707,
      1968,
      711,
      710,
      2045,
      2043
    ],
    [
      719,
      1971,
      1975,
      2059,
      2060,
      728,
      723,
      720
    ],
    [
      2061,
      731,
      730,
      2062,
      2063,
      2064
    ],
    [
      2061,
      2065,
      2066,
      733,
      732,
      731
    ],
    [
      736,
      735,
      734,
      733,
      2066,
      2067,
      2068
    ],
    [
      736,
      2068,
      2069,
      2070,
      738,
      737
    ],
    [
      740,
      739,
      738,
      2070,
      2071,
      2072
    ],
    [
      740,
      2072,
      2073,
      742,
      741
    ],
    [
      743,
      742,
      2073,
      2074,
      2075,
      744
    ],
    [
      744,
      2075,
      2076,
      2077,
      745
    ],
    [
      746,
      745,
      2077,
      2078,
      2079,
      747
    ],
    [
      748,
      747,
      2079,
      2080,
      2081,
      749
    ],
    [
      750,
      749,
      2081,
      2082,
      2083,
      751
    ],
    [
      754,
      753,
      752,
      751,
      2083,
      2084,
      2085
    ],
    [
      754,
      2085,
      2086,
      2087,
      756,
      755
    ],
    [
      758,
      757,
      756,
      2087,
      2088
    ],
    [
      759,
      758,
      2088,
      2089,
      2090,
      760
    ],
    [
      2091,
      2092,
      763,
      761,
      760,
      2090
    ],
    [
      762,
      763,
      2092,
      2093,
      2094,
      764
    ],
    [
      765,
      764,
      2094,
      2095,
      2096,
      2097,
      2098,
      766
    ],
    [
      2098,
      2097,
      2099,
      2100,
      2101
    ],
    [
      2102,
      2103,
      2101,
      2100,
      2104,
      2105
    ],
    [
      2102,
      2105,
      2106,
      2107,
      2108,
      2109
    ],
    [
      2110,
      2108,
      2107,
      2111,
      2112,
      2113
    ],
    [
      2114,
      2115,
      2116,
      2113,
      2112,
      2117
    ],
    [
      2114,
      2118,
      2119,
      2120,
      2121,
      2115
    ],
    [
      2120,
      2119,
      2122,
      2123,
      2124
    ],
    [
      2125,
      2126,
      2124,
      2123,
      2127,
      2128
    ],
    [
      2129,
      2125,
      2128,
      2130,
      2131,
      2132
    ],
    [
      2132,
      2131,
      2133,
      2134,
      2135,
      2136
    ],
    [
      2137,
      2138,
      2139,
      2140,
      2135,
      2134
    ],
    [
      2141,
      2142,
      2139,
      2138,
      2143,
      2144
    ],
    [
      2141,
      2144,
      2145,
      2146,
      2147,
      2148
    ],
    [
      2147,
      2146,
      2149,
      2150,
      2151,
      2152
    ],
    [
      2153,
      2154,
      2155,
      2156,
      2151,
      2150
    ],
    [
      2157,
      2158,
      2159,
      2155,
      2154,
      2160
    ],
    [
      2161,
      2162,
      2163,
      2164,
      2158,
      2157
    ],
    [
      2165,
      2166,
      2167,
      2168,
      2163,
      2162,
      2169
    ],
    [
      2170,
      2166,
      2165,
      2171,
      2172
    ],
    [
      2173,
      2174,
      2172,
      2171,
      2175,
      2176
    ],
    [
      2173,
      2176,
      2177,
      2178,
      2179
    ],
    [
      2180,
      2181,
      2182,
      2178,
      2177
    ],
    [
      2180,
      2183,
      2184,
      2185,
      2186,
      2181
    ],
    [
      2187,
      2188,
      2189,
      2184,
      2183,
      2190,
      2191,
      2192
    ],
    [
      2193,
      2194,
      2195,
      2196,
      2192,
      2191,
      2197
    ],
    [
      2193,
      2197,
      2198,
      2199,
      2200,
      2201,
      2202
    ],
    [
      2203,
      2204,
      2200,
      2199,
      2205,
      2206
    ],
    [
      2203,
      2206,
      2207,
      2208,
      2209
    ],
    [
      2210,
      2211,
      2209,
      2208,
      2212,
      2213
    ],
    [
      2210,
      2213,
      2214,
      2215,
      2216,
      2217
    ],
    [
      2218,
      2216,
      2215,
      2219,
      2220,
      2221
    ],
    [
      2220,
      2222,
      2223,
      2224,
      2225,
      2221
    ],
    [
      2223,
      2226,
      2227,
      2228,
      2229,
      2230,
      2224
    ],
    [
      2231,
      2232,
      2233,
      2228,
      2227,
      2234
    ],
    [
      2231,
      2235,
      2236,
      2237,
      2238,
      2232
    ],
    [
      2236,
      2239,
      2240,
      2241,
      2237
    ],
    [
      2242,
      2243,
      2240,
      2239,
      2244,
      2245
    ],
    [
      2242,
      2245,
      2246,
      2247,
      2248,
      2249
    ],
    [
      2250,
      2251,
      2252,
      2253,
      2248,
      2247
    ],
    [
      2254,
      2252,
      2251,
      2255,
      2256,
      2257
    ],
    [
      2258,
      2259,
      2260,
      2257,
      2256,
      2261
    ],
    [
      2262,
      2259,
      2258,
      2263,
      2264,
      2265
    ],
    [
      2264,
      2266,
      2267,
      2268,
      2269,
      2265
    ],
    [
      2270,
      2271,
      2268,
      2267,
      2272,
      2273
    ],
    [
      2270,
      2273,
      2274,
      2275,
      2276,
      2277
    ],
    [
      2278,
      2279,
      2280,
      2281,
      2276,
      2275
    ],
    [
      2280,
      2279,
      2282,
      2283,
      2284,
      2285
    ],
    [
      2286,
      2287,
      2284,
      2283,
      2288,
      2289
    ],
    [
      2290,
      2291,
      2286,
      2289,
      2292,
      2293
    ],
    [
      2290,
      2293,
      2294,
      2295,
      2296,
      2297
    ],
    [
      2298,
      2296,
      2295,
      2299,
      2300,
      2301
    ],
    [
      2300,
      2302,
      2303,
      2304,
      2305,
      2301
    ],
    [
      2306,
      2307,
      2308,
      2309,
      2304,
      2303
    ],
    [
      2310,
      2311,
      2308,
      2307,
      2312,
      2313
    ],
    [
      2310,
      2313,
      2314,
      2315,
      2316,
      2317
    ],
    [
      2318,
      2319,
      2320,
      2316,
      2315,
      2321
    ],
    [
      2318,
      2322,
      2323,
      2324,
      2325,
      2319
    ],
    [
      2326,
      2324,
      2323,
      2327,
      2328,
      2329
    ],
    [
      2330,
      2331,
      2332,
      2333,
      2329,
      2328
    ],
    [
      2334,
      2332,
      2331,
      2335,
      2336
    ],
    [
      2337,
      2334,
      2336,
      2338,
      2339
    ],
    [
      2340,
      2339,
      2338,
      2341,
      2342,
      2343
    ],
    [
      2344,
      2345,
      2346,
      2347,
      2348,
      2343,
      2342
    ],
    [
      2349,
      2350,
      2347,
      2346,
      2351,
      2352
    ],
    [
      2349,
      2352,
      2353,
      2354,
      2355,
      2356
    ],
    [
      2355,
      2354,
      2357,
      2358,
      2359,
      2360
    ],
    [
      2361,
      2360,
      2359,
      2362,
      2363,
      2364
    ],
    [
      2365,
      2364,
      2363,
      2366,
      2367,
      2368
    ],
    [
      2369,
      2370,
      2368,
      2367,
      2371,
      2372,
      2373
    ],
    [
      2369,
      2373,
      2374,
      2375,
      2376,
      2377
    ],
    [
      2378,
      2379,
      2380,
      2381,
      2376,
      2375
    ],
    [
      2382,
      2380,
      2379,
      2383
    ],
    [
      2382,
      2383,
      2384,
      2385,
      2386,
      2387
    ],
    [
      2388,
      2389,
      2386,
      2385,
      2390
    ],
    [
      2388,
      2391,
      2392,
      2393,
      2394,
      2389
    ],
    [
      2395,
      2396,
      2393,
      2392
    ],
    [
      2395,
      2397,
      2398,
      2399,
      2396
    ],
    [
      2400,
      2401,
      2402,
      2403,
      2399,
      2398
    ],
    [
      2402,
      2401,
      2404,
      2405
    ],
    [
      2406,
      2405,
      2404,
      2407,
      2408,
      2409
    ],
    [
      1047,
      2409,
      2408,
      2410,
      2411,
      2412,
      2413,
      1048
    ],
    [
      2414,
      2415,
      2416,
      2417,
      2418,
      2419
    ],
    [
      2414,
      2419,
      2420,
      2421,
      2422,
      2423,
      2424
    ],
    [
      2425,
      2426,
      2427,
      2428,
      2429,
      2422,
      2421,
      2430,
      2431,
      2432
    ],
    [
      2433,
      2434,
      2431,
      2430,
      2435,
      2436
    ],
    [
      2437,
      2433,
      2436,
      2438,
      2439,
      2440,
      2441
    ],
    [
      2442,
      2440,
      2439,
      2443,
      2444
    ],
    [
      2445,
      2444,
      2443,
      2446,
      2447,
      2448
    ],
    [
      2449,
      2450,
      2451,
      2448,
      2447,
      2452
    ],
    [
      2449,
      2453,
      2454,
      2455,
      2450
    ],
    [
      2456,
      2457,
      2458,
      2459,
      2454,
      2453
    ],
    [
      2460,
      2458,
      2457,
      2461,
      2462,
      2463
    ],
    [
      2464,
      2465,
      2466,
      2467,
      2468,
      2463,
      2462
    ],
    [
      2466,
      2465,
      2469,
      2470,
      2471,
      2472
    ],
    [
      2471,
      2470,
      2473,
      2474,
      2475,
      2476
    ],
    [
      2475,
      2474,
      2477,
      2478,
      2479,
      2480
    ],
    [
      2479,
      2478,
      2481,
      2482,
      2483,
      2484
    ],
    [
      2483,
      2482,
      2485,
      2486,
      2487,
      2488
    ],
    [
      2489,
      2490,
      2487,
      2486,
      2491,
      2492
    ],
    [
      2489,
      2492,
      2493,
      2494,
      2495
    ],
    [
      2494,
      2493,
      2496,
      2497,
      2498,
      2499
    ],
    [
      2500,
      2501,
      2502,
      2503,
      2498,
      2497
    ],
    [
      2500,
      2504,
      2505,
      2506,
      2507,
      2501
    ],
    [
      2506,
      2505,
      2508,
      2509,
      2510
    ],
    [
      2508,
      2511,
      2512,
      2513,
      2514,
      2509
    ],
    [
      2515,
      2516,
      2517,
      2513,
      2512,
      2518
    ],
    [
      2519,
      2520,
      2521,
      2522,
      2516,
      2515
    ],
    [
      2523,
      2524,
      2525,
      2526,
      2521,
      2520
    ],
    [
      2524,
      2527,
      2528,
      2529,
      2525
    ],
    [
      2529,
      2528,
      2530,
      2531,
      2532,
      2533
    ],
    [
      2098,
      2101,
      2103,
      769,
      768,
      767,
      766
    ],
    [
      770,
      769,
      2103,
      2102,
      2109
    ],
    [
      770,
      2109,
      2108,
      2110,
      772,
      771
    ],
    [
      774,
      773,
      772,
      2110,
      2113,
      2116
    ],
    [
      775,
      774,
      2116,
      2115,
      2121,
      779
    ],
    [
      779,
      2121,
      2120,
      2124,
      2126,
      781,
      780
    ],
    [
      2129,
      786,
      782,
      781,
      2126,
      2125
    ],
    [
      2129,
      2132,
      2136,
      788,
      787,
      786
    ],
    [
      2135,
      2140,
      795,
      789,
      788,
      2136
    ],
    [
      792,
      795,
      2140,
      2139,
      2142,
      796
    ],
    [
      800,
      797,
      796,
      2142,
      2141,
      2148
    ],
    [
      800,
      2148,
      2147,
      2152,
      806,
      801
    ],
    [
      806,
      2152,
      2151,
      2156,
      810,
      807
    ],
    [
      812,
      811,
      810,
      2156,
      2155,
      2159
    ],
    [
      812,
      2159,
      2158,
      2164,
      817,
      813
    ],
    [
      817,
      2164,
      2163,
      2168,
      820,
      818
    ],
    [
      827,
      821,
      820,
      2168,
      2167
    ],
    [
      2170,
      828,
      824,
      827,
      2167,
      2166
    ],
    [
      2170,
      2172,
      2174,
      835,
      829,
      828
    ],
    [
      2173,
      2179,
      836,
      832,
      835,
      2174
    ],
    [
      836,
      2179,
      2178,
      2182,
      840,
      837
    ],
    [
      841,
      840,
      2182,
      2181,
      2186,
      847
    ],
    [
      851,
      848,
      847,
      2186,
      2185,
      854
    ],
    [
      855,
      854,
      2185,
      2184,
      2189,
      859
    ],
    [
      2189,
      2188,
      860,
      859
    ],
    [
      856,
      860,
      2188,
      2187,
      1259,
      1256,
      1255,
      1254
    ],
    [
      2187,
      2192,
      2196,
      861,
      867,
      1260,
      1259
    ],
    [
      861,
      2196,
      2195,
      862
    ],
    [
      868,
      863,
      862,
      2195,
      2194
    ],
    [
      868,
      2194,
      2193,
      2202,
      873,
      869
    ],
    [
      874,
      873,
      2202,
      2201,
      876
    ],
    [
      884,
      881,
      877,
      876,
      2201,
      2200,
      2204
    ],
    [
      2203,
      2209,
      2211,
      889,
      885,
      884,
      2204
    ],
    [
      2210,
      2217,
      891,
      890,
      889,
      2211
    ],
    [
      892,
      891,
      2217,
      2216,
      2218,
      896
    ],
    [
      897,
      896,
      2218,
      2221,
      2225,
      900
    ],
    [
      901,
      900,
      2225,
      2224,
      2230,
      904
    ],
    [
      905,
      904,
      2230,
      2229,
      908
    ],
    [
      909,
      908,
      2229,
      2228,
      2233,
      915,
      912
    ],
    [
      916,
      915,
      2233,
      2232,
      2238,
      919
    ],
    [
      919,
      2238,
      2237,
      2241,
      923,
      920
    ],
    [
      923,
      2241,
      2240,
      2243,
      927,
      924
    ],
    [
      2242,
      2249,
      932,
      928,
      927,
      2243
    ],
    [
      935,
      933,
      932,
      2249,
      2248,
      2253
    ],
    [
      935,
      2253,
      2252,
      2254,
      942,
      936
    ],
    [
      939,
      942,
      2254,
      2257,
      2260,
      943
    ],
    [
      943,
      2260,
      2259,
      2262,
      947,
      944
    ],
    [
      2262,
      2265,
      2269,
      952,
      948,
      947
    ],
    [
      953,
      952,
      2269,
      2268,
      2271,
      956
    ],
    [
      2270,
      2277,
      960,
      957,
      956,
      2271
    ],
    [
      2277,
      2276,
      2281,
      964,
      961,
      960
    ],
    [
      964,
      2281,
      2280,
      2285,
      968,
      965
    ],
    [
      969,
      968,
      2285,
      2284,
      2287,
      972
    ],
    [
      973,
      972,
      2287,
      2286,
      2291,
      976
    ],
    [
      2290,
      2297,
      980,
      977,
      976,
      2291
    ],
    [
      2298,
      983,
      981,
      980,
      2297,
      2296
    ],
    [
      2298,
      2301,
      2305,
      987,
      984,
      983
    ],
    [
      987,
      2305,
      2304,
      2309,
      991,
      988
    ],
    [
      991,
      2309,
      2308,
      2311,
      997,
      992
    ],
    [
      998,
      997,
      2311,
      2310,
      2317,
      999
    ],
    [
      999,
      2317,
      2316,
      2320,
      1000
    ],
    [
      2319,
      2325,
      1004,
      1001,
      1000,
      2320
    ],
    [
      1009,
      1005,
      1004,
      2325,
      2324,
      2326
    ],
    [
      1009,
      2326,
      2329,
      2333,
      1012,
      1010
    ],
    [
      2337,
      1013,
      1012,
      2333,
      2332,
      2334
    ],
    [
      2337,
      2339,
      2340,
      1018,
      1014,
      1013
    ],
    [
      2340,
      2343,
      2348,
      1019,
      1018
    ],
    [
      1020,
      1019,
      2348,
      2347,
      2350,
      1021
    ],
    [
      2349,
      2356,
      1022,
      1021,
      2350
    ],
    [
      2361,
      1023,
      1022,
      2356,
      2355,
      2360
    ],
    [
      2361,
      2364,
      2365,
      1027,
      1024,
      1023
    ],
    [
      2365,
      2368,
      2370,
      2534,
      1028,
      1027
    ],
    [
      2535,
      2534,
      2370,
      2369,
      2377
    ],
    [
      2535,
      2377,
      2376,
      2381,
      2536,
      2537
    ],
    [
      2382,
      2387,
      2538,
      2539,
      2540,
      2536,
      2381,
      2380
    ],
    [
      2386,
      2389,
      2394,
      2541,
      2542,
      2543,
      2538,
      2387
    ],
    [
      2393,
      2396,
      2399,
      2403,
      2544,
      2545,
      2541,
      2394
    ],
    [
      2406,
      2546,
      2544,
      2403,
      2402,
      2405
    ],
    [
      1055,
      1054,
      2547,
      2416,
      2415,
      2548,
      1057
    ],
    [
      2548,
      2415,
      2414,
      2424,
      2549,
      2550
    ],
    [
      1067,
      2549,
      2424,
      2423,
      2551,
      1068
    ],
    [
      2552,
      2551,
      2423,
      2422,
      2429,
      2553
    ],
    [
      2428,
      2554,
      2555,
      2553,
      2429
    ],
    [
      2428,
      2427,
      2556,
      2554
    ],
    [
      2557,
      2556,
      2427,
      2426,
      2558
    ],
    [
      2425,
      2559,
      2560,
      2561,
      2558,
      2426
    ],
    [
      2425,
      2432,
      2562,
      2563,
      2559
    ],
    [
      2564,
      2562,
      2432,
      2431,
      2434,
      2565
    ],
    [
      2566,
      2565,
      2434,
      2433,
      2437,
      2567,
      2568
    ],
    [
      2569,
      2567,
      2437,
      2441,
      2570
    ],
    [
      2441,
      2440,
      2442,
      2571,
      2572,
      2570
    ],
    [
      2571,
      2442,
      2444,
      2445,
      2573,
      2574
    ],
    [
      2573,
      2445,
      2448,
      2451,
      2575,
      2576
    ],
    [
      2575,
      2451,
      2450,
      2455,
      2577,
      2578
    ],
    [
      2577,
      2455,
      2454,
      2459,
      2579,
      2580
    ],
    [
      2579,
      2459,
      2458,
      2460,
      2581,
      2582
    ],
    [
      2581,
      2460,
      2463,
      2468,
      2583,
      2584
    ],
    [
      2583,
      2468,
      2467,
      2585,
      2586
    ],
    [
      2585,
      2467,
      2466,
      2472,
      2587,
      2588
    ],
    [
      2589,
      2587,
      2472,
      2471,
      2476,
      2590
    ],
    [
      2590,
      2476,
      2475,
      2480,
      2591,
      2592
    ],
    [
      2591,
      2480,
      2479,
      2484,
      2593,
      2594
    ],
    [
      2595,
      2596,
      2593,
      2484,
      2483,
      2488,
      2597
    ],
    [
      2597,
      2488,
      2487,
      2490,
      2598,
      2599
    ],
    [
      2489,
      2495,
      2600,
      2601,
      2598,
      2490
    ],
    [
      2494,
      2499,
      2602,
      2603,
      2600,
      2495
    ],
    [
      2602,
      2499,
      2498,
      2503,
      2604,
      2605
    ],
    [
      2604,
      2503,
      2502,
      2606,
      2607
    ],
    [
      2501,
      2507,
      2608,
      2609,
      2606,
      2502
    ],
    [
      2506,
      2510,
      2610,
      2611,
      2608,
      2507
    ],
    [
      2610,
      2510,
      2509,
      2514,
      2612,
      2613
    ],
    [
      2612,
      2514,
      2513,
      2517,
      2614,
      2615
    ],
    [
      2522,
      2616,
      2617,
      2614,
      2517,
      2516
    ],
    [
      2522,
      2521,
      2526,
      2618,
      2619,
      2616
    ],
    [
      2526,
      2525,
      2529,
      2533,
      2620,
      2621,
      2622,
      2618
    ],
    [
      2620,
      2533,
      2532,
      2623,
      2624,
      2625
    ],
    [
      2535,
      2537,
      1031,
      1029,
      1028,
      2534
    ],
    [
      2536,
      2540,
      1032,
      1031,
      2537
    ],
    [
      2540,
      2539,
      1033,
      1032
    ],
    [
      1036,
      1034,
      1033,
      2539,
      2538,
      2543,
      1037
    ],
    [
      2543,
      2542,
      1038,
      1037
    ],
    [
      1039,
      1038,
      2542,
      2541,
      2545,
      1042
    ],
    [
      2544,
      2546,
      1043,
      1042,
      2545
    ],
    [
      1046,
      1348,
      1044,
      1043,
      2546,
      2406,
      2409,
      1047
    ],
    [
      1049,
      1048,
      2413,
      2547,
      1054,
      1051
    ],
    [
      1057,
      2548,
      2550,
      1066,
      1058
    ],
    [
      1064,
      1066,
      2550,
      2549,
      1067
    ],
    [
      1078,
      1076,
      1074,
      1069,
      1068,
      2551,
      2552
    ],
    [
      1078,
      2552,
      2553,
      2555,
      1082,
      1079
    ],
    [
      1087,
      1083,
      1082,
      2555,
      2554,
      2556,
      2557,
      1093
    ],
    [
      1093,
      2557,
      2558,
      2561,
      1096,
      1094
    ],
    [
      1100,
      1097,
      1096,
      2561,
      2560,
      1103
    ],
    [
      1103,
      2560,
      2559,
      2563,
      1110,
      1104
    ],
    [
      1111,
      1110,
      2563,
      2562,
      2564,
      1114
    ],
    [
      1122,
      1118,
      1115,
      1114,
      2564,
      2565,
      2566
    ],
    [
      1122,
      2566,
      2568,
      1124,
      1123
    ],
    [
      2569,
      1129,
      1125,
      1124,
      2568,
      2567
    ],
    [
      2569,
      2570,
      2572,
      1131,
      1130,
      1129
    ],
    [
      1131,
      2572,
      2571,
      2574,
      1136,
      1132
    ],
    [
      1136,
      2574,
      2573,
      2576,
      1141,
      1137
    ],
    [
      1141,
      2576,
      2575,
      2578,
      1145,
      1142
    ],
    [
      1145,
      2578,
      2577,
      2580,
      1150,
      1146
    ],
    [
      1150,
      2580,
      2579,
      2582,
      1152,
      1151
    ],
    [
      1152,
      2582,
      2581,
      2584,
      1156,
      1153
    ],
    [
      1156,
      2584,
      2583,
      2586,
      1160,
      1157
    ],
    [
      1160,
      2586,
      2585,
      2588,
      1164,
      1161
    ],
    [
      2589,
      1168,
      1165,
      1164,
      2588,
      2587
    ],
    [
      2589,
      2590,
      2592,
      1173,
      1169,
      1168
    ],
    [
      1173,
      2592,
      2591,
      2594,
      1177,
      1174
    ],
    [
      1177,
      2594,
      2593,
      2596,
      1181,
      1178
    ],
    [
      1181,
      2596,
      2595,
      1185,
      1182
    ],
    [
      2595,
      2597,
      2599,
      1189,
      1186,
      1185
    ],
    [
      1189,
      2599,
      2598,
      2601,
      1193,
      1190
    ],
    [
      1193,
      2601,
      2600,
      2603,
      1196,
      1194
    ],
    [
      1196,
      2603,
      2602,
      2605,
      1200,
      1197
    ],
    [
      1200,
      2605,
      2604,
      2607,
      1205,
      1201
    ],
    [
      1205,
      2607,
      2606,
      2609,
      1209,
      1206
    ],
    [
      1209,
      2609,
      2608,
      2611,
      1215,
      1212,
      1210
    ],
    [
      2610,
      2613,
      1222,
      1216,
      1215,
      2611
    ],
    [
      1219,
      1222,
      2613,
      2612,
      2615,
      1223
    ],
    [
      1224,
      1223,
      2615,
      2614,
      2617,
      1227
    ],
    [
      1228,
      1227,
      2617,
      2616,
      2619,
      1231
    ],
    [
      1235,
      1232,
      1231,
      2619,
      2618,
      2622
    ],
    [
      1235,
      2622,
      2621,
      1240,
      1236
    ],
    [
      1240,
      2621,
      2620,
      2625,
      1244,
      1241
    ],
    [
      1244,
      2625,
      2624,
      1249,
      1245
    ],
    [
      1060,
      1059,
      1065,
      1071,
      1360,
      1357
    ],
    [
      1364,
      1361,
      1360,
      1071,
      1070,
      1073,
      2626
    ],
    [
      1075,
      2627,
      2626,
      1073,
      1072
    ],
    [
      1075,
      1077,
      1081,
      2628,
      2629,
      2627
    ],
    [
      1080,
      1086,
      2630,
      2631,
      2628,
      1081
    ],
    [
      1086,
      1085,
      2632,
      2633,
      2634,
      2630
    ],
    [
      2635,
      2636,
      2637,
      2633,
      2632
    ],
    [
      2635,
      1092,
      1091,
      2638,
      2639,
      2636
    ],
    [
      2640,
      2641,
      2642,
      2643,
      2638,
      1091,
      1090
    ],
    [
      2640,
      2644,
      2645,
      2646,
      2647,
      2641
    ],
    [
      2648,
      2649,
      2650,
      2645,
      2644,
      2651,
      2652
    ],
    [
      2648,
      2652,
      2653,
      2654,
      2655,
      2656
    ],
    [
      2654,
      2657,
      2658,
      2655
    ],
    [
      2659,
      2660,
      2661,
      2662,
      2663,
      2664,
      2665
    ],
    [
      2659,
      2666,
      2667,
      2668,
      2660
    ],
    [
      2667,
      2669,
      2670,
      2671,
      2672,
      2673,
      2668
    ],
    [
      2670,
      2674,
      2675,
      2671
    ],
    [
      2676,
      2677,
      2678,
      2675,
      2674,
      2679,
      2680
    ],
    [
      2635,
      2632,
      1085,
      1084,
      1092
    ],
    [
      2640,
      1090,
      1089,
      2651,
      2644
    ],
    [
      1088,
      1095,
      1099,
      2653,
      2652,
      2651,
      1089
    ],
    [
      1099,
      1098,
      1102,
      2681,
      2682,
      2683,
      2684,
      2657,
      2654,
      2653
    ],
    [
      1101,
      1108,
      2685,
      2686,
      2681,
      1102
    ],
    [
      1107,
      2687,
      2688,
      2685,
      1108
    ],
    [
      1107,
      1106,
      2689,
      2690,
      2691,
      2687
    ],
    [
      1106,
      1105,
      1109,
      2692,
      2693,
      2689
    ],
    [
      1109,
      1112,
      1113,
      2694,
      2695,
      2692
    ],
    [
      1113,
      1116,
      1117,
      2696,
      2697,
      2694
    ],
    [
      1117,
      1119,
      1121,
      2698,
      2699,
      2696
    ],
    [
      1120,
      1127,
      2700,
      2701,
      2698,
      1121
    ],
    [
      1128,
      1135,
      2702,
      2700,
      1127,
      1126
    ],
    [
      2684,
      2665,
      2664,
      2703,
      2658,
      2657
    ],
    [
      2659,
      2665,
      2684,
      2683,
      2666
    ],
    [
      2667,
      2666,
      2683,
      2682,
      2669
    ],
    [
      2686,
      2679,
      2674,
      2670,
      2669,
      2682,
      2681
    ],
    [
      2685,
      2688,
      2680,
      2679,
      2686
    ],
    [
      2676,
      2680,
      2688,
      2687,
      2691,
      2704,
      2705
    ],
    [
      2704,
      2691,
      2690,
      2706,
      2707
    ],
    [
      2708,
      2706,
      2690,
      2689,
      2693
    ],
    [
      2708,
      2693,
      2692,
      2695,
      2709
    ],
    [
      2697,
      2710,
      2711,
      2709,
      2695,
      2694
    ],
    [
      2697,
      2696,
      2699,
      2712,
      2710
    ],
    [
      2701,
      2713,
      2714,
      2712,
      2699,
      2698
    ],
    [
      2701,
      2700,
      2702,
      2715,
      2716,
      2713
    ],
    [
      1135,
      1134,
      2717,
      2718,
      2715,
      2702
    ],
    [
      1133,
      1139,
      2719,
      2720,
      2717,
      1134
    ],
    [
      1140,
      2721,
      2722,
      2719,
      1139,
      1138
    ],
    [
      1140,
      1143,
      1144,
      2723,
      2724,
      2721
    ],
    [
      1144,
      1147,
      1149,
      2725,
      2726,
      2723
    ],
    [
      1148,
      1155,
      2727,
      2728,
      2725,
      1149
    ],
    [
      1154,
      1159,
      2729,
      2730,
      2727,
      1155
    ],
    [
      1158,
      1163,
      2731,
      2732,
      2729,
      1159
    ],
    [
      1162,
      1167,
      2733,
      2734,
      2731,
      1163
    ],
    [
      1166,
      1171,
      2735,
      2736,
      2733,
      1167
    ],
    [
      1171,
      1170,
      1172,
      2737,
      2738,
      2735
    ],
    [
      1172,
      1175,
      1176,
      2739,
      2740,
      2737
    ],
    [
      1176,
      1179,
      1180,
      2741,
      2742,
      2739
    ],
    [
      1180,
      1183,
      1184,
      2743,
      2744,
      2741
    ],
    [
      1184,
      1187,
      1188,
      2745,
      2746,
      2743
    ],
    [
      1188,
      1191,
      1192,
      2747,
      2748,
      2745
    ],
    [
      1192,
      1195,
      1199,
      2749,
      2750,
      2747
    ],
    [
      1198,
      1203,
      2751,
      2752,
      2749,
      1199
    ],
    [
      1203,
      1202,
      1204,
      2753,
      2754,
      2751
    ],
    [
      1204,
      1207,
      1208,
      2755,
      2756,
      2753
    ],
    [
      1208,
      1211,
      1214,
      2757,
      2758,
      2755
    ],
    [
      2759,
      2757,
      1214,
      1213,
      1218,
      2760
    ],
    [
      2761,
      2762,
      2760,
      1218,
      1217,
      1221
    ],
    [
      1226,
      2763,
      2764,
      2761,
      1221,
      1220
    ],
    [
      1226,
      1225,
      1230,
      2765,
      2766,
      2763
    ],
    [
      1230,
      1229,
      1234,
      2767,
      2768,
      2765
    ],
    [
      1234,
      1233,
      1239,
      2769,
      2770,
      2767
    ],
    [
      1239,
      1238,
      2771,
      2772,
      2769
    ],
    [
      1238,
      1237,
      1243,
      2773,
      2774,
      2771
    ],
    [
      1243,
      1242,
      1247,
      2775,
      2776,
      2773
    ],
    [
      1247,
      1246,
      1248,
      2777,
      2778,
      2775
    ],
    [
      1248,
      1251,
      1253,
      2779,
      2780,
      2777
    ],
    [
      1392,
      1398,
      1578,
      1572,
      1569,
      1390,
      1389
    ],
    [
      1575,
      1578,
      1398,
      1397,
      1399,
      1579
    ],
    [
      1582,
      1403,
      1406,
      1407,
      1413,
      1591,
      1585
    ],
    [
      1588,
      1591,
      1413,
      1412,
      1593
    ],
    [
      1594,
      1593,
      1412,
      1411,
      1596
    ],
    [
      1411,
      1410,
      1417,
      1601,
      1597,
      1596
    ],
    [
      1602,
      1601,
      1417,
      1416,
      1604
    ],
    [
      1416,
      1415,
      1421,
      1605,
      1604
    ],
    [
      1606,
      1605,
      1421,
      1420,
      1426,
      1610
    ],
    [
      1611,
      1610,
      1426,
      1425,
      1434,
      1615
    ],
    [
      1364,
      2626,
      2627,
      2629,
      1370,
      1365
    ],
    [
      1368,
      1370,
      2629,
      2628,
      2631,
      1372
    ],
    [
      1373,
      1372,
      2631,
      2630,
      2634,
      1375
    ],
    [
      1375,
      2634,
      2633,
      2637,
      1380,
      1376
    ],
    [
      2639,
      1386,
      1381,
      1380,
      2637,
      2636
    ],
    [
      1383,
      1386,
      2639,
      2638,
      2643,
      1387
    ],
    [
      1387,
      2643,
      2642,
      1393,
      1388
    ],
    [
      1395,
      1394,
      1393,
      2642,
      2641,
      2647
    ],
    [
      1395,
      2647,
      2646,
      1400,
      1396
    ],
    [
      1400,
      2646,
      2645,
      2650,
      1404,
      1401
    ],
    [
      2649,
      1405,
      1404,
      2650
    ],
    [
      1407,
      1406,
      1405,
      2649,
      2648,
      2656,
      1408
    ],
    [
      1414,
      1409,
      1408,
      2656,
      2655,
      2658,
      2703,
      1422
    ],
    [
      1418,
      1422,
      2703,
      2664,
      2663
    ],
    [
      1418,
      2663,
      2662,
      1427,
      1419
    ],
    [
      1428,
      1427,
      2662,
      2661,
      2781
    ],
    [
      1423,
      1428,
      2781,
      2782,
      2783
    ],
    [
      1423,
      2783,
      2784,
      2785,
      1429,
      1424
    ],
    [
      1496,
      1498,
      1500,
      2786,
      2787,
      2788,
      1942,
      1497
    ],
    [
      1499,
      1503,
      2789,
      2790,
      2786,
      1500
    ],
    [
      1502,
      2791,
      2792,
      2789,
      1503
    ],
    [
      2793,
      2794,
      2791,
      1502,
      1501,
      1504,
      1506
    ],
    [
      2793,
      1506,
      1505,
      1508,
      2795,
      2796
    ],
    [
      1507,
      1510,
      2797,
      2798,
      2795,
      1508
    ],
    [
      1512,
      2799,
      2797,
      1510,
      1509
    ],
    [
      1512,
      1511,
      1514,
      2800,
      2801,
      2799
    ],
    [
      1513,
      1516,
      2802,
      2803,
      2800,
      1514
    ],
    [
      1515,
      1517,
      1519,
      2804,
      2805,
      2802,
      1516
    ],
    [
      1521,
      2806,
      2804,
      1519,
      1518
    ],
    [
      1521,
      1520,
      2807,
      2806
    ],
    [
      382,
      386,
      397,
      396,
      2808,
      2809,
      2807,
      1520
    ],
    [
      396,
      395,
      400,
      402,
      1523,
      2810,
      2808
    ],
    [
      1525,
      2811,
      2812,
      2810,
      1523,
      1522
    ],
    [
      415,
      2813,
      2814,
      2815,
      1524,
      412,
      411
    ],
    [
      415,
      414,
      421,
      2816,
      2817,
      2813
    ],
    [
      2816,
      421,
      420,
      424,
      1527,
      2818,
      2819
    ],
    [
      1527,
      1526,
      2820,
      2821,
      2818
    ],
    [
      431,
      430,
      432,
      1529,
      2822,
      2820,
      1526
    ],
    [
      2823,
      2822,
      1529,
      1528,
      1531,
      2824
    ],
    [
      1531,
      1530,
      1533,
      2825,
      2826,
      2824
    ],
    [
      1532,
      1535,
      2827,
      2828,
      2825,
      1533
    ],
    [
      1537,
      2829,
      2830,
      2827,
      1535,
      1534
    ],
    [
      1537,
      1536,
      1539,
      2831,
      2832,
      2829
    ],
    [
      1538,
      1541,
      2833,
      2834,
      2831,
      1539
    ],
    [
      1540,
      1543,
      2835,
      2836,
      2833,
      1541
    ],
    [
      1542,
      1545,
      2837,
      2838,
      2835,
      1543
    ],
    [
      2839,
      2837,
      1545,
      1544,
      1547,
      2840
    ],
    [
      2840,
      1547,
      1546,
      1549,
      2841,
      2842
    ],
    [
      2841,
      1549,
      1548,
      1550,
      1552,
      2843,
      2844
    ],
    [
      1638,
      1637,
      1639,
      1641,
      1757,
      1752,
      1749
    ],
    [
      1640,
      1643,
      1762,
      1758,
      1757,
      1641
    ],
    [
      1643,
      1642,
      1645,
      1766,
      1759,
      1762
    ],
    [
      1767,
      1763,
      1766,
      1645,
      1644,
      1647
    ],
    [
      1767,
      1647,
      1646,
      1648,
      1778,
      1774,
      1768
    ],
    [
      1775,
      1778,
      1648,
      1650,
      1781
    ],
    [
      1781,
      1650,
      1649,
      1652,
      1783,
      1782
    ],
    [
      1651,
      1654,
      1784,
      1783,
      1652
    ],
    [
      1653,
      1655,
      1657,
      1788,
      1785,
      1784,
      1654
    ],
    [
      1656,
      1659,
      1793,
      1789,
      1788,
      1657
    ],
    [
      1796,
      1794,
      1793,
      1659,
      1658,
      1661
    ],
    [
      1799,
      1797,
      1796,
      1661,
      1660,
      1663
    ],
    [
      1799,
      1663,
      1662,
      1665,
      1806,
      1800
    ],
    [
      1803,
      1806,
      1665,
      1664,
      1667,
      1807
    ],
    [
      1668,
      1670,
      1815,
      1808,
      1807,
      1667,
      1666
    ],
    [
      1811,
      1815,
      1670,
      1669,
      1672
    ],
    [
      1811,
      1672,
      1671,
      1674,
      1819,
      1812
    ],
    [
      1816,
      1819,
      1674,
      1673,
      1676,
      1821
    ],
    [
      1678,
      1825,
      1822,
      1821,
      1676,
      1675
    ],
    [
      1677,
      1680,
      1832,
      1826,
      1825,
      1678
    ],
    [
      1679,
      1682,
      1828,
      1832,
      1680
    ],
    [
      1682,
      1681,
      1683,
      2845,
      2846,
      1829,
      1828
    ],
    [
      1683,
      1684,
      1685,
      1687,
      2847,
      2845
    ],
    [
      1687,
      1686,
      1689,
      2848,
      2849,
      2847
    ],
    [
      1691,
      2850,
      2851,
      2848,
      1689,
      1688
    ],
    [
      1691,
      1690,
      1693,
      2852,
      2853,
      2854,
      2850
    ],
    [
      1692,
      1695,
      2855,
      2856,
      2852,
      1693
    ],
    [
      1694,
      1697,
      2857,
      2855,
      1695
    ],
    [
      1696,
      1699,
      2858,
      2859,
      2857,
      1697
    ],
    [
      1701,
      2860,
      2861,
      2858,
      1699,
      1698
    ],
    [
      1701,
      1700,
      1703,
      2862,
      2863,
      2860
    ],
    [
      1703,
      1702,
      1705,
      2864,
      2865,
      2862
    ],
    [
      1705,
      1704,
      1707,
      2866,
      2867,
      2864
    ],
    [
      1707,
      1706,
      1709,
      2868,
      2869,
      2866
    ],
    [
      1709,
      1708,
      1711,
      2870,
      2871,
      2868
    ],
    [
      1711,
      1710,
      1712,
      1714,
      2872,
      2870
    ],
    [
      1714,
      1713,
      1716,
      2873,
      2874,
      2875,
      2872
    ],
    [
      1716,
      1715,
      1717,
      1718,
      2873
    ],
    [
      1724,
      2876,
      2877,
      2878,
      2879,
      1725
    ],
    [
      1724,
      1723,
      1727,
      2880,
      2881,
      2876
    ],
    [
      1727,
      1726,
      1729,
      2882,
      2883,
      2880
    ],
    [
      1729,
      1728,
      1731,
      2884,
      2885,
      2882
    ],
    [
      1731,
      1730,
      1733,
      2886,
      2884
    ],
    [
      2887,
      2888,
      2886,
      1733,
      1732,
      1735
    ],
    [
      2887,
      1735,
      1734,
      1738,
      2889
    ],
    [
      1738,
      1737,
      2890,
      2891,
      2889
    ],
    [
      1736,
      1740,
      2892,
      2893,
      2890,
      1737
    ],
    [
      1739,
      1742,
      2894,
      2895,
      2892,
      1740
    ],
    [
      1741,
      1744,
      2896,
      2897,
      2898,
      2894,
      1742
    ],
    [
      1743,
      1746,
      2899,
      2896,
      1744
    ],
    [
      2900,
      2901,
      2899,
      1746,
      1745,
      1748
    ],
    [
      1747,
      1751,
      2902,
      2903,
      2900,
      1748
    ],
    [
      2904,
      2903,
      2902,
      2905,
      2906
    ],
    [
      2907,
      2908,
      2909,
      2910,
      2906,
      2905
    ],
    [
      2911,
      2909,
      2908,
      2912,
      2913
    ],
    [
      2911,
      2913,
      2914,
      2915,
      2916
    ],
    [
      2915,
      2914,
      2917,
      2918,
      2919
    ],
    [
      2920,
      2919,
      2918,
      2921,
      2922
    ],
    [
      2920,
      2922,
      2923,
      2924,
      2925,
      2926
    ],
    [
      2925,
      2924,
      2927,
      2928,
      2929
    ],
    [
      2930,
      2931,
      2932,
      2933,
      2929,
      2928,
      2934
    ],
    [
      2930,
      2935,
      2936,
      2937,
      2931
    ],
    [
      2937,
      2936,
      2938,
      2939,
      2940
    ],
    [
      2940,
      2939,
      2941,
      2942
    ],
    [
      2943,
      2944,
      2945,
      2946,
      2942,
      2941
    ],
    [
      2947,
      2946,
      2945,
      2948,
      2949,
      2950
    ],
    [
      2949,
      2951,
      2952,
      2953,
      2954,
      2950
    ],
    [
      2955,
      2956,
      2957,
      2953,
      2952,
      2958
    ],
    [
      2959,
      2960,
      2961,
      2962,
      2963,
      2964,
      2965,
      2966,
      2967,
      2968
    ],
    [
      1750,
      1754,
      2907,
      2905,
      2902,
      1751
    ],
    [
      1753,
      1756,
      2912,
      2908,
      2907,
      1754
    ],
    [
      1755,
      1761,
      2917,
      2914,
      2913,
      2912,
      1756
    ],
    [
      1765,
      2921,
      2918,
      2917,
      1761,
      1760
    ],
    [
      1764,
      1771,
      2923,
      2922,
      2921,
      1765
    ],
    [
      2924,
      2923,
      1771,
      1770,
      2969,
      2927
    ],
    [
      2970,
      2971,
      2934,
      2928,
      2927,
      2969
    ],
    [
      2971,
      2972,
      2973,
      2935,
      2930,
      2934
    ],
    [
      2936,
      2935,
      2973,
      2974,
      2975,
      2938
    ],
    [
      2943,
      2941,
      2939,
      2938,
      2975,
      2976,
      2977
    ],
    [
      2978,
      2944,
      2943,
      2977,
      2979
    ],
    [
      2978,
      2980,
      2981,
      2948,
      2945,
      2944
    ],
    [
      2982,
      2983,
      2951,
      2949,
      2948,
      2981
    ],
    [
      2952,
      2951,
      2983,
      2984,
      2985,
      2958
    ],
    [
      2955,
      2958,
      2985,
      2986,
      2987,
      2988
    ],
    [
      2970,
      2969,
      1770,
      1769,
      1773
    ],
    [
      2970,
      1773,
      1772,
      1777,
      2972,
      2971
    ],
    [
      1780,
      2974,
      2973,
      2972,
      1777,
      1776
    ],
    [
      1779,
      1787,
      2976,
      2975,
      2974,
      1780
    ],
    [
      1786,
      1791,
      2979,
      2977,
      2976,
      1787
    ],
    [
      1792,
      2980,
      2978,
      2979,
      1791,
      1790
    ],
    [
      1792,
      1795,
      1798,
      1802,
      2982,
      2981,
      2980
    ],
    [
      1802,
      1801,
      1805,
      2984,
      2983,
      2982
    ],
    [
      1804,
      1810,
      2986,
      2985,
      2984,
      1805
    ],
    [
      1809,
      1814,
      2987,
      2986,
      1810
    ],
    [
      1813,
      1818,
      2988,
      2987,
      1814
    ],
    [
      1820,
      2989,
      2956,
      2955,
      2988,
      1818,
      1817
    ],
    [
      1824,
      2990,
      2991,
      2989,
      1820,
      1823
    ],
    [
      1824,
      1827,
      1831,
      2959,
      2968,
      2990
    ],
    [
      1830,
      2960,
      2959,
      1831
    ],
    [
      1830,
      1829,
      2846,
      2992,
      2961,
      2960
    ],
    [
      1875,
      2993,
      1721,
      1720,
      1882,
      1881,
      1876
    ],
    [
      2994,
      2995,
      2996,
      2997,
      2998,
      2999,
      3000
    ],
    [
      3001,
      3002,
      3003,
      1980,
      1979,
      3004
    ],
    [
      1984,
      1989,
      3005,
      3006,
      3007,
      1985
    ],
    [
      1992,
      1997,
      3008,
      3009,
      3010,
      1988,
      1987
    ],
    [
      1998,
      3011,
      3012,
      3008,
      1997,
      1996
    ],
    [
      1998,
      2001,
      2002,
      2009,
      3013,
      3014,
      3011
    ],
    [
      2008,
      2012,
      3015,
      3013,
      2009
    ],
    [
      2016,
      3016,
      3017,
      3015,
      2012,
      2011
    ],
    [
      2015,
      2022,
      3018,
      3016,
      2016
    ],
    [
      2022,
      2021,
      2024,
      3019,
      3020,
      3018
    ],
    [
      2023,
      2027,
      3021,
      3022,
      3019,
      2024
    ],
    [
      2029,
      3023,
      3024,
      3021,
      2027,
      2026,
      2028
    ],
    [
      2036,
      2040,
      3025,
      3026,
      3027,
      3028,
      2037
    ],
    [
      3029,
      3030,
      3031,
      3025,
      2040,
      2039
    ],
    [
      3032,
      2049,
      2051,
      3033,
      3034
    ],
    [
      3035,
      3036,
      3034,
      3033
    ],
    [
      3035,
      3037,
      3038,
      3039,
      3040,
      3041,
      3042,
      3036
    ],
    [
      3038,
      3043,
      3044,
      3039
    ],
    [
      3045,
      3046,
      3047,
      3044,
      3043
    ],
    [
      3048,
      3047,
      3046,
      3049
    ],
    [
      3048,
      3049,
      3050,
      3051,
      3052,
      3053
    ],
    [
      3054,
      3055,
      3056,
      3057,
      3058,
      3059
    ],
    [
      3060,
      3061,
      3055,
      3054,
      3062
    ],
    [
      3060,
      3062,
      3063,
      3064,
      3065
    ],
    [
      3065,
      3064,
      3066,
      3067,
      3068
    ],
    [
      3069,
      3067,
      3066,
      3070,
      3071,
      3072
    ],
    [
      3071,
      3070,
      3073,
      3074,
      3075,
      3076
    ],
    [
      3076,
      3075,
      3077,
      3078,
      3079
    ],
    [
      3080,
      3078,
      3077,
      3081,
      3082
    ],
    [
      3083,
      3084,
      3080,
      3082,
      3085,
      3086
    ],
    [
      3087,
      3088,
      3083,
      3086,
      3089,
      3090
    ],
    [
      3091,
      3092,
      3093,
      3087,
      3090,
      3094,
      3095
    ],
    [
      3096,
      3091,
      3095,
      3097,
      3098,
      3099
    ],
    [
      3099,
      3098,
      3100,
      3101,
      3102
    ],
    [
      3103,
      3104,
      3105,
      3102,
      3101,
      3106
    ],
    [
      3107,
      3108,
      3103,
      3106,
      3109,
      3110
    ],
    [
      3107,
      3111,
      3112,
      3113,
      3114,
      3115,
      3116,
      3108
    ],
    [
      3113,
      3112,
      3117,
      3118,
      3119,
      3120
    ],
    [
      3121,
      3122,
      3119,
      3118,
      3123
    ],
    [
      3124,
      3125,
      3126,
      3121,
      3123,
      3127,
      3128,
      3129
    ],
    [
      3130,
      3131,
      3132,
      3133,
      3134,
      3135
    ],
    [
      3135,
      3134,
      3136,
      3137,
      3138
    ],
    [
      3139,
      3140,
      3137,
      3136,
      3141,
      3142
    ],
    [
      3139,
      3142,
      3143,
      3144,
      3145,
      3146
    ],
    [
      3145,
      3144,
      3147,
      3148,
      3149,
      3150
    ],
    [
      3149,
      3148,
      3151,
      3152,
      3153,
      3154
    ],
    [
      3155,
      3156,
      3153,
      3152,
      3157,
      3158
    ],
    [
      3159,
      3160,
      3161,
      3162
    ],
    [
      3159,
      3162,
      3163,
      3164,
      3165,
      3166,
      3167,
      3168
    ],
    [
      3169,
      3166,
      3165,
      3170,
      3171
    ],
    [
      3169,
      3171,
      3172,
      3173,
      3174,
      3175
    ],
    [
      3176,
      3177,
      3173,
      3172,
      3178,
      3179
    ],
    [
      3180,
      3181,
      3182,
      3176,
      3179,
      3183,
      3184
    ],
    [
      3185,
      3186,
      3187,
      3188,
      3189,
      3190,
      3191
    ],
    [
      3192,
      3193,
      3194,
      3195,
      3196,
      3197,
      3198
    ],
    [
      3197,
      3199,
      3200,
      3201,
      3198
    ],
    [
      3202,
      3199,
      3197,
      3196,
      1854,
      1853
    ],
    [
      3202,
      1853,
      1852,
      1859,
      3203,
      3204
    ],
    [
      1859,
      1858,
      3205,
      3203
    ],
    [
      3206,
      3207,
      3205,
      1858,
      1857,
      3208
    ],
    [
      1856,
      1864,
      1863,
      3209,
      3208,
      1857
    ],
    [
      1867,
      1870,
      2017,
      2014,
      2013,
      1862,
      1861
    ],
    [
      2017,
      1870,
      1869,
      1874,
      1945,
      2018
    ],
    [
      1946,
      2019,
      2018,
      1945,
      1944
    ],
    [
      1856,
      1851,
      1850,
      3210,
      1865,
      1864
    ],
    [
      3211,
      3212,
      3213,
      3214,
      3215
    ],
    [
      3211,
      3216,
      3217,
      3218,
      3219,
      3212
    ],
    [
      3220,
      3221,
      3218,
      3217,
      3222,
      3223
    ],
    [
      3224,
      3225,
      3226,
      3223,
      3222
    ],
    [
      3227,
      3228,
      3229,
      3226,
      3225,
      3230
    ],
    [
      3229,
      3228,
      3231,
      3232,
      3233
    ],
    [
      3234,
      3195,
      3194,
      3235,
      3232,
      3231
    ],
    [
      3234,
      1855,
      1854,
      3196,
      3195
    ],
    [
      3216,
      1847,
      1846,
      3224,
      3222,
      3217
    ],
    [
      3224,
      1846,
      1845,
      3230,
      3225
    ],
    [
      3227,
      3230,
      1845,
      1844
    ],
    [
      3234,
      3231,
      3228,
      3227,
      1844,
      1843,
      1848,
      1855
    ],
    [
      1897,
      1899,
      3236,
      1895,
      1894,
      1896
    ],
    [
      1899,
      1898,
      1901,
      3237,
      3238,
      3239,
      3236
    ],
    [
      1900,
      1903,
      3240,
      3241,
      3237,
      1901
    ],
    [
      3242,
      3240,
      1903,
      1902,
      1905,
      3243
    ],
    [
      1906,
      3244,
      3245,
      3243,
      1905,
      1904
    ],
    [
      1906,
      1907,
      1908,
      3246,
      3244
    ],
    [
      1458,
      3247,
      3248,
      3246,
      1908,
      1459
    ],
    [
      1457,
      1911,
      3249,
      3250,
      3247,
      1458
    ],
    [
      1910,
      3251,
      3252,
      3249,
      1911
    ],
    [
      1910,
      1909,
      1912,
      1914,
      3253,
      3254,
      3251
    ],
    [
      1913,
      1916,
      3255,
      3256,
      3253,
      1914
    ],
    [
      1915,
      1918,
      3257,
      3258,
      3255,
      1916
    ],
    [
      1918,
      1917,
      1920,
      3259,
      3260,
      3257
    ],
    [
      3261,
      3262,
      3259,
      1920,
      1919,
      1922
    ],
    [
      3261,
      1922,
      1921,
      1924,
      3263,
      3264
    ],
    [
      3265,
      3263,
      1924,
      1923,
      1926,
      3266
    ],
    [
      1925,
      1928,
      3267,
      3268,
      3266,
      1926
    ],
    [
      3269,
      3267,
      1928,
      1927,
      1931,
      3270
    ],
    [
      1931,
      1930,
      3271,
      3272,
      3270
    ],
    [
      3273,
      3274,
      3271,
      1930,
      1929,
      1933
    ],
    [
      3273,
      1933,
      1932,
      1935,
      3275,
      3276
    ],
    [
      1934,
      1937,
      3277,
      3278,
      3275,
      1935
    ],
    [
      1939,
      3279,
      3280,
      3281,
      3277,
      1937,
      1936
    ],
    [
      1941,
      1943,
      3282,
      3279,
      1939,
      1938,
      1940
    ],
    [
      1889,
      1895,
      3236,
      3239,
      3283,
      1890
    ],
    [
      3284,
      2038,
      1891,
      1890,
      3283,
      3285,
      3286
    ],
    [
      3284,
      3286,
      3287,
      680,
      679,
      3288
    ],
    [
      3289,
      3290,
      3291,
      3292,
      3293,
      3294,
      3295
    ],
    [
      3296,
      3297,
      3298,
      3294,
      3293,
      3299
    ],
    [
      3300,
      3301,
      3297,
      3296,
      3302
    ],
    [
      3300,
      3302,
      681,
      680,
      3287,
      3303,
      3304
    ],
    [
      706,
      703,
      702,
      1962,
      3305,
      1964
    ],
    [
      1965,
      1964,
      3305,
      3306,
      3307
    ],
    [
      1965,
      3307,
      3308,
      1966
    ],
    [
      3308,
      1972,
      1970,
      1969,
      1967,
      1966
    ],
    [
      3309,
      3310,
      3311,
      3312,
      3313,
      3314,
      1973,
      1972,
      3308,
      3307,
      3306
    ],
    [
      3315,
      3316,
      3317,
      3318,
      3319,
      3320,
      3321,
      3322
    ],
    [
      3318,
      3317,
      3323,
      3324
    ],
    [
      3317,
      3316,
      3325,
      3326,
      3327,
      3323
    ],
    [
      3328,
      1991,
      1990,
      3326,
      3325,
      3329
    ],
    [
      3330,
      3331,
      3332,
      3333,
      1994,
      1993,
      3328,
      3329,
      3334,
      3335
    ],
    [
      3333,
      3332,
      3336,
      3337,
      3338
    ],
    [
      3339,
      3340,
      3338,
      3337,
      3341,
      3342
    ],
    [
      3339,
      3342,
      3207,
      3206,
      2004,
      2003
    ],
    [
      3206,
      3208,
      3209,
      2005,
      2004
    ],
    [
      1863,
      1862,
      2013,
      2010,
      2007,
      2006,
      2005,
      3209
    ],
    [
      1946,
      1947,
      1948,
      1952,
      2025,
      2020,
      2019
    ],
    [
      3343,
      3344,
      3345,
      2055,
      2054,
      727,
      729,
      3346,
      3347,
      3348
    ],
    [
      2044,
      2046,
      2048,
      3349,
      3350,
      2042,
      2041
    ],
    [
      2048,
      2047,
      3351,
      3349
    ],
    [
      714,
      3352,
      3353,
      3351,
      2047,
      715
    ],
    [
      714,
      713,
      718,
      722,
      2049,
      3032,
      3354,
      3355,
      3352
    ],
    [
      2053,
      2058,
      3037,
      3035,
      3033,
      2051,
      2050,
      2052
    ],
    [
      3038,
      3037,
      2058,
      2057,
      3045,
      3043
    ],
    [
      3045,
      2057,
      2056,
      3050,
      3049,
      3046
    ],
    [
      3356,
      3051,
      3050,
      2056,
      2055,
      3345
    ],
    [
      3357,
      3358,
      3356,
      3345,
      3344,
      3359,
      3360
    ],
    [
      2061,
      2064,
      3361,
      3362,
      2065
    ],
    [
      2067,
      2066,
      2065,
      3362,
      3363,
      3364
    ],
    [
      2067,
      3364,
      3365,
      2069,
      2068
    ],
    [
      2071,
      2070,
      2069,
      3365,
      3366,
      3367
    ],
    [
      2071,
      3367,
      3368,
      3369,
      2074,
      2073,
      2072
    ],
    [
      3369,
      3370,
      2076,
      2075,
      2074
    ],
    [
      2078,
      2077,
      2076,
      3370,
      3371,
      3372
    ],
    [
      3373,
      2080,
      2079,
      2078,
      3372,
      3374
    ],
    [
      3373,
      3375,
      3376,
      2082,
      2081,
      2080
    ],
    [
      2083,
      2082,
      3376,
      3377,
      3378,
      2084
    ],
    [
      3378,
      3379,
      3380,
      2086,
      2085,
      2084
    ],
    [
      3381,
      3382,
      2089,
      2088,
      2087,
      2086,
      3380
    ],
    [
      2091,
      2090,
      2089,
      3382,
      3383,
      3384
    ],
    [
      2091,
      3384,
      3385,
      3386,
      2093,
      2092
    ],
    [
      2094,
      2093,
      3386,
      3387,
      3388,
      3389,
      2095
    ],
    [
      3390,
      3391,
      2096,
      2095,
      3389
    ],
    [
      3392,
      3393,
      2099,
      2097,
      2096,
      3391,
      3394
    ],
    [
      3392,
      3395,
      3396,
      3393
    ],
    [
      3397,
      3398,
      3399,
      3400,
      3396,
      3395
    ],
    [
      3401,
      3399,
      3398,
      3402,
      3403,
      3404
    ],
    [
      3405,
      3406,
      3404,
      3403,
      3407,
      3408
    ],
    [
      3409,
      3405,
      3408,
      3410,
      3411,
      3412
    ],
    [
      3413,
      3412,
      3411,
      3414,
      3415,
      3416
    ],
    [
      3417,
      3418,
      3419,
      3416,
      3415
    ],
    [
      3420,
      3421,
      3422,
      3419,
      3418,
      3423,
      3424
    ],
    [
      3425,
      3426,
      3427,
      3421,
      3420,
      3428
    ],
    [
      3425,
      3429,
      3430,
      3431,
      3432,
      3426
    ],
    [
      3433,
      3434,
      3435,
      3431,
      3430,
      3436
    ],
    [
      3437,
      3438,
      3439,
      3434,
      3433
    ],
    [
      3437,
      3440,
      3441,
      3442,
      3443,
      3438
    ],
    [
      3442,
      3441,
      3444,
      3445,
      3446
    ],
    [
      3447,
      3448,
      3445,
      3444,
      3449
    ],
    [
      3447,
      3449,
      3450,
      3451,
      3452,
      3453
    ],
    [
      3450,
      3454,
      3455,
      3456,
      3451
    ],
    [
      3457,
      3455,
      3454,
      3458,
      3459,
      3460
    ],
    [
      3461,
      3462,
      3463,
      3460,
      3459
    ],
    [
      3461,
      3464,
      3465,
      3466,
      3462
    ],
    [
      3467,
      3465,
      3464,
      3468,
      3469
    ],
    [
      3470,
      3471,
      3469,
      3468,
      3472,
      3473
    ],
    [
      3474,
      3473,
      3472,
      3475,
      3476,
      3477
    ],
    [
      3478,
      3479,
      3477,
      3476,
      3480,
      3481
    ],
    [
      3478,
      3481,
      3482,
      3483,
      3484
    ],
    [
      3482,
      3485,
      3486,
      3487,
      3488,
      3483
    ],
    [
      3489,
      3490,
      3491,
      3492,
      3493,
      3487,
      3486
    ],
    [
      3494,
      3491,
      3490,
      3495,
      3496,
      3497
    ],
    [
      3496,
      3498,
      3499,
      3500,
      3501,
      3497
    ],
    [
      3502,
      3503,
      3504,
      3505,
      3500,
      3499
    ],
    [
      3506,
      3507,
      3504,
      3503,
      3508,
      3509
    ],
    [
      3510,
      3506,
      3509,
      3511,
      3512,
      3513
    ],
    [
      3514,
      3515,
      3513,
      3512,
      3516,
      3517
    ],
    [
      3518,
      3519,
      3520,
      3514,
      3517,
      3521
    ],
    [
      3518,
      3522,
      3523,
      3524,
      3525,
      3519
    ],
    [
      3526,
      3524,
      3523,
      3527,
      3528,
      3529
    ],
    [
      3530,
      3531,
      3532,
      3529,
      3528,
      3533
    ],
    [
      3534,
      3535,
      3536,
      3537,
      3531,
      3530
    ],
    [
      3538,
      3539,
      3540,
      3541,
      3536,
      3535
    ],
    [
      3542,
      3540,
      3539,
      3543,
      3544
    ],
    [
      3545,
      3546,
      3547,
      3548,
      3544,
      3543
    ],
    [
      3549,
      3547,
      3546,
      3550,
      3551,
      3552
    ],
    [
      3553,
      3554,
      3552,
      3551,
      3555,
      3556
    ],
    [
      3553,
      3556,
      3557,
      3558,
      3559
    ],
    [
      3557,
      3560,
      3561,
      3562,
      3563,
      3564,
      3558
    ],
    [
      3393,
      3396,
      3400,
      2104,
      2100,
      2099
    ],
    [
      3401,
      2106,
      2105,
      2104,
      3400,
      3399
    ],
    [
      3401,
      3404,
      3406,
      2111,
      2107,
      2106
    ],
    [
      2117,
      2112,
      2111,
      3406,
      3405,
      3409
    ],
    [
      3413,
      2118,
      2114,
      2117,
      3409,
      3412
    ],
    [
      3413,
      3416,
      3419,
      3422,
      2122,
      2119,
      2118
    ],
    [
      2127,
      2123,
      2122,
      3422,
      3421,
      3427
    ],
    [
      2127,
      3427,
      3426,
      3432,
      2130,
      2128
    ],
    [
      2131,
      2130,
      3432,
      3431,
      3435,
      2133
    ],
    [
      2137,
      2134,
      2133,
      3435,
      3434,
      3439
    ],
    [
      2137,
      3439,
      3438,
      3443,
      2143,
      2138
    ],
    [
      3442,
      3446,
      2145,
      2144,
      2143,
      3443
    ],
    [
      3448,
      2149,
      2146,
      2145,
      3446,
      3445
    ],
    [
      3447,
      3453,
      2153,
      2150,
      2149,
      3448
    ],
    [
      2153,
      3453,
      3452,
      2160,
      2154
    ],
    [
      2161,
      2157,
      2160,
      3452,
      3451,
      3456
    ],
    [
      2161,
      3456,
      3455,
      3457,
      2169,
      2162
    ],
    [
      2165,
      2169,
      3457,
      3460,
      3463,
      2175,
      2171
    ],
    [
      2180,
      2177,
      2176,
      2175,
      3463,
      3462,
      3466,
      3565,
      2190,
      2183
    ],
    [
      3565,
      3466,
      3465,
      3467,
      3566,
      3567,
      3568
    ],
    [
      3467,
      3469,
      3471,
      3569,
      3570,
      3571,
      3566
    ],
    [
      3470,
      3572,
      3573,
      3569,
      3471
    ],
    [
      3474,
      3574,
      3575,
      3572,
      3470,
      3473
    ],
    [
      3474,
      3477,
      3479,
      3576,
      3577,
      3574
    ],
    [
      3578,
      3576,
      3479,
      3478,
      3484,
      3579
    ],
    [
      3580,
      3579,
      3484,
      3483,
      3488,
      3581
    ],
    [
      3582,
      3581,
      3488,
      3487,
      3493,
      3583
    ],
    [
      3584,
      3583,
      3493,
      3492,
      3585
    ],
    [
      3494,
      3586,
      3587,
      3585,
      3492,
      3491
    ],
    [
      3494,
      3497,
      3501,
      3588,
      3589,
      3586
    ],
    [
      3590,
      3588,
      3501,
      3500,
      3505,
      3591
    ],
    [
      3507,
      3592,
      3593,
      3591,
      3505,
      3504
    ],
    [
      3510,
      3594,
      3595,
      3592,
      3507,
      3506
    ],
    [
      3596,
      3597,
      3594,
      3510,
      3513,
      3515
    ],
    [
      3598,
      3599,
      3596,
      3515,
      3514,
      3520
    ],
    [
      3598,
      3520,
      3519,
      3525,
      3600,
      3601
    ],
    [
      3526,
      3602,
      3603,
      3600,
      3525,
      3524
    ],
    [
      3526,
      3529,
      3532,
      3604,
      3605,
      3602
    ],
    [
      3532,
      3531,
      3537,
      3606,
      3607,
      3604
    ],
    [
      3541,
      3608,
      3609,
      3606,
      3537,
      3536
    ],
    [
      3542,
      3610,
      3611,
      3608,
      3541,
      3540
    ],
    [
      3548,
      3612,
      3613,
      3610,
      3542,
      3544
    ],
    [
      3614,
      3612,
      3548,
      3547,
      3549,
      3615
    ],
    [
      3615,
      3549,
      3552,
      3554,
      3616,
      3617
    ],
    [
      3553,
      3559,
      3618,
      3619,
      3616,
      3554
    ],
    [
      3620,
      3621,
      3622,
      3618,
      3559,
      3558,
      3564
    ],
    [
      3620,
      3623,
      3624,
      3625,
      3621
    ],
    [
      3626,
      3627,
      3628,
      3624,
      3623,
      3629
    ],
    [
      3626,
      3629,
      3630,
      3631,
      3632
    ],
    [
      3633,
      3634,
      3635,
      3636,
      3632,
      3631
    ],
    [
      3635,
      3634,
      3637,
      3638,
      3639,
      3640,
      3641,
      3642
    ],
    [
      3565,
      3568,
      2198,
      2197,
      2191,
      2190
    ],
    [
      3568,
      3567,
      2205,
      2199,
      2198
    ],
    [
      2207,
      2206,
      2205,
      3567,
      3566,
      3571
    ],
    [
      2207,
      3571,
      3570,
      2212,
      2208
    ],
    [
      2214,
      2213,
      2212,
      3570,
      3569,
      3573
    ],
    [
      2214,
      3573,
      3572,
      3575,
      2219,
      2215
    ],
    [
      2220,
      2219,
      3575,
      3574,
      3577,
      2222
    ],
    [
      2223,
      2222,
      3577,
      3576,
      3578,
      2226
    ],
    [
      3578,
      3579,
      3580,
      2234,
      2227,
      2226
    ],
    [
      3580,
      3581,
      3582,
      2235,
      2231,
      2234
    ],
    [
      3582,
      3583,
      3584,
      2244,
      2239,
      2236,
      2235
    ],
    [
      3584,
      3585,
      3587,
      2246,
      2245,
      2244
    ],
    [
      3587,
      3586,
      3589,
      2250,
      2247,
      2246
    ],
    [
      3589,
      3588,
      3590,
      2255,
      2251,
      2250
    ],
    [
      3590,
      3591,
      3593,
      2261,
      2256,
      2255
    ],
    [
      2258,
      2261,
      3593,
      3592,
      3595,
      2263
    ],
    [
      2264,
      2263,
      3595,
      3594,
      3597,
      2266
    ],
    [
      3596,
      3599,
      2272,
      2267,
      2266,
      3597
    ],
    [
      3598,
      3601,
      2274,
      2273,
      2272,
      3599
    ],
    [
      2278,
      2275,
      2274,
      3601,
      3600,
      3603
    ],
    [
      2278,
      3603,
      3602,
      3605,
      2282,
      2279
    ],
    [
      2283,
      2282,
      3605,
      3604,
      3607,
      2288
    ],
    [
      2289,
      2288,
      3607,
      3606,
      3609,
      2292
    ],
    [
      2294,
      2293,
      2292,
      3609,
      3608,
      3611
    ],
    [
      2294,
      3611,
      3610,
      3613,
      2299,
      2295
    ],
    [
      3614,
      2302,
      2300,
      2299,
      3613,
      3612
    ],
    [
      3614,
      3615,
      3617,
      2306,
      2303,
      2302
    ],
    [
      2306,
      3617,
      3616,
      3619,
      2312,
      2307
    ],
    [
      3619,
      3618,
      3622,
      2314,
      2313,
      2312
    ],
    [
      2315,
      2314,
      3622,
      3621,
      3625,
      2321
    ],
    [
      2318,
      2321,
      3625,
      3624,
      3628,
      2322
    ],
    [
      3643,
      2327,
      2323,
      2322,
      3628,
      3627
    ],
    [
      3644,
      3645,
      2330,
      2328,
      2327,
      3643
    ],
    [
      2330,
      3645,
      3646,
      3647,
      2335,
      2331
    ],
    [
      3648,
      3649,
      2341,
      2338,
      2336,
      2335,
      3647
    ],
    [
      2344,
      2342,
      2341,
      3649,
      3650,
      3651
    ],
    [
      2344,
      3651,
      3652,
      3653,
      2345
    ],
    [
      2346,
      2345,
      3653,
      3654,
      3655,
      2351
    ],
    [
      2353,
      2352,
      2351,
      3655,
      3656,
      3657
    ],
    [
      3658,
      2357,
      2354,
      2353,
      3657,
      3659,
      3660
    ],
    [
      3661,
      2358,
      2357,
      3658,
      3662
    ],
    [
      3661,
      3663,
      3664,
      2362,
      2359,
      2358
    ],
    [
      2363,
      2362,
      3664,
      3665,
      3666,
      2366
    ],
    [
      2378,
      2375,
      2374,
      3667,
      3668,
      3669
    ],
    [
      2378,
      3669,
      3670,
      3671,
      2384,
      2383,
      2379
    ],
    [
      2385,
      2384,
      3671,
      3672,
      3673,
      2390
    ],
    [
      2388,
      2390,
      3673,
      3674,
      3675,
      2391
    ],
    [
      2395,
      2392,
      2391,
      3675,
      3676,
      3677,
      2397
    ],
    [
      2400,
      2398,
      2397,
      3677,
      3678
    ],
    [
      2400,
      3678,
      3679,
      3680,
      3681,
      2407,
      2404,
      2401
    ],
    [
      2407,
      3681,
      3682,
      2410,
      2408
    ],
    [
      2411,
      2410,
      3682,
      3683,
      3684
    ],
    [
      2411,
      3684,
      3685,
      3686,
      2412
    ],
    [
      2416,
      2547,
      2413,
      2412,
      3686,
      3687,
      3688,
      2417
    ],
    [
      3688,
      3689,
      2418,
      2417
    ],
    [
      3690,
      3691,
      2420,
      2419,
      2418,
      3689,
      3692
    ],
    [
      2435,
      2430,
      2421,
      2420,
      3691,
      3693,
      3694,
      3695
    ],
    [
      3696,
      3697,
      2438,
      2436,
      2435,
      3695
    ],
    [
      2446,
      2443,
      2439,
      2438,
      3697,
      3698,
      3699
    ],
    [
      2446,
      3699,
      3700,
      3701,
      2452,
      2447
    ],
    [
      2449,
      2452,
      3701,
      3702,
      3703,
      2456,
      2453
    ],
    [
      2456,
      3703,
      3704,
      2461,
      2457
    ],
    [
      2464,
      2462,
      2461,
      3704,
      3705,
      3706
    ],
    [
      2464,
      3706,
      3707,
      3708,
      2469,
      2465
    ],
    [
      3709,
      3710,
      2473,
      2470,
      2469,
      3708
    ],
    [
      2473,
      3710,
      3711,
      3712,
      2477,
      2474
    ],
    [
      2477,
      3712,
      3713,
      3714,
      2481,
      2478
    ],
    [
      2481,
      3714,
      3715,
      3716,
      2485,
      2482
    ],
    [
      2491,
      2486,
      2485,
      3716,
      3717,
      3718
    ],
    [
      2491,
      3718,
      3719,
      3720,
      2496,
      2493,
      2492
    ],
    [
      2500,
      2497,
      2496,
      3720,
      3721,
      3722,
      2504
    ],
    [
      3723,
      3724,
      3725,
      3726,
      2518,
      2512,
      2511
    ],
    [
      3723,
      2511,
      2508,
      2505,
      2504,
      3722
    ],
    [
      2519,
      2515,
      2518,
      3726,
      3727,
      3728
    ],
    [
      2519,
      3728,
      3729,
      2523,
      2520
    ],
    [
      2523,
      3729,
      3730,
      3731,
      2527,
      2524
    ],
    [
      3732,
      2530,
      2528,
      2527,
      3731,
      3733
    ],
    [
      2660,
      2668,
      2673,
      3734,
      3735,
      2782,
      2781,
      2661
    ],
    [
      3736,
      3734,
      2673,
      2672
    ],
    [
      2678,
      3737,
      3736,
      2672,
      2671,
      2675
    ],
    [
      2714,
      3738,
      3739,
      3740,
      3741,
      2711,
      2710,
      2712
    ],
    [
      2714,
      2713,
      2716,
      3742,
      3743,
      3738
    ],
    [
      2715,
      2718,
      3744,
      3745,
      3742,
      2716
    ],
    [
      2720,
      3746,
      3744,
      2718,
      2717
    ],
    [
      2720,
      2719,
      2722,
      3747,
      3748,
      3746
    ],
    [
      2721,
      2724,
      3749,
      3750,
      3747,
      2722
    ],
    [
      2726,
      3751,
      3752,
      3749,
      2724,
      2723
    ],
    [
      2726,
      2725,
      2728,
      3753,
      3754,
      3751
    ],
    [
      2728,
      2727,
      2730,
      3755,
      3756,
      3753
    ],
    [
      2729,
      2732,
      3757,
      3758,
      3755,
      2730
    ],
    [
      2731,
      2734,
      3759,
      3760,
      3757,
      2732
    ],
    [
      3761,
      3762,
      3759,
      2734,
      2733,
      2736
    ],
    [
      3761,
      2736,
      2735,
      2738,
      3763,
      3764
    ],
    [
      2737,
      2740,
      3765,
      3766,
      3763,
      2738
    ],
    [
      2739,
      2742,
      3767,
      3768,
      3765,
      2740
    ],
    [
      2741,
      2744,
      3769,
      3770,
      3767,
      2742
    ],
    [
      2743,
      2746,
      3771,
      3772,
      3769,
      2744
    ],
    [
      2748,
      3773,
      3774,
      3771,
      2746,
      2745
    ],
    [
      2747,
      2750,
      3775,
      3776,
      3773,
      2748
    ],
    [
      3777,
      3775,
      2750,
      2749,
      2752,
      3778
    ],
    [
      3779,
      3780,
      3778,
      2752,
      2751,
      2754
    ],
    [
      3779,
      2754,
      2753,
      2756,
      3781,
      3782
    ],
    [
      2758,
      3783,
      3784,
      3781,
      2756,
      2755
    ],
    [
      2758,
      2757,
      2759,
      3785,
      3786,
      3783
    ],
    [
      3787,
      3788,
      3785,
      2759,
      2760,
      2762
    ],
    [
      2761,
      2764,
      3789,
      3790,
      3787,
      2762
    ],
    [
      2763,
      2766,
      3791,
      3792,
      3789,
      2764
    ],
    [
      2766,
      2765,
      2768,
      3793,
      3794,
      3791
    ],
    [
      2768,
      2767,
      2770,
      3795,
      3796,
      3793
    ],
    [
      2769,
      2772,
      3797,
      3798,
      3795,
      2770
    ],
    [
      2771,
      2774,
      3799,
      3800,
      3797,
      2772
    ],
    [
      2773,
      2776,
      3801,
      3802,
      3799,
      2774
    ],
    [
      2778,
      3803,
      3804,
      3801,
      2776,
      2775
    ],
    [
      2778,
      2777,
      2780,
      3805,
      3806,
      3807,
      3803
    ],
    [
      3808,
      3805,
      2780,
      2779,
      3809
    ],
    [
      2708,
      2709,
      2711,
      3741,
      3810,
      3811,
      2707,
      2706
    ],
    [
      2704,
      2707,
      3811,
      3812,
      3813,
      2705
    ],
    [
      2676,
      2705,
      3813,
      3814,
      3815,
      3816,
      2677
    ],
    [
      1942,
      2788,
      3817,
      3818,
      3282,
      1943
    ],
    [
      3819,
      3820,
      3817,
      2788,
      2787
    ],
    [
      3819,
      2787,
      2786,
      2790,
      3821,
      3822
    ],
    [
      2792,
      3823,
      3824,
      3821,
      2790,
      2789
    ],
    [
      2792,
      2791,
      2794,
      3825,
      3826,
      3823
    ],
    [
      2793,
      2796,
      3827,
      3825,
      2794
    ],
    [
      2796,
      2795,
      2798,
      3828,
      3829,
      3827
    ],
    [
      3830,
      3828,
      2798,
      2797,
      2799,
      2801
    ],
    [
      3830,
      2801,
      2800,
      2803,
      3831
    ],
    [
      3831,
      2803,
      2802,
      2805,
      3832
    ],
    [
      3833,
      3832,
      2805,
      2804,
      2806,
      2807,
      2809,
      3834
    ],
    [
      2808,
      2810,
      2812,
      3835,
      3834,
      2809
    ],
    [
      3836,
      3835,
      2812,
      2811,
      3837
    ],
    [
      3838,
      3839,
      3840,
      3836,
      3837
    ],
    [
      3838,
      3841,
      3842,
      3843,
      3839
    ],
    [
      3843,
      3842,
      3844,
      3845,
      3846,
      3847
    ],
    [
      3838,
      3837,
      2811,
      1525,
      1524,
      2815,
      3841
    ],
    [
      2815,
      2814,
      3844,
      3842,
      3841
    ],
    [
      3844,
      2814,
      2813,
      2817,
      3848,
      3845
    ],
    [
      2816,
      2819,
      3849,
      3850,
      3848,
      2817
    ],
    [
      2821,
      3851,
      3849,
      2819,
      2818
    ],
    [
      3852,
      3851,
      2821,
      2820,
      2822,
      2823
    ],
    [
      3852,
      2823,
      2824,
      2826,
      3853
    ],
    [
      2826,
      2825,
      2828,
      3854,
      3855,
      3853
    ],
    [
      2827,
      2830,
      3856,
      3854,
      2828
    ],
    [
      3857,
      3856,
      2830,
      2829,
      2832,
      3858
    ],
    [
      2831,
      2834,
      3859,
      3860,
      3858,
      2832
    ],
    [
      3859,
      2834,
      2833,
      2836,
      3861,
      3862
    ],
    [
      3863,
      3864,
      3861,
      2836,
      2835,
      2838
    ],
    [
      3865,
      3863,
      2838,
      2837,
      2839,
      3866
    ],
    [
      2839,
      2840,
      2842,
      3867,
      3868,
      3866
    ],
    [
      2842,
      2841,
      2844,
      3869,
      3867
    ],
    [
      2844,
      2843,
      3870,
      3869
    ],
    [
      3871,
      3872,
      3873,
      3870,
      2843,
      1552,
      1551,
      3874
    ],
    [
      2854,
      2963,
      2962,
      2851,
      2850
    ],
    [
      2848,
      2851,
      2962,
      2961,
      2992,
      2849
    ],
    [
      2845,
      2847,
      2849,
      2992,
      2846
    ],
    [
      2964,
      2963,
      2854,
      2853,
      3875
    ],
    [
      3876,
      3875,
      2853,
      2852,
      2856
    ],
    [
      2855,
      2857,
      2859,
      3877,
      3876,
      2856
    ],
    [
      2861,
      3878,
      3879,
      3877,
      2859,
      2858
    ],
    [
      2861,
      2860,
      2863,
      3880,
      3881,
      3878
    ],
    [
      2862,
      2865,
      3882,
      3880,
      2863
    ],
    [
      2867,
      3883,
      3882,
      2865,
      2864
    ],
    [
      2867,
      2866,
      2869,
      3884,
      3883
    ],
    [
      2868,
      2871,
      3885,
      3884,
      2869
    ],
    [
      2871,
      2870,
      2872,
      2875,
      3886,
      3885
    ],
    [
      3887,
      3888,
      3889,
      3890,
      3891,
      3892,
      3893
    ],
    [
      3894,
      3895,
      3896,
      2993,
      1875,
      1872,
      1871
    ],
    [
      2993,
      3896,
      1722,
      1721
    ],
    [
      1718,
      1722,
      3896,
      3895,
      2874,
      2873
    ],
    [
      2885,
      2884,
      2886,
      2888,
      3897,
      3898,
      3899,
      3900,
      3901
    ],
    [
      2885,
      3901,
      3902,
      3903,
      2883,
      2882
    ],
    [
      2880,
      2883,
      3903,
      3904,
      3905,
      2881
    ],
    [
      2876,
      2881,
      3905,
      3906,
      3907,
      2877
    ],
    [
      2878,
      2877,
      3907,
      3908,
      3909,
      3910
    ],
    [
      3911,
      3912,
      3910,
      3909,
      3913,
      3914
    ],
    [
      3911,
      3914,
      3915,
      3916,
      3917,
      3918
    ],
    [
      3917,
      3916,
      3919,
      3920,
      3921
    ],
    [
      3922,
      3923,
      3921,
      3920,
      3924,
      3925
    ],
    [
      3922,
      3925,
      3926,
      3927,
      3928,
      3929
    ],
    [
      3928,
      3927,
      3930,
      3931,
      3932,
      3933
    ],
    [
      3934,
      3935,
      3936,
      3932,
      3931,
      3937
    ],
    [
      3938,
      3939,
      3935,
      3934,
      3940,
      3941
    ],
    [
      3938,
      3941,
      3942,
      3943,
      3944,
      3945
    ],
    [
      3944,
      3943,
      3946,
      3947,
      3948,
      3949,
      3950
    ],
    [
      3951,
      3952,
      3948,
      3947,
      3953,
      3954
    ],
    [
      3951,
      3954,
      3955,
      3956,
      3957,
      3958
    ],
    [
      3956,
      3959,
      3960,
      3961,
      3962,
      3957
    ],
    [
      2887,
      2889,
      2891,
      3963,
      3964,
      3965,
      3897,
      2888
    ],
    [
      3966,
      3967,
      3963,
      2891,
      2890,
      2893
    ],
    [
      3968,
      3966,
      2893,
      2892,
      2895
    ],
    [
      3969,
      3970,
      3968,
      2895,
      2894,
      2898
    ],
    [
      3969,
      2898,
      2897,
      3971,
      3972
    ],
    [
      2901,
      3971,
      2897,
      2896,
      2899
    ],
    [
      2904,
      3973,
      3974,
      3972,
      3971,
      2901,
      2900,
      2903
    ],
    [
      2911,
      2916,
      3975,
      2910,
      2909
    ],
    [
      2920,
      2926,
      3976,
      3977,
      3975,
      2916,
      2915,
      2919
    ],
    [
      2947,
      3978,
      2932,
      2931,
      2937,
      2940,
      2942,
      2946
    ],
    [
      3979,
      3980,
      3981,
      3982,
      3983,
      3984
    ],
    [
      3981,
      3980,
      3985,
      3986,
      3987,
      2996,
      2995
    ],
    [
      3988,
      3989,
      2997,
      2996,
      3987
    ],
    [
      3990,
      2998,
      2997,
      3989,
      3991
    ],
    [
      3990,
      3992,
      3993,
      3994,
      2999,
      2998
    ],
    [
      3994,
      3993,
      3995,
      3996,
      3997,
      3998
    ],
    [
      3999,
      3997,
      3996,
      4000,
      4001,
      4002
    ],
    [
      4002,
      4001,
      4003,
      4004,
      4005
    ],
    [
      4005,
      4004,
      4006,
      4007,
      4008,
      4009,
      4010
    ],
    [
      4007,
      4011,
      4012,
      4013,
      4008
    ],
    [
      4014,
      4013,
      4012,
      4015,
      4016,
      4017
    ],
    [
      4018,
      4019,
      4020,
      4017,
      4016,
      4021
    ],
    [
      4018,
      4022,
      4023,
      4024,
      4025,
      4026,
      4019
    ],
    [
      4027,
      4028,
      4029,
      4025,
      4024
    ],
    [
      4027,
      4030,
      4031,
      4032,
      4033,
      4028
    ],
    [
      4032,
      4031,
      4034,
      4035,
      4036,
      4037
    ],
    [
      4038,
      4039,
      4040,
      4036,
      4035,
      4041
    ],
    [
      4038,
      4042,
      4043,
      4044,
      4045,
      4039
    ],
    [
      4044,
      4043,
      4046,
      4047,
      4048
    ],
    [
      4049,
      4050,
      4048,
      4047,
      4051,
      4052
    ],
    [
      4053,
      4049,
      4052,
      4054,
      4055
    ],
    [
      4053,
      4055,
      4056,
      4057,
      4058,
      4059,
      4060
    ],
    [
      4058,
      4061,
      4062,
      4063,
      4059
    ],
    [
      4061,
      4064,
      4065,
      4066,
      4062
    ],
    [
      4067,
      4068,
      4069,
      4066,
      4065
    ],
    [
      2947,
      2950,
      2954,
      4070,
      4069,
      4068,
      4071,
      3978
    ],
    [
      2953,
      2957,
      4072,
      4073,
      4070,
      2954
    ],
    [
      2956,
      2989,
      2991,
      4074,
      4072,
      2957
    ],
    [
      2967,
      4074,
      2991,
      2990,
      2968
    ],
    [
      4053,
      4060,
      4075,
      4076,
      4050,
      4049
    ],
    [
      4075,
      4060,
      4059,
      4063,
      4077
    ],
    [
      4070,
      4073,
      4077,
      4063,
      4062,
      4066,
      4069
    ],
    [
      4078,
      4079,
      4080,
      4081,
      4082,
      3984,
      3983,
      4083
    ],
    [
      3894,
      1871,
      1868,
      1866,
      1860,
      1865,
      3210,
      4084,
      4085
    ],
    [
      2994,
      4086,
      4087,
      3982,
      3981,
      2995
    ],
    [
      4087,
      4085,
      4084,
      4083,
      3983,
      3982
    ],
    [
      4078,
      4083,
      4084,
      3210,
      1850,
      1849
    ],
    [
      3130,
      3135,
      3138,
      4088,
      4089,
      4090,
      4091
    ],
    [
      4092,
      4093,
      4094,
      4089,
      4088,
      4095
    ],
    [
      4096,
      4097,
      4098,
      4099,
      4100,
      4093,
      4092
    ],
    [
      4098,
      4097,
      4101,
      4102,
      4103,
      4104,
      4105
    ],
    [
      3315,
      3322,
      4106,
      4107,
      3335,
      3334
    ],
    [
      3192,
      3330,
      3335,
      4107,
      3193
    ],
    [
      3192,
      3198,
      3201,
      3331,
      3330
    ],
    [
      3331,
      3201,
      3200,
      3336,
      3332
    ],
    [
      3202,
      3204,
      3341,
      3337,
      3336,
      3200,
      3199
    ],
    [
      3204,
      3203,
      3205,
      3207,
      3342,
      3341
    ],
    [
      3169,
      3175,
      4108,
      4109,
      3167,
      3166
    ],
    [
      4110,
      4111,
      4112,
      4108,
      3175,
      3174
    ],
    [
      4113,
      4110,
      3174,
      3173,
      3177
    ],
    [
      4113,
      3177,
      3176,
      3182,
      4114,
      4115
    ],
    [
      4114,
      3182,
      3181,
      3185,
      3191,
      4116
    ],
    [
      3191,
      3190,
      4117,
      4116
    ],
    [
      4118,
      4119,
      4120,
      4121,
      4117,
      3190,
      3189
    ],
    [
      3235,
      4122,
      4123,
      4120,
      4119,
      3233,
      3232
    ],
    [
      3194,
      3193,
      4107,
      4106,
      4122,
      3235
    ],
    [
      3219,
      4124,
      4125,
      4126,
      3213,
      3212
    ],
    [
      3221,
      4127,
      4128,
      4129,
      4124,
      3219,
      3218
    ],
    [
      3220,
      3223,
      3226,
      3229,
      3233,
      4119,
      4118
    ],
    [
      4130,
      4131,
      4132,
      4133,
      4134,
      4135,
      4136
    ],
    [
      3187,
      3186,
      4137,
      4138,
      4139
    ],
    [
      3188,
      3187,
      4139,
      4128,
      4127
    ],
    [
      3220,
      4118,
      3189,
      3188,
      4127,
      3221
    ],
    [
      4140,
      4141,
      4142,
      4131,
      4130,
      4143
    ],
    [
      3180,
      4143,
      4130,
      4136,
      4137,
      3186,
      3185,
      3181
    ],
    [
      3180,
      3184,
      4144,
      4145,
      4140,
      4143
    ],
    [
      4140,
      4145,
      4146,
      4147,
      4141
    ],
    [
      4141,
      4147,
      4148,
      4149,
      4150,
      4151,
      4142
    ],
    [
      3178,
      4152,
      4153,
      3183,
      3179
    ],
    [
      4153,
      4154,
      4155,
      4144,
      3184,
      3183
    ],
    [
      4156,
      4146,
      4145,
      4144,
      4155,
      4157
    ],
    [
      4156,
      4158,
      4148,
      4147,
      4146
    ],
    [
      3103,
      3108,
      3116,
      4159,
      3104
    ],
    [
      3113,
      3120,
      4160,
      3114
    ],
    [
      3121,
      3126,
      4161,
      4162,
      4163,
      3122
    ],
    [
      3125,
      4164,
      4165,
      4166,
      4167,
      4161,
      3126
    ],
    [
      4168,
      4169,
      4170,
      3124,
      3129
    ],
    [
      4168,
      4171,
      4172,
      4173,
      4169
    ],
    [
      4172,
      4171,
      4174,
      4175,
      4176,
      4177
    ],
    [
      4178,
      4176,
      4175,
      4179,
      4180
    ],
    [
      4181,
      4180,
      4179,
      4182,
      4183
    ],
    [
      4184,
      4185,
      4181,
      4183,
      4186
    ],
    [
      4184,
      4186,
      4187,
      4188,
      4189
    ],
    [
      4189,
      4188,
      4190,
      4191,
      3158,
      3157
    ],
    [
      3155,
      3158,
      4191,
      4192,
      4193,
      4194
    ],
    [
      4194,
      4193,
      4195,
      4196
    ],
    [
      3161,
      4196,
      4195,
      4197,
      4198,
      3163,
      3162
    ],
    [
      3178,
      3172,
      3171,
      3170,
      4199,
      4200,
      4152
    ],
    [
      4153,
      4152,
      4200,
      4201,
      4202,
      4154
    ],
    [
      4155,
      4154,
      4202,
      4203,
      4157
    ],
    [
      4156,
      4157,
      4203,
      4204,
      4158
    ],
    [
      4148,
      4158,
      4204,
      4205,
      4206,
      4207,
      4149
    ],
    [
      3155,
      4194,
      4196,
      3161,
      3160,
      4208,
      3156
    ],
    [
      3159,
      3168,
      4209,
      4210,
      4208,
      3160
    ],
    [
      4211,
      4209,
      3168,
      3167,
      4109
    ],
    [
      4211,
      4109,
      4108,
      4112,
      4212
    ],
    [
      4213,
      4214,
      4212,
      4112,
      4111
    ],
    [
      4213,
      4111,
      4110,
      4113,
      4115,
      4215,
      4216
    ],
    [
      4114,
      4116,
      4117,
      4121,
      4215,
      4115
    ],
    [
      3140,
      4095,
      4088,
      3138,
      3137
    ],
    [
      4096,
      4092,
      4095,
      3140,
      3139,
      3146
    ],
    [
      4096,
      3146,
      3145,
      3150,
      4101,
      4097
    ],
    [
      3149,
      3154,
      4102,
      4101,
      3150
    ],
    [
      3153,
      3156,
      4208,
      4210,
      4103,
      4102,
      3154
    ],
    [
      3144,
      3143,
      4217,
      4218,
      4219,
      3147
    ],
    [
      3148,
      3147,
      4219,
      4220,
      4221,
      3151
    ],
    [
      3152,
      3151,
      4221,
      4185,
      4184,
      4189,
      3157
    ],
    [
      3124,
      4170,
      4222,
      3141,
      3136,
      3134,
      3133,
      4164,
      3125
    ],
    [
      4223,
      4222,
      4170,
      4169,
      4173
    ],
    [
      3142,
      3141,
      4222,
      4223,
      4217,
      3143
    ],
    [
      3100,
      4224,
      4225,
      3109,
      3106,
      3101
    ],
    [
      3107,
      3110,
      4226,
      4227,
      3111
    ],
    [
      4228,
      4229,
      3117,
      3112,
      3111,
      4227
    ],
    [
      3118,
      3117,
      4229,
      4230,
      3127,
      3123
    ],
    [
      4186,
      4183,
      4182,
      4231,
      4232,
      4233,
      4187
    ],
    [
      4234,
      4235,
      4190,
      4188,
      4187,
      4233
    ],
    [
      4191,
      4190,
      4235,
      4236,
      4192
    ],
    [
      4197,
      4195,
      4193,
      4192,
      4236,
      4237,
      4238
    ],
    [
      4239,
      4240,
      4198,
      4197,
      4238,
      4241
    ],
    [
      4198,
      4240,
      4242,
      3164,
      3163
    ],
    [
      4199,
      3170,
      3165,
      3164,
      4242,
      4243
    ],
    [
      4199,
      4243,
      4244,
      4245,
      4201,
      4200
    ],
    [
      4246,
      4247,
      4248,
      4205,
      4204,
      4203,
      4202,
      4201,
      4245
    ],
    [
      4249,
      4250,
      4206,
      4205,
      4248
    ],
    [
      4251,
      4250,
      4249,
      4252,
      4253,
      4254
    ],
    [
      4255,
      4256,
      4257,
      4258,
      4259,
      4260,
      4261
    ],
    [
      4255,
      4261,
      4262,
      4263
    ],
    [
      4264,
      4263,
      4262,
      4265,
      4266
    ],
    [
      4267,
      4268,
      4269,
      4264,
      4266,
      4270,
      4271
    ],
    [
      4272,
      4273,
      4267,
      4271,
      4274
    ],
    [
      4272,
      4274,
      4275,
      4276,
      4277
    ],
    [
      4275,
      4278,
      4279,
      4280,
      4281,
      4276
    ],
    [
      4279,
      4282,
      4283,
      4284,
      4285,
      4280
    ],
    [
      4286,
      4287,
      4288,
      4289,
      4284,
      4283,
      4290,
      4291,
      4292
    ],
    [
      4293,
      4286,
      4292,
      4294,
      4295,
      4296,
      4297,
      4298
    ],
    [
      4299,
      4300,
      4301,
      4298,
      4297
    ],
    [
      4302,
      4303,
      4304,
      4305,
      4306,
      4301,
      4300
    ],
    [
      4307,
      4308,
      4309,
      4310,
      4311,
      4312,
      4313,
      4314
    ],
    [
      4315,
      4316,
      4317,
      4311,
      4310,
      4318,
      4319
    ],
    [
      4315,
      4319,
      4320,
      4321,
      4322,
      4323,
      4324,
      4325
    ],
    [
      4326,
      4323,
      4322,
      4327,
      4328,
      4329
    ],
    [
      4330,
      4329,
      4328,
      4331,
      4332
    ],
    [
      4330,
      4332,
      4333,
      3097,
      3095,
      3094
    ],
    [
      3100,
      3098,
      3097,
      4333,
      4334,
      4335,
      4336,
      4224
    ],
    [
      3096,
      4337,
      4338,
      3092,
      3091
    ],
    [
      3096,
      3099,
      3102,
      3105,
      4339,
      4340,
      4337
    ],
    [
      3105,
      3104,
      4159,
      4341,
      4339
    ],
    [
      4342,
      4343,
      4160,
      3120,
      3119,
      3122,
      4163
    ],
    [
      4161,
      4167,
      4344,
      4345,
      4162
    ],
    [
      4346,
      4166,
      4165,
      4347,
      4348
    ],
    [
      3066,
      3064,
      3063,
      4349,
      4350,
      4351,
      4352,
      3073,
      3070
    ],
    [
      4352,
      4353,
      4317,
      4316,
      3074,
      3073
    ],
    [
      4315,
      4325,
      3081,
      3077,
      3075,
      3074,
      4316
    ],
    [
      3081,
      4325,
      4324,
      3085,
      3082
    ],
    [
      3086,
      3085,
      4324,
      4323,
      4326,
      3089
    ],
    [
      4330,
      3094,
      3090,
      3089,
      4326,
      4329
    ],
    [
      3071,
      3076,
      3079,
      4354,
      4355,
      3072
    ],
    [
      3080,
      3084,
      4356,
      4357,
      4354,
      3079,
      3078
    ],
    [
      3083,
      3088,
      4358,
      4356,
      3084
    ],
    [
      3087,
      3093,
      4359,
      4360,
      4358,
      3088
    ],
    [
      4361,
      4359,
      3093,
      3092,
      4338,
      4362
    ],
    [
      4337,
      4340,
      4363,
      4362,
      4338
    ],
    [
      4339,
      4341,
      4364,
      4365,
      4366,
      4363,
      4340
    ],
    [
      4367,
      4368,
      4369,
      4370,
      4365,
      4364
    ],
    [
      4371,
      4369,
      4368,
      4343,
      4342,
      4372
    ],
    [
      4342,
      4163,
      4162,
      4345,
      4373,
      4374,
      4372
    ],
    [
      4167,
      4166,
      4346,
      4375,
      4344
    ],
    [
      4347,
      4376,
      4377,
      4378,
      4379,
      4348
    ],
    [
      3040,
      3039,
      3044,
      3047,
      3048,
      3053,
      4380,
      4381
    ],
    [
      3053,
      3052,
      4382,
      3058,
      3057,
      4383,
      4380
    ],
    [
      3060,
      3065,
      3068,
      4384,
      3061
    ],
    [
      3069,
      4385,
      4386,
      4384,
      3068,
      3067
    ],
    [
      3069,
      3072,
      4355,
      4387,
      4388,
      4385
    ],
    [
      4354,
      4357,
      4389,
      4390,
      4387,
      4355
    ],
    [
      4358,
      4360,
      4391,
      4392,
      4389,
      4357,
      4356
    ],
    [
      4361,
      4393,
      4394,
      4395,
      4391,
      4360,
      4359
    ],
    [
      4361,
      4362,
      4363,
      4366,
      4396,
      4393
    ],
    [
      4397,
      4398,
      4396,
      4366,
      4365,
      4370
    ],
    [
      4371,
      4399,
      4400,
      4397,
      4370,
      4369
    ],
    [
      4371,
      4372,
      4374,
      4401,
      4402,
      4399
    ],
    [
      4345,
      4344,
      4375,
      4403,
      4404,
      4405,
      4373
    ],
    [
      4346,
      4348,
      4379,
      4406,
      4403,
      4375
    ],
    [
      4407,
      4408,
      4409,
      4410,
      4411,
      4412,
      4413,
      4414
    ],
    [
      4407,
      4414,
      4415,
      4416,
      4417,
      4418
    ],
    [
      4419,
      4420,
      4421,
      4422,
      4417,
      4416
    ],
    [
      4423,
      4424,
      4425,
      4426,
      4421,
      4420
    ],
    [
      4424,
      4427,
      4428,
      4429,
      4430,
      4425
    ],
    [
      4431,
      4429,
      4428,
      4432,
      4433,
      4434
    ],
    [
      4435,
      4434,
      4433,
      4436,
      4437,
      4438
    ],
    [
      4439,
      4440,
      4441,
      4438,
      4437,
      4442
    ],
    [
      4443,
      4440,
      4439,
      4444,
      4445,
      4446
    ],
    [
      4447,
      4446,
      4445,
      4448,
      4449,
      4450
    ],
    [
      4449,
      4451,
      4452,
      4453,
      4450
    ],
    [
      4454,
      4452,
      4451,
      4455,
      4456,
      4457,
      4458
    ],
    [
      4459,
      4460,
      4461,
      4462,
      4463,
      4457,
      4456
    ],
    [
      4464,
      4462,
      4461,
      4465,
      4466,
      4467
    ],
    [
      4468,
      4469,
      4470,
      4467,
      4466
    ],
    [
      3360,
      3359,
      4470,
      4469,
      4471,
      4472
    ],
    [
      3357,
      3360,
      4472,
      4473,
      4474,
      4475
    ],
    [
      3357,
      4475,
      4476,
      4477,
      3358
    ],
    [
      3358,
      4477,
      4478,
      4479,
      4382,
      3052,
      3051,
      3356
    ],
    [
      3059,
      3058,
      4382,
      4479,
      4480,
      4481
    ],
    [
      3054,
      3059,
      4481,
      4482,
      4349,
      3063,
      3062
    ],
    [
      4483,
      4484,
      4485,
      3350,
      3349,
      3351,
      3353,
      4486,
      4487,
      4488
    ],
    [
      3353,
      3352,
      3355,
      4489,
      4486
    ],
    [
      4490,
      4489,
      3355,
      3354,
      4491
    ],
    [
      3032,
      3034,
      3036,
      3042,
      4492,
      4491,
      3354
    ],
    [
      4386,
      4493,
      4494,
      3056,
      3055,
      3061,
      4384
    ],
    [
      4495,
      4496,
      3003,
      3002,
      4497,
      4498,
      4499
    ],
    [
      3001,
      4500,
      4501,
      4502,
      4503,
      4497,
      3002
    ],
    [
      4504,
      4505,
      4506,
      4507,
      4508,
      4509
    ],
    [
      4504,
      4509,
      4510,
      4511,
      4512,
      4513
    ],
    [
      4514,
      4515,
      4516,
      4517,
      4518,
      4519
    ],
    [
      4520,
      4521,
      4522,
      4519,
      4518,
      4523
    ],
    [
      4520,
      4524,
      4525,
      4526,
      4527,
      4521
    ],
    [
      4528,
      4529,
      4530,
      4531,
      4527,
      4526,
      4532,
      4533
    ],
    [
      4529,
      4534,
      4535,
      4536,
      4537,
      4538,
      4530
    ],
    [
      4539,
      4540,
      4541,
      4537,
      4536
    ],
    [
      4542,
      4543,
      4544,
      4541,
      4540,
      4545,
      4546
    ],
    [
      4547,
      4548,
      4549,
      4550,
      4551,
      4543,
      4542,
      4552
    ],
    [
      700,
      699,
      1963,
      4553,
      4554,
      4555,
      4556,
      4557
    ],
    [
      4553,
      1963,
      701,
      705,
      2042,
      3350,
      4485,
      4558
    ],
    [
      4559,
      4560,
      4561,
      4562,
      4563,
      4564
    ],
    [
      4565,
      4562,
      4561,
      4566
    ],
    [
      4567,
      4568,
      4569,
      4565,
      4566,
      4570
    ],
    [
      4571,
      4572,
      4573,
      4574,
      4568,
      4567
    ],
    [
      4575,
      4576,
      4577,
      4573,
      4572
    ],
    [
      4578,
      4579,
      4580,
      4581,
      4577,
      4576
    ],
    [
      4582,
      4583,
      4584,
      4585,
      4580,
      4579
    ],
    [
      4586,
      4587,
      4584,
      4583,
      4588,
      4589,
      4590
    ],
    [
      4591,
      4586,
      4590,
      4592,
      4593
    ],
    [
      4594,
      4595,
      4596,
      4597,
      4598,
      4599
    ],
    [
      4406,
      4600,
      4601,
      4602,
      4404,
      4403
    ],
    [
      4406,
      4379,
      4378,
      4603,
      4604,
      4600
    ],
    [
      676,
      687,
      691,
      4605,
      4606,
      4607,
      4608,
      677
    ],
    [
      690,
      694,
      697,
      700,
      4557,
      4605,
      691
    ],
    [
      4609,
      3007,
      3006,
      4610,
      4510,
      4509,
      4508
    ],
    [
      4611,
      4517,
      4516,
      4511,
      4510,
      4610,
      4612
    ],
    [
      4611,
      4613,
      4614,
      4523,
      4518,
      4517
    ],
    [
      4520,
      4523,
      4614,
      4615,
      4616,
      4617,
      4524
    ],
    [
      4618,
      4619,
      4525,
      4524,
      4617
    ],
    [
      4620,
      4621,
      4532,
      4526,
      4525,
      4619
    ],
    [
      3023,
      4533,
      4532,
      4621,
      3024
    ],
    [
      2029,
      2030,
      2033,
      4528,
      4533,
      3023
    ],
    [
      4528,
      2033,
      2032,
      4534,
      4529
    ],
    [
      2031,
      2035,
      4535,
      4534,
      2032
    ],
    [
      2034,
      2037,
      3028,
      4539,
      4536,
      4535,
      2035
    ],
    [
      4539,
      3028,
      3027,
      4545,
      4540
    ],
    [
      3026,
      4546,
      4545,
      3027
    ],
    [
      4552,
      4542,
      4546,
      3026,
      3025,
      3031
    ],
    [
      4547,
      4552,
      3031,
      3030
    ],
    [
      4547,
      3030,
      3029,
      4548
    ],
    [
      3284,
      3288,
      4549,
      4548,
      3029,
      2039,
      2038
    ],
    [
      679,
      678,
      4550,
      4549,
      3288
    ],
    [
      678,
      677,
      4608,
      4622,
      4623,
      4551,
      4550
    ],
    [
      3003,
      4496,
      1981,
      1980
    ],
    [
      1985,
      3007,
      4609,
      1978,
      1977,
      1986
    ],
    [
      1988,
      3010,
      3005,
      1989
    ],
    [
      4609,
      4508,
      4507,
      3004,
      1979,
      1978
    ],
    [
      4612,
      4610,
      3006,
      3005,
      3010,
      3009
    ],
    [
      4611,
      4612,
      3009,
      3008,
      3012,
      4613
    ],
    [
      4614,
      4613,
      3012,
      3011,
      3014,
      4615
    ],
    [
      3014,
      3013,
      3015,
      3017,
      4616,
      4615
    ],
    [
      4618,
      4617,
      4616,
      3017,
      3016,
      3018,
      3020
    ],
    [
      4618,
      3020,
      3019,
      3022,
      4620,
      4619
    ],
    [
      4620,
      3022,
      3021,
      3024,
      4621
    ],
    [
      3238,
      4624,
      4625,
      3285,
      3283,
      3239
    ],
    [
      3237,
      3241,
      4626,
      4627,
      4624,
      3238
    ],
    [
      4628,
      4629,
      4626,
      3241,
      3240,
      3242
    ],
    [
      4628,
      3242,
      3243,
      3245,
      4630,
      4631
    ],
    [
      3244,
      3246,
      3248,
      4632,
      4630,
      3245
    ],
    [
      4633,
      4634,
      4632,
      3248,
      3247,
      3250
    ],
    [
      4633,
      3250,
      3249,
      3252,
      4635,
      4636
    ],
    [
      4637,
      4638,
      4635,
      3252,
      3251,
      3254
    ],
    [
      4637,
      3254,
      3253,
      3256,
      4639
    ],
    [
      3256,
      3255,
      3258,
      4640,
      4641,
      4639
    ],
    [
      4642,
      4643,
      4640,
      3258,
      3257,
      3260
    ],
    [
      4642,
      3260,
      3259,
      3262,
      4644,
      4645
    ],
    [
      3261,
      3264,
      4646,
      4647,
      4644,
      3262
    ],
    [
      3265,
      4648,
      4649,
      4646,
      3264,
      3263
    ],
    [
      3265,
      3266,
      3268,
      4650,
      4651,
      4648
    ],
    [
      3269,
      4652,
      4653,
      4650,
      3268,
      3267
    ],
    [
      3269,
      3270,
      3272,
      4654,
      4655,
      4652
    ],
    [
      3274,
      4656,
      4657,
      4654,
      3272,
      3271
    ],
    [
      3273,
      3276,
      4658,
      4659,
      4656,
      3274
    ],
    [
      3278,
      4660,
      4661,
      4658,
      3276,
      3275
    ],
    [
      3277,
      3281,
      4662,
      4663,
      4660,
      3278
    ],
    [
      3281,
      3280,
      4664,
      4665,
      4662
    ],
    [
      4666,
      4664,
      3280,
      3279,
      3282,
      3818,
      4667
    ],
    [
      3287,
      3286,
      3285,
      4625,
      3303
    ],
    [
      4627,
      3304,
      3303,
      4625,
      4624
    ],
    [
      3300,
      3304,
      4627,
      4626,
      4629,
      3301
    ],
    [
      4628,
      4631,
      3298,
      3297,
      3301,
      4629
    ],
    [
      4634,
      3295,
      3294,
      3298,
      4631,
      4630,
      4632
    ],
    [
      3289,
      3295,
      4634,
      4633,
      4636
    ],
    [
      3289,
      4636,
      4635,
      4638,
      4668,
      3290
    ],
    [
      4669,
      4668,
      4638,
      4637,
      4639,
      4641
    ],
    [
      4669,
      4641,
      4640,
      4643,
      4670
    ],
    [
      4642,
      4645,
      4671,
      4672,
      4670,
      4643
    ],
    [
      4647,
      4673,
      4674,
      4671,
      4645,
      4644
    ],
    [
      4675,
      4676,
      4673,
      4647,
      4646,
      4649
    ],
    [
      4675,
      4649,
      4648,
      4651,
      4677,
      4678,
      4679
    ],
    [
      4653,
      4680,
      4677,
      4651,
      4650
    ],
    [
      4681,
      4682,
      4680,
      4653,
      4652,
      4655
    ],
    [
      4683,
      4681,
      4655,
      4654,
      4657,
      4684
    ],
    [
      4685,
      4684,
      4657,
      4656,
      4659,
      4686
    ],
    [
      4658,
      4661,
      4687,
      4688,
      4686,
      4659
    ],
    [
      4660,
      4663,
      4689,
      4690,
      4687,
      4661
    ],
    [
      4665,
      4691,
      4689,
      4663,
      4662
    ],
    [
      4666,
      4692,
      4691,
      4665,
      4664
    ],
    [
      4693,
      4694,
      683,
      682
    ],
    [
      4694,
      4695,
      4696,
      4697,
      4698,
      685,
      684,
      683
    ],
    [
      1976,
      1981,
      4496,
      4495,
      3319,
      3318,
      3324
    ],
    [
      1976,
      3324,
      3323,
      3327,
      1982,
      1986,
      1977
    ],
    [
      1982,
      3327,
      3326,
      1990,
      1983
    ],
    [
      1992,
      1987,
      1991,
      3328,
      1993
    ],
    [
      1999,
      1995,
      1994,
      3333,
      3338,
      3340
    ],
    [
      3339,
      2003,
      2000,
      1999,
      3340
    ],
    [
      3363,
      3362,
      3361,
      4699,
      4700,
      4701,
      4702
    ],
    [
      3366,
      3365,
      3364,
      3363,
      4702,
      4703,
      4704
    ],
    [
      3366,
      4704,
      4705,
      3368,
      3367
    ],
    [
      3369,
      3368,
      4705,
      4706,
      4707,
      3371,
      3370
    ],
    [
      4707,
      4708,
      3374,
      3372,
      3371
    ],
    [
      3373,
      3374,
      4708,
      4709,
      4710,
      3375
    ],
    [
      3375,
      4710,
      4711,
      4712,
      3377,
      3376
    ],
    [
      3378,
      3377,
      4712,
      4713,
      4714,
      3379
    ],
    [
      3381,
      3380,
      3379,
      4714,
      4715,
      4716
    ],
    [
      3381,
      4716,
      4717,
      4718,
      3383,
      3382
    ],
    [
      4719,
      3385,
      3384,
      3383,
      4718
    ],
    [
      4720,
      4721,
      3387,
      3386,
      3385,
      4719
    ],
    [
      3387,
      4721,
      4722,
      4723,
      3388
    ],
    [
      3390,
      3389,
      3388,
      4723,
      4724,
      4725,
      4726
    ],
    [
      4727,
      4728,
      4726,
      4725,
      4729
    ],
    [
      4727,
      4730,
      4731,
      4732,
      4733,
      4728
    ],
    [
      4734,
      4735,
      4732,
      4731,
      4736,
      4737
    ],
    [
      4734,
      4737,
      4738,
      4739,
      4740,
      4741
    ],
    [
      4740,
      4739,
      4742,
      4743,
      4744,
      4745
    ],
    [
      4746,
      4747,
      4748,
      4744,
      4743
    ],
    [
      4746,
      4749,
      4750,
      4751,
      4752,
      4747
    ],
    [
      4753,
      4751,
      4750,
      4754,
      4755,
      4756
    ],
    [
      4757,
      4758,
      4756,
      4755,
      4759,
      4760
    ],
    [
      4757,
      4760,
      4761,
      4762,
      4763,
      4764
    ],
    [
      4765,
      4763,
      4762,
      4766,
      4767,
      4768
    ],
    [
      4768,
      4767,
      4769,
      4770,
      4771,
      4772
    ],
    [
      4771,
      4770,
      4773,
      4774,
      4775
    ],
    [
      4776,
      4777,
      4774,
      4773,
      4778,
      4779
    ],
    [
      4776,
      4779,
      4780,
      4781,
      4782,
      4783,
      4784,
      4785,
      4786
    ],
    [
      4787,
      4788,
      4789,
      4781,
      4780
    ],
    [
      4787,
      4790,
      4791,
      4792,
      4788
    ],
    [
      4793,
      4794,
      4791,
      4790,
      4795,
      4796
    ],
    [
      4793,
      4796,
      4797,
      4798,
      4799,
      4800
    ],
    [
      4801,
      4802,
      4799,
      4798,
      4803
    ],
    [
      4801,
      4803,
      4804,
      4805,
      4806,
      4807
    ],
    [
      4808,
      4809,
      4810,
      4806,
      4805,
      4811
    ],
    [
      4808,
      4812,
      4813,
      4814,
      4815,
      4809
    ],
    [
      4816,
      4817,
      4814,
      4813,
      4818,
      4819
    ],
    [
      4820,
      4821,
      4816,
      4819,
      4822,
      4823
    ],
    [
      4820,
      4823,
      4824,
      4825,
      4826,
      4827
    ],
    [
      4825,
      4828,
      4829,
      4830,
      4831,
      4832,
      4826
    ],
    [
      4833,
      4834,
      4835,
      4836,
      4830,
      4829
    ],
    [
      4837,
      4838,
      4839,
      4835,
      4834
    ],
    [
      4840,
      4841,
      4842,
      4838,
      4837,
      4843
    ],
    [
      3394,
      3391,
      3390,
      4726,
      4728,
      4733
    ],
    [
      3392,
      3394,
      4733,
      4732,
      4735,
      3397,
      3395
    ],
    [
      3397,
      4735,
      4734,
      4741,
      3402,
      3398
    ],
    [
      4741,
      4740,
      4745,
      3407,
      3403,
      3402
    ],
    [
      4748,
      3410,
      3408,
      3407,
      4745,
      4744
    ],
    [
      3411,
      3410,
      4748,
      4747,
      4752,
      3414
    ],
    [
      4753,
      3417,
      3415,
      3414,
      4752,
      4751
    ],
    [
      4753,
      4756,
      4758,
      3423,
      3418,
      3417
    ],
    [
      4757,
      4764,
      3424,
      3423,
      4758
    ],
    [
      4764,
      4763,
      4765,
      3428,
      3420,
      3424
    ],
    [
      3425,
      3428,
      4765,
      4768,
      4772,
      3429
    ],
    [
      4771,
      4775,
      3436,
      3430,
      3429,
      4772
    ],
    [
      3437,
      3433,
      3436,
      4775,
      4774,
      4777,
      3440
    ],
    [
      4776,
      4786,
      3458,
      3454,
      3450,
      3449,
      3444,
      3441,
      3440,
      4777
    ],
    [
      3461,
      3459,
      3458,
      4786,
      4785,
      3475,
      3472,
      3468,
      3464
    ],
    [
      3480,
      3476,
      3475,
      4785,
      4784
    ],
    [
      3480,
      4784,
      4783,
      3485,
      3482,
      3481
    ],
    [
      3489,
      3486,
      3485,
      4783,
      4782
    ],
    [
      3489,
      4782,
      4781,
      4789,
      3495,
      3490
    ],
    [
      3496,
      3495,
      4789,
      4788,
      4792,
      3498
    ],
    [
      4791,
      4794,
      3502,
      3499,
      3498,
      4792
    ],
    [
      4793,
      4800,
      3508,
      3503,
      3502,
      4794
    ],
    [
      3508,
      4800,
      4799,
      4802,
      3511,
      3509
    ],
    [
      4801,
      4807,
      3516,
      3512,
      3511,
      4802
    ],
    [
      4807,
      4806,
      4810,
      3521,
      3517,
      3516
    ],
    [
      3518,
      3521,
      4810,
      4809,
      4815,
      3522
    ],
    [
      3523,
      3522,
      4815,
      4814,
      4817,
      3527
    ],
    [
      4816,
      4821,
      3533,
      3528,
      3527,
      4817
    ],
    [
      4820,
      4827,
      3534,
      3530,
      3533,
      4821
    ],
    [
      3538,
      3535,
      3534,
      4827,
      4826,
      4832
    ],
    [
      3538,
      4832,
      4831,
      3545,
      3543,
      3539
    ],
    [
      3545,
      4831,
      4830,
      4836,
      3550,
      3546
    ],
    [
      4836,
      4835,
      4839,
      3555,
      3551,
      3550
    ],
    [
      3557,
      3556,
      3555,
      4839,
      4838,
      4842,
      3560
    ],
    [
      4844,
      4845,
      4846,
      4847,
      4848
    ],
    [
      4844,
      4849,
      4850,
      4851,
      4852,
      4845
    ],
    [
      4851,
      4850,
      4853,
      4854,
      4855
    ],
    [
      4855,
      4854,
      4856,
      4857,
      4858
    ],
    [
      4859,
      4860,
      4861,
      4862,
      4863,
      4858,
      4857,
      4864
    ],
    [
      4865,
      4866,
      4867,
      4868,
      4869,
      4870,
      4861,
      4860
    ],
    [
      4871,
      4872,
      4869,
      4868,
      4873
    ],
    [
      4871,
      4874,
      4875,
      4876,
      4877,
      4878,
      4879,
      4880,
      4881,
      4882,
      4883,
      4884,
      4872
    ],
    [
      4885,
      4886,
      4880,
      4879,
      4887,
      4888
    ],
    [
      4885,
      4888,
      4889,
      4890,
      4891,
      4892
    ],
    [
      4893,
      4894,
      4891,
      4890,
      4895
    ],
    [
      4896,
      4893,
      4895,
      4897,
      4898,
      4899,
      4900,
      4901
    ],
    [
      4902,
      4903,
      4904,
      4905,
      4906,
      4901,
      4900,
      4907
    ],
    [
      4908,
      4904,
      4903,
      4909,
      4910,
      4911,
      4912
    ],
    [
      4912,
      4911,
      4913,
      4914,
      4915,
      4916
    ],
    [
      4917,
      4918,
      4919,
      4916,
      4915
    ],
    [
      4920,
      4921,
      4918,
      4917,
      3639,
      3638
    ],
    [
      4920,
      3638,
      3637,
      4922,
      4923
    ],
    [
      3633,
      4924,
      4922,
      3637,
      3634
    ],
    [
      3633,
      3631,
      3630,
      3563,
      3562,
      4924
    ],
    [
      3620,
      3564,
      3563,
      3630,
      3629,
      3623
    ],
    [
      3644,
      3643,
      3627,
      3626,
      3632,
      3636
    ],
    [
      3644,
      3636,
      3635,
      3642,
      3646,
      3645
    ],
    [
      3648,
      3647,
      3646,
      3642,
      3641
    ],
    [
      3648,
      3641,
      3640,
      4925,
      3650,
      3649
    ],
    [
      3651,
      3650,
      4925,
      4926,
      3652
    ],
    [
      4927,
      3654,
      3653,
      3652,
      4926,
      4928,
      4929
    ],
    [
      4927,
      4930,
      3656,
      3655,
      3654
    ],
    [
      4930,
      4931,
      3659,
      3657,
      3656
    ],
    [
      4932,
      4933,
      3660,
      3659,
      4931,
      4934
    ],
    [
      4932,
      4935,
      4936,
      4937,
      4938,
      4933
    ],
    [
      3658,
      3660,
      4933,
      4938,
      3662
    ],
    [
      3661,
      3662,
      4938,
      4937,
      4939,
      3663
    ],
    [
      3663,
      4939,
      4940,
      3665,
      3664
    ],
    [
      4941,
      3666,
      3665,
      4940,
      4942,
      4943
    ],
    [
      2367,
      2366,
      3666,
      4941,
      4944,
      4945,
      4946,
      2371
    ],
    [
      4947,
      2372,
      2371,
      4946
    ],
    [
      4947,
      4948,
      3667,
      2374,
      2373,
      2372
    ],
    [
      3669,
      3668,
      4949,
      4950,
      3670
    ],
    [
      3671,
      3670,
      4950,
      4951,
      4952,
      4953,
      3672
    ],
    [
      3672,
      4953,
      4954,
      3674,
      3673
    ],
    [
      4954,
      4955,
      4956,
      3676,
      3675,
      3674
    ],
    [
      3676,
      4956,
      4957,
      3679,
      3678,
      3677
    ],
    [
      3680,
      4958,
      4959,
      4960,
      3683,
      3682,
      3681
    ],
    [
      3684,
      3683,
      4960,
      3685
    ],
    [
      4961,
      4962,
      3696,
      3695,
      3694
    ],
    [
      3696,
      4962,
      4963,
      4964,
      3698,
      3697
    ],
    [
      3699,
      3698,
      4964,
      4965,
      4966,
      3700
    ],
    [
      3701,
      3700,
      4966,
      4967,
      4968,
      3702
    ],
    [
      3703,
      3702,
      4968,
      4969,
      3705,
      3704
    ],
    [
      3705,
      4969,
      4970,
      4971,
      3707,
      3706
    ],
    [
      3707,
      4971,
      4972,
      4973,
      3709,
      3708
    ],
    [
      3709,
      4973,
      4974,
      4975,
      3711,
      3710
    ],
    [
      3711,
      4975,
      4976,
      4977,
      3713,
      3712
    ],
    [
      3713,
      4977,
      4978,
      4979,
      3715,
      3714
    ],
    [
      3716,
      3715,
      4979,
      4980,
      4981,
      3717
    ],
    [
      4982,
      3719,
      3718,
      3717,
      4981
    ],
    [
      4982,
      4983,
      4984,
      4985,
      3721,
      3720,
      3719
    ],
    [
      3725,
      4986,
      4987,
      4988,
      3727,
      3726
    ],
    [
      3725,
      3724,
      4989,
      4990,
      4986
    ],
    [
      3723,
      3722,
      3721,
      4985,
      4991,
      4992,
      4989,
      3724
    ],
    [
      3727,
      4988,
      4993,
      4994,
      3730,
      3729,
      3728
    ],
    [
      3730,
      4994,
      4995,
      3733,
      3731
    ],
    [
      3732,
      3733,
      4995,
      4996,
      4997,
      4998
    ],
    [
      3735,
      3734,
      3736,
      3737,
      4999,
      5000,
      5001,
      5002,
      5003,
      5004
    ],
    [
      5005,
      5006,
      5007,
      5008,
      5009,
      5010,
      5011
    ],
    [
      5012,
      5007,
      5006,
      5013,
      5014,
      5015
    ],
    [
      5016,
      5017,
      5018,
      5015,
      5014
    ],
    [
      5019,
      5020,
      5021,
      5022,
      5023,
      5024
    ],
    [
      5019,
      5025,
      5026,
      5027,
      5028,
      5029,
      5020
    ],
    [
      5028,
      5027,
      5030,
      5031,
      5032,
      5033,
      5034
    ],
    [
      5035,
      5036,
      5033,
      5032,
      5037,
      5038
    ],
    [
      5039,
      5040,
      5041,
      5042,
      5035,
      5038
    ],
    [
      5043,
      5041,
      5040,
      5044,
      5045,
      5046
    ],
    [
      5047,
      5046,
      5045,
      5048,
      5049,
      5050
    ],
    [
      5051,
      5052,
      5050,
      5049,
      5053
    ],
    [
      5051,
      5054,
      5055,
      5056,
      5057,
      5052
    ],
    [
      5058,
      5059,
      5056,
      5055,
      5060,
      5061
    ],
    [
      5058,
      5061,
      5062,
      5063,
      5064,
      5065
    ],
    [
      5064,
      5063,
      5066,
      5067,
      5068,
      5069,
      5070
    ],
    [
      5069,
      5068,
      5071,
      5072,
      5073,
      5074
    ],
    [
      5075,
      5076,
      5077,
      5078,
      5079,
      5080,
      5073,
      5072
    ],
    [
      3744,
      3746,
      3748,
      5081,
      5082,
      3745
    ],
    [
      3743,
      3742,
      3745,
      5082,
      5083,
      5084
    ],
    [
      3743,
      5084,
      5085,
      5086,
      3739,
      3738
    ],
    [
      5086,
      5087,
      5088,
      5089,
      3740,
      3739
    ],
    [
      5089,
      5088,
      5090,
      5091,
      5092
    ],
    [
      5093,
      5094,
      5092,
      5091,
      5095
    ],
    [
      5093,
      5095,
      5096,
      5097,
      5098,
      5099
    ],
    [
      5100,
      5101,
      5102,
      5103,
      5098,
      5097
    ],
    [
      5104,
      5101,
      5100,
      5105,
      5106,
      5107
    ],
    [
      5108,
      5109,
      5110,
      5111,
      5112,
      5107,
      5106
    ],
    [
      5113,
      5114,
      5115,
      5116,
      5117,
      5118,
      5110,
      5109
    ],
    [
      5119,
      5120,
      5121,
      5122,
      5123,
      5124,
      5125
    ],
    [
      5119,
      5126,
      5127,
      5120
    ],
    [
      5128,
      5129,
      5130,
      5131,
      5132,
      5127,
      5126
    ],
    [
      5131,
      5130,
      5133,
      5134
    ],
    [
      5135,
      5136,
      5134,
      5133,
      5137
    ],
    [
      5135,
      5137,
      5138,
      5139,
      5140
    ],
    [
      5141,
      5142,
      5024,
      5023,
      5140,
      5139,
      5143
    ],
    [
      5144,
      5142,
      5141,
      5145,
      5146
    ],
    [
      5147,
      5148,
      5149,
      5150,
      5151,
      5152,
      5153
    ],
    [
      5154,
      5150,
      5149,
      5155,
      5156,
      5157,
      5158
    ],
    [
      5159,
      5160,
      5161,
      5157,
      5156,
      5162,
      5163
    ],
    [
      5159,
      5164,
      5165,
      5166,
      5167,
      5160
    ],
    [
      5168,
      5166,
      5165,
      5169,
      5170,
      5171
    ],
    [
      5172,
      5173,
      5174,
      5171,
      5170,
      5175,
      5176
    ],
    [
      5172,
      5176,
      5177,
      5178,
      5179
    ],
    [
      5180,
      5178,
      5177,
      5181,
      5182,
      5183
    ],
    [
      5184,
      5185,
      5183,
      5182,
      5186,
      5187
    ],
    [
      5188,
      5189,
      5184,
      5187,
      5190,
      5191
    ],
    [
      5188,
      5191,
      5192,
      5193,
      5194,
      5195
    ],
    [
      5194,
      5193,
      5196,
      5197,
      5198,
      5199,
      5200
    ],
    [
      5201,
      5202,
      5203,
      5204,
      5199,
      5198
    ],
    [
      5205,
      5206,
      5203,
      5202,
      5207,
      5208
    ],
    [
      5205,
      5208,
      5209,
      5210,
      5211,
      5212
    ],
    [
      5211,
      5210,
      5213,
      5214,
      5215
    ],
    [
      5216,
      5215,
      5214,
      5217,
      5218,
      5219,
      5220,
      5221
    ],
    [
      3750,
      5222,
      5223,
      5081,
      3748,
      3747
    ],
    [
      5224,
      5222,
      3750,
      3749,
      3752,
      5225,
      5226
    ],
    [
      3754,
      5227,
      5228,
      5225,
      3752,
      3751
    ],
    [
      3753,
      3756,
      5229,
      5230,
      5227,
      3754
    ],
    [
      3755,
      3758,
      5231,
      5232,
      5229,
      3756
    ],
    [
      3758,
      3757,
      3760,
      5233,
      5231
    ],
    [
      3762,
      5234,
      5235,
      5233,
      3760,
      3759
    ],
    [
      3761,
      3764,
      5236,
      5237,
      5234,
      3762
    ],
    [
      3764,
      3763,
      3766,
      5238,
      5239,
      5236
    ],
    [
      5240,
      5241,
      5238,
      3766,
      3765,
      3768
    ],
    [
      5240,
      3768,
      3767,
      3770,
      5242,
      5243
    ],
    [
      5242,
      3770,
      3769,
      3772,
      5244,
      5245
    ],
    [
      5246,
      5247,
      5244,
      3772,
      3771,
      3774
    ],
    [
      5246,
      3774,
      3773,
      3776,
      5248,
      5249
    ],
    [
      3777,
      5250,
      5251,
      5248,
      3776,
      3775
    ],
    [
      3777,
      3778,
      3780,
      5252,
      5253,
      5254,
      5250
    ],
    [
      3779,
      3782,
      5255,
      5256,
      5252,
      3780
    ],
    [
      3784,
      5257,
      5258,
      5255,
      3782,
      3781
    ],
    [
      3784,
      3783,
      3786,
      5259,
      5260,
      5257
    ],
    [
      5261,
      5262,
      5259,
      3786,
      3785,
      3788
    ],
    [
      3787,
      3790,
      5263,
      5264,
      5261,
      3788
    ],
    [
      3789,
      3792,
      5265,
      5266,
      5263,
      3790
    ],
    [
      3791,
      3794,
      5267,
      5268,
      5265,
      3792
    ],
    [
      5269,
      5267,
      3794,
      3793,
      3796,
      5270
    ],
    [
      3795,
      3798,
      5271,
      5272,
      5270,
      3796
    ],
    [
      3797,
      3800,
      5273,
      5274,
      5271,
      3798
    ],
    [
      5273,
      3800,
      3799,
      3802,
      5275,
      5276
    ],
    [
      5277,
      5275,
      3802,
      3801,
      3804,
      5278
    ],
    [
      3807,
      5279,
      5280,
      5278,
      3804,
      3803
    ],
    [
      3807,
      3806,
      5281,
      5282,
      5279
    ],
    [
      3808,
      5283,
      5284,
      5281,
      3806,
      3805
    ],
    [
      3808,
      3809,
      5285,
      5286,
      5287,
      5288,
      5283
    ],
    [
      3740,
      5089,
      5092,
      5094,
      3810,
      3741
    ],
    [
      5093,
      5099,
      3812,
      3811,
      3810,
      5094
    ],
    [
      3813,
      3812,
      5099,
      5098,
      5103,
      3814
    ],
    [
      3815,
      3814,
      5103,
      5102
    ],
    [
      3815,
      5102,
      5101,
      5104,
      5289,
      3816
    ],
    [
      5104,
      5107,
      5112,
      5290,
      5289
    ],
    [
      5000,
      4999,
      5290,
      5112,
      5111
    ],
    [
      5000,
      5111,
      5110,
      5118,
      5001
    ],
    [
      5117,
      5291,
      5002,
      5001,
      5118
    ],
    [
      5005,
      5011,
      5291,
      5117,
      5116
    ],
    [
      5005,
      5116,
      5115,
      5123,
      5122,
      5013,
      5006
    ],
    [
      5016,
      5014,
      5013,
      5122,
      5121
    ],
    [
      5016,
      5121,
      5120,
      5127,
      5132,
      5292,
      5017
    ],
    [
      5292,
      5132,
      5131,
      5134,
      5136,
      5293
    ],
    [
      5135,
      5140,
      5023,
      5022,
      5294,
      5293,
      5136
    ],
    [
      5019,
      5024,
      5142,
      5144,
      5153,
      5152,
      5025
    ],
    [
      5152,
      5151,
      5026,
      5025
    ],
    [
      5154,
      5030,
      5027,
      5026,
      5151,
      5150
    ],
    [
      5154,
      5158,
      5031,
      5030
    ],
    [
      5157,
      5161,
      5037,
      5032,
      5031,
      5158
    ],
    [
      5039,
      5038,
      5037,
      5161,
      5160,
      5167
    ],
    [
      5039,
      5167,
      5166,
      5168,
      5044,
      5040
    ],
    [
      5048,
      5045,
      5044,
      5168,
      5171,
      5174
    ],
    [
      5048,
      5174,
      5173,
      5053,
      5049
    ],
    [
      5172,
      5179,
      5054,
      5051,
      5053,
      5173
    ],
    [
      5179,
      5178,
      5180,
      5060,
      5055,
      5054
    ],
    [
      5061,
      5060,
      5180,
      5183,
      5185,
      5062
    ],
    [
      5063,
      5062,
      5185,
      5184,
      5189,
      5066
    ],
    [
      5188,
      5195,
      5067,
      5066,
      5189
    ],
    [
      5194,
      5200,
      5071,
      5068,
      5067,
      5195
    ],
    [
      5075,
      5072,
      5071,
      5200,
      5199,
      5204
    ],
    [
      5075,
      5204,
      5203,
      5206,
      5076
    ],
    [
      5205,
      5212,
      5077,
      5076,
      5206
    ],
    [
      5216,
      5295,
      5296,
      5078,
      5077,
      5212,
      5211,
      5215
    ],
    [
      5297,
      5298,
      4413,
      4412,
      5299,
      5300
    ],
    [
      5301,
      5302,
      5299,
      4412,
      4411,
      5303
    ],
    [
      5301,
      5303,
      5304,
      5305,
      5306,
      5307
    ],
    [
      5308,
      5309,
      5310,
      5306,
      5305
    ],
    [
      5311,
      5312,
      5310,
      5309,
      5313
    ],
    [
      5311,
      5313,
      1432,
      1431,
      5314,
      5315,
      5316
    ],
    [
      1431,
      1430,
      5317,
      5314
    ],
    [
      1429,
      2785,
      5318,
      5319,
      5317,
      1430
    ],
    [
      2785,
      2784,
      5320,
      5321,
      5318
    ],
    [
      2784,
      2783,
      2782,
      3735,
      5004,
      5322,
      5323,
      5320
    ],
    [
      5322,
      5004,
      5003,
      5324,
      5325,
      5326
    ],
    [
      5003,
      5002,
      5291,
      5011,
      5010,
      5327,
      5324
    ],
    [
      3826,
      3825,
      3827,
      3829,
      5328,
      5329
    ],
    [
      3826,
      5329,
      5330,
      5331,
      3824,
      3823
    ],
    [
      3824,
      5331,
      5332,
      3822,
      3821
    ],
    [
      3819,
      3822,
      5332,
      5333,
      5334,
      3820
    ],
    [
      3820,
      5334,
      4667,
      3818,
      3817
    ],
    [
      3830,
      3831,
      3832,
      3833,
      5335,
      5336,
      5328,
      3829,
      3828
    ],
    [
      3839,
      3843,
      3847,
      5337,
      5338,
      3840
    ],
    [
      3847,
      3846,
      5339,
      5340,
      5337
    ],
    [
      5341,
      5340,
      5339,
      5342
    ],
    [
      5342,
      5339,
      3846,
      3845,
      3848,
      3850,
      5343
    ],
    [
      3852,
      3853,
      3855,
      5344,
      5345,
      5343,
      3850,
      3849,
      3851
    ],
    [
      3857,
      5344,
      3855,
      3854,
      3856
    ],
    [
      3857,
      3858,
      3860,
      5346,
      5345,
      5344
    ],
    [
      5347,
      5346,
      3860,
      3859,
      3862
    ],
    [
      5347,
      3862,
      3861,
      3864,
      5348
    ],
    [
      3865,
      5349,
      5348,
      3864,
      3863
    ],
    [
      3865,
      3866,
      3868,
      5350,
      5349
    ],
    [
      5351,
      5352,
      5350,
      3868,
      3867,
      3869,
      3870,
      3873
    ],
    [
      5347,
      5348,
      5349,
      5350,
      5352,
      5353,
      5354,
      5355,
      5341,
      5342,
      5343,
      5345,
      5346
    ],
    [
      3894,
      4085,
      4087,
      4086,
      5356,
      3886,
      2875,
      2874,
      3895
    ],
    [
      3887,
      5357,
      5358,
      3998,
      3997,
      3999,
      5359,
      3888
    ],
    [
      3000,
      2999,
      3994,
      3998,
      5358,
      5360
    ],
    [
      2994,
      3000,
      5360,
      5356,
      4086
    ],
    [
      5361,
      5362,
      5363,
      5364,
      5365,
      5366
    ],
    [
      5367,
      5368,
      5369,
      5366,
      5365
    ],
    [
      5370,
      5371,
      5372,
      5368,
      5367,
      5373
    ],
    [
      5374,
      5375,
      5376,
      5371,
      5370,
      5377
    ],
    [
      5374,
      5378,
      5379,
      5380,
      5381,
      5382,
      5375
    ],
    [
      5379,
      5378,
      5383,
      5384,
      5385
    ],
    [
      5385,
      5384,
      5386,
      5387,
      5388,
      5389,
      5390,
      5391
    ],
    [
      5392,
      5393,
      5394,
      5395,
      5396,
      5397,
      5398,
      5399,
      5400
    ],
    [
      5401,
      5400,
      5399,
      5402
    ],
    [
      5401,
      5402,
      5403,
      5404,
      5405,
      5406
    ],
    [
      5404,
      5407,
      5408,
      5409,
      5410,
      5411,
      5405
    ],
    [
      5412,
      5409,
      5408,
      5413,
      5414
    ],
    [
      5415,
      5416,
      5412,
      5414,
      5417,
      5418
    ],
    [
      5415,
      5418,
      5419,
      5420,
      5421
    ],
    [
      5422,
      5423,
      5424,
      5425,
      5426,
      5427
    ],
    [
      5428,
      5429,
      5426,
      5425
    ],
    [
      5428,
      5430,
      5431,
      5432,
      5433,
      5429
    ],
    [
      5434,
      5435,
      5432,
      5431,
      5436
    ],
    [
      5434,
      5436,
      5437,
      5438
    ],
    [
      5439,
      5440,
      5441,
      5442,
      5438,
      5437,
      5443,
      5444
    ],
    [
      5445,
      5446,
      5447,
      5440,
      5439
    ],
    [
      5445,
      5448,
      5449,
      5450,
      5451,
      5452,
      5453,
      5446
    ],
    [
      5454,
      3964,
      3963,
      3967,
      5455,
      5449,
      5448
    ],
    [
      5454,
      5456,
      5457,
      3965,
      3964
    ],
    [
      3965,
      5457,
      5458,
      3898,
      3897
    ],
    [
      3898,
      5458,
      5459,
      5460,
      3899
    ],
    [
      5461,
      3900,
      3899,
      5460,
      5462
    ],
    [
      5461,
      5463,
      5464,
      3902,
      3901,
      3900
    ],
    [
      3904,
      3903,
      3902,
      5464,
      5465,
      5466
    ],
    [
      3904,
      5466,
      5467,
      5468,
      3906,
      3905
    ],
    [
      5469,
      3908,
      3907,
      3906,
      5468,
      5470
    ],
    [
      5471,
      3913,
      3909,
      3908,
      5469,
      5472
    ],
    [
      5471,
      5473,
      5474,
      3915,
      3914,
      3913
    ],
    [
      3916,
      3915,
      5474,
      5475,
      5476,
      3919
    ],
    [
      3920,
      3919,
      5476,
      5477,
      5478,
      3924
    ],
    [
      3925,
      3924,
      5478,
      5479,
      5480,
      3926
    ],
    [
      5481,
      5482,
      3930,
      3927,
      3926,
      5480
    ],
    [
      3931,
      3930,
      5482,
      5483,
      5484,
      3937
    ],
    [
      3934,
      3937,
      5484,
      5485,
      3940
    ],
    [
      3941,
      3940,
      5485,
      5486,
      5487,
      3942
    ],
    [
      3943,
      3942,
      5487,
      5488,
      3946
    ],
    [
      3953,
      3947,
      3946,
      5488,
      5489,
      5490,
      5491
    ],
    [
      3953,
      5491,
      5492,
      5493,
      3955,
      3954
    ],
    [
      3956,
      3955,
      5493,
      5494,
      5495,
      3959
    ],
    [
      5495,
      5496,
      5497,
      3960,
      3959
    ],
    [
      2879,
      2878,
      3910,
      3912,
      5498,
      5499,
      5500
    ],
    [
      5501,
      5498,
      3912,
      3911,
      3918,
      5502
    ],
    [
      3917,
      3921,
      3923,
      5503,
      5504,
      5502,
      3918
    ],
    [
      3922,
      3929,
      5505,
      5503,
      3923
    ],
    [
      3928,
      3933,
      5506,
      5507,
      5505,
      3929
    ],
    [
      3932,
      3936,
      5508,
      5509,
      5506,
      3933
    ],
    [
      3935,
      3939,
      5510,
      5511,
      5508,
      3936
    ],
    [
      3938,
      3945,
      5512,
      5513,
      5514,
      5510,
      3939
    ],
    [
      3944,
      3950,
      5515,
      5516,
      5512,
      3945
    ],
    [
      3949,
      5517,
      5518,
      5515,
      3950
    ],
    [
      3952,
      5519,
      5520,
      5517,
      3949,
      3948
    ],
    [
      3951,
      3958,
      5521,
      5522,
      5519,
      3952
    ],
    [
      3958,
      3957,
      3962,
      5523,
      5524,
      5521
    ],
    [
      3962,
      3961,
      5525,
      5526,
      5523
    ],
    [
      3961,
      3960,
      5497,
      5527,
      5528,
      5529,
      5525
    ],
    [
      5530,
      5531,
      5532,
      5528,
      5527,
      5533,
      5534
    ],
    [
      5535,
      5536,
      5369,
      5368,
      5372,
      5537,
      5538
    ],
    [
      5376,
      5539,
      5540,
      5537,
      5372,
      5371
    ],
    [
      5376,
      5375,
      5382,
      5541,
      5542,
      5539
    ],
    [
      5381,
      5543,
      5544,
      5545,
      5541,
      5382
    ],
    [
      5380,
      5546,
      5547,
      5543,
      5381
    ],
    [
      5380,
      5379,
      5385,
      5391,
      5548,
      5549,
      5546
    ],
    [
      5550,
      5551,
      5552,
      5553,
      5554,
      5389,
      5388,
      5555
    ],
    [
      5556,
      5557,
      5558,
      5552,
      5551
    ],
    [
      5395,
      5394,
      5559,
      5557,
      5556
    ],
    [
      5392,
      5400,
      5401,
      5406,
      5560,
      5561
    ],
    [
      5406,
      5405,
      5411,
      5562,
      5560
    ],
    [
      5563,
      5410,
      5409,
      5412,
      5416,
      5564
    ],
    [
      5564,
      5416,
      5415,
      5421,
      5565,
      5566,
      5567
    ],
    [
      5565,
      5421,
      5420,
      5568,
      5569,
      5570
    ],
    [
      5422,
      5571,
      5569,
      5568,
      5572,
      5423
    ],
    [
      5429,
      5433,
      5573,
      5574,
      5575,
      5427,
      5426
    ],
    [
      5432,
      5435,
      5576,
      5577,
      5573,
      5433
    ],
    [
      5434,
      5438,
      5442,
      5578,
      5579,
      5580,
      5576,
      5435
    ],
    [
      5441,
      5581,
      5582,
      5583,
      5584,
      5578,
      5442
    ],
    [
      5585,
      5586,
      5587,
      5453,
      5452
    ],
    [
      5588,
      5589,
      5585,
      5452,
      5451
    ],
    [
      5590,
      5591,
      5592,
      5593,
      5594,
      5588,
      5451,
      5450
    ],
    [
      5590,
      3974,
      3973,
      5595,
      5596,
      5591
    ],
    [
      5597,
      5598,
      5582,
      5581,
      5599,
      5587,
      5586
    ],
    [
      5585,
      5589,
      5600,
      5601,
      5597,
      5586
    ],
    [
      5588,
      5594,
      5602,
      5603,
      5604,
      5600,
      5589
    ],
    [
      5593,
      5605,
      5606,
      5602,
      5594
    ],
    [
      5593,
      5592,
      5607,
      5608,
      5609,
      5605
    ],
    [
      5592,
      5591,
      5596,
      5610,
      5611,
      5612,
      5607
    ],
    [
      5613,
      5614,
      5610,
      5596,
      5595
    ],
    [
      5613,
      3977,
      3976,
      5615,
      5616,
      5614
    ],
    [
      5613,
      5595,
      3973,
      2904,
      2906,
      2910,
      3975,
      3977
    ],
    [
      5617,
      5618,
      5619,
      5620,
      5621
    ],
    [
      5615,
      3976,
      2926,
      2925,
      2929,
      2933,
      5620,
      5619,
      5622,
      5623
    ],
    [
      5624,
      1837,
      1836,
      5625,
      5626
    ],
    [
      1848,
      1843,
      1842,
      1841,
      4079,
      4078,
      1849
    ],
    [
      4079,
      1841,
      1833,
      1837,
      5624,
      4080
    ],
    [
      5627,
      4081,
      4080,
      5624,
      5626
    ],
    [
      5627,
      5628,
      5629,
      4082,
      4081
    ],
    [
      3979,
      3984,
      4082,
      5629,
      5630,
      5631
    ],
    [
      3979,
      5631,
      5632,
      5633,
      3985,
      3980
    ],
    [
      5634,
      5635,
      3986,
      3985,
      5633
    ],
    [
      3988,
      3987,
      3986,
      5635,
      5636,
      5637
    ],
    [
      3988,
      5637,
      5638,
      5639,
      3991,
      3989
    ],
    [
      3990,
      3991,
      5639,
      5640,
      5641,
      3992
    ],
    [
      3995,
      3993,
      3992,
      5641,
      5642,
      5643
    ],
    [
      4000,
      3996,
      3995,
      5643,
      5644,
      5645
    ],
    [
      4000,
      5645,
      5646,
      5647,
      4003,
      4001
    ],
    [
      4004,
      4003,
      5647,
      5648,
      5649,
      4006
    ],
    [
      5650,
      5651,
      4011,
      4007,
      4006,
      5649
    ],
    [
      4011,
      5651,
      5652,
      5653,
      4015,
      4012
    ],
    [
      4021,
      4016,
      4015,
      5653,
      5654,
      5655,
      5656
    ],
    [
      4018,
      4021,
      5656,
      5657,
      4022
    ],
    [
      4022,
      5657,
      5658,
      5659,
      4023
    ],
    [
      4027,
      4024,
      4023,
      5659,
      5660,
      5661,
      4030
    ],
    [
      4030,
      5661,
      5662,
      5663,
      4034,
      4031
    ],
    [
      5663,
      5664,
      5665,
      4041,
      4035,
      4034
    ],
    [
      5666,
      5667,
      4042,
      4038,
      4041,
      5665
    ],
    [
      5668,
      5669,
      4046,
      4043,
      4042,
      5667
    ],
    [
      5670,
      4051,
      4047,
      4046,
      5669,
      5671
    ],
    [
      5670,
      5672,
      5673,
      4054,
      4052,
      4051
    ],
    [
      5674,
      5675,
      4056,
      4055,
      4054,
      5673
    ],
    [
      5675,
      5676,
      5677,
      4057,
      4056
    ],
    [
      5678,
      4064,
      4061,
      4058,
      4057,
      5677,
      5679
    ],
    [
      5680,
      4067,
      4065,
      4064,
      5678,
      5681
    ],
    [
      5680,
      5682,
      4071,
      4068,
      4067
    ],
    [
      5682,
      5621,
      5620,
      2933,
      2932,
      3978,
      4071
    ],
    [
      3999,
      4002,
      4005,
      4010,
      5359
    ],
    [
      4010,
      4009,
      3889,
      3888,
      5359
    ],
    [
      4014,
      3890,
      3889,
      4009,
      4008,
      4013
    ],
    [
      4014,
      4017,
      4020,
      3891,
      3890
    ],
    [
      4020,
      4019,
      4026,
      5683,
      3892,
      3891
    ],
    [
      4029,
      5684,
      5683,
      4026,
      4025
    ],
    [
      4029,
      4028,
      4033,
      5685,
      5686,
      5684
    ],
    [
      4032,
      4037,
      5687,
      5688,
      5685,
      4033
    ],
    [
      4036,
      4040,
      5689,
      5687,
      4037
    ],
    [
      4040,
      4039,
      4045,
      5690,
      5691,
      5689
    ],
    [
      4045,
      4044,
      4048,
      4050,
      4076,
      5692,
      5693,
      5690
    ],
    [
      2967,
      2966,
      5692,
      4076,
      4075,
      4077,
      4073,
      4072,
      4074
    ],
    [
      3315,
      3334,
      3329,
      3325,
      3316
    ],
    [
      5694,
      4104,
      4103,
      4210,
      4209,
      4211,
      4212,
      4214
    ],
    [
      5694,
      4214,
      4213,
      4216,
      5695
    ],
    [
      4216,
      4215,
      4121,
      4120,
      4123,
      5695
    ],
    [
      4098,
      4105,
      5696,
      4099
    ],
    [
      5694,
      5695,
      4123,
      4122,
      4106,
      3322,
      3321,
      5696,
      4105,
      4104
    ],
    [
      4093,
      4100,
      5697,
      4094
    ],
    [
      3320,
      5698,
      5699,
      5697,
      4100,
      4099,
      5696,
      3321
    ],
    [
      4094,
      5697,
      5699,
      4090,
      4089
    ],
    [
      5700,
      5701,
      5702,
      5703,
      5704,
      5705
    ],
    [
      5706,
      5702,
      5701,
      5707,
      5708
    ],
    [
      5706,
      5708,
      5709,
      5710,
      5711
    ],
    [
      5712,
      5713,
      5714,
      5715,
      5710,
      5709,
      5716
    ],
    [
      5712,
      5717,
      5718,
      5719,
      5720,
      5713
    ],
    [
      5718,
      5721,
      5722,
      5723,
      5724,
      5719
    ],
    [
      5722,
      5725,
      5726,
      5727,
      5723
    ],
    [
      5728,
      5729,
      5730,
      5731,
      5726,
      5725,
      5732,
      5733
    ],
    [
      5734,
      5728,
      5733,
      5735,
      5736,
      5737
    ],
    [
      5738,
      5739,
      5740,
      5741,
      5742,
      5743
    ],
    [
      5744,
      5745,
      5746,
      5743,
      5742,
      5747
    ],
    [
      5748,
      5744,
      5747,
      5749,
      5750,
      5751,
      5752
    ],
    [
      5753,
      5754,
      5755,
      5756,
      5757,
      5758
    ],
    [
      5759,
      5760,
      5761,
      5757,
      5756
    ],
    [
      5759,
      5762,
      5763,
      5764,
      5760
    ],
    [
      5765,
      5766,
      5767,
      5768,
      5769,
      5770,
      5771,
      5772
    ],
    [
      5773,
      5774,
      5775,
      5776,
      5777,
      5778
    ],
    [
      5779,
      5780,
      5781,
      5782,
      5783,
      5784,
      5785,
      5786,
      5787,
      5788,
      5789,
      5790,
      5791
    ],
    [
      5792,
      5793,
      5781,
      5780
    ],
    [
      5779,
      5794,
      5795,
      5796,
      5797,
      5792,
      5780
    ],
    [
      5795,
      5794,
      5798,
      5799,
      5800,
      5801
    ],
    [
      5779,
      5791,
      5802,
      5803,
      5804,
      5805,
      4270,
      4266,
      4265,
      5798,
      5794
    ],
    [
      5806,
      5807,
      5808,
      5809,
      5810,
      5803,
      5802,
      5811,
      5812,
      5813,
      5814,
      5815
    ],
    [
      5813,
      5812,
      5816,
      5817,
      5818
    ],
    [
      5819,
      5820,
      5818,
      5817,
      5821,
      5822,
      5823
    ],
    [
      5824,
      5825,
      5826,
      5827,
      5828,
      5829,
      5830,
      5831
    ],
    [
      5824,
      5831,
      5832,
      5833,
      5834
    ],
    [
      5835,
      5833,
      5832,
      5836
    ],
    [
      5837,
      5838,
      5835,
      5836,
      5839,
      5840,
      5841
    ],
    [
      5842,
      5843,
      5844,
      5845,
      5846,
      5847
    ],
    [
      5842,
      5847,
      5848,
      5849,
      5850
    ],
    [
      5851,
      5850,
      5849,
      5852,
      5853,
      5854
    ],
    [
      5855,
      5856,
      5857,
      5858,
      5854,
      5853
    ],
    [
      5859,
      5860,
      5857,
      5856,
      5861,
      5862
    ],
    [
      5859,
      5862,
      5863,
      5864,
      5865,
      5866
    ],
    [
      5867,
      5868,
      5869,
      5865,
      5864,
      5870
    ],
    [
      5871,
      5872,
      5868,
      5867,
      5873,
      5874
    ],
    [
      5875,
      5876,
      5871,
      5874,
      5877,
      5878
    ],
    [
      5875,
      5878,
      5879,
      5880,
      5881,
      5882,
      5883
    ],
    [
      4150,
      5881,
      5880,
      5884,
      5885,
      4151
    ],
    [
      4132,
      4131,
      4142,
      4151,
      5885,
      5886,
      5887
    ],
    [
      4132,
      5887,
      5888,
      5889,
      5890,
      4133
    ],
    [
      5888,
      5891,
      5892,
      5893,
      5894,
      5895,
      5889
    ],
    [
      5896,
      5893,
      5892,
      5897,
      5898,
      5899,
      5900,
      5901
    ],
    [
      5902,
      5903,
      5904,
      5901,
      5900,
      5905
    ],
    [
      5902,
      5906,
      5907,
      5908,
      5903
    ],
    [
      5907,
      5906,
      5909,
      5910,
      5911
    ],
    [
      5912,
      5913,
      5914,
      5915,
      5911,
      5910
    ],
    [
      5916,
      5914,
      5913,
      5917,
      5918
    ],
    [
      5919,
      5920,
      5921,
      5922,
      5918,
      5917
    ],
    [
      5920,
      5923,
      5924,
      5925,
      5926,
      5921
    ],
    [
      5927,
      5928,
      5929,
      5930,
      5925,
      5924
    ],
    [
      5931,
      5929,
      5928,
      5932,
      5933,
      5934
    ],
    [
      5935,
      5934,
      5933,
      5936,
      5937,
      5938,
      5939
    ],
    [
      5940,
      5941,
      5942,
      5939,
      5938,
      5943
    ],
    [
      5940,
      5944,
      5945,
      5946,
      5947,
      5941
    ],
    [
      5948,
      5949,
      5950,
      5951,
      5946,
      5945
    ],
    [
      5949,
      5952,
      5953,
      5954,
      5955,
      5950
    ],
    [
      5956,
      5957,
      5958,
      5954,
      5953,
      5959
    ],
    [
      5960,
      5961,
      5962,
      5957,
      5956,
      5963
    ],
    [
      5960,
      5964,
      5965,
      5966,
      5967,
      5961
    ],
    [
      5968,
      5969,
      5970,
      5971,
      5966,
      5965
    ],
    [
      5972,
      5973,
      5970,
      5969,
      5974,
      5975
    ],
    [
      5976,
      5977,
      5978,
      5979,
      5972,
      5975
    ],
    [
      5980,
      5981,
      5978,
      5977,
      5982,
      5983
    ],
    [
      5980,
      5983,
      5984,
      5985,
      5986,
      5987
    ],
    [
      5988,
      5989,
      5990,
      5991,
      5986,
      5985
    ],
    [
      5992,
      5993,
      5990,
      5989,
      5994,
      5995
    ],
    [
      5996,
      5997,
      5998,
      5992,
      5995,
      5999
    ],
    [
      5996,
      6000,
      6001,
      6002,
      5997
    ],
    [
      6003,
      6004,
      6005,
      6006,
      6001,
      6000
    ],
    [
      6007,
      6005,
      6004,
      6008,
      6009,
      6010
    ],
    [
      6011,
      6010,
      6009,
      6012,
      6013,
      6014
    ],
    [
      6015,
      6016,
      6017,
      6018,
      6014,
      6013,
      6019
    ],
    [
      4218,
      4217,
      4223,
      4173,
      4172,
      4177
    ],
    [
      4218,
      4177,
      4176,
      4178,
      4220,
      4219
    ],
    [
      4185,
      4221,
      4220,
      4178,
      4180,
      4181
    ],
    [
      3133,
      3132,
      4376,
      4347,
      4165,
      4164
    ],
    [
      3110,
      3109,
      4225,
      6020,
      4226
    ],
    [
      4228,
      4227,
      4226,
      6020,
      6021,
      5838,
      5837
    ],
    [
      4228,
      5837,
      5841,
      4230,
      4229
    ],
    [
      4174,
      6022,
      6023,
      6024,
      6025,
      4231,
      4182,
      4179,
      4175
    ],
    [
      6026,
      6027,
      4232,
      4231,
      6025,
      6028
    ],
    [
      4234,
      4233,
      4232,
      6027,
      6029
    ],
    [
      4234,
      6029,
      5783,
      5782,
      4237,
      4236,
      4235
    ],
    [
      4239,
      6030,
      6031,
      4244,
      4243,
      4242,
      4240
    ],
    [
      4246,
      4245,
      4244,
      6031,
      6032
    ],
    [
      4246,
      6032,
      6033,
      4247
    ],
    [
      6034,
      6035,
      4252,
      4249,
      4248,
      4247,
      6033,
      6036
    ],
    [
      6037,
      4253,
      4252,
      6035,
      6038,
      6039
    ],
    [
      6037,
      4259,
      4258,
      4254,
      4253
    ],
    [
      4271,
      4270,
      5805,
      4278,
      4275,
      4274
    ],
    [
      4279,
      4278,
      5805,
      5804,
      6040,
      4282
    ],
    [
      4283,
      4282,
      6040,
      6041,
      4290
    ],
    [
      6042,
      4291,
      4290,
      6041
    ],
    [
      6042,
      6043,
      4294,
      4292,
      4291
    ],
    [
      4294,
      6043,
      6044,
      4295
    ],
    [
      4296,
      4295,
      6044,
      6045,
      6046
    ],
    [
      4296,
      6046,
      6047,
      6048,
      4299,
      4297
    ],
    [
      4302,
      4300,
      4299,
      6048,
      6049,
      6050,
      6051
    ],
    [
      4302,
      6051,
      6052,
      4303
    ],
    [
      4304,
      4303,
      6052,
      6053,
      6054,
      6055
    ],
    [
      6056,
      6057,
      6058,
      6059,
      6055,
      6054
    ],
    [
      6060,
      4256,
      4255,
      4263,
      4264,
      4269,
      6061,
      6062
    ],
    [
      6060,
      6063,
      6064,
      4257,
      4256
    ],
    [
      4251,
      4254,
      4258,
      4257,
      6064,
      6065,
      6066,
      6067
    ],
    [
      4251,
      6067,
      4207,
      4206,
      4250
    ],
    [
      4293,
      6068,
      6069,
      6070,
      4287,
      4286
    ],
    [
      4293,
      4298,
      4301,
      4306,
      6071,
      6072,
      6073,
      6068
    ],
    [
      6074,
      6075,
      6076,
      6077
    ],
    [
      6074,
      6077,
      6078,
      6079,
      4321,
      4320
    ],
    [
      4327,
      4322,
      4321,
      6079,
      6080
    ],
    [
      4327,
      6080,
      6081,
      6082,
      4331,
      4328
    ],
    [
      4332,
      4331,
      6082,
      6083,
      6084,
      4334,
      4333
    ],
    [
      4224,
      4336,
      6085,
      6021,
      6020,
      4225
    ],
    [
      5841,
      5840,
      6086,
      3128,
      3127,
      4230
    ],
    [
      5839,
      6087,
      6088,
      6089,
      6086,
      5840
    ],
    [
      6023,
      6022,
      6089,
      6088,
      6090
    ],
    [
      6023,
      6090,
      6091,
      6024
    ],
    [
      6025,
      6024,
      6091,
      5786,
      5785,
      6028
    ],
    [
      6026,
      6028,
      5785,
      5784
    ],
    [
      6026,
      5784,
      5783,
      6029,
      6027
    ],
    [
      4309,
      6092,
      6093,
      6094,
      4318,
      4310
    ],
    [
      6074,
      4320,
      4319,
      4318,
      6094,
      6075
    ],
    [
      4367,
      4364,
      4341,
      4159,
      3116,
      3115
    ],
    [
      4367,
      3115,
      3114,
      4160,
      4343,
      4368
    ],
    [
      6095,
      4312,
      4311,
      4317,
      4353
    ],
    [
      4352,
      4351,
      6096,
      6097,
      6095,
      4353
    ],
    [
      6098,
      6097,
      6096,
      6099,
      6100
    ],
    [
      6101,
      6102,
      6103,
      6098,
      6100,
      6104,
      6105
    ],
    [
      6106,
      6107,
      6102,
      6101,
      6108,
      6109
    ],
    [
      6106,
      6109,
      6110,
      6111,
      6112,
      6113
    ],
    [
      6114,
      6112,
      6111,
      6115,
      6116,
      6117
    ],
    [
      6118,
      6119,
      6116,
      6115,
      6120,
      6121
    ],
    [
      6118,
      6121,
      6122,
      6123,
      6124,
      6125
    ],
    [
      6126,
      6127,
      6128,
      6124,
      6123
    ],
    [
      6126,
      6129,
      6130,
      6131,
      6127
    ],
    [
      6132,
      6133,
      6134,
      6135,
      6131,
      6130,
      6136
    ],
    [
      6137,
      6138,
      6139,
      6140,
      6141,
      6142,
      6143,
      6133,
      6132
    ],
    [
      4386,
      4385,
      4388,
      6144,
      6145,
      4493
    ],
    [
      4387,
      4390,
      6146,
      6147,
      6144,
      4388
    ],
    [
      4389,
      4392,
      6148,
      6149,
      6146,
      4390
    ],
    [
      4395,
      6150,
      6151,
      6148,
      4392,
      4391
    ],
    [
      4395,
      4394,
      6152,
      6150
    ],
    [
      4398,
      6153,
      6154,
      6152,
      4394,
      4393,
      4396
    ],
    [
      6155,
      6156,
      6153,
      4398,
      4397,
      4400
    ],
    [
      6155,
      4400,
      4399,
      4402,
      6157
    ],
    [
      4374,
      4373,
      4405,
      4599,
      4598,
      4401
    ],
    [
      6158,
      6159,
      6160,
      6161,
      6162,
      6163
    ],
    [
      6164,
      6165,
      6166,
      6167,
      6161,
      6160
    ],
    [
      6168,
      6169,
      6166,
      6165,
      6170,
      6171
    ],
    [
      6168,
      6171,
      6172,
      6173,
      6174,
      6175
    ],
    [
      6176,
      6174,
      6173,
      6177,
      6178,
      6179
    ],
    [
      6178,
      6180,
      6181,
      6182,
      6179
    ],
    [
      6181,
      6180,
      6183,
      6184,
      6185,
      6186
    ],
    [
      6187,
      6188,
      6189,
      6185,
      6184,
      6190
    ],
    [
      6191,
      6192,
      6193,
      6194,
      6188,
      6187
    ],
    [
      6193,
      6192,
      6195,
      6196,
      6197,
      6198
    ],
    [
      6199,
      6200,
      6197,
      6196,
      6201,
      6202
    ],
    [
      6203,
      6204,
      6205,
      6199,
      6202,
      6206,
      6207
    ],
    [
      6203,
      6207,
      5295,
      5216,
      5221
    ],
    [
      6208,
      6209,
      4465,
      4461,
      4460
    ],
    [
      4468,
      4466,
      4465,
      6209,
      6210,
      6211
    ],
    [
      4468,
      6211,
      6212,
      6213,
      4471,
      4469
    ],
    [
      4473,
      4472,
      4471,
      6213,
      6214,
      6215
    ],
    [
      4473,
      6215,
      6216,
      4474
    ],
    [
      6216,
      6217,
      6218,
      4476,
      4475,
      4474
    ],
    [
      4477,
      4476,
      6218,
      6219,
      4478
    ],
    [
      4479,
      4478,
      6219,
      6220,
      6159,
      6158,
      4480
    ],
    [
      6221,
      6222,
      6223,
      6224,
      4410,
      4409,
      6225
    ],
    [
      4407,
      4418,
      6226,
      6227,
      4408
    ],
    [
      6228,
      6226,
      4418,
      4417,
      4422,
      6229
    ],
    [
      6229,
      4422,
      4421,
      4426,
      6230,
      6231
    ],
    [
      6232,
      6233,
      6230,
      4426,
      4425,
      4430
    ],
    [
      4431,
      6234,
      6235,
      6232,
      4430,
      4429
    ],
    [
      4431,
      4434,
      4435,
      6236,
      6237,
      6234
    ],
    [
      4435,
      4438,
      4441,
      6238,
      6239,
      6236
    ],
    [
      6240,
      6238,
      4441,
      4440,
      4443,
      6241
    ],
    [
      6242,
      6241,
      4443,
      4446,
      4447,
      6243
    ],
    [
      6244,
      6243,
      4447,
      4450,
      4453,
      6245
    ],
    [
      4454,
      6246,
      6247,
      6245,
      4453,
      4452
    ],
    [
      6248,
      6246,
      4454,
      4458
    ],
    [
      6248,
      4458,
      4457,
      4463,
      3348,
      3347
    ],
    [
      3343,
      3348,
      4463,
      4462,
      4464
    ],
    [
      3343,
      4464,
      4467,
      4470,
      3359,
      3344
    ],
    [
      6249,
      4419,
      4416,
      4415,
      6250,
      6251
    ],
    [
      6249,
      6252,
      4423,
      4420,
      4419
    ],
    [
      6253,
      4427,
      4424,
      4423,
      6252,
      6254
    ],
    [
      6255,
      4432,
      4428,
      4427,
      6253,
      6256
    ],
    [
      6255,
      6257,
      6258,
      4436,
      4433,
      4432
    ],
    [
      6259,
      4442,
      4437,
      4436,
      6258,
      6260
    ],
    [
      6261,
      6262,
      4444,
      4439,
      4442,
      6259
    ],
    [
      4445,
      4444,
      6262,
      6263,
      6264,
      4448
    ],
    [
      6265,
      6266,
      4455,
      4451,
      4449,
      4448,
      6264
    ],
    [
      4459,
      4456,
      4455,
      6266,
      6267,
      6268,
      6269
    ],
    [
      4459,
      6269,
      6270,
      6271,
      6208,
      4460
    ],
    [
      6208,
      6271,
      6272,
      6273,
      6210,
      6209
    ],
    [
      6210,
      6273,
      6274,
      6212,
      6211
    ],
    [
      6213,
      6212,
      6274,
      6275,
      6214
    ],
    [
      6216,
      6215,
      6214,
      6275,
      6276,
      6277,
      6217
    ],
    [
      6217,
      6277,
      6278,
      6279,
      6220,
      6219,
      6218
    ],
    [
      6164,
      6160,
      6159,
      6220,
      6279,
      6280,
      6281
    ],
    [
      6170,
      6165,
      6164,
      6281,
      6282,
      6283
    ],
    [
      6170,
      6283,
      6284,
      6285,
      6172,
      6171
    ],
    [
      6285,
      6286,
      6177,
      6173,
      6172
    ],
    [
      6287,
      6183,
      6180,
      6178,
      6177,
      6286,
      6288
    ],
    [
      6287,
      6289,
      6290,
      6190,
      6184,
      6183
    ],
    [
      6191,
      6187,
      6190,
      6290,
      6291,
      6292
    ],
    [
      6191,
      6292,
      6293,
      6294,
      6195,
      6192
    ],
    [
      6295,
      6201,
      6196,
      6195,
      6294,
      6296
    ],
    [
      6297,
      6206,
      6202,
      6201,
      6295,
      6298
    ],
    [
      6297,
      6299,
      6300,
      5296,
      5295,
      6207,
      6206
    ],
    [
      6301,
      6302,
      4501,
      4500,
      6303,
      6304
    ],
    [
      6305,
      6306,
      6307,
      6308,
      6309,
      6310
    ],
    [
      6305,
      6311,
      6312,
      6313,
      6306
    ],
    [
      6314,
      6315,
      6316,
      6317,
      6318
    ],
    [
      6319,
      6320,
      6316,
      6315,
      6321,
      6322,
      6323
    ],
    [
      6319,
      6323,
      6324,
      6325,
      6326
    ],
    [
      6326,
      6325,
      6327,
      6328,
      6329,
      6330
    ],
    [
      6331,
      6332,
      6329,
      6328
    ],
    [
      6331,
      4622,
      4608,
      4607,
      6333,
      6332
    ],
    [
      6333,
      4607,
      4606,
      6334,
      6335
    ],
    [
      4605,
      4557,
      4556,
      6336,
      6334,
      4606
    ],
    [
      6337,
      6336,
      4556,
      4555,
      6338
    ],
    [
      6337,
      6338,
      6339,
      6340,
      6341,
      6342,
      6343
    ],
    [
      3040,
      4381,
      4559,
      4564,
      6344,
      6345,
      6346,
      3041
    ],
    [
      4564,
      4563,
      6347,
      6348,
      6344
    ],
    [
      6348,
      6347,
      6349,
      6350,
      6351,
      6352
    ],
    [
      6353,
      6354,
      6351,
      6350,
      6355
    ],
    [
      6356,
      6354,
      6353,
      6357,
      6358,
      6359,
      6360
    ],
    [
      6361,
      6362,
      6363,
      6360,
      6359,
      6364
    ],
    [
      6365,
      6366,
      6367,
      6362,
      6361
    ],
    [
      6368,
      6369,
      6370,
      6371,
      4596,
      4595
    ],
    [
      4604,
      6372,
      6373,
      6374,
      4601,
      4600
    ],
    [
      6301,
      6304,
      6375,
      6376,
      6309,
      6308,
      6377
    ],
    [
      6305,
      6310,
      6378,
      6379,
      6380,
      6381,
      6311
    ],
    [
      6314,
      6381,
      6380,
      6382,
      6383,
      6384,
      6321,
      6315
    ],
    [
      6385,
      6386,
      6387,
      6384,
      6383
    ],
    [
      6388,
      6389,
      6390,
      6391,
      6387,
      6386
    ],
    [
      6392,
      6393,
      6390,
      6389
    ],
    [
      6392,
      4544,
      4543,
      4551,
      4623,
      6394,
      6395,
      6396,
      6393
    ],
    [
      4554,
      6339,
      6338,
      4555
    ],
    [
      4554,
      4553,
      4558,
      6397,
      6340,
      6339
    ],
    [
      4505,
      6375,
      6304,
      6303,
      4506
    ],
    [
      4512,
      6378,
      6310,
      6309,
      6376,
      4513
    ],
    [
      4514,
      6398,
      6382,
      6380,
      6379,
      4515
    ],
    [
      6385,
      6383,
      6382,
      6398,
      6399,
      6400,
      6401
    ],
    [
      6385,
      6401,
      6402,
      6388,
      6386
    ],
    [
      6388,
      6402,
      4538,
      4537,
      4541,
      4544,
      6392,
      6389
    ],
    [
      3001,
      3004,
      4507,
      4506,
      6303,
      4500
    ],
    [
      4504,
      4513,
      6376,
      6375,
      4505
    ],
    [
      4516,
      4515,
      6379,
      6378,
      4512,
      4511
    ],
    [
      4514,
      4519,
      4522,
      6399,
      6398
    ],
    [
      4521,
      4527,
      4531,
      6400,
      6399,
      4522
    ],
    [
      4531,
      4530,
      4538,
      6402,
      6401,
      6400
    ],
    [
      4563,
      4562,
      4565,
      4569,
      6349,
      6347
    ],
    [
      6349,
      4569,
      4568,
      4574,
      6355,
      6350
    ],
    [
      4577,
      4581,
      6357,
      6353,
      6355,
      4574,
      4573
    ],
    [
      4580,
      4585,
      6358,
      6357,
      4581
    ],
    [
      4584,
      4587,
      6364,
      6359,
      6358,
      4585
    ],
    [
      4591,
      6365,
      6361,
      6364,
      4587,
      4586
    ],
    [
      4591,
      4593,
      4597,
      4596,
      6371,
      6366,
      6365
    ],
    [
      4594,
      4602,
      4601,
      6374,
      6368,
      4595
    ],
    [
      6403,
      6372,
      4604,
      4603,
      4503,
      4502
    ],
    [
      6404,
      6405,
      3291,
      3290,
      4668,
      4669,
      4670,
      4672,
      6406
    ],
    [
      6407,
      6406,
      4672,
      4671,
      4674
    ],
    [
      6408,
      6407,
      4674,
      4673,
      4676
    ],
    [
      4675,
      4679,
      6409,
      6410,
      6411,
      6408,
      4676
    ],
    [
      4678,
      6412,
      6413,
      6409,
      4679
    ],
    [
      4678,
      4677,
      4680,
      4682,
      6414,
      6412
    ],
    [
      4683,
      6415,
      6416,
      6414,
      4682,
      4681
    ],
    [
      4685,
      6417,
      6418,
      6415,
      4683,
      4684
    ],
    [
      6419,
      6417,
      4685,
      4686,
      4688,
      6420
    ],
    [
      6421,
      6422,
      6420,
      4688,
      4687,
      4690
    ],
    [
      6421,
      4690,
      4689,
      4691,
      4692,
      5354,
      5353
    ],
    [
      3296,
      3299,
      6423,
      4693,
      682,
      681,
      3302
    ],
    [
      6424,
      6423,
      3299,
      3293,
      3292
    ],
    [
      6425,
      6424,
      3292,
      3291,
      6405
    ],
    [
      6404,
      6426,
      4696,
      4695,
      6425,
      6405
    ],
    [
      688,
      686,
      685,
      4698,
      6427
    ],
    [
      688,
      6427,
      6428,
      692,
      689
    ],
    [
      692,
      6428,
      6429,
      1961,
      1960,
      695,
      693
    ],
    [
      4705,
      4704,
      4703,
      4848,
      4847,
      4706
    ],
    [
      4709,
      4708,
      4707,
      4706,
      4847,
      4846,
      6430,
      6431
    ],
    [
      4709,
      6431,
      6432,
      4711,
      4710
    ],
    [
      6433,
      4713,
      4712,
      4711,
      6432
    ],
    [
      4714,
      4713,
      6433,
      6434,
      6435,
      4715
    ],
    [
      4716,
      4715,
      6435,
      6436,
      6437,
      6438,
      4717
    ],
    [
      4720,
      4719,
      4718,
      4717,
      6438,
      6439
    ],
    [
      4720,
      6439,
      6440,
      6441,
      4722,
      4721
    ],
    [
      6441,
      6442,
      6443,
      4724,
      4723,
      4722
    ],
    [
      6443,
      6444,
      6445,
      6446,
      4729,
      4725,
      4724
    ],
    [
      4727,
      4729,
      6446,
      6447,
      6448,
      6449,
      4730
    ],
    [
      6448,
      6450,
      6451,
      6452,
      6453,
      6449
    ],
    [
      6454,
      6455,
      6456,
      6452,
      6451,
      6457
    ],
    [
      6454,
      6458,
      6459,
      6460,
      6455
    ],
    [
      6461,
      6462,
      6463,
      6464,
      6465,
      6466
    ],
    [
      6467,
      6468,
      6469,
      6470,
      6471,
      6472,
      6473,
      6464,
      6463
    ],
    [
      6474,
      6475,
      6476,
      6468,
      6467,
      6477,
      6478
    ],
    [
      6478,
      6477,
      6479,
      6480,
      6481
    ],
    [
      6479,
      6482,
      6483,
      6484,
      6480
    ],
    [
      6485,
      6486,
      6483,
      6482,
      6487
    ],
    [
      6485,
      6488,
      6489,
      4840,
      4843,
      6490,
      6486
    ],
    [
      4730,
      6449,
      6453,
      4736,
      4731
    ],
    [
      4736,
      6453,
      6452,
      6456,
      4738,
      4737
    ],
    [
      4742,
      4739,
      4738,
      6456,
      6455,
      6460
    ],
    [
      4746,
      4743,
      4742,
      6460,
      6459,
      6461,
      6466,
      4749
    ],
    [
      4754,
      4750,
      4749,
      6466,
      6465
    ],
    [
      6473,
      4759,
      4755,
      4754,
      6465,
      6464
    ],
    [
      4761,
      4760,
      4759,
      6473,
      6472
    ],
    [
      4766,
      4762,
      4761,
      6472,
      6471
    ],
    [
      4766,
      6471,
      6470,
      6491,
      4769,
      4767
    ],
    [
      6491,
      6492,
      6493,
      4778,
      4773,
      4770,
      4769
    ],
    [
      4795,
      4790,
      4787,
      4780,
      4779,
      4778,
      6493
    ],
    [
      4795,
      6493,
      6492,
      6494,
      4797,
      4796
    ],
    [
      4797,
      6494,
      6495,
      4804,
      4803,
      4798
    ],
    [
      4805,
      4804,
      6495,
      6496,
      6497,
      4811
    ],
    [
      4808,
      4811,
      6497,
      6498,
      4812
    ],
    [
      6499,
      4818,
      4813,
      4812,
      6498,
      6500
    ],
    [
      6501,
      4822,
      4819,
      4818,
      6499,
      6502
    ],
    [
      6501,
      6503,
      6504,
      4824,
      4823,
      4822
    ],
    [
      6505,
      4828,
      4825,
      4824,
      6504,
      6506
    ],
    [
      6505,
      6507,
      6508,
      4833,
      4829,
      4828
    ],
    [
      4833,
      6508,
      6490,
      4843,
      4837,
      4834
    ],
    [
      4908,
      6509,
      6510,
      6511,
      4905,
      4904
    ],
    [
      6512,
      6509,
      4908,
      4912,
      4916,
      4919,
      6513,
      6514
    ],
    [
      6515,
      6513,
      4919,
      4918,
      4921
    ],
    [
      4920,
      4923,
      6516,
      6517,
      6515,
      4921
    ],
    [
      4923,
      4922,
      4924,
      3562,
      3561,
      6516
    ],
    [
      4902,
      6518,
      6519,
      6520,
      4909,
      4903
    ],
    [
      6521,
      4910,
      4909,
      6520,
      6522,
      6523
    ],
    [
      6521,
      6524,
      6525,
      4913,
      4911,
      4910
    ],
    [
      4928,
      4914,
      4913,
      6525,
      4929
    ],
    [
      3639,
      4917,
      4915,
      4914,
      4928,
      4926,
      4925,
      3640
    ],
    [
      6526,
      4889,
      4888,
      4887,
      6527
    ],
    [
      4895,
      4890,
      4889,
      6526,
      6528,
      6529,
      6530,
      4897
    ],
    [
      6531,
      6532,
      6533,
      4907,
      4900,
      4899
    ],
    [
      4902,
      4907,
      6533,
      6534,
      6535,
      6518
    ],
    [
      6536,
      6537,
      6538,
      6522,
      6520,
      6519
    ],
    [
      6523,
      6522,
      6538,
      6539,
      6540
    ],
    [
      4937,
      4936,
      6541,
      6542,
      6543,
      4942,
      4940,
      4939
    ],
    [
      6542,
      6544,
      6545,
      6546,
      6543
    ],
    [
      6547,
      6548,
      6546,
      6545,
      6549,
      6550,
      6551
    ],
    [
      6547,
      6551,
      6552,
      6553
    ],
    [
      6553,
      6552,
      6554,
      6555,
      6556,
      6557
    ],
    [
      6558,
      6559,
      6560,
      6556,
      6555,
      6561
    ],
    [
      6558,
      6562,
      6563,
      6564,
      6565,
      6559
    ],
    [
      6566,
      6567,
      6568,
      6569,
      6564,
      6563
    ],
    [
      6570,
      6568,
      6567,
      6571,
      6572,
      6573
    ],
    [
      6574,
      6575,
      6576,
      6573,
      6572
    ],
    [
      6577,
      6576,
      6575,
      6578,
      6579,
      6580
    ],
    [
      6581,
      6582,
      6583,
      6584,
      6585,
      6586
    ],
    [
      6587,
      6581,
      6586,
      4863,
      4862
    ],
    [
      6587,
      4862,
      4861,
      4870,
      6588
    ],
    [
      4884,
      6588,
      4870,
      4869,
      4872
    ],
    [
      4881,
      4880,
      4886,
      6589,
      6590
    ],
    [
      4885,
      4892,
      6591,
      6589,
      4886
    ],
    [
      4891,
      4894,
      6592,
      6593,
      6594,
      6591,
      4892
    ],
    [
      4896,
      6595,
      6592,
      4894,
      4893
    ],
    [
      4896,
      4901,
      4906,
      6596,
      6597,
      6595
    ],
    [
      4906,
      4905,
      6511,
      6598,
      6599,
      6596
    ],
    [
      6600,
      6598,
      6511,
      6510,
      6601,
      6602
    ],
    [
      6603,
      6601,
      6510,
      6509,
      6512
    ],
    [
      6603,
      6512,
      6514,
      6604,
      6605
    ],
    [
      6606,
      6604,
      6514,
      6513,
      6515,
      6517
    ],
    [
      4842,
      4841,
      6606,
      6517,
      6516,
      3561,
      3560
    ],
    [
      4844,
      4848,
      4703,
      4702,
      4701,
      4849
    ],
    [
      4701,
      4700,
      6607,
      4853,
      4850,
      4849
    ],
    [
      4853,
      6607,
      6608,
      6609,
      6610,
      4856,
      4854
    ],
    [
      6611,
      6612,
      4864,
      4857,
      4856,
      6610
    ],
    [
      4859,
      4864,
      6612,
      6613,
      6614
    ],
    [
      4865,
      4860,
      4859,
      6614,
      6615,
      6616
    ],
    [
      4865,
      6616,
      6617,
      6618,
      4866
    ],
    [
      4867,
      4866,
      6618,
      6619,
      6620
    ],
    [
      6621,
      6622,
      4873,
      4868,
      4867,
      6620
    ],
    [
      4871,
      4873,
      6622,
      6623,
      4874
    ],
    [
      4879,
      4878,
      6624,
      6625,
      6527,
      4887
    ],
    [
      6526,
      6527,
      6625,
      6626,
      6528
    ],
    [
      6627,
      6534,
      6533,
      6532,
      6628
    ],
    [
      6627,
      6629,
      6630,
      6631,
      6535,
      6534
    ],
    [
      6630,
      6632,
      6633,
      6634,
      6635,
      6636,
      6631
    ],
    [
      6637,
      6638,
      6639,
      6640,
      6634,
      6633
    ],
    [
      6641,
      6639,
      6638,
      6642,
      6643,
      6644
    ],
    [
      6645,
      6644,
      6643,
      6646,
      6647
    ],
    [
      6648,
      6649,
      6650,
      6647,
      6646,
      6651
    ],
    [
      6648,
      6652,
      6653,
      6654,
      6655,
      6649
    ],
    [
      6656,
      6657,
      6658,
      6659,
      6660,
      6654,
      6653
    ],
    [
      6661,
      6662,
      6663,
      6658,
      6657,
      6664
    ],
    [
      6661,
      6665,
      6666,
      6667,
      6662
    ],
    [
      6668,
      6669,
      6670,
      6671,
      6666,
      6665
    ],
    [
      6672,
      6670,
      6669,
      6673,
      6674
    ],
    [
      6675,
      6676,
      6674,
      6673,
      6677,
      6678,
      6679
    ],
    [
      6521,
      6523,
      6540,
      6680,
      4935,
      4932,
      4934,
      6524
    ],
    [
      4927,
      4929,
      6525,
      6524,
      4934,
      4931,
      4930
    ],
    [
      6547,
      6553,
      6557,
      6681,
      6682,
      6548
    ],
    [
      4942,
      6543,
      6546,
      6548,
      6682,
      6683,
      4943
    ],
    [
      4941,
      4943,
      6683,
      6684,
      6685,
      4944
    ],
    [
      4944,
      6685,
      6686,
      6687,
      4945
    ],
    [
      4947,
      4946,
      4945,
      6687,
      6688,
      6689,
      6690,
      6691,
      4948
    ],
    [
      6691,
      6692,
      4949,
      3668,
      3667,
      4948
    ],
    [
      6691,
      6690,
      6693,
      6694,
      6692
    ],
    [
      4950,
      4949,
      6692,
      6694,
      6695,
      4951
    ],
    [
      4954,
      4953,
      4952,
      6696,
      6697,
      6698,
      4955
    ],
    [
      4956,
      4955,
      6698,
      6699,
      6700,
      4957
    ],
    [
      3680,
      3679,
      4957,
      6700,
      6701,
      6702,
      4958
    ],
    [
      4958,
      6702,
      6703,
      4959
    ],
    [
      3686,
      3685,
      4960,
      4959,
      6703,
      6704,
      6705,
      6706,
      3687
    ],
    [
      6707,
      3692,
      3689,
      3688,
      3687,
      6706,
      6708,
      6709
    ],
    [
      6707,
      6710,
      3690,
      3692
    ],
    [
      3690,
      6710,
      6711,
      3693,
      3691
    ],
    [
      4961,
      3694,
      3693,
      6711,
      6712
    ],
    [
      4961,
      6712,
      6713,
      6714,
      4963,
      4962
    ],
    [
      6715,
      4965,
      4964,
      4963,
      6714,
      6716
    ],
    [
      6715,
      6717,
      4967,
      4966,
      4965
    ],
    [
      6717,
      6718,
      6719,
      4970,
      4969,
      4968,
      4967
    ],
    [
      6720,
      4972,
      4971,
      4970,
      6719,
      6721
    ],
    [
      6720,
      6722,
      6723,
      4974,
      4973,
      4972
    ],
    [
      4975,
      4974,
      6723,
      6724,
      6725,
      4976
    ],
    [
      4976,
      6725,
      6726,
      4978,
      4977
    ],
    [
      4978,
      6726,
      6727,
      4980,
      4979
    ],
    [
      4982,
      4981,
      4980,
      6727,
      6728,
      6729,
      4983
    ],
    [
      6730,
      6731,
      4987,
      4986,
      4990,
      6732,
      6733
    ],
    [
      6734,
      4993,
      4988,
      4987,
      6731,
      6735
    ],
    [
      2678,
      2677,
      3816,
      5289,
      5290,
      4999,
      3737
    ],
    [
      5315,
      5314,
      5317,
      5319,
      6736,
      6737
    ],
    [
      6736,
      5319,
      5318,
      5321,
      6738,
      6739
    ],
    [
      6740,
      6738,
      5321,
      5320,
      5323,
      6741
    ],
    [
      6742,
      6743,
      5325,
      5324,
      5327,
      6744
    ],
    [
      6745,
      6744,
      5327,
      5010,
      5009
    ],
    [
      5012,
      6746,
      6747,
      5008,
      5007
    ],
    [
      5012,
      5015,
      5018,
      6748,
      6749,
      6746
    ],
    [
      5292,
      5293,
      5294,
      6750,
      6748,
      5018,
      5017
    ],
    [
      5294,
      5022,
      5021,
      6751,
      6752,
      6750
    ],
    [
      5021,
      5020,
      5029,
      6753,
      6754,
      6751
    ],
    [
      5028,
      5034,
      6755,
      6756,
      6753,
      5029
    ],
    [
      6755,
      5034,
      5033,
      5036,
      6757
    ],
    [
      5035,
      5042,
      6758,
      6759,
      6757,
      5036
    ],
    [
      5043,
      6760,
      6761,
      6758,
      5042,
      5041
    ],
    [
      5047,
      6762,
      6763,
      6760,
      5043,
      5046
    ],
    [
      5047,
      5050,
      5052,
      5057,
      6764,
      6765,
      6762
    ],
    [
      6766,
      6767,
      6764,
      5057,
      5056,
      5059
    ],
    [
      6766,
      5059,
      5058,
      5065,
      6768,
      6769
    ],
    [
      6770,
      6768,
      5065,
      5064,
      5070,
      6771
    ],
    [
      5069,
      5074,
      6772,
      6771,
      5070
    ],
    [
      6773,
      6772,
      5074,
      5073,
      5080
    ],
    [
      6774,
      6773,
      5080,
      5079,
      6775
    ],
    [
      5224,
      6776,
      6777,
      5223,
      5222
    ],
    [
      6778,
      5083,
      5082,
      5081,
      5223,
      6777,
      6779
    ],
    [
      6778,
      6780,
      6781,
      5085,
      5084,
      5083
    ],
    [
      6782,
      5087,
      5086,
      5085,
      6781
    ],
    [
      6782,
      6783,
      6784,
      5090,
      5088,
      5087
    ],
    [
      5095,
      5091,
      5090,
      6784,
      6785,
      6786,
      6787,
      5096
    ],
    [
      6788,
      6789,
      6787,
      6786,
      6790,
      6791
    ],
    [
      6792,
      6793,
      6794,
      6788,
      6791
    ],
    [
      6792,
      6795,
      6796,
      6797,
      6793
    ],
    [
      6798,
      6799,
      6796,
      6795,
      6800,
      6801
    ],
    [
      6798,
      6802,
      6803,
      6804,
      6799
    ],
    [
      5128,
      6805,
      6806,
      6807,
      5129
    ],
    [
      5129,
      6807,
      6808,
      6809,
      6810,
      6811,
      5138,
      5137,
      5133,
      5130
    ],
    [
      6812,
      6813,
      6814,
      6815,
      6816,
      6817,
      6818,
      6819
    ],
    [
      6817,
      6816,
      6820,
      6821,
      6822,
      6823
    ],
    [
      6824,
      6822,
      6821,
      6825,
      6826
    ],
    [
      6827,
      6828,
      6826,
      6825,
      6829,
      6830
    ],
    [
      6827,
      6830,
      6831,
      6832,
      6833,
      6834,
      6835
    ],
    [
      6836,
      6837,
      6838,
      6839,
      6840,
      6834,
      6833,
      6841
    ],
    [
      6842,
      6838,
      6837,
      6843,
      6844
    ],
    [
      6845,
      6844,
      6843,
      6846,
      6847,
      6848
    ],
    [
      6848,
      6847,
      6849,
      6850,
      6851,
      6852
    ],
    [
      6851,
      6853,
      6854,
      6855,
      6856,
      6852
    ],
    [
      6857,
      6858,
      6855,
      6854,
      6859,
      6860
    ],
    [
      6861,
      6857,
      6860,
      6862,
      6863,
      6864,
      6865
    ],
    [
      6864,
      6866,
      6867,
      6868,
      6869,
      6865
    ],
    [
      6870,
      6868,
      6867,
      6871,
      6872,
      6873
    ],
    [
      6873,
      6872,
      6874,
      6875,
      6876
    ],
    [
      6877,
      6878,
      6879,
      6880,
      6876,
      6875
    ],
    [
      6881,
      6882,
      6879,
      6878,
      6883,
      6884
    ],
    [
      6881,
      6884,
      6885,
      6886,
      6887,
      6888
    ],
    [
      6889,
      6890,
      6887,
      6886,
      6891,
      6892
    ],
    [
      6889,
      6892,
      6893,
      6894,
      6895,
      6896
    ],
    [
      6894,
      6893,
      6897,
      6898,
      6899
    ],
    [
      6900,
      6901,
      6899,
      6898,
      6902
    ],
    [
      6903,
      6904,
      6900,
      6902,
      6905,
      6906,
      6907
    ],
    [
      6908,
      6903,
      6907,
      6909,
      6910,
      6911
    ],
    [
      6910,
      6912,
      6913,
      6914,
      6915,
      6911
    ],
    [
      6914,
      6913,
      6916,
      6917,
      6918,
      6919,
      6920
    ],
    [
      6921,
      6920,
      6919,
      6922,
      6923,
      6924
    ],
    [
      6925,
      6926,
      6927,
      6928,
      6923,
      6922
    ],
    [
      6929,
      6927,
      6926,
      6930,
      6931,
      6932
    ],
    [
      6933,
      6934,
      6935,
      6932,
      6931
    ],
    [
      6934,
      6936,
      6937,
      6938,
      6935
    ],
    [
      6939,
      6940,
      6941,
      6937,
      6936,
      6942
    ],
    [
      6943,
      6944,
      6945,
      6946,
      6940,
      6939,
      6947
    ],
    [
      5096,
      6787,
      6789,
      5105,
      5100,
      5097
    ],
    [
      6788,
      6794,
      5108,
      5106,
      5105,
      6789
    ],
    [
      5113,
      5109,
      5108,
      6794,
      6793,
      6797
    ],
    [
      5113,
      6797,
      6796,
      6799,
      6804,
      5114
    ],
    [
      5114,
      6804,
      6803,
      5124,
      5123,
      5115
    ],
    [
      6802,
      6948,
      6949,
      5125,
      5124,
      6803
    ],
    [
      5128,
      5126,
      5119,
      5125,
      6949,
      6805
    ],
    [
      6812,
      6819,
      5143,
      5139,
      5138,
      6811
    ],
    [
      5141,
      5143,
      6819,
      6818,
      5145
    ],
    [
      6817,
      6823,
      5146,
      5145,
      6818
    ],
    [
      5147,
      5153,
      5144,
      5146,
      6823,
      6822,
      6824
    ],
    [
      5147,
      6824,
      6826,
      6828,
      5148
    ],
    [
      6827,
      6835,
      5155,
      5149,
      5148,
      6828
    ],
    [
      5155,
      6835,
      6834,
      6840,
      5162,
      5156
    ],
    [
      5163,
      5162,
      6840,
      6839
    ],
    [
      5159,
      5163,
      6839,
      6838,
      6842,
      5164
    ],
    [
      6845,
      5169,
      5165,
      5164,
      6842,
      6844
    ],
    [
      6845,
      6848,
      6852,
      6856,
      5175,
      5170,
      5169
    ],
    [
      5177,
      5176,
      5175,
      6856,
      6855,
      6858,
      5181
    ],
    [
      6861,
      5186,
      5182,
      5181,
      6858,
      6857
    ],
    [
      6861,
      6865,
      6869,
      5190,
      5187,
      5186
    ],
    [
      5191,
      5190,
      6869,
      6868,
      6870,
      5192
    ],
    [
      6870,
      6873,
      6876,
      6880,
      5196,
      5193,
      5192
    ],
    [
      6882,
      5197,
      5196,
      6880,
      6879
    ],
    [
      5201,
      5198,
      5197,
      6882,
      6881,
      6888
    ],
    [
      5201,
      6888,
      6887,
      6890,
      5207,
      5202
    ],
    [
      6889,
      6896,
      5209,
      5208,
      5207,
      6890
    ],
    [
      6950,
      5213,
      5210,
      5209,
      6896,
      6895
    ],
    [
      6950,
      6951,
      6952,
      5217,
      5214,
      5213
    ],
    [
      6952,
      6953,
      6954,
      5218,
      5217
    ],
    [
      5219,
      5218,
      6954,
      6955,
      6956,
      6957
    ],
    [
      6139,
      6957,
      6956,
      6958,
      6959,
      6140
    ],
    [
      5224,
      5226,
      6960,
      6961,
      6776
    ],
    [
      5226,
      5225,
      5228,
      6962,
      6960
    ],
    [
      5228,
      5227,
      5230,
      6963,
      5704,
      5703,
      6962
    ],
    [
      5232,
      6964,
      6963,
      5230,
      5229
    ],
    [
      5232,
      5231,
      5233,
      5235,
      6965,
      6966,
      6964
    ],
    [
      5235,
      5234,
      5237,
      6967,
      6968,
      6965
    ],
    [
      5236,
      5239,
      6969,
      6970,
      6967,
      5237
    ],
    [
      5239,
      5238,
      5241,
      6971,
      6972,
      6969
    ],
    [
      5240,
      5243,
      6973,
      6971,
      5241
    ],
    [
      6974,
      6973,
      5243,
      5242,
      5245,
      6975
    ],
    [
      6976,
      6977,
      6975,
      5245,
      5244,
      5247
    ],
    [
      5246,
      5249,
      6978,
      6979,
      6976,
      5247
    ],
    [
      5251,
      6980,
      6981,
      6982,
      6978,
      5249,
      5248
    ],
    [
      5251,
      5250,
      5254,
      6983,
      6984,
      6980
    ],
    [
      6985,
      6983,
      5254,
      5253,
      6986
    ],
    [
      6987,
      6988,
      6986,
      5253,
      5252,
      5256
    ],
    [
      5255,
      5258,
      6989,
      6990,
      6987,
      5256
    ],
    [
      6991,
      6989,
      5258,
      5257,
      5260,
      6992
    ],
    [
      6993,
      6994,
      6992,
      5260,
      5259,
      5262
    ],
    [
      5261,
      5264,
      6995,
      6996,
      6993,
      5262
    ],
    [
      6997,
      6998,
      6995,
      5264,
      5263,
      5266
    ],
    [
      6997,
      5266,
      5265,
      5268,
      6999,
      7000
    ],
    [
      6999,
      5268,
      5267,
      5269,
      7001,
      7002
    ],
    [
      5269,
      5270,
      5272,
      7003,
      7004,
      7001
    ],
    [
      7005,
      7006,
      7003,
      5272,
      5271,
      5274
    ],
    [
      7005,
      5274,
      5273,
      5276,
      7007,
      7008,
      7009
    ],
    [
      7010,
      7007,
      5276,
      5275,
      5277,
      7011
    ],
    [
      5277,
      5278,
      5280,
      7012,
      7013,
      7011
    ],
    [
      5279,
      5282,
      7014,
      7015,
      7012,
      5280
    ],
    [
      7016,
      7017,
      7014,
      5282,
      5281,
      5284
    ],
    [
      5283,
      5288,
      7018,
      7019,
      7016,
      5284
    ],
    [
      7018,
      5288,
      5287,
      7020,
      7021,
      7022,
      7023,
      7024,
      7025
    ],
    [
      5297,
      7026,
      7027,
      7028,
      5298
    ],
    [
      5297,
      5300,
      7029,
      7030,
      7026
    ],
    [
      5302,
      7031,
      7032,
      7029,
      5300,
      5299
    ],
    [
      5301,
      5307,
      7033,
      7034,
      7031,
      5302
    ],
    [
      5310,
      5312,
      7035,
      7036,
      7033,
      5307,
      5306
    ],
    [
      5311,
      5316,
      7037,
      7038,
      7035,
      5312
    ],
    [
      5315,
      6737,
      7039,
      7037,
      5316
    ],
    [
      7040,
      7039,
      6737,
      6736,
      6739,
      7041
    ],
    [
      6740,
      7042,
      7041,
      6739,
      6738
    ],
    [
      7043,
      7042,
      6740,
      6741,
      7044
    ],
    [
      5322,
      5326,
      7045,
      7044,
      6741,
      5323
    ],
    [
      7045,
      5326,
      5325,
      6743,
      7046
    ],
    [
      7047,
      5304,
      5303,
      4411,
      4410,
      6224
    ],
    [
      7047,
      7048,
      7049,
      5308,
      5305,
      5304
    ],
    [
      7050,
      7051,
      1433,
      1432,
      5313,
      5309,
      5308,
      7049
    ],
    [
      5328,
      5336,
      7052,
      5330,
      5329
    ],
    [
      7053,
      5333,
      5332,
      5331,
      5330,
      7052,
      7054
    ],
    [
      4666,
      4667,
      5334,
      5333,
      7053,
      7055,
      5355,
      5354,
      4692
    ],
    [
      5335,
      7056,
      7054,
      7052,
      5336
    ],
    [
      3833,
      3834,
      3835,
      3836,
      3840,
      5338,
      7057,
      7056,
      5335
    ],
    [
      7053,
      7054,
      7056,
      7057,
      7055
    ],
    [
      5341,
      5355,
      7055,
      7057,
      5338,
      5337,
      5340
    ],
    [
      5351,
      3873,
      3872,
      7058,
      7059,
      7060,
      7061,
      7062,
      7063
    ],
    [
      7064,
      7060,
      7059,
      7065
    ],
    [
      7064,
      7065,
      7066,
      7067
    ],
    [
      7068,
      7067,
      7066,
      7069,
      7070
    ],
    [
      7071,
      7070,
      7069,
      7072,
      7073
    ],
    [
      7074,
      7075,
      7076,
      7073,
      7072
    ],
    [
      7074,
      6429,
      6428,
      6427,
      4698,
      4697,
      7077,
      7075
    ],
    [
      5402,
      5399,
      5398,
      7078,
      7079,
      7080,
      5403
    ],
    [
      5404,
      5403,
      7080,
      7081,
      5407
    ],
    [
      5408,
      5407,
      7081,
      7082,
      7083,
      5413
    ],
    [
      7084,
      5417,
      5414,
      5413,
      7083,
      7085
    ],
    [
      5572,
      5568,
      5420,
      5419,
      7086,
      7087
    ],
    [
      5423,
      5572,
      7087,
      7088,
      7089,
      7090,
      5424
    ],
    [
      5428,
      5425,
      5424,
      7090,
      7091,
      7092,
      5430
    ],
    [
      5430,
      7092,
      5443,
      5437,
      5436,
      5431
    ],
    [
      7093,
      5459,
      5458,
      5457,
      5456,
      7094
    ],
    [
      7093,
      7095,
      5462,
      5460,
      5459
    ],
    [
      5461,
      5462,
      7095,
      7096,
      7097,
      7098,
      5463
    ],
    [
      7098,
      7099,
      5465,
      5464,
      5463
    ],
    [
      5465,
      7099,
      7100,
      7101,
      5467,
      5466
    ],
    [
      5468,
      5467,
      7101,
      7102,
      5470
    ],
    [
      5469,
      5470,
      7102,
      7103,
      7104,
      7105,
      5472
    ],
    [
      5471,
      5472,
      7105,
      7106,
      7107,
      5473
    ],
    [
      5473,
      7107,
      7108,
      5475,
      5474
    ],
    [
      5475,
      7108,
      7109,
      7110,
      5477,
      5476
    ],
    [
      5478,
      5477,
      7110,
      7111,
      7112,
      5479
    ],
    [
      5481,
      5480,
      5479,
      7112,
      7113,
      7114
    ],
    [
      7115,
      7116,
      5483,
      5482,
      5481,
      7114
    ],
    [
      5486,
      5485,
      5484,
      5483,
      7116,
      7117,
      7118,
      7119
    ],
    [
      5486,
      7119,
      7120,
      5489,
      5488,
      5487
    ],
    [
      5489,
      7120,
      7121,
      7122,
      5490
    ],
    [
      5491,
      5490,
      7122,
      7123,
      5492
    ],
    [
      5493,
      5492,
      7123,
      7124,
      7125,
      5494
    ],
    [
      5495,
      5494,
      7125,
      7126,
      7127,
      7128,
      7129,
      5496
    ],
    [
      5441,
      5440,
      5447,
      5599,
      5581
    ],
    [
      5446,
      5453,
      5587,
      5599,
      5447
    ],
    [
      5590,
      5450,
      5449,
      5455,
      3970,
      3969,
      3972,
      3974
    ],
    [
      3968,
      3970,
      5455,
      3967,
      3966
    ],
    [
      7130,
      7131,
      7132,
      7133,
      7134,
      7135,
      7136
    ],
    [
      7134,
      7133,
      7137,
      7138,
      7139
    ],
    [
      5370,
      5373,
      7138,
      7137,
      7140,
      7141,
      5377
    ],
    [
      5374,
      5377,
      7141,
      7142,
      7143,
      5383,
      5378
    ],
    [
      5383,
      7143,
      7144,
      5386,
      5384
    ],
    [
      5386,
      7144,
      7145,
      7146,
      5387
    ],
    [
      7147,
      5555,
      5388,
      5387,
      7146,
      7148
    ],
    [
      5550,
      5555,
      7147,
      7149
    ],
    [
      5395,
      5556,
      5551,
      5550,
      7149,
      7150,
      5396
    ],
    [
      502,
      506,
      1725,
      2879,
      5500,
      503
    ],
    [
      5500,
      5499,
      7151,
      504,
      503
    ],
    [
      5501,
      7152,
      7153,
      7151,
      5499,
      5498
    ],
    [
      5501,
      5502,
      5504,
      7154,
      7155,
      7152
    ],
    [
      5505,
      5507,
      7156,
      7157,
      7154,
      5504,
      5503
    ],
    [
      5506,
      5509,
      7158,
      7156,
      5507
    ],
    [
      5508,
      5511,
      7159,
      7160,
      7158,
      5509
    ],
    [
      7161,
      7159,
      5511,
      5510,
      5514,
      7162
    ],
    [
      7162,
      5514,
      5513,
      7163,
      7164
    ],
    [
      5516,
      7165,
      7166,
      7167,
      7163,
      5513,
      5512
    ],
    [
      7168,
      7165,
      5516,
      5515,
      5518,
      7169
    ],
    [
      5517,
      5520,
      7170,
      7171,
      7169,
      5518
    ],
    [
      5519,
      5522,
      7172,
      7173,
      7170,
      5520
    ],
    [
      5521,
      5524,
      7174,
      7175,
      7172,
      5522
    ],
    [
      5523,
      5526,
      7176,
      7177,
      7174,
      5524
    ],
    [
      7178,
      7179,
      7176,
      5526,
      5525,
      5529
    ],
    [
      7178,
      5529,
      5528,
      5532,
      7180,
      7181
    ],
    [
      5531,
      7182,
      7183,
      7180,
      5532
    ],
    [
      5530,
      7184,
      7185,
      7186,
      7182,
      5531
    ],
    [
      7187,
      7188,
      5540,
      5539,
      5542,
      7189,
      7190,
      7191
    ],
    [
      7192,
      7190,
      7189,
      7193,
      7194
    ],
    [
      7195,
      7193,
      7189,
      5542,
      5541,
      5545
    ],
    [
      7195,
      5545,
      5544,
      7196
    ],
    [
      7197,
      7198,
      7199,
      7200,
      7196,
      5544,
      5543,
      5547
    ],
    [
      7197,
      5547,
      5546,
      5549,
      7201
    ],
    [
      7202,
      7203,
      7201,
      5549,
      5548
    ],
    [
      7202,
      5548,
      5391,
      5390,
      7204,
      7205
    ],
    [
      7204,
      5390,
      5389,
      5554,
      7206,
      7207
    ],
    [
      7208,
      7206,
      5554,
      5553,
      7209
    ],
    [
      5557,
      5559,
      7210,
      7211,
      5558
    ],
    [
      5394,
      5393,
      7212,
      7213,
      7210,
      5559
    ],
    [
      5392,
      5561,
      7214,
      7215,
      7212,
      5393
    ],
    [
      5560,
      5562,
      7216,
      7217,
      7214,
      5561
    ],
    [
      5563,
      7218,
      7219,
      7216,
      5562,
      5411,
      5410
    ],
    [
      5563,
      5564,
      5567,
      7220,
      7221,
      7218
    ],
    [
      5566,
      7222,
      7223,
      7220,
      5567
    ],
    [
      5565,
      5570,
      7224,
      7225,
      7222,
      5566
    ],
    [
      5571,
      7226,
      7227,
      7224,
      5570,
      5569
    ],
    [
      5422,
      5427,
      5575,
      7228,
      7226,
      5571
    ],
    [
      5575,
      5574,
      7229,
      7230,
      7228
    ],
    [
      5573,
      5577,
      7231,
      7232,
      7229,
      5574
    ],
    [
      5580,
      7233,
      7231,
      5577,
      5576
    ],
    [
      7234,
      7233,
      5580,
      5579,
      7235
    ],
    [
      5578,
      5584,
      7236,
      7237,
      7235,
      5579
    ],
    [
      7238,
      7236,
      5584,
      5583,
      7239
    ],
    [
      5582,
      5598,
      7240,
      7241,
      7242,
      7239,
      5583
    ],
    [
      5597,
      5601,
      7243,
      7244,
      7240,
      5598
    ],
    [
      5601,
      5600,
      5604,
      7245,
      7246,
      7243
    ],
    [
      7245,
      5604,
      5603,
      7247
    ],
    [
      5603,
      5602,
      5606,
      7248,
      7249,
      7247
    ],
    [
      5609,
      7250,
      7248,
      5606,
      5605
    ],
    [
      5608,
      7251,
      7252,
      7250,
      5609
    ],
    [
      5608,
      5607,
      5612,
      7253,
      7254,
      7251
    ],
    [
      7255,
      7256,
      7253,
      5612,
      5611
    ],
    [
      7257,
      7258,
      7259,
      7256,
      7255
    ],
    [
      7259,
      7258,
      7260,
      7261,
      7262,
      7263
    ],
    [
      7264,
      7265,
      7266,
      7267,
      7262,
      7261
    ],
    [
      7257,
      7255,
      5611,
      5610,
      5614,
      5616
    ],
    [
      7257,
      5616,
      5615,
      5623,
      7268,
      7260,
      7258
    ],
    [
      7268,
      5623,
      5622,
      7269
    ],
    [
      5622,
      5619,
      5618,
      7270,
      7269
    ],
    [
      5617,
      7271,
      7272,
      7270,
      5618
    ],
    [
      5617,
      5621,
      5682,
      5680,
      5681,
      7273,
      7274,
      7275,
      7271
    ],
    [
      7276,
      7277,
      5628,
      5627,
      5626,
      5625,
      7278
    ],
    [
      5629,
      5628,
      7277,
      7279,
      7280,
      5630
    ],
    [
      7281,
      5632,
      5631,
      5630,
      7280,
      7282
    ],
    [
      7281,
      7283,
      7284,
      5634,
      5633,
      5632
    ],
    [
      5634,
      7284,
      7285,
      7286,
      5636,
      5635
    ],
    [
      7287,
      5638,
      5637,
      5636,
      7286,
      7288
    ],
    [
      7289,
      5640,
      5639,
      5638,
      7287,
      7290
    ],
    [
      7289,
      7291,
      7292,
      5642,
      5641,
      5640
    ],
    [
      7293,
      5644,
      5643,
      5642,
      7292,
      7294
    ],
    [
      7295,
      7296,
      7297,
      5646,
      5645,
      5644,
      7293
    ],
    [
      5646,
      7297,
      7298,
      7299,
      5648,
      5647
    ],
    [
      5650,
      5649,
      5648,
      7299,
      7300,
      7301
    ],
    [
      5650,
      7301,
      7302,
      7303,
      5652,
      5651
    ],
    [
      7304,
      5654,
      5653,
      5652,
      7303,
      7305
    ],
    [
      7304,
      7306,
      7307,
      5655,
      5654
    ],
    [
      7308,
      7309,
      5658,
      5657,
      5656,
      5655,
      7307
    ],
    [
      5660,
      5659,
      5658,
      7309,
      7310,
      7311
    ],
    [
      7312,
      7313,
      5662,
      5661,
      5660,
      7311
    ],
    [
      5663,
      5662,
      7313,
      7314,
      7315,
      5664
    ],
    [
      5666,
      5665,
      5664,
      7315,
      7316,
      7317
    ],
    [
      5666,
      7317,
      7318,
      7319,
      5668,
      5667
    ],
    [
      5668,
      7319,
      7320,
      7321,
      5671,
      5669
    ],
    [
      5670,
      5671,
      7321,
      7322,
      7323,
      5672
    ],
    [
      5674,
      5673,
      5672,
      7323,
      7324,
      7325
    ],
    [
      5674,
      7325,
      7326,
      7327,
      5676,
      5675
    ],
    [
      7328,
      5679,
      5677,
      5676,
      7327,
      7329
    ],
    [
      7328,
      7330,
      7273,
      5681,
      5678,
      5679
    ],
    [
      5683,
      5684,
      5686,
      7331,
      7332,
      3893,
      3892
    ],
    [
      5686,
      5685,
      5688,
      7333,
      7334,
      7331
    ],
    [
      5687,
      5689,
      5691,
      7335,
      7333,
      5688
    ],
    [
      5691,
      5690,
      5693,
      7336,
      7335
    ],
    [
      2966,
      2965,
      7337,
      7336,
      5693,
      5692
    ],
    [
      3131,
      7338,
      4377,
      4376,
      3132
    ],
    [
      7339,
      7338,
      3131,
      3130,
      4091,
      7340
    ],
    [
      5699,
      5698,
      7341,
      7340,
      4091,
      4090
    ],
    [
      4495,
      4499,
      7341,
      5698,
      3320,
      3319
    ],
    [
      7342,
      7343,
      5738,
      5743,
      5746,
      7344
    ],
    [
      5748,
      7345,
      7346,
      5745,
      5744
    ],
    [
      5748,
      5752,
      7347,
      7348,
      7349,
      7350,
      7345
    ],
    [
      7351,
      7348,
      7347,
      5754,
      5753,
      7352,
      7353,
      7354
    ],
    [
      7355,
      7356,
      7352,
      5753,
      5758
    ],
    [
      7355,
      5758,
      5757,
      5761,
      7357
    ],
    [
      5764,
      7358,
      7357,
      5761,
      5760
    ],
    [
      5764,
      5763,
      7359,
      7360,
      7361,
      7362,
      7358
    ],
    [
      7363,
      7364,
      7365,
      7360,
      7359
    ],
    [
      7363,
      7366,
      7367,
      7368,
      7369,
      7370,
      7364
    ],
    [
      7368,
      7367,
      7371,
      7372,
      7373,
      7374
    ],
    [
      7373,
      7372,
      7375,
      7376,
      7377,
      7378,
      7379
    ],
    [
      7380,
      7381,
      7377,
      7376,
      7382
    ],
    [
      7380,
      7383,
      7384,
      7385,
      7381
    ],
    [
      7384,
      7386,
      7387,
      7388,
      7389,
      7385
    ],
    [
      7390,
      7391,
      7392,
      7393,
      7387,
      7386
    ],
    [
      7390,
      7394,
      7395,
      7396,
      7391
    ],
    [
      7396,
      7395,
      7397,
      7398
    ],
    [
      7399,
      7400,
      7398,
      7397,
      7401
    ],
    [
      7402,
      7399,
      7401,
      7403,
      7404,
      7405
    ],
    [
      7406,
      7407,
      7408,
      7409,
      7410,
      7411,
      7412
    ],
    [
      7409,
      7408,
      7413,
      7414,
      7415,
      7416
    ],
    [
      7417,
      7415,
      7414,
      7418,
      7419
    ],
    [
      7420,
      7419,
      7418,
      7421
    ],
    [
      7422,
      7423,
      7420,
      7421,
      5789,
      5788,
      7424
    ],
    [
      5773,
      7425,
      7426,
      5790,
      5789,
      7421,
      7418,
      7414,
      7413,
      5774
    ],
    [
      7427,
      5765,
      5772,
      7428,
      7429,
      5778,
      5777
    ],
    [
      7430,
      7427,
      5777,
      5776
    ],
    [
      7430,
      5776,
      5775,
      7431,
      7432,
      7433
    ],
    [
      7434,
      7375,
      7372,
      7371,
      7435
    ],
    [
      7436,
      7437,
      7382,
      7376,
      7375,
      7434
    ],
    [
      7380,
      7382,
      7437,
      7438,
      7439,
      7440,
      7383
    ],
    [
      7441,
      7432,
      7431,
      7442,
      7443
    ],
    [
      7441,
      7440,
      7439,
      7444,
      7445,
      7433,
      7432
    ],
    [
      7363,
      7359,
      5763,
      5762,
      5769,
      5768,
      7366
    ],
    [
      7446,
      7445,
      7444,
      7447,
      7448
    ],
    [
      7430,
      7433,
      7445,
      7446,
      5766,
      5765,
      7427
    ],
    [
      7449,
      7450,
      7451,
      7452,
      7453,
      7454,
      7455
    ],
    [
      7451,
      7456,
      7457,
      7452
    ],
    [
      7458,
      7457,
      7456,
      7459,
      7460,
      7461
    ],
    [
      7462,
      7460,
      7459,
      7463,
      7464,
      7465
    ],
    [
      7466,
      7464,
      7463,
      7467,
      7468,
      7469,
      7470
    ],
    [
      7471,
      7472,
      7473,
      7469,
      7468,
      7474,
      7475
    ],
    [
      7476,
      5741,
      5740,
      7475,
      7474,
      7477
    ],
    [
      7476,
      7478,
      7479,
      5749,
      5747,
      5742,
      5741
    ],
    [
      5749,
      7479,
      7480,
      5750
    ],
    [
      7481,
      5751,
      5750,
      7480
    ],
    [
      7347,
      5752,
      5751,
      7481,
      7482,
      7483,
      5755,
      5754
    ],
    [
      7484,
      7453,
      7452,
      7457,
      7458,
      5700,
      5705
    ],
    [
      5707,
      5701,
      5700,
      7458,
      7461
    ],
    [
      5707,
      7461,
      7460,
      7462,
      5716,
      5709,
      5708
    ],
    [
      5712,
      5716,
      7462,
      7465,
      5717
    ],
    [
      7466,
      5721,
      5718,
      5717,
      7465,
      7464
    ],
    [
      7466,
      7470,
      5732,
      5725,
      5722,
      5721
    ],
    [
      5732,
      7470,
      7469,
      7473,
      5735,
      5733
    ],
    [
      5736,
      5735,
      7473,
      7472
    ],
    [
      5736,
      7472,
      7471,
      7485,
      5737
    ],
    [
      7471,
      7475,
      5740,
      5739,
      7486,
      7487,
      7485
    ],
    [
      5759,
      5756,
      5755,
      7483,
      7488,
      5770,
      5769,
      5762
    ],
    [
      5706,
      5711,
      7489,
      6961,
      6960,
      6962,
      5703,
      5702
    ],
    [
      5711,
      5710,
      5715,
      7490,
      7491,
      7489
    ],
    [
      7492,
      7490,
      5715,
      5714,
      7493
    ],
    [
      7493,
      5714,
      5713,
      5720,
      7494,
      7495
    ],
    [
      7496,
      7497,
      7498,
      7494,
      5720,
      5719,
      5724
    ],
    [
      7499,
      7496,
      5724,
      5723,
      5727
    ],
    [
      7499,
      5727,
      5726,
      5731,
      6801,
      6800
    ],
    [
      5734,
      7500,
      7501,
      5729,
      5728
    ],
    [
      5734,
      5737,
      7485,
      7487,
      7502,
      7500
    ],
    [
      6809,
      6808,
      7502,
      7487,
      7486
    ],
    [
      5738,
      7343,
      6810,
      6809,
      7486,
      5739
    ],
    [
      6814,
      7344,
      5746,
      5745,
      7346,
      6815
    ],
    [
      7345,
      7350,
      6820,
      6816,
      6815,
      7346
    ],
    [
      7351,
      7503,
      7504,
      7349,
      7348
    ],
    [
      7505,
      7506,
      7503,
      7351,
      7354,
      7507
    ],
    [
      7354,
      7353,
      7508,
      7509,
      7507
    ],
    [
      7510,
      7508,
      7353,
      7352,
      7356
    ],
    [
      7511,
      7510,
      7356,
      7355,
      7357,
      7358,
      7362,
      7512
    ],
    [
      7513,
      7361,
      7360,
      7365,
      7514,
      7515
    ],
    [
      7365,
      7364,
      7370,
      7516,
      7517,
      7514
    ],
    [
      7370,
      7369,
      7518,
      7519,
      7520,
      7516
    ],
    [
      7368,
      7374,
      7521,
      7522,
      7518,
      7369
    ],
    [
      7523,
      7524,
      7521,
      7374,
      7373,
      7379
    ],
    [
      7525,
      7526,
      7527,
      7378,
      7377,
      7381,
      7385,
      7389
    ],
    [
      5793,
      4241,
      4238,
      4237,
      5782,
      5781
    ],
    [
      4239,
      4241,
      5793,
      5792,
      5797,
      6030
    ],
    [
      5839,
      5836,
      5832,
      5831,
      5830,
      7424,
      5788,
      5787,
      6087
    ],
    [
      5795,
      5801,
      7528,
      7529,
      7530,
      5796
    ],
    [
      5801,
      5800,
      7531,
      6039,
      6038,
      7528
    ],
    [
      7531,
      5800,
      5799,
      7532
    ],
    [
      4260,
      7532,
      5799,
      5798,
      4265,
      4262,
      4261
    ],
    [
      6079,
      6078,
      7533,
      6081,
      6080
    ],
    [
      7534,
      7535,
      7533,
      6078,
      6077,
      6076,
      7536
    ],
    [
      6082,
      6081,
      7533,
      7535,
      7537,
      6083
    ],
    [
      7534,
      7538,
      5828,
      5827,
      7537,
      7535
    ],
    [
      7537,
      5827,
      5826,
      6084,
      6083
    ],
    [
      4334,
      6084,
      5826,
      5825,
      4335
    ],
    [
      5824,
      5834,
      6085,
      4336,
      4335,
      5825
    ],
    [
      5835,
      5838,
      6021,
      6085,
      5834,
      5833
    ],
    [
      6087,
      5787,
      5786,
      6091,
      6090,
      6088
    ],
    [
      7539,
      7540,
      7541,
      7542,
      7543
    ],
    [
      7539,
      7544,
      7545,
      7546,
      7547,
      7548,
      7549,
      7540
    ],
    [
      7550,
      7547,
      7546,
      7551,
      7552,
      7553,
      7554
    ],
    [
      7555,
      7556,
      7557,
      7553,
      7552,
      7558,
      7559
    ],
    [
      7555,
      7560,
      7561,
      7562,
      7563,
      7556
    ],
    [
      7564,
      7562,
      7561,
      7565,
      7566,
      7567
    ],
    [
      7568,
      7569,
      7570,
      7571,
      7567,
      7566
    ],
    [
      7572,
      7573,
      7574,
      7570,
      7569,
      7575
    ],
    [
      7572,
      7576,
      7577,
      7578,
      7579,
      7573
    ],
    [
      7580,
      7581,
      7582,
      7583,
      7578,
      7577
    ],
    [
      7584,
      7585,
      7586,
      7582,
      7581,
      7587
    ],
    [
      7588,
      7589,
      7590,
      7585,
      7584,
      7591
    ],
    [
      7588,
      7592,
      7593,
      7594,
      7595,
      7589
    ],
    [
      7596,
      7597,
      7598,
      7594,
      7593,
      7599
    ],
    [
      7596,
      7600,
      7601,
      7602,
      7603,
      7597
    ],
    [
      7604,
      7602,
      7601,
      7605,
      7606,
      7607
    ],
    [
      7607,
      7606,
      7608,
      7609,
      7610,
      7611
    ],
    [
      7610,
      7609,
      7612,
      7613,
      7614,
      7615
    ],
    [
      7616,
      7617,
      7614,
      7613,
      7618,
      7619
    ],
    [
      7620,
      7621,
      7616,
      7619,
      7622
    ],
    [
      7620,
      7622,
      7623,
      7624,
      7625,
      7626,
      7627
    ],
    [
      7628,
      7629,
      7630,
      7626,
      7625,
      7631
    ],
    [
      7632,
      7633,
      7634,
      7629,
      7628,
      7635
    ],
    [
      7632,
      7636,
      7637,
      7638,
      7639,
      7640,
      7633
    ],
    [
      7641,
      7638,
      7637,
      7642,
      7643,
      7644
    ],
    [
      7644,
      7643,
      7645,
      7646,
      7647,
      7648
    ],
    [
      7649,
      7650,
      7651,
      7647,
      7646,
      7652
    ],
    [
      7649,
      7653,
      7654,
      7655,
      7650
    ],
    [
      7656,
      7657,
      7658,
      7659,
      7660
    ],
    [
      7656,
      7661,
      7662,
      7663,
      7664,
      7657
    ],
    [
      7665,
      7666,
      7667,
      7668,
      7663,
      7662
    ],
    [
      7669,
      7667,
      7666,
      7670,
      7671,
      7672
    ],
    [
      7673,
      7674,
      7675,
      7676,
      7677,
      7671,
      7670,
      7678
    ],
    [
      7679,
      7680,
      7681,
      7682,
      7683,
      7684,
      7685
    ],
    [
      7682,
      7686,
      7687,
      7688,
      7689,
      7683
    ],
    [
      7690,
      7688,
      7687,
      7691
    ],
    [
      7690,
      7691,
      7692,
      7693,
      7694,
      7695,
      7696
    ],
    [
      7697,
      7698,
      7699,
      7700,
      7695,
      7694
    ],
    [
      7701,
      7702,
      7699,
      7698,
      7703,
      7704
    ],
    [
      7701,
      7704,
      7705,
      7706,
      7707,
      7708
    ],
    [
      7709,
      7710,
      7711,
      7712,
      7707,
      7706
    ],
    [
      7713,
      7714,
      7711,
      7710,
      7715,
      7716
    ],
    [
      7713,
      7716,
      7717,
      7718,
      7719
    ],
    [
      7720,
      7721,
      7718,
      7717,
      7722,
      7723,
      7724
    ],
    [
      7720,
      7724,
      7725,
      7726,
      7727,
      7728
    ],
    [
      7726,
      7729,
      7730,
      7731,
      7732,
      7727
    ],
    [
      7733,
      7734,
      7735,
      7736,
      7731,
      7730
    ],
    [
      7737,
      7738,
      7739,
      7735,
      7734,
      7740
    ],
    [
      7737,
      7741,
      7742,
      7743,
      7738
    ],
    [
      7744,
      7742,
      7741,
      7745,
      7746,
      7747
    ],
    [
      7747,
      7746,
      7748,
      7749,
      7750,
      7751
    ],
    [
      7752,
      7753,
      7754,
      7750,
      7749,
      7755
    ],
    [
      7752,
      7756,
      7757,
      7758,
      7759,
      7753
    ],
    [
      7760,
      7761,
      7758,
      7757,
      7762,
      7763
    ],
    [
      7764,
      7765,
      7766,
      7760,
      7763,
      7767
    ],
    [
      7764,
      7768,
      7769,
      7770,
      7771,
      7765
    ],
    [
      7772,
      7773,
      7774,
      7770,
      7769,
      7775
    ],
    [
      7772,
      7776,
      7777,
      7778,
      7779,
      7780,
      7773
    ],
    [
      7781,
      7782,
      7783,
      7784,
      7779,
      7778
    ],
    [
      7785,
      7786,
      7787,
      7788,
      7783,
      7782
    ],
    [
      7789,
      7787,
      7786,
      7790,
      7791,
      7792
    ],
    [
      7793,
      7792,
      7791,
      7794,
      7795
    ],
    [
      7793,
      7795,
      7796,
      7797,
      7798,
      7799
    ],
    [
      7798,
      7797,
      7800,
      7801,
      7802,
      7803
    ],
    [
      7804,
      7802,
      7801,
      7805,
      7806,
      7807
    ],
    [
      7808,
      7809,
      7810,
      7811,
      7807,
      7806
    ],
    [
      7812,
      7813,
      7810,
      7809,
      7814,
      7815
    ],
    [
      5845,
      7812,
      7815,
      7816,
      7817,
      5846
    ],
    [
      5847,
      5846,
      7817,
      7818,
      7819,
      5848
    ],
    [
      5849,
      5848,
      7819,
      7820,
      7821,
      5852
    ],
    [
      5855,
      5853,
      5852,
      7821,
      7822,
      7823
    ],
    [
      5855,
      7823,
      7824,
      7825,
      5861,
      5856
    ],
    [
      7825,
      7826,
      7827,
      5863,
      5862,
      5861
    ],
    [
      7827,
      7828,
      5870,
      5864,
      5863
    ],
    [
      5867,
      5870,
      7828,
      7829,
      7830,
      7831,
      5873
    ],
    [
      7831,
      7832,
      5877,
      5874,
      5873
    ],
    [
      7833,
      7834,
      5879,
      5878,
      5877,
      7832
    ],
    [
      5879,
      7834,
      7835,
      7836,
      5884,
      5880
    ],
    [
      5886,
      5885,
      5884,
      7836,
      7837,
      7838
    ],
    [
      5888,
      5887,
      5886,
      7838,
      5891
    ],
    [
      5851,
      4281,
      4280,
      4285,
      5843,
      5842,
      5850
    ],
    [
      5851,
      5854,
      5858,
      4277,
      4276,
      4281
    ],
    [
      5857,
      5860,
      4273,
      4272,
      4277,
      5858
    ],
    [
      5859,
      5866,
      4268,
      4267,
      4273,
      5860
    ],
    [
      4269,
      4268,
      5866,
      5865,
      5869,
      6061
    ],
    [
      5872,
      6062,
      6061,
      5869,
      5868
    ],
    [
      6060,
      6062,
      5872,
      5871,
      5876,
      6063
    ],
    [
      5875,
      5883,
      6065,
      6064,
      6063,
      5876
    ],
    [
      6066,
      6065,
      5883,
      5882
    ],
    [
      4150,
      4149,
      4207,
      6067,
      6066,
      5882,
      5881
    ],
    [
      7839,
      7840,
      4134,
      4133,
      5890
    ],
    [
      5895,
      7841,
      7842,
      7839,
      5890,
      5889
    ],
    [
      5895,
      5894,
      7843,
      7841
    ],
    [
      7843,
      5894,
      5893,
      5896,
      7844,
      7845
    ],
    [
      5896,
      5901,
      5904,
      7846,
      7847,
      7844
    ],
    [
      7848,
      7846,
      5904,
      5903,
      5908,
      7849
    ],
    [
      7850,
      7851,
      7849,
      5908,
      5907,
      5911,
      5915
    ],
    [
      7850,
      5915,
      5914,
      5916,
      7852,
      7853
    ],
    [
      7854,
      7852,
      5916,
      5918,
      5922,
      7855
    ],
    [
      7855,
      5922,
      5921,
      5926,
      7856,
      7857
    ],
    [
      7858,
      7859,
      7856,
      5926,
      5925,
      5930
    ],
    [
      5931,
      7860,
      7861,
      7858,
      5930,
      5929
    ],
    [
      5935,
      7862,
      7863,
      7860,
      5931,
      5934
    ],
    [
      5935,
      5939,
      5942,
      7864,
      7865,
      7862
    ],
    [
      5941,
      5947,
      7866,
      7867,
      7864,
      5942
    ],
    [
      5946,
      5951,
      7868,
      7869,
      7866,
      5947
    ],
    [
      7870,
      7868,
      5951,
      5950,
      5955,
      7871
    ],
    [
      5958,
      7872,
      7873,
      7871,
      5955,
      5954
    ],
    [
      5958,
      5957,
      5962,
      7874,
      7875,
      7872
    ],
    [
      7876,
      7877,
      7833,
      7832,
      7831,
      7830
    ],
    [
      7833,
      7877,
      7878,
      7835,
      7834
    ],
    [
      7878,
      7879,
      7837,
      7836,
      7835
    ],
    [
      5892,
      5891,
      7838,
      7837,
      7879,
      5897
    ],
    [
      5902,
      5905,
      7880,
      7881,
      5909,
      5906
    ],
    [
      7882,
      5912,
      5910,
      5909,
      7881,
      7883
    ],
    [
      7882,
      7884,
      7885,
      5919,
      5917,
      5913,
      5912
    ],
    [
      7722,
      7886,
      7887,
      7888,
      7723
    ],
    [
      7724,
      7723,
      7888,
      7889,
      7890,
      7725
    ],
    [
      7726,
      7725,
      7890,
      7891,
      7892,
      7729
    ],
    [
      7733,
      7730,
      7729,
      7892,
      7893,
      7894
    ],
    [
      7895,
      7740,
      7734,
      7733,
      7894,
      7896
    ],
    [
      7895,
      7897,
      7898,
      7745,
      7741,
      7737,
      7740
    ],
    [
      7899,
      7748,
      7746,
      7745,
      7898
    ],
    [
      7899,
      7900,
      7901,
      7755,
      7749,
      7748
    ],
    [
      7902,
      7756,
      7752,
      7755,
      7901,
      7903
    ],
    [
      7902,
      7904,
      7905,
      7762,
      7757,
      7756
    ],
    [
      7762,
      7905,
      7906,
      7907,
      7908,
      7767,
      7763
    ],
    [
      7764,
      7767,
      7908,
      7909,
      7910,
      7768
    ],
    [
      7910,
      7911,
      7912,
      7775,
      7769,
      7768
    ],
    [
      7913,
      7776,
      7772,
      7775,
      7912,
      7914
    ],
    [
      7915,
      7916,
      7777,
      7776,
      7913
    ],
    [
      7917,
      7781,
      7778,
      7777,
      7916,
      7918
    ],
    [
      7785,
      7782,
      7781,
      7917,
      7919,
      7920
    ],
    [
      7785,
      7920,
      7921,
      7922,
      7790,
      7786
    ],
    [
      7923,
      7924,
      7794,
      7791,
      7790,
      7922
    ],
    [
      7925,
      7926,
      7796,
      7795,
      7794,
      7924
    ],
    [
      7927,
      7800,
      7797,
      7796,
      7926,
      7928
    ],
    [
      7929,
      7805,
      7801,
      7800,
      7927,
      7930
    ],
    [
      7929,
      7931,
      7932,
      7808,
      7806,
      7805
    ],
    [
      7808,
      7932,
      7933,
      7934,
      7814,
      7809
    ],
    [
      7935,
      7936,
      7816,
      7815,
      7814,
      7934
    ],
    [
      7936,
      7937,
      7938,
      7818,
      7817,
      7816
    ],
    [
      7819,
      7818,
      7938,
      7939,
      7940,
      7820
    ],
    [
      7941,
      7942,
      7822,
      7821,
      7820,
      7940
    ],
    [
      7824,
      7823,
      7822,
      7942,
      7943,
      7944
    ],
    [
      7824,
      7944,
      7945,
      7826,
      7825
    ],
    [
      7829,
      7828,
      7827,
      7826,
      7945,
      7946,
      7947
    ],
    [
      7876,
      7830,
      7829,
      7947,
      7948,
      7949
    ],
    [
      7876,
      7949,
      7950,
      5898,
      5897,
      7879,
      7878,
      7877
    ],
    [
      5905,
      5900,
      5899,
      7951,
      7952,
      7880
    ],
    [
      7953,
      7883,
      7881,
      7880,
      7952,
      7954
    ],
    [
      7882,
      7883,
      7953,
      7955,
      7956,
      7884
    ],
    [
      7956,
      7957,
      7885,
      7884
    ],
    [
      5919,
      7885,
      7957,
      7958,
      7959,
      5923,
      5920
    ],
    [
      5927,
      5924,
      5923,
      7959,
      7960,
      7961
    ],
    [
      5927,
      7961,
      7962,
      7963,
      5932,
      5928
    ],
    [
      5933,
      5932,
      7963,
      7964,
      7965,
      5936
    ],
    [
      7965,
      7966,
      7967,
      5937,
      5936
    ],
    [
      7968,
      5943,
      5938,
      5937,
      7967,
      7969
    ],
    [
      5940,
      5943,
      7968,
      7970,
      7971,
      5944
    ],
    [
      5948,
      5945,
      5944,
      7971,
      7972,
      7973
    ],
    [
      5948,
      7973,
      7974,
      7975,
      5952,
      5949
    ],
    [
      7976,
      7977,
      5959,
      5953,
      5952,
      7975
    ],
    [
      7978,
      7979,
      5963,
      5956,
      5959,
      7977
    ],
    [
      5960,
      5963,
      7979,
      7980,
      7981,
      5964
    ],
    [
      7982,
      7983,
      5968,
      5965,
      5964,
      7981
    ],
    [
      5968,
      7983,
      7984,
      7985,
      5974,
      5969
    ],
    [
      7986,
      7987,
      5976,
      5975,
      5974,
      7985
    ],
    [
      5976,
      7987,
      7988,
      7989,
      5982,
      5977
    ],
    [
      7990,
      5984,
      5983,
      5982,
      7989,
      7991
    ],
    [
      7990,
      7992,
      7993,
      5988,
      5985,
      5984
    ],
    [
      5988,
      7993,
      7994,
      7995,
      5994,
      5989
    ],
    [
      7995,
      7996,
      7997,
      5999,
      5995,
      5994
    ],
    [
      5996,
      5999,
      7997,
      7998,
      6003,
      6000
    ],
    [
      6008,
      6004,
      6003,
      7998,
      7999,
      8000
    ],
    [
      6008,
      8000,
      8001,
      8002,
      6012,
      6009
    ],
    [
      6019,
      6013,
      6012,
      8002,
      8003,
      8004
    ],
    [
      8005,
      6015,
      6019,
      8004,
      8006
    ],
    [
      4128,
      4139,
      4138,
      4129
    ],
    [
      4125,
      4124,
      4129,
      4138,
      4137,
      4136,
      4135
    ],
    [
      4125,
      4135,
      4134,
      7840,
      8007,
      4126
    ],
    [
      7842,
      8008,
      8007,
      7840,
      7839
    ],
    [
      8009,
      8008,
      7842,
      7841,
      7843,
      7845,
      8010
    ],
    [
      8010,
      7845,
      7844,
      7847,
      8011,
      8012
    ],
    [
      7848,
      8013,
      8014,
      8011,
      7847,
      7846
    ],
    [
      8015,
      8016,
      8013,
      7848,
      7849,
      7851
    ],
    [
      8015,
      7851,
      7850,
      7853,
      8017,
      8018
    ],
    [
      7854,
      8019,
      8017,
      7853,
      7852
    ],
    [
      8020,
      8019,
      7854,
      7855,
      7857,
      8021
    ],
    [
      8022,
      8021,
      7857,
      7856,
      7859,
      8023
    ],
    [
      7858,
      7861,
      8024,
      8025,
      8023,
      7859
    ],
    [
      8026,
      8024,
      7861,
      7860,
      7863,
      8027
    ],
    [
      8028,
      8029,
      8027,
      7863,
      7862,
      7865
    ],
    [
      8028,
      7865,
      7864,
      7867,
      8030,
      8031
    ],
    [
      8032,
      8030,
      7867,
      7866,
      7869,
      8033
    ],
    [
      7870,
      8034,
      8035,
      8033,
      7869,
      7868
    ],
    [
      8036,
      8037,
      8034,
      7870,
      7871,
      7873
    ],
    [
      8036,
      7873,
      7872,
      7875,
      8038,
      8039
    ],
    [
      8038,
      7875,
      7874,
      8040,
      8041
    ],
    [
      8042,
      8040,
      7874,
      5962,
      5961,
      5967,
      8043
    ],
    [
      8044,
      8045,
      8043,
      5967,
      5966,
      5971
    ],
    [
      8044,
      5971,
      5970,
      5973,
      8046,
      8047
    ],
    [
      5972,
      5979,
      8048,
      8049,
      8046,
      5973
    ],
    [
      8048,
      5979,
      5978,
      5981,
      8050,
      8051
    ],
    [
      8052,
      8053,
      8050,
      5981,
      5980,
      5987
    ],
    [
      8052,
      5987,
      5986,
      5991,
      8054,
      8055
    ],
    [
      8056,
      8054,
      5991,
      5990,
      5993,
      8057
    ],
    [
      5992,
      5998,
      8058,
      8059,
      8057,
      5993
    ],
    [
      8060,
      8058,
      5998,
      5997,
      6002,
      8061
    ],
    [
      6002,
      6001,
      6006,
      8062,
      8063,
      8061
    ],
    [
      6007,
      8064,
      8065,
      8062,
      6006,
      6005
    ],
    [
      8066,
      8067,
      8064,
      6007,
      6010,
      6011
    ],
    [
      8066,
      6011,
      6014,
      6018,
      8068,
      8069
    ],
    [
      6018,
      6017,
      8070,
      8068
    ],
    [
      7263,
      7262,
      7267,
      8070,
      6017,
      6016,
      8071
    ],
    [
      4168,
      3129,
      3128,
      6086,
      6089,
      6022,
      4174,
      4171
    ],
    [
      7530,
      6036,
      6033,
      6032,
      6031,
      6030,
      5797,
      5796
    ],
    [
      6034,
      6036,
      7530,
      7529
    ],
    [
      6034,
      7529,
      7528,
      6038,
      6035
    ],
    [
      6037,
      6039,
      7531,
      7532,
      4260,
      4259
    ],
    [
      6042,
      6041,
      6040,
      5804,
      5803,
      5810,
      6045,
      6044,
      6043
    ],
    [
      6046,
      6045,
      5810,
      5809,
      6047
    ],
    [
      6047,
      5809,
      5808,
      6049,
      6048
    ],
    [
      6049,
      5808,
      5807,
      6050
    ],
    [
      5806,
      6053,
      6052,
      6051,
      6050,
      5807
    ],
    [
      5806,
      5815,
      6056,
      6054,
      6053
    ],
    [
      6056,
      5815,
      5814,
      8072,
      6057
    ],
    [
      5843,
      4285,
      4284,
      4289,
      5844
    ],
    [
      5845,
      5844,
      4289,
      4288,
      8073,
      7813,
      7812
    ],
    [
      4287,
      6070,
      8074,
      8073,
      4288
    ],
    [
      4350,
      8075,
      8076,
      8077,
      6099,
      6096,
      4351
    ],
    [
      8077,
      8078,
      8079,
      6104,
      6100,
      6099
    ],
    [
      6105,
      6104,
      8079,
      8080,
      8081
    ],
    [
      6101,
      6105,
      8081,
      8082,
      8083,
      6108
    ],
    [
      6109,
      6108,
      8083,
      8084,
      8085,
      6110
    ],
    [
      6111,
      6110,
      8085,
      8086,
      8087,
      6120,
      6115
    ],
    [
      8088,
      6122,
      6121,
      6120,
      8087,
      8089,
      8090
    ],
    [
      8088,
      8091,
      8092,
      6129,
      6126,
      6123,
      6122
    ],
    [
      8092,
      8093,
      8094,
      6136,
      6130,
      6129
    ],
    [
      6137,
      6132,
      6136,
      8094,
      8095,
      8096
    ],
    [
      8097,
      8098,
      6138,
      6137,
      8096
    ],
    [
      5219,
      6957,
      6139,
      6138,
      8098,
      5220
    ],
    [
      6095,
      6097,
      6098,
      6103,
      4313,
      4312
    ],
    [
      4314,
      4313,
      6103,
      6102,
      6107
    ],
    [
      4307,
      4314,
      6107,
      6106,
      6113
    ],
    [
      4307,
      6113,
      6112,
      6114,
      8099,
      4308
    ],
    [
      6114,
      6117,
      8100,
      8101,
      8099
    ],
    [
      8102,
      8100,
      6117,
      6116,
      6119
    ],
    [
      8102,
      6119,
      6118,
      6125,
      8103,
      8104
    ],
    [
      8105,
      8103,
      6125,
      6124,
      6128
    ],
    [
      8105,
      6128,
      6127,
      6131,
      6135,
      8106,
      8107
    ],
    [
      4381,
      4380,
      4383,
      4560,
      4559
    ],
    [
      4494,
      4570,
      4566,
      4561,
      4560,
      4383,
      3057,
      3056
    ],
    [
      4571,
      4567,
      4570,
      4494,
      4493,
      6145
    ],
    [
      4571,
      6145,
      6144,
      6147,
      4575,
      4572
    ],
    [
      4578,
      4576,
      4575,
      6147,
      6146,
      6149
    ],
    [
      4582,
      4579,
      4578,
      6149,
      6148,
      6151
    ],
    [
      4582,
      6151,
      6150,
      6152,
      6154,
      4588,
      4583
    ],
    [
      6154,
      6153,
      6156,
      4589,
      4588
    ],
    [
      6155,
      6157,
      4592,
      4590,
      4589,
      6156
    ],
    [
      4402,
      4401,
      4598,
      4597,
      4593,
      4592,
      6157
    ],
    [
      4594,
      4599,
      4405,
      4404,
      4602
    ],
    [
      4482,
      4481,
      4480,
      6158,
      6163
    ],
    [
      4482,
      6163,
      6162,
      8075,
      4350,
      4349
    ],
    [
      8076,
      8075,
      6162,
      6161,
      6167
    ],
    [
      8076,
      6167,
      6166,
      6169,
      8078,
      8077
    ],
    [
      6168,
      6175,
      8080,
      8079,
      8078,
      6169
    ],
    [
      6176,
      8082,
      8081,
      8080,
      6175,
      6174
    ],
    [
      6176,
      6179,
      6182,
      8084,
      8083,
      8082
    ],
    [
      6181,
      6186,
      8086,
      8085,
      8084,
      6182
    ],
    [
      6189,
      8089,
      8087,
      8086,
      6186,
      6185
    ],
    [
      6189,
      6188,
      6194,
      8090,
      8089
    ],
    [
      8088,
      8090,
      6194,
      6193,
      6198,
      8091
    ],
    [
      8091,
      6198,
      6197,
      6200,
      8093,
      8092
    ],
    [
      6199,
      6205,
      8095,
      8094,
      8093,
      6200
    ],
    [
      8097,
      8096,
      8095,
      6205,
      6204
    ],
    [
      8097,
      6204,
      6203,
      5221,
      5220,
      8098
    ],
    [
      1621,
      6223,
      6222,
      8108,
      1622
    ],
    [
      8109,
      6225,
      4409,
      4408,
      6227,
      8110,
      8111
    ],
    [
      6228,
      8112,
      8113,
      8110,
      6227,
      6226
    ],
    [
      6228,
      6229,
      6231,
      8114,
      8115,
      8112
    ],
    [
      8114,
      6231,
      6230,
      6233,
      8116,
      8117
    ],
    [
      8118,
      8116,
      6233,
      6232,
      6235,
      8119
    ],
    [
      6234,
      6237,
      8120,
      8121,
      8119,
      6235
    ],
    [
      8122,
      8120,
      6237,
      6236,
      6239,
      8123
    ],
    [
      6240,
      8124,
      8125,
      8123,
      6239,
      6238
    ],
    [
      6240,
      6241,
      6242,
      8126,
      8127,
      8124
    ],
    [
      6242,
      6243,
      6244,
      8128,
      8129,
      8126
    ],
    [
      8130,
      8128,
      6244,
      6245,
      6247,
      8131
    ],
    [
      3346,
      8132,
      8131,
      6247,
      6246,
      6248,
      3347
    ],
    [
      8133,
      6250,
      4415,
      4414,
      4413,
      5298,
      7028
    ],
    [
      6251,
      6250,
      8133,
      8134,
      8135
    ],
    [
      6249,
      6251,
      8135,
      8136,
      8137,
      6254,
      6252
    ],
    [
      6253,
      6254,
      8137,
      8138,
      8139,
      6256
    ],
    [
      6255,
      6256,
      8139,
      8140,
      8141,
      6257
    ],
    [
      6260,
      6258,
      6257,
      8141,
      8142,
      8143
    ],
    [
      6261,
      6259,
      6260,
      8143,
      8144,
      8145
    ],
    [
      6261,
      8145,
      8146,
      6263,
      6262
    ],
    [
      8147,
      8148,
      6265,
      6264,
      6263,
      8146
    ],
    [
      6265,
      8148,
      8149,
      8150,
      6267,
      6266
    ],
    [
      8150,
      8151,
      6268,
      6267
    ],
    [
      6270,
      6269,
      6268,
      8151,
      8152,
      8153
    ],
    [
      6270,
      8153,
      8154,
      8155,
      6272,
      6271
    ],
    [
      6274,
      6273,
      6272,
      8155,
      8156,
      6276,
      6275
    ],
    [
      8157,
      8158,
      8159,
      6280,
      6279,
      6278
    ],
    [
      8160,
      6282,
      6281,
      6280,
      8159,
      8161
    ],
    [
      8160,
      8162,
      6284,
      6283,
      6282
    ],
    [
      8163,
      8164,
      6288,
      6286,
      6285,
      6284,
      8162
    ],
    [
      6287,
      6288,
      8164,
      8165,
      8166,
      6289
    ],
    [
      8167,
      8168,
      6291,
      6290,
      6289,
      8166
    ],
    [
      6293,
      6292,
      6291,
      8168,
      8169
    ],
    [
      6296,
      6294,
      6293,
      8169,
      8170,
      8171
    ],
    [
      6295,
      6296,
      8171,
      8172,
      8173,
      6298
    ],
    [
      6297,
      6298,
      8173,
      8174,
      8175,
      6299
    ],
    [
      8176,
      6300,
      6299,
      8175,
      8177
    ],
    [
      8176,
      6775,
      5079,
      5078,
      5296,
      6300
    ],
    [
      6377,
      6308,
      6307,
      8178,
      8179
    ],
    [
      8179,
      8178,
      8180,
      8181,
      8182,
      8183
    ],
    [
      8184,
      8185,
      8181,
      8180,
      8186
    ],
    [
      8187,
      8188,
      6317,
      6316,
      6320,
      8189
    ],
    [
      6319,
      6326,
      6330,
      8190,
      8191,
      8189,
      6320
    ],
    [
      6332,
      6333,
      6335,
      8192,
      8190,
      6330,
      6329
    ],
    [
      6337,
      6343,
      8193,
      8192,
      6335,
      6334,
      6336
    ],
    [
      6397,
      4558,
      4485,
      4484,
      8194,
      8195
    ],
    [
      4483,
      8196,
      8197,
      8194,
      4484
    ],
    [
      4483,
      4488,
      8198,
      8196
    ],
    [
      4487,
      8199,
      8200,
      8198,
      4488
    ],
    [
      4490,
      8201,
      8199,
      4487,
      4486,
      4489
    ],
    [
      4490,
      4491,
      4492,
      8202,
      8203,
      8201
    ],
    [
      4492,
      3042,
      3041,
      6346,
      8204,
      8202
    ],
    [
      6346,
      6345,
      8205,
      8206,
      8204
    ],
    [
      6348,
      6352,
      8207,
      8205,
      6345,
      6344
    ],
    [
      6356,
      8208,
      8207,
      6352,
      6351,
      6354
    ],
    [
      6356,
      6360,
      6363,
      8209,
      8208
    ],
    [
      6363,
      6362,
      6367,
      8210,
      8211,
      8209
    ],
    [
      6367,
      6366,
      6371,
      6370,
      8212,
      8210
    ],
    [
      6368,
      6374,
      6373,
      8213,
      6369
    ],
    [
      8214,
      6322,
      6321,
      6384,
      6387,
      6391
    ],
    [
      8214,
      6391,
      6390,
      6393,
      6396
    ],
    [
      6324,
      6323,
      6322,
      8214,
      6396,
      6395
    ],
    [
      6324,
      6395,
      6394,
      6327,
      6325
    ],
    [
      6331,
      6328,
      6327,
      6394,
      4623,
      4622
    ],
    [
      6314,
      6318,
      6312,
      6311,
      6381
    ],
    [
      6404,
      6406,
      6407,
      6408,
      6411,
      8215,
      6426
    ],
    [
      8216,
      8215,
      6411,
      6410,
      8217
    ],
    [
      8218,
      8217,
      6410,
      6409,
      6413,
      8219
    ],
    [
      6414,
      6416,
      8220,
      8221,
      8219,
      6413,
      6412
    ],
    [
      8222,
      8223,
      8220,
      6416,
      6415,
      6418
    ],
    [
      6419,
      7062,
      7061,
      8222,
      6418,
      6417
    ],
    [
      6419,
      6420,
      6422,
      7063,
      7062
    ],
    [
      6421,
      5353,
      5352,
      5351,
      7063,
      6422
    ],
    [
      6425,
      4695,
      4694,
      4693,
      6423,
      6424
    ],
    [
      8216,
      7077,
      4697,
      4696,
      6426,
      8215
    ],
    [
      8216,
      8217,
      8218,
      7076,
      7075,
      7077
    ],
    [
      7076,
      8218,
      8219,
      8221,
      7071,
      7073
    ],
    [
      7068,
      7070,
      7071,
      8221,
      8220,
      8223
    ],
    [
      8222,
      7061,
      7060,
      7064,
      7067,
      7068,
      8223
    ],
    [
      4852,
      4851,
      4855,
      4858,
      4863,
      6586,
      6585
    ],
    [
      4852,
      6585,
      6584,
      6430,
      4846,
      4845
    ],
    [
      6430,
      6584,
      6583,
      8224,
      6434,
      6433,
      6432,
      6431
    ],
    [
      8225,
      6436,
      6435,
      6434,
      8224,
      8226
    ],
    [
      8227,
      6437,
      6436,
      8225
    ],
    [
      6439,
      6438,
      6437,
      8227,
      8228,
      8229,
      6440
    ],
    [
      6441,
      6440,
      8229,
      8230,
      8231,
      6442
    ],
    [
      8232,
      8233,
      6444,
      6443,
      6442,
      8231
    ],
    [
      6444,
      8233,
      8234,
      8235,
      6445
    ],
    [
      6446,
      6445,
      8235,
      8236,
      8237,
      6447
    ],
    [
      8238,
      8239,
      6450,
      6448,
      6447,
      8237
    ],
    [
      8239,
      8240,
      6457,
      6451,
      6450
    ],
    [
      6454,
      6457,
      8240,
      8241,
      8242,
      8243,
      8244,
      6458
    ],
    [
      6467,
      6463,
      6462,
      8244,
      8243,
      8245,
      6487,
      6482,
      6479,
      6477
    ],
    [
      6485,
      6487,
      8245,
      8246,
      6488
    ],
    [
      6491,
      6470,
      6469,
      6496,
      6495,
      6494,
      6492
    ],
    [
      6469,
      6468,
      6476,
      6500,
      6498,
      6497,
      6496
    ],
    [
      6499,
      6500,
      6476,
      6475,
      6502
    ],
    [
      6474,
      6503,
      6501,
      6502,
      6475
    ],
    [
      6474,
      6478,
      6481,
      6506,
      6504,
      6503
    ],
    [
      6481,
      6480,
      6484,
      6507,
      6505,
      6506
    ],
    [
      6508,
      6507,
      6484,
      6483,
      6486,
      6490
    ],
    [
      6536,
      6519,
      6518,
      6535,
      6631,
      6636
    ],
    [
      6536,
      6636,
      6635,
      6537
    ],
    [
      6537,
      6635,
      6634,
      6640,
      6539,
      6538
    ],
    [
      6640,
      6639,
      6641,
      6680,
      6540,
      6539
    ],
    [
      4936,
      4935,
      6680,
      6641,
      6644,
      6645,
      6541
    ],
    [
      6542,
      6541,
      6645,
      6647,
      6650,
      6544
    ],
    [
      6549,
      6545,
      6544,
      6650,
      6649,
      6655
    ],
    [
      6549,
      6655,
      6654,
      6660,
      6550
    ],
    [
      6551,
      6550,
      6660,
      6659,
      6554,
      6552
    ],
    [
      6561,
      6555,
      6554,
      6659,
      6658,
      6663
    ],
    [
      6558,
      6561,
      6663,
      6662,
      6667,
      6562
    ],
    [
      6562,
      6667,
      6666,
      6671,
      6566,
      6563
    ],
    [
      6566,
      6671,
      6670,
      6672,
      6571,
      6567
    ],
    [
      6574,
      6572,
      6571,
      6672,
      6674,
      6676
    ],
    [
      6574,
      6676,
      6675,
      6578,
      6575
    ],
    [
      6675,
      6679,
      8247,
      8248,
      8249,
      6579,
      6578
    ],
    [
      8250,
      6681,
      6557,
      6556,
      6560,
      8251
    ],
    [
      8251,
      6560,
      6559,
      6565,
      8252,
      8253
    ],
    [
      8254,
      8252,
      6565,
      6564,
      6569,
      8255
    ],
    [
      8256,
      8255,
      6569,
      6568,
      6570,
      8257
    ],
    [
      6570,
      6573,
      6576,
      6577,
      8258,
      8259,
      8257
    ],
    [
      8260,
      8261,
      8262,
      6580,
      6579,
      8249,
      8263
    ],
    [
      8264,
      8265,
      8266,
      8267,
      4882,
      4881,
      6590
    ],
    [
      8264,
      6590,
      6589,
      6591,
      6594,
      8268
    ],
    [
      8269,
      6593,
      6592,
      6595,
      6597,
      8270
    ],
    [
      6599,
      8271,
      8272,
      8270,
      6597,
      6596
    ],
    [
      6600,
      8273,
      8274,
      8271,
      6599,
      6598
    ],
    [
      6600,
      6602,
      8275,
      8273
    ],
    [
      6603,
      6605,
      8276,
      8275,
      6602,
      6601
    ],
    [
      4840,
      6489,
      8276,
      6605,
      6604,
      6606,
      4841
    ],
    [
      8277,
      8278,
      8279,
      4883,
      4882,
      8267,
      8280,
      8281
    ],
    [
      6608,
      6607,
      4700,
      4699,
      8282,
      8283
    ],
    [
      8284,
      8285,
      6609,
      6608,
      8283
    ],
    [
      8286,
      6611,
      6610,
      6609,
      8285,
      8287
    ],
    [
      8286,
      8288,
      8289,
      6613,
      6612,
      6611
    ],
    [
      8290,
      6615,
      6614,
      6613,
      8289,
      8291
    ],
    [
      8290,
      8292,
      8293,
      6617,
      6616,
      6615
    ],
    [
      8294,
      8295,
      6619,
      6618,
      6617,
      8293
    ],
    [
      6621,
      8296,
      8297,
      6623,
      6622
    ],
    [
      4875,
      4874,
      6623,
      8297,
      8298,
      8299,
      8300
    ],
    [
      6624,
      4878,
      4877,
      8301,
      8302,
      8303
    ],
    [
      8304,
      8305,
      6626,
      6625,
      6624,
      8303,
      8306,
      8307
    ],
    [
      8308,
      8309,
      8310,
      8311,
      8312,
      8313,
      8314
    ],
    [
      8308,
      8314,
      8315,
      8316,
      8317,
      8318
    ],
    [
      8319,
      8320,
      8321,
      8317,
      8316
    ],
    [
      8322,
      8320,
      8319,
      8323,
      8324,
      8325
    ],
    [
      8326,
      8327,
      8325,
      8324,
      8328,
      8329
    ],
    [
      8330,
      8326,
      8329,
      8331,
      8332,
      8333
    ],
    [
      8334,
      8333,
      8332,
      8335,
      8336,
      8337
    ],
    [
      8338,
      8336,
      8335,
      8339,
      8340,
      8341
    ],
    [
      8340,
      8342,
      8343,
      8344,
      8345,
      8341
    ],
    [
      6529,
      6528,
      6626,
      8305
    ],
    [
      6529,
      8305,
      8304,
      8346,
      6530
    ],
    [
      6530,
      8346,
      8347,
      4898,
      4897
    ],
    [
      6531,
      4899,
      4898,
      8347,
      8348
    ],
    [
      6531,
      8348,
      8349,
      8311,
      8310,
      6628,
      6532
    ],
    [
      6627,
      6628,
      8310,
      8309,
      6629
    ],
    [
      6630,
      6629,
      8309,
      8308,
      8318,
      6632
    ],
    [
      6637,
      6633,
      6632,
      8318,
      8317,
      8321
    ],
    [
      6637,
      8321,
      8320,
      8322,
      6642,
      6638
    ],
    [
      8322,
      8325,
      8327,
      6651,
      6646,
      6643,
      6642
    ],
    [
      6648,
      6651,
      8327,
      8326,
      8330,
      6652
    ],
    [
      8330,
      8333,
      8334,
      6656,
      6653,
      6652
    ],
    [
      8334,
      8337,
      6664,
      6657,
      6656
    ],
    [
      6661,
      6664,
      8337,
      8336,
      8338,
      6668,
      6665
    ],
    [
      8338,
      8341,
      8345,
      6677,
      6673,
      6669,
      6668
    ],
    [
      8250,
      8251,
      8253,
      8350
    ],
    [
      8250,
      8350,
      8351,
      8352,
      6684,
      6683,
      6682,
      6681
    ],
    [
      8353,
      8354,
      6686,
      6685,
      6684,
      8352
    ],
    [
      6688,
      6687,
      6686,
      8354,
      8355
    ],
    [
      8356,
      8357,
      8358,
      8359
    ],
    [
      8353,
      8352,
      8351,
      8357,
      8356,
      8360
    ],
    [
      8353,
      8360,
      8361,
      8362,
      8363,
      8355,
      8354
    ],
    [
      6688,
      8355,
      8363,
      8364,
      6689
    ],
    [
      6689,
      8364,
      8365,
      8366,
      8367,
      6693,
      6690
    ],
    [
      6694,
      6693,
      8367,
      8368,
      8369,
      6695
    ],
    [
      6696,
      4952,
      4951,
      6695,
      8369,
      8370
    ],
    [
      6697,
      6696,
      8370,
      8371
    ],
    [
      6699,
      8372,
      8373,
      8374,
      8375,
      6701,
      6700
    ],
    [
      6703,
      6702,
      6701,
      8375,
      6704
    ],
    [
      6707,
      6709,
      8376,
      8377,
      6713,
      6712,
      6711,
      6710
    ],
    [
      6714,
      6713,
      8377,
      8378,
      6716
    ],
    [
      6715,
      6716,
      8378,
      8379,
      8380,
      6718,
      6717
    ],
    [
      8380,
      8381,
      8382,
      6721,
      6719,
      6718
    ],
    [
      6720,
      6721,
      8382,
      8383,
      6722
    ],
    [
      8383,
      8384,
      8385,
      6724,
      6723,
      6722
    ],
    [
      6728,
      6727,
      6726,
      6725,
      6724,
      8385,
      8386
    ],
    [
      8387,
      8388,
      8389,
      8390,
      8391,
      8392,
      8393
    ],
    [
      8394,
      8395,
      8387,
      8393,
      8396,
      8397
    ],
    [
      8398,
      8399,
      8395,
      8394,
      8400
    ],
    [
      8401,
      8402,
      8403,
      8404,
      8405,
      8406,
      8407
    ],
    [
      8408,
      8409,
      8405,
      8404,
      8410,
      8411,
      8412
    ],
    [
      8403,
      6735,
      6731,
      6730,
      8410,
      8404
    ],
    [
      6730,
      6733,
      8411,
      8410
    ],
    [
      6733,
      6732,
      8413,
      8412,
      8411
    ],
    [
      8414,
      8413,
      6732,
      4990,
      4989,
      4992,
      8415
    ],
    [
      4992,
      4991,
      8416,
      8417,
      8415
    ],
    [
      8418,
      8419,
      8416,
      4991,
      4985,
      4984
    ],
    [
      8418,
      4984,
      4983,
      6729
    ],
    [
      8403,
      8402,
      8420,
      6734,
      6735
    ],
    [
      6734,
      8420,
      8421,
      4996,
      4995,
      4994,
      4993
    ],
    [
      7045,
      7046,
      8422,
      8423,
      8424,
      7043,
      7044
    ],
    [
      7046,
      6743,
      6742,
      8425,
      8426,
      8422
    ],
    [
      6745,
      8427,
      8428,
      8425,
      6742,
      6744
    ],
    [
      6745,
      5009,
      5008,
      6747,
      8429,
      8430,
      8427
    ],
    [
      8429,
      6747,
      6746,
      6749,
      8431,
      8432
    ],
    [
      6749,
      6748,
      6750,
      6752,
      8433,
      8431
    ],
    [
      6754,
      8434,
      8435,
      8436,
      8433,
      6752,
      6751
    ],
    [
      6754,
      6753,
      6756,
      8437,
      8434
    ],
    [
      6759,
      8438,
      8439,
      8440,
      8437,
      6756,
      6755,
      6757
    ],
    [
      8441,
      8438,
      6759,
      6758,
      6761,
      8442
    ],
    [
      8443,
      8442,
      6761,
      6760,
      6763
    ],
    [
      8443,
      6763,
      6762,
      6765,
      8444,
      8445
    ],
    [
      6767,
      8446,
      8447,
      8444,
      6765,
      6764
    ],
    [
      6766,
      6769,
      8448,
      8449,
      8446,
      6767
    ],
    [
      6770,
      8450,
      8451,
      8448,
      6769,
      6768
    ],
    [
      6770,
      6771,
      6772,
      6773,
      6774,
      8452,
      8450
    ],
    [
      6779,
      6777,
      6776,
      6961,
      7489,
      7491
    ],
    [
      6778,
      6779,
      7491,
      7490,
      7492,
      6780
    ],
    [
      6782,
      6781,
      6780,
      7492,
      7493,
      7495,
      6783
    ],
    [
      7494,
      7498,
      6785,
      6784,
      6783,
      7495
    ],
    [
      7497,
      6790,
      6786,
      6785,
      7498
    ],
    [
      6792,
      6791,
      6790,
      7497,
      7496,
      7499,
      6800,
      6795
    ],
    [
      6798,
      6801,
      5731,
      5730,
      6948,
      6802
    ],
    [
      6948,
      5730,
      5729,
      7501,
      6806,
      6805,
      6949
    ],
    [
      6807,
      6806,
      7501,
      7500,
      7502,
      6808
    ],
    [
      6812,
      6811,
      6810,
      7343,
      7342,
      6813
    ],
    [
      7342,
      7344,
      6814,
      6813
    ],
    [
      6825,
      6821,
      6820,
      7350,
      7349,
      7504,
      6829
    ],
    [
      6830,
      6829,
      7504,
      7503,
      7506,
      6831
    ],
    [
      7505,
      6832,
      6831,
      7506
    ],
    [
      7505,
      7507,
      7509,
      6841,
      6833,
      6832
    ],
    [
      6836,
      6841,
      7509,
      7508,
      7510,
      7511
    ],
    [
      6836,
      7511,
      7512,
      6846,
      6843,
      6837
    ],
    [
      7513,
      6849,
      6847,
      6846,
      7512,
      7362,
      7361
    ],
    [
      7513,
      7515,
      6850,
      6849
    ],
    [
      6851,
      6850,
      7515,
      7514,
      7517,
      6853
    ],
    [
      6853,
      7517,
      7516,
      7520,
      6859,
      6854
    ],
    [
      6860,
      6859,
      7520,
      7519,
      6862
    ],
    [
      7519,
      7518,
      7522,
      8453,
      6863,
      6862
    ],
    [
      6864,
      6863,
      8453,
      8454,
      8455,
      6866
    ],
    [
      8456,
      8457,
      6871,
      6867,
      6866,
      8455
    ],
    [
      8457,
      8458,
      6874,
      6872,
      6871
    ],
    [
      6877,
      6875,
      6874,
      8458,
      8459,
      8460
    ],
    [
      6877,
      8460,
      8461,
      8462,
      6883,
      6878
    ],
    [
      8463,
      6885,
      6884,
      6883,
      8462,
      8464,
      8465
    ],
    [
      8463,
      8466,
      8467,
      6891,
      6886,
      6885
    ],
    [
      6893,
      6892,
      6891,
      8467,
      8468,
      8469,
      6897
    ],
    [
      6898,
      6897,
      8469,
      8470,
      6905,
      6902
    ],
    [
      7522,
      7521,
      7524,
      8454,
      8453
    ],
    [
      8456,
      8455,
      8454,
      7524,
      7523
    ],
    [
      8459,
      8458,
      8457,
      8456,
      7523,
      7379,
      7378,
      7527
    ],
    [
      8459,
      7527,
      7526,
      8461,
      8460
    ],
    [
      7525,
      8464,
      8462,
      8461,
      7526
    ],
    [
      7525,
      7389,
      7388,
      8465,
      8464
    ],
    [
      8463,
      8465,
      7388,
      7387,
      7393,
      8466
    ],
    [
      8466,
      7393,
      7392,
      8471,
      8468,
      8467
    ],
    [
      8469,
      8468,
      8471,
      8472,
      8473,
      8470
    ],
    [
      8474,
      8475,
      6906,
      6905,
      8470,
      8473
    ],
    [
      6909,
      6907,
      6906,
      8475,
      8476,
      8477
    ],
    [
      6910,
      6909,
      8477,
      8478,
      6912
    ],
    [
      6916,
      6913,
      6912,
      8478,
      8479,
      8480
    ],
    [
      6916,
      8480,
      8481,
      8482,
      6917
    ],
    [
      6918,
      6917,
      8482,
      8483,
      8484,
      8485
    ],
    [
      8486,
      8487,
      8485,
      8484,
      8488,
      8489
    ],
    [
      8486,
      8489,
      8490,
      8491,
      8492
    ],
    [
      8493,
      8494,
      8491,
      8490,
      8495
    ],
    [
      8496,
      8497,
      6947,
      6939,
      6942,
      8493,
      8495,
      8498
    ],
    [
      6950,
      6895,
      6894,
      6899,
      6901,
      6951
    ],
    [
      6900,
      6904,
      6953,
      6952,
      6951,
      6901
    ],
    [
      6908,
      6955,
      6954,
      6953,
      6904,
      6903
    ],
    [
      6908,
      6911,
      6915,
      6958,
      6956,
      6955
    ],
    [
      6921,
      6959,
      6958,
      6915,
      6914,
      6920
    ],
    [
      6921,
      6924,
      6141,
      6140,
      6959
    ],
    [
      6928,
      6142,
      6141,
      6924,
      6923
    ],
    [
      6929,
      6143,
      6142,
      6928,
      6927
    ],
    [
      6929,
      6932,
      6935,
      6938,
      6134,
      6133,
      6143
    ],
    [
      6135,
      6134,
      6938,
      6937,
      6941,
      8106
    ],
    [
      6946,
      8107,
      8106,
      6941,
      6940
    ],
    [
      8105,
      8107,
      6946,
      6945,
      8499,
      8104,
      8103
    ],
    [
      6925,
      6922,
      6919,
      6918,
      8485,
      8487
    ],
    [
      8486,
      8492,
      6930,
      6926,
      6925,
      8487
    ],
    [
      6933,
      6931,
      6930,
      8492,
      8491,
      8494
    ],
    [
      6933,
      8494,
      8493,
      6942,
      6936,
      6934
    ],
    [
      7484,
      5705,
      5704,
      6963,
      6964,
      6966,
      8500
    ],
    [
      6966,
      6965,
      6968,
      8501,
      8500
    ],
    [
      8502,
      8501,
      6968,
      6967,
      6970,
      8503
    ],
    [
      8504,
      8503,
      6970,
      6969,
      6972,
      8505
    ],
    [
      6974,
      8506,
      8507,
      8505,
      6972,
      6971,
      6973
    ],
    [
      6974,
      6975,
      6977,
      8508,
      8509,
      8506
    ],
    [
      8508,
      6977,
      6976,
      6979,
      8510,
      8511
    ],
    [
      6978,
      6982,
      8512,
      8513,
      8510,
      6979
    ],
    [
      8514,
      8512,
      6982,
      6981,
      8515
    ],
    [
      6984,
      8516,
      8517,
      8515,
      6981,
      6980
    ],
    [
      8518,
      8519,
      8516,
      6984,
      6983,
      6985
    ],
    [
      8518,
      6985,
      6986,
      6988,
      8520,
      8521
    ],
    [
      8520,
      6988,
      6987,
      6990,
      8522,
      8523
    ],
    [
      6991,
      8524,
      8525,
      8522,
      6990,
      6989
    ],
    [
      6991,
      6992,
      6994,
      8526,
      8527,
      8524
    ],
    [
      6993,
      6996,
      8528,
      8529,
      8526,
      6994
    ],
    [
      6998,
      8530,
      8531,
      8528,
      6996,
      6995
    ],
    [
      6997,
      7000,
      8532,
      8533,
      8530,
      6998
    ],
    [
      6999,
      7002,
      8534,
      8535,
      8532,
      7000
    ],
    [
      7002,
      7001,
      7004,
      8536,
      8537,
      8534
    ],
    [
      8538,
      8539,
      8536,
      7004,
      7003,
      7006
    ],
    [
      8538,
      7006,
      7005,
      7009,
      8540,
      8541,
      8542
    ],
    [
      7008,
      8543,
      8544,
      8540,
      7009
    ],
    [
      8545,
      8546,
      8543,
      7008,
      7007,
      7010
    ],
    [
      8545,
      7010,
      7011,
      7013,
      8547,
      8548
    ],
    [
      7012,
      7015,
      8549,
      8550,
      8547,
      7013
    ],
    [
      8551,
      8552,
      8549,
      7015,
      7014,
      7017
    ],
    [
      7016,
      7019,
      8553,
      8554,
      8551,
      7017
    ],
    [
      7018,
      7025,
      8555,
      8553,
      7019
    ],
    [
      8556,
      8557,
      8558,
      7027,
      7026,
      7030
    ],
    [
      8556,
      7030,
      7029,
      7032,
      8559,
      8560
    ],
    [
      8559,
      7032,
      7031,
      7034,
      8561,
      8562
    ],
    [
      7033,
      7036,
      8563,
      8564,
      8561,
      7034
    ],
    [
      7035,
      7038,
      8565,
      8563,
      7036
    ],
    [
      7038,
      7037,
      7039,
      7040,
      8566,
      8567,
      8565
    ],
    [
      7040,
      7041,
      7042,
      7043,
      8424,
      8568,
      8569,
      8566
    ],
    [
      1621,
      1625,
      7048,
      7047,
      6224,
      6223
    ],
    [
      1617,
      7050,
      7049,
      7048,
      1625,
      1618
    ],
    [
      1617,
      1612,
      1616,
      7051,
      7050
    ],
    [
      7051,
      1616,
      1615,
      1434,
      1433
    ],
    [
      3871,
      8570,
      8571,
      8572,
      8573,
      8574,
      3310,
      3309,
      7058,
      3872
    ],
    [
      7080,
      7079,
      8575,
      8576,
      7082,
      7081
    ],
    [
      7083,
      7082,
      8576,
      8577,
      7085
    ],
    [
      7084,
      8578,
      8579,
      7086,
      5419,
      5418,
      5417
    ],
    [
      7087,
      7086,
      8579,
      8580,
      8581,
      7088
    ],
    [
      7090,
      7089,
      8582,
      8583,
      7091
    ],
    [
      5444,
      5443,
      7092,
      7091,
      8583,
      8584
    ],
    [
      5454,
      5448,
      5445,
      5439,
      5444,
      8584,
      8585,
      8586,
      7094,
      5456
    ],
    [
      7093,
      7094,
      8586,
      8587,
      7096,
      7095
    ],
    [
      7098,
      7097,
      8588,
      8589,
      7100,
      7099
    ],
    [
      7102,
      7101,
      7100,
      8589,
      8590,
      7103
    ],
    [
      7097,
      7096,
      8587,
      8591,
      8592,
      8588
    ],
    [
      8590,
      8589,
      8588,
      8592,
      8593
    ],
    [
      7104,
      7103,
      8590,
      8593,
      8594,
      8595,
      8596
    ],
    [
      7105,
      7104,
      8596,
      8597,
      7106
    ],
    [
      7106,
      8597,
      8598,
      7109,
      7108,
      7107
    ],
    [
      8598,
      8599,
      8600,
      7111,
      7110,
      7109
    ],
    [
      7112,
      7111,
      8600,
      8601,
      8602,
      7113
    ],
    [
      7115,
      7114,
      7113,
      8602,
      8603,
      8604
    ],
    [
      7115,
      8604,
      8605,
      7117,
      7116
    ],
    [
      8606,
      8607,
      7118,
      7117,
      8605
    ],
    [
      7119,
      7118,
      8607,
      8608,
      8609,
      8610,
      7121,
      7120
    ],
    [
      8611,
      8612,
      8613,
      8614,
      8615,
      8616,
      8617,
      8618
    ],
    [
      8612,
      8619,
      8620,
      8621,
      8622,
      8613
    ],
    [
      8623,
      8624,
      8625,
      8622,
      8621,
      8626
    ],
    [
      8623,
      8627,
      8628,
      8629,
      8630,
      8631,
      8624
    ],
    [
      8630,
      8629,
      8632,
      8633,
      8634
    ],
    [
      8635,
      8636,
      8633,
      8632,
      8637,
      8638,
      8639
    ],
    [
      8635,
      8639,
      8640,
      8641,
      8642
    ],
    [
      8643,
      8642,
      8641,
      8644,
      8645
    ],
    [
      8646,
      8645,
      8644,
      8647,
      8648
    ],
    [
      8646,
      8648,
      8649,
      8650,
      8651
    ],
    [
      8652,
      8651,
      8650,
      8653,
      8654,
      8655,
      8656
    ],
    [
      8656,
      8655,
      8657,
      7127,
      7126
    ],
    [
      7125,
      7124,
      8658,
      8652,
      8656,
      7126
    ],
    [
      7121,
      8610,
      8658,
      7124,
      7123,
      7122
    ],
    [
      7131,
      8659,
      8660,
      7132
    ],
    [
      7140,
      7137,
      7133,
      7132,
      8660,
      8661,
      8662
    ],
    [
      7140,
      8662,
      8663,
      7142,
      7141
    ],
    [
      7142,
      8663,
      8664,
      7145,
      7144,
      7143
    ],
    [
      8664,
      8665,
      8666,
      7148,
      7146,
      7145
    ],
    [
      8667,
      8668,
      7150,
      7149,
      7147,
      7148,
      8666,
      8669
    ],
    [
      5396,
      7150,
      8668,
      8670,
      8671,
      5397
    ],
    [
      5398,
      5397,
      8671,
      8672,
      8673,
      7078
    ],
    [
      7084,
      7085,
      8577,
      8674,
      8675,
      8676,
      8677,
      8578
    ],
    [
      8579,
      8578,
      8677,
      8580
    ],
    [
      7089,
      7088,
      8581,
      8678,
      8679,
      8582
    ],
    [
      8680,
      8585,
      8584,
      8583,
      8582,
      8679
    ],
    [
      3,
      2,
      504,
      7151,
      7153,
      8681,
      8682,
      8683
    ],
    [
      7155,
      8684,
      8685,
      8681,
      7153,
      7152
    ],
    [
      7155,
      7154,
      7157,
      8686,
      8684
    ],
    [
      7156,
      7158,
      7160,
      8687,
      8688,
      8686,
      7157
    ],
    [
      7161,
      8689,
      8690,
      8687,
      7160,
      7159
    ],
    [
      7161,
      7162,
      7164,
      8691,
      8692,
      8689
    ],
    [
      7167,
      8693,
      8694,
      8691,
      7164,
      7163
    ],
    [
      7167,
      7166,
      8695,
      8696,
      8693
    ],
    [
      7168,
      8697,
      8698,
      8695,
      7166,
      7165
    ],
    [
      7168,
      7169,
      7171,
      8699,
      8700,
      8701,
      8697
    ],
    [
      7171,
      7170,
      7173,
      8702,
      8703,
      8699
    ],
    [
      8702,
      7173,
      7172,
      7175,
      8704,
      8705
    ],
    [
      8704,
      7175,
      7174,
      7177,
      8706,
      8707
    ],
    [
      8708,
      8706,
      7177,
      7176,
      7179,
      8709
    ],
    [
      7178,
      7181,
      8710,
      8711,
      8709,
      7179
    ],
    [
      7183,
      8712,
      8713,
      8710,
      7181,
      7180
    ],
    [
      7182,
      7186,
      8714,
      8715,
      8712,
      7183
    ],
    [
      8716,
      8717,
      8714,
      7186,
      7185
    ],
    [
      8716,
      7185,
      7184,
      8718,
      8719,
      8720,
      8721,
      8722
    ],
    [
      8723,
      8724,
      8720,
      8719,
      8725
    ],
    [
      7722,
      7717,
      7716,
      7715,
      8726,
      7886
    ],
    [
      7709,
      8727,
      8728,
      8726,
      7715,
      7710
    ],
    [
      7709,
      7706,
      7705,
      8729,
      8730,
      8727
    ],
    [
      8729,
      7705,
      7704,
      7703,
      8731,
      8732
    ],
    [
      8733,
      8731,
      7703,
      7698,
      7697,
      8734
    ],
    [
      7693,
      8735,
      8736,
      8734,
      7697,
      7694
    ],
    [
      7693,
      7692,
      8737,
      8738,
      8735
    ],
    [
      8739,
      8740,
      8741,
      8738,
      8737
    ],
    [
      7197,
      7201,
      7203,
      8742,
      7198
    ],
    [
      8743,
      8744,
      8742,
      7203,
      7202,
      7205
    ],
    [
      8743,
      7205,
      7204,
      7207,
      8745
    ],
    [
      7208,
      8746,
      8747,
      8748,
      8745,
      7207,
      7206
    ],
    [
      8749,
      8750,
      8746,
      7208,
      7209
    ],
    [
      8751,
      8749,
      7209,
      5553,
      5552,
      5558,
      7211
    ],
    [
      8751,
      7211,
      7210,
      7213,
      8752,
      8753
    ],
    [
      7212,
      7215,
      8754,
      8755,
      8752,
      7213
    ],
    [
      8756,
      8757,
      8754,
      7215,
      7214,
      7217
    ],
    [
      8756,
      7217,
      7216,
      7219,
      8758,
      8759
    ],
    [
      7218,
      7221,
      8760,
      8761,
      8762,
      8758,
      7219
    ],
    [
      7220,
      7223,
      8763,
      8760,
      7221
    ],
    [
      8764,
      8763,
      7223,
      7222,
      7225,
      8765,
      8766
    ],
    [
      8767,
      8765,
      7225,
      7224,
      7227,
      8768,
      8769
    ],
    [
      7228,
      7230,
      8770,
      8771,
      8768,
      7227,
      7226
    ],
    [
      7230,
      7229,
      7232,
      8772,
      8773,
      8770
    ],
    [
      7234,
      8774,
      8775,
      8772,
      7232,
      7231,
      7233
    ],
    [
      7234,
      7235,
      7237,
      8776,
      8777,
      8774
    ],
    [
      7238,
      8778,
      8779,
      8776,
      7237,
      7236
    ],
    [
      7238,
      7239,
      7242,
      8780,
      8781,
      8778
    ],
    [
      7242,
      7241,
      8782,
      8783,
      8780
    ],
    [
      7240,
      7244,
      8784,
      8785,
      8782,
      7241
    ],
    [
      8784,
      7244,
      7243,
      7246,
      8786,
      8787,
      8788
    ],
    [
      8789,
      8790,
      8791,
      8787,
      8786
    ],
    [
      8792,
      8793,
      8794,
      8790,
      8789
    ],
    [
      8795,
      8796,
      8794,
      8793,
      8797
    ],
    [
      8798,
      8799,
      8800,
      8795,
      8797,
      8801
    ],
    [
      8005,
      8800,
      8799,
      8071,
      6016,
      6015
    ],
    [
      8739,
      8802,
      8803,
      7194,
      7193,
      7195,
      7196,
      7200,
      8740
    ],
    [
      7245,
      7247,
      7249,
      8792,
      8789,
      8786,
      7246
    ],
    [
      7250,
      7252,
      8801,
      8797,
      8793,
      8792,
      7249,
      7248
    ],
    [
      7251,
      7254,
      8798,
      8801,
      7252
    ],
    [
      7259,
      7263,
      8071,
      8799,
      8798,
      7254,
      7253,
      7256
    ],
    [
      1838,
      1847,
      3216,
      3211,
      3215,
      1839
    ],
    [
      3215,
      3214,
      8804,
      1840,
      1839
    ],
    [
      8805,
      1835,
      1834,
      1840,
      8804,
      8806
    ],
    [
      7278,
      5625,
      1836,
      1835,
      8805,
      8807,
      8808
    ],
    [
      7276,
      7278,
      8808,
      8809,
      8810
    ],
    [
      7276,
      8810,
      8811,
      8812,
      7279,
      7277
    ],
    [
      8813,
      8814,
      7282,
      7280,
      7279,
      8812
    ],
    [
      7281,
      7282,
      8814,
      8815,
      8816,
      7283
    ],
    [
      8816,
      8817,
      8818,
      7285,
      7284,
      7283
    ],
    [
      8819,
      8820,
      7288,
      7286,
      7285,
      8818
    ],
    [
      7287,
      7288,
      8820,
      8821,
      8822,
      7290
    ],
    [
      7289,
      7290,
      8822,
      8823,
      8824,
      7291
    ],
    [
      8825,
      8826,
      7294,
      7292,
      7291,
      8824
    ],
    [
      7295,
      7293,
      7294,
      8826,
      8827,
      8828
    ],
    [
      7295,
      8828,
      8829,
      8830,
      7296
    ],
    [
      8830,
      8831,
      8832,
      8833,
      7298,
      7297,
      7296
    ],
    [
      8834,
      8835,
      7300,
      7299,
      7298,
      8833
    ],
    [
      8836,
      8837,
      7302,
      7301,
      7300,
      8835
    ],
    [
      7305,
      7303,
      7302,
      8837,
      8838,
      8839
    ],
    [
      7304,
      7305,
      8839,
      8840,
      8841,
      7306
    ],
    [
      7308,
      7307,
      7306,
      8841,
      8842,
      8843
    ],
    [
      7308,
      8843,
      8844,
      8845,
      7310,
      7309
    ],
    [
      7312,
      7311,
      7310,
      8845,
      8846,
      8847
    ],
    [
      7312,
      8847,
      8848,
      7314,
      7313
    ],
    [
      8849,
      8850,
      7316,
      7315,
      7314,
      8848
    ],
    [
      8851,
      8852,
      7318,
      7317,
      7316,
      8850
    ],
    [
      7318,
      8852,
      8853,
      8854,
      7320,
      7319
    ],
    [
      7321,
      7320,
      8854,
      8855,
      8856,
      7322
    ],
    [
      8857,
      8858,
      7324,
      7323,
      7322,
      8856
    ],
    [
      8859,
      8860,
      7326,
      7325,
      7324,
      8858
    ],
    [
      7329,
      7327,
      7326,
      8860,
      8861,
      8862
    ],
    [
      7328,
      7329,
      8862,
      8863,
      8864,
      7330
    ],
    [
      7273,
      7330,
      8864,
      8865,
      7274
    ],
    [
      7275,
      7274,
      8865,
      7266,
      7265
    ],
    [
      7275,
      7265,
      7264,
      7272,
      7271
    ],
    [
      7268,
      7269,
      7270,
      7272,
      7264,
      7261,
      7260
    ],
    [
      3887,
      3893,
      7332,
      8866,
      5357
    ],
    [
      7334,
      8867,
      8868,
      8866,
      7332,
      7331
    ],
    [
      7334,
      7333,
      7335,
      7336,
      7337,
      8869,
      8867
    ],
    [
      7339,
      4498,
      4497,
      4503,
      4603,
      4378,
      4377,
      7338
    ],
    [
      7339,
      7340,
      7341,
      4499,
      4498
    ],
    [
      8479,
      7412,
      7411,
      8481,
      8480
    ],
    [
      8482,
      8481,
      7411,
      7410,
      8483
    ],
    [
      7409,
      7416,
      8488,
      8484,
      8483,
      7410
    ],
    [
      8488,
      7416,
      7415,
      7417,
      8498,
      8495,
      8490,
      8489
    ],
    [
      8496,
      8498,
      7417,
      7419,
      7420,
      7423
    ],
    [
      8496,
      7423,
      7422,
      8497
    ],
    [
      6943,
      6947,
      8497,
      7422,
      7424,
      5830,
      5829
    ],
    [
      7406,
      7404,
      7403,
      8870,
      7407
    ],
    [
      7396,
      7398,
      7400,
      8472,
      8471,
      7392,
      7391
    ],
    [
      8474,
      8473,
      8472,
      7400,
      7399,
      7402
    ],
    [
      8474,
      7402,
      7405,
      8476,
      8475
    ],
    [
      7405,
      7404,
      7406,
      7412,
      8479,
      8478,
      8477,
      8476
    ],
    [
      7441,
      7443,
      7394,
      7390,
      7386,
      7384,
      7383,
      7440
    ],
    [
      7403,
      7401,
      7397,
      7395,
      7394,
      7443,
      7442,
      8870
    ],
    [
      7431,
      5775,
      5774,
      7413,
      7408,
      7407,
      8870,
      7442
    ],
    [
      5768,
      5767,
      7435,
      7371,
      7367,
      7366
    ],
    [
      7446,
      7448,
      7436,
      7434,
      7435,
      5767,
      5766
    ],
    [
      7436,
      7448,
      7447,
      7438,
      7437
    ],
    [
      7439,
      7438,
      7447,
      7444
    ],
    [
      8871,
      8872,
      8873,
      8874,
      8875,
      8876,
      8877
    ],
    [
      8878,
      8879,
      8872,
      8873
    ],
    [
      8878,
      7482,
      7481,
      7480,
      7479,
      7478,
      8880,
      8879
    ],
    [
      8881,
      8882,
      8883,
      8884,
      8885,
      8886
    ],
    [
      8887,
      8888,
      8884,
      8883,
      8889
    ],
    [
      8890,
      8891,
      8892,
      8893,
      8894,
      8895
    ],
    [
      8893,
      8896,
      7477,
      7474,
      7468,
      7467,
      8894
    ],
    [
      7451,
      7450,
      8897,
      8895,
      8894,
      7467,
      7463,
      7459,
      7456
    ],
    [
      7534,
      7536,
      8898,
      8899,
      8900,
      7538
    ],
    [
      6943,
      5829,
      5828,
      7538,
      8900,
      8901,
      6944
    ],
    [
      8902,
      8903,
      7675,
      7674,
      8904
    ],
    [
      8902,
      8904,
      8905,
      8906,
      8907,
      8908,
      8909
    ],
    [
      8910,
      7685,
      7684,
      8911,
      8912,
      8913,
      8914
    ],
    [
      8911,
      7684,
      7683,
      7689,
      8915
    ],
    [
      7690,
      7696,
      8916,
      8915,
      7689,
      7688
    ],
    [
      7696,
      7695,
      7700,
      8917,
      8916
    ],
    [
      8918,
      8919,
      8917,
      7700,
      7699,
      7702
    ],
    [
      8918,
      7702,
      7701,
      7708,
      8920,
      8921
    ],
    [
      8920,
      7708,
      7707,
      7712,
      8922
    ],
    [
      8923,
      8924,
      8922,
      7712,
      7711,
      7714
    ],
    [
      8923,
      7714,
      7713,
      7719,
      8925,
      8926
    ],
    [
      8927,
      8928,
      8925,
      7719,
      7718,
      7721
    ],
    [
      7720,
      7728,
      8929,
      8930,
      8927,
      7721
    ],
    [
      8931,
      8929,
      7728,
      7727,
      7732,
      8932
    ],
    [
      8933,
      8932,
      7732,
      7731,
      7736,
      8934
    ],
    [
      7736,
      7735,
      7739,
      8935,
      8936,
      8934
    ],
    [
      8937,
      8938,
      8935,
      7739,
      7738,
      7743
    ],
    [
      8937,
      7743,
      7742,
      7744,
      8939,
      8940
    ],
    [
      7744,
      7747,
      7751,
      8941,
      8942,
      8939
    ],
    [
      7751,
      7750,
      7754,
      8943,
      8944,
      8941
    ],
    [
      8945,
      8943,
      7754,
      7753,
      7759,
      8946
    ],
    [
      7761,
      8947,
      8948,
      8946,
      7759,
      7758
    ],
    [
      8949,
      8947,
      7761,
      7760,
      7766,
      8950
    ],
    [
      7766,
      7765,
      7771,
      8951,
      8952,
      8950
    ],
    [
      7771,
      7770,
      7774,
      8953,
      8954,
      8951
    ],
    [
      7774,
      7773,
      7780,
      8955,
      8956,
      8953
    ],
    [
      7780,
      7779,
      7784,
      8957,
      8958,
      8955
    ],
    [
      8959,
      8960,
      8957,
      7784,
      7783,
      7788
    ],
    [
      7789,
      8961,
      8959,
      7788,
      7787
    ],
    [
      7789,
      7792,
      7793,
      7799,
      6072,
      6071,
      8961
    ],
    [
      7798,
      7803,
      6073,
      6072,
      7799
    ],
    [
      7804,
      6069,
      6068,
      6073,
      7803,
      7802
    ],
    [
      7804,
      7807,
      7811,
      8074,
      6070,
      6069
    ],
    [
      7811,
      7810,
      7813,
      8073,
      8074
    ],
    [
      7682,
      7681,
      8962,
      8803,
      8802,
      7686
    ],
    [
      8739,
      8737,
      7692,
      7691,
      7687,
      7686,
      8802
    ],
    [
      8910,
      8907,
      8906,
      8963,
      8964,
      7679,
      7685
    ],
    [
      7679,
      8964,
      8965,
      7680
    ],
    [
      8966,
      8962,
      7681,
      7680,
      8965,
      8967,
      8968
    ],
    [
      8966,
      8969,
      8970,
      7192,
      7194,
      8803,
      8962
    ],
    [
      8970,
      8971,
      7191,
      7190,
      7192
    ],
    [
      7187,
      7191,
      8971,
      8972,
      8973
    ],
    [
      8974,
      8975,
      7188,
      7187,
      8973
    ],
    [
      8976,
      8977,
      5538,
      5537,
      5540,
      7188,
      8975
    ],
    [
      5535,
      5538,
      8977,
      8978,
      8979
    ],
    [
      5535,
      8979,
      8980,
      8981,
      8982,
      5536
    ],
    [
      8982,
      8981,
      8983,
      8984,
      8985,
      8986
    ],
    [
      8987,
      8988,
      8985,
      8984,
      8989,
      8990
    ],
    [
      8987,
      8990,
      8991,
      8992,
      8993,
      8994
    ],
    [
      8995,
      8996,
      8997,
      8993,
      8992,
      8998
    ],
    [
      8999,
      8996,
      8995,
      9000,
      9001,
      9002
    ],
    [
      9003,
      9002,
      9001,
      9004,
      9005,
      9006
    ],
    [
      9007,
      9008,
      9009,
      9006,
      9005,
      9010
    ],
    [
      9011,
      9012,
      9008,
      9007,
      9013,
      9014
    ],
    [
      9011,
      9014,
      9015,
      9016,
      9017,
      9018
    ],
    [
      9019,
      9017,
      9016,
      9020,
      9021,
      9022
    ],
    [
      9021,
      9023,
      9024,
      9025,
      9026,
      9022
    ],
    [
      9024,
      9027,
      9028,
      9029,
      9030,
      9025
    ],
    [
      9031,
      9029,
      9028,
      9032,
      9033,
      9034
    ],
    [
      9035,
      9036,
      9037,
      9034,
      9033,
      9038
    ],
    [
      9035,
      9039,
      9040,
      9041,
      9042,
      9036
    ],
    [
      9041,
      9040,
      9043,
      9044,
      9045,
      9046
    ],
    [
      9047,
      9048,
      9045,
      9044,
      9049,
      9050,
      9051,
      9052
    ],
    [
      9053,
      9054,
      7631,
      7625,
      7624
    ],
    [
      9054,
      9055,
      9056,
      7635,
      7628,
      7631
    ],
    [
      7632,
      7635,
      9056,
      9057,
      9058,
      7636
    ],
    [
      7636,
      9058,
      9059,
      9060,
      7642,
      7637
    ],
    [
      7643,
      7642,
      9060,
      9061,
      9062,
      7645
    ],
    [
      7646,
      7645,
      9062,
      9063,
      9064,
      7652
    ],
    [
      7649,
      7652,
      9064,
      9065,
      7653
    ],
    [
      7653,
      9065,
      9066,
      9067,
      9068,
      7654
    ],
    [
      7656,
      7660,
      9068,
      9067,
      9069,
      9070,
      9071,
      7661
    ],
    [
      9071,
      9072,
      7665,
      7662,
      7661
    ],
    [
      7665,
      9072,
      9073,
      7678,
      7670,
      7666
    ],
    [
      7673,
      9074,
      9075,
      8905,
      8904,
      7674
    ],
    [
      9076,
      8963,
      8906,
      8905,
      9075,
      9077
    ],
    [
      8964,
      8963,
      9076,
      9078,
      9079,
      8967,
      8965
    ],
    [
      8968,
      8967,
      9079,
      9080
    ],
    [
      8966,
      8968,
      9080,
      9081,
      9082,
      8969
    ],
    [
      9082,
      9083,
      9084,
      8972,
      8971,
      8970,
      8969
    ],
    [
      8974,
      8973,
      8972,
      9084,
      9085,
      9086
    ],
    [
      8976,
      8975,
      8974,
      9086,
      9087,
      9088
    ],
    [
      8976,
      9088,
      9089,
      8978,
      8977
    ],
    [
      9089,
      9090,
      9091,
      9092,
      8980,
      8979,
      8978
    ],
    [
      8981,
      8980,
      9092,
      9093,
      8983
    ],
    [
      9094,
      9095,
      8989,
      8984,
      8983,
      9093
    ],
    [
      9095,
      9096,
      9097,
      8991,
      8990,
      8989
    ],
    [
      9098,
      8998,
      8992,
      8991,
      9097,
      9099
    ],
    [
      9098,
      9100,
      9101,
      9000,
      8995,
      8998
    ],
    [
      9004,
      9001,
      9000,
      9101,
      9102,
      9103
    ],
    [
      9104,
      9010,
      9005,
      9004,
      9103,
      9105
    ],
    [
      9104,
      9106,
      9107,
      9013,
      9007,
      9010
    ],
    [
      9013,
      9107,
      9108,
      9109,
      9015,
      9014
    ],
    [
      9110,
      9020,
      9016,
      9015,
      9109,
      9111
    ],
    [
      9021,
      9020,
      9110,
      9112,
      9113,
      9023
    ],
    [
      9113,
      9114,
      9115,
      9027,
      9024,
      9023
    ],
    [
      9116,
      9117,
      9032,
      9028,
      9027,
      9115
    ],
    [
      9118,
      9119,
      9038,
      9033,
      9032,
      9117
    ],
    [
      9035,
      9038,
      9119,
      9120,
      9121,
      9039
    ],
    [
      9039,
      9121,
      9122,
      9123,
      9043,
      9040
    ],
    [
      9043,
      9123,
      9124,
      9049,
      9044
    ],
    [
      7641,
      9125,
      9126,
      7639,
      7638
    ],
    [
      7641,
      7644,
      7648,
      9127,
      9128,
      9129,
      9125
    ],
    [
      7647,
      7651,
      9130,
      9131,
      9127,
      7648
    ],
    [
      7655,
      9132,
      9133,
      9130,
      7651,
      7650
    ],
    [
      9068,
      7660,
      7659,
      9134,
      9135,
      9136,
      9132,
      7655,
      7654
    ],
    [
      7658,
      9137,
      9138,
      9134,
      7659
    ],
    [
      7664,
      9139,
      9140,
      9137,
      7658,
      7657
    ],
    [
      7664,
      7663,
      7668,
      9141,
      9142,
      9143,
      9139
    ],
    [
      7669,
      9144,
      9145,
      9141,
      7668,
      7667
    ],
    [
      7669,
      7672,
      9146,
      9147,
      9144
    ],
    [
      7677,
      9148,
      9149,
      9146,
      7672,
      7671
    ],
    [
      7677,
      7676,
      9150,
      9148
    ],
    [
      9151,
      9152,
      9153,
      9150,
      7676,
      7675,
      8903
    ],
    [
      8902,
      8909,
      9154,
      9155,
      9151,
      8903
    ],
    [
      8908,
      9156,
      9157,
      9158,
      9154,
      8909
    ],
    [
      9159,
      9160,
      9157,
      9156,
      9161
    ],
    [
      9159,
      9161,
      9162,
      9163,
      9164
    ],
    [
      9165,
      9166,
      9167,
      9168,
      9164,
      9163
    ],
    [
      9169,
      9167,
      9166,
      9170,
      9171,
      9172
    ],
    [
      8918,
      8921,
      9173,
      9174,
      9172,
      9171,
      8919
    ],
    [
      8920,
      8922,
      8924,
      9175,
      9176,
      9173,
      8921
    ],
    [
      8923,
      8926,
      9177,
      9175,
      8924
    ],
    [
      9177,
      8926,
      8925,
      8928,
      9178,
      9179
    ],
    [
      9180,
      9181,
      9178,
      8928,
      8927,
      8930
    ],
    [
      9180,
      8930,
      8929,
      8931,
      9182,
      9183
    ],
    [
      8933,
      9184,
      9185,
      9182,
      8931,
      8932
    ],
    [
      8933,
      8934,
      8936,
      9186,
      9187,
      9184
    ],
    [
      8936,
      8935,
      8938,
      9188,
      9189,
      9186
    ],
    [
      8937,
      8940,
      9190,
      9191,
      9188,
      8938
    ],
    [
      8940,
      8939,
      8942,
      9192,
      9193,
      9190
    ],
    [
      8942,
      8941,
      8944,
      9194,
      9195,
      9192
    ],
    [
      9196,
      9194,
      8944,
      8943,
      8945,
      9197
    ],
    [
      9198,
      9199,
      9197,
      8945,
      8946,
      8948
    ],
    [
      8949,
      9200,
      9201,
      9198,
      8948,
      8947
    ],
    [
      8949,
      8950,
      8952,
      9202,
      9203,
      9200
    ],
    [
      9202,
      8952,
      8951,
      8954,
      9204,
      9205
    ],
    [
      8954,
      8953,
      8956,
      9206,
      9207,
      9204
    ],
    [
      8955,
      8958,
      9208,
      9209,
      9206,
      8956
    ],
    [
      8958,
      8957,
      8960,
      9210,
      9208
    ],
    [
      6071,
      4306,
      4305,
      9210,
      8960,
      8959,
      8961
    ],
    [
      7549,
      9211,
      9212,
      7541,
      7540
    ],
    [
      7557,
      9213,
      9214,
      7554,
      7553
    ],
    [
      7557,
      7556,
      7563,
      9215,
      9216,
      9213
    ],
    [
      7564,
      9217,
      9218,
      9215,
      7563,
      7562
    ],
    [
      7571,
      9219,
      9220,
      9217,
      7564,
      7567
    ],
    [
      7571,
      7570,
      7574,
      9221,
      9222,
      9219
    ],
    [
      7573,
      7579,
      9223,
      9224,
      9221,
      7574
    ],
    [
      7578,
      7583,
      9225,
      9226,
      9223,
      7579
    ],
    [
      9227,
      9228,
      9225,
      7583,
      7582,
      7586
    ],
    [
      9227,
      7586,
      7585,
      7590,
      9229,
      9230
    ],
    [
      9229,
      7590,
      7589,
      7595,
      9231,
      9232
    ],
    [
      9233,
      9234,
      9231,
      7595,
      7594,
      7598
    ],
    [
      9233,
      7598,
      7597,
      7603,
      9235,
      9236
    ],
    [
      7604,
      9237,
      9238,
      9235,
      7603,
      7602
    ],
    [
      7604,
      7607,
      7611,
      9239,
      9240,
      9237
    ],
    [
      7610,
      7615,
      9241,
      9242,
      9239,
      7611
    ],
    [
      9243,
      9244,
      9241,
      7615,
      7614,
      7617
    ],
    [
      7616,
      7621,
      9245,
      9246,
      9243,
      7617
    ],
    [
      7620,
      7627,
      9247,
      9248,
      9249,
      9245,
      7621
    ],
    [
      7627,
      7626,
      7630,
      9250,
      9251,
      9247
    ],
    [
      7630,
      7629,
      7634,
      9252,
      9253,
      9250
    ],
    [
      7633,
      7640,
      9254,
      9255,
      9252,
      7634
    ],
    [
      7639,
      9126,
      9256,
      9257,
      9254,
      7640
    ],
    [
      9258,
      9256,
      9126,
      9125,
      9129,
      9259
    ],
    [
      9259,
      9129,
      9128,
      9260,
      9261
    ],
    [
      9127,
      9131,
      9262,
      9263,
      9260,
      9128
    ],
    [
      9133,
      9264,
      9265,
      9262,
      9131,
      9130
    ],
    [
      9133,
      9132,
      9136,
      9266,
      9267,
      9264
    ],
    [
      9136,
      9135,
      9268,
      9269,
      9266
    ],
    [
      9135,
      9134,
      9138,
      9270,
      9271,
      9268
    ],
    [
      9272,
      9270,
      9138,
      9137,
      9140,
      9273,
      9274
    ],
    [
      9275,
      9276,
      9274,
      9273,
      9277
    ],
    [
      9278,
      9279,
      9280,
      9275,
      9277,
      9281,
      9282
    ],
    [
      9278,
      9282,
      9283,
      9284,
      9285
    ],
    [
      9285,
      9284,
      9286,
      9287,
      9288,
      9289
    ],
    [
      9287,
      9290,
      9291,
      9292,
      9293,
      9294,
      9288
    ],
    [
      9295,
      9296,
      9297,
      9298,
      9292,
      9291
    ],
    [
      9299,
      9297,
      9296,
      9300,
      9301
    ],
    [
      9302,
      9303,
      9304,
      9305,
      9301,
      9300,
      9306,
      9307
    ],
    [
      9302,
      9308,
      9309,
      9310,
      9311,
      9312,
      9313,
      9314,
      9303
    ],
    [
      9315,
      9316,
      9317,
      9311,
      9310
    ],
    [
      9318,
      9319,
      9320,
      9321,
      9317,
      9316
    ],
    [
      9320,
      9319,
      9322,
      9323,
      9324,
      9325
    ],
    [
      9326,
      9324,
      9323,
      9327,
      9328,
      9329
    ],
    [
      9330,
      9331,
      9332,
      9329,
      9328,
      9333,
      9334
    ],
    [
      9330,
      9335,
      9336,
      9337,
      9331
    ],
    [
      9337,
      9336,
      9338,
      9339,
      9340,
      9341
    ],
    [
      9342,
      9340,
      9339,
      9343,
      9344,
      9345,
      9346
    ],
    [
      9347,
      9348,
      9345,
      9344,
      9349,
      9350
    ],
    [
      9351,
      9352,
      9353,
      9347,
      9350,
      9354
    ],
    [
      9351,
      9355,
      9356,
      9357,
      9358,
      9352
    ],
    [
      9359,
      9360,
      9361,
      9362,
      9357,
      9356
    ],
    [
      9360,
      9363,
      9364,
      9365,
      9361
    ],
    [
      9365,
      9364,
      9366,
      9367,
      9368
    ],
    [
      9369,
      5820,
      5819,
      9368,
      9367,
      9370
    ],
    [
      5813,
      5818,
      5820,
      9369,
      9371,
      9372,
      9373,
      8072,
      5814
    ],
    [
      7539,
      7543,
      9374,
      9375,
      7544
    ],
    [
      7545,
      9376,
      9377,
      7551,
      7546
    ],
    [
      7555,
      7559,
      9378,
      9379,
      7560
    ],
    [
      9380,
      9381,
      7565,
      7561,
      7560,
      9379
    ],
    [
      7568,
      7566,
      7565,
      9381,
      9382,
      9383
    ],
    [
      7568,
      9383,
      9384,
      9385,
      7575,
      7569
    ],
    [
      7572,
      7575,
      9385,
      9386,
      9387,
      7576
    ],
    [
      7580,
      7577,
      7576,
      9387,
      9388,
      9389
    ],
    [
      7580,
      9389,
      9390,
      9391,
      7587,
      7581
    ],
    [
      7584,
      7587,
      9391,
      9392,
      9393,
      7591
    ],
    [
      7588,
      7591,
      9393,
      9394,
      9395,
      7592
    ],
    [
      7593,
      7592,
      9395,
      9396,
      9397,
      7599
    ],
    [
      7596,
      7599,
      9397,
      9398,
      9399,
      7600
    ],
    [
      7605,
      7601,
      7600,
      9399,
      9400,
      9401
    ],
    [
      7605,
      9401,
      9402,
      9403,
      7608,
      7606
    ],
    [
      9404,
      7612,
      7609,
      7608,
      9403,
      9405
    ],
    [
      9406,
      7618,
      7613,
      7612,
      9404,
      9407
    ],
    [
      7622,
      7619,
      7618,
      9406,
      9408,
      9409,
      7623
    ],
    [
      9053,
      7624,
      7623,
      9409,
      9410
    ],
    [
      9411,
      9055,
      9054,
      9053,
      9410,
      9412
    ],
    [
      9411,
      9413,
      9414,
      9057,
      9056,
      9055
    ],
    [
      9057,
      9414,
      9415,
      9416,
      9059,
      9058
    ],
    [
      9060,
      9059,
      9416,
      9417,
      9418,
      9061
    ],
    [
      9062,
      9061,
      9418,
      9419,
      9063
    ],
    [
      9064,
      9063,
      9419,
      9420,
      9421,
      9066,
      9065
    ],
    [
      9067,
      9066,
      9421,
      9422,
      9069
    ],
    [
      9423,
      9424,
      9070,
      9069,
      9422
    ],
    [
      9071,
      9070,
      9424,
      9425,
      9073,
      9072
    ],
    [
      7673,
      7678,
      9073,
      9425,
      9426,
      9427,
      9428,
      9074
    ],
    [
      9428,
      9429,
      9077,
      9075,
      9074
    ],
    [
      9076,
      9077,
      9429,
      9430,
      9431,
      9078
    ],
    [
      9432,
      9081,
      9080,
      9079,
      9078,
      9431,
      9433
    ],
    [
      9432,
      9434,
      9435,
      9083,
      9082,
      9081
    ],
    [
      9435,
      9436,
      9437,
      9085,
      9084,
      9083
    ],
    [
      9438,
      9087,
      9086,
      9085,
      9437,
      9439
    ],
    [
      9438,
      9440,
      9441,
      9090,
      9089,
      9088,
      9087
    ],
    [
      9441,
      9442,
      9443,
      9091,
      9090
    ],
    [
      9094,
      9093,
      9092,
      9091,
      9443,
      9444
    ],
    [
      9445,
      9096,
      9095,
      9094,
      9444,
      9446
    ],
    [
      9445,
      9447,
      9448,
      9099,
      9097,
      9096
    ],
    [
      9098,
      9099,
      9448,
      9449,
      9450,
      9100
    ],
    [
      9451,
      9102,
      9101,
      9100,
      9450,
      9452
    ],
    [
      9451,
      9453,
      9454,
      9105,
      9103,
      9102
    ],
    [
      9104,
      9105,
      9454,
      9455,
      9456,
      9106
    ],
    [
      9457,
      9458,
      9108,
      9107,
      9106,
      9456
    ],
    [
      9459,
      9111,
      9109,
      9108,
      9458,
      9460
    ],
    [
      9459,
      9461,
      9462,
      9112,
      9110,
      9111
    ],
    [
      9462,
      9463,
      9464,
      9114,
      9113,
      9112
    ],
    [
      9465,
      9466,
      9116,
      9115,
      9114,
      9464
    ],
    [
      9116,
      9466,
      9467,
      9468,
      9118,
      9117
    ],
    [
      9118,
      9468,
      9469,
      9470,
      9120,
      9119
    ],
    [
      9471,
      9472,
      9122,
      9121,
      9120,
      9470
    ],
    [
      9473,
      9124,
      9123,
      9122,
      9472
    ],
    [
      7907,
      9474,
      9475,
      7909,
      7908
    ],
    [
      7910,
      7909,
      9475,
      9476,
      9477,
      7911
    ],
    [
      9478,
      9479,
      7914,
      7912,
      7911,
      9477
    ],
    [
      9480,
      9481,
      7915,
      7913,
      7914,
      9479
    ],
    [
      7915,
      9481,
      9482,
      9483,
      7918,
      7916
    ],
    [
      9484,
      9485,
      7919,
      7917,
      7918,
      9483
    ],
    [
      9486,
      9487,
      7921,
      7920,
      7919,
      9485
    ],
    [
      7923,
      7922,
      7921,
      9487,
      9488,
      9489
    ],
    [
      7923,
      9489,
      9490,
      9491,
      7925,
      7924
    ],
    [
      7925,
      9491,
      9492,
      9493,
      7928,
      7926
    ],
    [
      9494,
      7930,
      7927,
      7928,
      9493,
      9495
    ],
    [
      9494,
      9496,
      9497,
      9498,
      7931,
      7929,
      7930
    ],
    [
      9499,
      9500,
      7933,
      7932,
      7931,
      9498
    ],
    [
      9501,
      7935,
      7934,
      7933,
      9500,
      9502
    ],
    [
      9501,
      9503,
      7937,
      7936,
      7935
    ],
    [
      9503,
      9504,
      9505,
      7939,
      7938,
      7937
    ],
    [
      7941,
      7940,
      7939,
      9505,
      9506,
      9507
    ],
    [
      7941,
      9507,
      9508,
      9509,
      9510,
      7943,
      7942
    ],
    [
      9511,
      9510,
      9509,
      9512,
      9513,
      9514,
      9515
    ],
    [
      9513,
      9516,
      7954,
      7952,
      7951,
      9517,
      9514
    ],
    [
      7953,
      7954,
      9516,
      9518,
      7955
    ],
    [
      7956,
      7955,
      9518,
      9519,
      9520,
      7958,
      7957
    ],
    [
      7960,
      7959,
      7958,
      9520,
      9521,
      9522
    ],
    [
      9523,
      9524,
      7962,
      7961,
      7960,
      9522
    ],
    [
      9525,
      9526,
      7964,
      7963,
      7962,
      9524
    ],
    [
      9526,
      9527,
      9528,
      7966,
      7965,
      7964
    ],
    [
      7966,
      9528,
      9529,
      7969,
      7967
    ],
    [
      7968,
      7969,
      9529,
      9530,
      9531,
      7970
    ],
    [
      7971,
      7970,
      9531,
      9532,
      7972
    ],
    [
      7972,
      9532,
      9533,
      9534,
      9535,
      7974,
      7973
    ],
    [
      7976,
      7975,
      7974,
      9535,
      9536,
      9537
    ],
    [
      7978,
      7977,
      7976,
      9537,
      9538,
      9539
    ],
    [
      7978,
      9539,
      9540,
      7980,
      7979
    ],
    [
      7982,
      7981,
      7980,
      9540,
      9541,
      9542
    ],
    [
      7982,
      9542,
      9543,
      9544,
      7984,
      7983
    ],
    [
      7986,
      7985,
      7984,
      9544,
      9545,
      9546
    ],
    [
      7986,
      9546,
      9547,
      9548,
      7988,
      7987
    ],
    [
      7988,
      9548,
      9549,
      9550,
      7991,
      7989
    ],
    [
      7990,
      7991,
      9550,
      9551,
      9552,
      7992
    ],
    [
      9552,
      9553,
      9554,
      7994,
      7993,
      7992
    ],
    [
      7995,
      7994,
      9554,
      9555,
      9556,
      7996
    ],
    [
      9557,
      9558,
      7999,
      7998,
      7997,
      7996,
      9556
    ],
    [
      7999,
      9558,
      9559,
      9560,
      8001,
      8000
    ],
    [
      9561,
      8003,
      8002,
      8001,
      9560,
      9562
    ],
    [
      9561,
      9563,
      8006,
      8004,
      8003
    ],
    [
      9511,
      7946,
      7945,
      7944,
      7943,
      9510
    ],
    [
      9511,
      9515,
      7948,
      7947,
      7946
    ],
    [
      7949,
      7948,
      9515,
      9514,
      9517,
      7950
    ],
    [
      5898,
      7950,
      9517,
      7951,
      5899
    ],
    [
      7891,
      7890,
      7889,
      9564,
      9565,
      9566
    ],
    [
      7891,
      9566,
      9567,
      9568,
      7893,
      7892
    ],
    [
      9569,
      7896,
      7894,
      7893,
      9568,
      9570
    ],
    [
      7895,
      7896,
      9569,
      9571,
      9572,
      7897
    ],
    [
      7899,
      7898,
      7897,
      9572,
      9573,
      9574,
      7900
    ],
    [
      7903,
      7901,
      7900,
      9574,
      9575,
      9576
    ],
    [
      7902,
      7903,
      9576,
      9577,
      9578,
      7904
    ],
    [
      7904,
      9578,
      9579,
      9580,
      7906,
      7905
    ],
    [
      7906,
      9580,
      9581,
      9474,
      7907
    ],
    [
      9582,
      9476,
      9475,
      9474,
      9581,
      9583
    ],
    [
      9478,
      9477,
      9476,
      9582,
      9584,
      9585
    ],
    [
      9480,
      9479,
      9478,
      9585,
      9586,
      9587,
      9588
    ],
    [
      9480,
      9588,
      9589,
      9590,
      9482,
      9481
    ],
    [
      9484,
      9483,
      9482,
      9590,
      9591,
      9592
    ],
    [
      9486,
      9485,
      9484,
      9592,
      9593,
      9594
    ],
    [
      9486,
      9594,
      9595,
      9596,
      9488,
      9487
    ],
    [
      9488,
      9596,
      9597,
      9598,
      9490,
      9489
    ],
    [
      9490,
      9598,
      9599,
      9600,
      9492,
      9491
    ],
    [
      9601,
      9495,
      9493,
      9492,
      9600,
      9602
    ],
    [
      9601,
      9603,
      9604,
      9496,
      9494,
      9495
    ],
    [
      9605,
      9497,
      9496,
      9604,
      9606
    ],
    [
      9605,
      9607,
      9608,
      9499,
      9498,
      9497
    ],
    [
      9609,
      9610,
      9502,
      9500,
      9499,
      9608
    ],
    [
      9501,
      9502,
      9610,
      9611,
      9612,
      9504,
      9503
    ],
    [
      9612,
      9613,
      9506,
      9505,
      9504
    ],
    [
      9507,
      9506,
      9613,
      9614,
      9615,
      9508
    ],
    [
      9512,
      9509,
      9508,
      9615,
      9616,
      9617
    ],
    [
      9512,
      9617,
      9618,
      9519,
      9518,
      9516,
      9513
    ],
    [
      8009,
      8806,
      8804,
      3214,
      3213,
      4126,
      8007,
      8008
    ],
    [
      8009,
      8010,
      8012,
      8807,
      8805,
      8806
    ],
    [
      8012,
      8011,
      8014,
      8809,
      8808,
      8807
    ],
    [
      8811,
      8810,
      8809,
      8014,
      8013,
      8016
    ],
    [
      8015,
      8018,
      8813,
      8812,
      8811,
      8016
    ],
    [
      8020,
      8815,
      8814,
      8813,
      8018,
      8017,
      8019
    ],
    [
      8816,
      8815,
      8020,
      8021,
      8022,
      8817
    ],
    [
      8819,
      8818,
      8817,
      8022,
      8023,
      8025
    ],
    [
      8819,
      8025,
      8024,
      8026,
      8821,
      8820
    ],
    [
      8026,
      8027,
      8029,
      8823,
      8822,
      8821
    ],
    [
      8028,
      8031,
      8825,
      8824,
      8823,
      8029
    ],
    [
      8825,
      8031,
      8030,
      8032,
      8827,
      8826
    ],
    [
      8032,
      8033,
      8035,
      8829,
      8828,
      8827
    ],
    [
      8830,
      8829,
      8035,
      8034,
      8037,
      8831
    ],
    [
      8036,
      8039,
      8832,
      8831,
      8037
    ],
    [
      8834,
      8833,
      8832,
      8039,
      8038,
      8041
    ],
    [
      8834,
      8041,
      8040,
      8042,
      8836,
      8835
    ],
    [
      8836,
      8042,
      8043,
      8045,
      8838,
      8837
    ],
    [
      8044,
      8047,
      8840,
      8839,
      8838,
      8045
    ],
    [
      8841,
      8840,
      8047,
      8046,
      8049,
      8842
    ],
    [
      8048,
      8051,
      8844,
      8843,
      8842,
      8049
    ],
    [
      8846,
      8845,
      8844,
      8051,
      8050,
      8053
    ],
    [
      8052,
      8055,
      8849,
      8848,
      8847,
      8846,
      8053
    ],
    [
      8849,
      8055,
      8054,
      8056,
      8851,
      8850
    ],
    [
      8851,
      8056,
      8057,
      8059,
      8853,
      8852
    ],
    [
      8060,
      8855,
      8854,
      8853,
      8059,
      8058
    ],
    [
      8857,
      8856,
      8855,
      8060,
      8061,
      8063
    ],
    [
      8857,
      8063,
      8062,
      8065,
      8859,
      8858
    ],
    [
      8064,
      8067,
      8861,
      8860,
      8859,
      8065
    ],
    [
      8066,
      8069,
      8863,
      8862,
      8861,
      8067
    ],
    [
      8070,
      7267,
      7266,
      8865,
      8864,
      8863,
      8069,
      8068
    ],
    [
      4309,
      4308,
      8099,
      8101,
      9619,
      9620,
      6092
    ],
    [
      8102,
      8104,
      8499,
      9621,
      9619,
      8101,
      8100
    ],
    [
      8108,
      9622,
      1623,
      1622
    ],
    [
      9623,
      9622,
      8108,
      6222,
      6221,
      9624
    ],
    [
      8109,
      9625,
      9624,
      6221,
      6225
    ],
    [
      8109,
      8111,
      9626,
      9627,
      9625
    ],
    [
      9628,
      9626,
      8111,
      8110,
      8113,
      9629
    ],
    [
      9630,
      9631,
      9629,
      8113,
      8112,
      8115
    ],
    [
      9630,
      8115,
      8114,
      8117,
      9632,
      9633
    ],
    [
      8118,
      9634,
      9635,
      9632,
      8117,
      8116
    ],
    [
      8118,
      8119,
      8121,
      9636,
      9637,
      9634
    ],
    [
      9636,
      8121,
      8120,
      8122,
      9638,
      9639
    ],
    [
      9640,
      9638,
      8122,
      8123,
      8125,
      9641
    ],
    [
      8125,
      8124,
      8127,
      9642,
      9643,
      9641
    ],
    [
      8126,
      8129,
      9644,
      9645,
      9642,
      8127
    ],
    [
      9646,
      9644,
      8129,
      8128,
      8130
    ],
    [
      9646,
      8130,
      8131,
      8132,
      2060,
      2059
    ],
    [
      3346,
      729,
      728,
      2060,
      8132
    ],
    [
      8133,
      7028,
      7027,
      8558,
      9647,
      9648,
      8134
    ],
    [
      8135,
      8134,
      9648,
      9649,
      8136
    ],
    [
      8137,
      8136,
      9649,
      9650,
      9651,
      8138
    ],
    [
      9652,
      9653,
      8140,
      8139,
      8138,
      9651
    ],
    [
      9654,
      8142,
      8141,
      8140,
      9653,
      9655
    ],
    [
      9656,
      8144,
      8143,
      8142,
      9654,
      9657
    ],
    [
      8147,
      8146,
      8145,
      8144,
      9656,
      9658,
      9659
    ],
    [
      8147,
      9659,
      9660,
      9661,
      8149,
      8148
    ],
    [
      8150,
      8149,
      9661,
      9662,
      8152,
      8151
    ],
    [
      9663,
      8154,
      8153,
      8152,
      9662,
      9664
    ],
    [
      9663,
      9665,
      9666,
      8156,
      8155,
      8154
    ],
    [
      8157,
      6278,
      6277,
      6276,
      8156,
      9666,
      9667,
      9668
    ],
    [
      8157,
      9668,
      9669,
      9670,
      8158
    ],
    [
      9671,
      8161,
      8159,
      8158,
      9670,
      9672
    ],
    [
      8163,
      8162,
      8160,
      8161,
      9671,
      9673,
      9674
    ],
    [
      8163,
      9674,
      9675,
      8165,
      8164
    ],
    [
      8167,
      8166,
      8165,
      9675,
      9676,
      9677
    ],
    [
      8167,
      9677,
      9678,
      8170,
      8169,
      8168
    ],
    [
      9679,
      8172,
      8171,
      8170,
      9678,
      9680
    ],
    [
      9679,
      9681,
      9682,
      8174,
      8173,
      8172
    ],
    [
      9683,
      8177,
      8175,
      8174,
      9682
    ],
    [
      9683,
      9684,
      8452,
      6774,
      6775,
      8176,
      8177
    ],
    [
      8187,
      9685,
      9686,
      9687,
      8185,
      8184,
      8188
    ],
    [
      8187,
      8189,
      8191,
      9688,
      9685
    ],
    [
      9689,
      9690,
      9691,
      9686,
      9685,
      9688
    ],
    [
      9689,
      9688,
      8191,
      8190,
      8192,
      8193,
      9692
    ],
    [
      6343,
      6342,
      9693,
      9694,
      9692,
      8193
    ],
    [
      6342,
      6341,
      9695,
      9693
    ],
    [
      6397,
      8195,
      9696,
      9697,
      9698,
      9695,
      6341,
      6340
    ],
    [
      9696,
      8195,
      8194,
      8197
    ],
    [
      8203,
      9699,
      9700,
      9701,
      9702,
      8200,
      8199,
      8201
    ],
    [
      8203,
      8202,
      8204,
      8206,
      9699
    ],
    [
      9699,
      8206,
      8205,
      8207,
      8208,
      8209,
      8211,
      9703,
      9700
    ],
    [
      9704,
      9705,
      9703,
      8211,
      8210,
      8212
    ],
    [
      9706,
      9707,
      9708,
      9709,
      9710,
      9711,
      9712
    ],
    [
      9710,
      9713,
      9714,
      9715,
      9716,
      9711
    ],
    [
      9717,
      9715,
      9714,
      9718,
      9719,
      9720
    ],
    [
      9721,
      9722,
      9723,
      9720,
      9719,
      9724
    ],
    [
      9725,
      9726,
      9727,
      9728,
      9729
    ],
    [
      9730,
      9731,
      9732,
      9733,
      9734
    ],
    [
      9735,
      9736,
      9737,
      9738,
      9739,
      9740,
      9741
    ],
    [
      9742,
      9743,
      9738,
      9737,
      9744
    ],
    [
      6301,
      6377,
      8179,
      8183,
      6302
    ],
    [
      6306,
      6313,
      8186,
      8180,
      8178,
      6307
    ],
    [
      6317,
      8188,
      8184,
      8186,
      6313,
      6312,
      6318
    ],
    [
      6403,
      4502,
      4501,
      6302,
      8183,
      8182,
      9745
    ],
    [
      8227,
      8225,
      8226,
      8278,
      8277,
      8228
    ],
    [
      8277,
      8281,
      8230,
      8229,
      8228
    ],
    [
      8232,
      8231,
      8230,
      8281,
      8280
    ],
    [
      8232,
      8280,
      8267,
      8266,
      8234,
      8233
    ],
    [
      9746,
      8236,
      8235,
      8234,
      8266,
      8265
    ],
    [
      8238,
      8237,
      8236,
      9746,
      9747
    ],
    [
      8238,
      9747,
      9748,
      8241,
      8240,
      8239
    ],
    [
      6461,
      6459,
      6458,
      8244,
      6462
    ],
    [
      8357,
      8351,
      8350,
      8253,
      8252,
      8254,
      8358
    ],
    [
      8256,
      9749,
      9750,
      8359,
      8358,
      8254,
      8255
    ],
    [
      8256,
      8257,
      8259,
      9751,
      9752,
      9749
    ],
    [
      9753,
      9751,
      8259,
      8258,
      9754
    ],
    [
      6577,
      6580,
      8262,
      9755,
      9754,
      8258
    ],
    [
      9756,
      9755,
      8262,
      8261
    ],
    [
      8269,
      9757,
      9758,
      8268,
      6594,
      6593
    ],
    [
      8269,
      8270,
      8272,
      9759,
      9757
    ],
    [
      9760,
      9759,
      8272,
      8271,
      8274,
      9761
    ],
    [
      6489,
      6488,
      8246,
      9761,
      8274,
      8273,
      8275,
      8276
    ],
    [
      9746,
      8265,
      8264,
      8268,
      9758,
      9748,
      9747
    ],
    [
      6621,
      6620,
      6619,
      8295,
      9762,
      9763,
      9764,
      8296
    ],
    [
      9764,
      9765,
      9766,
      8298,
      8297,
      8296
    ],
    [
      9767,
      9768,
      8300,
      8299
    ],
    [
      4876,
      4875,
      8300,
      9768,
      9769,
      9770,
      9771
    ],
    [
      4876,
      9771,
      9772,
      9773,
      9774,
      8301,
      4877
    ],
    [
      8304,
      8307,
      9775,
      9776,
      9777,
      8349,
      8348,
      8347,
      8346
    ],
    [
      9778,
      8312,
      8311,
      8349,
      9777,
      9779
    ],
    [
      9778,
      9780,
      8313,
      8312
    ],
    [
      9781,
      8315,
      8314,
      8313,
      9780,
      9782
    ],
    [
      9783,
      8323,
      8319,
      8316,
      8315,
      9781,
      9784
    ],
    [
      9783,
      9785,
      9786,
      8328,
      8324,
      8323
    ],
    [
      9787,
      8331,
      8329,
      8328,
      9786
    ],
    [
      9787,
      9788,
      9789,
      8339,
      8335,
      8332,
      8331
    ],
    [
      8340,
      8339,
      9789,
      9790,
      8342
    ],
    [
      3361,
      2064,
      2063,
      9791,
      8282,
      4699
    ],
    [
      8284,
      8283,
      8282,
      9791,
      9792,
      9793
    ],
    [
      9794,
      8287,
      8285,
      8284,
      9793,
      9795
    ],
    [
      8286,
      8287,
      9794,
      9796,
      9797,
      8288
    ],
    [
      9797,
      9798,
      9799,
      8291,
      8289,
      8288
    ],
    [
      8290,
      8291,
      9799,
      9800,
      9801,
      8292
    ],
    [
      8294,
      8293,
      8292,
      9801,
      9802,
      9803
    ],
    [
      8294,
      9803,
      9804,
      9805,
      9806,
      9762,
      8295
    ],
    [
      9806,
      9807,
      9763,
      9762
    ],
    [
      9808,
      9809,
      9765,
      9764,
      9763,
      9807
    ],
    [
      9810,
      9811,
      9766,
      9765,
      9809,
      9812
    ],
    [
      9813,
      9814,
      9815,
      9811,
      9810,
      9816
    ],
    [
      9769,
      9817,
      9818,
      9819,
      9820,
      9821,
      9770
    ],
    [
      9822,
      9823,
      9821,
      9820,
      9824
    ],
    [
      9822,
      9825,
      9826,
      9827,
      9823
    ],
    [
      9828,
      9829,
      9830,
      9827,
      9826,
      9831
    ],
    [
      9828,
      9832,
      9833,
      9834,
      9829
    ],
    [
      9835,
      9836,
      9837,
      9838,
      9833,
      9832
    ],
    [
      9839,
      9840,
      9837,
      9836,
      9841,
      9842,
      9843
    ],
    [
      9844,
      9843,
      9842,
      9845,
      9846
    ],
    [
      9847,
      9846,
      9845,
      9848,
      9849,
      9850
    ],
    [
      9850,
      9849,
      9851,
      9852,
      9853,
      9854
    ],
    [
      9855,
      9856,
      9857,
      9853,
      9852
    ],
    [
      9858,
      9857,
      9856,
      9859,
      9860,
      9861
    ],
    [
      9862,
      9863,
      9861,
      9860,
      9864,
      9865
    ],
    [
      9862,
      9865,
      9866,
      9867,
      9868,
      9869
    ],
    [
      9870,
      9871,
      9868,
      9867,
      9872,
      9873
    ],
    [
      9870,
      9873,
      9874,
      9875,
      9876,
      9877
    ],
    [
      9876,
      9875,
      9878,
      9879,
      9880
    ],
    [
      9881,
      9736,
      9735,
      9880,
      9879,
      9882
    ],
    [
      9883,
      9884,
      9885,
      9886,
      9887,
      9888
    ],
    [
      9889,
      9886,
      9885,
      9890,
      9891
    ],
    [
      9881,
      9888,
      9887,
      9892,
      9744,
      9737,
      9736
    ],
    [
      9889,
      9893,
      9892,
      9887,
      9886
    ],
    [
      9894,
      9895,
      9896,
      8362,
      8361,
      9897
    ],
    [
      8362,
      9896,
      9898,
      8365,
      8364,
      8363
    ],
    [
      8366,
      8365,
      9898,
      9899,
      9900
    ],
    [
      9901,
      8368,
      8367,
      8366,
      9900,
      9902
    ],
    [
      9903,
      8371,
      8370,
      8369,
      8368,
      9901,
      9904,
      9905
    ],
    [
      9903,
      9906,
      8372,
      6699,
      6698,
      6697,
      8371
    ],
    [
      9907,
      9908,
      8376,
      6709,
      6708
    ],
    [
      8376,
      9908,
      9909,
      8379,
      8378,
      8377
    ],
    [
      8380,
      8379,
      9909,
      9910,
      9911,
      8381
    ],
    [
      8383,
      8382,
      8381,
      9911,
      9912,
      8384
    ],
    [
      9912,
      9913,
      9914,
      8386,
      8385,
      8384
    ],
    [
      8401,
      8407,
      8400,
      8394,
      8397,
      9915,
      9916
    ],
    [
      8401,
      9916,
      9917,
      9918,
      8421,
      8420,
      8402
    ],
    [
      9919,
      9899,
      9898,
      9896,
      9895
    ],
    [
      9894,
      9920,
      9921,
      9922,
      9923,
      9919,
      9895
    ],
    [
      9921,
      9924,
      9925,
      9926,
      9927,
      9922
    ],
    [
      9928,
      9929,
      9930,
      9927,
      9926
    ],
    [
      9931,
      9932,
      9933,
      9934,
      9935,
      9936,
      9937,
      9938
    ],
    [
      9931,
      9939,
      8398,
      8400,
      8407,
      8406,
      9940,
      9932
    ],
    [
      8408,
      8412,
      8413,
      8414,
      9941
    ],
    [
      8414,
      8415,
      8417,
      9942,
      9941
    ],
    [
      8419,
      9943,
      9942,
      8417,
      8416
    ],
    [
      8418,
      6729,
      6728,
      8386,
      9914,
      9944,
      9943,
      8419
    ],
    [
      9928,
      9926,
      9925,
      9945,
      9946,
      9947,
      9948
    ],
    [
      9947,
      9949,
      9937,
      9936,
      9948
    ],
    [
      9938,
      9937,
      9949,
      9950,
      9951
    ],
    [
      9931,
      9938,
      9951,
      9952,
      9953,
      9939
    ],
    [
      8398,
      9939,
      9953,
      9954,
      8399
    ],
    [
      8387,
      8395,
      8399,
      9954,
      9955,
      8388
    ],
    [
      8556,
      8560,
      9956,
      9957,
      9958,
      8557
    ],
    [
      9956,
      8560,
      8559,
      8562,
      9959
    ],
    [
      8564,
      9960,
      9961,
      9959,
      8562,
      8561
    ],
    [
      8564,
      8563,
      8565,
      8567,
      9962,
      9963,
      9960
    ],
    [
      8566,
      8569,
      9964,
      9962,
      8567
    ],
    [
      9965,
      9966,
      9964,
      8569,
      8568
    ],
    [
      9965,
      8568,
      8424,
      8423,
      9967,
      9968
    ],
    [
      8426,
      9969,
      9970,
      9967,
      8423,
      8422
    ],
    [
      8426,
      8425,
      8428,
      9971,
      9972,
      9969
    ],
    [
      8428,
      8427,
      8430,
      9973,
      9974,
      9971
    ],
    [
      8429,
      8432,
      9975,
      9973,
      8430
    ],
    [
      9976,
      9977,
      8435,
      8434,
      8437,
      8440
    ],
    [
      9976,
      8440,
      8439,
      9978
    ],
    [
      8441,
      9979,
      9980,
      9978,
      8439,
      8438
    ],
    [
      8441,
      8442,
      8443,
      8445,
      9981,
      9982,
      9979
    ],
    [
      9981,
      8445,
      8444,
      8447,
      9983,
      9984
    ],
    [
      9985,
      9983,
      8447,
      8446,
      8449
    ],
    [
      9985,
      8449,
      8448,
      8451,
      9986,
      9987
    ],
    [
      9988,
      9989,
      9986,
      8451,
      8450,
      8452,
      9684
    ],
    [
      8502,
      7454,
      7453,
      7484,
      8500,
      8501
    ],
    [
      8502,
      8503,
      8504,
      7455,
      7454
    ],
    [
      7449,
      7455,
      8504,
      8505,
      8507,
      9990,
      9991
    ],
    [
      8507,
      8506,
      8509,
      9992,
      9993,
      9990
    ],
    [
      8508,
      8511,
      9994,
      9995,
      9992,
      8509
    ],
    [
      8510,
      8513,
      9996,
      9997,
      9994,
      8511
    ],
    [
      8514,
      9998,
      9999,
      9996,
      8513,
      8512
    ],
    [
      8514,
      8515,
      8517,
      10000,
      10001,
      9998
    ],
    [
      8519,
      10002,
      10003,
      10000,
      8517,
      8516
    ],
    [
      8518,
      8521,
      10004,
      10005,
      10002,
      8519
    ],
    [
      8520,
      8523,
      10006,
      10007,
      10004,
      8521
    ],
    [
      8525,
      10008,
      10009,
      10006,
      8523,
      8522
    ],
    [
      10010,
      10011,
      10008,
      8525,
      8524,
      8527
    ],
    [
      10010,
      8527,
      8526,
      8529,
      10012,
      10013
    ],
    [
      10014,
      10012,
      8529,
      8528,
      8531,
      10015
    ],
    [
      8531,
      8530,
      8533,
      10016,
      10017,
      10015
    ],
    [
      10018,
      10019,
      10016,
      8533,
      8532,
      8535
    ],
    [
      10018,
      8535,
      8534,
      8537,
      10020,
      10021
    ],
    [
      8537,
      8536,
      8539,
      10022,
      10023,
      10020
    ],
    [
      8538,
      8542,
      10024,
      10025,
      10022,
      8539
    ],
    [
      8542,
      8541,
      10026,
      10027,
      10024
    ],
    [
      10026,
      8541,
      8540,
      8544,
      10028,
      10029
    ],
    [
      10030,
      10031,
      10032,
      10028,
      8544,
      8543,
      8546
    ],
    [
      8545,
      8548,
      10033,
      10034,
      10030,
      8546
    ],
    [
      10033,
      8548,
      8547,
      8550,
      10035,
      10036
    ],
    [
      10037,
      10038,
      10035,
      8550,
      8549,
      8552
    ],
    [
      8551,
      8554,
      10039,
      10040,
      10041,
      10037,
      8552
    ],
    [
      10039,
      10042,
      10043,
      10044,
      10045,
      10040
    ],
    [
      7024,
      7023,
      10046,
      10047,
      10044,
      10043
    ],
    [
      1961,
      6429,
      7074,
      7072,
      7069,
      7066,
      7065,
      7059,
      7058,
      3309,
      3306,
      3305,
      1962
    ],
    [
      3871,
      3874,
      501,
      500,
      10048,
      10049,
      8570
    ],
    [
      494,
      493,
      495,
      501,
      3874,
      1551
    ],
    [
      3881,
      3880,
      3882,
      3883,
      3884,
      3885,
      3886,
      5356,
      5360,
      5358,
      5357,
      8866,
      8868
    ],
    [
      3878,
      3881,
      8868,
      8867,
      8869,
      3879
    ],
    [
      3876,
      3877,
      3879,
      8869,
      7337,
      2965,
      2964,
      3875
    ],
    [
      8672,
      10050,
      8673
    ],
    [
      7079,
      7078,
      8673,
      10050,
      10051,
      8575
    ],
    [
      8676,
      10052,
      10053,
      8678,
      8581,
      8580,
      8677
    ],
    [
      8680,
      10054,
      10055,
      8591,
      8587,
      8586,
      8585
    ],
    [
      8592,
      8591,
      10055,
      8594,
      8593
    ],
    [
      8595,
      10056,
      10057,
      10058,
      8599,
      8598,
      8597,
      8596
    ],
    [
      8601,
      8600,
      8599,
      10058,
      10059,
      10060
    ],
    [
      10061,
      8603,
      8602,
      8601,
      10060
    ],
    [
      10061,
      10062,
      10063,
      8606,
      8605,
      8604,
      8603
    ],
    [
      8634,
      8633,
      8636,
      10064,
      10065
    ],
    [
      8643,
      8609,
      8608,
      10064,
      8636,
      8635,
      8642
    ],
    [
      8643,
      8645,
      8646,
      8651,
      8652,
      8658,
      8610,
      8609
    ],
    [
      8628,
      10066,
      10067,
      8637,
      8632,
      8629
    ],
    [
      10068,
      8638,
      8637,
      10067,
      10069
    ],
    [
      10068,
      10070,
      10071,
      8640,
      8639,
      8638
    ],
    [
      10072,
      10073,
      8647,
      8644,
      8641,
      8640,
      10071
    ],
    [
      10074,
      10075,
      8649,
      8648,
      8647,
      10073
    ],
    [
      8650,
      8649,
      10075,
      10076,
      10077,
      8653
    ],
    [
      10078,
      10079,
      8654,
      8653,
      10077,
      10080
    ],
    [
      10078,
      10081,
      10082,
      10083,
      10079
    ],
    [
      10083,
      10082,
      10084,
      10085,
      10086,
      10087
    ],
    [
      10086,
      10085,
      10088,
      10089,
      10090,
      10091
    ],
    [
      10092,
      10093,
      10094,
      10090,
      10089
    ],
    [
      10095,
      10094,
      10093,
      10096,
      10097,
      10098
    ],
    [
      10098,
      10097,
      10099,
      10100,
      10101,
      10102
    ],
    [
      10095,
      10098,
      10102,
      10103,
      10104,
      10105
    ],
    [
      10106,
      10105,
      10104,
      10107
    ],
    [
      5527,
      5497,
      5496,
      7129,
      10106,
      10107,
      5533
    ],
    [
      8614,
      8613,
      8622,
      8625,
      10108,
      10109
    ],
    [
      8624,
      8631,
      10110,
      10108,
      8625
    ],
    [
      8630,
      8634,
      10065,
      10063,
      10062,
      10110,
      8631
    ],
    [
      8606,
      10063,
      10065,
      10064,
      8608,
      8607
    ],
    [
      8611,
      8618,
      10111,
      10112,
      10113
    ],
    [
      8611,
      10113,
      10114,
      10115,
      8619,
      8612
    ],
    [
      8619,
      10115,
      10116,
      10117,
      8620
    ],
    [
      8626,
      8621,
      8620,
      10117,
      10118,
      10119
    ],
    [
      8623,
      8626,
      10119,
      10120,
      10121,
      8627
    ],
    [
      8628,
      8627,
      10121,
      10122,
      10123,
      10066
    ],
    [
      10067,
      10066,
      10123,
      10124,
      10125,
      10069
    ],
    [
      10068,
      10069,
      10125,
      10126,
      10127,
      10070
    ],
    [
      10072,
      10071,
      10070,
      10127,
      10128,
      10129
    ],
    [
      10072,
      10129,
      10130,
      10131,
      10074,
      10073
    ],
    [
      10074,
      10131,
      10132,
      10133,
      10076,
      10075
    ],
    [
      10134,
      10135,
      10080,
      10077,
      10076,
      10133
    ],
    [
      10078,
      10080,
      10135,
      10136,
      10137,
      10081
    ],
    [
      10138,
      10084,
      10082,
      10081,
      10137,
      10139
    ],
    [
      10138,
      10140,
      10141,
      10088,
      10085,
      10084
    ],
    [
      10088,
      10141,
      10142,
      10143,
      10092,
      10089
    ],
    [
      10092,
      10143,
      10144,
      10145,
      10146,
      10096,
      10093
    ],
    [
      10146,
      10145,
      10147,
      10148,
      10149
    ],
    [
      10150,
      10151,
      10152,
      10149,
      10148,
      10153
    ],
    [
      10150,
      10154,
      10155,
      10156,
      10157,
      10151
    ],
    [
      10155,
      10154,
      10158,
      10159,
      10160
    ],
    [
      10160,
      10159,
      10161,
      10162,
      10163,
      10164
    ],
    [
      10165,
      10166,
      10167,
      10163,
      10162,
      10168,
      10169,
      10170
    ],
    [
      10165,
      10170,
      10171,
      10172,
      10173,
      10174
    ],
    [
      10175,
      10176,
      10177,
      10178,
      10179
    ],
    [
      10180,
      10181,
      10182,
      10183
    ],
    [
      10184,
      10173,
      10172,
      10185,
      10178,
      10177
    ],
    [
      10186,
      10187,
      10188,
      10189
    ],
    [
      10190,
      10184,
      10177,
      10176,
      10191,
      10192,
      10193
    ],
    [
      10191,
      10182,
      10181,
      10188,
      10187,
      10194,
      10195,
      10192
    ],
    [
      10186,
      10196,
      10197,
      10198,
      10199,
      10194,
      10187
    ],
    [
      10200,
      10201,
      10199,
      10198
    ],
    [
      10192,
      10195,
      10202,
      10203,
      10193
    ],
    [
      10195,
      10194,
      10199,
      10201,
      10204,
      10202
    ],
    [
      10190,
      10193,
      10203,
      10205,
      10206,
      10207,
      10208
    ],
    [
      10209,
      10210,
      10211,
      10212,
      10208,
      10207,
      10213
    ],
    [
      10214,
      10215,
      10216,
      10217,
      10218,
      8661,
      8660,
      8659
    ],
    [
      10219,
      10220,
      10221,
      8665,
      8664,
      8663,
      8662,
      8661,
      10218
    ],
    [
      8665,
      10221,
      10222,
      8669,
      8666
    ],
    [
      10223,
      8667,
      8669,
      10222,
      10224
    ],
    [
      10223,
      10225,
      10226,
      8670,
      8668,
      8667
    ],
    [
      3,
      8683,
      10227,
      2062,
      730,
      4
    ],
    [
      10228,
      10227,
      8683,
      8682,
      10229
    ],
    [
      10230,
      10229,
      8682,
      8681,
      8685,
      10231
    ],
    [
      8686,
      8688,
      10232,
      10233,
      10231,
      8685,
      8684
    ],
    [
      8688,
      8687,
      8690,
      10234,
      10235,
      10232
    ],
    [
      10236,
      10237,
      10234,
      8690,
      8689,
      8692
    ],
    [
      10238,
      10236,
      8692,
      8691,
      8694,
      10239
    ],
    [
      10239,
      8694,
      8693,
      8696,
      10240,
      10241
    ],
    [
      8695,
      8698,
      10242,
      10243,
      10240,
      8696
    ],
    [
      8697,
      8701,
      10244,
      10245,
      10242,
      8698
    ],
    [
      10246,
      10247,
      10244,
      8701,
      8700
    ],
    [
      10246,
      8700,
      8699,
      8703,
      10248,
      10249
    ],
    [
      8702,
      8705,
      10250,
      10251,
      10248,
      8703
    ],
    [
      10252,
      10253,
      10250,
      8705,
      8704,
      8707
    ],
    [
      10254,
      10252,
      8707,
      8706,
      8708,
      10255
    ],
    [
      10256,
      10257,
      10255,
      8708,
      8709,
      8711
    ],
    [
      10256,
      8711,
      8710,
      8713,
      10258,
      10259
    ],
    [
      10258,
      8713,
      8712,
      8715,
      10260,
      10261
    ],
    [
      10262,
      10260,
      8715,
      8714,
      8717,
      10263
    ],
    [
      8716,
      8722,
      10264,
      10265,
      10263,
      8717
    ],
    [
      10266,
      10264,
      8722,
      8721,
      10267
    ],
    [
      8721,
      8720,
      8724,
      10268,
      10269,
      10267
    ],
    [
      8723,
      10270,
      10271,
      10272,
      10268,
      8724
    ],
    [
      10273,
      10272,
      10271,
      10274,
      10211,
      10210,
      10275
    ],
    [
      10209,
      10276,
      10275,
      10210
    ],
    [
      10277,
      10278,
      10213,
      10207,
      10206
    ],
    [
      10279,
      7887,
      7886,
      8726,
      8728,
      10280,
      10281
    ],
    [
      10282,
      10283,
      10280,
      8728,
      8727,
      8730
    ],
    [
      10282,
      8730,
      8729,
      8732,
      10284
    ],
    [
      8733,
      10285,
      10284,
      8732,
      8731
    ],
    [
      8733,
      8734,
      8736,
      10286,
      10287,
      10285
    ],
    [
      8741,
      10288,
      10286,
      8736,
      8735,
      8738
    ],
    [
      10289,
      10288,
      8741,
      8740,
      7200,
      7199
    ],
    [
      10289,
      7199,
      7198,
      8742,
      8744
    ],
    [
      8751,
      8753,
      10290,
      8750,
      8749
    ],
    [
      10291,
      10290,
      8753,
      8752,
      8755,
      10292
    ],
    [
      8754,
      8757,
      10293,
      10294,
      10292,
      8755
    ],
    [
      8756,
      8759,
      10295,
      10293,
      8757
    ],
    [
      10296,
      10295,
      8759,
      8758,
      8762,
      10297
    ],
    [
      8764,
      10298,
      10299,
      10300,
      8761,
      8760,
      8763
    ],
    [
      8764,
      8766,
      10301,
      10302,
      10298
    ],
    [
      8767,
      10303,
      10301,
      8766,
      8765
    ],
    [
      8767,
      8769,
      10304,
      10305,
      10303
    ],
    [
      10306,
      10307,
      10304,
      8769,
      8768,
      8771
    ],
    [
      10306,
      8771,
      8770,
      8773,
      10308,
      10309,
      10310
    ],
    [
      10311,
      10308,
      8773,
      8772,
      8775
    ],
    [
      10312,
      10311,
      8775,
      8774,
      8777,
      10313
    ],
    [
      10314,
      10315,
      10313,
      8777,
      8776,
      8779
    ],
    [
      10314,
      8779,
      8778,
      8781,
      10316,
      10317
    ],
    [
      10318,
      10319,
      10316,
      8781,
      8780,
      8783
    ],
    [
      10318,
      8783,
      8782,
      8785,
      10320,
      10321
    ],
    [
      8784,
      8788,
      10322,
      10323,
      10320,
      8785
    ],
    [
      8791,
      10324,
      10322,
      8788,
      8787
    ],
    [
      10325,
      10324,
      8791,
      8790,
      8794,
      8796
    ],
    [
      8005,
      8006,
      9563,
      10326,
      10327,
      10325,
      8796,
      8795,
      8800
    ],
    [
      5773,
      5778,
      7429,
      10328,
      10329,
      10330,
      10331,
      10332,
      10333,
      10334,
      7425
    ],
    [
      10335,
      10336,
      8876,
      8877,
      10337,
      10338
    ],
    [
      8871,
      10339,
      10340,
      10337,
      8877
    ],
    [
      8871,
      8872,
      8879,
      8880,
      8896,
      8893,
      8892,
      10341,
      10339
    ],
    [
      7476,
      7477,
      8896,
      8880,
      7478
    ],
    [
      10342,
      10343,
      10344,
      10345,
      10346
    ],
    [
      10347,
      10348,
      10349,
      10344,
      10343
    ],
    [
      10350,
      10351,
      10349,
      10348,
      10352
    ],
    [
      10350,
      10352,
      10353,
      10354,
      10355,
      10356,
      10357
    ],
    [
      10358,
      10356,
      10355,
      10359,
      10360
    ],
    [
      10361,
      10362,
      10363,
      10364,
      10360,
      10359
    ],
    [
      10365,
      10366,
      10367,
      10368,
      10369,
      10370
    ],
    [
      10371,
      10372,
      10373,
      10374,
      10375,
      10376,
      10377,
      10378,
      10379
    ],
    [
      10371,
      10379,
      10380,
      10381
    ],
    [
      10380,
      10382,
      10383,
      10384,
      10385,
      10381
    ],
    [
      10385,
      10384,
      10386,
      10387
    ],
    [
      10388,
      10389,
      10390,
      10387,
      10386
    ],
    [
      10388,
      10391,
      10392,
      10393,
      10389
    ],
    [
      10392,
      10391,
      10394,
      10395,
      10396,
      8889,
      8883,
      8882
    ],
    [
      8881,
      8886,
      10397,
      10398,
      10399
    ],
    [
      8886,
      8885,
      10400,
      10401,
      10397
    ],
    [
      8884,
      8888,
      10402,
      10403,
      10404,
      10405,
      10400,
      8885
    ],
    [
      6094,
      6093,
      8898,
      7536,
      6076,
      6075
    ],
    [
      6093,
      6092,
      9620,
      8899,
      8898
    ],
    [
      9620,
      9619,
      9621,
      8901,
      8900,
      8899
    ],
    [
      8499,
      6945,
      6944,
      8901,
      9621
    ],
    [
      5361,
      5366,
      5369,
      5536,
      8982,
      8986
    ],
    [
      5361,
      8986,
      8985,
      8988,
      5362
    ],
    [
      8987,
      8994,
      10406,
      10407,
      5363,
      5362,
      8988
    ],
    [
      8997,
      10408,
      10409,
      10406,
      8994,
      8993
    ],
    [
      8999,
      10410,
      10411,
      10408,
      8997,
      8996
    ],
    [
      8999,
      9002,
      9003,
      10412,
      10413,
      10410
    ],
    [
      10414,
      10412,
      9003,
      9006,
      9009,
      10415
    ],
    [
      10415,
      9009,
      9008,
      9012,
      10416,
      10417
    ],
    [
      9011,
      9018,
      10418,
      10419,
      10416,
      9012
    ],
    [
      9019,
      10420,
      10421,
      10418,
      9018,
      9017
    ],
    [
      9019,
      9022,
      9026,
      10422,
      10423,
      10420
    ],
    [
      9026,
      9025,
      9030,
      10424,
      10425,
      10422
    ],
    [
      9031,
      10426,
      10427,
      10424,
      9030,
      9029
    ],
    [
      9031,
      9034,
      9037,
      10428,
      10429,
      10426
    ],
    [
      9037,
      9036,
      9042,
      10430,
      10431,
      10428
    ],
    [
      9041,
      9046,
      10432,
      10433,
      10430,
      9042
    ],
    [
      10434,
      10435,
      10432,
      9046,
      9045,
      9048
    ],
    [
      9047,
      10436,
      10437,
      10434,
      9048
    ],
    [
      9047,
      9052,
      10438,
      10439,
      10440,
      10436
    ],
    [
      9277,
      9273,
      9140,
      9139,
      9143,
      9281
    ],
    [
      9282,
      9281,
      9143,
      9142,
      9283
    ],
    [
      9145,
      9286,
      9284,
      9283,
      9142,
      9141
    ],
    [
      9145,
      9144,
      9147,
      9290,
      9287,
      9286
    ],
    [
      9149,
      9295,
      9291,
      9290,
      9147,
      9146
    ],
    [
      9300,
      9296,
      9295,
      9149,
      9148,
      9150,
      9153,
      9306
    ],
    [
      9307,
      9306,
      9153,
      9152
    ],
    [
      9302,
      9307,
      9152,
      9151,
      9155,
      9308
    ],
    [
      9154,
      9158,
      9309,
      9308,
      9155
    ],
    [
      9315,
      9310,
      9309,
      9158,
      9157,
      9160
    ],
    [
      9315,
      9160,
      9159,
      9164,
      9168,
      9318,
      9316
    ],
    [
      9169,
      9322,
      9319,
      9318,
      9168,
      9167
    ],
    [
      9169,
      9172,
      9174,
      9327,
      9323,
      9322
    ],
    [
      9176,
      9333,
      9328,
      9327,
      9174,
      9173
    ],
    [
      9177,
      9179,
      9334,
      9333,
      9176,
      9175
    ],
    [
      9330,
      9334,
      9179,
      9178,
      9181,
      9335
    ],
    [
      9180,
      9183,
      9338,
      9336,
      9335,
      9181
    ],
    [
      9343,
      9339,
      9338,
      9183,
      9182,
      9185
    ],
    [
      9343,
      9185,
      9184,
      9187,
      9349,
      9344
    ],
    [
      9189,
      9354,
      9350,
      9349,
      9187,
      9186
    ],
    [
      9351,
      9354,
      9189,
      9188,
      9191,
      9355
    ],
    [
      9359,
      9356,
      9355,
      9191,
      9190,
      9193
    ],
    [
      9359,
      9193,
      9192,
      9195,
      9363,
      9360
    ],
    [
      9196,
      9366,
      9364,
      9363,
      9195,
      9194
    ],
    [
      9196,
      9197,
      9199,
      9370,
      9367,
      9366
    ],
    [
      9201,
      9371,
      9369,
      9370,
      9199,
      9198
    ],
    [
      9201,
      9200,
      9203,
      9372,
      9371
    ],
    [
      9202,
      9205,
      9373,
      9372,
      9203
    ],
    [
      9204,
      9207,
      6058,
      6057,
      8072,
      9373,
      9205
    ],
    [
      6059,
      6058,
      9207,
      9206,
      9209
    ],
    [
      4304,
      6055,
      6059,
      9209,
      9208,
      9210,
      4305
    ],
    [
      8910,
      8914,
      9162,
      9161,
      9156,
      8908,
      8907
    ],
    [
      9165,
      9163,
      9162,
      8914,
      8913
    ],
    [
      9165,
      8913,
      8912,
      9170,
      9166
    ],
    [
      8911,
      8915,
      8916,
      8917,
      8919,
      9171,
      9170,
      8912
    ],
    [
      10441,
      10442,
      10443,
      9212,
      9211,
      10444,
      10445
    ],
    [
      7548,
      7547,
      7550,
      10446,
      10447,
      10448
    ],
    [
      10449,
      10450,
      10446,
      7550,
      7554,
      9214
    ],
    [
      10449,
      9214,
      9213,
      9216,
      10451,
      10452
    ],
    [
      10453,
      10454,
      10451,
      9216,
      9215,
      9218
    ],
    [
      10453,
      9218,
      9217,
      9220,
      10455,
      10456
    ],
    [
      10457,
      10455,
      9220,
      9219,
      9222,
      10458
    ],
    [
      10458,
      9222,
      9221,
      9224,
      10459,
      10460
    ],
    [
      9223,
      9226,
      10461,
      10462,
      10459,
      9224
    ],
    [
      10463,
      10464,
      10461,
      9226,
      9225,
      9228
    ],
    [
      9227,
      9230,
      10465,
      10466,
      10463,
      9228
    ],
    [
      9229,
      9232,
      10467,
      10468,
      10465,
      9230
    ],
    [
      10469,
      10467,
      9232,
      9231,
      9234,
      10470
    ],
    [
      9233,
      9236,
      10471,
      10472,
      10470,
      9234
    ],
    [
      9236,
      9235,
      9238,
      10473,
      10474,
      10471
    ],
    [
      9238,
      9237,
      9240,
      10475,
      10476,
      10473
    ],
    [
      10475,
      9240,
      9239,
      9242,
      10477,
      10478
    ],
    [
      9242,
      9241,
      9244,
      10479,
      10480,
      10477
    ],
    [
      9243,
      9246,
      10481,
      10482,
      10479,
      9244
    ],
    [
      9249,
      10483,
      10484,
      10481,
      9246,
      9245
    ],
    [
      9249,
      9248,
      10485,
      10486,
      10487,
      10483
    ],
    [
      10485,
      10488,
      10489,
      10490,
      10491,
      10486
    ],
    [
      10492,
      10493,
      10490,
      10489,
      10494,
      10495
    ],
    [
      10492,
      10495,
      10496,
      10497,
      10498,
      10499
    ],
    [
      10497,
      10500,
      10501,
      10502,
      10503,
      10498
    ],
    [
      10504,
      10505,
      10502,
      10501,
      10506,
      10507
    ],
    [
      10504,
      10507,
      10508,
      10509,
      10510,
      10511
    ],
    [
      10512,
      10510,
      10509,
      10513,
      10514,
      10515,
      10516
    ],
    [
      10517,
      10518,
      10515,
      10514,
      10519,
      10520
    ],
    [
      10517,
      10520,
      10521,
      10522,
      10523
    ],
    [
      10524,
      10525,
      10526,
      10527,
      10528,
      10523,
      10522
    ],
    [
      10529,
      10530,
      10531,
      10526,
      10525,
      10532
    ],
    [
      10529,
      10533,
      10534,
      10535,
      10536,
      10530
    ],
    [
      10537,
      10538,
      10535,
      10534,
      10539
    ],
    [
      10537,
      10540,
      10541,
      10542,
      10543,
      10544,
      10538
    ],
    [
      10545,
      10542,
      10541,
      10546,
      10547
    ],
    [
      10545,
      10547,
      10548,
      10549,
      10550,
      10551,
      10552
    ],
    [
      10553,
      10554,
      10550,
      10549,
      10555
    ],
    [
      10553,
      10555,
      10556,
      10557,
      10558
    ],
    [
      10558,
      10557,
      10559,
      10560,
      10561,
      10562
    ],
    [
      10563,
      10561,
      10560,
      10564,
      10565,
      10566
    ],
    [
      10567,
      10568,
      10569,
      10563,
      10566,
      10570
    ],
    [
      10567,
      10571,
      10572,
      10573,
      10568
    ],
    [
      10574,
      10575,
      10573,
      10572,
      10576
    ],
    [
      10574,
      10577,
      10578,
      10575
    ],
    [
      10579,
      10580,
      10578,
      10577
    ],
    [
      5812,
      5811,
      10580,
      10579,
      10581,
      10582,
      10583,
      10584,
      5816
    ],
    [
      9248,
      9247,
      9251,
      10488,
      10485
    ],
    [
      9250,
      9253,
      10494,
      10489,
      10488,
      9251
    ],
    [
      10495,
      10494,
      9253,
      9252,
      9255,
      10496
    ],
    [
      9254,
      9257,
      10500,
      10497,
      10496,
      9255
    ],
    [
      10506,
      10501,
      10500,
      9257,
      9256,
      9258
    ],
    [
      10506,
      9258,
      9259,
      9261,
      10508,
      10507
    ],
    [
      10509,
      10508,
      9261,
      9260,
      9263,
      10513
    ],
    [
      10514,
      10513,
      9263,
      9262,
      9265,
      10519
    ],
    [
      9264,
      9267,
      10521,
      10520,
      10519,
      9265
    ],
    [
      9266,
      9269,
      10524,
      10522,
      10521,
      9267
    ],
    [
      9269,
      9268,
      9271,
      10532,
      10525,
      10524
    ],
    [
      9272,
      10533,
      10529,
      10532,
      9271,
      9270
    ],
    [
      9272,
      9274,
      9276,
      10539,
      10534,
      10533
    ],
    [
      10537,
      10539,
      9276,
      9275,
      9280,
      10540
    ],
    [
      10541,
      10540,
      9280,
      9279,
      10585,
      10546
    ],
    [
      10546,
      10585,
      10586,
      10548,
      10547
    ],
    [
      10587,
      10588,
      10556,
      10555,
      10549,
      10548,
      10586
    ],
    [
      10588,
      10589,
      10590,
      10559,
      10557,
      10556
    ],
    [
      10591,
      10564,
      10560,
      10559,
      10590,
      10592
    ],
    [
      10591,
      10593,
      10594,
      10565,
      10564
    ],
    [
      10566,
      10565,
      10594,
      10595,
      10596,
      10570
    ],
    [
      10597,
      10571,
      10567,
      10570,
      10596,
      10598
    ],
    [
      10599,
      10600,
      10601,
      10576,
      10572,
      10571,
      10597
    ],
    [
      10602,
      10581,
      10579,
      10577,
      10574,
      10576,
      10601,
      10603,
      10604
    ],
    [
      10602,
      10605,
      10606,
      10607,
      10582,
      10581
    ],
    [
      10608,
      10609,
      10583,
      10582,
      10607
    ],
    [
      10610,
      10584,
      10583,
      10609
    ],
    [
      10610,
      10611,
      10612,
      10613,
      10614,
      5821,
      5817,
      5816,
      10584
    ],
    [
      9278,
      9285,
      9289,
      10587,
      10586,
      10585,
      9279
    ],
    [
      10587,
      9289,
      9288,
      9294,
      10589,
      10588
    ],
    [
      10590,
      10589,
      9294,
      9293,
      10592
    ],
    [
      10591,
      10592,
      9293,
      9292,
      9298,
      10593
    ],
    [
      9299,
      10595,
      10594,
      10593,
      9298,
      9297
    ],
    [
      9305,
      10598,
      10596,
      10595,
      9299,
      9301
    ],
    [
      9304,
      10599,
      10597,
      10598,
      9305
    ],
    [
      9303,
      9314,
      10600,
      10599,
      9304
    ],
    [
      9314,
      9313,
      10603,
      10601,
      10600
    ],
    [
      10604,
      10603,
      9313,
      9312,
      10615
    ],
    [
      10602,
      10604,
      10615,
      10616,
      10617,
      10605
    ],
    [
      10618,
      10606,
      10605,
      10617,
      10619,
      10620
    ],
    [
      10618,
      10621,
      10622,
      10608,
      10607,
      10606
    ],
    [
      10610,
      10609,
      10608,
      10622,
      10623,
      10624,
      10611
    ],
    [
      9321,
      10616,
      10615,
      9312,
      9311,
      9317
    ],
    [
      9321,
      9320,
      9325,
      10619,
      10617,
      10616
    ],
    [
      9326,
      10620,
      10619,
      9325,
      9324
    ],
    [
      9326,
      9329,
      9332,
      10621,
      10618,
      10620
    ],
    [
      9337,
      9341,
      10623,
      10622,
      10621,
      9332,
      9331
    ],
    [
      9342,
      10624,
      10623,
      9341,
      9340
    ],
    [
      9342,
      9346,
      10612,
      10611,
      10624
    ],
    [
      9346,
      9345,
      9348,
      10613,
      10612
    ],
    [
      9347,
      9353,
      10614,
      10613,
      9348
    ],
    [
      9358,
      5822,
      5821,
      10614,
      9353,
      9352
    ],
    [
      9362,
      5823,
      5822,
      9358,
      9357
    ],
    [
      9362,
      9361,
      9365,
      9368,
      5819,
      5823
    ],
    [
      10625,
      10626,
      10627,
      9377,
      9376,
      10628
    ],
    [
      10629,
      9378,
      7559,
      7558,
      10627,
      10626
    ],
    [
      10629,
      10630,
      10631,
      9380,
      9379,
      9378
    ],
    [
      9380,
      10631,
      10632,
      10633,
      9382,
      9381
    ],
    [
      9384,
      9383,
      9382,
      10633,
      10634,
      10635
    ],
    [
      10636,
      9386,
      9385,
      9384,
      10635,
      10637
    ],
    [
      10636,
      10638,
      10639,
      9388,
      9387,
      9386
    ],
    [
      10640,
      10641,
      9390,
      9389,
      9388,
      10639
    ],
    [
      10641,
      10642,
      10643,
      9392,
      9391,
      9390
    ],
    [
      10644,
      9394,
      9393,
      9392,
      10643,
      10645
    ],
    [
      10644,
      10646,
      10647,
      9396,
      9395,
      9394
    ],
    [
      9398,
      9397,
      9396,
      10647,
      10648,
      10649
    ],
    [
      9398,
      10649,
      10650,
      10651,
      9400,
      9399
    ],
    [
      10652,
      10653,
      9402,
      9401,
      9400,
      10651
    ],
    [
      10654,
      10655,
      9405,
      9403,
      9402,
      10653
    ],
    [
      10656,
      10657,
      9407,
      9404,
      9405,
      10655
    ],
    [
      9406,
      9407,
      10657,
      10658,
      9408
    ],
    [
      9410,
      9409,
      9408,
      10658,
      10659,
      10660,
      9412
    ],
    [
      9411,
      9412,
      10660,
      10661,
      10662,
      9413
    ],
    [
      10663,
      10664,
      9415,
      9414,
      9413,
      10662
    ],
    [
      10665,
      9417,
      9416,
      9415,
      10664
    ],
    [
      10666,
      9420,
      9419,
      9418,
      9417,
      10665,
      10667
    ],
    [
      10666,
      10668,
      9423,
      9422,
      9421,
      9420
    ],
    [
      9423,
      10668,
      10669,
      9426,
      9425,
      9424
    ],
    [
      10670,
      10671,
      9427,
      9426,
      10669,
      10672
    ],
    [
      10673,
      10671,
      10670,
      10674,
      10675
    ],
    [
      10676,
      10675,
      10674,
      10677,
      10678,
      10679
    ],
    [
      10680,
      10679,
      10678,
      10681,
      10682,
      10683
    ],
    [
      10684,
      10682,
      10681,
      10685,
      10686,
      10687
    ],
    [
      10688,
      10689,
      10690,
      10687,
      10686
    ],
    [
      10688,
      10691,
      10692,
      10693,
      10694,
      10689
    ],
    [
      10695,
      10693,
      10692,
      10696,
      10697,
      10698
    ],
    [
      10697,
      10699,
      10700,
      10701,
      10702,
      10698
    ],
    [
      10700,
      10703,
      10704,
      10705,
      10701
    ],
    [
      10704,
      10703,
      10706,
      10707,
      10708,
      10709
    ],
    [
      10707,
      10710,
      10711,
      10712,
      10713,
      10708
    ],
    [
      10714,
      10715,
      10716,
      10712,
      10711,
      10717
    ],
    [
      10718,
      10719,
      10720,
      10721,
      10722,
      10715,
      10714
    ],
    [
      10719,
      10723,
      10724,
      10725,
      10726,
      10720
    ],
    [
      10727,
      10728,
      10729,
      10725,
      10724
    ],
    [
      10730,
      10731,
      10732,
      10733,
      10728,
      10727
    ],
    [
      10734,
      10735,
      10732,
      10731,
      10736
    ],
    [
      10734,
      10736,
      10737,
      10738,
      10739,
      10740
    ],
    [
      10741,
      10742,
      10743,
      10739,
      10738,
      10744
    ],
    [
      10673,
      9430,
      9429,
      9428,
      9427,
      10671
    ],
    [
      10673,
      10675,
      10676,
      9433,
      9431,
      9430
    ],
    [
      9432,
      9433,
      10676,
      10679,
      10680,
      9434
    ],
    [
      9435,
      9434,
      10680,
      10683,
      9436
    ],
    [
      10684,
      9439,
      9437,
      9436,
      10683,
      10682
    ],
    [
      9438,
      9439,
      10684,
      10687,
      10690,
      9440
    ],
    [
      9441,
      9440,
      10690,
      10689,
      10694,
      9442
    ],
    [
      10695,
      9446,
      9444,
      9443,
      9442,
      10694,
      10693
    ],
    [
      10695,
      10698,
      10702,
      9447,
      9445,
      9446
    ],
    [
      9449,
      9448,
      9447,
      10702,
      10701,
      10705
    ],
    [
      10704,
      10709,
      9452,
      9450,
      9449,
      10705
    ],
    [
      9451,
      9452,
      10709,
      10708,
      10713,
      9453
    ],
    [
      9455,
      9454,
      9453,
      10713,
      10712,
      10716
    ],
    [
      9457,
      9456,
      9455,
      10716,
      10715,
      10722
    ],
    [
      9457,
      10722,
      10721,
      9460,
      9458
    ],
    [
      9459,
      9460,
      10721,
      10720,
      10726,
      9461
    ],
    [
      9462,
      9461,
      10726,
      10725,
      10729,
      9463
    ],
    [
      9465,
      9464,
      9463,
      10729,
      10728,
      10733
    ],
    [
      9465,
      10733,
      10732,
      10735,
      9467,
      9466
    ],
    [
      10734,
      10740,
      9469,
      9468,
      9467,
      10735
    ],
    [
      9471,
      9470,
      9469,
      10740,
      10739,
      10743
    ],
    [
      9473,
      9472,
      9471,
      10743,
      10742,
      10745,
      10746,
      10747
    ],
    [
      10748,
      9521,
      9520,
      9519,
      9618,
      10749
    ],
    [
      9523,
      9522,
      9521,
      10748,
      10750
    ],
    [
      9523,
      10750,
      10751,
      9525,
      9524
    ],
    [
      9525,
      10751,
      10752,
      10753,
      9527,
      9526
    ],
    [
      10753,
      10754,
      10755,
      9530,
      9529,
      9528,
      9527
    ],
    [
      9533,
      9532,
      9531,
      9530,
      10755,
      10756,
      10757
    ],
    [
      9534,
      9533,
      10757,
      10758,
      10759
    ],
    [
      9535,
      9534,
      10759,
      10760,
      10761,
      9536
    ],
    [
      10762,
      9538,
      9537,
      9536,
      10761,
      10763
    ],
    [
      10762,
      10764,
      10765,
      9541,
      9540,
      9539,
      9538
    ],
    [
      10765,
      10766,
      10767,
      9543,
      9542,
      9541
    ],
    [
      10768,
      10769,
      9545,
      9544,
      9543,
      10767
    ],
    [
      9546,
      9545,
      10769,
      10770,
      10771,
      9547
    ],
    [
      9547,
      10771,
      10772,
      10773,
      9549,
      9548
    ],
    [
      10774,
      9551,
      9550,
      9549,
      10773,
      10775
    ],
    [
      10776,
      10777,
      9553,
      9552,
      9551,
      10774
    ],
    [
      10778,
      10779,
      9555,
      9554,
      9553,
      10777
    ],
    [
      10780,
      9557,
      9556,
      9555,
      10779,
      10781
    ],
    [
      10780,
      10782,
      9559,
      9558,
      9557
    ],
    [
      10783,
      10784,
      9562,
      9560,
      9559,
      10782
    ],
    [
      9561,
      9562,
      10784,
      10785,
      10326,
      9563
    ],
    [
      10786,
      9565,
      9564,
      10787,
      10788,
      10789
    ],
    [
      10790,
      9567,
      9566,
      9565,
      10786,
      10791
    ],
    [
      10790,
      10792,
      10793,
      9570,
      9568,
      9567
    ],
    [
      9569,
      9570,
      10793,
      10794,
      10795,
      9571
    ],
    [
      10796,
      9573,
      9572,
      9571,
      10795,
      10797
    ],
    [
      9574,
      9573,
      10796,
      10798,
      10799,
      9575
    ],
    [
      9577,
      9576,
      9575,
      10799,
      10800,
      10801
    ],
    [
      9577,
      10801,
      10802,
      9579,
      9578
    ],
    [
      9580,
      9579,
      10802,
      10803,
      10804,
      9583,
      9581
    ],
    [
      9582,
      9583,
      10804,
      10805,
      10806,
      9584
    ],
    [
      9586,
      9585,
      9584,
      10806,
      10807,
      10808,
      10809
    ],
    [
      9587,
      9586,
      10809,
      10810
    ],
    [
      10811,
      10812,
      10813,
      9589,
      9588,
      9587,
      10810
    ],
    [
      10814,
      10813,
      10812,
      10815,
      10816,
      10817
    ],
    [
      10818,
      10819,
      10817,
      10816,
      10820,
      10821
    ],
    [
      10818,
      10822,
      10823,
      10824,
      10825,
      10819
    ],
    [
      10824,
      10823,
      10826,
      10827,
      10828,
      10829
    ],
    [
      10827,
      10830,
      10831,
      10832,
      10828
    ],
    [
      10833,
      10834,
      10835,
      10831,
      10830,
      10836
    ],
    [
      10833,
      10837,
      10838,
      10839,
      10840,
      10834
    ],
    [
      10841,
      10842,
      10839,
      10838,
      10843,
      10844
    ],
    [
      10841,
      10844,
      10845,
      10846,
      10847,
      10848,
      10849,
      10850
    ],
    [
      10851,
      10852,
      10847,
      10846,
      10853,
      10854,
      10855
    ],
    [
      10748,
      10749,
      10854,
      10853,
      10856,
      10857,
      10752,
      10751,
      10750
    ],
    [
      10858,
      10754,
      10753,
      10752,
      10857,
      10859
    ],
    [
      10858,
      10860,
      10861,
      10756,
      10755,
      10754
    ],
    [
      10756,
      10861,
      10862,
      10758,
      10757
    ],
    [
      10863,
      10864,
      10760,
      10759,
      10758,
      10862
    ],
    [
      10763,
      10761,
      10760,
      10864,
      10865,
      10866
    ],
    [
      10762,
      10763,
      10866,
      10867,
      10868,
      10764
    ],
    [
      10869,
      10870,
      10766,
      10765,
      10764,
      10868
    ],
    [
      10768,
      10767,
      10766,
      10870,
      10871,
      10872
    ],
    [
      10768,
      10872,
      10873,
      10874,
      10770,
      10769
    ],
    [
      10875,
      10772,
      10771,
      10770,
      10874,
      10876
    ],
    [
      10875,
      10877,
      10775,
      10773,
      10772
    ],
    [
      10776,
      10774,
      10775,
      10877,
      10878,
      10879
    ],
    [
      10880,
      10778,
      10777,
      10776,
      10879,
      10881
    ],
    [
      10880,
      10882,
      10883,
      10781,
      10779,
      10778
    ],
    [
      10780,
      10781,
      10883,
      10884,
      10885,
      10783,
      10782
    ],
    [
      10783,
      10885,
      10886,
      10887,
      10785,
      10784
    ],
    [
      10326,
      10785,
      10887,
      10888,
      10327
    ],
    [
      9590,
      9589,
      10813,
      10814,
      9591
    ],
    [
      9591,
      10814,
      10817,
      10819,
      10825,
      9593,
      9592
    ],
    [
      10824,
      10829,
      9595,
      9594,
      9593,
      10825
    ],
    [
      9595,
      10829,
      10828,
      10832,
      9597,
      9596
    ],
    [
      9597,
      10832,
      10831,
      10835,
      9599,
      9598
    ],
    [
      9600,
      9599,
      10835,
      10834,
      10840,
      9602
    ],
    [
      9601,
      9602,
      10840,
      10839,
      10842,
      9603
    ],
    [
      10841,
      10850,
      9606,
      9604,
      9603,
      10842
    ],
    [
      9605,
      9606,
      10850,
      10849,
      9607
    ],
    [
      9609,
      9608,
      9607,
      10849,
      10848
    ],
    [
      9609,
      10848,
      10847,
      10852,
      9611,
      9610
    ],
    [
      10851,
      9614,
      9613,
      9612,
      9611,
      10852
    ],
    [
      10851,
      10855,
      9616,
      9615,
      9614
    ],
    [
      10749,
      9618,
      9617,
      9616,
      10855,
      10854
    ],
    [
      499,
      1624,
      1623,
      9622,
      9623,
      10048,
      500
    ],
    [
      10889,
      10890,
      10049,
      10048,
      9623,
      9624,
      9625,
      9627
    ],
    [
      9628,
      10891,
      10889,
      9627,
      9626
    ],
    [
      9628,
      9629,
      9631,
      10892,
      10891
    ],
    [
      10893,
      10894,
      10892,
      9631,
      9630,
      9633
    ],
    [
      10895,
      10893,
      9633,
      9632,
      9635,
      10896
    ],
    [
      9634,
      9637,
      10897,
      10898,
      10896,
      9635
    ],
    [
      10899,
      10900,
      10897,
      9637,
      9636,
      9639
    ],
    [
      10899,
      9639,
      9638,
      9640,
      10901,
      10902
    ],
    [
      9640,
      9641,
      9643,
      10903,
      10904,
      10901
    ],
    [
      10905,
      10906,
      10903,
      9643,
      9642,
      9645
    ],
    [
      10905,
      9645,
      9644,
      9646,
      2059,
      1975,
      1974
    ],
    [
      10907,
      10908,
      9647,
      8558,
      8557,
      9958
    ],
    [
      9648,
      9647,
      10908,
      10909,
      9650,
      9649
    ],
    [
      9652,
      9651,
      9650,
      10909,
      10910,
      10911
    ],
    [
      9652,
      10911,
      10912,
      10913,
      9655,
      9653
    ],
    [
      10914,
      10915,
      9657,
      9654,
      9655,
      10913
    ],
    [
      10916,
      9658,
      9656,
      9657,
      10915,
      10917
    ],
    [
      9660,
      9659,
      9658,
      10916,
      10918,
      10919
    ],
    [
      9660,
      10919,
      10920,
      10921,
      9664,
      9662,
      9661
    ],
    [
      10922,
      9665,
      9663,
      9664,
      10921,
      10923
    ],
    [
      10922,
      10924,
      10925,
      9667,
      9666,
      9665
    ],
    [
      9668,
      9667,
      10925,
      10926,
      9669
    ],
    [
      10927,
      9672,
      9670,
      9669,
      10926,
      10928
    ],
    [
      9671,
      9672,
      10927,
      10929,
      10930,
      9673
    ],
    [
      9673,
      10930,
      10931,
      10932,
      9676,
      9675,
      9674
    ],
    [
      10933,
      9680,
      9678,
      9677,
      9676,
      10932,
      10934
    ],
    [
      10933,
      10935,
      10936,
      9681,
      9679,
      9680
    ],
    [
      9988,
      9684,
      9683,
      9682,
      9681,
      10936
    ],
    [
      9687,
      10937,
      9745,
      8182,
      8181,
      8185
    ],
    [
      10938,
      10937,
      9687,
      9686,
      9691,
      10939
    ],
    [
      9698,
      10940,
      9694,
      9693,
      9695
    ],
    [
      9701,
      10941,
      10942,
      10940,
      9698,
      9697,
      9702
    ],
    [
      9696,
      8197,
      8196,
      8198,
      8200,
      9702,
      9697
    ],
    [
      10943,
      10944,
      9705,
      9704
    ],
    [
      10938,
      10945,
      8213,
      6373,
      6372,
      6403,
      9745,
      10937
    ],
    [
      10946,
      8343,
      8342,
      9790,
      9712,
      9711,
      9716
    ],
    [
      9717,
      10947,
      10948,
      10946,
      9716,
      9715
    ],
    [
      9717,
      9720,
      9723,
      10949,
      10950,
      10947
    ],
    [
      9725,
      10951,
      10952,
      10949,
      9723,
      9722,
      9726
    ],
    [
      9725,
      9729,
      9734,
      9733,
      10953,
      10954,
      10951
    ],
    [
      10953,
      9733,
      9732,
      9740,
      9739,
      10955,
      10956
    ],
    [
      9738,
      9743,
      10957,
      10958,
      10955,
      9739
    ],
    [
      9742,
      10959,
      10960,
      10961,
      10957,
      9743
    ],
    [
      10959,
      10962,
      10963,
      10964,
      10965,
      10960
    ],
    [
      10966,
      10967,
      10968,
      10969,
      10970
    ],
    [
      10971,
      10972,
      10973,
      10969,
      10968,
      10974
    ],
    [
      10975,
      10976,
      10977,
      10972,
      10971
    ],
    [
      10978,
      10979,
      10980,
      10981,
      10982,
      10983,
      10984,
      10985
    ],
    [
      10986,
      10987,
      10982,
      10981
    ],
    [
      10988,
      10986,
      10981,
      10980,
      10989,
      10990,
      10991
    ],
    [
      10992,
      10989,
      10980,
      10979,
      10993
    ],
    [
      10994,
      10995,
      10996,
      10997,
      10998,
      10993,
      10979,
      10978,
      10999
    ],
    [
      11000,
      11001,
      11002,
      11003,
      11004,
      11005
    ],
    [
      11000,
      11006,
      11007,
      11008,
      11009,
      11010,
      11001
    ],
    [
      11011,
      11012,
      11013,
      11010,
      11009,
      11014
    ],
    [
      11015,
      11016,
      11002,
      11001,
      11010,
      11013,
      11017
    ],
    [
      11018,
      11019,
      11016,
      11015,
      11020,
      11021,
      11022
    ],
    [
      11023,
      11024,
      11025,
      11026,
      11027,
      11028,
      11029
    ],
    [
      11030,
      11026,
      11025,
      11031
    ],
    [
      9709,
      9854,
      9853,
      9857,
      9858,
      9713,
      9710
    ],
    [
      9718,
      9714,
      9713,
      9858,
      9861,
      9863
    ],
    [
      9718,
      9863,
      9862,
      9869,
      9724,
      9719
    ],
    [
      9868,
      9871,
      11032,
      9721,
      9724,
      9869
    ],
    [
      9870,
      9877,
      11033,
      9728,
      9727,
      11032,
      9871
    ],
    [
      9877,
      9876,
      9880,
      9735,
      9741,
      9731,
      9730,
      11033
    ],
    [
      6587,
      6588,
      4884,
      4883,
      8279,
      6582,
      6581
    ],
    [
      6582,
      8279,
      8278,
      8226,
      8224,
      6583
    ],
    [
      8356,
      8359,
      9750,
      9897,
      8361,
      8360
    ],
    [
      9894,
      9897,
      9750,
      9749,
      9752,
      9920
    ],
    [
      9753,
      9924,
      9921,
      9920,
      9752,
      9751
    ],
    [
      9753,
      9754,
      9755,
      9756,
      9945,
      9925,
      9924
    ],
    [
      8260,
      11034,
      11035,
      9946,
      9945,
      9756,
      8261
    ],
    [
      9760,
      8242,
      8241,
      9748,
      9758,
      9757,
      9759
    ],
    [
      9760,
      9761,
      8246,
      8245,
      8243,
      8242
    ],
    [
      9767,
      8299,
      8298,
      9766,
      9811,
      9815
    ],
    [
      9769,
      9768,
      9767,
      9815,
      9814,
      9817
    ],
    [
      9772,
      11036,
      11037,
      9773
    ],
    [
      9773,
      11037,
      11038,
      11039,
      9774
    ],
    [
      11040,
      11041,
      8302,
      8301,
      9774,
      11039,
      11042
    ],
    [
      11040,
      11043,
      11044,
      11045,
      11041
    ],
    [
      11046,
      11045,
      11044,
      11047,
      11048,
      11049,
      11050
    ],
    [
      11051,
      11052,
      11053,
      11049,
      11048,
      11054
    ],
    [
      11055,
      11052,
      11051,
      11056,
      11057
    ],
    [
      11057,
      11056,
      11058,
      11059,
      11060,
      11061,
      11062
    ],
    [
      11063,
      11064,
      11060,
      11059,
      11065,
      11066
    ],
    [
      9706,
      11067,
      11063,
      11066,
      9707
    ],
    [
      11046,
      8306,
      8303,
      8302,
      11041,
      11045
    ],
    [
      8307,
      8306,
      11046,
      11050,
      9775
    ],
    [
      9776,
      9775,
      11050,
      11049,
      11053
    ],
    [
      11055,
      9779,
      9777,
      9776,
      11053,
      11052
    ],
    [
      9778,
      9779,
      11055,
      11057,
      11062,
      9782,
      9780
    ],
    [
      9781,
      9782,
      11062,
      11061,
      9784
    ],
    [
      9783,
      9784,
      11061,
      11060,
      11064,
      9785
    ],
    [
      9787,
      9786,
      9785,
      11064,
      11063,
      11067,
      9788
    ],
    [
      9706,
      9712,
      9790,
      9789,
      9788,
      11067
    ],
    [
      10228,
      9792,
      9791,
      2063,
      2062,
      10227
    ],
    [
      9793,
      9792,
      10228,
      10229,
      10230,
      9795
    ],
    [
      9794,
      9795,
      10230,
      10231,
      10233,
      9796
    ],
    [
      9797,
      9796,
      10233,
      10232,
      10235,
      9798
    ],
    [
      9799,
      9798,
      10235,
      10234,
      10237,
      9800
    ],
    [
      10238,
      9802,
      9801,
      9800,
      10237,
      10236
    ],
    [
      10238,
      10239,
      10241,
      9804,
      9803,
      9802
    ],
    [
      9805,
      9804,
      10241,
      10240,
      10243,
      11068
    ],
    [
      11069,
      11070,
      11071,
      11068,
      10243,
      10242,
      10245
    ],
    [
      11069,
      11072,
      11073,
      11070
    ],
    [
      11074,
      11075,
      11076,
      11077,
      11078,
      11073,
      11072
    ],
    [
      11079,
      11076,
      11075,
      11080,
      11081,
      11082
    ],
    [
      11083,
      11082,
      11081,
      11084,
      11085,
      11086
    ],
    [
      11087,
      11088,
      11089,
      11086,
      11085,
      11090
    ],
    [
      11087,
      11091,
      11092,
      11093,
      11094,
      11088
    ],
    [
      11095,
      11093,
      11092,
      11096,
      11097,
      11098
    ],
    [
      11099,
      11098,
      11097,
      11100,
      11101
    ],
    [
      11102,
      11101,
      11100,
      11103,
      11104,
      11105,
      11106
    ],
    [
      11107,
      11105,
      11104,
      11108,
      11109,
      11110
    ],
    [
      11111,
      11110,
      11109,
      11112,
      11113,
      11114
    ],
    [
      11115,
      11116,
      11117,
      11118,
      11114,
      11113
    ],
    [
      11119,
      11117,
      11116,
      11120,
      11121,
      11122
    ],
    [
      11123,
      11122,
      11121,
      11124,
      11125,
      11126
    ],
    [
      11127,
      11126,
      11125,
      11128,
      11129,
      11130
    ],
    [
      11131,
      11132,
      11130,
      11129,
      11133,
      11134
    ],
    [
      11131,
      11134,
      11135,
      11136,
      11137
    ],
    [
      10277,
      11138,
      11139,
      11140,
      11136,
      11135,
      10278
    ],
    [
      11141,
      11142,
      11143,
      11144,
      11145
    ],
    [
      11146,
      11147,
      9890,
      9885,
      9884,
      11144,
      11143,
      10204,
      10201,
      10200
    ],
    [
      11146,
      11148,
      11149,
      11147
    ],
    [
      11141,
      11145,
      9883,
      9888,
      9881,
      9882
    ],
    [
      9808,
      9807,
      9806,
      9805,
      11068,
      11071
    ],
    [
      9812,
      9809,
      9808,
      11071,
      11070,
      11073,
      11078
    ],
    [
      9810,
      9812,
      11078,
      11077,
      9816
    ],
    [
      9813,
      9816,
      11077,
      11076,
      11079
    ],
    [
      9813,
      11079,
      11082,
      11083,
      9818,
      9817,
      9814
    ],
    [
      11083,
      11086,
      11089,
      9819,
      9818
    ],
    [
      9820,
      9819,
      11089,
      11088,
      11094,
      9824
    ],
    [
      9822,
      9824,
      11094,
      11093,
      11095,
      9825
    ],
    [
      11095,
      11098,
      11099,
      9831,
      9826,
      9825
    ],
    [
      11102,
      9835,
      9832,
      9828,
      9831,
      11099,
      11101
    ],
    [
      11102,
      11106,
      9841,
      9836,
      9835
    ],
    [
      11107,
      9848,
      9845,
      9842,
      9841,
      11106,
      11105
    ],
    [
      11107,
      11110,
      11111,
      9851,
      9849,
      9848
    ],
    [
      9855,
      9852,
      9851,
      11111,
      11114,
      11118
    ],
    [
      11119,
      9859,
      9856,
      9855,
      11118,
      11117
    ],
    [
      11123,
      9864,
      9860,
      9859,
      11119,
      11122
    ],
    [
      11127,
      9866,
      9865,
      9864,
      11123,
      11126
    ],
    [
      11127,
      11130,
      11132,
      9872,
      9867,
      9866
    ],
    [
      9873,
      9872,
      11132,
      11131,
      11137,
      9874
    ],
    [
      9874,
      11137,
      11136,
      11140,
      9878,
      9875
    ],
    [
      11141,
      9882,
      9879,
      9878,
      11140,
      11139,
      11142
    ],
    [
      11144,
      9884,
      9883,
      11145
    ],
    [
      9771,
      9770,
      9821,
      9823,
      9827,
      9830,
      11036,
      9772
    ],
    [
      9830,
      9829,
      9834,
      11038,
      11037,
      11036
    ],
    [
      11039,
      11038,
      9834,
      9833,
      9838,
      11150,
      11042
    ],
    [
      11151,
      11150,
      9838,
      9837,
      9840
    ],
    [
      11152,
      11151,
      9840,
      9839,
      11153,
      11154
    ],
    [
      11155,
      11153,
      9839,
      9843,
      9844,
      11156
    ],
    [
      11157,
      11156,
      9844,
      9846,
      9847,
      11158,
      11159
    ],
    [
      9709,
      9708,
      11158,
      9847,
      9850,
      9854
    ],
    [
      11147,
      11149,
      11160,
      9891,
      9890
    ],
    [
      9919,
      9923,
      11161,
      11162,
      9902,
      9900,
      9899
    ],
    [
      9901,
      9902,
      11162,
      11163,
      9904
    ],
    [
      9906,
      11164,
      11165,
      8373,
      8372
    ],
    [
      11166,
      8374,
      8373,
      11165
    ],
    [
      11166,
      11167,
      11168,
      6705,
      6704,
      8375,
      8374
    ],
    [
      11169,
      11170,
      9905,
      9904,
      11163
    ],
    [
      9903,
      9905,
      11170,
      11171,
      11172,
      11164,
      9906
    ],
    [
      11166,
      11165,
      11164,
      11172,
      11173,
      11174,
      11167
    ],
    [
      9907,
      11175,
      11176,
      11177,
      9910,
      9909,
      9908
    ],
    [
      9912,
      9911,
      9910,
      11177,
      11178,
      9913
    ],
    [
      11179,
      9944,
      9914,
      9913,
      11178
    ],
    [
      9916,
      9915,
      11180,
      11181,
      9917
    ],
    [
      9918,
      9917,
      11181,
      11182,
      11183,
      11184
    ],
    [
      8393,
      8392,
      11185,
      11186,
      11187,
      8396
    ],
    [
      11188,
      11189,
      11190,
      11187,
      11186,
      11191
    ],
    [
      11180,
      9915,
      8397,
      8396,
      11187,
      11190
    ],
    [
      8408,
      9941,
      9942,
      9943,
      9944,
      11179,
      11192,
      8409
    ],
    [
      11161,
      9923,
      9922,
      9927,
      9930,
      11193
    ],
    [
      9929,
      11194,
      11195,
      11193,
      9930
    ],
    [
      9928,
      9948,
      9936,
      9935,
      11196,
      11194,
      9929
    ],
    [
      9952,
      9951,
      9950,
      11197,
      11198,
      11199
    ],
    [
      11199,
      11198,
      11200,
      11201,
      8389,
      8388,
      9955
    ],
    [
      9952,
      11199,
      9955,
      9954,
      9953
    ],
    [
      11202,
      11203,
      11204,
      10907,
      9958,
      9957
    ],
    [
      9956,
      9959,
      9961,
      11205,
      11202,
      9957
    ],
    [
      9963,
      11206,
      11207,
      11205,
      9961,
      9960
    ],
    [
      11208,
      11206,
      9963,
      9962,
      9964,
      9966
    ],
    [
      9965,
      9968,
      11209,
      11210,
      11208,
      9966
    ],
    [
      11209,
      9968,
      9967,
      9970,
      11211,
      11212
    ],
    [
      11213,
      11214,
      11211,
      9970,
      9969,
      9972
    ],
    [
      11213,
      9972,
      9971,
      9974,
      11215
    ],
    [
      11216,
      11217,
      11215,
      9974,
      9973,
      9975
    ],
    [
      11216,
      9975,
      8432,
      8431,
      8433,
      8436,
      11218
    ],
    [
      8435,
      9977,
      11219,
      11220,
      11218,
      8436
    ],
    [
      9976,
      9978,
      9980,
      11221,
      11222,
      11219,
      9977
    ],
    [
      9982,
      11223,
      11224,
      11221,
      9980,
      9979
    ],
    [
      9982,
      9981,
      9984,
      11225,
      11226,
      11223
    ],
    [
      9985,
      9987,
      11227,
      11225,
      9984,
      9983
    ],
    [
      11228,
      11227,
      9987,
      9986,
      9989
    ],
    [
      7449,
      9991,
      11229,
      11230,
      8897,
      7450
    ],
    [
      11231,
      11229,
      9991,
      9990,
      9993,
      11232
    ],
    [
      9995,
      11233,
      11234,
      11232,
      9993,
      9992
    ],
    [
      11235,
      11236,
      11233,
      9995,
      9994,
      9997
    ],
    [
      11235,
      9997,
      9996,
      9999,
      11237,
      11238
    ],
    [
      11237,
      9999,
      9998,
      10001,
      11239,
      11240
    ],
    [
      11239,
      10001,
      10000,
      10003,
      11241,
      11242
    ],
    [
      10002,
      10005,
      11243,
      11244,
      11241,
      10003
    ],
    [
      10007,
      11245,
      11246,
      11243,
      10005,
      10004
    ],
    [
      10007,
      10006,
      10009,
      11247,
      11248,
      11245
    ],
    [
      11247,
      10009,
      10008,
      10011,
      11249,
      11250
    ],
    [
      10010,
      10013,
      11251,
      11252,
      11249,
      10011
    ],
    [
      11253,
      11254,
      11251,
      10013,
      10012,
      10014
    ],
    [
      11253,
      10014,
      10015,
      10017,
      11255,
      11256
    ],
    [
      10017,
      10016,
      10019,
      11257,
      11258,
      11255
    ],
    [
      10018,
      10021,
      11259,
      11260,
      11257,
      10019
    ],
    [
      11261,
      11259,
      10021,
      10020,
      10023,
      11262
    ],
    [
      11263,
      11262,
      10023,
      10022,
      10025,
      11264
    ],
    [
      11264,
      10025,
      10024,
      10027,
      11265,
      11266
    ],
    [
      11267,
      11265,
      10027,
      10026,
      10029,
      11268
    ],
    [
      10029,
      10028,
      10032,
      11269,
      11270,
      11268
    ],
    [
      10032,
      10031,
      11271,
      11272,
      11269
    ],
    [
      10030,
      10034,
      11273,
      11274,
      11271,
      10031
    ],
    [
      10033,
      10036,
      11275,
      11276,
      11273,
      10034
    ],
    [
      11277,
      11278,
      11275,
      10036,
      10035,
      10038,
      11279
    ],
    [
      10037,
      10041,
      11280,
      11281,
      11279,
      10038
    ],
    [
      11282,
      11280,
      10041,
      10040,
      10045,
      11283
    ],
    [
      11283,
      10045,
      10044,
      10047,
      11284,
      11285
    ],
    [
      10047,
      10046,
      11286,
      11287,
      11284
    ],
    [
      11288,
      11289,
      11290,
      11286,
      10046,
      7023,
      7022
    ],
    [
      8570,
      10049,
      10890,
      11291,
      8571
    ],
    [
      8571,
      11291,
      11292,
      11293,
      8572
    ],
    [
      11294,
      8573,
      8572,
      11293,
      11295
    ],
    [
      11294,
      11296,
      11297,
      8574,
      8573
    ],
    [
      11298,
      3311,
      3310,
      8574,
      11297,
      11299
    ],
    [
      11298,
      11300,
      11301,
      3312,
      3311
    ],
    [
      11302,
      11303,
      3313,
      3312,
      11301
    ],
    [
      3314,
      3313,
      11303,
      11304
    ],
    [
      11305,
      11306,
      11307,
      11308,
      11309,
      11310,
      11311
    ],
    [
      11312,
      11313,
      11314,
      11311,
      11310,
      11315,
      11316
    ],
    [
      11315,
      11317,
      11318,
      11319,
      11320,
      11316
    ],
    [
      11321,
      11322,
      11318,
      11317,
      11323
    ],
    [
      11324,
      11325,
      11326,
      11322,
      11321,
      11327
    ],
    [
      11324,
      11328,
      11329,
      11325
    ],
    [
      8675,
      8674,
      11329,
      11328,
      11330
    ],
    [
      10053,
      10052,
      11331,
      11332
    ],
    [
      8680,
      8679,
      8678,
      10053,
      11332,
      11333,
      11334,
      10054
    ],
    [
      8595,
      8594,
      10055,
      10054,
      11334,
      11335,
      10056
    ],
    [
      8654,
      10079,
      10083,
      10087,
      8657,
      8655
    ],
    [
      10086,
      10091,
      7128,
      7127,
      8657,
      10087
    ],
    [
      10106,
      7129,
      7128,
      10091,
      10090,
      10094,
      10095,
      10105
    ],
    [
      10146,
      10149,
      10152,
      10099,
      10097,
      10096
    ],
    [
      10100,
      10099,
      10152,
      10151,
      10157
    ],
    [
      10100,
      10157,
      10156,
      11336,
      11337,
      11338,
      10101
    ],
    [
      10102,
      10101,
      11338,
      11339,
      11340,
      10103
    ],
    [
      11341,
      5534,
      5533,
      10107,
      10104,
      10103,
      11340
    ],
    [
      10114,
      10113,
      10112,
      11342,
      11343,
      11344
    ],
    [
      11327,
      11321,
      11323,
      11342,
      10112,
      10111
    ],
    [
      11324,
      11327,
      10111,
      8618,
      8617,
      11330,
      11328
    ],
    [
      8676,
      8675,
      11330,
      8617,
      8616,
      11331,
      10052
    ],
    [
      11345,
      11333,
      11332,
      11331,
      8616,
      8615,
      11346
    ],
    [
      11334,
      11333,
      11345,
      11335
    ],
    [
      11345,
      11346,
      10057,
      10056,
      11335
    ],
    [
      8614,
      10109,
      10059,
      10058,
      10057,
      11346,
      8615
    ],
    [
      10061,
      10060,
      10059,
      10109,
      10108,
      10110,
      10062
    ],
    [
      11315,
      11310,
      11309,
      11343,
      11342,
      11323,
      11317
    ],
    [
      11309,
      11308,
      11347,
      11344,
      11343
    ],
    [
      10114,
      11344,
      11347,
      11348,
      11349,
      10116,
      10115
    ],
    [
      11350,
      10118,
      10117,
      10116,
      11349,
      11351
    ],
    [
      10120,
      10119,
      10118,
      11350,
      11352,
      11353
    ],
    [
      10120,
      11353,
      11354,
      11355,
      10122,
      10121
    ],
    [
      10122,
      11355,
      11356,
      11357,
      10124,
      10123
    ],
    [
      10126,
      10125,
      10124,
      11357,
      11358,
      11359
    ],
    [
      10126,
      11359,
      11360,
      11361,
      10128,
      10127
    ],
    [
      10129,
      10128,
      11361,
      11362,
      11363,
      10130
    ],
    [
      10130,
      11363,
      11364,
      11365,
      10132,
      10131
    ],
    [
      10134,
      10133,
      10132,
      11365,
      11366,
      11367
    ],
    [
      10134,
      11367,
      11368,
      11369,
      10136,
      10135
    ],
    [
      11369,
      11370,
      11371,
      10139,
      10137,
      10136
    ],
    [
      10138,
      10139,
      11371,
      11372,
      11373,
      10140
    ],
    [
      10140,
      11373,
      11374,
      11375,
      10142,
      10141
    ],
    [
      11376,
      10144,
      10143,
      10142,
      11375,
      11377
    ],
    [
      11376,
      11378,
      10147,
      10145,
      10144
    ],
    [
      11379,
      11380,
      10153,
      10148,
      10147,
      11378
    ],
    [
      10150,
      10153,
      11380,
      11381,
      11382,
      10158,
      10154
    ],
    [
      11383,
      11384,
      10161,
      10159,
      10158,
      11382
    ],
    [
      11385,
      11386,
      10168,
      10162,
      10161,
      11384
    ],
    [
      10168,
      11386,
      11387,
      11388,
      11389,
      10169
    ],
    [
      11390,
      11391,
      11392,
      11393,
      11394,
      11395,
      11396
    ],
    [
      11396,
      11395,
      11397,
      11398,
      11399
    ],
    [
      11392,
      11400,
      11401,
      11402,
      11403,
      11393
    ],
    [
      11389,
      11399,
      11398,
      10171,
      10170,
      10169
    ],
    [
      11393,
      11403,
      10175,
      10179,
      11394
    ],
    [
      10180,
      11404,
      11405,
      11406,
      10189,
      10188,
      10181
    ],
    [
      10178,
      10185,
      11397,
      11395,
      11394,
      10179
    ],
    [
      10180,
      10183,
      11402,
      11401,
      11404
    ],
    [
      10172,
      10171,
      11398,
      11397,
      10185
    ],
    [
      10175,
      11403,
      11402,
      10183,
      10182,
      10191,
      10176
    ],
    [
      11407,
      11408,
      11409,
      11336,
      10156,
      10155,
      10160,
      10164
    ],
    [
      11410,
      11411,
      11409,
      11408,
      11412,
      11413
    ],
    [
      11410,
      11413,
      8725,
      8719,
      8718,
      11414,
      11415
    ],
    [
      11341,
      11414,
      8718,
      7184,
      5530,
      5534
    ],
    [
      11407,
      10164,
      10163,
      10167,
      11416
    ],
    [
      11417,
      11416,
      10167,
      10166,
      11418
    ],
    [
      10165,
      10174,
      11419,
      11418,
      10166
    ],
    [
      10190,
      10208,
      10212,
      11419,
      10174,
      10173,
      10184
    ],
    [
      11146,
      10200,
      10198,
      10197,
      11420,
      11148
    ],
    [
      10205,
      10203,
      10202,
      10204,
      11143,
      11142,
      11139,
      11138
    ],
    [
      11305,
      10217,
      10216,
      11421,
      11306
    ],
    [
      10219,
      10218,
      10217,
      11305,
      11311,
      11314
    ],
    [
      10219,
      11314,
      11313,
      10220
    ],
    [
      11312,
      10224,
      10222,
      10221,
      10220,
      11313
    ],
    [
      10223,
      10224,
      11312,
      11316,
      11320,
      10225
    ],
    [
      11320,
      11319,
      10226,
      10225
    ],
    [
      8671,
      8670,
      10226,
      11319,
      11318,
      11322,
      11326,
      10051,
      10050,
      8672
    ],
    [
      10051,
      11326,
      11325,
      11329,
      8674,
      8577,
      8576,
      8575
    ],
    [
      10279,
      11422,
      10787,
      9564,
      7889,
      7888,
      7887
    ],
    [
      11423,
      11422,
      10279,
      10281
    ],
    [
      11423,
      10281,
      10280,
      10283,
      11424,
      11425
    ],
    [
      10282,
      10284,
      10285,
      10287,
      11426,
      11427,
      11424,
      10283
    ],
    [
      8743,
      8745,
      8748,
      11428,
      11429,
      11426,
      10287,
      10286,
      10288,
      10289,
      8744
    ],
    [
      10296,
      11430,
      11431,
      10294,
      10293,
      10295
    ],
    [
      10296,
      10297,
      11432,
      11433,
      11430
    ],
    [
      8761,
      10300,
      11434,
      11435,
      11432,
      10297,
      8762
    ],
    [
      10299,
      11436,
      11434,
      10300
    ],
    [
      10299,
      10298,
      10302,
      11437,
      11438,
      11436
    ],
    [
      10302,
      10301,
      10303,
      10305,
      11439,
      11440,
      11437
    ],
    [
      10307,
      11441,
      11442,
      11443,
      11439,
      10305,
      10304
    ],
    [
      10306,
      10310,
      11444,
      11441,
      10307
    ],
    [
      11445,
      11446,
      11444,
      10310,
      10309
    ],
    [
      10312,
      11447,
      11448,
      11445,
      10309,
      10308,
      10311
    ],
    [
      10312,
      10313,
      10315,
      11449,
      11450,
      11447
    ],
    [
      10314,
      10317,
      11451,
      11452,
      11449,
      10315
    ],
    [
      11453,
      11451,
      10317,
      10316,
      10319,
      11454
    ],
    [
      11455,
      11454,
      10319,
      10318,
      10321,
      11456
    ],
    [
      11457,
      11456,
      10321,
      10320,
      10323
    ],
    [
      10325,
      10327,
      10888,
      11458,
      11457,
      10323,
      10322,
      10324
    ],
    [
      11459,
      11460,
      11461,
      10345,
      10344,
      10349,
      10351
    ],
    [
      11459,
      11462,
      11463,
      11460
    ],
    [
      8878,
      8873,
      8874,
      11463,
      11462,
      7488,
      7483,
      7482
    ],
    [
      10365,
      10370,
      11464,
      10364,
      10363,
      11465,
      11466
    ],
    [
      10365,
      11466,
      11467,
      11468,
      10366
    ],
    [
      10366,
      11468,
      11469,
      11470,
      11471,
      10367
    ],
    [
      11472,
      11473,
      11474,
      11475,
      11476,
      11477,
      11478
    ],
    [
      11479,
      11477,
      11476,
      11480,
      11481,
      11482
    ],
    [
      10380,
      10379,
      10378,
      11482,
      11481,
      11483,
      11484,
      10382
    ],
    [
      11485,
      11486,
      10373,
      10372,
      7428,
      5772,
      5771,
      11487
    ],
    [
      11486,
      11464,
      10370,
      10369,
      10374,
      10373
    ],
    [
      10368,
      10375,
      10374,
      10369
    ],
    [
      11488,
      10376,
      10375,
      10368,
      10367,
      11471,
      11489
    ],
    [
      11488,
      11489,
      11490,
      11472,
      11478
    ],
    [
      11488,
      11478,
      11477,
      11479,
      10377,
      10376
    ],
    [
      11479,
      11482,
      10378,
      10377
    ],
    [
      10336,
      11491,
      11492,
      8875,
      8876
    ],
    [
      11463,
      8874,
      8875,
      11492,
      11493,
      11494,
      11495,
      11461,
      11460
    ],
    [
      11461,
      11495,
      11496,
      11497,
      10346,
      10345
    ],
    [
      11498,
      11499,
      10342,
      10346,
      11497,
      11500
    ],
    [
      11501,
      10347,
      10343,
      10342,
      11499
    ],
    [
      11501,
      11502,
      11503,
      10353,
      10352,
      10348,
      10347
    ],
    [
      11504,
      11505,
      11506,
      11465,
      10363,
      10362
    ],
    [
      11507,
      11467,
      11466,
      11465,
      11506,
      11508,
      11509
    ],
    [
      11507,
      11510,
      11511,
      11469,
      11468,
      11467
    ],
    [
      11512,
      11513,
      11514,
      11470,
      11469,
      11511
    ],
    [
      11515,
      11514,
      11513,
      11516,
      11517
    ],
    [
      11515,
      11517,
      11518,
      11519,
      11520,
      11521
    ],
    [
      11520,
      11519,
      11522,
      11523,
      11524,
      11525
    ],
    [
      11526,
      11527,
      11528,
      11529,
      11524,
      11523
    ],
    [
      11527,
      11530,
      11531,
      11532,
      11528
    ],
    [
      11533,
      11534,
      11535,
      11536,
      11532,
      11531,
      11537
    ],
    [
      11538,
      11539,
      11535,
      11534,
      11540,
      11541,
      11542,
      11543
    ],
    [
      11538,
      11543,
      11544,
      11545
    ],
    [
      11546,
      11545,
      11544,
      11547,
      11548,
      11549
    ],
    [
      11550,
      11551,
      11549,
      11548,
      11552,
      11553
    ],
    [
      11550,
      11553,
      11554,
      11555,
      11556
    ],
    [
      11557,
      11558,
      11556,
      11555,
      11559,
      11560
    ],
    [
      11557,
      11560,
      11561,
      11562,
      11563
    ],
    [
      11564,
      11565,
      11566,
      11563,
      11562
    ],
    [
      10395,
      10394,
      11566,
      11565,
      11567,
      11568,
      11569
    ],
    [
      11570,
      11571,
      10396,
      10395,
      11569
    ],
    [
      11459,
      10351,
      10350,
      10357,
      11487,
      5771,
      5770,
      7488,
      11462
    ],
    [
      11485,
      11487,
      10357,
      10356,
      10358
    ],
    [
      11485,
      10358,
      10360,
      10364,
      11464,
      11486
    ],
    [
      10388,
      10386,
      10384,
      10383,
      11558,
      11557,
      11563,
      11566,
      10394,
      10391
    ],
    [
      10398,
      10397,
      10401,
      11572,
      11573,
      11574,
      11575
    ],
    [
      11572,
      10401,
      10400,
      10405,
      11576,
      11577
    ],
    [
      10399,
      10398,
      11575,
      11578,
      11579,
      11580
    ],
    [
      11580,
      11579,
      11581,
      11582,
      11583,
      11584
    ],
    [
      5364,
      7139,
      7138,
      5373,
      5367,
      5365
    ],
    [
      5364,
      5363,
      10407,
      7135,
      7134,
      7139
    ],
    [
      10406,
      10409,
      7136,
      7135,
      10407
    ],
    [
      11585,
      7130,
      7136,
      10409,
      10408,
      10411
    ],
    [
      11585,
      10411,
      10410,
      10413,
      11586,
      11587
    ],
    [
      10414,
      11588,
      11589,
      11586,
      10413,
      10412
    ],
    [
      10414,
      10415,
      10417,
      11590,
      11591,
      11588
    ],
    [
      10419,
      11592,
      11593,
      11590,
      10417,
      10416
    ],
    [
      10419,
      10418,
      10421,
      11594,
      11595,
      11592
    ],
    [
      11596,
      11597,
      11594,
      10421,
      10420,
      10423
    ],
    [
      11596,
      10423,
      10422,
      10425,
      11598,
      11599
    ],
    [
      11598,
      10425,
      10424,
      10427,
      11600,
      11601
    ],
    [
      10426,
      10429,
      11602,
      11603,
      11600,
      10427
    ],
    [
      11604,
      11605,
      11602,
      10429,
      10428,
      10431
    ],
    [
      11606,
      11607,
      11604,
      10431,
      10430,
      10433
    ],
    [
      11606,
      10433,
      10432,
      10435,
      11608,
      11609
    ],
    [
      11610,
      11611,
      11608,
      10435,
      10434,
      10437
    ],
    [
      11610,
      10437,
      10436,
      10440,
      11612,
      11613
    ],
    [
      10439,
      11614,
      11615,
      11612,
      10440
    ],
    [
      11616,
      11617,
      11618,
      11614,
      10439,
      10438,
      11619
    ],
    [
      7549,
      7548,
      10448,
      11620,
      10444,
      9211
    ],
    [
      11621,
      10447,
      10446,
      10450,
      11622
    ],
    [
      10449,
      10452,
      11623,
      11624,
      11622,
      10450
    ],
    [
      11623,
      10452,
      10451,
      10454,
      11625,
      11626
    ],
    [
      10453,
      10456,
      11627,
      11628,
      11625,
      10454
    ],
    [
      10457,
      11629,
      11630,
      11627,
      10456,
      10455
    ],
    [
      10457,
      10458,
      10460,
      11631,
      11632,
      11629
    ],
    [
      11633,
      11634,
      11631,
      10460,
      10459,
      10462
    ],
    [
      11635,
      11633,
      10462,
      10461,
      10464,
      11636
    ],
    [
      10466,
      11637,
      11638,
      11636,
      10464,
      10463
    ],
    [
      10465,
      10468,
      11639,
      11640,
      11637,
      10466
    ],
    [
      10469,
      11641,
      11642,
      11639,
      10468,
      10467
    ],
    [
      10469,
      10470,
      10472,
      11643,
      11644,
      11641
    ],
    [
      10474,
      11645,
      11646,
      11643,
      10472,
      10471
    ],
    [
      10474,
      10473,
      10476,
      11647,
      11648,
      11645
    ],
    [
      10475,
      10478,
      11649,
      11650,
      11647,
      10476
    ],
    [
      10478,
      10477,
      10480,
      11651,
      11652,
      11649
    ],
    [
      10482,
      11653,
      11654,
      11651,
      10480,
      10479
    ],
    [
      10482,
      10481,
      10484,
      11655,
      11656,
      11653
    ],
    [
      10487,
      11657,
      11658,
      11655,
      10484,
      10483
    ],
    [
      10487,
      10486,
      10491,
      11659,
      11660,
      11657
    ],
    [
      10491,
      10490,
      10493,
      11661,
      11662,
      11659
    ],
    [
      10492,
      10499,
      11663,
      11664,
      11661,
      10493
    ],
    [
      10503,
      11665,
      11666,
      11663,
      10499,
      10498
    ],
    [
      10505,
      11667,
      11668,
      11665,
      10503,
      10502
    ],
    [
      10504,
      10511,
      11669,
      11670,
      11667,
      10505
    ],
    [
      10512,
      11671,
      11672,
      11669,
      10511,
      10510
    ],
    [
      10512,
      10516,
      11673,
      11674,
      11671
    ],
    [
      10516,
      10515,
      10518,
      11675,
      11676,
      11673
    ],
    [
      10517,
      10523,
      10528,
      11677,
      11678,
      11675,
      10518
    ],
    [
      10528,
      10527,
      11679,
      11680,
      11677
    ],
    [
      10531,
      11681,
      11682,
      11679,
      10527,
      10526
    ],
    [
      11683,
      11684,
      11681,
      10531,
      10530,
      10536
    ],
    [
      11683,
      10536,
      10535,
      10538,
      10544,
      11685
    ],
    [
      10543,
      11686,
      11687,
      11685,
      10544
    ],
    [
      10543,
      10542,
      10545,
      10552,
      11688,
      11689,
      11686
    ],
    [
      11688,
      10552,
      10551,
      11690,
      11691
    ],
    [
      10551,
      10550,
      10554,
      11692,
      11693,
      11690
    ],
    [
      10553,
      10558,
      10562,
      11694,
      11692,
      10554
    ],
    [
      10563,
      10569,
      11695,
      11694,
      10562,
      10561
    ],
    [
      5791,
      5790,
      7426,
      11695,
      10569,
      10568,
      10573,
      10575,
      10578,
      10580,
      5811,
      5802
    ],
    [
      11696,
      11697,
      11698,
      11699,
      11700,
      11701
    ],
    [
      11702,
      11703,
      11704,
      10441,
      10445,
      11705
    ],
    [
      11706,
      11707,
      11705,
      10445,
      10444,
      11620
    ],
    [
      11621,
      11708,
      11709,
      11706,
      11620,
      10448,
      10447
    ],
    [
      11621,
      11622,
      11624,
      11710,
      11711,
      11708
    ],
    [
      11623,
      11626,
      11712,
      11713,
      11714,
      11710,
      11624
    ],
    [
      11626,
      11625,
      11628,
      11715,
      11716,
      11712
    ],
    [
      11715,
      11628,
      11627,
      11630,
      11717,
      11718
    ],
    [
      11629,
      11632,
      11719,
      11720,
      11717,
      11630
    ],
    [
      11631,
      11634,
      11721,
      11722,
      11719,
      11632
    ],
    [
      11635,
      11723,
      11724,
      11721,
      11634,
      11633
    ],
    [
      11725,
      11723,
      11635,
      11636,
      11638,
      11726
    ],
    [
      11638,
      11637,
      11640,
      11727,
      11728,
      11726
    ],
    [
      11642,
      11729,
      11730,
      11727,
      11640,
      11639
    ],
    [
      11642,
      11641,
      11644,
      11731,
      11732,
      11729
    ],
    [
      11731,
      11644,
      11643,
      11646,
      11733,
      11734
    ],
    [
      11648,
      11735,
      11736,
      11733,
      11646,
      11645
    ],
    [
      11737,
      11735,
      11648,
      11647,
      11650,
      11738
    ],
    [
      11650,
      11649,
      11652,
      11739,
      11740,
      11738
    ],
    [
      11741,
      11739,
      11652,
      11651,
      11654,
      11742
    ],
    [
      11653,
      11656,
      11743,
      11744,
      11742,
      11654
    ],
    [
      11745,
      11743,
      11656,
      11655,
      11658,
      11746
    ],
    [
      11746,
      11658,
      11657,
      11660,
      11747,
      11748
    ],
    [
      11747,
      11660,
      11659,
      11662,
      11749,
      11750
    ],
    [
      11751,
      11749,
      11662,
      11661,
      11664,
      11752
    ],
    [
      11753,
      11752,
      11664,
      11663,
      11666,
      11754
    ],
    [
      11665,
      11668,
      11755,
      11756,
      11754,
      11666
    ],
    [
      11668,
      11667,
      11670,
      11757,
      11758,
      11755
    ],
    [
      11670,
      11669,
      11672,
      11759,
      11760,
      11761,
      11757
    ],
    [
      11762,
      11763,
      11759,
      11672,
      11671,
      11674
    ],
    [
      11673,
      11676,
      11764,
      11765,
      11762,
      11674
    ],
    [
      11764,
      11676,
      11675,
      11678,
      11766
    ],
    [
      11677,
      11680,
      11767,
      11768,
      11766,
      11678
    ],
    [
      11679,
      11682,
      11769,
      11767,
      11680
    ],
    [
      11681,
      11684,
      11770,
      11769,
      11682
    ],
    [
      11683,
      11685,
      11687,
      11771,
      11770,
      11684
    ],
    [
      10629,
      10626,
      10625,
      11006,
      11000,
      11005,
      10630
    ],
    [
      11772,
      10632,
      10631,
      10630,
      11005,
      11004
    ],
    [
      11772,
      11773,
      11774,
      10634,
      10633,
      10632
    ],
    [
      11775,
      10637,
      10635,
      10634,
      11774,
      11776
    ],
    [
      11777,
      11778,
      10638,
      10636,
      10637,
      11775
    ],
    [
      10640,
      10639,
      10638,
      11778,
      11779,
      11780
    ],
    [
      10640,
      11780,
      11781,
      11782,
      10642,
      10641
    ],
    [
      11782,
      11783,
      11784,
      10645,
      10643,
      10642
    ],
    [
      10644,
      10645,
      11784,
      11785,
      11786,
      10646
    ],
    [
      11787,
      11788,
      10648,
      10647,
      10646,
      11786
    ],
    [
      11789,
      11790,
      10650,
      10649,
      10648,
      11788
    ],
    [
      10652,
      10651,
      10650,
      11790,
      11791,
      11792
    ],
    [
      11793,
      10654,
      10653,
      10652,
      11792
    ],
    [
      11793,
      11794,
      11795,
      10656,
      10655,
      10654
    ],
    [
      10656,
      11795,
      11796,
      10659,
      10658,
      10657
    ],
    [
      11796,
      11797,
      11798,
      10661,
      10660,
      10659
    ],
    [
      11799,
      10663,
      10662,
      10661,
      11798,
      11800
    ],
    [
      10667,
      10665,
      10664,
      10663,
      11799,
      11801,
      11802
    ],
    [
      10672,
      10669,
      10668,
      10666,
      10667,
      11802,
      11803,
      11804,
      11805
    ],
    [
      10670,
      10672,
      11805,
      11806,
      11807,
      10677,
      10674
    ],
    [
      11807,
      11808,
      10685,
      10681,
      10678,
      10677
    ],
    [
      11809,
      11810,
      10691,
      10688,
      10686,
      10685,
      11808
    ],
    [
      10696,
      10692,
      10691,
      11810,
      11811,
      11812
    ],
    [
      10697,
      10696,
      11812,
      11813,
      11814,
      10699
    ],
    [
      10700,
      10699,
      11814,
      11815,
      11816,
      10706,
      10703
    ],
    [
      10707,
      10706,
      11816,
      11817,
      11818,
      10710
    ],
    [
      10711,
      10710,
      11818,
      11819,
      10717
    ],
    [
      10718,
      10714,
      10717,
      11819,
      11820
    ],
    [
      10718,
      11820,
      11821,
      11822,
      11823,
      10723,
      10719
    ],
    [
      10730,
      10727,
      10724,
      10723,
      11823,
      11824
    ],
    [
      11825,
      11826,
      11827,
      11828,
      11829,
      11830
    ],
    [
      11831,
      11832,
      11833,
      11834,
      11835,
      11836
    ],
    [
      11837,
      11834,
      11833,
      11838
    ],
    [
      11839,
      11840,
      11841,
      11842,
      11843,
      11844
    ],
    [
      11845,
      11841,
      11840,
      11846,
      11847
    ],
    [
      11845,
      11847,
      11848,
      11849,
      11850,
      11851
    ],
    [
      11852,
      11853,
      11854,
      11855,
      11850,
      11849
    ],
    [
      11856,
      11854,
      11853,
      11857,
      11858
    ],
    [
      11856,
      11858,
      11859,
      11860,
      11861,
      11862
    ],
    [
      11863,
      11864,
      11861,
      11860,
      11865,
      11866,
      11867
    ],
    [
      11868,
      11867,
      11866,
      11869,
      11870,
      11871
    ],
    [
      11872,
      11873,
      11874,
      11871,
      11870
    ],
    [
      11875,
      11876,
      11874,
      11873,
      11877,
      11878
    ],
    [
      10745,
      11879,
      11880,
      11878,
      11877,
      10746
    ],
    [
      11881,
      11879,
      10745,
      10742,
      10741,
      11882
    ],
    [
      11883,
      11882,
      10741,
      10744,
      11884
    ],
    [
      11885,
      11884,
      10744,
      10738,
      10737,
      11886
    ],
    [
      10730,
      11824,
      11887,
      11886,
      10737,
      10736,
      10731
    ],
    [
      10790,
      10791,
      11888,
      11889,
      11890,
      10792
    ],
    [
      10793,
      10792,
      11890,
      11891,
      11892,
      10794
    ],
    [
      11893,
      11894,
      10797,
      10795,
      10794,
      11892
    ],
    [
      10796,
      10797,
      11894,
      11895,
      11896,
      10798
    ],
    [
      10799,
      10798,
      11896,
      11897,
      10800
    ],
    [
      10802,
      10801,
      10800,
      11897,
      11898,
      11899,
      10803
    ],
    [
      10804,
      10803,
      11899,
      11900,
      11901,
      10805
    ],
    [
      10806,
      10805,
      11901,
      11902,
      11903,
      10807
    ],
    [
      11904,
      11905,
      10808,
      10807,
      11903,
      11906
    ],
    [
      11904,
      11907,
      11908,
      11909,
      11910,
      11905
    ],
    [
      11911,
      11912,
      11913,
      11909,
      11908,
      11914
    ],
    [
      11915,
      11912,
      11911,
      11916,
      11917,
      11918
    ],
    [
      11919,
      11918,
      11917,
      11920,
      11921
    ],
    [
      11922,
      11923,
      11924,
      11921,
      11920,
      11925
    ],
    [
      11926,
      11927,
      11928,
      11923,
      11922,
      11929
    ],
    [
      11926,
      11930,
      11931,
      11932,
      11927
    ],
    [
      11933,
      11934,
      11935,
      11936,
      11937,
      11938,
      11931,
      11930
    ],
    [
      11939,
      11940,
      11935,
      11934,
      11941,
      11942,
      11943,
      11944
    ],
    [
      11945,
      11943,
      11942,
      11946,
      11947,
      11948
    ],
    [
      11949,
      11950,
      11947,
      11946,
      11951
    ],
    [
      11949,
      11951,
      11952,
      11953,
      11954,
      11955
    ],
    [
      11956,
      11954,
      11953,
      11957,
      11958,
      11959
    ],
    [
      11960,
      11961,
      11959,
      11958,
      11962,
      11963
    ],
    [
      11960,
      11963,
      11964,
      11965,
      11966,
      11967
    ],
    [
      11968,
      11969,
      11970,
      11966,
      11965
    ],
    [
      11971,
      11972,
      11973,
      11969,
      11968
    ],
    [
      11971,
      11974,
      11975,
      11976,
      11977,
      11978,
      11979,
      11972
    ],
    [
      11980,
      11977,
      11976,
      11981,
      11982
    ],
    [
      10811,
      10810,
      10809,
      10808,
      11905,
      11910
    ],
    [
      10811,
      11910,
      11909,
      11913,
      10815,
      10812
    ],
    [
      11915,
      10820,
      10816,
      10815,
      11913,
      11912
    ],
    [
      11915,
      11918,
      11919,
      10821,
      10820
    ],
    [
      10818,
      10821,
      11919,
      11921,
      11924,
      10822
    ],
    [
      11928,
      10826,
      10823,
      10822,
      11924,
      11923
    ],
    [
      11927,
      11932,
      10836,
      10830,
      10827,
      10826,
      11928
    ],
    [
      10833,
      10836,
      11932,
      11931,
      11938,
      10837
    ],
    [
      10843,
      10838,
      10837,
      11938,
      11937
    ],
    [
      10843,
      11937,
      11936,
      10845,
      10844
    ],
    [
      11940,
      10856,
      10853,
      10846,
      10845,
      11936,
      11935
    ],
    [
      10857,
      10856,
      11940,
      11939,
      10859
    ],
    [
      10858,
      10859,
      11939,
      11944,
      10860
    ],
    [
      10863,
      10862,
      10861,
      10860,
      11944,
      11943,
      11945
    ],
    [
      10863,
      11945,
      11948,
      10865,
      10864
    ],
    [
      11948,
      11947,
      11950,
      10867,
      10866,
      10865
    ],
    [
      11949,
      11955,
      10869,
      10868,
      10867,
      11950
    ],
    [
      10869,
      11955,
      11954,
      11956,
      10871,
      10870
    ],
    [
      10872,
      10871,
      11956,
      11959,
      11961,
      10873
    ],
    [
      11960,
      11967,
      10876,
      10874,
      10873,
      11961
    ],
    [
      10875,
      10876,
      11967,
      11966,
      11970,
      10878,
      10877
    ],
    [
      10879,
      10878,
      11970,
      11969,
      11973,
      10881
    ],
    [
      10880,
      10881,
      11973,
      11972,
      11979,
      10882
    ],
    [
      10884,
      10883,
      10882,
      11979,
      11978
    ],
    [
      11980,
      10886,
      10885,
      10884,
      11978,
      11977
    ],
    [
      11980,
      11982,
      11458,
      10888,
      10887,
      10886
    ],
    [
      10889,
      10891,
      10892,
      10894,
      11292,
      11291,
      10890
    ],
    [
      10895,
      11295,
      11293,
      11292,
      10894,
      10893
    ],
    [
      10895,
      10896,
      10898,
      11296,
      11294,
      11295
    ],
    [
      10897,
      10900,
      11299,
      11297,
      11296,
      10898
    ],
    [
      10899,
      10902,
      11300,
      11298,
      11299,
      10900
    ],
    [
      11302,
      11301,
      11300,
      10902,
      10901,
      10904
    ],
    [
      11302,
      10904,
      10903,
      10906,
      11304,
      11303
    ],
    [
      10905,
      1974,
      1973,
      3314,
      11304,
      10906
    ],
    [
      11983,
      10910,
      10909,
      10908,
      10907,
      11204
    ],
    [
      11984,
      10912,
      10911,
      10910,
      11983,
      11985
    ],
    [
      11984,
      11986,
      10914,
      10913,
      10912
    ],
    [
      10914,
      11986,
      11987,
      11988,
      10917,
      10915
    ],
    [
      10916,
      10917,
      11988,
      11989,
      11990,
      10918
    ],
    [
      10918,
      11990,
      11991,
      10920,
      10919
    ],
    [
      11991,
      11992,
      10923,
      10921,
      10920
    ],
    [
      10922,
      10923,
      11992,
      11993,
      11994,
      10924
    ],
    [
      11995,
      10928,
      10926,
      10925,
      10924,
      11994
    ],
    [
      11995,
      11996,
      11997,
      10929,
      10927,
      10928
    ],
    [
      11998,
      10931,
      10930,
      10929,
      11997
    ],
    [
      11998,
      11999,
      12000,
      10934,
      10932,
      10931
    ],
    [
      10933,
      10934,
      12000,
      12001,
      10935
    ],
    [
      9988,
      10936,
      10935,
      12001,
      12002,
      11228,
      9989
    ],
    [
      12003,
      10939,
      9691,
      9690
    ],
    [
      9689,
      9692,
      9694,
      10940,
      10942,
      12003,
      9690
    ],
    [
      10943,
      10945,
      10938,
      10939,
      12003,
      10942,
      10941,
      10944
    ],
    [
      10944,
      10941,
      9701,
      9700,
      9703,
      9705
    ],
    [
      10943,
      9704,
      8212,
      6370,
      6369,
      8213,
      10945
    ],
    [
      10946,
      10948,
      12004,
      8344,
      8343
    ],
    [
      10948,
      10947,
      10950,
      12005,
      12006,
      12004
    ],
    [
      10952,
      12007,
      12008,
      12005,
      10950,
      10949
    ],
    [
      10952,
      10951,
      10954,
      12009,
      12010,
      12007
    ],
    [
      12011,
      12012,
      12009,
      10954,
      10953,
      10956
    ],
    [
      12013,
      12011,
      10956,
      10955,
      10958,
      12014
    ],
    [
      12015,
      12016,
      12014,
      10958,
      10957,
      10961
    ],
    [
      12015,
      10961,
      10960,
      10965,
      12017
    ],
    [
      10970,
      10969,
      10973,
      12018,
      12019,
      10964,
      10963
    ],
    [
      12020,
      12021,
      12022,
      12023,
      12024
    ],
    [
      9742,
      9744,
      9892,
      9893,
      10962,
      10959
    ],
    [
      12025,
      10966,
      10970,
      10963,
      10962,
      9893,
      9889,
      9891,
      11160
    ],
    [
      12026,
      12027,
      10985,
      10984,
      12028,
      12029,
      12030
    ],
    [
      12031,
      12028,
      10984,
      10983,
      12032,
      12033
    ],
    [
      10983,
      10982,
      10987,
      12034,
      12035,
      12036,
      12032
    ],
    [
      12025,
      11160,
      11149,
      11148,
      11420,
      12026,
      12030
    ],
    [
      12025,
      12030,
      12029,
      10967,
      10966
    ],
    [
      12031,
      10974,
      10968,
      10967,
      12029,
      12028
    ],
    [
      12031,
      12033,
      12037,
      10975,
      10971,
      10974
    ],
    [
      12033,
      12032,
      12036,
      12038,
      12037
    ],
    [
      12039,
      12038,
      12036,
      12035,
      12040,
      12041
    ],
    [
      12042,
      12043,
      12040,
      12035,
      12034
    ],
    [
      10988,
      12044,
      12045,
      12042,
      12034,
      10987,
      10986
    ],
    [
      12046,
      12047,
      12044,
      10988,
      10991
    ],
    [
      12046,
      10991,
      10990,
      12048
    ],
    [
      10992,
      12049,
      12050,
      12048,
      10990,
      10989
    ],
    [
      12051,
      12052,
      12050,
      12049,
      12053
    ],
    [
      6679,
      6678,
      12054,
      12055,
      12056,
      12057,
      8247
    ],
    [
      12058,
      12059,
      12060,
      12056,
      12055,
      12061
    ],
    [
      12062,
      12059,
      12058,
      12063,
      12064,
      12065
    ],
    [
      12066,
      12067,
      12065,
      12064,
      12068
    ],
    [
      12066,
      12069,
      12070,
      12071,
      12072,
      12073,
      12067
    ],
    [
      12074,
      12071,
      12070,
      12075,
      12024,
      12023,
      12076
    ],
    [
      12077,
      12078,
      12022,
      12021,
      12019,
      12018
    ],
    [
      12077,
      12018,
      10973,
      10972,
      10977,
      12079,
      12080
    ],
    [
      12039,
      12081,
      10976,
      10975,
      12037,
      12038
    ],
    [
      12082,
      12083,
      12084,
      12085,
      12086,
      12087
    ],
    [
      12086,
      12085,
      12088,
      12089
    ],
    [
      10992,
      10993,
      10998,
      12090,
      12091,
      12053,
      12049
    ],
    [
      12090,
      10998,
      10997,
      12092
    ],
    [
      12093,
      12092,
      10997,
      10996,
      12094
    ],
    [
      12094,
      10996,
      10995,
      12095,
      12096
    ],
    [
      10994,
      12097,
      12098,
      12099,
      12095,
      10995
    ],
    [
      11700,
      12100,
      12101,
      11701
    ],
    [
      11696,
      12102,
      12103,
      12104,
      12105,
      12106,
      11697
    ],
    [
      12107,
      12099,
      12098,
      12108,
      12109,
      12110
    ],
    [
      10441,
      11704,
      12111,
      10442
    ],
    [
      12112,
      12113,
      11698,
      11697,
      12106
    ],
    [
      12104,
      12109,
      12108,
      12114,
      12115,
      12105
    ],
    [
      7552,
      7551,
      9377,
      10627,
      7558
    ],
    [
      7545,
      7544,
      9375,
      12116,
      10628,
      9376
    ],
    [
      12117,
      12116,
      9375,
      9374,
      12118,
      11826,
      11825,
      12119,
      12120
    ],
    [
      11825,
      11830,
      12121,
      12122,
      12119
    ],
    [
      12123,
      12124,
      12122,
      12121,
      11835,
      11834,
      11837,
      12125
    ],
    [
      12123,
      12125,
      11842,
      11841,
      11845,
      11851
    ],
    [
      12126,
      12127,
      12124,
      12123,
      11851,
      11850,
      11855
    ],
    [
      11856,
      11862,
      12128,
      12126,
      11855,
      11854
    ],
    [
      12129,
      12130,
      12131,
      12128,
      11862,
      11861,
      11864
    ],
    [
      11863,
      12132,
      12133,
      12134,
      12129,
      11864
    ],
    [
      11868,
      12135,
      12136,
      12132,
      11863,
      11867
    ],
    [
      11868,
      11871,
      11874,
      11876,
      12137,
      12135
    ],
    [
      12138,
      12139,
      12140,
      11776,
      11774,
      11773
    ],
    [
      12138,
      11773,
      11772,
      11004,
      11003,
      12141
    ],
    [
      11002,
      11016,
      11019,
      12142,
      12141,
      11003
    ],
    [
      12143,
      12120,
      12119,
      12122,
      12124,
      12127
    ],
    [
      12126,
      12128,
      12131,
      11014,
      11009,
      11008,
      12143,
      12127
    ],
    [
      11011,
      11014,
      12131,
      12130
    ],
    [
      11011,
      12130,
      12129,
      12134,
      11012
    ],
    [
      12144,
      12145,
      12133,
      12132,
      12136
    ],
    [
      12144,
      12136,
      12135,
      12137,
      12146,
      12147
    ],
    [
      12148,
      12149,
      12146,
      12137,
      11876,
      11875
    ],
    [
      12148,
      11875,
      11878,
      11880,
      12150,
      12151
    ],
    [
      11881,
      12152,
      12153,
      12150,
      11880,
      11879
    ],
    [
      11881,
      11882,
      11883,
      12154,
      12155,
      12152
    ],
    [
      11883,
      11884,
      11885,
      12156,
      12157,
      12154
    ],
    [
      12156,
      11885,
      11886,
      11887,
      12158,
      12159
    ],
    [
      11824,
      11823,
      11822,
      12160,
      12158,
      11887
    ],
    [
      12161,
      12140,
      12139,
      12162,
      12163
    ],
    [
      12138,
      12141,
      12142,
      12164,
      12162,
      12139
    ],
    [
      11018,
      12164,
      12142,
      11019
    ],
    [
      11017,
      11013,
      11012,
      12134,
      12133,
      12145
    ],
    [
      11015,
      11017,
      12145,
      12144,
      12147,
      11020
    ],
    [
      12147,
      12146,
      12149,
      11021,
      11020
    ],
    [
      12148,
      12151,
      12165,
      11022,
      11021,
      12149
    ],
    [
      12151,
      12150,
      12153,
      12166,
      12165
    ],
    [
      12166,
      12153,
      12152,
      12155,
      12167,
      12168
    ],
    [
      11023,
      11029,
      12167,
      12155,
      12154,
      12157
    ],
    [
      11023,
      12157,
      12156,
      12159,
      11024
    ],
    [
      11031,
      11025,
      11024,
      12159,
      12158,
      12160
    ],
    [
      12169,
      11030,
      11031,
      12160,
      11822,
      11821,
      12170
    ],
    [
      12169,
      12171,
      12172,
      12173,
      11027,
      11026,
      11030
    ],
    [
      11152,
      11043,
      11040,
      11042,
      11150,
      11151
    ],
    [
      11152,
      11154,
      11047,
      11044,
      11043
    ],
    [
      11155,
      11054,
      11048,
      11047,
      11154,
      11153
    ],
    [
      11155,
      11156,
      11157,
      11058,
      11056,
      11051,
      11054
    ],
    [
      11157,
      11159,
      11065,
      11059,
      11058
    ],
    [
      11066,
      11065,
      11159,
      11158,
      9708,
      9707
    ],
    [
      11162,
      11161,
      11193,
      11195,
      12174,
      11169,
      11163
    ],
    [
      12174,
      12175,
      11171,
      11170,
      11169
    ],
    [
      12174,
      11195,
      11194,
      11196,
      12176,
      12175
    ],
    [
      11173,
      11172,
      11171,
      12175,
      12176,
      12177
    ],
    [
      12178,
      12177,
      12176,
      11196,
      9935,
      9934
    ],
    [
      11173,
      12177,
      12178,
      12179,
      11174
    ],
    [
      9933,
      12180,
      12181,
      12179,
      12178,
      9934
    ],
    [
      11167,
      11174,
      12179,
      12181,
      12182,
      11168
    ],
    [
      9907,
      6708,
      6706,
      6705,
      11168,
      12182,
      12183,
      12184,
      11175
    ],
    [
      11175,
      12184,
      12185,
      12186,
      11176
    ],
    [
      8405,
      8409,
      11192,
      12186,
      12185,
      9940,
      8406
    ],
    [
      11179,
      11178,
      11177,
      11176,
      12186,
      11192
    ],
    [
      11983,
      11204,
      11203,
      12187,
      12188,
      12189,
      11985
    ],
    [
      11202,
      11205,
      11207,
      12190,
      12187,
      11203
    ],
    [
      11210,
      12191,
      12192,
      12190,
      11207,
      11206,
      11208
    ],
    [
      11210,
      11209,
      11212,
      12193,
      12191
    ],
    [
      11212,
      11211,
      11214,
      12194,
      12193
    ],
    [
      11213,
      11215,
      11217,
      12195,
      12196,
      12194,
      11214
    ],
    [
      11216,
      11218,
      11220,
      12197,
      12195,
      11217
    ],
    [
      11220,
      11219,
      11222,
      12198,
      12197
    ],
    [
      12199,
      12198,
      11222,
      11221,
      11224,
      12200
    ],
    [
      11226,
      12201,
      12202,
      12200,
      11224,
      11223
    ],
    [
      11226,
      11225,
      11227,
      11228,
      12002,
      12203,
      12201
    ],
    [
      8890,
      8895,
      8897,
      11230
    ],
    [
      8890,
      11230,
      11229,
      11231,
      12204,
      8891
    ],
    [
      12205,
      12204,
      11231,
      11232,
      11234,
      12206
    ],
    [
      12207,
      12206,
      11234,
      11233,
      11236
    ],
    [
      11235,
      11238,
      12208,
      12209,
      12210,
      12207,
      11236
    ],
    [
      11237,
      11240,
      12211,
      12212,
      12208,
      11238
    ],
    [
      11239,
      11242,
      12213,
      12214,
      12211,
      11240
    ],
    [
      12215,
      12213,
      11242,
      11241,
      11244,
      12216
    ],
    [
      12217,
      12216,
      11244,
      11243,
      11246,
      12218
    ],
    [
      12219,
      12218,
      11246,
      11245,
      11248,
      12220
    ],
    [
      11247,
      11250,
      12221,
      12222,
      12220,
      11248
    ],
    [
      12221,
      11250,
      11249,
      11252,
      12223,
      12224
    ],
    [
      11254,
      12225,
      12226,
      12223,
      11252,
      11251
    ],
    [
      11253,
      11256,
      12227,
      12228,
      12225,
      11254
    ],
    [
      12227,
      11256,
      11255,
      11258,
      12229,
      12230
    ],
    [
      11260,
      12231,
      12232,
      12229,
      11258,
      11257
    ],
    [
      11261,
      12233,
      12234,
      12231,
      11260,
      11259
    ],
    [
      11261,
      11262,
      11263,
      12235,
      12236,
      12233
    ],
    [
      12235,
      11263,
      11264,
      11266,
      12237,
      12238
    ],
    [
      11267,
      12239,
      12240,
      12237,
      11266,
      11265
    ],
    [
      12241,
      12239,
      11267,
      11268,
      11270,
      12242
    ],
    [
      11269,
      11272,
      12243,
      12244,
      12242,
      11270
    ],
    [
      12245,
      12243,
      11272,
      11271,
      11274,
      12246
    ],
    [
      12246,
      11274,
      11273,
      11276,
      12247,
      12248
    ],
    [
      12249,
      12247,
      11276,
      11275,
      11278,
      12250
    ],
    [
      11277,
      12251,
      12252,
      12250,
      11278
    ],
    [
      11277,
      11279,
      11281,
      12253,
      12254,
      12251
    ],
    [
      11282,
      12255,
      12256,
      12257,
      12253,
      11281,
      11280
    ],
    [
      12258,
      12255,
      11282,
      11283,
      11285,
      12259
    ],
    [
      12260,
      12259,
      11285,
      11284,
      11287,
      12261
    ],
    [
      12262,
      12261,
      11287,
      11286,
      11290,
      12263,
      12264
    ],
    [
      11336,
      11409,
      11411,
      11337
    ],
    [
      11410,
      11415,
      11339,
      11338,
      11337,
      11411
    ],
    [
      11341,
      11340,
      11339,
      11415,
      11414
    ],
    [
      12265,
      11348,
      11347,
      11308,
      11307,
      12266
    ],
    [
      12265,
      12267,
      12268,
      11351,
      11349,
      11348
    ],
    [
      11350,
      11351,
      12268,
      12269,
      12270,
      11352
    ],
    [
      12271,
      11354,
      11353,
      11352,
      12270,
      12272
    ],
    [
      12271,
      12273,
      12274,
      11356,
      11355,
      11354
    ],
    [
      12275,
      12276,
      11358,
      11357,
      11356,
      12274
    ],
    [
      12277,
      11360,
      11359,
      11358,
      12276,
      12278
    ],
    [
      11361,
      11360,
      12277,
      12279,
      12280,
      11362
    ],
    [
      12281,
      11364,
      11363,
      11362,
      12280,
      12282
    ],
    [
      12283,
      12284,
      11366,
      11365,
      11364,
      12281
    ],
    [
      12285,
      12286,
      11368,
      11367,
      11366,
      12284
    ],
    [
      12287,
      11370,
      11369,
      11368,
      12286,
      12288
    ],
    [
      12287,
      12289,
      12290,
      11372,
      11371,
      11370
    ],
    [
      11372,
      12290,
      12291,
      12292,
      11374,
      11373
    ],
    [
      12293,
      12294,
      11377,
      11375,
      11374,
      12292
    ],
    [
      11379,
      11378,
      11376,
      11377,
      12294,
      12295
    ],
    [
      11379,
      12295,
      12296,
      12297,
      11381,
      11380
    ],
    [
      11383,
      11382,
      11381,
      12297,
      12298,
      12299
    ],
    [
      11385,
      11384,
      11383,
      12299,
      12300,
      12301
    ],
    [
      12302,
      12303,
      11387,
      11386,
      11385,
      12301
    ],
    [
      12304,
      12305,
      12306,
      12307,
      12308,
      12309
    ],
    [
      12304,
      12309,
      11388,
      11387,
      12303
    ],
    [
      11392,
      11391,
      12307,
      12306,
      12310,
      11400
    ],
    [
      11390,
      12308,
      12307,
      11391
    ],
    [
      12311,
      12312,
      12313,
      11405,
      11404,
      11401,
      11400,
      12310,
      12314
    ],
    [
      11390,
      11396,
      11399,
      11389,
      11388,
      12309,
      12308
    ],
    [
      11417,
      11418,
      11419,
      10212,
      10211,
      10274
    ],
    [
      11417,
      10274,
      10271,
      10270,
      11412,
      11408,
      11407,
      11416
    ],
    [
      8723,
      8725,
      11413,
      11412,
      10270
    ],
    [
      11074,
      11072,
      11069,
      10245,
      10244,
      10247
    ],
    [
      11074,
      10247,
      10246,
      10249,
      11080,
      11075
    ],
    [
      11084,
      11081,
      11080,
      10249,
      10248,
      10251
    ],
    [
      11084,
      10251,
      10250,
      10253,
      11090,
      11085
    ],
    [
      10254,
      11091,
      11087,
      11090,
      10253,
      10252
    ],
    [
      10254,
      10255,
      10257,
      11096,
      11092,
      11091
    ],
    [
      10256,
      10259,
      11103,
      11100,
      11097,
      11096,
      10257
    ],
    [
      10258,
      10261,
      11108,
      11104,
      11103,
      10259
    ],
    [
      10262,
      11112,
      11109,
      11108,
      10261,
      10260
    ],
    [
      11115,
      11113,
      11112,
      10262,
      10263,
      10265
    ],
    [
      10266,
      11120,
      11116,
      11115,
      10265,
      10264
    ],
    [
      10266,
      10267,
      10269,
      11124,
      11121,
      11120
    ],
    [
      10273,
      11128,
      11125,
      11124,
      10269,
      10268,
      10272
    ],
    [
      10273,
      10275,
      10276,
      11133,
      11129,
      11128
    ],
    [
      10209,
      10213,
      10278,
      11135,
      11134,
      11133,
      10276
    ],
    [
      10277,
      10206,
      10205,
      11138
    ],
    [
      10197,
      10196,
      12315,
      12027,
      12026,
      11420
    ],
    [
      11423,
      11425,
      12316,
      10788,
      10787,
      11422
    ],
    [
      11427,
      12317,
      12316,
      11425,
      11424
    ],
    [
      11427,
      11426,
      11429,
      12318,
      12319,
      12317
    ],
    [
      10291,
      12320,
      12321,
      8747,
      8746,
      8750,
      10290
    ],
    [
      10291,
      10292,
      10294,
      11431,
      12322,
      12320
    ],
    [
      12323,
      12322,
      11431,
      11430,
      11433
    ],
    [
      12323,
      11433,
      11432,
      11435,
      12324,
      12325,
      12326
    ],
    [
      12324,
      11435,
      11434,
      11436,
      11438,
      12327
    ],
    [
      12328,
      12327,
      11438,
      11437,
      11440,
      12329,
      12330
    ],
    [
      12331,
      12329,
      11440,
      11439,
      11443,
      12332
    ],
    [
      12332,
      11443,
      11442,
      12333,
      12334
    ],
    [
      12335,
      12333,
      11442,
      11441,
      11444,
      11446
    ],
    [
      12335,
      11446,
      11445,
      11448,
      12336,
      12337
    ],
    [
      11447,
      11450,
      12338,
      12339,
      12336,
      11448
    ],
    [
      12340,
      12338,
      11450,
      11449,
      11452,
      12341
    ],
    [
      11453,
      12342,
      12343,
      12341,
      11452,
      11451
    ],
    [
      12344,
      12345,
      12342,
      11453,
      11454,
      11455
    ],
    [
      12344,
      11455,
      11456,
      11457,
      11458,
      11982,
      11981,
      12346
    ],
    [
      11515,
      11521,
      11490,
      11489,
      11471,
      11470,
      11514
    ],
    [
      11472,
      11490,
      11521,
      11520,
      11525,
      11473
    ],
    [
      11529,
      11474,
      11473,
      11525,
      11524
    ],
    [
      11529,
      11528,
      11532,
      11536,
      11475,
      11474
    ],
    [
      11475,
      11536,
      11535,
      11539,
      11480,
      11476
    ],
    [
      11546,
      11483,
      11481,
      11480,
      11539,
      11538,
      11545
    ],
    [
      11546,
      11549,
      11551,
      11484,
      11483
    ],
    [
      11550,
      11556,
      11558,
      10383,
      10382,
      11484,
      11551
    ],
    [
      10335,
      12347,
      12348,
      11491,
      10336
    ],
    [
      12349,
      12350,
      11493,
      11492,
      11491,
      12348
    ],
    [
      11494,
      11493,
      12350,
      12351,
      12352
    ],
    [
      11494,
      12352,
      12353,
      12354,
      11496,
      11495
    ],
    [
      11500,
      11497,
      11496,
      12354,
      12355,
      12356
    ],
    [
      12357,
      12358,
      11498,
      11500,
      12356
    ],
    [
      11501,
      11499,
      11498,
      12358,
      12359,
      12360,
      12361,
      11502
    ],
    [
      12361,
      12362,
      12363,
      11503,
      11502
    ],
    [
      11503,
      12363,
      12364,
      12365,
      10354,
      10353
    ],
    [
      12366,
      12367,
      10361,
      10359,
      10355,
      10354,
      12365
    ],
    [
      12368,
      12369,
      11504,
      10362,
      10361,
      12367
    ],
    [
      12369,
      12370,
      12371,
      11505,
      11504
    ],
    [
      11505,
      12371,
      12372,
      12373,
      11508,
      11506
    ],
    [
      11508,
      12373,
      12374,
      12375,
      11509
    ],
    [
      12376,
      12377,
      11510,
      11507,
      11509,
      12375
    ],
    [
      12377,
      12378,
      12379,
      11512,
      11511,
      11510
    ],
    [
      11512,
      12379,
      12380,
      12381,
      12382,
      11516,
      11513
    ],
    [
      12383,
      12384,
      12382,
      12381,
      12385
    ],
    [
      12386,
      12384,
      12383,
      12387,
      12388,
      12389
    ],
    [
      12388,
      12390,
      12391,
      12392,
      12389
    ],
    [
      12390,
      12393,
      12394,
      12395,
      12396,
      12391
    ],
    [
      12397,
      12398,
      12399,
      12395,
      12394,
      12400
    ],
    [
      12401,
      12402,
      12398,
      12397,
      12403,
      12404
    ],
    [
      12401,
      12404,
      12405,
      12406,
      12407,
      12408,
      12409
    ],
    [
      12410,
      12411,
      12412,
      12413,
      12408,
      12407,
      12414
    ],
    [
      12410,
      12415,
      12416,
      12417,
      12411
    ],
    [
      12418,
      12419,
      12420,
      12412,
      12411,
      12417
    ],
    [
      12421,
      12422,
      12423,
      12420,
      12419
    ],
    [
      12423,
      12422,
      12424,
      12425,
      12426
    ],
    [
      12425,
      12424,
      12427,
      12428,
      12429,
      12430
    ],
    [
      12431,
      12429,
      12428,
      12432,
      12433,
      12434
    ],
    [
      12435,
      12436,
      12437,
      12438,
      12439,
      12434,
      12433
    ],
    [
      12440,
      12441,
      12437,
      12436,
      12442,
      12443
    ],
    [
      12444,
      12445,
      12446,
      12440,
      12443,
      12447
    ],
    [
      12448,
      12445,
      12444,
      12449,
      12450,
      12451
    ],
    [
      12450,
      12452,
      12453,
      12454,
      12455,
      12451
    ],
    [
      12454,
      12453,
      12456,
      12457,
      12458,
      12459
    ],
    [
      12460,
      12461,
      12462,
      12458,
      12457,
      12463
    ],
    [
      12464,
      12465,
      12466,
      12461,
      12460,
      12467
    ],
    [
      12464,
      10402,
      8888,
      8887,
      12465
    ],
    [
      12386,
      11518,
      11517,
      11516,
      12382,
      12384
    ],
    [
      12386,
      12389,
      12392,
      11522,
      11519,
      11518
    ],
    [
      11526,
      11523,
      11522,
      12392,
      12391,
      12396
    ],
    [
      11526,
      12396,
      12395,
      12399,
      11530,
      11527
    ],
    [
      12398,
      12402,
      11537,
      11531,
      11530,
      12399
    ],
    [
      12401,
      12409,
      11533,
      11537,
      12402
    ],
    [
      11540,
      11534,
      11533,
      12409,
      12408,
      12413
    ],
    [
      12423,
      12426,
      11541,
      11540,
      12413,
      12412,
      12420
    ],
    [
      12425,
      12430,
      11542,
      11541,
      12426
    ],
    [
      12431,
      11547,
      11544,
      11543,
      11542,
      12430,
      12429
    ],
    [
      12431,
      12434,
      12439,
      11552,
      11548,
      11547
    ],
    [
      11554,
      11553,
      11552,
      12439,
      12438
    ],
    [
      11554,
      12438,
      12437,
      12441,
      11559,
      11555
    ],
    [
      12446,
      11561,
      11560,
      11559,
      12441,
      12440
    ],
    [
      11564,
      11562,
      11561,
      12446,
      12445,
      12448
    ],
    [
      11564,
      12448,
      12451,
      12455,
      11567,
      11565
    ],
    [
      12454,
      12459,
      11568,
      11567,
      12455
    ],
    [
      11570,
      11569,
      11568,
      12459,
      12458,
      12462
    ],
    [
      11570,
      12462,
      12461,
      12466,
      11571
    ],
    [
      8887,
      8889,
      10396,
      11571,
      12466,
      12465
    ],
    [
      10371,
      10381,
      10385,
      10387,
      10390,
      10328,
      7429,
      7428,
      10372
    ],
    [
      10329,
      10328,
      10390,
      10389,
      10393,
      12468
    ],
    [
      8881,
      10399,
      11580,
      11584,
      12469,
      12470,
      12468,
      10393,
      10392,
      8882
    ],
    [
      12471,
      12472,
      12103,
      12102,
      12473
    ],
    [
      12474,
      12475,
      12476,
      12477,
      12478
    ],
    [
      12479,
      12480,
      12481,
      12482,
      12483,
      12484,
      12485
    ],
    [
      12486,
      12487,
      12488,
      12483,
      12482,
      12489
    ],
    [
      12486,
      12490,
      12491,
      12492,
      12493,
      12487
    ],
    [
      12494,
      12492,
      12491,
      12495,
      12496,
      12497
    ],
    [
      12498,
      12499,
      12500,
      12501,
      12497,
      12496
    ],
    [
      12500,
      12499,
      12502,
      12503,
      12504,
      12505
    ],
    [
      12506,
      12507,
      12508,
      12509,
      12504,
      12503,
      12510
    ],
    [
      12506,
      12511,
      12512,
      12513,
      12514,
      12507
    ],
    [
      12513,
      12512,
      12515,
      12516,
      12517
    ],
    [
      12516,
      12518,
      12519,
      12520,
      12521,
      12517
    ],
    [
      12522,
      12523,
      12524,
      12525,
      12520,
      12519
    ],
    [
      12526,
      12527,
      12524,
      12523,
      12528,
      12529
    ],
    [
      12526,
      12529,
      12530,
      12531,
      12532
    ],
    [
      12533,
      10404,
      10403,
      12532,
      12531,
      12534
    ],
    [
      12533,
      12535,
      12536,
      11576,
      10405,
      10404
    ],
    [
      12536,
      12537,
      12538,
      11577,
      11576
    ],
    [
      11572,
      11577,
      12538,
      12539,
      12540,
      11573
    ],
    [
      11574,
      11573,
      12540,
      12541,
      12542
    ],
    [
      12543,
      11578,
      11575,
      11574,
      12542,
      12544
    ],
    [
      12543,
      12545,
      12546,
      11581,
      11579,
      11578
    ],
    [
      12546,
      12547,
      12548,
      12549,
      11582,
      11581
    ],
    [
      12550,
      12549,
      12548,
      12551,
      12552
    ],
    [
      12553,
      12550,
      12552,
      12554,
      12555,
      12556,
      12557
    ],
    [
      11585,
      11587,
      10214,
      8659,
      7131,
      7130
    ],
    [
      10214,
      11587,
      11586,
      11589,
      12558,
      10215
    ],
    [
      11588,
      11591,
      12559,
      12560,
      12558,
      11589
    ],
    [
      11590,
      11593,
      12561,
      12562,
      12559,
      11591
    ],
    [
      11595,
      12563,
      12564,
      12561,
      11593,
      11592
    ],
    [
      11595,
      11594,
      11597,
      12565,
      12566,
      12563
    ],
    [
      11596,
      11599,
      12567,
      12568,
      12565,
      11597
    ],
    [
      12569,
      12570,
      12567,
      11599,
      11598,
      11601
    ],
    [
      12571,
      12569,
      11601,
      11600,
      11603,
      12572
    ],
    [
      11603,
      11602,
      11605,
      12573,
      12574,
      12572
    ],
    [
      11604,
      11607,
      12575,
      12576,
      12573,
      11605
    ],
    [
      11606,
      11609,
      12577,
      12578,
      12575,
      11607
    ],
    [
      11611,
      12579,
      12580,
      12577,
      11609,
      11608
    ],
    [
      11610,
      11613,
      12581,
      12582,
      12579,
      11611
    ],
    [
      12581,
      11613,
      11612,
      11615,
      12583,
      12584
    ],
    [
      11618,
      12585,
      12586,
      12583,
      11615,
      11614
    ],
    [
      11618,
      11617,
      12587,
      12588,
      12589,
      12585
    ],
    [
      12590,
      12591,
      12592,
      12587,
      11617,
      11616
    ],
    [
      12593,
      12594,
      12595,
      12596,
      12591,
      12590,
      12597
    ],
    [
      12598,
      12599,
      12600,
      12595,
      12594
    ],
    [
      11687,
      11686,
      11689,
      12601,
      11771
    ],
    [
      11688,
      11691,
      10333,
      10332,
      12602,
      12601,
      11689
    ],
    [
      10334,
      10333,
      11691,
      11690,
      11693
    ],
    [
      7425,
      10334,
      11693,
      11692,
      11694,
      11695,
      7426
    ],
    [
      11702,
      12603,
      12477,
      12476,
      12604,
      12101,
      12100,
      11703
    ],
    [
      11702,
      11705,
      11707,
      12605,
      12606,
      12481,
      12480,
      12603
    ],
    [
      12605,
      12607,
      12608,
      12609,
      12606
    ],
    [
      12610,
      12611,
      12608,
      12607,
      12612,
      12613,
      12614,
      12615
    ],
    [
      12616,
      12617,
      12618,
      12615,
      12614,
      12619
    ],
    [
      12616,
      12620,
      12621,
      12622,
      12623,
      12617
    ],
    [
      12624,
      12625,
      12626,
      12622,
      12621,
      12627
    ],
    [
      12624,
      12628,
      12629,
      12630,
      12631,
      12625
    ],
    [
      12632,
      12633,
      12630,
      12629,
      12634,
      12635
    ],
    [
      12632,
      12635,
      12636,
      12637,
      12638,
      12639
    ],
    [
      12638,
      12637,
      12640,
      12641,
      12642,
      12643
    ],
    [
      12644,
      12645,
      12646,
      12642,
      12641,
      12647
    ],
    [
      12644,
      12648,
      12649,
      12650,
      12651,
      12645
    ],
    [
      12652,
      12650,
      12649,
      12653,
      12654,
      12655
    ],
    [
      12656,
      12657,
      12658,
      12655,
      12654,
      12659
    ],
    [
      12660,
      12661,
      12657,
      12656,
      12662,
      12663
    ],
    [
      12664,
      12665,
      12666,
      12667,
      12660,
      12663
    ],
    [
      12666,
      12665,
      12668,
      12669,
      12670,
      12671
    ],
    [
      12672,
      12673,
      12670,
      12669,
      12674,
      12675
    ],
    [
      12672,
      12675,
      12676,
      12677,
      12678,
      12679
    ],
    [
      12677,
      12680,
      12681,
      12682,
      12683,
      12678
    ],
    [
      12684,
      12685,
      12686,
      12687,
      12682,
      12681
    ],
    [
      12685,
      12688,
      12689,
      12690,
      12691,
      12686
    ],
    [
      12692,
      12693,
      12694,
      12695,
      12690,
      12689
    ],
    [
      12696,
      12697,
      12698,
      12699,
      12694,
      12693
    ],
    [
      12700,
      12701,
      12702,
      12703,
      12698,
      12697
    ],
    [
      12704,
      12705,
      12706,
      12707,
      12702,
      12701
    ],
    [
      12708,
      12709,
      12710,
      12705,
      12704,
      12711
    ],
    [
      12712,
      12709,
      12708,
      12713,
      12714,
      12715
    ],
    [
      12716,
      12717,
      12712,
      12715,
      12718
    ],
    [
      12716,
      12718,
      12719,
      12720,
      12721
    ],
    [
      12720,
      12722,
      12723,
      12724,
      12725,
      12721
    ],
    [
      11700,
      11699,
      12111,
      11704,
      11703,
      12100
    ],
    [
      12605,
      11707,
      11706,
      11709,
      12612,
      12607
    ],
    [
      11708,
      11711,
      12613,
      12612,
      11709
    ],
    [
      11714,
      12619,
      12614,
      12613,
      11711,
      11710
    ],
    [
      12616,
      12619,
      11714,
      11713,
      12620
    ],
    [
      12627,
      12621,
      12620,
      11713,
      11712,
      11716
    ],
    [
      12624,
      12627,
      11716,
      11715,
      11718,
      12628
    ],
    [
      12634,
      12629,
      12628,
      11718,
      11717,
      11720
    ],
    [
      12634,
      11720,
      11719,
      11722,
      12636,
      12635
    ],
    [
      11722,
      11721,
      11724,
      12640,
      12637,
      12636
    ],
    [
      11725,
      12647,
      12641,
      12640,
      11724,
      11723
    ],
    [
      12644,
      12647,
      11725,
      11726,
      11728,
      12648
    ],
    [
      11730,
      12653,
      12649,
      12648,
      11728,
      11727
    ],
    [
      11730,
      11729,
      11732,
      12659,
      12654,
      12653
    ],
    [
      11732,
      11731,
      11734,
      12662,
      12656,
      12659
    ],
    [
      12664,
      12663,
      12662,
      11734,
      11733,
      11736
    ],
    [
      11737,
      12668,
      12665,
      12664,
      11736,
      11735
    ],
    [
      11737,
      11738,
      11740,
      12674,
      12669,
      12668
    ],
    [
      12674,
      11740,
      11739,
      11741,
      12676,
      12675
    ],
    [
      12677,
      12676,
      11741,
      11742,
      11744,
      12680
    ],
    [
      11745,
      12684,
      12681,
      12680,
      11744,
      11743
    ],
    [
      11745,
      11746,
      11748,
      12688,
      12685,
      12684
    ],
    [
      11748,
      11747,
      11750,
      12692,
      12689,
      12688
    ],
    [
      11751,
      12696,
      12693,
      12692,
      11750,
      11749
    ],
    [
      11751,
      11752,
      11753,
      12700,
      12697,
      12696
    ],
    [
      12704,
      12701,
      12700,
      11753,
      11754,
      11756,
      12711
    ],
    [
      12708,
      12711,
      11756,
      11755,
      11758,
      12713
    ],
    [
      11761,
      12714,
      12713,
      11758,
      11757
    ],
    [
      11760,
      12719,
      12718,
      12715,
      12714,
      11761
    ],
    [
      11760,
      11759,
      11763,
      12722,
      12720,
      12719
    ],
    [
      11762,
      11765,
      12723,
      12722,
      11763
    ],
    [
      11764,
      11766,
      11768,
      12724,
      12723,
      11765
    ],
    [
      11770,
      11771,
      12601,
      12602,
      12725,
      12724,
      11768,
      11767,
      11769
    ],
    [
      11777,
      11775,
      11776,
      12140,
      12161
    ],
    [
      11777,
      12161,
      12163,
      12726,
      11779,
      11778
    ],
    [
      11780,
      11779,
      12726,
      12727,
      12728,
      11781
    ],
    [
      11782,
      11781,
      12728,
      12729,
      11783
    ],
    [
      11784,
      11783,
      12729,
      12730,
      12731,
      11785
    ],
    [
      12732,
      11787,
      11786,
      11785,
      12731,
      12733
    ],
    [
      11789,
      11788,
      11787,
      12732,
      12734
    ],
    [
      11789,
      12734,
      12735,
      12736,
      11791,
      11790
    ],
    [
      11793,
      11792,
      11791,
      12736,
      12737,
      11794
    ],
    [
      11795,
      11794,
      12737,
      12738,
      12739,
      11797,
      11796
    ],
    [
      11800,
      11798,
      11797,
      12739,
      12740
    ],
    [
      12741,
      11801,
      11799,
      11800,
      12740
    ],
    [
      11803,
      11802,
      11801,
      12741,
      12742
    ],
    [
      11803,
      12742,
      12743,
      11804
    ],
    [
      12744,
      12745,
      11806,
      11805,
      11804,
      12743
    ],
    [
      11809,
      11808,
      11807,
      11806,
      12745,
      12746
    ],
    [
      11809,
      12746,
      12747,
      12748,
      11811,
      11810
    ],
    [
      12748,
      12749,
      11813,
      11812,
      11811
    ],
    [
      11813,
      12749,
      12750,
      11815,
      11814
    ],
    [
      12751,
      11817,
      11816,
      11815,
      12750
    ],
    [
      11820,
      11819,
      11818,
      11817,
      12751,
      12170,
      11821
    ],
    [
      12752,
      12753,
      12754,
      11852,
      11849,
      11848
    ],
    [
      11852,
      12754,
      12755,
      12756,
      12757,
      11857,
      11853
    ],
    [
      11859,
      11858,
      11857,
      12757,
      12758,
      12759
    ],
    [
      11859,
      12759,
      12760,
      12761,
      11865,
      11860
    ],
    [
      11869,
      11866,
      11865,
      12761,
      12762,
      12763
    ],
    [
      11869,
      12763,
      12764,
      12765,
      11872,
      11870
    ],
    [
      11872,
      12765,
      10747,
      10746,
      11877,
      11873
    ],
    [
      12752,
      11848,
      11847,
      11846,
      12766
    ],
    [
      12118,
      11827,
      11826
    ],
    [
      12767,
      11836,
      11835,
      12121,
      11830,
      11829
    ],
    [
      11843,
      11838,
      11833,
      11832,
      11844
    ],
    [
      11843,
      11842,
      12125,
      11837,
      11838
    ],
    [
      11839,
      12768,
      12769,
      12770,
      12771,
      12772,
      12766,
      11846,
      11840
    ],
    [
      12773,
      12774,
      11891,
      11890,
      11889,
      12775,
      12776
    ],
    [
      11893,
      11892,
      11891,
      12774,
      12777,
      12778
    ],
    [
      11893,
      12778,
      12779,
      11895,
      11894
    ],
    [
      12780,
      12781,
      11898,
      11897,
      11896,
      11895,
      12779
    ],
    [
      11899,
      11898,
      12781,
      12782,
      12783,
      11900
    ],
    [
      12784,
      11902,
      11901,
      11900,
      12783,
      12785
    ],
    [
      11906,
      11903,
      11902,
      12784,
      12786
    ],
    [
      11904,
      11906,
      12786,
      12787,
      12788,
      11907
    ],
    [
      11908,
      11907,
      12788,
      12789,
      12790,
      11914
    ],
    [
      11911,
      11914,
      12790,
      12791,
      12792,
      11916
    ],
    [
      11916,
      12792,
      12793,
      11925,
      11920,
      11917
    ],
    [
      11929,
      11922,
      11925,
      12793,
      12794
    ],
    [
      11926,
      11929,
      12794,
      12795,
      11933,
      11930
    ],
    [
      11933,
      12795,
      12796,
      12797,
      11941,
      11934
    ],
    [
      12798,
      12799,
      12797,
      12796,
      12800
    ],
    [
      12801,
      12802,
      12803,
      12804,
      12799,
      12798
    ],
    [
      12803,
      12802,
      12805,
      12806,
      12807,
      12808
    ],
    [
      12809,
      12810,
      12811,
      12806,
      12805
    ],
    [
      12809,
      12812,
      12813,
      12810
    ],
    [
      11975,
      11974,
      12813,
      12812,
      12814,
      12815
    ],
    [
      12816,
      12815,
      12814,
      12817,
      12818,
      12819
    ],
    [
      11984,
      11985,
      12189,
      12820,
      12821,
      11987,
      11986
    ],
    [
      12821,
      12822,
      11989,
      11988,
      11987
    ],
    [
      11990,
      11989,
      12822,
      12823,
      12824,
      11993,
      11992,
      11991
    ],
    [
      11995,
      11994,
      11993,
      12824,
      12825,
      11996
    ],
    [
      11998,
      11997,
      11996,
      12825,
      12826,
      12827,
      11999
    ],
    [
      12000,
      11999,
      12827,
      12828,
      12203,
      12002,
      12001
    ],
    [
      6677,
      8345,
      8344,
      12004,
      12006,
      12054,
      6678
    ],
    [
      12006,
      12005,
      12008,
      12061,
      12055,
      12054
    ],
    [
      12058,
      12061,
      12008,
      12007,
      12010,
      12063
    ],
    [
      12063,
      12010,
      12009,
      12012,
      12068,
      12064
    ],
    [
      12013,
      12069,
      12066,
      12068,
      12012,
      12011
    ],
    [
      12013,
      12014,
      12016,
      12075,
      12070,
      12069
    ],
    [
      12020,
      12024,
      12075,
      12016,
      12015,
      12017
    ],
    [
      12020,
      12017,
      10965,
      10964,
      12019,
      12021
    ],
    [
      12039,
      12041,
      12829,
      12081
    ],
    [
      12830,
      12831,
      12832,
      12833,
      12829,
      12041,
      12040,
      12043
    ],
    [
      12830,
      12043,
      12042,
      12045,
      12834
    ],
    [
      12835,
      12834,
      12045,
      12044,
      12047,
      12836,
      12837,
      12838,
      12839,
      12840
    ],
    [
      12841,
      12842,
      12843,
      12844,
      12845,
      12846
    ],
    [
      12847,
      12848,
      12849,
      12850,
      12851
    ],
    [
      12852,
      12853,
      12848,
      12847,
      5286,
      5285
    ],
    [
      1253,
      1252,
      12854,
      12852,
      5285,
      3809,
      2779
    ],
    [
      12074,
      12855,
      12856,
      12072,
      12071
    ],
    [
      12074,
      12076,
      12857,
      12858,
      12855
    ],
    [
      12859,
      12857,
      12076,
      12023,
      12022,
      12078,
      12860
    ],
    [
      12077,
      12080,
      12084,
      12083,
      12860,
      12078
    ],
    [
      10976,
      12081,
      12829,
      12833,
      12861,
      12079,
      10977
    ],
    [
      12082,
      12087,
      12862,
      12863,
      12864,
      12865,
      12866
    ],
    [
      12867,
      12862,
      12087,
      12086,
      12089,
      12868
    ],
    [
      12868,
      12089,
      12088,
      12861,
      12833,
      12832,
      12869
    ],
    [
      12831,
      12870,
      12871,
      12869,
      12832
    ],
    [
      12872,
      8248,
      8247,
      12057,
      12873
    ],
    [
      12874,
      12875,
      12873,
      12057,
      12056,
      12060
    ],
    [
      12062,
      12876,
      12877,
      12874,
      12060,
      12059
    ],
    [
      12062,
      12065,
      12067,
      12073,
      12878,
      12879,
      12876
    ],
    [
      8554,
      8553,
      8555,
      10042,
      10039
    ],
    [
      7024,
      10043,
      10042,
      8555,
      7025
    ],
    [
      12880,
      12881,
      12091,
      12090,
      12092,
      12093,
      12882
    ],
    [
      12882,
      12093,
      12094,
      12096,
      12883,
      12884
    ],
    [
      12880,
      12882,
      12884,
      12885,
      12886
    ],
    [
      12887,
      12888,
      12889,
      12890,
      12891,
      12892
    ],
    [
      12893,
      12891,
      12890,
      12894,
      12895
    ],
    [
      12887,
      12896,
      12897,
      12898,
      12899,
      12888
    ],
    [
      12900,
      12901,
      12894,
      12890,
      12889
    ],
    [
      12902,
      12898,
      12897,
      12903,
      12904
    ],
    [
      12905,
      12906,
      12900,
      12889,
      12888,
      12899
    ],
    [
      12484,
      12907,
      12901,
      12900,
      12906,
      12485
    ],
    [
      12905,
      12899,
      12898,
      12902,
      12475,
      12474
    ],
    [
      12479,
      12485,
      12906,
      12905,
      12474,
      12478
    ],
    [
      12471,
      12473,
      12604,
      12476,
      12475,
      12902,
      12904
    ],
    [
      12908,
      12110,
      12109,
      12104,
      12103,
      12472
    ],
    [
      12113,
      10443,
      10442,
      12111,
      11699,
      11698
    ],
    [
      11831,
      11836,
      12767,
      12112,
      12106,
      12105,
      12115
    ],
    [
      12097,
      12769,
      12768,
      12114,
      12108,
      12098
    ],
    [
      10994,
      10999,
      12909,
      12770,
      12769,
      12097
    ],
    [
      7543,
      7542,
      11828,
      11827,
      12118,
      9374
    ],
    [
      12112,
      12767,
      11829,
      11828,
      7542,
      7541,
      9212,
      10443,
      12113
    ],
    [
      12117,
      11007,
      11006,
      10625,
      10628,
      12116
    ],
    [
      12117,
      12120,
      12143,
      11008,
      11007
    ],
    [
      11018,
      11022,
      12165,
      12166,
      12168,
      12727,
      12726,
      12163,
      12162,
      12164
    ],
    [
      12172,
      12910,
      12911,
      12912,
      12913,
      12173
    ],
    [
      12914,
      11028,
      11027,
      12173,
      12913,
      12915
    ],
    [
      12183,
      12182,
      12181,
      12180
    ],
    [
      9933,
      9932,
      9940,
      12185,
      12184,
      12183,
      12180
    ],
    [
      12916,
      12917,
      12918,
      12919,
      12920
    ],
    [
      12916,
      12921,
      12922,
      12923,
      12917
    ],
    [
      8260,
      8263,
      12924,
      12923,
      12922,
      11201,
      11200,
      11034
    ],
    [
      11035,
      11034,
      11200,
      11198,
      11197
    ],
    [
      9947,
      9946,
      11035,
      11197,
      9950,
      9949
    ],
    [
      12194,
      12196,
      12925,
      12192,
      12191,
      12193
    ],
    [
      12190,
      12192,
      12925,
      12926,
      12927,
      12188,
      12187
    ],
    [
      12188,
      12927,
      12820,
      12189
    ],
    [
      12928,
      12823,
      12822,
      12821,
      12820,
      12927,
      12926,
      12929
    ],
    [
      12928,
      12930,
      12826,
      12825,
      12824,
      12823
    ],
    [
      12930,
      12931,
      12828,
      12827,
      12826
    ],
    [
      12202,
      12201,
      12203,
      12828,
      12931
    ],
    [
      12199,
      12929,
      12926,
      12925,
      12196,
      12195,
      12197,
      12198
    ],
    [
      12928,
      12929,
      12199,
      12200,
      12202,
      12931,
      12930
    ],
    [
      10341,
      8892,
      8891,
      12204,
      12205
    ],
    [
      12210,
      10340,
      10339,
      10341,
      12205,
      12206,
      12207
    ],
    [
      12210,
      12209,
      10338,
      10337,
      10340
    ],
    [
      10335,
      10338,
      12209,
      12208,
      12212,
      12347
    ],
    [
      12349,
      12348,
      12347,
      12212,
      12211,
      12214
    ],
    [
      12349,
      12214,
      12213,
      12215,
      12351,
      12350
    ],
    [
      12353,
      12352,
      12351,
      12215,
      12216,
      12217
    ],
    [
      12219,
      12355,
      12354,
      12353,
      12217,
      12218
    ],
    [
      12357,
      12356,
      12355,
      12219,
      12220,
      12222
    ],
    [
      12357,
      12222,
      12221,
      12224,
      12359,
      12358
    ],
    [
      12359,
      12224,
      12223,
      12226,
      12360
    ],
    [
      12361,
      12360,
      12226,
      12225,
      12228,
      12362
    ],
    [
      12227,
      12230,
      12364,
      12363,
      12362,
      12228
    ],
    [
      12366,
      12365,
      12364,
      12230,
      12229,
      12232
    ],
    [
      12368,
      12367,
      12366,
      12232,
      12231,
      12234
    ],
    [
      12368,
      12234,
      12233,
      12236,
      12370,
      12369
    ],
    [
      12236,
      12235,
      12238,
      12372,
      12371,
      12370
    ],
    [
      12237,
      12240,
      12374,
      12373,
      12372,
      12238
    ],
    [
      12376,
      12375,
      12374,
      12240,
      12239,
      12241
    ],
    [
      12376,
      12241,
      12242,
      12244,
      12378,
      12377
    ],
    [
      12378,
      12244,
      12243,
      12245,
      12380,
      12379
    ],
    [
      12380,
      12245,
      12246,
      12248,
      12385,
      12381
    ],
    [
      12249,
      12387,
      12383,
      12385,
      12248,
      12247
    ],
    [
      12388,
      12387,
      12249,
      12250,
      12252,
      12393,
      12390
    ],
    [
      12393,
      12252,
      12251,
      12254,
      12400,
      12394
    ],
    [
      12397,
      12400,
      12254,
      12253,
      12257,
      12403
    ],
    [
      12256,
      12405,
      12404,
      12403,
      12257
    ],
    [
      12258,
      12406,
      12405,
      12256,
      12255
    ],
    [
      12258,
      12259,
      12260,
      12414,
      12407,
      12406
    ],
    [
      12932,
      12415,
      12410,
      12414,
      12260,
      12261,
      12262
    ],
    [
      12887,
      12892,
      12264,
      12263,
      12933,
      12896
    ],
    [
      12893,
      12932,
      12262,
      12264,
      12892,
      12891
    ],
    [
      12893,
      12895,
      12934,
      12416,
      12415,
      12932
    ],
    [
      12935,
      12418,
      12417,
      12416,
      12934,
      12936
    ],
    [
      12935,
      12937,
      12938,
      12421,
      12419,
      12418
    ],
    [
      12939,
      12940,
      12427,
      12424,
      12422,
      12421,
      12938
    ],
    [
      12432,
      12428,
      12427,
      12940,
      12941,
      12942
    ],
    [
      12435,
      12433,
      12432,
      12942,
      12943
    ],
    [
      12435,
      12943,
      12944,
      12945,
      12442,
      12436
    ],
    [
      12946,
      12947,
      12447,
      12443,
      12442,
      12945
    ],
    [
      12266,
      11307,
      11306,
      11421,
      12948,
      12949
    ],
    [
      12265,
      12266,
      12949,
      12950,
      12951,
      12267
    ],
    [
      12952,
      12269,
      12268,
      12267,
      12951,
      12953
    ],
    [
      12952,
      12954,
      12955,
      12272,
      12270,
      12269
    ],
    [
      12271,
      12272,
      12955,
      12956,
      12957,
      12273
    ],
    [
      12958,
      12959,
      12275,
      12274,
      12273,
      12957
    ],
    [
      12959,
      12960,
      12961,
      12278,
      12276,
      12275
    ],
    [
      12277,
      12278,
      12961,
      12962,
      12963,
      12279
    ],
    [
      12964,
      12965,
      12282,
      12280,
      12279,
      12963
    ],
    [
      12283,
      12281,
      12282,
      12965,
      12966,
      12967
    ],
    [
      12283,
      12967,
      12968,
      12969,
      12285,
      12284
    ],
    [
      12285,
      12969,
      12970,
      12971,
      12288,
      12286
    ],
    [
      12287,
      12288,
      12971,
      12972,
      12973,
      12289
    ],
    [
      12973,
      12974,
      12975,
      12291,
      12290,
      12289
    ],
    [
      12976,
      12977,
      12293,
      12292,
      12291,
      12975
    ],
    [
      12978,
      12979,
      12296,
      12295,
      12294,
      12293,
      12977
    ],
    [
      12980,
      12298,
      12297,
      12296,
      12979,
      12981
    ],
    [
      12980,
      12982,
      12983,
      12300,
      12299,
      12298
    ],
    [
      12302,
      12301,
      12300,
      12983,
      12984,
      12985
    ],
    [
      12302,
      12985,
      12986,
      12305,
      12304,
      12303
    ],
    [
      12987,
      12314,
      12310,
      12306,
      12305,
      12986
    ],
    [
      9727,
      9726,
      9722,
      9721,
      11032
    ],
    [
      9730,
      9734,
      9729,
      9728,
      11033
    ],
    [
      9741,
      9740,
      9732,
      9731
    ],
    [
      10786,
      10789,
      12988,
      11888,
      10791
    ],
    [
      10789,
      10788,
      12316,
      12317,
      12319,
      12989,
      12990,
      12988
    ],
    [
      12991,
      12989,
      12319,
      12318
    ],
    [
      11428,
      12992,
      12991,
      12318,
      11429
    ],
    [
      12993,
      12994,
      12992,
      11428,
      8748,
      8747,
      12321
    ],
    [
      12995,
      12996,
      12997,
      12993,
      12321,
      12320,
      12322,
      12323,
      12326
    ],
    [
      12324,
      12327,
      12328,
      12998,
      12325
    ],
    [
      12999,
      13000,
      12998,
      12328,
      12330,
      13001
    ],
    [
      12331,
      13002,
      13001,
      12330,
      12329
    ],
    [
      12331,
      12332,
      12334,
      13003,
      13004,
      13002
    ],
    [
      12335,
      12337,
      13005,
      13006,
      13003,
      12334,
      12333
    ],
    [
      13007,
      13005,
      12337,
      12336,
      12339,
      13008
    ],
    [
      12340,
      13009,
      13010,
      13008,
      12339,
      12338
    ],
    [
      12340,
      12341,
      12343,
      13011,
      13009
    ],
    [
      13011,
      12343,
      12342,
      12345,
      12819,
      12818
    ],
    [
      12344,
      12346,
      12816,
      12819,
      12345
    ],
    [
      12816,
      12346,
      11981,
      11976,
      11975,
      12815
    ],
    [
      12901,
      12907,
      12936,
      12934,
      12895,
      12894
    ],
    [
      12484,
      12483,
      12488,
      12937,
      12935,
      12936,
      12907
    ],
    [
      12488,
      12487,
      12493,
      12939,
      12938,
      12937
    ],
    [
      12939,
      12493,
      12492,
      12494,
      12941,
      12940
    ],
    [
      12494,
      12497,
      12501,
      12944,
      12943,
      12942,
      12941
    ],
    [
      12946,
      12945,
      12944,
      12501,
      12500,
      12505
    ],
    [
      12946,
      12505,
      12504,
      12509,
      12947
    ],
    [
      12947,
      12509,
      12508,
      12449,
      12444,
      12447
    ],
    [
      12514,
      12452,
      12450,
      12449,
      12508,
      12507
    ],
    [
      12513,
      12517,
      12521,
      12456,
      12453,
      12452,
      12514
    ],
    [
      12520,
      12525,
      12463,
      12457,
      12456,
      12521
    ],
    [
      12460,
      12463,
      12525,
      12524,
      12527,
      12467
    ],
    [
      12526,
      12532,
      10403,
      10402,
      12464,
      12467,
      12527
    ],
    [
      10215,
      12558,
      12560,
      12948,
      11421,
      10216
    ],
    [
      12562,
      12950,
      12949,
      12948,
      12560,
      12559
    ],
    [
      12562,
      12561,
      12564,
      12953,
      12951,
      12950
    ],
    [
      12952,
      12953,
      12564,
      12563,
      12566,
      12954
    ],
    [
      12568,
      12956,
      12955,
      12954,
      12566,
      12565
    ],
    [
      12568,
      12567,
      12570,
      12958,
      12957,
      12956
    ],
    [
      12571,
      12960,
      12959,
      12958,
      12570,
      12569
    ],
    [
      12571,
      12572,
      12574,
      12962,
      12961,
      12960
    ],
    [
      12964,
      12963,
      12962,
      12574,
      12573,
      12576
    ],
    [
      12964,
      12576,
      12575,
      12578,
      12966,
      12965
    ],
    [
      12968,
      12967,
      12966,
      12578,
      12577,
      12580
    ],
    [
      12969,
      12968,
      12580,
      12579,
      12582,
      12970
    ],
    [
      12970,
      12582,
      12581,
      12584,
      12972,
      12971
    ],
    [
      12584,
      12583,
      12586,
      12974,
      12973,
      12972
    ],
    [
      12976,
      12975,
      12974,
      12586,
      12585,
      12589
    ],
    [
      12976,
      12589,
      12588,
      12978,
      12977
    ],
    [
      12587,
      12592,
      12981,
      12979,
      12978,
      12588
    ],
    [
      12980,
      12981,
      12592,
      12591,
      12596,
      12982
    ],
    [
      12983,
      12982,
      12596,
      12595,
      12600,
      12984
    ],
    [
      12987,
      12986,
      12985,
      12984,
      12600,
      12599,
      13012
    ],
    [
      12752,
      12766,
      12772,
      13013,
      13014,
      12753
    ],
    [
      12754,
      12753,
      13014,
      13015,
      13016,
      12755
    ],
    [
      13017,
      12756,
      12755,
      13016,
      13018,
      13019
    ],
    [
      13020,
      13021,
      12771,
      12770,
      12909,
      13022
    ],
    [
      12598,
      13023,
      13024,
      13025,
      13012,
      12599
    ],
    [
      12593,
      13026,
      13027,
      13023,
      12598,
      12594
    ],
    [
      11696,
      11701,
      12101,
      12604,
      12473,
      12102
    ],
    [
      12479,
      12478,
      12477,
      12603,
      12480
    ],
    [
      12482,
      12481,
      12606,
      12609,
      12489
    ],
    [
      12486,
      12489,
      12609,
      12608,
      12611,
      12490
    ],
    [
      12490,
      12611,
      12610,
      12495,
      12491
    ],
    [
      12498,
      12496,
      12495,
      12610,
      12615,
      12618
    ],
    [
      12498,
      12618,
      12617,
      12623,
      12502,
      12499
    ],
    [
      12510,
      12503,
      12502,
      12623,
      12622,
      12626
    ],
    [
      12506,
      12510,
      12626,
      12625,
      12631,
      12511
    ],
    [
      12630,
      12633,
      12515,
      12512,
      12511,
      12631
    ],
    [
      12632,
      12639,
      12518,
      12516,
      12515,
      12633
    ],
    [
      12638,
      12643,
      12522,
      12519,
      12518,
      12639
    ],
    [
      12642,
      12646,
      12528,
      12523,
      12522,
      12643
    ],
    [
      12530,
      12529,
      12528,
      12646,
      12645,
      12651
    ],
    [
      12652,
      12534,
      12531,
      12530,
      12651,
      12650
    ],
    [
      12652,
      12655,
      12658,
      12535,
      12533,
      12534
    ],
    [
      12536,
      12535,
      12658,
      12657,
      12661,
      12537
    ],
    [
      12660,
      12667,
      12539,
      12538,
      12537,
      12661
    ],
    [
      12667,
      12666,
      12671,
      12541,
      12540,
      12539
    ],
    [
      12544,
      12542,
      12541,
      12671,
      12670,
      12673
    ],
    [
      12543,
      12544,
      12673,
      12672,
      12679,
      12545
    ],
    [
      12679,
      12678,
      12683,
      12547,
      12546,
      12545
    ],
    [
      12687,
      12551,
      12548,
      12547,
      12683,
      12682
    ],
    [
      12687,
      12686,
      12691,
      12554,
      12552,
      12551
    ],
    [
      12691,
      12690,
      12695,
      12555,
      12554
    ],
    [
      12699,
      13028,
      13029,
      12556,
      12555,
      12695,
      12694
    ],
    [
      12699,
      12698,
      12703,
      13030,
      13028
    ],
    [
      12707,
      13031,
      13030,
      12703,
      12702
    ],
    [
      12707,
      12706,
      13032,
      13033,
      13031
    ],
    [
      13034,
      13032,
      12706,
      12705,
      12710
    ],
    [
      12712,
      12717,
      13035,
      13034,
      12710,
      12709
    ],
    [
      12716,
      12721,
      12725,
      12602,
      10332,
      10331,
      13035,
      12717
    ],
    [
      12732,
      12733,
      12915,
      12913,
      12912,
      12735,
      12734
    ],
    [
      12914,
      12915,
      12733,
      12731,
      12730
    ],
    [
      12914,
      12730,
      12729,
      12728,
      12727,
      12168,
      12167,
      11029,
      11028
    ],
    [
      12735,
      12912,
      12911,
      12738,
      12737,
      12736
    ],
    [
      12744,
      12743,
      12742,
      12741,
      12740,
      12739,
      12738,
      12911,
      12910
    ],
    [
      12744,
      12910,
      12172,
      12171,
      12747,
      12746,
      12745
    ],
    [
      12169,
      12170,
      12751,
      12750,
      12749,
      12748,
      12747,
      12171
    ],
    [
      12758,
      12757,
      12756,
      13017,
      13036,
      13037
    ],
    [
      12758,
      13037,
      13038,
      13039,
      12760,
      12759
    ],
    [
      12761,
      12760,
      13039,
      13040,
      13041,
      12762
    ],
    [
      13041,
      13042,
      13043,
      12764,
      12763,
      12762
    ],
    [
      9473,
      10747,
      12765,
      12764,
      13043,
      9050,
      9049,
      9124
    ],
    [
      11831,
      12115,
      12114,
      12768,
      11839,
      11844,
      11832
    ],
    [
      13044,
      12780,
      12779,
      12778,
      12777,
      13045
    ],
    [
      12773,
      13046,
      13045,
      12777,
      12774
    ],
    [
      12773,
      12776,
      12994,
      12993,
      12997,
      13047,
      13046
    ],
    [
      13048,
      13049,
      12996,
      12995,
      13050
    ],
    [
      13048,
      13050,
      13000,
      12999,
      13051,
      13052
    ],
    [
      13053,
      13054,
      13052,
      13051,
      13055
    ],
    [
      13053,
      13055,
      13056,
      13057,
      13058
    ],
    [
      13058,
      13057,
      13059,
      13060,
      13061,
      13062
    ],
    [
      13063,
      13061,
      13060,
      13064,
      13065
    ],
    [
      13066,
      13063,
      13065,
      13067,
      13068
    ],
    [
      13066,
      13068,
      12817,
      12814,
      12812,
      12809,
      12805,
      12802,
      12801
    ],
    [
      13044,
      13069,
      13070,
      12782,
      12781,
      12780
    ],
    [
      13070,
      13071,
      13072,
      12785,
      12783,
      12782
    ],
    [
      12786,
      12784,
      12785,
      13072,
      13073,
      12787
    ],
    [
      13074,
      12789,
      12788,
      12787,
      13073
    ],
    [
      12791,
      12790,
      12789,
      13074,
      13075
    ],
    [
      12791,
      13075,
      13076,
      12800,
      12796,
      12795,
      12794,
      12793,
      12792
    ],
    [
      11952,
      11951,
      11946,
      11942,
      11941,
      12797,
      12799,
      12804
    ],
    [
      11952,
      12804,
      12803,
      12808,
      11957,
      11953
    ],
    [
      11958,
      11957,
      12808,
      12807,
      11962
    ],
    [
      11963,
      11962,
      12807,
      12806,
      12811,
      11964
    ],
    [
      11971,
      11968,
      11965,
      11964,
      12811,
      12810,
      12813,
      11974
    ],
    [
      12872,
      13077,
      13078,
      12924,
      8263,
      8249,
      8248
    ],
    [
      13079,
      13080,
      13078,
      13077,
      13081
    ],
    [
      13080,
      12918,
      12917,
      12923,
      12924,
      13078
    ],
    [
      13079,
      13082,
      13083,
      12919,
      12918,
      13080
    ],
    [
      13083,
      13082,
      13084,
      13085,
      13086,
      13087,
      13088
    ],
    [
      13089,
      13090,
      13091,
      13087,
      13086
    ],
    [
      13092,
      13090,
      13089,
      13093,
      13094,
      13095
    ],
    [
      13095,
      13094,
      13096,
      13097,
      13098,
      13099
    ],
    [
      13100,
      13101,
      13102,
      13103,
      13098,
      13097
    ],
    [
      13104,
      13102,
      13101,
      12865,
      12864,
      13105
    ],
    [
      13105,
      12864,
      12863,
      13106,
      13107
    ],
    [
      12867,
      13108,
      13109,
      13106,
      12863,
      12862
    ],
    [
      12867,
      12868,
      12869,
      12871,
      13110,
      13108
    ],
    [
      12835,
      13111,
      12870,
      12831,
      12830,
      12834
    ],
    [
      12870,
      13111,
      13112,
      13113,
      13110,
      12871
    ],
    [
      13114,
      12839,
      12838,
      12843,
      12842
    ],
    [
      13114,
      12842,
      12841,
      12850,
      12849,
      13115,
      13116
    ],
    [
      13115,
      12849,
      12848,
      12853,
      13117,
      13118,
      13119
    ],
    [
      13120,
      13121,
      13117,
      12853,
      12852,
      12854
    ],
    [
      13120,
      12854,
      1252,
      1250,
      1249,
      2624,
      2623,
      13122
    ],
    [
      12046,
      12048,
      12050,
      12052,
      13123,
      12836,
      12047
    ],
    [
      12844,
      13124,
      13125,
      13126,
      13127,
      12845
    ],
    [
      7020,
      5287,
      5286,
      12847,
      12851,
      13128,
      13129
    ],
    [
      13081,
      13077,
      12872,
      12873,
      12875
    ],
    [
      13079,
      13081,
      12875,
      12874,
      12877,
      13084,
      13082
    ],
    [
      13085,
      13084,
      12877,
      12876,
      12879
    ],
    [
      13089,
      13086,
      13085,
      12879,
      12878,
      13093
    ],
    [
      13096,
      13094,
      13093,
      12878,
      12073,
      12072,
      12856
    ],
    [
      13100,
      13097,
      13096,
      12856,
      12855,
      12858
    ],
    [
      12859,
      12866,
      12865,
      13101,
      13100,
      12858,
      12857
    ],
    [
      12082,
      12866,
      12859,
      12860,
      12083
    ],
    [
      12861,
      12088,
      12085,
      12084,
      12080,
      12079
    ],
    [
      12051,
      13130,
      13131,
      13132,
      13133,
      13123,
      12052
    ],
    [
      12880,
      12886,
      13134,
      13135,
      13131,
      13130,
      12881
    ],
    [
      13136,
      13137,
      12903,
      12897,
      12896,
      12933,
      13138,
      13139,
      13140
    ],
    [
      13136,
      13140,
      13141,
      13142,
      13143
    ],
    [
      12107,
      13143,
      13142,
      12883,
      12096,
      12095,
      12099
    ],
    [
      12908,
      12472,
      12471,
      12904,
      12903,
      13137
    ],
    [
      12988,
      12990,
      12775,
      11889,
      11888
    ],
    [
      12991,
      12992,
      12994,
      12776,
      12775,
      12990,
      12989
    ],
    [
      12995,
      12326,
      12325,
      12998,
      13000,
      13050
    ],
    [
      13002,
      13004,
      13056,
      13055,
      13051,
      12999,
      13001
    ],
    [
      13004,
      13003,
      13006,
      13059,
      13057,
      13056
    ],
    [
      13007,
      13064,
      13060,
      13059,
      13006,
      13005
    ],
    [
      13007,
      13008,
      13010,
      13067,
      13065,
      13064
    ],
    [
      13010,
      13009,
      13011,
      12818,
      12817,
      13068,
      13067
    ],
    [
      13144,
      13015,
      13014,
      13013,
      13145
    ],
    [
      12311,
      13146,
      13147,
      13144,
      13145,
      13148,
      13149,
      12312
    ],
    [
      13024,
      13150,
      13019,
      13018,
      13147,
      13146,
      13025
    ],
    [
      13024,
      13023,
      13027,
      13151,
      13152,
      13150
    ],
    [
      13153,
      13154,
      13151,
      13027,
      13026
    ],
    [
      12593,
      12597,
      13155,
      13156,
      13153,
      13026
    ],
    [
      12590,
      11616,
      11619,
      13157,
      13158,
      13155,
      12597
    ],
    [
      13157,
      11619,
      10438,
      9052,
      9051
    ],
    [
      10331,
      10330,
      13159,
      13033,
      13032,
      13034,
      13035
    ],
    [
      13160,
      13029,
      13028,
      13030,
      13031,
      13033,
      13159
    ],
    [
      12771,
      13021,
      13148,
      13145,
      13013,
      12772
    ],
    [
      13144,
      13147,
      13018,
      13016,
      13015
    ],
    [
      13017,
      13019,
      13150,
      13152,
      13036
    ],
    [
      13152,
      13151,
      13154,
      13038,
      13037,
      13036
    ],
    [
      13153,
      13156,
      13040,
      13039,
      13038,
      13154
    ],
    [
      13041,
      13040,
      13156,
      13155,
      13158,
      13042
    ],
    [
      13043,
      13042,
      13158,
      13157,
      9051,
      9050
    ],
    [
      12997,
      12996,
      13049,
      13161,
      13047
    ],
    [
      13048,
      13052,
      13054,
      13162,
      13163,
      13164,
      13161,
      13049
    ],
    [
      13053,
      13058,
      13062,
      13165,
      13162,
      13054
    ],
    [
      13066,
      12801,
      12798,
      12800,
      13076,
      13165,
      13062,
      13061,
      13063
    ],
    [
      13044,
      13045,
      13046,
      13047,
      13161,
      13164,
      13069
    ],
    [
      13070,
      13069,
      13164,
      13163,
      13071
    ],
    [
      13076,
      13075,
      13074,
      13073,
      13072,
      13071,
      13163,
      13162,
      13165
    ],
    [
      13166,
      13167,
      13168,
      13169,
      13170,
      13113,
      13112
    ],
    [
      13171,
      13169,
      13168,
      13172,
      13173,
      13174
    ],
    [
      13172,
      13175,
      13176,
      13177,
      13178,
      13173
    ],
    [
      13176,
      13179,
      13180,
      13181,
      13182,
      13177
    ],
    [
      13180,
      13183,
      13184,
      13185,
      13181
    ],
    [
      13186,
      13184,
      13183,
      13187,
      13188,
      13189,
      13190
    ],
    [
      2531,
      13189,
      13188,
      13122,
      2623,
      2532
    ],
    [
      12835,
      12840,
      13166,
      13112,
      13111
    ],
    [
      13114,
      13116,
      13167,
      13166,
      12840,
      12839
    ],
    [
      13116,
      13115,
      13119,
      13175,
      13172,
      13168,
      13167
    ],
    [
      13118,
      13179,
      13176,
      13175,
      13119
    ],
    [
      13118,
      13117,
      13121,
      13187,
      13183,
      13180,
      13179
    ],
    [
      13120,
      13122,
      13188,
      13187,
      13121
    ],
    [
      13083,
      13088,
      13191,
      13192,
      12920,
      12919
    ],
    [
      13091,
      13193,
      13194,
      13195,
      13191,
      13088,
      13087
    ],
    [
      13092,
      13196,
      13197,
      13193,
      13091,
      13090
    ],
    [
      13092,
      13095,
      13099,
      13198,
      13199,
      13196
    ],
    [
      13200,
      13201,
      13198,
      13099,
      13098,
      13103
    ],
    [
      13104,
      13202,
      13203,
      13200,
      13103,
      13102
    ],
    [
      13204,
      13205,
      13202,
      13104,
      13105,
      13107
    ],
    [
      13204,
      13107,
      13106,
      13109,
      13206,
      13207,
      13208
    ],
    [
      13109,
      13108,
      13110,
      13113,
      13170,
      13209,
      13206
    ],
    [
      13210,
      13209,
      13170,
      13169,
      13171
    ],
    [
      13173,
      13178,
      13211,
      13212,
      13174
    ],
    [
      13177,
      13182,
      13213,
      13214,
      13211,
      13178
    ],
    [
      13181,
      13185,
      13213,
      13182
    ],
    [
      12844,
      12843,
      12838,
      12837,
      13124
    ],
    [
      12841,
      12846,
      13128,
      12851,
      12850
    ],
    [
      13133,
      13132,
      13215,
      13126,
      13125
    ],
    [
      13216,
      7021,
      7020,
      13129,
      13127,
      13126,
      13215
    ],
    [
      12051,
      12053,
      12091,
      12881,
      13130
    ],
    [
      13216,
      13215,
      13132,
      13131,
      13135,
      13217
    ],
    [
      13216,
      13217,
      13218,
      11288,
      7022,
      7021
    ],
    [
      13219,
      13218,
      13217,
      13135,
      13134
    ],
    [
      13219,
      13139,
      13138,
      11289,
      11288,
      13218
    ],
    [
      12883,
      13142,
      13141,
      12885,
      12884
    ],
    [
      12908,
      13137,
      13136,
      13143,
      12107,
      12110
    ],
    [
      13219,
      13134,
      12886,
      12885,
      13141,
      13140,
      13139
    ],
    [
      11290,
      11289,
      13138,
      12933,
      12263
    ],
    [
      13020,
      13149,
      13148,
      13021
    ],
    [
      13022,
      12909,
      10999,
      10978,
      10985,
      12027,
      12315,
      13220,
      13221
    ],
    [
      13020,
      13022,
      13221,
      12313,
      12312,
      13149
    ],
    [
      11406,
      11405,
      12313,
      13221,
      13220
    ],
    [
      10186,
      10189,
      11406,
      13220,
      12315,
      10196
    ],
    [
      13186,
      13222,
      13223,
      13214,
      13213,
      13185,
      13184
    ],
    [
      13224,
      13222,
      13186,
      13190,
      13225,
      13226
    ],
    [
      3732,
      4998,
      13225,
      13190,
      13189,
      2531,
      2530
    ],
    [
      8390,
      8389,
      11201,
      12922,
      12921
    ],
    [
      12916,
      12920,
      13192,
      13227,
      8391,
      8390,
      12921
    ],
    [
      13195,
      13227,
      13192,
      13191
    ],
    [
      11185,
      8392,
      8391,
      13227,
      13195,
      13194
    ],
    [
      11185,
      13194,
      13193,
      13197,
      11191,
      11186
    ],
    [
      11188,
      11191,
      13197,
      13196,
      13199,
      13228
    ],
    [
      13199,
      13198,
      13201,
      13229,
      13230,
      13228
    ],
    [
      13200,
      13203,
      13231,
      13229,
      13201
    ],
    [
      13205,
      13232,
      13233,
      13231,
      13203,
      13202
    ],
    [
      13204,
      13208,
      13234,
      13232,
      13205
    ],
    [
      13207,
      13235,
      13236,
      13234,
      13208
    ],
    [
      13207,
      13206,
      13209,
      13210,
      13237,
      13235
    ],
    [
      13210,
      13171,
      13174,
      13212,
      13238,
      13237
    ],
    [
      13239,
      13238,
      13212,
      13211,
      13214,
      13223,
      13240
    ],
    [
      13224,
      13241,
      13240,
      13223,
      13222
    ],
    [
      13133,
      13125,
      13124,
      12837,
      12836,
      13123
    ],
    [
      13127,
      13129,
      13128,
      12846,
      12845
    ],
    [
      12311,
      12314,
      12987,
      13012,
      13025,
      13146
    ],
    [
      10329,
      12468,
      12470,
      13160,
      13159,
      10330
    ],
    [
      12469,
      12557,
      12556,
      13029,
      13160,
      12470
    ],
    [
      11583,
      12553,
      12557,
      12469,
      11584
    ],
    [
      11583,
      11582,
      12549,
      12550,
      12553
    ],
    [
      13231,
      13233,
      13242,
      13243,
      13230,
      13229
    ],
    [
      13244,
      13242,
      13233,
      13232,
      13234,
      13236,
      13245
    ],
    [
      13239,
      13245,
      13236,
      13235,
      13237,
      13238
    ],
    [
      11189,
      11182,
      11181,
      11180,
      11190
    ],
    [
      11188,
      13228,
      13230,
      13243,
      11183,
      11182,
      11189
    ],
    [
      13244,
      13246,
      13247,
      11184,
      11183,
      13243,
      13242
    ],
    [
      4997,
      4996,
      8421,
      9918,
      11184,
      13247,
      13248
    ],
    [
      13244,
      13245,
      13239,
      13240,
      13241,
      13246
    ],
    [
      13224,
      13226,
      13248,
      13247,
      13246,
      13241
    ],
    [
      4997,
      13248,
      13226,
      13225,
      4998
    ]
  ]
};
/* harmony export (immutable) */ __webpack_exports__["IMG_COASTLINE_70"] = IMG_COASTLINE_70;



/***/ })
/******/ ]);
//# sourceMappingURL=bundle.js.map