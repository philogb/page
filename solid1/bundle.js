/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 158);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _classCallCheck;
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _createClass;
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _getPrototypeOf;
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _inherits;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__setPrototypeOf__ = __webpack_require__(79);

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__setPrototypeOf__["a" /* default */])(subClass, superClass);
}

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _possibleConstructorReturn;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helpers_esm_typeof__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__assertThisInitialized__ = __webpack_require__(10);


function _possibleConstructorReturn(self, call) {
  if (call && (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__helpers_esm_typeof__["a" /* default */])(call) === "object" || typeof call === "function")) {
    return call;
  }

  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__assertThisInitialized__["a" /* default */])(self);
}

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = assert;
// Recommendation is to ignore message but current test suite checks agains the
// message so keep it for now.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || 'luma.gl: assertion failed.');
  }
}
//# sourceMappingURL=assert.js.map

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__is_browser__ = __webpack_require__(59);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_0__is_browser__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__is_old_ie__ = __webpack_require__(265);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_1__is_old_ie__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__promise_utils__ = __webpack_require__(266);
/* unused harmony reexport promisify */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(268);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_3__utils__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_3__utils__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_3__utils__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__log__ = __webpack_require__(30);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_4__log__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__format_value__ = __webpack_require__(263);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_5__format_value__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__assert__ = __webpack_require__(5);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_6__assert__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__stub_methods__ = __webpack_require__(267);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_7__stub_methods__["a"]; });








//# sourceMappingURL=index.js.map

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_types__ = __webpack_require__(64);
/* unused harmony reexport Image */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return __WEBPACK_IMPORTED_MODULE_0__webgl_types__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return __WEBPACK_IMPORTED_MODULE_0__webgl_types__["b"]; });
/* unused harmony reexport WebGLProgram */
/* unused harmony reexport WebGLShader */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__webgl_types__["c"]; });
/* unused harmony reexport WebGLFramebuffer */
/* unused harmony reexport WebGLRenderbuffer */
/* unused harmony reexport WebGLTexture */
/* unused harmony reexport WebGLUniformLocation */
/* unused harmony reexport WebGLActiveInfo */
/* unused harmony reexport WebGLShaderPrecisionFormat */
/* unused harmony reexport webGLTypesAvailable */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_checks__ = __webpack_require__(136);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return __WEBPACK_IMPORTED_MODULE_1__webgl_checks__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__webgl_checks__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__webgl_checks__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__webgl_checks__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__request_animation_frame__ = __webpack_require__(275);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return __WEBPACK_IMPORTED_MODULE_2__request_animation_frame__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return __WEBPACK_IMPORTED_MODULE_2__request_animation_frame__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__format_glsl_error__ = __webpack_require__(273);
/* unused harmony reexport formatGLSLCompilerError */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return __WEBPACK_IMPORTED_MODULE_3__format_glsl_error__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__get_shader_name__ = __webpack_require__(135);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_4__get_shader_name__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__typed_array_utils__ = __webpack_require__(47);
/* unused harmony reexport getGLTypeFromTypedArray */
/* unused harmony reexport getTypedArrayFromGLType */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_5__typed_array_utils__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_5__typed_array_utils__["d"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__constants_to_keys__ = __webpack_require__(32);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_6__constants_to_keys__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_6__constants_to_keys__["b"]; });
/* unused harmony reexport getKeyType */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shader_utils__ = __webpack_require__(276);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return __WEBPACK_IMPORTED_MODULE_7__shader_utils__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__texture_utils__ = __webpack_require__(63);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return __WEBPACK_IMPORTED_MODULE_8__texture_utils__["b"]; });
// Exports WebGL API constants and types, plus some basic type checks









//# sourceMappingURL=index.js.map

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _defineProperty;
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vector2__ = __webpack_require__(144);
/* unused harmony reexport Vector2 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__vector3__ = __webpack_require__(39);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__vector3__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vector4__ = __webpack_require__(145);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_2__vector4__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__matrix4__ = __webpack_require__(70);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_3__matrix4__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__quaternion__ = __webpack_require__(143);
/* unused harmony reexport Quaternion */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__lib_common__ = __webpack_require__(13);
/* unused harmony reexport config */
/* unused harmony reexport checkNumber */
/* unused harmony reexport configure */
/* unused harmony reexport formatValue */
/* unused harmony reexport isArray */
/* unused harmony reexport clone */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_5__lib_common__["a"]; });
/* unused harmony reexport degrees */
/* unused harmony reexport sin */
/* unused harmony reexport cos */
/* unused harmony reexport tan */
/* unused harmony reexport asin */
/* unused harmony reexport acos */
/* unused harmony reexport atan */
/* unused harmony reexport clamp */
/* unused harmony reexport lerp */
/* unused harmony reexport equals */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__spherical_coordinates__ = __webpack_require__(286);
/* unused harmony reexport _SphericalCoordinates */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__pose__ = __webpack_require__(285);
/* unused harmony reexport _Pose */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__euler__ = __webpack_require__(142);
/* unused harmony reexport _Euler */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__addons_polygon__ = __webpack_require__(284);
/* unused harmony reexport _Polygon */










//# sourceMappingURL=index.js.map

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _assertThisInitialized;
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _slicedToArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__arrayWithHoles__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__iterableToArrayLimit__ = __webpack_require__(171);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__nonIterableRest__ = __webpack_require__(172);



function _slicedToArray(arr, i) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__arrayWithHoles__["a" /* default */])(arr) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__iterableToArrayLimit__["a" /* default */])(arr, i) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__nonIterableRest__["a" /* default */])();
}

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Resource; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__init__ = __webpack_require__(118);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_assert__ = __webpack_require__(5);







var ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods'; // TODO - Handle context loss
// function glGetContextLossCount(gl) {
//   return (gl.luma && gl.luma.glCount) || 0;
// }

var Resource =
/*#__PURE__*/
function () {
  function Resource(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Resource);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils__["a" /* assertWebGLContext */])(gl);
    var id = opts.id,
        _opts$userData = opts.userData,
        userData = _opts$userData === void 0 ? {} : _opts$userData;
    this.gl = gl; // this.ext = polyfillContext(gl);

    this.id = id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["b" /* uid */])(this.constructor.name);
    this.userData = userData;
    this._bound = false; // Set the handle
    // If handle was provided, use it, otherwise create a new handle
    // TODO - Stores the handle with context loss information
    // this.glCount = glGetContextLossCount(this.gl);
    // Default VertexArray needs to be created with null handle, so compare against undefined

    this._handle = opts.handle;

    if (this._handle === undefined) {
      this._handle = this._createHandle();
    }

    this._addStats();
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Resource, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.constructor.name, "(").concat(this.id, ")");
    }
  }, {
    key: "delete",
    value: function _delete() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$deleteChildren = _ref.deleteChildren,
          deleteChildren = _ref$deleteChildren === void 0 ? false : _ref$deleteChildren;

      // Delete this object, and get refs to any children
      var children = this._handle && this._deleteHandle(this._handle);

      this._handle = null;

      this._removeStats(); // Optionally, recursively delete the children


      if (children && deleteChildren) {
        children.filter(Boolean).forEach(function (child) {
          child.delete();
        });
      }

      return this;
    }
  }, {
    key: "bind",
    value: function bind() {
      var funcOrHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.handle;

      if (typeof funcOrHandle !== 'function') {
        this._bindHandle(funcOrHandle);

        return this;
      }

      var value;

      if (!this._bound) {
        this._bindHandle(this.handle);

        this._bound = true;
        value = funcOrHandle();
        this._bound = false;

        this._bindHandle(null);
      } else {
        value = funcOrHandle();
      }

      return value;
    }
  }, {
    key: "unbind",
    value: function unbind() {
      this.bind(null);
    }
    /**
     * Query a Resource parameter
     *
     * @param {GLenum} pname
     * @return {GLint|GLfloat|GLenum} param
     */

  }, {
    key: "getParameter",
    value: function getParameter(pname) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      pname = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils__["e" /* getKeyValue */])(this.gl, pname);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_assert__["a" /* default */])(pname);
      var parameters = this.constructor.PARAMETERS || {}; // Use parameter definitions to handle unsupported parameters

      var parameter = parameters[pname];

      if (parameter) {
        var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils__["b" /* isWebGL2 */])(this.gl); // Check if we can query for this parameter

        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));

        if (!parameterAvailable) {
          var webgl1Default = parameter.webgl1;
          var webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;
          var defaultValue = isWebgl2 ? webgl2Default : webgl1Default;
          return defaultValue;
        }
      } // If unknown parameter - Could be a valid parameter not covered by PARAMS
      // Attempt to query for it and let WebGL report errors


      return this._getParameter(pname, opts);
    } // Many resources support a getParameter call -
    // getParameters will get all parameters - slow but useful for debugging
    // eslint-disable-next-line complexity

  }, {
    key: "getParameters",
    value: function getParameters() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _ref2 = {},
          parameters = _ref2.parameters,
          keys = _ref2.keys; // Get parameter definitions for this Resource

      var PARAMETERS = this.constructor.PARAMETERS || {};
      var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils__["b" /* isWebGL2 */])(this.gl);
      var values = {}; // Query all parameters if no list provided

      var parameterKeys = parameters || Object.keys(PARAMETERS); // WEBGL limits

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = parameterKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pname = _step.value;
          var parameter = PARAMETERS[pname]; // Check if this parameter is available on this platform

          var parameterAvailable = parameter && (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));

          if (parameterAvailable) {
            var key = keys ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils__["f" /* getKey */])(this.gl, pname) : pname;
            values[key] = this.getParameter(pname, opts);

            if (keys && parameter.type === 'GLenum') {
              values[key] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils__["f" /* getKey */])(this.gl, values[key]);
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return values;
    }
    /**
     * Update a Resource setting
     *
     * @todo - cache parameter to avoid issuing WebGL calls?
     *
     * @param {GLenum} pname - parameter (GL constant, value or key)
     * @param {GLint|GLfloat|GLenum} value
     * @return {Resource} returns self to enable chaining
     */

  }, {
    key: "setParameter",
    value: function setParameter(pname, value) {
      pname = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils__["e" /* getKeyValue */])(this.gl, pname);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_assert__["a" /* default */])(pname);
      var parameters = this.constructor.PARAMETERS || {};
      var parameter = parameters[pname];

      if (parameter) {
        var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils__["b" /* isWebGL2 */])(this.gl); // Check if this parameter is available on this platform

        var parameterAvailable = (!('webgl2' in parameter) || isWebgl2) && (!('extension' in parameter) || this.gl.getExtension(parameter.extension));

        if (!parameterAvailable) {
          throw new Error('Parameter not available on this platform');
        } // Handle string keys


        if (parameter.type === 'GLenum') {
          value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils__["e" /* getKeyValue */])(value);
        }
      } // If unknown parameter - Could be a valid parameter not covered by PARAMS
      // attempt to set it and let WebGL report errors


      this._setParameter(pname, value);

      return this;
    }
    /*
     * Batch update resource parameters
     * Assumes the subclass supports a setParameter call
     */

  }, {
    key: "setParameters",
    value: function setParameters(parameters) {
      for (var pname in parameters) {
        this.setParameter(pname, parameters[pname]);
      }

      return this;
    } // Install stubs for removed methods

  }, {
    key: "stubRemovedMethods",
    value: function stubRemovedMethods(className, version, methodNames) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["d" /* stubRemovedMethods */])(this, className, version, methodNames);
    } // PUBLIC VIRTUAL METHODS

  }, {
    key: "initialize",
    value: function initialize(opts) {} // PROTECTED METHODS - These must be overridden by subclass

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
  }, {
    key: "_bindHandle",
    value: function _bindHandle() {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
  }, {
    key: "_getOptsFromHandle",
    value: function _getOptsFromHandle() {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
  }, {
    key: "_getParameter",
    value: function _getParameter(pname, opts) {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    }
    /**
     * @param {GLenum} pname
     * @param {GLint|GLfloat|GLenum} param
     * @return {Sampler} returns self to enable chaining
     */

  }, {
    key: "_setParameter",
    value: function _setParameter(pname, value) {
      throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);
    } // PRIVATE METHODS

  }, {
    key: "_context",
    value: function _context() {
      this.gl.luma = this.gl.luma || {};
      return this.gl.luma;
    }
  }, {
    key: "_addStats",
    value: function _addStats() {
      var name = this.constructor.name;
      var stats = __WEBPACK_IMPORTED_MODULE_2__init__["default"].stats;
      stats.resourceCount = stats.resourceCount || 0;
      stats.resourceMap = stats.resourceMap || {}; // Resource creation stats

      stats.resourceCount++;
      stats.resourceMap[name] = stats.resourceMap[name] || {
        created: 0,
        active: 0
      };
      stats.resourceMap[name].created++;
      stats.resourceMap[name].active++;
    }
  }, {
    key: "_removeStats",
    value: function _removeStats() {
      var name = this.constructor.name;
      var stats = __WEBPACK_IMPORTED_MODULE_2__init__["default"].stats;
      stats.resourceMap[name].active--;
    }
  }, {
    key: "handle",
    get: function get() {
      // TODO - Add context loss handling
      // Will regenerate and reinitialize the handle if necessary
      // const glCount = glGetContextLossCount(this.gl);
      // if (this.glCount !== glCount) {
      //   this._handle = this._createHandle(this.opts);
      //   this._glCount = glCount;
      //   // Reinitialize object
      //   this.initialize(this.opts);
      // }
      return this._handle;
    }
  }]);

  return Resource;
}();


//# sourceMappingURL=resource.js.map

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return config; });
/* unused harmony export configure */
/* harmony export (immutable) */ __webpack_exports__["d"] = checkNumber;
/* harmony export (immutable) */ __webpack_exports__["f"] = formatValue;
/* unused harmony export formatAngle */
/* unused harmony export isArray */
/* unused harmony export clone */
/* harmony export (immutable) */ __webpack_exports__["a"] = radians;
/* harmony export (immutable) */ __webpack_exports__["g"] = degrees;
/* unused harmony export sin */
/* unused harmony export cos */
/* unused harmony export tan */
/* unused harmony export asin */
/* unused harmony export acos */
/* unused harmony export atan */
/* harmony export (immutable) */ __webpack_exports__["c"] = clamp;
/* unused harmony export lerp */
/* harmony export (immutable) */ __webpack_exports__["b"] = equals;
var config = {};
config.EPSILON = 1e-12;
config.debug = true;
config.precision = 4;
config.printTypes = false;
config.printDegrees = false;
config.printRowMajor = true;

function configure(options) {
  if ('epsilon' in options) {
    config.EPSILON = options.epsilon;
  }

  if ('debug' in options) {
    config.debug = options.debug;
  }
}
function checkNumber(value) {
  if (!Number.isFinite(value)) {
    throw new Error("Invalid number ".concat(value));
  }

  return value;
}

function round(value) {
  return Math.round(value / config.EPSILON) * config.EPSILON;
}

function formatValue(value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$precision = _ref.precision,
      precision = _ref$precision === void 0 ? config.precision || 4 : _ref$precision;

  value = round(value);
  return parseFloat(value.toPrecision(precision));
}
function formatAngle(value) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$precision = _ref2.precision,
      precision = _ref2$precision === void 0 ? config.precision || 4 : _ref2$precision,
      _ref2$printDegrees = _ref2.printDegrees,
      printDegrees = _ref2$printDegrees === void 0 ? config.printAngles : _ref2$printDegrees;

  value = printDegrees ? degrees(value) : value;
  value = round(value);
  return "".concat(parseFloat(value.toPrecision(precision))).concat(printDegrees ? '°' : '');
}
function isArray(value) {
  return Array.isArray(value) || ArrayBuffer.isView(value) && value.length !== undefined;
}
function clone(array) {
  return array.clone ? array.clone() : new Array(array);
}

function map(value, func) {
  if (isArray(value)) {
    var result = clone(value);

    for (var i = 0; i < result.length; ++i) {
      result[i] = func(result[i], i, result);
    }

    return result;
  }

  return func(value);
}

function radians(degrees) {
  return map(degrees, function (degrees) {
    return degrees / 180 * Math.PI;
  });
}
function degrees(radians) {
  return map(radians, function (radians) {
    return radians * 180 / Math.PI;
  });
}
function sin(radians) {
  return map(radians, function (angle) {
    return Math.sin(angle);
  });
}
function cos(radians) {
  return map(radians, function (angle) {
    return Math.cos(angle);
  });
}
function tan(radians) {
  return map(radians, function (angle) {
    return Math.tan(angle);
  });
}
function asin(radians) {
  return map(radians, function (angle) {
    return Math.asin(angle);
  });
}
function acos(radians) {
  return map(radians, function (angle) {
    return Math.acos(angle);
  });
}
function atan(radians) {
  return map(radians, function (angle) {
    return Math.atan(angle);
  });
}
function clamp(value, min, max) {
  return map(value, function (value) {
    return Math.max(min, Math.min(max, value));
  });
}
function lerp(a, b, t) {
  if (isArray(a)) {
    return a.map(function (ai, i) {
      return lerp(ai, b[i], t);
    });
  }

  return t * b + (1 - t) * a;
}
function equals(a, b) {
  if (isArray(a) && isArray(b)) {
    if (a === b) {
      return true;
    }

    if (a.length !== b.length) {
      return false;
    }

    for (var i = 0; i < a.length; ++i) {
      if (!equals(a[i], b[i])) {
        return false;
      }
    }

    return true;
  }

  return Math.abs(a - b) <= config.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
//# sourceMappingURL=common.js.map

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _typeof;
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Buffer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__resource__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__accessor__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__webgl_utils_typed_array_utils__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_assert__ = __webpack_require__(5);












var DEBUG_DATA_LENGTH = 10;

var Buffer =
/*#__PURE__*/
function (_Resource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Buffer, _Resource);

  function Buffer(gl) {
    var _this;

    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Buffer);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Buffer).call(this, gl, props));

    _this.stubRemovedMethods('Buffer', 'v6.0', ['layout', 'setLayout', 'getIndexedParameter']); // In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers
    // otherwise buffer type will lock to generic (non-element) buffer
    // In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here


    _this.target = props.target || (_this.gl.webgl2 ? 36662 : 34962);

    _this._initialize(props);

    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));
    return _this;
  } // returns number of elements in the buffer (assuming that the full buffer is used)


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Buffer, [{
    key: "getElementCount",
    value: function getElementCount() {
      var accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;
      return Math.round(this.byteLength / __WEBPACK_IMPORTED_MODULE_7__accessor__["a" /* default */].getBytesPerElement(accessor));
    } // returns number of vertices in the buffer (assuming that the full buffer is used)

  }, {
    key: "getVertexCount",
    value: function getVertexCount() {
      var accessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.accessor;
      return Math.round(this.byteLength / __WEBPACK_IMPORTED_MODULE_7__accessor__["a" /* default */].getBytesPerVertex(accessor));
    } // Creates and initializes the buffer object's data store.

  }, {
    key: "initialize",
    value: function initialize(props) {
      return this._initialize(props);
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      if ('data' in props) {
        this.setData(props);
      }

      return this;
    } // Stores the accessor of data with the buffer, makes it easy to e.g. set it as an attribute later
    // {accessor,type,size = 1,offset = 0,stride = 0,normalized = false,integer = false,divisor = 0}

  }, {
    key: "setAccessor",
    value: function setAccessor(opts) {
      this.accessor = opts;
      return this;
    } // Allocate a bigger GPU buffer (if the current buffer is not big enough).
    // If a reallocation is triggered it clears the buffer
    // Returns:
    //  `true`: buffer was reallocated, data was cleared
    //  `false`: buffer was big enough, data is intact

  }, {
    key: "reallocate",
    value: function reallocate(byteLength) {
      if (byteLength > this.byteLength) {
        this._setByteLength(byteLength);

        return true;
      }

      this.bytesUsed = byteLength;
      return false;
    } // Update with new data

  }, {
    key: "setData",
    value: function setData(opts) {
      return this.initialize(opts);
    } // Updates a subset of a buffer object's data store.
    // Data (Typed Array or ArrayBuffer), length is inferred unless provided
    // Offset into buffer
    // WebGL2 only: Offset into srcData
    // WebGL2 only: Number of bytes to be copied

  }, {
    key: "subData",
    value: function subData(props) {
      // Signature: buffer.subData(new Float32Array([...]))
      if (ArrayBuffer.isView(props)) {
        props = {
          data: props
        };
      }

      var _props = props,
          data = _props.data,
          _props$offset = _props.offset,
          offset = _props$offset === void 0 ? 0 : _props$offset,
          _props$srcOffset = _props.srcOffset,
          srcOffset = _props$srcOffset === void 0 ? 0 : _props$srcOffset;
      var byteLength = props.byteLength || props.length; // if (byteLength > this.byteLength) {
      //   byteLength = this.byteLength;
      // }

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_assert__["a" /* default */])(data); // Create the buffer - binding it here for the first time locks the type
      // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type

      var target = this.gl.webgl2 ? 36663 : this.target;
      this.gl.bindBuffer(target, this.handle); // WebGL2: subData supports additional srcOffset and length parameters

      if (srcOffset !== 0 || byteLength !== undefined) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__webgl_utils__["c" /* assertWebGL2Context */])(this.gl);
        this.gl.bufferSubData(this.target, offset, data, srcOffset, byteLength);
      } else {
        this.gl.bufferSubData(target, offset, data);
      }

      this.gl.bindBuffer(target, null); // TODO - update local `data` if offsets are right

      this.debugData = null;

      if (!this.accessor.type) {
        this.setAccessor(new __WEBPACK_IMPORTED_MODULE_7__accessor__["a" /* default */](this.accessor, {
          type: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils_typed_array_utils__["a" /* getGLTypeFromTypedArray */])(data)
        }));
      }

      return this;
    } // WEBGL2 ONLY: Copies part of the data of another buffer into this buffer

  }, {
    key: "copyData",
    value: function copyData(_ref) {
      var sourceBuffer = _ref.sourceBuffer,
          _ref$readOffset = _ref.readOffset,
          readOffset = _ref$readOffset === void 0 ? 0 : _ref$readOffset,
          _ref$writeOffset = _ref.writeOffset,
          writeOffset = _ref$writeOffset === void 0 ? 0 : _ref$writeOffset,
          size = _ref.size;
      var gl = this.gl;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__webgl_utils__["c" /* assertWebGL2Context */])(gl); // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type

      gl.bindBuffer(36662, sourceBuffer.handle);
      gl.bindBuffer(36663, this.handle);
      gl.copyBufferSubData(36662, 36663, readOffset, writeOffset, size);
      gl.bindBuffer(36662, null);
      gl.bindBuffer(36663, null); // TODO - update local `data` if offsets are 0

      this.debugData = null;
      return this;
    } // WEBGL2 ONLY: Reads data from buffer into an ArrayBufferView or SharedArrayBuffer.

  }, {
    key: "getData",
    value: function getData() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$dstData = _ref2.dstData,
          dstData = _ref2$dstData === void 0 ? null : _ref2$dstData,
          _ref2$srcByteOffset = _ref2.srcByteOffset,
          srcByteOffset = _ref2$srcByteOffset === void 0 ? 0 : _ref2$srcByteOffset,
          _ref2$dstOffset = _ref2.dstOffset,
          dstOffset = _ref2$dstOffset === void 0 ? 0 : _ref2$dstOffset,
          _ref2$length = _ref2.length,
          length = _ref2$length === void 0 ? 0 : _ref2$length;

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__webgl_utils__["c" /* assertWebGL2Context */])(this.gl);
      var ArrayType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils_typed_array_utils__["b" /* getTypedArrayFromGLType */])(this.accessor.type || 5126, {
        clamped: false
      });

      var sourceAvailableElementCount = this._getAvailableElementCount(srcByteOffset);

      var dstElementOffset = dstOffset;
      var dstAvailableElementCount;
      var dstElementCount;

      if (dstData) {
        dstElementCount = dstData.length;
        dstAvailableElementCount = dstElementCount - dstElementOffset;
      } else {
        // Allocate ArrayBufferView with enough size to copy all eligible data.
        dstAvailableElementCount = Math.min(sourceAvailableElementCount, length || sourceAvailableElementCount);
        dstElementCount = dstElementOffset + dstAvailableElementCount;
      }

      var copyElementCount = Math.min(sourceAvailableElementCount, dstAvailableElementCount);
      length = length || copyElementCount;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_assert__["a" /* default */])(length <= copyElementCount);
      dstData = dstData || new ArrayType(dstElementCount); // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type

      this.gl.bindBuffer(36662, this.handle);
      this.gl.getBufferSubData(36662, srcByteOffset, dstData, dstOffset, length);
      this.gl.bindBuffer(36662, null); // TODO - update local `data` if offsets are 0

      return dstData;
    }
    /**
     * Binds a buffer to a given binding point (target).
     *   GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER take an index, and optionally a range.
     * @param {Glenum} target - target for the bind operation.
     * @param {GLuint} index= - the index of the target.
     *   - GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER need an index to affect state
     * @param {GLuint} offset=0 - the index of the target.
     *   - GL.UNIFORM_BUFFER: `offset` must be aligned to GL.UNIFORM_BUFFER_OFFSET_ALIGNMENT.
     * @param {GLuint} size= - the index of the target.
     *   - GL.UNIFORM_BUFFER: `size` must be a minimum of GL.UNIFORM_BLOCK_SIZE_DATA.
     * @returns {Buffer} - Returns itself for chaining.
     */

  }, {
    key: "bind",
    value: function bind() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$target = _ref3.target,
          target = _ref3$target === void 0 ? this.target : _ref3$target,
          _ref3$index = _ref3.index,
          index = _ref3$index === void 0 ? this.accessor && this.accessor.index : _ref3$index,
          _ref3$offset = _ref3.offset,
          offset = _ref3$offset === void 0 ? 0 : _ref3$offset,
          size = _ref3.size;

      // NOTE: While GL.TRANSFORM_FEEDBACK_BUFFER and GL.UNIFORM_BUFFER could
      // be used as direct binding points, they will not affect transform feedback or
      // uniform buffer state. Instead indexed bindings need to be made.
      if (target === 35345 || target === 35982) {
        if (size !== undefined) {
          this.gl.bindBufferRange(target, index, this.handle, offset, size);
        } else {
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_assert__["a" /* default */])(offset === 0); // Make sure offset wasn't supplied

          this.gl.bindBufferBase(target, index, this.handle);
        }
      } else {
        this.gl.bindBuffer(target, this.handle);
      }

      return this;
    }
  }, {
    key: "unbind",
    value: function unbind() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref4$target = _ref4.target,
          target = _ref4$target === void 0 ? this.target : _ref4$target,
          _ref4$index = _ref4.index,
          index = _ref4$index === void 0 ? this.accessor && this.accessor.index : _ref4$index;

      var isIndexedBuffer = target === 35345 || target === 35982;

      if (isIndexedBuffer) {
        this.gl.bindBufferBase(target, index, null);
      } else {
        this.gl.bindBuffer(target, null);
      }

      return this;
    } // DEPRECATED/REMOVED METHODS

  }, {
    key: "getDebugData",
    // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)
    // Returns a short initial data array
    value: function getDebugData() {
      if (!this.debugData) {
        this.debugData = this.getData({
          length: DEBUG_DATA_LENGTH
        });
        return {
          data: this.debugData,
          changed: true
        };
      }

      return {
        data: this.debugData,
        changed: false
      };
    }
  }, {
    key: "invalidateDebugData",
    value: function invalidateDebugData() {
      this.debugData = null;
    } // PRIVATE METHODS
    // Signature: `new Buffer(gl, {data: new Float32Array(...)})`
    // Signature: `new Buffer(gl, new Float32Array(...))`
    // Signature: `new Buffer(gl, 100)`

  }, {
    key: "_initialize",
    value: function _initialize() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // Signature `new Buffer(gl, new Float32Array(...)`
      if (ArrayBuffer.isView(props)) {
        props = {
          data: props
        };
      } // Signature: `new Buffer(gl, 100)`


      if (Number.isFinite(props)) {
        props = {
          byteLength: props
        };
      }

      if (props.bytes) {
        __WEBPACK_IMPORTED_MODULE_10__utils__["a" /* log */].deprecated('bytes', 'byteLength');
      }

      var byteLength = props.byteLength || props.bytes || 0; // assert(props.data || byteLength);

      this.usage = props.usage || 35044; // DEPRECATE - remove `props` from this list in next major release

      this.setAccessor(new __WEBPACK_IMPORTED_MODULE_7__accessor__["a" /* default */](props, props.accessor));
      return props.data ? this._setData(props.data) : this._setByteLength(byteLength);
    } // Allocate a new buffer and initialize to contents of typed array

  }, {
    key: "_setData",
    value: function _setData(data) {
      var usage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.usage;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_assert__["a" /* default */])(ArrayBuffer.isView(data));

      var target = this._getTarget();

      this.gl.bindBuffer(target, this.handle);
      this.gl.bufferData(target, data, usage);
      this.gl.bindBuffer(target, null);
      this.usage = usage;
      this.debugData = data.slice(0, DEBUG_DATA_LENGTH);
      this.byteLength = data.byteLength;
      this.bytesUsed = data.byteLength; // infer GL type from supplied typed array

      var type = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils_typed_array_utils__["a" /* getGLTypeFromTypedArray */])(data);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_assert__["a" /* default */])(type);
      this.setAccessor(new __WEBPACK_IMPORTED_MODULE_7__accessor__["a" /* default */](this.accessor, {
        type: type
      }));
      return this;
    } // Allocate a GPU buffer of specified size.

  }, {
    key: "_setByteLength",
    value: function _setByteLength(byteLength) {
      var usage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.usage;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_assert__["a" /* default */])(byteLength >= 0); // Workaround needed for Safari (#291):
      // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.

      var data = byteLength;

      if (byteLength === 0) {
        data = new Float32Array(0);
      }

      var target = this._getTarget();

      this.gl.bindBuffer(target, this.handle);
      this.gl.bufferData(target, data, usage);
      this.gl.bindBuffer(target, null);
      this.usage = usage;
      this.debugData = null;
      this.byteLength = byteLength;
      this.bytesUsed = byteLength;
      return this;
    } // Binding a buffer for the first time locks the type
    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type

  }, {
    key: "_getTarget",
    value: function _getTarget() {
      return this.gl.webgl2 ? 36663 : this.target;
    }
  }, {
    key: "_getAvailableElementCount",
    value: function _getAvailableElementCount(srcByteOffset) {
      var ArrayType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils_typed_array_utils__["b" /* getTypedArrayFromGLType */])(this.accessor.type || 5126, {
        clamped: false
      });
      var sourceElementOffset = srcByteOffset / ArrayType.BYTES_PER_ELEMENT;
      return this.getElementCount() - sourceElementOffset;
    } // RESOURCE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createBuffer();
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteBuffer(this.handle);
    }
  }, {
    key: "_getParameter",
    value: function _getParameter(pname) {
      this.gl.bindBuffer(this.target, this.handle);
      var value = this.gl.getBufferParameter(this.target, pname);
      this.gl.bindBuffer(this.target, null);
      return value;
    } // DEPRECATED

  }, {
    key: "updateAccessor",
    value: function updateAccessor(opts) {
      __WEBPACK_IMPORTED_MODULE_10__utils__["a" /* log */].deprecated('updateAccessor(...)', 'setAccessor(new Accessor(buffer.accessor, ...)');
      this.accessor = new __WEBPACK_IMPORTED_MODULE_7__accessor__["a" /* default */](this.accessor, opts);
      return this;
    }
  }, {
    key: "setByteLength",
    value: function setByteLength(byteLength) {
      __WEBPACK_IMPORTED_MODULE_10__utils__["a" /* log */].deprecated('setByteLength', 'reallocate');
      return this.reallocate(byteLength);
    }
  }, {
    key: "data",
    get: function get() {
      __WEBPACK_IMPORTED_MODULE_10__utils__["a" /* log */].removed('Buffer.data', 'N/A', 'v6.0');
    }
  }, {
    key: "bytes",
    get: function get() {
      __WEBPACK_IMPORTED_MODULE_10__utils__["a" /* log */].deprecated('Buffer.bytes', 'Buffer.byteLength', 'v6.1');
      return this.byteLength;
    }
  }]);

  return Buffer;
}(__WEBPACK_IMPORTED_MODULE_6__resource__["a" /* default */]);


//# sourceMappingURL=buffer.js.map

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__geometry__ = __webpack_require__(18);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__cone_geometry__ = __webpack_require__(112);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_1__cone_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cube_geometry__ = __webpack_require__(113);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_2__cube_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__cylinder_geometry__ = __webpack_require__(114);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_3__cylinder_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ico_sphere_geometry__ = __webpack_require__(115);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_4__ico_sphere_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__plane_geometry__ = __webpack_require__(116);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_5__plane_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__sphere_geometry__ = __webpack_require__(117);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_6__sphere_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__truncated_cone_geometry__ = __webpack_require__(43);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_7__truncated_cone_geometry__["a"]; });








//# sourceMappingURL=index.js.map

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils_webgl_checks__ = __webpack_require__(136);
/* unused harmony reexport isWebGL */
/* unused harmony reexport isWebGL2 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils_texture_utils__ = __webpack_require__(63);
/* unused harmony reexport cloneTextureFrom */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_utils_constants_to_keys__ = __webpack_require__(32);
/* unused harmony reexport getKeyValue */
/* unused harmony reexport getKey */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_context_context__ = __webpack_require__(60);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_3__webgl_context_context__["a"]; });
/* unused harmony reexport destroyGLContext */
/* unused harmony reexport resizeGLContext */
/* unused harmony reexport pollGLContext */
/* unused harmony reexport setContextDefaults */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_context__ = __webpack_require__(31);
/* unused harmony reexport trackContextState */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__webgl_context_context_state__ = __webpack_require__(23);
/* unused harmony reexport resetParameters */
/* unused harmony reexport getParameter */
/* unused harmony reexport getParameters */
/* unused harmony reexport setParameter */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_5__webgl_context_context_state__["a"]; });
/* unused harmony reexport withParameters */
/* unused harmony reexport getModifiedParameters */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__webgl_context_context_limits__ = __webpack_require__(46);
/* unused harmony reexport getContextInfo */
/* unused harmony reexport getGLContextInfo */
/* unused harmony reexport getContextLimits */
/* unused harmony reexport glGetDebugInfo */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__webgl_context_context_features__ = __webpack_require__(45);
/* unused harmony reexport FEATURES */
/* unused harmony reexport hasFeature */
/* unused harmony reexport hasFeatures */
/* unused harmony reexport getFeatures */
/* unused harmony reexport canCompileGLGSExtension */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_buffer__ = __webpack_require__(15);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_8__webgl_buffer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__webgl_shader__ = __webpack_require__(52);
/* unused harmony reexport Shader */
/* unused harmony reexport VertexShader */
/* unused harmony reexport FragmentShader */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__webgl_program__ = __webpack_require__(65);
/* unused harmony reexport Program */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__webgl_framebuffer__ = __webpack_require__(24);
/* unused harmony reexport Framebuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__webgl_renderbuffer__ = __webpack_require__(51);
/* unused harmony reexport Renderbuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__webgl_texture_2d__ = __webpack_require__(38);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_13__webgl_texture_2d__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__webgl_texture_cube__ = __webpack_require__(66);
/* unused harmony reexport TextureCube */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__webgl_clear__ = __webpack_require__(49);
/* unused harmony reexport clear */
/* unused harmony reexport clearBuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__webgl_copy_and_blit__ = __webpack_require__(50);
/* unused harmony reexport readPixelsToArray */
/* unused harmony reexport readPixelsToBuffer */
/* unused harmony reexport copyToDataUrl */
/* unused harmony reexport copyToImage */
/* unused harmony reexport copyToTexture */
/* unused harmony reexport blit */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__webgl_fence_sync__ = __webpack_require__(277);
/* unused harmony reexport FenceSync */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__webgl_query__ = __webpack_require__(137);
/* unused harmony reexport Query */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__webgl_sampler__ = __webpack_require__(138);
/* unused harmony reexport Sampler */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__webgl_texture_3d__ = __webpack_require__(139);
/* unused harmony reexport Texture3D */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__webgl_texture_2d_array__ = __webpack_require__(279);
/* unused harmony reexport Texture2DArray */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__webgl_transform_feedback__ = __webpack_require__(67);
/* unused harmony reexport TransformFeedback */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__webgl_vertex_array_object__ = __webpack_require__(140);
/* unused harmony reexport VertexArrayObject */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__webgl_vertex_array__ = __webpack_require__(141);
/* unused harmony reexport VertexArray */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__webgl_uniform_buffer_layout__ = __webpack_require__(280);
/* unused harmony reexport UniformBufferLayout */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__webgl_accessor__ = __webpack_require__(48);
/* unused harmony reexport _Accessor */
/* unused harmony reexport _clearBuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__core_object_3d__ = __webpack_require__(42);
/* unused harmony reexport Object3D */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__core_group__ = __webpack_require__(110);
/* unused harmony reexport Group */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__core_model__ = __webpack_require__(36);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_29__core_model__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__core_animation_loop__ = __webpack_require__(108);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_30__core_animation_loop__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__core_pick_models__ = __webpack_require__(111);
/* unused harmony reexport pickModels */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__core_picking_colors__ = __webpack_require__(245);
/* unused harmony reexport encodePickingColor */
/* unused harmony reexport decodePickingColor */
/* unused harmony reexport getNullPickingColor */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__core_transform__ = __webpack_require__(248);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_33__core_transform__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__core_attribute__ = __webpack_require__(109);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_34__core_attribute__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__core_shader_cache__ = __webpack_require__(246);
/* unused harmony reexport _ShaderCache */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__core_animation_loop_proxy__ = __webpack_require__(107);
/* unused harmony reexport _AnimationLoopProxy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__multipass_multi_pass_renderer__ = __webpack_require__(258);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_37__multipass_multi_pass_renderer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__multipass_render_state__ = __webpack_require__(129);
/* unused harmony reexport _RenderState */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__multipass_pass__ = __webpack_require__(19);
/* unused harmony reexport _Pass */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__multipass_composite_pass__ = __webpack_require__(58);
/* unused harmony reexport _CompositePass */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__multipass_clear_pass__ = __webpack_require__(256);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return __WEBPACK_IMPORTED_MODULE_41__multipass_clear_pass__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__multipass_render_pass__ = __webpack_require__(260);
/* unused harmony reexport _RenderPass */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__multipass_copy_pass__ = __webpack_require__(257);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return __WEBPACK_IMPORTED_MODULE_43__multipass_copy_pass__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__multipass_texture_pass__ = __webpack_require__(261);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return __WEBPACK_IMPORTED_MODULE_44__multipass_texture_pass__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__multipass_picking_pass__ = __webpack_require__(259);
/* unused harmony reexport _PickingPass */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__multipass_shader_module_pass__ = __webpack_require__(130);
/* unused harmony reexport _ShaderModulePass */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__multipass_canvas__ = __webpack_require__(255);
/* unused harmony reexport _Canvas */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__geometry_geometry__ = __webpack_require__(18);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return __WEBPACK_IMPORTED_MODULE_48__geometry_geometry__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__geometry_cone_geometry__ = __webpack_require__(112);
/* unused harmony reexport ConeGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__geometry_cube_geometry__ = __webpack_require__(113);
/* unused harmony reexport CubeGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__geometry_cylinder_geometry__ = __webpack_require__(114);
/* unused harmony reexport CylinderGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__geometry_ico_sphere_geometry__ = __webpack_require__(115);
/* unused harmony reexport IcoSphereGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__geometry_plane_geometry__ = __webpack_require__(116);
/* unused harmony reexport PlaneGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__geometry_sphere_geometry__ = __webpack_require__(117);
/* unused harmony reexport SphereGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__geometry_truncated_cone_geometry__ = __webpack_require__(43);
/* unused harmony reexport TruncatedConeGeometry */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56__models_cone__ = __webpack_require__(121);
/* unused harmony reexport Cone */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57__models_cube__ = __webpack_require__(122);
/* unused harmony reexport Cube */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58__models_cylinder__ = __webpack_require__(123);
/* unused harmony reexport Cylinder */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59__models_ico_sphere__ = __webpack_require__(124);
/* unused harmony reexport IcoSphere */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__models_plane__ = __webpack_require__(126);
/* unused harmony reexport Plane */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61__models_sphere__ = __webpack_require__(127);
/* unused harmony reexport Sphere */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62__models_truncated_cone__ = __webpack_require__(128);
/* unused harmony reexport TruncatedCone */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_63__models_clip_space__ = __webpack_require__(44);
/* unused harmony reexport ClipSpace */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_64__io__ = __webpack_require__(251);
/* unused harmony reexport setPathPrefix */
/* unused harmony reexport loadFile */
/* unused harmony reexport loadImage */
/* unused harmony reexport loadTexture */
/* unused harmony reexport loadFiles */
/* unused harmony reexport loadImages */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return __WEBPACK_IMPORTED_MODULE_64__io__["a"]; });
/* unused harmony reexport loadProgram */
/* unused harmony reexport loadModel */
/* unused harmony reexport parseModel */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_65__lighting_light_source__ = __webpack_require__(252);
/* unused harmony reexport DirectionalLight */
/* unused harmony reexport AmbientLight */
/* unused harmony reexport PointLight */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_66__materials_phong_material__ = __webpack_require__(254);
/* unused harmony reexport PhongMaterial */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_67__luma_gl_shadertools__ = __webpack_require__(29);
/* unused harmony reexport registerShaderModules */
/* unused harmony reexport setDefaultShaderModules */
/* unused harmony reexport assembleShaders */
/* unused harmony reexport combineInjects */
/* unused harmony reexport normalizeShaderModule */
/* unused harmony reexport fp32 */
/* unused harmony reexport fp64 */
/* unused harmony reexport project */
/* unused harmony reexport lighting */
/* unused harmony reexport dirlight */
/* unused harmony reexport picking */
/* unused harmony reexport diffuse */
/* unused harmony reexport phonglighting */
/* unused harmony reexport _transform */
/* unused harmony reexport MODULAR_SHADERS */
/* unused harmony reexport getQualifierDetails */
/* unused harmony reexport getPassthroughFS */
/* unused harmony reexport typeToChannelSuffix */
/* unused harmony reexport typeToChannelCount */
/* unused harmony reexport convertToVec4 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_68__webgl_context_debug_context__ = __webpack_require__(269);
/* unused harmony reexport makeDebugContext */
/* unused harmony reexport ClipSpaceQuad */
/* unused harmony reexport glGet */
/* unused harmony reexport glKey */
/* unused harmony reexport glKeyType */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_69__utils_log__ = __webpack_require__(30);
/* unused harmony reexport log */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_70__utils_globals__ = __webpack_require__(22);
/* unused harmony reexport global */
// Export core modules for luma.gl
// Initialize any global state
__webpack_require__(118); // WebGL









 // WebGL1 classes








 // Copy and Blit

 // WebGL2 classes & Extensions









 // experimental WebGL exports


 // CORE






 // Experimental core exports




 // Multipass Rendering








 // export {default as _MaskPass} from './multipass/mask-pass';
// export {default as _ClearMaskPass} from './multipass/clearmask-pass';



 // Geometry








 // Models








 // IO

 // lighting

 // material

 // TODO/CLEAN UP FOR V7
//  We should have a minimal set of forwarding exports from shadertools (ideally none)
//  Analyze risk of breaking apps

 // TO BE REMOVED IN v7

 // DEPRECATED EXPORTS IN v6.0

 // DEPRECATED EXPORTS IN v5.3

 // UNDOCUMENTED API
// TODO - Should these be exposed?



//# sourceMappingURL=index.js.map

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export DRAW_MODE */
/* harmony export (immutable) */ __webpack_exports__["b"] = getDrawMode;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Geometry; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_assert__ = __webpack_require__(5);



 // Rendering primitives - specify how to extract primitives from vertices.
// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants

var DRAW_MODE = {
  POINTS: 0x0000,
  // draw single points.
  LINES: 0x0001,
  // draw lines. Each vertex connects to the one after it.
  LINE_LOOP: 0x0002,
  // draw lines. Each set of two vertices is treated as a separate line segment.
  LINE_STRIP: 0x0003,
  // draw a connected group of line segments from the first vertex to the last
  TRIANGLES: 0x0004,
  // draw triangles. Each set of three vertices creates a separate triangle.
  TRIANGLE_STRIP: 0x0005,
  // draw a connected group of triangles.
  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.
  // Each vertex connects to the previous and the first vertex in the fan.

}; // Helper function to handle string draw modes - when using this library without WebGL constants

function getDrawMode(drawMode) {
  var mode = typeof drawMode === 'string' ? DRAW_MODE[drawMode] || DRAW_MODE.TRIANGLES : drawMode;
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(mode >= 0 && mode <= DRAW_MODE.TRIANGLE_FAN, 'Illegal drawMode');
  return mode;
}

var Geometry =
/*#__PURE__*/
function () {
  function Geometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Geometry);

    var id = opts.id,
        _opts$drawMode = opts.drawMode,
        drawMode = _opts$drawMode === void 0 ? DRAW_MODE.TRIANGLES : _opts$drawMode,
        _opts$vertexCount = opts.vertexCount,
        vertexCount = _opts$vertexCount === void 0 ? undefined : _opts$vertexCount,
        attributes = opts.attributes;
    this.id = id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils__["b" /* uid */])(this.constructor.name);
    this.drawMode = getDrawMode(drawMode);
    this.vertexCount = vertexCount;
    this.attributes = {};
    this.needsRedraw = true;
    this.userData = {};
    Object.seal(this);

    if (attributes) {
      this.setAttributes(attributes);
    }
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Geometry, [{
    key: "setNeedsRedraw",
    value: function setNeedsRedraw() {
      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.needsRedraw = redraw;
      return this;
    }
  }, {
    key: "getNeedsRedraw",
    value: function getNeedsRedraw() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$clearRedrawFlags = _ref.clearRedrawFlags,
          clearRedrawFlags = _ref$clearRedrawFlags === void 0 ? false : _ref$clearRedrawFlags;

      var redraw = false;
      redraw = redraw || this.needsRedraw;
      this.needsRedraw = this.needsRedraw && !clearRedrawFlags;
      return redraw;
    }
  }, {
    key: "setVertexCount",
    value: function setVertexCount(vertexCount) {
      this.vertexCount = vertexCount;
    }
  }, {
    key: "getVertexCount",
    value: function getVertexCount() {
      if (this.vertexCount !== undefined) {
        return this.vertexCount;
      } else if (this.attributes.indices) {
        return this.attributes.indices.value.length;
      } else if (this.attributes.vertices) {
        return this.attributes.vertices.value.length / 3;
      } else if (this.attributes.positions) {
        return this.attributes.positions.value.length / 3;
      }

      return false;
    }
  }, {
    key: "hasAttribute",
    value: function hasAttribute(attributeName) {
      return Boolean(this.attributes[attributeName]);
    }
  }, {
    key: "getAttribute",
    value: function getAttribute(attributeName) {
      var attribute = this.attributes[attributeName];
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(attribute);
      return attribute.value;
    }
  }, {
    key: "getArray",
    value: function getArray(attributeName) {
      var attribute = this.attributes[attributeName];
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(attribute);
      return attribute.value;
    }
  }, {
    key: "getAttributes",
    value: function getAttributes() {
      return this.attributes;
    } // Attribute
    // value: typed array
    // type: indices, vertices, uvs
    // size: elements per vertex
    // target: WebGL buffer type (string or constant)

  }, {
    key: "setAttributes",
    value: function setAttributes(attributes) {
      for (var attributeName in attributes) {
        var attribute = attributes[attributeName]; // Wrap "unwrapped" arrays and try to autodetect their type

        attribute = ArrayBuffer.isView(attribute) ? {
          value: attribute
        } : attribute;
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(ArrayBuffer.isView(attribute.value), "".concat(this._print(attributeName), ": must be typed array or object with value as typed array"));

        this._autoDetectAttribute(attributeName, attribute);

        this.attributes[attributeName] = attribute;
      }

      this.setNeedsRedraw();
      return this;
    } // Check for well known attribute names

    /* eslint-disable default-case, complexity */

  }, {
    key: "_autoDetectAttribute",
    value: function _autoDetectAttribute(attributeName, attribute) {
      var category;

      switch (attributeName) {
        case 'indices':
          category = category || 'indices';
          break;

        case 'texCoords':
        case 'texCoord1':
        case 'texCoord2':
        case 'texCoord3':
          category = 'uvs';
          break;

        case 'vertices':
        case 'positions':
        case 'normals':
        case 'pickingColors':
          category = 'vectors';
          break;
      } // Check for categorys


      switch (category) {
        case 'vectors':
          attribute.size = attribute.size || 3;
          break;

        case 'uvs':
          attribute.size = attribute.size || 2;
          break;

        case 'indices':
          attribute.size = attribute.size || 1;
          attribute.isIndexed = attribute.isIndexed === undefined ? true : attribute.isIndexed;
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(attribute.value instanceof Uint16Array || attribute.value instanceof Uint32Array, 'attribute array for "indices" must be of integer type');
          break;
      }

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(attribute.size, "attribute ".concat(attributeName, " needs size"));
    }
    /* eslint-enable default-case, complexity */

  }, {
    key: "_print",
    value: function _print(attributeName) {
      return "Geometry ".concat(this.id, " attribute ").concat(attributeName);
    }
  }]);

  return Geometry;
}();


//# sourceMappingURL=geometry.js.map

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Pass; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_context__ = __webpack_require__(31);


//
// A base render pass.
//
// Attribution: This class and the multipass system were inspired by
// the THREE.js EffectComposer and *Pass classes



var Pass =
/*#__PURE__*/
function () {
  function Pass(gl, props) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Pass);

    var _props$id = props.id,
        id = _props$id === void 0 ? 'pass' : _props$id;
    this.id = id; // id of this pass

    this.gl = gl;
    this.props = {
      enabled: true,
      screen: false,
      swap: false
    };
    Object.assign(this.props, props);
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Pass, [{
    key: "setProps",
    value: function setProps(props) {
      Object.assign(this.props, props);
    }
  }, {
    key: "render",
    value: function render(renderState, animationProps) {
      var _this = this;

      if (!this.props.enabled) {
        return;
      }

      var gl = this.gl;
      var renderParams = {
        gl: gl,
        outputBuffer: renderState.writeBuffer,
        inputBuffer: renderState.readBuffer,
        animationProps: animationProps,
        swapBuffers: function swapBuffers() {
          return renderState._swapFramebuffers();
        }
      };

      if (this.props.screen) {
        renderParams.inputBuffer = renderParams.outputBuffer;
        renderParams.outputBuffer = __WEBPACK_IMPORTED_MODULE_2__webgl__["c" /* Framebuffer */].getDefaultFramebuffer(gl);
      } else if (this.props.swap) {
        renderParams.inputBuffer = renderState.writeBuffer;
        renderParams.outputBuffer = renderState.readBuffer;
      }

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_context__["a" /* withParameters */])(gl, {
        framebuffer: renderParams.outputBuffer
      }, function () {
        return _this._renderPass(renderParams);
      });

      if (this.props.debug) {
        renderParams.outputBuffer.log(0, this.id);
      }

      if (this.props.swap) {
        renderState._swapFramebuffers();
      }
    }
    /**
     * Renders the effect.
     * This is an abstract method that should be overridden.
     * @param {Framebuffer} inputBuffer - Frame buffer that contains the result of the previous pass
     * @param {Framebuffer} outputBuffer - Frame buffer that serves as the output render target
     */

  }, {
    key: "_renderPass",
    value: function _renderPass(_ref) {// assert(false, 'Draw/render methods not implemented!');

      var gl = _ref.gl,
          inputBuffer = _ref.inputBuffer,
          outputBuffer = _ref.outputBuffer,
          animationProps = _ref.animationProps;
    }
  }]);

  return Pass;
}();


//# sourceMappingURL=pass.js.map

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  create: __webpack_require__(206)
  , clone: __webpack_require__(204)
  , copy: __webpack_require__(205)
  , identity: __webpack_require__(88)
  , transpose: __webpack_require__(100)
  , invert: __webpack_require__(89)
  , adjoint: __webpack_require__(203)
  , determinant: __webpack_require__(85)
  , multiply: __webpack_require__(91)
  , translate: __webpack_require__(99)
  , scale: __webpack_require__(98)
  , rotate: __webpack_require__(94)
  , rotateX: __webpack_require__(95)
  , rotateY: __webpack_require__(96)
  , rotateZ: __webpack_require__(97)
  , fromRotationTranslation: __webpack_require__(207)
  , fromQuat: __webpack_require__(86)
  , frustum: __webpack_require__(87)
  , perspective: __webpack_require__(93)
  , perspectiveFromFieldOfView: __webpack_require__(208)
  , ortho: __webpack_require__(92)
  , lookAt: __webpack_require__(90)
  , str: __webpack_require__(209)
}

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__animation_loop__ = __webpack_require__(108);
/* unused harmony reexport AnimationLoop */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__animation_loop_proxy__ = __webpack_require__(107);
/* unused harmony reexport AnimationLoopProxy */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model__ = __webpack_require__(36);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_2__model__["a"]; });



//# sourceMappingURL=index.js.map

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export self */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return window_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return global_; });
/* unused harmony export document */
/* global self, window, global, document */
var globals = {
  self: typeof self !== 'undefined' && self,
  window: typeof window !== 'undefined' && window,
  global: typeof global !== 'undefined' && global,
  document: typeof document !== 'undefined' && document
};
var self_ = globals.self || globals.window || globals.global;
var window_ = globals.window || globals.self || globals.global;
var global_ = globals.global || globals.self || globals.window;
var document_ = globals.document || {};

//# sourceMappingURL=globals.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(28)))

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export LUMA_SETTERS */
/* harmony export (immutable) */ __webpack_exports__["a"] = setParameters;
/* harmony export (immutable) */ __webpack_exports__["b"] = withParameters;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_context_track_context_state__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_context_set_parameters__ = __webpack_require__(134);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_assert__ = __webpack_require__(5);
/* unused harmony reexport getParameter */
/* unused harmony reexport getParameters */
/* unused harmony reexport setParameter */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_3__webgl_context_set_parameters__["d"]; });
/* unused harmony reexport getModifiedParameters */



/* eslint-disable no-inline-comments, max-len */



 // map of parameter setter function names, parameter constants, default values and types
// - Uses gl function names, except when setter function exist that are named differently
// - When the WebGL api offers <setter> and <setter>Separate (e.g. blendEquation and
//   blendEquationSeparate, we use non-separate name, but accept both non-separate and
//   separate arguments. Thus, a `getParameter` call will always return all the separate values
//   in an array, in a form that can be accepted by the setter.

var LUMA_SETTERS = {
  framebuffer: function framebuffer(gl, _framebuffer) {
    // accepts 1) a WebGLFramebuffer 2) null (default framebuffer), or 3) luma.gl Framebuffer class
    // framebuffer is null when restoring to default framebuffer, otherwise use the WebGL handle.
    var handle = _framebuffer && 'handle' in _framebuffer ? _framebuffer.handle : _framebuffer;
    return gl.bindFramebuffer(36160, handle);
  },
  blend: function blend(gl, value) {
    return value ? gl.enable(3042) : gl.disable(3042);
  },
  blendColor: function blendColor(gl, value) {
    return gl.blendColor.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
  },
  blendEquation: function blendEquation(gl, args) {
    args = isArray(args) ? args : [args, args];
    gl.blendEquationSeparate.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(args));
  },
  blendFunc: function blendFunc(gl, args) {
    args = isArray(args) && args.length === 2 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(args).concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(args)) : args;
    gl.blendFuncSeparate.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(args));
  },
  clearColor: function clearColor(gl, value) {
    return gl.clearColor.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
  },
  clearDepth: function clearDepth(gl, value) {
    return gl.clearDepth(value);
  },
  clearStencil: function clearStencil(gl, value) {
    return gl.clearStencil(value);
  },
  colorMask: function colorMask(gl, value) {
    return gl.colorMask.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
  },
  cull: function cull(gl, value) {
    return value ? gl.enable(2884) : gl.disable(2884);
  },
  cullFace: function cullFace(gl, value) {
    return gl.cullFace(value);
  },
  depthTest: function depthTest(gl, value) {
    return value ? gl.enable(2929) : gl.disable(2929);
  },
  depthFunc: function depthFunc(gl, value) {
    return gl.depthFunc(value);
  },
  depthMask: function depthMask(gl, value) {
    return gl.depthMask(value);
  },
  depthRange: function depthRange(gl, value) {
    return gl.depthRange.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
  },
  dither: function dither(gl, value) {
    return value ? gl.enable(3024) : gl.disable(3024);
  },
  derivativeHint: function derivativeHint(gl, value) {
    // gl1: 'OES_standard_derivatives'
    gl.hint(35723, value);
  },
  frontFace: function frontFace(gl, value) {
    return gl.frontFace(value);
  },
  mipmapHint: function mipmapHint(gl, value) {
    return gl.hint(33170, value);
  },
  lineWidth: function lineWidth(gl, value) {
    return gl.lineWidth(value);
  },
  polygonOffsetFill: function polygonOffsetFill(gl, value) {
    return value ? gl.enable(32823) : gl.disable(32823);
  },
  polygonOffset: function polygonOffset(gl, value) {
    return gl.polygonOffset.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
  },
  sampleCoverage: function sampleCoverage(gl, value) {
    return gl.sampleCoverage.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
  },
  scissorTest: function scissorTest(gl, value) {
    return value ? gl.enable(3089) : gl.disable(3089);
  },
  scissor: function scissor(gl, value) {
    return gl.scissor.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
  },
  stencilTest: function stencilTest(gl, value) {
    return value ? gl.enable(2960) : gl.disable(2960);
  },
  stencilMask: function stencilMask(gl, value) {
    value = isArray(value) ? value : [value, value];

    var _value = value,
        _value2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(_value, 2),
        mask = _value2[0],
        backMask = _value2[1];

    gl.stencilMaskSeparate(1028, mask);
    gl.stencilMaskSeparate(1029, backMask);
  },
  stencilFunc: function stencilFunc(gl, args) {
    args = isArray(args) && args.length === 3 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(args).concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(args)) : args;

    var _args = args,
        _args2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(_args, 6),
        func = _args2[0],
        ref = _args2[1],
        mask = _args2[2],
        backFunc = _args2[3],
        backRef = _args2[4],
        backMask = _args2[5];

    gl.stencilFuncSeparate(1028, func, ref, mask);
    gl.stencilFuncSeparate(1029, backFunc, backRef, backMask);
  },
  stencilOp: function stencilOp(gl, args) {
    args = isArray(args) && args.length === 3 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(args).concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(args)) : args;

    var _args3 = args,
        _args4 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(_args3, 6),
        sfail = _args4[0],
        dpfail = _args4[1],
        dppass = _args4[2],
        backSfail = _args4[3],
        backDpfail = _args4[4],
        backDppass = _args4[5];

    gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
    gl.stencilOpSeparate(1029, backSfail, backDpfail, backDppass);
  },
  viewport: function viewport(gl, value) {
    return gl.viewport.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
  }
}; // HELPERS

function isArray(array) {
  return Array.isArray(array) || ArrayBuffer.isView(array);
} // GETTERS AND SETTERS
// Get the parameter value(s) from the context


 // from '../webgl-utils/set-parameters'
// Get the parameters from the context

 // from '../webgl-utils/set-parameters'
// Resets gl state to default values.

 // from '../webgl-utils/set-parameters'
// Resets gl state to default values.

 // from '../webgl-utils/set-parameters'
// Get a map of modified parameters

 // Note: "setParameters" is given extra treatment below
// Set the parameter value(s) by key to the context
// Sets value with key to context.
// Value may be "normalized" (in case a short form is supported). In that case
// the normalized value is retured.

function setParameters(gl, parameters) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_context_set_parameters__["a" /* setParameters */])(gl, parameters);

  for (var key in parameters) {
    var setter = LUMA_SETTERS[key];

    if (setter) {
      setter(gl, parameters[key], key);
    }
  }
} // VERY LIMITED / BASIC GL STATE MANAGEMENT
// Executes a function with gl states temporarily set, exception safe
// Currently support pixelStorage, scissor test and framebuffer binding

function withParameters(gl, parameters, func) {
  // assertWebGLContext(gl);
  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["e" /* isObjectEmpty */])(parameters)) {
    // Avoid setting state if no parameters provided. Just call and return
    return func(gl);
  }

  var _parameters$nocatch = parameters.nocatch,
      nocatch = _parameters$nocatch === void 0 ? true : _parameters$nocatch; // frameBuffer not supported use framebuffer

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_assert__["a" /* default */])(!parameters.frameBuffer);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_context_track_context_state__["a" /* pushContextState */])(gl);
  setParameters(gl, parameters); // Setup is done, call the function

  var value;

  if (nocatch) {
    // Avoid try catch to minimize stack size impact for safe execution paths
    value = func(gl);
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_context_track_context_state__["b" /* popContextState */])(gl);
  } else {
    // Wrap in a try-catch to ensure that parameters are restored on exceptions
    try {
      value = func(gl);
    } finally {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_context_track_context_state__["b" /* popContextState */])(gl);
    }
  }

  return value;
}
//# sourceMappingURL=context-state.js.map

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Framebuffer; });
/* unused harmony export FRAMEBUFFER_ATTACHMENT_PARAMETERS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__resource__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__texture_2d__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__renderbuffer__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__clear__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__webgl_context_context_features__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__webgl_utils_constants_to_keys__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__copy_and_blit_js__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__utils_assert__ = __webpack_require__(5);


















var ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';

var Framebuffer =
/*#__PURE__*/
function (_Resource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_inherits__["a" /* default */])(Framebuffer, _Resource);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_createClass__["a" /* default */])(Framebuffer, [{
    key: "MAX_COLOR_ATTACHMENTS",
    get: function get() {
      return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);
    }
  }, {
    key: "MAX_DRAW_BUFFERS",
    get: function get() {
      return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);
    }
  }], [{
    key: "isSupported",
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          colorBufferFloat = _ref.colorBufferFloat,
          colorBufferHalfFloat = _ref.colorBufferHalfFloat;

      var supported = true;
      supported = colorBufferFloat && gl.getExtension(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_13__webgl_utils__["b" /* isWebGL2 */])(gl) ? 'EXT_color_buffer_float' : 'WEBGL.color_buffer_float');
      supported = colorBufferHalfFloat && gl.getExtension(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_13__webgl_utils__["b" /* isWebGL2 */])(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');
      return supported;
    } // Create a Framebuffer wrapper for the default framebuffer (target === null)

  }, {
    key: "getDefaultFramebuffer",
    value: function getDefaultFramebuffer(gl) {
      gl.luma = gl.luma || {};
      gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {
        id: 'default-framebuffer',
        handle: null,
        attachments: {}
      }); // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?

      return gl.luma.defaultFramebuffer;
    }
  }]);

  function Framebuffer(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Framebuffer);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Framebuffer).call(this, gl, opts)); // Public members

    _this.width = null;
    _this.height = null;
    _this.attachments = {};
    _this.readBuffer = 36064;
    _this.drawBuffers = [36064];

    _this.initialize(opts);

    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));
    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_createClass__["a" /* default */])(Framebuffer, [{
    key: "initialize",
    value: function initialize(_ref2) {
      var _ref2$width = _ref2.width,
          width = _ref2$width === void 0 ? 1 : _ref2$width,
          _ref2$height = _ref2.height,
          height = _ref2$height === void 0 ? 1 : _ref2$height,
          _ref2$attachments = _ref2.attachments,
          attachments = _ref2$attachments === void 0 ? null : _ref2$attachments,
          _ref2$color = _ref2.color,
          color = _ref2$color === void 0 ? true : _ref2$color,
          _ref2$depth = _ref2.depth,
          depth = _ref2$depth === void 0 ? true : _ref2$depth,
          _ref2$stencil = _ref2.stencil,
          stencil = _ref2$stencil === void 0 ? false : _ref2$stencil,
          _ref2$check = _ref2.check,
          check = _ref2$check === void 0 ? true : _ref2$check,
          readBuffer = _ref2.readBuffer,
          drawBuffers = _ref2.drawBuffers;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(width >= 0 && height >= 0, 'Width and height need to be integers'); // Store actual width and height for diffing

      this.width = width;
      this.height = height; // Resize any provided attachments - note that resize only resizes if needed
      // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)

      if (attachments) {
        for (var attachment in attachments) {
          var target = attachments[attachment];
          var object = Array.isArray(target) ? target[0] : target;
          object.resize({
            width: width,
            height: height
          });
        }
      } else {
        // Create any requested default attachments
        attachments = this._createDefaultAttachments(color, depth, stencil, width, height);
      }

      this.update({
        clearAttachments: true,
        attachments: attachments,
        readBuffer: readBuffer,
        drawBuffers: drawBuffers
      }); // Checks that framebuffer was properly set up, if not, throws an explanatory error

      if (attachments && check) {
        this.checkStatus();
      }
    }
  }, {
    key: "update",
    value: function update(_ref3) {
      var _ref3$attachments = _ref3.attachments,
          attachments = _ref3$attachments === void 0 ? {} : _ref3$attachments,
          readBuffer = _ref3.readBuffer,
          drawBuffers = _ref3.drawBuffers,
          _ref3$clearAttachment = _ref3.clearAttachments,
          clearAttachments = _ref3$clearAttachment === void 0 ? false : _ref3$clearAttachment,
          _ref3$resizeAttachmen = _ref3.resizeAttachments,
          resizeAttachments = _ref3$resizeAttachmen === void 0 ? true : _ref3$resizeAttachmen;
      this.attach(attachments, {
        clearAttachments: clearAttachments,
        resizeAttachments: resizeAttachments
      });
      var gl = this.gl; // Multiple render target support, set read buffer and draw buffers

      var prevHandle = gl.bindFramebuffer(36160, this.handle);

      if (readBuffer) {
        this._setReadBuffer(readBuffer);
      }

      if (drawBuffers) {
        this._setDrawBuffers(drawBuffers);
      }

      gl.bindFramebuffer(36160, prevHandle || null);
      return this;
    } // Attachment resize is expected to be a noop if size is same

  }, {
    key: "resize",
    value: function resize() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          width = _ref4.width,
          height = _ref4.height;

      // for default framebuffer, just update the stored size
      if (this.handle === null) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(width === undefined && height === undefined);
        this.width = this.gl.drawingBufferWidth;
        this.height = this.gl.drawingBufferHeight;
        return this;
      }

      if (width === undefined) {
        width = this.gl.drawingBufferWidth;
      }

      if (height === undefined) {
        height = this.gl.drawingBufferHeight;
      }

      if (width !== this.width && height !== this.height) {
        __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].log(2, "Resizing framebuffer ".concat(this.id, " to ").concat(width, "x").concat(height));
      }

      for (var attachmentPoint in this.attachments) {
        this.attachments[attachmentPoint].resize({
          width: width,
          height: height
        });
      }

      this.width = width;
      this.height = height;
      return this;
    } // Attach from a map of attachments

  }, {
    key: "attach",
    value: function attach(attachments) {
      var _this2 = this;

      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref5$clearAttachment = _ref5.clearAttachments,
          clearAttachments = _ref5$clearAttachment === void 0 ? false : _ref5$clearAttachment,
          _ref5$resizeAttachmen = _ref5.resizeAttachments,
          resizeAttachments = _ref5$resizeAttachmen === void 0 ? true : _ref5$resizeAttachmen;

      var newAttachments = {}; // Any current attachments need to be removed, add null values to map

      if (clearAttachments) {
        Object.keys(this.attachments).forEach(function (key) {
          newAttachments[key] = null;
        });
      } // Overlay the new attachments


      Object.assign(newAttachments, attachments);
      var prevHandle = this.gl.bindFramebuffer(36160, this.handle); // Walk the attachments

      for (var key in newAttachments) {
        // Ensure key is not undefined
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(key !== undefined, 'Misspelled framebuffer binding point?');
        var attachment = Number(key);
        var descriptor = newAttachments[attachment];
        var object = descriptor;

        if (!object) {
          this._unattach(attachment);
        } else if (object instanceof __WEBPACK_IMPORTED_MODULE_10__renderbuffer__["a" /* default */]) {
          this._attachRenderbuffer({
            attachment: attachment,
            renderbuffer: object
          });
        } else if (Array.isArray(descriptor)) {
          var _descriptor = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(descriptor, 3),
              texture = _descriptor[0],
              _descriptor$ = _descriptor[1],
              layer = _descriptor$ === void 0 ? 0 : _descriptor$,
              _descriptor$2 = _descriptor[2],
              level = _descriptor$2 === void 0 ? 0 : _descriptor$2;

          object = texture;

          this._attachTexture({
            attachment: attachment,
            texture: texture,
            layer: layer,
            level: level
          });
        } else {
          this._attachTexture({
            attachment: attachment,
            texture: object,
            layer: 0,
            level: 0
          });
        } // Resize objects


        if (resizeAttachments && object) {
          object.resize({
            width: this.width,
            height: this.height
          });
        }
      }

      this.gl.bindFramebuffer(36160, prevHandle || null); // Assign to attachments and remove any nulls to get a clean attachment map

      Object.assign(this.attachments, attachments);
      Object.keys(this.attachments).filter(function (key) {
        return !_this2.attachments[key];
      }).forEach(function (key) {
        delete _this2.attachments[key];
      });
    }
  }, {
    key: "checkStatus",
    value: function checkStatus() {
      var gl = this.gl;
      var prevHandle = gl.bindFramebuffer(36160, this.handle);
      var status = gl.checkFramebufferStatus(36160);
      gl.bindFramebuffer(36160, prevHandle || null);

      if (status !== 36053) {
        throw new Error(_getFrameBufferStatus(status));
      }

      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          color = _ref6.color,
          depth = _ref6.depth,
          stencil = _ref6.stencil,
          _ref6$drawBuffers = _ref6.drawBuffers,
          drawBuffers = _ref6$drawBuffers === void 0 ? [] : _ref6$drawBuffers;

      // Bind framebuffer and delegate to global clear functions
      var prevHandle = this.gl.bindFramebuffer(36160, this.handle);

      if (color || depth || stencil) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__clear__["a" /* clear */])(this.gl, {
          color: color,
          depth: depth,
          stencil: stencil
        });
      }

      drawBuffers.forEach(function (value, drawBuffer) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__clear__["b" /* clearBuffer */])({
          drawBuffer: drawBuffer,
          value: value
        });
      });
      this.gl.bindFramebuffer(36160, prevHandle || null);
      return this;
    } // NOTE: Slow requires roundtrip to GPU
    // App can provide pixelArray or have it auto allocated by this method
    // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,
    //  newly allocated by this method unless provided by app.

  }, {
    key: "readPixels",
    value: function readPixels() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].error('Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)')();

      return null;
    } // Reads data into provided buffer object asynchronously
    // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.

  }, {
    key: "readPixelsToBuffer",
    value: function readPixelsToBuffer() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].error('Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)')();

      return null;
    } // Reads pixels as a dataUrl

  }, {
    key: "copyToDataUrl",
    value: function copyToDataUrl() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].error('Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)')();

      return null;
    } // Reads pixels into an HTML Image

  }, {
    key: "copyToImage",
    value: function copyToImage() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();

      return null;
    } // copyToFramebuffer({width, height}) {
    //   const scaleX = width / this.width;
    //   const scaleY = height / this.height;
    //   const scale = Math.min(scaleX, scaleY);
    //   width = width * scale;
    //   height = height * scale;
    //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});
    //   this.blit();
    // }
    // Copy a rectangle from a framebuffer attachment into a texture (at an offset)
    // NOTE: assumes texture has enough storage allocated
    // eslint-disable-next-line complexity

  }, {
    key: "copyToTexture",
    value: function copyToTexture() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].error('Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})')();

      return null;
    } // WEBGL2 INTERFACE
    // Copies a rectangle of pixels between framebuffers
    // eslint-disable-next-line complexity

  }, {
    key: "blit",
    value: function blit() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();

      return null;
    } // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer

  }, {
    key: "invalidate",
    value: function invalidate(_ref7) {
      var _ref7$attachments = _ref7.attachments,
          attachments = _ref7$attachments === void 0 ? [] : _ref7$attachments,
          _ref7$x = _ref7.x,
          x = _ref7$x === void 0 ? 0 : _ref7$x,
          _ref7$y = _ref7.y,
          y = _ref7$y === void 0 ? 0 : _ref7$y,
          width = _ref7.width,
          height = _ref7.height;
      var gl = this.gl;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_13__webgl_utils__["c" /* assertWebGL2Context */])(gl);
      var prevHandle = gl.bindFramebuffer(36008, this.handle);
      var invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;

      if (invalidateAll) {
        gl.invalidateFramebuffer(36008, attachments);
      } else {
        gl.invalidateFramebuffer(36008, attachments, x, y, width, height);
      }

      gl.bindFramebuffer(36008, prevHandle);
      return this;
    } // Return the value for `pname` of the specified attachment.
    // The type returned is the type of the requested pname

  }, {
    key: "getAttachmentParameter",
    value: function getAttachmentParameter(attachment, pname, keys) {
      var value = this._getAttachmentParameterFallback(pname);

      if (value === null) {
        this.gl.bindFramebuffer(36160, this.handle);
        value = this.gl.getFramebufferAttachmentParameter(36160, attachment, pname);
        this.gl.bindFramebuffer(36160, null);
      }

      if (keys && value > 1000) {
        value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_14__webgl_utils_constants_to_keys__["c" /* glKey */])(this.gl, value);
      }

      return value;
    }
  }, {
    key: "getAttachmentParameters",
    value: function getAttachmentParameters() {
      var attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 36064;
      var keys = arguments.length > 1 ? arguments[1] : undefined;
      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.constructor.ATTACHMENT_PARAMETERS || [];
      var values = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = parameters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pname = _step.value;
          var key = keys ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_14__webgl_utils_constants_to_keys__["c" /* glKey */])(this.gl, pname) : pname;
          values[key] = this.getAttachmentParameter(attachment, pname, keys);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return values;
    }
  }, {
    key: "getParameters",
    value: function getParameters() {
      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var attachments = Object.keys(this.attachments); // if (this === this.gl.luma.defaultFramebuffer) {
      //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];
      // }

      var parameters = {};

      for (var _i = 0; _i < attachments.length; _i++) {
        var attachmentName = attachments[_i];
        var attachment = Number(attachmentName);
        var key = keys ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_14__webgl_utils_constants_to_keys__["c" /* glKey */])(this.gl, attachment) : attachment;
        parameters[key] = this.getAttachmentParameters(attachment, keys);
      }

      return parameters;
    } // DEBUG
    // Note: Will only work when called in an event handler

  }, {
    key: "show",
    value: function show() {
      /* global window */
      if (typeof window !== 'undefined') {
        window.open(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_15__copy_and_blit_js__["a" /* copyToDataUrl */])(this), 'luma-debug-texture');
      }

      return this;
    }
  }, {
    key: "log",
    value: function log() {
      var priority = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      if (priority > __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].priority || typeof window === 'undefined') {
        return this;
      }

      message = message || "Framebuffer ".concat(this.id);
      var image = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_15__copy_and_blit_js__["a" /* copyToDataUrl */])(this, {
        maxHeight: 100
      });

      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].image({
        priority: priority,
        message: message,
        image: image
      }, message)();

      return this;
    } // WEBGL INTERFACE

  }, {
    key: "bind",
    value: function bind() {
      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref8$target = _ref8.target,
          target = _ref8$target === void 0 ? 36160 : _ref8$target;

      this.gl.bindFramebuffer(target, this.handle);
      return this;
    }
  }, {
    key: "unbind",
    value: function unbind() {
      var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref9$target = _ref9.target,
          target = _ref9$target === void 0 ? 36160 : _ref9$target;

      this.gl.bindFramebuffer(target, null);
      return this;
    } // PRIVATE METHODS

  }, {
    key: "_createDefaultAttachments",
    value: function _createDefaultAttachments(color, depth, stencil, width, height) {
      var defaultAttachments = null; // Add a color buffer if requested and not supplied

      if (color) {
        var _parameters;

        defaultAttachments = defaultAttachments || {};
        defaultAttachments[36064] = new __WEBPACK_IMPORTED_MODULE_9__texture_2d__["a" /* default */](this.gl, {
          id: "".concat(this.id, "-color0"),
          pixels: null,
          // reserves texture memory, but texels are undefined
          format: 6408,
          type: 5121,
          width: width,
          height: height,
          // Note: Mipmapping can be disabled by texture resource when we resize the texture
          // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant
          // behavior we always disable mipmaps.
          mipmaps: false,
          // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.
          // Set WRAP modes that support NPOT textures too.
          parameters: (_parameters = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_parameters, 10241, 9728), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_parameters, 10240, 9728), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_parameters, 10242, 33071), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_parameters, 10243, 33071), _parameters)
        });
      }

      if (depth && stencil) {
        // TODO - handle separate stencil
        defaultAttachments = defaultAttachments || {};
        defaultAttachments[33306] = new __WEBPACK_IMPORTED_MODULE_10__renderbuffer__["a" /* default */](this.gl, {
          id: "".concat(this.id, "-depth-stencil"),
          format: 35056,
          width: width,
          height: 111
        }); // TODO - optional texture
        // new Texture2D(this.gl, {
        //   id: `${this.id}-depth-stencil`,
        //   format: GL.DEPTH24_STENCIL8,
        //   dataFormat: GL.DEPTH_STENCIL,
        //   type: GL.UNSIGNED_INT_24_8,
        //   width,
        //   height,
        //   mipmaps: false
        // });
      } else if (depth) {
        // Add a depth buffer if requested and not supplied
        defaultAttachments = defaultAttachments || {};
        defaultAttachments[36096] = new __WEBPACK_IMPORTED_MODULE_10__renderbuffer__["a" /* default */](this.gl, {
          id: "".concat(this.id, "-depth"),
          format: 33189,
          width: width,
          height: height
        });
      } else if (stencil) {
        // TODO - handle separate stencil
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(false);
      }

      return defaultAttachments;
    }
  }, {
    key: "_unattach",
    value: function _unattach(attachment) {
      var oldAttachment = this.attachments[attachment];

      if (!oldAttachment) {
        return;
      }

      if (oldAttachment instanceof __WEBPACK_IMPORTED_MODULE_10__renderbuffer__["a" /* default */]) {
        // render buffer
        this.gl.framebufferRenderbuffer(36160, attachment, 36161, null);
      } else {
        // Must be a texture attachment
        this.gl.framebufferTexture2D(36160, attachment, 3553, null, 0);
      }

      delete this.attachments[attachment];
    }
  }, {
    key: "_attachRenderbuffer",
    value: function _attachRenderbuffer(_ref10) {
      var _ref10$attachment = _ref10.attachment,
          attachment = _ref10$attachment === void 0 ? 36064 : _ref10$attachment,
          renderbuffer = _ref10.renderbuffer;
      var gl = this.gl; // TODO - is the bind needed?
      // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);

      gl.framebufferRenderbuffer(36160, attachment, 36161, renderbuffer.handle); // TODO - is the unbind needed?
      // gl.bindRenderbuffer(GL.RENDERBUFFER, null);

      this.attachments[attachment] = renderbuffer;
    } // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`
    // level = 0 - mipmapLevel (must be 0 in WebGL1)

  }, {
    key: "_attachTexture",
    value: function _attachTexture(_ref11) {
      var _ref11$attachment = _ref11.attachment,
          attachment = _ref11$attachment === void 0 ? 36064 : _ref11$attachment,
          texture = _ref11.texture,
          layer = _ref11.layer,
          level = _ref11.level;
      var gl = this.gl;
      gl.bindTexture(texture.target, texture.handle);

      switch (texture.target) {
        case 35866:
        case 32879:
          gl.framebufferTextureLayer(36160, attachment, texture.target, level, layer);
          break;

        case 34067:
          // layer must be a cubemap face (or if index, converted to cube map face)
          var face = mapIndexToCubeMapFace(layer);
          gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);
          break;

        case 3553:
          gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);
          break;

        default:
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(false, 'Illegal texture type');
      }

      gl.bindTexture(texture.target, null);
      this.attachments[attachment] = texture;
    } // Expects framebuffer to be bound

  }, {
    key: "_setReadBuffer",
    value: function _setReadBuffer(gl, readBuffer) {
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_13__webgl_utils__["b" /* isWebGL2 */])(gl)) {
        gl.readBuffer(readBuffer);
      } else {
        // Setting to color attachment 0 is a noop, so allow it in WebGL1
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(readBuffer === 36064 || readBuffer === 1029, ERR_MULTIPLE_RENDERTARGETS);
      }

      this.readBuffer = readBuffer;
    } // Expects framebuffer to be bound

  }, {
    key: "_setDrawBuffers",
    value: function _setDrawBuffers(gl, drawBuffers) {
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_13__webgl_utils__["b" /* isWebGL2 */])(gl)) {
        gl.drawBuffers(drawBuffers);
      } else {
        var ext = gl.getExtension('WEBGL.draw_buffers');

        if (ext) {
          ext.drawBuffersWEBGL(drawBuffers);
        } else {
          // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(drawBuffers.length === 1 && (drawBuffers[0] === 36064 || drawBuffers[0] === 1029), ERR_MULTIPLE_RENDERTARGETS);
        }
      }

      this.drawBuffers = drawBuffers;
    } // Attempt to provide workable defaults for WebGL2 symbols under WebGL1
    // null means OK to query
    // TODO - move to webgl1 polyfills

    /* eslint-disable complexity */

  }, {
    key: "_getAttachmentParameterFallback",
    value: function _getAttachmentParameterFallback(pname) {
      var caps = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_12__webgl_context_context_features__["a" /* getFeatures */])(this.gl);

      switch (pname) {
        case 36052:
          // GLint
          return !caps.webgl2 ? 0 : null;

        case 33298: // GLint

        case 33299: // GLint

        case 33300: // GLint

        case 33301: // GLint

        case 33302: // GLint

        case 33303:
          // GLint
          return !caps.webgl2 ? 8 : null;

        case 33297:
          // GLenum
          return !caps.webgl2 ? 5125 : null;

        case 33296:
          return !caps.webgl2 && !caps.EXT_sRGB ? 9729 : null;

        default:
          return null;
      }
    }
    /* eslint-enable complexity */
    // RESOURCE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createFramebuffer();
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteFramebuffer(this.handle);
    }
  }, {
    key: "_bindHandle",
    value: function _bindHandle(handle) {
      return this.gl.bindFramebuffer(36160, handle);
    }
  }, {
    key: "color",
    get: function get() {
      return this.attachments[36064] || null;
    }
  }, {
    key: "texture",
    get: function get() {
      return this.attachments[36064] || null;
    }
  }, {
    key: "depth",
    get: function get() {
      return this.attachments[36096] || this.attachments[33306] || null;
    }
  }, {
    key: "stencil",
    get: function get() {
      return this.attachments[36128] || this.attachments[33306] || null;
    }
  }]);

  return Framebuffer;
}(__WEBPACK_IMPORTED_MODULE_8__resource__["a" /* default */]); // PUBLIC METHODS
// Map an index to a cube map face constant




function mapIndexToCubeMapFace(layer) {
  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)
  // if smaller assume layer is index, otherwise assume it is already a cube map face constant
  return layer < 34069 ? layer + 34069 : layer;
} // Helper METHODS
// Get a string describing the framebuffer error if installed


function _getFrameBufferStatus(status) {
  // Use error mapping if installed
  var STATUS = Framebuffer.STATUS || {};
  return STATUS[status] || "Framebuffer error ".concat(status);
}

var FRAMEBUFFER_ATTACHMENT_PARAMETERS = [36049, // WebGLRenderbuffer or WebGLTexture
36048, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE
// GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.
// GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint
// EXT_sRGB or WebGL2
33296, // GL.LINEAR, GL.SRBG
// WebGL2
// GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint
33298, // GLint
33299, // GLint
33300, // GLint
33301, // GLint
33302, // GLint
33303 // GLint
// GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
// GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.
];
Framebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;
//# sourceMappingURL=framebuffer.js.map

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils__ = __webpack_require__(7);
/* unused harmony reexport Image */
/* unused harmony reexport WebGLRenderingContext */
/* unused harmony reexport WebGLProgram */
/* unused harmony reexport WebGLShader */
/* unused harmony reexport WebGLBuffer */
/* unused harmony reexport WebGLFramebuffer */
/* unused harmony reexport WebGLRenderbuffer */
/* unused harmony reexport WebGLTexture */
/* unused harmony reexport WebGLUniformLocation */
/* unused harmony reexport WebGLActiveInfo */
/* unused harmony reexport WebGLShaderPrecisionFormat */
/* unused harmony reexport WebGL2RenderingContext */
/* unused harmony reexport webGLTypesAvailable */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_context_context__ = __webpack_require__(60);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_1__webgl_context_context__["b"]; });
/* unused harmony reexport isWebGL2 */
/* unused harmony reexport createGLContext */
/* unused harmony reexport destroyGLContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_context_context_state__ = __webpack_require__(23);
/* unused harmony reexport withParameters */
/* unused harmony reexport resetParameters */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_context_context_limits__ = __webpack_require__(46);
/* unused harmony reexport getContextInfo */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__clear__ = __webpack_require__(49);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_4__clear__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__uniforms__ = __webpack_require__(68);
/* unused harmony reexport parseUniformName */
/* unused harmony reexport getUniformSetter */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__buffer__ = __webpack_require__(15);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_6__buffer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shader__ = __webpack_require__(52);
/* unused harmony reexport Shader */
/* unused harmony reexport VertexShader */
/* unused harmony reexport FragmentShader */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__program__ = __webpack_require__(65);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_8__program__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__framebuffer__ = __webpack_require__(24);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_9__framebuffer__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__renderbuffer__ = __webpack_require__(51);
/* unused harmony reexport Renderbuffer */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__texture_2d__ = __webpack_require__(38);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_11__texture_2d__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__texture_cube__ = __webpack_require__(66);
/* unused harmony reexport TextureCube */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__vertex_array__ = __webpack_require__(141);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_13__vertex_array__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__transform_feedback__ = __webpack_require__(67);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_14__transform_feedback__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__query__ = __webpack_require__(137);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_15__query__["a"]; });
// luma.gl Base WebGL wrapper library
// Provides simple class/function wrappers around the low level webgl objects
// These classes are intentionally close to the WebGL API
// but make it easier to use.
// Higher level abstractions can be built on these classes
// Exports WebGL API constants and types, plus some basic type checks



 // Functions


 // WebGL1 objects







 // WebGL2 objects




//# sourceMappingURL=index.js.map

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export TEXTURE_FORMATS */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Texture; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__resource__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__buffer__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_context_context_state__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils_assert__ = __webpack_require__(5);







var _TEXTURE_FORMATS;

/* eslint-disable no-inline-comments, max-len */






 // Supported min filters for NPOT texture.

var NPOT_MIN_FILTERS = [9729, 9728]; // const S3TC = 'WEBGL_compressed_texture_s3tc';
// const PVRTC = 'WEBGL_compressed_texture_pvrtc';
// const ES3 = 'WEBGL_compressed_texture_es3';
// const ETC1 = 'WEBGL_compressed_texture_etc1';
// const SRGB = 'EXT_sRGB';
// const DEPTH = 'WEBGL_depth_texture';
// Legal combinations for internalFormat, format and type

var TEXTURE_FORMATS = (_TEXTURE_FORMATS = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_TEXTURE_FORMATS, 6407, {
  dataFormat: 6407,
  types: [5121, 33635]
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_TEXTURE_FORMATS, 6408, {
  dataFormat: 6408,
  types: [5121, 32819, 32820]
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_TEXTURE_FORMATS, 6406, {
  dataFormat: 6406,
  types: [5121]
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_TEXTURE_FORMATS, 6409, {
  dataFormat: 6409,
  types: [5121]
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_TEXTURE_FORMATS, 6410, {
  dataFormat: 6410,
  types: [5121]
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_TEXTURE_FORMATS, 33326, {
  dataFormat: 6403,
  types: [5126],
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_TEXTURE_FORMATS, 33328, {
  dataFormat: 33319,
  types: [5126],
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_TEXTURE_FORMATS, 34837, {
  dataFormat: 6407,
  types: [5126],
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_TEXTURE_FORMATS, 34836, {
  dataFormat: 6408,
  types: [5126],
  gl2: true // [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8], gl1: DEPTH},
  // [GL.DEPTH_STENCIL]: {gl1: DEPTH},
  // Sized texture format - more performance
  // R
  // [GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},
  // [GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
  // // RG
  // [GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},
  // [GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
  // // RGB
  // [GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},
  // [GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_half_float'},
  // [GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true, gl1: 'WEBGL_color_buffer_float'},
  // [GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
  // // RGBA
  // [GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1: SRGB},
  // [GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},
  // [GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},
  // [GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
  // [GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}
  // Compressed formats
  // WEBGL_compressed_texture_s3tc
  // [GL.COMPRESSED_RGB_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},
  // [GL.COMPRESSED_RGBA_S3TC_DXT1_EXT]: {compressed: true, gl1: S3TC},
  // [GL.COMPRESSED_RGBA_S3TC_DXT3_EXT]: {compressed: true, gl1: S3TC},
  // [GL.COMPRESSED_RGBA_S3TC_DXT5_EXT]: {compressed: true, gl1: S3TC},
  // WEBGL_compressed_texture_es3
  // [GL.COMPRESSED_R11_EAC]: {compressed: true, gl1: ES3}, // RED
  // [GL.COMPRESSED_SIGNED_R11_EAC]: {compressed: true, gl1: ES3}, // RED
  // [GL.COMPRESSED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG
  // [GL.COMPRESSED_SIGNED_RG11_EAC]: {compressed: true, gl1: ES3}, // RG
  // [GL.COMPRESSED_RGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB
  // [GL.COMPRESSED_RGBA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RBG
  // [GL.COMPRESSED_SRGB8_ETC2]: {compressed: true, gl1: ES3}, // RGB
  // [GL.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: {compressed: true, gl1: ES3}, // RGBA
  // [GL.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA
  // [GL.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: {compressed: true, gl1: ES3}, // RGBA

  /* WebGL2 guaranteed availability compressed formats?
  COMPRESSED_R11_EAC RED
  COMPRESSED_SIGNED_R11_EAC RED
  COMPRESSED_RG11_EAC RG
  COMPRESSED_SIGNED_RG11_EAC RG
  COMPRESSED_RGB8_ETC2 RGB
  COMPRESSED_SRGB8_ETC2 RGB
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 RGBA
  COMPRESSED_RGBA8_ETC2_EAC RGBA
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
  */
  // WEBGL_compressed_texture_pvrtc
  // [GL.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},
  // [GL.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: {compressed: true, gl1: PVRTC},
  // [GL.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},
  // [GL.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: {compressed: true, gl1: PVRTC},
  // WEBGL_compressed_texture_etc1
  // [GL.COMPRESSED_RGB_ETC1_WEBGL]: {compressed: true, gl1: ETC1},
  // WEBGL_compressed_texture_atc
  // [GL.COMPRESSED_RGB_ATC_WEBGL]: {compressed: true, gl1: ETC1},
  // [GL.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: {compressed: true, gl1: ETC1},
  // [GL.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: {compressed: true, gl1: ETC1}

}), _TEXTURE_FORMATS);

function isFormatSupported(gl, format) {
  var info = TEXTURE_FORMATS[format];

  if (!info) {
    return false;
  }

  if (info.gl1 === undefined && info.gl2 === undefined) {
    // No info - always supported
    return true;
  }

  var value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["b" /* isWebGL2 */])(gl) ? info.gl2 || info.gl1 : info.gl1;
  return typeof value === 'string' ? gl.getExtension(value) : value;
}

function isLinearFilteringSupported(gl, format) {
  var info = TEXTURE_FORMATS[format];

  switch (info && info.types[0]) {
    // Both WebGL1 and WebGL2?
    case 5126:
      return gl.getExtension('OES_texture_float_linear');
    // Not in WebGL2?

    case 5131:
      return gl.getExtension('OES_texture_half_float_linear');

    default:
      return true;
  }
}

var Texture =
/*#__PURE__*/
function (_Resource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Texture, _Resource);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Texture, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          format = _ref.format,
          linearFiltering = _ref.linearFiltering;

      var supported = true;

      if (format) {
        supported = supported && isFormatSupported(gl, format);
        supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));
      }

      return supported;
    } // target cannot be modified by bind:
    // textures are special because when you first bind them to a target,
    // they get special information. When you first bind a texture as a
    // GL_TEXTURE_2D, you are actually setting special state in the texture.
    // You are saying that this texture is a 2D texture.
    // And it will always be a 2D texture; this state cannot be changed ever.
    // If you have a texture that was first bound as a GL_TEXTURE_2D,
    // you must always bind it as a GL_TEXTURE_2D;
    // attempting to bind it as GL_TEXTURE_1D will give rise to an error
    // (while run-time).

  }]);

  function Texture(gl, opts) {
    var _this;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Texture);

    var _opts$id = opts.id,
        id = _opts$id === void 0 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils__["b" /* uid */])('texture') : _opts$id,
        handle = opts.handle,
        target = opts.target;
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Texture).call(this, gl, {
      id: id,
      handle: handle
    }));
    _this.target = target;
    _this.hasFloatTexture = gl.getExtension('OES_texture_float');
    _this.textureUnit = undefined;
    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Texture, [{
    key: "toString",
    value: function toString() {
      return "Texture(".concat(this.id, ",").concat(this.width, "x").concat(this.height, ")");
    }
    /* eslint-disable max-len, max-statements */

  }, {
    key: "initialize",
    value: function initialize() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = opts.data;
      var _opts$pixels = opts.pixels,
          pixels = _opts$pixels === void 0 ? null : _opts$pixels,
          _opts$format = opts.format,
          format = _opts$format === void 0 ? 6408 : _opts$format,
          _opts$type = opts.type,
          type = _opts$type === void 0 ? 5121 : _opts$type,
          _opts$border = opts.border,
          border = _opts$border === void 0 ? 0 : _opts$border,
          _opts$recreate = opts.recreate,
          recreate = _opts$recreate === void 0 ? false : _opts$recreate,
          _opts$parameters = opts.parameters,
          parameters = _opts$parameters === void 0 ? {} : _opts$parameters,
          _opts$pixelStore = opts.pixelStore,
          pixelStore = _opts$pixelStore === void 0 ? {} : _opts$pixelStore,
          _opts$textureUnit = opts.textureUnit,
          textureUnit = _opts$textureUnit === void 0 ? undefined : _opts$textureUnit,
          _opts$unpackFlipY = opts.unpackFlipY,
          unpackFlipY = _opts$unpackFlipY === void 0 ? true : _opts$unpackFlipY;
      var _opts$mipmaps = opts.mipmaps,
          mipmaps = _opts$mipmaps === void 0 ? true : _opts$mipmaps; // pixels variable is for API compatibility purpose

      if (!data) {
        // TODO - This looks backwards? Commenting out for now until we decide
        // which prop to use
        // log.deprecated('data', 'pixels')();
        data = pixels;
      }

      var width = opts.width,
          height = opts.height,
          dataFormat = opts.dataFormat; // Deduce width and height

      var _this$_deduceParamete = this._deduceParameters({
        format: format,
        type: type,
        dataFormat: dataFormat,
        compressed: false,
        data: data,
        width: width,
        height: height
      });

      width = _this$_deduceParamete.width;
      height = _this$_deduceParamete.height;
      dataFormat = _this$_deduceParamete.dataFormat;
      // Store opts for accessors
      this.width = width;
      this.height = height;
      this.format = format;
      this.type = type;
      this.dataFormat = dataFormat;
      this.border = border;
      this.textureUnit = textureUnit;

      if (Number.isFinite(this.textureUnit)) {
        this.gl.activeTexture(33984 + this.textureUnit);
        this.gl.bindTexture(this.target, this.handle);
      } // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;
      // TODO - compare v4 and v3


      var DEFAULT_TEXTURE_SETTINGS = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 37440, unpackFlipY);

      var glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);

      if (this._isNPOT() && mipmaps) {
        __WEBPACK_IMPORTED_MODULE_10__utils__["a" /* log */].warn("texture: ".concat(this, " is Non-Power-Of-Two, disabling mipmaping"))();
        mipmaps = false;

        this._updateForNPOT(parameters);
      }

      this.mipmaps = mipmaps;
      this.setImageData({
        data: data,
        width: width,
        height: height,
        format: format,
        type: type,
        dataFormat: dataFormat,
        border: border,
        mipmaps: mipmaps,
        parameters: glSettings
      });

      if (mipmaps) {
        this.generateMipmap();
      } // Set texture sampler parameters


      this.setParameters(parameters); // TODO - Store data to enable auto recreate on context loss

      if (recreate) {
        this.data = data;
      }
    } // If size has changed, reinitializes with current format
    // note clears image and mipmaps

  }, {
    key: "resize",
    value: function resize(_ref2) {
      var width = _ref2.width,
          height = _ref2.height;

      if (width !== this.width || height !== this.height) {
        return this.initialize({
          width: width,
          height: height,
          format: this.format,
          type: this.type,
          dataFormat: this.dataFormat,
          border: this.border,
          mipmaps: false
        });
      }

      return this;
    } // Call to regenerate mipmaps after modifying texture(s)

  }, {
    key: "generateMipmap",
    value: function generateMipmap() {
      var _this2 = this;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.gl.bindTexture(this.target, this.handle);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__webgl_context_context_state__["b" /* withParameters */])(this.gl, params, function () {
        _this2.gl.generateMipmap(_this2.target);
      });
      this.gl.bindTexture(this.target, null);
      return this;
    }
    /*
     * Allocates storage
     * @param {*} pixels -
     *  null - create empty texture of specified format
     *  Typed array - init from image data in typed array
     *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer
     *  HTMLImageElement|Image - Inits with content of image. Auto width/height
     *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height
     *  HTMLVideoElement - Creates video texture. Auto width/height
     *
     * @param {GLint} width -
     * @param {GLint} height -
     * @param {GLint} mipMapLevel -
     * @param {GLenum} format - format of image data.
     * @param {GLenum} type
     *  - format of array (autodetect from type) or
     *  - (WEBGL2) format of buffer
     * @param {Number} offset - (WEBGL2) offset from start of buffer
     * @param {GLint} border - must be 0.
     * @parameters - temporary settings to be applied, can be used to supply pixel store settings.
     */

    /* eslint-disable max-len, max-statements, complexity */

  }, {
    key: "setImageData",
    value: function setImageData(_ref3) {
      var _ref3$target = _ref3.target,
          target = _ref3$target === void 0 ? this.target : _ref3$target,
          _ref3$pixels = _ref3.pixels,
          pixels = _ref3$pixels === void 0 ? null : _ref3$pixels,
          _ref3$data = _ref3.data,
          data = _ref3$data === void 0 ? null : _ref3$data,
          _ref3$width = _ref3.width,
          width = _ref3$width === void 0 ? this.width : _ref3$width,
          _ref3$height = _ref3.height,
          height = _ref3$height === void 0 ? this.height : _ref3$height,
          _ref3$level = _ref3.level,
          level = _ref3$level === void 0 ? 0 : _ref3$level,
          _ref3$format = _ref3.format,
          format = _ref3$format === void 0 ? this.format : _ref3$format,
          _ref3$type = _ref3.type,
          type = _ref3$type === void 0 ? this.type : _ref3$type,
          _ref3$dataFormat = _ref3.dataFormat,
          dataFormat = _ref3$dataFormat === void 0 ? this.dataFormat : _ref3$dataFormat,
          _ref3$offset = _ref3.offset,
          offset = _ref3$offset === void 0 ? 0 : _ref3$offset,
          _ref3$border = _ref3.border,
          border = _ref3$border === void 0 ? this.border : _ref3$border,
          _ref3$compressed = _ref3.compressed,
          compressed = _ref3$compressed === void 0 ? false : _ref3$compressed,
          _ref3$parameters = _ref3.parameters,
          parameters = _ref3$parameters === void 0 ? {} : _ref3$parameters;

      // pixels variable is  for API compatibility purpose
      if (!data) {
        data = pixels;
      }

      var _this$_deduceParamete2 = this._deduceParameters({
        format: format,
        type: type,
        dataFormat: dataFormat,
        compressed: compressed,
        data: data,
        width: width,
        height: height
      });

      type = _this$_deduceParamete2.type;
      dataFormat = _this$_deduceParamete2.dataFormat;
      compressed = _this$_deduceParamete2.compressed;
      width = _this$_deduceParamete2.width;
      height = _this$_deduceParamete2.height;
      var gl = this.gl;
      gl.bindTexture(this.target, this.handle);
      var dataType = null;

      var _this$_getDataType = this._getDataType({
        data: data,
        compressed: compressed
      });

      data = _this$_getDataType.data;
      dataType = _this$_getDataType.dataType;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__webgl_context_context_state__["b" /* withParameters */])(this.gl, parameters, function () {
        switch (dataType) {
          case 'null':
            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);
            break;

          case 'typed-array':
            // Looks like this assert is not necessary, as offset is ignored under WebGL1
            // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');
            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data, offset);
            break;

          case 'buffer':
            // WebGL2 enables creating textures directly from a WebGL buffer
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["c" /* assertWebGL2Context */])(gl);
            gl.bindBuffer(35052, data.handle || data);
            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);
            gl.bindBuffer(35052, null);
            break;

          case 'browser-object':
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["b" /* isWebGL2 */])(gl)) {
              gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);
            } else {
              gl.texImage2D(target, level, format, dataFormat, type, data);
            }

            break;

          case 'compressed':
            gl.compressedTexImage2D(target, level, format, width, height, border, data);
            break;

          default:
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_assert__["a" /* default */])(false, 'Unknown image data type');
        }
      });
    }
    /* eslint-enable max-len, max-statements, complexity */

    /**
     * Redefines an area of an existing texture
     * Note: does not allocate storage
     */

    /*
     * Redefines an area of an existing texture
     * @param {*} pixels, data -
     *  null - create empty texture of specified format
     *  Typed array - init from image data in typed array
     *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer
     *  HTMLImageElement|Image - Inits with content of image. Auto width/height
     *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height
     *  HTMLVideoElement - Creates video texture. Auto width/height
     *
     * @param {GLint} x - xOffset from where texture to be updated
     * @param {GLint} y - yOffset from where texture to be updated
     * @param {GLint} width - width of the sub image to be updated
     * @param {GLint} height - height of the sub image to be updated
     * @param {GLint} level - mip level to be updated
     * @param {GLenum} format - internal format of image data.
     * @param {GLenum} type
     *  - format of array (autodetect from type) or
     *  - (WEBGL2) format of buffer or ArrayBufferView
     * @param {GLenum} dataFormat - format of image data.
     * @param {Number} offset - (WEBGL2) offset from start of buffer
     * @param {GLint} border - must be 0.
     * @parameters - temporary settings to be applied, can be used to supply pixel store settings.
     */

  }, {
    key: "setSubImageData",
    value: function setSubImageData(_ref4) {
      var _this3 = this;

      var _ref4$target = _ref4.target,
          target = _ref4$target === void 0 ? this.target : _ref4$target,
          _ref4$pixels = _ref4.pixels,
          pixels = _ref4$pixels === void 0 ? null : _ref4$pixels,
          _ref4$data = _ref4.data,
          data = _ref4$data === void 0 ? null : _ref4$data,
          _ref4$x = _ref4.x,
          x = _ref4$x === void 0 ? 0 : _ref4$x,
          _ref4$y = _ref4.y,
          y = _ref4$y === void 0 ? 0 : _ref4$y,
          _ref4$width = _ref4.width,
          width = _ref4$width === void 0 ? this.width : _ref4$width,
          _ref4$height = _ref4.height,
          height = _ref4$height === void 0 ? this.height : _ref4$height,
          _ref4$level = _ref4.level,
          level = _ref4$level === void 0 ? 0 : _ref4$level,
          _ref4$format = _ref4.format,
          format = _ref4$format === void 0 ? this.format : _ref4$format,
          _ref4$type = _ref4.type,
          type = _ref4$type === void 0 ? this.type : _ref4$type,
          _ref4$dataFormat = _ref4.dataFormat,
          dataFormat = _ref4$dataFormat === void 0 ? this.dataFormat : _ref4$dataFormat,
          _ref4$compressed = _ref4.compressed,
          compressed = _ref4$compressed === void 0 ? false : _ref4$compressed,
          _ref4$offset = _ref4.offset,
          offset = _ref4$offset === void 0 ? 0 : _ref4$offset,
          _ref4$border = _ref4.border,
          border = _ref4$border === void 0 ? this.border : _ref4$border,
          _ref4$parameters = _ref4.parameters,
          parameters = _ref4$parameters === void 0 ? {} : _ref4$parameters;

      var _this$_deduceParamete3 = this._deduceParameters({
        format: format,
        type: type,
        dataFormat: dataFormat,
        compressed: compressed,
        data: data,
        width: width,
        height: height
      });

      type = _this$_deduceParamete3.type;
      dataFormat = _this$_deduceParamete3.dataFormat;
      compressed = _this$_deduceParamete3.compressed;
      width = _this$_deduceParamete3.width;
      height = _this$_deduceParamete3.height;

      // pixels variable is  for API compatibility purpose
      if (!data) {
        data = pixels;
      } // Support ndarrays


      if (data && data.data) {
        var ndarray = data;
        data = ndarray.data;
        width = ndarray.shape[0];
        height = ndarray.shape[1];
      } // Support buffers


      if (data instanceof __WEBPACK_IMPORTED_MODULE_7__buffer__["a" /* default */]) {
        data = data.handle;
      }

      this.gl.bindTexture(this.target, this.handle);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__webgl_context_context_state__["b" /* withParameters */])(this.gl, parameters, function () {
        // TODO - x,y parameters
        if (compressed) {
          _this3.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);
        } else if (data === null) {
          _this3.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);
        } else if (ArrayBuffer.isView(data)) {
          _this3.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);
        } else if (data instanceof __WEBPACK_IMPORTED_MODULE_9__webgl_utils__["d" /* WebGLBuffer */]) {
          // WebGL2 allows us to create texture directly from a WebGL buffer
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["c" /* assertWebGL2Context */])(_this3.gl); // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER

          _this3.gl.bindBuffer(35052, data);

          _this3.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);

          _this3.gl.bindBuffer(35052, null);
        } else if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["b" /* isWebGL2 */])(_this3.gl)) {
          // Assume data is a browser supported object (ImageData, Canvas, ...)
          _this3.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);
        } else {
          _this3.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);
        }
      });
      this.gl.bindTexture(this.target, null);
    }
    /* eslint-enable max-len, max-statements, complexity */

    /**
     * Defines a two-dimensional texture image or cube-map texture image with
     * pixels from the current framebuffer (rather than from client memory).
     * (gl.copyTexImage2D wrapper)
     *
     * Note that binding a texture into a Framebuffer's color buffer and
     * rendering can be faster.
     */

  }, {
    key: "copyFramebuffer",
    value: function copyFramebuffer() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      __WEBPACK_IMPORTED_MODULE_10__utils__["a" /* log */].error('Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})')();
      return null;
    }
  }, {
    key: "getActiveUnit",
    value: function getActiveUnit() {
      return this.gl.getParameter(34016) - 33984;
    } // target cannot be modified by bind:
    // textures are special because when you first bind them to a target,
    // they get special information. When you first bind a texture as a
    // GL_TEXTURE_2D, you are actually setting special state in the texture.
    // You are saying that this texture is a 2D texture.
    // And it will always be a 2D texture; this state cannot be changed ever.
    // If you have a texture that was first bound as a GL_TEXTURE_2D,
    // you must always bind it as a GL_TEXTURE_2D;
    // attempting to bind it as GL_TEXTURE_1D will give rise to an error
    // (while run-time).

  }, {
    key: "bind",
    value: function bind() {
      var textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;

      if (textureUnit === undefined) {
        throw new Error('Texture.bind: must specify texture unit');
      }

      this.textureUnit = textureUnit;
      this.gl.activeTexture(33984 + textureUnit);
      this.gl.bindTexture(this.target, this.handle);
      return textureUnit;
    }
  }, {
    key: "unbind",
    value: function unbind() {
      if (this.textureUnit === undefined) {
        throw new Error('Texture.unbind: texture unit not specified');
      }

      this.gl.activeTexture(33984 + this.textureUnit);
      this.gl.bindTexture(this.target, null);
      return this.textureUnit;
    } // PRIVATE METHODS

  }, {
    key: "_getDataType",
    value: function _getDataType(_ref5) {
      var data = _ref5.data,
          _ref5$compressed = _ref5.compressed,
          compressed = _ref5$compressed === void 0 ? false : _ref5$compressed;

      if (compressed) {
        return {
          data: data,
          dataType: 'compressed'
        };
      }

      if (data === null) {
        return {
          data: data,
          dataType: 'null'
        };
      }

      if (ArrayBuffer.isView(data)) {
        return {
          data: data,
          dataType: 'typed-array'
        };
      }

      if (data instanceof __WEBPACK_IMPORTED_MODULE_7__buffer__["a" /* default */]) {
        return {
          data: data.handle,
          dataType: 'buffer'
        };
      }

      if (data instanceof __WEBPACK_IMPORTED_MODULE_9__webgl_utils__["d" /* WebGLBuffer */]) {
        return {
          data: data,
          dataType: 'buffer'
        };
      } // Assume data is a browser supported object (ImageData, Canvas, ...)


      return {
        data: data,
        dataType: 'browser-object'
      };
    } // Image 3D copies from Typed Array or WebGLBuffer

  }, {
    key: "setImage3D",
    value: function setImage3D(_ref6) {
      var _ref6$level = _ref6.level,
          level = _ref6$level === void 0 ? 0 : _ref6$level,
          _ref6$internalformat = _ref6.internalformat,
          internalformat = _ref6$internalformat === void 0 ? 6408 : _ref6$internalformat,
          width = _ref6.width,
          height = _ref6.height,
          _ref6$depth = _ref6.depth,
          depth = _ref6$depth === void 0 ? 1 : _ref6$depth,
          _ref6$border = _ref6.border,
          border = _ref6$border === void 0 ? 0 : _ref6$border,
          format = _ref6.format,
          _ref6$type = _ref6.type,
          type = _ref6$type === void 0 ? 5121 : _ref6$type,
          _ref6$offset = _ref6.offset,
          offset = _ref6$offset === void 0 ? 0 : _ref6$offset,
          pixels = _ref6.pixels;

      if (ArrayBuffer.isView(pixels)) {
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, pixels);
        return this;
      }

      if (pixels instanceof __WEBPACK_IMPORTED_MODULE_7__buffer__["a" /* default */]) {
        this.gl.bindBuffer(35052, pixels.handle);
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, offset);
      }

      return this;
    }
    /* Copied from texture-2d.js
    // WebGL2
    setPixels(opts = {}) {
      const {
        buffer,
        width = null,
        height = null,
        mipmapLevel = 0,
        format = GL.RGBA,
        type = GL.UNSIGNED_BYTE,
        border = 0
      } = opts;
       const {gl} = this;
       // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER
      gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);
      // And as always, we must also bind the texture itself
      this.bind();
       gl.texImage2D(gl.TEXTURE_2D,
        mipmapLevel, format, width, height, border, format, type, buffer.target);
       this.unbind();
      gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);
      return this;
    }
     setImageDataFromCompressedBuffer(opts) {
      const {
        buffer,
        // offset = 0,
        width = null,
        height = null,
        mipmapLevel = 0,
        internalFormat = GL.RGBA,
        // format = GL.RGBA,
        // type = GL.UNSIGNED_BYTE,
        border = 0
      } = opts;
       const {gl} = this;
      gl.compressedTexImage2D(this.target,
        mipmapLevel, internalFormat, width, height, border, buffer);
      // gl.compressedTexSubImage2D(target,
      //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);
      return this;
    }
     copySubImage(opts) {
      const {
        // pixels,
        // offset = 0,
        // x,
        // y,
        // width,
        // height,
        // mipmapLevel = 0,
        // internalFormat = GL.RGBA,
        // type = GL.UNSIGNED_BYTE,
        // border = 0
      } = opts;
       // if (pixels instanceof ArrayBufferView) {
      //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);
      // }
      // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);
      // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);
      // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);
      // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);
      // // Additional signature in a WebGL 2 context:
      // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);
    }
    */
    // HELPER METHODS

  }, {
    key: "_deduceParameters",
    value: function _deduceParameters(opts) {
      var format = opts.format,
          data = opts.data;
      var width = opts.width,
          height = opts.height,
          dataFormat = opts.dataFormat,
          type = opts.type,
          compressed = opts.compressed; // Deduce format and type from format

      var textureFormat = TEXTURE_FORMATS[format];
      dataFormat = dataFormat || textureFormat && textureFormat.dataFormat;
      type = type || textureFormat && textureFormat.types[0]; // Deduce compression from format

      compressed = compressed || textureFormat && textureFormat.compressed;

      var _this$_deduceImageSiz = this._deduceImageSize(data, width, height);

      width = _this$_deduceImageSiz.width;
      height = _this$_deduceImageSiz.height;
      return {
        dataFormat: dataFormat,
        type: type,
        compressed: compressed,
        width: width,
        height: height,
        format: format,
        data: data
      };
    }
    /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement */
    // eslint-disable-next-line complexity

  }, {
    key: "_deduceImageSize",
    value: function _deduceImageSize(data, width, height) {
      var size;

      if (typeof ImageData !== 'undefined' && data instanceof ImageData) {
        size = {
          width: data.width,
          height: data.height
        };
      } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {
        size = {
          width: data.naturalWidth,
          height: data.naturalHeight
        };
      } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {
        size = {
          width: data.width,
          height: data.height
        };
      } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {
        size = {
          width: data.videoWidth,
          height: data.videoHeight
        };
      } else if (!data) {
        size = {
          width: width >= 0 ? width : 1,
          height: height >= 0 ? height : 1
        };
      } else {
        size = {
          width: width,
          height: height
        };
      }

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_assert__["a" /* default */])(size, 'Could not deduced texture size');
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_assert__["a" /* default */])(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_assert__["a" /* default */])(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');
      return size;
    } // RESOURCE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createTexture();
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteTexture(this.handle);
    }
  }, {
    key: "_getParameter",
    value: function _getParameter(pname) {
      switch (pname) {
        case 4096:
          return this.width;

        case 4097:
          return this.height;

        default:
          this.gl.bindTexture(this.target, this.handle);
          var value = this.gl.getTexParameter(this.target, pname);
          this.gl.bindTexture(this.target, null);
          return value;
      }
    }
  }, {
    key: "_setParameter",
    value: function _setParameter(pname, param) {
      this.gl.bindTexture(this.target, this.handle); // NOTE: Apply NPOT workaround

      param = this._getNPOTParam(pname, param); // Apparently there are some integer/float conversion rules that made
      // the WebGL committe expose two parameter setting functions in JavaScript.
      // For now, pick the float version for parameters specified as GLfloat.

      switch (pname) {
        case 33082:
        case 33083:
          this.gl.texParameterf(this.handle, pname, param);
          break;

        case 4096:
        case 4097:
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils_assert__["a" /* default */])(false);
          break;

        default:
          this.gl.texParameteri(this.target, pname, param);
          break;
      }

      this.gl.bindTexture(this.target, null);
      return this;
    }
  }, {
    key: "_isNPOT",
    value: function _isNPOT() {
      return !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["b" /* isWebGL2 */])(this.gl) && (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils__["c" /* isPowerOfTwo */])(this.width) || !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils__["c" /* isPowerOfTwo */])(this.height));
    } // Update default settings which are not supported by NPOT textures.

  }, {
    key: "_updateForNPOT",
    value: function _updateForNPOT(parameters) {
      if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {
        // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();
        parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;
      }

      if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {
        // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();
        parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;
      }

      if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {
        // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();
        parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;
      }
    }
  }, {
    key: "_getNPOTParam",
    value: function _getNPOTParam(pname, param) {
      if (this._isNPOT()) {
        switch (pname) {
          case 10241:
            if (NPOT_MIN_FILTERS.indexOf(param) === -1) {
              // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();
              param = 9729;
            }

            break;

          case 10242:
          case 10243:
            if (param !== 33071) {
              // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();
              param = 33071;
            }

            break;

          default:
            break;
        }
      }

      return param;
    }
  }]);

  return Texture;
}(__WEBPACK_IMPORTED_MODULE_6__resource__["a" /* default */]);


//# sourceMappingURL=texture.js.map

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isBrowser; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__env_is_browser__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__env_globals__ = __webpack_require__(71);
/* unused harmony reexport self */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_1__env_globals__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__env_globals__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__env_globals__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_1__env_globals__["e"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__env_globals__["c"]; });


var VERSION =  true ? "2.0.1" : 'untranspiled source';
var isBrowser = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__env_is_browser__["a" /* default */])();
//# sourceMappingURL=globals.js.map

/***/ }),
/* 28 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return MODULAR_SHADERS; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_resolve_modules__ = __webpack_require__(82);
/* unused harmony reexport registerShaderModules */
/* unused harmony reexport setDefaultShaderModules */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_assemble_shaders__ = __webpack_require__(175);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_1__lib_assemble_shaders__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lib_inject_shader__ = __webpack_require__(81);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_2__lib_inject_shader__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lib_filters_normalize_module__ = __webpack_require__(176);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_3__lib_filters_normalize_module__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_shader_utils__ = __webpack_require__(201);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_4__utils_shader_utils__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_4__utils_shader_utils__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_4__utils_shader_utils__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_4__utils_shader_utils__["d"]; });
/* unused harmony reexport convertToVec4 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__modules_fp32_fp32__ = __webpack_require__(184);
/* unused harmony reexport fp32 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_fp64_fp64__ = __webpack_require__(188);
/* unused harmony reexport fp64 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__modules_project_project__ = __webpack_require__(83);
/* unused harmony reexport project */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__modules_lighting_lighting__ = __webpack_require__(192);
/* unused harmony reexport lighting */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__modules_dirlight_dirlight__ = __webpack_require__(183);
/* unused harmony reexport dirlight */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__modules_picking_picking__ = __webpack_require__(196);
/* unused harmony reexport picking */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__modules_diffuse_diffuse__ = __webpack_require__(182);
/* unused harmony reexport diffuse */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__modules_phong_lighting_phong_lighting__ = __webpack_require__(195);
/* unused harmony reexport phonglighting */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__modules_transform_transform__ = __webpack_require__(197);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_13__modules_transform_transform__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__shaders_modular_vertex_glsl__ = __webpack_require__(199);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__shaders_modular_fragment_glsl__ = __webpack_require__(198);
// shadertools exports
// DOCUMENTED APIS

 // HELPERS



 // SHADER MODULES








 // experimental

 // DEFAULT SHADERS
// A set of base shaders that leverage the shader module system,
// dynamically enabling features depending on which modules are included



var MODULAR_SHADERS = {
  vs: __WEBPACK_IMPORTED_MODULE_14__shaders_modular_vertex_glsl__["a" /* default */],
  fs: __WEBPACK_IMPORTED_MODULE_15__shaders_modular_fragment_glsl__["a" /* default */],
  defaultUniforms: {}
};
//# sourceMappingURL=index.js.map

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_probe_gl__ = __webpack_require__(146);

/* harmony default export */ __webpack_exports__["a"] = (new __WEBPACK_IMPORTED_MODULE_0_probe_gl__["a" /* Log */]({
  id: 'luma'
}).enable());
//# sourceMappingURL=log.js.map

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__context__ = __webpack_require__(60);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__context__["a"]; });
/* unused harmony reexport destroyGLContext */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_0__context__["c"]; });
/* unused harmony reexport pollGLContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__context_state__ = __webpack_require__(23);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__context_state__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_1__context_state__["c"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__context_limits__ = __webpack_require__(46);
/* unused harmony reexport getContextInfo */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__create_canvas__ = __webpack_require__(132);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_3__create_canvas__["b"]; });
/* unused harmony reexport createCanvas */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_3__create_canvas__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__create_headless_context__ = __webpack_require__(133);
/* unused harmony reexport createHeadlessContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__create_browser_context__ = __webpack_require__(131);
/* unused harmony reexport createBrowserContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__track_context_state__ = __webpack_require__(61);
/* unused harmony reexport trackContextState */







//# sourceMappingURL=index.js.map

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getKeyValue;
/* harmony export (immutable) */ __webpack_exports__["b"] = getKey;
/* unused harmony export getKeyType */
/* unused harmony export glGet */
/* harmony export (immutable) */ __webpack_exports__["c"] = glKey;
/* unused harmony export glKeyType */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_log__ = __webpack_require__(30);

 // Resolve a WebGL enumeration name (returns itself if already a number)

function getKeyValue(gl, name) {
  // If not a string, return (assume number)
  if (typeof name !== 'string') {
    return name;
  } // If string converts to number, return number


  var number = Number(name);

  if (!isNaN(number)) {
    return number;
  } // Look up string, after removing any 'GL.' or 'gl.' prefix


  name = name.replace(/^.*\./, '');
  var value = gl[name];
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_assert__["a" /* default */])(value !== undefined, "Accessing undefined constant GL.".concat(name));
  return value;
}
function getKey(gl, value) {
  value = Number(value);

  for (var key in gl) {
    if (gl[key] === value) {
      return "GL.".concat(key);
    }
  }

  return String(value);
}
function getKeyType(gl, value) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_assert__["a" /* default */])(value !== undefined, 'undefined key');
  value = Number(value);

  for (var key in gl) {
    if (gl[key] === value) {
      return "GL.".concat(key);
    }
  }

  return String(value);
} // Public methods
// Resolve a WebGL enumeration name (returns itself if already a number)
// TODO - unify with methods above

function glGet(gl, name) {
  if (!name) {
    __WEBPACK_IMPORTED_MODULE_1__utils_log__["a" /* default */].removed('glGet(name)', 'glGet(gl, name)', '6.0')();
  }

  return getKeyValue(gl, name);
}
function glKey(gl, value) {
  if (value === undefined) {
    __WEBPACK_IMPORTED_MODULE_1__utils_log__["a" /* default */].removed('glKey(value)', 'glKey(gl, value)', '6.0')();
  }

  return getKey(gl, value);
}
function glKeyType(gl, value) {
  if (value === undefined) {
    __WEBPACK_IMPORTED_MODULE_1__utils_log__["a" /* default */].removed('glKeyType(value)', 'glKeyType(gl, value)', '6.0')();
  }

  return getKeyType(gl, value);
}
//# sourceMappingURL=constants-to-keys.js.map

/***/ }),
/* 33 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = vec3_add;
/* harmony export (immutable) */ __webpack_exports__["f"] = vec3_sub;
/* harmony export (immutable) */ __webpack_exports__["c"] = vec3_scale;
/* unused harmony export vec3_norm */
/* harmony export (immutable) */ __webpack_exports__["e"] = vec3_dot;
/* harmony export (immutable) */ __webpack_exports__["d"] = vec3_dist;
/* harmony export (immutable) */ __webpack_exports__["g"] = vec3_mid;
/* harmony export (immutable) */ __webpack_exports__["a"] = vec3_unit;
function vec3_add(p1, p2) {
  return [p1[0] + p2[0], p1[1] + p2[1], (p1[2] + p2[2]) || 0];
}

function vec3_sub(p1, p2) {
  return [p1[0] - p2[0], p1[1] - p2[1], (p1[2] - p2[2]) || 0];
}

function vec3_scale(p1, scale) {
  return [p1[0] * scale, p1[1] * scale, (p1[2] * scale) || 0];
}

function vec3_norm(p1) {
  return Math.sqrt(p1[0] * p1[0] + p1[1] * p1[1] + (p1[2] * p1[2] || 0));
}

function vec3_dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + (a[2] * b[2] || 0);
}

function vec3_dist(p1, p2) {
  const d1 = p1[0] - p2[0];
  const d2 = p1[1] - p2[1];
  const d3 = (p1[2] - p2[2]) || 0;

  return Math.sqrt(d1*d1 + d2*d2 + d3*d3);
}

function vec3_mid(p1, p2) {
  return vec3_scale(vec3_add(p1, p2), 0.5);
}

function vec3_unit(p1) {
  const n = vec3_norm(p1);
  return vec3_scale(p1, 1/n);
}


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _toConsumableArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__arrayWithoutHoles__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__iterableToArray__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__nonIterableSpread__ = __webpack_require__(173);



function _toConsumableArray(arr) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__arrayWithoutHoles__["a" /* default */])(arr) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__iterableToArray__["a" /* default */])(arr) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__nonIterableSpread__["a" /* default */])();
}

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Model; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__luma_gl_shadertools__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__attribute__ = __webpack_require__(109);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__object_3d__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__geometry_geometry__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__webgl__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__debug_seer_integration__ = __webpack_require__(249);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__webgl_debug_debug_uniforms__ = __webpack_require__(271);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__webgl_debug_debug_vertex_array__ = __webpack_require__(272);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__webgl_debug_debug_program_configuration__ = __webpack_require__(270);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__utils_assert__ = __webpack_require__(5);


















var ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';
var LOG_DRAW_PRIORITY = 2;
var LOG_DRAW_TIMEOUT = 10000; // These old picking uniforms should be avoided and we should use picking module
// and set uniforms using Model class 'updateModuleSettings()'
// TODO - move to shader modules

var DEPRECATED_PICKING_UNIFORMS = ['renderPickingBuffer', 'pickingEnabled']; // Model abstract O3D Class

var Model =
/*#__PURE__*/
function (_Object3D) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_inherits__["a" /* default */])(Model, _Object3D);

  function Model(gl) {
    var _this;

    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Model);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Model).call(this, props));
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__webgl_utils__["q" /* isWebGL */])(gl));
    _this.gl = gl;
    _this.lastLogTime = 0; // TODO - move to probe.gl

    _this.initialize(props); // intended to be subclassed, do not seal


    return _this;
  }
  /* eslint-disable max-statements  */

  /* eslint-disable complexity  */


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__["a" /* default */])(Model, [{
    key: "initialize",
    value: function initialize() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.props = {};
      this.program = this._createProgram(props); // Create a vertex array configured after this program

      this.vertexArray = new __WEBPACK_IMPORTED_MODULE_10__webgl__["g" /* VertexArray */](this.gl, {
        program: this.program
      }); // Initialize state

      this.userData = {};
      this.needsRedraw = true; // Model manages auto Buffer creation from typed arrays

      this._attributes = {}; // All attributes

      this.attributes = {}; // User defined attributes
      // Model manages uniform animation

      this.animatedUniforms = {};
      this.animated = false;
      this.animationLoop = null; // if set, used as source for animationProps

      this.timerQueryEnabled = false;
      this.timeElapsedQuery = undefined;
      this.lastQueryReturned = true;
      this.stats = {
        accumulatedFrameTime: 0,
        averageFrameTime: 0,
        profileFrameCount: 0
      }; // picking options

      this.pickable = true; // this.pick = pick || (() => false);

      this.setProps(props); // Make sure we have some reasonable default uniforms in place

      this.setUniforms(Object.assign({}, this.getModuleUniforms(), // Get all default uniforms
      this.getModuleUniforms(props.moduleSettings) // Get unforms for supplied parameters
      )); // Attributes and buffers
      // geometry might have set drawMode and vertexCount

      this.isInstanced = props.isInstanced || props.instanced;

      this.onBeforeRender = props.onBeforeRender || function () {};

      this.onAfterRender = props.onAfterRender || function () {}; // assert(program || program instanceof Program);


      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);
    }
    /* eslint-enable max-statements */

  }, {
    key: "setProps",
    value: function setProps(props) {
      Object.assign(this.props, props); // params
      // if ('drawMode' in props) {
      //   this.drawMode = getDrawMode(props.drawMode);
      // }
      // if ('vertexCount' in props) {
      //   this.vertexCount = props.vertexCount;
      // }

      if ('instanceCount' in props) {
        this.instanceCount = props.instanceCount;
      }

      if ('geometry' in props) {
        this.setGeometry(props.geometry);
      } // webgl settings


      if ('attributes' in props) {
        this.setAttributes(props.attributes);
      }

      if ('uniforms' in props) {
        this.setUniforms(props.uniforms, props.samplers);
      }

      if ('pickable' in props) {
        this.pickable = props.pickable;
      } // Experimental props


      if ('timerQueryEnabled' in props) {
        this.timerQueryEnabled = props.timerQueryEnabled && __WEBPACK_IMPORTED_MODULE_10__webgl__["h" /* Query */].isSupported(this.gl, ['timers']);

        if (props.timerQueryEnabled && !this.timerQueryEnabled) {
          __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].warn('GPU timer not supported')();
        }
      }

      if ('_feedbackBuffers' in props) {
        this._setFeedbackBuffers(props._feedbackBuffers);
      }

      if ('_animationProps' in props) {
        this._setAnimationProps(props._animationProps);
      }

      if ('_animationLoop' in props) {
        this.animationLoop = props._animationLoop;
      }
    }
  }, {
    key: "delete",
    value: function _delete() {
      // delete all attributes created by this model
      // TODO - should buffer deletes be handled by vertex array?
      for (var key in this._attributes) {
        if (this._attributes[key] !== this.attributes[key]) {
          this._attributes[key].delete();
        }
      }

      this.program.delete();
      this.vertexArray.delete();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_12__debug_seer_integration__["a" /* removeModel */])(this.id);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.delete();
    } // GETTERS

  }, {
    key: "getNeedsRedraw",
    value: function getNeedsRedraw() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$clearRedrawFlags = _ref.clearRedrawFlags,
          clearRedrawFlags = _ref$clearRedrawFlags === void 0 ? false : _ref$clearRedrawFlags;

      var redraw = false;
      redraw = redraw || this.needsRedraw;
      this.needsRedraw = this.needsRedraw && !clearRedrawFlags;

      if (this.geometry) {
        redraw = redraw || this.geometry.getNeedsRedraw({
          clearRedrawFlags: clearRedrawFlags
        });
      }

      if (this.animated) {
        redraw = redraw || "animated model ".concat(this.id);
      }

      return redraw;
    }
  }, {
    key: "getDrawMode",
    value: function getDrawMode() {
      return this.drawMode;
    }
  }, {
    key: "getVertexCount",
    value: function getVertexCount() {
      return this.vertexCount;
    }
  }, {
    key: "getInstanceCount",
    value: function getInstanceCount() {
      return this.instanceCount;
    }
  }, {
    key: "getProgram",
    value: function getProgram() {
      return this.program;
    }
  }, {
    key: "getAttributes",
    value: function getAttributes() {
      return this.attributes;
    }
  }, {
    key: "getUniforms",
    value: function getUniforms() {
      return this.program.getUniforms;
    } // SETTERS

  }, {
    key: "setNeedsRedraw",
    value: function setNeedsRedraw() {
      var redraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.needsRedraw = redraw;
      return this;
    }
  }, {
    key: "setDrawMode",
    value: function setDrawMode(drawMode) {
      this.props.drawMode = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__geometry_geometry__["b" /* getDrawMode */])(drawMode);
      return this;
    }
  }, {
    key: "setVertexCount",
    value: function setVertexCount(vertexCount) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(Number.isFinite(vertexCount));
      this.props.vertexCount = vertexCount;
      return this;
    }
  }, {
    key: "setInstanceCount",
    value: function setInstanceCount(instanceCount) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(Number.isFinite(instanceCount));
      this.instanceCount = instanceCount;
      return this;
    } // TODO - just set attributes, don't hold on to geometry

  }, {
    key: "setGeometry",
    value: function setGeometry(geometry) {
      this.geometry = geometry;

      var buffers = this._createBuffersFromAttributeDescriptors(this.geometry.getAttributes());

      this.vertexArray.setAttributes(buffers);
      this.setNeedsRedraw();
      return this;
    }
  }, {
    key: "setAttributes",
    value: function setAttributes() {
      var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // Avoid setting needsRedraw if no attributes
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_16__utils__["e" /* isObjectEmpty */])(attributes)) {
        return this;
      }

      Object.assign(this.attributes, attributes);

      var buffers = this._createBuffersFromAttributeDescriptors(attributes); // Object.assign(this.attributes, buffers);


      this.vertexArray.setAttributes(buffers);
      this.setNeedsRedraw();
      return this;
    } // TODO - should actually set the uniforms

  }, {
    key: "setUniforms",
    value: function setUniforms() {
      var _this2 = this;

      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var samplers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // Let Seer override edited uniforms
      uniforms = Object.assign({}, uniforms);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_12__debug_seer_integration__["b" /* getOverrides */])(this.id, uniforms); // Resolve any animated uniforms so that we have an initial value

      uniforms = this._extractAnimatedUniforms(uniforms);
      this.program.setUniforms(uniforms, samplers, function () {
        // if something changed
        _this2._checkForDeprecatedUniforms(uniforms);

        _this2.setNeedsRedraw();
      });
    } // Updates (evaluates) all function valued uniforms based on a new set of animationProps
    // experimental

  }, {
    key: "_setAnimationProps",
    value: function _setAnimationProps(animationProps) {
      var _this3 = this;

      if (this.animated) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(animationProps, 'Model.draw(): animated uniforms but no animationProps');

        var animatedUniforms = this._evaluateAnimateUniforms(animationProps);

        this.program.setUniforms(animatedUniforms, {}, function () {
          // if something changed
          _this3._checkForDeprecatedUniforms(animatedUniforms);

          _this3.setNeedsRedraw();
        });
      }
    }
  }, {
    key: "updateModuleSettings",
    value: function updateModuleSettings(opts) {
      var uniforms = this.getModuleUniforms(opts || {});
      return this.setUniforms(uniforms);
    } // DRAW CALLS

  }, {
    key: "clear",
    value: function clear(opts) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__webgl__["e" /* clear */])(this.program.gl, opts);

      return this;
    }
    /* eslint-disable max-statements  */

  }, {
    key: "draw",
    value: function draw() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _opts$moduleSettings = opts.moduleSettings,
          moduleSettings = _opts$moduleSettings === void 0 ? null : _opts$moduleSettings,
          framebuffer = opts.framebuffer,
          _opts$uniforms = opts.uniforms,
          uniforms = _opts$uniforms === void 0 ? {} : _opts$uniforms,
          _opts$attributes = opts.attributes,
          attributes = _opts$attributes === void 0 ? {} : _opts$attributes,
          _opts$samplers = opts.samplers,
          samplers = _opts$samplers === void 0 ? {} : _opts$samplers,
          _opts$transformFeedba = opts.transformFeedback,
          transformFeedback = _opts$transformFeedba === void 0 ? this.transformFeedback : _opts$transformFeedba,
          _opts$parameters = opts.parameters,
          parameters = _opts$parameters === void 0 ? {} : _opts$parameters,
          _opts$vertexArray = opts.vertexArray,
          vertexArray = _opts$vertexArray === void 0 ? this.vertexArray : _opts$vertexArray,
          animationProps = opts.animationProps; // Update module settings

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_12__debug_seer_integration__["c" /* addModel */])(this); // Update model with any just provided attributes, settings or uniforms

      this.setAttributes(attributes);
      this.updateModuleSettings(moduleSettings);
      this.setUniforms(uniforms, samplers); // Animate any function valued uniforms

      this._refreshAnimationProps(animationProps);

      var logPriority = this._logDrawCallStart(2);

      var drawParams = this.vertexArray.getDrawParams(this.props);

      if (drawParams.isInstanced && !this.isInstanced) {
        __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].warn('Found instanced attributes on non-instanced model', this.id)();
      }

      var isIndexed = drawParams.isIndexed,
          indexType = drawParams.indexType;
      var isInstanced = this.isInstanced,
          instanceCount = this.instanceCount;
      this.onBeforeRender();

      this._timerQueryStart();

      this.program.draw(Object.assign({}, opts, {
        logPriority: logPriority,
        uniforms: null,
        // Already set (may contain "function values" not understood by Program)
        framebuffer: framebuffer,
        parameters: parameters,
        drawMode: this.getDrawMode(),
        vertexCount: this.getVertexCount(),
        vertexArray: vertexArray,
        transformFeedback: transformFeedback,
        isIndexed: isIndexed,
        indexType: indexType,
        isInstanced: isInstanced,
        instanceCount: instanceCount
      }));

      this._timerQueryEnd();

      this.onAfterRender();
      this.setNeedsRedraw(false);

      this._logDrawCallEnd(logPriority, vertexArray, framebuffer);

      return this;
    }
    /* eslint-enable max-statements  */
    // Draw call for transform feedback

  }, {
    key: "transform",
    value: function transform() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _opts$discard = opts.discard,
          discard = _opts$discard === void 0 ? true : _opts$discard,
          feedbackBuffers = opts.feedbackBuffers,
          _opts$unbindModels = opts.unbindModels,
          unbindModels = _opts$unbindModels === void 0 ? [] : _opts$unbindModels;
      var parameters = opts.parameters;

      if (feedbackBuffers) {
        this._setFeedbackBuffers(feedbackBuffers);
      }

      if (discard) {
        parameters = Object.assign({}, parameters, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 35977, discard));
      }

      unbindModels.forEach(function (model) {
        return model.vertexArray.unbindBuffers();
      });

      try {
        this.draw(Object.assign({}, opts, {
          parameters: parameters
        }));
      } finally {
        unbindModels.forEach(function (model) {
          return model.vertexArray.bindBuffers();
        });
      }

      return this;
    } // DEPRECATED METHODS

  }, {
    key: "render",
    value: function render() {
      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(arguments.length <= 1); // log.deprecated('Model.render()', 'Model.draw()')();

      return this.draw({
        uniforms: uniforms
      });
    } // PRIVATE METHODS

  }, {
    key: "_createProgram",
    value: function _createProgram(_ref2) {
      var _ref2$vs = _ref2.vs,
          vs = _ref2$vs === void 0 ? null : _ref2$vs,
          _ref2$fs = _ref2.fs,
          fs = _ref2$fs === void 0 ? null : _ref2$fs,
          _ref2$modules = _ref2.modules,
          modules = _ref2$modules === void 0 ? null : _ref2$modules,
          _ref2$defines = _ref2.defines,
          defines = _ref2$defines === void 0 ? {} : _ref2$defines,
          _ref2$inject = _ref2.inject,
          inject = _ref2$inject === void 0 ? {} : _ref2$inject,
          _ref2$shaderCache = _ref2.shaderCache,
          shaderCache = _ref2$shaderCache === void 0 ? null : _ref2$shaderCache,
          _ref2$varyings = _ref2.varyings,
          varyings = _ref2$varyings === void 0 ? null : _ref2$varyings,
          _ref2$bufferMode = _ref2.bufferMode,
          bufferMode = _ref2$bufferMode === void 0 ? 35981 : _ref2$bufferMode,
          _ref2$program = _ref2.program,
          program = _ref2$program === void 0 ? null : _ref2$program;

      this.getModuleUniforms = function (x) {};

      var id = this.id;

      if (!program) {
        // Assign default shaders if none are provided
        vs = vs || __WEBPACK_IMPORTED_MODULE_6__luma_gl_shadertools__["h" /* MODULAR_SHADERS */].vs;
        fs = fs || __WEBPACK_IMPORTED_MODULE_6__luma_gl_shadertools__["h" /* MODULAR_SHADERS */].fs;
        var assembleResult = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__luma_gl_shadertools__["i" /* assembleShaders */])(this.gl, {
          vs: vs,
          fs: fs,
          modules: modules,
          inject: inject,
          defines: defines,
          log: __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */]
        });
        vs = assembleResult.vs;
        fs = assembleResult.fs;

        if (shaderCache) {
          program = shaderCache.getProgram(this.gl, {
            id: id,
            vs: vs,
            fs: fs
          });
        } else {
          program = new __WEBPACK_IMPORTED_MODULE_10__webgl__["b" /* Program */](this.gl, {
            id: id,
            vs: vs,
            fs: fs,
            varyings: varyings,
            bufferMode: bufferMode
          });
        }

        this.getModuleUniforms = assembleResult.getUniforms || function (x) {};
      }

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__utils_assert__["a" /* default */])(program instanceof __WEBPACK_IMPORTED_MODULE_10__webgl__["b" /* Program */], 'Model needs a program');
      return program;
    }
    /* eslint-enable complexity */
    // Uniforms

  }, {
    key: "_checkForDeprecatedUniforms",
    value: function _checkForDeprecatedUniforms(uniforms) {
      // deprecated picking uniforms
      DEPRECATED_PICKING_UNIFORMS.forEach(function (uniform) {
        if (uniform in uniforms) {
          __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].deprecated(uniform, 'use picking shader module and Model class updateModuleSettings()')();
        }
      });
    } // Refreshes animated uniforms, attempting to get animated props from animationLoop if registered

  }, {
    key: "_refreshAnimationProps",
    value: function _refreshAnimationProps(animationProps) {
      // Try to read animationProps
      animationProps = animationProps || this.animationLoop && this.animationLoop.animationProps;

      if (animationProps) {
        this._setAnimationProps(animationProps);
      }
    } // Calculate new values for any function uniforms based on supplied animationProps

  }, {
    key: "_evaluateAnimateUniforms",
    value: function _evaluateAnimateUniforms(animationProps) {
      if (!this.animated) {
        return {};
      }

      var animatedUniforms = {};

      for (var uniformName in this.animatedUniforms) {
        var valueFunction = this.animatedUniforms[uniformName];
        animatedUniforms[uniformName] = valueFunction(animationProps);
      }

      return animatedUniforms;
    } // Extracts a list of function valued uniforms, so we can update them before each draw call
    // Also removes such uniforms from the returned list

  }, {
    key: "_extractAnimatedUniforms",
    value: function _extractAnimatedUniforms(uniforms) {
      var foundAnimated = false; // Keep our animatedUniforms map up-to-date

      for (var uniformName in uniforms) {
        var newValue = uniforms[uniformName];

        if (typeof newValue === 'function') {
          this.animatedUniforms[uniformName] = newValue;
          foundAnimated = true;
        } else {
          delete this.animatedUniforms[uniformName];
        }
      } // Update animated flag: `Model` is animated if any uniforms are animated (i.e. functions)


      this.animated = !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_16__utils__["e" /* isObjectEmpty */])(this.animatedUniforms);

      if (!foundAnimated) {
        return uniforms;
      } // If animated uniforms were found, remove them from ordinary uniform list
      // `Program` class can't (and shouldn't) handle function valued uniforms


      var staticUniforms = {};

      for (var _uniformName in uniforms) {
        if (!this.animatedUniforms[_uniformName]) {
          staticUniforms[_uniformName] = uniforms[_uniformName];
        }
      }

      return staticUniforms;
    } // Transform Feedback

  }, {
    key: "_setFeedbackBuffers",
    value: function _setFeedbackBuffers() {
      var feedbackBuffers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // Avoid setting needsRedraw if no feedbackBuffers
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_16__utils__["e" /* isObjectEmpty */])(feedbackBuffers)) {
        return this;
      }

      var gl = this.program.gl;
      this.transformFeedback = this.transformFeedback || new __WEBPACK_IMPORTED_MODULE_10__webgl__["i" /* TransformFeedback */](gl, {
        program: this.program
      });
      this.transformFeedback.setBuffers(feedbackBuffers);
      this.setNeedsRedraw();
      return this;
    } // Timer Queries

  }, {
    key: "_timerQueryStart",
    value: function _timerQueryStart() {
      if (this.timerQueryEnabled === true) {
        if (!this.timeElapsedQuery) {
          this.timeElapsedQuery = new __WEBPACK_IMPORTED_MODULE_10__webgl__["h" /* Query */](this.gl);
        }

        if (this.lastQueryReturned) {
          this.lastQueryReturned = false;
          this.timeElapsedQuery.beginTimeElapsedQuery();
        }
      }
    }
  }, {
    key: "_timerQueryEnd",
    value: function _timerQueryEnd() {
      if (this.timerQueryEnabled === true) {
        this.timeElapsedQuery.end(); // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false
        // should this be incorporated into Query object?

        if (this.timeElapsedQuery.isResultAvailable()) {
          this.lastQueryReturned = true;
          var elapsedTime = this.timeElapsedQuery.getResult(); // Update stats (e.g. for seer)

          this.stats.lastFrameTime = elapsedTime;
          this.stats.accumulatedFrameTime += elapsedTime;
          this.stats.profileFrameCount++;
          this.stats.averageFrameTime = this.stats.accumulatedFrameTime / this.stats.profileFrameCount; // Log stats

          __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].log(LOG_DRAW_PRIORITY, "GPU time ".concat(this.program.id, ": ").concat(this.stats.lastFrameTime, "ms average ").concat(this.stats.averageFrameTime, "ms accumulated: ").concat(this.stats.accumulatedFrameTime, "ms count: ").concat(this.stats.profileFrameCount))();
        }
      }
    } // Makes sure buffers are created for all attributes
    // and that the program is updated with those buffers
    // TODO - do we need the separation between "attributes" and "buffers"
    // couldn't apps just create buffers directly?

  }, {
    key: "_createBuffersFromAttributeDescriptors",
    value: function _createBuffersFromAttributeDescriptors(attributes) {
      var gl = this.program.gl; // const attributes = {};

      var buffers = {};

      for (var attributeName in attributes) {
        var descriptor = attributes[attributeName];
        var attribute = this._attributes[attributeName];

        if (descriptor instanceof __WEBPACK_IMPORTED_MODULE_7__attribute__["a" /* default */]) {
          attribute = descriptor;
        } else if (descriptor instanceof __WEBPACK_IMPORTED_MODULE_10__webgl__["f" /* Buffer */]) {
          attribute = attribute || new __WEBPACK_IMPORTED_MODULE_7__attribute__["a" /* default */](gl, Object.assign({}, descriptor, descriptor.layout, {
            id: attributeName
          }));
          attribute.update({
            buffer: descriptor
          });
        } else if (attribute) {
          attribute.update(descriptor);
        } else {
          attribute = new __WEBPACK_IMPORTED_MODULE_7__attribute__["a" /* default */](gl, Object.assign({}, descriptor, {
            id: attributeName
          }));
        }

        this._attributes[attributeName] = attribute;
        buffers[attributeName] = attribute.getValue();
      }

      return buffers;
    }
  }, {
    key: "_logDrawCallStart",
    value: function _logDrawCallStart(priority) {
      var logDrawTimeout = priority > 3 ? 0 : LOG_DRAW_TIMEOUT;

      if (__WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].priority < priority || Date.now() - this.lastLogTime < logDrawTimeout) {
        return undefined;
      }

      this.lastLogTime = Date.now();
      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].group(LOG_DRAW_PRIORITY, ">>> DRAWING MODEL ".concat(this.id), {
        collapsed: __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].priority <= 2
      })();
      return priority;
    }
  }, {
    key: "_logDrawCallEnd",
    value: function _logDrawCallEnd(priority, vertexArray, uniforms, framebuffer) {
      // HACK: priority === undefined means logDrawCallStart didn't run
      if (priority === undefined) {
        return;
      }

      var attributeTable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_14__webgl_debug_debug_vertex_array__["a" /* getDebugTableForVertexArray */])({
        vertexArray: vertexArray,
        header: "".concat(this.id, " attributes"),
        attributes: this._attributes
      });

      var _getDebugTableForUnif = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_13__webgl_debug_debug_uniforms__["a" /* getDebugTableForUniforms */])({
        header: "".concat(this.id, " uniforms"),
        program: this.program,
        uniforms: Object.assign({}, this.program.uniforms, uniforms)
      }),
          uniformTable = _getDebugTableForUnif.table,
          unusedTable = _getDebugTableForUnif.unusedTable,
          unusedCount = _getDebugTableForUnif.unusedCount; // log missing uniforms


      var _getDebugTableForUnif2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_13__webgl_debug_debug_uniforms__["a" /* getDebugTableForUniforms */])({
        header: "".concat(this.id, " uniforms"),
        program: this.program,
        uniforms: Object.assign({}, this.program.uniforms, uniforms),
        undefinedOnly: true
      }),
          missingTable = _getDebugTableForUnif2.table,
          missingCount = _getDebugTableForUnif2.count;

      if (missingCount > 0) {
        __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].log('MISSING UNIFORMS', Object.keys(missingTable))(); // log.table(priority, missingTable)();
      }

      if (unusedCount > 0) {
        __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].log('UNUSED UNIFORMS', Object.keys(unusedTable))(); // log.log(priority, 'Unused uniforms ', unusedTable)();
      }

      var configTable = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_15__webgl_debug_debug_program_configuration__["a" /* getDebugTableForProgramConfiguration */])(this.vertexArray.configuration);
      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].table(priority, attributeTable)();
      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].table(priority, uniformTable)();
      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].table(priority + 1, configTable)();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_12__debug_seer_integration__["d" /* logModel */])(this, uniforms);

      if (framebuffer) {
        framebuffer.log({
          priority: LOG_DRAW_PRIORITY,
          message: "Rendered to ".concat(framebuffer.id)
        });
      }

      __WEBPACK_IMPORTED_MODULE_16__utils__["a" /* log */].groupEnd(LOG_DRAW_PRIORITY, ">>> DRAWING MODEL ".concat(this.id))();
    }
  }, {
    key: "vertexCount",
    get: function get() {
      if (Number.isFinite(this.props.vertexCount)) {
        return this.props.vertexCount;
      }

      return this.geometry && this.geometry.getVertexCount();
    }
  }, {
    key: "drawMode",
    get: function get() {
      if (Number.isFinite(this.props.drawMode)) {
        return this.props.drawMode;
      }

      return this.geometry && this.geometry.drawMode;
    }
  }]);

  return Model;
}(__WEBPACK_IMPORTED_MODULE_8__object_3d__["a" /* default */]);


//# sourceMappingURL=model.js.map

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getPrimitiveDrawMode;
/* unused harmony export getPrimitiveCount */
/* unused harmony export getVertexCount */
/* harmony export (immutable) */ __webpack_exports__["b"] = decomposeCompositeGLType;
/* harmony export (immutable) */ __webpack_exports__["c"] = getCompositeGLType;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_assert__ = __webpack_require__(5);



var _COMPOSITE_GL_TYPES;

/* eslint-disable camelcase */

var GL_BYTE = 0x1400;
var GL_UNSIGNED_BYTE = 0x1401;
var GL_SHORT = 0x1402;
var GL_UNSIGNED_SHORT = 0x1403;
var GL_POINTS = 0x0;
var GL_LINES = 0x1;
var GL_LINE_LOOP = 0x2;
var GL_LINE_STRIP = 0x3;
var GL_TRIANGLES = 0x4;
var GL_TRIANGLE_STRIP = 0x5;
var GL_TRIANGLE_FAN = 0x6; // Local constants - these will "collapse" during minification

var GL_FLOAT = 0x1406;
var GL_FLOAT_VEC2 = 0x8b50;
var GL_FLOAT_VEC3 = 0x8b51;
var GL_FLOAT_VEC4 = 0x8b52;
var GL_INT = 0x1404;
var GL_INT_VEC2 = 0x8b53;
var GL_INT_VEC3 = 0x8b54;
var GL_INT_VEC4 = 0x8b55;
var GL_UNSIGNED_INT = 0x1405;
var GL_UNSIGNED_INT_VEC2 = 0x8dc6;
var GL_UNSIGNED_INT_VEC3 = 0x8dc7;
var GL_UNSIGNED_INT_VEC4 = 0x8dc8;
var GL_BOOL = 0x8b56;
var GL_BOOL_VEC2 = 0x8b57;
var GL_BOOL_VEC3 = 0x8b58;
var GL_BOOL_VEC4 = 0x8b59;
var GL_FLOAT_MAT2 = 0x8b5a;
var GL_FLOAT_MAT3 = 0x8b5b;
var GL_FLOAT_MAT4 = 0x8b5c;
var GL_FLOAT_MAT2x3 = 0x8b65;
var GL_FLOAT_MAT2x4 = 0x8b66;
var GL_FLOAT_MAT3x2 = 0x8b67;
var GL_FLOAT_MAT3x4 = 0x8b68;
var GL_FLOAT_MAT4x2 = 0x8b69;
var GL_FLOAT_MAT4x3 = 0x8b6a; // Composite types table

var COMPOSITE_GL_TYPES = (_COMPOSITE_GL_TYPES = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT, [GL_FLOAT, 1, 'float']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_VEC2, [GL_FLOAT, 2, 'vec2']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_VEC3, [GL_FLOAT, 3, 'vec3']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_VEC4, [GL_FLOAT, 4, 'vec4']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_INT, [GL_INT, 1, 'int']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_INT_VEC2, [GL_INT, 2, 'ivec2']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_INT_VEC3, [GL_INT, 3, 'ivec3']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_INT_VEC4, [GL_INT, 4, 'ivec4']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT, [GL_UNSIGNED_INT, 1, 'uint']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT_VEC2, [GL_UNSIGNED_INT, 2, 'uvec2']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT_VEC3, [GL_UNSIGNED_INT, 3, 'uvec3']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_UNSIGNED_INT_VEC4, [GL_UNSIGNED_INT, 4, 'uvec4']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_BOOL, [GL_FLOAT, 1, 'bool']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_BOOL_VEC2, [GL_FLOAT, 2, 'bvec2']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_BOOL_VEC3, [GL_FLOAT, 3, 'bvec3']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_BOOL_VEC4, [GL_FLOAT, 4, 'bvec4']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT2, [GL_FLOAT, 8, 'mat2']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT2x3, [GL_FLOAT, 8, 'mat2x3']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT2x4, [GL_FLOAT, 8, 'mat2x4']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT3, [GL_FLOAT, 12, 'mat3']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT3x2, [GL_FLOAT, 12, 'mat3x2']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT3x4, [GL_FLOAT, 12, 'mat3x4']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT4, [GL_FLOAT, 16, 'mat4']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT4x2, [GL_FLOAT, 16, 'mat4x2']), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_COMPOSITE_GL_TYPES, GL_FLOAT_MAT4x3, [GL_FLOAT, 16, 'mat4x3']), _COMPOSITE_GL_TYPES); // Counts the number of complete primitives given a number of vertices and a drawMode

function getPrimitiveDrawMode(drawMode) {
  switch (drawMode) {
    case GL_POINTS:
      return GL_POINTS;

    case GL_LINES:
      return GL_LINES;

    case GL_LINE_STRIP:
      return GL_LINES;

    case GL_LINE_LOOP:
      return GL_LINES;

    case GL_TRIANGLES:
      return GL_TRIANGLES;

    case GL_TRIANGLE_STRIP:
      return GL_TRIANGLES;

    case GL_TRIANGLE_FAN:
      return GL_TRIANGLES;

    default:
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_assert__["a" /* default */])(false);
      return 0;
  }
} // Counts the number of complete "primitives" given a number of vertices and a drawMode

function getPrimitiveCount(_ref) {
  var drawMode = _ref.drawMode,
      vertexCount = _ref.vertexCount;

  switch (drawMode) {
    case GL_POINTS:
    case GL_LINE_LOOP:
      return vertexCount;

    case GL_LINES:
      return vertexCount / 2;

    case GL_LINE_STRIP:
      return vertexCount - 1;

    case GL_TRIANGLES:
      return vertexCount / 3;

    case GL_TRIANGLE_STRIP:
    case GL_TRIANGLE_FAN:
      return vertexCount - 2;

    default:
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_assert__["a" /* default */])(false);
      return 0;
  }
} // Counts the number of vertices after splitting the vertex stream into separate "primitives"

function getVertexCount(_ref2) {
  var drawMode = _ref2.drawMode,
      vertexCount = _ref2.vertexCount;
  var primitiveCount = getPrimitiveCount({
    drawMode: drawMode,
    vertexCount: vertexCount
  });

  switch (getPrimitiveDrawMode(drawMode)) {
    case GL_POINTS:
      return primitiveCount;

    case GL_LINES:
      return primitiveCount * 2;

    case GL_TRIANGLES:
      return primitiveCount * 3;

    default:
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_assert__["a" /* default */])(false);
      return 0;
  }
} // Decomposes a composite type GL.VEC3 into a basic type (GL.FLOAT) and components (3)

function decomposeCompositeGLType(compositeGLType) {
  var typeAndSize = COMPOSITE_GL_TYPES[compositeGLType];

  if (!typeAndSize) {
    return null;
  }

  var _typeAndSize = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(typeAndSize, 2),
      type = _typeAndSize[0],
      components = _typeAndSize[1];

  return {
    type: type,
    components: components
  };
}
function getCompositeGLType(type, components) {
  switch (type) {
    case GL_BYTE:
    case GL_UNSIGNED_BYTE:
    case GL_SHORT:
    case GL_UNSIGNED_SHORT:
      type = GL_FLOAT;
      break;

    default:
  }

  for (var glType in COMPOSITE_GL_TYPES) {
    var _COMPOSITE_GL_TYPES$g = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(COMPOSITE_GL_TYPES[glType], 3),
        compType = _COMPOSITE_GL_TYPES$g[0],
        compComponents = _COMPOSITE_GL_TYPES$g[1],
        name = _COMPOSITE_GL_TYPES$g[2];

    if (compType === type && compComponents === components) {
      return {
        glType: glType,
        name: name
      };
    }
  }

  return null;
}
//# sourceMappingURL=attribute-utils.js.map

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Texture2D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__texture__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__webgl_utils__ = __webpack_require__(7);









var Texture2D =
/*#__PURE__*/
function (_Texture) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Texture2D, _Texture);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Texture2D, null, [{
    key: "isSupported",
    value: function isSupported(gl, opts) {
      return __WEBPACK_IMPORTED_MODULE_6__texture__["a" /* default */].isSupported(gl, opts);
    }
    /**
     * @classdesc
     * 2D WebGL Texture
     * Note: Constructor will initialize your texture.
     *
     * @class
     * @param {WebGLRenderingContext} gl - gl context
     * @param {Image|ArrayBuffer|null} opts= - named options
     * @param {Image|ArrayBuffer|null} opts.data= - buffer
     * @param {GLint} width - width of texture
     * @param {GLint} height - height of texture
     */

  }]);

  function Texture2D(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Texture2D);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__webgl_utils__["a" /* assertWebGLContext */])(gl);
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Texture2D).call(this, gl, Object.assign({}, opts, {
      target: 3553
    })));

    _this.initialize(opts);

    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));
    return _this;
  } // target cannot be modified by bind:
  // textures are special because when you first bind them to a target,
  // they get special information. When you first bind a texture as a
  // GL_TEXTURE_2D, you are actually setting special state in the texture.
  // You are saying that this texture is a 2D texture.
  // And it will always be a 2D texture; this state cannot be changed ever.
  // If you have a texture that was first bound as a GL_TEXTURE_2D,
  // you must always bind it as a GL_TEXTURE_2D;
  // attempting to bind it as GL_TEXTURE_1D will give rise to an error
  // (while run-time).


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Texture2D, [{
    key: "bind",
    value: function bind() {
      var textureUnit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.textureUnit;
      var gl = this.gl;

      if (textureUnit === undefined) {
        throw new Error('Texture.bind: must specify texture unit');
      }

      this.textureUnit = textureUnit;
      gl.activeTexture(33984 + textureUnit);
      gl.bindTexture(this.target, this.handle);
      return textureUnit;
    }
  }, {
    key: "unbind",
    value: function unbind() {
      var gl = this.gl;

      if (this.textureUnit === undefined) {
        throw new Error('Texture.unbind: texture unit not specified');
      }

      gl.activeTexture(33984 + this.textureUnit);
      gl.bindTexture(this.target, null);
      return this.textureUnit;
    }
  }, {
    key: "getActiveUnit",
    value: function getActiveUnit() {
      return this.gl.getParameter(34016) - 33984;
    }
  }]);

  return Texture2D;
}(__WEBPACK_IMPORTED_MODULE_6__texture__["a" /* default */]);


//# sourceMappingURL=texture-2d.js.map

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Vector3; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__lib_vector__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__lib_common__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec3_angle__ = __webpack_require__(230);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_vec3_angle___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_vec3_angle__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec3_cross__ = __webpack_require__(103);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_vec3_cross___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_vec3_cross__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec3_rotateX__ = __webpack_require__(232);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_vec3_rotateX___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_vec3_rotateX__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec3_rotateY__ = __webpack_require__(233);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_vec3_rotateY___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_vec3_rotateY__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec3_rotateZ__ = __webpack_require__(234);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_vec3_rotateZ___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_vec3_rotateZ__);












var ORIGIN = [0, 0, 0];

var Vector3 = function (_Vector) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Vector3, _Vector);

  function Vector3() {
    var _this;

    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Vector3);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Vector3).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y, z);
    }

    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Vector3, [{
    key: "angle",
    value: function angle(vector) {
      return __WEBPACK_IMPORTED_MODULE_7_gl_vec3_angle___default()(this, vector);
    }
  }, {
    key: "cross",
    value: function cross(vector) {
      __WEBPACK_IMPORTED_MODULE_8_gl_vec3_cross___default()(this, this, vector);
      return this.check();
    }
  }, {
    key: "rotateX",
    value: function rotateX(_ref) {
      var radians = _ref.radians,
          _ref$origin = _ref.origin,
          origin = _ref$origin === void 0 ? ORIGIN : _ref$origin;
      __WEBPACK_IMPORTED_MODULE_9_gl_vec3_rotateX___default()(this, this, origin, radians);
      return this.check();
    }
  }, {
    key: "rotateY",
    value: function rotateY(_ref2) {
      var radians = _ref2.radians,
          _ref2$origin = _ref2.origin,
          origin = _ref2$origin === void 0 ? ORIGIN : _ref2$origin;
      __WEBPACK_IMPORTED_MODULE_10_gl_vec3_rotateY___default()(this, this, origin, radians);
      return this.check();
    }
  }, {
    key: "rotateZ",
    value: function rotateZ(_ref3) {
      var radians = _ref3.radians,
          _ref3$origin = _ref3.origin,
          origin = _ref3$origin === void 0 ? ORIGIN : _ref3$origin;
      __WEBPACK_IMPORTED_MODULE_11_gl_vec3_rotateZ___default()(this, this, origin, radians);
      return this.check();
    }
  }, {
    key: "operation",
    value: function operation(_operation) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      _operation.apply(void 0, [this, this].concat(args));

      return this.check();
    }
  }, {
    key: "ELEMENTS",
    get: function get() {
      return 3;
    }
  }, {
    key: "z",
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }]);

  return Vector3;
}(__WEBPACK_IMPORTED_MODULE_5__lib_vector__["a" /* default */]);


//# sourceMappingURL=vector3.js.map

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = assert;
// Recommendation is to ignore message but current test suite checks agains the
// message so keep it for now.
function assert(condition, message) {
  if (!condition) {
    throw new Error(message || 'shadertools: assertion failed.');
  }
}
//# sourceMappingURL=assert.js.map

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(298);
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Object3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_math_gl__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_assert__ = __webpack_require__(5);






var Object3D =
/*#__PURE__*/
function () {
  function Object3D(_ref) {
    var id = _ref.id,
        _ref$display = _ref.display,
        display = _ref$display === void 0 ? true : _ref$display;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Object3D);

    // whether to display the object at all
    this.id = id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils__["b" /* uid */])(this.constructor.name);
    this.display = true; // model position, rotation, scale and all in all matrix

    this.position = new __WEBPACK_IMPORTED_MODULE_3_math_gl__["c" /* Vector3 */]();
    this.rotation = new __WEBPACK_IMPORTED_MODULE_3_math_gl__["c" /* Vector3 */]();
    this.scale = new __WEBPACK_IMPORTED_MODULE_3_math_gl__["c" /* Vector3 */](1, 1, 1);
    this.matrix = new __WEBPACK_IMPORTED_MODULE_3_math_gl__["a" /* Matrix4 */]();
    this.userData = {};
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Object3D, [{
    key: "toString",
    value: function toString() {
      return "{id: ".concat(this.id, ", children: ").concat(this.children, ")}");
    }
  }, {
    key: "setPosition",
    value: function setPosition(position) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(position.length === 3, 'setPosition requires vector argument');
      this.position = position;
      return this;
    }
  }, {
    key: "setRotation",
    value: function setRotation(rotation) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(rotation.length === 3, 'setRotation requires vector argument');
      this.rotation = rotation;
      return this;
    }
  }, {
    key: "setScale",
    value: function setScale(scale) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(scale.length === 3, 'setScale requires vector argument');
      this.scale = scale;
      return this;
    }
  }, {
    key: "setMatrixComponents",
    value: function setMatrixComponents(_ref2) {
      var position = _ref2.position,
          rotation = _ref2.rotation,
          scale = _ref2.scale,
          _ref2$update = _ref2.update,
          update = _ref2$update === void 0 ? true : _ref2$update;

      if (position) {
        this.setPosition(position);
      }

      if (rotation) {
        this.setRotation(rotation);
      }

      if (scale) {
        this.setScale(scale);
      }

      if (update) {
        this.updateMatrix();
      }

      return this;
    }
  }, {
    key: "updateMatrix",
    value: function updateMatrix() {
      var pos = this.position;
      var rot = this.rotation;
      var scale = this.scale;
      this.matrix.identity();
      this.matrix.translate(pos);
      this.matrix.rotateXYZ(rot);
      this.matrix.scale(scale);
      return this;
    }
  }, {
    key: "update",
    value: function update() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          position = _ref3.position,
          rotation = _ref3.rotation,
          scale = _ref3.scale;

      if (position) {
        this.setPosition(position);
      }

      if (rotation) {
        this.setRotation(rotation);
      }

      if (scale) {
        this.setScale(scale);
      }

      this.updateMatrix();
      return this;
    }
  }, {
    key: "getCoordinateUniforms",
    value: function getCoordinateUniforms(viewMatrix, modelMatrix) {
      // TODO - solve multiple class problem
      // assert(viewMatrix instanceof Matrix4);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(viewMatrix);
      modelMatrix = modelMatrix || this.matrix;
      var worldMatrix = new __WEBPACK_IMPORTED_MODULE_3_math_gl__["a" /* Matrix4 */](viewMatrix).multiplyRight(modelMatrix);
      var worldInverse = worldMatrix.invert();
      var worldInverseTranspose = worldInverse.transpose();
      return {
        viewMatrix: viewMatrix,
        modelMatrix: modelMatrix,
        objectMatrix: modelMatrix,
        worldMatrix: worldMatrix,
        worldInverseMatrix: worldInverse,
        worldInverseTransposeMatrix: worldInverseTranspose
      };
    } // TODO - copied code, not yet vetted

  }, {
    key: "transform",
    value: function transform() {
      if (!this.parent) {
        this.endPosition.set(this.position);
        this.endRotation.set(this.rotation);
        this.endScale.set(this.scale);
      } else {
        var parent = this.parent;
        this.endPosition.set(this.position.add(parent.endPosition));
        this.endRotation.set(this.rotation.add(parent.endRotation));
        this.endScale.set(this.scale.add(parent.endScale));
      }

      var ch = this.children;

      for (var i = 0; i < ch.length; ++i) {
        ch[i].transform();
      }

      return this;
    }
  }]);

  return Object3D;
}();


//# sourceMappingURL=object-3d.js.map

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TruncatedConeGeometry; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geometry__ = __webpack_require__(18);





var INDEX_OFFSETS = {
  x: [2, 0, 1],
  y: [0, 1, 2],
  z: [1, 2, 0]
};

var TruncatedConeGeometry =
/*#__PURE__*/
function (_Geometry) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(TruncatedConeGeometry, _Geometry);

  // Primitives inspired by TDL http://code.google.com/p/webglsamples/,
  // copyright 2011 Google Inc. new BSD License
  // (http://www.opensource.org/licenses/bsd-license.php).

  /* eslint-disable max-statements, complexity */
  function TruncatedConeGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, TruncatedConeGeometry);

    var _opts$bottomRadius = opts.bottomRadius,
        bottomRadius = _opts$bottomRadius === void 0 ? 0 : _opts$bottomRadius,
        _opts$topRadius = opts.topRadius,
        topRadius = _opts$topRadius === void 0 ? 0 : _opts$topRadius,
        _opts$height = opts.height,
        height = _opts$height === void 0 ? 1 : _opts$height,
        _opts$nradial = opts.nradial,
        nradial = _opts$nradial === void 0 ? 10 : _opts$nradial,
        _opts$nvertical = opts.nvertical,
        nvertical = _opts$nvertical === void 0 ? 10 : _opts$nvertical,
        _opts$verticalAxis = opts.verticalAxis,
        verticalAxis = _opts$verticalAxis === void 0 ? 'y' : _opts$verticalAxis,
        _opts$topCap = opts.topCap,
        topCap = _opts$topCap === void 0 ? false : _opts$topCap,
        _opts$bottomCap = opts.bottomCap,
        bottomCap = _opts$bottomCap === void 0 ? false : _opts$bottomCap;
    var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);
    var numVertices = (nradial + 1) * (nvertical + 1 + extra);
    var slant = Math.atan2(bottomRadius - topRadius, height);
    var msin = Math.sin;
    var mcos = Math.cos;
    var mpi = Math.PI;
    var cosSlant = mcos(slant);
    var sinSlant = msin(slant);
    var start = topCap ? -2 : 0;
    var end = nvertical + (bottomCap ? 2 : 0);
    var vertsAroundEdge = nradial + 1;
    var positions = new Float32Array(numVertices * 3);
    var normals = new Float32Array(numVertices * 3);
    var texCoords = new Float32Array(numVertices * 2);
    var indices = new Uint16Array(nradial * (nvertical + extra) * 6);
    var indexOffset = INDEX_OFFSETS[verticalAxis];
    var i3 = 0;
    var i2 = 0;

    for (var i = start; i <= end; i++) {
      var v = i / nvertical;
      var y = height * v;
      var ringRadius = void 0;

      if (i < 0) {
        y = 0;
        v = 1;
        ringRadius = bottomRadius;
      } else if (i > nvertical) {
        y = height;
        v = 1;
        ringRadius = topRadius;
      } else {
        ringRadius = bottomRadius + (topRadius - bottomRadius) * (i / nvertical);
      }

      if (i === -2 || i === nvertical + 2) {
        ringRadius = 0;
        v = 0;
      }

      y -= height / 2;

      for (var j = 0; j < vertsAroundEdge; j++) {
        var sin = msin(j * mpi * 2 / nradial);
        var cos = mcos(j * mpi * 2 / nradial);
        positions[i3 + indexOffset[0]] = sin * ringRadius;
        positions[i3 + indexOffset[1]] = y;
        positions[i3 + indexOffset[2]] = cos * ringRadius;
        normals[i3 + indexOffset[0]] = i < 0 || i > nvertical ? 0 : sin * cosSlant;
        normals[i3 + indexOffset[1]] = i < 0 ? -1 : i > nvertical ? 1 : sinSlant;
        normals[i3 + indexOffset[2]] = i < 0 || i > nvertical ? 0 : cos * cosSlant;
        texCoords[i2 + 0] = j / nradial;
        texCoords[i2 + 1] = v;
        i2 += 2;
        i3 += 3;
      }
    }

    for (var _i = 0; _i < nvertical + extra; _i++) {
      for (var _j = 0; _j < nradial; _j++) {
        var index = (_i * nradial + _j) * 6;
        indices[index + 0] = vertsAroundEdge * (_i + 0) + 0 + _j;
        indices[index + 1] = vertsAroundEdge * (_i + 0) + 1 + _j;
        indices[index + 2] = vertsAroundEdge * (_i + 1) + 1 + _j;
        indices[index + 3] = vertsAroundEdge * (_i + 0) + 0 + _j;
        indices[index + 4] = vertsAroundEdge * (_i + 1) + 1 + _j;
        indices[index + 5] = vertsAroundEdge * (_i + 1) + 0 + _j;
      }
    }

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(TruncatedConeGeometry).call(this, Object.assign({}, opts, {
      attributes: {
        positions: positions,
        normals: normals,
        texCoords: texCoords,
        indices: indices
      }
    })));
  }

  return TruncatedConeGeometry;
}(__WEBPACK_IMPORTED_MODULE_4__geometry__["a" /* default */]);


//# sourceMappingURL=truncated-cone-geometry.js.map

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ClipSpace; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__geometry__ = __webpack_require__(16);




// ClipSpace


var CLIPSPACE_VERTEX_SHADER = "attribute vec2 aClipSpacePosition;\nattribute vec2 aTexCoord;\nattribute vec2 aCoordinate;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\n  position = aClipSpacePosition;\n  coordinate = aCoordinate;\n  uv = aTexCoord;\n}\n";
/* eslint-disable indent, no-multi-spaces */

var POSITIONS = [-1, -1, 1, -1, -1, 1, 1, 1];

var ClipSpace =
/*#__PURE__*/
function (_Model) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(ClipSpace, _Model);

  function ClipSpace(gl, opts) {
    var _this;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, ClipSpace);

    var TEX_COORDS = POSITIONS.map(function (coord) {
      return coord === -1 ? 0 : coord;
    });
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(ClipSpace).call(this, gl, Object.assign({}, opts, {
      vs: CLIPSPACE_VERTEX_SHADER,
      geometry: new __WEBPACK_IMPORTED_MODULE_5__geometry__["a" /* Geometry */]({
        drawMode: 5,
        vertexCount: 4,
        attributes: {
          aClipSpacePosition: {
            size: 2,
            value: new Float32Array(POSITIONS)
          },
          aTexCoord: {
            size: 2,
            value: new Float32Array(TEX_COORDS)
          },
          aCoordinate: {
            size: 2,
            value: new Float32Array(TEX_COORDS)
          }
        }
      })
    })));

    _this.setVertexCount(4);

    return _this;
  }

  return ClipSpace;
}(__WEBPACK_IMPORTED_MODULE_4__core__["a" /* Model */]);


//# sourceMappingURL=clip-space.js.map

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return FEATURES; });
/* unused harmony export canCompileGLGSExtension */
/* harmony export (immutable) */ __webpack_exports__["b"] = hasFeature;
/* harmony export (immutable) */ __webpack_exports__["d"] = hasFeatures;
/* harmony export (immutable) */ __webpack_exports__["a"] = getFeatures;
/* unused harmony export TEST_EXPORTS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_assert__ = __webpack_require__(5);
// Feature detection for WebGL
//
// Provides a function that enables simple checking of which WebGL features are
// available in an WebGL1 or WebGL2 environment.

/* eslint-disable no-inline-comments, max-len */


 // Defines luma.gl "feature" names and semantics

var WEBGL_FEATURES = {
  // API SUPPORT
  VERTEX_ARRAY_OBJECT: ['OES_vertex_array_object', true],
  TIMER_QUERY: ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],
  INSTANCED_RENDERING: ['ANGLE_instanced_arrays', true],
  MULTIPLE_RENDER_TARGETS: ['WEBGL_draw_buffers', true],
  // FEATURES
  ELEMENT_INDEX_UINT32: ['OES_element_index_uint', true],
  BLEND_EQUATION_MINMAX: ['EXT_blend_minmax', true],
  // TEXTURES, RENDERBUFFERS
  COLOR_ENCODING_SRGB: ['EXT_sRGB', true],
  // TEXTURES
  TEXTURE_DEPTH: ['WEBGL_depth_texture', true],
  TEXTURE_FLOAT: ['OES_texture_float', true],
  TEXTURE_HALF_FLOAT: ['OES_texture_half_float', true],
  TEXTURE_FILTER_LINEAR_FLOAT: ['OES_texture_float_linear'],
  TEXTURE_FILTER_LINEAR_HALF_FLOAT: ['OES_texture_half_float_linear'],
  TEXTURE_FILTER_ANISOTROPIC: ['EXT_texture_filter_anisotropic'],
  // FRAMEBUFFERS, TEXTURES AND RENDERBUFFERS
  COLOR_ATTACHMENT_RGBA32F: ['WEBGL_color_buffer_float', 'EXT_color_buffer_float'],
  COLOR_ATTACHMENT_FLOAT: [false, 'EXT_color_buffer_float'],
  COLOR_ATTACHMENT_HALF_FLOAT: [false, 'EXT_color_buffer_half_float'],
  // GLSL extensions
  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true],
  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],
  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],
  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]
}; // Create a key-mirrored FEATURES array

var FEATURES = {};
Object.keys(WEBGL_FEATURES).forEach(function (key) {
  FEATURES[key] = key;
});
 // Enables feature detection in IE11 due to a bug where gl.getExtension may return true
// but fail to compile when the extension is enabled in the shader. Specifically,
// the OES_standard_derivatives extension fails to compile in IE11 even though its included
// in the list of supported extensions.

var compiledGlslExtensions = {}; // opts allows user agent to be overridden for testing

function canCompileGLGSExtension(gl, cap) {
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var feature = WEBGL_FEATURES[cap];
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_assert__["a" /* default */])(feature, cap);

  if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["f" /* isOldIE */])(opts)) {
    return true;
  }

  if (cap in compiledGlslExtensions) {
    return compiledGlslExtensions[cap];
  }

  var extensionName = feature[0];
  var source = "#extension GL_".concat(extensionName, " : enable\nvoid main(void) {}");
  var shader = gl.createShader(35633);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  var canCompile = gl.getShaderParameter(shader, 35713);
  gl.deleteShader(shader);
  compiledGlslExtensions[cap] = canCompile;
  return canCompile;
} // TODO - cache the value

function getFeature(gl, cap) {
  var feature = WEBGL_FEATURES[cap];
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_assert__["a" /* default */])(feature, cap); // Get extension name from table

  var extensionName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl_utils__["b" /* isWebGL2 */])(gl) ? feature[1] || feature[0] : feature[0]; // Check if the value is dependent on checking an extension

  var value = typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_assert__["a" /* default */])(value === false || value === true);
  return value;
} // capability can be a WebGL extension name or a luma capability name


function hasFeature(gl, feature) {
  return hasFeatures(gl, feature);
}
function hasFeatures(gl, features) {
  features = Array.isArray(features) ? features : [features];
  return features.every(function (feature) {
    return getFeature(gl, feature);
  });
}
function getFeatures(gl) {
  gl.luma = gl.luma || {};

  if (!gl.luma.caps) {
    gl.luma.caps = {};
    gl.luma.caps.webgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl_utils__["b" /* isWebGL2 */])(gl);

    for (var cap in WEBGL_FEATURES) {
      gl.luma.caps[cap] = getFeature(gl, cap);
    }
  }

  return gl.luma.caps;
}
var TEST_EXPORTS = {
  WEBGL_FEATURES: WEBGL_FEATURES
};
//# sourceMappingURL=context-features.js.map

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getContextLimits */
/* unused harmony export getGLContextInfo */
/* unused harmony export getGLContextInfo2 */
/* unused harmony export getContextInfo */
/* harmony export (immutable) */ __webpack_exports__["a"] = glGetDebugInfo;
/* unused harmony export TEST_EXPORTS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils__ = __webpack_require__(7);


var _WEBGL_LIMITS;

/* eslint-disable no-inline-comments, max-len */

var WEBGL_LIMITS = (_WEBGL_LIMITS = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 33902, {
  gl1: new Float32Array([1, 1])
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 33901, {
  gl1: new Float32Array([1, 1])
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 3379, {
  gl1: 64,
  gl2: 2048
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 34076, {
  gl1: 16
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 34930, {
  gl1: 8
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35661, {
  gl1: 8
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35660, {
  gl1: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 34024, {
  gl1: 1
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 36348, {
  gl1: 8
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 34921, {
  gl1: 8
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 36347, {
  gl1: 128
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 36349, {
  gl1: 16
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 3386, {
  gl1: new Int32Array([0, 0])
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 32883, {
  gl1: 0,
  gl2: 256
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35071, {
  gl1: 0,
  gl2: 256
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 37447, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 36063, {
  gl1: 0,
  gl2: 4
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35379, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35374, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35377, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 34852, {
  gl1: 0,
  gl2: 4
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 36203, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 33001, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 33000, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 37157, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35373, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35657, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 36183, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 37137, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 34045, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35978, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35979, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35968, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35376, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35375, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35659, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 37154, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35371, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35658, {
  gl1: 0,
  gl2: 0
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35076, {
  gl1: 0,
  gl2: -8,
  negative: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35077, {
  gl1: 0,
  gl2: 7
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_LIMITS, 35380, {
  gl1: 0,
  gl2: 0 // GLint

}), _WEBGL_LIMITS);
function getContextLimits(gl) {
  gl.luma = gl.luma || {};

  if (!gl.luma.limits) {
    gl.luma.limits = {};
    gl.luma.webgl1MinLimits = {};
    gl.luma.webgl2MinLimits = {};
    var isWebgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils__["b" /* isWebGL2 */])(gl); // WEBGL limits

    for (var parameter in WEBGL_LIMITS) {
      var limit = WEBGL_LIMITS[parameter];
      var webgl1MinLimit = limit.gl1;
      var webgl2MinLimit = 'gl2' in limit ? limit.gl2 : limit.gl1;
      var minLimit = isWebgl2 ? webgl2MinLimit : webgl1MinLimit; // Check if we can query for this limit

      var limitNotAvailable = 'gl2' in limit && !isWebgl2 || 'extension' in limit && !gl.getExtension(limit.extension);
      var value = limitNotAvailable ? minLimit : gl.getParameter(parameter);
      gl.luma.limits[parameter] = value;
      gl.luma.webgl1MinLimits[parameter] = webgl1MinLimit;
      gl.luma.webgl2MinLimits[parameter] = webgl2MinLimit;
    }
  }

  return gl.luma.limits;
}
function getGLContextInfo(gl) {
  gl.luma = gl.luma || {};

  if (!gl.luma.info) {
    var _gl$luma$info;

    var info = gl.getExtension('WEBGL_debug_renderer_info');
    gl.luma.info = (_gl$luma$info = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_gl$luma$info, 7936, gl.getParameter(7936)), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_gl$luma$info, 7937, gl.getParameter(7937)), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_gl$luma$info, 37445, gl.getParameter(info && info.UNMASKED_VENDOR_WEBGL || 7936)), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_gl$luma$info, 37446, gl.getParameter(info && info.UNMASKED_RENDERER_WEBGL || 7937)), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_gl$luma$info, 7938, gl.getParameter(7938)), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_gl$luma$info, 35724, gl.getParameter(35724)), _gl$luma$info);
  }

  return gl.luma.info;
}
var GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.

var GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.

function getGLContextInfo2(gl) {
  var vendorMasked = gl.getParameter(7936);
  var rendererMasked = gl.getParameter(7937);
  var ext = gl.getExtension('WEBGL_debug_renderer_info');
  var vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || 7936);
  var rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || 7937);
  return {
    vendor: vendorUnmasked || vendorMasked,
    renderer: rendererUnmasked || rendererMasked,
    vendorMasked: vendorMasked,
    rendererMasked: rendererMasked,
    version: gl.getParameter(7938),
    shadingLanguageVersion: gl.getParameter(35724)
  };
}
function getContextInfo(gl) {
  var limits = getContextLimits(gl);
  var info = getGLContextInfo(gl);
  return {
    // basic information
    vendor: info[GL_UNMASKED_VENDOR_WEBGL] || info[7936],
    renderer: info[GL_UNMASKED_RENDERER_WEBGL] || info[7937],
    version: info[7938],
    shadingLanguageVersion: info[35724],
    // info, caps and limits
    info: info,
    limits: limits,
    webgl1MinLimits: gl.luma.webgl1MinLimits,
    webgl2MinLimits: gl.luma.webgl2MinLimits
  };
} // DEBUG INFO

/**
 * Provides strings identifying the GPU vendor and driver.
 * https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/
 * @param {WebGLRenderingContext} gl - context
 * @return {Object} - 'vendor' and 'renderer' string fields.
 */

function glGetDebugInfo(gl) {
  return getGLContextInfo2(gl); // const info = gl.getExtension('WEBGL_debug_renderer_info');
  // // We can't determine if 'WEBGL_debug_renderer_info' is supported by
  // // checking whether info is null here. Firefox doesn't follow the
  // // specs by returning null for unsupported extension. Instead,
  // // it returns an object without GL_UNMASKED_VENDOR_WEBGL and GL_UNMASKED_RENDERER_WEBGL.
  // return {
  //   vendor: (info && info.UNMASKED_VENDOR_WEBGL) ?
  //     gl.getParameter(info.UNMASKED_VENDOR_WEBGL) : 'unknown',
  //   renderer: (info && info.UNMASKED_RENDERER_WEBGL) ?
  //     gl.getParameter(info.UNMASKED_RENDERER_WEBGL) : 'unknown'
  // };
}
var TEST_EXPORTS = {
  WEBGL_LIMITS: WEBGL_LIMITS
};
//# sourceMappingURL=context-limits.js.map

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getGLTypeFromTypedArray;
/* harmony export (immutable) */ __webpack_exports__["b"] = getTypedArrayFromGLType;
/* harmony export (immutable) */ __webpack_exports__["c"] = flipRows;
/* harmony export (immutable) */ __webpack_exports__["d"] = scalePixels;
var ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array'; // Converts TYPED ARRAYS to corresponding GL constant
// Used to auto deduce gl parameter types

function getGLTypeFromTypedArray(arrayOrType) {
  // If typed array, look up constructor
  var type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;

  switch (type) {
    case Float32Array:
      return 5126;

    case Uint16Array:
      return 5123;

    case Uint32Array:
      return 5125;

    case Uint8Array:
      return 5121;

    case Uint8ClampedArray:
      return 5121;

    case Int8Array:
      return 5120;

    case Int16Array:
      return 5122;

    case Int32Array:
      return 5124;

    default:
      throw new Error(ERR_TYPE_DEDUCTION);
  }
} // Converts GL constant to corresponding TYPED ARRAY
// Used to auto deduce gl parameter types

/* eslint-disable complexity */

function getTypedArrayFromGLType(glType) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$clamped = _ref.clamped,
      clamped = _ref$clamped === void 0 ? true : _ref$clamped;

  // Sorted in some order of likelihood to reduce amount of comparisons
  switch (glType) {
    case 5126:
      return Float32Array;

    case 5123:
    case 33635:
    case 32819:
    case 32820:
      return Uint16Array;

    case 5125:
      return Uint32Array;

    case 5121:
      return clamped ? Uint8ClampedArray : Uint8Array;

    case 5120:
      return Int8Array;

    case 5122:
      return Int16Array;

    case 5124:
      return Int32Array;

    default:
      throw new Error('Failed to deduce typed array type from GL constant');
  }
}
/* eslint-enable complexity */
// Flip rows (can be used on arrays returned from `Framebuffer.readPixels`)
// https://stackoverflow.com/questions/41969562/
// how-can-i-flip-the-result-of-webglrenderingcontext-readpixels

function flipRows(_ref2) {
  var data = _ref2.data,
      width = _ref2.width,
      height = _ref2.height,
      _ref2$bytesPerPixel = _ref2.bytesPerPixel,
      bytesPerPixel = _ref2$bytesPerPixel === void 0 ? 4 : _ref2$bytesPerPixel,
      temp = _ref2.temp;
  var bytesPerRow = width * bytesPerPixel; // make a temp buffer to hold one row

  temp = temp || new Uint8Array(bytesPerRow);

  for (var y = 0; y < height / 2; ++y) {
    var topOffset = y * bytesPerRow;
    var bottomOffset = (height - y - 1) * bytesPerRow; // make copy of a row on the top half

    temp.set(data.subarray(topOffset, topOffset + bytesPerRow)); // copy a row from the bottom half to the top

    data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow); // copy the copy of the top half row to the bottom half

    data.set(temp, bottomOffset);
  }
}
function scalePixels(_ref3) {
  var data = _ref3.data,
      width = _ref3.width,
      height = _ref3.height;
  var newWidth = Math.round(width / 2);
  var newHeight = Math.round(height / 2);
  var newData = new Uint8Array(newWidth * newHeight * 4);

  for (var y = 0; y < newHeight; y++) {
    for (var x = 0; x < newWidth; x++) {
      for (var c = 0; c < 4; c++) {
        newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];
      }
    }
  }

  return {
    data: newData,
    width: newWidth,
    height: newHeight
  };
}
//# sourceMappingURL=typed-array-utils.js.map

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Accessor; });
/* unused harmony export DEFAULT_ACCESSOR_VALUES */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_construct__ = __webpack_require__(169);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_utils_typed_array_utils__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_log__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_assert__ = __webpack_require__(5);






var DEFAULT_ACCESSOR_VALUES = {
  offset: 0,
  stride: 0,
  type: 5126,
  size: 1,
  divisor: 0,
  normalized: false,
  integer: false
};

var Accessor =
/*#__PURE__*/
function () {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__["a" /* default */])(Accessor, null, [{
    key: "getBytesPerElement",
    value: function getBytesPerElement(accessor) {
      // TODO: using `FLOAT` when type is not specified,
      // ensure this assumption is valid or force API to specify type.
      var ArrayType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils_typed_array_utils__["b" /* getTypedArrayFromGLType */])(accessor.type || 5126);
      return ArrayType.BYTES_PER_ELEMENT;
    }
  }, {
    key: "getBytesPerVertex",
    value: function getBytesPerVertex(accessor) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_assert__["a" /* default */])(accessor.size); // TODO: using `FLOAT` when type is not specified,
      // ensure this assumption is valid or force API to specify type.

      var ArrayType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils_typed_array_utils__["b" /* getTypedArrayFromGLType */])(accessor.type || 5126);
      return ArrayType.BYTES_PER_ELEMENT * accessor.size;
    } // Combines (merges) a list of accessors. On top of default values
    // Usually [programAccessor, bufferAccessor, appAccessor]
    // All props will be set in the returned object.
    // TODO check for conflicts between values in the supplied accessors

  }, {
    key: "resolve",
    value: function resolve() {
      for (var _len = arguments.length, accessors = new Array(_len), _key = 0; _key < _len; _key++) {
        accessors[_key] = arguments[_key];
      }

      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_construct__["a" /* default */])(Accessor, [DEFAULT_ACCESSOR_VALUES].concat(accessors)); // Default values
    }
  }]);

  function Accessor() {
    var _this = this;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Accessor);

    for (var _len2 = arguments.length, accessors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      accessors[_key2] = arguments[_key2];
    }

    accessors.forEach(function (accessor) {
      return _this._assign(accessor);
    }); // Merge in sequence

    Object.freeze(this);
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__["a" /* default */])(Accessor, [{
    key: "toString",
    value: function toString() {
      return JSON.stringify(this);
    } // ACCESSORS
    // TODO - remove>

  }, {
    key: "_assign",
    // PRIVATE

    /* eslint-disable complexity, max-statements */
    value: function _assign() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      // TYPE - not expected to be overridden
      if (props.type !== undefined) {
        if (this.type !== props.type) {
          __WEBPACK_IMPORTED_MODULE_4__utils_log__["a" /* default */].warn('accessor type mismatch');
        }

        this.type = props.type; // Auto-deduce integer type?

        if (props.type === 5124 || props.type === 5125) {
          this.integer = true;
        }
      } // SIZE - not expected to be overridden


      if (props.size !== undefined) {
        if (this.size !== props.size) {
          __WEBPACK_IMPORTED_MODULE_4__utils_log__["a" /* default */].warn('accessor size mismatch');
        }

        this.size = props.size;
      } // INSTANCE DIVISOR


      if (props.divisor !== undefined) {
        this.divisor = props.divisor;
      }

      if (props.offset !== undefined) {
        this.offset = props.offset;
      }

      if (props.stride !== undefined) {
        this.stride = props.stride;
      }

      if (props.normalized !== undefined) {
        this.normalized = props.normalized;
      }

      if (props.integer !== undefined) {
        this.integer = props.integer;
      } // Backwards compatibility


      if (props.instanced !== undefined) {
        __WEBPACK_IMPORTED_MODULE_4__utils_log__["a" /* default */].deprecated('Accessor.instanced', 'Accessor.divisor');
        this.divisor = props.instanced ? 1 : 0;
      }

      if (props.isInstanced !== undefined) {
        __WEBPACK_IMPORTED_MODULE_4__utils_log__["a" /* default */].deprecated('Accessor.isInstanced', 'Accessor.divisor');
        this.divisor = props.isInstanced ? 1 : 0;
      } // TODO - should this be supported?


      if (props.index !== undefined) {
        this.index = props.index ? 1 : 0;
      }

      return this;
    }
    /* eslint-enable complexity, max-statements */

  }, {
    key: "BYTES_PER_ELEMENT",
    get: function get() {
      return Accessor.getBytesPerElement(this);
    }
  }, {
    key: "BYTES_PER_VERTEX",
    get: function get() {
      return Accessor.getBytesPerVertex(this);
    }
  }]);

  return Accessor;
}(); // TEST EXPORTS




//# sourceMappingURL=accessor.js.map

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = clear;
/* harmony export (immutable) */ __webpack_exports__["b"] = clearBuffer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_context_context_state__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_assert__ = __webpack_require__(5);



 // Should collapse during minification

var GL_DEPTH_BUFFER_BIT = 0x00000100;
var GL_STENCIL_BUFFER_BIT = 0x00000400;
var GL_COLOR_BUFFER_BIT = 0x00004000;
var GL_COLOR = 0x1800;
var GL_DEPTH = 0x1801;
var GL_STENCIL = 0x1802;
var GL_DEPTH_STENCIL = 0x84f9; // Should disappear if asserts are removed

var ERR_ARGUMENTS = 'clear: bad arguments'; // Optionally clears depth, color and stencil buffers

function clear(gl) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$framebuffer = _ref.framebuffer,
      framebuffer = _ref$framebuffer === void 0 ? null : _ref$framebuffer,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? null : _ref$color,
      _ref$depth = _ref.depth,
      depth = _ref$depth === void 0 ? null : _ref$depth,
      _ref$stencil = _ref.stencil,
      stencil = _ref$stencil === void 0 ? null : _ref$stencil;

  var parameters = {};

  if (framebuffer) {
    parameters.framebuffer = framebuffer;
  }

  var clearFlags = 0;

  if (color) {
    clearFlags |= GL_COLOR_BUFFER_BIT;

    if (color !== true) {
      parameters.clearColor = color;
    }
  }

  if (depth) {
    clearFlags |= GL_DEPTH_BUFFER_BIT;

    if (depth !== true) {
      parameters.clearDepth = depth;
    }
  }

  if (stencil) {
    clearFlags |= GL_STENCIL_BUFFER_BIT;

    if (depth !== true) {
      parameters.clearStencil = depth;
    }
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(clearFlags !== 0, ERR_ARGUMENTS); // Temporarily set any clear "colors" and call clear

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_context_context_state__["b" /* withParameters */])(gl, parameters, function () {
    gl.clear(clearFlags);
  });
} // WebGL2 - clear a specific drawing buffer

function clearBuffer(gl) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$framebuffer = _ref2.framebuffer,
      framebuffer = _ref2$framebuffer === void 0 ? null : _ref2$framebuffer,
      _ref2$buffer = _ref2.buffer,
      buffer = _ref2$buffer === void 0 ? GL_COLOR : _ref2$buffer,
      _ref2$drawBuffer = _ref2.drawBuffer,
      drawBuffer = _ref2$drawBuffer === void 0 ? 0 : _ref2$drawBuffer,
      _ref2$value = _ref2.value,
      value = _ref2$value === void 0 ? [0, 0, 0, 0] : _ref2$value;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_utils__["c" /* assertWebGL2Context */])(gl);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_context_context_state__["b" /* withParameters */])(gl, {
    framebuffer: framebuffer
  }, function () {
    // Method selection per OpenGL ES 3 docs
    switch (buffer) {
      case GL_COLOR:
        switch (value.constructor) {
          case Int32Array:
            gl.clearBufferiv(buffer, drawBuffer, value);
            break;

          case Uint32Array:
            gl.clearBufferuiv(buffer, drawBuffer, value);
            break;

          case Float32Array:
          default:
            gl.clearBufferfv(buffer, drawBuffer, value);
        }

        break;

      case GL_DEPTH:
        gl.clearBufferfv(GL_DEPTH, 0, [value]);
        break;

      case GL_STENCIL:
        gl.clearBufferiv(GL_STENCIL, 0, [value]);
        break;

      case GL_DEPTH_STENCIL:
        var _value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(value, 2),
            depth = _value[0],
            stencil = _value[1];

        gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);
        break;

      default:
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(false, ERR_ARGUMENTS);
    }
  });
}
//# sourceMappingURL=clear.js.map

/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = readPixelsToArray;
/* unused harmony export readPixelsToBuffer */
/* harmony export (immutable) */ __webpack_exports__["a"] = copyToDataUrl;
/* unused harmony export copyToImage */
/* unused harmony export copyToTexture */
/* unused harmony export blit */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__buffer__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_framebuffer__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_texture__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_utils_typed_array_utils__ = __webpack_require__(47);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__webgl_utils_format_utils__ = __webpack_require__(274);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__webgl_context__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_utils_texture_utils__ = __webpack_require__(63);









 // NOTE: Slow requires roundtrip to GPU
// Copies data from a Framebuffer or a Texture object into ArrayBuffer object.
// App can provide targetPixelArray or have it auto allocated by this method
// @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,
//  newly allocated by this method unless provided by app.

function readPixelsToArray(source) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$sourceX = _ref.sourceX,
      sourceX = _ref$sourceX === void 0 ? 0 : _ref$sourceX,
      _ref$sourceY = _ref.sourceY,
      sourceY = _ref$sourceY === void 0 ? 0 : _ref$sourceY,
      _ref$sourceFormat = _ref.sourceFormat,
      sourceFormat = _ref$sourceFormat === void 0 ? 6408 : _ref$sourceFormat,
      _ref$sourceAttachment = _ref.sourceAttachment,
      sourceAttachment = _ref$sourceAttachment === void 0 ? 36064 : _ref$sourceAttachment,
      _ref$target = _ref.target,
      target = _ref$target === void 0 ? null : _ref$target,
      sourceWidth = _ref.sourceWidth,
      sourceHeight = _ref.sourceHeight,
      sourceType = _ref.sourceType;

  var _getFramebuffer = getFramebuffer(source),
      framebuffer = _getFramebuffer.framebuffer,
      deleteFramebuffer = _getFramebuffer.deleteFramebuffer;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["g" /* assert */])(framebuffer);
  var gl = framebuffer.gl,
      handle = framebuffer.handle,
      attachments = framebuffer.attachments;
  sourceWidth = sourceWidth || framebuffer.width;
  sourceHeight = sourceHeight || framebuffer.height; // TODO - Set and unset gl.readBuffer

  if (sourceAttachment === 36064 && handle === null) {
    sourceAttachment = 1028;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["g" /* assert */])(attachments[sourceAttachment]); // Deduce the type from color attachment if not provided.

  sourceType = sourceType || attachments[sourceAttachment].type; // Deduce type and allocated pixelArray if needed

  target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight); // Pixel array available, if necessary, deduce type from it.

  sourceType = sourceType || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils_typed_array_utils__["a" /* getGLTypeFromTypedArray */])(target);
  var prevHandle = gl.bindFramebuffer(36160, handle);
  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);
  gl.bindFramebuffer(36160, prevHandle || null);

  if (deleteFramebuffer) {
    framebuffer.delete();
  }

  return target;
} // NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.
// Copies data from a Framebuffer or a Texture object into a Buffer object.

function readPixelsToBuffer(source, _ref2) {
  var _ref2$sourceX = _ref2.sourceX,
      sourceX = _ref2$sourceX === void 0 ? 0 : _ref2$sourceX,
      _ref2$sourceY = _ref2.sourceY,
      sourceY = _ref2$sourceY === void 0 ? 0 : _ref2$sourceY,
      _ref2$sourceFormat = _ref2.sourceFormat,
      sourceFormat = _ref2$sourceFormat === void 0 ? 6408 : _ref2$sourceFormat,
      _ref2$target = _ref2.target,
      target = _ref2$target === void 0 ? null : _ref2$target,
      _ref2$targetByteOffse = _ref2.targetByteOffset,
      targetByteOffset = _ref2$targetByteOffse === void 0 ? 0 : _ref2$targetByteOffse,
      sourceWidth = _ref2.sourceWidth,
      sourceHeight = _ref2.sourceHeight,
      sourceType = _ref2.sourceType;

  var _getFramebuffer2 = getFramebuffer(source),
      framebuffer = _getFramebuffer2.framebuffer,
      deleteFramebuffer = _getFramebuffer2.deleteFramebuffer;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["g" /* assert */])(framebuffer);
  var gl = framebuffer.gl;
  sourceWidth = sourceWidth || framebuffer.width;
  sourceHeight = sourceHeight || framebuffer.height; // Asynchronus read (PIXEL_PACK_BUFFER) is WebGL2 only feature

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__webgl_utils__["c" /* assertWebGL2Context */])(gl); // deduce type if not available.

  sourceType = sourceType || (target ? target.type : 5121);

  if (!target) {
    // Create new buffer with enough size
    var components = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__webgl_utils_format_utils__["a" /* glFormatToComponents */])(sourceFormat);
    var byteCount = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__webgl_utils_format_utils__["b" /* glTypeToBytes */])(sourceType);
    var bytes = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;
    target = new __WEBPACK_IMPORTED_MODULE_0__buffer__["a" /* default */](gl, {
      bytes: bytes,
      type: sourceType,
      size: components
    });
  }

  target.bind({
    target: 35051
  });
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__webgl_context__["a" /* withParameters */])(gl, {
    framebuffer: framebuffer
  }, function () {
    gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, targetByteOffset);
  });
  target.unbind({
    target: 35051
  });

  if (deleteFramebuffer) {
    framebuffer.delete();
  }

  return target;
} // Reads pixels from a Framebuffer or Texture object to a dataUrl

function copyToDataUrl(source) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref3$sourceAttachmen = _ref3.sourceAttachment,
      sourceAttachment = _ref3$sourceAttachmen === void 0 ? 36064 : _ref3$sourceAttachmen,
      _ref3$targetMaxHeight = _ref3.targetMaxHeight,
      targetMaxHeight = _ref3$targetMaxHeight === void 0 ? Number.MAX_SAFE_INTEGER : _ref3$targetMaxHeight;

  var data = readPixelsToArray(source, {
    sourceAttachment: sourceAttachment
  }); // Scale down

  var width = source.width,
      height = source.height;

  while (height > targetMaxHeight) {
    var _scalePixels = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__webgl_utils__["g" /* scalePixels */])({
      data: data,
      width: width,
      height: height
    });

    data = _scalePixels.data;
    width = _scalePixels.width;
    height = _scalePixels.height;
  } // Flip to top down coordinate system


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__webgl_utils__["h" /* flipRows */])({
    data: data,
    width: width,
    height: height
  });
  /* global document */

  var canvas = document.createElement('canvas');
  canvas.width = width;
  canvas.height = height;
  var context = canvas.getContext('2d'); // Copy the pixels to a 2D canvas

  var imageData = context.createImageData(width, height);
  imageData.data.set(data);
  context.putImageData(imageData, 0, 0);
  return canvas.toDataURL();
} // Reads pixels from a Framebuffer or Texture object into an HTML Image

function copyToImage(source) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref4$sourceAttachmen = _ref4.sourceAttachment,
      sourceAttachment = _ref4$sourceAttachmen === void 0 ? 36064 : _ref4$sourceAttachmen,
      _ref4$targetImage = _ref4.targetImage,
      targetImage = _ref4$targetImage === void 0 ? null : _ref4$targetImage;

  /* global Image */
  var dataUrl = copyToDataUrl(source, {
    sourceAttachment: sourceAttachment
  });
  targetImage = targetImage || new Image();
  targetImage.src = dataUrl;
  return targetImage;
} // Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)
// eslint-disable-next-line complexity, max-statements

function copyToTexture(source, target) {
  var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref5$sourceX = _ref5.sourceX,
      sourceX = _ref5$sourceX === void 0 ? 0 : _ref5$sourceX,
      _ref5$sourceY = _ref5.sourceY,
      sourceY = _ref5$sourceY === void 0 ? 0 : _ref5$sourceY,
      targetX = _ref5.targetX,
      targetY = _ref5.targetY,
      targetZ = _ref5.targetZ,
      _ref5$targetMipmaplev = _ref5.targetMipmaplevel,
      targetMipmaplevel = _ref5$targetMipmaplev === void 0 ? 0 : _ref5$targetMipmaplev,
      _ref5$targetInternalF = _ref5.targetInternalFormat,
      targetInternalFormat = _ref5$targetInternalF === void 0 ? 6408 : _ref5$targetInternalF,
      width = _ref5.width,
      height = _ref5.height;

  var _getFramebuffer3 = getFramebuffer(source),
      framebuffer = _getFramebuffer3.framebuffer,
      deleteFramebuffer = _getFramebuffer3.deleteFramebuffer;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["g" /* assert */])(framebuffer);
  var gl = framebuffer.gl,
      handle = framebuffer.handle;
  var isSubCopy = typeof targetX !== 'undefined' || typeof targetY !== 'undefined' || typeof targetZ !== 'undefined';
  targetX = targetX || 0;
  targetY = targetY || 0;
  targetZ = targetZ || 0;
  var prevHandle = gl.bindFramebuffer(36160, handle); // TODO - support gl.readBuffer (WebGL2 only)
  // const prevBuffer = gl.readBuffer(attachment);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["g" /* assert */])(target);
  var texture = null;

  if (target instanceof __WEBPACK_IMPORTED_MODULE_2__webgl_texture__["a" /* default */]) {
    texture = target;
    width = Number.isFinite(width) ? width : texture.width;
    height = Number.isFinite(height) ? height : texture.height;
    texture.bind(0);
    target = texture.target;
  }

  if (!isSubCopy) {
    gl.copyTexImage2D(target, targetMipmaplevel, targetInternalFormat, sourceX, sourceY, width, height, 0
    /* border must be 0 */
    );
  } else {
    switch (target) {
      case 3553:
      case 34067:
        gl.copyTexSubImage2D(target, targetMipmaplevel, targetX, targetY, sourceX, sourceY, width, height);
        break;

      case 35866:
      case 32879:
        gl.copyTexSubImage3D(target, targetMipmaplevel, targetX, targetY, targetZ, sourceX, sourceY, width, height);
        break;

      default:
    }
  }

  if (texture) {
    texture.unbind();
  }

  gl.bindFramebuffer(36160, prevHandle || null);

  if (deleteFramebuffer) {
    framebuffer.delete();
  }

  return texture;
} // NOTE: WEBLG2 only
// Copies a rectangle of pixels between Framebuffer or Texture objects
// eslint-disable-next-line max-statements, complexity

function blit(source, target) {
  var _ref6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref6$sourceAttachmen = _ref6.sourceAttachment,
      sourceAttachment = _ref6$sourceAttachmen === void 0 ? 36064 : _ref6$sourceAttachmen,
      _ref6$sourceX = _ref6.sourceX0,
      sourceX0 = _ref6$sourceX === void 0 ? 0 : _ref6$sourceX,
      _ref6$sourceY = _ref6.sourceY0,
      sourceY0 = _ref6$sourceY === void 0 ? 0 : _ref6$sourceY,
      sourceX1 = _ref6.sourceX1,
      sourceY1 = _ref6.sourceY1,
      _ref6$targetX = _ref6.targetX0,
      targetX0 = _ref6$targetX === void 0 ? 0 : _ref6$targetX,
      _ref6$targetY = _ref6.targetY0,
      targetY0 = _ref6$targetY === void 0 ? 0 : _ref6$targetY,
      targetX1 = _ref6.targetX1,
      targetY1 = _ref6.targetY1,
      _ref6$color = _ref6.color,
      color = _ref6$color === void 0 ? true : _ref6$color,
      _ref6$depth = _ref6.depth,
      depth = _ref6$depth === void 0 ? false : _ref6$depth,
      _ref6$stencil = _ref6.stencil,
      stencil = _ref6$stencil === void 0 ? false : _ref6$stencil,
      _ref6$mask = _ref6.mask,
      mask = _ref6$mask === void 0 ? 0 : _ref6$mask,
      _ref6$filter = _ref6.filter,
      filter = _ref6$filter === void 0 ? 9728 : _ref6$filter;

  var _getFramebuffer4 = getFramebuffer(source),
      srcFramebuffer = _getFramebuffer4.framebuffer,
      deleteSrcFramebuffer = _getFramebuffer4.deleteFramebuffer;

  var _getFramebuffer5 = getFramebuffer(target),
      dstFramebuffer = _getFramebuffer5.framebuffer,
      deleteDstFramebuffer = _getFramebuffer5.deleteFramebuffer;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["g" /* assert */])(srcFramebuffer);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["g" /* assert */])(dstFramebuffer);
  var gl = dstFramebuffer.gl,
      handle = dstFramebuffer.handle,
      width = dstFramebuffer.width,
      height = dstFramebuffer.height,
      readBuffer = dstFramebuffer.readBuffer;
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__webgl_utils__["c" /* assertWebGL2Context */])(gl);

  if (!srcFramebuffer.handle && sourceAttachment === 36064) {
    sourceAttachment = 1028;
  }

  if (color) {
    mask |= 16384;
  }

  if (depth) {
    mask |= 256;
  }

  if (stencil) {
    mask |= 1024;
  }

  if (deleteSrcFramebuffer || deleteDstFramebuffer) {
    // Either source or destiantion was a texture object, which is wrapped in a Framebuffer objecgt as color attachment.
    // Overwrite the mask to `COLOR_BUFFER_BIT`
    if (mask & (256 | 1024)) {
      mask = 16384;
      __WEBPACK_IMPORTED_MODULE_3__utils__["a" /* log */].warn('Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT')();
    }
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["g" /* assert */])(mask);
  sourceX1 = sourceX1 === undefined ? srcFramebuffer.width : sourceX1;
  sourceY1 = sourceY1 === undefined ? srcFramebuffer.height : sourceY1;
  targetX1 = targetX1 === undefined ? width : targetX1;
  targetY1 = targetY1 === undefined ? height : targetY1;
  var prevDrawHandle = gl.bindFramebuffer(36009, handle);
  var prevReadHandle = gl.bindFramebuffer(36008, srcFramebuffer.handle);
  gl.readBuffer(sourceAttachment);
  gl.blitFramebuffer(sourceX0, sourceY0, sourceX1, sourceY1, targetX0, targetY0, targetX1, targetY1, mask, filter);
  gl.readBuffer(readBuffer);
  gl.bindFramebuffer(36008, prevReadHandle || null);
  gl.bindFramebuffer(36009, prevDrawHandle || null);

  if (deleteSrcFramebuffer) {
    srcFramebuffer.delete();
  }

  if (deleteDstFramebuffer) {
    dstFramebuffer.delete();
  }

  return dstFramebuffer;
} // Helper methods

function getFramebuffer(source) {
  if (!(source instanceof __WEBPACK_IMPORTED_MODULE_1__webgl_framebuffer__["a" /* default */])) {
    return {
      framebuffer: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__webgl_utils_texture_utils__["a" /* toFramebuffer */])(source),
      deleteFramebuffer: true
    };
  }

  return {
    framebuffer: source,
    deleteFramebuffer: false
  };
}

function getPixelArray(pixelArray, type, format, width, height) {
  if (pixelArray) {
    return pixelArray;
  } // Allocate pixel array if not already available, using supplied type


  type = type || 5121;
  var ArrayType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils_typed_array_utils__["b" /* getTypedArrayFromGLType */])(type, {
    clamped: false
  });
  var components = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__webgl_utils_format_utils__["a" /* glFormatToComponents */])(format); // TODO - check for composite type (components = 1).

  return new ArrayType(width * height * components);
}
//# sourceMappingURL=copy-and-blit.js.map

/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export RENDERBUFFER_FORMATS */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Renderbuffer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__resource__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_assert__ = __webpack_require__(5);








var _RENDERBUFFER_FORMATS;

/* eslint-disable no-inline-comments */


 // Define local GL constants to optimize minification

var GL_RENDERBUFFER = 0x8d41;
var GL_SAMPLES = 0x80a9;
var GL_RENDERBUFFER_WIDTH = 0x8d42;
var GL_RENDERBUFFER_HEIGHT = 0x8d43;
var GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8d44;
var GL_RENDERBUFFER_SAMPLES = 0x8cab; // Define local extension strings to optimize minification
// const SRGB = 'EXT_sRGB';
// const CB_FLOAT_WEBGL1 = 'WEBGL_color_buffer_float';

var CB_FLOAT_WEBGL2 = 'EXT_color_buffer_float'; // const CB_HALF_FLOAT_WEBGL1 = 'EXT_color_buffer_half_float';

var RENDERBUFFER_FORMATS = (_RENDERBUFFER_FORMATS = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33189, {}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33190, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 36012, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 36168, {}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 34041, {}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 35056, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 36013, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 32854, {}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 36194, {}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 32855, {}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33321, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33330, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33329, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33332, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33331, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33334, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33333, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33323, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33336, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33335, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33338, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33337, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33340, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33339, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 32849, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 32856, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 32857, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 36220, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 36238, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 36975, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 36214, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 36232, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 36226, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 36208, {
  gl2: true
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33325, {
  gl2: CB_FLOAT_WEBGL2
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33327, {
  gl2: CB_FLOAT_WEBGL2
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 34842, {
  gl2: CB_FLOAT_WEBGL2
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33326, {
  gl2: CB_FLOAT_WEBGL2
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 33328, {
  gl2: CB_FLOAT_WEBGL2
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 34836, {
  gl2: CB_FLOAT_WEBGL2
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_RENDERBUFFER_FORMATS, 35898, {
  gl2: CB_FLOAT_WEBGL2
}), _RENDERBUFFER_FORMATS);

function isFormatSupported(gl, format, formats) {
  var info = formats[format];

  if (!info) {
    return false;
  }

  var value = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__webgl_utils__["b" /* isWebGL2 */])(gl) ? info.gl2 || info.gl1 : info.gl1;

  if (typeof value === 'string') {
    return gl.getExtension(value);
  }

  return value;
}

var Renderbuffer =
/*#__PURE__*/
function (_Resource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Renderbuffer, _Resource);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Renderbuffer, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          format = _ref.format;

      return !format || isFormatSupported(gl, format, RENDERBUFFER_FORMATS);
    }
  }, {
    key: "getSamplesForFormat",
    value: function getSamplesForFormat(gl, _ref2) {
      var format = _ref2.format;
      // Polyfilled to return [0] under WebGL1
      return gl.getInternalformatParameter(GL_RENDERBUFFER, format, GL_SAMPLES);
    }
  }]);

  function Renderbuffer(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Renderbuffer);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Renderbuffer).call(this, gl, opts));

    _this.initialize(opts);

    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));
    return _this;
  } // Creates and initializes a renderbuffer object's data store


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Renderbuffer, [{
    key: "initialize",
    value: function initialize(_ref3) {
      var format = _ref3.format,
          _ref3$width = _ref3.width,
          width = _ref3$width === void 0 ? 1 : _ref3$width,
          _ref3$height = _ref3.height,
          height = _ref3$height === void 0 ? 1 : _ref3$height,
          _ref3$samples = _ref3.samples,
          samples = _ref3$samples === void 0 ? 0 : _ref3$samples;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__utils_assert__["a" /* default */])(format, 'Needs format');
      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);

      if (samples !== 0 && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__webgl_utils__["b" /* isWebGL2 */])(this.gl)) {
        this.gl.renderbufferStorageMultisample(GL_RENDERBUFFER, samples, format, width, height);
      } else {
        this.gl.renderbufferStorage(GL_RENDERBUFFER, format, width, height);
      } // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);


      this.format = format;
      this.width = width;
      this.height = height;
      this.samples = samples;
      return this;
    }
  }, {
    key: "resize",
    value: function resize(_ref4) {
      var width = _ref4.width,
          height = _ref4.height;

      // Don't resize if width/height haven't changed
      if (width !== this.width || height !== this.height) {
        return this.initialize({
          width: width,
          height: height,
          format: this.format,
          samples: this.samples
        });
      }

      return this;
    } // PRIVATE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createRenderbuffer();
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteRenderbuffer(this.handle);
    }
  }, {
    key: "_bindHandle",
    value: function _bindHandle(handle) {
      this.gl.bindRenderbuffer(GL_RENDERBUFFER, handle);
    }
  }, {
    key: "_syncHandle",
    value: function _syncHandle(handle) {
      this.format = this.getParameter(GL_RENDERBUFFER_INTERNAL_FORMAT);
      this.width = this.getParameter(GL_RENDERBUFFER_WIDTH);
      this.height = this.getParameter(GL_RENDERBUFFER_HEIGHT);
      this.samples = this.getParameter(GL_RENDERBUFFER_SAMPLES);
    } // @param {Boolean} opt.autobind=true - method call will bind/unbind object
    // @returns {GLenum|GLint} - depends on pname

  }, {
    key: "_getParameter",
    value: function _getParameter(pname) {
      this.gl.bindRenderbuffer(GL_RENDERBUFFER, this.handle);
      var value = this.gl.getRenderbufferParameter(GL_RENDERBUFFER, pname); // this.gl.bindRenderbuffer(GL_RENDERBUFFER, null);

      return value;
    }
  }]);

  return Renderbuffer;
}(__WEBPACK_IMPORTED_MODULE_8__resource__["a" /* default */]);


//# sourceMappingURL=renderbuffer.js.map

/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Shader */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VertexShader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return FragmentShader; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__resource__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_assert__ = __webpack_require__(5);










var ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';
var GL_FRAGMENT_SHADER = 0x8b30;
var GL_VERTEX_SHADER = 0x8b31;
var GL_COMPILE_STATUS = 0x8b81;
var GL_SHADER_TYPE = 0x8b4f; // For now this is an internal class

var Shader =
/*#__PURE__*/
function (_Resource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Shader, _Resource);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Shader, null, [{
    key: "getTypeName",
    value: function getTypeName(shaderType) {
      switch (shaderType) {
        case GL_VERTEX_SHADER:
          return 'vertex-shader';

        case GL_FRAGMENT_SHADER:
          return 'fragment-shader';

        default:
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_assert__["a" /* default */])(false);
          return 'unknown';
      }
    }
    /* eslint-disable max-statements */

  }]);

  function Shader(gl, props) {
    var _this;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Shader);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__webgl_utils__["a" /* assertWebGLContext */])(gl); // Validate arguments

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_assert__["a" /* default */])(typeof props.source === 'string', ERR_SOURCE); // Deduce an id, from shader source, or supplied id, or shader type

    var id = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__webgl_utils__["i" /* getShaderName */])(props.source, null) || props.id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils__["b" /* uid */])("unnamed ".concat(Shader.getTypeName(props.shaderType)));
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Shader).call(this, gl, {
      id: id
    }));
    _this.shaderType = props.shaderType;
    _this.source = props.source;

    _this.initialize(props);

    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Shader, [{
    key: "initialize",
    value: function initialize(_ref) {
      var source = _ref.source;
      var shaderName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__webgl_utils__["i" /* getShaderName */])(source, null);

      if (shaderName) {
        this.id = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils__["b" /* uid */])(shaderName);
      }

      this._compile(source);
    } // Accessors

  }, {
    key: "getParameter",
    value: function getParameter(pname) {
      return this.gl.getShaderParameter(this.handle, pname);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.getTypeName(this.shaderType), ":").concat(this.id);
    }
  }, {
    key: "getName",
    value: function getName() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__webgl_utils__["i" /* getShaderName */])(this.source) || 'unnamed-shader';
    }
  }, {
    key: "getSource",
    value: function getSource() {
      return this.gl.getShaderSource(this.handle);
    } // Debug method - Returns translated source if available

  }, {
    key: "getTranslatedSource",
    value: function getTranslatedSource() {
      var extension = this.gl.getExtension('WEBGL_debug_shaders');
      return extension ? extension.getTranslatedShaderSource(this.handle) : 'No translated source available. WEBGL_debug_shaders not implemented';
    } // PRIVATE METHODS

  }, {
    key: "_compile",
    value: function _compile() {
      this.gl.shaderSource(this.handle, this.source);
      this.gl.compileShader(this.handle); // TODO - For performance reasons, avoid checking shader compilation errors on production?
      // TODO - Load log even when no error reported, to catch warnings?
      // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings

      var compileStatus = this.getParameter(GL_COMPILE_STATUS);

      if (!compileStatus) {
        var infoLog = this.gl.getShaderInfoLog(this.handle);

        var _parseGLSLCompilerErr = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__webgl_utils__["j" /* parseGLSLCompilerError */])(infoLog, this.source, this.shaderType, this.id),
            shaderName = _parseGLSLCompilerErr.shaderName,
            errors = _parseGLSLCompilerErr.errors,
            warnings = _parseGLSLCompilerErr.warnings;

        __WEBPACK_IMPORTED_MODULE_7__utils__["a" /* log */].error("GLSL compilation errors in ".concat(shaderName, "\n").concat(errors))();
        __WEBPACK_IMPORTED_MODULE_7__utils__["a" /* log */].warn("GLSL compilation warnings in ".concat(shaderName, "\n").concat(warnings))();
        throw new Error("GLSL compilation errors in ".concat(shaderName));
      }
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteShader(this.handle);
    }
  }, {
    key: "_getOptsFromHandle",
    value: function _getOptsFromHandle() {
      return {
        type: this.getParameter(GL_SHADER_TYPE),
        source: this.getSource()
      };
    }
  }]);

  return Shader;
}(__WEBPACK_IMPORTED_MODULE_5__resource__["a" /* default */]);
var VertexShader =
/*#__PURE__*/
function (_Shader) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(VertexShader, _Shader);

  function VertexShader(gl, props) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, VertexShader);

    // DEPRECATED: Support old constructor signature: VertexShader(gl, source)
    if (typeof props === 'string') {
      __WEBPACK_IMPORTED_MODULE_7__utils__["a" /* log */].deprecated('new FragmentShader(gl, source)', 'new FragmentShader(gl, {source})', '6.1');
      props = {
        source: props
      };
    }

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(VertexShader).call(this, gl, Object.assign({}, props, {
      shaderType: GL_VERTEX_SHADER
    })));
  } // PRIVATE METHODS


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(VertexShader, [{
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createShader(GL_VERTEX_SHADER);
    }
  }]);

  return VertexShader;
}(Shader);
var FragmentShader =
/*#__PURE__*/
function (_Shader2) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(FragmentShader, _Shader2);

  function FragmentShader(gl, props) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, FragmentShader);

    // DEPRECATED: Support old constructor signature: FragmentShader(gl, source)
    if (typeof props === 'string') {
      __WEBPACK_IMPORTED_MODULE_7__utils__["a" /* log */].deprecated('new FragmentShader(gl, source)', 'new FragmentShader(gl, {source})', '6.1');
      props = {
        source: props
      };
    }

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(FragmentShader).call(this, gl, Object.assign({}, props, {
      shaderType: GL_FRAGMENT_SHADER
    })));
  } // PRIVATE METHODS


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(FragmentShader, [{
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createShader(GL_FRAGMENT_SHADER);
    }
  }]);

  return FragmentShader;
}(Shader);
//# sourceMappingURL=shader.js.map

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MathArray; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__common__ = __webpack_require__(13);






function _extendableBuiltin(cls) {
  function ExtendableBuiltin() {
    var instance = Reflect.construct(cls, Array.from(arguments));
    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    return instance;
  }

  ExtendableBuiltin.prototype = Object.create(cls.prototype, {
    constructor: {
      value: cls,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ExtendableBuiltin, cls);
  } else {
    ExtendableBuiltin.__proto__ = cls;
  }

  return ExtendableBuiltin;
}



var MathArray = function (_extendableBuiltin2) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(MathArray, _extendableBuiltin2);

  function MathArray() {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, MathArray);

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(MathArray).apply(this, arguments));
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(MathArray, [{
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this).check();
    }
  }, {
    key: "copy",
    value: function copy(array) {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = array[i];
      }

      return this.check();
    }
  }, {
    key: "set",
    value: function set() {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = (i < 0 || arguments.length <= i ? undefined : arguments[i]) || 0;
      }

      return this.check();
    }
  }, {
    key: "fromArray",
    value: function fromArray(array) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = array[i + offset];
      }

      return this.check();
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.formatString(__WEBPACK_IMPORTED_MODULE_5__common__["e" /* config */]);
    }
  }, {
    key: "formatString",
    value: function formatString(opts) {
      var string = '';

      for (var i = 0; i < this.ELEMENTS; ++i) {
        string += (i > 0 ? ', ' : '') + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__common__["f" /* formatValue */])(this[i], opts);
      }

      return "".concat(opts.printTypes ? this.constructor.name : '', "[").concat(string, "]");
    }
  }, {
    key: "toArray",
    value: function toArray() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      for (var i = 0; i < this.ELEMENTS; ++i) {
        array[offset + i] = this[i];
      }

      return array;
    }
  }, {
    key: "toFloat32Array",
    value: function toFloat32Array() {
      return new Float32Array(this);
    }
  }, {
    key: "equals",
    value: function equals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }

      for (var i = 0; i < this.ELEMENTS; ++i) {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__common__["b" /* equals */])(this[i], array[i])) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "exactEquals",
    value: function exactEquals(array) {
      if (!array || this.length !== array.length) {
        return false;
      }

      for (var i = 0; i < this.ELEMENTS; ++i) {
        if (this[i] !== array[i]) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "negate",
    value: function negate() {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = -this[i];
      }

      return this.check();
    }
  }, {
    key: "inverse",
    value: function inverse() {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = 1 / this[i];
      }

      return this.check();
    }
  }, {
    key: "lerp",
    value: function lerp(a, b, t) {
      if (t === undefined) {
        t = b;
        b = a;
        a = this;
      }

      for (var i = 0; i < this.ELEMENTS; ++i) {
        var ai = a[i];
        this[i] = ai + t * (b[i] - ai);
      }

      return this.check();
    }
  }, {
    key: "min",
    value: function min(vector) {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = Math.min(vector[i], this[i]);
      }

      return this.check();
    }
  }, {
    key: "max",
    value: function max(vector) {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = Math.max(vector[i], this[i]);
      }

      return this.check();
    }
  }, {
    key: "clamp",
    value: function clamp(minVector, maxVector) {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);
      }

      return this.check();
    }
  }, {
    key: "validate",
    value: function validate() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
      var valid = array && array.length === this.ELEMENTS;

      for (var i = 0; i < this.ELEMENTS; ++i) {
        valid = valid && Number.isFinite(array[i]);
      }

      return valid;
    }
  }, {
    key: "check",
    value: function check() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;

      if (__WEBPACK_IMPORTED_MODULE_5__common__["e" /* config */].debug && !this.validate(array)) {
        throw new Error("math.gl: ".concat(this.constructor.name, " some fields set to invalid numbers'"));
      }

      return this;
    }
  }, {
    key: "sub",
    value: function sub(a) {
      return this.subtract(a);
    }
  }, {
    key: "setScalar",
    value: function setScalar(a) {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = a;
      }

      return this.check();
    }
  }, {
    key: "addScalar",
    value: function addScalar(a) {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] += a;
      }

      return this.check();
    }
  }, {
    key: "subScalar",
    value: function subScalar(a) {
      return this.addScalar(-a);
    }
  }, {
    key: "multiplyScalar",
    value: function multiplyScalar(a) {
      return this.scale(a);
    }
  }, {
    key: "divideScalar",
    value: function divideScalar(a) {
      return this.scale(1 / a);
    }
  }, {
    key: "clampScalar",
    value: function clampScalar(min, max) {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = Math.min(Math.max(this[i], min), max);
      }

      return this.check();
    }
  }]);

  return MathArray;
}(_extendableBuiltin(Array));


//# sourceMappingURL=math-array.js.map

/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const polyhedraNames = [
  [
    "tetrahedron",
    "tetrahedron"
  ],
  [
    "truncated tetrahedron",
    "triakis tetrahedron"
  ],
  [
    "octahemioctahedron",
    "octahemioctacron"
  ],
  [
    "tetrahemihexahedron",
    "tetrahemihexacron"
  ],
  [
    "octahedron",
    "cube"
  ],
  [
    "cube",
    "octahedron"
  ],
  [
    "cuboctahedron",
    "rhombic dodecahedron"
  ],
  [
    "truncated octahedron",
    "tetrakis hexahedron"
  ],
  [
    "truncated cube",
    "triakis octahedron"
  ],
  [
    "small rhombicuboctahedron",
    "deltoidal icositetrahedron"
  ],
  [
    "great rhombicuboctahedron",
    "disdyakis dodecahedron"
  ],
  [
    "snub cube",
    "pentagonal icositetrahedron"
  ],
  [
    "small cubicuboctahedron",
    "small hexacronic icositetrahedron"
  ],
  [
    "great cubicuboctahedron",
    "great hexacronic icositetrahedron"
  ],
  [
    "cubohemioctahedron",
    "hexahemioctacron"
  ],
  [
    "cubitruncated cuboctahedron",
    "tetradyakis hexahedron"
  ],
  [
    "nonconvex great rhombicuboctahedron",
    "great deltoidal icositetrahedron"
  ],
  [
    "small rhombihexahedron",
    "small rhombihexacron"
  ],
  [
    "stellated truncated hexahedron",
    "great triakis octahedron"
  ],
  [
    "great truncated cuboctahedron",
    "great disdyakis dodecahedron"
  ],
  [
    "great rhombihexahedron",
    "great rhombihexacron"
  ],
  [
    "icosahedron",
    "dodecahedron"
  ],
  [
    "dodecahedron",
    "icosahedron"
  ],
  [
    "icosidodecahedron",
    "rhombic triacontahedron"
  ],
  [
    "truncated icosahedron",
    "pentakis dodecahedron"
  ],
  [
    "truncated dodecahedron",
    "triakis icosahedron"
  ],
  [
    "small rhombicosidodecahedron",
    "deltoidal hexecontahedron"
  ],
  [
    "great rhombicosidodecahedron",
    "disdyakis triacontahedron"
  ],
  [
    "snub dodecahedron",
    "pentagonal hexecontahedron"
  ],
  [
    "small ditrigonal icosidodecahedron",
    "small triambic icosahedron"
  ],
  [
    "small icosicosidodecahedron",
    "small icosacronic hexecontahedron"
  ],
  [
    "small snub icosicosidodecahedron",
    "small hexagonal hexecontahedron"
  ],
  [
    "small dodecicosidodecahedron",
    "small dodecacronic hexecontahedron"
  ],
  [
    "small stellated dodecahedron",
    "great dodecahedron"
  ],
  [
    "great dodecahedron",
    "small stellated dodecahedron"
  ],
  [
    "dodecadodecahedron",
    "medial rhombic triacontahedron"
  ],
  [
    "truncated great dodecahedron",
    "small stellapentakis dodecahedron"
  ],
  [
    "rhombidodecadodecahedron",
    "medial deltoidal hexecontahedron"
  ],
  [
    "small rhombidodecahedron",
    "small rhombidodecacron"
  ],
  [
    "snub dodecadodecahedron",
    "medial pentagonal hexecontahedron"
  ],
  [
    "ditrigonal dodecadodecahedron",
    "medial triambic icosahedron"
  ],
  [
    "great ditrigonal dodecicosidodecahedron",
    "great ditrigonal dodecacronic hexecontahedron"
  ],
  [
    "small ditrigonal dodecicosidodecahedron",
    "small ditrigonal dodecacronic hexecontahedron"
  ],
  [
    "icosidodecadodecahedron",
    "medial icosacronic hexecontahedron"
  ],
  [
    "icositruncated dodecadodecahedron",
    "tridyakis icosahedron"
  ],
  [
    "snub icosidodecadodecahedron",
    "medial hexagonal hexecontahedron"
  ],
  [
    "great ditrigonal icosidodecahedron",
    "great triambic icosahedron"
  ],
  [
    "great icosicosidodecahedron",
    "great icosacronic hexecontahedron"
  ],
  [
    "small icosihemidodecahedron",
    "small icosihemidodecacron"
  ],
  [
    "small dodecicosahedron",
    "small dodecicosacron"
  ],
  [
    "small dodecahemidodecahedron",
    "small dodecahemidodecacron"
  ],
  [
    "great stellated dodecahedron",
    "great icosahedron"
  ],
  [
    "great icosahedron",
    "great stellated dodecahedron"
  ],
  [
    "great icosidodecahedron",
    "great rhombic triacontahedron"
  ],
  [
    "truncated great icosahedron",
    "great stellapentakis dodecahedron"
  ],
  [
    "rhombicosahedron",
    "rhombicosacron"
  ],
  [
    "great snub icosidodecahedron",
    "great pentagonal hexecontahedron"
  ],
  [
    "small stellated truncated dodecahedron",
    "great pentakis dodecahedron"
  ],
  [
    "truncated dodecadodecahedron",
    "medial disdyakis triacontahedron"
  ],
  [
    "inverted snub dodecadodecahedron",
    "medial inverted pentagonal hexecontahedron"
  ],
  [
    "great dodecicosidodecahedron",
    "great dodecacronic hexecontahedron"
  ],
  [
    "small dodecahemicosahedron",
    "small dodecahemicosacron"
  ],
  [
    "great dodecicosahedron",
    "great dodecicosacron"
  ],
  [
    "great snub dodecicosidodecahedron",
    "great hexagonal hexecontahedron"
  ],
  [
    "great dodecahemicosahedron",
    "great dodecahemicosacron"
  ],
  [
    "great stellated truncated dodecahedron",
    "great triakis icosahedron"
  ],
  [
    "nonconvex great rhombicosidodecahedron",
    "great deltoidal hexecontahedron"
  ],
  [
    "great truncated icosidodecahedron",
    "great disdyakis triacontahedron"
  ],
  [
    "great inverted snub icosidodecahedron",
    "great inverted pentagonal hexecontahedron"
  ],
  [
    "great dodecahemidodecahedron",
    "great dodecahemidodecacron"
  ],
  [
    "great icosihemidodecahedron",
    "great icosihemidodecacron"
  ],
  [
    "small retrosnub icosicosidodecahedron",
    "small hexagrammic hexecontahedron"
  ],
  [
    "great rhombidodecahedron",
    "great rhombidodecacron"
  ],
  [
    "great retrosnub icosidodecahedron",
    "great pentagrammic hexecontahedron"
  ],
  [
    "great dirhombicosidodecahedron",
    "great dirhombicosidodecacron"
  ]
];
/* harmony export (immutable) */ __webpack_exports__["a"] = polyhedraNames;


const polyhedraRaw = [
  [
    [
      1,
      4,
      4,
      6,
      3
    ],
    [
      1,
      3,
      1,
      2,
      1,
      3,
      1
    ],
    [
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.9428090415820634,
      -0.3333333333333333,
      -0.4714045207910317,
      0.816496580927726,
      -0.816496580927726
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      4,
      6,
      3
    ],
    [
      1,
      2,
      3,
      3,
      2,
      0,
      1,
      3,
      0,
      2,
      1,
      0
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      3,
      1,
      0,
      3,
      2,
      1
    ],
    [
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      3,
      0,
      3,
      1,
      1,
      3,
      2
    ]
  ],
  [
    [
      2,
      12,
      8,
      18,
      3
    ],
    [
      2,
      2,
      1,
      3,
      1,
      3,
      1
    ],
    [
      1,
      6,
      1,
      6,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.7713892158398701,
      0.6363636363636364,
      -0.6428243465332251,
      0.4264014327112209,
      0.29998469504883835,
      -0.7106690545187014,
      0.899954085146515,
      -0.09090909090909091,
      -0.9856639980176117,
      0.14213381090374028,
      -0.51425947722658,
      0.8528028654224418,
      -0.04285495643554833,
      -0.994936676326182,
      0.5571144336621283,
      -0.8181818181818182,
      0.25712973861329,
      -0.45454545454545453,
      -0.6856793029687733,
      -0.5685352436149611,
      0.08570991287109667
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      11,
      9,
      12,
      13,
      9,
      14,
      15,
      9,
      16,
      11,
      17,
      18,
      13,
      19,
      20,
      21,
      19,
      22,
      21,
      17
    ],
    [
      1,
      2,
      3,
      3,
      4,
      0,
      6,
      5,
      0,
      7,
      1,
      0,
      1,
      8,
      9,
      2,
      6,
      10,
      2,
      9,
      5,
      3,
      10,
      11,
      11,
      9,
      4,
      8,
      6,
      4,
      11,
      7,
      5,
      10,
      8,
      7
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      3,
      2,
      1,
      3,
      5,
      0,
      4,
      6,
      1,
      0,
      6,
      4,
      1,
      7,
      3,
      6,
      5,
      3,
      6,
      0,
      5,
      7,
      1,
      6,
      6,
      3,
      7
    ],
    [
      6,
      1,
      6,
      1,
      3,
      1,
      6,
      1,
      3,
      1,
      3,
      1,
      6,
      1,
      3,
      1
    ],
    [
      0,
      1,
      4,
      9,
      6,
      2,
      0,
      2,
      5,
      10,
      7,
      3,
      0,
      3,
      1,
      1,
      3,
      7,
      11,
      8,
      4,
      2,
      6,
      5,
      4,
      8,
      9,
      5,
      6,
      9,
      8,
      11,
      10,
      7,
      10,
      11
    ]
  ],
  [
    [
      3,
      12,
      12,
      24,
      4
    ],
    [
      2,
      3,
      2,
      3,
      1,
      3,
      1
    ],
    [
      1,
      6,
      1,
      3,
      2,
      6,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.8660254037844386,
      0.5,
      -0.8660254037844386,
      -0.28867513459481287,
      0.816496580927726,
      0.28867513459481287,
      -0.816496580927726,
      -0.5,
      0.5773502691896257,
      -0.5773502691896257,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      0,
      3,
      5,
      6,
      3,
      7,
      8,
      3,
      2,
      0,
      9,
      10,
      6,
      0,
      11,
      8,
      0,
      4,
      0,
      9,
      5,
      6,
      9,
      7,
      8,
      9,
      0,
      0,
      12
    ],
    [
      1,
      2,
      3,
      4,
      4,
      6,
      5,
      0,
      8,
      7,
      3,
      0,
      2,
      6,
      9,
      0,
      10,
      7,
      1,
      0,
      1,
      6,
      10,
      11,
      1,
      9,
      3,
      5,
      2,
      8,
      4,
      10,
      2,
      11,
      9,
      7,
      3,
      6,
      8,
      11,
      4,
      11,
      5,
      7,
      10,
      9,
      8,
      5
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      4,
      3,
      2,
      5,
      7,
      10,
      0,
      4,
      8,
      7,
      5,
      6,
      4,
      9,
      7,
      0,
      11,
      4,
      6,
      8,
      4,
      11,
      2,
      2,
      10,
      7,
      9,
      2,
      11,
      0,
      10
    ],
    [
      6,
      1,
      3,
      2,
      6,
      1,
      3,
      1,
      6,
      1,
      3,
      2,
      3,
      1,
      6,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2
    ],
    [
      0,
      1,
      5,
      11,
      8,
      2,
      0,
      2,
      3,
      0,
      3,
      9,
      11,
      10,
      4,
      0,
      4,
      1,
      1,
      4,
      7,
      8,
      9,
      6,
      1,
      6,
      5,
      2,
      8,
      7,
      2,
      7,
      10,
      5,
      6,
      3,
      3,
      6,
      9,
      4,
      10,
      7,
      5,
      10,
      11,
      8,
      11,
      9
    ]
  ],
  [
    [
      4,
      6,
      7,
      12,
      4
    ],
    [
      2,
      3,
      2,
      3,
      1,
      2,
      1
    ],
    [
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      1
    ],
    [
      0,
      1,
      -1
    ],
    [
      0,
      0,
      1,
      1,
      0,
      0,
      2,
      0,
      0,
      0,
      1,
      0,
      0,
      2,
      0,
      0,
      0,
      2
    ],
    [
      1,
      2,
      3,
      4,
      4,
      3,
      5,
      0,
      5,
      4,
      3,
      0,
      2,
      1,
      5,
      0,
      5,
      2,
      1,
      0,
      1,
      3,
      4,
      2
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      4,
      1,
      0,
      4,
      5,
      2,
      1,
      6,
      4,
      3,
      2,
      5,
      2,
      6,
      0
    ],
    [
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      2,
      3,
      1
    ],
    [
      0,
      1,
      5,
      2,
      0,
      2,
      3,
      0,
      3,
      5,
      4,
      0,
      4,
      1,
      1,
      4,
      2,
      3,
      1,
      3,
      5,
      2,
      5,
      4
    ]
  ],
  [
    [
      5,
      6,
      8,
      12,
      4
    ],
    [
      1,
      4,
      1,
      2,
      1,
      3,
      1
    ],
    [
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      -1
    ],
    [
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      1,
      0,
      2,
      0,
      0,
      0,
      2,
      0,
      0,
      0,
      2
    ],
    [
      1,
      2,
      3,
      4,
      4,
      5,
      2,
      0,
      1,
      5,
      3,
      0,
      2,
      5,
      4,
      0,
      3,
      5,
      1,
      0,
      1,
      4,
      3,
      2
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      5,
      6,
      1,
      0,
      6,
      7,
      2,
      1,
      7,
      4,
      3,
      2,
      4,
      7,
      6,
      5
    ],
    [
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      3,
      0,
      3,
      4,
      0,
      4,
      1,
      1,
      4,
      5,
      1,
      5,
      2,
      2,
      5,
      3,
      3,
      5,
      4
    ]
  ],
  [
    [
      6,
      8,
      6,
      12,
      3
    ],
    [
      1,
      3,
      1,
      2,
      1,
      4,
      1
    ],
    [
      1,
      4,
      1,
      4,
      1,
      4,
      1
    ],
    [
      0,
      1,
      0.9428090415820634,
      0.3333333333333333,
      -0.4714045207910317,
      0.816496580927726,
      -0.816496580927726,
      0.4714045207910317,
      -0.3333333333333333,
      -0.9428090415820634,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      4,
      6,
      3,
      7,
      5,
      8,
      7,
      6,
      8,
      9,
      0,
      8,
      0,
      0,
      10
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      4,
      6,
      0,
      6,
      5,
      0,
      1,
      7,
      2,
      1,
      3,
      7,
      2,
      7,
      3,
      5,
      6,
      4
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      4,
      0,
      2,
      5,
      3,
      4,
      5,
      1,
      5,
      4,
      3
    ],
    [
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1
    ],
    [
      0,
      1,
      4,
      2,
      0,
      2,
      6,
      3,
      0,
      3,
      5,
      1,
      1,
      5,
      7,
      4,
      2,
      4,
      7,
      6,
      3,
      6,
      7,
      5
    ]
  ],
  [
    [
      7,
      12,
      14,
      24,
      4
    ],
    [
      1,
      2,
      1,
      3,
      1,
      4,
      1
    ],
    [
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1
    ],
    [
      0,
      1,
      0.8660254037844386,
      0.5,
      0.28867513459481287,
      0.816496580927726,
      -0.8660254037844386,
      -0.28867513459481287,
      -0.816496580927726,
      -0.5,
      0.5773502691896257,
      -0.5773502691896257,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      0,
      3,
      7,
      8,
      3,
      2,
      0,
      9,
      10,
      8,
      0,
      11,
      5,
      0,
      4,
      5,
      9,
      6,
      0,
      9,
      7,
      8,
      9,
      0,
      0,
      12
    ],
    [
      1,
      2,
      3,
      4,
      6,
      5,
      2,
      0,
      1,
      8,
      7,
      0,
      7,
      9,
      4,
      0,
      3,
      10,
      6,
      0,
      1,
      6,
      11,
      8,
      1,
      4,
      10,
      5,
      2,
      8,
      9,
      3,
      2,
      5,
      11,
      7,
      3,
      7,
      11,
      10,
      4,
      9,
      11,
      6,
      10,
      9,
      8,
      5
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      5,
      6,
      1,
      0,
      7,
      8,
      2,
      1,
      8,
      9,
      3,
      2,
      4,
      10,
      11,
      5,
      3,
      9,
      10,
      4,
      6,
      12,
      7,
      1,
      5,
      11,
      12,
      6,
      7,
      12,
      13,
      8,
      8,
      13,
      10,
      9,
      13,
      12,
      11,
      10
    ],
    [
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      7,
      3,
      0,
      3,
      4,
      0,
      4,
      6,
      1,
      1,
      6,
      5,
      1,
      5,
      8,
      2,
      2,
      8,
      7,
      3,
      7,
      9,
      3,
      9,
      10,
      4,
      4,
      10,
      6,
      5,
      6,
      10,
      11,
      5,
      11,
      8,
      7,
      8,
      11,
      9,
      9,
      11,
      10
    ]
  ],
  [
    [
      8,
      24,
      14,
      36,
      3
    ],
    [
      2,
      2,
      1,
      4,
      1,
      3,
      1
    ],
    [
      1,
      6,
      1,
      6,
      1,
      4,
      1
    ],
    [
      0,
      1,
      0.6,
      0.8,
      -0.4,
      0.4472135954999579,
      -0.06666666666666667,
      -0.5962847939999439,
      0.4,
      0.5333333333333333,
      -0.8666666666666667,
      0.29814239699997197,
      -0.2,
      0.8944271909999159,
      -0.5333333333333333,
      -0.7453559924999299,
      0.9333333333333333,
      0.2,
      0.6666666666666666,
      -0.6666666666666666,
      0.7453559924999299,
      -0.9333333333333333,
      -0.29814239699997197,
      -0.8944271909999159,
      0.8666666666666667,
      0.5962847939999439,
      -0.6,
      -0.8,
      -0.4472135954999579,
      0.06666666666666667,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      3,
      5,
      8,
      9,
      7,
      2,
      10,
      11,
      8,
      12,
      13,
      8,
      14,
      15,
      8,
      16,
      11,
      12,
      8,
      13,
      17,
      18,
      15,
      0,
      19,
      20,
      0,
      21,
      22,
      17,
      4,
      23,
      12,
      9,
      20,
      4,
      24,
      22,
      4,
      17,
      23,
      4,
      14,
      25,
      26,
      27,
      28,
      4,
      29,
      25,
      27,
      8,
      28,
      27,
      26,
      0,
      27,
      0,
      0,
      30
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      8,
      5,
      0,
      1,
      9,
      10,
      1,
      3,
      11,
      2,
      12,
      13,
      2,
      10,
      12,
      3,
      13,
      14,
      16,
      15,
      4,
      15,
      7,
      4,
      17,
      16,
      5,
      7,
      18,
      6,
      19,
      8,
      6,
      19,
      17,
      8,
      9,
      20,
      10,
      9,
      11,
      21,
      11,
      14,
      21,
      12,
      20,
      22,
      13,
      22,
      14,
      23,
      18,
      15,
      17,
      23,
      16,
      23,
      19,
      18,
      20,
      21,
      22
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      5,
      3,
      4,
      7,
      1,
      0,
      8,
      4,
      1,
      9,
      5,
      10,
      6,
      3,
      8,
      0,
      6,
      11,
      3,
      5,
      8,
      7,
      4,
      9,
      1,
      7,
      12,
      5,
      9,
      10,
      8,
      6,
      3,
      11,
      10,
      5,
      12,
      11,
      8,
      13,
      7,
      7,
      12,
      9,
      13,
      8,
      10,
      12,
      10,
      11,
      12,
      7,
      13,
      10,
      12,
      13
    ],
    [
      6,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      1
    ],
    [
      0,
      1,
      4,
      10,
      7,
      2,
      0,
      2,
      6,
      13,
      8,
      3,
      0,
      3,
      5,
      1,
      1,
      5,
      11,
      16,
      9,
      4,
      2,
      7,
      12,
      6,
      3,
      8,
      14,
      17,
      11,
      5,
      4,
      9,
      15,
      10,
      6,
      12,
      18,
      22,
      19,
      13,
      7,
      10,
      15,
      20,
      18,
      12,
      8,
      13,
      19,
      14,
      9,
      16,
      21,
      23,
      20,
      15,
      11,
      17,
      21,
      16,
      14,
      19,
      22,
      23,
      21,
      17,
      18,
      20,
      23,
      22
    ]
  ],
  [
    [
      9,
      24,
      14,
      36,
      3
    ],
    [
      2,
      2,
      1,
      3,
      1,
      4,
      1
    ],
    [
      1,
      8,
      1,
      8,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.5395042867796359,
      0.8419828528814565,
      -0.46049571322036414,
      0.28108463771482023,
      0.2466110679661834,
      -0.47984149113033364,
      0.46049571322036414,
      -0.865123928305091,
      0.19875685341551338,
      -0.5722307094916386,
      0.678598344545847,
      0.13487607169490898,
      -0.8773551979613604,
      0.9768589245763655,
      -0.07900857355927175,
      0.7302478566101821,
      0.07900857355927175,
      -0.9768589245763655,
      -0.19875685341551338,
      -0.26975214338981796,
      0.9596829822606673,
      -0.9596829822606673,
      0.26975214338981796,
      0.865123928305091,
      -0.7302478566101821,
      -0.678598344545847,
      -0.8419828528814565,
      -0.28108463771482023,
      -0.13487607169490898,
      0.8773551979613604,
      0.5722307094916386,
      -0.5395042867796359,
      -0.2466110679661834,
      0.47984149113033364,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      3,
      5,
      8,
      9,
      10,
      8,
      11,
      12,
      8,
      13,
      14,
      8,
      15,
      10,
      16,
      17,
      12,
      18,
      19,
      20,
      18,
      21,
      22,
      18,
      21,
      23,
      18,
      24,
      23,
      16,
      25,
      20,
      4,
      24,
      22,
      16,
      26,
      27,
      16,
      28,
      29,
      4,
      30,
      31,
      4,
      32,
      27,
      4,
      8,
      29,
      28,
      33,
      0,
      28,
      34,
      35,
      28,
      0,
      0,
      36
    ],
    [
      1,
      2,
      3,
      3,
      4,
      0,
      6,
      5,
      0,
      7,
      1,
      0,
      1,
      8,
      9,
      2,
      6,
      10,
      2,
      11,
      5,
      3,
      12,
      13,
      14,
      9,
      4,
      8,
      15,
      4,
      17,
      16,
      5,
      15,
      18,
      6,
      16,
      13,
      7,
      12,
      19,
      7,
      8,
      19,
      20,
      9,
      18,
      11,
      10,
      17,
      12,
      10,
      21,
      16,
      11,
      15,
      22,
      13,
      20,
      14,
      19,
      23,
      14,
      22,
      23,
      17,
      23,
      21,
      18,
      20,
      21,
      22
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      3,
      2,
      1,
      3,
      5,
      0,
      4,
      6,
      1,
      0,
      6,
      4,
      1,
      7,
      3,
      8,
      5,
      3,
      8,
      0,
      5,
      9,
      1,
      6,
      10,
      6,
      0,
      11,
      7,
      1,
      11,
      3,
      7,
      3,
      12,
      8,
      8,
      10,
      0,
      9,
      11,
      1,
      6,
      11,
      9,
      10,
      8,
      6,
      11,
      12,
      3,
      11,
      8,
      12,
      13,
      11,
      6,
      13,
      6,
      8,
      11,
      13,
      8
    ],
    [
      8,
      1,
      8,
      1,
      3,
      1,
      8,
      1,
      3,
      1,
      3,
      1,
      8,
      1,
      3,
      1,
      8,
      1,
      3,
      1,
      3,
      1,
      8,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      4,
      9,
      15,
      11,
      6,
      2,
      0,
      2,
      5,
      10,
      16,
      12,
      7,
      3,
      0,
      3,
      1,
      1,
      3,
      7,
      13,
      19,
      14,
      8,
      4,
      2,
      6,
      5,
      4,
      8,
      9,
      5,
      6,
      11,
      18,
      22,
      21,
      17,
      10,
      7,
      12,
      13,
      8,
      14,
      20,
      23,
      22,
      18,
      15,
      9,
      10,
      17,
      16,
      11,
      15,
      18,
      12,
      16,
      17,
      21,
      23,
      20,
      19,
      13,
      14,
      19,
      20,
      21,
      22,
      23
    ]
  ],
  [
    [
      10,
      24,
      26,
      48,
      4
    ],
    [
      2,
      3,
      1,
      4,
      1,
      2,
      1
    ],
    [
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      4,
      1
    ],
    [
      0,
      1,
      0.667599222196879,
      0.7445208382054341,
      -0.09776764253330057,
      0.6604015517481455,
      -0.6389637426794975,
      0.19342713620091315,
      -0.6604015517481455,
      0.5698315796635783,
      0.48904167641086826,
      0.972763353777937,
      0.12773958089728293,
      -0.3337996110984395,
      0.9339488310944648,
      -0.7367313852127981,
      -0.4669744155472324,
      -0.8749957112446365,
      0.4669744155472324,
      -0.9339488310944648,
      0.3337996110984395,
      -0.12773958089728293,
      0.8749957112446365,
      0.7367313852127981,
      -0.48904167641086826,
      -0.5698315796635783,
      -0.972763353777937,
      -0.19342713620091315,
      0.09776764253330057,
      -0.7445208382054341,
      0.6389637426794975,
      -0.667599222196879,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      4,
      8,
      3,
      9,
      5,
      10,
      11,
      7,
      12,
      9,
      8,
      10,
      13,
      14,
      12,
      15,
      16,
      10,
      17,
      18,
      12,
      13,
      19,
      12,
      20,
      14,
      21,
      22,
      16,
      21,
      23,
      18,
      24,
      20,
      19,
      21,
      25,
      5,
      24,
      26,
      27,
      21,
      25,
      8,
      24,
      28,
      5,
      29,
      30,
      27,
      29,
      28,
      8,
      29,
      31,
      0,
      29,
      0,
      0,
      32
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      5,
      8,
      3,
      0,
      2,
      10,
      9,
      0,
      9,
      11,
      7,
      0,
      1,
      6,
      12,
      2,
      1,
      13,
      14,
      5,
      1,
      4,
      15,
      13,
      2,
      12,
      16,
      10,
      3,
      17,
      11,
      4,
      3,
      8,
      16,
      17,
      4,
      9,
      18,
      15,
      14,
      19,
      8,
      5,
      7,
      15,
      20,
      6,
      20,
      19,
      12,
      6,
      11,
      21,
      13,
      7,
      19,
      22,
      10,
      8,
      10,
      22,
      18,
      9,
      17,
      22,
      21,
      11,
      12,
      14,
      23,
      16,
      13,
      21,
      23,
      14,
      15,
      18,
      23,
      20,
      16,
      23,
      18,
      17,
      20,
      21,
      22,
      19
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      10,
      3,
      2,
      5,
      11,
      6,
      0,
      4,
      12,
      11,
      5,
      3,
      10,
      13,
      4,
      6,
      14,
      15,
      7,
      8,
      16,
      9,
      2,
      7,
      15,
      17,
      8,
      9,
      16,
      18,
      10,
      19,
      14,
      6,
      11,
      13,
      20,
      12,
      4,
      21,
      19,
      11,
      12,
      18,
      20,
      13,
      10,
      22,
      17,
      15,
      14,
      17,
      23,
      16,
      8,
      23,
      24,
      18,
      16,
      19,
      21,
      22,
      14,
      20,
      25,
      21,
      12,
      18,
      24,
      25,
      20,
      22,
      24,
      23,
      17,
      25,
      24,
      22,
      21
    ],
    [
      4,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1
    ],
    [
      0,
      1,
      5,
      2,
      0,
      2,
      3,
      0,
      3,
      9,
      4,
      0,
      4,
      7,
      1,
      1,
      7,
      13,
      6,
      1,
      6,
      5,
      2,
      5,
      12,
      8,
      2,
      8,
      10,
      3,
      3,
      10,
      17,
      9,
      4,
      9,
      11,
      4,
      11,
      15,
      7,
      5,
      6,
      14,
      12,
      6,
      13,
      20,
      14,
      7,
      15,
      13,
      8,
      12,
      19,
      16,
      8,
      16,
      10,
      9,
      17,
      18,
      11,
      10,
      16,
      22,
      17,
      11,
      18,
      21,
      15,
      12,
      14,
      19,
      13,
      15,
      21,
      20,
      14,
      20,
      23,
      19,
      16,
      19,
      23,
      22,
      17,
      22,
      18,
      18,
      22,
      23,
      21,
      20,
      21,
      23
    ]
  ],
  [
    [
      11,
      48,
      26,
      72,
      3
    ],
    [
      3,
      2,
      1,
      3,
      1,
      4,
      1
    ],
    [
      1,
      4,
      1,
      6,
      1,
      8,
      1
    ],
    [
      0,
      1,
      0.4213179057858935,
      0.9069130180255375,
      -0.020566859594895542,
      0.42081561523096417,
      -0.33302657369867805,
      -0.2580737858565453,
      0.40075104619099794,
      0.8138260360510751,
      0.6841248285202559,
      0.6821811636624104,
      -0.37416029288846914,
      0.5835574446053831,
      0.7207390540766127,
      -0.3826793650680981,
      -0.6230452339078415,
      -0.6866200069922517,
      -0.09533195648212643,
      0.6429911093304649,
      0.49600719971348545,
      0.6344720371508359,
      0.4574493092992833,
      0.9263648916597229,
      0.3643623273248208,
      -0.45289901603241367,
      0.8137091468720944,
      -0.7071868665871471,
      0.3254836587488377,
      0.6276520721021501,
      -0.7362727983616717,
      -0.46030340453342267,
      -0.11987244233373562,
      -0.8811190197643868,
      0.5642523861865203,
      0.1396304729616937,
      0.9057980320648273,
      0.27127534535035835,
      0.8767121002903028,
      0.3014454634521579,
      -0.7859255897310917,
      0.5556353610155491,
      -0.21065895289294675,
      0.9764509762465132,
      0.046543490987231234,
      -0.8270593089208828,
      -0.5556353610155491,
      0.08510138140143342,
      -0.9764509762465132,
      0.8270593089208828,
      -0.08510138140143342,
      0.21065895289294675,
      -0.046543490987231234,
      0.7859255897310917,
      -0.27127534535035835,
      -0.8767121002903028,
      0.46030340453342267,
      -0.1396304729616937,
      -0.3014454634521579,
      0.8811190197643868,
      -0.3643623273248208,
      -0.9057980320648273,
      -0.3254836587488377,
      -0.5642523861865203,
      -0.8137091468720944,
      0.7362727983616717,
      -0.49600719971348545,
      0.11987244233373562,
      -0.4574493092992833,
      0.7071868665871471,
      -0.6276520721021501,
      0.45289901603241367,
      -0.9263648916597229,
      0.09533195648212643,
      -0.6344720371508359,
      0.6230452339078415,
      -0.6429911093304649,
      -0.5835574446053831,
      0.6866200069922517,
      -0.7207390540766127,
      0.3826793650680981,
      -0.6821811636624104,
      0.37416029288846914,
      -0.6841248285202559,
      0.2580737858565453,
      -0.40075104619099794,
      -0.42081561523096417,
      -0.8138260360510751,
      0.33302657369867805,
      -0.9069130180255375,
      0.02056685959489554,
      -0.4213179057858935,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      7,
      11,
      12,
      13,
      14,
      15,
      16,
      11,
      17,
      18,
      14,
      19,
      13,
      20,
      21,
      16,
      22,
      23,
      18,
      24,
      25,
      26,
      24,
      27,
      28,
      29,
      30,
      31,
      20,
      32,
      33,
      22,
      34,
      26,
      35,
      36,
      28,
      37,
      38,
      31,
      35,
      39,
      33,
      24,
      40,
      41,
      37,
      42,
      43,
      44,
      45,
      46,
      47,
      42,
      48,
      44,
      49,
      41,
      50,
      51,
      43,
      52,
      53,
      46,
      54,
      51,
      48,
      52,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      54,
      63,
      64,
      57,
      65,
      56,
      66,
      67,
      59,
      68,
      69,
      62,
      70,
      71,
      64,
      60,
      72,
      73,
      60,
      74,
      75,
      68,
      76,
      77,
      66,
      78,
      73,
      79,
      80,
      75,
      81,
      82,
      77,
      79,
      83,
      84,
      81,
      85,
      86,
      87,
      88,
      84,
      89,
      90,
      86,
      89,
      91,
      0,
      89,
      0,
      0,
      92
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      4,
      6,
      0,
      8,
      7,
      0,
      1,
      9,
      2,
      1,
      10,
      11,
      2,
      12,
      13,
      3,
      14,
      15,
      3,
      13,
      14,
      17,
      16,
      4,
      19,
      18,
      5,
      18,
      17,
      5,
      21,
      20,
      6,
      20,
      8,
      6,
      8,
      22,
      7,
      23,
      19,
      7,
      9,
      24,
      25,
      9,
      11,
      24,
      10,
      26,
      11,
      10,
      15,
      27,
      12,
      28,
      13,
      12,
      25,
      29,
      14,
      30,
      31,
      15,
      31,
      27,
      17,
      32,
      16,
      33,
      21,
      16,
      35,
      34,
      18,
      23,
      35,
      19,
      37,
      36,
      20,
      33,
      37,
      21,
      36,
      38,
      22,
      38,
      23,
      22,
      24,
      39,
      40,
      25,
      40,
      29,
      26,
      41,
      39,
      26,
      27,
      41,
      28,
      42,
      30,
      28,
      29,
      42,
      30,
      43,
      31,
      34,
      44,
      32,
      44,
      33,
      32,
      35,
      45,
      34,
      37,
      46,
      36,
      46,
      45,
      38,
      39,
      47,
      40,
      41,
      43,
      47,
      42,
      47,
      43,
      45,
      46,
      44
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      4,
      0,
      2,
      6,
      3,
      4,
      7,
      1,
      5,
      8,
      2,
      1,
      9,
      5,
      10,
      4,
      3,
      11,
      6,
      2,
      12,
      3,
      6,
      13,
      7,
      4,
      9,
      1,
      7,
      9,
      8,
      5,
      14,
      2,
      8,
      10,
      15,
      4,
      3,
      12,
      10,
      11,
      12,
      6,
      2,
      14,
      11,
      13,
      9,
      7,
      4,
      16,
      13,
      9,
      17,
      8,
      8,
      18,
      14,
      12,
      15,
      10,
      16,
      4,
      15,
      19,
      12,
      11,
      18,
      11,
      14,
      20,
      9,
      13,
      21,
      13,
      16,
      22,
      17,
      9,
      18,
      8,
      17,
      12,
      23,
      15,
      15,
      21,
      16,
      19,
      24,
      12,
      11,
      18,
      19,
      20,
      22,
      9,
      13,
      21,
      20,
      22,
      18,
      17,
      24,
      23,
      12,
      21,
      15,
      23,
      18,
      24,
      19,
      21,
      22,
      20,
      25,
      18,
      22,
      24,
      21,
      23,
      18,
      25,
      24,
      21,
      25,
      22,
      25,
      21,
      24
    ],
    [
      4,
      1,
      6,
      1,
      8,
      1,
      6,
      1,
      8,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      8,
      1,
      4,
      1,
      6,
      1,
      8,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      4,
      1,
      8,
      1,
      4,
      1,
      4,
      1,
      8,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      1
    ],
    [
      0,
      1,
      4,
      2,
      0,
      2,
      6,
      13,
      8,
      3,
      0,
      3,
      7,
      15,
      19,
      10,
      5,
      1,
      1,
      5,
      11,
      17,
      9,
      4,
      2,
      4,
      9,
      16,
      25,
      21,
      12,
      6,
      3,
      8,
      14,
      7,
      5,
      10,
      18,
      11,
      6,
      12,
      20,
      13,
      7,
      14,
      22,
      31,
      23,
      15,
      8,
      13,
      20,
      28,
      36,
      30,
      22,
      14,
      9,
      17,
      24,
      16,
      10,
      19,
      27,
      35,
      26,
      18,
      11,
      18,
      26,
      34,
      39,
      32,
      24,
      17,
      12,
      21,
      29,
      37,
      28,
      20,
      15,
      23,
      27,
      19,
      16,
      24,
      32,
      40,
      33,
      25,
      21,
      25,
      33,
      29,
      22,
      30,
      38,
      31,
      23,
      31,
      38,
      43,
      45,
      41,
      35,
      27,
      26,
      35,
      41,
      34,
      28,
      37,
      42,
      36,
      29,
      33,
      40,
      44,
      47,
      46,
      42,
      37,
      30,
      36,
      42,
      46,
      43,
      38,
      32,
      39,
      44,
      40,
      34,
      41,
      45,
      47,
      44,
      39,
      43,
      46,
      47,
      45
    ]
  ],
  [
    [
      12,
      24,
      38,
      60,
      5
    ],
    [
      0,
      2,
      1,
      3,
      1,
      4,
      1
    ],
    [
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      4,
      1
    ],
    [
      0,
      1,
      0.690765900021467,
      0.7230784683335085,
      0.28987533542080335,
      0.627000652748579,
      -0.44747737033952434,
      0.5262333433625158,
      -0.6654371656048282,
      -0.1853399775123535,
      -0.11101522917986031,
      -0.6817867317003246,
      0.5797506708416067,
      0.44615693666701706,
      0.9806412354422703,
      0.06318116876077957,
      0.8230392005235493,
      0.21374036290571188,
      0.24328852968194262,
      0.9678940185987412,
      -0.49406417607838504,
      0.8671267092126781,
      -0.9340544297034096,
      0.28610728689841664,
      -0.6516662109971061,
      -0.727767962134642,
      0.025328734416638736,
      -0.9976806077732859,
      0.6188503598659675,
      -0.29559774252208476,
      0.7626814401769664,
      -0.0845726681262904,
      -0.6412210887171357,
      0.6050794052582453,
      -0.4906618945722033,
      0.8123406302609324,
      -0.5725192741885762,
      -0.7511236603680498,
      0.44166067523622543,
      -0.9202834750956874,
      -0.2563206977238719,
      -0.4146615192083858,
      -0.7663593998266149,
      0.178860106240943,
      -0.4964467541879711,
      -0.8494408058550676,
      0.17137298952644317,
      0.24012605646409918,
      -0.9554950420948137,
      -0.46873544166174635,
      -0.13055389856060787,
      -0.8736376624784409
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      11,
      3,
      12,
      11,
      13,
      14,
      9,
      15,
      16,
      7,
      17,
      18,
      19,
      15,
      20,
      21,
      15,
      22,
      23,
      17,
      24,
      25,
      17,
      26,
      27,
      15,
      28,
      25,
      29,
      30,
      31,
      32,
      33,
      5,
      34,
      10,
      35,
      36,
      37,
      38,
      34,
      39,
      40,
      29,
      41,
      42,
      34,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51
    ],
    [
      1,
      2,
      3,
      4,
      5,
      0,
      6,
      7,
      8,
      2,
      0,
      1,
      8,
      9,
      3,
      0,
      2,
      10,
      11,
      4,
      0,
      3,
      11,
      12,
      5,
      0,
      4,
      12,
      13,
      6,
      1,
      5,
      13,
      14,
      7,
      1,
      6,
      14,
      15,
      8,
      1,
      7,
      16,
      9,
      2,
      2,
      8,
      16,
      17,
      10,
      3,
      9,
      17,
      18,
      11,
      3,
      10,
      18,
      19,
      4,
      4,
      19,
      20,
      13,
      5,
      5,
      12,
      20,
      14,
      6,
      6,
      13,
      21,
      15,
      7,
      7,
      14,
      21,
      22,
      16,
      8,
      15,
      22,
      17,
      9,
      9,
      16,
      22,
      18,
      10,
      10,
      17,
      23,
      19,
      11,
      11,
      18,
      23,
      20,
      12,
      12,
      19,
      23,
      21,
      13,
      14,
      20,
      23,
      22,
      15,
      15,
      21,
      23,
      17,
      16,
      18,
      22,
      21,
      20,
      19
    ],
    [
      0,
      1,
      2,
      3,
      4,
      4,
      5,
      6,
      7,
      0,
      0,
      7,
      8,
      9,
      1,
      1,
      9,
      10,
      11,
      2,
      2,
      11,
      12,
      13,
      3,
      3,
      13,
      14,
      15,
      4,
      4,
      15,
      16,
      17,
      5,
      5,
      17,
      18,
      19,
      6,
      6,
      19,
      20,
      8,
      7,
      8,
      20,
      21,
      22,
      9,
      9,
      22,
      23,
      24,
      10,
      10,
      24,
      25,
      12,
      11,
      12,
      26,
      27,
      14,
      13,
      14,
      27,
      28,
      16,
      15,
      16,
      28,
      29,
      18,
      17,
      18,
      29,
      30,
      31,
      19,
      19,
      31,
      32,
      21,
      20,
      21,
      32,
      33,
      23,
      22,
      23,
      33,
      34,
      25,
      24,
      25,
      34,
      35,
      26,
      12,
      26,
      35,
      36,
      28,
      27,
      28,
      36,
      37,
      30,
      29,
      30,
      37,
      33,
      32,
      31,
      33,
      37,
      36,
      35,
      34
    ],
    [
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      3,
      0,
      3,
      4,
      0,
      4,
      5,
      0,
      5,
      6,
      1,
      1,
      6,
      7,
      1,
      7,
      8,
      1,
      8,
      2,
      2,
      8,
      9,
      2,
      9,
      10,
      3,
      3,
      10,
      11,
      3,
      11,
      4,
      4,
      11,
      19,
      12,
      4,
      12,
      5,
      5,
      12,
      13,
      5,
      13,
      6,
      6,
      13,
      14,
      6,
      14,
      7,
      7,
      14,
      15,
      7,
      15,
      16,
      8,
      8,
      16,
      9,
      9,
      16,
      17,
      9,
      17,
      10,
      10,
      17,
      18,
      10,
      18,
      11,
      11,
      18,
      19,
      12,
      19,
      20,
      12,
      20,
      13,
      13,
      20,
      21,
      14,
      14,
      21,
      15,
      15,
      21,
      22,
      15,
      22,
      16,
      16,
      22,
      17,
      17,
      22,
      23,
      18,
      18,
      23,
      19,
      19,
      23,
      20,
      20,
      23,
      21,
      21,
      23,
      22
    ]
  ],
  [
    [
      13,
      24,
      20,
      48,
      4
    ],
    [
      2,
      3,
      2,
      4,
      1,
      4,
      1
    ],
    [
      1,
      8,
      1,
      3,
      2,
      8,
      1,
      4,
      1
    ],
    [
      0,
      1,
      0.667599222196879,
      0.7445208382054341,
      -0.6389637426794975,
      0.19342713620091315,
      -0.09776764253330057,
      0.6604015517481455,
      -0.6604015517481455,
      0.972763353777937,
      0.12773958089728293,
      0.5698315796635783,
      0.48904167641086826,
      -0.7367313852127981,
      -0.4669744155472324,
      -0.8749957112446365,
      0.4669744155472324,
      -0.3337996110984395,
      0.9339488310944648,
      -0.9339488310944648,
      0.8749957112446365,
      -0.12773958089728293,
      0.7367313852127981,
      -0.48904167641086826,
      0.3337996110984395,
      -0.972763353777937,
      -0.19342713620091315,
      -0.5698315796635783,
      0.6389637426794975,
      -0.7445208382054341,
      0.09776764253330057,
      -0.667599222196879,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      6,
      8,
      3,
      9,
      5,
      10,
      11,
      7,
      12,
      11,
      8,
      12,
      13,
      14,
      12,
      15,
      16,
      10,
      17,
      18,
      10,
      17,
      19,
      10,
      20,
      14,
      21,
      22,
      16,
      23,
      24,
      18,
      21,
      24,
      19,
      21,
      25,
      26,
      21,
      27,
      7,
      23,
      27,
      8,
      23,
      28,
      26,
      29,
      30,
      7,
      29,
      30,
      8,
      29,
      31,
      0,
      29,
      0,
      0,
      32
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      9,
      8,
      3,
      0,
      2,
      6,
      10,
      0,
      11,
      8,
      7,
      0,
      1,
      6,
      12,
      13,
      1,
      14,
      3,
      5,
      1,
      4,
      12,
      15,
      2,
      16,
      4,
      11,
      2,
      17,
      10,
      16,
      3,
      14,
      9,
      17,
      4,
      18,
      15,
      8,
      15,
      7,
      19,
      5,
      19,
      14,
      20,
      5,
      20,
      13,
      10,
      6,
      12,
      11,
      21,
      7,
      9,
      18,
      22,
      8,
      20,
      22,
      10,
      9,
      22,
      16,
      21,
      11,
      12,
      23,
      21,
      13,
      13,
      14,
      23,
      17,
      15,
      18,
      19,
      23,
      16,
      18,
      17,
      23,
      22,
      20,
      21,
      19
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      10,
      3,
      2,
      5,
      7,
      11,
      0,
      4,
      8,
      7,
      5,
      3,
      10,
      12,
      4,
      6,
      10,
      9,
      7,
      0,
      13,
      14,
      6,
      8,
      14,
      13,
      2,
      2,
      15,
      7,
      9,
      12,
      10,
      11,
      7,
      14,
      16,
      0,
      11,
      16,
      14,
      8,
      4,
      7,
      15,
      4,
      12,
      14,
      17,
      10,
      6,
      18,
      2,
      13,
      0,
      17,
      14,
      15,
      2,
      10,
      19,
      14,
      11,
      16,
      4,
      18,
      0,
      15,
      14,
      19,
      4,
      17,
      2,
      18,
      10,
      18,
      4,
      19,
      10
    ],
    [
      8,
      1,
      3,
      2,
      8,
      1,
      4,
      1,
      8,
      1,
      3,
      2,
      4,
      1,
      8,
      1,
      4,
      1,
      3,
      2,
      8,
      1,
      4,
      1,
      3,
      2,
      3,
      2,
      8,
      1,
      4,
      1,
      3,
      2,
      3,
      2,
      4,
      1,
      3,
      2
    ],
    [
      0,
      1,
      5,
      13,
      20,
      17,
      9,
      2,
      0,
      2,
      3,
      0,
      3,
      10,
      17,
      22,
      18,
      11,
      4,
      0,
      4,
      7,
      1,
      1,
      7,
      15,
      21,
      23,
      20,
      14,
      6,
      1,
      6,
      5,
      2,
      9,
      16,
      8,
      2,
      8,
      11,
      15,
      12,
      5,
      6,
      3,
      3,
      6,
      14,
      10,
      4,
      11,
      8,
      4,
      8,
      16,
      22,
      23,
      19,
      12,
      7,
      5,
      12,
      19,
      13,
      7,
      12,
      15,
      9,
      17,
      10,
      9,
      10,
      14,
      13,
      19,
      21,
      18,
      16,
      11,
      18,
      21,
      15,
      13,
      14,
      20,
      16,
      18,
      22,
      17,
      20,
      23,
      22,
      19,
      23,
      21
    ]
  ],
  [
    [
      14,
      24,
      20,
      48,
      4
    ],
    [
      2,
      3,
      1,
      4,
      1,
      4,
      3
    ],
    [
      1,
      8,
      3,
      3,
      1,
      8,
      3,
      4,
      1
    ],
    [
      0,
      1,
      0.9968739365156104,
      0.07900857355927175,
      0.4556778363694134,
      0.8866314650100228,
      -0.8508851285069632,
      0.5193766873761451,
      -0.5193766873761451,
      0.04275913188839181,
      0.46049571322036414,
      0.1459888080086472,
      -0.8419828528814565,
      -0.3952072921375498,
      0.3672547776338777,
      0.8081259966185713,
      -0.3672547776338777,
      -0.4984369682578052,
      -0.7345095552677554,
      0.7345095552677554,
      -0.8081259966185713,
      -0.46049571322036414,
      0.3952072921375498,
      0.8419828528814565,
      0.4984369682578052,
      -0.04275913188839181,
      -0.8866314650100228,
      -0.1459888080086472,
      -0.4556778363694134,
      -0.07900857355927175,
      0.8508851285069632,
      -0.9968739365156104,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      6,
      8,
      3,
      9,
      5,
      10,
      11,
      7,
      12,
      11,
      8,
      12,
      13,
      14,
      12,
      15,
      16,
      10,
      17,
      18,
      10,
      17,
      19,
      10,
      20,
      14,
      21,
      22,
      16,
      23,
      24,
      18,
      21,
      24,
      19,
      21,
      25,
      26,
      21,
      27,
      7,
      23,
      27,
      8,
      23,
      28,
      26,
      29,
      30,
      7,
      29,
      30,
      8,
      29,
      31,
      0,
      29,
      0,
      0,
      32
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      9,
      8,
      3,
      0,
      2,
      6,
      10,
      0,
      11,
      8,
      7,
      0,
      1,
      6,
      12,
      13,
      1,
      14,
      3,
      5,
      1,
      4,
      12,
      15,
      2,
      16,
      4,
      11,
      2,
      17,
      10,
      16,
      3,
      14,
      9,
      17,
      4,
      18,
      15,
      8,
      15,
      7,
      19,
      5,
      19,
      14,
      20,
      5,
      20,
      13,
      10,
      6,
      12,
      11,
      21,
      7,
      9,
      18,
      22,
      8,
      20,
      22,
      10,
      9,
      22,
      16,
      21,
      11,
      12,
      23,
      21,
      13,
      13,
      14,
      23,
      17,
      15,
      18,
      19,
      23,
      16,
      18,
      17,
      23,
      22,
      20,
      21,
      19
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      10,
      3,
      2,
      5,
      7,
      11,
      0,
      4,
      8,
      7,
      5,
      3,
      10,
      12,
      4,
      6,
      10,
      9,
      7,
      0,
      13,
      14,
      6,
      8,
      14,
      13,
      2,
      2,
      15,
      7,
      9,
      12,
      10,
      11,
      7,
      14,
      16,
      0,
      11,
      16,
      14,
      8,
      4,
      7,
      15,
      4,
      12,
      14,
      17,
      10,
      6,
      18,
      2,
      13,
      0,
      17,
      14,
      15,
      2,
      10,
      19,
      14,
      11,
      16,
      4,
      18,
      0,
      15,
      14,
      19,
      4,
      17,
      2,
      18,
      10,
      18,
      4,
      19,
      10
    ],
    [
      8,
      3,
      3,
      1,
      8,
      3,
      4,
      1,
      8,
      3,
      3,
      1,
      4,
      1,
      8,
      3,
      4,
      1,
      3,
      1,
      8,
      3,
      4,
      1,
      3,
      1,
      3,
      1,
      8,
      3,
      4,
      1,
      3,
      1,
      3,
      1,
      4,
      1,
      3,
      1
    ],
    [
      0,
      1,
      5,
      13,
      20,
      17,
      9,
      2,
      0,
      2,
      3,
      0,
      3,
      10,
      17,
      22,
      18,
      11,
      4,
      0,
      4,
      7,
      1,
      1,
      7,
      15,
      21,
      23,
      20,
      14,
      6,
      1,
      6,
      5,
      2,
      9,
      16,
      8,
      2,
      8,
      11,
      15,
      12,
      5,
      6,
      3,
      3,
      6,
      14,
      10,
      4,
      11,
      8,
      4,
      8,
      16,
      22,
      23,
      19,
      12,
      7,
      5,
      12,
      19,
      13,
      7,
      12,
      15,
      9,
      17,
      10,
      9,
      10,
      14,
      13,
      19,
      21,
      18,
      16,
      11,
      18,
      21,
      15,
      13,
      14,
      20,
      16,
      18,
      22,
      17,
      20,
      23,
      22,
      19,
      23,
      21
    ]
  ],
  [
    [
      15,
      12,
      10,
      24,
      4
    ],
    [
      2,
      4,
      3,
      4,
      1,
      3,
      1
    ],
    [
      1,
      6,
      1,
      4,
      3,
      6,
      1,
      4,
      1
    ],
    [
      0,
      1,
      0.8660254037844386,
      0.5,
      -0.8660254037844386,
      0.28867513459481287,
      0.816496580927726,
      -0.28867513459481287,
      -0.816496580927726,
      -0.5,
      0.5773502691896257,
      -0.5773502691896257,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      0,
      3,
      5,
      6,
      3,
      7,
      8,
      3,
      2,
      0,
      9,
      10,
      8,
      0,
      11,
      6,
      0,
      4,
      0,
      9,
      5,
      6,
      9,
      7,
      8,
      9,
      0,
      0,
      12
    ],
    [
      1,
      2,
      3,
      4,
      6,
      3,
      5,
      0,
      8,
      4,
      7,
      0,
      7,
      1,
      9,
      0,
      10,
      2,
      6,
      0,
      1,
      9,
      6,
      11,
      1,
      4,
      5,
      10,
      2,
      9,
      8,
      3,
      2,
      11,
      7,
      10,
      3,
      5,
      7,
      11,
      4,
      11,
      6,
      8,
      10,
      9,
      8,
      5
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      4,
      5,
      2,
      1,
      6,
      7,
      3,
      2,
      5,
      7,
      8,
      0,
      3,
      7,
      8,
      4,
      7,
      9,
      4,
      1,
      0,
      9,
      4,
      6,
      5,
      7,
      9,
      2,
      2,
      8,
      4,
      6,
      2,
      9,
      0,
      8
    ],
    [
      6,
      1,
      4,
      3,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      3,
      4,
      1,
      6,
      1,
      4,
      1,
      4,
      1
    ],
    [
      0,
      1,
      5,
      11,
      8,
      2,
      0,
      2,
      7,
      3,
      0,
      3,
      9,
      11,
      10,
      4,
      0,
      4,
      6,
      1,
      1,
      6,
      10,
      8,
      7,
      3,
      1,
      3,
      9,
      5,
      2,
      8,
      10,
      4,
      2,
      4,
      6,
      5,
      9,
      7,
      5,
      6,
      10,
      11,
      7,
      9,
      11,
      8
    ]
  ],
  [
    [
      16,
      48,
      20,
      72,
      3
    ],
    [
      3,
      4,
      3,
      3,
      1,
      4,
      1
    ],
    [
      1,
      8,
      3,
      6,
      1,
      8,
      1
    ],
    [
      0,
      1,
      0.6998542122237652,
      0.7142857142857143,
      0.4607079004856649,
      0.5268245901601762,
      -0.6939926378935867,
      -0.09038880968819143,
      0.17081879409864306,
      0.8326324463923128,
      0.9956048929409655,
      0.024510410750544272,
      0.22742316307774318,
      0.963260370632161,
      0.14285714285714285,
      0.5090227515501685,
      -0.2182178902359924,
      -0.975592226366012,
      -0.9272773753015083,
      0.3460469707837933,
      -0.062465943309278675,
      0.2612038749637414,
      0.21913364516314668,
      0.9509791784989114,
      0.7140053044685402,
      -0.6652648927846257,
      0.7623201555330439,
      -0.5469181606780271,
      -0.05417642539468219,
      0.83543129008436,
      -0.46656947481584343,
      0.8728715609439696,
      -0.14285714285714285,
      -0.020012666574953576,
      0.3086066999241838,
      0.344065531781704,
      -0.83543129008436,
      0.42857142857142855,
      -0.8106350065975475,
      0.3989955096123753,
      -0.6798415456488116,
      -0.3086066999241838,
      -0.8789625242370047,
      -0.3989955096123753,
      -0.344065531781704,
      -0.42857142857142855,
      0.23328473740792172,
      0.6798415456488116,
      0.6652648927846257,
      0.05417642539468219,
      0.5469181606780271,
      0.8789625242370047,
      -0.2612038749637414,
      0.020012666574953576,
      -0.9509791784989114,
      0.8106350065975475,
      -0.3499271061118826,
      0.9258200997725514,
      -0.21913364516314668,
      0.2182178902359924,
      -0.7140053044685402,
      0.062465943309278675,
      -0.963260370632161,
      -0.9258200997725514,
      -0.7623201555330439,
      -0.3460469707837933,
      0.3499271061118826,
      -0.5090227515501685,
      -0.8326324463923128,
      0.975592226366012,
      -0.024510410750544272,
      -0.22742316307774318,
      0.9272773753015083,
      -0.17081879409864306,
      -0.5268245901601762,
      -0.9956048929409655,
      0.09038880968819143,
      -0.23328473740792172,
      -0.8728715609439696,
      -0.4607079004856649,
      -0.7142857142857143,
      0.6939926378935867,
      0.46656947481584343,
      -0.6998542122237652,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      7,
      11,
      12,
      13,
      14,
      15,
      16,
      9,
      17,
      16,
      11,
      18,
      19,
      14,
      20,
      13,
      21,
      22,
      16,
      23,
      24,
      16,
      25,
      26,
      19,
      27,
      28,
      29,
      27,
      30,
      31,
      32,
      33,
      34,
      23,
      35,
      36,
      37,
      38,
      39,
      37,
      40,
      41,
      25,
      42,
      43,
      21,
      44,
      29,
      45,
      46,
      31,
      45,
      47,
      34,
      48,
      49,
      36,
      50,
      51,
      39,
      52,
      53,
      41,
      54,
      55,
      43,
      45,
      56,
      57,
      14,
      58,
      59,
      54,
      60,
      59,
      48,
      61,
      62,
      52,
      56,
      63,
      14,
      64,
      65,
      50,
      66,
      57,
      32,
      67,
      59,
      68,
      69,
      59,
      70,
      71,
      62,
      32,
      66,
      63,
      32,
      72,
      65,
      32,
      73,
      74,
      68,
      75,
      76,
      70,
      77,
      78,
      37,
      79,
      74,
      80,
      81,
      76,
      80,
      82,
      78,
      14,
      83,
      0,
      80,
      0,
      0,
      84
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      9,
      8,
      0,
      1,
      10,
      11,
      1,
      12,
      13,
      2,
      14,
      15,
      2,
      16,
      17,
      3,
      18,
      19,
      3,
      15,
      20,
      22,
      21,
      4,
      24,
      23,
      4,
      26,
      25,
      5,
      27,
      22,
      5,
      29,
      28,
      6,
      22,
      9,
      6,
      23,
      30,
      7,
      32,
      31,
      7,
      33,
      28,
      8,
      29,
      26,
      8,
      32,
      30,
      9,
      10,
      34,
      35,
      10,
      13,
      15,
      11,
      36,
      16,
      11,
      37,
      38,
      12,
      34,
      39,
      12,
      19,
      35,
      13,
      36,
      38,
      14,
      18,
      34,
      14,
      40,
      19,
      16,
      41,
      20,
      17,
      42,
      40,
      17,
      20,
      38,
      18,
      41,
      42,
      28,
      25,
      21,
      26,
      43,
      21,
      27,
      44,
      23,
      43,
      45,
      24,
      32,
      27,
      24,
      45,
      44,
      25,
      31,
      46,
      29,
      46,
      33,
      30,
      45,
      33,
      31,
      35,
      47,
      37,
      36,
      39,
      47,
      37,
      39,
      42,
      40,
      41,
      47,
      46,
      44,
      43
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      7,
      3,
      4,
      8,
      1,
      0,
      9,
      4,
      5,
      10,
      2,
      1,
      11,
      5,
      8,
      6,
      3,
      12,
      0,
      6,
      13,
      7,
      2,
      11,
      3,
      7,
      10,
      8,
      4,
      11,
      1,
      8,
      14,
      9,
      0,
      15,
      4,
      9,
      16,
      10,
      5,
      17,
      2,
      10,
      9,
      5,
      11,
      8,
      13,
      6,
      3,
      11,
      8,
      12,
      14,
      0,
      6,
      15,
      12,
      13,
      16,
      7,
      2,
      17,
      13,
      7,
      12,
      11,
      10,
      16,
      8,
      4,
      17,
      10,
      14,
      5,
      9,
      15,
      18,
      4,
      9,
      11,
      15,
      5,
      18,
      16,
      16,
      13,
      8,
      17,
      6,
      13,
      7,
      14,
      12,
      19,
      15,
      6,
      11,
      12,
      15,
      19,
      7,
      16,
      18,
      17,
      4,
      18,
      5,
      14,
      16,
      18,
      15,
      17,
      19,
      6,
      7,
      19,
      14,
      19,
      16,
      15,
      18,
      14,
      17,
      14,
      19,
      17
    ],
    [
      8,
      3,
      6,
      1,
      8,
      1,
      6,
      1,
      8,
      1,
      8,
      3,
      8,
      1,
      8,
      3,
      8,
      3,
      6,
      1,
      6,
      1,
      8,
      1,
      6,
      1,
      6,
      1,
      8,
      1,
      8,
      3,
      8,
      1,
      8,
      3,
      6,
      1,
      6,
      1
    ],
    [
      0,
      1,
      4,
      11,
      23,
      16,
      7,
      2,
      0,
      2,
      6,
      15,
      9,
      3,
      0,
      3,
      8,
      19,
      26,
      12,
      5,
      1,
      1,
      5,
      13,
      22,
      10,
      4,
      2,
      7,
      17,
      31,
      40,
      29,
      14,
      6,
      3,
      9,
      20,
      30,
      41,
      33,
      18,
      8,
      4,
      10,
      21,
      35,
      43,
      37,
      24,
      11,
      5,
      12,
      25,
      39,
      44,
      36,
      27,
      13,
      6,
      14,
      28,
      34,
      21,
      10,
      22,
      15,
      7,
      16,
      30,
      20,
      32,
      17,
      8,
      18,
      28,
      14,
      29,
      19,
      9,
      15,
      22,
      13,
      27,
      38,
      32,
      20,
      11,
      24,
      38,
      27,
      36,
      23,
      12,
      26,
      35,
      21,
      34,
      25,
      16,
      23,
      36,
      44,
      47,
      46,
      41,
      30,
      17,
      32,
      38,
      24,
      37,
      45,
      42,
      31,
      18,
      33,
      42,
      45,
      39,
      25,
      34,
      28,
      19,
      29,
      40,
      46,
      47,
      43,
      35,
      26,
      31,
      42,
      33,
      41,
      46,
      40,
      37,
      43,
      47,
      44,
      39,
      45
    ]
  ],
  [
    [
      17,
      24,
      26,
      48,
      4
    ],
    [
      2,
      3,
      2,
      4,
      1,
      2,
      1
    ],
    [
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      4,
      1
    ],
    [
      0,
      1,
      0.9968739365156104,
      0.07900857355927175,
      -0.8508851285069632,
      0.5193766873761451,
      0.4556778363694134,
      0.8866314650100228,
      -0.5193766873761451,
      0.1459888080086472,
      -0.8419828528814565,
      0.04275913188839181,
      0.46049571322036414,
      -0.4984369682578052,
      -0.7345095552677554,
      -0.3952072921375498,
      0.3672547776338777,
      0.8081259966185713,
      -0.3672547776338777,
      0.7345095552677554,
      0.4984369682578052,
      -0.46049571322036414,
      -0.8081259966185713,
      0.3952072921375498,
      0.8419828528814565,
      -0.1459888080086472,
      -0.04275913188839181,
      -0.8866314650100228,
      0.8508851285069632,
      -0.07900857355927175,
      -0.4556778363694134,
      -0.9968739365156104,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      4,
      8,
      3,
      9,
      5,
      10,
      11,
      7,
      12,
      9,
      8,
      10,
      13,
      14,
      12,
      15,
      16,
      10,
      17,
      18,
      12,
      13,
      19,
      12,
      20,
      14,
      21,
      22,
      16,
      21,
      23,
      18,
      24,
      20,
      19,
      21,
      25,
      5,
      24,
      26,
      27,
      21,
      25,
      8,
      24,
      28,
      5,
      29,
      30,
      27,
      29,
      28,
      8,
      29,
      31,
      0,
      29,
      0,
      0,
      32
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      5,
      8,
      3,
      0,
      2,
      10,
      9,
      0,
      9,
      11,
      7,
      0,
      1,
      6,
      12,
      2,
      1,
      13,
      14,
      5,
      1,
      4,
      15,
      13,
      2,
      12,
      16,
      10,
      3,
      17,
      11,
      4,
      3,
      8,
      16,
      17,
      4,
      9,
      18,
      15,
      14,
      19,
      8,
      5,
      7,
      15,
      20,
      6,
      20,
      19,
      12,
      6,
      11,
      21,
      13,
      7,
      19,
      22,
      10,
      8,
      10,
      22,
      18,
      9,
      17,
      22,
      21,
      11,
      12,
      14,
      23,
      16,
      13,
      21,
      23,
      14,
      15,
      18,
      23,
      20,
      16,
      23,
      18,
      17,
      20,
      21,
      22,
      19
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      10,
      3,
      2,
      5,
      11,
      6,
      0,
      4,
      12,
      11,
      5,
      3,
      10,
      13,
      4,
      6,
      14,
      15,
      7,
      8,
      16,
      9,
      2,
      7,
      15,
      17,
      8,
      9,
      16,
      18,
      10,
      19,
      14,
      6,
      11,
      13,
      20,
      12,
      4,
      21,
      19,
      11,
      12,
      18,
      20,
      13,
      10,
      22,
      17,
      15,
      14,
      17,
      23,
      16,
      8,
      23,
      24,
      18,
      16,
      19,
      21,
      22,
      14,
      20,
      25,
      21,
      12,
      18,
      24,
      25,
      20,
      22,
      24,
      23,
      17,
      25,
      24,
      22,
      21
    ],
    [
      4,
      1,
      3,
      2,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      2,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      2
    ],
    [
      0,
      1,
      5,
      2,
      0,
      2,
      3,
      0,
      3,
      9,
      4,
      0,
      4,
      7,
      1,
      1,
      7,
      13,
      6,
      1,
      6,
      5,
      2,
      5,
      12,
      8,
      2,
      8,
      10,
      3,
      3,
      10,
      17,
      9,
      4,
      9,
      11,
      4,
      11,
      15,
      7,
      5,
      6,
      14,
      12,
      6,
      13,
      20,
      14,
      7,
      15,
      13,
      8,
      12,
      19,
      16,
      8,
      16,
      10,
      9,
      17,
      18,
      11,
      10,
      16,
      22,
      17,
      11,
      18,
      21,
      15,
      12,
      14,
      19,
      13,
      15,
      21,
      20,
      14,
      20,
      23,
      19,
      16,
      19,
      23,
      22,
      17,
      22,
      18,
      18,
      22,
      23,
      21,
      20,
      21,
      23
    ]
  ],
  [
    [
      18,
      24,
      18,
      48,
      4
    ],
    [
      4,
      2,
      1,
      4,
      1,
      3,
      2,
      4,
      2
    ],
    [
      1,
      8,
      1,
      4,
      1,
      8,
      7,
      4,
      3
    ],
    [
      0,
      1,
      0.667599222196879,
      0.7445208382054341,
      -0.6389637426794975,
      -0.19342713620091315,
      0.2849157898317892,
      -0.603748055220392,
      -0.09776764253330057,
      0.6604015517481455,
      0.972763353777937,
      0.12773958089728293,
      0.5698315796635783,
      0.48904167641086826,
      -0.35404795284770835,
      -0.7971751914213051,
      -0.7367313852127981,
      0.4669744155472324,
      -0.8749957112446365,
      -0.4669744155472324,
      0.5900799214128473,
      0.048883821266650286,
      0.9906023276222183,
      0.8749957112446365,
      -0.12773958089728293,
      0.7367313852127981,
      -0.48904167641086826,
      -0.048883821266650286,
      -0.9906023276222183,
      -0.972763353777937,
      0.19342713620091315,
      -0.5900799214128473,
      0.7971751914213051,
      -0.5698315796635783,
      -0.6604015517481455,
      0.35404795284770835,
      0.6389637426794975,
      -0.7445208382054341,
      0.09776764253330057,
      -0.667599222196879,
      -0.2849157898317892,
      0.603748055220392,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      9,
      13,
      14,
      15,
      13,
      16,
      17,
      13,
      18,
      19,
      11,
      20,
      15,
      11,
      21,
      22,
      11,
      23,
      17,
      24,
      25,
      19,
      26,
      27,
      28,
      24,
      29,
      30,
      24,
      31,
      32,
      24,
      33,
      34,
      26,
      35,
      32,
      26,
      36,
      30,
      37,
      38,
      34,
      37,
      39,
      0,
      37,
      40,
      41,
      37,
      0,
      0,
      42
    ],
    [
      1,
      2,
      3,
      4,
      6,
      3,
      5,
      0,
      9,
      8,
      7,
      0,
      7,
      1,
      10,
      0,
      11,
      8,
      6,
      0,
      1,
      10,
      12,
      13,
      1,
      4,
      12,
      11,
      2,
      14,
      9,
      3,
      2,
      15,
      4,
      16,
      2,
      17,
      7,
      15,
      3,
      5,
      14,
      13,
      4,
      18,
      6,
      16,
      18,
      6,
      19,
      5,
      19,
      10,
      20,
      5,
      20,
      10,
      17,
      7,
      9,
      16,
      21,
      8,
      11,
      15,
      22,
      8,
      20,
      21,
      14,
      9,
      19,
      22,
      12,
      11,
      12,
      23,
      18,
      13,
      13,
      14,
      23,
      17,
      15,
      22,
      17,
      23,
      16,
      21,
      18,
      23,
      21,
      20,
      22,
      19
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      4,
      5,
      2,
      1,
      8,
      9,
      3,
      2,
      5,
      10,
      11,
      0,
      3,
      9,
      12,
      4,
      7,
      13,
      4,
      1,
      6,
      9,
      8,
      7,
      0,
      13,
      4,
      6,
      5,
      10,
      14,
      2,
      2,
      12,
      4,
      8,
      12,
      9,
      11,
      10,
      2,
      14,
      0,
      11,
      14,
      10,
      13,
      7,
      4,
      15,
      9,
      6,
      4,
      15,
      7,
      8,
      16,
      10,
      13,
      0,
      17,
      10,
      12,
      2,
      9,
      17,
      2,
      11,
      14,
      7,
      16,
      0,
      15,
      10,
      16,
      9,
      15,
      10,
      17,
      7,
      16,
      7,
      17,
      9
    ],
    [
      8,
      1,
      4,
      1,
      8,
      7,
      4,
      3,
      8,
      7,
      4,
      1,
      4,
      3,
      8,
      7,
      4,
      1,
      8,
      1,
      8,
      7,
      4,
      3,
      4,
      1,
      4,
      3,
      4,
      1,
      4,
      1,
      4,
      3,
      4,
      1
    ],
    [
      0,
      1,
      5,
      13,
      20,
      17,
      9,
      2,
      0,
      2,
      7,
      3,
      0,
      3,
      10,
      13,
      19,
      18,
      11,
      4,
      0,
      4,
      6,
      1,
      1,
      6,
      11,
      16,
      15,
      9,
      7,
      3,
      1,
      3,
      10,
      5,
      2,
      9,
      15,
      8,
      2,
      8,
      16,
      22,
      23,
      20,
      14,
      7,
      4,
      11,
      16,
      8,
      4,
      8,
      15,
      21,
      23,
      19,
      12,
      6,
      5,
      10,
      14,
      17,
      21,
      22,
      18,
      12,
      5,
      12,
      19,
      13,
      6,
      12,
      18,
      11,
      7,
      14,
      17,
      9,
      10,
      14,
      20,
      13,
      15,
      16,
      22,
      21,
      17,
      20,
      23,
      21,
      18,
      19,
      23,
      22
    ]
  ],
  [
    [
      19,
      24,
      14,
      36,
      3
    ],
    [
      2,
      2,
      1,
      3,
      1,
      4,
      3
    ],
    [
      1,
      8,
      3,
      8,
      3,
      3,
      1
    ],
    [
      0,
      1,
      0.872260419102717,
      -0.48904167641086826,
      -0.12773958089728293,
      0.8628562094610168,
      -0.8348463620838305,
      -0.2527247325622118,
      0.12773958089728293,
      -0.7819348952243207,
      -0.6101314768988051,
      0.9251718859622268,
      -0.35740674433659325,
      0.21806510477567925,
      0.9675382212353983,
      -0.270976571635189,
      -0.7445208382054341,
      0.5638697904486415,
      0.7445208382054341,
      0.270976571635189,
      0.6101314768988051,
      -0.4361302095513585,
      0.5054494651244236,
      -0.5054494651244236,
      0.4361302095513585,
      0.7819348952243207,
      -0.5638697904486415,
      0.35740674433659325,
      0.48904167641086826,
      -0.8628562094610168,
      -0.21806510477567925,
      -0.9675382212353983,
      -0.9251718859622268,
      -0.872260419102717,
      0.8348463620838305,
      0.2527247325622118,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      3,
      5,
      8,
      9,
      10,
      8,
      11,
      12,
      8,
      13,
      14,
      8,
      15,
      10,
      16,
      17,
      12,
      18,
      19,
      20,
      18,
      21,
      22,
      18,
      21,
      23,
      18,
      24,
      23,
      16,
      25,
      20,
      4,
      24,
      22,
      16,
      26,
      27,
      16,
      28,
      29,
      4,
      30,
      31,
      4,
      32,
      27,
      4,
      8,
      29,
      28,
      33,
      0,
      28,
      34,
      35,
      28,
      0,
      0,
      36
    ],
    [
      1,
      2,
      3,
      3,
      4,
      0,
      6,
      5,
      0,
      7,
      1,
      0,
      1,
      8,
      9,
      2,
      6,
      10,
      2,
      11,
      5,
      3,
      12,
      13,
      14,
      9,
      4,
      8,
      15,
      4,
      17,
      16,
      5,
      15,
      18,
      6,
      16,
      13,
      7,
      12,
      19,
      7,
      8,
      19,
      20,
      9,
      18,
      11,
      10,
      17,
      12,
      10,
      21,
      16,
      11,
      15,
      22,
      13,
      20,
      14,
      19,
      23,
      14,
      22,
      23,
      17,
      23,
      21,
      18,
      20,
      21,
      22
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      3,
      2,
      1,
      3,
      5,
      0,
      4,
      6,
      1,
      0,
      6,
      4,
      1,
      7,
      3,
      8,
      5,
      3,
      8,
      0,
      5,
      9,
      1,
      6,
      10,
      6,
      0,
      11,
      7,
      1,
      11,
      3,
      7,
      3,
      12,
      8,
      8,
      10,
      0,
      9,
      11,
      1,
      6,
      11,
      9,
      10,
      8,
      6,
      11,
      12,
      3,
      11,
      8,
      12,
      13,
      11,
      6,
      13,
      6,
      8,
      11,
      13,
      8
    ],
    [
      8,
      3,
      8,
      3,
      3,
      1,
      8,
      3,
      3,
      1,
      3,
      1,
      8,
      3,
      3,
      1,
      8,
      3,
      3,
      1,
      3,
      1,
      8,
      3,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      4,
      9,
      15,
      11,
      6,
      2,
      0,
      2,
      5,
      10,
      16,
      12,
      7,
      3,
      0,
      3,
      1,
      1,
      3,
      7,
      13,
      19,
      14,
      8,
      4,
      2,
      6,
      5,
      4,
      8,
      9,
      5,
      6,
      11,
      18,
      22,
      21,
      17,
      10,
      7,
      12,
      13,
      8,
      14,
      20,
      23,
      22,
      18,
      15,
      9,
      10,
      17,
      16,
      11,
      15,
      18,
      12,
      16,
      17,
      21,
      23,
      20,
      19,
      13,
      14,
      19,
      20,
      21,
      22,
      23
    ]
  ],
  [
    [
      20,
      48,
      26,
      72,
      3
    ],
    [
      3,
      4,
      3,
      2,
      1,
      3,
      1
    ],
    [
      1,
      8,
      3,
      4,
      1,
      6,
      1
    ],
    [
      0,
      1,
      0.8305094691505864,
      0.5570045077476583,
      0.518049755046804,
      0.6491305181893201,
      -0.7696968212319446,
      0.3119499667161845,
      0.17404146924535144,
      0.7404992487087236,
      0.8913221170692281,
      -0.32898647675702497,
      -0.25164706618514077,
      0.9610804849055047,
      0.1140090154953167,
      0.6159262346261405,
      -0.2688786643842915,
      -0.7088841733133029,
      0.623899933432369,
      0.23485411716399315,
      -0.1454917357959597,
      0.271917948824688,
      0.9239939896697889,
      0.12162529583728349,
      -0.7719819690093667,
      -0.9234674078377488,
      0.3550212690480776,
      -0.04054176527909449,
      0.3802518538050287,
      -0.055894107026467604,
      -0.8749378802417186,
      0.4809984974174472,
      -0.27683648971686214,
      0.8318665779098254,
      0.3935432446619715,
      -0.8479879793395777,
      0.789967703871492,
      0.4306070763226663,
      0.22149774612617082,
      0.5536729794337243,
      0.03800300516510556,
      -0.49141972424130803,
      0.562987913525534,
      0.6644932383785125,
      -0.8255909282584123,
      -0.562987913525534,
      -0.7123621069317025,
      -0.2258073620523984,
      -0.9486568313694702,
      0.2258073620523984,
      0.8255909282584123,
      -0.03800300516510556,
      0.49141972424130803,
      -0.6644932383785125,
      0.9486568313694702,
      -0.22149774612617082,
      0.7123621069317025,
      -0.3935432446619715,
      -0.3550212690480776,
      0.8479879793395777,
      -0.4306070763226663,
      0.8749378802417186,
      -0.5536729794337243,
      -0.8318665779098254,
      -0.789967703871492,
      -0.3802518538050287,
      -0.4809984974174472,
      0.9234674078377488,
      0.1454917357959597,
      0.055894107026467604,
      0.27683648971686214,
      0.04054176527909449,
      -0.9239939896697889,
      -0.23485411716399315,
      -0.9610804849055047,
      -0.271917948824688,
      0.2688786643842915,
      -0.12162529583728349,
      -0.623899933432369,
      0.7719819690093667,
      0.25164706618514077,
      -0.1140090154953167,
      -0.6159262346261405,
      -0.7404992487087236,
      0.7088841733133029,
      0.32898647675702497,
      -0.8913221170692281,
      -0.3119499667161845,
      -0.17404146924535144,
      -0.6491305181893201,
      0.7696968212319446,
      -0.5570045077476583,
      -0.518049755046804,
      -0.8305094691505864,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      7,
      11,
      12,
      13,
      14,
      15,
      16,
      9,
      17,
      18,
      11,
      19,
      13,
      20,
      21,
      16,
      22,
      23,
      18,
      24,
      25,
      26,
      20,
      27,
      28,
      22,
      29,
      30,
      31,
      32,
      33,
      31,
      34,
      26,
      35,
      36,
      28,
      31,
      37,
      30,
      38,
      39,
      33,
      40,
      41,
      42,
      43,
      44,
      45,
      40,
      46,
      47,
      43,
      48,
      49,
      38,
      50,
      42,
      51,
      52,
      45,
      53,
      54,
      47,
      55,
      56,
      49,
      53,
      57,
      58,
      59,
      60,
      61,
      55,
      62,
      63,
      51,
      64,
      65,
      66,
      67,
      58,
      68,
      69,
      61,
      66,
      70,
      63,
      66,
      71,
      65,
      72,
      73,
      74,
      68,
      75,
      76,
      72,
      77,
      78,
      79,
      80,
      74,
      81,
      82,
      76,
      83,
      84,
      78,
      85,
      86,
      87,
      85,
      88,
      89,
      83,
      90,
      87,
      91,
      92,
      89,
      91,
      93,
      0,
      91,
      0,
      0,
      94
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      6,
      8,
      0,
      1,
      9,
      10,
      1,
      11,
      9,
      2,
      12,
      3,
      2,
      13,
      14,
      3,
      15,
      11,
      5,
      16,
      4,
      18,
      17,
      4,
      8,
      19,
      5,
      21,
      20,
      6,
      17,
      22,
      7,
      22,
      21,
      7,
      23,
      19,
      8,
      9,
      24,
      25,
      10,
      26,
      13,
      10,
      25,
      26,
      11,
      15,
      27,
      12,
      28,
      29,
      12,
      14,
      28,
      13,
      30,
      14,
      15,
      29,
      31,
      33,
      32,
      16,
      32,
      18,
      16,
      18,
      34,
      17,
      35,
      33,
      19,
      21,
      36,
      20,
      37,
      23,
      20,
      34,
      38,
      22,
      37,
      35,
      23,
      24,
      39,
      25,
      24,
      27,
      40,
      26,
      41,
      30,
      27,
      31,
      40,
      28,
      42,
      43,
      29,
      43,
      31,
      30,
      41,
      42,
      45,
      44,
      32,
      35,
      45,
      33,
      44,
      38,
      34,
      38,
      46,
      36,
      46,
      37,
      36,
      39,
      47,
      41,
      39,
      40,
      47,
      42,
      47,
      43,
      45,
      46,
      44
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      7,
      3,
      4,
      5,
      1,
      0,
      8,
      4,
      5,
      9,
      2,
      7,
      6,
      3,
      10,
      0,
      6,
      9,
      7,
      2,
      11,
      5,
      4,
      12,
      8,
      0,
      13,
      4,
      8,
      14,
      9,
      5,
      7,
      15,
      6,
      10,
      12,
      0,
      6,
      16,
      10,
      9,
      14,
      7,
      11,
      17,
      5,
      4,
      13,
      11,
      12,
      13,
      8,
      5,
      18,
      14,
      19,
      15,
      7,
      16,
      6,
      15,
      16,
      12,
      10,
      20,
      7,
      14,
      13,
      17,
      11,
      18,
      5,
      17,
      21,
      13,
      12,
      22,
      14,
      18,
      19,
      16,
      15,
      7,
      20,
      19,
      16,
      21,
      12,
      14,
      22,
      20,
      13,
      23,
      17,
      17,
      22,
      18,
      21,
      24,
      13,
      25,
      16,
      19,
      22,
      19,
      20,
      24,
      21,
      16,
      24,
      23,
      13,
      22,
      17,
      23,
      25,
      24,
      16,
      19,
      22,
      25,
      24,
      22,
      23,
      22,
      24,
      25
    ],
    [
      8,
      3,
      4,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      8,
      3,
      6,
      1,
      8,
      3,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      8,
      3,
      6,
      1,
      4,
      1,
      8,
      3,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      4,
      1,
      8,
      3,
      4,
      1,
      6,
      1,
      4,
      1
    ],
    [
      0,
      1,
      4,
      10,
      17,
      13,
      7,
      2,
      0,
      2,
      6,
      3,
      0,
      3,
      8,
      11,
      5,
      1,
      1,
      5,
      9,
      4,
      2,
      7,
      14,
      21,
      12,
      6,
      3,
      6,
      12,
      20,
      29,
      23,
      15,
      8,
      4,
      9,
      16,
      25,
      18,
      10,
      5,
      11,
      19,
      27,
      33,
      24,
      16,
      9,
      7,
      13,
      22,
      14,
      8,
      15,
      19,
      11,
      10,
      18,
      26,
      17,
      12,
      21,
      28,
      20,
      13,
      17,
      26,
      34,
      30,
      22,
      14,
      22,
      30,
      38,
      42,
      36,
      28,
      21,
      15,
      23,
      31,
      35,
      27,
      19,
      16,
      24,
      32,
      25,
      18,
      25,
      32,
      39,
      44,
      41,
      34,
      26,
      20,
      28,
      36,
      43,
      37,
      29,
      23,
      29,
      37,
      31,
      24,
      33,
      40,
      45,
      39,
      32,
      27,
      35,
      40,
      33,
      30,
      34,
      41,
      38,
      31,
      37,
      43,
      46,
      47,
      45,
      40,
      35,
      36,
      42,
      46,
      43,
      38,
      41,
      44,
      47,
      46,
      42,
      39,
      45,
      47,
      44
    ]
  ],
  [
    [
      21,
      24,
      18,
      48,
      4
    ],
    [
      4,
      2,
      1,
      4,
      3,
      3,
      2,
      4,
      2
    ],
    [
      1,
      4,
      1,
      8,
      3,
      4,
      3,
      8,
      5
    ],
    [
      0,
      1,
      0.9968739365156104,
      0.07900857355927175,
      -0.8508851285069632,
      -0.5193766873761451,
      0.0729944040043236,
      -0.994197898955828,
      0.4556778363694134,
      0.8866314650100228,
      0.1459888080086472,
      -0.8419828528814565,
      0.04275913188839181,
      0.46049571322036414,
      0.4254425642534816,
      -0.7790650310642177,
      -0.3952072921375498,
      0.3672547776338777,
      0.528672240373737,
      -0.10756643394580517,
      -0.881120400622895,
      0.8081259966185713,
      -0.3672547776338777,
      -0.8081259966185713,
      -0.46049571322036414,
      0.3952072921375498,
      0.8419828528814565,
      0.881120400622895,
      0.10756643394580517,
      -0.528672240373737,
      -0.04275913188839181,
      -0.8866314650100228,
      -0.4254425642534816,
      0.7790650310642177,
      -0.1459888080086472,
      0.5193766873761451,
      -0.4556778363694134,
      -0.07900857355927175,
      0.8508851285069632,
      -0.0729944040043236,
      0.994197898955828,
      -0.9968739365156104,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      9,
      13,
      14,
      15,
      13,
      16,
      17,
      11,
      18,
      19,
      11,
      20,
      19,
      13,
      21,
      22,
      13,
      23,
      17,
      24,
      25,
      22,
      26,
      27,
      28,
      24,
      29,
      28,
      26,
      30,
      31,
      24,
      32,
      33,
      24,
      34,
      35,
      26,
      36,
      31,
      37,
      38,
      35,
      37,
      39,
      40,
      37,
      41,
      0,
      37,
      0,
      0,
      42
    ],
    [
      1,
      2,
      3,
      4,
      6,
      3,
      5,
      0,
      5,
      8,
      7,
      0,
      10,
      1,
      9,
      0,
      9,
      8,
      11,
      0,
      1,
      7,
      12,
      2,
      1,
      13,
      12,
      10,
      2,
      14,
      5,
      15,
      2,
      16,
      4,
      14,
      3,
      11,
      17,
      4,
      3,
      13,
      17,
      6,
      4,
      16,
      9,
      18,
      15,
      6,
      19,
      5,
      20,
      10,
      19,
      6,
      8,
      21,
      16,
      7,
      12,
      21,
      19,
      7,
      22,
      14,
      11,
      8,
      18,
      10,
      20,
      9,
      17,
      22,
      20,
      11,
      12,
      13,
      15,
      23,
      13,
      18,
      23,
      17,
      14,
      23,
      15,
      22,
      16,
      23,
      18,
      21,
      21,
      20,
      22,
      19
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      4,
      5,
      2,
      1,
      8,
      9,
      3,
      2,
      5,
      10,
      6,
      0,
      3,
      11,
      12,
      4,
      7,
      5,
      10,
      1,
      6,
      9,
      8,
      7,
      5,
      13,
      8,
      2,
      1,
      14,
      12,
      4,
      9,
      5,
      13,
      3,
      12,
      11,
      6,
      10,
      14,
      1,
      11,
      3,
      8,
      15,
      5,
      7,
      12,
      16,
      1,
      10,
      15,
      5,
      9,
      6,
      12,
      14,
      8,
      13,
      12,
      17,
      3,
      13,
      11,
      1,
      16,
      6,
      3,
      17,
      8,
      14,
      8,
      16,
      12,
      15,
      6,
      17,
      12,
      15,
      8,
      17,
      6,
      16
    ],
    [
      4,
      1,
      8,
      3,
      4,
      3,
      8,
      5,
      4,
      3,
      8,
      3,
      8,
      5,
      4,
      3,
      8,
      3,
      4,
      1,
      4,
      3,
      4,
      1,
      8,
      3,
      4,
      1,
      4,
      3,
      4,
      1,
      4,
      3,
      4,
      1
    ],
    [
      0,
      1,
      5,
      2,
      0,
      2,
      7,
      15,
      19,
      13,
      10,
      3,
      0,
      3,
      9,
      4,
      0,
      4,
      11,
      18,
      20,
      13,
      6,
      1,
      1,
      6,
      10,
      3,
      1,
      3,
      9,
      11,
      16,
      14,
      7,
      5,
      2,
      5,
      12,
      19,
      23,
      22,
      16,
      8,
      2,
      8,
      14,
      7,
      4,
      9,
      17,
      20,
      23,
      21,
      14,
      8,
      4,
      8,
      16,
      11,
      5,
      7,
      15,
      12,
      6,
      13,
      19,
      12,
      6,
      12,
      15,
      21,
      22,
      18,
      17,
      10,
      9,
      11,
      18,
      17,
      10,
      13,
      20,
      17,
      14,
      21,
      22,
      16,
      15,
      21,
      23,
      19,
      18,
      22,
      23,
      20
    ]
  ],
  [
    [
      22,
      12,
      20,
      30,
      5
    ],
    [
      1,
      5,
      1,
      2,
      1,
      3,
      1
    ],
    [
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.8944271909999159,
      0.4472135954999579,
      0.276393202250021,
      0.8506508083520399,
      -0.7236067977499789,
      0.5257311121191336,
      -0.5257311121191336,
      -0.8506508083520399,
      0.7236067977499789,
      -0.4472135954999579,
      -0.276393202250021,
      -0.8944271909999159,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      6,
      8,
      3,
      4,
      9,
      3,
      10,
      7,
      11,
      10,
      8,
      11,
      12,
      5,
      11,
      13,
      0,
      11,
      12,
      9,
      11,
      0,
      0,
      14
    ],
    [
      1,
      2,
      3,
      4,
      5,
      5,
      7,
      6,
      2,
      0,
      1,
      6,
      8,
      3,
      0,
      2,
      8,
      9,
      4,
      0,
      3,
      9,
      10,
      5,
      0,
      4,
      10,
      7,
      1,
      0,
      1,
      7,
      11,
      8,
      2,
      1,
      5,
      10,
      11,
      6,
      2,
      6,
      11,
      9,
      3,
      3,
      8,
      11,
      10,
      4,
      4,
      9,
      11,
      7,
      5,
      7,
      10,
      9,
      8,
      6
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      0,
      4,
      7,
      8,
      9,
      1,
      0,
      9,
      10,
      11,
      2,
      1,
      11,
      12,
      13,
      3,
      2,
      13,
      14,
      5,
      4,
      3,
      6,
      15,
      16,
      8,
      7,
      5,
      14,
      17,
      15,
      6,
      8,
      16,
      18,
      10,
      9,
      10,
      18,
      19,
      12,
      11,
      12,
      19,
      17,
      14,
      13,
      17,
      19,
      18,
      16,
      15
    ],
    [
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      3,
      0,
      3,
      4,
      0,
      4,
      5,
      0,
      5,
      1,
      1,
      5,
      7,
      1,
      7,
      6,
      1,
      6,
      2,
      2,
      6,
      8,
      2,
      8,
      3,
      3,
      8,
      9,
      3,
      9,
      4,
      4,
      9,
      10,
      4,
      10,
      5,
      5,
      10,
      7,
      6,
      7,
      11,
      6,
      11,
      8,
      7,
      10,
      11,
      8,
      11,
      9,
      9,
      11,
      10
    ]
  ],
  [
    [
      23,
      20,
      12,
      30,
      3
    ],
    [
      1,
      3,
      1,
      2,
      1,
      5,
      1
    ],
    [
      1,
      5,
      1,
      5,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.6666666666666666,
      0.7453559924999299,
      -0.3333333333333333,
      0.5773502691896257,
      -0.5773502691896257,
      0.3333333333333333,
      -0.872677996249965,
      0.35682208977308993,
      0.12732200375003505,
      0.9341723589627157,
      -0.9341723589627157,
      -0.35682208977308993,
      0.872677996249965,
      -0.7453559924999299,
      -0.12732200375003505,
      -0.6666666666666666,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      4,
      6,
      3,
      3,
      5,
      7,
      3,
      6,
      7,
      8,
      9,
      7,
      10,
      11,
      7,
      10,
      12,
      7,
      8,
      13,
      7,
      14,
      9,
      4,
      14,
      13,
      4,
      15,
      5,
      4,
      16,
      11,
      4,
      16,
      12,
      4,
      15,
      6,
      4,
      7,
      5,
      15,
      7,
      6,
      15,
      17,
      0,
      15,
      0,
      0,
      18
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      9,
      8,
      0,
      1,
      10,
      7,
      1,
      8,
      11,
      2,
      12,
      9,
      2,
      4,
      13,
      3,
      14,
      5,
      3,
      6,
      15,
      11,
      16,
      4,
      17,
      10,
      5,
      13,
      18,
      6,
      16,
      12,
      7,
      15,
      17,
      8,
      18,
      14,
      9,
      10,
      19,
      13,
      11,
      14,
      19,
      12,
      19,
      15,
      17,
      18,
      16
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      7,
      3,
      4,
      8,
      1,
      0,
      6,
      4,
      5,
      7,
      2,
      1,
      8,
      5,
      9,
      6,
      3,
      9,
      3,
      7,
      10,
      8,
      4,
      10,
      4,
      6,
      11,
      7,
      5,
      11,
      5,
      8,
      9,
      10,
      6,
      7,
      11,
      9,
      10,
      11,
      8,
      11,
      10,
      9
    ],
    [
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1
    ],
    [
      0,
      1,
      4,
      7,
      2,
      0,
      2,
      6,
      9,
      3,
      0,
      3,
      8,
      5,
      1,
      1,
      5,
      11,
      10,
      4,
      2,
      7,
      13,
      12,
      6,
      3,
      9,
      15,
      14,
      8,
      4,
      10,
      16,
      13,
      7,
      5,
      8,
      14,
      17,
      11,
      6,
      12,
      18,
      15,
      9,
      10,
      11,
      17,
      19,
      16,
      12,
      13,
      16,
      19,
      18,
      14,
      15,
      18,
      19,
      17
    ]
  ],
  [
    [
      24,
      30,
      32,
      60,
      4
    ],
    [
      1,
      2,
      1,
      3,
      1,
      5,
      1
    ],
    [
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.5877852522924731,
      0.8090169943749475,
      0.2628655560595668,
      0.5257311121191336,
      -0.5877852522924731,
      -0.2628655560595668,
      -0.5257311121191336,
      0.9510565162951535,
      0.30901699437494745,
      0.6881909602355868,
      0.5,
      -0.16245984811645317,
      0.8506508083520399,
      0.42532540417602,
      -0.9510565162951535,
      -0.6881909602355868,
      0.16245984811645317,
      -0.8506508083520399,
      -0.42532540417602,
      -0.30901699437494745,
      -0.8090169943749475,
      -0.5,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      0,
      3,
      7,
      8,
      3,
      9,
      0,
      10,
      11,
      8,
      12,
      13,
      14,
      12,
      15,
      14,
      10,
      16,
      0,
      10,
      17,
      5,
      12,
      18,
      19,
      12,
      20,
      19,
      10,
      9,
      0,
      21,
      14,
      5,
      0,
      5,
      19,
      0,
      8,
      14,
      0,
      15,
      14,
      21,
      16,
      0,
      21,
      19,
      8,
      0,
      20,
      19,
      21,
      2,
      0,
      22,
      11,
      8,
      23,
      18,
      19,
      23,
      17,
      5,
      23,
      13,
      14,
      23,
      4,
      5,
      22,
      6,
      0,
      22,
      7,
      8,
      22,
      0,
      0,
      24
    ],
    [
      1,
      2,
      3,
      4,
      6,
      5,
      2,
      0,
      1,
      8,
      7,
      0,
      10,
      9,
      4,
      0,
      3,
      12,
      11,
      0,
      1,
      6,
      13,
      14,
      1,
      11,
      15,
      5,
      2,
      8,
      16,
      10,
      2,
      14,
      17,
      7,
      3,
      10,
      18,
      19,
      3,
      7,
      16,
      9,
      4,
      12,
      15,
      6,
      4,
      19,
      20,
      11,
      22,
      21,
      14,
      5,
      13,
      17,
      8,
      5,
      11,
      23,
      22,
      6,
      25,
      24,
      10,
      7,
      14,
      26,
      25,
      8,
      24,
      27,
      19,
      9,
      18,
      20,
      12,
      9,
      19,
      28,
      23,
      12,
      13,
      22,
      29,
      26,
      13,
      15,
      23,
      21,
      15,
      20,
      28,
      22,
      16,
      25,
      27,
      18,
      16,
      17,
      26,
      24,
      17,
      21,
      29,
      25,
      18,
      24,
      29,
      28,
      20,
      27,
      29,
      23,
      28,
      27,
      26,
      21
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      5,
      6,
      1,
      0,
      7,
      8,
      2,
      1,
      8,
      9,
      3,
      2,
      4,
      10,
      11,
      5,
      3,
      12,
      10,
      4,
      6,
      13,
      14,
      1,
      5,
      15,
      13,
      6,
      7,
      16,
      17,
      8,
      1,
      14,
      16,
      7,
      9,
      18,
      12,
      3,
      8,
      19,
      18,
      9,
      20,
      21,
      11,
      10,
      21,
      15,
      5,
      11,
      18,
      22,
      10,
      12,
      23,
      16,
      14,
      13,
      21,
      24,
      13,
      15,
      25,
      26,
      17,
      16,
      26,
      19,
      8,
      17,
      26,
      27,
      18,
      19,
      20,
      28,
      29,
      21,
      10,
      22,
      28,
      20,
      18,
      27,
      28,
      22,
      23,
      30,
      25,
      16,
      13,
      24,
      30,
      23,
      21,
      29,
      30,
      24,
      25,
      30,
      31,
      26,
      26,
      31,
      28,
      27,
      31,
      30,
      29,
      28
    ],
    [
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      7,
      10,
      3,
      0,
      3,
      4,
      0,
      4,
      11,
      6,
      1,
      1,
      6,
      5,
      1,
      5,
      14,
      8,
      2,
      2,
      8,
      7,
      3,
      10,
      9,
      3,
      9,
      19,
      12,
      4,
      4,
      12,
      11,
      5,
      6,
      15,
      22,
      13,
      5,
      13,
      14,
      6,
      11,
      15,
      7,
      8,
      17,
      25,
      16,
      7,
      16,
      10,
      8,
      14,
      17,
      9,
      10,
      16,
      24,
      18,
      9,
      18,
      19,
      11,
      12,
      20,
      23,
      15,
      12,
      19,
      20,
      13,
      22,
      21,
      13,
      21,
      26,
      17,
      14,
      15,
      23,
      22,
      16,
      25,
      24,
      17,
      26,
      25,
      18,
      24,
      27,
      18,
      27,
      28,
      20,
      19,
      20,
      28,
      23,
      21,
      22,
      23,
      28,
      29,
      21,
      29,
      26,
      24,
      25,
      26,
      29,
      27,
      27,
      29,
      28
    ]
  ],
  [
    [
      25,
      60,
      32,
      90,
      3
    ],
    [
      2,
      2,
      1,
      5,
      1,
      3,
      1
    ],
    [
      1,
      6,
      1,
      6,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.39524806720177696,
      0.9185744201605331,
      -0.22278592154811785,
      0.3264773618288047,
      -0.14409659571485464,
      -0.36804511371587334,
      0.5677102128554361,
      0.7557232604815993,
      0.4954282110053231,
      0.7868250644266074,
      -0.5896684388110903,
      0.2849096099417361,
      -0.05032377589445875,
      0.6529547236576094,
      0.16209487767198974,
      -0.5955095033856032,
      -0.5109791129778272,
      -0.40961286560294197,
      0.8403525023126412,
      0.4611227450687398,
      0.3449242913073182,
      0.6742976806421324,
      0.7680705004625282,
      0.49222454901374796,
      -0.6439521587040683,
      0.5856966882684098,
      -0.733765034525945,
      -0.08313550377413725,
      -0.310618825370735,
      0.8131610779381396,
      0.1014038337958616,
      -0.8645416449424017,
      -0.5716701568539553,
      -0.6786450071597404,
      0.7860687824196634,
      0.19762403360088848,
      0.9405326461161874,
      0.32937338933481414,
      0.479877309032819,
      0.7073794565864001,
      -0.8423324743119008,
      0.5184386528792102,
      0.14730025770642974,
      -0.9321453501337775,
      -0.15039353916333686,
      -0.1756658076452342,
      0.97336743221867,
      0.3740461232530668,
      -0.9061093968294703,
      -0.2654786834671109,
      -0.8319652063302315,
      -0.5184386528792102,
      0.8319652063302315,
      -0.19762403360088848,
      0.9864290700267555,
      -0.06587467786696283,
      0.21958225955654276,
      0.06587467786696283,
      0.8423324743119008,
      -0.14730025770642974,
      -0.7073794565864001,
      0.6786450071597404,
      -0.9864290700267555,
      0.15039353916333686,
      -0.3740461232530668,
      0.9061093968294703,
      0.1756658076452342,
      -0.97336743221867,
      -0.21958225955654276,
      -0.7860687824196634,
      -0.5856966882684098,
      0.5716701568539553,
      -0.4611227450687398,
      0.9321453501337775,
      -0.32937338933481414,
      0.2654786834671109,
      0.6439521587040683,
      -0.49222454901374796,
      -0.7680705004625282,
      0.40961286560294197,
      -0.9405326461161874,
      0.08313550377413725,
      -0.1014038337958616,
      0.8645416449424017,
      -0.492224549013748,
      0.310618825370735,
      -0.8131610779381396,
      -0.479877309032819,
      -0.8403525023126412,
      -0.2849096099417361,
      0.5109791129778272,
      -0.7557232604815993,
      0.733765034525945,
      -0.6742976806421324,
      0.58966843881109,
      -0.284909609941736,
      -0.755723260481599,
      -0.4954282110053231,
      0.36804511371587334,
      -0.7868250644266074,
      -0.16209487767199,
      0.595509503385603,
      -0.786825064426607,
      0.05032377589445875,
      -0.6529547236576094,
      -0.3449242913073182,
      -0.6529547236576095,
      -0.56771021285544,
      -0.3264773618288,
      -0.7557232604816,
      0.14409659571485464,
      -0.9185744201605331,
      0.22278592154812,
      -0.9185744201605,
      -0.39524806720177696,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      7,
      11,
      12,
      13,
      9,
      14,
      15,
      9,
      16,
      17,
      11,
      18,
      19,
      9,
      20,
      13,
      21,
      22,
      15,
      23,
      24,
      19,
      25,
      26,
      27,
      25,
      28,
      29,
      23,
      30,
      31,
      25,
      32,
      33,
      25,
      34,
      35,
      21,
      36,
      27,
      37,
      38,
      29,
      39,
      40,
      31,
      39,
      41,
      35,
      37,
      42,
      43,
      44,
      45,
      46,
      39,
      47,
      48,
      44,
      49,
      50,
      37,
      51,
      50,
      39,
      52,
      53,
      37,
      54,
      43,
      55,
      56,
      46,
      57,
      58,
      48,
      59,
      60,
      53,
      61,
      62,
      63,
      55,
      64,
      65,
      59,
      66,
      67,
      55,
      68,
      69,
      61,
      70,
      69,
      57,
      71,
      72,
      55,
      73,
      63,
      74,
      75,
      65,
      76,
      77,
      67,
      76,
      78,
      72,
      79,
      80,
      81,
      79,
      82,
      83,
      76,
      84,
      85,
      86,
      87,
      88,
      79,
      89,
      88,
      76,
      90,
      91,
      74,
      92,
      81,
      93,
      94,
      83,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      93,
      107,
      108,
      95,
      109,
      110,
      111,
      112,
      100,
      113,
      114,
      110,
      115,
      116,
      0,
      113,
      0,
      0,
      117
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      9,
      8,
      0,
      1,
      10,
      11,
      1,
      8,
      12,
      2,
      13,
      14,
      2,
      11,
      15,
      3,
      16,
      5,
      3,
      14,
      17,
      19,
      18,
      4,
      20,
      7,
      4,
      21,
      19,
      5,
      15,
      22,
      6,
      23,
      9,
      6,
      24,
      13,
      7,
      26,
      25,
      8,
      27,
      26,
      9,
      10,
      28,
      20,
      10,
      12,
      29,
      11,
      18,
      30,
      12,
      25,
      31,
      13,
      32,
      33,
      14,
      33,
      27,
      15,
      30,
      34,
      16,
      35,
      21,
      16,
      17,
      36,
      17,
      23,
      37,
      39,
      38,
      18,
      31,
      39,
      19,
      40,
      24,
      20,
      41,
      29,
      21,
      34,
      42,
      22,
      43,
      23,
      22,
      44,
      32,
      24,
      36,
      45,
      25,
      46,
      35,
      26,
      47,
      46,
      27,
      28,
      48,
      40,
      28,
      29,
      49,
      30,
      38,
      44,
      31,
      45,
      50,
      32,
      51,
      43,
      33,
      42,
      47,
      34,
      40,
      52,
      35,
      53,
      41,
      36,
      37,
      54,
      37,
      43,
      55,
      49,
      56,
      38,
      50,
      48,
      39,
      57,
      49,
      41,
      52,
      58,
      42,
      56,
      51,
      44,
      54,
      57,
      45,
      55,
      53,
      46,
      58,
      54,
      47,
      48,
      59,
      52,
      50,
      53,
      59,
      51,
      59,
      55,
      57,
      58,
      56
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      7,
      3,
      4,
      8,
      1,
      0,
      9,
      4,
      5,
      7,
      2,
      1,
      10,
      5,
      11,
      6,
      3,
      9,
      0,
      6,
      12,
      3,
      7,
      13,
      8,
      4,
      10,
      1,
      8,
      13,
      4,
      9,
      14,
      7,
      5,
      15,
      5,
      10,
      11,
      16,
      6,
      3,
      12,
      11,
      6,
      16,
      9,
      7,
      17,
      12,
      13,
      18,
      8,
      8,
      19,
      10,
      9,
      20,
      13,
      14,
      17,
      7,
      5,
      15,
      14,
      10,
      19,
      15,
      21,
      16,
      11,
      22,
      11,
      12,
      20,
      9,
      16,
      22,
      12,
      17,
      23,
      18,
      13,
      19,
      8,
      18,
      23,
      13,
      20,
      24,
      17,
      14,
      24,
      14,
      15,
      25,
      15,
      19,
      21,
      26,
      16,
      11,
      22,
      21,
      16,
      26,
      20,
      17,
      27,
      22,
      23,
      28,
      18,
      18,
      28,
      19,
      20,
      26,
      23,
      24,
      27,
      17,
      15,
      25,
      24,
      19,
      28,
      25,
      29,
      26,
      21,
      29,
      21,
      22,
      29,
      22,
      27,
      30,
      28,
      23,
      30,
      23,
      26,
      31,
      27,
      24,
      31,
      24,
      25,
      31,
      25,
      28,
      29,
      30,
      26,
      27,
      31,
      29,
      30,
      31,
      28,
      31,
      30,
      29
    ],
    [
      6,
      1,
      6,
      1,
      5,
      1,
      6,
      1,
      5,
      1,
      6,
      1,
      5,
      1,
      6,
      1,
      6,
      1,
      6,
      1,
      5,
      1,
      6,
      1,
      5,
      1,
      6,
      1,
      5,
      1,
      6,
      1,
      6,
      1,
      6,
      1,
      5,
      1,
      6,
      1,
      5,
      1,
      5,
      1,
      6,
      1,
      6,
      1,
      6,
      1,
      5,
      1,
      6,
      1,
      5,
      1,
      6,
      1,
      6,
      1,
      5,
      1,
      6,
      1
    ],
    [
      0,
      1,
      4,
      11,
      7,
      2,
      0,
      2,
      6,
      14,
      9,
      3,
      0,
      3,
      8,
      5,
      1,
      1,
      5,
      12,
      19,
      10,
      4,
      2,
      7,
      15,
      13,
      6,
      3,
      9,
      17,
      26,
      16,
      8,
      4,
      10,
      18,
      20,
      11,
      5,
      8,
      16,
      25,
      21,
      12,
      6,
      13,
      22,
      33,
      23,
      14,
      7,
      11,
      20,
      30,
      24,
      15,
      9,
      14,
      23,
      27,
      17,
      10,
      19,
      29,
      39,
      28,
      18,
      12,
      21,
      31,
      29,
      19,
      13,
      15,
      24,
      34,
      32,
      22,
      16,
      26,
      36,
      35,
      25,
      17,
      27,
      37,
      46,
      36,
      26,
      18,
      28,
      38,
      40,
      30,
      20,
      21,
      25,
      35,
      45,
      41,
      31,
      22,
      32,
      42,
      43,
      33,
      23,
      33,
      43,
      47,
      37,
      27,
      24,
      30,
      40,
      44,
      34,
      28,
      39,
      49,
      48,
      38,
      29,
      31,
      41,
      50,
      49,
      39,
      32,
      34,
      44,
      52,
      51,
      42,
      35,
      36,
      46,
      54,
      53,
      45,
      37,
      47,
      55,
      54,
      46,
      38,
      48,
      56,
      52,
      44,
      40,
      41,
      45,
      53,
      57,
      50,
      42,
      51,
      58,
      55,
      47,
      43,
      48,
      49,
      50,
      57,
      59,
      56,
      51,
      52,
      56,
      59,
      58,
      53,
      54,
      55,
      58,
      59,
      57
    ]
  ],
  [
    [
      26,
      60,
      32,
      90,
      3
    ],
    [
      2,
      2,
      1,
      3,
      1,
      5,
      1
    ],
    [
      1,
      10,
      1,
      10,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.3319544851638724,
      0.943295404303227,
      -0.28607950358602247,
      0.16838140588671455,
      0.16113409191393546,
      -0.29022333580103954,
      0.5829886212909681,
      0.7948408454507542,
      -0.5878317719589689,
      0.1506049078838708,
      -0.41701137870903193,
      0.44082824368491036,
      0.13577502579101014,
      -0.5914331515687812,
      0.8183499926311399,
      0.5546363234425816,
      0.6572159007172045,
      0.6113409191393546,
      -0.7899976947827534,
      -0.04653947597238958,
      -0.3427840992827955,
      0.7132750814831061,
      -0.06639089703277447,
      -0.7885775354250415,
      0.26556358813109787,
      0.9481385549712277,
      0.314431801434409,
      0.5262840255941951,
      0.4628863602868818,
      -0.8153567609056788,
      -0.3477492917401312,
      -0.9462886360286882,
      -0.0753024539419354,
      -0.3935022315286461,
      0.863879989366977,
      -0.09174996315569978,
      0.8816564873698207,
      -0.3681431654057208,
      -0.8063540334278853,
      0.5009249594712698,
      0.9227794888483024,
      0.1659772425819362,
      0.9970067682745388,
      -0.01752268372946338,
      0.4755658933483444,
      0.24020452200817258,
      0.4061817645901088,
      -0.6542226689917433,
      -0.6379726275411707,
      -0.9970067682745388,
      0.0753024539419354,
      0.01752268372946338,
      -0.5497931727745808,
      0.8351170113974311,
      -0.5244341066516556,
      -0.8351170113974311,
      0.5497931727745808,
      0.7519590955983655,
      0.9462886360286882,
      -0.314431801434409,
      0.5244341066516556,
      -0.1659772425819362,
      -0.9481385549712277,
      0.04653947597238958,
      -0.9227794888483024,
      0.3477492917401312,
      -0.7519590955983655,
      0.6379726275411707,
      -0.5009249594712698,
      0.8063540334278853,
      -0.31443180143440896,
      -0.4755658933483445,
      -0.8638799893669769,
      0.3935022315286461,
      0.7899976947827534,
      -0.6113409191393546,
      0.8153567609056788,
      -0.4628863602868818,
      0.6542226689917433,
      -0.4061817645901088,
      0.3681431654057208,
      -0.81834999263114,
      -0.1506049078838708,
      -0.5546363234425816,
      -0.2655635881310979,
      0.7885775354250415,
      -0.5262840255941951,
      -0.713275081483106,
      -0.240204522008173,
      -0.881656487369821,
      -0.406181764590109,
      0.0917499631556998,
      0.342784099282796,
      -0.611340919139355,
      0.5878317719589689,
      -0.7948408454507542,
      0.0663908970327745,
      0.788577535425042,
      -0.657215900717204,
      -0.4408282436849103,
      -0.582988621290968,
      -0.168381405886715,
      -0.794840845450754,
      -0.13577502579101,
      0.591433151568781,
      0.41701137870903,
      -0.44082824368491,
      -0.79484084545075,
      0.28607950358602,
      -0.16838140588671,
      -0.94329540430323,
      -0.33195448516387,
      -0.16113409191394,
      0.29022333580104,
      -0.9432954043032,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      11,
      9,
      12,
      13,
      9,
      14,
      15,
      9,
      16,
      11,
      17,
      18,
      13,
      19,
      20,
      21,
      19,
      22,
      23,
      19,
      24,
      25,
      19,
      26,
      25,
      17,
      27,
      21,
      28,
      29,
      23,
      30,
      31,
      32,
      30,
      33,
      34,
      28,
      35,
      36,
      28,
      37,
      38,
      30,
      39,
      40,
      30,
      41,
      40,
      28,
      42,
      32,
      43,
      44,
      34,
      45,
      46,
      36,
      43,
      47,
      38,
      48,
      49,
      50,
      48,
      51,
      52,
      53,
      54,
      55,
      53,
      56,
      57,
      43,
      58,
      57,
      45,
      59,
      50,
      43,
      60,
      52,
      61,
      62,
      55,
      63,
      64,
      65,
      61,
      66,
      67,
      63,
      68,
      69,
      63,
      70,
      71,
      72,
      73,
      74,
      63,
      75,
      74,
      72,
      76,
      65,
      77,
      78,
      67,
      79,
      80,
      69,
      81,
      82,
      71,
      79,
      83,
      84,
      85,
      86,
      87,
      85,
      88,
      89,
      79,
      90,
      91,
      92,
      93,
      91,
      79,
      94,
      89,
      95,
      96,
      84,
      97,
      98,
      99,
      95,
      100,
      101,
      95,
      102,
      103,
      104,
      105,
      106,
      104,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      0,
      112,
      114,
      115,
      116,
      0,
      0,
      117
    ],
    [
      1,
      2,
      3,
      3,
      4,
      0,
      6,
      5,
      0,
      7,
      1,
      0,
      1,
      8,
      9,
      2,
      6,
      10,
      2,
      11,
      5,
      3,
      12,
      13,
      14,
      9,
      4,
      8,
      15,
      4,
      17,
      16,
      5,
      19,
      18,
      6,
      20,
      13,
      7,
      12,
      21,
      7,
      8,
      22,
      23,
      9,
      24,
      25,
      10,
      17,
      26,
      10,
      27,
      16,
      11,
      19,
      28,
      11,
      25,
      18,
      12,
      26,
      29,
      13,
      30,
      31,
      31,
      23,
      14,
      22,
      32,
      14,
      33,
      25,
      15,
      24,
      19,
      15,
      29,
      20,
      16,
      35,
      34,
      17,
      37,
      36,
      18,
      26,
      38,
      20,
      39,
      31,
      21,
      30,
      22,
      21,
      23,
      40,
      41,
      24,
      42,
      43,
      27,
      35,
      44,
      27,
      36,
      34,
      28,
      37,
      35,
      28,
      45,
      36,
      29,
      46,
      47,
      30,
      48,
      49,
      50,
      41,
      32,
      40,
      42,
      32,
      41,
      43,
      33,
      42,
      51,
      33,
      53,
      52,
      34,
      51,
      54,
      37,
      52,
      47,
      38,
      46,
      48,
      38,
      47,
      49,
      39,
      48,
      55,
      39,
      40,
      55,
      56,
      43,
      54,
      45,
      44,
      53,
      46,
      44,
      57,
      52,
      45,
      51,
      58,
      49,
      56,
      50,
      55,
      59,
      50,
      58,
      59,
      53,
      59,
      57,
      54,
      56,
      57,
      58
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      3,
      2,
      1,
      3,
      5,
      0,
      4,
      6,
      1,
      0,
      6,
      4,
      1,
      7,
      3,
      8,
      5,
      3,
      8,
      0,
      5,
      9,
      1,
      6,
      10,
      6,
      0,
      11,
      7,
      1,
      11,
      3,
      7,
      3,
      12,
      8,
      8,
      13,
      0,
      9,
      14,
      1,
      6,
      14,
      9,
      10,
      15,
      6,
      0,
      15,
      10,
      1,
      16,
      11,
      11,
      17,
      3,
      18,
      12,
      3,
      18,
      8,
      12,
      15,
      13,
      8,
      15,
      0,
      13,
      16,
      1,
      14,
      19,
      14,
      6,
      20,
      6,
      15,
      14,
      11,
      16,
      18,
      17,
      11,
      18,
      3,
      17,
      18,
      21,
      8,
      8,
      22,
      15,
      19,
      23,
      14,
      6,
      23,
      19,
      20,
      23,
      6,
      15,
      23,
      20,
      14,
      24,
      11,
      11,
      25,
      18,
      26,
      21,
      18,
      26,
      8,
      21,
      26,
      22,
      8,
      26,
      15,
      22,
      27,
      14,
      23,
      28,
      23,
      15,
      29,
      24,
      14,
      29,
      11,
      24,
      29,
      25,
      11,
      29,
      18,
      25,
      18,
      30,
      26,
      26,
      28,
      15,
      27,
      29,
      14,
      23,
      29,
      27,
      28,
      26,
      23,
      29,
      30,
      18,
      29,
      26,
      30,
      31,
      29,
      23,
      31,
      23,
      26,
      29,
      31,
      26
    ],
    [
      10,
      1,
      10,
      1,
      3,
      1,
      10,
      1,
      3,
      1,
      3,
      1,
      10,
      1,
      3,
      1,
      10,
      1,
      3,
      1,
      3,
      1,
      10,
      1,
      3,
      1,
      3,
      1,
      10,
      1,
      10,
      1,
      3,
      1,
      3,
      1,
      10,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      10,
      1,
      3,
      1,
      3,
      1,
      10,
      1,
      3,
      1,
      3,
      1,
      10,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      4,
      9,
      15,
      25,
      19,
      11,
      6,
      2,
      0,
      2,
      5,
      10,
      16,
      26,
      20,
      12,
      7,
      3,
      0,
      3,
      1,
      1,
      3,
      7,
      13,
      21,
      31,
      22,
      14,
      8,
      4,
      2,
      6,
      5,
      4,
      8,
      9,
      5,
      6,
      11,
      18,
      28,
      36,
      35,
      27,
      17,
      10,
      7,
      12,
      13,
      8,
      14,
      23,
      32,
      41,
      42,
      33,
      24,
      15,
      9,
      10,
      17,
      16,
      11,
      19,
      18,
      12,
      20,
      29,
      38,
      47,
      48,
      39,
      30,
      21,
      13,
      14,
      22,
      23,
      15,
      24,
      25,
      16,
      17,
      27,
      34,
      44,
      52,
      46,
      38,
      29,
      26,
      18,
      19,
      25,
      24,
      33,
      43,
      51,
      45,
      37,
      28,
      20,
      26,
      29,
      21,
      30,
      31,
      22,
      31,
      30,
      39,
      49,
      55,
      50,
      40,
      32,
      23,
      27,
      35,
      34,
      28,
      37,
      36,
      32,
      40,
      41,
      33,
      42,
      43,
      34,
      35,
      36,
      37,
      45,
      54,
      58,
      57,
      53,
      44,
      38,
      46,
      47,
      39,
      48,
      49,
      40,
      50,
      56,
      59,
      58,
      54,
      51,
      43,
      42,
      41,
      44,
      53,
      52,
      45,
      51,
      54,
      46,
      52,
      53,
      57,
      59,
      56,
      55,
      49,
      48,
      47,
      50,
      55,
      56,
      57,
      58,
      59
    ]
  ],
  [
    [
      27,
      60,
      62,
      120,
      4
    ],
    [
      2,
      3,
      1,
      5,
      1,
      2,
      1
    ],
    [
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.4364663517030667,
      0.8997205809755687,
      -0.0230394893916557,
      0.43585784161531027,
      -0.3947875238518402,
      0.18613351976449002,
      -0.165034603304479,
      -0.40406244057214513,
      0.41342686231141096,
      0.7994411619511375,
      0.7478962198524539,
      0.6371856535975148,
      0.5411827886967484,
      0.737465072621946,
      -0.22535276961527625,
      0.7370282030399055,
      -0.5598221271563192,
      -0.21792892080765514,
      -0.5971008040754607,
      0.48730388118908524,
      0.16943475423656393,
      -0.6537867624229654,
      -0.45510569016263747,
      -0.6219913613798003,
      0.4808646223859512,
      0.47493014524389215,
      0.8526126568461356,
      0.8153339799269941,
      0.31267463689026953,
      0.6875780535416567,
      0.3746507262194609,
      0.08607709853411097,
      0.9231617228043955,
      -0.5296630440009206,
      0.7884742426136804,
      -0.8641324015419635,
      -0.16648288123388014,
      -0.8871718909336191,
      0.2693749603814301,
      -0.12063633262159451,
      -0.8717156832306205,
      0.3158300190814721,
      -0.7594159645482818,
      -0.5705453218060254,
      0.6130206997033735,
      0.050139709512215636,
      0.984768734163558,
      0.9617292447719024,
      -0.050139709512215636,
      0.819734130859079,
      -0.21823317585153335,
      0.9746077623781705,
      0.21823317585153335,
      -0.819734130859079,
      0.5705453218060254,
      -0.9617292447719024,
      -0.2693749603814301,
      -0.984768734163558,
      0.16648288123388014,
      -0.9746077623781705,
      -0.6130206997033735,
      -0.7884742426136804,
      0.7594159645482818,
      -0.31267463689026953,
      0.8871718909336191,
      -0.3746507262194609,
      0.8641324015419635,
      -0.47493014524389215,
      0.5296630440009206,
      -0.3158300190814721,
      0.8717156832306205,
      0.12063633262159451,
      -0.6875780535416567,
      0.6219913613798003,
      -0.8153339799269941,
      -0.48730388118908524,
      -0.8526126568461356,
      0.21792892080765514,
      -0.08607709853411097,
      -0.9231617228043955,
      -0.4808646223859512,
      -0.7370282030399055,
      0.45510569016263747,
      -0.6371856535975148,
      0.5971008040754607,
      0.5598221271563192,
      0.2179289208076551,
      -0.7994411619511375,
      0.22535276961527625,
      -0.16943475423656393,
      0.6537867624229654,
      -0.737465072621946,
      -0.5411827886967484,
      0.40406244057214513,
      -0.7478962198524539,
      -0.18613351976449002,
      -0.41342686231141096,
      -0.43585784161531027,
      0.165034603304479,
      -0.8997205809755687,
      0.3947875238518402,
      -0.18613351976449,
      0.0230394893916557,
      -0.4358578416153102,
      -0.4364663517030667,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      9,
      15,
      16,
      17,
      13,
      18,
      19,
      11,
      20,
      21,
      13,
      22,
      23,
      15,
      24,
      25,
      13,
      26,
      17,
      27,
      28,
      19,
      27,
      29,
      21,
      30,
      31,
      25,
      32,
      33,
      34,
      32,
      35,
      36,
      30,
      37,
      38,
      27,
      39,
      40,
      32,
      41,
      42,
      27,
      43,
      42,
      32,
      44,
      45,
      30,
      46,
      36,
      47,
      48,
      38,
      47,
      49,
      40,
      50,
      51,
      45,
      50,
      52,
      53,
      47,
      54,
      53,
      50,
      55,
      56,
      47,
      57,
      58,
      47,
      59,
      60,
      50,
      52,
      61,
      47,
      54,
      61,
      50,
      62,
      63,
      50,
      64,
      56,
      65,
      66,
      58,
      67,
      68,
      60,
      69,
      70,
      63,
      65,
      71,
      72,
      67,
      73,
      72,
      69,
      74,
      75,
      67,
      76,
      77,
      65,
      78,
      79,
      69,
      80,
      81,
      67,
      82,
      83,
      69,
      84,
      75,
      85,
      86,
      77,
      85,
      87,
      88,
      89,
      90,
      83,
      85,
      91,
      92,
      93,
      94,
      95,
      93,
      96,
      97,
      85,
      98,
      99,
      89,
      100,
      95,
      101,
      102,
      103,
      101,
      104,
      105,
      101,
      106,
      0,
      101,
      0,
      0,
      107
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      5,
      8,
      3,
      0,
      2,
      10,
      9,
      0,
      9,
      12,
      11,
      0,
      1,
      6,
      13,
      2,
      1,
      14,
      15,
      5,
      1,
      11,
      16,
      14,
      2,
      17,
      18,
      10,
      3,
      19,
      12,
      4,
      3,
      8,
      18,
      20,
      4,
      21,
      22,
      7,
      4,
      9,
      23,
      21,
      15,
      24,
      17,
      5,
      7,
      16,
      25,
      6,
      26,
      24,
      13,
      6,
      22,
      27,
      14,
      7,
      13,
      29,
      28,
      8,
      28,
      30,
      10,
      8,
      20,
      31,
      23,
      9,
      30,
      32,
      19,
      10,
      12,
      33,
      22,
      11,
      21,
      34,
      16,
      11,
      19,
      31,
      35,
      12,
      13,
      15,
      36,
      29,
      14,
      27,
      37,
      26,
      15,
      25,
      38,
      36,
      16,
      39,
      37,
      25,
      17,
      29,
      40,
      18,
      17,
      24,
      41,
      28,
      18,
      42,
      32,
      20,
      19,
      32,
      43,
      23,
      20,
      30,
      44,
      31,
      21,
      35,
      45,
      34,
      22,
      33,
      45,
      39,
      23,
      43,
      46,
      33,
      26,
      38,
      47,
      24,
      27,
      48,
      38,
      25,
      37,
      49,
      36,
      26,
      34,
      50,
      48,
      27,
      41,
      51,
      42,
      28,
      47,
      51,
      40,
      29,
      40,
      52,
      44,
      30,
      53,
      46,
      35,
      31,
      42,
      52,
      53,
      32,
      46,
      50,
      34,
      33,
      43,
      54,
      45,
      35,
      36,
      49,
      55,
      41,
      37,
      39,
      50,
      56,
      38,
      56,
      55,
      47,
      39,
      45,
      57,
      48,
      40,
      41,
      55,
      52,
      42,
      51,
      58,
      44,
      43,
      44,
      58,
      54,
      46,
      53,
      58,
      57,
      49,
      59,
      51,
      47,
      57,
      59,
      49,
      48,
      54,
      59,
      56,
      50,
      59,
      54,
      53,
      52,
      55,
      56,
      57,
      58
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      10,
      3,
      2,
      5,
      11,
      6,
      0,
      4,
      12,
      11,
      5,
      3,
      13,
      14,
      4,
      6,
      15,
      16,
      7,
      8,
      17,
      9,
      2,
      7,
      16,
      18,
      8,
      10,
      19,
      13,
      3,
      9,
      17,
      20,
      10,
      21,
      22,
      6,
      11,
      14,
      23,
      12,
      4,
      24,
      21,
      11,
      12,
      25,
      23,
      14,
      13,
      22,
      26,
      15,
      6,
      27,
      18,
      16,
      15,
      28,
      29,
      17,
      8,
      30,
      28,
      8,
      18,
      20,
      31,
      19,
      10,
      31,
      25,
      13,
      19,
      29,
      32,
      20,
      17,
      21,
      24,
      33,
      22,
      23,
      34,
      35,
      12,
      12,
      35,
      36,
      24,
      25,
      37,
      34,
      23,
      26,
      38,
      27,
      15,
      22,
      33,
      38,
      26,
      27,
      39,
      30,
      18,
      28,
      40,
      32,
      29,
      30,
      39,
      40,
      28,
      20,
      41,
      42,
      31,
      31,
      42,
      43,
      25,
      32,
      44,
      41,
      20,
      36,
      45,
      33,
      24,
      37,
      46,
      35,
      34,
      46,
      45,
      36,
      35,
      43,
      47,
      37,
      25,
      48,
      49,
      27,
      38,
      50,
      48,
      38,
      33,
      49,
      51,
      39,
      27,
      52,
      44,
      32,
      40,
      51,
      53,
      40,
      39,
      54,
      43,
      42,
      41,
      52,
      54,
      41,
      44,
      45,
      55,
      50,
      33,
      37,
      47,
      56,
      46,
      46,
      57,
      55,
      45,
      43,
      54,
      56,
      47,
      48,
      50,
      58,
      49,
      49,
      58,
      53,
      51,
      40,
      53,
      59,
      52,
      52,
      59,
      60,
      54,
      57,
      58,
      50,
      55,
      61,
      57,
      46,
      56,
      60,
      61,
      56,
      54,
      60,
      59,
      53,
      58,
      57,
      61,
      60,
      58
    ],
    [
      4,
      1,
      3,
      1,
      4,
      1,
      5,
      1,
      4,
      1,
      3,
      1,
      5,
      1,
      4,
      1,
      5,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      5,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      4,
      1,
      3,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      5,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      5,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      5,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      5,
      1,
      3,
      1,
      4,
      1,
      3,
      1
    ],
    [
      0,
      1,
      5,
      2,
      0,
      2,
      3,
      0,
      3,
      9,
      4,
      0,
      4,
      11,
      7,
      1,
      1,
      7,
      14,
      6,
      1,
      6,
      5,
      2,
      5,
      13,
      17,
      8,
      2,
      8,
      10,
      3,
      3,
      10,
      20,
      19,
      9,
      4,
      9,
      12,
      4,
      12,
      21,
      11,
      5,
      6,
      15,
      13,
      6,
      14,
      25,
      26,
      15,
      7,
      11,
      22,
      16,
      7,
      16,
      14,
      8,
      17,
      28,
      18,
      8,
      18,
      10,
      9,
      19,
      23,
      12,
      10,
      18,
      30,
      20,
      11,
      21,
      22,
      12,
      23,
      35,
      33,
      21,
      13,
      15,
      24,
      13,
      24,
      29,
      17,
      14,
      16,
      27,
      25,
      15,
      26,
      36,
      24,
      16,
      22,
      34,
      39,
      27,
      17,
      29,
      28,
      18,
      28,
      40,
      42,
      30,
      19,
      20,
      32,
      31,
      19,
      31,
      23,
      20,
      30,
      32,
      21,
      33,
      34,
      22,
      23,
      31,
      43,
      35,
      24,
      36,
      47,
      41,
      29,
      25,
      27,
      37,
      25,
      37,
      38,
      26,
      26,
      38,
      36,
      27,
      39,
      48,
      37,
      28,
      29,
      41,
      40,
      30,
      42,
      44,
      32,
      31,
      32,
      44,
      53,
      43,
      33,
      35,
      46,
      45,
      33,
      45,
      34,
      34,
      45,
      50,
      39,
      35,
      43,
      46,
      36,
      38,
      49,
      47,
      37,
      48,
      56,
      49,
      38,
      39,
      50,
      48,
      40,
      41,
      51,
      40,
      51,
      52,
      42,
      41,
      47,
      55,
      51,
      42,
      52,
      44,
      43,
      53,
      54,
      46,
      44,
      52,
      58,
      53,
      45,
      46,
      54,
      57,
      50,
      47,
      49,
      55,
      48,
      50,
      57,
      56,
      49,
      56,
      59,
      55,
      51,
      55,
      59,
      58,
      52,
      53,
      58,
      54,
      54,
      58,
      59,
      57,
      56,
      57,
      59
    ]
  ],
  [
    [
      28,
      120,
      62,
      180,
      3
    ],
    [
      3,
      2,
      1,
      3,
      1,
      5,
      1
    ],
    [
      1,
      4,
      1,
      6,
      1,
      10,
      1
    ],
    [
      0,
      1,
      0.26070853236817704,
      0.9654175579252903,
      -0.004587288682066301,
      0.26066817149801047,
      -0.21921611644836808,
      -0.14111425561885782,
      0.2561212436861108,
      0.9308351158505805,
      0.46332768244862155,
      0.8748795491597258,
      -0.22839069381250068,
      0.3802220873771632,
      0.8962526737758708,
      -0.3132067113754055,
      -0.3694419175073106,
      -0.4430195215788025,
      -0.021560339739705146,
      0.454153105084489,
      0.8057146650103062,
      0.5304638216822197,
      0.7629684157780161,
      0.6613595438469998,
      0.7497590983194514,
      -0.3298036777433291,
      0.573664386757778,
      -0.4476068102608688,
      0.23910783175830536,
      0.8616702317011611,
      -0.5370101165058399,
      -0.2498880016281579,
      -0.24607057214180736,
      -0.5977695793957634,
      0.5138668553142961,
      0.6378479649377419,
      0.6567722551649334,
      0.7151766562447417,
      0.7284956830805979,
      0.4364732267551823,
      0.6724304070124516,
      -0.5490197941916972,
      0.43255013113892016,
      -0.2700899275135219,
      0.7671066861383927,
      0.5818923982468871,
      -0.6936773824026762,
      -0.358661747637458,
      0.6246386474791772,
      -0.04345142206136284,
      -0.7388838350146212,
      -0.4027378380386436,
      -0.7065433254050635,
      0.7164860053947406,
      0.5473099561721774,
      0.41245387138346773,
      0.4913543894813226,
      0.8325369495519387,
      0.4221895053319031,
      0.21725711030681422,
      0.5405144932265231,
      0.4567719474066128,
      -0.7085221604102581,
      0.48487817490067714,
      0.5127275140974676,
      -0.07205806611514372,
      0.8866606020175455,
      -0.42959229373208285,
      0.8194347299001498,
      0.379443256099613,
      -0.853179748621237,
      -0.306333703875701,
      -0.626541243169078,
      -0.5869894095259108,
      -0.2001186879581991,
      -0.8476575810239213,
      0.8176921715443567,
      0.31027837195019353,
      0.18865046625303333,
      0.5136600375330839,
      0.2543228052593387,
      0.9337431157015549,
      0.18515792110991924,
      0.7385463546249014,
      0.3316514965663386,
      0.32129837677815504,
      -0.8651894263070944,
      0.376104428891377,
      -0.648808410180451,
      0.6783204742812919,
      0.34486081402490326,
      -0.23156043233370466,
      0.9389886457793024,
      -0.786043609387639,
      -0.5346613657641538,
      -0.9545927325520654,
      -0.11289140449508625,
      0.27569592987548375,
      -0.09607742148685829,
      -0.9564313270332214,
      0.9217334380156975,
      0.09461991234435471,
      0.7162791876135284,
      0.1637847964937742,
      0.2898566324026495,
      0.8397525207745175,
      0.993456865931362,
      -0.11289140449508626,
      0.01729122103735487,
      0.16463111088131877,
      0.24111348780077402,
      -0.8054756760772872,
      0.5695467282719918,
      -0.9591800212341317,
      0.14777676700292425,
      -0.13035426618408852,
      0.9913166895410593,
      -0.8203204540848692,
      -0.5695467282719918,
      0.05187366311206461,
      -0.9888695772492957,
      -0.14777676700292425,
      -0.9913166895410593,
      0.8203204540848692,
      -0.05187366311206461,
      0.9888695772492957,
      -0.01729122103735487,
      0.13035426618408852,
      0.8054756760772872,
      -0.1637847964937742,
      0.9591800212341318,
      -0.24111348780077402,
      -0.9913166895410594,
      -0.8397525207745175,
      0.5346613657641538,
      -0.09461991234435471,
      -0.993456865931362,
      0.1128914044950863,
      -0.0172912210373549,
      -0.16463111088131877,
      0.9564313270332214,
      -0.7162791876135284,
      -0.6783204742812919,
      -0.9217334380156976,
      -0.376104428891377,
      -0.2898566324026495,
      -0.9389886457793024,
      -0.1851579211099192,
      0.786043609387639,
      -0.31027837195019353,
      0.9545927325520654,
      -0.2756959298754838,
      0.0960774214868583,
      -0.27569592987548375,
      0.6488084101804509,
      -0.3448608140249032,
      0.8651894263070944,
      -0.3316514965663386,
      0.2315604323337047,
      -0.938988645779302,
      -0.2543228052593387,
      -0.7385463546249013,
      0.5869894095259108,
      -0.9337431157015548,
      0.3063337038757011,
      -0.321298376778155,
      0.847657581023921,
      -0.4221895053319031,
      -0.8176921715443567,
      -0.4848781749006771,
      -0.3102783719501935,
      -0.513660037533084,
      -0.81943472990015,
      -0.188650466253033,
      -0.886660602017545,
      -0.422189505331903,
      0.626541243169078,
      -0.5127275140974676,
      0.853179748621237,
      0.306333703875701,
      0.200118687958199,
      -0.491354389481323,
      0.708522160410258,
      -0.484878174900677,
      -0.512727514097468,
      0.429592293732083,
      -0.379443256099613,
      0.07205806611514,
      -0.88666060201755,
      -0.45677194740661,
      -0.8325369495519387,
      0.358661747637458,
      -0.540514493226523,
      0.706543325405063,
      -0.456771947406613,
      -0.21725711030681,
      0.73888383501462,
      -0.63784796493774,
      -0.716486005394741,
      -0.43255013113892,
      -0.547309956172177,
      -0.41245387138347,
      -0.76710668613839,
      -0.49135438948132,
      0.693677382402676,
      -0.624638647479177,
      0.40273783803864,
      0.70654332540506,
      -0.58189239824689,
      0.04345142206136,
      -0.67243040701245,
      0.5490197941917,
      -0.71517665624474,
      0.2700899275135,
      -0.7671066861384,
      -0.5818923982469,
      -0.728495683080598,
      0.249888001628158,
      -0.637847964937742,
      -0.43647322675518,
      0.59776957939576,
      -0.65677225516493,
      -0.23910783175831,
      -0.5138668553143,
      -0.57366438675778,
      0.53701011650584,
      0.24988800162816,
      -0.80571466501031,
      0.2460705721418,
      0.5977695793958,
      -0.762968415778,
      0.44760681026087,
      -0.8616702317012,
      0.3298036777433,
      -0.5736643867578,
      -0.7497590983195,
      -0.661359543847,
      0.02156033973971,
      -0.74975909831945,
      -0.5304638216822,
      0.3694419175073,
      -0.45415310508449,
      -0.38022208737716,
      -0.8057146650103,
      0.4430195215788,
      0.0215603397397,
      -0.8962526737759,
      0.3132067113754,
      -0.8748795491597,
      0.2283906938125,
      -0.3802220873772,
      -0.4633276824486,
      0.1411142556189,
      -0.2561212436861,
      -0.260668171498,
      -0.9308351158506,
      0.2192161164484,
      -0.965417557925,
      0.004587288682,
      -0.260708532368,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      7,
      11,
      12,
      13,
      14,
      15,
      16,
      11,
      17,
      18,
      14,
      19,
      13,
      20,
      21,
      16,
      22,
      23,
      18,
      24,
      25,
      26,
      24,
      27,
      28,
      29,
      30,
      31,
      20,
      32,
      33,
      22,
      34,
      26,
      35,
      36,
      28,
      37,
      38,
      31,
      35,
      39,
      33,
      40,
      41,
      42,
      37,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      40,
      51,
      52,
      45,
      53,
      42,
      54,
      55,
      44,
      56,
      57,
      47,
      58,
      59,
      50,
      35,
      60,
      52,
      61,
      62,
      63,
      64,
      65,
      66,
      61,
      67,
      68,
      69,
      70,
      71,
      58,
      72,
      73,
      64,
      74,
      75,
      56,
      76,
      63,
      77,
      78,
      66,
      58,
      79,
      68,
      80,
      81,
      71,
      82,
      83,
      73,
      84,
      85,
      75,
      58,
      86,
      87,
      84,
      88,
      89,
      90,
      91,
      92,
      80,
      93,
      94,
      77,
      95,
      96,
      97,
      98,
      99,
      97,
      100,
      87,
      101,
      102,
      89,
      103,
      104,
      92,
      82,
      105,
      94,
      101,
      106,
      107,
      108,
      109,
      99,
      110,
      111,
      112,
      103,
      113,
      114,
      110,
      115,
      116,
      108,
      117,
      118,
      119,
      120,
      121,
      108,
      115,
      122,
      108,
      123,
      112,
      124,
      125,
      114,
      126,
      127,
      116,
      126,
      128,
      118,
      129,
      130,
      121,
      131,
      127,
      132,
      126,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      131,
      141,
      142,
      129,
      143,
      144,
      135,
      145,
      146,
      147,
      148,
      134,
      149,
      150,
      137,
      151,
      152,
      140,
      153,
      154,
      142,
      155,
      156,
      144,
      157,
      158,
      159,
      160,
      161,
      162,
      157,
      163,
      164,
      147,
      165,
      166,
      167,
      168,
      169,
      170,
      171,
      172,
      160,
      173,
      174,
      175,
      176,
      162,
      177,
      178,
      179,
      175,
      180,
      166,
      181,
      182,
      183,
      184,
      185,
      172,
      186,
      187,
      188,
      189,
      190,
      191,
      167,
      192,
      193,
      194,
      195,
      196,
      197,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      191,
      205,
      206,
      207,
      208,
      209,
      196,
      210,
      211,
      199,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      210,
      221,
      222,
      212,
      223,
      224,
      197,
      225,
      226,
      227,
      228,
      229,
      230,
      231,
      222,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      240,
      230,
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      240,
      248,
      249,
      250,
      246,
      251,
      252,
      248,
      253,
      254,
      255,
      256,
      252,
      257,
      258,
      254,
      257,
      259,
      0,
      257,
      0,
      0,
      260
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      4,
      6,
      0,
      8,
      7,
      0,
      1,
      9,
      2,
      1,
      10,
      11,
      2,
      12,
      13,
      3,
      14,
      15,
      3,
      13,
      14,
      17,
      16,
      4,
      19,
      18,
      5,
      18,
      17,
      5,
      21,
      20,
      6,
      20,
      8,
      6,
      8,
      22,
      7,
      24,
      23,
      7,
      9,
      25,
      26,
      9,
      11,
      25,
      10,
      27,
      11,
      10,
      28,
      29,
      12,
      30,
      13,
      12,
      31,
      32,
      14,
      33,
      34,
      15,
      35,
      28,
      15,
      34,
      35,
      17,
      36,
      16,
      38,
      37,
      16,
      40,
      39,
      18,
      23,
      41,
      19,
      41,
      40,
      19,
      43,
      42,
      20,
      37,
      44,
      21,
      44,
      43,
      21,
      46,
      45,
      22,
      45,
      24,
      22,
      24,
      47,
      23,
      25,
      48,
      49,
      26,
      50,
      31,
      26,
      49,
      50,
      27,
      51,
      52,
      27,
      29,
      51,
      28,
      53,
      29,
      30,
      54,
      55,
      30,
      32,
      54,
      31,
      56,
      32,
      33,
      57,
      34,
      33,
      55,
      58,
      35,
      59,
      53,
      61,
      60,
      36,
      60,
      38,
      36,
      38,
      62,
      37,
      40,
      63,
      39,
      64,
      61,
      39,
      47,
      65,
      41,
      43,
      66,
      42,
      67,
      46,
      42,
      62,
      68,
      44,
      70,
      69,
      45,
      67,
      70,
      46,
      71,
      65,
      47,
      48,
      72,
      49,
      48,
      52,
      73,
      50,
      74,
      56,
      51,
      75,
      76,
      52,
      76,
      73,
      53,
      59,
      77,
      54,
      78,
      79,
      55,
      79,
      58,
      56,
      74,
      80,
      57,
      81,
      82,
      57,
      58,
      81,
      59,
      82,
      83,
      85,
      84,
      60,
      64,
      85,
      61,
      86,
      68,
      62,
      88,
      87,
      63,
      87,
      64,
      63,
      89,
      88,
      65,
      91,
      90,
      66,
      90,
      67,
      66,
      92,
      91,
      68,
      70,
      93,
      69,
      94,
      71,
      69,
      94,
      89,
      71,
      72,
      95,
      96,
      72,
      73,
      95,
      74,
      96,
      97,
      75,
      98,
      76,
      75,
      77,
      99,
      77,
      83,
      99,
      78,
      100,
      79,
      78,
      80,
      101,
      80,
      97,
      101,
      81,
      102,
      103,
      82,
      103,
      83,
      85,
      104,
      84,
      105,
      86,
      84,
      105,
      92,
      86,
      107,
      106,
      87,
      89,
      107,
      88,
      109,
      108,
      90,
      92,
      109,
      91,
      108,
      110,
      93,
      110,
      94,
      93,
      95,
      111,
      112,
      96,
      112,
      97,
      98,
      113,
      111,
      98,
      99,
      113,
      100,
      114,
      102,
      100,
      101,
      114,
      102,
      115,
      103,
      106,
      116,
      104,
      116,
      105,
      104,
      107,
      117,
      106,
      109,
      118,
      108,
      118,
      117,
      110,
      111,
      119,
      112,
      113,
      115,
      119,
      114,
      119,
      115,
      117,
      118,
      116
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      4,
      0,
      2,
      6,
      3,
      4,
      7,
      1,
      5,
      8,
      2,
      1,
      9,
      5,
      10,
      4,
      3,
      11,
      6,
      2,
      12,
      3,
      6,
      13,
      7,
      4,
      9,
      1,
      7,
      9,
      8,
      5,
      14,
      2,
      8,
      10,
      15,
      4,
      3,
      12,
      10,
      11,
      12,
      6,
      2,
      16,
      11,
      13,
      9,
      7,
      4,
      17,
      13,
      9,
      18,
      8,
      14,
      19,
      2,
      8,
      20,
      14,
      12,
      15,
      10,
      21,
      4,
      15,
      22,
      12,
      11,
      19,
      16,
      2,
      23,
      11,
      16,
      24,
      9,
      13,
      25,
      17,
      4,
      26,
      13,
      17,
      27,
      18,
      9,
      20,
      8,
      18,
      20,
      19,
      14,
      12,
      28,
      15,
      21,
      25,
      4,
      15,
      29,
      21,
      22,
      30,
      12,
      11,
      23,
      22,
      19,
      23,
      16,
      24,
      31,
      9,
      13,
      26,
      24,
      25,
      26,
      17,
      27,
      20,
      18,
      9,
      32,
      27,
      20,
      33,
      19,
      34,
      28,
      12,
      29,
      15,
      28,
      29,
      25,
      21,
      23,
      30,
      22,
      35,
      12,
      30,
      33,
      23,
      19,
      26,
      31,
      24,
      32,
      9,
      31,
      36,
      26,
      25,
      37,
      20,
      27,
      38,
      27,
      32,
      39,
      33,
      20,
      34,
      29,
      28,
      12,
      35,
      34,
      29,
      36,
      25,
      23,
      40,
      30,
      30,
      41,
      35,
      33,
      39,
      23,
      26,
      42,
      31,
      31,
      38,
      32,
      36,
      43,
      26,
      37,
      44,
      20,
      27,
      38,
      37,
      20,
      45,
      39,
      46,
      29,
      34,
      41,
      34,
      35,
      43,
      36,
      29,
      47,
      40,
      23,
      41,
      30,
      40,
      48,
      23,
      39,
      49,
      42,
      26,
      38,
      31,
      42,
      50,
      26,
      43,
      38,
      44,
      37,
      45,
      20,
      44,
      51,
      39,
      45,
      46,
      52,
      29,
      34,
      41,
      46,
      29,
      53,
      43,
      47,
      41,
      40,
      23,
      48,
      47,
      39,
      51,
      48,
      49,
      38,
      42,
      26,
      50,
      49,
      43,
      54,
      50,
      38,
      55,
      44,
      44,
      51,
      45,
      41,
      52,
      46,
      53,
      29,
      52,
      54,
      43,
      53,
      56,
      41,
      47,
      51,
      47,
      48,
      57,
      38,
      49,
      54,
      49,
      50,
      58,
      55,
      38,
      51,
      44,
      55,
      41,
      59,
      52,
      52,
      54,
      53,
      56,
      60,
      41,
      47,
      51,
      56,
      57,
      58,
      38,
      49,
      54,
      57,
      58,
      51,
      55,
      60,
      59,
      41,
      54,
      52,
      59,
      51,
      60,
      56,
      54,
      58,
      57,
      61,
      51,
      58,
      60,
      54,
      59,
      51,
      61,
      60,
      54,
      61,
      58,
      61,
      54,
      60
    ],
    [
      4,
      1,
      6,
      1,
      10,
      1,
      6,
      1,
      10,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      10,
      1,
      4,
      1,
      6,
      1,
      10,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      10,
      1,
      4,
      1,
      4,
      1,
      10,
      1,
      4,
      1,
      6,
      1,
      10,
      1,
      6,
      1,
      4,
      1,
      10,
      1,
      6,
      1,
      6,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      10,
      1,
      6,
      1,
      4,
      1,
      10,
      1,
      4,
      1,
      6,
      1,
      6,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      10,
      1,
      6,
      1,
      4,
      1,
      10,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      1
    ],
    [
      0,
      1,
      4,
      2,
      0,
      2,
      6,
      13,
      8,
      3,
      0,
      3,
      7,
      15,
      23,
      28,
      19,
      10,
      5,
      1,
      1,
      5,
      11,
      17,
      9,
      4,
      2,
      4,
      9,
      16,
      26,
      37,
      31,
      21,
      12,
      6,
      3,
      8,
      14,
      7,
      5,
      10,
      18,
      11,
      6,
      12,
      20,
      13,
      7,
      14,
      22,
      34,
      24,
      15,
      8,
      13,
      20,
      30,
      42,
      55,
      46,
      33,
      22,
      14,
      9,
      17,
      25,
      16,
      10,
      19,
      29,
      40,
      27,
      18,
      11,
      18,
      27,
      39,
      52,
      61,
      48,
      36,
      25,
      17,
      12,
      21,
      32,
      43,
      30,
      20,
      15,
      24,
      35,
      23,
      16,
      25,
      36,
      49,
      38,
      26,
      19,
      28,
      41,
      29,
      21,
      31,
      44,
      32,
      22,
      33,
      45,
      34,
      23,
      35,
      47,
      53,
      41,
      28,
      24,
      34,
      45,
      57,
      69,
      82,
      71,
      59,
      47,
      35,
      26,
      38,
      50,
      37,
      27,
      40,
      51,
      39,
      29,
      41,
      53,
      65,
      77,
      88,
      75,
      63,
      51,
      40,
      30,
      43,
      54,
      42,
      31,
      37,
      50,
      62,
      56,
      44,
      32,
      44,
      56,
      68,
      80,
      91,
      78,
      66,
      54,
      43,
      33,
      46,
      58,
      70,
      57,
      45,
      36,
      48,
      60,
      49,
      38,
      49,
      60,
      72,
      84,
      96,
      86,
      74,
      62,
      50,
      39,
      51,
      63,
      76,
      64,
      52,
      42,
      54,
      66,
      79,
      67,
      55,
      46,
      55,
      67,
      58,
      47,
      59,
      65,
      53,
      48,
      61,
      73,
      85,
      72,
      60,
      52,
      64,
      73,
      61,
      56,
      62,
      74,
      68,
      57,
      70,
      81,
      69,
      58,
      67,
      79,
      90,
      100,
      108,
      102,
      93,
      81,
      70,
      59,
      71,
      83,
      89,
      77,
      65,
      63,
      75,
      87,
      76,
      64,
      76,
      87,
      98,
      106,
      111,
      104,
      95,
      85,
      73,
      66,
      78,
      90,
      79,
      68,
      74,
      86,
      97,
      92,
      80,
      69,
      81,
      93,
      103,
      94,
      82,
      71,
      82,
      94,
      83,
      72,
      85,
      95,
      84,
      75,
      88,
      99,
      107,
      98,
      87,
      77,
      89,
      99,
      88,
      78,
      91,
      101,
      109,
      100,
      90,
      80,
      92,
      101,
      91,
      83,
      94,
      103,
      110,
      115,
      117,
      113,
      107,
      99,
      89,
      84,
      95,
      104,
      112,
      105,
      96,
      86,
      96,
      105,
      97,
      92,
      97,
      105,
      112,
      116,
      119,
      118,
      114,
      109,
      101,
      93,
      102,
      110,
      103,
      98,
      107,
      113,
      106,
      100,
      109,
      114,
      108,
      102,
      108,
      114,
      118,
      115,
      110,
      104,
      111,
      116,
      112,
      106,
      113,
      117,
      119,
      116,
      111,
      115,
      118,
      119,
      117
    ]
  ],
  [
    [
      29,
      60,
      92,
      150,
      5
    ],
    [
      0,
      2,
      1,
      3,
      1,
      5,
      1
    ],
    [
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.45120882576470694,
      0.8924183971389397,
      0.21277908610096832,
      0.3978875029025194,
      -0.25052596276781636,
      0.37526809939991485,
      -0.44906296335872015,
      -0.04395292239943149,
      -0.17300833660374973,
      -0.4167223535083873,
      0.5570628795074754,
      0.7183477071455513,
      0.8034191070389344,
      0.5937894231605266,
      0.6262410351988272,
      0.6833710700679952,
      0.3401140581701497,
      0.7292026799030028,
      -0.4095292580589749,
      0.6926037162305402,
      -0.6598181766293179,
      0.3124803263946155,
      -0.586707329899082,
      -0.43448646657498197,
      -0.26746382417073056,
      -0.758865748141697,
      0.17127545680275735,
      -0.6742709318484197,
      0.5066126656348584,
      0.40922656721635936,
      0.8319314730251572,
      0.34512538960989103,
      0.9853200793851852,
      -0.034518358674704167,
      0.16719098084160164,
      0.6986399370867212,
      0.6437955033950988,
      0.3121371303060778,
      0.35346110347230386,
      0.9196768661172517,
      0.17105469961650255,
      -0.044493650003362334,
      0.9113473167753844,
      -0.44136720098239063,
      0.8808718883220636,
      -0.7580304168276617,
      0.5726781810479321,
      -0.9277164282771421,
      0.14223464469433347,
      -0.8825314400515721,
      -0.31941622182838375,
      -0.6326042629669938,
      -0.7087892905231238,
      0.08228815679603269,
      -0.9349423108928874,
      0.38414709544269526,
      -0.923246271947484,
      -0.006879709151786826,
      0.9105239829797792,
      -0.3983895691262667,
      -0.11059759323794621,
      0.9561362417243954,
      0.026188809332836807,
      -0.29174926482662633,
      0.9205629910417158,
      0.3905335441755505,
      0.6521763630848932,
      0.7453882541955864,
      -0.13806644031268933,
      -0.04871101536554204,
      0.9977300838981867,
      -0.04649641563147788,
      -0.41772423687318594,
      0.8604584989421846,
      -0.9300960830976788,
      0.36179060545380415,
      -0.06347309675544226,
      -0.994167792714539,
      -0.09730613168000354,
      -0.04649641563147789,
      -0.8422948163282425,
      -0.535266857160843,
      -0.5085214838433719,
      -0.8539169004298421,
      -0.11059759323794623,
      -0.06669367013016453,
      -0.9936871536768034,
      -0.09020972775849471,
      0.21711844103876426,
      -0.8730158633713474,
      -0.4366954142911025,
      0.6337780180026013,
      -0.7004597411812564,
      -0.32814870848592664,
      0.7752228621250244,
      -0.31652325661599884,
      -0.5466649266780226,
      0.7846911652201994,
      0.4275505711412137,
      -0.4488432736960504,
      0.43462042764587633,
      0.715725185956892,
      0.00144820547769672,
      0.8716810134964369,
      -0.4900715390743672,
      -0.3439002478381593,
      0.6359394784443826,
      -0.6908788600708081,
      -0.7197752973041746,
      0.5396486232057018,
      -0.8871554693126638,
      0.10721421979588198,
      -0.6414198315470259,
      -0.6014211197696784,
      -0.47631212077079355,
      -0.242273783338777,
      -0.8373370292158328,
      0.4183769713883287,
      -0.5607792258758325,
      -0.7144839883706503,
      0.4919671680088055,
      -0.1269691999186979,
      -0.8613054788362846,
      0.4978189011374095,
      0.3328937157744945,
      -0.8008483724577283,
      0.094740161890276,
      0.56145566649368,
      -0.822065591231711,
      -0.585482692954729,
      0.24829889948122,
      -0.77172383192882,
      -0.669145239848913,
      -0.204345977081786,
      -0.71448398837065,
      -0.324935261821951,
      -0.503049659533239,
      -0.800848372457728,
      0.083369359292671,
      -0.33212753721511,
      -0.939542893621444,
      0.12425239882506,
      0.12778156013332,
      -0.98398842182015,
      -0.29614844539364,
      -0.06575996568741,
      -0.9528755035175
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      11,
      3,
      12,
      11,
      13,
      14,
      9,
      15,
      16,
      7,
      17,
      18,
      19,
      15,
      20,
      21,
      15,
      22,
      23,
      17,
      24,
      25,
      17,
      26,
      27,
      15,
      28,
      29,
      13,
      30,
      27,
      31,
      32,
      25,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      31,
      45,
      46,
      42,
      47,
      48,
      39,
      49,
      50,
      33,
      51,
      52,
      33,
      53,
      54,
      39,
      55,
      56,
      33,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      59,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      65,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      78,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      98,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      92,
      112,
      113,
      101,
      114,
      115,
      116,
      117,
      118,
      106,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148
    ],
    [
      1,
      2,
      3,
      4,
      5,
      0,
      6,
      7,
      8,
      2,
      0,
      1,
      8,
      9,
      3,
      0,
      2,
      10,
      11,
      4,
      0,
      3,
      11,
      12,
      5,
      0,
      4,
      12,
      13,
      14,
      1,
      14,
      15,
      16,
      7,
      1,
      6,
      16,
      17,
      8,
      1,
      7,
      18,
      9,
      2,
      2,
      8,
      18,
      19,
      20,
      3,
      20,
      21,
      22,
      11,
      3,
      10,
      22,
      23,
      4,
      4,
      24,
      25,
      13,
      5,
      5,
      12,
      25,
      26,
      14,
      5,
      13,
      26,
      15,
      6,
      6,
      14,
      26,
      27,
      16,
      6,
      15,
      28,
      17,
      7,
      7,
      16,
      28,
      29,
      30,
      8,
      30,
      31,
      19,
      9,
      9,
      18,
      31,
      32,
      20,
      9,
      19,
      32,
      21,
      10,
      10,
      20,
      32,
      33,
      22,
      10,
      21,
      34,
      23,
      11,
      11,
      22,
      34,
      35,
      24,
      12,
      23,
      35,
      36,
      25,
      12,
      24,
      36,
      37,
      13,
      13,
      38,
      27,
      15,
      14,
      15,
      26,
      38,
      39,
      40,
      16,
      40,
      41,
      29,
      17,
      17,
      28,
      41,
      42,
      30,
      17,
      29,
      42,
      31,
      18,
      18,
      30,
      42,
      43,
      19,
      19,
      44,
      33,
      21,
      20,
      21,
      32,
      44,
      45,
      46,
      22,
      46,
      47,
      35,
      23,
      23,
      34,
      47,
      36,
      24,
      24,
      35,
      48,
      37,
      25,
      25,
      36,
      48,
      49,
      38,
      26,
      37,
      49,
      39,
      27,
      27,
      38,
      49,
      50,
      40,
      27,
      39,
      50,
      41,
      28,
      28,
      40,
      50,
      51,
      29,
      29,
      52,
      43,
      31,
      30,
      31,
      42,
      52,
      53,
      44,
      32,
      43,
      53,
      45,
      33,
      33,
      44,
      53,
      54,
      46,
      33,
      45,
      54,
      47,
      34,
      34,
      46,
      54,
      55,
      35,
      36,
      55,
      56,
      49,
      37,
      37,
      48,
      56,
      39,
      38,
      39,
      57,
      51,
      41,
      40,
      41,
      50,
      57,
      58,
      52,
      42,
      51,
      58,
      53,
      43,
      43,
      52,
      58,
      45,
      44,
      45,
      59,
      55,
      47,
      46,
      47,
      54,
      59,
      56,
      48,
      48,
      55,
      59,
      57,
      49,
      50,
      56,
      59,
      58,
      51,
      51,
      57,
      59,
      53,
      52,
      54,
      58,
      57,
      56,
      55
    ],
    [
      0,
      1,
      2,
      3,
      4,
      4,
      5,
      6,
      7,
      0,
      0,
      7,
      8,
      9,
      1,
      1,
      9,
      10,
      11,
      2,
      2,
      11,
      12,
      13,
      3,
      3,
      13,
      14,
      15,
      4,
      4,
      16,
      17,
      18,
      5,
      5,
      18,
      19,
      20,
      6,
      6,
      20,
      21,
      8,
      7,
      8,
      21,
      22,
      23,
      9,
      9,
      24,
      25,
      26,
      10,
      10,
      26,
      27,
      12,
      11,
      12,
      28,
      29,
      14,
      13,
      14,
      29,
      30,
      31,
      15,
      15,
      31,
      32,
      16,
      4,
      16,
      32,
      33,
      34,
      17,
      17,
      34,
      35,
      19,
      18,
      19,
      35,
      36,
      37,
      20,
      20,
      38,
      39,
      22,
      21,
      22,
      39,
      40,
      41,
      23,
      23,
      41,
      42,
      24,
      9,
      24,
      42,
      43,
      44,
      25,
      25,
      44,
      45,
      27,
      26,
      27,
      45,
      46,
      47,
      12,
      12,
      47,
      48,
      49,
      28,
      28,
      49,
      50,
      30,
      29,
      30,
      51,
      33,
      32,
      31,
      33,
      51,
      52,
      53,
      34,
      34,
      54,
      55,
      36,
      35,
      36,
      55,
      56,
      57,
      37,
      37,
      57,
      58,
      38,
      20,
      38,
      58,
      59,
      40,
      39,
      40,
      60,
      43,
      42,
      41,
      43,
      60,
      61,
      62,
      44,
      44,
      63,
      64,
      46,
      45,
      46,
      64,
      65,
      48,
      47,
      48,
      65,
      66,
      50,
      49,
      50,
      66,
      67,
      68,
      30,
      30,
      68,
      69,
      52,
      51,
      52,
      69,
      70,
      71,
      53,
      53,
      71,
      72,
      54,
      34,
      54,
      72,
      73,
      56,
      55,
      56,
      74,
      59,
      58,
      57,
      59,
      74,
      75,
      76,
      40,
      40,
      76,
      77,
      61,
      60,
      61,
      77,
      78,
      79,
      62,
      62,
      79,
      80,
      63,
      44,
      63,
      80,
      81,
      65,
      64,
      65,
      82,
      83,
      67,
      66,
      67,
      83,
      70,
      69,
      68,
      70,
      84,
      73,
      72,
      71,
      73,
      84,
      85,
      86,
      56,
      56,
      86,
      87,
      75,
      74,
      75,
      87,
      78,
      77,
      76,
      78,
      88,
      81,
      80,
      79,
      81,
      88,
      89,
      82,
      65,
      82,
      89,
      90,
      70,
      83,
      70,
      90,
      91,
      85,
      84,
      85,
      91,
      78,
      87,
      86,
      78,
      91,
      90,
      89,
      88
    ],
    [
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      3,
      0,
      3,
      4,
      0,
      4,
      5,
      0,
      5,
      14,
      6,
      1,
      1,
      6,
      7,
      1,
      7,
      8,
      1,
      8,
      2,
      2,
      8,
      9,
      2,
      9,
      20,
      10,
      3,
      3,
      10,
      11,
      3,
      11,
      4,
      4,
      11,
      23,
      24,
      12,
      4,
      12,
      5,
      5,
      12,
      13,
      5,
      13,
      14,
      6,
      14,
      15,
      6,
      15,
      16,
      6,
      16,
      7,
      7,
      16,
      17,
      7,
      17,
      30,
      18,
      8,
      8,
      18,
      9,
      9,
      18,
      19,
      9,
      19,
      20,
      10,
      20,
      21,
      10,
      21,
      22,
      10,
      22,
      11,
      11,
      22,
      23,
      12,
      24,
      25,
      12,
      25,
      13,
      13,
      25,
      37,
      38,
      26,
      13,
      26,
      14,
      14,
      26,
      15,
      15,
      26,
      27,
      15,
      27,
      40,
      28,
      16,
      16,
      28,
      17,
      17,
      28,
      29,
      17,
      29,
      30,
      18,
      30,
      31,
      18,
      31,
      19,
      19,
      31,
      43,
      44,
      32,
      19,
      32,
      20,
      20,
      32,
      21,
      21,
      32,
      33,
      21,
      33,
      46,
      34,
      22,
      22,
      34,
      23,
      23,
      34,
      35,
      23,
      35,
      24,
      24,
      35,
      36,
      24,
      36,
      25,
      25,
      36,
      37,
      26,
      38,
      27,
      27,
      38,
      39,
      27,
      39,
      40,
      28,
      40,
      41,
      28,
      41,
      29,
      29,
      41,
      51,
      52,
      42,
      29,
      42,
      30,
      30,
      42,
      31,
      31,
      42,
      43,
      32,
      44,
      33,
      33,
      44,
      45,
      33,
      45,
      46,
      34,
      46,
      47,
      34,
      47,
      35,
      35,
      47,
      55,
      48,
      36,
      36,
      48,
      37,
      37,
      48,
      49,
      37,
      49,
      38,
      38,
      49,
      39,
      39,
      49,
      56,
      57,
      50,
      39,
      50,
      40,
      40,
      50,
      41,
      41,
      50,
      51,
      42,
      52,
      43,
      43,
      52,
      53,
      43,
      53,
      44,
      44,
      53,
      45,
      45,
      53,
      58,
      59,
      54,
      45,
      54,
      46,
      46,
      54,
      47,
      47,
      54,
      55,
      48,
      55,
      56,
      48,
      56,
      49,
      50,
      57,
      51,
      51,
      57,
      58,
      51,
      58,
      52,
      52,
      58,
      53,
      54,
      59,
      55,
      55,
      59,
      56,
      56,
      59,
      57,
      57,
      59,
      58
    ]
  ],
  [
    [
      30,
      20,
      32,
      60,
      6
    ],
    [
      1,
      3,
      1,
      5,
      2,
      3,
      1
    ],
    [
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1
    ],
    [
      0,
      1,
      0.9428090415820634,
      0.3333333333333333,
      0.6727182848443369,
      0.66055960981957,
      -0.4714045207910317,
      0.816496580927726,
      -0.9084205452398527,
      0.25231131935570694,
      -0.816496580927726,
      0.23570226039551584,
      -0.9128709291752769,
      0.09003025224590881,
      0.7453559924999299,
      0.4714045207910317,
      -0.3333333333333333,
      0.6170765289406387,
      -0.7453559924999299,
      -0.23570226039551584,
      0.9128709291752769,
      0.9084205452398527,
      -0.25231131935570694,
      0.5270462766947299,
      -0.408248290463863,
      -0.6170765289406387,
      -0.9428090415820634,
      -0.5270462766947299,
      0.408248290463863,
      -0.6727182848443369,
      -0.66055960981957,
      -0.09003025224590881,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      6,
      10,
      3,
      11,
      12,
      3,
      13,
      5,
      14,
      15,
      7,
      16,
      17,
      9,
      18,
      15,
      10,
      16,
      19,
      20,
      16,
      21,
      22,
      16,
      23,
      24,
      14,
      25,
      22,
      14,
      26,
      0,
      16,
      27,
      28,
      18,
      29,
      30,
      16,
      31,
      30,
      18,
      0,
      0,
      32
    ],
    [
      1,
      2,
      3,
      4,
      5,
      6,
      6,
      10,
      9,
      8,
      7,
      0,
      13,
      12,
      9,
      11,
      3,
      0,
      2,
      8,
      16,
      15,
      14,
      0,
      7,
      11,
      16,
      17,
      5,
      0,
      4,
      15,
      18,
      10,
      13,
      0,
      14,
      17,
      18,
      12,
      1,
      0,
      1,
      8,
      11,
      4,
      14,
      13,
      1,
      12,
      19,
      16,
      3,
      7,
      1,
      10,
      18,
      16,
      11,
      2,
      1,
      13,
      5,
      17,
      19,
      9,
      2,
      9,
      19,
      15,
      4,
      7,
      2,
      13,
      6,
      18,
      19,
      8,
      2,
      7,
      14,
      5,
      10,
      12,
      3,
      15,
      17,
      6,
      13,
      7,
      3,
      11,
      19,
      18,
      5,
      14,
      3,
      8,
      9,
      18,
      17,
      4,
      4,
      16,
      19,
      10,
      6,
      14,
      5,
      15,
      16,
      9,
      12,
      6,
      12,
      10,
      17,
      15,
      11,
      8
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      0,
      5,
      10,
      8,
      11,
      12,
      1,
      0,
      12,
      13,
      14,
      15,
      2,
      1,
      16,
      14,
      17,
      18,
      3,
      2,
      18,
      19,
      20,
      21,
      4,
      3,
      22,
      20,
      23,
      6,
      5,
      4,
      9,
      12,
      16,
      2,
      24,
      0,
      8,
      25,
      26,
      13,
      12,
      9,
      7,
      27,
      28,
      26,
      11,
      8,
      6,
      21,
      20,
      29,
      27,
      7,
      11,
      26,
      30,
      14,
      16,
      12,
      10,
      6,
      23,
      27,
      25,
      8,
      0,
      24,
      4,
      21,
      6,
      10,
      15,
      18,
      22,
      4,
      24,
      2,
      14,
      30,
      31,
      19,
      18,
      15,
      13,
      26,
      28,
      31,
      17,
      14,
      17,
      31,
      29,
      20,
      22,
      18,
      19,
      31,
      28,
      27,
      23,
      20,
      27,
      29,
      31,
      30,
      26,
      25
    ],
    [
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2
    ],
    [
      0,
      1,
      7,
      13,
      2,
      0,
      2,
      3,
      0,
      3,
      14,
      7,
      4,
      0,
      4,
      5,
      0,
      5,
      13,
      14,
      6,
      0,
      6,
      1,
      1,
      6,
      12,
      13,
      10,
      1,
      10,
      9,
      1,
      9,
      2,
      12,
      8,
      1,
      8,
      7,
      2,
      13,
      12,
      2,
      9,
      11,
      2,
      11,
      7,
      8,
      3,
      3,
      8,
      16,
      3,
      16,
      4,
      11,
      15,
      3,
      15,
      14,
      4,
      7,
      11,
      4,
      16,
      17,
      4,
      17,
      14,
      15,
      5,
      5,
      15,
      18,
      5,
      18,
      6,
      17,
      10,
      5,
      10,
      13,
      6,
      14,
      17,
      6,
      18,
      12,
      7,
      14,
      13,
      8,
      12,
      19,
      8,
      19,
      11,
      9,
      16,
      9,
      10,
      19,
      12,
      18,
      9,
      18,
      16,
      10,
      17,
      19,
      11,
      19,
      15,
      15,
      19,
      17,
      16,
      18
    ]
  ],
  [
    [
      31,
      60,
      52,
      120,
      4
    ],
    [
      2,
      5,
      2,
      3,
      1,
      3,
      1
    ],
    [
      1,
      6,
      1,
      5,
      2,
      6,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.5558508647159268,
      0.8312820316803176,
      -0.35474213259410253,
      0.4279348118207162,
      -0.5423346066791824,
      0.1218333214009208,
      0.2523198656125837,
      -0.4952826155062292,
      0.756959596837751,
      0.49384609504095256,
      0.9129018498231336,
      0.38957265610656083,
      -0.32309191149440514,
      -0.14264493727357205,
      0.9355554706147092,
      -0.6764070947603986,
      0.625065266809696,
      -0.15363340047227825,
      0.8558696236414324,
      -0.8323493477457812,
      -0.25161597270438757,
      -0.8639995688454785,
      0.31896377638990064,
      -0.019560912391062047,
      0.3526376782326571,
      0.3058398516164474,
      -0.8687319096115376,
      -0.03769487545401502,
      0.7886098179374484,
      0.5981195339753443,
      0.7788293617419174,
      -0.05213671946719588,
      0.40221746424364857,
      0.3251281267212701,
      0.9664218358269974,
      0.9347716147273,
      -0.15641015840158762,
      0.5362899523248648,
      0.7668375022950268,
      -0.6131066525610038,
      -0.5160942313788804,
      -0.07077204588182145,
      -0.6379275527798013,
      -0.8421298039413122,
      0.5160942313788804,
      -0.9664218358269974,
      0.25161597270438757,
      0.05213671946719588,
      0.2034175846349286,
      0.9777029450423531,
      -0.7788293617419174,
      -0.625065266809696,
      -0.5800294821331975,
      -0.7468985882106168,
      -0.6628908367236542,
      0.7468985882106168,
      0.18154781973076223,
      0.7805724900533733,
      0.14011714243553386,
      -0.9777029450423531,
      0.6628908367236542,
      -0.2034175846349286,
      0.48507881883410536,
      0.8421298039413122,
      0.15641015840158762,
      0.6131066525610038,
      -0.5981195339753443,
      0.8323493477457812,
      -0.49384609504095256,
      -0.14011714243553386,
      0.6764070947603986,
      -0.38957265610656083,
      0.5800294821331975,
      -0.3251281267212701,
      -0.9347716147273,
      -0.31896377638990064,
      -0.7886098179374484,
      0.14264493727357205,
      -0.48507881883410536,
      0.6379275527798013,
      -0.9129018498231336,
      -0.1218333214009208,
      0.03769487545401502,
      0.8687319096115376,
      -0.40221746424364857,
      -0.8558696236414324,
      -0.756959596837751,
      -0.4279348118207162,
      -0.3058398516164474,
      -0.18154781973076223,
      -0.7805724900533733,
      0.8639995688454785,
      0.15363340047227825,
      0.32309191149440514,
      -0.9355554706147092,
      0.07077204588182145,
      -0.7668375022950268,
      0.5423346066791824,
      -0.8312820316803176,
      0.35474213259410253,
      -0.5362899523248648,
      -0.3526376782326571,
      -0.5558508647159268,
      -0.2523198656125837,
      0.4952826155062292,
      0.019560912391062,
      -0.9355554706147093,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      15,
      16,
      17,
      18,
      13,
      19,
      20,
      11,
      21,
      22,
      11,
      23,
      24,
      13,
      25,
      26,
      16,
      27,
      28,
      13,
      29,
      28,
      11,
      30,
      15,
      31,
      32,
      18,
      33,
      34,
      20,
      35,
      36,
      22,
      33,
      37,
      24,
      38,
      39,
      26,
      40,
      41,
      42,
      31,
      43,
      44,
      40,
      45,
      46,
      38,
      47,
      48,
      49,
      50,
      51,
      49,
      52,
      53,
      49,
      54,
      55,
      35,
      56,
      57,
      49,
      58,
      59,
      31,
      60,
      61,
      38,
      62,
      55,
      33,
      63,
      61,
      33,
      64,
      44,
      31,
      65,
      42,
      66,
      67,
      46,
      68,
      69,
      48,
      70,
      71,
      51,
      66,
      72,
      53,
      73,
      74,
      57,
      75,
      76,
      77,
      66,
      78,
      79,
      68,
      80,
      81,
      68,
      82,
      83,
      73,
      84,
      85,
      70,
      86,
      87,
      75,
      88,
      89,
      70,
      90,
      85,
      73,
      91,
      92,
      68,
      93,
      77,
      73,
      94,
      87,
      70,
      95,
      79,
      96,
      97,
      81,
      98,
      99,
      83,
      100,
      101,
      89,
      100,
      102,
      103,
      98,
      104,
      0,
      100,
      105,
      106,
      100,
      107,
      103,
      108,
      0,
      0,
      109
    ],
    [
      1,
      2,
      3,
      4,
      4,
      6,
      5,
      0,
      9,
      8,
      7,
      0,
      12,
      11,
      10,
      0,
      14,
      13,
      1,
      0,
      1,
      15,
      16,
      17,
      1,
      18,
      19,
      20,
      2,
      21,
      22,
      12,
      2,
      9,
      23,
      24,
      2,
      17,
      25,
      8,
      3,
      11,
      26,
      27,
      3,
      28,
      23,
      10,
      3,
      7,
      20,
      29,
      4,
      22,
      30,
      31,
      4,
      27,
      32,
      33,
      20,
      33,
      34,
      5,
      36,
      35,
      17,
      5,
      16,
      37,
      9,
      5,
      31,
      38,
      19,
      6,
      18,
      35,
      39,
      6,
      29,
      12,
      15,
      6,
      40,
      26,
      22,
      7,
      21,
      13,
      33,
      7,
      42,
      41,
      11,
      8,
      28,
      43,
      40,
      8,
      29,
      39,
      44,
      9,
      46,
      45,
      21,
      10,
      40,
      32,
      14,
      10,
      37,
      47,
      24,
      11,
      20,
      25,
      37,
      12,
      45,
      48,
      31,
      13,
      30,
      49,
      18,
      13,
      27,
      48,
      50,
      14,
      34,
      15,
      22,
      14,
      15,
      33,
      38,
      49,
      16,
      19,
      51,
      52,
      16,
      49,
      53,
      39,
      17,
      47,
      28,
      29,
      18,
      34,
      50,
      54,
      19,
      36,
      44,
      25,
      21,
      24,
      43,
      27,
      23,
      42,
      55,
      46,
      23,
      44,
      52,
      41,
      24,
      56,
      55,
      40,
      25,
      39,
      57,
      42,
      26,
      46,
      50,
      30,
      26,
      41,
      56,
      45,
      28,
      37,
      52,
      57,
      30,
      32,
      55,
      58,
      31,
      53,
      36,
      34,
      32,
      45,
      54,
      38,
      54,
      58,
      52,
      35,
      51,
      42,
      47,
      35,
      49,
      58,
      59,
      36,
      50,
      59,
      51,
      38,
      58,
      48,
      43,
      41,
      57,
      59,
      46,
      43,
      59,
      56,
      47,
      44,
      55,
      51,
      53,
      48,
      53,
      54,
      56,
      57
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      10,
      4,
      3,
      2,
      5,
      11,
      12,
      0,
      4,
      13,
      14,
      5,
      7,
      15,
      16,
      1,
      6,
      17,
      18,
      7,
      0,
      19,
      17,
      6,
      9,
      20,
      21,
      2,
      8,
      18,
      20,
      9,
      1,
      16,
      22,
      8,
      10,
      23,
      24,
      4,
      2,
      25,
      26,
      10,
      16,
      27,
      11,
      5,
      28,
      29,
      12,
      11,
      29,
      19,
      0,
      12,
      30,
      31,
      13,
      4,
      31,
      28,
      14,
      13,
      22,
      16,
      5,
      14,
      21,
      23,
      15,
      7,
      23,
      10,
      16,
      15,
      32,
      20,
      18,
      17,
      33,
      34,
      7,
      18,
      14,
      35,
      17,
      19,
      36,
      23,
      21,
      20,
      37,
      25,
      2,
      21,
      38,
      33,
      18,
      8,
      14,
      19,
      8,
      22,
      39,
      40,
      24,
      23,
      40,
      30,
      4,
      24,
      37,
      39,
      26,
      25,
      27,
      16,
      10,
      26,
      27,
      26,
      30,
      11,
      28,
      31,
      41,
      29,
      11,
      42,
      43,
      28,
      29,
      38,
      8,
      19,
      30,
      26,
      44,
      31,
      28,
      43,
      35,
      14,
      7,
      34,
      37,
      21,
      32,
      45,
      46,
      20,
      17,
      47,
      45,
      32,
      33,
      46,
      37,
      34,
      35,
      43,
      47,
      17,
      36,
      48,
      39,
      23,
      20,
      46,
      48,
      36,
      38,
      29,
      47,
      33,
      39,
      37,
      49,
      40,
      40,
      42,
      11,
      30,
      39,
      48,
      44,
      26,
      50,
      45,
      41,
      31,
      45,
      47,
      29,
      41,
      40,
      50,
      43,
      42,
      48,
      50,
      31,
      44,
      49,
      37,
      46,
      45,
      51,
      48,
      46,
      33,
      51,
      33,
      47,
      43,
      45,
      50,
      40,
      49,
      50,
      48,
      51,
      43
    ],
    [
      6,
      1,
      5,
      2,
      6,
      1,
      3,
      1,
      6,
      1,
      5,
      2,
      3,
      1,
      6,
      1,
      6,
      1,
      3,
      1,
      5,
      2,
      6,
      1,
      3,
      1,
      3,
      1,
      6,
      1,
      3,
      1,
      6,
      1,
      6,
      1,
      5,
      2,
      5,
      2,
      6,
      1,
      5,
      2,
      3,
      1,
      6,
      1,
      3,
      1,
      3,
      1,
      6,
      1,
      3,
      1,
      5,
      2,
      6,
      1,
      5,
      2,
      6,
      1,
      3,
      1,
      6,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      6,
      1,
      3,
      1,
      5,
      2,
      6,
      1,
      3,
      1,
      3,
      1,
      6,
      1,
      3,
      1,
      6,
      1,
      5,
      2,
      5,
      2,
      6,
      1,
      3,
      1,
      5,
      2,
      3,
      1
    ],
    [
      0,
      1,
      5,
      17,
      9,
      2,
      0,
      2,
      7,
      12,
      3,
      0,
      3,
      10,
      27,
      14,
      4,
      0,
      4,
      1,
      1,
      4,
      13,
      31,
      18,
      6,
      1,
      6,
      20,
      15,
      5,
      2,
      9,
      8,
      2,
      8,
      24,
      40,
      21,
      7,
      3,
      12,
      29,
      37,
      28,
      11,
      3,
      11,
      10,
      4,
      14,
      33,
      22,
      13,
      5,
      15,
      34,
      49,
      36,
      16,
      5,
      16,
      17,
      6,
      18,
      19,
      6,
      19,
      39,
      25,
      29,
      20,
      7,
      21,
      22,
      7,
      22,
      33,
      15,
      20,
      12,
      8,
      9,
      25,
      44,
      42,
      23,
      8,
      23,
      11,
      28,
      24,
      9,
      17,
      37,
      29,
      25,
      10,
      11,
      23,
      41,
      46,
      26,
      10,
      26,
      21,
      40,
      27,
      12,
      20,
      29,
      13,
      22,
      21,
      26,
      45,
      30,
      13,
      30,
      31,
      14,
      27,
      32,
      14,
      32,
      50,
      38,
      34,
      33,
      15,
      33,
      34,
      16,
      36,
      39,
      19,
      35,
      16,
      35,
      52,
      47,
      37,
      17,
      18,
      31,
      49,
      34,
      38,
      18,
      38,
      54,
      51,
      35,
      19,
      23,
      42,
      41,
      24,
      28,
      47,
      57,
      56,
      43,
      24,
      43,
      40,
      25,
      39,
      44,
      26,
      46,
      45,
      27,
      40,
      43,
      55,
      48,
      32,
      28,
      37,
      47,
      30,
      45,
      50,
      32,
      48,
      30,
      48,
      58,
      53,
      49,
      31,
      35,
      51,
      52,
      36,
      49,
      53,
      36,
      53,
      59,
      57,
      44,
      39,
      38,
      50,
      54,
      41,
      42,
      52,
      51,
      58,
      55,
      41,
      55,
      43,
      56,
      46,
      42,
      44,
      57,
      47,
      52,
      45,
      46,
      56,
      59,
      54,
      50,
      48,
      55,
      58,
      51,
      54,
      59,
      53,
      58,
      56,
      57,
      59
    ]
  ],
  [
    [
      32,
      60,
      112,
      180,
      6
    ],
    [
      0,
      5,
      2,
      3,
      1,
      3,
      1
    ],
    [
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.6442062213809278,
      0.7648518446954986,
      0.2791862207972091,
      0.5805658530975317,
      -0.14194515637649557,
      0.6283734783129735,
      -0.6278134281331412,
      0.14440206065567737,
      -0.4022186611988967,
      -0.5032114905775305,
      -0.5805658530975317,
      0.8003600017764493,
      0.3258865804342703,
      0.9729065754197572,
      -0.14440206065567737,
      0.18055702806424961,
      0.5032114905775305,
      0.2915016934236514,
      0.9393752830193848,
      -0.3057103174426774,
      0.8142132952839417,
      0.49355639150148006,
      -0.3144917300198036,
      0.2695640483911205,
      0.9101813970655194,
      0.36691315197630225,
      0.19220968587111917,
      0.48044106031474587,
      0.7249679137532091,
      -0.07351830716006716,
      0.9808130393346756,
      -0.6671962579770799,
      0.6698112346282643,
      -0.9805179560904176,
      0.07735436252000136,
      -0.8927910249113244,
      -0.31100180470641126,
      -0.4946496843337719,
      -0.8501299014886523,
      0.11542105973102731,
      -0.8620209204993835,
      -0.8142132952839417,
      -0.9393752830193848,
      0.6671962579770799,
      -0.6698112346282643,
      -0.3258865804342703,
      0.9805179560904176,
      -0.07735436252000136,
      -0.18055702806424961,
      0.8763982316635379,
      0.16659974405073388,
      0.4518524812582682,
      0.5972120108663288,
      -0.41396610904679787,
      0.6870006365627696,
      0.6584148453999537,
      -0.7471655971482657,
      0.09073842512976897,
      0.8167527950242357,
      -0.35880942992185305,
      -0.4518524812582682,
      0.8927910249113244,
      0.31100180470641126,
      0.4946496843337719,
      0.8501299014886523,
      0.8091414143535754,
      -0.09073842512976897,
      0.3057103174426774,
      -0.49355639150148006,
      -0.2915016934236514,
      -0.6584148453999537,
      0.7471655971482657,
      -0.8167527950242357,
      0.35880942992185305,
      -0.6748076386477402,
      -0.2695640483911205,
      -0.040732720664494244,
      0.9325216557627083,
      -0.11542105973102731,
      0.8620209204993835,
      -0.8003600017764493,
      -0.8763982316635379,
      -0.16659974405073388,
      -0.8091414143535754,
      -0.9729065754197572,
      -0.48044106031474587,
      -0.7249679137532091,
      0.07351830716006716,
      -0.9808130393346756,
      0.14194515637649557,
      -0.6283734783129735,
      -0.7648518446954986,
      0.6278134281331412,
      0.6748076386477402,
      -0.6870006365627696,
      0.3144917300198036,
      -0.9101813970655194,
      0.4022186611988967,
      0.040732720664494244,
      -0.9325216557627083,
      -0.2791862207972091,
      -0.5972120108663288,
      0.41396610904679787,
      -0.6442062213809278,
      -0.36691315197630225,
      -0.19220968587111917,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      11,
      3,
      4,
      12,
      3,
      13,
      11,
      14,
      15,
      16,
      17,
      13,
      18,
      14,
      19,
      20,
      17,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      26,
      29,
      30,
      23,
      31,
      32,
      17,
      33,
      34,
      14,
      35,
      36,
      17,
      37,
      38,
      14,
      39,
      40,
      17,
      41,
      42,
      23,
      21,
      43,
      23,
      19,
      44,
      17,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      47,
      65,
      66,
      50,
      67,
      5,
      68,
      69,
      22,
      70,
      71,
      20,
      50,
      72,
      73,
      68,
      74,
      75,
      53,
      76,
      77,
      56,
      78,
      61,
      79,
      80,
      81,
      70,
      82,
      18,
      47,
      83,
      84,
      62,
      85,
      12,
      59,
      86,
      9,
      50,
      82,
      11,
      47,
      87,
      88,
      70,
      89,
      90,
      50,
      71,
      44,
      50,
      69,
      43,
      70,
      91,
      92,
      93,
      94,
      16,
      93,
      95,
      25,
      96,
      97,
      77,
      98,
      99,
      18,
      93,
      100,
      75,
      101,
      102,
      5,
      93,
      103,
      104,
      96,
      105,
      0,
      93,
      106,
      107,
      98,
      102,
      12,
      93,
      0,
      0,
      108
    ],
    [
      1,
      2,
      3,
      4,
      5,
      6,
      0,
      6,
      7,
      8,
      9,
      2,
      0,
      1,
      9,
      10,
      11,
      12,
      0,
      13,
      14,
      15,
      16,
      4,
      0,
      3,
      16,
      17,
      18,
      5,
      0,
      4,
      18,
      19,
      20,
      6,
      0,
      5,
      21,
      22,
      7,
      1,
      1,
      6,
      22,
      23,
      24,
      25,
      1,
      26,
      27,
      28,
      29,
      9,
      1,
      8,
      29,
      30,
      10,
      2,
      2,
      9,
      31,
      32,
      33,
      11,
      2,
      10,
      33,
      34,
      35,
      12,
      2,
      11,
      35,
      36,
      37,
      13,
      3,
      12,
      37,
      26,
      25,
      14,
      3,
      13,
      25,
      31,
      30,
      15,
      3,
      14,
      30,
      38,
      34,
      16,
      3,
      15,
      33,
      39,
      17,
      4,
      4,
      16,
      39,
      40,
      41,
      36,
      4,
      35,
      42,
      43,
      19,
      5,
      5,
      18,
      43,
      44,
      45,
      20,
      5,
      19,
      45,
      27,
      26,
      37,
      6,
      37,
      36,
      41,
      46,
      22,
      6,
      21,
      46,
      47,
      23,
      7,
      7,
      22,
      45,
      48,
      49,
      24,
      7,
      23,
      49,
      50,
      31,
      25,
      7,
      24,
      31,
      14,
      13,
      26,
      8,
      25,
      13,
      37,
      20,
      27,
      8,
      26,
      20,
      45,
      47,
      28,
      8,
      27,
      47,
      51,
      50,
      29,
      8,
      28,
      49,
      52,
      30,
      9,
      9,
      29,
      52,
      38,
      15,
      14,
      10,
      14,
      25,
      24,
      50,
      32,
      10,
      31,
      50,
      53,
      54,
      33,
      10,
      32,
      54,
      39,
      16,
      11,
      11,
      15,
      38,
      55,
      42,
      35,
      11,
      34,
      42,
      18,
      36,
      12,
      12,
      35,
      17,
      41,
      21,
      37,
      12,
      36,
      21,
      20,
      26,
      13,
      15,
      30,
      52,
      53,
      55,
      34,
      16,
      33,
      54,
      56,
      40,
      17,
      17,
      39,
      55,
      57,
      44,
      41,
      17,
      40,
      44,
      46,
      21,
      36,
      18,
      35,
      34,
      55,
      56,
      43,
      18,
      42,
      56,
      58,
      46,
      19,
      19,
      41,
      40,
      57,
      48,
      45,
      19,
      44,
      48,
      23,
      27,
      20,
      21,
      41,
      43,
      58,
      47,
      22,
      22,
      46,
      58,
      51,
      28,
      27,
      23,
      45,
      44,
      57,
      59,
      49,
      23,
      48,
      59,
      52,
      29,
      24,
      24,
      28,
      51,
      53,
      32,
      31,
      28,
      47,
      58,
      57,
      53,
      50,
      29,
      49,
      59,
      54,
      38,
      30,
      32,
      50,
      51,
      57,
      55,
      38,
      32,
      52,
      59,
      56,
      39,
      33,
      34,
      38,
      53,
      57,
      40,
      42,
      39,
      54,
      59,
      58,
      43,
      42,
      40,
      55,
      53,
      51,
      48,
      44,
      43,
      56,
      59,
      51,
      47,
      46,
      48,
      58,
      56,
      54,
      52,
      49
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      5,
      6,
      7,
      8,
      9,
      0,
      0,
      9,
      10,
      11,
      12,
      1,
      1,
      13,
      14,
      15,
      16,
      2,
      2,
      16,
      17,
      18,
      19,
      3,
      3,
      19,
      20,
      21,
      22,
      4,
      4,
      22,
      23,
      24,
      6,
      5,
      6,
      24,
      25,
      26,
      27,
      7,
      7,
      28,
      29,
      30,
      31,
      8,
      8,
      31,
      32,
      33,
      10,
      9,
      10,
      33,
      34,
      35,
      36,
      11,
      11,
      36,
      37,
      38,
      39,
      12,
      12,
      39,
      40,
      41,
      42,
      1,
      1,
      42,
      43,
      44,
      45,
      13,
      13,
      45,
      46,
      33,
      47,
      14,
      14,
      47,
      48,
      49,
      37,
      15,
      15,
      37,
      50,
      51,
      17,
      16,
      17,
      51,
      52,
      53,
      54,
      18,
      18,
      55,
      56,
      57,
      20,
      19,
      20,
      57,
      58,
      59,
      60,
      21,
      21,
      60,
      61,
      62,
      63,
      22,
      22,
      64,
      65,
      66,
      67,
      23,
      23,
      67,
      68,
      69,
      25,
      24,
      25,
      69,
      70,
      71,
      72,
      26,
      26,
      72,
      73,
      74,
      75,
      27,
      27,
      75,
      46,
      45,
      44,
      7,
      7,
      44,
      43,
      63,
      62,
      28,
      28,
      62,
      61,
      69,
      76,
      29,
      29,
      76,
      77,
      78,
      73,
      30,
      30,
      73,
      79,
      80,
      32,
      31,
      32,
      80,
      81,
      48,
      47,
      33,
      33,
      46,
      75,
      74,
      82,
      34,
      34,
      82,
      83,
      84,
      85,
      35,
      35,
      85,
      86,
      50,
      37,
      36,
      37,
      49,
      87,
      88,
      89,
      38,
      38,
      89,
      55,
      18,
      40,
      39,
      40,
      18,
      54,
      65,
      64,
      41,
      41,
      64,
      22,
      63,
      43,
      42,
      48,
      81,
      84,
      90,
      87,
      49,
      50,
      86,
      91,
      92,
      52,
      51,
      52,
      92,
      93,
      94,
      95,
      53,
      53,
      95,
      58,
      66,
      65,
      54,
      55,
      89,
      88,
      92,
      96,
      56,
      56,
      96,
      97,
      98,
      58,
      57,
      58,
      95,
      94,
      99,
      100,
      59,
      59,
      100,
      70,
      69,
      61,
      60,
      66,
      58,
      98,
      101,
      68,
      67,
      68,
      101,
      102,
      77,
      76,
      69,
      70,
      100,
      99,
      103,
      104,
      71,
      71,
      104,
      105,
      79,
      73,
      72,
      73,
      78,
      106,
      83,
      82,
      74,
      77,
      102,
      103,
      107,
      106,
      78,
      79,
      105,
      108,
      84,
      81,
      80,
      83,
      106,
      107,
      109,
      90,
      84,
      84,
      108,
      110,
      91,
      86,
      85,
      87,
      90,
      109,
      93,
      92,
      88,
      91,
      110,
      111,
      97,
      96,
      92,
      93,
      109,
      107,
      103,
      99,
      94,
      97,
      111,
      103,
      102,
      101,
      98,
      103,
      111,
      110,
      108,
      105,
      104
    ],
    [
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      12,
      13,
      3,
      0,
      3,
      4,
      0,
      4,
      5,
      0,
      5,
      6,
      0,
      6,
      1,
      1,
      6,
      7,
      1,
      7,
      25,
      26,
      8,
      1,
      8,
      9,
      1,
      9,
      2,
      2,
      9,
      10,
      2,
      10,
      11,
      2,
      11,
      12,
      3,
      13,
      14,
      3,
      14,
      15,
      3,
      15,
      16,
      3,
      16,
      4,
      4,
      16,
      17,
      4,
      17,
      36,
      35,
      18,
      4,
      18,
      5,
      5,
      18,
      19,
      5,
      19,
      20,
      5,
      20,
      37,
      21,
      6,
      6,
      21,
      22,
      6,
      22,
      7,
      7,
      22,
      23,
      7,
      23,
      24,
      7,
      24,
      25,
      8,
      26,
      27,
      8,
      27,
      28,
      8,
      28,
      29,
      8,
      29,
      9,
      9,
      29,
      30,
      9,
      30,
      14,
      31,
      10,
      10,
      31,
      32,
      10,
      32,
      33,
      10,
      33,
      11,
      11,
      33,
      16,
      15,
      34,
      11,
      34,
      35,
      11,
      35,
      12,
      12,
      35,
      36,
      12,
      36,
      37,
      12,
      37,
      13,
      13,
      37,
      26,
      13,
      26,
      25,
      13,
      25,
      14,
      14,
      25,
      31,
      14,
      30,
      15,
      15,
      30,
      38,
      15,
      38,
      34,
      16,
      33,
      39,
      16,
      39,
      17,
      17,
      39,
      40,
      17,
      40,
      41,
      17,
      41,
      36,
      18,
      35,
      42,
      18,
      42,
      43,
      18,
      43,
      19,
      19,
      43,
      46,
      41,
      44,
      19,
      44,
      45,
      19,
      45,
      20,
      20,
      45,
      27,
      20,
      27,
      26,
      20,
      26,
      37,
      21,
      37,
      36,
      21,
      36,
      41,
      21,
      41,
      46,
      21,
      46,
      22,
      22,
      46,
      47,
      22,
      47,
      27,
      45,
      23,
      23,
      45,
      48,
      23,
      48,
      49,
      23,
      49,
      24,
      24,
      49,
      29,
      28,
      50,
      24,
      50,
      31,
      24,
      31,
      25,
      27,
      47,
      28,
      28,
      47,
      51,
      28,
      51,
      50,
      29,
      49,
      52,
      29,
      52,
      30,
      30,
      52,
      38,
      31,
      50,
      32,
      32,
      50,
      53,
      32,
      53,
      38,
      52,
      54,
      32,
      54,
      33,
      33,
      54,
      39,
      34,
      38,
      55,
      34,
      55,
      42,
      34,
      42,
      35,
      38,
      53,
      55,
      39,
      54,
      56,
      39,
      56,
      42,
      55,
      40,
      40,
      55,
      57,
      40,
      57,
      44,
      40,
      44,
      41,
      42,
      56,
      43,
      43,
      56,
      58,
      43,
      58,
      46,
      44,
      57,
      48,
      44,
      48,
      45,
      46,
      58,
      47,
      47,
      58,
      51,
      48,
      57,
      51,
      58,
      59,
      48,
      59,
      49,
      49,
      59,
      52,
      50,
      51,
      53,
      51,
      57,
      53,
      52,
      59,
      54,
      53,
      57,
      55,
      54,
      59,
      56,
      56,
      59,
      58
    ]
  ],
  [
    [
      33,
      60,
      44,
      120,
      4
    ],
    [
      2,
      3,
      2,
      5,
      1,
      5,
      1
    ],
    [
      1,
      10,
      1,
      3,
      2,
      10,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.4364663517030667,
      0.8997205809755687,
      -0.3947875238518402,
      0.18613351976449002,
      -0.0230394893916557,
      0.43585784161531027,
      -0.165034603304479,
      -0.40406244057214513,
      0.7478962198524539,
      0.6371856535975148,
      0.41342686231141096,
      0.7994411619511375,
      0.5411827886967484,
      0.737465072621946,
      -0.5598221271563192,
      -0.21792892080765514,
      -0.5971008040754607,
      0.48730388118908524,
      -0.22535276961527625,
      0.7370282030399055,
      0.16943475423656393,
      -0.6537867624229654,
      -0.45510569016263747,
      -0.6219913613798003,
      0.8526126568461356,
      0.47493014524389215,
      0.8153339799269941,
      0.31267463689026953,
      0.4808646223859512,
      0.6875780535416567,
      0.3746507262194609,
      -0.8641324015419635,
      -0.16648288123388014,
      -0.5296630440009206,
      0.7884742426136804,
      -0.8871718909336191,
      0.2693749603814301,
      0.08607709853411097,
      0.9231617228043955,
      0.3158300190814721,
      -0.8717156832306205,
      -0.12063633262159451,
      -0.7594159645482818,
      -0.5705453218060254,
      0.984768734163558,
      0.050139709512215636,
      0.6130206997033735,
      0.9617292447719024,
      -0.050139709512215636,
      0.819734130859079,
      -0.9617292447719024,
      -0.2693749603814301,
      -0.819734130859079,
      0.5705453218060254,
      -0.21823317585153335,
      0.9746077623781705,
      -0.984768734163558,
      0.16648288123388014,
      -0.05013970951221564,
      0.21823317585153335,
      -0.9746077623781705,
      -0.6130206997033735,
      -0.7884742426136804,
      0.8871718909336191,
      -0.3746507262194609,
      0.7594159645482818,
      -0.31267463689026953,
      0.8641324015419635,
      -0.47493014524389215,
      0.5296630440009206,
      -0.8153339799269941,
      -0.48730388118908524,
      -0.6875780535416567,
      0.6219913613798003,
      -0.3158300190814721,
      0.8717156832306205,
      -0.8526126568461356,
      0.2179289208076551,
      0.12063633262159451,
      -0.08607709853411097,
      -0.9231617228043955,
      -0.4808646223859512,
      -0.7370282030399055,
      0.5971008040754607,
      -0.6371856535975148,
      0.45510569016263747,
      0.5598221271563192,
      -0.7994411619511373,
      0.22535276961527625,
      -0.7478962198524539,
      -0.18613351976449,
      -0.5411827886967484,
      0.40406244057214513,
      -0.737465072621946,
      -0.169434754236564,
      0.653786762422965,
      -0.413426862311411,
      -0.4358578416153102,
      0.3947875238518402,
      -0.8997205809755687,
      0.165034603304479,
      0.023039489391656,
      -0.43585784161531,
      -0.899720580975569,
      -0.43646635170307,
      -0.89972058097557,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      9,
      15,
      16,
      17,
      13,
      18,
      19,
      11,
      20,
      21,
      11,
      22,
      23,
      15,
      24,
      25,
      11,
      26,
      17,
      27,
      28,
      19,
      29,
      30,
      21,
      27,
      31,
      25,
      32,
      33,
      34,
      27,
      35,
      36,
      29,
      37,
      38,
      32,
      39,
      40,
      32,
      41,
      42,
      32,
      43,
      42,
      27,
      44,
      45,
      29,
      46,
      34,
      47,
      48,
      36,
      47,
      49,
      38,
      50,
      51,
      45,
      50,
      52,
      53,
      47,
      54,
      55,
      47,
      56,
      57,
      47,
      58,
      59,
      60,
      61,
      57,
      50,
      61,
      62,
      50,
      56,
      62,
      47,
      63,
      64,
      50,
      65,
      53,
      66,
      67,
      55,
      68,
      69,
      59,
      70,
      71,
      64,
      68,
      72,
      73,
      68,
      74,
      75,
      66,
      76,
      77,
      66,
      78,
      79,
      70,
      80,
      77,
      70,
      81,
      82,
      66,
      83,
      84,
      70,
      85,
      73,
      86,
      87,
      75,
      86,
      88,
      79,
      89,
      90,
      84,
      86,
      91,
      92,
      86,
      93,
      94,
      95,
      96,
      97,
      95,
      98,
      99,
      89,
      100,
      92,
      101,
      102,
      94,
      101,
      103,
      104,
      105,
      106,
      0,
      107,
      0,
      0,
      108
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      9,
      8,
      3,
      0,
      2,
      6,
      10,
      0,
      12,
      8,
      11,
      0,
      1,
      6,
      13,
      14,
      1,
      15,
      3,
      5,
      1,
      11,
      13,
      16,
      2,
      17,
      4,
      12,
      2,
      18,
      10,
      19,
      3,
      20,
      9,
      18,
      4,
      21,
      22,
      7,
      4,
      23,
      22,
      8,
      16,
      7,
      24,
      5,
      26,
      15,
      25,
      5,
      25,
      14,
      20,
      6,
      13,
      21,
      27,
      7,
      19,
      23,
      28,
      8,
      30,
      29,
      10,
      9,
      31,
      29,
      17,
      9,
      15,
      30,
      32,
      10,
      33,
      16,
      22,
      11,
      21,
      12,
      34,
      11,
      28,
      17,
      35,
      12,
      13,
      36,
      27,
      26,
      14,
      15,
      37,
      32,
      14,
      24,
      37,
      38,
      16,
      39,
      24,
      36,
      17,
      23,
      31,
      40,
      18,
      41,
      19,
      31,
      18,
      32,
      20,
      42,
      19,
      43,
      28,
      29,
      20,
      30,
      25,
      44,
      21,
      45,
      34,
      39,
      22,
      35,
      33,
      45,
      23,
      46,
      40,
      34,
      47,
      38,
      27,
      24,
      38,
      26,
      48,
      25,
      37,
      36,
      49,
      26,
      33,
      47,
      50,
      27,
      51,
      35,
      46,
      28,
      42,
      43,
      52,
      29,
      53,
      44,
      41,
      30,
      52,
      41,
      51,
      31,
      48,
      42,
      53,
      32,
      46,
      50,
      34,
      33,
      54,
      45,
      40,
      35,
      36,
      50,
      39,
      55,
      37,
      56,
      49,
      44,
      38,
      55,
      48,
      56,
      39,
      47,
      45,
      57,
      40,
      43,
      54,
      58,
      41,
      43,
      53,
      58,
      42,
      56,
      52,
      44,
      46,
      58,
      51,
      57,
      59,
      57,
      49,
      47,
      59,
      53,
      49,
      48,
      54,
      55,
      59,
      50,
      54,
      52,
      59,
      51,
      55,
      58,
      56,
      57
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      10,
      3,
      2,
      5,
      7,
      11,
      0,
      4,
      8,
      7,
      5,
      3,
      12,
      13,
      4,
      6,
      10,
      9,
      7,
      0,
      14,
      15,
      6,
      8,
      15,
      14,
      2,
      10,
      16,
      12,
      3,
      2,
      17,
      7,
      9,
      13,
      12,
      11,
      7,
      18,
      19,
      0,
      11,
      19,
      18,
      8,
      4,
      7,
      20,
      4,
      13,
      21,
      22,
      10,
      6,
      23,
      2,
      14,
      0,
      24,
      21,
      6,
      15,
      18,
      25,
      15,
      8,
      20,
      7,
      16,
      10,
      7,
      17,
      12,
      16,
      22,
      21,
      17,
      2,
      12,
      26,
      27,
      11,
      19,
      4,
      28,
      0,
      11,
      27,
      29,
      18,
      20,
      27,
      26,
      4,
      22,
      2,
      30,
      10,
      23,
      21,
      24,
      2,
      0,
      25,
      18,
      23,
      15,
      30,
      2,
      24,
      25,
      0,
      28,
      15,
      10,
      31,
      32,
      20,
      17,
      32,
      31,
      12,
      21,
      33,
      32,
      17,
      34,
      4,
      26,
      12,
      29,
      27,
      28,
      4,
      4,
      34,
      18,
      29,
      32,
      35,
      27,
      20,
      32,
      33,
      10,
      30,
      36,
      37,
      21,
      23,
      38,
      36,
      23,
      18,
      37,
      36,
      30,
      15,
      36,
      38,
      15,
      28,
      39,
      12,
      31,
      10,
      39,
      10,
      33,
      21,
      12,
      35,
      32,
      34,
      27,
      40,
      36,
      28,
      34,
      36,
      40,
      18,
      35,
      12,
      39,
      27,
      30,
      36,
      41,
      32,
      37,
      15,
      42,
      21,
      18,
      42,
      15,
      38,
      21,
      41,
      36,
      39,
      43,
      36,
      34,
      32,
      42,
      18,
      40,
      27,
      36,
      43,
      27,
      39,
      21,
      42,
      32,
      41,
      32,
      42,
      27,
      43
    ],
    [
      10,
      1,
      3,
      2,
      10,
      1,
      5,
      1,
      10,
      1,
      3,
      2,
      5,
      1,
      10,
      1,
      5,
      1,
      3,
      2,
      10,
      1,
      5,
      1,
      10,
      1,
      3,
      2,
      3,
      2,
      10,
      1,
      3,
      2,
      5,
      1,
      10,
      1,
      3,
      2,
      5,
      1,
      10,
      1,
      3,
      2,
      5,
      1,
      3,
      2,
      3,
      2,
      3,
      2,
      10,
      1,
      5,
      1,
      3,
      2,
      5,
      1,
      3,
      2,
      10,
      1,
      3,
      2,
      5,
      1,
      3,
      2,
      10,
      1,
      3,
      2,
      3,
      2,
      5,
      1,
      3,
      2,
      3,
      2,
      5,
      1,
      3,
      2
    ],
    [
      0,
      1,
      5,
      14,
      25,
      32,
      30,
      18,
      9,
      2,
      0,
      2,
      3,
      0,
      3,
      10,
      18,
      29,
      31,
      28,
      23,
      12,
      4,
      0,
      4,
      11,
      7,
      1,
      1,
      7,
      16,
      27,
      36,
      38,
      37,
      25,
      15,
      6,
      1,
      6,
      5,
      2,
      9,
      19,
      17,
      8,
      2,
      8,
      12,
      22,
      21,
      16,
      13,
      5,
      6,
      3,
      3,
      6,
      15,
      20,
      10,
      4,
      12,
      8,
      4,
      8,
      17,
      28,
      40,
      46,
      45,
      33,
      21,
      11,
      5,
      13,
      24,
      26,
      14,
      7,
      11,
      22,
      34,
      45,
      50,
      47,
      36,
      24,
      13,
      7,
      13,
      16,
      9,
      18,
      10,
      9,
      10,
      20,
      32,
      44,
      53,
      52,
      43,
      31,
      19,
      11,
      21,
      22,
      12,
      23,
      35,
      34,
      22,
      14,
      26,
      38,
      49,
      56,
      53,
      42,
      30,
      20,
      15,
      14,
      15,
      25,
      16,
      21,
      33,
      39,
      27,
      17,
      19,
      29,
      41,
      52,
      58,
      54,
      46,
      35,
      23,
      17,
      23,
      28,
      18,
      30,
      42,
      41,
      29,
      19,
      31,
      29,
      20,
      30,
      32,
      24,
      36,
      27,
      24,
      27,
      39,
      50,
      57,
      59,
      56,
      48,
      37,
      26,
      25,
      37,
      48,
      44,
      32,
      26,
      37,
      38,
      28,
      31,
      43,
      51,
      40,
      33,
      45,
      34,
      33,
      34,
      35,
      40,
      51,
      58,
      59,
      55,
      47,
      39,
      35,
      46,
      40,
      36,
      47,
      55,
      49,
      38,
      39,
      47,
      50,
      41,
      42,
      44,
      48,
      49,
      55,
      57,
      54,
      51,
      43,
      41,
      43,
      52,
      42,
      53,
      44,
      45,
      46,
      54,
      57,
      50,
      48,
      56,
      49,
      51,
      54,
      58,
      52,
      53,
      56,
      59,
      58,
      55,
      59,
      57
    ]
  ],
  [
    [
      34,
      12,
      12,
      30,
      5
    ],
    [
      1,
      5,
      1,
      2,
      1,
      5,
      2
    ],
    [
      1,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2
    ],
    [
      0,
      1,
      0.8944271909999159,
      -0.4472135954999579,
      0.276393202250021,
      0.8506508083520399,
      -0.7236067977499789,
      0.5257311121191336,
      -0.5257311121191336,
      -0.8506508083520399,
      -0.276393202250021,
      0.4472135954999579,
      -0.8944271909999159,
      0.7236067977499789,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      6,
      8,
      3,
      4,
      9,
      3,
      10,
      5,
      11,
      10,
      9,
      11,
      12,
      0,
      11,
      13,
      8,
      11,
      13,
      7,
      11,
      0,
      0,
      14
    ],
    [
      1,
      2,
      3,
      4,
      5,
      7,
      4,
      3,
      6,
      0,
      9,
      5,
      4,
      8,
      0,
      10,
      1,
      5,
      7,
      0,
      6,
      2,
      1,
      9,
      0,
      8,
      3,
      2,
      10,
      0,
      1,
      11,
      4,
      7,
      9,
      1,
      10,
      6,
      3,
      11,
      2,
      11,
      5,
      9,
      10,
      2,
      6,
      8,
      4,
      11,
      3,
      8,
      7,
      5,
      11,
      10,
      9,
      7,
      8,
      6
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      0,
      4,
      8,
      6,
      9,
      1,
      0,
      7,
      6,
      10,
      2,
      1,
      9,
      6,
      5,
      3,
      2,
      10,
      6,
      8,
      4,
      3,
      7,
      9,
      2,
      11,
      0,
      4,
      11,
      2,
      10,
      5,
      9,
      10,
      3,
      11,
      1,
      0,
      11,
      3,
      5,
      8,
      1,
      11,
      4,
      8,
      7,
      8,
      5,
      10,
      9,
      7
    ],
    [
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2
    ],
    [
      0,
      1,
      6,
      9,
      2,
      0,
      2,
      8,
      10,
      3,
      0,
      3,
      7,
      6,
      4,
      0,
      4,
      9,
      8,
      5,
      0,
      5,
      10,
      7,
      1,
      1,
      7,
      11,
      9,
      4,
      1,
      4,
      2,
      5,
      3,
      1,
      3,
      10,
      11,
      6,
      2,
      9,
      11,
      10,
      5,
      2,
      4,
      6,
      11,
      8,
      3,
      5,
      8,
      11,
      7,
      6,
      7,
      10,
      8,
      9
    ]
  ],
  [
    [
      35,
      12,
      12,
      30,
      5
    ],
    [
      1,
      5,
      2,
      2,
      1,
      5,
      1
    ],
    [
      2,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.8944271909999159,
      0.4472135954999579,
      -0.7236067977499789,
      0.5257311121191336,
      0.276393202250021,
      -0.8506508083520399,
      0.8506508083520399,
      -0.5257311121191336,
      0.7236067977499789,
      -0.4472135954999579,
      -0.8944271909999159,
      -0.276393202250021,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      6,
      8,
      3,
      4,
      9,
      3,
      10,
      5,
      11,
      10,
      9,
      11,
      12,
      0,
      11,
      13,
      8,
      11,
      13,
      7,
      11,
      0,
      0,
      14
    ],
    [
      1,
      2,
      3,
      4,
      5,
      7,
      4,
      3,
      6,
      0,
      9,
      5,
      4,
      8,
      0,
      10,
      1,
      5,
      7,
      0,
      6,
      2,
      1,
      9,
      0,
      8,
      3,
      2,
      10,
      0,
      1,
      11,
      4,
      7,
      9,
      1,
      10,
      6,
      3,
      11,
      2,
      11,
      5,
      9,
      10,
      2,
      6,
      8,
      4,
      11,
      3,
      8,
      7,
      5,
      11,
      10,
      9,
      7,
      8,
      6
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      0,
      4,
      8,
      6,
      9,
      1,
      0,
      7,
      6,
      10,
      2,
      1,
      9,
      6,
      5,
      3,
      2,
      10,
      6,
      8,
      4,
      3,
      7,
      9,
      2,
      11,
      0,
      4,
      11,
      2,
      10,
      5,
      9,
      10,
      3,
      11,
      1,
      0,
      11,
      3,
      5,
      8,
      1,
      11,
      4,
      8,
      7,
      8,
      5,
      10,
      9,
      7
    ],
    [
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      1
    ],
    [
      0,
      1,
      6,
      9,
      2,
      0,
      2,
      8,
      10,
      3,
      0,
      3,
      7,
      6,
      4,
      0,
      4,
      9,
      8,
      5,
      0,
      5,
      10,
      7,
      1,
      1,
      7,
      11,
      9,
      4,
      1,
      4,
      2,
      5,
      3,
      1,
      3,
      10,
      11,
      6,
      2,
      9,
      11,
      10,
      5,
      2,
      4,
      6,
      11,
      8,
      3,
      5,
      8,
      11,
      7,
      6,
      7,
      10,
      8,
      9
    ]
  ],
  [
    [
      36,
      30,
      24,
      60,
      4
    ],
    [
      1,
      2,
      1,
      5,
      2,
      5,
      1
    ],
    [
      1,
      5,
      2,
      5,
      1,
      5,
      2,
      5,
      1
    ],
    [
      0,
      1,
      0.8660254037844386,
      0.5,
      0.6454972243679028,
      0.5773502691896257,
      -0.8660254037844386,
      -0.6454972243679028,
      -0.5773502691896257,
      0.11026408970826791,
      0.8090169943749475,
      -0.5,
      0.7557613140761708,
      -0.30901699437494745,
      0.17841104488654497,
      0.9341723589627157,
      0.46708617948135783,
      -0.35682208977308993,
      -0.11026408970826791,
      -0.7557613140761708,
      -0.17841104488654497,
      -0.9341723589627157,
      -0.46708617948135783,
      0.35682208977308993,
      0.30901699437494745,
      -1,
      -0.8090169943749475
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      0,
      3,
      7,
      8,
      3,
      9,
      5,
      10,
      2,
      0,
      11,
      12,
      8,
      13,
      14,
      15,
      13,
      4,
      5,
      11,
      16,
      17,
      10,
      18,
      8,
      10,
      6,
      0,
      11,
      19,
      5,
      13,
      20,
      21,
      13,
      7,
      8,
      11,
      22,
      23,
      10,
      17,
      15,
      0,
      19,
      5,
      24,
      12,
      8,
      24,
      0,
      0,
      25,
      9,
      5,
      26,
      18,
      8,
      26,
      15,
      23,
      0,
      22,
      23,
      26,
      16,
      17,
      26,
      14,
      15,
      24,
      20,
      21,
      24,
      23,
      21,
      0,
      21,
      17,
      0
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      10,
      9,
      8,
      0,
      13,
      12,
      11,
      0,
      16,
      15,
      14,
      0,
      1,
      17,
      18,
      10,
      1,
      19,
      20,
      21,
      1,
      14,
      22,
      23,
      2,
      23,
      24,
      13,
      2,
      25,
      20,
      26,
      2,
      5,
      27,
      28,
      3,
      28,
      19,
      16,
      3,
      18,
      20,
      22,
      3,
      8,
      21,
      29,
      4,
      29,
      25,
      7,
      4,
      24,
      20,
      27,
      4,
      11,
      26,
      17,
      21,
      24,
      16,
      5,
      26,
      12,
      29,
      5,
      23,
      11,
      27,
      6,
      15,
      12,
      9,
      6,
      25,
      13,
      17,
      6,
      28,
      12,
      24,
      7,
      8,
      26,
      19,
      7,
      22,
      15,
      17,
      8,
      28,
      14,
      21,
      9,
      18,
      16,
      23,
      9,
      29,
      15,
      19,
      10,
      11,
      22,
      25,
      10,
      14,
      27,
      18,
      13
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      10,
      11,
      3,
      2,
      5,
      12,
      13,
      0,
      4,
      14,
      15,
      5,
      3,
      16,
      17,
      4,
      7,
      17,
      18,
      1,
      6,
      15,
      19,
      7,
      0,
      13,
      20,
      6,
      9,
      20,
      21,
      2,
      8,
      19,
      22,
      9,
      1,
      18,
      23,
      8,
      11,
      23,
      16,
      3,
      10,
      22,
      14,
      11,
      2,
      21,
      12,
      10,
      18,
      10,
      12,
      5,
      19,
      8,
      13,
      12,
      21,
      20,
      14,
      4,
      22,
      19,
      15,
      14,
      23,
      18,
      5,
      15,
      9,
      22,
      17,
      16,
      7,
      21,
      4,
      17,
      22,
      10,
      18,
      17,
      16,
      23,
      15,
      6,
      12,
      21,
      7,
      19,
      11,
      14,
      20,
      13,
      9,
      16,
      6,
      20,
      11,
      13,
      8,
      23
    ],
    [
      5,
      2,
      5,
      1,
      5,
      2,
      5,
      1,
      5,
      2,
      5,
      1,
      5,
      1,
      5,
      2,
      5,
      2,
      5,
      1,
      5,
      1,
      5,
      2,
      5,
      2,
      5,
      1,
      5,
      1,
      5,
      2,
      5,
      2,
      5,
      1,
      5,
      2,
      5,
      1,
      5,
      2,
      5,
      1,
      5,
      2,
      5,
      1
    ],
    [
      0,
      1,
      5,
      10,
      2,
      0,
      2,
      8,
      13,
      3,
      0,
      3,
      11,
      16,
      4,
      0,
      4,
      14,
      7,
      1,
      1,
      7,
      23,
      19,
      6,
      1,
      6,
      21,
      17,
      5,
      2,
      10,
      28,
      25,
      9,
      2,
      9,
      26,
      23,
      8,
      3,
      13,
      29,
      18,
      12,
      3,
      12,
      22,
      28,
      11,
      4,
      16,
      17,
      24,
      15,
      4,
      15,
      27,
      29,
      14,
      5,
      17,
      16,
      26,
      18,
      5,
      18,
      29,
      27,
      10,
      6,
      19,
      27,
      15,
      20,
      6,
      20,
      9,
      25,
      21,
      7,
      14,
      25,
      28,
      22,
      7,
      22,
      24,
      8,
      23,
      8,
      24,
      17,
      21,
      13,
      9,
      20,
      12,
      18,
      26,
      10,
      27,
      19,
      11,
      28,
      11,
      19,
      23,
      26,
      16,
      12,
      20,
      15,
      24,
      22,
      13,
      21,
      25,
      14,
      29
    ]
  ],
  [
    [
      37,
      60,
      24,
      90,
      3
    ],
    [
      2,
      2,
      1,
      5,
      2,
      5,
      1
    ],
    [
      1,
      10,
      1,
      10,
      1,
      5,
      2
    ],
    [
      0,
      1,
      0.5135543436585571,
      0.8580570704268036,
      -0.4864456563414429,
      0.16464716006392036,
      0.407981534658473,
      -0.31191205694600616,
      0.4864456563414429,
      0.09058749520734066,
      0.9457826253657716,
      -0.8655497273231754,
      0.11913980425248162,
      -0.7599769183230912,
      0.43105186119848776,
      0.2614078884572776,
      0.19277225269352452,
      0.5816638681767826,
      -0.6519492065216165,
      0.9925073431036283,
      -0.027108687317114206,
      0.9019198478962877,
      0.027108687317114206,
      -0.24928451493290682,
      0.7161141408536073,
      -0.5256777171829279,
      0.4591769538280919,
      -0.9925073431036283,
      -0.11913980425248162,
      -0.7161141408536073,
      0.6974565623330552,
      -0.6964981104328648,
      -0.04550735581143872,
      0.1979290805670511,
      0.669331469703451,
      0.45470625239632967,
      -0.8902288150265797,
      -0.6974565623330552,
      0.8188250095853187,
      0.3445027267682465,
      0.8655497273231754,
      0.6283885859146393,
      -0.3445027267682465,
      0.9653986557865141,
      0.25677717182927856,
      -0.37624213071335977,
      -0.6283885859146393,
      -0.10271086873171142,
      0.7710890107740981,
      -0.8188250095853187,
      -0.4591769538280919,
      -0.8580570704268036,
      -0.16464716006392036,
      -0.5816638681767826,
      0.6519492065216165,
      -0.37161141408536075,
      0.8621037223969755,
      -0.5499244642316694,
      -0.5501916654509694,
      -0.07560218141459721,
      0.9357361708380184,
      0.2417918580365351,
      0.7945782625365772,
      0.07560218141459721,
      -0.9357361708380184,
      0.7599769183230912,
      -0.43105186119848776,
      0.37161141408536075,
      -0.8621037223969755,
      0.4108434749268457,
      0.5256777171829279,
      0.24928451493290682,
      0.14194292957319637,
      -0.2417918580365351,
      -0.25677717182927856,
      -0.9019198478962877,
      -0.14194292957319637,
      -0.9653986557865141,
      0.04550735581143872,
      -0.4108434749268457,
      -0.7710890107740981,
      -0.5135543436585571,
      -0.45470625239632967,
      0.8902288150265797,
      -0.407981534658473,
      0.31191205694600616,
      -0.7945782625365772,
      0.5501916654509694,
      0.37624213071335977,
      -0.1979290805670511,
      -0.669331469703451,
      0.6964981104328648,
      0.10271086873171142,
      -1,
      -0.09058749520734066,
      -0.9457826253657716,
      0.5499244642316694,
      -0.2614078884572776,
      -0.19277225269352452
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      3,
      5,
      8,
      9,
      7,
      10,
      11,
      12,
      8,
      13,
      14,
      8,
      15,
      16,
      10,
      17,
      18,
      8,
      19,
      12,
      20,
      21,
      14,
      22,
      23,
      18,
      24,
      25,
      26,
      24,
      27,
      28,
      22,
      29,
      30,
      22,
      31,
      32,
      24,
      33,
      34,
      24,
      35,
      36,
      22,
      24,
      37,
      20,
      38,
      26,
      39,
      40,
      28,
      4,
      41,
      30,
      42,
      43,
      32,
      44,
      45,
      36,
      44,
      46,
      37,
      39,
      47,
      48,
      41,
      49,
      50,
      42,
      51,
      52,
      4,
      53,
      54,
      4,
      55,
      56,
      42,
      57,
      58,
      41,
      59,
      60,
      39,
      61,
      60,
      44,
      62,
      58,
      44,
      63,
      64,
      42,
      65,
      66,
      4,
      67,
      68,
      39,
      69,
      48,
      8,
      70,
      50,
      29,
      8,
      52,
      51,
      71,
      54,
      29,
      72,
      56,
      4,
      73,
      64,
      74,
      75,
      66,
      20,
      76,
      68,
      8,
      77,
      78,
      74,
      79,
      80,
      4,
      81,
      0,
      51,
      82,
      83,
      20,
      84,
      85,
      51,
      86,
      87,
      74,
      88,
      83,
      74,
      89,
      90,
      29,
      91,
      78,
      29,
      92,
      80,
      46,
      0,
      0,
      93,
      94,
      85,
      95,
      96,
      87,
      46,
      97,
      98,
      95
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      9,
      8,
      0,
      1,
      10,
      11,
      1,
      8,
      12,
      2,
      13,
      14,
      2,
      15,
      16,
      3,
      17,
      5,
      3,
      18,
      19,
      21,
      20,
      4,
      23,
      22,
      4,
      25,
      24,
      5,
      16,
      26,
      6,
      28,
      27,
      6,
      30,
      29,
      7,
      31,
      13,
      7,
      33,
      32,
      8,
      35,
      34,
      9,
      37,
      36,
      9,
      10,
      38,
      23,
      10,
      39,
      40,
      11,
      41,
      42,
      11,
      20,
      34,
      12,
      31,
      43,
      12,
      44,
      45,
      13,
      38,
      33,
      14,
      46,
      47,
      14,
      48,
      44,
      15,
      49,
      50,
      15,
      42,
      51,
      16,
      24,
      45,
      17,
      38,
      49,
      17,
      52,
      26,
      18,
      23,
      37,
      18,
      47,
      53,
      19,
      40,
      54,
      19,
      34,
      45,
      32,
      26,
      20,
      55,
      54,
      21,
      36,
      56,
      21,
      57,
      52,
      22,
      58,
      30,
      22,
      53,
      55,
      24,
      46,
      28,
      25,
      37,
      31,
      25,
      44,
      51,
      27,
      55,
      35,
      27,
      57,
      56,
      28,
      51,
      32,
      29,
      56,
      59,
      29,
      46,
      49,
      30,
      58,
      41,
      33,
      43,
      59,
      35,
      39,
      58,
      36,
      39,
      43,
      47,
      40,
      48,
      50,
      41,
      59,
      48,
      42,
      52,
      54,
      50,
      57,
      53
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      7,
      3,
      4,
      8,
      1,
      0,
      9,
      4,
      5,
      7,
      2,
      1,
      10,
      5,
      11,
      6,
      3,
      12,
      0,
      6,
      13,
      3,
      7,
      14,
      8,
      4,
      15,
      1,
      8,
      16,
      9,
      0,
      14,
      4,
      9,
      17,
      7,
      5,
      12,
      10,
      1,
      18,
      5,
      10,
      11,
      14,
      6,
      3,
      19,
      11,
      12,
      20,
      0,
      6,
      14,
      12,
      13,
      9,
      3,
      7,
      18,
      13,
      14,
      17,
      8,
      15,
      21,
      1,
      8,
      18,
      15,
      16,
      11,
      9,
      0,
      21,
      16,
      9,
      13,
      14,
      17,
      11,
      7,
      5,
      8,
      17,
      12,
      14,
      10,
      1,
      22,
      12,
      18,
      19,
      5,
      10,
      14,
      18,
      17,
      14,
      11,
      21,
      19,
      3,
      18,
      11,
      19,
      8,
      20,
      12,
      21,
      0,
      20,
      22,
      3,
      9,
      15,
      18,
      7,
      14,
      13,
      18,
      7,
      21,
      15,
      22,
      1,
      21,
      23,
      18,
      8,
      7,
      11,
      16,
      23,
      9,
      11,
      7,
      16,
      21,
      20,
      8,
      5,
      9,
      12,
      22,
      21,
      5,
      19,
      3,
      22,
      21,
      18,
      23,
      11,
      12,
      23,
      8,
      20,
      5,
      21,
      23,
      12,
      9
    ],
    [
      10,
      1,
      10,
      1,
      5,
      2,
      10,
      1,
      5,
      2,
      10,
      1,
      5,
      2,
      10,
      1,
      10,
      1,
      10,
      1,
      5,
      2,
      10,
      1,
      10,
      1,
      5,
      2,
      10,
      1,
      5,
      2,
      5,
      2,
      5,
      2,
      10,
      1,
      5,
      2,
      5,
      2,
      10,
      1,
      5,
      2,
      5,
      2
    ],
    [
      0,
      1,
      4,
      11,
      22,
      42,
      30,
      15,
      7,
      2,
      0,
      2,
      6,
      14,
      27,
      47,
      35,
      18,
      9,
      3,
      0,
      3,
      8,
      5,
      1,
      1,
      5,
      12,
      24,
      43,
      55,
      39,
      21,
      10,
      4,
      2,
      7,
      16,
      13,
      6,
      3,
      9,
      19,
      36,
      54,
      58,
      52,
      33,
      17,
      8,
      4,
      10,
      20,
      23,
      11,
      5,
      8,
      17,
      32,
      49,
      51,
      46,
      44,
      25,
      12,
      6,
      13,
      26,
      33,
      52,
      41,
      57,
      48,
      28,
      14,
      7,
      15,
      29,
      50,
      59,
      53,
      43,
      24,
      31,
      16,
      9,
      18,
      34,
      37,
      19,
      10,
      21,
      40,
      56,
      50,
      29,
      49,
      32,
      38,
      20,
      11,
      23,
      34,
      18,
      35,
      53,
      59,
      57,
      41,
      22,
      12,
      25,
      45,
      31,
      24,
      13,
      16,
      31,
      45,
      37,
      34,
      23,
      20,
      38,
      26,
      14,
      28,
      44,
      46,
      27,
      15,
      30,
      51,
      49,
      29,
      17,
      33,
      26,
      38,
      32,
      19,
      37,
      45,
      25,
      44,
      28,
      48,
      56,
      40,
      36,
      21,
      39,
      54,
      36,
      40,
      22,
      41,
      52,
      58,
      42,
      27,
      46,
      51,
      30,
      42,
      58,
      54,
      39,
      55,
      47,
      35,
      47,
      55,
      43,
      53,
      48,
      57,
      59,
      50,
      56
    ]
  ],
  [
    [
      38,
      60,
      54,
      120,
      4
    ],
    [
      2,
      5,
      2,
      5,
      1,
      2,
      1
    ],
    [
      1,
      4,
      1,
      5,
      2,
      4,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.6998542122237652,
      0.7142857142857143,
      -0.11664236870396086,
      0.6900655593423543,
      -0.5248906591678238,
      0.4629100498862757,
      -0.3689536880596678,
      -0.5947008444878116,
      0.5832118435198043,
      0.42857142857142855,
      0.8748177652797064,
      0.14285714285714285,
      0.7634342144881664,
      0.2519902889286015,
      -0.45280171078047904,
      0.03642607974699329,
      0.8908668539285414,
      -0.6022384254675895,
      0.7854302741968968,
      -0.8938443472274916,
      -0.1317907946015359,
      -0.3499271061118826,
      0.9258200997725514,
      0.2077578990390909,
      0.40397141477872645,
      0.10287460466859646,
      -0.9622461795195447,
      -0.8545497448232964,
      -0.499336129633269,
      0.9469067136670513,
      0.31943828249996997,
      0.5301494770802446,
      -0.31943828249996997,
      0.9383977675441076,
      0.3499271061118826,
      -0.14285714285714285,
      0.47507842093878705,
      0.7817337078570827,
      0.7103718480486068,
      -0.49601942214279704,
      -0.9383977675441076,
      0.1317907946015359,
      -0.08910684063323206,
      -0.6172133998483676,
      -0.2024990811266701,
      0.8443689093044461,
      -0.9711921135272573,
      0.19072942970908519,
      -0.9469067136670513,
      -0.03642607974699329,
      -0.5301494770802446,
      -0.7854302741968968,
      0.38272145209503217,
      0.8668814646650022,
      -0.6107473715905332,
      0.6172133998483676,
      0.5714527691863379,
      -0.2496680648166345,
      -0.38272145209503217,
      -0.8668814646650022,
      0.04981223822903682,
      -0.5937294793446459,
      -0.19072942970908519,
      0.8938443472274916,
      -0.42857142857142855,
      0.6107473715905332,
      0.49601942214279704,
      0.5937294793446459,
      -0.7817337078570827,
      0.45280171078047904,
      -0.8908668539285414,
      0.6022384254675895,
      -0.04981223822903682,
      0.08910684063323206,
      0.13891907886226887,
      0.9583148474999099,
      0.9711921135272573,
      -0.8748177652797064,
      -0.4629100498862757,
      -0.7634342144881664,
      0.5947008444878116,
      -0.2519902889286015,
      -0.9258200997725514,
      -0.5714527691863379,
      0.2496680648166345,
      -0.13891907886226887,
      -0.9583148474999099,
      -0.7103718480486068,
      0.499336129633269,
      -0.5832118435198043,
      -0.6900655593423543,
      -0.47507842093878705,
      -0.40397141477872645,
      0.2024990811266701,
      -0.8443689093044461,
      -0.10287460466859646,
      0.9622461795195447,
      0.8545497448232964,
      -0.2077578990390909,
      0.5248906591678238,
      -0.7142857142857143,
      0.3689536880596678,
      0.11664236870396086,
      -0.6998542122237652,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      9,
      15,
      16,
      17,
      18,
      19,
      20,
      13,
      21,
      22,
      11,
      23,
      24,
      13,
      25,
      26,
      18,
      27,
      28,
      15,
      29,
      30,
      13,
      31,
      17,
      32,
      33,
      20,
      34,
      35,
      22,
      34,
      36,
      24,
      37,
      38,
      26,
      39,
      40,
      30,
      41,
      42,
      43,
      32,
      44,
      45,
      39,
      46,
      47,
      41,
      48,
      49,
      37,
      50,
      51,
      34,
      52,
      53,
      32,
      54,
      55,
      32,
      56,
      57,
      41,
      58,
      59,
      39,
      60,
      61,
      34,
      62,
      61,
      41,
      63,
      64,
      39,
      65,
      43,
      66,
      67,
      45,
      68,
      69,
      49,
      70,
      71,
      51,
      72,
      73,
      53,
      37,
      74,
      55,
      68,
      75,
      57,
      70,
      76,
      59,
      77,
      78,
      64,
      13,
      79,
      80,
      37,
      81,
      82,
      83,
      23,
      84,
      13,
      85,
      86,
      70,
      87,
      86,
      88,
      89,
      90,
      68,
      91,
      92,
      66,
      93,
      94,
      70,
      95,
      96,
      68,
      97,
      98,
      83,
      99,
      90,
      37,
      36,
      84,
      37,
      100,
      94,
      72,
      101,
      80,
      102,
      103,
      82,
      102,
      104,
      92,
      102,
      105,
      0,
      102,
      0,
      0,
      106
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      5,
      9,
      8,
      0,
      12,
      11,
      10,
      0,
      10,
      14,
      13,
      0,
      1,
      15,
      16,
      2,
      1,
      17,
      18,
      19,
      1,
      13,
      20,
      17,
      2,
      21,
      22,
      12,
      2,
      23,
      24,
      21,
      3,
      25,
      26,
      4,
      3,
      27,
      18,
      28,
      3,
      8,
      29,
      27,
      4,
      30,
      31,
      7,
      4,
      32,
      24,
      30,
      19,
      34,
      33,
      5,
      33,
      35,
      23,
      5,
      7,
      37,
      36,
      6,
      39,
      11,
      38,
      6,
      38,
      40,
      15,
      6,
      31,
      35,
      41,
      7,
      9,
      43,
      42,
      8,
      44,
      34,
      29,
      8,
      16,
      46,
      45,
      9,
      45,
      14,
      47,
      9,
      28,
      49,
      48,
      10,
      48,
      50,
      32,
      10,
      12,
      52,
      51,
      11,
      39,
      46,
      25,
      11,
      22,
      50,
      41,
      12,
      14,
      54,
      53,
      13,
      44,
      49,
      20,
      13,
      26,
      40,
      47,
      14,
      15,
      55,
      56,
      16,
      15,
      40,
      22,
      53,
      16,
      52,
      20,
      46,
      17,
      57,
      54,
      39,
      17,
      41,
      50,
      57,
      18,
      51,
      47,
      19,
      18,
      36,
      45,
      28,
      19,
      32,
      50,
      34,
      20,
      52,
      29,
      37,
      21,
      58,
      49,
      44,
      21,
      47,
      51,
      58,
      22,
      42,
      31,
      53,
      23,
      39,
      54,
      24,
      23,
      35,
      49,
      28,
      24,
      32,
      38,
      43,
      25,
      58,
      57,
      26,
      25,
      46,
      31,
      42,
      26,
      37,
      29,
      40,
      27,
      56,
      43,
      38,
      27,
      41,
      35,
      56,
      30,
      55,
      34,
      44,
      30,
      45,
      36,
      55,
      53,
      54,
      59,
      33,
      59,
      51,
      52,
      33,
      37,
      48,
      59,
      36,
      43,
      59,
      48,
      42,
      55,
      57,
      58,
      56
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      10,
      11,
      3,
      2,
      5,
      12,
      6,
      0,
      4,
      13,
      14,
      5,
      3,
      15,
      16,
      4,
      7,
      17,
      18,
      1,
      6,
      19,
      20,
      7,
      9,
      21,
      10,
      2,
      8,
      22,
      23,
      9,
      1,
      18,
      24,
      8,
      11,
      25,
      15,
      3,
      10,
      26,
      27,
      11,
      28,
      29,
      12,
      5,
      30,
      31,
      6,
      12,
      16,
      32,
      13,
      4,
      23,
      22,
      14,
      13,
      33,
      28,
      5,
      14,
      34,
      35,
      16,
      15,
      20,
      36,
      17,
      7,
      37,
      38,
      18,
      17,
      31,
      39,
      19,
      6,
      27,
      26,
      20,
      19,
      40,
      41,
      21,
      9,
      42,
      43,
      10,
      21,
      24,
      44,
      22,
      8,
      39,
      40,
      9,
      23,
      38,
      45,
      24,
      18,
      27,
      46,
      25,
      11,
      47,
      34,
      15,
      25,
      43,
      33,
      26,
      10,
      29,
      48,
      30,
      12,
      28,
      38,
      37,
      29,
      30,
      35,
      34,
      31,
      32,
      49,
      50,
      13,
      16,
      45,
      42,
      32,
      22,
      51,
      33,
      14,
      13,
      50,
      39,
      23,
      33,
      43,
      38,
      28,
      35,
      24,
      45,
      16,
      36,
      41,
      47,
      17,
      20,
      51,
      52,
      36,
      17,
      47,
      25,
      37,
      39,
      50,
      27,
      19,
      31,
      34,
      40,
      39,
      26,
      33,
      51,
      20,
      41,
      53,
      42,
      21,
      40,
      34,
      47,
      41,
      42,
      45,
      38,
      43,
      44,
      52,
      51,
      22,
      24,
      35,
      30,
      44,
      46,
      29,
      37,
      25,
      27,
      50,
      49,
      46,
      46,
      49,
      48,
      29,
      52,
      44,
      30,
      48,
      42,
      53,
      49,
      32,
      52,
      53,
      41,
      36,
      49,
      53,
      52,
      48
    ],
    [
      4,
      1,
      5,
      2,
      4,
      1,
      5,
      1,
      4,
      1,
      5,
      2,
      5,
      1,
      4,
      1,
      4,
      1,
      5,
      1,
      5,
      2,
      4,
      1,
      4,
      1,
      5,
      1,
      4,
      1,
      4,
      1,
      5,
      2,
      5,
      1,
      4,
      1,
      4,
      1,
      5,
      2,
      4,
      1,
      5,
      2,
      4,
      1,
      5,
      1,
      5,
      2,
      4,
      1,
      5,
      1,
      4,
      1,
      5,
      1,
      5,
      2,
      4,
      1,
      4,
      1,
      5,
      1,
      5,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      5,
      2,
      5,
      2,
      4,
      1,
      5,
      2,
      5,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      5,
      2,
      4,
      1,
      4,
      1,
      5,
      1,
      4,
      1
    ],
    [
      0,
      1,
      5,
      2,
      0,
      2,
      8,
      12,
      3,
      0,
      3,
      10,
      4,
      0,
      4,
      13,
      7,
      1,
      1,
      7,
      17,
      6,
      1,
      6,
      19,
      15,
      5,
      2,
      5,
      16,
      23,
      9,
      2,
      9,
      21,
      8,
      3,
      12,
      27,
      11,
      3,
      11,
      28,
      25,
      10,
      4,
      10,
      26,
      32,
      14,
      4,
      14,
      30,
      13,
      5,
      15,
      33,
      16,
      6,
      17,
      36,
      39,
      18,
      6,
      18,
      38,
      19,
      7,
      13,
      31,
      20,
      7,
      20,
      41,
      37,
      17,
      8,
      21,
      42,
      44,
      22,
      8,
      22,
      29,
      12,
      9,
      23,
      45,
      24,
      9,
      24,
      47,
      43,
      21,
      10,
      25,
      48,
      26,
      11,
      27,
      51,
      38,
      18,
      11,
      18,
      39,
      28,
      12,
      29,
      41,
      52,
      27,
      13,
      30,
      53,
      44,
      31,
      14,
      32,
      47,
      24,
      14,
      24,
      45,
      54,
      30,
      15,
      19,
      40,
      34,
      15,
      34,
      53,
      55,
      33,
      16,
      33,
      56,
      52,
      35,
      16,
      35,
      46,
      23,
      17,
      37,
      57,
      36,
      19,
      38,
      47,
      32,
      40,
      20,
      31,
      49,
      46,
      35,
      20,
      35,
      52,
      41,
      21,
      43,
      58,
      42,
      22,
      44,
      53,
      34,
      22,
      34,
      40,
      50,
      29,
      23,
      46,
      28,
      39,
      45,
      25,
      28,
      46,
      49,
      25,
      49,
      42,
      58,
      48,
      26,
      48,
      57,
      37,
      50,
      26,
      50,
      40,
      32,
      27,
      52,
      56,
      51,
      29,
      50,
      37,
      41,
      30,
      54,
      55,
      53,
      31,
      44,
      42,
      49,
      33,
      55,
      59,
      56,
      36,
      57,
      59,
      55,
      54,
      36,
      54,
      45,
      39,
      38,
      51,
      43,
      47,
      43,
      51,
      56,
      59,
      58,
      48,
      58,
      59,
      57
    ]
  ],
  [
    [
      39,
      60,
      42,
      120,
      4
    ],
    [
      4,
      2,
      1,
      5,
      1,
      3,
      2,
      5,
      2
    ],
    [
      1,
      10,
      1,
      4,
      1,
      10,
      9,
      4,
      3
    ],
    [
      0,
      1,
      0.4364663517030667,
      0.8997205809755687,
      -0.3947875238518402,
      0.18613351976449002,
      -0.165034603304479,
      -0.40406244057214513,
      -0.0230394893916557,
      0.43585784161531027,
      0.7478962198524539,
      0.6371856535975148,
      0.5411827886967484,
      0.737465072621946,
      0.41342686231141096,
      0.7994411619511375,
      -0.5598221271563192,
      -0.21792892080765514,
      -0.5971008040754607,
      0.48730388118908524,
      -0.45510569016263747,
      -0.6219913613798003,
      0.16943475423656393,
      -0.6537867624229654,
      -0.22535276961527625,
      0.7370282030399055,
      0.8526126568461356,
      0.47493014524389215,
      0.8153339799269941,
      0.31267463689026953,
      0.6875780535416567,
      0.3746507262194609,
      0.4808646223859512,
      -0.8641324015419635,
      -0.16648288123388014,
      -0.5296630440009206,
      0.7884742426136804,
      -0.8871718909336191,
      0.2693749603814301,
      -0.12063633262159451,
      -0.8717156832306205,
      -0.7594159645482818,
      -0.5705453218060254,
      0.3158300190814721,
      0.08607709853411097,
      0.9231617228043955,
      0.984768734163558,
      0.050139709512215636,
      0.6130206997033735,
      0.9617292447719024,
      -0.050139709512215636,
      0.819734130859079,
      -0.9617292447719024,
      -0.2693749603814301,
      -0.819734130859079,
      0.5705453218060254,
      -0.21823317585153335,
      0.9746077623781705,
      -0.984768734163558,
      0.16648288123388014,
      -0.9746077623781705,
      -0.6130206997033735,
      -0.7884742426136804,
      0.21823317585153335,
      0.8871718909336191,
      -0.3746507262194609,
      0.7594159645482818,
      -0.31267463689026953,
      0.8641324015419635,
      -0.47493014524389215,
      0.5296630440009206,
      -0.8153339799269941,
      -0.48730388118908524,
      -0.6875780535416567,
      0.6219913613798003,
      -0.3158300190814721,
      0.8717156832306205,
      -0.8526126568461356,
      0.21792892080765514,
      -0.08607709853411097,
      -0.9231617228043955,
      -0.4808646223859512,
      -0.7370282030399055,
      0.12063633262159452,
      0.5971008040754607,
      -0.6371856535975148,
      0.45510569016263747,
      0.5598221271563192,
      0.2179289208076551,
      -0.7994411619511375,
      0.22535276961527625,
      -0.7478962198524539,
      -0.18613351976449002,
      -0.5411827886967484,
      0.40406244057214513,
      -0.737465072621946,
      -0.16943475423656393,
      0.6537867624229654,
      -0.413426862311411,
      -0.4358578416153102,
      -0.7994411619511373,
      0.3947875238518402,
      -0.8997205809755687,
      0.165034603304479,
      0.0230394893916557,
      -0.4364663517030667,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      9,
      15,
      16,
      17,
      15,
      18,
      19,
      11,
      20,
      21,
      11,
      22,
      23,
      13,
      24,
      25,
      11,
      26,
      17,
      27,
      28,
      19,
      29,
      30,
      21,
      31,
      32,
      25,
      27,
      33,
      34,
      27,
      35,
      36,
      29,
      37,
      38,
      31,
      39,
      40,
      27,
      41,
      42,
      29,
      43,
      40,
      31,
      44,
      45,
      31,
      46,
      34,
      47,
      48,
      36,
      47,
      49,
      38,
      50,
      51,
      42,
      50,
      52,
      53,
      47,
      54,
      55,
      47,
      56,
      57,
      47,
      58,
      59,
      50,
      56,
      60,
      47,
      61,
      62,
      50,
      63,
      60,
      50,
      63,
      57,
      50,
      64,
      53,
      65,
      66,
      55,
      67,
      68,
      59,
      69,
      70,
      62,
      67,
      71,
      72,
      67,
      73,
      74,
      65,
      75,
      76,
      65,
      77,
      78,
      69,
      79,
      80,
      65,
      81,
      82,
      69,
      83,
      76,
      69,
      84,
      72,
      85,
      86,
      74,
      85,
      87,
      88,
      89,
      90,
      82,
      85,
      91,
      92,
      85,
      93,
      94,
      95,
      96,
      97,
      95,
      98,
      99,
      100,
      101,
      92,
      102,
      103,
      94,
      102,
      104,
      99,
      102,
      105,
      0,
      102,
      0,
      0,
      106
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      9,
      4,
      8,
      0,
      8,
      11,
      10,
      0,
      12,
      2,
      7,
      0,
      1,
      13,
      7,
      14,
      1,
      15,
      11,
      13,
      1,
      4,
      5,
      16,
      2,
      10,
      17,
      3,
      2,
      18,
      19,
      12,
      3,
      20,
      8,
      21,
      3,
      22,
      6,
      20,
      4,
      18,
      23,
      9,
      6,
      24,
      15,
      5,
      16,
      26,
      25,
      5,
      27,
      13,
      22,
      6,
      14,
      23,
      25,
      7,
      21,
      19,
      28,
      8,
      30,
      12,
      29,
      9,
      29,
      17,
      31,
      9,
      11,
      32,
      22,
      10,
      17,
      33,
      28,
      10,
      34,
      20,
      15,
      11,
      30,
      16,
      35,
      12,
      13,
      36,
      26,
      27,
      14,
      37,
      16,
      35,
      14,
      38,
      24,
      37,
      15,
      36,
      39,
      24,
      17,
      31,
      21,
      40,
      18,
      31,
      41,
      19,
      18,
      35,
      42,
      23,
      19,
      28,
      29,
      43,
      20,
      44,
      33,
      34,
      21,
      45,
      32,
      40,
      22,
      44,
      39,
      32,
      23,
      25,
      30,
      46,
      47,
      27,
      38,
      24,
      26,
      48,
      38,
      25,
      49,
      37,
      36,
      26,
      47,
      34,
      50,
      27,
      33,
      51,
      45,
      28,
      43,
      42,
      52,
      29,
      46,
      41,
      53,
      30,
      41,
      51,
      52,
      31,
      50,
      34,
      45,
      32,
      54,
      40,
      44,
      33,
      42,
      48,
      53,
      35,
      36,
      50,
      55,
      39,
      37,
      56,
      46,
      49,
      38,
      56,
      55,
      48,
      39,
      44,
      47,
      57,
      40,
      58,
      43,
      54,
      41,
      53,
      43,
      58,
      42,
      52,
      46,
      56,
      45,
      58,
      57,
      51,
      57,
      49,
      59,
      47,
      59,
      49,
      53,
      48,
      55,
      54,
      59,
      50,
      59,
      54,
      52,
      51,
      55,
      56,
      57,
      58
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      6,
      7,
      3,
      2,
      5,
      7,
      10,
      0,
      4,
      11,
      12,
      5,
      3,
      7,
      10,
      4,
      7,
      13,
      8,
      1,
      0,
      14,
      15,
      6,
      9,
      7,
      13,
      2,
      8,
      11,
      12,
      9,
      2,
      16,
      15,
      6,
      12,
      17,
      7,
      5,
      18,
      19,
      0,
      10,
      17,
      7,
      11,
      4,
      18,
      20,
      4,
      10,
      21,
      22,
      8,
      13,
      16,
      2,
      14,
      0,
      21,
      22,
      15,
      14,
      12,
      23,
      7,
      9,
      21,
      24,
      2,
      13,
      23,
      7,
      11,
      8,
      18,
      20,
      15,
      16,
      12,
      25,
      26,
      17,
      19,
      4,
      20,
      0,
      18,
      25,
      26,
      19,
      4,
      27,
      26,
      17,
      22,
      2,
      24,
      8,
      2,
      28,
      21,
      14,
      0,
      29,
      18,
      16,
      22,
      2,
      28,
      15,
      12,
      30,
      31,
      23,
      21,
      30,
      31,
      24,
      8,
      32,
      31,
      23,
      20,
      0,
      29,
      15,
      27,
      4,
      25,
      12,
      26,
      33,
      4,
      19,
      33,
      4,
      25,
      18,
      31,
      32,
      26,
      27,
      31,
      34,
      8,
      24,
      35,
      36,
      21,
      28,
      35,
      36,
      18,
      29,
      35,
      37,
      15,
      28,
      32,
      8,
      30,
      12,
      34,
      8,
      30,
      21,
      35,
      38,
      15,
      29,
      12,
      39,
      31,
      27,
      26,
      38,
      35,
      33,
      18,
      40,
      35,
      33,
      32,
      12,
      39,
      26,
      31,
      37,
      35,
      34,
      36,
      15,
      37,
      21,
      36,
      15,
      38,
      18,
      21,
      41,
      35,
      34,
      35,
      40,
      31,
      39,
      40,
      18,
      38,
      26,
      35,
      41,
      26,
      39,
      41,
      21,
      37,
      31,
      40,
      26,
      41,
      31
    ],
    [
      10,
      1,
      4,
      1,
      10,
      9,
      4,
      3,
      10,
      9,
      4,
      1,
      4,
      3,
      10,
      9,
      10,
      1,
      4,
      3,
      4,
      3,
      4,
      3,
      10,
      1,
      4,
      3,
      4,
      1,
      10,
      9,
      4,
      3,
      4,
      3,
      10,
      9,
      4,
      1,
      4,
      3,
      10,
      9,
      4,
      1,
      4,
      1,
      4,
      3,
      4,
      1,
      10,
      9,
      4,
      3,
      4,
      3,
      4,
      1,
      4,
      3,
      10,
      1,
      4,
      1,
      4,
      3,
      4,
      1,
      10,
      9,
      4,
      1,
      4,
      3,
      4,
      1,
      4,
      1,
      4,
      3,
      4,
      1
    ],
    [
      0,
      1,
      5,
      14,
      25,
      35,
      30,
      18,
      9,
      2,
      0,
      2,
      8,
      3,
      0,
      3,
      10,
      21,
      28,
      31,
      29,
      18,
      12,
      4,
      0,
      4,
      7,
      1,
      1,
      7,
      16,
      25,
      37,
      38,
      36,
      27,
      15,
      6,
      1,
      6,
      13,
      5,
      2,
      9,
      12,
      4,
      2,
      4,
      7,
      5,
      13,
      15,
      22,
      20,
      10,
      8,
      3,
      8,
      17,
      28,
      40,
      45,
      44,
      34,
      22,
      11,
      3,
      11,
      20,
      10,
      5,
      7,
      16,
      14,
      6,
      15,
      22,
      11,
      6,
      11,
      20,
      32,
      44,
      50,
      47,
      36,
      24,
      13,
      8,
      10,
      21,
      17,
      9,
      18,
      29,
      19,
      9,
      19,
      31,
      43,
      52,
      53,
      46,
      35,
      23,
      12,
      12,
      18,
      30,
      23,
      13,
      24,
      27,
      15,
      14,
      16,
      23,
      30,
      42,
      53,
      56,
      49,
      38,
      26,
      14,
      26,
      37,
      25,
      16,
      23,
      35,
      25,
      17,
      21,
      33,
      45,
      54,
      58,
      52,
      41,
      29,
      19,
      17,
      19,
      31,
      28,
      20,
      32,
      34,
      22,
      21,
      33,
      40,
      28,
      24,
      36,
      38,
      26,
      24,
      26,
      37,
      48,
      56,
      59,
      57,
      50,
      39,
      27,
      27,
      36,
      47,
      39,
      29,
      31,
      43,
      41,
      30,
      35,
      46,
      42,
      32,
      44,
      45,
      33,
      32,
      33,
      40,
      51,
      58,
      59,
      55,
      47,
      39,
      34,
      34,
      44,
      50,
      39,
      37,
      48,
      49,
      38,
      40,
      51,
      54,
      45,
      41,
      43,
      51,
      54,
      57,
      55,
      49,
      48,
      46,
      42,
      41,
      42,
      53,
      52,
      43,
      51,
      58,
      52,
      46,
      48,
      56,
      53,
      47,
      50,
      57,
      55,
      49,
      56,
      59,
      55,
      54,
      58,
      59,
      57
    ]
  ],
  [
    [
      40,
      60,
      84,
      150,
      5
    ],
    [
      0,
      2,
      1,
      5,
      2,
      5,
      1
    ],
    [
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.7217483382763182,
      0.6921555722490236,
      0.2952223437916319,
      0.6586079497931999,
      -0.48023414932239195,
      0.5387910779042515,
      -0.7128072909256202,
      0.11325382910923949,
      -0.3949112123699407,
      -0.6041239923634305,
      0.7729021302848988,
      0.1940528249006824,
      0.9929356724533258,
      -0.03538814154143727,
      0.6298389795002124,
      0.6967741838494445,
      0.3432325692924137,
      0.8934465411770988,
      0.28973208561636266,
      0.5094943059100943,
      0.8597460274310283,
      -0.7452206567451952,
      0.665878256289018,
      -0.9392275176156202,
      0.006563042779708922,
      -0.4160062640859898,
      -0.21973736987078044,
      0.8824138918463884,
      -0.03969501610162412,
      0.4687963621586693,
      -0.5127015231309339,
      0.7869743017126728,
      -0.9061974526613309,
      -0.40156889155954767,
      0.13247113693839563,
      -0.6380905381863292,
      -0.7691476740622206,
      0.08276857412332625,
      -0.9774931530633125,
      0.41611658925282663,
      -0.48503488496526764,
      0.8899385997715834,
      -0.14594685649194986,
      -0.43209814130207924,
      0.7539503920464623,
      -0.5893107329374141,
      -0.29029582562922523,
      0.6655112748915498,
      0.04395661225345363,
      -0.745092315912212,
      0.0780084844907278,
      0.9881123793505011,
      -0.13247113693839563,
      -0.10417368830829385,
      0.7897513116854461,
      0.6045169214797579,
      0.3520254513994738,
      0.22797782169077518,
      0.9078018475328885,
      0.6780508743263511,
      -0.4180984375358355,
      0.8524892978236253,
      0.28175201967059926,
      -0.44031556468937205,
      0.506399353139958,
      0.47535940493837825,
      -0.7194394562964024,
      -0.13353483177859005,
      0.8642393239540731,
      -0.6262555054941654,
      0.3003513119035513,
      -0.9884363196552105,
      -0.07379051337883057,
      -0.8685334855866158,
      0.33368869786981625,
      -0.3664716050783611,
      -0.8461505251430282,
      -0.4469425269790558,
      0.0004392467042396785,
      -0.8131042863156742,
      0.582117880362226,
      0.3680207593873382,
      -0.2011380776378284,
      0.2609051738966025,
      0.9140614800974393,
      0.3105158624548226,
      -0.5824195190246343,
      0.6885337320294498,
      -0.825613377909153,
      -0.04602635851011785,
      -0.5623558700144742,
      -0.496743394425862,
      -0.7479092214878433,
      -0.32209826370610417,
      -0.8943336109536814,
      -0.7559043639455181,
      -0.29957864732105144,
      -0.05938412326237243,
      -0.8247602084027958,
      -0.26540452669471787,
      -0.9535247958278481,
      -0.1426565839749897,
      -0.26026076449720065,
      -0.5330006997070424,
      -0.8050929067971819,
      0.8544020838291451,
      0.5193160171918318,
      -0.017548602121751168,
      0.9206031563872649,
      -0.16991521372741425,
      0.3515944376604561,
      0.4508730058520958,
      -0.7963143544651551,
      0.40323316017738353,
      0.16829124837785914,
      -0.5593947155274771,
      -0.8116376087635139,
      -0.05206967080064899,
      -0.16377348414240203,
      -0.985122832582095,
      0.10005517549930056,
      0.5846489316510108,
      -0.40010674819683195,
      0.9095681835743945,
      -0.11225110011279828,
      -0.7889119713408936,
      0.4637034828512566,
      -0.0507662576552638,
      -0.44526511793876994,
      0.8939584788068474,
      0.5039717878296668,
      -0.8635418250642767,
      0.6117806624949305,
      -0.4310104554685462,
      -0.6632905911243279,
      0.2552292054719357,
      0.2091181435835918,
      -0.9439955798086751,
      0.2944167901664005,
      0.8325793470280939,
      -0.46918054581406776,
      -0.20446294781667193,
      0.23614697435517812,
      -0.9499628989981723,
      -0.46351359216949106,
      -0.09921323426572289,
      -0.8805179634855098
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      11,
      3,
      12,
      11,
      13,
      14,
      9,
      15,
      16,
      17,
      18,
      19,
      20,
      18,
      21,
      22,
      15,
      23,
      24,
      15,
      25,
      26,
      18,
      27,
      28,
      29,
      30,
      31,
      29,
      32,
      33,
      18,
      34,
      35,
      36,
      37,
      38,
      15,
      39,
      40,
      13,
      41,
      38,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      57,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      42,
      71,
      72,
      68,
      73,
      74,
      54,
      75,
      76,
      77,
      78,
      79,
      48,
      80,
      81,
      82,
      83,
      84,
      60,
      85,
      86,
      87,
      88,
      89,
      45,
      90,
      91,
      92,
      93,
      94,
      65,
      95,
      96,
      87,
      97,
      98,
      82,
      99,
      100,
      92,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      106,
      124,
      125,
      126,
      127,
      128,
      115,
      129,
      130,
      131,
      132,
      133,
      109,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148
    ],
    [
      1,
      2,
      3,
      4,
      5,
      0,
      6,
      7,
      8,
      2,
      0,
      1,
      9,
      10,
      3,
      0,
      2,
      11,
      12,
      13,
      0,
      14,
      15,
      16,
      5,
      0,
      4,
      16,
      17,
      18,
      1,
      18,
      19,
      20,
      7,
      1,
      6,
      21,
      22,
      8,
      1,
      7,
      23,
      24,
      25,
      2,
      25,
      26,
      27,
      10,
      2,
      9,
      27,
      28,
      29,
      3,
      29,
      30,
      31,
      12,
      3,
      11,
      32,
      33,
      13,
      3,
      12,
      34,
      35,
      14,
      4,
      13,
      35,
      36,
      15,
      4,
      14,
      36,
      23,
      37,
      4,
      38,
      39,
      40,
      5,
      5,
      41,
      31,
      42,
      18,
      5,
      17,
      42,
      19,
      6,
      6,
      18,
      43,
      44,
      20,
      6,
      19,
      28,
      45,
      46,
      7,
      46,
      47,
      48,
      22,
      7,
      21,
      48,
      49,
      50,
      8,
      50,
      37,
      15,
      24,
      8,
      23,
      51,
      52,
      25,
      8,
      24,
      53,
      26,
      9,
      9,
      25,
      53,
      34,
      54,
      9,
      55,
      56,
      57,
      10,
      10,
      45,
      20,
      58,
      29,
      10,
      28,
      58,
      30,
      11,
      11,
      29,
      50,
      49,
      31,
      11,
      30,
      17,
      41,
      52,
      12,
      52,
      51,
      59,
      33,
      12,
      32,
      59,
      44,
      43,
      13,
      43,
      54,
      26,
      35,
      13,
      34,
      47,
      46,
      14,
      14,
      45,
      57,
      51,
      15,
      15,
      23,
      50,
      58,
      38,
      16,
      37,
      58,
      44,
      39,
      16,
      38,
      59,
      48,
      40,
      16,
      39,
      47,
      53,
      41,
      17,
      40,
      53,
      52,
      31,
      17,
      49,
      55,
      54,
      18,
      19,
      54,
      34,
      33,
      44,
      19,
      43,
      33,
      38,
      58,
      20,
      28,
      57,
      36,
      46,
      20,
      45,
      35,
      47,
      21,
      21,
      46,
      35,
      53,
      40,
      21,
      39,
      59,
      56,
      22,
      22,
      55,
      42,
      30,
      50,
      22,
      49,
      30,
      37,
      23,
      24,
      36,
      57,
      32,
      52,
      24,
      51,
      32,
      31,
      41,
      25,
      41,
      40,
      47,
      26,
      26,
      34,
      43,
      42,
      55,
      27,
      54,
      42,
      49,
      56,
      27,
      55,
      48,
      59,
      57,
      27,
      56,
      51,
      36,
      45,
      28,
      44,
      38,
      37,
      29,
      32,
      56,
      48,
      39,
      33
    ],
    [
      0,
      1,
      2,
      3,
      4,
      4,
      5,
      6,
      7,
      0,
      0,
      7,
      8,
      9,
      1,
      1,
      9,
      10,
      11,
      2,
      2,
      12,
      13,
      14,
      3,
      3,
      14,
      15,
      16,
      4,
      4,
      17,
      18,
      19,
      5,
      5,
      19,
      20,
      21,
      6,
      6,
      21,
      22,
      23,
      7,
      7,
      24,
      25,
      26,
      8,
      8,
      26,
      27,
      28,
      9,
      9,
      29,
      30,
      31,
      10,
      10,
      31,
      32,
      33,
      11,
      11,
      33,
      34,
      35,
      2,
      2,
      35,
      36,
      37,
      12,
      12,
      37,
      38,
      39,
      13,
      13,
      40,
      41,
      15,
      14,
      15,
      42,
      43,
      44,
      16,
      16,
      44,
      45,
      17,
      4,
      17,
      45,
      46,
      47,
      18,
      18,
      47,
      48,
      49,
      19,
      19,
      50,
      51,
      52,
      20,
      20,
      52,
      53,
      54,
      21,
      21,
      55,
      39,
      38,
      22,
      22,
      38,
      56,
      57,
      23,
      23,
      57,
      58,
      24,
      7,
      24,
      58,
      59,
      60,
      25,
      25,
      61,
      62,
      27,
      26,
      27,
      48,
      47,
      63,
      28,
      28,
      63,
      64,
      29,
      9,
      29,
      64,
      65,
      43,
      30,
      30,
      43,
      42,
      66,
      31,
      31,
      67,
      68,
      69,
      32,
      32,
      69,
      70,
      71,
      33,
      33,
      72,
      60,
      59,
      34,
      34,
      59,
      73,
      36,
      35,
      36,
      74,
      75,
      38,
      37,
      39,
      55,
      64,
      76,
      13,
      13,
      76,
      77,
      70,
      40,
      40,
      70,
      78,
      51,
      41,
      41,
      51,
      79,
      80,
      15,
      15,
      80,
      57,
      66,
      42,
      43,
      81,
      82,
      45,
      44,
      45,
      72,
      33,
      71,
      46,
      46,
      71,
      70,
      77,
      47,
      48,
      27,
      74,
      36,
      49,
      49,
      36,
      73,
      50,
      19,
      50,
      73,
      59,
      79,
      51,
      51,
      78,
      83,
      53,
      52,
      53,
      81,
      43,
      65,
      54,
      54,
      65,
      64,
      55,
      21,
      38,
      75,
      68,
      67,
      56,
      56,
      67,
      31,
      66,
      57,
      57,
      80,
      79,
      59,
      58,
      60,
      72,
      45,
      82,
      25,
      25,
      82,
      81,
      53,
      61,
      61,
      53,
      83,
      68,
      62,
      62,
      68,
      75,
      74,
      27,
      47,
      77,
      76,
      64,
      63,
      68,
      83,
      78,
      70,
      69
    ],
    [
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      3,
      0,
      3,
      13,
      14,
      4,
      0,
      4,
      5,
      0,
      5,
      18,
      6,
      1,
      1,
      6,
      7,
      1,
      7,
      8,
      1,
      8,
      25,
      9,
      2,
      2,
      9,
      10,
      2,
      10,
      29,
      11,
      3,
      3,
      11,
      12,
      3,
      12,
      13,
      4,
      14,
      15,
      4,
      15,
      37,
      38,
      16,
      4,
      16,
      5,
      5,
      16,
      40,
      41,
      17,
      5,
      17,
      18,
      6,
      18,
      19,
      6,
      19,
      20,
      6,
      20,
      46,
      21,
      7,
      7,
      21,
      22,
      7,
      22,
      50,
      23,
      8,
      8,
      23,
      24,
      8,
      24,
      25,
      9,
      25,
      26,
      9,
      26,
      54,
      55,
      27,
      9,
      27,
      10,
      10,
      27,
      57,
      45,
      28,
      10,
      28,
      29,
      11,
      29,
      30,
      11,
      30,
      31,
      11,
      31,
      52,
      32,
      12,
      12,
      32,
      33,
      12,
      33,
      43,
      34,
      13,
      13,
      34,
      35,
      13,
      35,
      14,
      14,
      35,
      46,
      45,
      36,
      14,
      36,
      15,
      15,
      36,
      51,
      24,
      23,
      15,
      23,
      37,
      16,
      38,
      39,
      16,
      39,
      40,
      17,
      41,
      31,
      17,
      31,
      30,
      49,
      42,
      17,
      42,
      18,
      18,
      42,
      54,
      43,
      19,
      19,
      43,
      44,
      19,
      44,
      58,
      28,
      20,
      20,
      28,
      45,
      20,
      45,
      46,
      21,
      46,
      47,
      21,
      47,
      40,
      39,
      48,
      21,
      48,
      22,
      22,
      48,
      56,
      55,
      49,
      22,
      49,
      50,
      23,
      50,
      37,
      24,
      51,
      52,
      24,
      52,
      41,
      53,
      25,
      25,
      53,
      26,
      26,
      53,
      47,
      35,
      34,
      26,
      34,
      54,
      27,
      55,
      56,
      27,
      56,
      57,
      28,
      58,
      29,
      29,
      58,
      37,
      50,
      30,
      30,
      50,
      49,
      31,
      41,
      52,
      32,
      52,
      51,
      32,
      51,
      57,
      56,
      59,
      32,
      59,
      33,
      33,
      59,
      39,
      38,
      44,
      33,
      44,
      43,
      34,
      43,
      54,
      35,
      47,
      46,
      36,
      45,
      57,
      36,
      57,
      51,
      37,
      58,
      38,
      38,
      58,
      44,
      39,
      59,
      48,
      40,
      47,
      53,
      40,
      53,
      41,
      42,
      49,
      55,
      42,
      55,
      54,
      48,
      59,
      56
    ]
  ],
  [
    [
      41,
      20,
      24,
      60,
      6
    ],
    [
      1,
      3,
      1,
      5,
      3,
      5,
      1
    ],
    [
      1,
      5,
      3,
      5,
      1,
      5,
      3,
      5,
      1,
      5,
      3,
      5,
      1
    ],
    [
      0,
      1,
      0.9428090415820634,
      0.3333333333333333,
      0.6727182848443369,
      -0.66055960981957,
      -0.4714045207910317,
      0.816496580927726,
      0.23570226039551584,
      0.9128709291752769,
      -0.816496580927726,
      -0.9084205452398527,
      -0.25231131935570694,
      0.09003025224590881,
      0.7453559924999299,
      0.4714045207910317,
      -0.3333333333333333,
      0.6170765289406387,
      -0.7453559924999299,
      0.9084205452398527,
      0.25231131935570694,
      -0.23570226039551584,
      -0.9128709291752769,
      0.5270462766947299,
      0.408248290463863,
      -0.9428090415820634,
      -0.09003025224590881,
      0.66055960981957,
      -0.6727182848443369,
      -0.6170765289406387,
      -0.5270462766947299,
      -0.408248290463863,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      6,
      10,
      3,
      11,
      12,
      3,
      13,
      5,
      14,
      15,
      7,
      16,
      15,
      10,
      16,
      17,
      12,
      18,
      19,
      20,
      16,
      21,
      22,
      16,
      23,
      24,
      14,
      25,
      0,
      16,
      26,
      27,
      18,
      28,
      27,
      16,
      29,
      20,
      14,
      30,
      31,
      18,
      0,
      0,
      32
    ],
    [
      1,
      2,
      3,
      4,
      5,
      6,
      10,
      9,
      4,
      8,
      7,
      0,
      13,
      12,
      5,
      11,
      10,
      0,
      15,
      8,
      6,
      14,
      13,
      0,
      17,
      11,
      1,
      16,
      15,
      0,
      18,
      14,
      2,
      9,
      17,
      0,
      7,
      16,
      3,
      12,
      18,
      0,
      1,
      6,
      17,
      9,
      12,
      13,
      1,
      13,
      19,
      10,
      3,
      16,
      1,
      11,
      5,
      7,
      19,
      18,
      1,
      18,
      12,
      8,
      15,
      2,
      2,
      15,
      19,
      13,
      4,
      9,
      2,
      14,
      6,
      10,
      19,
      7,
      2,
      7,
      8,
      11,
      17,
      3,
      3,
      17,
      19,
      15,
      5,
      12,
      3,
      10,
      11,
      14,
      18,
      4,
      4,
      18,
      19,
      17,
      6,
      8,
      4,
      13,
      14,
      16,
      7,
      5,
      5,
      15,
      16,
      9,
      10,
      6,
      12,
      9,
      16,
      14,
      11,
      8
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      0,
      5,
      10,
      11,
      12,
      6,
      1,
      0,
      13,
      14,
      15,
      10,
      2,
      1,
      16,
      8,
      7,
      13,
      3,
      2,
      17,
      12,
      11,
      16,
      4,
      3,
      9,
      15,
      14,
      17,
      5,
      4,
      9,
      4,
      18,
      11,
      19,
      0,
      8,
      19,
      20,
      14,
      13,
      9,
      6,
      16,
      11,
      18,
      21,
      7,
      5,
      21,
      14,
      20,
      1,
      6,
      12,
      20,
      22,
      8,
      16,
      6,
      10,
      17,
      14,
      21,
      19,
      11,
      0,
      19,
      8,
      22,
      2,
      10,
      15,
      22,
      23,
      12,
      17,
      10,
      1,
      20,
      12,
      23,
      3,
      13,
      7,
      23,
      18,
      15,
      9,
      13,
      2,
      22,
      15,
      18,
      4,
      16,
      3,
      23,
      7,
      21,
      5,
      17,
      21,
      18,
      23,
      22,
      20,
      19
    ],
    [
      5,
      3,
      5,
      1,
      5,
      3,
      5,
      1,
      5,
      3,
      5,
      1,
      5,
      3,
      5,
      1,
      5,
      3,
      5,
      1,
      5,
      1,
      5,
      3,
      5,
      1,
      5,
      3,
      5,
      1,
      5,
      3,
      5,
      1,
      5,
      3,
      5,
      1,
      5,
      1,
      5,
      3,
      5,
      3,
      5,
      1,
      5,
      3
    ],
    [
      0,
      1,
      7,
      13,
      2,
      0,
      2,
      10,
      15,
      3,
      0,
      3,
      13,
      17,
      4,
      0,
      4,
      15,
      18,
      5,
      0,
      5,
      17,
      7,
      6,
      0,
      6,
      18,
      10,
      1,
      1,
      10,
      2,
      11,
      9,
      1,
      9,
      18,
      16,
      4,
      1,
      4,
      11,
      13,
      8,
      1,
      8,
      16,
      6,
      7,
      2,
      13,
      3,
      14,
      12,
      2,
      12,
      7,
      9,
      5,
      2,
      5,
      14,
      15,
      11,
      3,
      15,
      4,
      16,
      8,
      3,
      8,
      10,
      12,
      6,
      3,
      6,
      16,
      17,
      14,
      4,
      17,
      5,
      9,
      11,
      5,
      18,
      6,
      12,
      14,
      7,
      17,
      16,
      19,
      9,
      7,
      12,
      19,
      8,
      13,
      8,
      19,
      11,
      15,
      10,
      9,
      19,
      12,
      10,
      18,
      11,
      19,
      14,
      17,
      13,
      14,
      19,
      16,
      18,
      15
    ]
  ],
  [
    [
      42,
      60,
      44,
      120,
      4
    ],
    [
      2,
      3,
      1,
      5,
      1,
      5,
      3
    ],
    [
      1,
      10,
      3,
      3,
      1,
      10,
      3,
      5,
      1
    ],
    [
      0,
      1,
      0.7913673486983457,
      0.6113409191393546,
      0.1126514014248428,
      0.7833083315929099,
      -0.6820030708669234,
      0.4014151117159585,
      -0.4944105967818434,
      -0.6179162098340442,
      0.41492683104072103,
      0.4628863602868818,
      0.9007316265297681,
      -0.1659772425819362,
      0.7860486709989698,
      -0.01752268372946338,
      -0.26910779393215783,
      0.9487004533517756,
      0.8343963551623274,
      0.2991971589975185,
      -0.7549125894212049,
      -0.46458928075638417,
      -0.5726387930355009,
      0.802830223431917,
      -0.008605801292796323,
      -0.9998094297109955,
      -0.876169792138844,
      -0.4525240880751785,
      -0.8708511144394682,
      0.16539212175886567,
      0.03316763568372039,
      -0.314431801434409,
      -0.14378748300260769,
      0.943295404303227,
      0.8278221079754865,
      0.21872855566284477,
      -0.5546363234425816,
      0.40428947564196915,
      -0.7948408454507542,
      0.8987000724238126,
      -0.4061817645901088,
      0.21669700155688928,
      0.5668072334748242,
      -0.7635183907140013,
      0.33078424351773134,
      -0.8278221079754865,
      0.46458928075638417,
      0.314431801434409,
      0.27568204111899863,
      -0.18491401359787285,
      0.7614868366080457,
      -0.5668072334748242,
      -0.6906088721597197,
      -0.598394317995037,
      -0.03316763568372039,
      -0.9487004533517756,
      -0.027848957984344475,
      -0.33078424351773134,
      0.1544248384013595,
      0.9366352606705699,
      -0.5779574707348768,
      0.18491401359787285,
      0.10075847653862607,
      -0.1544248384013595,
      -0.9366352606705699,
      -0.7614868366080457,
      0.027848957984344475,
      -0.943295404303227,
      0.7549125894212049,
      -0.4628863602868818,
      0.5779574707348768,
      0.7948408454507542,
      -0.21669700155688928,
      0.26910779393215783,
      0.1659772425819362,
      0.7635183907140013,
      0.5546363234425816,
      -0.27568204111899863,
      0.14378748300260769,
      -0.2991971589975185,
      -0.10075847653862607,
      0.598394317995037,
      -0.9007316265297681,
      -0.4014151117159585,
      -0.21872855566284477,
      -0.802830223431917,
      0.8708511144394682,
      -0.16539212175886567,
      -0.41492683104072103,
      -0.7833083315929099,
      -0.40428947564196915,
      0.4525240880751785,
      0.876169792138844,
      0.5726387930355009,
      -0.8343963551623274,
      0.6906088721597197,
      0.4061817645901088,
      0.6820030708669234,
      -0.6113409191393546,
      -0.8987000724238126,
      -0.1126514014248428,
      0.008605801292796323,
      0.9998094297109955,
      0.01752268372946338,
      -0.7913673486983457,
      0.4944105967818434,
      0.6179162098340442,
      -0.7860486709989698,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      9,
      15,
      16,
      17,
      13,
      18,
      19,
      11,
      20,
      21,
      11,
      22,
      23,
      13,
      24,
      25,
      15,
      26,
      27,
      13,
      28,
      29,
      11,
      30,
      17,
      31,
      32,
      19,
      33,
      34,
      21,
      31,
      35,
      23,
      36,
      37,
      27,
      38,
      39,
      29,
      40,
      41,
      42,
      38,
      43,
      44,
      36,
      45,
      46,
      47,
      48,
      49,
      33,
      50,
      51,
      47,
      52,
      53,
      40,
      54,
      55,
      47,
      56,
      57,
      33,
      58,
      59,
      47,
      60,
      61,
      38,
      62,
      53,
      38,
      63,
      64,
      31,
      65,
      42,
      31,
      66,
      44,
      67,
      68,
      46,
      69,
      70,
      49,
      71,
      72,
      51,
      71,
      73,
      55,
      74,
      75,
      57,
      76,
      77,
      61,
      67,
      78,
      79,
      67,
      80,
      81,
      71,
      82,
      83,
      74,
      84,
      85,
      76,
      86,
      87,
      69,
      88,
      89,
      69,
      90,
      91,
      71,
      92,
      91,
      74,
      93,
      85,
      74,
      94,
      79,
      69,
      95,
      81,
      96,
      97,
      83,
      98,
      99,
      87,
      96,
      100,
      89,
      98,
      101,
      102,
      103,
      104,
      0,
      98,
      105,
      106,
      98,
      107,
      106,
      103,
      0,
      0,
      108
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      9,
      8,
      3,
      0,
      2,
      11,
      10,
      0,
      14,
      13,
      12,
      0,
      1,
      6,
      15,
      16,
      1,
      17,
      18,
      5,
      1,
      12,
      19,
      20,
      2,
      21,
      22,
      23,
      2,
      24,
      25,
      20,
      3,
      26,
      27,
      28,
      3,
      29,
      18,
      30,
      4,
      26,
      31,
      7,
      4,
      14,
      22,
      32,
      4,
      16,
      33,
      13,
      35,
      34,
      33,
      5,
      14,
      37,
      36,
      5,
      39,
      38,
      31,
      6,
      40,
      11,
      29,
      6,
      32,
      34,
      20,
      7,
      19,
      21,
      9,
      7,
      20,
      41,
      30,
      8,
      34,
      13,
      23,
      8,
      22,
      43,
      42,
      8,
      42,
      44,
      25,
      9,
      24,
      27,
      45,
      9,
      30,
      31,
      12,
      10,
      46,
      25,
      28,
      10,
      27,
      39,
      47,
      10,
      47,
      48,
      18,
      11,
      21,
      41,
      26,
      11,
      26,
      40,
      17,
      12,
      19,
      49,
      44,
      13,
      15,
      40,
      50,
      14,
      15,
      35,
      19,
      22,
      15,
      51,
      52,
      34,
      16,
      37,
      49,
      51,
      16,
      53,
      38,
      36,
      17,
      39,
      37,
      54,
      17,
      48,
      28,
      38,
      18,
      31,
      50,
      33,
      21,
      45,
      46,
      30,
      23,
      24,
      51,
      55,
      23,
      56,
      46,
      44,
      24,
      43,
      32,
      49,
      25,
      41,
      57,
      48,
      27,
      43,
      56,
      41,
      28,
      29,
      58,
      53,
      29,
      39,
      45,
      57,
      32,
      52,
      36,
      44,
      33,
      40,
      54,
      53,
      55,
      42,
      36,
      35,
      49,
      54,
      59,
      35,
      47,
      58,
      50,
      37,
      50,
      59,
      52,
      38,
      51,
      57,
      58,
      42,
      58,
      59,
      46,
      43,
      59,
      55,
      48,
      45,
      55,
      56,
      53,
      47,
      52,
      54,
      56,
      57
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      10,
      3,
      2,
      5,
      11,
      12,
      0,
      4,
      13,
      11,
      5,
      3,
      14,
      15,
      4,
      6,
      16,
      17,
      7,
      0,
      18,
      4,
      6,
      8,
      10,
      19,
      2,
      7,
      20,
      16,
      8,
      10,
      21,
      14,
      3,
      9,
      22,
      23,
      10,
      2,
      12,
      22,
      9,
      24,
      16,
      12,
      11,
      2,
      25,
      0,
      12,
      26,
      14,
      13,
      4,
      16,
      20,
      11,
      13,
      23,
      27,
      15,
      14,
      27,
      6,
      4,
      15,
      27,
      28,
      16,
      6,
      23,
      22,
      17,
      16,
      22,
      29,
      7,
      17,
      29,
      30,
      18,
      0,
      30,
      31,
      4,
      18,
      32,
      21,
      10,
      8,
      31,
      30,
      19,
      10,
      30,
      33,
      2,
      19,
      33,
      11,
      20,
      7,
      28,
      32,
      8,
      16,
      32,
      13,
      14,
      21,
      14,
      34,
      10,
      23,
      16,
      35,
      22,
      12,
      24,
      27,
      23,
      16,
      11,
      36,
      27,
      24,
      25,
      30,
      36,
      0,
      2,
      37,
      30,
      25,
      26,
      30,
      37,
      14,
      4,
      33,
      30,
      26,
      13,
      32,
      35,
      16,
      27,
      31,
      32,
      28,
      29,
      0,
      38,
      7,
      22,
      39,
      10,
      29,
      29,
      10,
      34,
      30,
      31,
      27,
      40,
      4,
      10,
      39,
      32,
      31,
      33,
      7,
      41,
      2,
      33,
      4,
      40,
      11,
      14,
      36,
      30,
      34,
      35,
      32,
      37,
      22,
      38,
      0,
      36,
      11,
      14,
      42,
      27,
      36,
      41,
      22,
      37,
      2,
      32,
      42,
      14,
      37,
      11,
      43,
      7,
      38,
      43,
      32,
      39,
      22,
      43,
      11,
      40,
      27,
      43,
      22,
      41,
      7,
      42,
      32,
      43,
      27
    ],
    [
      10,
      3,
      3,
      1,
      10,
      3,
      5,
      1,
      10,
      3,
      3,
      1,
      5,
      1,
      10,
      3,
      5,
      1,
      3,
      1,
      10,
      3,
      10,
      3,
      5,
      1,
      5,
      1,
      10,
      3,
      3,
      1,
      10,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      10,
      3,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      10,
      3,
      3,
      1,
      5,
      1,
      10,
      3,
      5,
      1,
      10,
      3,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1
    ],
    [
      0,
      1,
      5,
      16,
      36,
      51,
      42,
      24,
      9,
      2,
      0,
      2,
      3,
      0,
      3,
      10,
      28,
      47,
      53,
      37,
      16,
      14,
      4,
      0,
      4,
      12,
      7,
      1,
      1,
      7,
      20,
      9,
      25,
      45,
      48,
      39,
      17,
      6,
      1,
      6,
      5,
      2,
      9,
      20,
      21,
      8,
      2,
      8,
      23,
      42,
      55,
      58,
      47,
      29,
      11,
      3,
      3,
      11,
      30,
      26,
      10,
      4,
      14,
      13,
      4,
      13,
      32,
      44,
      43,
      46,
      27,
      10,
      26,
      12,
      5,
      6,
      18,
      29,
      48,
      57,
      55,
      51,
      35,
      15,
      5,
      15,
      33,
      14,
      16,
      6,
      17,
      31,
      40,
      18,
      7,
      12,
      31,
      17,
      38,
      54,
      52,
      49,
      32,
      19,
      7,
      19,
      20,
      8,
      21,
      30,
      11,
      18,
      40,
      33,
      15,
      34,
      22,
      8,
      22,
      23,
      9,
      24,
      25,
      10,
      27,
      28,
      11,
      29,
      18,
      12,
      26,
      31,
      13,
      14,
      33,
      50,
      53,
      58,
      56,
      43,
      23,
      22,
      13,
      22,
      34,
      19,
      32,
      15,
      35,
      34,
      16,
      37,
      36,
      17,
      39,
      38,
      19,
      34,
      35,
      52,
      59,
      57,
      45,
      41,
      21,
      20,
      21,
      41,
      30,
      23,
      43,
      44,
      24,
      42,
      24,
      44,
      49,
      36,
      37,
      38,
      39,
      28,
      27,
      25,
      25,
      27,
      46,
      41,
      45,
      26,
      30,
      41,
      46,
      56,
      59,
      54,
      50,
      40,
      31,
      28,
      39,
      48,
      29,
      47,
      32,
      49,
      44,
      33,
      40,
      50,
      35,
      51,
      36,
      49,
      52,
      37,
      53,
      50,
      54,
      38,
      42,
      51,
      55,
      43,
      56,
      46,
      45,
      57,
      48,
      47,
      58,
      53,
      52,
      54,
      59,
      55,
      57,
      59,
      56,
      58
    ]
  ],
  [
    [
      43,
      60,
      44,
      120,
      4
    ],
    [
      2,
      5,
      3,
      3,
      1,
      5,
      1
    ],
    [
      1,
      10,
      1,
      5,
      3,
      10,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.5558508647159268,
      0.8312820316803176,
      -0.5423346066791824,
      0.1218333214009208,
      -0.35474213259410253,
      0.4279348118207162,
      0.2523198656125837,
      -0.4952826155062292,
      0.9129018498231336,
      0.38957265610656083,
      0.756959596837751,
      0.49384609504095256,
      -0.019560912391062047,
      0.3526376782326571,
      0.9355554706147092,
      -0.8323493477457812,
      -0.25161597270438757,
      -0.8639995688454785,
      0.31896377638990064,
      -0.6764070947603986,
      0.625065266809696,
      -0.15363340047227825,
      0.8558696236414324,
      -0.32309191149440514,
      -0.14264493727357205,
      -0.03769487545401502,
      -0.8687319096115376,
      0.3058398516164474,
      0.5362899523248648,
      0.7668375022950268,
      0.9664218358269974,
      -0.05213671946719588,
      0.9347716147273,
      -0.15641015840158762,
      0.7788293617419174,
      0.40221746424364857,
      0.3251281267212701,
      0.7886098179374484,
      0.5981195339753443,
      0.18154781973076223,
      0.7805724900533733,
      -0.5800294821331975,
      -0.7468985882106168,
      -0.7788293617419174,
      -0.625065266809696,
      0.05213671946719588,
      -0.8421298039413122,
      0.5160942313788804,
      -0.6628908367236542,
      0.7468985882106168,
      -0.9664218358269974,
      0.25161597270438757,
      0.2034175846349286,
      0.9777029450423531,
      -0.6131066525610038,
      -0.5160942313788804,
      -0.07077204588182145,
      -0.6379275527798013,
      0.48507881883410536,
      -0.2034175846349286,
      -0.9777029450423531,
      0.14011714243553386,
      0.6628908367236542,
      0.6764070947603986,
      -0.38957265610656083,
      0.6131066525610038,
      -0.5981195339753443,
      0.5800294821331975,
      -0.3251281267212701,
      0.8323493477457812,
      -0.49384609504095256,
      -0.14011714243553386,
      0.15641015840158762,
      0.8421298039413122,
      -0.9347716147273,
      -0.31896377638990064,
      -0.40221746424364857,
      -0.8558696236414324,
      -0.756959596837751,
      -0.4279348118207162,
      -0.7886098179374484,
      0.14264493727357205,
      -0.48507881883410536,
      0.6379275527798013,
      -0.3058398516164474,
      0.8687319096115376,
      -0.9129018498231336,
      -0.1218333214009208,
      0.03769487545401502,
      -0.18154781973076223,
      -0.7805724900533733,
      0.15363340047227825,
      0.8639995688454785,
      0.35474213259410253,
      -0.8312820316803176,
      0.32309191149440514,
      -0.9355554706147092,
      0.07077204588182145,
      -0.7668375022950268,
      0.5423346066791824,
      -0.5558508647159268,
      -0.5362899523248648,
      -0.3526376782326571,
      -0.2523198656125837,
      0.4952826155062292,
      0.019560912391062,
      -0.9355554706147093,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      15,
      16,
      17,
      18,
      13,
      19,
      20,
      11,
      21,
      22,
      11,
      23,
      24,
      13,
      25,
      26,
      16,
      27,
      28,
      13,
      29,
      28,
      11,
      30,
      15,
      31,
      32,
      18,
      33,
      34,
      20,
      35,
      36,
      22,
      33,
      37,
      24,
      38,
      39,
      26,
      40,
      41,
      42,
      40,
      43,
      44,
      38,
      45,
      46,
      47,
      48,
      49,
      35,
      50,
      51,
      47,
      52,
      53,
      47,
      54,
      55,
      47,
      56,
      57,
      40,
      58,
      59,
      31,
      60,
      59,
      40,
      61,
      62,
      33,
      63,
      62,
      35,
      64,
      44,
      33,
      65,
      46,
      66,
      67,
      49,
      68,
      69,
      51,
      70,
      71,
      53,
      72,
      73,
      55,
      74,
      75,
      57,
      74,
      76,
      77,
      74,
      78,
      79,
      70,
      80,
      81,
      72,
      82,
      83,
      68,
      84,
      85,
      68,
      86,
      87,
      66,
      88,
      89,
      66,
      90,
      87,
      72,
      91,
      92,
      68,
      93,
      79,
      72,
      94,
      77,
      66,
      95,
      81,
      96,
      97,
      83,
      98,
      99,
      85,
      100,
      101,
      89,
      96,
      102,
      0,
      96,
      103,
      104,
      100,
      105,
      106,
      96,
      107,
      104,
      108,
      0,
      0,
      109
    ],
    [
      1,
      2,
      3,
      4,
      4,
      6,
      5,
      0,
      9,
      8,
      7,
      0,
      12,
      11,
      10,
      0,
      14,
      13,
      1,
      0,
      1,
      15,
      16,
      17,
      1,
      18,
      19,
      20,
      2,
      15,
      21,
      12,
      2,
      9,
      22,
      23,
      2,
      24,
      25,
      8,
      3,
      11,
      26,
      24,
      3,
      27,
      19,
      10,
      3,
      7,
      28,
      29,
      4,
      30,
      22,
      31,
      4,
      32,
      33,
      29,
      20,
      21,
      7,
      5,
      34,
      33,
      17,
      5,
      16,
      36,
      35,
      5,
      35,
      37,
      19,
      6,
      18,
      11,
      38,
      6,
      30,
      39,
      15,
      6,
      15,
      38,
      27,
      7,
      31,
      13,
      40,
      8,
      28,
      42,
      41,
      8,
      44,
      43,
      10,
      9,
      26,
      38,
      45,
      9,
      46,
      40,
      25,
      10,
      36,
      47,
      21,
      11,
      23,
      40,
      29,
      12,
      28,
      30,
      14,
      12,
      29,
      39,
      20,
      13,
      22,
      49,
      48,
      13,
      48,
      41,
      33,
      14,
      32,
      16,
      50,
      14,
      16,
      49,
      51,
      39,
      17,
      18,
      52,
      53,
      17,
      47,
      27,
      37,
      18,
      36,
      50,
      54,
      19,
      21,
      45,
      25,
      20,
      30,
      50,
      34,
      22,
      26,
      46,
      28,
      23,
      42,
      32,
      49,
      23,
      55,
      43,
      41,
      24,
      44,
      42,
      56,
      24,
      53,
      47,
      43,
      25,
      38,
      57,
      53,
      26,
      56,
      55,
      40,
      27,
      36,
      44,
      57,
      31,
      32,
      56,
      58,
      31,
      51,
      34,
      41,
      33,
      39,
      54,
      37,
      49,
      52,
      59,
      34,
      58,
      51,
      53,
      35,
      52,
      45,
      44,
      35,
      50,
      59,
      58,
      37,
      57,
      59,
      46,
      42,
      46,
      58,
      48,
      43,
      59,
      55,
      47,
      45,
      56,
      54,
      52,
      48,
      51,
      54,
      55,
      57
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      10,
      4,
      3,
      2,
      5,
      7,
      11,
      0,
      4,
      12,
      13,
      5,
      7,
      14,
      15,
      1,
      6,
      16,
      17,
      7,
      0,
      18,
      16,
      6,
      9,
      19,
      18,
      2,
      8,
      20,
      19,
      9,
      1,
      15,
      21,
      8,
      10,
      13,
      22,
      4,
      2,
      23,
      8,
      10,
      24,
      14,
      7,
      5,
      25,
      26,
      11,
      7,
      26,
      27,
      0,
      11,
      27,
      19,
      12,
      4,
      19,
      20,
      13,
      12,
      28,
      24,
      5,
      13,
      24,
      20,
      15,
      14,
      22,
      13,
      17,
      16,
      15,
      29,
      7,
      17,
      30,
      2,
      18,
      0,
      13,
      31,
      16,
      18,
      32,
      13,
      18,
      19,
      33,
      15,
      20,
      8,
      17,
      34,
      21,
      15,
      34,
      10,
      8,
      21,
      34,
      28,
      13,
      10,
      16,
      35,
      4,
      22,
      35,
      26,
      23,
      2,
      26,
      25,
      8,
      23,
      7,
      36,
      24,
      25,
      27,
      4,
      37,
      0,
      26,
      33,
      8,
      27,
      27,
      8,
      38,
      19,
      20,
      24,
      31,
      13,
      28,
      34,
      25,
      24,
      13,
      32,
      34,
      17,
      29,
      26,
      35,
      7,
      15,
      39,
      26,
      29,
      30,
      26,
      39,
      2,
      0,
      40,
      26,
      30,
      31,
      24,
      40,
      16,
      19,
      39,
      34,
      32,
      33,
      26,
      40,
      15,
      35,
      2,
      41,
      4,
      16,
      36,
      7,
      35,
      25,
      34,
      38,
      8,
      16,
      42,
      24,
      36,
      42,
      16,
      37,
      4,
      16,
      40,
      0,
      37,
      34,
      42,
      19,
      38,
      43,
      34,
      39,
      15,
      19,
      41,
      2,
      39,
      43,
      15,
      40,
      24,
      19,
      42,
      4,
      41,
      42,
      34,
      43,
      24
    ],
    [
      10,
      1,
      5,
      3,
      10,
      1,
      3,
      1,
      10,
      1,
      5,
      3,
      3,
      1,
      10,
      1,
      10,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      10,
      1,
      3,
      1,
      10,
      1,
      10,
      1,
      5,
      3,
      5,
      3,
      10,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      10,
      1,
      5,
      3,
      10,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      10,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      5,
      3,
      3,
      1,
      5,
      3,
      3,
      1
    ],
    [
      0,
      1,
      5,
      17,
      35,
      53,
      44,
      24,
      9,
      2,
      0,
      2,
      7,
      12,
      3,
      0,
      3,
      10,
      24,
      43,
      56,
      48,
      32,
      14,
      4,
      0,
      4,
      1,
      1,
      4,
      13,
      31,
      48,
      58,
      52,
      35,
      18,
      6,
      1,
      6,
      20,
      15,
      5,
      2,
      9,
      8,
      2,
      8,
      23,
      41,
      49,
      34,
      16,
      5,
      15,
      7,
      3,
      12,
      29,
      14,
      33,
      50,
      37,
      36,
      27,
      11,
      3,
      11,
      10,
      4,
      14,
      29,
      30,
      13,
      5,
      16,
      17,
      6,
      18,
      19,
      6,
      19,
      38,
      25,
      26,
      40,
      22,
      13,
      30,
      20,
      7,
      15,
      21,
      7,
      21,
      27,
      47,
      57,
      55,
      42,
      23,
      28,
      12,
      8,
      9,
      25,
      45,
      53,
      52,
      51,
      49,
      31,
      22,
      8,
      22,
      40,
      28,
      23,
      9,
      24,
      10,
      26,
      25,
      10,
      11,
      19,
      18,
      37,
      54,
      58,
      56,
      46,
      26,
      11,
      27,
      21,
      38,
      19,
      12,
      28,
      29,
      13,
      22,
      31,
      14,
      32,
      33,
      15,
      20,
      39,
      34,
      51,
      59,
      57,
      45,
      38,
      21,
      16,
      34,
      39,
      50,
      33,
      16,
      33,
      32,
      41,
      42,
      43,
      44,
      47,
      36,
      17,
      17,
      36,
      37,
      18,
      35,
      20,
      30,
      39,
      23,
      42,
      41,
      24,
      44,
      43,
      25,
      38,
      45,
      26,
      46,
      40,
      27,
      36,
      47,
      28,
      40,
      46,
      55,
      59,
      54,
      50,
      39,
      30,
      29,
      31,
      49,
      41,
      32,
      48,
      34,
      49,
      51,
      35,
      52,
      53,
      37,
      50,
      54,
      42,
      55,
      46,
      56,
      43,
      44,
      53,
      45,
      57,
      47,
      48,
      56,
      58,
      51,
      52,
      58,
      54,
      59,
      55,
      57,
      59
    ]
  ],
  [
    [
      44,
      60,
      44,
      120,
      4
    ],
    [
      2,
      5,
      3,
      5,
      1,
      3,
      1
    ],
    [
      1,
      6,
      1,
      5,
      3,
      6,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.6998542122237652,
      0.7142857142857143,
      -0.5248906591678238,
      0.4629100498862757,
      -0.11664236870396086,
      0.6900655593423543,
      -0.3689536880596678,
      -0.5947008444878116,
      0.8748177652797064,
      0.14285714285714285,
      0.5832118435198043,
      0.42857142857142855,
      0.7634342144881664,
      0.2519902889286015,
      0.2077578990390909,
      0.40397141477872645,
      0.8908668539285414,
      -0.8938443472274916,
      -0.1317907946015359,
      -0.3499271061118826,
      0.9258200997725514,
      -0.6022384254675895,
      0.7854302741968968,
      -0.45280171078047904,
      0.03642607974699329,
      0.10287460466859646,
      -0.9622461795195447,
      -0.8545497448232964,
      -0.499336129633269,
      0.47507842093878705,
      0.7817337078570827,
      0.9383977675441076,
      -0.31943828249996997,
      0.3499271061118826,
      -0.14285714285714285,
      0.5301494770802446,
      0.9469067136670513,
      0.31943828249996997,
      0.7103718480486068,
      -0.49601942214279704,
      0.5714527691863379,
      -0.2496680648166345,
      0.38272145209503217,
      0.8668814646650022,
      -0.9469067136670513,
      -0.03642607974699329,
      -0.5301494770802446,
      -0.7854302741968968,
      -0.6107473715905332,
      0.6172133998483676,
      -0.2024990811266701,
      0.8443689093044461,
      -0.9383977675441076,
      0.1317907946015359,
      -0.9711921135272573,
      0.19072942970908519,
      -0.08910684063323206,
      -0.6172133998483676,
      0.04981223822903682,
      -0.8668814646650022,
      -0.38272145209503217,
      -0.5937294793446459,
      -0.19072942970908519,
      0.13891907886226887,
      0.9583148474999099,
      -0.04981223822903682,
      0.49601942214279704,
      0.45280171078047904,
      -0.8908668539285414,
      0.6022384254675895,
      0.08910684063323206,
      -0.7817337078570827,
      0.8938443472274916,
      -0.42857142857142855,
      0.5937294793446459,
      0.6107473715905332,
      0.9711921135272573,
      0.2024990811266701,
      -0.8443689093044461,
      -0.10287460466859646,
      0.9622461795195447,
      -0.2519902889286015,
      0.8545497448232964,
      0.499336129633269,
      -0.47507842093878705,
      -0.40397141477872645,
      -0.5832118435198043,
      -0.6900655593423543,
      -0.13891907886226887,
      0.2496680648166345,
      -0.9583148474999099,
      -0.5714527691863379,
      -0.7634342144881664,
      0.5947008444878116,
      -0.8748177652797064,
      -0.4629100498862757,
      -0.7103718480486068,
      -0.9258200997725514,
      -0.2077578990390909,
      0.11664236870396086,
      -0.7142857142857143,
      0.3689536880596678,
      0.5248906591678238,
      -0.6998542122237652,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      9,
      15,
      16,
      17,
      18,
      19,
      20,
      13,
      21,
      22,
      11,
      23,
      24,
      11,
      25,
      26,
      18,
      27,
      28,
      15,
      29,
      30,
      11,
      31,
      17,
      32,
      33,
      20,
      34,
      35,
      22,
      36,
      37,
      24,
      34,
      38,
      26,
      39,
      40,
      30,
      41,
      42,
      43,
      32,
      44,
      45,
      39,
      46,
      47,
      34,
      48,
      49,
      39,
      50,
      51,
      41,
      52,
      53,
      41,
      54,
      55,
      39,
      56,
      57,
      36,
      58,
      59,
      32,
      60,
      61,
      41,
      62,
      61,
      34,
      63,
      64,
      32,
      65,
      43,
      66,
      67,
      45,
      68,
      69,
      47,
      70,
      71,
      49,
      36,
      72,
      51,
      73,
      74,
      55,
      75,
      76,
      57,
      73,
      77,
      59,
      68,
      78,
      64,
      11,
      79,
      80,
      68,
      81,
      82,
      83,
      84,
      85,
      36,
      86,
      87,
      73,
      88,
      89,
      75,
      90,
      91,
      92,
      93,
      91,
      73,
      94,
      95,
      83,
      96,
      97,
      36,
      98,
      85,
      68,
      21,
      99,
      11,
      100,
      87,
      70,
      35,
      99,
      36,
      101,
      89,
      102,
      103,
      95,
      102,
      104,
      97,
      102,
      105,
      0,
      102,
      0,
      0,
      106
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      10,
      9,
      8,
      0,
      12,
      6,
      11,
      0,
      14,
      9,
      13,
      0,
      1,
      15,
      16,
      17,
      1,
      18,
      3,
      19,
      1,
      13,
      16,
      20,
      2,
      21,
      22,
      12,
      2,
      23,
      4,
      24,
      2,
      17,
      22,
      25,
      3,
      26,
      27,
      28,
      3,
      8,
      27,
      29,
      4,
      30,
      31,
      7,
      4,
      28,
      31,
      32,
      19,
      34,
      33,
      5,
      36,
      7,
      35,
      5,
      37,
      34,
      10,
      5,
      39,
      38,
      26,
      6,
      40,
      38,
      15,
      6,
      41,
      30,
      39,
      7,
      42,
      29,
      41,
      8,
      44,
      10,
      43,
      8,
      25,
      46,
      45,
      9,
      32,
      46,
      42,
      9,
      47,
      37,
      23,
      10,
      18,
      48,
      47,
      11,
      50,
      12,
      49,
      11,
      51,
      48,
      14,
      11,
      52,
      21,
      40,
      12,
      45,
      20,
      52,
      13,
      54,
      14,
      53,
      13,
      33,
      51,
      24,
      14,
      15,
      32,
      40,
      42,
      15,
      43,
      17,
      51,
      16,
      53,
      55,
      37,
      16,
      42,
      55,
      41,
      17,
      35,
      25,
      48,
      18,
      56,
      19,
      57,
      18,
      20,
      47,
      44,
      19,
      29,
      33,
      54,
      20,
      36,
      44,
      21,
      21,
      24,
      36,
      33,
      22,
      34,
      56,
      49,
      22,
      41,
      56,
      39,
      23,
      50,
      47,
      30,
      23,
      55,
      24,
      58,
      25,
      39,
      45,
      26,
      26,
      53,
      28,
      37,
      27,
      43,
      58,
      51,
      27,
      45,
      58,
      52,
      28,
      49,
      32,
      34,
      29,
      50,
      54,
      30,
      31,
      48,
      57,
      35,
      31,
      52,
      57,
      40,
      59,
      36,
      46,
      35,
      44,
      59,
      43,
      38,
      54,
      59,
      53,
      38,
      49,
      59,
      50,
      46,
      55,
      57,
      58,
      56
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      10,
      11,
      3,
      2,
      5,
      12,
      13,
      0,
      4,
      9,
      8,
      5,
      3,
      14,
      15,
      4,
      7,
      16,
      17,
      1,
      6,
      11,
      10,
      7,
      0,
      18,
      19,
      6,
      9,
      20,
      21,
      2,
      1,
      17,
      22,
      8,
      11,
      23,
      14,
      3,
      2,
      24,
      25,
      10,
      26,
      27,
      12,
      5,
      15,
      14,
      13,
      12,
      28,
      18,
      0,
      13,
      29,
      30,
      9,
      4,
      31,
      26,
      5,
      8,
      32,
      33,
      4,
      15,
      34,
      32,
      16,
      7,
      19,
      18,
      17,
      16,
      35,
      36,
      11,
      6,
      37,
      38,
      7,
      10,
      39,
      35,
      6,
      19,
      30,
      39,
      20,
      9,
      22,
      17,
      21,
      20,
      28,
      24,
      2,
      21,
      32,
      34,
      8,
      22,
      33,
      32,
      23,
      11,
      25,
      24,
      14,
      23,
      27,
      37,
      10,
      25,
      27,
      25,
      34,
      12,
      26,
      18,
      28,
      27,
      14,
      40,
      35,
      13,
      12,
      38,
      41,
      15,
      13,
      35,
      39,
      28,
      29,
      26,
      31,
      30,
      4,
      33,
      19,
      29,
      8,
      34,
      25,
      31,
      15,
      41,
      16,
      32,
      7,
      38,
      12,
      34,
      18,
      26,
      42,
      17,
      16,
      41,
      29,
      19,
      36,
      20,
      33,
      11,
      35,
      38,
      37,
      36,
      19,
      33,
      20,
      39,
      30,
      24,
      28,
      39,
      17,
      42,
      37,
      21,
      20,
      36,
      43,
      22,
      21,
      37,
      27,
      28,
      22,
      43,
      23,
      32,
      24,
      30,
      40,
      14,
      23,
      43,
      31,
      25,
      41,
      38,
      35,
      40,
      41,
      42,
      26,
      29,
      43,
      40,
      30,
      31,
      42,
      43,
      36,
      37,
      40,
      43,
      42,
      41
    ],
    [
      6,
      1,
      5,
      3,
      6,
      1,
      5,
      1,
      6,
      1,
      5,
      3,
      5,
      1,
      6,
      1,
      6,
      1,
      5,
      1,
      5,
      3,
      6,
      1,
      6,
      1,
      5,
      1,
      6,
      1,
      5,
      3,
      5,
      1,
      6,
      1,
      5,
      3,
      6,
      1,
      6,
      1,
      5,
      3,
      5,
      1,
      5,
      3,
      5,
      1,
      6,
      1,
      6,
      1,
      5,
      1,
      6,
      1,
      5,
      3,
      6,
      1,
      5,
      1,
      6,
      1,
      5,
      1,
      5,
      3,
      6,
      1,
      5,
      3,
      6,
      1,
      5,
      1,
      5,
      3,
      5,
      3,
      6,
      1,
      5,
      1,
      6,
      1
    ],
    [
      0,
      1,
      5,
      17,
      10,
      2,
      0,
      2,
      8,
      12,
      3,
      0,
      3,
      11,
      28,
      14,
      4,
      0,
      4,
      13,
      7,
      1,
      1,
      7,
      20,
      39,
      18,
      6,
      1,
      6,
      19,
      15,
      5,
      2,
      10,
      25,
      23,
      9,
      2,
      9,
      24,
      42,
      21,
      8,
      3,
      12,
      29,
      40,
      19,
      6,
      3,
      6,
      18,
      26,
      11,
      4,
      14,
      32,
      24,
      9,
      4,
      9,
      23,
      45,
      30,
      13,
      5,
      15,
      33,
      42,
      36,
      16,
      5,
      16,
      35,
      37,
      17,
      7,
      13,
      31,
      53,
      35,
      16,
      7,
      16,
      36,
      41,
      20,
      8,
      21,
      41,
      44,
      22,
      8,
      22,
      43,
      49,
      27,
      12,
      10,
      17,
      34,
      43,
      22,
      10,
      22,
      44,
      39,
      47,
      25,
      11,
      26,
      47,
      45,
      50,
      27,
      11,
      27,
      49,
      51,
      28,
      12,
      27,
      50,
      52,
      29,
      13,
      30,
      52,
      54,
      31,
      14,
      28,
      48,
      53,
      31,
      14,
      31,
      54,
      40,
      33,
      32,
      15,
      19,
      38,
      56,
      43,
      34,
      15,
      34,
      51,
      32,
      33,
      17,
      37,
      48,
      28,
      51,
      34,
      18,
      39,
      44,
      56,
      38,
      18,
      38,
      57,
      53,
      48,
      26,
      19,
      40,
      54,
      57,
      38,
      20,
      41,
      21,
      29,
      52,
      30,
      20,
      30,
      45,
      47,
      39,
      21,
      42,
      33,
      40,
      29,
      23,
      25,
      37,
      35,
      55,
      46,
      23,
      46,
      58,
      50,
      45,
      24,
      32,
      51,
      49,
      58,
      46,
      24,
      46,
      55,
      36,
      42,
      25,
      47,
      26,
      48,
      37,
      35,
      53,
      57,
      59,
      55,
      36,
      55,
      59,
      56,
      44,
      41,
      43,
      56,
      59,
      58,
      49,
      50,
      58,
      59,
      57,
      54,
      52
    ]
  ],
  [
    [
      45,
      120,
      44,
      180,
      3
    ],
    [
      3,
      5,
      3,
      3,
      1,
      5,
      1
    ],
    [
      1,
      10,
      3,
      6,
      1,
      10,
      1
    ],
    [
      0,
      1,
      0.4841229182759271,
      0.875,
      0.12730082850283717,
      0.46708617948135783,
      -0.4500494406867886,
      -0.17841104488654497,
      0.3122193285514537,
      0.8272542485937369,
      0.8174008140923762,
      0.5477457514062631,
      -0.19544778368111423,
      0.7557613140761708,
      0.625,
      0.5327475079679895,
      0.17841104488654497,
      -0.6941218140599652,
      -0.46708617948135783,
      -0.77279805287074,
      0.11026408970826791,
      0.4735936346434294,
      0.45225424859373686,
      -0.06566132848663167,
      0.9817627457812106,
      0.8725328589465102,
      0.14323725421878944,
      0.978775120184352,
      0.17274575140626314,
      -0.3122193285514537,
      0.9341723589627157,
      -0.6454972243679028,
      0.5773502691896257,
      0.5,
      0.15486685092990415,
      -0.11026408970826791,
      0.8660254037844386,
      -0.8660254037844386,
      -0.6389897692058313,
      -0.7557613140761708,
      -0.8174008140923762,
      -0.35682208977308993,
      0.35682208977308993,
      0.8068715304598785,
      0.125,
      0.3397853509785207,
      0.9340169943749475,
      -0.5157107691734203,
      0.8567627457812106,
      0.9998336874493474,
      0.018237254218789432,
      0.6284604855733336,
      -0.18401699437494742,
      -0.6900999855895391,
      0.6454972243679028,
      0.32725424859373686,
      -0.30901699437494745,
      -0.4841229182759271,
      -0.5773502691896257,
      0.8090169943749475,
      -0.017036738794569264,
      0.8214226425628024,
      -0.9827969486547781,
      0.047745751406263144,
      -0.30571187338938216,
      -0.9341723589627157,
      -0.7622687692382423,
      0.7622687692382423,
      -0.047745751406263144,
      0.006507455162071546,
      -0.3567627457812106,
      -0.125,
      0.29518258975688444,
      0.7612712429686843,
      -0.5603135303950565,
      0.6840169943749475,
      0.883062142579008,
      -0.4340169943749474,
      0.5116889407029941,
      -0.6362712429686843,
      0.800364075297807,
      0.4817627457812106,
      0.6900999855895391,
      -0.32725424859373686,
      -0.3397853509785207,
      -0.42248341825972163,
      -0.1338082836649087,
      -0.3503146346110184,
      0.443541985524717,
      0.9827969486547781,
      -0.8214226425628024,
      -0.9276649038006441,
      -0.6284604855733336,
      -0.0616395000162055,
      -0.45225424859373686,
      0.4340169943749474,
      -0.443541985524717,
      -0.4817627457812106,
      0.0616395000162055,
      -0.7612712429686843,
      0.3503146346110184,
      0.3567627457812106,
      0.1338082836649087,
      -0.15486685092990415,
      0.6362712429686843,
      -0.883062142579008,
      0.5603135303950565,
      -0.6840169943749475,
      0.6389897692058313,
      0.42248341825972163,
      0.9276649038006441,
      0.11026408970826793,
      -0.17274575140626314,
      -0.978775120184352,
      -0.800364075297807,
      0.30901699437494745,
      -0.29518258975688444,
      -0.5116889407029941,
      -0.00650745516207155,
      -0.5,
      -0.8090169943749475,
      -0.4735936346434294,
      -0.4522542485937369,
      0.77279805287074,
      -0.625,
      0.30571187338938216,
      0.18401699437494742,
      0.3090169943749474,
      -0.9998336874493474,
      -0.0182372542187894,
      0.5157107691734203,
      -0.8567627457812106,
      0.01703673879456926,
      -0.9340169943749475,
      0.195447783681114,
      -0.755761314076171,
      -0.5477457514062631,
      -0.8068715304598785,
      0.694121814059965,
      0.467086179481358,
      -0.547745751406263,
      -0.5327475079679895,
      -0.8272542485937369,
      -0.312219328551454,
      -0.46708617948136,
      -0.827254248593737,
      0.4500494406867886,
      -0.875,
      -0.14323725421878944,
      -0.9817627457812106,
      -0.87253285894651,
      -0.143237254218789,
      0.06566132848663167,
      -0.12730082850284,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      7,
      11,
      12,
      13,
      14,
      15,
      16,
      9,
      17,
      18,
      11,
      19,
      20,
      14,
      21,
      13,
      22,
      23,
      16,
      24,
      25,
      18,
      26,
      27,
      20,
      28,
      29,
      30,
      28,
      31,
      32,
      33,
      34,
      35,
      24,
      36,
      0,
      33,
      37,
      0,
      33,
      38,
      39,
      26,
      40,
      41,
      22,
      42,
      30,
      0,
      43,
      32,
      44,
      45,
      35,
      46,
      47,
      0,
      48,
      49,
      0,
      50,
      51,
      39,
      52,
      30,
      41,
      0,
      53,
      54,
      55,
      7,
      30,
      56,
      57,
      36,
      44,
      20,
      58,
      59,
      60,
      42,
      46,
      61,
      18,
      55,
      62,
      16,
      63,
      64,
      65,
      52,
      39,
      58,
      56,
      18,
      41,
      59,
      66,
      31,
      63,
      67,
      54,
      68,
      69,
      30,
      70,
      2,
      36,
      71,
      72,
      58,
      73,
      5,
      42,
      59,
      74,
      18,
      75,
      76,
      16,
      77,
      16,
      65,
      56,
      78,
      58,
      79,
      80,
      41,
      81,
      82,
      31,
      83,
      65,
      42,
      0,
      84,
      54,
      75,
      34,
      13,
      79,
      85,
      54,
      79,
      86,
      36,
      81,
      87,
      36,
      70,
      86,
      37,
      81,
      88,
      39,
      81,
      89,
      7,
      68,
      90,
      5,
      83,
      91,
      35,
      70,
      92,
      31,
      77,
      87,
      37,
      70,
      93,
      31,
      73,
      38,
      20,
      73,
      41,
      65,
      0,
      10,
      42,
      94,
      51,
      54,
      95,
      96,
      13,
      97,
      98,
      54,
      99,
      100,
      36,
      101,
      102,
      36,
      97,
      100,
      37,
      101,
      103,
      39,
      104,
      105,
      7,
      95,
      106,
      5,
      107,
      108,
      35,
      99,
      45,
      31,
      107,
      102,
      37,
      97,
      109,
      31,
      104,
      110,
      111,
      101,
      8,
      65,
      112,
      113,
      35,
      112,
      114,
      42,
      97,
      7,
      30,
      115,
      116,
      32,
      99,
      117,
      32,
      104,
      57,
      37,
      44,
      118,
      65,
      101,
      36,
      0,
      119,
      37,
      0,
      119,
      18,
      41,
      120,
      121,
      39,
      122,
      123,
      35,
      124,
      5,
      42,
      120,
      125,
      30,
      126,
      35,
      32,
      120,
      13,
      32,
      127,
      2,
      37,
      71,
      16,
      65,
      127,
      128,
      0,
      129,
      130,
      0,
      131,
      132,
      41,
      133,
      134,
      135,
      124,
      40,
      16,
      136,
      137,
      58,
      71,
      92,
      13,
      126,
      84,
      20,
      133,
      138,
      139,
      140,
      141,
      7,
      142,
      143,
      144,
      145,
      146,
      16,
      147,
      54,
      58,
      119,
      108,
      13,
      148,
      103,
      111,
      149,
      150,
      139,
      151,
      152,
      7,
      149,
      153,
      144,
      147,
      57,
      0,
      147,
      0,
      0,
      154
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      9,
      8,
      0,
      1,
      10,
      11,
      1,
      12,
      13,
      2,
      14,
      15,
      2,
      16,
      17,
      3,
      18,
      19,
      3,
      15,
      20,
      22,
      21,
      4,
      24,
      23,
      4,
      26,
      25,
      5,
      27,
      22,
      5,
      29,
      28,
      6,
      30,
      9,
      6,
      32,
      31,
      7,
      33,
      25,
      7,
      24,
      34,
      8,
      36,
      35,
      8,
      38,
      37,
      9,
      10,
      39,
      40,
      10,
      13,
      41,
      11,
      42,
      43,
      11,
      18,
      44,
      12,
      45,
      17,
      12,
      46,
      47,
      13,
      48,
      49,
      14,
      50,
      51,
      14,
      52,
      53,
      15,
      54,
      55,
      16,
      56,
      57,
      16,
      43,
      51,
      17,
      57,
      58,
      18,
      59,
      60,
      19,
      61,
      46,
      19,
      60,
      62,
      20,
      63,
      64,
      20,
      61,
      65,
      67,
      66,
      21,
      69,
      68,
      21,
      71,
      70,
      22,
      73,
      72,
      23,
      67,
      32,
      23,
      74,
      73,
      24,
      76,
      75,
      25,
      35,
      77,
      26,
      78,
      76,
      26,
      80,
      79,
      27,
      81,
      77,
      27,
      83,
      82,
      28,
      32,
      84,
      28,
      75,
      85,
      29,
      69,
      83,
      29,
      86,
      70,
      30,
      71,
      85,
      30,
      87,
      72,
      31,
      88,
      33,
      31,
      89,
      80,
      33,
      68,
      90,
      34,
      83,
      36,
      34,
      38,
      91,
      35,
      78,
      87,
      36,
      88,
      79,
      37,
      86,
      74,
      37,
      92,
      88,
      38,
      39,
      93,
      94,
      39,
      95,
      43,
      40,
      96,
      59,
      40,
      94,
      53,
      41,
      54,
      97,
      41,
      96,
      55,
      42,
      56,
      98,
      42,
      44,
      99,
      44,
      64,
      100,
      45,
      101,
      52,
      45,
      47,
      94,
      46,
      102,
      49,
      47,
      98,
      62,
      48,
      63,
      99,
      48,
      58,
      97,
      49,
      99,
      103,
      50,
      104,
      105,
      50,
      53,
      60,
      51,
      95,
      106,
      52,
      107,
      55,
      54,
      106,
      64,
      56,
      105,
      62,
      57,
      63,
      65,
      58,
      101,
      108,
      59,
      109,
      100,
      61,
      107,
      102,
      65,
      105,
      110,
      112,
      111,
      66,
      76,
      69,
      66,
      113,
      84,
      67,
      71,
      114,
      68,
      80,
      113,
      70,
      78,
      112,
      72,
      81,
      79,
      73,
      115,
      90,
      74,
      89,
      116,
      75,
      91,
      114,
      77,
      117,
      112,
      81,
      115,
      118,
      82,
      92,
      87,
      82,
      115,
      86,
      84,
      116,
      91,
      85,
      111,
      113,
      89,
      114,
      117,
      90,
      118,
      116,
      92,
      93,
      119,
      108,
      93,
      98,
      103,
      95,
      97,
      108,
      96,
      102,
      109,
      100,
      106,
      104,
      101,
      110,
      107,
      103,
      109,
      119,
      104,
      119,
      110,
      117,
      118,
      111
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      7,
      3,
      4,
      8,
      1,
      0,
      9,
      4,
      5,
      10,
      2,
      1,
      11,
      5,
      12,
      6,
      3,
      13,
      0,
      6,
      14,
      7,
      2,
      15,
      3,
      7,
      16,
      8,
      4,
      11,
      1,
      8,
      17,
      9,
      0,
      7,
      4,
      9,
      6,
      10,
      5,
      18,
      2,
      10,
      19,
      5,
      11,
      12,
      20,
      6,
      3,
      15,
      12,
      13,
      21,
      0,
      6,
      5,
      13,
      14,
      4,
      7,
      2,
      22,
      14,
      7,
      23,
      15,
      16,
      17,
      8,
      4,
      24,
      16,
      8,
      25,
      11,
      17,
      26,
      9,
      0,
      27,
      17,
      9,
      28,
      7,
      6,
      29,
      10,
      18,
      30,
      2,
      10,
      31,
      18,
      19,
      32,
      5,
      11,
      18,
      19,
      21,
      20,
      12,
      24,
      6,
      20,
      25,
      12,
      15,
      26,
      21,
      13,
      27,
      0,
      21,
      33,
      13,
      5,
      34,
      4,
      14,
      30,
      22,
      2,
      31,
      14,
      22,
      32,
      23,
      7,
      22,
      15,
      23,
      29,
      17,
      16,
      27,
      8,
      17,
      35,
      24,
      4,
      31,
      16,
      24,
      32,
      25,
      8,
      24,
      11,
      25,
      36,
      26,
      17,
      28,
      9,
      26,
      37,
      7,
      28,
      38,
      29,
      6,
      31,
      10,
      29,
      11,
      30,
      18,
      36,
      18,
      31,
      26,
      32,
      19,
      39,
      5,
      32,
      28,
      19,
      18,
      21,
      34,
      20,
      12,
      27,
      21,
      24,
      38,
      6,
      20,
      31,
      24,
      25,
      32,
      12,
      15,
      24,
      25,
      26,
      36,
      21,
      13,
      33,
      26,
      5,
      39,
      33,
      34,
      35,
      4,
      14,
      31,
      34,
      30,
      15,
      22,
      22,
      36,
      31,
      32,
      26,
      23,
      7,
      37,
      32,
      23,
      33,
      22,
      29,
      40,
      17,
      16,
      31,
      29,
      27,
      41,
      8,
      35,
      11,
      24,
      8,
      39,
      32,
      17,
      18,
      36,
      26,
      19,
      28,
      28,
      34,
      37,
      38,
      33,
      29,
      11,
      42,
      30,
      18,
      40,
      28,
      43,
      34,
      21,
      31,
      20,
      34,
      41,
      27,
      12,
      15,
      38,
      24,
      37,
      12,
      32,
      22,
      21,
      36,
      23,
      26,
      33,
      29,
      33,
      39,
      28,
      35,
      34,
      42,
      15,
      30,
      43,
      22,
      33,
      41,
      40,
      29,
      18,
      17,
      40,
      39,
      8,
      41,
      42,
      11,
      35,
      41,
      37,
      34,
      42,
      33,
      38,
      42,
      28,
      40,
      43,
      41,
      34,
      21,
      22,
      43,
      12,
      37,
      41,
      15,
      42,
      38,
      39,
      41,
      29,
      28,
      42,
      35,
      33,
      42,
      43,
      41,
      42,
      40,
      42,
      41,
      43
    ],
    [
      10,
      3,
      6,
      1,
      10,
      1,
      6,
      1,
      10,
      1,
      10,
      3,
      10,
      1,
      10,
      3,
      10,
      3,
      6,
      1,
      6,
      1,
      10,
      1,
      10,
      3,
      6,
      1,
      6,
      1,
      10,
      1,
      6,
      1,
      10,
      1,
      10,
      3,
      6,
      1,
      6,
      1,
      10,
      1,
      10,
      3,
      6,
      1,
      10,
      3,
      6,
      1,
      10,
      3,
      6,
      1,
      10,
      1,
      10,
      3,
      6,
      1,
      10,
      1,
      10,
      1,
      10,
      1,
      10,
      3,
      6,
      1,
      6,
      1,
      6,
      1,
      6,
      1,
      6,
      1,
      6,
      1,
      10,
      1,
      10,
      3,
      6,
      1
    ],
    [
      0,
      1,
      4,
      11,
      23,
      43,
      32,
      16,
      7,
      2,
      0,
      2,
      6,
      15,
      9,
      3,
      0,
      3,
      8,
      19,
      35,
      46,
      26,
      12,
      5,
      1,
      1,
      5,
      13,
      22,
      10,
      4,
      2,
      7,
      17,
      25,
      45,
      75,
      52,
      29,
      14,
      6,
      3,
      9,
      20,
      37,
      64,
      74,
      44,
      24,
      18,
      8,
      4,
      10,
      21,
      40,
      68,
      59,
      34,
      18,
      24,
      11,
      5,
      12,
      25,
      17,
      33,
      58,
      80,
      48,
      27,
      13,
      6,
      14,
      28,
      51,
      84,
      106,
      86,
      54,
      30,
      15,
      7,
      16,
      31,
      57,
      33,
      17,
      8,
      18,
      34,
      60,
      36,
      19,
      9,
      15,
      30,
      55,
      85,
      107,
      91,
      61,
      38,
      20,
      10,
      22,
      41,
      70,
      97,
      113,
      95,
      67,
      39,
      21,
      11,
      24,
      44,
      73,
      42,
      23,
      12,
      26,
      47,
      76,
      45,
      25,
      13,
      27,
      49,
      77,
      102,
      114,
      96,
      71,
      41,
      22,
      14,
      29,
      53,
      83,
      50,
      28,
      16,
      32,
      51,
      28,
      50,
      82,
      105,
      87,
      56,
      31,
      19,
      36,
      62,
      87,
      105,
      92,
      65,
      38,
      61,
      35,
      20,
      38,
      65,
      88,
      63,
      37,
      21,
      39,
      66,
      94,
      69,
      40,
      23,
      42,
      72,
      98,
      112,
      93,
      66,
      39,
      67,
      43,
      26,
      46,
      77,
      49,
      81,
      103,
      112,
      98,
      78,
      47,
      27,
      48,
      79,
      99,
      81,
      49,
      29,
      52,
      85,
      55,
      71,
      96,
      68,
      40,
      69,
      53,
      30,
      54,
      70,
      41,
      71,
      55,
      31,
      56,
      72,
      42,
      73,
      99,
      79,
      63,
      88,
      57,
      32,
      43,
      67,
      95,
      84,
      51,
      33,
      57,
      88,
      65,
      92,
      110,
      116,
      101,
      89,
      58,
      34,
      59,
      90,
      100,
      115,
      104,
      82,
      50,
      83,
      60,
      35,
      61,
      91,
      102,
      77,
      46,
      36,
      60,
      83,
      53,
      69,
      94,
      76,
      47,
      78,
      62,
      37,
      63,
      79,
      48,
      80,
      97,
      70,
      54,
      86,
      64,
      44,
      74,
      100,
      90,
      109,
      117,
      103,
      81,
      99,
      73,
      45,
      76,
      94,
      66,
      93,
      111,
      108,
      89,
      101,
      75,
      52,
      75,
      101,
      116,
      107,
      85,
      56,
      87,
      62,
      78,
      98,
      72,
      58,
      89,
      108,
      113,
      97,
      80,
      59,
      68,
      96,
      114,
      109,
      90,
      64,
      86,
      106,
      115,
      100,
      74,
      82,
      104,
      118,
      110,
      92,
      105,
      84,
      95,
      113,
      108,
      111,
      119,
      118,
      104,
      115,
      106,
      91,
      107,
      116,
      110,
      118,
      119,
      117,
      109,
      114,
      102,
      93,
      112,
      103,
      117,
      119,
      111
    ]
  ],
  [
    [
      46,
      60,
      104,
      180,
      6
    ],
    [
      0,
      5,
      3,
      3,
      1,
      5,
      1
    ],
    [
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.7952605037100042,
      0.6062678708614785,
      0.3001621965493887,
      0.7364386766891972,
      0.7055094405858808,
      0.3670091252343559,
      -0.07357645812270505,
      0.7918495902450209,
      -0.7610506655842459,
      0.2307404454682054,
      -0.5009236922090228,
      -0.6176687812612597,
      0.7858348327041259,
      -0.03080409654751224,
      0.943541459005963,
      -0.23767280442245112,
      0.9243781868310744,
      -0.31678624686240375,
      -0.21253574172295692,
      0.826910131525461,
      0.5559211095929438,
      -0.08468384904747167,
      0.05554122499836511,
      0.9755735394197372,
      -0.3193254687242773,
      0.18891198435858794,
      0.9286245243314013,
      0.5199990009805322,
      -0.08813500758956283,
      0.8496077091319476,
      -0.13586661711661022,
      0.5096145631129985,
      0.21764530437053217,
      -0.30047797639051216,
      0.8327355165738681,
      -0.45939168474104636,
      0.30904828009104984,
      -0.31704600526028676,
      0.9181467576517719,
      -0.8371873340172525,
      0.45122780093191195,
      -0.630041375330093,
      0.7719303796863225,
      -0.7338395292901775,
      -0.6049534740985745,
      -0.1585581577877504,
      -0.3354337541292373,
      -0.9468108730257444,
      0.08965674148100514,
      -0.773537021224814,
      -0.5874964806980624,
      -0.015251056054285473,
      -0.9994090818704424,
      0.2799588487273305,
      -0.759256826236458,
      0.03481160177552182,
      -0.9174921690438507,
      -0.3962275509414163,
      0.5102070354384675,
      -0.2920835591281775,
      -0.8089350873068288,
      0.31156743809172893,
      0.5713622347813143,
      0.8637423422885031,
      0.4265251131976857,
      0.26837565826593107,
      0.6801235098162374,
      -0.35830931616682127,
      0.6395673892118855,
      0.3474601539654786,
      -0.9361396763106842,
      0.0539809952039917,
      0.12225222242549344,
      0.82457368427876,
      -0.552388118361519,
      0.13854335412694846,
      0.9344550281236635,
      0.32802368731794085,
      0.6152755562255343,
      0.675095563029225,
      0.40704050251739443,
      0.7537879313423215,
      0.48099554348676543,
      -0.44771312434251326,
      -0.004331051461672045,
      0.4244359070023212,
      -0.9054476256749218,
      -0.7151305150548545,
      0.5758403201516422,
      -0.873284539994418,
      -0.2677538823567731,
      -0.14867822884230653,
      -0.6603643876543983,
      0.7360799275799784,
      0.5996272266249011,
      -0.7539374610274102,
      -0.1581038998481848,
      0.9824462227906295,
      0.09900796017098774,
      -0.2651930296227719,
      -0.8595294620174851,
      0.43690017276653514,
      0.08739958219891333,
      -0.9406177616810121,
      0.8765539540141993,
      -0.052643304592437476,
      -0.4784159781859932,
      -0.5218620448169575,
      0.2707102338356586,
      -0.797728511335251,
      0.24186068075622538,
      -0.91711545258915,
      -0.3949497420925671,
      -0.49327310163619065,
      0.46353855008625333,
      -0.5860128319337843,
      -0.5802507863643482,
      -0.5655952490363597,
      -0.32942492084113867,
      -0.8312834533540739,
      -0.8249774859413198,
      -0.3008825343988559,
      -0.21578226053410687,
      0.11790275014441633,
      -0.9692971461565201,
      0.7441167317819691,
      -0.40219543642628125,
      -0.5334127111346281,
      0.15829930331128017,
      -0.2824850577315999,
      -0.9461202475000405,
      0.4809752901568788,
      0.7416267118730688,
      -0.4676030266100151,
      -0.07051577348801523,
      -0.713967672659957,
      -0.6966187537569681,
      0.16102616541299714,
      0.0935730733730119,
      -0.9825042768313607,
      -0.8730256855179478,
      0.48322722719175154,
      -0.0657084418205807,
      -0.6757924583545653,
      -0.06612659083549995,
      -0.7341197635369637
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      11,
      3,
      12,
      13,
      3,
      14,
      13,
      15,
      16,
      11,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      20,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      31,
      34,
      35,
      28,
      36,
      37,
      38,
      39,
      40,
      17,
      41,
      42,
      38,
      43,
      44,
      23,
      45,
      46,
      38,
      47,
      48,
      28,
      49,
      50,
      38,
      51,
      52,
      17,
      53,
      54,
      15,
      55,
      52,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      56,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      89,
      90,
      59,
      91,
      92,
      82,
      93,
      94,
      95,
      96,
      97,
      67,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      79,
      106,
      107,
      108,
      109,
      110,
      62,
      111,
      112,
      76,
      113,
      114,
      73,
      115,
      116,
      95,
      117,
      118,
      119,
      120,
      121,
      85,
      122,
      123,
      108,
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147
    ],
    [
      1,
      2,
      3,
      4,
      5,
      6,
      0,
      7,
      8,
      9,
      10,
      2,
      0,
      1,
      10,
      11,
      12,
      13,
      0,
      14,
      15,
      16,
      8,
      4,
      0,
      3,
      17,
      18,
      19,
      5,
      0,
      4,
      19,
      20,
      21,
      6,
      0,
      5,
      12,
      22,
      23,
      24,
      1,
      24,
      25,
      26,
      27,
      8,
      1,
      7,
      27,
      28,
      3,
      16,
      1,
      29,
      30,
      31,
      25,
      10,
      1,
      9,
      32,
      33,
      11,
      2,
      2,
      10,
      34,
      35,
      36,
      37,
      2,
      22,
      6,
      38,
      39,
      13,
      2,
      12,
      39,
      40,
      34,
      14,
      3,
      13,
      34,
      41,
      18,
      15,
      3,
      14,
      42,
      40,
      43,
      16,
      3,
      15,
      43,
      44,
      29,
      8,
      4,
      28,
      45,
      36,
      46,
      18,
      4,
      17,
      46,
      47,
      14,
      41,
      4,
      48,
      33,
      32,
      45,
      5,
      5,
      49,
      24,
      50,
      43,
      21,
      5,
      20,
      43,
      30,
      48,
      38,
      6,
      12,
      37,
      51,
      46,
      23,
      6,
      22,
      46,
      26,
      42,
      24,
      6,
      23,
      20,
      49,
      25,
      7,
      7,
      24,
      49,
      52,
      9,
      31,
      7,
      53,
      40,
      42,
      23,
      27,
      7,
      26,
      36,
      35,
      28,
      8,
      8,
      27,
      44,
      54,
      45,
      17,
      9,
      16,
      44,
      55,
      33,
      30,
      9,
      29,
      21,
      43,
      39,
      31,
      9,
      30,
      39,
      56,
      53,
      25,
      10,
      52,
      37,
      45,
      19,
      33,
      10,
      32,
      19,
      48,
      29,
      55,
      11,
      55,
      41,
      14,
      13,
      35,
      11,
      34,
      53,
      57,
      27,
      36,
      11,
      35,
      27,
      46,
      17,
      37,
      11,
      36,
      32,
      52,
      51,
      22,
      12,
      21,
      48,
      58,
      51,
      39,
      12,
      38,
      31,
      30,
      40,
      13,
      13,
      39,
      15,
      42,
      26,
      53,
      14,
      34,
      55,
      58,
      48,
      18,
      15,
      47,
      50,
      23,
      26,
      40,
      15,
      30,
      21,
      20,
      50,
      16,
      16,
      54,
      28,
      57,
      55,
      29,
      17,
      28,
      54,
      49,
      19,
      32,
      17,
      36,
      23,
      22,
      47,
      18,
      18,
      46,
      58,
      59,
      50,
      42,
      19,
      41,
      58,
      38,
      21,
      33,
      20,
      45,
      54,
      52,
      25,
      24,
      20,
      42,
      47,
      59,
      54,
      43,
      22,
      37,
      52,
      56,
      38,
      58,
      25,
      49,
      56,
      51,
      37,
      32,
      26,
      31,
      56,
      57,
      35,
      40,
      28,
      44,
      50,
      59,
      49,
      45,
      29,
      44,
      57,
      41,
      34,
      33,
      31,
      51,
      52,
      59,
      57,
      53,
      35,
      53,
      56,
      59,
      55,
      44,
      38,
      48,
      41,
      59,
      47,
      51,
      47,
      58,
      57,
      56,
      54,
      50
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      5,
      6,
      7,
      8,
      9,
      0,
      0,
      9,
      10,
      11,
      12,
      1,
      1,
      13,
      14,
      15,
      16,
      2,
      2,
      16,
      17,
      18,
      19,
      3,
      3,
      19,
      20,
      21,
      22,
      4,
      4,
      22,
      23,
      24,
      25,
      5,
      5,
      26,
      27,
      28,
      29,
      6,
      6,
      29,
      30,
      16,
      15,
      7,
      7,
      31,
      32,
      33,
      34,
      8,
      8,
      34,
      35,
      36,
      10,
      9,
      10,
      36,
      37,
      38,
      39,
      11,
      11,
      23,
      22,
      40,
      41,
      12,
      12,
      41,
      42,
      43,
      44,
      1,
      1,
      44,
      45,
      46,
      47,
      13,
      13,
      47,
      48,
      49,
      50,
      14,
      14,
      50,
      51,
      52,
      7,
      15,
      16,
      53,
      54,
      55,
      56,
      17,
      17,
      56,
      57,
      47,
      46,
      18,
      18,
      58,
      59,
      60,
      20,
      19,
      20,
      61,
      62,
      63,
      64,
      21,
      21,
      64,
      65,
      66,
      67,
      22,
      23,
      11,
      68,
      69,
      70,
      24,
      24,
      70,
      71,
      72,
      62,
      25,
      25,
      62,
      61,
      73,
      26,
      5,
      26,
      73,
      74,
      34,
      33,
      27,
      27,
      75,
      76,
      72,
      71,
      28,
      28,
      71,
      77,
      78,
      30,
      29,
      30,
      78,
      79,
      80,
      53,
      16,
      7,
      52,
      81,
      82,
      66,
      31,
      31,
      66,
      65,
      49,
      83,
      32,
      32,
      83,
      84,
      85,
      27,
      33,
      34,
      86,
      54,
      60,
      59,
      35,
      35,
      59,
      58,
      66,
      82,
      36,
      36,
      87,
      45,
      44,
      43,
      37,
      37,
      43,
      88,
      78,
      77,
      38,
      38,
      77,
      71,
      55,
      54,
      39,
      39,
      54,
      86,
      89,
      68,
      11,
      22,
      67,
      90,
      91,
      84,
      40,
      40,
      84,
      83,
      49,
      42,
      41,
      42,
      49,
      48,
      76,
      75,
      43,
      45,
      87,
      92,
      93,
      18,
      46,
      47,
      94,
      62,
      72,
      76,
      48,
      49,
      65,
      64,
      63,
      51,
      50,
      51,
      79,
      78,
      95,
      81,
      52,
      53,
      80,
      96,
      20,
      60,
      54,
      55,
      71,
      70,
      69,
      57,
      56,
      57,
      69,
      97,
      98,
      94,
      47,
      18,
      93,
      90,
      67,
      66,
      58,
      20,
      96,
      99,
      74,
      73,
      61,
      62,
      94,
      98,
      100,
      51,
      63,
      68,
      89,
      101,
      84,
      91,
      69,
      74,
      99,
      101,
      89,
      86,
      34,
      27,
      85,
      102,
      88,
      43,
      75,
      79,
      51,
      100,
      99,
      96,
      80,
      81,
      95,
      92,
      87,
      36,
      82,
      84,
      101,
      99,
      103,
      102,
      85,
      88,
      102,
      103,
      92,
      95,
      78,
      90,
      93,
      92,
      97,
      69,
      91,
      97,
      92,
      103,
      99,
      100,
      98
    ],
    [
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      13,
      14,
      3,
      0,
      3,
      4,
      0,
      4,
      5,
      0,
      5,
      6,
      0,
      6,
      24,
      7,
      1,
      1,
      7,
      8,
      1,
      8,
      16,
      29,
      9,
      1,
      9,
      10,
      1,
      10,
      2,
      2,
      10,
      11,
      2,
      11,
      37,
      22,
      12,
      2,
      12,
      13,
      3,
      14,
      15,
      3,
      15,
      16,
      3,
      16,
      8,
      3,
      8,
      28,
      17,
      4,
      4,
      17,
      18,
      4,
      18,
      41,
      48,
      19,
      4,
      19,
      5,
      5,
      19,
      45,
      49,
      20,
      5,
      20,
      21,
      5,
      21,
      38,
      12,
      6,
      6,
      12,
      22,
      6,
      22,
      23,
      6,
      23,
      24,
      7,
      24,
      25,
      7,
      25,
      31,
      53,
      26,
      7,
      26,
      27,
      7,
      27,
      8,
      8,
      27,
      28,
      9,
      29,
      30,
      9,
      30,
      31,
      9,
      31,
      25,
      9,
      25,
      52,
      32,
      10,
      10,
      32,
      33,
      10,
      33,
      55,
      34,
      11,
      11,
      34,
      35,
      11,
      35,
      36,
      11,
      36,
      37,
      12,
      38,
      39,
      12,
      39,
      13,
      13,
      39,
      40,
      13,
      40,
      53,
      35,
      34,
      13,
      34,
      14,
      14,
      34,
      41,
      14,
      41,
      18,
      14,
      18,
      47,
      42,
      15,
      15,
      42,
      40,
      15,
      40,
      39,
      30,
      43,
      15,
      43,
      16,
      16,
      43,
      50,
      54,
      44,
      16,
      44,
      29,
      17,
      28,
      45,
      17,
      45,
      32,
      37,
      36,
      17,
      36,
      46,
      17,
      46,
      18,
      18,
      46,
      47,
      19,
      48,
      33,
      19,
      33,
      32,
      19,
      32,
      45,
      20,
      49,
      24,
      20,
      24,
      23,
      42,
      50,
      20,
      50,
      43,
      20,
      43,
      21,
      21,
      43,
      30,
      21,
      30,
      29,
      33,
      48,
      21,
      48,
      38,
      22,
      37,
      51,
      22,
      51,
      58,
      47,
      46,
      22,
      46,
      23,
      23,
      46,
      36,
      27,
      26,
      23,
      26,
      42,
      24,
      49,
      25,
      25,
      49,
      52,
      26,
      53,
      40,
      26,
      40,
      42,
      27,
      36,
      35,
      27,
      35,
      57,
      44,
      28,
      28,
      44,
      54,
      28,
      54,
      45,
      29,
      44,
      55,
      29,
      55,
      33,
      30,
      39,
      31,
      31,
      39,
      38,
      51,
      56,
      31,
      56,
      53,
      32,
      52,
      37,
      34,
      55,
      41,
      35,
      53,
      57,
      37,
      52,
      51,
      38,
      48,
      58,
      38,
      58,
      51,
      41,
      55,
      57,
      59,
      58,
      41,
      58,
      48,
      42,
      47,
      50,
      44,
      57,
      55,
      45,
      54,
      49,
      47,
      58,
      59,
      47,
      59,
      50,
      49,
      54,
      59,
      56,
      52,
      50,
      59,
      54,
      51,
      52,
      56,
      53,
      56,
      57,
      56,
      59,
      57
    ]
  ],
  [
    [
      47,
      20,
      32,
      60,
      6
    ],
    [
      1,
      3,
      2,
      3,
      1,
      5,
      1
    ],
    [
      2,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.9428090415820634,
      0.3333333333333333,
      0.23570226039551584,
      0.9128709291752769,
      -0.4714045207910317,
      -0.816496580927726,
      0.6727182848443369,
      -0.66055960981957,
      0.816496580927726,
      -0.9084205452398527,
      -0.25231131935570694,
      0.4714045207910317,
      -0.3333333333333333,
      0.09003025224590881,
      0.7453559924999299,
      0.6170765289406387,
      -0.7453559924999299,
      -0.09003025224590881,
      0.66055960981957,
      0.9084205452398527,
      0.25231131935570694,
      -0.6170765289406387,
      -0.6727182848443369,
      -0.9428090415820634,
      -0.5270462766947299,
      -0.408248290463863,
      -0.23570226039551584,
      -0.9128709291752769,
      0.5270462766947299,
      0.408248290463863,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      6,
      10,
      3,
      11,
      12,
      3,
      13,
      7,
      14,
      15,
      9,
      16,
      13,
      10,
      14,
      17,
      12,
      18,
      19,
      20,
      18,
      21,
      22,
      14,
      23,
      22,
      16,
      24,
      20,
      14,
      25,
      0,
      14,
      26,
      27,
      18,
      28,
      29,
      14,
      30,
      31,
      16,
      0,
      0,
      32
    ],
    [
      1,
      2,
      3,
      4,
      5,
      6,
      10,
      9,
      8,
      7,
      2,
      0,
      1,
      14,
      13,
      12,
      11,
      0,
      16,
      7,
      13,
      15,
      4,
      0,
      3,
      12,
      18,
      17,
      10,
      0,
      11,
      15,
      18,
      9,
      6,
      0,
      5,
      17,
      8,
      14,
      16,
      0,
      1,
      8,
      19,
      12,
      3,
      16,
      1,
      6,
      17,
      18,
      13,
      7,
      1,
      10,
      5,
      18,
      19,
      14,
      1,
      16,
      11,
      4,
      17,
      9,
      2,
      12,
      15,
      5,
      10,
      16,
      2,
      7,
      19,
      18,
      4,
      11,
      2,
      14,
      8,
      18,
      15,
      3,
      2,
      16,
      6,
      9,
      19,
      13,
      3,
      13,
      19,
      17,
      5,
      11,
      3,
      11,
      10,
      6,
      14,
      7,
      4,
      15,
      19,
      8,
      6,
      10,
      4,
      12,
      13,
      8,
      9,
      5,
      14,
      9,
      17,
      15,
      12,
      7
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      0,
      5,
      9,
      10,
      11,
      12,
      1,
      0,
      13,
      11,
      14,
      15,
      2,
      1,
      15,
      16,
      17,
      18,
      3,
      2,
      19,
      17,
      20,
      21,
      4,
      3,
      21,
      22,
      7,
      23,
      5,
      4,
      8,
      24,
      25,
      11,
      13,
      9,
      7,
      22,
      26,
      27,
      24,
      8,
      6,
      21,
      20,
      26,
      28,
      7,
      5,
      29,
      3,
      18,
      21,
      6,
      12,
      15,
      19,
      3,
      29,
      1,
      11,
      25,
      30,
      16,
      15,
      12,
      10,
      24,
      27,
      30,
      14,
      11,
      9,
      23,
      7,
      28,
      24,
      10,
      14,
      30,
      31,
      17,
      19,
      15,
      1,
      29,
      5,
      23,
      9,
      13,
      17,
      31,
      26,
      22,
      21,
      18,
      16,
      30,
      27,
      26,
      20,
      17,
      28,
      26,
      31,
      30,
      25,
      24
    ],
    [
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      11,
      16,
      3,
      0,
      3,
      4,
      0,
      4,
      10,
      11,
      5,
      0,
      5,
      6,
      0,
      6,
      16,
      10,
      1,
      1,
      10,
      9,
      1,
      9,
      14,
      6,
      8,
      1,
      8,
      7,
      1,
      7,
      16,
      14,
      2,
      2,
      14,
      13,
      2,
      13,
      3,
      7,
      12,
      2,
      12,
      11,
      3,
      16,
      7,
      3,
      13,
      15,
      3,
      15,
      11,
      12,
      4,
      4,
      12,
      18,
      4,
      18,
      5,
      15,
      17,
      4,
      17,
      10,
      5,
      11,
      15,
      5,
      18,
      9,
      5,
      9,
      10,
      17,
      6,
      6,
      17,
      8,
      6,
      14,
      16,
      7,
      8,
      13,
      14,
      19,
      7,
      19,
      12,
      8,
      17,
      19,
      9,
      18,
      8,
      18,
      13,
      9,
      19,
      14,
      10,
      16,
      11,
      12,
      19,
      15,
      13,
      18,
      15,
      19,
      17
    ]
  ],
  [
    [
      48,
      60,
      52,
      120,
      4
    ],
    [
      2,
      3,
      2,
      5,
      1,
      3,
      1
    ],
    [
      1,
      6,
      1,
      3,
      2,
      6,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.7913673486983457,
      0.6113409191393546,
      -0.6820030708669234,
      0.4014151117159585,
      0.1126514014248428,
      0.7833083315929099,
      -0.4944105967818434,
      -0.6179162098340442,
      0.9007316265297681,
      -0.1659772425819362,
      0.41492683104072103,
      0.4628863602868818,
      0.7860486709989698,
      -0.01752268372946338,
      -0.7549125894212049,
      -0.46458928075638417,
      -0.5726387930355009,
      0.802830223431917,
      -0.26910779393215783,
      0.9487004533517756,
      0.8343963551623274,
      0.2991971589975185,
      -0.008605801292796323,
      -0.9998094297109955,
      -0.8708511144394682,
      0.16539212175886567,
      -0.876169792138844,
      -0.4525240880751785,
      0.8278221079754865,
      -0.314431801434409,
      0.21872855566284477,
      -0.5546363234425816,
      0.03316763568372039,
      -0.14378748300260769,
      0.943295404303227,
      0.8987000724238126,
      -0.4061817645901088,
      0.40428947564196915,
      -0.7948408454507542,
      -0.6906088721597197,
      -0.598394317995037,
      -0.027848957984344475,
      -0.33078424351773134,
      -0.03316763568372039,
      -0.9487004533517756,
      0.314431801434409,
      0.1544248384013595,
      0.9366352606705699,
      -0.5779574707348768,
      0.18491401359787285,
      0.21669700155688928,
      0.5668072334748242,
      -0.8278221079754865,
      0.46458928075638417,
      -0.7635183907140013,
      0.33078424351773134,
      0.7614868366080457,
      -0.5668072334748242,
      0.27568204111899863,
      -0.18491401359787285,
      0.10075847653862607,
      -0.7614868366080457,
      -0.1544248384013595,
      -0.9366352606705699,
      0.7635183907140013,
      0.5546363234425816,
      0.26910779393215783,
      0.1659772425819362,
      -0.27568204111899863,
      -0.943295404303227,
      0.7549125894212049,
      -0.4628863602868818,
      0.027848957984344475,
      -0.21669700155688928,
      0.7948408454507542,
      0.5779574707348768,
      -0.40428947564196915,
      0.4525240880751785,
      -0.41492683104072103,
      -0.7833083315929099,
      0.876169792138844,
      0.14378748300260769,
      -0.2991971589975185,
      -0.10075847653862607,
      0.598394317995037,
      -0.9007316265297681,
      -0.4014151117159585,
      0.8708511144394682,
      -0.16539212175886567,
      -0.21872855566284477,
      -0.802830223431917,
      -0.8343963551623274,
      0.5726387930355009,
      -0.1126514014248428,
      -0.6113409191393546,
      0.6906088721597197,
      0.4061817645901088,
      0.6820030708669234,
      -0.8987000724238126,
      -0.7860486709989698,
      0.6179162098340442,
      0.01752268372946338,
      -0.7913673486983457,
      0.4944105967818434,
      0.008605801292796323,
      0.9998094297109955,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      9,
      15,
      16,
      17,
      13,
      18,
      19,
      11,
      20,
      21,
      11,
      22,
      23,
      13,
      24,
      25,
      15,
      26,
      27,
      13,
      28,
      29,
      11,
      30,
      17,
      31,
      32,
      19,
      33,
      34,
      21,
      31,
      35,
      23,
      36,
      37,
      27,
      38,
      39,
      29,
      40,
      41,
      42,
      38,
      43,
      44,
      36,
      45,
      46,
      47,
      48,
      49,
      47,
      50,
      51,
      40,
      52,
      53,
      40,
      54,
      55,
      47,
      56,
      57,
      33,
      58,
      59,
      47,
      60,
      61,
      36,
      62,
      42,
      40,
      63,
      53,
      31,
      64,
      65,
      31,
      66,
      44,
      67,
      68,
      46,
      69,
      70,
      51,
      71,
      72,
      55,
      73,
      74,
      57,
      71,
      75,
      59,
      76,
      77,
      61,
      76,
      78,
      79,
      76,
      80,
      81,
      73,
      82,
      79,
      69,
      83,
      84,
      71,
      85,
      86,
      76,
      87,
      88,
      69,
      89,
      90,
      73,
      91,
      92,
      67,
      93,
      84,
      73,
      94,
      92,
      69,
      95,
      81,
      96,
      97,
      86,
      98,
      99,
      88,
      96,
      100,
      90,
      98,
      101,
      102,
      103,
      104,
      0,
      96,
      105,
      102,
      96,
      106,
      107,
      103,
      0,
      0,
      108
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      9,
      8,
      3,
      0,
      2,
      11,
      10,
      0,
      14,
      13,
      12,
      0,
      1,
      6,
      15,
      16,
      1,
      17,
      18,
      5,
      1,
      12,
      19,
      20,
      2,
      21,
      22,
      23,
      2,
      16,
      24,
      25,
      3,
      26,
      27,
      28,
      3,
      29,
      30,
      19,
      4,
      31,
      21,
      7,
      4,
      14,
      18,
      32,
      4,
      28,
      33,
      13,
      35,
      34,
      31,
      5,
      36,
      24,
      9,
      5,
      38,
      37,
      32,
      6,
      13,
      40,
      39,
      6,
      26,
      11,
      20,
      7,
      19,
      33,
      38,
      7,
      25,
      12,
      31,
      8,
      34,
      41,
      23,
      8,
      22,
      42,
      29,
      8,
      16,
      41,
      43,
      9,
      44,
      26,
      21,
      9,
      19,
      25,
      44,
      10,
      46,
      45,
      28,
      10,
      27,
      38,
      14,
      10,
      23,
      47,
      30,
      11,
      29,
      45,
      48,
      11,
      36,
      15,
      21,
      12,
      17,
      49,
      36,
      13,
      20,
      48,
      50,
      14,
      15,
      35,
      43,
      22,
      15,
      39,
      51,
      34,
      16,
      31,
      32,
      49,
      17,
      38,
      52,
      53,
      17,
      20,
      28,
      37,
      18,
      40,
      54,
      35,
      18,
      50,
      52,
      39,
      22,
      24,
      54,
      55,
      23,
      56,
      46,
      44,
      24,
      34,
      57,
      47,
      25,
      47,
      42,
      26,
      27,
      30,
      58,
      52,
      27,
      42,
      56,
      48,
      29,
      44,
      43,
      57,
      30,
      46,
      50,
      33,
      32,
      51,
      54,
      36,
      33,
      48,
      53,
      40,
      49,
      53,
      59,
      35,
      45,
      58,
      40,
      37,
      50,
      59,
      51,
      37,
      55,
      41,
      49,
      39,
      54,
      58,
      56,
      41,
      55,
      59,
      46,
      42,
      59,
      58,
      47,
      43,
      57,
      55,
      52,
      45,
      51,
      53,
      56,
      57
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      10,
      3,
      2,
      5,
      11,
      12,
      0,
      4,
      13,
      11,
      5,
      3,
      14,
      15,
      4,
      6,
      16,
      17,
      7,
      0,
      18,
      19,
      6,
      8,
      20,
      21,
      2,
      7,
      22,
      23,
      8,
      10,
      24,
      14,
      3,
      9,
      25,
      13,
      10,
      2,
      26,
      25,
      9,
      27,
      16,
      12,
      11,
      28,
      18,
      0,
      12,
      29,
      30,
      13,
      4,
      25,
      31,
      11,
      13,
      8,
      23,
      15,
      14,
      23,
      26,
      4,
      15,
      14,
      24,
      16,
      6,
      32,
      33,
      17,
      16,
      33,
      34,
      7,
      17,
      28,
      32,
      19,
      18,
      35,
      14,
      6,
      19,
      14,
      35,
      20,
      8,
      36,
      37,
      21,
      20,
      37,
      26,
      2,
      21,
      34,
      38,
      22,
      7,
      38,
      36,
      23,
      22,
      12,
      16,
      24,
      10,
      30,
      39,
      10,
      13,
      23,
      40,
      25,
      26,
      27,
      41,
      32,
      16,
      11,
      42,
      41,
      27,
      12,
      10,
      39,
      28,
      29,
      37,
      43,
      30,
      4,
      26,
      37,
      29,
      31,
      44,
      42,
      11,
      25,
      43,
      44,
      31,
      32,
      28,
      45,
      33,
      33,
      46,
      20,
      34,
      32,
      41,
      47,
      19,
      19,
      34,
      20,
      35,
      36,
      38,
      48,
      37,
      20,
      46,
      49,
      36,
      34,
      19,
      47,
      38,
      36,
      49,
      40,
      23,
      30,
      42,
      28,
      39,
      40,
      49,
      43,
      25,
      30,
      50,
      41,
      42,
      48,
      44,
      43,
      37,
      49,
      50,
      30,
      43,
      45,
      28,
      42,
      44,
      44,
      51,
      33,
      45,
      51,
      49,
      46,
      33,
      51,
      38,
      47,
      41,
      51,
      44,
      48,
      38,
      50,
      49,
      51,
      41
    ],
    [
      6,
      1,
      3,
      2,
      6,
      1,
      5,
      1,
      6,
      1,
      3,
      2,
      5,
      1,
      6,
      1,
      5,
      1,
      3,
      2,
      6,
      1,
      6,
      1,
      5,
      1,
      5,
      1,
      6,
      1,
      3,
      2,
      6,
      1,
      3,
      2,
      3,
      2,
      6,
      1,
      6,
      1,
      3,
      2,
      3,
      2,
      6,
      1,
      3,
      2,
      6,
      1,
      5,
      1,
      3,
      2,
      6,
      1,
      3,
      2,
      6,
      1,
      3,
      2,
      5,
      1,
      6,
      1,
      5,
      1,
      3,
      2,
      5,
      1,
      6,
      1,
      6,
      1,
      3,
      2,
      3,
      2,
      6,
      1,
      5,
      1,
      5,
      1,
      6,
      1,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      6,
      1,
      3,
      2,
      5,
      1
    ],
    [
      0,
      1,
      5,
      16,
      9,
      2,
      0,
      2,
      3,
      0,
      3,
      10,
      28,
      14,
      4,
      0,
      4,
      12,
      7,
      1,
      1,
      7,
      20,
      38,
      17,
      6,
      1,
      6,
      5,
      2,
      9,
      25,
      21,
      8,
      2,
      8,
      23,
      29,
      11,
      3,
      3,
      11,
      19,
      26,
      10,
      4,
      14,
      13,
      4,
      13,
      32,
      36,
      31,
      12,
      5,
      6,
      18,
      39,
      35,
      15,
      5,
      15,
      31,
      36,
      16,
      6,
      17,
      32,
      13,
      18,
      7,
      12,
      21,
      25,
      26,
      19,
      7,
      19,
      20,
      8,
      21,
      31,
      15,
      34,
      22,
      8,
      22,
      23,
      9,
      16,
      24,
      9,
      24,
      43,
      47,
      44,
      25,
      10,
      26,
      44,
      42,
      46,
      27,
      10,
      27,
      28,
      11,
      29,
      30,
      11,
      30,
      48,
      33,
      20,
      19,
      12,
      31,
      21,
      13,
      14,
      33,
      50,
      40,
      18,
      14,
      28,
      38,
      20,
      33,
      15,
      35,
      34,
      16,
      36,
      49,
      54,
      41,
      24,
      17,
      38,
      37,
      17,
      37,
      53,
      51,
      49,
      32,
      18,
      40,
      39,
      22,
      34,
      43,
      24,
      41,
      22,
      41,
      55,
      56,
      42,
      23,
      23,
      42,
      44,
      47,
      29,
      25,
      44,
      26,
      27,
      46,
      48,
      30,
      45,
      27,
      45,
      52,
      37,
      38,
      28,
      29,
      47,
      57,
      58,
      45,
      30,
      32,
      49,
      36,
      33,
      48,
      50,
      34,
      35,
      51,
      59,
      57,
      43,
      35,
      39,
      54,
      49,
      51,
      37,
      52,
      40,
      50,
      53,
      39,
      40,
      52,
      58,
      55,
      54,
      41,
      54,
      55,
      42,
      56,
      46,
      43,
      57,
      47,
      45,
      58,
      52,
      46,
      56,
      59,
      53,
      50,
      48,
      51,
      53,
      59,
      55,
      58,
      57,
      59,
      56
    ]
  ],
  [
    [
      49,
      30,
      26,
      60,
      4
    ],
    [
      2,
      3,
      2,
      3,
      1,
      5,
      1
    ],
    [
      1,
      10,
      1,
      3,
      2,
      10,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.5877852522924731,
      0.8090169943749475,
      -0.5877852522924731,
      -0.2628655560595668,
      0.5257311121191336,
      0.2628655560595668,
      -0.5257311121191336,
      0.9510565162951535,
      0.30901699437494745,
      0.6881909602355868,
      0.5,
      -0.6881909602355868,
      -0.9510565162951535,
      -0.42532540417602,
      0.8506508083520399,
      0.16245984811645317,
      -0.16245984811645317,
      -0.8506508083520399,
      0.42532540417602,
      -0.30901699437494745,
      -0.8090169943749475,
      -0.5,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      0,
      3,
      5,
      6,
      3,
      7,
      8,
      3,
      9,
      0,
      10,
      11,
      6,
      12,
      13,
      8,
      12,
      14,
      0,
      10,
      15,
      16,
      10,
      17,
      16,
      12,
      18,
      19,
      12,
      20,
      19,
      10,
      16,
      8,
      0,
      9,
      0,
      21,
      6,
      16,
      0,
      8,
      19,
      0,
      14,
      0,
      21,
      19,
      6,
      0,
      15,
      16,
      21,
      20,
      19,
      21,
      2,
      0,
      22,
      11,
      6,
      23,
      17,
      16,
      23,
      18,
      19,
      23,
      13,
      8,
      23,
      4,
      0,
      22,
      5,
      6,
      22,
      7,
      8,
      22,
      0,
      0,
      24
    ],
    [
      1,
      2,
      3,
      4,
      4,
      6,
      5,
      0,
      8,
      7,
      3,
      0,
      2,
      10,
      9,
      0,
      12,
      11,
      1,
      0,
      1,
      6,
      13,
      14,
      1,
      15,
      10,
      5,
      2,
      8,
      11,
      16,
      2,
      17,
      18,
      7,
      3,
      10,
      18,
      19,
      3,
      15,
      6,
      9,
      4,
      12,
      7,
      16,
      4,
      20,
      13,
      11,
      20,
      12,
      14,
      5,
      13,
      22,
      21,
      5,
      23,
      22,
      10,
      6,
      11,
      25,
      24,
      7,
      26,
      25,
      18,
      8,
      17,
      9,
      19,
      8,
      18,
      23,
      27,
      9,
      28,
      24,
      13,
      12,
      14,
      22,
      28,
      29,
      14,
      23,
      15,
      21,
      15,
      27,
      19,
      22,
      16,
      25,
      20,
      28,
      16,
      26,
      17,
      24,
      17,
      29,
      27,
      25,
      19,
      23,
      26,
      29,
      20,
      29,
      21,
      24,
      28,
      27,
      26,
      21
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      4,
      3,
      2,
      5,
      10,
      11,
      0,
      4,
      12,
      10,
      5,
      6,
      13,
      14,
      7,
      0,
      15,
      13,
      6,
      8,
      10,
      16,
      2,
      7,
      12,
      10,
      8,
      9,
      13,
      14,
      4,
      2,
      17,
      13,
      9,
      17,
      13,
      11,
      10,
      13,
      18,
      0,
      11,
      19,
      7,
      12,
      4,
      4,
      20,
      7,
      14,
      21,
      10,
      15,
      0,
      10,
      16,
      13,
      15,
      13,
      22,
      2,
      16,
      23,
      10,
      17,
      2,
      18,
      7,
      24,
      0,
      13,
      19,
      7,
      18,
      4,
      22,
      13,
      19,
      20,
      10,
      23,
      7,
      4,
      21,
      10,
      20,
      0,
      25,
      4,
      21,
      22,
      4,
      25,
      2,
      2,
      24,
      7,
      23,
      2,
      25,
      0,
      24
    ],
    [
      10,
      1,
      3,
      2,
      10,
      1,
      3,
      1,
      10,
      1,
      3,
      2,
      3,
      1,
      10,
      1,
      3,
      1,
      3,
      2,
      10,
      1,
      3,
      1,
      3,
      1,
      10,
      1,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2
    ],
    [
      0,
      1,
      5,
      14,
      21,
      29,
      26,
      17,
      8,
      2,
      0,
      2,
      3,
      0,
      3,
      9,
      19,
      27,
      29,
      28,
      20,
      12,
      4,
      0,
      4,
      1,
      1,
      4,
      11,
      16,
      25,
      26,
      27,
      23,
      15,
      6,
      1,
      6,
      5,
      2,
      8,
      7,
      2,
      7,
      16,
      24,
      28,
      21,
      22,
      15,
      10,
      3,
      3,
      10,
      9,
      4,
      12,
      11,
      5,
      6,
      10,
      9,
      18,
      17,
      25,
      24,
      20,
      13,
      5,
      13,
      14,
      6,
      15,
      10,
      7,
      8,
      18,
      19,
      23,
      22,
      14,
      13,
      12,
      11,
      7,
      11,
      16,
      8,
      17,
      18,
      9,
      18,
      19,
      12,
      20,
      13,
      14,
      22,
      21,
      15,
      23,
      22,
      16,
      25,
      24,
      17,
      26,
      25,
      19,
      23,
      27,
      20,
      28,
      24,
      21,
      28,
      29,
      26,
      29,
      27
    ]
  ],
  [
    [
      50,
      60,
      32,
      120,
      4
    ],
    [
      4,
      3,
      1,
      5,
      1,
      3,
      2,
      5,
      4
    ],
    [
      1,
      10,
      1,
      6,
      1,
      10,
      9,
      6,
      5
    ],
    [
      0,
      1,
      0.5558508647159268,
      0.8312820316803176,
      -0.5423346066791824,
      0.1218333214009208,
      0.2523198656125837,
      -0.4952826155062292,
      -0.35474213259410253,
      0.4279348118207162,
      0.9129018498231336,
      0.38957265610656083,
      0.756959596837751,
      0.49384609504095256,
      -0.8323493477457812,
      -0.25161597270438757,
      -0.019560912391062047,
      0.3526376782326571,
      0.9355554706147092,
      -0.8639995688454785,
      0.31896377638990064,
      0.3058398516164474,
      -0.8687319096115376,
      -0.03769487545401502,
      -0.15363340047227825,
      0.8558696236414324,
      -0.32309191149440514,
      -0.14264493727357205,
      -0.6764070947603986,
      0.625065266809696,
      0.9664218358269974,
      -0.05213671946719588,
      0.5362899523248648,
      0.7668375022950268,
      0.9347716147273,
      -0.15641015840158762,
      0.40221746424364857,
      0.3251281267212701,
      0.7886098179374484,
      0.5981195339753443,
      0.7788293617419174,
      -0.7788293617419174,
      -0.625065266809696,
      0.05213671946719588,
      -0.5800294821331975,
      -0.7468985882106168,
      0.18154781973076223,
      0.7805724900533733,
      -0.8421298039413122,
      0.5160942313788804,
      -0.6628908367236542,
      0.7468985882106168,
      0.6628908367236542,
      -0.07077204588182145,
      -0.6379275527798013,
      0.14011714243553386,
      -0.9777029450423531,
      0.48507881883410536,
      -0.2034175846349286,
      0.2034175846349286,
      0.9777029450423531,
      -0.6131066525610038,
      -0.5160942313788804,
      -0.9664218358269974,
      0.25161597270438757,
      0.6764070947603986,
      -0.38957265610656083,
      0.6131066525610038,
      -0.5981195339753443,
      0.5800294821331975,
      -0.3251281267212701,
      -0.14011714243553386,
      0.15641015840158762,
      0.8421298039413122,
      0.8323493477457812,
      -0.49384609504095256,
      -0.756959596837751,
      -0.4279348118207162,
      -0.40221746424364857,
      -0.8558696236414324,
      -0.9347716147273,
      -0.31896377638990064,
      -0.7886098179374484,
      0.14264493727357205,
      -0.48507881883410536,
      0.6379275527798013,
      -0.3058398516164474,
      0.8687319096115376,
      0.8639995688454785,
      -0.18154781973076223,
      -0.7805724900533733,
      0.15363340047227825,
      0.03769487545401502,
      -0.9129018498231336,
      -0.1218333214009208,
      0.35474213259410253,
      -0.8312820316803176,
      0.32309191149440514,
      -0.9355554706147092,
      0.07077204588182145,
      -0.7668375022950268,
      0.5423346066791824,
      -0.8312820316803174,
      -0.5558508647159268,
      -0.5362899523248648,
      -0.3526376782326571,
      -0.2523198656125837,
      0.495282615506229,
      -0.831282031680318,
      0.019560912391062047,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      9,
      13,
      14,
      15,
      13,
      16,
      17,
      18,
      19,
      20,
      11,
      21,
      22,
      11,
      23,
      22,
      13,
      24,
      25,
      13,
      26,
      27,
      18,
      28,
      29,
      11,
      30,
      15,
      31,
      32,
      17,
      33,
      34,
      20,
      35,
      36,
      25,
      37,
      38,
      27,
      39,
      40,
      29,
      31,
      41,
      42,
      43,
      44,
      45,
      37,
      46,
      47,
      39,
      48,
      49,
      35,
      50,
      51,
      43,
      52,
      45,
      31,
      53,
      54,
      33,
      55,
      56,
      35,
      57,
      54,
      39,
      58,
      56,
      31,
      59,
      60,
      43,
      61,
      62,
      39,
      63,
      64,
      43,
      65,
      42,
      66,
      67,
      49,
      68,
      69,
      51,
      70,
      71,
      60,
      72,
      73,
      62,
      72,
      74,
      64,
      75,
      76,
      77,
      75,
      78,
      79,
      70,
      80,
      81,
      72,
      82,
      83,
      68,
      84,
      85,
      68,
      86,
      87,
      66,
      88,
      81,
      66,
      89,
      90,
      68,
      91,
      79,
      75,
      92,
      87,
      75,
      93,
      94,
      66,
      95,
      77,
      96,
      97,
      83,
      98,
      99,
      85,
      100,
      101,
      94,
      102,
      103,
      0,
      96,
      104,
      105,
      100,
      106,
      107,
      108,
      109,
      105,
      98,
      0,
      0,
      110
    ],
    [
      1,
      2,
      3,
      4,
      6,
      3,
      5,
      0,
      9,
      8,
      7,
      0,
      11,
      1,
      10,
      0,
      14,
      13,
      12,
      0,
      1,
      15,
      16,
      17,
      1,
      18,
      19,
      20,
      2,
      21,
      9,
      22,
      2,
      23,
      13,
      16,
      2,
      24,
      7,
      25,
      3,
      26,
      27,
      28,
      3,
      22,
      29,
      30,
      4,
      31,
      14,
      18,
      4,
      32,
      8,
      27,
      4,
      24,
      12,
      33,
      26,
      17,
      34,
      5,
      8,
      19,
      23,
      5,
      36,
      15,
      35,
      5,
      12,
      20,
      37,
      6,
      29,
      16,
      38,
      6,
      39,
      18,
      35,
      6,
      41,
      32,
      40,
      7,
      30,
      42,
      11,
      7,
      37,
      16,
      31,
      8,
      44,
      14,
      43,
      9,
      45,
      33,
      37,
      9,
      15,
      28,
      46,
      10,
      13,
      29,
      32,
      10,
      41,
      26,
      47,
      10,
      19,
      27,
      38,
      11,
      48,
      22,
      47,
      11,
      36,
      23,
      49,
      12,
      42,
      27,
      21,
      13,
      50,
      25,
      42,
      14,
      15,
      51,
      38,
      48,
      17,
      52,
      20,
      53,
      17,
      31,
      39,
      49,
      18,
      45,
      23,
      25,
      19,
      34,
      29,
      46,
      20,
      46,
      36,
      54,
      21,
      55,
      41,
      43,
      21,
      48,
      40,
      28,
      22,
      50,
      32,
      33,
      24,
      56,
      44,
      40,
      24,
      53,
      43,
      49,
      25,
      53,
      37,
      57,
      26,
      54,
      38,
      39,
      28,
      58,
      30,
      56,
      30,
      34,
      41,
      51,
      31,
      57,
      36,
      44,
      33,
      56,
      42,
      55,
      52,
      48,
      59,
      34,
      51,
      53,
      58,
      35,
      45,
      52,
      44,
      35,
      59,
      46,
      58,
      39,
      57,
      50,
      59,
      40,
      47,
      50,
      58,
      43,
      59,
      49,
      55,
      45,
      54,
      56,
      52,
      47,
      51,
      55,
      54,
      57
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      4,
      5,
      2,
      1,
      8,
      9,
      3,
      2,
      5,
      7,
      10,
      0,
      3,
      11,
      12,
      4,
      7,
      13,
      14,
      1,
      6,
      15,
      16,
      7,
      0,
      13,
      14,
      6,
      5,
      9,
      17,
      2,
      1,
      11,
      18,
      4,
      9,
      19,
      20,
      3,
      8,
      15,
      16,
      9,
      2,
      19,
      20,
      8,
      21,
      22,
      7,
      5,
      16,
      23,
      10,
      7,
      21,
      22,
      0,
      10,
      20,
      24,
      11,
      3,
      16,
      23,
      12,
      11,
      20,
      24,
      4,
      12,
      17,
      15,
      13,
      7,
      25,
      11,
      1,
      14,
      23,
      10,
      15,
      6,
      19,
      2,
      13,
      0,
      26,
      11,
      6,
      14,
      21,
      27,
      9,
      5,
      16,
      28,
      17,
      9,
      21,
      27,
      2,
      17,
      16,
      28,
      18,
      11,
      14,
      25,
      4,
      18,
      10,
      15,
      19,
      9,
      28,
      17,
      15,
      8,
      26,
      11,
      8,
      20,
      22,
      23,
      18,
      7,
      22,
      4,
      24,
      0,
      10,
      9,
      29,
      21,
      24,
      23,
      6,
      11,
      23,
      18,
      28,
      12,
      12,
      9,
      29,
      20,
      15,
      30,
      21,
      13,
      7,
      30,
      21,
      17,
      25,
      28,
      8,
      11,
      2,
      31,
      21,
      13,
      0,
      31,
      21,
      19,
      14,
      24,
      23,
      26,
      27,
      28,
      12,
      9,
      27,
      4,
      25,
      2,
      18,
      7,
      30,
      14,
      15,
      29,
      21,
      19,
      20,
      25,
      28,
      26,
      14,
      30,
      23,
      22,
      14,
      31,
      4,
      22,
      14,
      31,
      0,
      24,
      28,
      27,
      20,
      29,
      26,
      28,
      30,
      15,
      25,
      20,
      31,
      2,
      29,
      15,
      26,
      23,
      20,
      31,
      4,
      27,
      30,
      28,
      29,
      23
    ],
    [
      10,
      1,
      6,
      1,
      10,
      9,
      6,
      5,
      10,
      9,
      6,
      1,
      6,
      5,
      10,
      9,
      6,
      1,
      10,
      1,
      6,
      5,
      10,
      1,
      6,
      1,
      6,
      5,
      10,
      1,
      10,
      1,
      6,
      1,
      6,
      1,
      6,
      5,
      6,
      1,
      10,
      9,
      10,
      1,
      6,
      5,
      10,
      1,
      6,
      1,
      6,
      5,
      6,
      1,
      6,
      1,
      10,
      9,
      6,
      1,
      6,
      1,
      6,
      5
    ],
    [
      0,
      1,
      5,
      17,
      35,
      53,
      44,
      24,
      9,
      2,
      0,
      2,
      7,
      22,
      11,
      3,
      0,
      3,
      10,
      28,
      47,
      56,
      43,
      24,
      14,
      4,
      0,
      4,
      12,
      18,
      6,
      1,
      1,
      6,
      20,
      35,
      52,
      58,
      47,
      30,
      11,
      3,
      1,
      3,
      10,
      26,
      15,
      5,
      2,
      9,
      25,
      37,
      23,
      8,
      2,
      8,
      16,
      5,
      15,
      34,
      48,
      41,
      21,
      7,
      4,
      14,
      33,
      42,
      32,
      13,
      4,
      13,
      27,
      10,
      26,
      46,
      39,
      36,
      31,
      12,
      5,
      16,
      23,
      31,
      36,
      17,
      6,
      18,
      37,
      25,
      33,
      42,
      22,
      11,
      29,
      19,
      6,
      19,
      38,
      46,
      39,
      20,
      7,
      21,
      40,
      43,
      24,
      9,
      7,
      9,
      25,
      45,
      53,
      52,
      51,
      48,
      30,
      22,
      8,
      23,
      31,
      49,
      57,
      55,
      40,
      21,
      32,
      13,
      8,
      13,
      27,
      29,
      19,
      16,
      10,
      27,
      32,
      21,
      41,
      28,
      11,
      29,
      38,
      34,
      48,
      30,
      12,
      31,
      49,
      44,
      24,
      14,
      12,
      14,
      33,
      50,
      56,
      58,
      54,
      39,
      20,
      18,
      15,
      26,
      28,
      41,
      40,
      43,
      44,
      49,
      36,
      17,
      15,
      17,
      35,
      52,
      51,
      34,
      16,
      19,
      38,
      34,
      51,
      59,
      57,
      45,
      37,
      23,
      18,
      20,
      35,
      53,
      45,
      37,
      22,
      30,
      47,
      56,
      50,
      42,
      25,
      45,
      57,
      55,
      50,
      33,
      26,
      28,
      47,
      58,
      54,
      46,
      27,
      29,
      38,
      46,
      54,
      59,
      55,
      50,
      42,
      32,
      36,
      39,
      54,
      59,
      57,
      49,
      40,
      55,
      59,
      51,
      48,
      41,
      43,
      56,
      58,
      52,
      53,
      44
    ]
  ],
  [
    [
      51,
      30,
      18,
      60,
      4
    ],
    [
      2,
      5,
      4,
      5,
      1,
      5,
      1
    ],
    [
      1,
      10,
      1,
      5,
      4,
      10,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.5877852522924731,
      0.8090169943749475,
      -0.5877852522924731,
      0.2628655560595668,
      0.5257311121191336,
      -0.2628655560595668,
      -0.5257311121191336,
      0.9510565162951535,
      0.30901699437494745,
      0.6881909602355868,
      0.5,
      -0.6881909602355868,
      -0.9510565162951535,
      0.42532540417602,
      0.8506508083520399,
      -0.16245984811645317,
      0.16245984811645317,
      -0.8506508083520399,
      -0.42532540417602,
      -0.30901699437494745,
      -0.8090169943749475,
      -0.5,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      0,
      3,
      5,
      6,
      3,
      7,
      8,
      3,
      9,
      0,
      10,
      11,
      8,
      12,
      13,
      6,
      12,
      14,
      0,
      10,
      15,
      16,
      10,
      17,
      16,
      12,
      18,
      19,
      12,
      20,
      19,
      10,
      16,
      6,
      0,
      9,
      0,
      21,
      6,
      19,
      0,
      8,
      16,
      0,
      14,
      0,
      21,
      19,
      8,
      0,
      15,
      16,
      21,
      20,
      19,
      21,
      2,
      0,
      22,
      11,
      8,
      23,
      18,
      19,
      23,
      13,
      6,
      23,
      17,
      16,
      23,
      4,
      0,
      22,
      5,
      6,
      22,
      7,
      8,
      22,
      0,
      0,
      24
    ],
    [
      1,
      2,
      3,
      4,
      6,
      3,
      5,
      0,
      8,
      4,
      7,
      0,
      10,
      1,
      9,
      0,
      12,
      2,
      11,
      0,
      1,
      13,
      6,
      14,
      1,
      11,
      5,
      15,
      2,
      16,
      8,
      10,
      2,
      17,
      7,
      18,
      3,
      13,
      10,
      19,
      3,
      7,
      9,
      16,
      4,
      15,
      12,
      6,
      4,
      20,
      11,
      18,
      9,
      14,
      19,
      5,
      22,
      13,
      21,
      5,
      22,
      11,
      23,
      6,
      25,
      10,
      24,
      7,
      26,
      18,
      24,
      8,
      20,
      17,
      12,
      8,
      25,
      13,
      27,
      9,
      28,
      18,
      23,
      12,
      14,
      27,
      22,
      29,
      14,
      15,
      21,
      23,
      15,
      20,
      22,
      28,
      16,
      26,
      25,
      17,
      16,
      27,
      24,
      19,
      17,
      29,
      24,
      28,
      19,
      21,
      25,
      29,
      20,
      29,
      23,
      26,
      28,
      27,
      26,
      21
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      4,
      5,
      2,
      1,
      6,
      7,
      3,
      2,
      5,
      8,
      9,
      0,
      3,
      8,
      9,
      4,
      7,
      10,
      11,
      1,
      0,
      10,
      11,
      6,
      5,
      11,
      12,
      2,
      1,
      11,
      12,
      4,
      7,
      13,
      8,
      3,
      2,
      13,
      8,
      6,
      11,
      14,
      8,
      5,
      11,
      14,
      0,
      9,
      7,
      13,
      4,
      9,
      12,
      4,
      10,
      7,
      15,
      8,
      10,
      0,
      15,
      8,
      6,
      11,
      8,
      14,
      2,
      12,
      15,
      11,
      13,
      2,
      14,
      7,
      16,
      0,
      9,
      7,
      16,
      11,
      13,
      11,
      16,
      4,
      4,
      17,
      8,
      10,
      7,
      17,
      8,
      12,
      0,
      17,
      4,
      15,
      14,
      7,
      17,
      2,
      2,
      16,
      4,
      15,
      2,
      17,
      0,
      16
    ],
    [
      10,
      1,
      5,
      4,
      10,
      1,
      5,
      1,
      10,
      1,
      5,
      4,
      5,
      1,
      10,
      1,
      10,
      1,
      5,
      1,
      5,
      1,
      10,
      1,
      5,
      4,
      5,
      4,
      5,
      1,
      5,
      1,
      5,
      1,
      5,
      4
    ],
    [
      0,
      1,
      5,
      14,
      21,
      29,
      26,
      17,
      8,
      2,
      0,
      2,
      7,
      10,
      3,
      0,
      3,
      9,
      19,
      27,
      29,
      28,
      20,
      12,
      4,
      0,
      4,
      11,
      6,
      1,
      1,
      6,
      15,
      23,
      28,
      26,
      24,
      16,
      10,
      3,
      1,
      3,
      9,
      13,
      5,
      2,
      8,
      18,
      12,
      4,
      2,
      4,
      11,
      15,
      22,
      21,
      27,
      25,
      16,
      7,
      5,
      13,
      19,
      25,
      24,
      17,
      18,
      12,
      11,
      6,
      5,
      6,
      15,
      22,
      14,
      7,
      16,
      24,
      17,
      8,
      7,
      8,
      18,
      20,
      23,
      22,
      14,
      13,
      9,
      10,
      9,
      10,
      16,
      25,
      19,
      11,
      15,
      23,
      20,
      12,
      13,
      14,
      21,
      27,
      19,
      17,
      26,
      28,
      20,
      18,
      21,
      22,
      23,
      28,
      29,
      24,
      26,
      29,
      27,
      25
    ]
  ],
  [
    [
      52,
      20,
      12,
      30,
      3
    ],
    [
      1,
      3,
      1,
      2,
      1,
      5,
      2
    ],
    [
      1,
      5,
      2,
      5,
      2,
      5,
      2
    ],
    [
      0,
      1,
      0.6666666666666666,
      -0.7453559924999299,
      -0.3333333333333333,
      0.5773502691896257,
      -0.5773502691896257,
      0.3333333333333333,
      -0.12732200375003505,
      -0.9341723589627157,
      0.872677996249965,
      -0.35682208977308993,
      0.35682208977308993,
      0.9341723589627157,
      0.12732200375003505,
      0.7453559924999299,
      -0.872677996249965,
      -0.6666666666666666,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      4,
      6,
      3,
      3,
      5,
      7,
      3,
      6,
      7,
      8,
      9,
      7,
      10,
      11,
      7,
      10,
      12,
      7,
      8,
      13,
      7,
      14,
      9,
      4,
      14,
      13,
      4,
      15,
      5,
      4,
      16,
      11,
      4,
      16,
      12,
      4,
      15,
      6,
      4,
      7,
      5,
      15,
      7,
      6,
      15,
      17,
      0,
      15,
      0,
      0,
      18
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      9,
      8,
      0,
      1,
      10,
      7,
      1,
      8,
      11,
      2,
      12,
      9,
      2,
      4,
      13,
      3,
      14,
      5,
      3,
      6,
      15,
      11,
      16,
      4,
      17,
      10,
      5,
      13,
      18,
      6,
      16,
      12,
      7,
      15,
      17,
      8,
      18,
      14,
      9,
      10,
      19,
      13,
      11,
      14,
      19,
      12,
      19,
      15,
      17,
      18,
      16
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      7,
      3,
      4,
      8,
      1,
      0,
      6,
      4,
      5,
      7,
      2,
      1,
      8,
      5,
      9,
      6,
      3,
      9,
      3,
      7,
      10,
      8,
      4,
      10,
      4,
      6,
      11,
      7,
      5,
      11,
      5,
      8,
      9,
      10,
      6,
      7,
      11,
      9,
      10,
      11,
      8,
      11,
      10,
      9
    ],
    [
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      2
    ],
    [
      0,
      1,
      4,
      7,
      2,
      0,
      2,
      6,
      9,
      3,
      0,
      3,
      8,
      5,
      1,
      1,
      5,
      11,
      10,
      4,
      2,
      7,
      13,
      12,
      6,
      3,
      9,
      15,
      14,
      8,
      4,
      10,
      16,
      13,
      7,
      5,
      8,
      14,
      17,
      11,
      6,
      12,
      18,
      15,
      9,
      10,
      11,
      17,
      19,
      16,
      12,
      13,
      16,
      19,
      18,
      14,
      15,
      18,
      19,
      17
    ]
  ],
  [
    [
      53,
      12,
      20,
      30,
      5
    ],
    [
      1,
      5,
      2,
      2,
      1,
      3,
      1
    ],
    [
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.8944271909999159,
      -0.4472135954999579,
      -0.7236067977499789,
      0.5257311121191336,
      0.276393202250021,
      -0.8506508083520399,
      0.8506508083520399,
      -0.5257311121191336,
      -0.276393202250021,
      0.4472135954999579,
      0.7236067977499789,
      -0.8944271909999159,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      6,
      8,
      3,
      4,
      9,
      3,
      10,
      7,
      11,
      10,
      8,
      11,
      12,
      5,
      11,
      13,
      0,
      11,
      12,
      9,
      11,
      0,
      0,
      14
    ],
    [
      1,
      2,
      3,
      4,
      5,
      5,
      7,
      6,
      2,
      0,
      1,
      6,
      8,
      3,
      0,
      2,
      8,
      9,
      4,
      0,
      3,
      9,
      10,
      5,
      0,
      4,
      10,
      7,
      1,
      0,
      1,
      7,
      11,
      8,
      2,
      1,
      5,
      10,
      11,
      6,
      2,
      6,
      11,
      9,
      3,
      3,
      8,
      11,
      10,
      4,
      4,
      9,
      11,
      7,
      5,
      7,
      10,
      9,
      8,
      6
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      0,
      4,
      7,
      8,
      9,
      1,
      0,
      9,
      10,
      11,
      2,
      1,
      11,
      12,
      13,
      3,
      2,
      13,
      14,
      5,
      4,
      3,
      6,
      15,
      16,
      8,
      7,
      5,
      14,
      17,
      15,
      6,
      8,
      16,
      18,
      10,
      9,
      10,
      18,
      19,
      12,
      11,
      12,
      19,
      17,
      14,
      13,
      17,
      19,
      18,
      16,
      15
    ],
    [
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      3,
      0,
      3,
      4,
      0,
      4,
      5,
      0,
      5,
      1,
      1,
      5,
      7,
      1,
      7,
      6,
      1,
      6,
      2,
      2,
      6,
      8,
      2,
      8,
      3,
      3,
      8,
      9,
      3,
      9,
      4,
      4,
      9,
      10,
      4,
      10,
      5,
      5,
      10,
      7,
      6,
      7,
      11,
      6,
      11,
      8,
      7,
      10,
      11,
      8,
      11,
      9,
      9,
      11,
      10
    ]
  ],
  [
    [
      54,
      30,
      32,
      60,
      4
    ],
    [
      1,
      2,
      1,
      5,
      2,
      3,
      1
    ],
    [
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1
    ],
    [
      0,
      1,
      0.9510565162951535,
      -0.30901699437494745,
      0.42532540417602,
      0.8506508083520399,
      -0.9510565162951535,
      -0.42532540417602,
      -0.8506508083520399,
      -0.16245984811645317,
      0.5,
      -0.5877852522924731,
      -0.8090169943749475,
      -0.2628655560595668,
      -0.5257311121191336,
      0.6881909602355868,
      0.16245984811645317,
      0.5877852522924731,
      0.2628655560595668,
      0.5257311121191336,
      -0.6881909602355868,
      0.8090169943749475,
      -0.5,
      0.30901699437494745,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      0,
      3,
      7,
      8,
      3,
      9,
      5,
      10,
      11,
      0,
      12,
      13,
      14,
      12,
      15,
      14,
      10,
      16,
      8,
      10,
      17,
      0,
      12,
      18,
      19,
      12,
      20,
      19,
      10,
      8,
      14,
      0,
      19,
      8,
      0,
      11,
      0,
      21,
      13,
      14,
      21,
      14,
      5,
      0,
      5,
      19,
      0,
      17,
      0,
      21,
      18,
      19,
      21,
      15,
      14,
      22,
      9,
      5,
      22,
      2,
      0,
      23,
      4,
      5,
      23,
      20,
      19,
      22,
      16,
      8,
      22,
      6,
      0,
      23,
      7,
      8,
      23,
      0,
      0,
      24
    ],
    [
      1,
      2,
      3,
      4,
      4,
      6,
      5,
      0,
      8,
      7,
      3,
      0,
      2,
      10,
      9,
      0,
      12,
      11,
      1,
      0,
      1,
      6,
      13,
      8,
      1,
      14,
      15,
      5,
      2,
      8,
      16,
      17,
      2,
      5,
      13,
      7,
      3,
      10,
      18,
      12,
      3,
      17,
      19,
      9,
      4,
      12,
      20,
      14,
      4,
      9,
      18,
      11,
      22,
      21,
      8,
      5,
      11,
      20,
      15,
      6,
      14,
      23,
      22,
      6,
      21,
      24,
      17,
      7,
      16,
      19,
      10,
      7,
      26,
      25,
      12,
      9,
      17,
      27,
      26,
      10,
      25,
      28,
      14,
      11,
      13,
      22,
      24,
      16,
      13,
      15,
      23,
      21,
      15,
      28,
      29,
      22,
      16,
      21,
      29,
      27,
      18,
      26,
      28,
      20,
      18,
      19,
      27,
      25,
      19,
      24,
      29,
      26,
      20,
      25,
      29,
      23,
      28,
      27,
      24,
      23
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      4,
      3,
      2,
      5,
      10,
      11,
      0,
      4,
      12,
      10,
      5,
      6,
      13,
      14,
      7,
      0,
      11,
      13,
      6,
      8,
      15,
      16,
      2,
      7,
      17,
      15,
      8,
      9,
      18,
      19,
      4,
      2,
      16,
      18,
      9,
      20,
      13,
      11,
      10,
      19,
      21,
      12,
      4,
      21,
      22,
      10,
      12,
      23,
      24,
      14,
      13,
      24,
      17,
      7,
      14,
      25,
      18,
      16,
      15,
      24,
      26,
      15,
      17,
      27,
      21,
      19,
      18,
      20,
      28,
      23,
      13,
      10,
      22,
      28,
      20,
      21,
      29,
      28,
      22,
      23,
      28,
      30,
      24,
      25,
      31,
      27,
      18,
      15,
      26,
      31,
      25,
      24,
      30,
      31,
      26,
      27,
      31,
      29,
      21,
      31,
      30,
      28,
      29
    ],
    [
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      5,
      2
    ],
    [
      0,
      1,
      5,
      8,
      2,
      0,
      2,
      3,
      0,
      3,
      9,
      12,
      4,
      0,
      4,
      1,
      1,
      4,
      11,
      14,
      6,
      1,
      6,
      5,
      2,
      8,
      7,
      2,
      7,
      17,
      10,
      3,
      3,
      10,
      9,
      4,
      12,
      11,
      5,
      6,
      15,
      22,
      13,
      5,
      13,
      8,
      6,
      14,
      15,
      7,
      8,
      13,
      21,
      16,
      7,
      16,
      17,
      9,
      10,
      19,
      26,
      18,
      9,
      18,
      12,
      10,
      17,
      19,
      11,
      12,
      18,
      25,
      20,
      11,
      20,
      14,
      13,
      22,
      21,
      14,
      20,
      28,
      23,
      15,
      15,
      23,
      22,
      16,
      21,
      24,
      16,
      24,
      27,
      19,
      17,
      18,
      26,
      25,
      19,
      27,
      26,
      20,
      25,
      28,
      21,
      22,
      23,
      29,
      24,
      23,
      28,
      29,
      24,
      29,
      27,
      25,
      26,
      27,
      29,
      28
    ]
  ],
  [
    [
      55,
      60,
      32,
      90,
      3
    ],
    [
      2,
      2,
      1,
      5,
      2,
      3,
      1
    ],
    [
      1,
      6,
      1,
      6,
      1,
      5,
      2
    ],
    [
      0,
      1,
      0.8356150396788412,
      0.5493154880963477,
      -0.7824189490710537,
      0.2933821444328528,
      0.629603710095543,
      -0.5494102863720326,
      0.8888111302866287,
      -0.3520535357109571,
      0.11316521406342704,
      0.8278538346559614,
      -0.9352341880465643,
      0.03735400249367301,
      -0.7292228584632661,
      0.5867642888657056,
      0.44649854739676037,
      0.3395542307467293,
      0.4767884711200322,
      -0.8054384283112125,
      0.21955739527900214,
      -0.974884212958648,
      0.1063921812155751,
      -0.8027380476146094,
      -0.5560885209441996,
      0.20502315740827037,
      -0.6347778467774629,
      0.7449983826606011,
      -0.30563047795102144,
      -0.5120562838783597,
      -0.9681111801107961,
      -0.14396613445816078,
      0.1105781457224671,
      0.9724906059263114,
      0.1408680694457389,
      -0.1725020531316303,
      0.5200137365481037,
      -0.4178075198394206,
      -0.5028924303364121,
      -0.6963458663990343,
      0.7031188992468863,
      -0.8920089226184928,
      0.2952822045871817,
      0.9032324764554968,
      0.3114153386238455,
      0.624429573413623,
      -0.3538221900834641,
      -0.371384462079485,
      -0.8746965577820272,
      -0.5586755892851595,
      0.7164624639871316,
      -0.04223709325304363,
      -0.09802025220179113,
      -0.9032324764554968,
      0.09802025220179113,
      0.4178075198394206,
      -0.9248859146827246,
      0.13926917327980687,
      0.4642305775993562,
      -0.13926917327980687,
      -0.2952822045871817,
      -0.3114153386238455,
      0.8920089226184928,
      0.1725020531316303,
      0.9248859146827246,
      0.3538221900834641,
      0.5586755892851595,
      -0.7164624639871316,
      0.371384462079485,
      0.8746965577820272,
      -0.4642305775993562,
      -0.5200137365481037,
      -0.7449983826606011,
      -0.1408680694457389,
      0.974884212958648,
      -0.624429573413623,
      0.6963458663990343,
      0.04223709325304363,
      0.6347778467774629,
      -0.2050231574082704,
      0.5560885209441996,
      0.8054384283112125,
      -0.20502315740827037,
      0.5028924303364121,
      0.5120562838783597,
      -0.1105781457224671,
      -0.9724906059263115,
      0.9681111801107961,
      0.14396613445816078,
      -0.7031188992468863,
      -0.2195573952790021,
      -0.037354002493673,
      0.9748842129586481,
      -0.4767884711200322,
      0.3520535357109571,
      0.30563047795102144,
      0.8027380476146094,
      0.9352341880465644,
      -0.11316521406342704,
      0.5494102863720326,
      -0.8278538346559614,
      -0.44649854739676,
      -0.339554230746729,
      -0.827853834655961,
      0.7292228584632661,
      -0.5867642888657056,
      -0.1063921812155751,
      -0.888811130286629,
      -0.293382144432853,
      0.35205353571096,
      -0.629603710095543,
      -0.5493154880963477,
      0.78241894907105,
      -0.54931548809635,
      -0.8356150396788412,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      7,
      11,
      12,
      13,
      9,
      14,
      15,
      9,
      16,
      17,
      11,
      18,
      19,
      9,
      20,
      13,
      21,
      22,
      15,
      23,
      24,
      19,
      25,
      26,
      27,
      25,
      28,
      29,
      23,
      30,
      31,
      25,
      32,
      33,
      25,
      34,
      35,
      21,
      36,
      27,
      37,
      38,
      29,
      39,
      40,
      31,
      39,
      41,
      35,
      37,
      42,
      43,
      44,
      45,
      46,
      39,
      47,
      48,
      44,
      49,
      50,
      37,
      51,
      50,
      39,
      52,
      53,
      37,
      54,
      43,
      55,
      56,
      46,
      57,
      58,
      48,
      59,
      60,
      53,
      61,
      62,
      63,
      55,
      64,
      65,
      59,
      66,
      67,
      55,
      68,
      69,
      61,
      70,
      69,
      57,
      71,
      72,
      55,
      73,
      63,
      74,
      75,
      65,
      76,
      77,
      67,
      76,
      78,
      72,
      79,
      80,
      81,
      82,
      83,
      84,
      76,
      85,
      86,
      79,
      87,
      88,
      82,
      89,
      88,
      76,
      90,
      91,
      92,
      93,
      81,
      94,
      95,
      84,
      96,
      97,
      91,
      94,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      94,
      106,
      105,
      96,
      107,
      108,
      109,
      110,
      99,
      111,
      112,
      108,
      113,
      114,
      0,
      111,
      0,
      0,
      115
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      9,
      8,
      0,
      1,
      10,
      11,
      1,
      8,
      12,
      2,
      13,
      14,
      2,
      11,
      15,
      3,
      16,
      5,
      3,
      14,
      17,
      19,
      18,
      4,
      20,
      7,
      4,
      21,
      19,
      5,
      15,
      22,
      6,
      23,
      9,
      6,
      24,
      13,
      7,
      26,
      25,
      8,
      27,
      26,
      9,
      10,
      28,
      20,
      10,
      12,
      29,
      11,
      18,
      30,
      12,
      25,
      31,
      13,
      32,
      33,
      14,
      33,
      27,
      15,
      30,
      34,
      16,
      35,
      21,
      16,
      17,
      36,
      17,
      23,
      37,
      39,
      38,
      18,
      31,
      39,
      19,
      40,
      24,
      20,
      41,
      29,
      21,
      34,
      42,
      22,
      43,
      23,
      22,
      44,
      32,
      24,
      36,
      45,
      25,
      46,
      35,
      26,
      47,
      46,
      27,
      28,
      48,
      40,
      28,
      29,
      49,
      30,
      38,
      44,
      31,
      45,
      50,
      32,
      51,
      43,
      33,
      42,
      47,
      34,
      40,
      52,
      35,
      53,
      41,
      36,
      37,
      54,
      37,
      43,
      55,
      49,
      56,
      38,
      50,
      48,
      39,
      57,
      49,
      41,
      52,
      58,
      42,
      56,
      51,
      44,
      54,
      57,
      45,
      55,
      53,
      46,
      58,
      54,
      47,
      48,
      59,
      52,
      50,
      53,
      59,
      51,
      59,
      55,
      57,
      58,
      56
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      7,
      3,
      4,
      8,
      1,
      0,
      9,
      4,
      5,
      7,
      2,
      1,
      10,
      5,
      11,
      6,
      3,
      9,
      0,
      6,
      12,
      3,
      7,
      13,
      8,
      4,
      10,
      1,
      8,
      13,
      4,
      9,
      14,
      7,
      5,
      15,
      5,
      10,
      11,
      16,
      6,
      3,
      12,
      11,
      6,
      16,
      9,
      7,
      17,
      12,
      13,
      18,
      8,
      8,
      19,
      10,
      9,
      20,
      13,
      14,
      17,
      7,
      5,
      15,
      14,
      10,
      19,
      15,
      21,
      16,
      11,
      22,
      11,
      12,
      20,
      9,
      16,
      22,
      12,
      17,
      23,
      18,
      13,
      19,
      8,
      18,
      23,
      13,
      20,
      24,
      17,
      14,
      24,
      14,
      15,
      25,
      15,
      19,
      21,
      26,
      16,
      11,
      22,
      21,
      16,
      26,
      20,
      17,
      27,
      22,
      23,
      28,
      18,
      18,
      28,
      19,
      20,
      26,
      23,
      24,
      27,
      17,
      15,
      25,
      24,
      19,
      28,
      25,
      29,
      26,
      21,
      29,
      21,
      22,
      29,
      22,
      27,
      30,
      28,
      23,
      30,
      23,
      26,
      31,
      27,
      24,
      31,
      24,
      25,
      31,
      25,
      28,
      29,
      30,
      26,
      27,
      31,
      29,
      30,
      31,
      28,
      31,
      30,
      29
    ],
    [
      6,
      1,
      6,
      1,
      5,
      2,
      6,
      1,
      5,
      2,
      6,
      1,
      5,
      2,
      6,
      1,
      6,
      1,
      6,
      1,
      5,
      2,
      6,
      1,
      5,
      2,
      6,
      1,
      5,
      2,
      6,
      1,
      6,
      1,
      6,
      1,
      5,
      2,
      6,
      1,
      5,
      2,
      5,
      2,
      6,
      1,
      6,
      1,
      6,
      1,
      5,
      2,
      6,
      1,
      5,
      2,
      6,
      1,
      6,
      1,
      5,
      2,
      6,
      1
    ],
    [
      0,
      1,
      4,
      11,
      7,
      2,
      0,
      2,
      6,
      14,
      9,
      3,
      0,
      3,
      8,
      5,
      1,
      1,
      5,
      12,
      19,
      10,
      4,
      2,
      7,
      15,
      13,
      6,
      3,
      9,
      17,
      26,
      16,
      8,
      4,
      10,
      18,
      20,
      11,
      5,
      8,
      16,
      25,
      21,
      12,
      6,
      13,
      22,
      33,
      23,
      14,
      7,
      11,
      20,
      30,
      24,
      15,
      9,
      14,
      23,
      27,
      17,
      10,
      19,
      29,
      39,
      28,
      18,
      12,
      21,
      31,
      29,
      19,
      13,
      15,
      24,
      34,
      32,
      22,
      16,
      26,
      36,
      35,
      25,
      17,
      27,
      37,
      46,
      36,
      26,
      18,
      28,
      38,
      40,
      30,
      20,
      21,
      25,
      35,
      45,
      41,
      31,
      22,
      32,
      42,
      43,
      33,
      23,
      33,
      43,
      47,
      37,
      27,
      24,
      30,
      40,
      44,
      34,
      28,
      39,
      49,
      48,
      38,
      29,
      31,
      41,
      50,
      49,
      39,
      32,
      34,
      44,
      52,
      51,
      42,
      35,
      36,
      46,
      54,
      53,
      45,
      37,
      47,
      55,
      54,
      46,
      38,
      48,
      56,
      52,
      44,
      40,
      41,
      45,
      53,
      57,
      50,
      42,
      51,
      58,
      55,
      47,
      43,
      48,
      49,
      50,
      57,
      59,
      56,
      51,
      52,
      56,
      59,
      58,
      53,
      54,
      55,
      58,
      59,
      57
    ]
  ],
  [
    [
      56,
      60,
      50,
      120,
      4
    ],
    [
      4,
      2,
      1,
      3,
      1,
      5,
      4,
      5,
      2
    ],
    [
      1,
      6,
      1,
      4,
      1,
      6,
      5,
      4,
      3
    ],
    [
      0,
      1,
      0.6998542122237652,
      0.7142857142857143,
      -0.5248906591678238,
      0.4629100498862757,
      -0.3689536880596678,
      -0.5947008444878116,
      -0.11664236870396086,
      0.6900655593423543,
      0.8748177652797064,
      0.14285714285714285,
      0.7634342144881664,
      0.2519902889286015,
      0.5832118435198043,
      0.42857142857142855,
      -0.8938443472274916,
      -0.1317907946015359,
      0.2077578990390909,
      0.40397141477872645,
      0.8908668539285414,
      -0.3499271061118826,
      0.9258200997725514,
      -0.8545497448232964,
      -0.499336129633269,
      0.10287460466859646,
      -0.9622461795195447,
      -0.45280171078047904,
      0.03642607974699329,
      -0.6022384254675895,
      0.7854302741968968,
      0.9383977675441076,
      -0.31943828249996997,
      0.47507842093878705,
      0.7817337078570827,
      0.3499271061118826,
      -0.14285714285714285,
      0.7103718480486068,
      -0.49601942214279704,
      0.9469067136670513,
      0.31943828249996997,
      0.5301494770802446,
      -0.5301494770802446,
      -0.7854302741968968,
      -0.9469067136670513,
      -0.03642607974699329,
      0.38272145209503217,
      0.8668814646650022,
      0.5714527691863379,
      -0.2496680648166345,
      -0.6107473715905332,
      0.6172133998483676,
      -0.38272145209503217,
      -0.8668814646650022,
      -0.5937294793446459,
      -0.19072942970908519,
      -0.9711921135272573,
      0.19072942970908519,
      0.04981223822903682,
      -0.9383977675441076,
      0.1317907946015359,
      -0.08910684063323206,
      -0.6172133998483676,
      -0.2024990811266701,
      0.8443689093044461,
      0.6022384254675895,
      0.45280171078047904,
      -0.8908668539285414,
      -0.04981223822903682,
      0.49601942214279704,
      0.13891907886226887,
      0.9583148474999099,
      0.08910684063323206,
      -0.7817337078570827,
      0.9711921135272573,
      0.5937294793446459,
      0.8938443472274916,
      -0.42857142857142855,
      0.6107473715905332,
      -0.5832118435198043,
      -0.6900655593423543,
      0.2024990811266701,
      -0.8443689093044461,
      -0.47507842093878705,
      -0.40397141477872645,
      -0.10287460466859646,
      0.9622461795195447,
      -0.2519902889286015,
      0.8545497448232964,
      0.499336129633269,
      -0.13891907886226887,
      0.2496680648166345,
      -0.9583148474999099,
      -0.9258200997725514,
      -0.2077578990390909,
      -0.7103718480486068,
      -0.5714527691863379,
      -0.7634342144881664,
      0.5947008444878116,
      -0.8748177652797064,
      -0.4629100498862757,
      0.11664236870396086,
      -0.7142857142857143,
      0.3689536880596678,
      0.5248906591678238,
      -0.6998542122237652,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      9,
      15,
      16,
      17,
      15,
      18,
      19,
      20,
      21,
      22,
      11,
      23,
      24,
      11,
      25,
      26,
      13,
      27,
      28,
      20,
      29,
      30,
      11,
      31,
      17,
      32,
      33,
      19,
      34,
      35,
      22,
      36,
      37,
      24,
      38,
      39,
      28,
      40,
      41,
      30,
      32,
      42,
      43,
      40,
      44,
      45,
      32,
      46,
      47,
      40,
      48,
      49,
      34,
      50,
      51,
      38,
      52,
      53,
      32,
      54,
      55,
      34,
      56,
      57,
      36,
      58,
      53,
      38,
      59,
      60,
      40,
      61,
      62,
      34,
      63,
      64,
      38,
      65,
      43,
      36,
      66,
      45,
      67,
      68,
      47,
      69,
      70,
      49,
      71,
      72,
      51,
      73,
      74,
      55,
      11,
      75,
      57,
      73,
      76,
      60,
      77,
      78,
      62,
      69,
      79,
      80,
      77,
      81,
      82,
      69,
      83,
      84,
      73,
      85,
      86,
      87,
      88,
      89,
      36,
      90,
      91,
      92,
      35,
      93,
      36,
      94,
      84,
      67,
      95,
      89,
      69,
      96,
      91,
      73,
      21,
      93,
      11,
      97,
      98,
      87,
      99,
      100,
      36,
      101,
      80,
      102,
      103,
      98,
      102,
      104,
      100,
      102,
      105,
      0,
      102,
      0,
      0,
      106
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      10,
      9,
      8,
      0,
      8,
      12,
      11,
      0,
      14,
      13,
      7,
      0,
      1,
      15,
      16,
      17,
      1,
      18,
      12,
      15,
      1,
      4,
      19,
      20,
      2,
      21,
      22,
      3,
      2,
      23,
      13,
      24,
      2,
      17,
      25,
      23,
      3,
      26,
      27,
      28,
      3,
      29,
      6,
      26,
      4,
      30,
      9,
      31,
      4,
      28,
      32,
      30,
      6,
      34,
      33,
      5,
      36,
      19,
      35,
      5,
      35,
      37,
      10,
      5,
      39,
      38,
      29,
      6,
      41,
      16,
      40,
      7,
      40,
      32,
      39,
      7,
      43,
      27,
      42,
      8,
      42,
      25,
      44,
      8,
      10,
      46,
      45,
      9,
      31,
      38,
      43,
      9,
      37,
      22,
      47,
      10,
      12,
      49,
      48,
      11,
      36,
      21,
      50,
      11,
      50,
      51,
      14,
      11,
      44,
      52,
      18,
      12,
      14,
      54,
      53,
      13,
      24,
      52,
      41,
      13,
      51,
      20,
      47,
      14,
      15,
      55,
      38,
      43,
      15,
      49,
      37,
      55,
      16,
      45,
      50,
      17,
      16,
      43,
      27,
      41,
      17,
      51,
      34,
      25,
      18,
      46,
      33,
      24,
      18,
      20,
      47,
      46,
      19,
      56,
      57,
      20,
      19,
      31,
      48,
      36,
      21,
      58,
      55,
      22,
      21,
      24,
      33,
      36,
      22,
      47,
      54,
      29,
      23,
      56,
      35,
      53,
      23,
      39,
      38,
      56,
      25,
      44,
      32,
      39,
      26,
      57,
      52,
      41,
      26,
      34,
      51,
      57,
      27,
      53,
      35,
      28,
      28,
      37,
      49,
      32,
      29,
      54,
      48,
      31,
      30,
      58,
      50,
      45,
      30,
      44,
      52,
      58,
      34,
      42,
      59,
      33,
      45,
      46,
      59,
      40,
      59,
      48,
      49,
      40,
      53,
      54,
      59,
      42,
      55,
      58,
      57,
      56
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      10,
      11,
      3,
      2,
      5,
      12,
      13,
      0,
      4,
      14,
      15,
      5,
      3,
      11,
      16,
      4,
      7,
      17,
      8,
      1,
      6,
      18,
      19,
      7,
      0,
      20,
      21,
      6,
      9,
      22,
      23,
      2,
      8,
      14,
      15,
      9,
      10,
      18,
      19,
      11,
      2,
      24,
      25,
      10,
      15,
      26,
      12,
      5,
      27,
      28,
      13,
      12,
      29,
      20,
      0,
      13,
      30,
      31,
      14,
      4,
      27,
      28,
      16,
      11,
      32,
      33,
      4,
      16,
      34,
      35,
      17,
      7,
      36,
      37,
      8,
      17,
      21,
      38,
      18,
      6,
      31,
      39,
      7,
      19,
      36,
      37,
      21,
      20,
      15,
      40,
      22,
      9,
      34,
      35,
      23,
      22,
      29,
      24,
      2,
      23,
      41,
      31,
      14,
      8,
      25,
      42,
      18,
      10,
      31,
      43,
      11,
      19,
      32,
      33,
      25,
      24,
      26,
      44,
      39,
      12,
      15,
      45,
      36,
      26,
      28,
      46,
      29,
      13,
      12,
      34,
      22,
      27,
      29,
      45,
      36,
      20,
      30,
      44,
      39,
      31,
      4,
      33,
      21,
      30,
      28,
      47,
      32,
      16,
      11,
      43,
      22,
      27,
      35,
      48,
      36,
      17,
      7,
      39,
      12,
      34,
      37,
      25,
      41,
      8,
      38,
      28,
      46,
      18,
      21,
      30,
      44,
      38,
      37,
      25,
      33,
      21,
      40,
      49,
      43,
      22,
      15,
      45,
      32,
      40,
      35,
      46,
      29,
      23,
      29,
      45,
      32,
      24,
      41,
      49,
      43,
      31,
      42,
      35,
      46,
      18,
      25,
      41,
      49,
      42,
      36,
      48,
      44,
      26,
      38,
      44,
      47,
      28,
      49,
      40,
      32,
      47,
      42,
      49,
      48,
      35,
      48,
      49,
      47,
      44
    ],
    [
      6,
      1,
      4,
      1,
      6,
      5,
      4,
      3,
      6,
      5,
      4,
      1,
      4,
      3,
      6,
      5,
      6,
      1,
      4,
      3,
      4,
      1,
      6,
      1,
      6,
      5,
      4,
      3,
      4,
      3,
      6,
      1,
      4,
      1,
      4,
      3,
      6,
      1,
      4,
      1,
      4,
      1,
      6,
      5,
      6,
      1,
      4,
      1,
      4,
      3,
      6,
      1,
      4,
      3,
      4,
      1,
      6,
      1,
      6,
      5,
      4,
      1,
      6,
      1,
      6,
      1,
      4,
      3,
      4,
      1,
      6,
      1,
      6,
      5,
      4,
      1,
      4,
      1,
      4,
      3,
      4,
      1,
      4,
      3,
      4,
      3,
      4,
      1,
      6,
      1,
      4,
      1,
      4,
      1,
      4,
      3,
      4,
      1,
      6,
      5
    ],
    [
      0,
      1,
      5,
      17,
      10,
      2,
      0,
      2,
      8,
      3,
      0,
      3,
      11,
      28,
      14,
      4,
      0,
      4,
      7,
      1,
      1,
      7,
      20,
      39,
      18,
      6,
      1,
      6,
      15,
      5,
      2,
      10,
      23,
      9,
      2,
      9,
      24,
      43,
      21,
      8,
      3,
      8,
      22,
      44,
      29,
      12,
      3,
      12,
      26,
      11,
      4,
      14,
      30,
      13,
      4,
      13,
      31,
      41,
      19,
      7,
      5,
      15,
      33,
      43,
      36,
      16,
      5,
      16,
      35,
      17,
      6,
      18,
      29,
      12,
      6,
      12,
      26,
      49,
      34,
      15,
      7,
      19,
      40,
      20,
      8,
      21,
      42,
      22,
      9,
      23,
      45,
      53,
      30,
      13,
      9,
      13,
      31,
      24,
      10,
      17,
      37,
      25,
      10,
      25,
      47,
      39,
      46,
      23,
      11,
      26,
      48,
      41,
      36,
      27,
      11,
      27,
      50,
      28,
      14,
      28,
      51,
      32,
      14,
      32,
      47,
      44,
      54,
      30,
      15,
      34,
      55,
      33,
      16,
      36,
      41,
      19,
      16,
      19,
      40,
      56,
      45,
      35,
      17,
      35,
      50,
      28,
      51,
      37,
      18,
      39,
      46,
      38,
      18,
      38,
      24,
      31,
      52,
      29,
      20,
      40,
      57,
      49,
      51,
      32,
      20,
      32,
      47,
      39,
      21,
      43,
      36,
      27,
      21,
      27,
      50,
      53,
      58,
      42,
      22,
      42,
      55,
      34,
      37,
      25,
      22,
      25,
      47,
      44,
      23,
      46,
      56,
      45,
      24,
      38,
      33,
      43,
      26,
      49,
      57,
      48,
      29,
      44,
      54,
      52,
      30,
      54,
      58,
      53,
      31,
      52,
      48,
      41,
      33,
      55,
      59,
      56,
      46,
      38,
      34,
      49,
      51,
      37,
      35,
      45,
      53,
      50,
      40,
      56,
      59,
      57,
      42,
      58,
      59,
      55,
      48,
      57,
      59,
      58,
      54,
      52
    ]
  ],
  [
    [
      57,
      60,
      92,
      150,
      5
    ],
    [
      0,
      2,
      1,
      5,
      2,
      3,
      1
    ],
    [
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.968442946991633,
      0.24923534745730003,
      0.19321436499320757,
      0.9489731032743292,
      -0.8913464263226648,
      0.3786598603755792,
      -0.3786598603755792,
      -0.9489731032743292,
      0.4635252506553833,
      -0.801099901476221,
      0.3781705097860531,
      0.7978800013045003,
      -0.469440698114775,
      0.8572881225114649,
      0.21138236907150076,
      -0.27856910586253775,
      0.529752962345408,
      -0.6600348160048816,
      -0.5864976322329996,
      -0.340464039104504,
      -0.6126845242629766,
      0.7132334202806938,
      0.6126845242629766,
      0.5864976322329996,
      -0.529752962345408,
      -0.445630420730849,
      -0.8822259306910101,
      -0.15195701805322326,
      -0.6325889612171419,
      0.1672774913040784,
      -0.7562072778340813,
      -0.5650434654113792,
      0.7637776262328054,
      0.3120410547701705,
      0.558022793808494,
      0.4558561435243375,
      0.6934015705212108,
      0.6356904262940992,
      -0.7060651967459846,
      0.03770647068154909,
      -0.6532448048163185,
      0.27346524509213305,
      0.036636002595416384,
      -0.9611839381931683,
      0.4921267271821201,
      -0.8571582987158134,
      0.7205513597230376,
      0.8571582987158134,
      0.516824083406961,
      0.4013021551914759,
      0.7551034709746294,
      -0.6377521562381734,
      0.0981457100234598,
      -0.4820430355543146,
      0.8706330636252984,
      -0.8937570445955372,
      0.09338067248300791,
      0.43872359777252945,
      -0.935502456790462,
      -0.27527668519684373,
      -0.22149018020230057,
      -0.380971902701952,
      -0.31122094703615577,
      -0.5885888578997099,
      -0.7537751235370779,
      0.2922092050106875,
      -0.8555038721205963,
      0.1446351964881817,
      -0.4971858653697745,
      0.0022546911225071083,
      0.9751599953043062,
      0.9655218190882862,
      0.25909229586259414,
      0.025274475050864276,
      0.824347632310294,
      -0.27066066648281384,
      -0.195250910813136,
      0.23402466388739745,
      -0.9524229829855175,
      -0.2352120726171922,
      0.9716153980902258,
      0.786094459835353,
      0.43540453026317066,
      0.128165072321284,
      0.7271416236373891,
      0.674417358473862,
      -0.4036327131068644,
      0.80944837192472,
      -0.42646684056138756,
      0.023545392488330794,
      -0.19676384766174335,
      -0.980168150240517,
      0.03974301650147751,
      -0.9978022901202029,
      -0.05301964230586372,
      0.37567430665221396,
      -0.2817345906784908,
      0.8828898208364402,
      -0.6139292841966371,
      0.41018539783242297,
      0.1126975628597047,
      0.4279771028176467,
      -0.689880807411735,
      0.583866483905992,
      -0.24110414719232073,
      -0.8717768201255708,
      -0.9984623092894572,
      0.01618438933424958,
      -0.29701063758046387,
      0.16012784506632693,
      0.9413520884336852,
      0.7675414736147005,
      -0.3119126877922601,
      0.559991572682645,
      0.7838397687128459,
      0.5197504596496805,
      -0.33978622202516995,
      0.9607558386079081,
      -0.20137986637577324,
      -0.19077307986005504,
      0.4935202029299621,
      0.8050296475422517,
      0.3291885111573108,
      -0.6821867327453703,
      0.7311328287211812,
      -0.00812701866372399,
      -0.749781464901646,
      -0.35247296834560204,
      -0.2817083790684633,
      -0.9012631764832357,
      0.4908680726457578,
      -0.6442100617198204,
      -0.5865508772783348,
      0.2046118583994951,
      0.5226033161076565,
      -0.8276592060719108,
      -0.6840824376389654,
      -0.3047630415545087,
      -0.6626844701789651
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      6,
      8,
      3,
      4,
      9,
      3,
      10,
      8,
      11,
      12,
      13,
      14,
      15,
      16,
      14,
      17,
      18,
      11,
      19,
      20,
      14,
      21,
      22,
      23,
      21,
      24,
      23,
      19,
      25,
      14,
      17,
      26,
      11,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      35,
      41,
      42,
      32,
      43,
      44,
      45,
      46,
      47,
      29,
      48,
      0,
      38,
      46,
      49,
      29,
      50,
      51,
      32,
      52,
      53,
      29,
      54,
      55,
      56,
      57,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      56,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      62,
      73,
      74,
      75,
      76,
      77,
      70,
      78,
      79,
      80,
      81,
      82,
      75,
      83,
      84,
      59,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      87,
      102,
      37,
      99,
      103,
      104,
      105,
      106,
      107,
      90,
      108,
      109,
      96,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128,
      129,
      115,
      130,
      131,
      124,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140
    ],
    [
      1,
      2,
      3,
      4,
      5,
      0,
      5,
      6,
      7,
      2,
      0,
      1,
      8,
      9,
      3,
      0,
      2,
      9,
      10,
      11,
      0,
      12,
      13,
      14,
      5,
      0,
      4,
      14,
      6,
      1,
      1,
      5,
      15,
      16,
      7,
      1,
      6,
      16,
      17,
      18,
      2,
      18,
      19,
      20,
      9,
      2,
      8,
      20,
      10,
      3,
      3,
      9,
      21,
      22,
      11,
      3,
      10,
      22,
      23,
      12,
      4,
      11,
      23,
      24,
      13,
      4,
      12,
      24,
      25,
      14,
      4,
      13,
      25,
      26,
      5,
      6,
      26,
      27,
      28,
      16,
      6,
      15,
      28,
      17,
      7,
      7,
      16,
      29,
      30,
      18,
      7,
      17,
      30,
      19,
      8,
      8,
      18,
      30,
      31,
      20,
      8,
      19,
      31,
      32,
      9,
      10,
      32,
      33,
      34,
      22,
      10,
      21,
      34,
      23,
      11,
      11,
      22,
      35,
      24,
      12,
      12,
      23,
      35,
      36,
      13,
      13,
      37,
      38,
      26,
      14,
      14,
      25,
      38,
      27,
      15,
      15,
      26,
      38,
      39,
      28,
      15,
      27,
      39,
      40,
      16,
      17,
      40,
      41,
      42,
      30,
      17,
      29,
      42,
      19,
      18,
      19,
      43,
      44,
      32,
      20,
      20,
      31,
      44,
      33,
      21,
      21,
      32,
      44,
      45,
      34,
      21,
      33,
      45,
      46,
      22,
      23,
      46,
      47,
      36,
      24,
      24,
      35,
      47,
      48,
      37,
      25,
      36,
      48,
      49,
      38,
      25,
      37,
      49,
      27,
      26,
      27,
      50,
      51,
      40,
      28,
      28,
      39,
      51,
      41,
      29,
      29,
      40,
      51,
      52,
      42,
      29,
      41,
      52,
      43,
      30,
      31,
      42,
      52,
      53,
      44,
      31,
      43,
      53,
      33,
      32,
      33,
      54,
      55,
      46,
      34,
      34,
      45,
      55,
      47,
      35,
      35,
      46,
      55,
      48,
      36,
      36,
      47,
      56,
      49,
      37,
      37,
      48,
      56,
      50,
      38,
      39,
      49,
      56,
      57,
      51,
      39,
      50,
      57,
      41,
      40,
      41,
      58,
      53,
      43,
      42,
      43,
      52,
      58,
      54,
      44,
      45,
      53,
      58,
      59,
      55,
      45,
      54,
      59,
      47,
      46,
      48,
      59,
      57,
      50,
      49,
      50,
      56,
      59,
      58,
      51,
      52,
      57,
      59,
      54,
      53,
      54,
      58,
      57,
      56,
      55
    ],
    [
      0,
      1,
      2,
      3,
      4,
      4,
      5,
      6,
      7,
      0,
      0,
      7,
      8,
      9,
      1,
      1,
      9,
      10,
      11,
      2,
      2,
      12,
      13,
      14,
      3,
      3,
      14,
      15,
      5,
      4,
      5,
      15,
      16,
      17,
      6,
      6,
      17,
      18,
      19,
      7,
      7,
      20,
      21,
      22,
      8,
      8,
      22,
      23,
      10,
      9,
      10,
      23,
      24,
      25,
      11,
      11,
      25,
      26,
      27,
      2,
      2,
      27,
      28,
      29,
      12,
      12,
      29,
      30,
      31,
      13,
      13,
      31,
      32,
      15,
      14,
      15,
      33,
      34,
      35,
      16,
      16,
      35,
      36,
      18,
      17,
      18,
      36,
      37,
      38,
      19,
      19,
      38,
      39,
      20,
      7,
      20,
      39,
      40,
      41,
      21,
      21,
      41,
      42,
      23,
      22,
      23,
      43,
      44,
      45,
      24,
      24,
      45,
      46,
      26,
      25,
      26,
      46,
      47,
      28,
      27,
      28,
      47,
      48,
      30,
      29,
      30,
      49,
      50,
      32,
      31,
      32,
      50,
      51,
      33,
      15,
      33,
      51,
      52,
      53,
      34,
      34,
      53,
      54,
      36,
      35,
      36,
      55,
      56,
      57,
      37,
      37,
      57,
      40,
      39,
      38,
      40,
      58,
      59,
      42,
      41,
      42,
      59,
      60,
      43,
      23,
      43,
      60,
      61,
      62,
      44,
      44,
      62,
      63,
      46,
      45,
      46,
      64,
      65,
      48,
      47,
      48,
      65,
      66,
      67,
      30,
      30,
      67,
      68,
      69,
      49,
      49,
      69,
      52,
      51,
      50,
      52,
      70,
      71,
      54,
      53,
      54,
      71,
      72,
      55,
      36,
      55,
      72,
      73,
      74,
      56,
      56,
      74,
      75,
      40,
      57,
      40,
      75,
      76,
      77,
      58,
      58,
      77,
      61,
      60,
      59,
      61,
      78,
      79,
      63,
      62,
      63,
      79,
      80,
      64,
      46,
      64,
      80,
      81,
      66,
      65,
      66,
      81,
      82,
      68,
      67,
      68,
      82,
      83,
      52,
      69,
      52,
      83,
      84,
      85,
      70,
      70,
      85,
      73,
      72,
      71,
      73,
      86,
      76,
      75,
      74,
      76,
      86,
      87,
      61,
      77,
      61,
      87,
      88,
      89,
      78,
      78,
      89,
      81,
      80,
      79,
      81,
      90,
      84,
      83,
      82,
      84,
      90,
      91,
      73,
      85,
      73,
      91,
      88,
      87,
      86,
      88,
      91,
      90,
      81,
      89
    ],
    [
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      3,
      0,
      3,
      11,
      12,
      4,
      0,
      4,
      5,
      0,
      5,
      1,
      1,
      5,
      6,
      1,
      6,
      7,
      1,
      7,
      18,
      8,
      2,
      2,
      8,
      9,
      2,
      9,
      3,
      3,
      9,
      10,
      3,
      10,
      11,
      4,
      12,
      13,
      4,
      13,
      14,
      4,
      14,
      5,
      5,
      14,
      26,
      15,
      6,
      6,
      15,
      16,
      6,
      16,
      7,
      7,
      16,
      17,
      7,
      17,
      18,
      8,
      18,
      19,
      8,
      19,
      20,
      8,
      20,
      9,
      9,
      20,
      32,
      21,
      10,
      10,
      21,
      22,
      10,
      22,
      11,
      11,
      22,
      23,
      11,
      23,
      12,
      12,
      23,
      24,
      12,
      24,
      13,
      13,
      24,
      36,
      37,
      25,
      13,
      25,
      14,
      14,
      25,
      26,
      15,
      26,
      27,
      15,
      27,
      28,
      15,
      28,
      16,
      16,
      28,
      40,
      29,
      17,
      17,
      29,
      30,
      17,
      30,
      18,
      18,
      30,
      19,
      19,
      30,
      42,
      43,
      31,
      19,
      31,
      20,
      20,
      31,
      32,
      21,
      32,
      33,
      21,
      33,
      34,
      21,
      34,
      22,
      22,
      34,
      46,
      35,
      23,
      23,
      35,
      24,
      24,
      35,
      36,
      25,
      37,
      38,
      25,
      38,
      26,
      26,
      38,
      27,
      27,
      38,
      49,
      50,
      39,
      27,
      39,
      28,
      28,
      39,
      40,
      29,
      40,
      41,
      29,
      41,
      42,
      29,
      42,
      30,
      31,
      43,
      44,
      31,
      44,
      32,
      32,
      44,
      33,
      33,
      44,
      53,
      54,
      45,
      33,
      45,
      34,
      34,
      45,
      46,
      35,
      46,
      47,
      35,
      47,
      36,
      36,
      47,
      48,
      36,
      48,
      37,
      37,
      48,
      49,
      37,
      49,
      38,
      39,
      50,
      51,
      39,
      51,
      40,
      40,
      51,
      41,
      41,
      51,
      57,
      58,
      52,
      41,
      52,
      42,
      42,
      52,
      43,
      43,
      52,
      53,
      43,
      53,
      44,
      45,
      54,
      55,
      45,
      55,
      46,
      46,
      55,
      47,
      47,
      55,
      59,
      56,
      48,
      48,
      56,
      49,
      49,
      56,
      50,
      50,
      56,
      57,
      50,
      57,
      51,
      52,
      58,
      53,
      53,
      58,
      54,
      54,
      58,
      59,
      54,
      59,
      55,
      56,
      59,
      57,
      57,
      59,
      58
    ]
  ],
  [
    [
      58,
      60,
      24,
      90,
      3
    ],
    [
      2,
      2,
      1,
      5,
      1,
      5,
      3
    ],
    [
      1,
      10,
      3,
      10,
      3,
      5,
      1
    ],
    [
      0,
      1,
      0.9498602904877843,
      0.31267463689026953,
      -0.050139709512215636,
      0.9485360198619601,
      -0.9445669005121315,
      -0.10013961205458671,
      0.050139709512215636,
      0.592339334060952,
      -0.7994411619511375,
      -0.9637185653597515,
      0.2621689079791367,
      0.9307086256401644,
      0.36230852003372344,
      -0.5784810591889848,
      -0.16202929592454998,
      -0.4109321608597094,
      0.9102860916773367,
      0.34895607153051805,
      -0.8997205809755687,
      -0.24338326253043394,
      0.8997205809755687,
      0.17611378322558977,
      -0.3746507262194609,
      -0.5474930145243893,
      -0.7482567957527867,
      -0.34895607153051805,
      -0.2621689079791367,
      0.3746507262194609,
      -0.22391897979451325,
      0.6233273787255477,
      -0.6863671118828234,
      -0.2710998122743682,
      0.8866463359919968,
      0.203830332969524,
      0.38594827571906326,
      0.22391897979451325,
      -0.18467866812190403,
      -0.6371856535975148,
      0.9637185653597515,
      0.737465072621946,
      0.6371856535975148,
      -0.5507645094450506,
      0.47493014524389215,
      0.7908762770548231,
      -0.737465072621946,
      -0.18997205809755688,
      -0.6481171836981999,
      0.18467866812190403,
      0.7482567957527867,
      -0.31267463689026953,
      -0.9485360198619601,
      0.4109321608597094,
      -0.9102860916773367,
      -0.2625349273780539,
      0.7246170400674468,
      0.2572415374024011,
      -0.6244774280128601,
      0.7097485228780118,
      0.30041883616376014,
      -0.8271577116950717,
      0.6200558838048863,
      -0.7097485228780118,
      -0.30041883616376014,
      -0.9307086256401644,
      -0.36230852003372344,
      0.2625349273780539,
      -0.7246170400674468,
      0.7598882323902275,
      0.5474930145243893,
      -0.17611378322558977,
      0.6873253631097305,
      0.8271577116950717,
      -0.47493014524389215,
      0.24338326253043394,
      -0.6873253631097305,
      0.5507645094450506,
      0.6863671118828234,
      -0.7598882323902275,
      0.6481171836981999,
      -0.9498602904877843,
      -0.203830332969524,
      -0.38594827571906326,
      0.9445669005121315,
      0.10013961205458671,
      -0.6200558838048863,
      0.6244774280128601,
      -0.7908762770548231,
      0.2710998122743682,
      -0.8866463359919968,
      -0.6233273787255477,
      0.18997205809755688,
      -1,
      -0.592339334060952,
      0.7994411619511375,
      -0.2572415374024011,
      0.5784810591889848,
      0.16202929592454998
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      3,
      5,
      8,
      9,
      7,
      10,
      11,
      12,
      8,
      13,
      14,
      8,
      15,
      16,
      10,
      17,
      18,
      8,
      19,
      12,
      20,
      21,
      14,
      22,
      23,
      18,
      24,
      25,
      26,
      24,
      27,
      28,
      22,
      29,
      30,
      22,
      31,
      32,
      24,
      33,
      34,
      24,
      35,
      36,
      22,
      24,
      37,
      20,
      38,
      26,
      39,
      40,
      28,
      4,
      41,
      30,
      42,
      43,
      32,
      44,
      45,
      36,
      44,
      46,
      37,
      39,
      47,
      48,
      41,
      49,
      50,
      42,
      51,
      52,
      4,
      53,
      54,
      4,
      55,
      56,
      42,
      57,
      58,
      41,
      59,
      60,
      39,
      61,
      60,
      44,
      62,
      58,
      44,
      63,
      64,
      42,
      65,
      66,
      4,
      67,
      68,
      39,
      69,
      48,
      8,
      70,
      50,
      29,
      8,
      52,
      51,
      71,
      54,
      29,
      72,
      56,
      4,
      73,
      64,
      74,
      75,
      66,
      20,
      76,
      68,
      8,
      77,
      78,
      74,
      79,
      80,
      4,
      81,
      0,
      51,
      82,
      83,
      20,
      84,
      85,
      51,
      86,
      87,
      74,
      88,
      83,
      74,
      89,
      90,
      29,
      91,
      78,
      29,
      92,
      80,
      46,
      0,
      0,
      93,
      94,
      85,
      95,
      96,
      87,
      46,
      97,
      98,
      95
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      9,
      8,
      0,
      1,
      10,
      11,
      1,
      8,
      12,
      2,
      13,
      14,
      2,
      15,
      16,
      3,
      17,
      5,
      3,
      18,
      19,
      21,
      20,
      4,
      23,
      22,
      4,
      25,
      24,
      5,
      16,
      26,
      6,
      28,
      27,
      6,
      30,
      29,
      7,
      31,
      13,
      7,
      33,
      32,
      8,
      35,
      34,
      9,
      37,
      36,
      9,
      10,
      38,
      23,
      10,
      39,
      40,
      11,
      41,
      42,
      11,
      20,
      34,
      12,
      31,
      43,
      12,
      44,
      45,
      13,
      38,
      33,
      14,
      46,
      47,
      14,
      48,
      44,
      15,
      49,
      50,
      15,
      42,
      51,
      16,
      24,
      45,
      17,
      38,
      49,
      17,
      52,
      26,
      18,
      23,
      37,
      18,
      47,
      53,
      19,
      40,
      54,
      19,
      34,
      45,
      32,
      26,
      20,
      55,
      54,
      21,
      36,
      56,
      21,
      57,
      52,
      22,
      58,
      30,
      22,
      53,
      55,
      24,
      46,
      28,
      25,
      37,
      31,
      25,
      44,
      51,
      27,
      55,
      35,
      27,
      57,
      56,
      28,
      51,
      32,
      29,
      56,
      59,
      29,
      46,
      49,
      30,
      58,
      41,
      33,
      43,
      59,
      35,
      39,
      58,
      36,
      39,
      43,
      47,
      40,
      48,
      50,
      41,
      59,
      48,
      42,
      52,
      54,
      50,
      57,
      53
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      7,
      3,
      4,
      8,
      1,
      0,
      9,
      4,
      5,
      7,
      2,
      1,
      10,
      5,
      11,
      6,
      3,
      12,
      0,
      6,
      13,
      3,
      7,
      14,
      8,
      4,
      15,
      1,
      8,
      16,
      9,
      0,
      14,
      4,
      9,
      17,
      7,
      5,
      12,
      10,
      1,
      18,
      5,
      10,
      11,
      14,
      6,
      3,
      19,
      11,
      12,
      20,
      0,
      6,
      14,
      12,
      13,
      9,
      3,
      7,
      18,
      13,
      14,
      17,
      8,
      15,
      21,
      1,
      8,
      18,
      15,
      16,
      11,
      9,
      0,
      21,
      16,
      9,
      13,
      14,
      17,
      11,
      7,
      5,
      8,
      17,
      12,
      14,
      10,
      1,
      22,
      12,
      18,
      19,
      5,
      10,
      14,
      18,
      17,
      14,
      11,
      21,
      19,
      3,
      18,
      11,
      19,
      8,
      20,
      12,
      21,
      0,
      20,
      22,
      3,
      9,
      15,
      18,
      7,
      14,
      13,
      18,
      7,
      21,
      15,
      22,
      1,
      21,
      23,
      18,
      8,
      7,
      11,
      16,
      23,
      9,
      11,
      7,
      16,
      21,
      20,
      8,
      5,
      9,
      12,
      22,
      21,
      5,
      19,
      3,
      22,
      21,
      18,
      23,
      11,
      12,
      23,
      8,
      20,
      5,
      21,
      23,
      12,
      9
    ],
    [
      10,
      3,
      10,
      3,
      5,
      1,
      10,
      3,
      5,
      1,
      10,
      3,
      5,
      1,
      10,
      3,
      10,
      3,
      10,
      3,
      5,
      1,
      10,
      3,
      10,
      3,
      5,
      1,
      10,
      3,
      5,
      1,
      5,
      1,
      5,
      1,
      10,
      3,
      5,
      1,
      5,
      1,
      10,
      3,
      5,
      1,
      5,
      1
    ],
    [
      0,
      1,
      4,
      11,
      22,
      42,
      30,
      15,
      7,
      2,
      0,
      2,
      6,
      14,
      27,
      47,
      35,
      18,
      9,
      3,
      0,
      3,
      8,
      5,
      1,
      1,
      5,
      12,
      24,
      43,
      55,
      39,
      21,
      10,
      4,
      2,
      7,
      16,
      13,
      6,
      3,
      9,
      19,
      36,
      54,
      58,
      52,
      33,
      17,
      8,
      4,
      10,
      20,
      23,
      11,
      5,
      8,
      17,
      32,
      49,
      51,
      46,
      44,
      25,
      12,
      6,
      13,
      26,
      33,
      52,
      41,
      57,
      48,
      28,
      14,
      7,
      15,
      29,
      50,
      59,
      53,
      43,
      24,
      31,
      16,
      9,
      18,
      34,
      37,
      19,
      10,
      21,
      40,
      56,
      50,
      29,
      49,
      32,
      38,
      20,
      11,
      23,
      34,
      18,
      35,
      53,
      59,
      57,
      41,
      22,
      12,
      25,
      45,
      31,
      24,
      13,
      16,
      31,
      45,
      37,
      34,
      23,
      20,
      38,
      26,
      14,
      28,
      44,
      46,
      27,
      15,
      30,
      51,
      49,
      29,
      17,
      33,
      26,
      38,
      32,
      19,
      37,
      45,
      25,
      44,
      28,
      48,
      56,
      40,
      36,
      21,
      39,
      54,
      36,
      40,
      22,
      41,
      52,
      58,
      42,
      27,
      46,
      51,
      30,
      42,
      58,
      54,
      39,
      55,
      47,
      35,
      47,
      55,
      43,
      53,
      48,
      57,
      59,
      50,
      56
    ]
  ],
  [
    [
      59,
      120,
      54,
      180,
      3
    ],
    [
      3,
      5,
      3,
      2,
      1,
      5,
      1
    ],
    [
      1,
      10,
      3,
      4,
      1,
      10,
      1
    ],
    [
      0,
      1,
      0.5749595745760689,
      0.8181818181818182,
      0.1379435501272479,
      0.5581667218448138,
      -0.5691632310592997,
      0.08143542722201758,
      0.3575585654581263,
      0.7487334524999809,
      0.9361004773380288,
      0.34217563840911003,
      -0.4312196809320517,
      0.6396021490668313,
      0.6363636363636364,
      0.6276493221958528,
      0.21320071635561044,
      -0.9151291094838873,
      0.7186994682200862,
      0.2727272727272727,
      -0.08303979629452829,
      0.9734730847726699,
      0.9454791581586317,
      -0.24620035749994265,
      -0.8624393618641034,
      0.4264014327112209,
      0.18705096044319816,
      -0.13176528913359287,
      0.8508466748305648,
      -0.26353057826718573,
      0.45454545454545453,
      -0.5633668875425303,
      0.6899320109784066,
      -0.9057504286632844,
      0.3449660054892033,
      0.8624393618641034,
      -0.2727272727272727,
      0.4066659757740766,
      0.9040247190908326,
      -0.43480201823588527,
      0.8611032686363254,
      0.7222818055239197,
      0.047987640454583695,
      0.5995132797340441,
      -0.7222065372726508,
      -0.7338744925574584,
      0.6792850868181436,
      -0.9910042311707484,
      -0.13383054136359812,
      0.41024831307791015,
      -0.608496583756389,
      -0.030350048674744477,
      -0.6899320109784066,
      -0.5539882067219274,
      0.8216973001119995,
      0.26353057826718573,
      -0.5446095259013245,
      0.9910042311707484,
      0.13383054136359812,
      0.7338744925574584,
      -0.6792850868181436,
      0.05490375383271961,
      0.7916549029544881,
      0.5446095259013245,
      0.7222065372726508,
      0.3763159270993321,
      -0.42801853931812445,
      0.030350048674744477,
      -0.9040247190908326,
      -0.4264014327112209,
      -0.3821122706161015,
      0.4767312946227962,
      -0.7678068785360365,
      -0.4767312946227962,
      0.5539882067219274,
      -0.8216973001119995,
      -0.1589149179813895,
      0.8528028654224418,
      0.49746690499996177,
      0.36114090276195987,
      -0.7713674382004242,
      0.5239938202272918,
      0.29106212459186803,
      -0.9031327273340171,
      -0.31564872318177994,
      -0.41024831307791015,
      0.608496583756389,
      -0.866021699167937,
      0.05032986191157529,
      -0.21740100911794263,
      -0.294636143577628,
      0.9305516343181627,
      -0.4160446565946795,
      0.7678068785360365,
      0.42801853931812445,
      0.3821122706161015,
      -0.7916549029544881,
      -0.3763159270993321,
      0.4160446565946795,
      0.31564872318177994,
      0.005796343516769343,
      -0.41962699389851305,
      -0.09090909090909091,
      -0.05490375383271961,
      0.994586568474582,
      0.7129031247033168,
      0.1589149179813895,
      -0.49746690499996177,
      -0.7186994682200862,
      -0.6396021490668313,
      -0.7280781490406891,
      0.05848609113655316,
      0.566915270681799,
      -0.7771855593566394,
      0.1603574565909282,
      -0.2781011064674316,
      0.9057504286632844,
      -0.3449660054892033,
      0.24620035749994265,
      0.5633668875425303,
      -0.45454545454545453,
      -0.1495362371607866,
      0.9845681545560346,
      -0.07007877817009185,
      -0.9845681545560346,
      -0.8508466748305648,
      -0.18705096044319816,
      0.13176528913359287,
      -0.9734730847726699,
      -0.6486206900499943,
      -0.5078368599332385,
      -0.8566430183473341,
      0.5078368599332385,
      0.4312196809320517,
      -0.6363636363636364,
      0.7771855593566394,
      -0.1603574565909282,
      0.2781011064674316,
      0.7280781490406891,
      -0.05848609113655316,
      -0.566915270681799,
      -0.5995132797340441,
      -0.7222818055239197,
      -0.047987640454583695,
      0.07007877817009185,
      0.1495362371607866,
      0.09090909090909091,
      0.43480201823588527,
      -0.8611032686363254,
      -0.4066659757740766,
      0.8566430183473341,
      0.6486206900499943,
      -0.9361004773380288,
      -0.08143542722201758,
      -0.34217563840911003,
      -0.3575585654581263,
      -0.5581667218448138,
      -0.7487334524999809,
      -0.28747978728803447,
      0.9534625892455924,
      0.41962699389851305,
      0.9031327273340171,
      -0.9534625892455924,
      -0.994586568474582,
      -0.05032986191157529,
      0.9151291094838873,
      -0.21320071635561044,
      -0.00579634351676934,
      0.7713674382004242,
      -0.8528028654224418,
      -0.6276493221958528,
      -0.7129031247033168,
      0.294636143577628,
      0.5691632310592997,
      -0.8181818181818182,
      -0.1379435501272479,
      0.28747978728803447,
      -0.29106212459186803,
      0.866021699167937,
      -0.9454791581586317,
      -0.03035004867474448,
      -0.3611409027619599,
      -0.5239938202272918,
      0.08303979629452829,
      0.21740100911794263,
      -0.9305516343181627,
      -0.5749595745760689,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      7,
      11,
      12,
      13,
      14,
      15,
      16,
      9,
      17,
      16,
      11,
      18,
      13,
      19,
      20,
      16,
      21,
      22,
      16,
      23,
      24,
      25,
      19,
      26,
      27,
      21,
      28,
      29,
      30,
      31,
      32,
      30,
      33,
      34,
      23,
      35,
      25,
      36,
      37,
      27,
      38,
      39,
      29,
      40,
      41,
      32,
      42,
      43,
      34,
      44,
      45,
      0,
      46,
      47,
      0,
      48,
      49,
      50,
      46,
      51,
      25,
      38,
      41,
      52,
      42,
      53,
      54,
      48,
      39,
      55,
      40,
      56,
      25,
      44,
      57,
      0,
      58,
      59,
      0,
      60,
      61,
      50,
      62,
      63,
      25,
      64,
      31,
      52,
      30,
      65,
      54,
      66,
      28,
      55,
      30,
      67,
      25,
      68,
      24,
      69,
      19,
      70,
      71,
      62,
      72,
      73,
      66,
      74,
      75,
      58,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      60,
      87,
      88,
      78,
      89,
      90,
      91,
      92,
      77,
      84,
      35,
      69,
      36,
      93,
      71,
      94,
      95,
      73,
      96,
      97,
      75,
      94,
      98,
      77,
      99,
      100,
      80,
      14,
      101,
      83,
      102,
      103,
      86,
      96,
      104,
      88,
      102,
      105,
      90,
      14,
      106,
      77,
      107,
      108,
      109,
      36,
      110,
      86,
      99,
      111,
      54,
      112,
      113,
      50,
      114,
      115,
      75,
      107,
      116,
      117,
      118,
      119,
      52,
      120,
      121,
      122,
      102,
      123,
      124,
      114,
      125,
      55,
      120,
      126,
      127,
      128,
      129,
      130,
      112,
      131,
      132,
      102,
      133,
      109,
      134,
      135,
      86,
      136,
      137,
      54,
      78,
      138,
      50,
      84,
      139,
      75,
      140,
      141,
      117,
      64,
      142,
      52,
      143,
      144,
      122,
      136,
      145,
      124,
      146,
      147,
      55,
      148,
      149,
      127,
      68,
      150,
      130,
      146,
      151,
      132,
      140,
      152,
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      146,
      160,
      161,
      146,
      158,
      162,
      146,
      163,
      164,
      146,
      165,
      166,
      154,
      63,
      69,
      64,
      147,
      29,
      148,
      167,
      168,
      134,
      92,
      169,
      84,
      170,
      166,
      157,
      142,
      32,
      143,
      67,
      69,
      68,
      76,
      169,
      78,
      171,
      172,
      134,
      173,
      153,
      174,
      175,
      156,
      174,
      176,
      159,
      102,
      177,
      161,
      99,
      176,
      162,
      102,
      178,
      164,
      107,
      179,
      166,
      118,
      180,
      69,
      38,
      125,
      29,
      120,
      181,
      168,
      182,
      106,
      169,
      107,
      183,
      166,
      128,
      119,
      32,
      120,
      56,
      69,
      44,
      98,
      169,
      99,
      184,
      172,
      185,
      186,
      0,
      174,
      0,
      0,
      187
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      6,
      8,
      0,
      1,
      9,
      10,
      1,
      11,
      9,
      2,
      12,
      3,
      2,
      13,
      14,
      3,
      15,
      16,
      5,
      17,
      4,
      19,
      18,
      4,
      21,
      20,
      5,
      23,
      22,
      6,
      25,
      24,
      7,
      24,
      26,
      7,
      28,
      27,
      8,
      27,
      29,
      8,
      9,
      30,
      31,
      10,
      32,
      33,
      10,
      34,
      32,
      11,
      35,
      36,
      11,
      37,
      35,
      12,
      38,
      39,
      12,
      40,
      38,
      13,
      41,
      14,
      13,
      33,
      42,
      14,
      43,
      44,
      15,
      45,
      16,
      15,
      46,
      47,
      16,
      48,
      37,
      50,
      49,
      17,
      49,
      51,
      17,
      19,
      52,
      18,
      53,
      25,
      18,
      55,
      54,
      19,
      21,
      56,
      20,
      58,
      57,
      20,
      29,
      59,
      21,
      23,
      60,
      22,
      62,
      61,
      22,
      64,
      63,
      23,
      66,
      65,
      24,
      53,
      67,
      25,
      58,
      68,
      26,
      68,
      64,
      26,
      70,
      69,
      27,
      61,
      71,
      28,
      71,
      54,
      28,
      72,
      59,
      29,
      30,
      73,
      31,
      30,
      74,
      75,
      31,
      76,
      77,
      32,
      78,
      79,
      33,
      80,
      42,
      34,
      81,
      47,
      34,
      77,
      81,
      35,
      82,
      83,
      36,
      84,
      74,
      36,
      43,
      84,
      37,
      48,
      85,
      38,
      86,
      87,
      39,
      88,
      46,
      39,
      89,
      88,
      40,
      90,
      91,
      40,
      44,
      90,
      41,
      92,
      93,
      41,
      94,
      92,
      42,
      89,
      95,
      43,
      96,
      44,
      45,
      97,
      98,
      45,
      99,
      97,
      46,
      100,
      47,
      48,
      101,
      91,
      103,
      102,
      49,
      57,
      104,
      50,
      104,
      105,
      50,
      107,
      106,
      51,
      106,
      55,
      51,
      109,
      108,
      52,
      108,
      110,
      52,
      111,
      105,
      53,
      55,
      112,
      54,
      114,
      113,
      56,
      113,
      115,
      56,
      58,
      116,
      57,
      107,
      117,
      59,
      108,
      118,
      60,
      118,
      113,
      60,
      62,
      104,
      61,
      114,
      67,
      62,
      64,
      106,
      63,
      72,
      110,
      63,
      66,
      102,
      65,
      109,
      116,
      65,
      117,
      107,
      66,
      114,
      117,
      67,
      115,
      112,
      68,
      70,
      103,
      69,
      105,
      111,
      69,
      112,
      115,
      70,
      116,
      109,
      71,
      111,
      110,
      72,
      73,
      119,
      92,
      73,
      97,
      119,
      74,
      88,
      75,
      75,
      80,
      98,
      76,
      90,
      77,
      76,
      94,
      85,
      78,
      86,
      79,
      78,
      100,
      93,
      79,
      91,
      101,
      80,
      101,
      98,
      81,
      96,
      99,
      82,
      87,
      83,
      82,
      95,
      89,
      83,
      99,
      96,
      84,
      93,
      100,
      85,
      94,
      95,
      86,
      119,
      87,
      103,
      118,
      102
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      7,
      3,
      4,
      5,
      1,
      0,
      8,
      4,
      5,
      9,
      2,
      7,
      6,
      3,
      10,
      0,
      6,
      11,
      7,
      2,
      12,
      5,
      4,
      13,
      8,
      0,
      14,
      4,
      8,
      15,
      9,
      5,
      16,
      2,
      9,
      7,
      17,
      6,
      10,
      18,
      0,
      6,
      19,
      10,
      11,
      20,
      7,
      2,
      21,
      11,
      12,
      22,
      5,
      4,
      23,
      12,
      13,
      14,
      8,
      0,
      24,
      13,
      14,
      25,
      4,
      15,
      16,
      9,
      5,
      26,
      15,
      16,
      27,
      2,
      28,
      17,
      7,
      29,
      6,
      17,
      19,
      18,
      10,
      24,
      0,
      18,
      30,
      19,
      6,
      21,
      20,
      11,
      31,
      7,
      20,
      27,
      21,
      2,
      23,
      22,
      12,
      32,
      5,
      22,
      33,
      23,
      4,
      34,
      14,
      13,
      35,
      13,
      24,
      20,
      25,
      14,
      36,
      4,
      25,
      37,
      16,
      15,
      38,
      26,
      5,
      19,
      15,
      26,
      39,
      27,
      16,
      28,
      29,
      17,
      7,
      40,
      28,
      29,
      41,
      6,
      19,
      42,
      18,
      18,
      35,
      24,
      30,
      15,
      19,
      6,
      36,
      30,
      21,
      43,
      20,
      31,
      38,
      7,
      20,
      14,
      31,
      27,
      39,
      21,
      23,
      44,
      22,
      32,
      38,
      5,
      22,
      35,
      32,
      33,
      39,
      23,
      4,
      36,
      33,
      34,
      45,
      14,
      13,
      29,
      34,
      35,
      46,
      13,
      20,
      36,
      25,
      37,
      28,
      16,
      15,
      47,
      37,
      38,
      19,
      26,
      16,
      48,
      39,
      49,
      29,
      28,
      38,
      40,
      7,
      35,
      28,
      40,
      39,
      41,
      29,
      36,
      6,
      41,
      45,
      42,
      19,
      23,
      18,
      42,
      50,
      35,
      18,
      36,
      15,
      30,
      22,
      43,
      21,
      47,
      20,
      43,
      14,
      38,
      31,
      51,
      21,
      39,
      45,
      44,
      23,
      47,
      22,
      44,
      35,
      38,
      32,
      46,
      35,
      22,
      36,
      39,
      33,
      48,
      23,
      39,
      29,
      45,
      34,
      52,
      14,
      45,
      51,
      29,
      13,
      21,
      13,
      46,
      53,
      36,
      20,
      47,
      28,
      37,
      50,
      16,
      28,
      53,
      47,
      15,
      52,
      19,
      38,
      18,
      48,
      16,
      49,
      45,
      29,
      28,
      47,
      49,
      38,
      35,
      40,
      35,
      50,
      28,
      39,
      36,
      41,
      29,
      51,
      39,
      45,
      23,
      42,
      19,
      52,
      45,
      23,
      48,
      18,
      18,
      16,
      50,
      36,
      53,
      15,
      22,
      47,
      43,
      21,
      46,
      22,
      47,
      53,
      20,
      14,
      52,
      38,
      51,
      13,
      21,
      45,
      47,
      44,
      47,
      45,
      49
    ],
    [
      10,
      3,
      4,
      1,
      10,
      1,
      4,
      1,
      10,
      1,
      10,
      3,
      10,
      1,
      10,
      3,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      10,
      1,
      10,
      3,
      10,
      1,
      10,
      3,
      4,
      1,
      10,
      1,
      10,
      3,
      10,
      1,
      10,
      3,
      10,
      1,
      10,
      3,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      10,
      1,
      10,
      3,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      10,
      3,
      10,
      3,
      4,
      1,
      10,
      1,
      10,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      10,
      1,
      4,
      1,
      10,
      3,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1
    ],
    [
      0,
      1,
      4,
      10,
      18,
      33,
      25,
      13,
      7,
      2,
      0,
      2,
      6,
      3,
      0,
      3,
      8,
      16,
      29,
      37,
      21,
      11,
      5,
      1,
      1,
      5,
      9,
      4,
      2,
      7,
      14,
      26,
      44,
      64,
      40,
      23,
      12,
      6,
      3,
      6,
      12,
      22,
      39,
      61,
      46,
      28,
      15,
      8,
      4,
      9,
      17,
      31,
      51,
      77,
      55,
      34,
      19,
      10,
      5,
      11,
      20,
      36,
      57,
      74,
      50,
      30,
      17,
      9,
      7,
      13,
      24,
      14,
      8,
      15,
      27,
      16,
      10,
      19,
      32,
      18,
      11,
      21,
      35,
      20,
      12,
      23,
      38,
      22,
      13,
      25,
      42,
      67,
      95,
      117,
      94,
      66,
      41,
      24,
      14,
      24,
      41,
      65,
      93,
      116,
      84,
      58,
      43,
      26,
      15,
      28,
      47,
      54,
      81,
      112,
      99,
      70,
      45,
      27,
      16,
      27,
      45,
      69,
      98,
      111,
      101,
      72,
      48,
      29,
      17,
      30,
      49,
      31,
      18,
      32,
      52,
      79,
      110,
      101,
      111,
      80,
      53,
      33,
      19,
      34,
      54,
      47,
      71,
      100,
      109,
      78,
      52,
      32,
      20,
      35,
      56,
      83,
      115,
      96,
      68,
      43,
      58,
      36,
      21,
      37,
      59,
      85,
      117,
      95,
      114,
      82,
      56,
      35,
      22,
      38,
      60,
      87,
      113,
      82,
      114,
      89,
      62,
      39,
      23,
      40,
      63,
      91,
      110,
      79,
      108,
      86,
      60,
      38,
      25,
      33,
      53,
      42,
      26,
      43,
      68,
      44,
      28,
      46,
      71,
      47,
      29,
      48,
      59,
      37,
      30,
      50,
      75,
      105,
      98,
      69,
      97,
      103,
      73,
      49,
      31,
      49,
      73,
      102,
      92,
      66,
      94,
      107,
      76,
      51,
      34,
      55,
      81,
      54,
      36,
      58,
      84,
      57,
      39,
      62,
      88,
      61,
      40,
      64,
      90,
      63,
      41,
      66,
      92,
      65,
      42,
      53,
      80,
      105,
      75,
      104,
      88,
      62,
      89,
      67,
      44,
      68,
      96,
      112,
      81,
      55,
      77,
      106,
      90,
      64,
      45,
      70,
      97,
      69,
      46,
      61,
      88,
      104,
      74,
      57,
      84,
      116,
      100,
      71,
      48,
      72,
      91,
      63,
      90,
      106,
      76,
      107,
      85,
      59,
      50,
      74,
      104,
      75,
      51,
      76,
      106,
      77,
      52,
      78,
      108,
      79,
      56,
      82,
      113,
      83,
      60,
      86,
      118,
      87,
      65,
      92,
      102,
      119,
      118,
      86,
      108,
      78,
      109,
      93,
      67,
      89,
      114,
      95,
      70,
      99,
      115,
      83,
      113,
      87,
      118,
      119,
      103,
      97,
      72,
      101,
      110,
      91,
      73,
      103,
      119,
      102,
      80,
      111,
      98,
      105,
      85,
      107,
      94,
      117,
      93,
      109,
      100,
      116,
      96,
      115,
      99,
      112
    ]
  ],
  [
    [
      60,
      60,
      84,
      150,
      5
    ],
    [
      0,
      5,
      3,
      2,
      1,
      5,
      1
    ],
    [
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.9505389400446818,
      0.31060541440666,
      0.22527187675011134,
      0.9234591805200432,
      0.811259835281239,
      0.4953602287232232,
      -0.28898439998709113,
      0.905545301520232,
      -0.9482348825813248,
      -0.0661429058724223,
      0.5897694300412687,
      -0.8048584567435128,
      0.3850026606972961,
      -0.17821520179444497,
      0.5573198492846455,
      0.43770828092132913,
      -0.7055537161734994,
      -0.47099543268396477,
      0.15942571693352173,
      0.8676097873877849,
      0.672034158740193,
      -0.07536893206128828,
      0.7366746999634927,
      -0.27611427516133547,
      0.6173097224941693,
      0.29507212130446403,
      -0.4002320577587535,
      0.8005020002070211,
      -0.572220140779686,
      -0.9797305683832728,
      0.09147324868372425,
      -0.48506464839861135,
      -0.10938712768353538,
      -0.077625443055604,
      0.49114921095258185,
      -0.44708147399146936,
      0.8765600364281846,
      -0.5837373292901675,
      -0.1070214698162643,
      -0.030534562510880055,
      -0.48032295700839533,
      -0.4885089715007646,
      0.3978663998914824,
      -0.7765702238694555,
      0.6822034907471274,
      0.1918133228068355,
      0.7055537161734994,
      0.906840491792485,
      -0.1219494937709461,
      -0.403445960959549,
      0.6280254238123282,
      0.6350267067535635,
      0.4498056788826362,
      0.9074753674972387,
      -0.41979440192151796,
      0.01615913058015932,
      0.06626947277240314,
      -0.6265357486830353,
      -0.5692643226351298,
      -0.7985238317039677,
      0.1956982911922845,
      0.45684516531721964,
      -0.5417438956924641,
      -0.12998199600938296,
      -0.8836172994901965,
      0.589572158535474,
      0.8070147897744959,
      -0.03364221997799885,
      -0.5234589816590933,
      0.7504812130265828,
      0.4007400217341432,
      -0.8959359723957229,
      -0.19158853918710517,
      0.994576334838651,
      0.08551884183996056,
      0.05919832657489014,
      -0.007627926995456573,
      -0.7569762005245096,
      0.6533979236033961,
      -0.30639094278254136,
      -0.8218360220576466,
      -0.4897789665455064,
      -0.5772241482824383,
      -0.40531049659764024,
      -0.9140362595907603,
      0.15842531708664637,
      0.8200264596802714,
      0.5499618389763381,
      -0.8270506245404827,
      0.5611198316600023,
      -0.7034190217161427,
      -0.45027064700873987,
      -0.14094725008564313,
      0.08186391955921511,
      -0.9866266626073398,
      -0.9653847065000599,
      -0.1769920905236848,
      -0.8809267431637771,
      0.4308947110412016,
      0.8861844855180216,
      0.14387749580098166,
      -0.4404274331024326,
      -0.10514002074627506,
      -0.18475605974482368,
      -0.9771441932616906,
      0.6358781389770035,
      0.5897865143698491,
      -0.4978060464062349,
      0.28747024544453637,
      -0.4819231847637159,
      -0.8277142634818222,
      -0.7311680197177319,
      -0.6296283953996957,
      -0.2626050468830613,
      0.3681846209691294,
      -0.8724307067975289,
      0.32141055788287776,
      0.16814448551571956,
      0.7640334635865215,
      -0.6228806454776369,
      -0.5294657580906454,
      0.7850867877444604,
      -0.0773062510542163,
      -0.921649618142668,
      -0.3802442963746028,
      0.3662906510413074,
      0.016104316622435964,
      -0.9303611180320572,
      0.6023558346814333,
      -0.7546105426572385,
      0.2602506048711162,
      0.41771013634359344,
      -0.7946961168689696,
      0.24608727083191817,
      0.10289214018560855,
      0.9637708558690303,
      -0.8447900947291819,
      0.044214903842386744,
      0.5332679796553216,
      -0.7081172393758353,
      -0.500758540077091,
      -0.2634083151209191,
      0.5441095535597351,
      -0.7965932796918288,
      -0.7705003201971529,
      -0.009422920929282923,
      -0.6373699593934793
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      11,
      3,
      12,
      11,
      13,
      14,
      9,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      24,
      27,
      28,
      21,
      29,
      30,
      15,
      31,
      32,
      15,
      33,
      34,
      21,
      35,
      36,
      21,
      37,
      38,
      15,
      39,
      40,
      13,
      41,
      38,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      55,
      56,
      57,
      58,
      59,
      45,
      60,
      61,
      62,
      63,
      64,
      48,
      65,
      66,
      54,
      67,
      68,
      69,
      70,
      71,
      51,
      72,
      73,
      74,
      75,
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      42,
      83,
      84,
      80,
      85,
      86,
      57,
      87,
      88,
      89,
      90,
      91,
      69,
      92,
      93,
      89,
      94,
      95,
      96,
      97,
      98,
      74,
      99,
      100,
      62,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      109,
      110,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      118,
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      103,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      109,
      143,
      144,
      145,
      146,
      147,
      148
    ],
    [
      1,
      2,
      3,
      4,
      5,
      0,
      6,
      7,
      8,
      2,
      0,
      1,
      8,
      9,
      10,
      0,
      11,
      12,
      13,
      4,
      0,
      3,
      14,
      15,
      5,
      0,
      4,
      16,
      17,
      18,
      1,
      18,
      19,
      20,
      7,
      1,
      6,
      20,
      21,
      22,
      1,
      23,
      24,
      25,
      2,
      2,
      26,
      27,
      28,
      10,
      2,
      9,
      28,
      29,
      11,
      3,
      10,
      29,
      30,
      12,
      3,
      11,
      31,
      32,
      13,
      3,
      12,
      21,
      33,
      34,
      4,
      34,
      35,
      36,
      15,
      4,
      14,
      36,
      37,
      38,
      5,
      38,
      39,
      27,
      17,
      5,
      16,
      40,
      41,
      18,
      5,
      17,
      42,
      19,
      6,
      6,
      18,
      42,
      43,
      44,
      6,
      45,
      46,
      47,
      7,
      7,
      33,
      13,
      48,
      22,
      7,
      21,
      48,
      49,
      23,
      8,
      22,
      49,
      50,
      24,
      8,
      23,
      51,
      52,
      25,
      8,
      24,
      43,
      53,
      26,
      9,
      25,
      53,
      54,
      27,
      9,
      26,
      54,
      16,
      39,
      9,
      55,
      56,
      57,
      10,
      10,
      58,
      50,
      30,
      11,
      11,
      29,
      37,
      45,
      44,
      12,
      44,
      43,
      52,
      32,
      12,
      31,
      52,
      55,
      48,
      13,
      21,
      47,
      54,
      34,
      13,
      33,
      53,
      35,
      14,
      14,
      34,
      53,
      42,
      57,
      14,
      56,
      59,
      46,
      15,
      15,
      45,
      30,
      49,
      38,
      15,
      37,
      49,
      39,
      16,
      16,
      38,
      48,
      55,
      27,
      17,
      54,
      47,
      51,
      41,
      17,
      40,
      51,
      50,
      58,
      18,
      58,
      57,
      35,
      19,
      19,
      53,
      25,
      31,
      44,
      19,
      43,
      31,
      30,
      45,
      20,
      44,
      30,
      37,
      46,
      20,
      45,
      36,
      59,
      47,
      20,
      46,
      40,
      54,
      33,
      21,
      32,
      55,
      39,
      22,
      22,
      38,
      37,
      50,
      23,
      23,
      49,
      29,
      58,
      41,
      24,
      41,
      40,
      59,
      52,
      24,
      51,
      59,
      32,
      31,
      25,
      43,
      35,
      34,
      26,
      26,
      33,
      47,
      40,
      27,
      28,
      39,
      48,
      32,
      56,
      28,
      55,
      59,
      36,
      57,
      28,
      56,
      35,
      42,
      58,
      29,
      57,
      42,
      41,
      50,
      36,
      56,
      52,
      51,
      46
    ],
    [
      0,
      1,
      2,
      3,
      4,
      4,
      5,
      6,
      7,
      0,
      0,
      7,
      8,
      9,
      1,
      1,
      10,
      11,
      12,
      2,
      2,
      12,
      13,
      14,
      3,
      3,
      14,
      15,
      16,
      4,
      4,
      17,
      18,
      19,
      5,
      5,
      19,
      20,
      21,
      6,
      6,
      22,
      23,
      8,
      7,
      8,
      24,
      25,
      26,
      9,
      9,
      26,
      27,
      28,
      1,
      1,
      28,
      29,
      30,
      10,
      10,
      30,
      31,
      32,
      11,
      11,
      32,
      33,
      34,
      12,
      12,
      35,
      36,
      37,
      13,
      13,
      37,
      38,
      39,
      14,
      14,
      40,
      41,
      42,
      15,
      15,
      42,
      43,
      44,
      16,
      16,
      44,
      45,
      17,
      4,
      17,
      45,
      46,
      47,
      18,
      18,
      48,
      49,
      20,
      19,
      20,
      33,
      32,
      50,
      21,
      21,
      50,
      51,
      52,
      6,
      6,
      52,
      53,
      54,
      22,
      22,
      54,
      55,
      56,
      23,
      23,
      56,
      57,
      58,
      8,
      8,
      58,
      59,
      60,
      24,
      24,
      60,
      42,
      41,
      25,
      25,
      61,
      62,
      27,
      26,
      27,
      63,
      64,
      29,
      28,
      29,
      64,
      65,
      66,
      30,
      30,
      67,
      56,
      68,
      31,
      31,
      68,
      69,
      70,
      32,
      33,
      20,
      71,
      59,
      34,
      34,
      59,
      72,
      35,
      12,
      35,
      72,
      46,
      73,
      36,
      36,
      74,
      75,
      38,
      37,
      38,
      65,
      64,
      76,
      39,
      39,
      76,
      51,
      40,
      14,
      40,
      51,
      77,
      25,
      41,
      42,
      78,
      79,
      80,
      43,
      43,
      80,
      54,
      81,
      44,
      44,
      82,
      73,
      46,
      45,
      46,
      57,
      56,
      67,
      47,
      47,
      67,
      30,
      66,
      18,
      18,
      66,
      65,
      38,
      48,
      48,
      38,
      75,
      79,
      49,
      49,
      79,
      78,
      71,
      20,
      32,
      70,
      77,
      51,
      50,
      51,
      76,
      64,
      53,
      52,
      53,
      64,
      63,
      81,
      54,
      54,
      80,
      79,
      83,
      55,
      55,
      83,
      69,
      68,
      56,
      57,
      46,
      72,
      59,
      58,
      59,
      71,
      78,
      42,
      60,
      25,
      77,
      70,
      69,
      61,
      61,
      69,
      74,
      36,
      62,
      62,
      36,
      73,
      82,
      27,
      27,
      82,
      44,
      81,
      63,
      74,
      69,
      83,
      79,
      75
    ],
    [
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      10,
      11,
      3,
      0,
      3,
      4,
      0,
      4,
      5,
      0,
      5,
      18,
      6,
      1,
      1,
      6,
      7,
      1,
      7,
      22,
      23,
      8,
      1,
      8,
      2,
      2,
      8,
      25,
      26,
      9,
      2,
      9,
      10,
      3,
      11,
      12,
      3,
      12,
      13,
      3,
      13,
      34,
      14,
      4,
      4,
      14,
      15,
      4,
      15,
      38,
      16,
      5,
      5,
      16,
      17,
      5,
      17,
      18,
      6,
      18,
      19,
      6,
      19,
      44,
      45,
      20,
      6,
      20,
      7,
      7,
      20,
      47,
      33,
      21,
      7,
      21,
      22,
      8,
      23,
      24,
      8,
      24,
      25,
      9,
      26,
      27,
      9,
      27,
      39,
      55,
      28,
      9,
      28,
      10,
      10,
      28,
      57,
      58,
      29,
      10,
      29,
      11,
      11,
      29,
      30,
      11,
      30,
      44,
      31,
      12,
      12,
      31,
      32,
      12,
      32,
      48,
      21,
      13,
      13,
      21,
      33,
      13,
      33,
      34,
      14,
      34,
      35,
      14,
      35,
      57,
      56,
      36,
      14,
      36,
      15,
      15,
      36,
      46,
      45,
      37,
      15,
      37,
      38,
      16,
      38,
      39,
      16,
      39,
      27,
      16,
      27,
      54,
      40,
      17,
      17,
      40,
      41,
      17,
      41,
      58,
      42,
      18,
      18,
      42,
      19,
      19,
      42,
      35,
      53,
      43,
      19,
      43,
      44,
      20,
      45,
      46,
      20,
      46,
      47,
      21,
      48,
      22,
      22,
      48,
      39,
      38,
      49,
      22,
      49,
      23,
      23,
      49,
      50,
      23,
      50,
      41,
      51,
      24,
      24,
      51,
      52,
      24,
      52,
      31,
      43,
      25,
      25,
      43,
      53,
      25,
      53,
      26,
      26,
      53,
      34,
      33,
      54,
      26,
      54,
      27,
      28,
      55,
      56,
      28,
      56,
      57,
      29,
      58,
      50,
      29,
      50,
      49,
      37,
      30,
      30,
      37,
      45,
      30,
      45,
      44,
      31,
      44,
      43,
      31,
      52,
      32,
      32,
      52,
      59,
      56,
      55,
      32,
      55,
      48,
      33,
      47,
      54,
      34,
      53,
      35,
      35,
      42,
      57,
      36,
      56,
      59,
      36,
      59,
      46,
      37,
      49,
      38,
      39,
      48,
      55,
      40,
      54,
      47,
      40,
      47,
      46,
      59,
      51,
      40,
      51,
      41,
      41,
      50,
      58,
      42,
      58,
      57,
      51,
      59,
      52
    ]
  ],
  [
    [
      61,
      60,
      44,
      120,
      4
    ],
    [
      2,
      5,
      2,
      3,
      1,
      5,
      3
    ],
    [
      1,
      10,
      3,
      5,
      2,
      10,
      3,
      3,
      1
    ],
    [
      0,
      1,
      0.9996324920049082,
      0.027108687317114206,
      -0.3453645319230064,
      0.9380770006569533,
      -0.9468654869305521,
      0.3204853643018842,
      0.026383502537178073,
      -0.9992842587901671,
      0.03646110376411101,
      -0.3445027267682465,
      0.052767005074356145,
      -0.9457826253657716,
      -0.733418467693436,
      -0.2592781061686704,
      0.6283885859146393,
      -0.31898102938582834,
      -0.061207258133213774,
      0.8677149793190179,
      0.3583135301863987,
      -0.33528693069607346,
      -0.8768697425237396,
      0.23983052177429412,
      0.7400061526214967,
      -0.9367878857036191,
      0.6480396599985896,
      -0.7161141408536073,
      -0.36789873331656375,
      0.8580570704268036,
      0.6216561574614116,
      0.25677717182927856,
      -0.4672044433819639,
      -0.5185562123373408,
      0.47966104354858824,
      -0.839041576639225,
      -0.7233408664665031,
      -0.6409707286037684,
      0.4633551422383431,
      -0.22144994028415585,
      0.8514090780087727,
      -0.457348954204127,
      0.23360222169098194,
      0.5060445460857663,
      0.4807280464528263,
      0.27629162553840514,
      -0.7031856640126373,
      -0.4864456563414429,
      0.24367982291791487,
      0.4864456563414429,
      0.8451807779254605,
      -0.7295691665498153,
      -0.24367982291791487,
      0.839041576639225,
      0.7031856640126373,
      0.5185562123373408,
      -0.4998162460024541,
      0.7166270603727974,
      0.7295691665498153,
      -0.4807280464528263,
      -0.7166270603727974,
      0.4998162460024541,
      -0.8451807779254605,
      0.22144994028415585,
      -0.47966104354858824,
      -0.25677717182927856,
      0.4672044433819639,
      0.7161141408536073,
      -0.5060445460857663,
      -0.4633551422383431,
      -0.8580570704268036,
      -0.6480396599985896,
      0.2592781061686704,
      0.36789873331656375,
      -0.3583135301863987,
      -0.23360222169098194,
      0.457348954204127,
      -0.6216561574614116,
      -0.7400061526214967,
      -0.27629162553840514,
      0.6409707286037684,
      0.7233408664665031,
      -0.8514090780087727,
      0.733418467693436,
      -0.6283885859146393,
      -0.8677149793190179,
      0.3445027267682465,
      -0.23983052177429412,
      -0.03646110376411101,
      -0.9380770006569533,
      0.9367878857036191,
      0.061207258133213774,
      0.33528693069607346,
      0.8768697425237396,
      -0.052767005074356145,
      -0.3204853643018842,
      0.9457826253657716,
      0.31898102938582834,
      0.06120725813321377,
      0.3453645319230064,
      -0.027108687317114206,
      0.9468654869305521,
      -0.9996324920049082,
      -0.02638350253717807,
      0.9992842587901671,
      -0.02710868731711421,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      15,
      16,
      17,
      18,
      13,
      19,
      20,
      11,
      21,
      22,
      11,
      23,
      24,
      16,
      25,
      18,
      11,
      26,
      15,
      27,
      28,
      20,
      29,
      30,
      24,
      31,
      32,
      33,
      27,
      34,
      35,
      31,
      36,
      37,
      31,
      38,
      39,
      29,
      40,
      41,
      31,
      42,
      41,
      29,
      43,
      44,
      27,
      45,
      37,
      27,
      46,
      33,
      47,
      48,
      35,
      49,
      50,
      39,
      49,
      51,
      44,
      49,
      52,
      53,
      47,
      54,
      55,
      49,
      56,
      57,
      49,
      58,
      59,
      47,
      56,
      60,
      49,
      61,
      60,
      47,
      62,
      63,
      47,
      61,
      57,
      47,
      64,
      53,
      65,
      66,
      55,
      67,
      68,
      59,
      67,
      69,
      63,
      70,
      71,
      72,
      67,
      73,
      74,
      70,
      75,
      76,
      70,
      77,
      78,
      65,
      79,
      80,
      67,
      81,
      80,
      65,
      82,
      76,
      65,
      83,
      72,
      84,
      85,
      74,
      86,
      87,
      78,
      84,
      88,
      89,
      86,
      90,
      91,
      86,
      92,
      93,
      86,
      94,
      95,
      96,
      97,
      98,
      96,
      99,
      89,
      100,
      101,
      95,
      100,
      102,
      0,
      100,
      103,
      104,
      105,
      0,
      0,
      106
    ],
    [
      1,
      2,
      3,
      4,
      4,
      6,
      5,
      0,
      9,
      8,
      7,
      0,
      11,
      6,
      10,
      0,
      12,
      8,
      1,
      0,
      1,
      13,
      12,
      14,
      1,
      10,
      3,
      15,
      2,
      16,
      17,
      11,
      2,
      9,
      4,
      18,
      2,
      19,
      17,
      8,
      3,
      6,
      20,
      21,
      3,
      7,
      20,
      22,
      4,
      14,
      5,
      23,
      15,
      25,
      24,
      5,
      12,
      25,
      26,
      5,
      27,
      21,
      13,
      6,
      28,
      22,
      17,
      7,
      16,
      9,
      29,
      7,
      23,
      19,
      30,
      8,
      30,
      18,
      31,
      9,
      22,
      11,
      32,
      10,
      33,
      15,
      27,
      10,
      20,
      16,
      34,
      11,
      35,
      26,
      18,
      12,
      13,
      25,
      27,
      36,
      13,
      37,
      14,
      24,
      14,
      38,
      23,
      35,
      15,
      39,
      24,
      21,
      16,
      40,
      29,
      41,
      17,
      31,
      28,
      40,
      18,
      19,
      35,
      42,
      19,
      43,
      42,
      29,
      20,
      44,
      34,
      33,
      21,
      32,
      39,
      45,
      22,
      41,
      32,
      44,
      23,
      46,
      30,
      26,
      48,
      37,
      47,
      24,
      47,
      36,
      38,
      25,
      37,
      46,
      49,
      26,
      45,
      33,
      48,
      27,
      43,
      50,
      29,
      28,
      51,
      50,
      34,
      28,
      52,
      31,
      43,
      30,
      53,
      40,
      42,
      31,
      51,
      45,
      34,
      32,
      39,
      44,
      54,
      33,
      49,
      38,
      52,
      35,
      36,
      37,
      55,
      49,
      36,
      39,
      55,
      54,
      38,
      46,
      47,
      56,
      40,
      57,
      41,
      51,
      41,
      58,
      44,
      50,
      42,
      46,
      53,
      56,
      43,
      56,
      52,
      57,
      45,
      58,
      48,
      55,
      54,
      48,
      59,
      47,
      59,
      52,
      53,
      49,
      53,
      58,
      59,
      50,
      59,
      57,
      54,
      51,
      55,
      57,
      58,
      56
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      10,
      4,
      3,
      2,
      5,
      11,
      12,
      0,
      4,
      9,
      8,
      5,
      7,
      13,
      14,
      1,
      6,
      4,
      10,
      7,
      0,
      15,
      4,
      6,
      9,
      4,
      16,
      2,
      1,
      14,
      17,
      8,
      2,
      12,
      11,
      10,
      18,
      19,
      11,
      5,
      2,
      20,
      0,
      12,
      21,
      18,
      5,
      8,
      22,
      4,
      13,
      7,
      4,
      15,
      14,
      13,
      23,
      24,
      7,
      10,
      24,
      23,
      15,
      0,
      17,
      14,
      16,
      4,
      18,
      21,
      2,
      16,
      4,
      22,
      8,
      17,
      25,
      23,
      10,
      11,
      19,
      2,
      26,
      11,
      18,
      20,
      2,
      19,
      20,
      23,
      25,
      0,
      8,
      26,
      2,
      21,
      7,
      27,
      28,
      22,
      15,
      28,
      27,
      14,
      24,
      0,
      29,
      7,
      23,
      30,
      28,
      15,
      14,
      31,
      32,
      16,
      16,
      32,
      33,
      18,
      22,
      32,
      31,
      8,
      11,
      29,
      0,
      25,
      34,
      35,
      11,
      26,
      35,
      34,
      20,
      18,
      34,
      36,
      23,
      20,
      33,
      32,
      26,
      8,
      37,
      14,
      27,
      7,
      38,
      32,
      22,
      28,
      28,
      30,
      7,
      29,
      37,
      7,
      30,
      23,
      39,
      8,
      31,
      14,
      8,
      39,
      18,
      33,
      36,
      34,
      29,
      11,
      35,
      18,
      40,
      11,
      26,
      32,
      41,
      34,
      36,
      11,
      40,
      23,
      37,
      32,
      38,
      14,
      28,
      39,
      14,
      38,
      29,
      34,
      42,
      28,
      23,
      42,
      34,
      37,
      39,
      34,
      41,
      18,
      41,
      32,
      40,
      18,
      28,
      42,
      23,
      40,
      34,
      43,
      32,
      37,
      43,
      34,
      39,
      28,
      32,
      43,
      28,
      40
    ],
    [
      10,
      3,
      5,
      2,
      10,
      3,
      3,
      1,
      10,
      3,
      5,
      2,
      3,
      1,
      10,
      3,
      10,
      3,
      3,
      1,
      5,
      2,
      10,
      3,
      3,
      1,
      3,
      1,
      10,
      3,
      5,
      2,
      5,
      2,
      3,
      1,
      10,
      3,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      10,
      3,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      10,
      3,
      5,
      2,
      3,
      1,
      3,
      1,
      10,
      3,
      3,
      1,
      10,
      3,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      5,
      14,
      26,
      35,
      30,
      19,
      9,
      2,
      0,
      2,
      7,
      11,
      3,
      0,
      3,
      10,
      21,
      27,
      24,
      25,
      14,
      12,
      4,
      0,
      4,
      1,
      1,
      4,
      8,
      9,
      17,
      16,
      22,
      20,
      10,
      6,
      1,
      6,
      15,
      13,
      5,
      2,
      9,
      8,
      2,
      8,
      18,
      30,
      42,
      43,
      40,
      28,
      16,
      7,
      3,
      11,
      22,
      34,
      44,
      45,
      39,
      27,
      15,
      6,
      3,
      6,
      10,
      4,
      12,
      23,
      18,
      8,
      5,
      13,
      24,
      36,
      47,
      49,
      46,
      35,
      23,
      12,
      5,
      12,
      14,
      7,
      16,
      17,
      7,
      17,
      29,
      40,
      50,
      51,
      44,
      32,
      20,
      11,
      9,
      19,
      31,
      29,
      17,
      10,
      20,
      32,
      33,
      21,
      11,
      20,
      22,
      13,
      15,
      21,
      33,
      45,
      54,
      55,
      47,
      37,
      25,
      13,
      25,
      24,
      14,
      25,
      37,
      38,
      26,
      15,
      27,
      21,
      16,
      28,
      41,
      34,
      22,
      18,
      23,
      26,
      38,
      49,
      56,
      53,
      43,
      31,
      19,
      18,
      19,
      30,
      23,
      35,
      26,
      24,
      27,
      39,
      48,
      36,
      28,
      40,
      29,
      28,
      29,
      31,
      42,
      52,
      56,
      59,
      58,
      51,
      41,
      30,
      35,
      46,
      52,
      42,
      31,
      43,
      42,
      32,
      44,
      34,
      32,
      34,
      41,
      50,
      57,
      59,
      55,
      48,
      39,
      33,
      33,
      39,
      45,
      36,
      48,
      54,
      58,
      57,
      53,
      52,
      46,
      38,
      37,
      36,
      37,
      47,
      38,
      46,
      49,
      40,
      43,
      53,
      57,
      50,
      41,
      51,
      50,
      44,
      51,
      58,
      54,
      45,
      47,
      55,
      59,
      56,
      49,
      48,
      55,
      54,
      52,
      53,
      56,
      57,
      58,
      59
    ]
  ],
  [
    [
      62,
      30,
      22,
      60,
      4
    ],
    [
      2,
      5,
      3,
      5,
      2,
      3,
      1
    ],
    [
      1,
      6,
      1,
      5,
      3,
      6,
      1,
      5,
      2
    ],
    [
      0,
      1,
      0.8660254037844386,
      0.5,
      -0.8660254037844386,
      -0.6454972243679028,
      0.5773502691896257,
      0.6454972243679028,
      -0.5773502691896257,
      -0.5,
      0.7557613140761708,
      -0.30901699437494745,
      0.11026408970826791,
      0.8090169943749475,
      -0.11026408970826791,
      -0.7557613140761708,
      -0.17841104488654497,
      0.9341723589627157,
      -0.46708617948135783,
      -0.35682208977308993,
      0.46708617948135783,
      0.35682208977308993,
      0.17841104488654497,
      -0.9341723589627157,
      0.30901699437494745,
      -0.8090169943749475,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      0,
      3,
      5,
      6,
      3,
      7,
      8,
      3,
      2,
      0,
      9,
      10,
      6,
      11,
      12,
      8,
      13,
      14,
      6,
      13,
      15,
      8,
      11,
      4,
      0,
      9,
      5,
      6,
      9,
      16,
      17,
      11,
      18,
      19,
      13,
      20,
      21,
      13,
      22,
      23,
      11,
      7,
      8,
      9,
      10,
      6,
      24,
      12,
      8,
      25,
      0,
      0,
      26,
      14,
      6,
      25,
      17,
      19,
      0,
      19,
      23,
      0,
      15,
      8,
      24,
      21,
      17,
      0,
      23,
      21,
      0,
      16,
      17,
      24,
      18,
      19,
      25,
      20,
      21,
      25,
      22,
      23,
      24
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      10,
      9,
      8,
      0,
      13,
      12,
      11,
      0,
      16,
      15,
      14,
      0,
      1,
      17,
      18,
      19,
      1,
      20,
      12,
      21,
      1,
      14,
      22,
      23,
      2,
      17,
      24,
      13,
      2,
      25,
      15,
      18,
      2,
      19,
      20,
      23,
      3,
      26,
      27,
      19,
      3,
      28,
      6,
      25,
      3,
      8,
      22,
      29,
      4,
      26,
      24,
      7,
      4,
      21,
      9,
      27,
      4,
      19,
      28,
      29,
      21,
      26,
      8,
      5,
      9,
      22,
      28,
      5,
      16,
      11,
      10,
      5,
      10,
      27,
      24,
      6,
      29,
      15,
      17,
      6,
      27,
      18,
      13,
      7,
      29,
      25,
      10,
      7,
      14,
      20,
      28,
      8,
      23,
      12,
      26,
      9,
      25,
      17,
      14,
      11,
      15,
      22,
      20,
      11,
      16,
      18,
      24,
      12,
      23,
      21,
      16,
      13
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      10,
      11,
      3,
      2,
      5,
      7,
      12,
      0,
      4,
      13,
      14,
      5,
      3,
      15,
      16,
      4,
      7,
      17,
      18,
      1,
      6,
      19,
      20,
      7,
      0,
      21,
      4,
      6,
      9,
      11,
      21,
      2,
      8,
      13,
      14,
      9,
      1,
      18,
      16,
      8,
      11,
      17,
      15,
      3,
      10,
      19,
      20,
      11,
      2,
      12,
      8,
      10,
      19,
      17,
      7,
      5,
      20,
      18,
      12,
      7,
      2,
      21,
      0,
      12,
      21,
      15,
      13,
      4,
      10,
      19,
      5,
      14,
      20,
      18,
      16,
      15,
      14,
      6,
      4,
      16,
      15,
      13,
      18,
      17,
      14,
      9,
      19,
      6,
      19,
      17,
      11,
      9,
      20,
      15,
      21,
      11,
      12,
      18,
      13,
      8,
      14,
      10,
      8,
      16
    ],
    [
      6,
      1,
      5,
      3,
      6,
      1,
      5,
      2,
      6,
      1,
      5,
      3,
      5,
      2,
      6,
      1,
      6,
      1,
      5,
      2,
      5,
      3,
      6,
      1,
      5,
      2,
      5,
      2,
      6,
      1,
      6,
      1,
      5,
      3,
      5,
      2,
      6,
      1,
      6,
      1,
      5,
      3,
      5,
      3
    ],
    [
      0,
      1,
      5,
      19,
      10,
      2,
      0,
      2,
      8,
      13,
      3,
      0,
      3,
      11,
      19,
      16,
      4,
      0,
      4,
      14,
      7,
      1,
      1,
      7,
      23,
      10,
      20,
      6,
      1,
      6,
      21,
      17,
      5,
      2,
      10,
      23,
      25,
      9,
      2,
      9,
      18,
      5,
      17,
      8,
      3,
      13,
      29,
      16,
      28,
      12,
      3,
      12,
      25,
      26,
      11,
      4,
      16,
      29,
      21,
      15,
      4,
      15,
      27,
      11,
      26,
      14,
      5,
      18,
      28,
      16,
      19,
      6,
      20,
      24,
      28,
      12,
      6,
      12,
      25,
      23,
      29,
      21,
      7,
      14,
      24,
      20,
      27,
      22,
      7,
      22,
      13,
      29,
      23,
      8,
      17,
      26,
      14,
      24,
      8,
      24,
      28,
      18,
      22,
      13,
      9,
      25,
      26,
      17,
      21,
      15,
      9,
      15,
      27,
      22,
      18,
      10,
      19,
      11,
      27,
      20
    ]
  ],
  [
    [
      63,
      60,
      32,
      120,
      4
    ],
    [
      4,
      3,
      1,
      5,
      3,
      3,
      2,
      5,
      2
    ],
    [
      1,
      6,
      1,
      10,
      3,
      6,
      5,
      10,
      7
    ],
    [
      0,
      1,
      0.7913673486983457,
      0.6113409191393546,
      -0.6820030708669234,
      0.4014151117159585,
      -0.4944105967818434,
      -0.6179162098340442,
      0.1126514014248428,
      0.7833083315929099,
      0.9007316265297681,
      -0.1659772425819362,
      0.7860486709989698,
      -0.01752268372946338,
      0.41492683104072103,
      0.4628863602868818,
      -0.7549125894212049,
      -0.46458928075638417,
      -0.5726387930355009,
      0.802830223431917,
      -0.876169792138844,
      -0.4525240880751785,
      -0.008605801292796323,
      -0.9998094297109955,
      -0.8708511144394682,
      0.16539212175886567,
      0.8343963551623274,
      0.2991971589975185,
      -0.26910779393215783,
      0.9487004533517756,
      0.8278221079754865,
      -0.314431801434409,
      0.21872855566284477,
      -0.5546363234425816,
      0.40428947564196915,
      -0.7948408454507542,
      0.8987000724238126,
      -0.4061817645901088,
      -0.14378748300260769,
      0.943295404303227,
      0.03316763568372039,
      -0.03316763568372039,
      -0.9487004533517756,
      0.314431801434409,
      -0.6906088721597197,
      -0.598394317995037,
      -0.027848957984344475,
      -0.33078424351773134,
      -0.5779574707348768,
      0.18491401359787285,
      0.1544248384013595,
      0.9366352606705699,
      -0.1544248384013595,
      -0.9366352606705699,
      -0.7635183907140013,
      0.33078424351773134,
      0.10075847653862607,
      -0.7614868366080457,
      0.5668072334748242,
      0.7614868366080457,
      -0.5668072334748242,
      0.27568204111899863,
      -0.18491401359787285,
      0.21669700155688928,
      -0.8278221079754865,
      0.46458928075638417,
      0.26910779393215783,
      0.1659772425819362,
      0.7635183907140013,
      0.5546363234425816,
      -0.27568204111899863,
      -0.943295404303227,
      0.027848957984344475,
      -0.21669700155688928,
      0.7948408454507542,
      0.5779574707348768,
      0.7549125894212049,
      -0.4628863602868818,
      -0.41492683104072103,
      -0.7833083315929099,
      -0.40428947564196915,
      0.4525240880751785,
      0.14378748300260769,
      -0.2991971589975185,
      0.876169792138844,
      0.5726387930355009,
      -0.802830223431917,
      -0.21872855566284477,
      -0.8343963551623274,
      0.8708511144394682,
      -0.16539212175886567,
      -0.10075847653862607,
      0.598394317995037,
      -0.9007316265297681,
      -0.4014151117159585,
      -0.1126514014248428,
      -0.6113409191393546,
      -0.8987000724238126,
      0.4061817645901088,
      0.6906088721597197,
      0.6820030708669234,
      -0.7913673486983457,
      -0.7860486709989698,
      0.6179162098340442,
      0.01752268372946338,
      0.4944105967818434,
      0.008605801292796323,
      0.9998094297109955,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      9,
      15,
      16,
      17,
      15,
      18,
      19,
      11,
      20,
      21,
      11,
      22,
      23,
      13,
      24,
      25,
      15,
      26,
      27,
      15,
      28,
      29,
      11,
      30,
      17,
      31,
      32,
      19,
      33,
      34,
      21,
      35,
      36,
      25,
      37,
      38,
      27,
      39,
      40,
      29,
      31,
      41,
      42,
      43,
      44,
      45,
      37,
      46,
      47,
      39,
      48,
      49,
      35,
      50,
      51,
      43,
      52,
      53,
      31,
      54,
      55,
      33,
      56,
      45,
      35,
      57,
      58,
      31,
      59,
      60,
      43,
      61,
      62,
      39,
      63,
      58,
      35,
      64,
      65,
      43,
      66,
      42,
      67,
      68,
      47,
      69,
      70,
      49,
      71,
      72,
      55,
      71,
      73,
      60,
      74,
      75,
      62,
      74,
      76,
      65,
      77,
      78,
      79,
      77,
      80,
      81,
      74,
      82,
      83,
      71,
      84,
      81,
      67,
      85,
      86,
      67,
      87,
      86,
      69,
      88,
      83,
      77,
      89,
      90,
      77,
      91,
      92,
      74,
      93,
      94,
      67,
      95,
      79,
      96,
      97,
      90,
      98,
      99,
      92,
      98,
      100,
      94,
      96,
      101,
      0,
      96,
      102,
      103,
      104,
      105,
      103,
      96,
      106,
      107,
      104,
      0,
      0,
      108
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      9,
      4,
      8,
      0,
      12,
      11,
      10,
      0,
      14,
      2,
      13,
      0,
      1,
      15,
      7,
      16,
      1,
      17,
      11,
      18,
      1,
      19,
      5,
      20,
      2,
      21,
      22,
      23,
      2,
      16,
      24,
      25,
      3,
      26,
      12,
      27,
      3,
      28,
      6,
      22,
      3,
      19,
      10,
      29,
      4,
      30,
      18,
      31,
      4,
      27,
      32,
      33,
      35,
      28,
      34,
      5,
      25,
      36,
      9,
      5,
      37,
      18,
      26,
      6,
      32,
      17,
      13,
      6,
      39,
      12,
      38,
      7,
      40,
      29,
      37,
      7,
      30,
      23,
      41,
      8,
      11,
      24,
      28,
      8,
      35,
      21,
      42,
      8,
      32,
      22,
      43,
      9,
      44,
      16,
      42,
      9,
      46,
      17,
      45,
      10,
      33,
      37,
      14,
      10,
      36,
      22,
      15,
      11,
      47,
      20,
      36,
      12,
      21,
      31,
      48,
      13,
      46,
      30,
      49,
      13,
      24,
      18,
      43,
      14,
      50,
      27,
      49,
      14,
      15,
      51,
      35,
      38,
      15,
      44,
      34,
      23,
      16,
      47,
      28,
      29,
      17,
      20,
      27,
      40,
      19,
      52,
      39,
      34,
      19,
      53,
      38,
      45,
      20,
      53,
      37,
      54,
      21,
      55,
      43,
      50,
      23,
      56,
      25,
      52,
      24,
      41,
      32,
      48,
      25,
      48,
      35,
      57,
      26,
      54,
      46,
      39,
      26,
      50,
      45,
      31,
      29,
      52,
      36,
      51,
      30,
      57,
      43,
      44,
      31,
      58,
      33,
      53,
      33,
      41,
      46,
      55,
      54,
      47,
      59,
      34,
      42,
      47,
      56,
      38,
      49,
      40,
      58,
      39,
      59,
      45,
      51,
      40,
      56,
      50,
      59,
      41,
      55,
      52,
      58,
      42,
      59,
      48,
      58,
      44,
      57,
      53,
      56,
      49,
      51,
      55,
      54,
      57
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      6,
      7,
      3,
      2,
      5,
      10,
      11,
      0,
      4,
      12,
      13,
      5,
      3,
      10,
      11,
      4,
      7,
      9,
      14,
      1,
      0,
      15,
      16,
      6,
      9,
      17,
      18,
      2,
      8,
      12,
      13,
      9,
      1,
      17,
      18,
      8,
      7,
      5,
      19,
      3,
      2,
      15,
      20,
      6,
      14,
      12,
      10,
      5,
      21,
      15,
      0,
      11,
      22,
      19,
      12,
      4,
      22,
      19,
      5,
      13,
      17,
      1,
      10,
      3,
      23,
      15,
      4,
      11,
      24,
      25,
      9,
      7,
      13,
      26,
      14,
      9,
      24,
      25,
      1,
      14,
      13,
      26,
      16,
      15,
      11,
      21,
      6,
      16,
      19,
      12,
      17,
      9,
      27,
      15,
      2,
      18,
      26,
      14,
      12,
      8,
      23,
      15,
      8,
      18,
      24,
      28,
      5,
      7,
      24,
      28,
      3,
      19,
      13,
      22,
      20,
      15,
      18,
      27,
      6,
      20,
      12,
      29,
      24,
      10,
      5,
      29,
      24,
      14,
      21,
      26,
      8,
      15,
      4,
      15,
      27,
      22,
      1,
      30,
      24,
      10,
      3,
      30,
      24,
      17,
      11,
      27,
      22,
      23,
      25,
      26,
      20,
      9,
      25,
      6,
      21,
      1,
      26,
      20,
      22,
      16,
      16,
      5,
      29,
      11,
      12,
      31,
      24,
      17,
      9,
      31,
      24,
      19,
      18,
      21,
      26,
      23,
      28,
      22,
      16,
      5,
      28,
      6,
      27,
      3,
      20,
      9,
      31,
      18,
      23,
      26,
      29,
      12,
      21,
      18,
      30,
      1,
      27,
      11,
      30,
      3,
      31,
      12,
      23,
      22,
      18,
      31,
      26,
      25,
      18,
      30,
      6,
      25,
      22,
      28,
      11,
      29,
      11,
      30,
      6,
      28,
      26,
      31,
      22,
      29
    ],
    [
      6,
      1,
      10,
      3,
      6,
      5,
      10,
      7,
      6,
      5,
      10,
      3,
      10,
      7,
      6,
      5,
      6,
      1,
      10,
      7,
      6,
      5,
      10,
      7,
      10,
      7,
      6,
      1,
      6,
      1,
      10,
      3,
      6,
      5,
      6,
      1,
      10,
      3,
      6,
      5,
      6,
      1,
      6,
      5,
      10,
      3,
      6,
      1,
      10,
      3,
      6,
      1,
      10,
      3,
      6,
      1,
      6,
      5,
      6,
      1,
      6,
      5,
      6,
      5
    ],
    [
      0,
      1,
      5,
      16,
      9,
      2,
      0,
      2,
      8,
      23,
      42,
      52,
      38,
      19,
      12,
      3,
      0,
      3,
      10,
      27,
      14,
      4,
      0,
      4,
      13,
      31,
      49,
      53,
      39,
      19,
      7,
      1,
      1,
      7,
      20,
      37,
      17,
      6,
      1,
      6,
      18,
      13,
      30,
      48,
      44,
      35,
      15,
      5,
      2,
      9,
      25,
      42,
      56,
      58,
      49,
      33,
      14,
      4,
      2,
      4,
      13,
      30,
      21,
      8,
      3,
      12,
      29,
      36,
      28,
      11,
      3,
      11,
      22,
      8,
      21,
      41,
      50,
      46,
      26,
      10,
      5,
      15,
      34,
      38,
      19,
      7,
      5,
      7,
      20,
      40,
      53,
      58,
      57,
      44,
      25,
      16,
      6,
      17,
      26,
      45,
      54,
      51,
      34,
      15,
      28,
      11,
      6,
      11,
      22,
      24,
      32,
      18,
      8,
      22,
      28,
      15,
      35,
      23,
      9,
      16,
      36,
      29,
      20,
      37,
      27,
      14,
      32,
      24,
      9,
      24,
      43,
      48,
      44,
      25,
      10,
      26,
      45,
      39,
      19,
      12,
      10,
      12,
      29,
      47,
      52,
      56,
      55,
      50,
      33,
      27,
      13,
      18,
      17,
      26,
      46,
      31,
      14,
      32,
      43,
      41,
      50,
      33,
      16,
      25,
      42,
      52,
      47,
      36,
      17,
      37,
      40,
      54,
      59,
      57,
      48,
      43,
      32,
      18,
      20,
      40,
      54,
      51,
      47,
      29,
      21,
      30,
      31,
      46,
      45,
      39,
      38,
      34,
      35,
      23,
      21,
      23,
      42,
      56,
      55,
      41,
      22,
      24,
      43,
      41,
      55,
      59,
      51,
      47,
      36,
      28,
      27,
      33,
      49,
      53,
      40,
      37,
      30,
      31,
      49,
      58,
      57,
      48,
      34,
      51,
      59,
      57,
      44,
      35,
      38,
      52,
      56,
      58,
      53,
      39,
      45,
      54,
      59,
      55,
      50,
      46
    ]
  ],
  [
    [
      64,
      60,
      104,
      180,
      6
    ],
    [
      0,
      5,
      3,
      5,
      2,
      3,
      1
    ],
    [
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.7861513777574233,
      0.6180339887498949,
      -0.6180339887498949,
      -1,
      -0.7861513777574233,
      -0.48586827175664565,
      0.38196601125010515,
      -0.38196601125010515,
      0.48586827175664565,
      -0.3177508827491172,
      -0.8678342830067508,
      0.8678342830067508,
      -0.10390226050654053,
      0.10390226050654053,
      0.9183170947506725,
      0.3177508827491172,
      -0.9183170947506725,
      -0.2360679774997897,
      0.2360679774997897
    ],
    [
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      1,
      0,
      2,
      3,
      0,
      4,
      2,
      0,
      5,
      0,
      0,
      0,
      5,
      0,
      0,
      0,
      5,
      0,
      6,
      4,
      0,
      3,
      6,
      3,
      0,
      6,
      6,
      0,
      4,
      4,
      0,
      2,
      2,
      0,
      3,
      7,
      3,
      3,
      8,
      7,
      2,
      3,
      6,
      0,
      6,
      4,
      0,
      7,
      9,
      6,
      4,
      7,
      3,
      0,
      2,
      3,
      0,
      4,
      2,
      3,
      10,
      4,
      2,
      9,
      10,
      6,
      10,
      8,
      3,
      3,
      10,
      10,
      6,
      8,
      4,
      4,
      7,
      7,
      2,
      9,
      8,
      2,
      7,
      10,
      4,
      4,
      9,
      6,
      10,
      9,
      10,
      6,
      11,
      12,
      9,
      13,
      14,
      7,
      10,
      8,
      2,
      12,
      15,
      10,
      14,
      16,
      9,
      6,
      8,
      7,
      2,
      7,
      9,
      9,
      17,
      13,
      7,
      12,
      15,
      10,
      13,
      14,
      9,
      15,
      18,
      13,
      8,
      11,
      15,
      10,
      13,
      12,
      9,
      17,
      14,
      7,
      12,
      18,
      8,
      14,
      16,
      9,
      15,
      17,
      13,
      8,
      19,
      11,
      16,
      15,
      18,
      8,
      16,
      20,
      17,
      8,
      11,
      12,
      8,
      14,
      16,
      17,
      18,
      19,
      11,
      16,
      20,
      20,
      17,
      18,
      18,
      19,
      11
    ],
    [
      1,
      2,
      3,
      4,
      5,
      6,
      0,
      6,
      7,
      8,
      9,
      2,
      0,
      1,
      10,
      11,
      12,
      13,
      0,
      14,
      15,
      16,
      7,
      4,
      0,
      3,
      7,
      17,
      18,
      19,
      0,
      20,
      9,
      8,
      21,
      6,
      0,
      5,
      12,
      11,
      7,
      1,
      1,
      6,
      17,
      4,
      3,
      16,
      1,
      22,
      23,
      21,
      5,
      9,
      1,
      8,
      5,
      20,
      24,
      25,
      2,
      25,
      26,
      27,
      28,
      11,
      2,
      10,
      29,
      30,
      6,
      12,
      2,
      11,
      6,
      27,
      26,
      13,
      2,
      12,
      31,
      30,
      29,
      14,
      3,
      13,
      29,
      32,
      17,
      15,
      3,
      14,
      17,
      30,
      33,
      34,
      3,
      35,
      19,
      18,
      22,
      7,
      4,
      7,
      30,
      15,
      14,
      32,
      4,
      36,
      37,
      22,
      16,
      19,
      4,
      18,
      16,
      35,
      23,
      20,
      5,
      19,
      23,
      22,
      38,
      9,
      5,
      8,
      39,
      25,
      24,
      27,
      8,
      16,
      18,
      38,
      20,
      23,
      8,
      22,
      20,
      19,
      40,
      41,
      9,
      42,
      43,
      27,
      21,
      25,
      9,
      24,
      21,
      39,
      26,
      10,
      10,
      25,
      44,
      45,
      12,
      27,
      10,
      26,
      12,
      21,
      24,
      28,
      10,
      27,
      46,
      45,
      44,
      47,
      11,
      47,
      48,
      14,
      13,
      30,
      11,
      29,
      13,
      31,
      15,
      17,
      13,
      45,
      48,
      47,
      49,
      30,
      14,
      50,
      34,
      33,
      36,
      17,
      15,
      49,
      51,
      36,
      32,
      34,
      15,
      33,
      32,
      50,
      37,
      35,
      16,
      34,
      37,
      36,
      52,
      19,
      18,
      32,
      33,
      52,
      35,
      37,
      18,
      36,
      35,
      34,
      53,
      54,
      20,
      22,
      54,
      41,
      40,
      42,
      21,
      41,
      43,
      42,
      55,
      25,
      23,
      52,
      53,
      42,
      38,
      41,
      23,
      40,
      38,
      54,
      43,
      39,
      24,
      38,
      40,
      55,
      39,
      43,
      24,
      42,
      39,
      41,
      56,
      46,
      26,
      55,
      56,
      47,
      28,
      45,
      26,
      44,
      28,
      46,
      48,
      31,
      28,
      43,
      56,
      55,
      57,
      45,
      28,
      44,
      49,
      31,
      48,
      29,
      29,
      47,
      31,
      45,
      51,
      50,
      31,
      47,
      58,
      50,
      51,
      33,
      32,
      48,
      51,
      49,
      58,
      34,
      33,
      49,
      50,
      48,
      57,
      59,
      35,
      36,
      59,
      54,
      53,
      40,
      37,
      58,
      57,
      40,
      52,
      54,
      37,
      53,
      52,
      59,
      41,
      38,
      39,
      42,
      57,
      46,
      56,
      44,
      43,
      59,
      58,
      44,
      55,
      46,
      46,
      55,
      53,
      58,
      59,
      51,
      49,
      56,
      59,
      57,
      53,
      50,
      51,
      57,
      58,
      56,
      54,
      52
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      5,
      6,
      7,
      8,
      9,
      0,
      0,
      9,
      10,
      11,
      12,
      1,
      1,
      13,
      14,
      15,
      16,
      2,
      2,
      16,
      17,
      18,
      19,
      3,
      3,
      20,
      21,
      22,
      23,
      4,
      4,
      23,
      24,
      25,
      6,
      5,
      6,
      25,
      17,
      16,
      15,
      7,
      7,
      26,
      27,
      22,
      21,
      8,
      8,
      21,
      20,
      28,
      29,
      9,
      9,
      30,
      31,
      32,
      33,
      10,
      10,
      33,
      34,
      25,
      24,
      11,
      11,
      24,
      23,
      35,
      36,
      12,
      12,
      36,
      37,
      38,
      39,
      1,
      1,
      39,
      40,
      41,
      42,
      13,
      13,
      42,
      43,
      44,
      45,
      14,
      14,
      46,
      47,
      48,
      7,
      15,
      17,
      25,
      43,
      42,
      41,
      18,
      18,
      49,
      50,
      48,
      47,
      19,
      19,
      47,
      46,
      51,
      52,
      3,
      3,
      52,
      53,
      54,
      28,
      20,
      22,
      27,
      55,
      56,
      57,
      23,
      7,
      48,
      50,
      54,
      53,
      26,
      26,
      53,
      52,
      51,
      58,
      27,
      28,
      59,
      60,
      57,
      56,
      29,
      29,
      56,
      55,
      61,
      30,
      9,
      30,
      61,
      62,
      36,
      35,
      31,
      31,
      35,
      23,
      57,
      60,
      32,
      32,
      60,
      63,
      64,
      65,
      33,
      33,
      66,
      40,
      39,
      38,
      34,
      34,
      38,
      37,
      44,
      43,
      25,
      36,
      67,
      68,
      69,
      44,
      37,
      40,
      70,
      71,
      72,
      18,
      41,
      44,
      73,
      74,
      72,
      71,
      45,
      45,
      71,
      70,
      75,
      76,
      14,
      14,
      76,
      77,
      78,
      51,
      46,
      18,
      72,
      74,
      78,
      77,
      49,
      49,
      77,
      76,
      75,
      79,
      50,
      54,
      50,
      80,
      81,
      82,
      28,
      27,
      83,
      84,
      85,
      61,
      55,
      51,
      86,
      87,
      82,
      81,
      58,
      58,
      81,
      80,
      88,
      83,
      27,
      28,
      82,
      87,
      85,
      84,
      59,
      59,
      84,
      83,
      88,
      89,
      60,
      61,
      90,
      91,
      65,
      64,
      62,
      62,
      64,
      63,
      92,
      67,
      36,
      60,
      89,
      93,
      94,
      92,
      63,
      65,
      91,
      69,
      68,
      66,
      33,
      66,
      68,
      67,
      92,
      95,
      40,
      69,
      91,
      96,
      97,
      73,
      44,
      40,
      95,
      97,
      96,
      75,
      70,
      73,
      97,
      95,
      92,
      98,
      74,
      78,
      74,
      99,
      100,
      86,
      51,
      75,
      101,
      87,
      86,
      100,
      79,
      79,
      100,
      99,
      88,
      80,
      50,
      85,
      87,
      94,
      93,
      90,
      61,
      88,
      102,
      91,
      90,
      93,
      89,
      94,
      87,
      101,
      103,
      98,
      92,
      91,
      102,
      103,
      101,
      75,
      96,
      98,
      103,
      102,
      88,
      99,
      74
    ],
    [
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      2,
      5,
      3,
      3,
      1,
      3,
      1,
      5,
      2,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      13,
      14,
      3,
      0,
      3,
      4,
      0,
      4,
      19,
      20,
      5,
      0,
      5,
      6,
      0,
      6,
      1,
      1,
      6,
      7,
      1,
      7,
      16,
      22,
      8,
      1,
      8,
      9,
      1,
      9,
      25,
      10,
      2,
      2,
      10,
      11,
      2,
      11,
      12,
      2,
      12,
      13,
      3,
      14,
      15,
      3,
      15,
      34,
      35,
      16,
      3,
      16,
      7,
      3,
      7,
      4,
      4,
      7,
      17,
      4,
      17,
      32,
      36,
      18,
      4,
      18,
      19,
      5,
      20,
      9,
      5,
      9,
      8,
      5,
      8,
      21,
      5,
      21,
      27,
      12,
      6,
      6,
      12,
      11,
      6,
      11,
      30,
      17,
      7,
      8,
      22,
      23,
      8,
      23,
      41,
      39,
      21,
      9,
      20,
      38,
      42,
      24,
      9,
      24,
      25,
      10,
      25,
      26,
      10,
      26,
      27,
      10,
      27,
      28,
      10,
      28,
      47,
      29,
      11,
      11,
      29,
      30,
      12,
      27,
      26,
      12,
      26,
      45,
      31,
      13,
      13,
      31,
      30,
      13,
      30,
      29,
      13,
      29,
      14,
      14,
      29,
      48,
      50,
      32,
      14,
      32,
      17,
      14,
      17,
      15,
      15,
      17,
      30,
      15,
      30,
      31,
      49,
      33,
      15,
      33,
      34,
      16,
      35,
      19,
      16,
      19,
      18,
      16,
      18,
      22,
      18,
      36,
      37,
      18,
      37,
      54,
      38,
      22,
      19,
      35,
      52,
      40,
      23,
      19,
      23,
      20,
      20,
      23,
      22,
      20,
      22,
      38,
      21,
      39,
      25,
      21,
      25,
      24,
      21,
      24,
      27,
      23,
      40,
      41,
      24,
      42,
      43,
      24,
      43,
      46,
      28,
      27,
      25,
      39,
      55,
      44,
      26,
      26,
      44,
      45,
      28,
      46,
      45,
      28,
      45,
      44,
      28,
      44,
      47,
      29,
      47,
      48,
      31,
      45,
      48,
      31,
      48,
      47,
      31,
      47,
      49,
      32,
      50,
      34,
      32,
      34,
      33,
      32,
      33,
      36,
      33,
      49,
      51,
      33,
      51,
      59,
      52,
      36,
      34,
      50,
      58,
      53,
      37,
      34,
      37,
      35,
      35,
      37,
      36,
      35,
      36,
      52,
      37,
      53,
      54,
      38,
      54,
      41,
      38,
      41,
      40,
      38,
      40,
      42,
      39,
      41,
      43,
      39,
      43,
      42,
      39,
      42,
      55,
      40,
      52,
      53,
      40,
      53,
      57,
      55,
      42,
      41,
      54,
      59,
      56,
      43,
      43,
      56,
      46,
      44,
      55,
      56,
      44,
      56,
      58,
      49,
      47,
      45,
      46,
      57,
      51,
      48,
      46,
      56,
      55,
      46,
      55,
      57,
      48,
      51,
      50,
      49,
      58,
      50,
      49,
      50,
      51,
      51,
      57,
      59,
      52,
      59,
      54,
      52,
      54,
      53,
      53,
      58,
      57,
      56,
      59,
      58,
      57,
      58,
      59
    ]
  ],
  [
    [
      65,
      30,
      22,
      60,
      4
    ],
    [
      2,
      5,
      4,
      5,
      1,
      3,
      1
    ],
    [
      1,
      6,
      1,
      5,
      4,
      6,
      1,
      5,
      1
    ],
    [
      0,
      1,
      0.8660254037844386,
      0.5,
      -0.8660254037844386,
      0.6454972243679028,
      0.5773502691896257,
      -0.6454972243679028,
      -0.5773502691896257,
      -0.5,
      0.11026408970826791,
      0.8090169943749475,
      0.7557613140761708,
      -0.30901699437494745,
      -0.7557613140761708,
      -0.11026408970826791,
      0.46708617948135783,
      -0.35682208977308993,
      0.17841104488654497,
      0.9341723589627157,
      -0.17841104488654497,
      -0.9341723589627157,
      -0.46708617948135783,
      0.35682208977308993,
      -0.8090169943749475,
      0.30901699437494745,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      0,
      3,
      5,
      6,
      3,
      7,
      8,
      3,
      2,
      0,
      9,
      10,
      6,
      11,
      12,
      8,
      13,
      14,
      6,
      13,
      15,
      8,
      11,
      4,
      0,
      9,
      5,
      6,
      9,
      16,
      17,
      11,
      18,
      19,
      13,
      20,
      21,
      13,
      22,
      23,
      11,
      7,
      8,
      9,
      10,
      6,
      24,
      12,
      8,
      25,
      0,
      0,
      26,
      14,
      6,
      25,
      17,
      19,
      0,
      19,
      23,
      0,
      15,
      8,
      24,
      21,
      17,
      0,
      23,
      21,
      0,
      16,
      17,
      24,
      18,
      19,
      25,
      20,
      21,
      25,
      22,
      23,
      24
    ],
    [
      1,
      2,
      3,
      4,
      7,
      6,
      5,
      0,
      10,
      9,
      8,
      0,
      13,
      12,
      11,
      0,
      16,
      15,
      14,
      0,
      1,
      17,
      18,
      19,
      1,
      20,
      12,
      21,
      1,
      14,
      22,
      23,
      2,
      17,
      24,
      13,
      2,
      25,
      15,
      18,
      2,
      19,
      20,
      23,
      3,
      26,
      27,
      19,
      3,
      28,
      6,
      25,
      3,
      8,
      22,
      29,
      4,
      26,
      24,
      7,
      4,
      21,
      9,
      27,
      4,
      19,
      28,
      29,
      21,
      26,
      8,
      5,
      9,
      22,
      28,
      5,
      16,
      11,
      10,
      5,
      10,
      27,
      24,
      6,
      29,
      15,
      17,
      6,
      27,
      18,
      13,
      7,
      29,
      25,
      10,
      7,
      14,
      20,
      28,
      8,
      23,
      12,
      26,
      9,
      25,
      17,
      14,
      11,
      15,
      22,
      20,
      11,
      16,
      18,
      24,
      12,
      23,
      21,
      16,
      13
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      10,
      11,
      3,
      2,
      5,
      7,
      12,
      0,
      4,
      13,
      14,
      5,
      3,
      15,
      16,
      4,
      7,
      17,
      18,
      1,
      6,
      19,
      20,
      7,
      0,
      21,
      4,
      6,
      9,
      11,
      21,
      2,
      8,
      13,
      14,
      9,
      1,
      18,
      16,
      8,
      11,
      17,
      15,
      3,
      10,
      19,
      20,
      11,
      2,
      12,
      8,
      10,
      19,
      17,
      7,
      5,
      20,
      18,
      12,
      7,
      2,
      21,
      0,
      12,
      21,
      15,
      13,
      4,
      10,
      19,
      5,
      14,
      20,
      18,
      16,
      15,
      14,
      6,
      4,
      16,
      15,
      13,
      18,
      17,
      14,
      9,
      19,
      6,
      19,
      17,
      11,
      9,
      20,
      15,
      21,
      11,
      12,
      18,
      13,
      8,
      14,
      10,
      8,
      16
    ],
    [
      6,
      1,
      5,
      4,
      6,
      1,
      5,
      1,
      6,
      1,
      5,
      4,
      5,
      1,
      6,
      1,
      6,
      1,
      5,
      1,
      5,
      4,
      6,
      1,
      5,
      1,
      5,
      1,
      6,
      1,
      6,
      1,
      5,
      4,
      5,
      1,
      6,
      1,
      6,
      1,
      5,
      4,
      5,
      4
    ],
    [
      0,
      1,
      5,
      19,
      10,
      2,
      0,
      2,
      8,
      13,
      3,
      0,
      3,
      11,
      19,
      16,
      4,
      0,
      4,
      14,
      7,
      1,
      1,
      7,
      23,
      10,
      20,
      6,
      1,
      6,
      21,
      17,
      5,
      2,
      10,
      23,
      25,
      9,
      2,
      9,
      18,
      5,
      17,
      8,
      3,
      13,
      29,
      16,
      28,
      12,
      3,
      12,
      25,
      26,
      11,
      4,
      16,
      29,
      21,
      15,
      4,
      15,
      27,
      11,
      26,
      14,
      5,
      18,
      28,
      16,
      19,
      6,
      20,
      24,
      28,
      12,
      6,
      12,
      25,
      23,
      29,
      21,
      7,
      14,
      24,
      20,
      27,
      22,
      7,
      22,
      13,
      29,
      23,
      8,
      17,
      26,
      14,
      24,
      8,
      24,
      28,
      18,
      22,
      13,
      9,
      25,
      26,
      17,
      21,
      15,
      9,
      15,
      27,
      22,
      18,
      10,
      19,
      11,
      27,
      20
    ]
  ],
  [
    [
      66,
      60,
      32,
      90,
      3
    ],
    [
      2,
      2,
      1,
      3,
      1,
      5,
      3
    ],
    [
      1,
      10,
      3,
      10,
      3,
      3,
      1
    ],
    [
      0,
      1,
      0.9876921900819051,
      -0.15641015840158762,
      -0.6303417986679897,
      0.7603979742219161,
      -0.18312820316803174,
      -0.9705668053015405,
      -0.2530769524795237,
      -0.5981195339753443,
      -0.42389734572946064,
      -0.6801206241253349,
      0.7469230475204763,
      0.2904461811762056,
      -0.7002905479794816,
      0.3896744429491293,
      -0.6570598434344338,
      -0.3251281267212701,
      -0.47393164026640205,
      0.8312820316803176,
      0.07885476423364,
      -0.5502291431422918,
      0.5260683597335979,
      -0.17950561186950495,
      -0.19753843801638102,
      0.5195659239321724,
      0.7901537520655242,
      0.8333844566105719,
      -0.05213671946719588,
      0.9033332059220639,
      0.38957265610656083,
      -0.4383075805778099,
      0.810012105108378,
      0.9389572656106561,
      0.34006031206266746,
      -0.5082563298893018,
      -0.8596262359948399,
      -0.7147007828278309,
      0.5808923623524112,
      0.00890601492214804,
      -0.9209526744150786,
      0.386170861110614,
      0.3162221117991221,
      -0.49384609504095256,
      0.09536742401224371,
      0.9355554706147092,
      -0.13099148370083588,
      0.2729914072540742,
      -0.7668375022950268,
      -0.6214357837458416,
      -0.16055470019316248,
      -0.09536742401224371,
      -0.34006031206266746,
      -0.9355554706147092,
      0.35184617148771424,
      0.03066321921011938,
      0.8690085162991641,
      -0.03066321921011938,
      -0.35184617148771424,
      -0.8545982814508148,
      -0.9389572656106561,
      0.05213671946719588,
      -0.8690085162991641,
      0.49384609504095256,
      -0.8333844566105719,
      0.5502291431422918,
      -0.3162221117991221,
      -0.810012105108378,
      0.8545982814508148,
      0.16055470019316248,
      -0.386170861110614,
      0.9209526744150786,
      0.13099148370083588,
      0.8596262359948399,
      0.5082563298893018,
      -0.07885476423364,
      -0.8312820316803176,
      0.4383075805778099,
      -0.38957265610656083,
      0.6214357837458416,
      0.7668375022950268,
      -0.00890601492214804,
      0.6570598434344338,
      0.6801206241253349,
      0.3251281267212701,
      -0.7901537520655242,
      -0.5195659239321724,
      -0.9033332059220639,
      0.17950561186950495,
      -0.2729914072540742,
      -0.5808923623524112,
      0.7147007828278309,
      -0.5260683597335979,
      0.42389734572946064,
      0.5981195339753443,
      0.19753843801638102,
      0.47393164026640205,
      -0.2904461811762056,
      0.2530769524795237,
      -0.7603979742219161,
      0.7002905479794816,
      -0.3896744429491293,
      -0.7469230475204763,
      0.6303417986679897,
      0.15641015840158762,
      -0.9876921900819052,
      0.1564101584015876,
      0.1831282031680318,
      0.9705668053015405,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      11,
      9,
      12,
      13,
      9,
      14,
      15,
      9,
      16,
      11,
      17,
      18,
      13,
      19,
      20,
      21,
      19,
      22,
      23,
      19,
      24,
      25,
      19,
      26,
      25,
      17,
      27,
      21,
      28,
      29,
      23,
      30,
      31,
      32,
      30,
      33,
      34,
      28,
      35,
      36,
      28,
      37,
      38,
      30,
      39,
      40,
      30,
      41,
      40,
      28,
      42,
      32,
      43,
      44,
      34,
      45,
      46,
      36,
      43,
      47,
      38,
      48,
      49,
      50,
      48,
      51,
      52,
      53,
      54,
      55,
      53,
      56,
      57,
      43,
      58,
      57,
      45,
      59,
      50,
      43,
      60,
      52,
      61,
      62,
      55,
      63,
      64,
      65,
      61,
      66,
      67,
      63,
      68,
      69,
      63,
      70,
      71,
      61,
      72,
      73,
      63,
      74,
      73,
      61,
      75,
      65,
      76,
      77,
      67,
      78,
      79,
      69,
      80,
      81,
      71,
      78,
      82,
      83,
      84,
      85,
      86,
      84,
      87,
      88,
      78,
      89,
      90,
      80,
      91,
      90,
      78,
      92,
      88,
      76,
      93,
      83,
      94,
      95,
      86,
      76,
      96,
      97,
      76,
      98,
      99,
      94,
      100,
      101,
      94,
      102,
      97,
      94,
      103,
      99,
      104,
      105,
      0,
      106,
      107,
      108,
      106,
      0,
      0,
      109
    ],
    [
      1,
      2,
      3,
      3,
      4,
      0,
      6,
      5,
      0,
      7,
      1,
      0,
      1,
      8,
      9,
      2,
      6,
      10,
      2,
      11,
      5,
      3,
      12,
      13,
      14,
      9,
      4,
      8,
      15,
      4,
      17,
      16,
      5,
      19,
      18,
      6,
      20,
      13,
      7,
      12,
      21,
      7,
      8,
      22,
      23,
      9,
      24,
      25,
      10,
      17,
      26,
      10,
      27,
      16,
      11,
      19,
      28,
      11,
      25,
      18,
      12,
      26,
      29,
      13,
      30,
      31,
      31,
      23,
      14,
      22,
      32,
      14,
      33,
      25,
      15,
      24,
      19,
      15,
      29,
      20,
      16,
      35,
      34,
      17,
      37,
      36,
      18,
      26,
      38,
      20,
      39,
      31,
      21,
      30,
      22,
      21,
      23,
      40,
      41,
      24,
      42,
      43,
      27,
      35,
      44,
      27,
      36,
      34,
      28,
      37,
      35,
      28,
      45,
      36,
      29,
      46,
      47,
      30,
      48,
      49,
      50,
      41,
      32,
      40,
      42,
      32,
      41,
      43,
      33,
      42,
      51,
      33,
      53,
      52,
      34,
      51,
      54,
      37,
      52,
      47,
      38,
      46,
      48,
      38,
      47,
      49,
      39,
      48,
      55,
      39,
      40,
      55,
      56,
      43,
      54,
      45,
      44,
      53,
      46,
      44,
      57,
      52,
      45,
      51,
      58,
      49,
      56,
      50,
      55,
      59,
      50,
      58,
      59,
      53,
      59,
      57,
      54,
      56,
      57,
      58
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      3,
      2,
      1,
      3,
      5,
      0,
      4,
      6,
      1,
      0,
      6,
      4,
      1,
      7,
      3,
      8,
      5,
      3,
      8,
      0,
      5,
      9,
      1,
      6,
      10,
      6,
      0,
      11,
      7,
      1,
      11,
      3,
      7,
      3,
      12,
      8,
      8,
      13,
      0,
      9,
      14,
      1,
      6,
      14,
      9,
      10,
      15,
      6,
      0,
      15,
      10,
      1,
      16,
      11,
      11,
      17,
      3,
      18,
      12,
      3,
      18,
      8,
      12,
      15,
      13,
      8,
      15,
      0,
      13,
      16,
      1,
      14,
      19,
      14,
      6,
      20,
      6,
      15,
      14,
      11,
      16,
      18,
      17,
      11,
      18,
      3,
      17,
      18,
      21,
      8,
      8,
      22,
      15,
      19,
      23,
      14,
      6,
      23,
      19,
      20,
      23,
      6,
      15,
      23,
      20,
      14,
      24,
      11,
      11,
      25,
      18,
      26,
      21,
      18,
      26,
      8,
      21,
      26,
      22,
      8,
      26,
      15,
      22,
      27,
      14,
      23,
      28,
      23,
      15,
      29,
      24,
      14,
      29,
      11,
      24,
      29,
      25,
      11,
      29,
      18,
      25,
      18,
      30,
      26,
      26,
      28,
      15,
      27,
      29,
      14,
      23,
      29,
      27,
      28,
      26,
      23,
      29,
      30,
      18,
      29,
      26,
      30,
      31,
      29,
      23,
      31,
      23,
      26,
      29,
      31,
      26
    ],
    [
      10,
      3,
      10,
      3,
      3,
      1,
      10,
      3,
      3,
      1,
      3,
      1,
      10,
      3,
      3,
      1,
      10,
      3,
      3,
      1,
      3,
      1,
      10,
      3,
      3,
      1,
      3,
      1,
      10,
      3,
      10,
      3,
      3,
      1,
      3,
      1,
      10,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      10,
      3,
      3,
      1,
      3,
      1,
      10,
      3,
      3,
      1,
      3,
      1,
      10,
      3,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      4,
      9,
      15,
      25,
      19,
      11,
      6,
      2,
      0,
      2,
      5,
      10,
      16,
      26,
      20,
      12,
      7,
      3,
      0,
      3,
      1,
      1,
      3,
      7,
      13,
      21,
      31,
      22,
      14,
      8,
      4,
      2,
      6,
      5,
      4,
      8,
      9,
      5,
      6,
      11,
      18,
      28,
      36,
      35,
      27,
      17,
      10,
      7,
      12,
      13,
      8,
      14,
      23,
      32,
      41,
      42,
      33,
      24,
      15,
      9,
      10,
      17,
      16,
      11,
      19,
      18,
      12,
      20,
      29,
      38,
      47,
      48,
      39,
      30,
      21,
      13,
      14,
      22,
      23,
      15,
      24,
      25,
      16,
      17,
      27,
      34,
      44,
      52,
      46,
      38,
      29,
      26,
      18,
      19,
      25,
      24,
      33,
      43,
      51,
      45,
      37,
      28,
      20,
      26,
      29,
      21,
      30,
      31,
      22,
      31,
      30,
      39,
      49,
      55,
      50,
      40,
      32,
      23,
      27,
      35,
      34,
      28,
      37,
      36,
      32,
      40,
      41,
      33,
      42,
      43,
      34,
      35,
      36,
      37,
      45,
      54,
      58,
      57,
      53,
      44,
      38,
      46,
      47,
      39,
      48,
      49,
      40,
      50,
      56,
      59,
      58,
      54,
      51,
      43,
      42,
      41,
      44,
      53,
      52,
      45,
      51,
      54,
      46,
      52,
      53,
      57,
      59,
      56,
      55,
      49,
      48,
      47,
      50,
      55,
      56,
      57,
      58,
      59
    ]
  ],
  [
    [
      67,
      60,
      62,
      120,
      4
    ],
    [
      2,
      5,
      3,
      3,
      1,
      2,
      1
    ],
    [
      1,
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.9996324920049082,
      0.027108687317114206,
      -0.9468654869305521,
      0.3204853643018842,
      -0.3453645319230064,
      0.9380770006569533,
      0.026383502537178073,
      -0.9992842587901671,
      0.052767005074356145,
      -0.9457826253657716,
      0.03646110376411101,
      -0.3445027267682465,
      0.23983052177429412,
      0.7400061526214967,
      0.6283885859146393,
      -0.33528693069607346,
      -0.8768697425237396,
      -0.31898102938582834,
      -0.061207258133213774,
      0.8677149793190179,
      0.3583135301863987,
      -0.733418467693436,
      -0.2592781061686704,
      -0.9367878857036191,
      0.6216561574614116,
      0.25677717182927856,
      -0.36789873331656375,
      0.8580570704268036,
      0.6480396599985896,
      -0.7161141408536073,
      0.8514090780087727,
      -0.457348954204127,
      0.5060445460857663,
      0.4807280464528263,
      0.23360222169098194,
      -0.7233408664665031,
      -0.6409707286037684,
      0.47966104354858824,
      -0.839041576639225,
      0.4633551422383431,
      -0.22144994028415585,
      -0.4672044433819639,
      -0.5185562123373408,
      0.27629162553840514,
      -0.7295691665498153,
      0.4864456563414429,
      0.24367982291791487,
      0.8451807779254605,
      -0.7031856640126373,
      -0.4864456563414429,
      -0.4998162460024541,
      -0.7166270603727974,
      -0.8451807779254605,
      0.22144994028415585,
      0.4998162460024541,
      0.7166270603727974,
      0.7031856640126373,
      0.5185562123373408,
      0.7295691665498153,
      -0.4807280464528263,
      -0.24367982291791487,
      0.839041576639225,
      -0.4633551422383431,
      -0.8580570704268036,
      0.4672044433819639,
      0.7161141408536073,
      -0.5060445460857663,
      -0.47966104354858824,
      -0.25677717182927856,
      -0.27629162553840514,
      0.6409707286037684,
      0.36789873331656375,
      -0.3583135301863987,
      0.7233408664665031,
      -0.23360222169098194,
      0.457348954204127,
      -0.6480396599985896,
      0.2592781061686704,
      -0.6216561574614116,
      -0.7400061526214967,
      -0.8514090780087727,
      -0.8677149793190179,
      0.3445027267682465,
      0.733418467693436,
      -0.6283885859146393,
      -0.23983052177429412,
      0.9367878857036191,
      0.061207258133213774,
      -0.03646110376411101,
      -0.9380770006569533,
      0.31898102938582834,
      0.9457826253657716,
      0.33528693069607346,
      0.8768697425237396,
      -0.05276700507435615,
      -0.3204853643018842,
      0.3453645319230064,
      -0.027108687317114206,
      0.9468654869305521,
      -0.02710868731711421,
      -0.026383502537178073,
      0.9992842587901671,
      -0.9996324920049082,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      7,
      13,
      14,
      15,
      16,
      17,
      18,
      13,
      19,
      20,
      11,
      21,
      22,
      13,
      23,
      24,
      16,
      25,
      20,
      13,
      26,
      15,
      27,
      28,
      22,
      29,
      30,
      24,
      31,
      32,
      33,
      27,
      34,
      35,
      31,
      36,
      33,
      29,
      37,
      38,
      27,
      39,
      40,
      27,
      41,
      42,
      29,
      43,
      44,
      31,
      45,
      38,
      31,
      46,
      35,
      47,
      48,
      40,
      47,
      49,
      42,
      47,
      50,
      44,
      51,
      52,
      53,
      47,
      54,
      55,
      51,
      56,
      53,
      51,
      52,
      57,
      47,
      58,
      59,
      47,
      60,
      61,
      51,
      62,
      63,
      51,
      56,
      57,
      51,
      64,
      55,
      65,
      66,
      59,
      67,
      68,
      61,
      67,
      69,
      63,
      70,
      71,
      72,
      67,
      73,
      74,
      65,
      75,
      72,
      70,
      76,
      77,
      65,
      78,
      79,
      67,
      80,
      81,
      70,
      82,
      77,
      70,
      83,
      74,
      84,
      85,
      79,
      86,
      87,
      81,
      86,
      88,
      89,
      84,
      90,
      91,
      84,
      92,
      89,
      93,
      94,
      95,
      84,
      96,
      97,
      93,
      98,
      91,
      99,
      100,
      97,
      101,
      102,
      103,
      99,
      104,
      0,
      101,
      0,
      0,
      105
    ],
    [
      1,
      2,
      3,
      4,
      4,
      6,
      5,
      0,
      5,
      8,
      7,
      0,
      11,
      10,
      9,
      0,
      9,
      12,
      1,
      0,
      1,
      13,
      8,
      2,
      1,
      12,
      14,
      15,
      2,
      16,
      17,
      11,
      2,
      5,
      18,
      16,
      3,
      10,
      19,
      4,
      3,
      20,
      21,
      9,
      3,
      7,
      22,
      20,
      4,
      23,
      14,
      6,
      15,
      24,
      18,
      5,
      12,
      26,
      25,
      6,
      25,
      27,
      13,
      6,
      8,
      28,
      17,
      7,
      16,
      29,
      22,
      7,
      13,
      24,
      30,
      8,
      21,
      31,
      23,
      9,
      11,
      22,
      32,
      10,
      33,
      31,
      19,
      10,
      17,
      34,
      20,
      11,
      19,
      35,
      26,
      12,
      13,
      27,
      36,
      18,
      14,
      37,
      27,
      15,
      14,
      23,
      35,
      38,
      15,
      25,
      39,
      24,
      16,
      30,
      40,
      29,
      17,
      28,
      40,
      41,
      18,
      36,
      42,
      28,
      19,
      21,
      43,
      35,
      20,
      34,
      44,
      33,
      21,
      32,
      45,
      43,
      22,
      41,
      44,
      32,
      23,
      31,
      46,
      26,
      47,
      42,
      30,
      24,
      38,
      48,
      39,
      25,
      46,
      49,
      37,
      26,
      37,
      48,
      47,
      27,
      42,
      50,
      29,
      28,
      50,
      51,
      34,
      29,
      36,
      52,
      40,
      30,
      33,
      45,
      53,
      31,
      34,
      51,
      45,
      32,
      44,
      54,
      43,
      33,
      53,
      49,
      38,
      35,
      36,
      39,
      55,
      52,
      37,
      49,
      55,
      39,
      38,
      46,
      56,
      48,
      40,
      57,
      51,
      41,
      41,
      50,
      58,
      44,
      42,
      47,
      55,
      57,
      43,
      54,
      56,
      46,
      45,
      58,
      56,
      53,
      48,
      59,
      52,
      47,
      53,
      54,
      59,
      49,
      52,
      59,
      58,
      50,
      57,
      59,
      54,
      51,
      55,
      56,
      58,
      57
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      8,
      9,
      2,
      1,
      10,
      4,
      3,
      2,
      5,
      11,
      6,
      0,
      4,
      12,
      13,
      5,
      7,
      14,
      15,
      1,
      6,
      11,
      16,
      7,
      9,
      17,
      10,
      2,
      8,
      18,
      17,
      9,
      1,
      15,
      19,
      8,
      10,
      20,
      12,
      4,
      21,
      22,
      11,
      5,
      20,
      23,
      13,
      12,
      24,
      21,
      5,
      13,
      16,
      25,
      14,
      7,
      25,
      26,
      15,
      14,
      22,
      27,
      16,
      11,
      28,
      29,
      10,
      17,
      19,
      30,
      18,
      8,
      31,
      28,
      17,
      18,
      26,
      30,
      19,
      15,
      29,
      32,
      20,
      10,
      21,
      33,
      27,
      22,
      23,
      34,
      24,
      13,
      20,
      32,
      35,
      23,
      24,
      34,
      33,
      21,
      16,
      36,
      37,
      25,
      25,
      37,
      38,
      26,
      27,
      39,
      36,
      16,
      28,
      31,
      40,
      29,
      30,
      41,
      42,
      18,
      18,
      42,
      43,
      31,
      26,
      44,
      41,
      30,
      29,
      40,
      35,
      32,
      45,
      39,
      27,
      33,
      46,
      47,
      34,
      23,
      48,
      46,
      23,
      35,
      47,
      49,
      33,
      34,
      50,
      38,
      37,
      36,
      51,
      44,
      26,
      38,
      45,
      50,
      36,
      39,
      43,
      52,
      40,
      31,
      44,
      53,
      42,
      41,
      53,
      52,
      43,
      42,
      54,
      48,
      35,
      40,
      33,
      49,
      55,
      45,
      46,
      56,
      49,
      47,
      48,
      54,
      56,
      46,
      50,
      57,
      51,
      38,
      51,
      57,
      53,
      44,
      45,
      55,
      58,
      50,
      52,
      59,
      54,
      40,
      53,
      60,
      59,
      52,
      56,
      58,
      55,
      49,
      59,
      60,
      56,
      54,
      58,
      61,
      57,
      50,
      61,
      60,
      53,
      57,
      56,
      60,
      61,
      58
    ],
    [
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      1,
      4,
      1,
      5,
      3,
      3,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      5,
      3,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      5,
      3,
      4,
      1,
      5,
      3,
      3,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      5,
      3,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      3,
      1,
      4,
      1,
      5,
      3,
      3,
      1,
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      1,
      5,
      3,
      4,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1
    ],
    [
      0,
      1,
      5,
      2,
      0,
      2,
      7,
      11,
      3,
      0,
      3,
      9,
      4,
      0,
      4,
      1,
      1,
      4,
      12,
      6,
      1,
      6,
      15,
      13,
      5,
      2,
      5,
      8,
      2,
      8,
      16,
      7,
      3,
      11,
      20,
      10,
      3,
      10,
      9,
      4,
      9,
      19,
      23,
      12,
      5,
      13,
      18,
      8,
      6,
      12,
      14,
      6,
      14,
      25,
      15,
      7,
      16,
      17,
      7,
      17,
      22,
      11,
      8,
      18,
      30,
      28,
      16,
      9,
      10,
      21,
      19,
      10,
      20,
      32,
      33,
      21,
      11,
      22,
      20,
      12,
      23,
      26,
      14,
      13,
      15,
      27,
      24,
      13,
      24,
      18,
      14,
      26,
      38,
      37,
      25,
      15,
      25,
      27,
      16,
      28,
      29,
      17,
      17,
      29,
      41,
      34,
      22,
      18,
      24,
      36,
      30,
      19,
      21,
      31,
      19,
      31,
      35,
      23,
      20,
      22,
      34,
      32,
      21,
      33,
      43,
      31,
      23,
      35,
      26,
      24,
      27,
      39,
      47,
      36,
      25,
      37,
      39,
      27,
      26,
      35,
      46,
      38,
      28,
      30,
      42,
      40,
      28,
      40,
      29,
      29,
      40,
      50,
      41,
      30,
      36,
      42,
      31,
      43,
      53,
      46,
      35,
      32,
      34,
      44,
      32,
      44,
      45,
      33,
      33,
      45,
      43,
      34,
      41,
      51,
      44,
      36,
      47,
      52,
      42,
      37,
      38,
      49,
      48,
      37,
      48,
      39,
      38,
      46,
      49,
      39,
      48,
      55,
      47,
      40,
      42,
      52,
      57,
      50,
      41,
      50,
      51,
      43,
      45,
      54,
      53,
      44,
      51,
      58,
      54,
      45,
      46,
      53,
      56,
      49,
      47,
      55,
      52,
      48,
      49,
      56,
      59,
      55,
      50,
      57,
      58,
      51,
      52,
      55,
      59,
      57,
      53,
      54,
      56,
      54,
      58,
      59,
      56,
      57,
      59,
      58
    ]
  ],
  [
    [
      68,
      120,
      62,
      180,
      3
    ],
    [
      3,
      5,
      3,
      2,
      1,
      3,
      1
    ],
    [
      1,
      10,
      3,
      4,
      1,
      6,
      1
    ],
    [
      0,
      1,
      0.8541299614973895,
      0.5200596204979463,
      0.07759556767336248,
      0.8505979773106569,
      -0.8315867366757862,
      -0.19493970994245544,
      0.40384418215572626,
      0.33673870810168505,
      0.8766731863189928,
      -0.4398211385061612,
      -0.7539911690024238,
      0.6556582673682014,
      0.04011924099589251,
      0.8837688309722714,
      0.32489951657075905,
      -0.809043511854183,
      -0.38987941988491087,
      0.4263874069773295,
      -0.6231420509024225,
      -0.1719938630577801,
      0.9299776423132702,
      0.04508644964320656,
      -0.9197615180082149,
      -0.7794046423793011,
      -0.06497990331415181,
      0.30793078575876504,
      -0.20079894416913877,
      0.858355357595394,
      -0.3957386541115942,
      -0.3265225837966299,
      -0.7453804233366016,
      0.5811979239272292,
      -0.12690741341457357,
      -0.9897838756949449,
      0.6341794002411288,
      0.7466567299170089,
      -0.7252886834496832,
      0.5633358175207478,
      0.10874953816078792,
      -0.8064629632986836,
      -0.8412938197335629,
      -0.4701989975525664,
      0.26671635041495523,
      0.026768620919607813,
      -0.5906783640540496,
      0.2825173123818877,
      -0.921437114851492,
      -0.14235499358289824,
      0.6497990331415181,
      -0.8072696006908633,
      0.17597882968881473,
      0.6653333707285543,
      -0.579865853879621,
      -0.7027454586280799,
      -0.3965449414833597,
      0.0808845798492257,
      0.38001490512448655,
      0.7117749679144912,
      0.9009903223039157,
      -0.03512055643465391,
      -0.9958974582924642,
      0.08339543801869402,
      -0.7776307312159815,
      0.5008783462595737,
      -0.19318194033665292,
      -0.7914773082231884,
      -0.6180542463014389,
      0.7797588397698217,
      -0.09992547437756719,
      -0.8326830740677407,
      -0.5446593409935385,
      -0.015028816547735519,
      -0.22924026454959984,
      0.9732538393360717,
      0.08949532551504787,
      0.013373080331964169,
      0.7289964592461357,
      -0.4665672991700896,
      -0.39481467286931493,
      0.23607571519595066,
      0.34769550191201265,
      -0.7631867662758821,
      0.839101144949654,
      0.4933134598340179,
      0.8347157953818364,
      -0.5505185752202219,
      -0.7550875063943782,
      0.3059386363171183,
      0.09220562060050883,
      0.9462572293318161,
      0.3099925474377567,
      0.6766544114798374,
      -0.3460984251509461,
      -0.6498882115663508,
      -0.6434677196783162,
      0.059120669087468464,
      -0.04044228992461285,
      -0.9498784352319531,
      -0.42267963118087715,
      0.7199105692530806,
      -0.10259027742965064,
      -0.9465076786721434,
      0.2168215025502106,
      0.23997018975102688,
      -0.9069896295652399,
      -0.3172191051959524,
      0.2858063245577509,
      0.12667163504149553,
      0.35901654266329575,
      -0.42055876859191826,
      -0.8332091239626119,
      0.8983788838994178,
      0.42055876859191826,
      0.11474884542211211,
      0.7513175193893606,
      0.2263686321381741,
      0.5044995521597108,
      0.6147652341255756,
      -0.7513175193893606,
      0.8293940618918775,
      -0.5044995521597108,
      -0.8983788838994178,
      -0.12667163504149553,
      -0.35901654266329575,
      0.8332091239626119,
      -0.6147652341255756,
      -0.23997018975102688,
      -0.8293940618918775,
      -0.11474884542211211,
      0.6498882115663508,
      -0.2263686321381741,
      0.42267963118087715,
      0.5505185752202219,
      -0.7199105692530806,
      -0.2168215025502106,
      -0.9462572293318161,
      0.9069896295652399,
      0.3460984251509461,
      -0.2858063245577509,
      0.9498784352319531,
      0.10259027742965064,
      -0.3059386363171183,
      0.9465076786721434,
      0.3172191051959524,
      -0.059120669087468464,
      -0.8347157953818364,
      -0.01337308033196417,
      -0.09220562060050883,
      -0.3099925474377567,
      -0.6766544114798374,
      0.04044228992461285,
      0.7550875063943782,
      0.5798658538796209,
      0.6434677196783162,
      -0.05912066908746847,
      0.7631867662758821,
      -0.08949532551504787,
      0.9958974582924642,
      -0.7289964592461357,
      -0.5008783462595737,
      0.4665672991700896,
      0.39481467286931493,
      0.7914773082231884,
      -0.839101144949654,
      0.22924026454959984,
      -0.4933134598340179,
      -0.34769550191201265,
      0.5446593409935385,
      -0.2360757151959507,
      -0.7797588397698217,
      0.03512055643465391,
      -0.08339543801869402,
      0.7776307312159815,
      -0.5008783462595738,
      -0.38001490512448655,
      0.19318194033665292,
      0.579865853879621,
      0.01502881654773552,
      -0.9732538393360717,
      0.8326830740677407,
      0.0999254743775672,
      0.6180542463014389,
      0.7027454586280799,
      0.5906783640540496,
      0.3965449414833597,
      -0.6653333707285543,
      0.4701989975525664,
      -0.0808845798492257,
      0.921437114851492,
      -0.3800149051244866,
      -0.9009903223039157,
      -0.17597882968881473,
      -0.711774967914491,
      -0.649799033141518,
      -0.266716350414955,
      -0.02676862091960781,
      0.8064629632986836,
      0.8412938197335629,
      -0.26671635041495523,
      -0.2825173123818877,
      0.8072696006908633,
      -0.1759788296888147,
      -0.5633358175207478,
      0.142354993582898,
      -0.746656729917009,
      0.12690741341457357,
      0.06497990331415181,
      0.9897838756949449,
      0.7252886834496832,
      0.3957386541115942,
      -0.634179400241129,
      0.200798944169139,
      -0.1087495381607879,
      -0.5811979239272294,
      0.7794046423793011,
      0.0649799033141518,
      0.6231420509024224,
      -0.858355357595394,
      0.32652258379663,
      -0.30793078575877,
      0.20079894416914,
      -0.92997764231327,
      0.745380423336602,
      -0.4263874069773295,
      -0.6556582673682014,
      0.17199386305778,
      -0.324899516570759,
      -0.045086449643207,
      0.389879419884911,
      0.919761518008215,
      0.753991169002424,
      -0.040119240995893,
      -0.88376883097227,
      -0.336738708101685,
      0.809043511854183,
      0.439821138506161,
      -0.876673186318993,
      0.194939709942455,
      -0.403844182155726,
      -0.850597977310657,
      0.831586736675786,
      -0.520059620497946,
      -0.07759556767336,
      -0.85059797731066,
      -0.52005962049795,
      -0.85412996149739,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      5,
      9,
      10,
      7,
      11,
      12,
      13,
      14,
      15,
      16,
      9,
      17,
      18,
      11,
      19,
      13,
      20,
      21,
      16,
      22,
      23,
      18,
      24,
      25,
      26,
      20,
      27,
      28,
      22,
      29,
      30,
      31,
      32,
      33,
      31,
      34,
      26,
      35,
      36,
      28,
      37,
      38,
      30,
      39,
      40,
      33,
      41,
      42,
      43,
      44,
      45,
      46,
      41,
      47,
      48,
      44,
      49,
      50,
      37,
      51,
      52,
      39,
      53,
      43,
      54,
      55,
      46,
      56,
      57,
      48,
      58,
      59,
      50,
      44,
      60,
      52,
      56,
      61,
      62,
      63,
      64,
      65,
      58,
      66,
      67,
      54,
      68,
      69,
      70,
      71,
      72,
      70,
      73,
      74,
      75,
      76,
      62,
      77,
      78,
      65,
      79,
      80,
      67,
      79,
      81,
      69,
      54,
      82,
      72,
      83,
      84,
      74,
      85,
      86,
      87,
      77,
      88,
      89,
      54,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      83,
      98,
      99,
      92,
      100,
      87,
      101,
      102,
      89,
      103,
      104,
      91,
      105,
      106,
      94,
      105,
      107,
      97,
      103,
      108,
      99,
      109,
      110,
      111,
      112,
      113,
      114,
      109,
      115,
      116,
      95,
      117,
      118,
      112,
      119,
      120,
      105,
      121,
      122,
      105,
      123,
      111,
      124,
      125,
      114,
      126,
      127,
      116,
      128,
      129,
      118,
      128,
      130,
      120,
      131,
      132,
      122,
      126,
      133,
      134,
      135,
      136,
      137,
      128,
      138,
      139,
      128,
      140,
      141,
      124,
      142,
      143,
      144,
      145,
      146,
      144,
      147,
      134,
      148,
      149,
      137,
      150,
      151,
      139,
      131,
      152,
      141,
      150,
      153,
      143,
      154,
      155,
      156,
      157,
      158,
      159,
      148,
      160,
      161,
      162,
      163,
      164,
      162,
      165,
      166,
      167,
      168,
      169,
      157,
      170,
      171,
      154,
      172,
      159,
      173,
      174,
      175,
      176,
      177,
      164,
      178,
      179,
      166,
      180,
      181,
      169,
      182,
      183,
      171,
      182,
      184,
      185,
      186,
      187,
      188,
      178,
      189,
      190,
      191,
      192,
      193,
      186,
      194,
      195,
      196,
      197,
      185,
      198,
      199,
      188,
      200,
      201,
      190,
      196,
      202,
      203,
      204,
      205,
      195,
      206,
      207,
      208,
      209,
      210,
      211,
      204,
      212,
      213,
      206,
      214,
      215,
      198,
      216,
      217,
      218,
      219,
      211,
      220,
      221,
      222,
      223,
      224,
      215,
      220,
      225,
      226,
      218,
      227,
      228,
      223,
      229,
      230,
      231,
      232,
      226,
      233,
      234,
      228,
      235,
      236,
      230,
      237,
      238,
      239,
      237,
      240,
      241,
      235,
      242,
      239,
      243,
      244,
      245,
      246,
      247,
      0,
      243,
      0,
      0,
      248
    ],
    [
      1,
      2,
      3,
      5,
      4,
      0,
      7,
      6,
      0,
      6,
      8,
      0,
      1,
      9,
      10,
      1,
      11,
      9,
      2,
      12,
      3,
      2,
      13,
      14,
      3,
      15,
      11,
      5,
      16,
      4,
      18,
      17,
      4,
      8,
      19,
      5,
      21,
      20,
      6,
      23,
      22,
      7,
      22,
      21,
      7,
      24,
      19,
      8,
      9,
      25,
      26,
      10,
      27,
      28,
      10,
      26,
      27,
      11,
      15,
      29,
      12,
      30,
      31,
      12,
      14,
      30,
      13,
      32,
      14,
      13,
      28,
      33,
      15,
      34,
      35,
      37,
      36,
      16,
      36,
      18,
      16,
      18,
      38,
      17,
      39,
      23,
      17,
      41,
      40,
      19,
      21,
      42,
      20,
      44,
      43,
      20,
      46,
      45,
      22,
      39,
      46,
      23,
      43,
      47,
      24,
      47,
      41,
      24,
      25,
      48,
      26,
      25,
      49,
      50,
      27,
      51,
      52,
      28,
      52,
      33,
      29,
      53,
      49,
      29,
      35,
      53,
      30,
      54,
      55,
      31,
      56,
      34,
      31,
      55,
      56,
      32,
      57,
      58,
      32,
      33,
      57,
      34,
      59,
      35,
      61,
      60,
      36,
      40,
      62,
      37,
      62,
      61,
      37,
      64,
      63,
      38,
      63,
      39,
      38,
      41,
      65,
      40,
      67,
      66,
      42,
      66,
      44,
      42,
      44,
      68,
      43,
      46,
      69,
      45,
      70,
      67,
      45,
      68,
      71,
      47,
      48,
      72,
      73,
      48,
      50,
      72,
      49,
      74,
      50,
      51,
      75,
      52,
      51,
      73,
      76,
      53,
      77,
      74,
      54,
      78,
      55,
      54,
      58,
      79,
      56,
      80,
      59,
      57,
      81,
      82,
      58,
      82,
      79,
      59,
      80,
      83,
      61,
      84,
      60,
      85,
      64,
      60,
      65,
      86,
      62,
      88,
      87,
      63,
      85,
      88,
      64,
      89,
      86,
      65,
      91,
      90,
      66,
      70,
      91,
      67,
      92,
      71,
      68,
      87,
      93,
      69,
      93,
      70,
      69,
      94,
      89,
      71,
      72,
      95,
      96,
      73,
      96,
      76,
      74,
      77,
      97,
      75,
      98,
      81,
      75,
      76,
      98,
      77,
      83,
      99,
      78,
      100,
      101,
      78,
      79,
      100,
      80,
      101,
      102,
      81,
      103,
      82,
      83,
      102,
      99,
      105,
      104,
      84,
      104,
      85,
      84,
      106,
      105,
      86,
      88,
      107,
      87,
      94,
      106,
      89,
      91,
      108,
      90,
      109,
      92,
      90,
      109,
      94,
      92,
      107,
      110,
      93,
      95,
      111,
      96,
      95,
      97,
      112,
      97,
      99,
      112,
      98,
      113,
      103,
      100,
      114,
      115,
      101,
      115,
      102,
      103,
      113,
      114,
      117,
      116,
      104,
      106,
      117,
      105,
      116,
      110,
      107,
      110,
      118,
      108,
      118,
      109,
      108,
      111,
      119,
      113,
      111,
      112,
      119,
      114,
      119,
      115,
      117,
      118,
      116
    ],
    [
      0,
      1,
      2,
      3,
      0,
      2,
      4,
      1,
      0,
      5,
      2,
      1,
      3,
      6,
      0,
      2,
      7,
      3,
      4,
      5,
      1,
      0,
      8,
      4,
      5,
      9,
      2,
      7,
      6,
      3,
      10,
      0,
      6,
      9,
      7,
      2,
      11,
      5,
      4,
      12,
      8,
      0,
      13,
      4,
      8,
      14,
      9,
      5,
      7,
      15,
      6,
      10,
      16,
      0,
      6,
      17,
      10,
      9,
      14,
      7,
      11,
      18,
      5,
      4,
      13,
      11,
      12,
      13,
      8,
      0,
      19,
      12,
      5,
      20,
      14,
      21,
      15,
      7,
      17,
      6,
      15,
      17,
      16,
      10,
      19,
      0,
      16,
      22,
      7,
      14,
      13,
      18,
      11,
      23,
      5,
      18,
      24,
      13,
      12,
      25,
      12,
      19,
      26,
      20,
      5,
      27,
      14,
      20,
      21,
      17,
      15,
      7,
      28,
      21,
      17,
      29,
      16,
      16,
      25,
      19,
      22,
      30,
      7,
      14,
      27,
      22,
      13,
      31,
      18,
      23,
      26,
      5,
      18,
      32,
      23,
      24,
      33,
      13,
      12,
      25,
      24,
      26,
      27,
      20,
      34,
      17,
      21,
      30,
      28,
      7,
      35,
      21,
      28,
      36,
      29,
      17,
      25,
      16,
      29,
      27,
      30,
      22,
      37,
      31,
      13,
      32,
      18,
      31,
      32,
      26,
      23,
      25,
      33,
      24,
      38,
      13,
      33,
      39,
      27,
      26,
      34,
      40,
      17,
      21,
      35,
      34,
      30,
      35,
      28,
      36,
      25,
      29,
      17,
      41,
      36,
      27,
      42,
      30,
      37,
      32,
      31,
      13,
      38,
      37,
      32,
      39,
      26,
      25,
      43,
      33,
      33,
      44,
      38,
      39,
      45,
      27,
      35,
      40,
      34,
      41,
      17,
      40,
      42,
      35,
      30,
      46,
      25,
      36,
      47,
      36,
      41,
      48,
      42,
      27,
      49,
      32,
      37,
      44,
      37,
      38,
      45,
      39,
      32,
      50,
      43,
      25,
      44,
      33,
      43,
      51,
      27,
      45,
      35,
      52,
      40,
      40,
      47,
      41,
      42,
      48,
      35,
      46,
      50,
      25,
      36,
      47,
      46,
      27,
      51,
      48,
      49,
      53,
      32,
      37,
      44,
      49,
      32,
      54,
      45,
      50,
      44,
      43,
      45,
      55,
      51,
      56,
      52,
      35,
      47,
      40,
      52,
      57,
      35,
      48,
      47,
      50,
      46,
      55,
      48,
      51,
      44,
      53,
      49,
      54,
      32,
      53,
      55,
      45,
      54,
      58,
      44,
      50,
      56,
      47,
      52,
      35,
      57,
      56,
      48,
      55,
      57,
      47,
      58,
      50,
      44,
      59,
      53,
      53,
      55,
      54,
      58,
      60,
      44,
      61,
      47,
      56,
      55,
      56,
      57,
      60,
      58,
      47,
      60,
      59,
      44,
      55,
      53,
      59,
      61,
      60,
      47,
      56,
      55,
      61,
      60,
      55,
      59,
      55,
      60,
      61
    ],
    [
      10,
      3,
      4,
      1,
      6,
      1,
      4,
      1,
      6,
      1,
      10,
      3,
      6,
      1,
      10,
      3,
      4,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      10,
      3,
      6,
      1,
      4,
      1,
      6,
      1,
      10,
      3,
      6,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      10,
      3,
      6,
      1,
      10,
      3,
      4,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      10,
      3,
      6,
      1,
      4,
      1,
      10,
      3,
      6,
      1,
      6,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      10,
      3,
      6,
      1,
      4,
      1,
      10,
      3,
      6,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      4,
      1,
      10,
      3,
      6,
      1,
      4,
      1,
      4,
      1,
      4,
      1,
      6,
      1,
      4,
      1
    ],
    [
      0,
      1,
      4,
      10,
      17,
      28,
      23,
      13,
      7,
      2,
      0,
      2,
      6,
      3,
      0,
      3,
      8,
      11,
      5,
      1,
      1,
      5,
      9,
      4,
      2,
      7,
      14,
      21,
      12,
      6,
      3,
      6,
      12,
      20,
      31,
      43,
      34,
      24,
      15,
      8,
      4,
      9,
      16,
      26,
      18,
      10,
      5,
      11,
      19,
      29,
      40,
      49,
      37,
      25,
      16,
      9,
      7,
      13,
      22,
      14,
      8,
      15,
      19,
      11,
      10,
      18,
      27,
      17,
      12,
      21,
      30,
      20,
      13,
      23,
      33,
      46,
      32,
      22,
      14,
      22,
      32,
      45,
      58,
      67,
      54,
      42,
      30,
      21,
      15,
      24,
      35,
      41,
      29,
      19,
      16,
      25,
      36,
      26,
      17,
      27,
      38,
      52,
      39,
      28,
      18,
      26,
      36,
      48,
      60,
      73,
      64,
      51,
      38,
      27,
      20,
      30,
      42,
      55,
      44,
      31,
      23,
      28,
      39,
      33,
      24,
      34,
      47,
      35,
      25,
      37,
      50,
      61,
      48,
      36,
      29,
      41,
      53,
      40,
      31,
      44,
      56,
      43,
      32,
      46,
      57,
      45,
      33,
      39,
      52,
      63,
      75,
      87,
      81,
      69,
      57,
      46,
      34,
      43,
      56,
      68,
      59,
      47,
      35,
      47,
      59,
      71,
      83,
      89,
      77,
      65,
      53,
      41,
      37,
      49,
      62,
      50,
      38,
      51,
      63,
      52,
      40,
      53,
      65,
      74,
      62,
      49,
      42,
      54,
      66,
      55,
      44,
      55,
      66,
      78,
      90,
      101,
      92,
      80,
      68,
      56,
      45,
      57,
      69,
      82,
      70,
      58,
      48,
      61,
      72,
      60,
      50,
      62,
      74,
      86,
      97,
      105,
      95,
      84,
      72,
      61,
      51,
      64,
      76,
      88,
      75,
      63,
      54,
      67,
      79,
      91,
      78,
      66,
      58,
      70,
      79,
      67,
      59,
      68,
      80,
      71,
      60,
      72,
      84,
      96,
      85,
      73,
      64,
      73,
      85,
      76,
      65,
      77,
      86,
      74,
      69,
      81,
      93,
      82,
      70,
      82,
      93,
      103,
      110,
      114,
      108,
      100,
      91,
      79,
      71,
      80,
      92,
      102,
      94,
      83,
      75,
      88,
      98,
      87,
      76,
      85,
      96,
      104,
      111,
      116,
      113,
      107,
      98,
      88,
      77,
      89,
      99,
      106,
      97,
      86,
      78,
      91,
      100,
      90,
      81,
      87,
      98,
      107,
      103,
      93,
      83,
      94,
      99,
      89,
      84,
      95,
      104,
      96,
      90,
      100,
      108,
      115,
      109,
      101,
      92,
      101,
      109,
      102,
      94,
      102,
      109,
      115,
      118,
      119,
      117,
      112,
      106,
      99,
      95,
      105,
      112,
      117,
      111,
      104,
      97,
      106,
      112,
      105,
      103,
      107,
      113,
      110,
      108,
      114,
      118,
      115,
      110,
      113,
      116,
      119,
      118,
      114,
      111,
      117,
      119,
      116
    ]
  ],
  [
    [
      69,
      60,
      92,
      150,
      5
    ],
    [
      0,
      5,
      3,
      2,
      1,
      3,
      1
    ],
    [
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      0.9794318114940744,
      -0.20177543614978477,
      -0.24758105662640886,
      0.9476234978968784,
      0.6794635565993115,
      0.7054189879922276,
      -0.8542645892721528,
      0.4790810838284521,
      -0.9476234978968784,
      -0.369994891030896,
      -0.7959805875326301,
      -0.4790810838284521,
      -0.6672097581082245,
      -0.23687657392380126,
      0.706201548717706,
      0.8324770645650444,
      0.1197554577538922,
      0.5409626302355113,
      -0.6675126287216713,
      0.5116505870081278,
      0.4660769426136526,
      -0.5329649670969223,
      0.08837251120629196,
      -0.5988365415823443,
      -0.2922587145182983,
      -0.6448753494876551,
      0.23687657392380126,
      0.7719508391025639,
      0.5856635302383353,
      0.2471641789532173,
      0.4639966764562293,
      -0.7751694770015731,
      -0.4287416076877551,
      0.7751694770015731,
      -0.5856635302383353,
      0.16402842156146627,
      -0.8884116786475587,
      0.16341586803054367,
      0.6254788576519883,
      -0.7629360738005431,
      -0.5776256145932985,
      -0.6946432776634589,
      0.7239072398623172,
      0.10897974742512359,
      -0.681235438542416,
      0.9573414161735194,
      0.14969061934958477,
      -0.42461210662756543,
      0.8491824202317806,
      0.31399645869754095,
      -0.5949197891014073,
      -0.25298022023341943,
      0.31704192952719934,
      -0.8949249347554653,
      -0.254851449971746,
      -0.3832743477473375,
      0.8877789774522439,
      -0.8776864208015278,
      -0.4792353771797357,
      0.3832743477473375,
      -0.7254217427843981,
      -0.6728494848125518,
      -0.14504091106694778,
      0.25821739132010313,
      -0.1829926906553311,
      0.9485976249108802,
      -0.9980199890485916,
      0.013173011344008972,
      0.06150262784288012,
      -0.5400311657134425,
      0.8290533602700433,
      0.48466512016816976,
      0.22041071705374374,
      0.8464743570246107,
      -0.07097537582287126,
      -0.9955801940553168,
      0.02293177658262463,
      0.13988451771562954,
      -0.9899022453385133,
      0.8076938495561435,
      0.3434590203336845,
      0.02629771793098178,
      0.5317796469698651,
      0.9516406439013176,
      -0.296088393173121,
      -0.08192526047102257,
      0.10856982470272725,
      0.9689378779856728,
      0.22219806877792722,
      -0.2763633566521272,
      0.7320613040618715,
      -0.6226632654936384,
      0.7613145044088696,
      -0.4132095093430301,
      -0.49965800980787817,
      0.20998660774655287,
      0.9742658139665225,
      0.14018122083447226,
      -0.3162174531348584,
      -0.9382727469442244,
      -0.6959163498453507,
      -0.6395474135068054,
      0.3266183398014856,
      -0.9330524663468005,
      0.282915381829112,
      0.5310965182751326,
      0.7818292322376754,
      -0.7386751888778461,
      0.4524387677588081,
      -0.44754388321019006,
      -0.8410410514869952,
      0.3038987040360543,
      -0.28114916790272776,
      0.04310817293970155,
      -0.9586953795723668,
      -0.8643913313102363,
      -0.2155621938350068,
      0.4542692670044456,
      0.48024955996413354,
      0.7124423043085625,
      0.820988939047435,
      -0.34585632134892486,
      -0.2034129913901301,
      0.8143987354173511,
      0.5434867566779693,
      0.1802813050693706,
      -0.6781774207934014,
      0.5734078824210261,
      -0.33531765158889903,
      -0.7475061691453392,
      0.470570292812652,
      -0.8817519234114564,
      0.0328198885191916,
      0.3836942964595007,
      0.4026708395830042,
      -0.8310444523694068,
      -0.912132059937036,
      -0.269446077103477,
      -0.308891432008993
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      4,
      10,
      3,
      11,
      9,
      12,
      11,
      13,
      12,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      19,
      22,
      23,
      16,
      24,
      25,
      12,
      26,
      27,
      16,
      14,
      28,
      16,
      29,
      30,
      31,
      32,
      33,
      34,
      32,
      35,
      34,
      29,
      36,
      31,
      37,
      38,
      34,
      39,
      40,
      41,
      42,
      43,
      34,
      44,
      45,
      46,
      47,
      48,
      31,
      49,
      50,
      51,
      52,
      53,
      41,
      54,
      55,
      51,
      56,
      57,
      58,
      59,
      0,
      60,
      56,
      61,
      58,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      64,
      73,
      74,
      75,
      76,
      77,
      70,
      78,
      79,
      80,
      81,
      82,
      60,
      83,
      84,
      75,
      85,
      86,
      87,
      88,
      89,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      87,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      90,
      107,
      108,
      104,
      109,
      110,
      96,
      111,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      21,
      121,
      122,
      123,
      119,
      124,
      125,
      126,
      127,
      128,
      121,
      129,
      130,
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140
    ],
    [
      1,
      2,
      3,
      4,
      5,
      0,
      5,
      6,
      7,
      2,
      0,
      1,
      7,
      8,
      9,
      0,
      10,
      11,
      12,
      4,
      0,
      3,
      12,
      13,
      5,
      0,
      4,
      14,
      6,
      1,
      1,
      5,
      14,
      15,
      16,
      1,
      17,
      18,
      8,
      2,
      2,
      7,
      18,
      19,
      9,
      2,
      8,
      19,
      20,
      10,
      3,
      9,
      20,
      21,
      11,
      3,
      10,
      21,
      22,
      12,
      3,
      11,
      23,
      13,
      4,
      4,
      12,
      23,
      24,
      25,
      5,
      25,
      26,
      15,
      6,
      6,
      14,
      26,
      27,
      16,
      6,
      15,
      27,
      28,
      17,
      7,
      16,
      28,
      29,
      18,
      7,
      17,
      29,
      30,
      8,
      8,
      31,
      32,
      20,
      9,
      9,
      19,
      32,
      21,
      10,
      10,
      20,
      33,
      22,
      11,
      11,
      21,
      33,
      34,
      35,
      12,
      35,
      36,
      24,
      13,
      13,
      23,
      36,
      37,
      25,
      13,
      24,
      37,
      26,
      14,
      14,
      25,
      37,
      38,
      15,
      15,
      39,
      40,
      28,
      16,
      16,
      27,
      40,
      29,
      17,
      17,
      28,
      41,
      30,
      18,
      18,
      29,
      41,
      42,
      31,
      19,
      30,
      42,
      43,
      32,
      19,
      31,
      43,
      44,
      20,
      21,
      44,
      45,
      34,
      22,
      22,
      33,
      45,
      46,
      35,
      22,
      34,
      46,
      36,
      23,
      23,
      35,
      46,
      47,
      24,
      24,
      48,
      38,
      26,
      25,
      26,
      37,
      48,
      49,
      39,
      27,
      38,
      49,
      50,
      40,
      27,
      39,
      50,
      51,
      28,
      29,
      51,
      52,
      42,
      30,
      30,
      41,
      52,
      43,
      31,
      31,
      42,
      53,
      44,
      32,
      32,
      43,
      53,
      45,
      33,
      33,
      44,
      53,
      54,
      34,
      34,
      55,
      47,
      36,
      35,
      36,
      46,
      55,
      56,
      48,
      37,
      47,
      56,
      49,
      38,
      38,
      48,
      56,
      50,
      39,
      39,
      49,
      57,
      51,
      40,
      40,
      50,
      57,
      52,
      41,
      41,
      51,
      57,
      58,
      42,
      43,
      58,
      54,
      45,
      44,
      45,
      53,
      58,
      59,
      55,
      46,
      54,
      59,
      56,
      47,
      47,
      55,
      59,
      49,
      48,
      50,
      59,
      58,
      52,
      51,
      52,
      57,
      59,
      54,
      53,
      54,
      58,
      57,
      56,
      55
    ],
    [
      0,
      1,
      2,
      3,
      4,
      4,
      5,
      6,
      7,
      0,
      0,
      7,
      8,
      9,
      1,
      1,
      10,
      11,
      12,
      2,
      2,
      12,
      13,
      14,
      3,
      3,
      14,
      15,
      5,
      4,
      5,
      15,
      16,
      17,
      6,
      6,
      18,
      19,
      8,
      7,
      8,
      19,
      20,
      21,
      9,
      9,
      21,
      22,
      23,
      1,
      1,
      23,
      24,
      25,
      10,
      10,
      25,
      26,
      27,
      11,
      11,
      27,
      28,
      13,
      12,
      13,
      28,
      29,
      30,
      14,
      14,
      31,
      32,
      16,
      15,
      16,
      32,
      33,
      34,
      17,
      17,
      34,
      35,
      36,
      6,
      6,
      36,
      37,
      38,
      18,
      18,
      38,
      39,
      20,
      19,
      20,
      40,
      41,
      22,
      21,
      22,
      41,
      42,
      24,
      23,
      24,
      42,
      43,
      26,
      25,
      26,
      43,
      44,
      45,
      27,
      27,
      46,
      47,
      29,
      28,
      29,
      47,
      48,
      49,
      30,
      30,
      49,
      50,
      31,
      14,
      31,
      50,
      51,
      33,
      32,
      33,
      52,
      53,
      35,
      34,
      35,
      53,
      54,
      37,
      36,
      37,
      54,
      55,
      39,
      38,
      39,
      55,
      56,
      57,
      20,
      20,
      57,
      58,
      59,
      40,
      40,
      59,
      60,
      42,
      41,
      42,
      61,
      62,
      44,
      43,
      44,
      62,
      63,
      64,
      45,
      45,
      64,
      65,
      46,
      27,
      46,
      65,
      66,
      48,
      47,
      48,
      67,
      51,
      50,
      49,
      51,
      67,
      68,
      69,
      33,
      33,
      69,
      70,
      71,
      52,
      52,
      71,
      72,
      54,
      53,
      54,
      73,
      74,
      56,
      55,
      56,
      74,
      75,
      58,
      57,
      58,
      75,
      76,
      60,
      59,
      60,
      76,
      77,
      61,
      42,
      61,
      77,
      78,
      63,
      62,
      63,
      79,
      66,
      65,
      64,
      66,
      79,
      80,
      81,
      48,
      48,
      81,
      82,
      68,
      67,
      68,
      82,
      83,
      70,
      69,
      70,
      83,
      84,
      72,
      71,
      72,
      84,
      85,
      73,
      54,
      73,
      85,
      86,
      75,
      74,
      75,
      87,
      78,
      77,
      76,
      78,
      87,
      88,
      89,
      63,
      63,
      89,
      90,
      80,
      79,
      80,
      90,
      83,
      82,
      81,
      83,
      91,
      86,
      85,
      84,
      86,
      91,
      88,
      87,
      75,
      88,
      91,
      83,
      90,
      89
    ],
    [
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      9,
      10,
      3,
      0,
      3,
      4,
      0,
      4,
      5,
      0,
      5,
      1,
      1,
      5,
      6,
      1,
      6,
      16,
      17,
      7,
      1,
      7,
      2,
      2,
      7,
      8,
      2,
      8,
      9,
      3,
      10,
      11,
      3,
      11,
      12,
      3,
      12,
      4,
      4,
      12,
      13,
      4,
      13,
      25,
      14,
      5,
      5,
      14,
      6,
      6,
      14,
      15,
      6,
      15,
      16,
      7,
      17,
      18,
      7,
      18,
      8,
      8,
      18,
      30,
      31,
      19,
      8,
      19,
      9,
      9,
      19,
      20,
      9,
      20,
      10,
      10,
      20,
      21,
      10,
      21,
      11,
      11,
      21,
      22,
      11,
      22,
      35,
      23,
      12,
      12,
      23,
      13,
      13,
      23,
      24,
      13,
      24,
      25,
      14,
      25,
      26,
      14,
      26,
      15,
      15,
      26,
      38,
      39,
      27,
      15,
      27,
      16,
      16,
      27,
      28,
      16,
      28,
      17,
      17,
      28,
      29,
      17,
      29,
      18,
      18,
      29,
      30,
      19,
      31,
      32,
      19,
      32,
      20,
      20,
      32,
      44,
      33,
      21,
      21,
      33,
      22,
      22,
      33,
      34,
      22,
      34,
      35,
      23,
      35,
      36,
      23,
      36,
      24,
      24,
      36,
      47,
      48,
      37,
      24,
      37,
      25,
      25,
      37,
      26,
      26,
      37,
      38,
      27,
      39,
      40,
      27,
      40,
      28,
      28,
      40,
      51,
      41,
      29,
      29,
      41,
      30,
      30,
      41,
      42,
      30,
      42,
      31,
      31,
      42,
      43,
      31,
      43,
      32,
      32,
      43,
      44,
      33,
      44,
      45,
      33,
      45,
      34,
      34,
      45,
      54,
      55,
      46,
      34,
      46,
      35,
      35,
      46,
      36,
      36,
      46,
      47,
      37,
      48,
      38,
      38,
      48,
      49,
      38,
      49,
      39,
      39,
      49,
      50,
      39,
      50,
      40,
      40,
      50,
      51,
      41,
      51,
      52,
      41,
      52,
      42,
      42,
      52,
      58,
      53,
      43,
      43,
      53,
      44,
      44,
      53,
      45,
      45,
      53,
      54,
      46,
      55,
      47,
      47,
      55,
      56,
      47,
      56,
      48,
      48,
      56,
      49,
      49,
      56,
      59,
      57,
      50,
      50,
      57,
      51,
      51,
      57,
      52,
      52,
      57,
      58,
      53,
      58,
      54,
      54,
      58,
      59,
      54,
      59,
      55,
      55,
      59,
      56,
      57,
      59,
      58
    ]
  ],
  [
    [
      70,
      30,
      18,
      60,
      4
    ],
    [
      2,
      5,
      3,
      5,
      2,
      5,
      3
    ],
    [
      1,
      10,
      3,
      5,
      3,
      10,
      3,
      5,
      2
    ],
    [
      0,
      1,
      0.9510565162951535,
      -0.30901699437494745,
      -0.9510565162951535,
      -0.42532540417602,
      0.8506508083520399,
      0.42532540417602,
      -0.8506508083520399,
      -0.5877852522924731,
      -0.8090169943749475,
      -0.16245984811645317,
      0.5,
      0.16245984811645317,
      0.5877852522924731,
      0.2628655560595668,
      -0.5257311121191336,
      -0.6881909602355868,
      0.6881909602355868,
      0.5257311121191336,
      -0.2628655560595668,
      0.8090169943749475,
      0.30901699437494745,
      -0.5,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      0,
      3,
      5,
      6,
      3,
      7,
      8,
      3,
      9,
      0,
      10,
      11,
      8,
      12,
      13,
      6,
      12,
      14,
      0,
      10,
      15,
      16,
      10,
      17,
      16,
      12,
      18,
      19,
      12,
      20,
      19,
      10,
      19,
      6,
      0,
      9,
      0,
      21,
      8,
      19,
      0,
      6,
      16,
      0,
      14,
      0,
      21,
      16,
      8,
      0,
      15,
      16,
      21,
      20,
      19,
      21,
      2,
      0,
      22,
      11,
      8,
      23,
      18,
      19,
      23,
      13,
      6,
      23,
      17,
      16,
      23,
      4,
      0,
      22,
      5,
      6,
      22,
      7,
      8,
      22,
      0,
      0,
      24
    ],
    [
      1,
      2,
      3,
      4,
      6,
      3,
      5,
      0,
      8,
      4,
      7,
      0,
      10,
      1,
      9,
      0,
      12,
      2,
      11,
      0,
      1,
      13,
      6,
      14,
      1,
      11,
      5,
      15,
      2,
      16,
      8,
      10,
      2,
      17,
      7,
      18,
      3,
      13,
      10,
      19,
      3,
      7,
      9,
      16,
      4,
      15,
      12,
      6,
      4,
      20,
      11,
      18,
      9,
      14,
      19,
      5,
      22,
      13,
      21,
      5,
      22,
      11,
      23,
      6,
      25,
      10,
      24,
      7,
      26,
      18,
      24,
      8,
      20,
      17,
      12,
      8,
      25,
      13,
      27,
      9,
      28,
      18,
      23,
      12,
      14,
      27,
      22,
      29,
      14,
      15,
      21,
      23,
      15,
      20,
      22,
      28,
      16,
      26,
      25,
      17,
      16,
      27,
      24,
      19,
      17,
      29,
      24,
      28,
      19,
      21,
      25,
      29,
      20,
      29,
      23,
      26,
      28,
      27,
      26,
      21
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      4,
      5,
      2,
      1,
      6,
      7,
      3,
      2,
      5,
      8,
      9,
      0,
      3,
      8,
      9,
      4,
      7,
      10,
      11,
      1,
      0,
      10,
      11,
      6,
      5,
      11,
      12,
      2,
      1,
      11,
      12,
      4,
      7,
      13,
      8,
      3,
      2,
      13,
      8,
      6,
      11,
      14,
      8,
      5,
      11,
      14,
      0,
      9,
      7,
      13,
      4,
      9,
      12,
      4,
      10,
      7,
      15,
      8,
      10,
      0,
      15,
      8,
      6,
      11,
      8,
      14,
      2,
      12,
      15,
      11,
      13,
      2,
      14,
      7,
      16,
      0,
      9,
      7,
      16,
      11,
      13,
      11,
      16,
      4,
      4,
      17,
      8,
      10,
      7,
      17,
      8,
      12,
      0,
      17,
      4,
      15,
      14,
      7,
      17,
      2,
      2,
      16,
      4,
      15,
      2,
      17,
      0,
      16
    ],
    [
      10,
      3,
      5,
      3,
      10,
      3,
      5,
      2,
      10,
      3,
      5,
      3,
      5,
      2,
      10,
      3,
      10,
      3,
      5,
      2,
      5,
      2,
      10,
      3,
      5,
      3,
      5,
      3,
      5,
      2,
      5,
      2,
      5,
      2,
      5,
      3
    ],
    [
      0,
      1,
      5,
      14,
      21,
      29,
      26,
      17,
      8,
      2,
      0,
      2,
      7,
      10,
      3,
      0,
      3,
      9,
      19,
      27,
      29,
      28,
      20,
      12,
      4,
      0,
      4,
      11,
      6,
      1,
      1,
      6,
      15,
      23,
      28,
      26,
      24,
      16,
      10,
      3,
      1,
      3,
      9,
      13,
      5,
      2,
      8,
      18,
      12,
      4,
      2,
      4,
      11,
      15,
      22,
      21,
      27,
      25,
      16,
      7,
      5,
      13,
      19,
      25,
      24,
      17,
      18,
      12,
      11,
      6,
      5,
      6,
      15,
      22,
      14,
      7,
      16,
      24,
      17,
      8,
      7,
      8,
      18,
      20,
      23,
      22,
      14,
      13,
      9,
      10,
      9,
      10,
      16,
      25,
      19,
      11,
      15,
      23,
      20,
      12,
      13,
      14,
      21,
      27,
      19,
      17,
      26,
      28,
      20,
      18,
      21,
      22,
      23,
      28,
      29,
      24,
      26,
      29,
      27,
      25
    ]
  ],
  [
    [
      71,
      30,
      26,
      60,
      4
    ],
    [
      2,
      3,
      2,
      3,
      1,
      5,
      3
    ],
    [
      1,
      10,
      3,
      3,
      2,
      10,
      3,
      3,
      1
    ],
    [
      0,
      1,
      0.9510565162951535,
      -0.30901699437494745,
      -0.9510565162951535,
      0.42532540417602,
      0.8506508083520399,
      -0.42532540417602,
      -0.8506508083520399,
      -0.5877852522924731,
      -0.8090169943749475,
      -0.16245984811645317,
      0.5,
      0.16245984811645317,
      0.5877852522924731,
      -0.2628655560595668,
      -0.5257311121191336,
      0.6881909602355868,
      -0.6881909602355868,
      0.5257311121191336,
      0.2628655560595668,
      0.8090169943749475,
      0.30901699437494745,
      -0.5,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      0,
      3,
      5,
      6,
      3,
      7,
      8,
      3,
      9,
      0,
      10,
      11,
      6,
      12,
      13,
      8,
      12,
      14,
      0,
      10,
      15,
      16,
      10,
      17,
      16,
      12,
      18,
      19,
      12,
      20,
      19,
      10,
      19,
      8,
      0,
      9,
      0,
      21,
      8,
      16,
      0,
      6,
      19,
      0,
      14,
      0,
      21,
      16,
      6,
      0,
      15,
      16,
      21,
      20,
      19,
      21,
      2,
      0,
      22,
      11,
      6,
      23,
      17,
      16,
      23,
      18,
      19,
      23,
      13,
      8,
      23,
      4,
      0,
      22,
      5,
      6,
      22,
      7,
      8,
      22,
      0,
      0,
      24
    ],
    [
      1,
      2,
      3,
      4,
      4,
      6,
      5,
      0,
      8,
      7,
      3,
      0,
      2,
      10,
      9,
      0,
      12,
      11,
      1,
      0,
      1,
      6,
      13,
      14,
      1,
      15,
      10,
      5,
      2,
      8,
      11,
      16,
      2,
      17,
      18,
      7,
      3,
      10,
      18,
      19,
      3,
      15,
      6,
      9,
      4,
      12,
      7,
      16,
      4,
      20,
      13,
      11,
      20,
      12,
      14,
      5,
      13,
      22,
      21,
      5,
      23,
      22,
      10,
      6,
      11,
      25,
      24,
      7,
      26,
      25,
      18,
      8,
      17,
      9,
      19,
      8,
      18,
      23,
      27,
      9,
      28,
      24,
      13,
      12,
      14,
      22,
      28,
      29,
      14,
      23,
      15,
      21,
      15,
      27,
      19,
      22,
      16,
      25,
      20,
      28,
      16,
      26,
      17,
      24,
      17,
      29,
      27,
      25,
      19,
      23,
      26,
      29,
      20,
      29,
      21,
      24,
      28,
      27,
      26,
      21
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      7,
      8,
      2,
      1,
      9,
      4,
      3,
      2,
      5,
      10,
      11,
      0,
      4,
      12,
      10,
      5,
      6,
      13,
      14,
      7,
      0,
      15,
      13,
      6,
      8,
      10,
      16,
      2,
      7,
      12,
      10,
      8,
      9,
      13,
      14,
      4,
      2,
      17,
      13,
      9,
      17,
      13,
      11,
      10,
      13,
      18,
      0,
      11,
      19,
      7,
      12,
      4,
      4,
      20,
      7,
      14,
      21,
      10,
      15,
      0,
      10,
      16,
      13,
      15,
      13,
      22,
      2,
      16,
      23,
      10,
      17,
      2,
      18,
      7,
      24,
      0,
      13,
      19,
      7,
      18,
      4,
      22,
      13,
      19,
      20,
      10,
      23,
      7,
      4,
      21,
      10,
      20,
      0,
      25,
      4,
      21,
      22,
      4,
      25,
      2,
      2,
      24,
      7,
      23,
      2,
      25,
      0,
      24
    ],
    [
      10,
      3,
      3,
      2,
      10,
      3,
      3,
      1,
      10,
      3,
      3,
      2,
      3,
      1,
      10,
      3,
      3,
      1,
      3,
      2,
      10,
      3,
      3,
      1,
      3,
      1,
      10,
      3,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2
    ],
    [
      0,
      1,
      5,
      14,
      21,
      29,
      26,
      17,
      8,
      2,
      0,
      2,
      3,
      0,
      3,
      9,
      19,
      27,
      29,
      28,
      20,
      12,
      4,
      0,
      4,
      1,
      1,
      4,
      11,
      16,
      25,
      26,
      27,
      23,
      15,
      6,
      1,
      6,
      5,
      2,
      8,
      7,
      2,
      7,
      16,
      24,
      28,
      21,
      22,
      15,
      10,
      3,
      3,
      10,
      9,
      4,
      12,
      11,
      5,
      6,
      10,
      9,
      18,
      17,
      25,
      24,
      20,
      13,
      5,
      13,
      14,
      6,
      15,
      10,
      7,
      8,
      18,
      19,
      23,
      22,
      14,
      13,
      12,
      11,
      7,
      11,
      16,
      8,
      17,
      18,
      9,
      18,
      19,
      12,
      20,
      13,
      14,
      22,
      21,
      15,
      23,
      22,
      16,
      25,
      24,
      17,
      26,
      25,
      19,
      23,
      27,
      20,
      28,
      24,
      21,
      28,
      29,
      26,
      29,
      27
    ]
  ],
  [
    [
      72,
      60,
      112,
      180,
      6
    ],
    [
      0,
      3,
      2,
      3,
      2,
      5,
      2
    ],
    [
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      2
    ],
    [
      0,
      1,
      0.8757465433076833,
      -0.4827711589196728,
      -0.8174044833800904,
      -0.3142959093998577,
      0.6501517763734388,
      0.5867151572899904,
      -0.3962731062063857,
      -0.7809607118241599,
      0.08959516555026001,
      0.8711513728539819,
      0.22902039919973405,
      -0.8452701727055975,
      -0.312220730094646,
      0.4336318148307568,
      -0.37953121172624876,
      0.31153064841236383,
      -0.6140944003645031,
      -0.11396681108139672,
      -0.10891064707905872,
      0.802436162669033,
      0.8534618593890261,
      -0.5085414639340273,
      0.312220730094646,
      -0.9791144009482217,
      0.16836435438578506,
      0.3018736702698571,
      -0.901011066689848,
      0.9485998143778064,
      -0.055740893984250604,
      -0.4185577901250429,
      0.901011066689848,
      0.5724942349170471,
      -0.16836435438578506,
      0.714036625739552,
      -0.690770050794338,
      -0.5947789188357044,
      -0.04831399952009698,
      0.5931883545666249,
      0.7969561731855004,
      -0.9400878225494275,
      0.138504660549919,
      0.7342041524851785,
      0.5224056964085528,
      -0.18102539909693002,
      -0.9736766731763419,
      0.18656818853545035,
      0.5745025405062395,
      0.41558858773518437,
      -0.9082686184134333,
      0.24491024846304324,
      0.6803349962506399,
      0.9791144009482217,
      0.11396681108139672,
      -0.3018736702698571,
      -0.31153064841236383,
      0.7307785202196889,
      0.4185577901250429,
      -0.5724942349170471,
      -0.802436162669033,
      -0.41558858773518437,
      0.04831399952009698,
      0.9082686184134333,
      -0.24491024846304324,
      0.690770050794338,
      -0.6803349962506399,
      -0.7204314603949,
      -0.3884911090683392,
      0.15531508291278323,
      -0.714036625739552,
      0.5947789188357044,
      0.37953121172624876,
      -0.8711513728539819,
      0.6140944003645031,
      0.7809607118241599,
      -0.7307785202196889,
      0.055740893984250604,
      -0.5931883545666249,
      -0.7969561731855004,
      0.9400878225494275,
      -0.138504660549919,
      0.10891064707905872,
      -0.5867151572899904,
      -0.8534618593890261,
      0.5085414639340273,
      -0.15531508291278323,
      0.3884911090683392,
      -0.9485998143778064,
      0.7204314603949,
      -0.5745025405062395,
      -0.6501517763734388,
      0.4827711589196728,
      0.18102539909693002,
      0.9736766731763419,
      -0.18656818853545035,
      0.3962731062063857,
      -0.08959516555026001,
      0.8452701727055975,
      -0.4336318148307568,
      -0.22902039919973405,
      -0.8757465433076833,
      -0.7342041524851785,
      -0.5224056964085528,
      0.8174044833800904,
      0.3142959093998577,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      11,
      3,
      12,
      13,
      3,
      14,
      13,
      15,
      16,
      11,
      17,
      18,
      9,
      19,
      20,
      7,
      21,
      22,
      23,
      19,
      24,
      23,
      21,
      25,
      26,
      19,
      27,
      28,
      17,
      29,
      30,
      17,
      31,
      32,
      19,
      33,
      34,
      21,
      35,
      36,
      19,
      37,
      38,
      21,
      39,
      40,
      19,
      41,
      42,
      17,
      43,
      44,
      15,
      45,
      42,
      46,
      47,
      40,
      48,
      49,
      38,
      50,
      51,
      36,
      52,
      53,
      34,
      54,
      55,
      32,
      56,
      57,
      30,
      52,
      58,
      28,
      54,
      59,
      26,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      48,
      69,
      68,
      50,
      70,
      65,
      54,
      71,
      62,
      60,
      72,
      73,
      56,
      74,
      75,
      54,
      76,
      77,
      66,
      78,
      79,
      54,
      80,
      81,
      56,
      82,
      83,
      60,
      84,
      85,
      54,
      86,
      87,
      63,
      14,
      85,
      60,
      88,
      77,
      56,
      89,
      87,
      90,
      91,
      83,
      92,
      93,
      81,
      94,
      95,
      79,
      90,
      96,
      75,
      92,
      97,
      73,
      92,
      24,
      98,
      99,
      100,
      98,
      92,
      101,
      0,
      92,
      102,
      103,
      99,
      104,
      105,
      92,
      0,
      0,
      106
    ],
    [
      1,
      2,
      3,
      4,
      5,
      6,
      0,
      7,
      8,
      9,
      10,
      2,
      0,
      1,
      10,
      11,
      12,
      3,
      0,
      2,
      12,
      13,
      14,
      4,
      0,
      3,
      15,
      16,
      17,
      5,
      0,
      4,
      17,
      18,
      19,
      6,
      0,
      5,
      19,
      20,
      21,
      22,
      1,
      22,
      23,
      24,
      25,
      8,
      1,
      7,
      25,
      26,
      27,
      9,
      1,
      8,
      27,
      28,
      29,
      10,
      1,
      9,
      30,
      31,
      11,
      2,
      2,
      10,
      31,
      32,
      33,
      34,
      2,
      35,
      36,
      37,
      13,
      3,
      3,
      12,
      37,
      38,
      39,
      14,
      3,
      13,
      39,
      40,
      24,
      23,
      4,
      23,
      34,
      33,
      41,
      16,
      4,
      15,
      41,
      42,
      43,
      17,
      4,
      16,
      43,
      44,
      25,
      5,
      5,
      24,
      40,
      45,
      46,
      19,
      5,
      18,
      46,
      27,
      20,
      6,
      6,
      19,
      26,
      47,
      30,
      21,
      6,
      20,
      30,
      29,
      35,
      22,
      6,
      21,
      35,
      34,
      23,
      7,
      7,
      22,
      34,
      15,
      14,
      24,
      7,
      23,
      14,
      40,
      18,
      25,
      7,
      24,
      17,
      44,
      26,
      8,
      8,
      25,
      44,
      48,
      47,
      20,
      8,
      19,
      46,
      49,
      28,
      9,
      9,
      27,
      49,
      50,
      51,
      29,
      9,
      28,
      51,
      36,
      35,
      21,
      10,
      21,
      20,
      47,
      52,
      31,
      10,
      30,
      52,
      53,
      32,
      11,
      11,
      31,
      51,
      54,
      38,
      33,
      11,
      32,
      38,
      41,
      15,
      34,
      11,
      33,
      15,
      23,
      22,
      35,
      12,
      34,
      22,
      21,
      29,
      36,
      12,
      35,
      29,
      51,
      53,
      37,
      12,
      36,
      53,
      55,
      41,
      13,
      13,
      33,
      32,
      54,
      56,
      39,
      13,
      38,
      56,
      43,
      40,
      14,
      14,
      39,
      42,
      45,
      18,
      24,
      15,
      33,
      37,
      55,
      42,
      16,
      16,
      41,
      55,
      57,
      45,
      40,
      16,
      39,
      56,
      58,
      44,
      17,
      17,
      43,
      58,
      48,
      26,
      25,
      18,
      40,
      42,
      57,
      48,
      46,
      18,
      45,
      58,
      49,
      27,
      19,
      20,
      26,
      48,
      50,
      52,
      30,
      26,
      44,
      45,
      57,
      50,
      47,
      27,
      46,
      58,
      59,
      52,
      28,
      28,
      47,
      48,
      57,
      54,
      51,
      28,
      50,
      54,
      32,
      36,
      29,
      30,
      47,
      49,
      59,
      53,
      31,
      31,
      52,
      59,
      55,
      37,
      36,
      32,
      51,
      50,
      57,
      56,
      38,
      37,
      53,
      59,
      57,
      42,
      41,
      38,
      54,
      59,
      58,
      43,
      39,
      42,
      55,
      54,
      50,
      48,
      45,
      43,
      56,
      59,
      49,
      46,
      44,
      49,
      58,
      56,
      55,
      53,
      52
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      5,
      6,
      7,
      8,
      9,
      0,
      0,
      9,
      10,
      11,
      12,
      1,
      1,
      12,
      13,
      14,
      15,
      2,
      2,
      15,
      16,
      17,
      18,
      3,
      3,
      18,
      19,
      20,
      21,
      4,
      4,
      21,
      22,
      23,
      24,
      5,
      5,
      25,
      26,
      27,
      28,
      6,
      6,
      28,
      29,
      30,
      31,
      7,
      7,
      31,
      32,
      33,
      34,
      8,
      8,
      34,
      35,
      36,
      10,
      9,
      10,
      36,
      37,
      38,
      39,
      11,
      11,
      40,
      41,
      42,
      13,
      12,
      13,
      42,
      43,
      44,
      45,
      14,
      14,
      45,
      46,
      47,
      48,
      15,
      15,
      49,
      50,
      51,
      52,
      16,
      16,
      52,
      53,
      54,
      55,
      17,
      17,
      55,
      56,
      57,
      19,
      18,
      19,
      58,
      59,
      60,
      61,
      20,
      20,
      61,
      62,
      30,
      22,
      21,
      22,
      30,
      63,
      64,
      65,
      23,
      23,
      65,
      34,
      66,
      67,
      24,
      24,
      67,
      68,
      69,
      25,
      5,
      25,
      69,
      49,
      15,
      48,
      26,
      26,
      48,
      47,
      58,
      19,
      27,
      27,
      19,
      57,
      70,
      29,
      28,
      29,
      70,
      71,
      72,
      63,
      30,
      30,
      62,
      73,
      74,
      32,
      31,
      32,
      74,
      75,
      76,
      77,
      33,
      33,
      77,
      78,
      79,
      66,
      34,
      34,
      65,
      64,
      80,
      81,
      35,
      35,
      81,
      82,
      83,
      37,
      36,
      37,
      83,
      84,
      85,
      86,
      38,
      38,
      86,
      43,
      51,
      50,
      39,
      39,
      50,
      49,
      69,
      68,
      11,
      11,
      68,
      67,
      66,
      79,
      40,
      40,
      79,
      78,
      83,
      87,
      41,
      41,
      87,
      88,
      89,
      43,
      42,
      43,
      86,
      85,
      90,
      91,
      44,
      44,
      91,
      92,
      54,
      46,
      45,
      46,
      54,
      93,
      59,
      58,
      47,
      51,
      43,
      89,
      94,
      53,
      52,
      53,
      94,
      95,
      96,
      93,
      54,
      54,
      92,
      97,
      98,
      56,
      55,
      56,
      98,
      99,
      71,
      70,
      57,
      59,
      93,
      96,
      100,
      99,
      60,
      60,
      99,
      101,
      73,
      62,
      61,
      63,
      72,
      102,
      75,
      80,
      64,
      71,
      99,
      100,
      103,
      102,
      72,
      73,
      101,
      104,
      105,
      75,
      74,
      75,
      102,
      103,
      106,
      107,
      76,
      76,
      107,
      84,
      83,
      78,
      77,
      80,
      75,
      105,
      108,
      82,
      81,
      82,
      108,
      109,
      88,
      87,
      83,
      84,
      107,
      106,
      110,
      90,
      85,
      88,
      109,
      110,
      95,
      94,
      89,
      90,
      110,
      111,
      97,
      92,
      91,
      95,
      110,
      106,
      103,
      100,
      96,
      97,
      111,
      104,
      101,
      99,
      98,
      104,
      111,
      110,
      109,
      108,
      105
    ],
    [
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      2,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      2,
      3,
      1,
      5,
      2,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      3,
      0,
      3,
      4,
      0,
      4,
      5,
      0,
      5,
      6,
      0,
      6,
      22,
      7,
      1,
      1,
      7,
      8,
      1,
      8,
      9,
      1,
      9,
      10,
      1,
      10,
      2,
      2,
      10,
      11,
      2,
      11,
      34,
      35,
      12,
      2,
      12,
      3,
      3,
      12,
      13,
      3,
      13,
      14,
      3,
      14,
      23,
      15,
      4,
      4,
      15,
      16,
      4,
      16,
      17,
      4,
      17,
      5,
      5,
      17,
      25,
      24,
      18,
      5,
      18,
      19,
      5,
      19,
      6,
      6,
      19,
      20,
      6,
      20,
      21,
      6,
      21,
      22,
      7,
      22,
      23,
      7,
      23,
      24,
      7,
      24,
      25,
      7,
      25,
      8,
      8,
      25,
      26,
      8,
      26,
      20,
      19,
      27,
      8,
      27,
      9,
      9,
      27,
      28,
      9,
      28,
      29,
      9,
      29,
      21,
      30,
      10,
      10,
      30,
      31,
      10,
      31,
      11,
      11,
      31,
      32,
      11,
      32,
      33,
      11,
      33,
      34,
      12,
      35,
      36,
      12,
      36,
      37,
      12,
      37,
      13,
      13,
      37,
      41,
      33,
      38,
      13,
      38,
      39,
      13,
      39,
      14,
      14,
      39,
      40,
      14,
      40,
      24,
      14,
      24,
      23,
      15,
      23,
      34,
      15,
      34,
      33,
      15,
      33,
      41,
      15,
      41,
      16,
      16,
      41,
      42,
      16,
      42,
      40,
      39,
      43,
      16,
      43,
      17,
      17,
      43,
      44,
      17,
      44,
      25,
      18,
      24,
      40,
      18,
      40,
      45,
      18,
      45,
      46,
      18,
      46,
      19,
      19,
      46,
      27,
      20,
      26,
      47,
      20,
      47,
      30,
      20,
      30,
      21,
      21,
      29,
      35,
      21,
      35,
      22,
      22,
      35,
      34,
      22,
      34,
      23,
      25,
      44,
      26,
      26,
      44,
      48,
      26,
      48,
      47,
      27,
      46,
      49,
      27,
      49,
      28,
      28,
      49,
      52,
      47,
      50,
      28,
      50,
      51,
      28,
      51,
      29,
      29,
      51,
      36,
      29,
      36,
      35,
      30,
      47,
      52,
      30,
      52,
      31,
      31,
      52,
      53,
      31,
      53,
      36,
      51,
      32,
      32,
      51,
      54,
      32,
      54,
      38,
      32,
      38,
      33,
      36,
      53,
      37,
      37,
      53,
      55,
      37,
      55,
      41,
      38,
      54,
      56,
      38,
      56,
      39,
      39,
      56,
      43,
      40,
      42,
      45,
      41,
      55,
      42,
      42,
      55,
      57,
      42,
      57,
      45,
      43,
      56,
      58,
      43,
      58,
      44,
      44,
      58,
      46,
      45,
      48,
      45,
      57,
      48,
      46,
      58,
      49,
      47,
      48,
      50,
      48,
      57,
      50,
      49,
      58,
      59,
      49,
      59,
      52,
      50,
      57,
      54,
      50,
      54,
      51,
      52,
      59,
      53,
      53,
      59,
      55,
      54,
      57,
      55,
      59,
      56,
      56,
      59,
      58
    ]
  ],
  [
    [
      73,
      60,
      42,
      120,
      4
    ],
    [
      4,
      2,
      1,
      5,
      3,
      3,
      2,
      5,
      4
    ],
    [
      1,
      4,
      1,
      10,
      3,
      4,
      3,
      10,
      7
    ],
    [
      0,
      1,
      0.9996324920049082,
      0.027108687317114206,
      -0.9468654869305521,
      0.3204853643018842,
      0.026383502537178073,
      -0.9992842587901671,
      -0.3453645319230064,
      0.9380770006569533,
      0.052767005074356145,
      -0.9457826253657716,
      0.03646110376411101,
      -0.3445027267682465,
      -0.33528693069607346,
      -0.8768697425237396,
      0.23983052177429412,
      0.7400061526214967,
      0.6283885859146393,
      -0.31898102938582834,
      -0.061207258133213774,
      -0.9367878857036191,
      0.8677149793190179,
      0.3583135301863987,
      -0.733418467693436,
      -0.2592781061686704,
      0.6216561574614116,
      0.25677717182927856,
      -0.36789873331656375,
      0.8580570704268036,
      0.6480396599985896,
      -0.7161141408536073,
      0.8514090780087727,
      -0.457348954204127,
      0.23360222169098194,
      0.5060445460857663,
      0.4807280464528263,
      -0.7233408664665031,
      -0.6409707286037684,
      0.27629162553840514,
      0.47966104354858824,
      -0.839041576639225,
      0.4633551422383431,
      -0.22144994028415585,
      -0.4672044433819639,
      -0.5185562123373408,
      -0.7295691665498153,
      0.4864456563414429,
      0.24367982291791487,
      0.8451807779254605,
      -0.7031856640126373,
      -0.4864456563414429,
      -0.4998162460024541,
      -0.7166270603727974,
      0.4998162460024541,
      -0.8451807779254605,
      0.22144994028415585,
      0.7166270603727974,
      0.7031856640126373,
      0.5185562123373408,
      0.7295691665498153,
      -0.4807280464528263,
      -0.24367982291791487,
      0.839041576639225,
      -0.4633551422383431,
      -0.8580570704268036,
      0.4672044433819639,
      0.7161141408536073,
      -0.5060445460857663,
      -0.47966104354858824,
      -0.25677717182927856,
      -0.27629162553840514,
      0.6409707286037684,
      0.7233408664665031,
      0.36789873331656375,
      -0.3583135301863987,
      -0.23360222169098194,
      0.457348954204127,
      -0.8514090780087727,
      -0.6480396599985896,
      0.2592781061686704,
      -0.6216561574614116,
      -0.7400061526214967,
      -0.8677149793190179,
      0.3445027267682465,
      0.733418467693436,
      -0.6283885859146393,
      -0.23983052177429412,
      0.9367878857036191,
      0.061207258133213774,
      0.31898102938582834,
      0.9457826253657716,
      -0.03646110376411101,
      -0.9380770006569533,
      0.33528693069607346,
      0.8768697425237396,
      -0.05276700507435615,
      -0.3204853643018842,
      0.3453645319230064,
      -0.027108687317114206,
      0.9468654869305521,
      -0.02710868731711421,
      -0.02638350253717807,
      0.9992842587901671,
      -0.9996324920049082,
      -1
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      10,
      5,
      11,
      12,
      9,
      13,
      14,
      15,
      13,
      16,
      17,
      18,
      19,
      20,
      11,
      21,
      20,
      13,
      22,
      23,
      13,
      24,
      25,
      18,
      26,
      17,
      27,
      28,
      23,
      29,
      30,
      25,
      31,
      32,
      33,
      27,
      34,
      33,
      29,
      35,
      36,
      31,
      37,
      38,
      27,
      39,
      38,
      31,
      40,
      41,
      27,
      42,
      43,
      29,
      44,
      45,
      31,
      46,
      36,
      47,
      48,
      41,
      47,
      49,
      43,
      47,
      50,
      45,
      51,
      52,
      53,
      47,
      54,
      53,
      51,
      55,
      56,
      51,
      52,
      57,
      47,
      54,
      57,
      51,
      58,
      59,
      47,
      60,
      61,
      51,
      62,
      63,
      51,
      64,
      56,
      65,
      66,
      59,
      67,
      68,
      61,
      67,
      69,
      63,
      70,
      71,
      72,
      67,
      73,
      72,
      70,
      74,
      75,
      65,
      76,
      77,
      65,
      78,
      77,
      70,
      79,
      80,
      67,
      81,
      82,
      70,
      83,
      75,
      84,
      85,
      80,
      86,
      87,
      82,
      86,
      88,
      89,
      84,
      90,
      89,
      91,
      92,
      93,
      84,
      94,
      95,
      84,
      96,
      97,
      91,
      98,
      93,
      99,
      100,
      97,
      101,
      102,
      103,
      99,
      104,
      0,
      101,
      0,
      0,
      105
    ],
    [
      1,
      2,
      3,
      4,
      6,
      3,
      5,
      0,
      5,
      8,
      7,
      0,
      10,
      1,
      9,
      0,
      9,
      12,
      11,
      0,
      1,
      7,
      13,
      2,
      1,
      14,
      15,
      10,
      2,
      16,
      5,
      17,
      2,
      18,
      12,
      16,
      3,
      11,
      19,
      4,
      3,
      14,
      20,
      6,
      4,
      21,
      9,
      22,
      4,
      23,
      8,
      21,
      17,
      15,
      24,
      5,
      26,
      10,
      25,
      6,
      25,
      13,
      27,
      6,
      8,
      28,
      18,
      7,
      13,
      29,
      24,
      7,
      30,
      16,
      23,
      8,
      22,
      20,
      31,
      9,
      26,
      19,
      32,
      10,
      12,
      33,
      23,
      11,
      19,
      34,
      31,
      11,
      35,
      21,
      18,
      12,
      13,
      27,
      17,
      36,
      14,
      27,
      37,
      15,
      14,
      32,
      38,
      20,
      15,
      24,
      25,
      39,
      16,
      40,
      29,
      30,
      17,
      41,
      28,
      36,
      18,
      40,
      42,
      28,
      19,
      32,
      22,
      43,
      20,
      31,
      26,
      44,
      21,
      45,
      34,
      35,
      22,
      46,
      33,
      43,
      23,
      45,
      42,
      33,
      29,
      47,
      41,
      24,
      39,
      38,
      48,
      25,
      44,
      37,
      49,
      26,
      37,
      47,
      48,
      27,
      50,
      30,
      41,
      28,
      51,
      36,
      40,
      29,
      50,
      35,
      52,
      30,
      34,
      53,
      46,
      31,
      38,
      53,
      49,
      32,
      52,
      35,
      46,
      33,
      54,
      43,
      45,
      34,
      36,
      55,
      39,
      51,
      37,
      49,
      39,
      55,
      38,
      48,
      44,
      56,
      40,
      52,
      57,
      42,
      41,
      55,
      57,
      47,
      42,
      45,
      50,
      58,
      43,
      56,
      44,
      54,
      46,
      56,
      58,
      53,
      59,
      51,
      48,
      47,
      53,
      59,
      54,
      49,
      58,
      51,
      59,
      50,
      57,
      54,
      59,
      52,
      55,
      58,
      56,
      57
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      0,
      3,
      6,
      7,
      1,
      0,
      4,
      5,
      2,
      1,
      8,
      9,
      3,
      2,
      5,
      10,
      6,
      0,
      3,
      11,
      12,
      4,
      7,
      5,
      10,
      1,
      6,
      13,
      14,
      7,
      5,
      15,
      8,
      2,
      1,
      16,
      12,
      4,
      9,
      5,
      15,
      3,
      8,
      13,
      14,
      9,
      17,
      18,
      6,
      10,
      16,
      1,
      11,
      3,
      17,
      18,
      12,
      11,
      14,
      19,
      5,
      7,
      17,
      20,
      1,
      10,
      19,
      5,
      13,
      6,
      21,
      22,
      8,
      15,
      21,
      22,
      12,
      16,
      14,
      23,
      5,
      9,
      21,
      24,
      3,
      15,
      23,
      5,
      13,
      8,
      18,
      1,
      20,
      6,
      1,
      25,
      17,
      11,
      3,
      26,
      21,
      16,
      18,
      1,
      25,
      12,
      14,
      27,
      28,
      19,
      17,
      27,
      28,
      20,
      6,
      29,
      28,
      19,
      22,
      3,
      24,
      8,
      22,
      3,
      26,
      12,
      14,
      30,
      31,
      23,
      21,
      30,
      31,
      24,
      8,
      32,
      31,
      23,
      28,
      33,
      6,
      20,
      34,
      35,
      17,
      25,
      34,
      35,
      21,
      26,
      34,
      36,
      12,
      25,
      29,
      6,
      27,
      14,
      33,
      6,
      27,
      17,
      31,
      32,
      28,
      29,
      31,
      37,
      8,
      24,
      34,
      38,
      12,
      26,
      32,
      8,
      30,
      14,
      37,
      8,
      30,
      21,
      28,
      36,
      34,
      33,
      35,
      12,
      36,
      17,
      35,
      12,
      38,
      21,
      14,
      39,
      31,
      29,
      17,
      40,
      34,
      33,
      32,
      14,
      39,
      28,
      31,
      38,
      34,
      37,
      21,
      41,
      34,
      37,
      40,
      17,
      36,
      28,
      31,
      41,
      21,
      38,
      34,
      40,
      31,
      39,
      34,
      41,
      28,
      39,
      28,
      41,
      31,
      40
    ],
    [
      4,
      1,
      10,
      3,
      4,
      3,
      10,
      7,
      4,
      3,
      10,
      3,
      10,
      7,
      4,
      3,
      10,
      3,
      4,
      1,
      4,
      3,
      4,
      1,
      10,
      3,
      4,
      1,
      10,
      3,
      4,
      1,
      4,
      3,
      10,
      3,
      4,
      1,
      4,
      1,
      4,
      3,
      10,
      7,
      4,
      3,
      4,
      3,
      4,
      1,
      4,
      3,
      4,
      1,
      4,
      3,
      10,
      7,
      4,
      1,
      4,
      1,
      10,
      3,
      4,
      3,
      4,
      1,
      10,
      3,
      4,
      1,
      4,
      3,
      4,
      3,
      4,
      1,
      4,
      3,
      4,
      1,
      4,
      3
    ],
    [
      0,
      1,
      5,
      2,
      0,
      2,
      7,
      17,
      24,
      27,
      25,
      14,
      10,
      3,
      0,
      3,
      9,
      4,
      0,
      4,
      11,
      22,
      31,
      32,
      26,
      14,
      6,
      1,
      1,
      6,
      10,
      3,
      1,
      3,
      9,
      11,
      21,
      23,
      18,
      16,
      7,
      5,
      2,
      5,
      13,
      24,
      36,
      41,
      40,
      30,
      18,
      8,
      2,
      8,
      16,
      7,
      4,
      9,
      19,
      31,
      43,
      46,
      45,
      35,
      23,
      12,
      4,
      12,
      21,
      11,
      5,
      7,
      17,
      13,
      6,
      14,
      25,
      15,
      6,
      15,
      27,
      39,
      48,
      49,
      44,
      32,
      20,
      10,
      8,
      18,
      23,
      12,
      8,
      12,
      21,
      33,
      45,
      52,
      50,
      40,
      28,
      16,
      9,
      11,
      22,
      19,
      10,
      14,
      26,
      20,
      13,
      17,
      29,
      41,
      51,
      55,
      48,
      37,
      25,
      15,
      13,
      15,
      27,
      24,
      16,
      28,
      30,
      18,
      17,
      29,
      36,
      24,
      19,
      22,
      34,
      46,
      54,
      56,
      49,
      38,
      26,
      20,
      19,
      20,
      32,
      31,
      21,
      33,
      35,
      23,
      22,
      34,
      43,
      31,
      25,
      27,
      39,
      37,
      26,
      32,
      44,
      38,
      28,
      40,
      41,
      29,
      28,
      29,
      36,
      47,
      55,
      59,
      58,
      52,
      42,
      30,
      30,
      40,
      50,
      42,
      33,
      45,
      46,
      34,
      33,
      34,
      43,
      53,
      56,
      59,
      57,
      50,
      42,
      35,
      35,
      45,
      52,
      42,
      36,
      47,
      51,
      41,
      37,
      39,
      47,
      51,
      57,
      58,
      54,
      53,
      44,
      38,
      37,
      38,
      49,
      48,
      39,
      47,
      55,
      48,
      43,
      53,
      54,
      46,
      44,
      53,
      56,
      49,
      50,
      52,
      58,
      57,
      51,
      55,
      59,
      57,
      54,
      56,
      59,
      58
    ]
  ],
  [
    [
      74,
      60,
      92,
      150,
      5
    ],
    [
      0,
      3,
      2,
      5,
      3,
      2,
      1
    ],
    [
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      3,
      3,
      1
    ],
    [
      0,
      1,
      0.8737818459963552,
      -0.4863180909725669,
      -0.8272355163840105,
      -0.2813825062538141,
      0.6925555703797112,
      0.5327865391775877,
      -0.4840908003911105,
      -0.7274275299777238,
      0.2813825062538141,
      -0.08813361639195459,
      -0.5327865391775877,
      0.8416477703486445,
      -0.6603580331750197,
      0.7274275299777238,
      -0.18648446758839582,
      0.39092851222974295,
      0.9013314826822106,
      0.2550110996009453,
      -0.4760234970539502,
      -0.3947197173746576,
      0.368544943504623,
      0.9714370515743441,
      0.14674330709377356,
      -0.5280509481011633,
      0.7309574441324305,
      0.4322770073423377,
      0.02716886543527842,
      -0.9013314826822106,
      0.8594330535887018,
      0.4760234970539502,
      0.5434572030310804,
      -0.368544943504623,
      -0.7542074602460581,
      0.3094806700826181,
      -0.14674330709377356,
      0.9395148304675112,
      0.12091507244055612,
      -0.7309574441324305,
      -0.6716254611940199,
      -0.24573914345382353,
      -0.238587838554661,
      -0.39582534438804,
      -0.5239211807603127,
      -0.12430236284379517,
      0.9920238340877263,
      0.020919732152606514,
      0.9269841825609675,
      -0.37451660856154034,
      -0.6079004419315818,
      -0.24825019558618336,
      -0.35544308085105275,
      -0.9344637933498414,
      0.7014236117851573,
      0.238587838554661,
      -0.8515098127193738,
      0.5239211807603127,
      -0.042171205623519975,
      -0.9920238340877263,
      -0.11878679227147312,
      0.469088460202869,
      0.37451660856154034,
      0.7998083060434314,
      -0.9546457692995699,
      0.24825019558618336,
      -0.1643876380688465,
      -0.1545791183508379,
      0.9344637933498414,
      -0.3207533555367776,
      0.6370715704252421,
      -0.5866558879408675,
      -0.49997468265926037,
      0.729829943844934,
      -0.4103101843341699,
      0.5468032605050558,
      -0.7507169497770584,
      -0.5775303855463599,
      -0.20945260357418627,
      0.8106391312766951,
      0.6206411698426758,
      -0.6903443833582554,
      0.3717918378098488,
      0.212156578904275,
      0.41997254136569223,
      -0.8823903050954697,
      -0.12704937122335147,
      0.5866558879408675,
      0.8327162673862176,
      0.4103101843341699,
      -0.6453556929867782,
      0.5775303855463599,
      0.3759261720415014,
      -0.8106391312766951,
      -0.4489362003861892,
      0.6266939872647379,
      0.6903443833582554,
      0.3614958902836028,
      -0.6678410472356088,
      -0.41997254136569223,
      0.6145009358219785,
      0.21283989397742534,
      0.9715469399693097,
      0.1039024685363576,
      -0.941432371197861,
      -0.3088032958417601,
      0.1354459853153246,
      0.16385107449795966,
      0.8784128376615835,
      -0.17066868835390536,
      0.02047689411841654,
      -0.9851156762648845,
      -0.6425523214274492,
      0.4577282098605117,
      0.1942959816831818,
      -0.9715469399693097,
      -0.3394853504591012,
      0.3088032958417601,
      -0.8884763481944399,
      -0.3125885601543824,
      -0.8784128376615835,
      -0.9437754648357418,
      -0.02047689411841654,
      0.3299523735046358,
      0.2244549437624278,
      -0.4577282098605117,
      -0.8602934755759204,
      0.7424891903952949,
      -0.668222736951876,
      0.0467779431643162,
      -0.7746867275999862,
      -0.0891832663558887,
      0.6260246153966466,
      0.9191603379208797,
      -0.21511788491855258,
      0.4019596431708353,
      0.668222736951876,
      0.1702647736122298,
      0.0891832663558887,
      -0.9813542947727241,
      0.7353106948471412,
      0.2151178849185526,
      0.642683808440498,
      -0.102886323541283,
      0.555705184198215,
      -0.824988577304793,
      -0.77089552245507,
      -0.555705184198215,
      0.31130666827736
    ],
    [
      0,
      0,
      1,
      2,
      0,
      3,
      4,
      5,
      3,
      6,
      7,
      3,
      8,
      9,
      3,
      4,
      10,
      3,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      16,
      19,
      20,
      13,
      21,
      22,
      13,
      23,
      24,
      16,
      25,
      26,
      27,
      28,
      29,
      27,
      30,
      31,
      16,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      37,
      43,
      44,
      34,
      45,
      46,
      47,
      48,
      49,
      47,
      50,
      51,
      34,
      52,
      53,
      47,
      54,
      55,
      40,
      56,
      57,
      47,
      58,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      76,
      77,
      69,
      78,
      79,
      75,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      63,
      88,
      89,
      82,
      90,
      91,
      72,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      103,
      104,
      105,
      106,
      107,
      108,
      94,
      109,
      110,
      111,
      112,
      113,
      100,
      114,
      115,
      106,
      116,
      117,
      118,
      119,
      120,
      97,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128,
      129,
      130,
      131,
      132,
      133,
      134,
      123,
      135,
      136,
      132,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148
    ],
    [
      1,
      2,
      3,
      4,
      5,
      0,
      5,
      6,
      7,
      2,
      0,
      1,
      8,
      9,
      3,
      0,
      2,
      9,
      10,
      4,
      0,
      3,
      10,
      11,
      12,
      0,
      13,
      14,
      6,
      1,
      1,
      5,
      14,
      15,
      7,
      1,
      6,
      15,
      16,
      17,
      2,
      17,
      18,
      19,
      9,
      2,
      8,
      19,
      20,
      3,
      3,
      21,
      22,
      11,
      4,
      4,
      10,
      22,
      23,
      12,
      4,
      11,
      23,
      24,
      13,
      5,
      12,
      24,
      25,
      14,
      5,
      13,
      25,
      26,
      6,
      6,
      27,
      28,
      16,
      7,
      7,
      15,
      28,
      29,
      17,
      7,
      16,
      29,
      18,
      8,
      8,
      17,
      29,
      30,
      19,
      8,
      18,
      31,
      20,
      9,
      9,
      19,
      31,
      32,
      21,
      10,
      20,
      32,
      33,
      22,
      10,
      21,
      33,
      34,
      11,
      11,
      35,
      36,
      24,
      12,
      12,
      23,
      36,
      25,
      13,
      13,
      24,
      37,
      26,
      14,
      14,
      25,
      37,
      38,
      27,
      15,
      26,
      38,
      39,
      28,
      15,
      27,
      39,
      40,
      16,
      16,
      41,
      30,
      18,
      17,
      18,
      29,
      41,
      42,
      43,
      19,
      43,
      44,
      32,
      20,
      20,
      31,
      44,
      33,
      21,
      21,
      32,
      45,
      34,
      22,
      22,
      33,
      45,
      46,
      35,
      23,
      34,
      46,
      47,
      36,
      23,
      35,
      47,
      48,
      24,
      25,
      48,
      49,
      38,
      26,
      26,
      37,
      49,
      39,
      27,
      27,
      38,
      50,
      40,
      28,
      28,
      39,
      50,
      51,
      41,
      29,
      40,
      51,
      42,
      30,
      30,
      41,
      51,
      52,
      43,
      30,
      42,
      52,
      44,
      31,
      31,
      43,
      52,
      53,
      32,
      33,
      53,
      54,
      46,
      34,
      34,
      45,
      54,
      47,
      35,
      35,
      46,
      55,
      48,
      36,
      36,
      47,
      55,
      49,
      37,
      37,
      48,
      55,
      56,
      38,
      39,
      56,
      57,
      51,
      40,
      40,
      50,
      57,
      42,
      41,
      42,
      58,
      53,
      44,
      43,
      44,
      52,
      58,
      54,
      45,
      45,
      53,
      58,
      59,
      46,
      47,
      59,
      56,
      49,
      48,
      49,
      55,
      59,
      57,
      50,
      50,
      56,
      59,
      58,
      51,
      52,
      57,
      59,
      54,
      53,
      54,
      58,
      57,
      56,
      55
    ],
    [
      0,
      1,
      2,
      3,
      4,
      4,
      5,
      6,
      7,
      0,
      0,
      7,
      8,
      9,
      1,
      1,
      9,
      10,
      11,
      2,
      2,
      11,
      12,
      13,
      3,
      3,
      14,
      15,
      5,
      4,
      5,
      15,
      16,
      17,
      6,
      6,
      17,
      18,
      19,
      7,
      7,
      20,
      21,
      22,
      8,
      8,
      22,
      23,
      10,
      9,
      10,
      24,
      25,
      12,
      11,
      12,
      25,
      26,
      27,
      13,
      13,
      27,
      28,
      29,
      3,
      3,
      29,
      30,
      31,
      14,
      14,
      31,
      32,
      16,
      15,
      16,
      33,
      34,
      18,
      17,
      18,
      34,
      35,
      36,
      19,
      19,
      36,
      37,
      20,
      7,
      20,
      37,
      38,
      39,
      21,
      21,
      39,
      40,
      23,
      22,
      23,
      40,
      41,
      42,
      10,
      10,
      42,
      43,
      44,
      24,
      24,
      44,
      45,
      26,
      25,
      26,
      46,
      47,
      28,
      27,
      28,
      47,
      48,
      30,
      29,
      30,
      48,
      49,
      32,
      31,
      32,
      49,
      50,
      51,
      16,
      16,
      51,
      52,
      53,
      33,
      33,
      53,
      54,
      35,
      34,
      35,
      55,
      38,
      37,
      36,
      38,
      55,
      56,
      57,
      39,
      39,
      58,
      59,
      41,
      40,
      41,
      59,
      60,
      43,
      42,
      43,
      60,
      61,
      45,
      44,
      45,
      61,
      62,
      63,
      26,
      26,
      63,
      64,
      65,
      46,
      46,
      65,
      66,
      48,
      47,
      48,
      67,
      68,
      50,
      49,
      50,
      68,
      69,
      52,
      51,
      52,
      69,
      70,
      54,
      53,
      54,
      70,
      71,
      72,
      35,
      35,
      72,
      73,
      56,
      55,
      56,
      73,
      74,
      75,
      57,
      57,
      75,
      76,
      58,
      39,
      58,
      76,
      77,
      60,
      59,
      60,
      78,
      79,
      62,
      61,
      62,
      79,
      80,
      64,
      63,
      64,
      80,
      81,
      66,
      65,
      66,
      81,
      82,
      67,
      48,
      67,
      82,
      83,
      69,
      68,
      69,
      84,
      85,
      71,
      70,
      71,
      85,
      74,
      73,
      72,
      74,
      86,
      77,
      76,
      75,
      77,
      86,
      87,
      78,
      60,
      78,
      87,
      88,
      80,
      79,
      80,
      89,
      83,
      82,
      81,
      83,
      89,
      90,
      84,
      69,
      84,
      90,
      91,
      74,
      85,
      74,
      91,
      88,
      87,
      86,
      88,
      91,
      90,
      89,
      80
    ],
    [
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      2,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      5,
      3,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1,
      3,
      1,
      3,
      2,
      3,
      1
    ],
    [
      0,
      1,
      2,
      0,
      2,
      3,
      0,
      3,
      4,
      0,
      4,
      12,
      13,
      5,
      0,
      5,
      1,
      1,
      5,
      6,
      1,
      6,
      7,
      1,
      7,
      17,
      8,
      2,
      2,
      8,
      9,
      2,
      9,
      3,
      3,
      9,
      20,
      21,
      10,
      3,
      10,
      4,
      4,
      10,
      11,
      4,
      11,
      12,
      5,
      13,
      14,
      5,
      14,
      6,
      6,
      14,
      26,
      27,
      15,
      6,
      15,
      7,
      7,
      15,
      16,
      7,
      16,
      17,
      8,
      17,
      18,
      8,
      18,
      19,
      8,
      19,
      9,
      9,
      19,
      20,
      10,
      21,
      22,
      10,
      22,
      11,
      11,
      22,
      34,
      35,
      23,
      11,
      23,
      12,
      12,
      23,
      24,
      12,
      24,
      13,
      13,
      24,
      25,
      13,
      25,
      14,
      14,
      25,
      26,
      15,
      27,
      28,
      15,
      28,
      16,
      16,
      28,
      40,
      41,
      29,
      16,
      29,
      17,
      17,
      29,
      18,
      18,
      29,
      30,
      18,
      30,
      43,
      31,
      19,
      19,
      31,
      20,
      20,
      31,
      32,
      20,
      32,
      21,
      21,
      32,
      33,
      21,
      33,
      22,
      22,
      33,
      34,
      23,
      35,
      36,
      23,
      36,
      24,
      24,
      36,
      48,
      37,
      25,
      25,
      37,
      26,
      26,
      37,
      38,
      26,
      38,
      27,
      27,
      38,
      39,
      27,
      39,
      28,
      28,
      39,
      40,
      29,
      41,
      30,
      30,
      41,
      42,
      30,
      42,
      43,
      31,
      43,
      44,
      31,
      44,
      32,
      32,
      44,
      53,
      45,
      33,
      33,
      45,
      34,
      34,
      45,
      46,
      34,
      46,
      35,
      35,
      46,
      47,
      35,
      47,
      36,
      36,
      47,
      48,
      37,
      48,
      49,
      37,
      49,
      38,
      38,
      49,
      56,
      50,
      39,
      39,
      50,
      40,
      40,
      50,
      51,
      40,
      51,
      41,
      41,
      51,
      42,
      42,
      51,
      57,
      58,
      52,
      42,
      52,
      43,
      43,
      52,
      44,
      44,
      52,
      53,
      45,
      53,
      54,
      45,
      54,
      46,
      46,
      54,
      59,
      55,
      47,
      47,
      55,
      48,
      48,
      55,
      49,
      49,
      55,
      56,
      50,
      56,
      57,
      50,
      57,
      51,
      52,
      58,
      53,
      53,
      58,
      54,
      54,
      58,
      59,
      55,
      59,
      56,
      56,
      59,
      57,
      57,
      59,
      58
    ]
  ],
  [
    [
      75,
      60,
      124,
      240,
      8
    ],
    [
      5,
      3,
      2,
      5,
      3,
      3,
      1,
      5,
      2
    ],
    [
      1,
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      1,
      4,
      1,
      5,
      2,
      4,
      1,
      3,
      2
    ],
    [
      0,
      1,
      -1,
      -0.6180339887498949,
      0.7861513777574233,
      0.6180339887498949,
      -0.7861513777574233,
      -0.48586827175664565,
      0.48586827175664565,
      -0.38196601125010515,
      0.38196601125010515,
      -0.8678342830067508,
      0.3177508827491172,
      0.8678342830067508,
      -0.3177508827491172,
      0.10390226050654053,
      -0.10390226050654053,
      -0.9183170947506725,
      0.9183170947506725,
      -0.2360679774997897,
      0.2360679774997897
    ],
    [
      0,
      0,
      1,
      1,
      0,
      0,
      2,
      0,
      0,
      3,
      4,
      0,
      5,
      6,
      0,
      4,
      5,
      0,
      6,
      3,
      0,
      0,
      2,
      0,
      0,
      1,
      0,
      0,
      3,
      4,
      0,
      5,
      6,
      0,
      4,
      5,
      0,
      6,
      3,
      0,
      0,
      2,
      3,
      7,
      5,
      5,
      8,
      3,
      7,
      9,
      6,
      8,
      10,
      4,
      9,
      8,
      4,
      10,
      7,
      6,
      8,
      3,
      5,
      7,
      5,
      3,
      6,
      0,
      5,
      4,
      0,
      3,
      3,
      0,
      6,
      5,
      0,
      4,
      5,
      3,
      7,
      3,
      5,
      8,
      6,
      7,
      9,
      4,
      8,
      10,
      4,
      9,
      8,
      6,
      10,
      7,
      11,
      12,
      10,
      13,
      14,
      9,
      15,
      13,
      7,
      16,
      11,
      8,
      17,
      16,
      9,
      18,
      15,
      10,
      10,
      4,
      8,
      9,
      6,
      7,
      7,
      6,
      10,
      8,
      4,
      9,
      10,
      11,
      12,
      9,
      13,
      14,
      7,
      15,
      13,
      8,
      16,
      11,
      9,
      17,
      16,
      10,
      18,
      15,
      12,
      19,
      18,
      14,
      20,
      17,
      19,
      18,
      12,
      20,
      17,
      14,
      14,
      9,
      13,
      12,
      10,
      11,
      11,
      8,
      16,
      13,
      7,
      15,
      15,
      10,
      18,
      16,
      9,
      17,
      18,
      12,
      19,
      17,
      14,
      20
    ],
    [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      0,
      8,
      7,
      9,
      10,
      11,
      12,
      13,
      0,
      13,
      7,
      8,
      10,
      9,
      12,
      11,
      0,
      14,
      15,
      16,
      17,
      5,
      6,
      13,
      0,
      13,
      15,
      14,
      17,
      16,
      6,
      5,
      0,
      4,
      3,
      18,
      19,
      20,
      21,
      13,
      0,
      13,
      3,
      4,
      19,
      18,
      21,
      20,
      0,
      22,
      23,
      24,
      25,
      1,
      2,
      13,
      0,
      13,
      23,
      22,
      25,
      24,
      2,
      1,
      1,
      26,
      27,
      28,
      29,
      11,
      12,
      2,
      1,
      2,
      27,
      26,
      29,
      28,
      12,
      11,
      1,
      10,
      9,
      30,
      31,
      15,
      14,
      2,
      1,
      2,
      9,
      10,
      31,
      30,
      14,
      15,
      1,
      4,
      3,
      6,
      5,
      8,
      7,
      2,
      3,
      11,
      12,
      30,
      31,
      16,
      17,
      4,
      3,
      4,
      12,
      11,
      31,
      30,
      17,
      16,
      3,
      15,
      14,
      32,
      33,
      34,
      35,
      4,
      3,
      4,
      14,
      15,
      33,
      32,
      35,
      34,
      5,
      34,
      35,
      36,
      37,
      20,
      21,
      6,
      5,
      6,
      35,
      34,
      37,
      36,
      21,
      20,
      5,
      19,
      18,
      38,
      39,
      23,
      22,
      6,
      5,
      6,
      18,
      19,
      39,
      38,
      22,
      23,
      7,
      20,
      21,
      38,
      39,
      24,
      25,
      8,
      7,
      8,
      21,
      20,
      39,
      38,
      25,
      24,
      7,
      23,
      22,
      40,
      41,
      26,
      27,
      8,
      7,
      8,
      22,
      23,
      41,
      40,
      27,
      26,
      9,
      25,
      24,
      41,
      40,
      28,
      29,
      10,
      9,
      10,
      24,
      25,
      40,
      41,
      29,
      28,
      9,
      27,
      26,
      42,
      43,
      44,
      45,
      10,
      9,
      10,
      26,
      27,
      43,
      42,
      45,
      44,
      11,
      44,
      45,
      46,
      47,
      15,
      14,
      12,
      11,
      12,
      45,
      44,
      47,
      46,
      14,
      15,
      16,
      46,
      47,
      48,
      49,
      34,
      35,
      17,
      16,
      17,
      47,
      46,
      49,
      48,
      35,
      34,
      16,
      33,
      32,
      36,
      37,
      19,
      18,
      17,
      16,
      17,
      32,
      33,
      37,
      36,
      18,
      19,
      18,
      35,
      34,
      50,
      51,
      52,
      53,
      19,
      18,
      19,
      34,
      35,
      51,
      50,
      53,
      52,
      20,
      52,
      53,
      54,
      55,
      23,
      22,
      21,
      20,
      21,
      53,
      52,
      55,
      54,
      22,
      23,
      24,
      54,
      55,
      56,
      57,
      26,
      27,
      25,
      24,
      25,
      55,
      54,
      57,
      56,
      27,
      26,
      28,
      57,
      56,
      58,
      59,
      44,
      45,
      29,
      28,
      29,
      56,
      57,
      59,
      58,
      45,
      44,
      28,
      43,
      42,
      46,
      47,
      31,
      30,
      29,
      28,
      29,
      42,
      43,
      47,
      46,
      30,
      31,
      30,
      45,
      44,
      48,
      49,
      33,
      32,
      31,
      30,
      31,
      44,
      45,
      49,
      48,
      32,
      33,
      32,
      47,
      46,
      59,
      58,
      50,
      51,
      33,
      32,
      33,
      46,
      47,
      58,
      59,
      51,
      50,
      36,
      49,
      48,
      58,
      59,
      52,
      53,
      37,
      36,
      37,
      48,
      49,
      59,
      58,
      53,
      52,
      36,
      51,
      50,
      54,
      55,
      39,
      38,
      37,
      36,
      37,
      50,
      51,
      55,
      54,
      38,
      39,
      38,
      53,
      52,
      56,
      57,
      41,
      40,
      39,
      38,
      39,
      52,
      53,
      57,
      56,
      40,
      41,
      40,
      55,
      54,
      59,
      58,
      42,
      43,
      41,
      40,
      41,
      54,
      55,
      58,
      59,
      43,
      42,
      42,
      56,
      57,
      51,
      50,
      48,
      49,
      43,
      42,
      43,
      57,
      56,
      50,
      51,
      49,
      48
    ],
    [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      0,
      0,
      14,
      8,
      15,
      10,
      16,
      12,
      1,
      1,
      17,
      18,
      19,
      20,
      21,
      22,
      2,
      2,
      13,
      17,
      23,
      19,
      24,
      21,
      3,
      3,
      21,
      20,
      25,
      26,
      27,
      28,
      4,
      4,
      22,
      21,
      24,
      25,
      29,
      27,
      5,
      5,
      30,
      31,
      32,
      9,
      8,
      14,
      6,
      6,
      28,
      30,
      33,
      32,
      15,
      8,
      7,
      9,
      34,
      35,
      36,
      37,
      38,
      16,
      10,
      10,
      15,
      34,
      39,
      36,
      40,
      38,
      11,
      11,
      38,
      37,
      41,
      42,
      43,
      1,
      12,
      12,
      16,
      38,
      40,
      41,
      44,
      43,
      13,
      13,
      2,
      22,
      4,
      28,
      6,
      14,
      0,
      1,
      43,
      44,
      45,
      46,
      47,
      23,
      17,
      17,
      13,
      43,
      42,
      45,
      48,
      47,
      18,
      18,
      47,
      46,
      49,
      50,
      51,
      24,
      19,
      19,
      23,
      47,
      48,
      49,
      52,
      51,
      20,
      20,
      53,
      54,
      55,
      56,
      57,
      29,
      25,
      25,
      24,
      53,
      58,
      55,
      59,
      57,
      26,
      26,
      57,
      56,
      60,
      61,
      62,
      5,
      27,
      27,
      29,
      57,
      59,
      60,
      63,
      62,
      28,
      5,
      62,
      63,
      64,
      65,
      66,
      33,
      30,
      30,
      28,
      62,
      61,
      64,
      67,
      66,
      31,
      31,
      66,
      65,
      68,
      69,
      70,
      15,
      32,
      32,
      33,
      66,
      67,
      68,
      71,
      70,
      9,
      9,
      70,
      69,
      72,
      73,
      74,
      39,
      34,
      34,
      15,
      70,
      71,
      72,
      75,
      74,
      35,
      35,
      74,
      73,
      76,
      77,
      78,
      40,
      36,
      36,
      39,
      74,
      75,
      76,
      79,
      78,
      37,
      37,
      80,
      81,
      82,
      48,
      45,
      44,
      41,
      41,
      40,
      80,
      83,
      82,
      46,
      45,
      42,
      46,
      84,
      85,
      86,
      87,
      88,
      52,
      49,
      49,
      48,
      84,
      89,
      86,
      90,
      88,
      50,
      50,
      88,
      87,
      91,
      58,
      53,
      20,
      51,
      51,
      52,
      88,
      90,
      91,
      54,
      53,
      24,
      54,
      91,
      87,
      92,
      93,
      94,
      59,
      55,
      55,
      58,
      91,
      90,
      92,
      95,
      94,
      56,
      56,
      96,
      97,
      98,
      67,
      64,
      63,
      60,
      60,
      59,
      96,
      99,
      98,
      65,
      64,
      61,
      65,
      100,
      101,
      102,
      73,
      72,
      71,
      68,
      68,
      67,
      100,
      103,
      102,
      75,
      72,
      69,
      73,
      104,
      105,
      106,
      107,
      108,
      79,
      76,
      76,
      75,
      104,
      109,
      106,
      110,
      108,
      77,
      77,
      108,
      107,
      111,
      83,
      80,
      37,
      78,
      78,
      79,
      108,
      110,
      111,
      81,
      80,
      40,
      81,
      111,
      107,
      112,
      89,
      84,
      46,
      82,
      82,
      83,
      111,
      110,
      112,
      85,
      84,
      48,
      85,
      112,
      107,
      113,
      114,
      115,
      90,
      86,
      86,
      89,
      112,
      110,
      113,
      116,
      115,
      87,
      87,
      115,
      114,
      117,
      118,
      119,
      95,
      92,
      92,
      90,
      115,
      116,
      117,
      120,
      119,
      93,
      93,
      119,
      118,
      121,
      99,
      96,
      56,
      94,
      94,
      95,
      119,
      120,
      121,
      97,
      96,
      59,
      97,
      121,
      118,
      122,
      103,
      100,
      65,
      98,
      98,
      99,
      121,
      120,
      122,
      101,
      100,
      67,
      101,
      122,
      118,
      123,
      105,
      104,
      75,
      102,
      102,
      103,
      122,
      120,
      123,
      109,
      104,
      73,
      105,
      123,
      120,
      117,
      114,
      113,
      110,
      106,
      106,
      109,
      123,
      118,
      117,
      116,
      113,
      107
    ],
    [
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      1,
      4,
      1,
      5,
      2,
      4,
      1,
      3,
      2,
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      1,
      4,
      1,
      5,
      2,
      3,
      1,
      5,
      2,
      3,
      2,
      4,
      1,
      3,
      1,
      4,
      1,
      5,
      2,
      4,
      1,
      3,
      2,
      3,
      2,
      5,
      3,
      4,
      1,
      3,
      2,
      4,
      1,
      5,
      3,
      3,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      5,
      2,
      4,
      1,
      3,
      2,
      5,
      3,
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      1,
      4,
      1,
      5,
      2,
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      1,
      5,
      2,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      5,
      3,
      4,
      1,
      5,
      2,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      5,
      2,
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      1,
      5,
      2,
      4,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      3,
      2,
      4,
      1,
      5,
      3,
      4,
      1,
      3,
      1,
      5,
      2,
      4,
      1,
      4,
      1,
      4,
      1,
      3,
      1,
      4,
      1,
      3,
      2,
      4,
      1,
      5,
      2,
      4,
      1,
      5,
      3,
      4,
      1,
      4,
      1,
      4,
      1
    ],
    [
      0,
      1,
      13,
      2,
      0,
      2,
      11,
      14,
      3,
      0,
      3,
      13,
      4,
      0,
      4,
      5,
      0,
      5,
      13,
      6,
      0,
      6,
      20,
      22,
      7,
      0,
      7,
      13,
      8,
      0,
      8,
      1,
      1,
      8,
      2,
      7,
      1,
      7,
      25,
      26,
      9,
      1,
      9,
      2,
      10,
      1,
      10,
      11,
      1,
      11,
      2,
      12,
      1,
      12,
      15,
      4,
      13,
      2,
      13,
      7,
      2,
      8,
      24,
      27,
      10,
      2,
      9,
      12,
      3,
      14,
      4,
      15,
      3,
      15,
      16,
      3,
      16,
      4,
      17,
      3,
      17,
      34,
      18,
      5,
      3,
      5,
      4,
      6,
      3,
      6,
      13,
      4,
      14,
      17,
      4,
      16,
      35,
      19,
      6,
      5,
      18,
      6,
      19,
      5,
      19,
      20,
      5,
      20,
      6,
      21,
      5,
      21,
      23,
      8,
      13,
      6,
      18,
      21,
      7,
      22,
      8,
      23,
      7,
      23,
      24,
      7,
      24,
      8,
      25,
      8,
      22,
      25,
      9,
      26,
      10,
      27,
      9,
      27,
      28,
      9,
      28,
      10,
      29,
      9,
      29,
      44,
      30,
      11,
      9,
      11,
      10,
      12,
      10,
      26,
      29,
      10,
      28,
      45,
      31,
      12,
      11,
      30,
      12,
      31,
      11,
      31,
      15,
      11,
      15,
      12,
      14,
      12,
      30,
      14,
      14,
      30,
      15,
      31,
      14,
      31,
      46,
      32,
      16,
      14,
      16,
      15,
      17,
      15,
      30,
      47,
      33,
      17,
      16,
      32,
      17,
      33,
      16,
      33,
      34,
      16,
      34,
      17,
      35,
      17,
      32,
      35,
      18,
      34,
      19,
      35,
      18,
      35,
      36,
      18,
      36,
      19,
      37,
      18,
      37,
      52,
      38,
      20,
      18,
      20,
      19,
      21,
      19,
      34,
      37,
      19,
      36,
      53,
      39,
      21,
      20,
      38,
      21,
      39,
      20,
      39,
      23,
      20,
      23,
      21,
      22,
      21,
      38,
      22,
      22,
      38,
      23,
      39,
      22,
      39,
      54,
      40,
      24,
      22,
      24,
      23,
      25,
      23,
      38,
      55,
      41,
      25,
      24,
      40,
      25,
      41,
      24,
      41,
      26,
      24,
      26,
      25,
      27,
      25,
      40,
      27,
      26,
      41,
      27,
      40,
      26,
      40,
      57,
      42,
      28,
      26,
      28,
      27,
      29,
      27,
      41,
      56,
      43,
      29,
      28,
      42,
      29,
      43,
      28,
      43,
      44,
      28,
      44,
      29,
      45,
      29,
      42,
      45,
      30,
      44,
      31,
      45,
      30,
      45,
      46,
      30,
      46,
      31,
      47,
      31,
      44,
      47,
      32,
      46,
      33,
      47,
      32,
      47,
      48,
      32,
      48,
      33,
      49,
      32,
      49,
      50,
      36,
      34,
      32,
      34,
      33,
      35,
      33,
      46,
      49,
      33,
      48,
      51,
      37,
      35,
      34,
      36,
      35,
      37,
      36,
      50,
      37,
      51,
      36,
      51,
      52,
      36,
      52,
      37,
      53,
      37,
      50,
      53,
      38,
      52,
      39,
      53,
      38,
      53,
      54,
      38,
      54,
      39,
      55,
      39,
      52,
      55,
      40,
      54,
      41,
      55,
      40,
      55,
      56,
      40,
      56,
      41,
      57,
      41,
      54,
      57,
      42,
      57,
      43,
      56,
      42,
      56,
      58,
      42,
      58,
      43,
      59,
      42,
      59,
      48,
      46,
      44,
      42,
      44,
      43,
      45,
      43,
      57,
      59,
      43,
      58,
      49,
      47,
      45,
      44,
      46,
      45,
      47,
      46,
      48,
      47,
      49,
      48,
      59,
      49,
      58,
      48,
      58,
      50,
      48,
      50,
      49,
      51,
      49,
      59,
      51,
      50,
      58,
      51,
      59,
      50,
      59,
      56,
      54,
      52,
      50,
      52,
      51,
      53,
      51,
      58,
      57,
      55,
      53,
      52,
      54,
      53,
      55,
      54,
      56,
      55,
      57,
      56,
      59,
      57,
      58
    ]
  ]
];
/* harmony export (immutable) */ __webpack_exports__["b"] = polyhedraRaw;



/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = getTransforms;
/* harmony export (immutable) */ __webpack_exports__["d"] = getTransformInstance;
/* harmony export (immutable) */ __webpack_exports__["a"] = polygon;
/* harmony export (immutable) */ __webpack_exports__["b"] = sectionSolid;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__hyperbolic_layout_js__ = __webpack_require__(161);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__polyhedra_js__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__euclidean_layout_js__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__spherical_layout_js__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__vec3_js__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_luma_gl__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__luma_gl_constants__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__luma_gl_constants___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__luma_gl_constants__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_math_gl__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_mat4__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_mat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_mat4__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__obj_js__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_worker_loader_optimal_map_js__ = __webpack_require__(299);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_worker_loader_optimal_map_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_worker_loader_optimal_map_js__);






















const cos = Math.cos;
const sin = Math.sin;
const tan = Math.tan;
const sign = Math.sign;
const pi = Math.PI;
const pi2 = pi * 2;
const sqrt = Math.sqrt;
const atan2 = Math.atan2;
const abs = Math.abs;
const acos = Math.acos;
const asin = Math.asin;

function getGenericPgonMeshData({centroid, sides, nSamplesPerSide, nLevels}) {
  const expandedVertices = [];
  sides.forEach(([from, to], i) => {
    const intermediatePoints = [];
    const direction = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["a" /* vec3_unit */](__WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](to, __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](from, -1)));
    const dist = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["d" /* vec3_dist */](from, to);
    const delta = dist / (nSamplesPerSide - 1);
    for (let i = 0; i < nSamplesPerSide; i++) {
      let p = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](from, __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](direction, delta * i));
      intermediatePoints.push(p);
    }
    expandedVertices.push.apply(expandedVertices, intermediatePoints);
  });

  let levels = [];
  for (let l = 1; l < nLevels; l++) {
    let mappedVertices = expandedVertices.map(p => {
      const scale = (nLevels - l) / nLevels;
      let pScaled = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](
        __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](centroid,  1- scale),
        __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](p, scale)
      );
      return pScaled;
    });
    levels.push(mappedVertices);
  }
  levels.unshift(expandedVertices);
  levels.push([centroid]);
  levels.reverse();
  return levels;
};

function getTransforms(state) {
  const row1 = [];
  const row2 = [];
  const row3 = [];
  const indices = [];
  const callback = (transform) => {
    indices.push(indices.length);
    row1.push.apply(row1, [transform[0], transform[1], transform[2], transform[12]]);
    row2.push.apply(row2, [transform[4], transform[5], transform[6], transform[13]]);
    row3.push.apply(row3, [transform[8], transform[9], transform[10], transform[14]]);
  };
  if (state.spherical || state.type == 'spherical') {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__spherical_layout_js__["a" /* layout */])(state.orbifold, callback);
  } else if (state.hyperbolic || state.type == 'hyperbolic') {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__hyperbolic_layout_js__["a" /* layout */])(state.orbifold, state.iterations, callback);
  } else if (state.euclidean || state.type == 'euclidean') {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__euclidean_layout_js__["b" /* layout */])(state.orbifold, state.iterations, callback);
  }
  return [row1, row2, row3, indices];
}

function getTransformInstance(gl, opt) {
  return new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["c" /* Transform */](gl, opt);
}

function polygon(gl, textures, config, state, vs, fs, getPgonMeshData, getUVs) {
  const meshData = getPgonMeshData(Object.assign({}, state, config));
  const centroid = meshData[0][0];
  const pos = [];
  const pos2 = [];
  const pos3 = [];
  const cols = [];
  const depth = [];
  const l = meshData.length;
  const {onIter = () => true} = config;
  let texCoords;
  //TODO(nico) figure out the right coords
  texCoords = getUVs(state);

  const distances = meshData[meshData.length -1].map((p, i) => {
    return __WEBPACK_IMPORTED_MODULE_4__vec3_js__["d" /* vec3_dist */](p, centroid);
  });

  for (let row = 0; row < meshData.length - 1; row++) {
    let rowCurrent = meshData[row];
    let rowNext = meshData[row + 1];
    let len = rowNext.length;
    // center point of mesh
    if (rowCurrent.length == 1) {
      rowNext.forEach((p, j) => {
        let next = (j + 1) % len;
        if (onIter(row, j)) {
          pos.push(...centroid, ...p, ...rowNext[next]);
          pos2.push(...p, ...rowNext[next], ...centroid);
          pos3.push(...rowNext[next], ...centroid, ...p);

          depth.push(0, distances[j], distances[next]);
          depth.push(distances[j], distances[next], 0);
          depth.push(distances[next], 0, distances[j]);

          cols.push(
            row, row, row,
            row+1, row+1, row+1,
            row+1, row+1, row+1
          );
        }
      });
    } else {
      rowCurrent.forEach((r, i) => {
        let next = (i + 1) % len;
        let nextNext = (next + 1) % len;
        let rNext = rowCurrent[next];
        let p = rowNext[i];
        let pNext = rowNext[next];

        if (onIter(row, i)) {
          pos.push(...r, ...p, ...pNext
          );
          pos2.push( ...p, ...pNext, ...r
          );
          pos3.push(...pNext, ...r, ...p);

          depth.push(distances[i], distances[i], distances[next]);
          depth.push(distances[i], distances[next], distances[i]);
          depth.push(distances[next], distances[i], distances[i]);

          cols.push(
            row, row, row,
            row+1, row+1, row+1,
            row+1, row+1, row+1
          );

          pos.push(...rNext, ...r, ...pNext);
          pos2.push(...r, ...pNext, ...rNext);
          pos3.push(...pNext, ...rNext, ...r);

          depth.push(distances[next], distances[i], distances[next]);
          depth.push(distances[i], distances[next], distances[next]);
          depth.push(distances[next], distances[next], distances[i]);

          cols.push(
            row, row, row,
            row, row, row,
            row+1, row+1, row+1
          );
        }
      });
    }
  }

  const [row1, row2, row3, indices] = getTransforms(state);
  const instanceCount = row1.length / 4;

  return new Promise((resolve, reject) => {
    const sourceBuffers = {
      positions: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(pos)}),
      positions2: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(pos2)}),
        size: 3
      }),
      positions3: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(pos3)}),
        size: 3
      }),
      depth: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(depth)}),
        size: 3
      }),
      cols: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(cols) }),
        size: 3
      }),
      row1: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(row1) }),
        instanced: 1,
        size: 4
      }),
      row2: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(row2) }),
        instanced: 1,
        size: 4
      }),
      row3: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(row3) }),
        instanced: 1,
        size: 4
      }),
      instanceNumber: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(indices) }),
        instanced: 1,
        size: 1
      })
    };

    const feedbackBuffers = {
      'vPosition': new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(pos.length * instanceCount)}),
      'vNormal': new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(pos.length * instanceCount)}),
      'vColor': new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(pos.length * instanceCount)})
    };

    const model = new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["f" /* Model */](gl, {
      vs,
      fs,
      isInstanced: 1,
      instanceCount,
      vertexCount: pos.length / 3,
      uniforms: {
        sDepth: textures[0],
        sColor: textures[1],
        center: centroid,
        texCoords
      },
      drawMode: gl.TRIANGLES,
      attributes: sourceBuffers
    });

    resolve({
      model,
      transform: getTransformInstance(gl, {
        vs,
        instanceCount,
        isInstanced: 1,
        elementCount: pos.length / 3,
        sourceBuffers,
        feedbackBuffers,
        varyings: ['vPosition', 'vNormal', 'vColor']
      })
    });
  });
}

const solids = {
  getQuadEdge(vertices, faces) {
    const v = [];
    for (let i = 0; i < vertices.length; i+=3) {
      v.push([
        vertices[i],
        vertices[i + 1],
        vertices[i + 2]
      ]);
    }
    const f = faces.map(f => f.vertIdxs.map(f => f + 1));
    const g = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__obj_js__["a" /* JSONReadCell */])({
      name: 'poly',
      v,
      f
    });
    //clean(g);
    return g;
  },

  getStellationFaces(vertices, faces) {
    const quadEdge = this.getQuadEdge(vertices, faces);
    const ans = [];
    quadEdge.eachFace((f, i) => {
      const n = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["a" /* vec3_unit */](f.getNormal());
      const c = f.getCentroid();
      const e = f.getEdge();
      const otherFace = e.Right();
      const otherNormal = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["a" /* vec3_unit */](otherFace.getNormal());
      const v = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](__WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](e.Org().pos, e.Dest().pos), 0.5);

      const alpha = acos(__WEBPACK_IMPORTED_MODULE_4__vec3_js__["e" /* vec3_dot */](n, otherNormal));

      // TODO(nico): need a param for general elevation
      // this would only work with solids that can be stellated
      const height = tan(alpha) * __WEBPACK_IMPORTED_MODULE_4__vec3_js__["d" /* vec3_dist */](c, v);
      const elevationVertex = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](c, __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](n, height));
      faces[f.id].elevationVertex = elevationVertex;

      //const faceVertices = [];
      //let centroid = [0, 0, 0];
      //let j = 0;
      //f.eachEdge(e => {
        //const p = e.Org().pos;
        //faceVertices.push(p);
        //centroid = vec3.vec3_add(p, centroid);
        //j++;
      //});
      //const nFace = j;
      //centroid = vec3.vec3_scale(centroid, 1/nFace);
      //const sides = faceVertices.map((v, i) => {
        //return [v, faceVertices[(i + 1) % faceVertices.length]];
      //});
      ////debugger;
      //ans.push({
        //elevation: true,
        //vertices: faceVertices,
        //length: nFace,
        //centroid,
        //sides,
        //iters: [1, 1, 1]
      //});

      f.eachEdge(e => {
        const o = e.Org().pos;
        let d = e.Dest().pos;
        //d = vec3.vec3_mid(o, d);
        const centroid = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](__WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](o, __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](d, elevationVertex)), 1/3);
        const faceVertices = [elevationVertex, o, d];
        //get pgonMeshData from faces
        const sides = faceVertices.map((v, i) => {
          return [v, faceVertices[(i + 1) % faceVertices.length]];
        });
        ans.push({
          elevation: true,
          elevationVertex,
          vertices: faceVertices,
          length: 3,
          centroid,
          sides,
          iters: [1, 1, 1]
        });
      });
    });
    return ans;
  },

  getFaces(vertices, faceTypes, faceVerts) {
    // create faces
    return faceTypes.filter((a, i) => !(i % 2)).map((n, i) => {
      const indices = [];
      while (n--) {
        indices.push(faceVerts.shift());
      }
      let centroid = [0, 0, 0];
      let refVertex = false;
      // compute vertices
      const faceVertices = indices.map((i) => {
        const v = [
          vertices[i * 3],
          vertices[i * 3 + 1],
          vertices[i * 3 + 2]
        ];
        centroid = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](v, centroid);
        return v;
      });
      const nFace = indices.length;
      centroid = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](centroid, 1/nFace);

      //get pgonMeshData from faces
      const sides = faceVertices.map((v, i) => {
        return [v, faceVertices[(i + 1) % faceVertices.length]];
      });

      let angle = 0;
      const faceCoords = faceVertices.map((v) => {
        const coord = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["a" /* vec3_unit */](__WEBPACK_IMPORTED_MODULE_4__vec3_js__["f" /* vec3_sub */](v, centroid));
        if (!refVertex) {
          angle = 0;
        } else {
          angle += acos(__WEBPACK_IMPORTED_MODULE_4__vec3_js__["e" /* vec3_dot */](refVertex, coord));
        }
        refVertex = coord;
        return [0.5 + 0.5 * cos(angle), 0.5 + 0.5 * sin(angle)];
      });

      return {
        vertIdxs: indices,
        vertices: faceVertices,
        texCoords: faceCoords,
        length: nFace,
        centroid,
        sides,
        iters: [1, 1, 1]
      };
    });
  },

  getTriangulatedFaces(faces) {
    const triangulatedFaces = [];
    faces.forEach(f => {
      const {centroid, vertIdxs, vertices, texCoords, length} = f;
      if (length == 3) {
        triangulatedFaces.push(f);
        return;
      }
      vertices.forEach((v, i) => {
        const iNext = (i + 1) % length;
        const vNext = vertices[iNext];
        let fCentroid = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](centroid, __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](v, vNext));
        fCentroid = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](fCentroid, 1/3);
        triangulatedFaces.push({
          iters: [1, 1, 1],
          centroid: fCentroid,
          vertices: [centroid, v, vNext],
          texCoords: [[0.5, 0.5], texCoords[i], texCoords[iNext]],
          length: 3
        });
      });
    });
    return triangulatedFaces;
  },

  getModel(vertices, faceTypes, faceVerts, stellated) {
    // create faces
    const faces = this.getFaces(vertices, faceTypes, faceVerts);
    // create stellation faces
    if (stellated) {
      const stellatedFaces = this.getStellationFaces(vertices, faces);
      faces.push.apply(faces, stellatedFaces);
    }
    // triangulate faces
    const triangulatedFaces = this.getTriangulatedFaces(faces);

    return {triangulatedFaces, faces}
  },

  // https://gratrix.net/polyhedra/webgl/poly.html
  getSolidFor(name, {stellated, optimalMap}, state) {
    return new Promise((resolve, reject) => {
      const data = solids[name];
      if (!data) {
        console.info('${name} not found');
        return;
      }
      if (data.triangulatedFaces) {
        resolve(data);
        return;
      }

      const [info, wythoff, config, vertCoords, vertIdxs, vertVerts, vertFaces, faceTypes, faceVerts] = data;
      const vertices = vertIdxs.map((idx) => vertCoords[idx]);

      // for myriad
      const vertices2 = [];
      let v = [];
      vertices.forEach((vi, i) => {
        if (i % 3 === 0) {
          if (v.length) {
            vertices2.push(v);
          }
          v = [];
        }
        v.push(vi);
      });
      if (v.length) {
        vertices2.push(v);
      }
      // end

      if (optimalMap) {
        let om = new __WEBPACK_IMPORTED_MODULE_10_worker_loader_optimal_map_js___default.a();
        om.onmessage = (e) => {
          const model = this.getModel(e.data, faceTypes, faceVerts, stellated);
          Object.assign(data, model);
          resolve(model);
        };
        om.postMessage([vertices, getTransforms(state)]);
        return;
      }

      let model = this.getModel(vertices, faceTypes, faceVerts, stellated);
      // for myriad
      //let f = model.faces.map(fi => {
        //return fi.vertIdxs.map(i => i + 1);
      //});
      //let json = {
        //name: '',
        //v: vertices2,
        //f: f
      //};
      //debugger;
      // end

      Object.assign(data, model);
      resolve(data);
    });
  }
};

__WEBPACK_IMPORTED_MODULE_1__polyhedra_js__["a" /* polyhedraNames */].forEach(([name, name2], i) => solids[name] = __WEBPACK_IMPORTED_MODULE_1__polyhedra_js__["b" /* polyhedraRaw */][i]);

function sectionSolid(gl, textures, config, state, vs, fs, getParams) {
  return new Promise((resolve, reject) => {

    let centroid;
    if (getParams) {
      centroid = getParams(state.orbifold[0], state.orbifold[1]).centroid;
    } else {
      centroid = [0.01, 0.01, 0.01];
    }
    solids.getSolidFor(config.solid, config, state)
      .then(({faces, triangulatedFaces}) => {
        const solid = faces;

        const allPos = [];
        const allPos2 = [];
        const allPos3 = [];
        const allCols = [];
        const allDepth = [];
        const allTexCoords = [];
        const allTexCoords2 = [];
        const allTexCoords3 = [];

        faces.forEach(f => {
          let {centroid, sides} = f;
          if (f.elevation) {
            centroid = f.elevationVertex;
          }
          const meshData = getGenericPgonMeshData(Object.assign({centroid, sides}, state, config));
          const pos = [];
          const pos2 = [];
          const pos3 = [];
          const cols = [];
          const depth = [];
          const l = meshData.length;
          //const centroid = meshData[0][0];
          const {onIter = () => true, circumbscribed = false, nLevels} = config;

          const distances = meshData.map(md => {
            return Math.max.apply(Math, md.map((p, i) => {
              return __WEBPACK_IMPORTED_MODULE_4__vec3_js__["d" /* vec3_dist */](p, centroid);
            }));
          });

          const longestDistance = Math.max.apply(Math, distances);

          for (let row = 0; row < meshData.length - 1; row++) {
            let rowCurrent = meshData[row];
            let rowNext = meshData[row + 1];
            let len = rowNext.length;
            // center point of mesh
            if (rowCurrent.length == 1) {
              rowNext.forEach((p, j) => {
                let next = (j + 1) % len;
                let rowNextNext = rowNext[next];
                const iterRes = +onIter(row, j, f, rowNext.length);
                if (iterRes) {
                  if (iterRes !== 1) {
                    p = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](__WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](centroid, 1 - iterRes), __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](p, iterRes));
                    rowNextNext = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](__WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](centroid, 1 - iterRes), __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](rowNextNext, iterRes));
                  }
                  pos.push(...centroid, ...p, ...rowNextNext);
                  pos2.push(...p, ...rowNextNext, ...centroid);
                  pos3.push(...rowNextNext, ...centroid, ...p);

                  depth.push(...centroid, ...centroid, ...centroid);

                  cols.push(
                    row, row, row,
                    row+1, row+1, row+1,
                    row+1, row+1, row+1
                  );
                }
              });
            } else {
              rowCurrent.forEach((r, i) => {
                let next = (i + 1) % len;
                let nextNext = (next + 1) % len;
                let rNext = rowCurrent[next];
                let p = rowNext[i];
                let pNext = rowNext[next];

                const iterRes = +onIter(row, i, f, rowCurrent.length);
                if (iterRes) {
                  if (iterRes !== 1) {
                    p = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](__WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](centroid, 1 - iterRes), __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](p, iterRes));
                    r = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](__WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](centroid, 1 - iterRes), __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](r, iterRes));
                    rNext = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](__WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](centroid, 1 - iterRes), __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](rNext, iterRes));
                    pNext = __WEBPACK_IMPORTED_MODULE_4__vec3_js__["b" /* vec3_add */](__WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](centroid, 1 - iterRes), __WEBPACK_IMPORTED_MODULE_4__vec3_js__["c" /* vec3_scale */](pNext, iterRes));
                  }

                  pos.push(...r, ...p, ...pNext);
                  pos2.push( ...p, ...pNext, ...r);
                  pos3.push(...pNext, ...r, ...p);

                  depth.push(...centroid, ...centroid, ...centroid);

                  cols.push(
                    row, row, row,
                    row+1, row+1, row+1,
                    row+1, row+1, row+1
                  );

                  pos.push(...rNext, ...r, ...pNext);
                  pos2.push(...r, ...pNext, ...rNext);
                  pos3.push(...pNext, ...rNext, ...r);

                  depth.push(...centroid, ...centroid, ...centroid);

                  cols.push(
                    row, row, row,
                    row, row, row,
                    row+1, row+1, row+1
                  );
                }
              });
            }
          }
          allPos.push.apply(allPos, pos);
          allPos2.push.apply(allPos2, pos2);
          allPos3.push.apply(allPos3, pos3);
          allCols.push.apply(allCols, cols);
          allDepth.push.apply(allDepth, depth);
        });

        const [row1, row2, row3, indices] = getTransforms(state);
        const instanceCount = row1.length / 4;

        const sourceBuffers = {
          positions: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(allPos)}),
          positions2: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
            buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(allPos2)}),
            size: 3
          }),
          positions3: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
            buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(allPos3)}),
            size: 3
          }),
          depth: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
            buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(allDepth)}),
            size: 3
          }),
          cols: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
            buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(allCols) }),
            size: 3
          }),
          row1: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
            buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(row1) }),
            instanced: 1,
            size: 4
          }),
          row2: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
            buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(row2) }),
            instanced: 1,
            size: 4
          }),
          row3: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
            buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(row3) }),
            instanced: 1,
            size: 4
          }),
          instanceNumber: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["e" /* _Attribute */](gl, {
            buffer: new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(indices) }),
            instanced: 1,
            size: 1
          })
        };

        const feedbackBuffers = {
          'vPosition': new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(allPos.length * instanceCount)}),
          'vNormal': new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(allPos.length * instanceCount)}),
          'vColor': new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(allPos.length * instanceCount)})
        };

        const model = new __WEBPACK_IMPORTED_MODULE_5_luma_gl__["f" /* Model */](gl, {
          vs: vs,
          fs: fs,
          isInstanced: 1,
          instanceCount,
          vertexCount: allPos.length / 3,
          uniforms: {
            sDepth: textures[0],
            sColor: textures[1],
            center: centroid,//[20, 20, 20],
            //texCoords
          },
          drawMode: gl.TRIANGLES,
          attributes: sourceBuffers
        });

        resolve({
          model,
          transform: getTransformInstance(gl, {
            vs: vs,
            instanceCount,
            isInstanced: 1,
            elementCount: allPos.length / 3,
            sourceBuffers,
            feedbackBuffers,
            varyings: ['vPosition', 'vNormal', 'vColor']
          })
        });
      });
    });
}


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = urlTexture;
/* harmony export (immutable) */ __webpack_exports__["a"] = movieTexture;
/* harmony export (immutable) */ __webpack_exports__["c"] = radialGradientTexture;
/* harmony export (immutable) */ __webpack_exports__["d"] = edgeRadialTexture;
/* harmony export (immutable) */ __webpack_exports__["e"] = edgeTexture;
/* harmony export (immutable) */ __webpack_exports__["f"] = brewerTexture;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_luma_gl__ = __webpack_require__(17);


const colorbrewer = __webpack_require__(84);

let keySet = new Set(Object.keys(colorbrewer));
keySet.delete('schemeGroups');
keySet = [...keySet];
const motifName = keySet[Math.floor(Math.random() * keySet.length)];
const motifNumber = 3;

const cos = Math.cos;
const sin = Math.sin;
const pi = Math.PI;
const pi2 = pi * 2;
const sqrt = Math.sqrt;
const atan2 = Math.atan2;
const randRound = (a, b) => Math.round(Math.random() * (b - a) + a);

function urlTexture(gl, config, state) {
  return new Promise((resolve, reject) => {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_luma_gl__["n" /* loadTextures */])(gl, {
      urls: [config.url]
    }).then((textures) => {
      resolve(textures[0]);
    })
  });
}

function movieTexture(gl, config, state) {
  config.movie = document.querySelector('#' + config.name);
  config.movie.classList.remove('hidden');
  //config.movie.playbackRate = 0.5;
  config.movie.play();
  return new Promise((resolve, reject) => {
    let texture = new __WEBPACK_IMPORTED_MODULE_0_luma_gl__["h" /* Texture2D */](gl, Object.assign({id: `tex${config.name}`}, {}, {
        parameters: {
          [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,
          [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE,
          [gl.TEXTURE_MIN_FILTER]: gl.LINEAR
        },
        data: config.movie
      }));
    resolve(texture);
  });
}

function radialGradientTexture(gl, config, state) {
  const {nLevels, pgonSize, steps, onStep} = config;
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  const d = pgonSize / 2  * Math.SQRT2;
  canvas.width = pgonSize;
  canvas.height = pgonSize;
  ctx.fillStyle = 'black';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.translate(canvas.width / 2, canvas.height / 2);
  const gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, d);
  for (let i = 0; i <= steps; i++) {
    gradient.addColorStop(i/steps, onStep(i/steps));
  }
  ctx.fillStyle = gradient;
  ctx.fillRect(-d, -d, d * 2, d * 2);

  return new Promise((resolve, reject) => {
    resolve(new __WEBPACK_IMPORTED_MODULE_0_luma_gl__["h" /* Texture2D */](gl, Object.assign({}, {data: ctx.canvas})));
  });
}

function edgeRadialTexture(gl, config, descriptor, getPgonMeshData) {
  const {nSamplesPerSide, nLevels, pgonSize, steps, onStep} = config;
  const levels = getPgonMeshData(Object.assign({}, descriptor, {nSamplesPerSide, nLevels}));
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  const d = pgonSize / 2  * Math.SQRT2;
  canvas.width = pgonSize;
  canvas.height = pgonSize;
  //ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.translate(canvas.width / 2, canvas.height / 2);
  //ctx.globalCompositeOperation = 'lighter';

  const number = config.number || 4;
  const angle = pi2/number;
  const offset = (number % 2)? 0 : 0;

  for (let i = 0; i < number; i++) {
    let angleFrom = i * angle + offset;
    let angleTo = (i + 1) * angle + offset;
    let midAngle = (angleFrom + angleTo) / 2;

    ctx.save();
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(cos(angleFrom) * d, sin(angleFrom) * d);
    ctx.arc(0, 0, d, angleFrom, angleTo, false);
    ctx.lineTo(0, 0);
    ctx.closePath();
    ctx.clip();

    const gradient = ctx.createLinearGradient(0, 0, cos(midAngle) * d, sin(midAngle) * d);
    for (let i = 0; i <= steps; i++) {
      gradient.addColorStop(i/steps, onStep(i/steps));
    }
    ctx.fillStyle = gradient;
    ctx.lineWidth = 5;
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(cos(angleFrom) * d, sin(angleFrom) * d);
    ctx.arc(0, 0, d, angleFrom, angleTo, false);
    ctx.lineTo(0, 0);
    ctx.closePath();
    ctx.fill();
    ctx.restore();

    ctx.strokeStyle = gradient;
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(cos(angleFrom) * d, sin(angleFrom) * d);
    ctx.arc(0, 0, d, angleFrom, angleTo, false);
    ctx.lineTo(0, 0);
    ctx.closePath();
    ctx.stroke();
  }

  return new Promise((resolve, reject) => {
    resolve(new __WEBPACK_IMPORTED_MODULE_0_luma_gl__["h" /* Texture2D */](gl, Object.assign({}, {data: ctx.canvas})));
  });
}

function edgeTexture(gl, config, state, getPgonMeshData) {
  const {nSamplesPerSide, nLevels, pgonSize} = config;
  const levels = getPgonMeshData(Object.assign({}, state, {nSamplesPerSide, nLevels}));
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  const d = pgonSize / 2 * Math.SQRT2;
  canvas.width = pgonSize;
  canvas.height = pgonSize;
  ctx.fillStyle = 'black';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.translate(canvas.width / 2, canvas.height / 2);

  const number = config.number || 4;
  const angle = pi2/number;
  const offset = (number % 2)? 0 : 0;
  for (let i = 0; i < number; i++) {
    let angleFrom = i * angle + offset;
    let angleTo = (i + 1) * angle + offset;
    ctx.lineWidth = 10;
    ctx.strokeStyle = 'rgb(150, 150, 150)';
    ctx.shadowBlur = 100;
    ctx.shadowColor = ctx.strokeStyle;
    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.lineTo(cos(angleFrom) * d, sin(angleFrom) * d);
    ctx.closePath();
    ctx.stroke();
  }
  return new Promise((resolve, reject) => {
    resolve(new __WEBPACK_IMPORTED_MODULE_0_luma_gl__["h" /* Texture2D */](gl, Object.assign({}, {}, {data: ctx.canvas})));
  });
}

function brewerTexture(gl, {name=motifName, number, pgonSize, nSamplesPerSide, nLevels, concentric=false},
  state, getPgonMeshData, shape={}) {

  let {centroid=null, vertices=null} = shape;
  const levels = getPgonMeshData(Object.assign({}, state, {nSamplesPerSide, nLevels}));
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  const d = pgonSize / 2 * Math.SQRT2;
  canvas.width = pgonSize;
  canvas.height = pgonSize;
  ctx.fillStyle = 'black';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
  ctx.translate(canvas.width / 2, canvas.height / 2);
  let colors;
  if (name) {
    colors = colorbrewer[name][number];
    if (!colors) {
      number /= 2;
      colors = colorbrewer[name][number];
    }
  }
  colors.reverse();

  if (!centroid) {
    centroid = levels[0][0];
  }

  let angles = Array(number).fill(0).map((i, j) => pi2/number * j);
  let offset = 0;//-7*pi/6;//(number % 2)? pi2/number/2 : 0;
  if (vertices) {
    angles = vertices.map(v => {
      const dx = v[0] - centroid[0];
      const dy = v[1] - centroid[1];
      const a  = Math.atan2(dy, dx);
      return a;
    });
  }

  //ctx.globalCompositeOperation = 'darken';
  //TODO(nico): fixme
  //TODO(nico): uncomment for hyperbolic quad, comment for euclidean
  //ctx.scale(0.71, 0.71);

  //ctx.save();
  //ctx.beginPath();
  //levels[levels.length - 1].forEach(([x, y], i) => {
    //x *= d;
    //y *= d;
    //if (i === 0) {
      //ctx.moveTo(x, y);
      //return;
    //}
    //ctx.lineTo(x, y);
  //});
  //ctx.closePath();
  //ctx.clip();

  //TODO(nico): comment for hyperbolic quad, uncomment for euclidean
  ctx.translate(-centroid[0]*d, -centroid[1]*d);

  angles.forEach((a, i) => {
    let angleFrom = a + offset;
    let angleTo = angles[(i + 1) % angles.length] + offset;
    ctx.fillStyle = colors[i];
    //ctx.strokeStyle = colors[i];
    //ctx.lineWidth = 5;
    ctx.beginPath();
    ctx.moveTo(centroid[0] * d, centroid[1] * d);
    ctx.lineTo((cos(angleFrom) + centroid[0]) * d, (sin(angleFrom) + centroid[1]) * d);
    ctx.arc(centroid[0] * d, centroid[1] * d, d, angleFrom, angleTo, false);
    ctx.lineTo(centroid[0] * d, centroid[1] * d);
    ctx.closePath();
    ctx.fill();
  });

  ctx.restore();

  if (!concentric) {
    ctx.globalAlpha = 0.1;
    ctx.fillStyle = 'white';
  }
  levels.reverse().forEach((l, i) => {
    if (concentric) {
      ctx.fillStyle = colors[i % colors.length];
    }
    //if (!concentric && (i % 2)) {
      //return;
    //}

    //let [r, g, b] = [randRound(100, 255), randRound(100, 255), randRound(100, 255)];
    //l.forEach(([x, y]) => {
      //ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;
      //ctx.beginPath();
      //ctx.arc(x * d, y * d, 2, 0, pi2, false);
      //ctx.fill();
    //});

    ctx.beginPath();
    l.forEach(([x, y], i) => {
      x *= d;
      y *= d;
      if (i === 0) {
        ctx.moveTo(x, y);
        return;
      }
      ctx.lineTo(x, y);
    });
    ctx.closePath();
    ctx.fill();

  });
  //document.body.appendChild(ctx.canvas);
  return new Promise((resolve, reject) => {
    resolve(new __WEBPACK_IMPORTED_MODULE_0_luma_gl__["h" /* Texture2D */](gl, Object.assign({id: `tex${name}-${number}`}, {}, {data: ctx.canvas})));
  });
};


/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getParams;
/* unused harmony export getUVs */
/* harmony export (immutable) */ __webpack_exports__["b"] = layout;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math_gl__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__vec3_js__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_mat4__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_mat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__);




const cos = Math.cos;
const sin = Math.sin;
const pi = Math.PI;
const pi2 = pi * 2;
const sqrt = Math.sqrt;
const atan2 = Math.atan2;
const distSq = (p) => p.x * p.x + p.y * p.y;
const asin = Math.asin;
const acos = Math.acos;

function getParams(layoutType, args) {
  const verts = vertices[layoutType].map(v => [v[0], v[1], 0]);
  const centroid = verts.reduce((acum, a) => {
    return [acum[0] + a[0], acum[1] + a[1], acum[2] + a[2]];
  }, [0, 0, 0]);
  centroid[0] /= verts.length;
  centroid[1] /= verts.length;
  centroid[2] /= verts.length;

  return {
    centroid,
    vertices: verts
  };
}

function getUVs(type, p) {
  return uvs[type];
}

const layouts = {
  'o': layouto,
  '2222': layout2222,
  '**': layoutStarStar,
  'xx': layoutxx,
  '*x': layoutStarx,
  '*2222': layoutStar2222,
  '22*': layout22Star,
  '22x': layout22x,
  '2*22': layout2Star22,
  '442': layout442,
  '*442': layoutStar442,
  '4*2': layout4Star2,
  '333': layout333,
  '*333': layoutStar333,
  '3*3': layout3Star3,
  '632': layout632,
  '*632': layoutStar632
};

const sqrt32 = Math.sqrt(3)/2;

const vertices = {
  'o': [[-1, -1], [1, -1], [1, 1], [-1, 1]],
  '2222': [[-1, -1], [1, -1], [1, 1], [-1, 1]],
  '**': [[-1, -1], [1, -1], [1, 1], [-1, 1]],
  'xx': [[-1, -1], [1, -1], [1, 1], [-1, 1]],
  '*x': [[-1, -sqrt32], [0, sqrt32], [1, -sqrt32]],
  '*2222': [[-1, -1], [1, -1], [1, 1], [-1, 1]],
  '22*': [[-1, -1], [1, -1], [1, 1], [-1, 1]],
  '22x': [[-1, -0.5], [0, 0.5], [1, -0.5]],
  '2*22': [[-1, -1], [0, 0], [1, -1]],
  '442': [[-1, 1], [1, 1], [1, -1], [-1, -1]],
  '*442': [[-1, -1], [0, -1], [0, 0]],
  '4*2': [[-1, 0], [0, 0], [0, -1]],
  '333': [[-1/3 * 1.5 / sqrt32, -1.0001], [1/3 * 1.5 / sqrt32, -1/3], [1/3 * 1.5 / sqrt32, 1], [-1/3 * 1.5 / sqrt32, 1/3]],
  '*333': [[-1/3 * 1.5 / sqrt32, -1.0001], [1/3 * 1.5 / sqrt32, -1/3], [-1/3 * 1.5 / sqrt32, 1/3]],
  '3*3': [[-1 * 1.5 / sqrt32, 1], [-1/3 * 1.5 / sqrt32, 1/3], [1/3 * 1.5 / sqrt32, 1]],
  '632': [[-1 * 1.5 / sqrt32, 1], [-1/3 * 1.5 / sqrt32, 1/3], [1/3 * 1.5 / sqrt32, 1]],
  '*632': [[-1 * 1.5 / sqrt32, 1], [-1/3 * 1.5 / sqrt32, 1/3], [-1/3 * 1.5 / sqrt32, 1]],
};

const uvs = {
  'o': [0, 0, 1, 0, 1, 1, 1, 0],
  '2222': [0, 0, 1, 0, 1, 1, 1, 0],
  '**': [0, 0, 1, 0, 1, 1, 1, 0],
  'xx': [0, 0, 1, 0, 1, 1, 1, 0],
  '*x': [0, 0, 1, 0, 1, 1, 1, 0],
  '*2222': [0, 0, 1, 0, 1, 1, 1, 0],
  '22*': [0, 0, 1, 0, 1, 1, 1, 0],
  '22x': [0, 0, 1, 0, 1, 1, 1, 0],
  '2*22': [0, 0, 1, 0, 1, 1, 1, 0],
  '442': [0, 0, 1, 0, 1, 1, 1, 0],
  '*442': [0, 0, 1, 0, 1, 1, 1, 0],
  '4*2': [0, 0, 1, 0, 1, 1, 1, 0],
  '333': [[0, 0], [1, 0], [1, 1], [0, 1]],
  '*333': [[0, 0], [1, 0], [1, 1], [0, 1]],
  '3*3': [[0, 0], [1, 0], [1, 1], [0, 1]],
  '632': [[0, 0], [1, 0], [1, 1], [0, 1]],
  '*632':[[0, 0], [1, 0], [1, 1], [0, 1]]
};

function layout(orbifold, iterations, callback) {
  // we have 17 cases for layouts, maybe we can handle them case by case.
  const type = orbifold[0];
  return layouts[type](callback, iterations, getParams(type, orbifold));
}

function tile(callback, iterations, {vertices}) {
  //Translate based on iterations
  const w1 = [vertices[1][0] - vertices[0][0], vertices[1][1] - vertices[0][1]];
  const w2 = [vertices[3][0] - vertices[0][0], vertices[3][1] - vertices[0][1]];
  let m;
  for (let i = -iterations; i <= iterations; i++) {
    for (let j = -iterations; j <= iterations; j++) {
      callback([w1[0] * i + w2[0] * j, w1[1] * i + w2[1] * j, 0]);
    }
  }
}

function layouto(callback, iterations, {vertices}) {
  tile(arr => {
    const m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().translate(arr);
    callback(m);
  }, iterations, {vertices});
}

function layout2222(callback, iterations, {vertices}) {
  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  const midPoint = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["g" /* vec3_mid */](vertices[0], vertices[1]);
  let rotMatrix = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(rotMatrix, rotMatrix, pi, [0, 0, 1]);
  rotMatrix.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](midPoint, 2));
  const originalMatrix = [id, rotMatrix];
  const matrixArray = [];
  const newVertices = [
    vertices[0],
    vertices[1],
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[2], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[2], vertices[1])),
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[3], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0]))
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layoutStarStar(callback, iterations, {vertices}) {
  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  const midPoint = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["g" /* vec3_mid */](vertices[0], vertices[1]);
  let refMatrix = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    1,  0, 0, 0,
    0, -1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );
  refMatrix.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](midPoint, 2));
  const originalMatrix = [id, refMatrix];
  const matrixArray = [];
  const newVertices = [
    vertices[0],
    vertices[1],
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[2], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[2], vertices[1])),
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[3], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0]))
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layoutxx(callback, iterations, {vertices}) {
  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  const midPoint = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["g" /* vec3_mid */](vertices[0], vertices[1]);
  let refMatrix = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    -1,  0, 0, 0,
     0,  1, 0, 0,
     0,  0, 1, 0,
     0,  0, 0, 1
  );
  refMatrix.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](midPoint, 2));
  const originalMatrix = [id, refMatrix];
  const matrixArray = [];
  const newVertices = [
    vertices[0],
    vertices[1],
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[2], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[2], vertices[1])),
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[3], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0]))
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layoutStarx(callback, iterations, {vertices}) {
  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  const midPoint = [0, -sqrt32*2, 0];
  let refMatrix = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    1,  0, 0, 0,
    0, -1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );
  refMatrix.translate(midPoint);
  const originalMatrix = [id, refMatrix];
  const matrixArray = [];
  const newVertices = [
    vertices[0],
    vertices[1],
    vertices[2],
    [0, -sqrt32*3]
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layoutStar2222(callback, iterations, {vertices}) {
  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  let m1 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m1, m1, pi, [0, 0, 1]);
  m1.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[1], vertices[0]));
  m1.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0]));
  let m2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    1,  0, 0, 0,
    0, -1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );
  m2.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0]));
  let m3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
   -1,  0, 0, 0,
    0,  1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );
  m3.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[1], vertices[0]));
  const originalMatrix = [id, m1, m2, m3];
  const matrixArray = [];
  const newVertices = [
    vertices[0],
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[1], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[1], vertices[0])),
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](__WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[2], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[1], vertices[0])), __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0])),
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[3], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0]))
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layout22Star(callback, iterations, {vertices}) {
  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  let m1 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m1, m1, pi, [0, 0, 1]);
  m1.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[1], vertices[0]));
  let m2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    1,  0, 0, 0,
    0, -1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );
  m2.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0]));
  let m3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
   -1,  0, 0, 0,
    0,  1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );
  m3.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[1], vertices[0]));
  m3.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0]));
  const originalMatrix = [id, m1, m2, m3];
  const matrixArray = [];
  const newVertices = [
    vertices[0],
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[1], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[1], vertices[0])),
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](__WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[2], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[1], vertices[0])), __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0])),
    __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[3], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0]))
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layout22x(callback, iterations, {vertices}) {
  const midPoint = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["g" /* vec3_mid */](vertices[0], vertices[2]);

  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();

  let m1 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m1, m1, pi, [0, 0, 1]);
  m1.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](midPoint, vertices[1]));

  let m2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    1,  0, 0, 0,
    0, -1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );
  m2.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[2], midPoint));

  let m3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    1,  0, 0, 0,
    0, -1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );
  m3.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[0], midPoint));

  let m4 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
   -1,  0, 0, 0,
    0,  1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );
  m4.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](midPoint, vertices[1]));
  m4.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[2], midPoint));

  let m5 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
   -1,  0, 0, 0,
    0,  1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );
  m5.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](midPoint, vertices[1]));
  m5.translate(__WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[0], midPoint));

  const originalMatrix = [id, m1, m2, m3, m4, m5];
  const matrixArray = [];
  const newY = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](vertices[2], __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](midPoint, vertices[1]))[1];
  const newVertices = [
    [vertices[0][0], vertices[1][1]],
    [vertices[2][0], vertices[1][1]],
    [vertices[2][0], newY],
    [vertices[0][0], newY]
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layout2Star22(callback, iterations, {vertices}) {
  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();

  let m1 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m1, m1, pi, [0, 0, 1]);

  let m2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    cos(pi/4*2),  sin(pi/4*2), 0, 0,
    sin(pi/4*2), -cos(pi/4*2), 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );

  let m3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    cos(3*pi/4*2),  sin(3*pi/4*2), 0, 0,
    sin(3*pi/4*2), -cos(3*pi/4*2), 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );

  const originalMatrix = [id, m1, m2, m3];
  const matrixArray = [];
  const newVertices = [
    [-1, 1],
    [1, 1],
    [1, -1],
    [-1, -1]
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layout442(callback, iterations, {vertices}) {
  const distX = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[1], vertices[0]);
  const distY = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["f" /* vec3_sub */](vertices[3], vertices[0]);

  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();

  let m1 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m1, m1, pi/2, [0, 0, 1]);
  m1.translate(distX);

  let m2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m2, m2, pi, [0, 0, 1]);
  m2.translate(distX);
  m2.translate(distY);

  let m3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m3, m3, 3*pi/2, [0, 0, 1]);
  m3.translate(distY);

  const originalMatrix = [id, m1, m2, m3];
  const matrixArray = [];
  const newVertices = [
    [-1, 1],
    [3, 1],
    [3, -3],
    [-1, -3]
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layoutStar442(callback, iterations, {vertices}) {
  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();

  let m1 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m1, m1, pi/2, [0, 0, 1]);

  let m2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m2, m2, pi, [0, 0, 1]);

  let m3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m3, m3, 3*pi/2, [0, 0, 1]);

  let m4 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    cos(3*pi/4*2),  sin(3*pi/4*2), 0, 0,
    sin(3*pi/4*2), -cos(3*pi/4*2), 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );

  let m5 = m4.clone();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m5, m5, pi/2, [0, 0, 1]);

  let m6 = m4.clone();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m6, m6, pi, [0, 0, 1]);

  let m7 = m4.clone();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m7, m7, 3*pi/2, [0, 0, 1]);

  const originalMatrix = [id, m1, m2, m3, m4, m5, m6, m7];
  const matrixArray = [];
  const newVertices = [
    [-1, 1],
    [1, 1],
    [1, -1],
    [-1, -1]
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layout4Star2(callback, iterations, {vertices}) {
  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();

  let m1 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m1, m1, pi/2, [0, 0, 1]);

  let m2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m2, m2, pi, [0, 0, 1]);

  let m3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m3, m3, 3*pi/2, [0, 0, 1]);

  let refX = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    1,  0, 0, 0,
    0, -1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );

  let refY = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
   -1, 0, 0, 0,
    0,  1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );

  let m4 = refX.clone();
  m4.translate([-1, 1, 0]);

  let m5 = refY.clone();
  m5.translate([1, -1, 0]);

  let m6 = m1.clone();
  m6.multiplyLeft(refX);
  m6.translate([1, 1, 0]);

  let m7 = m1.clone();
  m7.multiplyLeft(refY);
  m7.translate([-1, -1, 0]);

  const originalMatrix = [id, m1, m2, m3, m4, m5, m6, m7];
  const matrixArray = [];
  const newVertices = [
    [-1, 1],
    [1, 1],
    [1, -1],
    [-1, -1]
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layout333(callback, iterations, {vertices}) {
  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();

  let r1 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(r1, r1, -pi2/3, [0, 0, 1]);

  let m1 = r1.clone();
  m1.translate([1/3 * 1.5 / sqrt32,  -1, 0]);

  let m2 = r1.clone();
  m2.translate([-1/3 * 1.5 / sqrt32, 1, 0]);

  let r2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(r2, r2, -2*pi2/3, [0, 0, 1]);

  let m3 = r2.clone();
  m3.translate([ 2/3 * 1.5 / sqrt32, 0, 0]);

  let m4 = r2.clone();
  m4.translate([-2/3 * 1.5 / sqrt32, 0, 0]);

  const originalMatrix = [id, m1, m2, m3, m4];
  const matrixArray = [];
  const newVertices = [
    [-1/3 * 1.5 / sqrt32, -1],
    [1 * 1.5 / sqrt32, -1],
    [1/3 * 1.5 / sqrt32, 1],
    [-1 * 1.5 / sqrt32, 1]
  ];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layoutStar333(callback, iterations, {vertices, centroid}) {
  const newVertices = [
    [-1/3 * 1.5 / sqrt32, -1],
    [1 * 1.5 / sqrt32, -1],
    [1/3 * 1.5 / sqrt32, 1],
    [-1 * 1.5 / sqrt32, 1]
  ];

  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();

  let ref = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    cos(-pi/6*2),  sin(-pi/6*2), 0, 0,
    sin(-pi/6*2), -cos(-pi/6*2), 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );

  let m1 = ref.clone();

  let m2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m2.translate([-centroid[0], -centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m2, m2, 2*pi/3, [0, 0, 1]);
  let centroidM2 = [
    newVertices[1][0] * 1/3 + newVertices[2][0] * 2/3,
    1/3,
    0
  ];
  m2.translate(centroidM2);

  let m3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m3.translate([-centroid[0], -centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m3, m3, 4*pi/3, [0, 0, 1]);
  let centroidM3 = [
    newVertices[0][0] * 1/3 + newVertices[1][0] * 2/3,
    -1,
    0
  ];
  m3.translate(centroidM3);

  let m4 = ref.clone();
  m4.translate([centroid[0], centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m4, m4, 2*pi/3, [0, 0, 1]);
  let centroidM4 = [
    newVertices[1][0] * 2/3 + newVertices[2][0] * 1/3,
    -1/3,
    0
  ];
  m4.translate(centroidM4);

  let m5 = ref.clone();
  m5.translate([centroid[0], centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m5, m5, 4*pi/3, [0, 0, 1]);
  let centroidM5 = [
    newVertices[0][0] * 2/3 + newVertices[1][0] * 1/3,
    -1,
    0
  ];
  m5.translate(centroidM5);

  const originalMatrix = [id, m1, m2, m3, m4, m5];
  const matrixArray = [];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layout3Star3(callback, iterations, {vertices, centroid}) {
  const newVertices = [
    [-1/3 * 1.5 / sqrt32, -1],
    [1 * 1.5 / sqrt32, -1],
    [1/3 * 1.5 / sqrt32, 1],
    [-1 * 1.5 / sqrt32, 1]
  ];

  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();

  let ref = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    cos(0),  sin(0), 0, 0,
    sin(0), -cos(0), 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );

  let m1 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m1.translate([centroid[0], centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m1, m1, 2*pi/3, [0, 0, 1]);
  let m1p1 = [-1/3 * 1.5 / sqrt32, -1];
  let m1p2 = [-1/3 * 1.5 / sqrt32, 1/3];
  let m1p3 = [1/3 * 1.5 / sqrt32, 1];
  m1p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m1p1, m1p2);
  m1p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m1p1, m1p3);
  m1p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m1p1, -1/3);
  let centroidM1 = m1p1;
  m1.translate(centroidM1);

  let m2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m2.translate([centroid[0], centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m2, m2, 4*pi/3, [0, 0, 1]);
  let m2p1 = [-1 * 1.5 / sqrt32, 1];
  let m2p2 = [-1/3 * 1.5 / sqrt32, 1/3];
  let m2p3 = [-1/3 * 1.5 / sqrt32, -1];
  m2p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m2p1, m2p2);
  m2p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m2p1, m2p3);
  m2p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m2p1, -1/3);
  let centroidM2 = m2p1;
  m2.translate(centroidM2);

  let m3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m3.translate([centroid[0], centroid[1], 0]);
  m3.multiplyLeft(ref.clone());
  let m3p1 = [-1/3 * 1.5 / sqrt32, 1];
  let m3p2 = [1/3 * 1.5 / sqrt32, 1/3];
  let m3p3 = [1 * 1.5 / sqrt32, 1];
  m3p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m3p1, m3p2);
  m3p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m3p1, m3p3);
  m3p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m3p1, -1/3);
  let centroidM3 = m3p1;
  m3.translate(centroidM3);

  let m4 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m4.translate([centroid[0], centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m4, m4, 2*pi/3, [0, 0, 1]);
  m4.multiplyRight(ref.clone());
  let m4p1 = [1 * 1.5 / sqrt32, -1];
  let m4p2 = [1/3 * 1.5 / sqrt32, -1/3];
  let m4p3 = [1/3 * 1.5 / sqrt32, 1];
  m4p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m4p1, m4p2);
  m4p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m4p1, m4p3);
  m4p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m4p1, -1/3);
  let centroidM4 = m4p1;
  m4.translate(centroidM4);

  let m5 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m5.translate([centroid[0], centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m5, m5, 4*pi/3, [0, 0, 1]);
  m5.multiplyRight(ref.clone());
  let m5p1 = [-1/3 * 1.5 / sqrt32, -1];
  let m5p2 = [1/3 * 1.5 / sqrt32, -1/3];
  let m5p3 = [1/3 * 1.5 / sqrt32, 1];
  m5p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m5p1, m5p2);
  m5p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m5p1, m5p3);
  m5p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m5p1, -1/3);
  let centroidM5 = m5p1;
  m5.translate(centroidM5);

  const originalMatrix = [id, m1, m2, m3, m4, m5];
  const matrixArray = [];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layout632(callback, iterations, {vertices, centroid}) {
  const newVertices = [
    [-1/3 * 1.5 / sqrt32, -1],
    [1 * 1.5 / sqrt32, -1],
    [1/3 * 1.5 / sqrt32, 1],
    [-1 * 1.5 / sqrt32, 1]
  ];

  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();

  let m1 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m1.translate([centroid[0], centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m1, m1, 2*pi/3, [0, 0, 1]);
  let m1p1 = [-1/3 * 1.5 / sqrt32, -1];
  let m1p2 = [-1/3 * 1.5 / sqrt32, 1/3];
  let m1p3 = [1/3 * 1.5 / sqrt32, 1];
  m1p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m1p1, m1p2);
  m1p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m1p1, m1p3);
  m1p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m1p1, -1/3);
  let centroidM1 = m1p1;
  m1.translate(centroidM1);

  let m2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m2.translate([centroid[0], centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m2, m2, 4*pi/3, [0, 0, 1]);
  let m2p1 = [-1 * 1.5 / sqrt32, 1];
  let m2p2 = [-1/3 * 1.5 / sqrt32, 1/3];
  let m2p3 = [-1/3 * 1.5 / sqrt32, -1];
  m2p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m2p1, m2p2);
  m2p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m2p1, m2p3);
  m2p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m2p1, -1/3);
  let centroidM2 = m2p1;
  m2.translate(centroidM2);

  let m3 = id.clone();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m3, m3, pi, [0, 0, 1]);

  let m4 = m1.clone();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m4, m4, pi, [0, 0, 1]);

  let m5 = m2.clone();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m5, m5, pi, [0, 0, 1]);

  const originalMatrix = [id, m1, m2, m3, m4, m5];
  const matrixArray = [];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}

function layoutStar632(callback, iterations, {vertices, centroid}) {
  const newVertices = [
    [-1/3 * 1.5 / sqrt32, -1],
    [1 * 1.5 / sqrt32, -1],
    [1/3 * 1.5 / sqrt32, 1],
    [-1 * 1.5 / sqrt32, 1]
  ];

  const id = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();

  let m1 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m1.translate([centroid[0], centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m1, m1, 2*pi/3, [0, 0, 1]);
  let m1p1 = [-1/3 * 1.5 / sqrt32, 1/3];
  let m1p2 = [0, 0];
  let m1p3 = [1/3 * 1.5 / sqrt32, 1];
  m1p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m1p1, m1p2);
  m1p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m1p1, m1p3);
  m1p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m1p1, -1/3);
  let centroidM1 = m1p1;
  m1.translate(centroidM1);

  let m2 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m2.translate([centroid[0], centroid[1], 0]);
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m2, m2, 4*pi/3, [0, 0, 1]);
  let m2p1 = [-1/3 * 1.5 / sqrt32, -1];
  let m2p2 = [-2/3 * 1.5 / sqrt32, 0];
  let m2p3 = [-1/3 * 1.5 / sqrt32, 1/3];
  m2p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m2p1, m2p2);
  m2p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m2p1, m2p3);
  m2p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m2p1, -1/3);
  let centroidM2 = m2p1;
  m2.translate(centroidM2);

  let refX = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    1,  0, 0, 0,
    0, -1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );

  let refY = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    -1,  0, 0, 0,
    0, 1, 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );

  let refXY = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    cos(-2*pi/3*2),  sin(-2*pi/3*2), 0, 0,
    sin(-2*pi/3*2), -cos(-2*pi/3*2), 0, 0,
    0,  0, 1, 0,
    0,  0, 0, 1
  );

  let m3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m3.translate([centroid[0], centroid[1], 0]);
  m3.multiplyRight(refY.clone());
  let m3p1 = [-1/3 * 1.5 / sqrt32, 1];
  let m3p2 = [-1/3 * 1.5 / sqrt32, 1/3];
  let m3p3 = [1/3 * 1.5 / sqrt32, 1];
  m3p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m3p1, m3p2);
  m3p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m3p1, m3p3);
  m3p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m3p1, -1/3);
  let centroidM3 = m3p1;
  m3.translate(centroidM3);

  let m4 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m4.translate([centroid[0], centroid[1], 0]);
  m4.multiplyRight(refY.clone());
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m4, m4, 2*pi/3, [0, 0, 1]);
  let m4p1 = [-1/3 * 1.5 / sqrt32, -1];
  let m4p2 = [-1/3 * 1.5 / sqrt32, 1/3];
  let m4p3 = [0, 0];
  m4p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m4p1, m4p2);
  m4p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m4p1, m4p3);
  m4p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m4p1, -1/3);
  let centroidM4 = m4p1;
  m4.translate(centroidM4);

  let m5 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  m5.translate([centroid[0], centroid[1], 0]);
  m5.multiplyRight(refY.clone());
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m5, m5, 4*pi/3, [0, 0, 1]);
  let m5p1 = [-1 * 1.5 / sqrt32, 1];
  let m5p2 = [-2/3 * 1.5 / sqrt32, 0];
  let m5p3 = [-1/3 * 1.5 / sqrt32, 1/3];
  m5p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m5p1, m5p2);
  m5p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](m5p1, m5p3);
  m5p1 = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](m5p1, -1/3);
  let centroidM5 = m5p1;
  m5.translate(centroidM5);

  let m6 = id.clone();
  m6.multiplyRight(refXY.clone());

  let m7 = m1.clone();
  m7.multiplyRight(refXY.clone());

  let m8 = m2.clone();
  m8.multiplyRight(refXY.clone());

  let m9 = m3.clone();
  m9.multiplyRight(refXY.clone());

  let m10 = m4.clone();
  m10.multiplyRight(refXY.clone());

  let m11 = m5.clone();
  m11.multiplyRight(refXY.clone());

  const originalMatrix = [id, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11];
  const matrixArray = [];
  tile(arr => {
    matrixArray.push.apply(matrixArray, originalMatrix.map(m => {
      m = m.clone();
      m.translate(arr);
      return m;
    }));
  }, iterations, {vertices: newVertices});
  matrixArray.forEach(m => callback(m));
}


/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CompositePass; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__pass__ = __webpack_require__(19);





//
// A composite render pass.
//
// Attribution: This class and the multipass system were inspired by
// the THREE.js EffectComposer and *Pass classes


var CompositePass =
/*#__PURE__*/
function (_Pass) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(CompositePass, _Pass);

  function CompositePass(gl, props) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, CompositePass);

    props = Array.isArray(props) ? {
      passes: props
    } : props;
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(CompositePass).call(this, gl, Object.assign({
      id: 'composite-pass'
    }, props)));
  } // Override render() to just forward the call


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(CompositePass, [{
    key: "render",
    value: function render() {
      var _this$props$passes = this.props.passes,
          passes = _this$props$passes === void 0 ? [] : _this$props$passes;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = passes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pass = _step.value;
          pass.render.apply(pass, arguments);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }]);

  return CompositePass;
}(__WEBPACK_IMPORTED_MODULE_5__pass__["a" /* default */]);


//# sourceMappingURL=composite-pass.js.map

/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export isBrowserMainThread */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__is_electron__ = __webpack_require__(264);

// This function is needed in initialization stages,
// make sure it can be imported in isolation

/* global process */

var isNode = (typeof process === "undefined" ? "undefined" : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(process)) === 'object' && String(process) === '[object process]' && !process.browser;
var isBrowser = !isNode || __WEBPACK_IMPORTED_MODULE_1__is_electron__["a" /* default */]; // document does not exist on worker thread

var isBrowserMainThread = isBrowser && typeof document !== 'undefined';
/* harmony default export */ __webpack_exports__["a"] = (isBrowser);
//# sourceMappingURL=is-browser.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(33)))

/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ERR_CONTEXT */
/* unused harmony export ERR_WEBGL */
/* unused harmony export ERR_WEBGL2 */
/* harmony export (immutable) */ __webpack_exports__["b"] = isWebGL;
/* unused harmony export isWebGL2 */
/* unused harmony export assertWebGLContext */
/* unused harmony export assertWebGL2Context */
/* unused harmony export setContextDefaults */
/* harmony export (immutable) */ __webpack_exports__["a"] = createGLContext;
/* unused harmony export destroyGLContext */
/* harmony export (immutable) */ __webpack_exports__["c"] = resizeGLContext;
/* unused harmony export pollGLContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__create_headless_context__ = __webpack_require__(133);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__create_canvas__ = __webpack_require__(132);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__create_browser_context__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__track_context_state__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__context_limits__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__webgl_utils_query_manager__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_globals__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_assert__ = __webpack_require__(5);
/* eslint-disable quotes */
// WebGLRenderingContext related methods









 // Heuristic testing of contexts (to indentify debug wrappers around gl contexts)

var GL_ARRAY_BUFFER = 0x8892;
var GL_TEXTURE_BINDING_3D = 0x806a;
var ERR_CONTEXT = 'Invalid WebGLRenderingContext';
var ERR_WEBGL = ERR_CONTEXT;
var ERR_WEBGL2 = 'Requires WebGL2'; // HACK: avoid use of `gl` parameter name to defeat GL constant inliner, which invalidates check

function isWebGL(glContext) {
  return Boolean(glContext && (glContext instanceof __WEBPACK_IMPORTED_MODULE_0__webgl_utils__["k" /* WebGLRenderingContext */] || glContext.ARRAY_BUFFER === GL_ARRAY_BUFFER));
} // HACK: avoid use of `gl` parameter name to defeat GL constant inliner, which invalidates check

function isWebGL2(glContext) {
  return Boolean(glContext && (glContext instanceof __WEBPACK_IMPORTED_MODULE_0__webgl_utils__["l" /* WebGL2RenderingContext */] || glContext.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D));
}
function assertWebGLContext(gl) {
  // Need to handle debug context
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__utils_assert__["a" /* default */])(isWebGL(gl), ERR_CONTEXT);
}
function assertWebGL2Context(gl) {
  // Need to handle debug context
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__utils_assert__["a" /* default */])(isWebGL2(gl), ERR_WEBGL2);
}
var contextDefaults = {
  // COMMON CONTEXT PARAMETERS
  // Attempt to allocate WebGL2 context
  webgl2: true,
  // Attempt to create a WebGL2 context (false to force webgl1)
  webgl1: true,
  // Attempt to create a WebGL1 context (false to fail if webgl2 not available)
  throwOnFailure: true,
  manageState: true,
  // BROWSER CONTEXT PARAMETERS
  canvas: null,
  // A canvas element or a canvas string id
  debug: false,
  // Instrument context (at the expense of performance)
  // HEADLESS CONTEXT PARAMETERS
  width: 800,
  // width are height are only used by headless gl
  height: 600 // WEBGL/HEADLESS CONTEXT PARAMETERS
  // Remaining options are passed through to context creator

};
/*
 * Change default context creation parameters.
 * Main use case is regression test suite.
 */

function setContextDefaults() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  Object.assign(contextDefaults, {
    width: 1,
    height: 1
  }, opts);
}
/*
 * Creates a context giving access to the WebGL API
 */

/* eslint-disable complexity, max-statements */

function createGLContext() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  opts = Object.assign({}, contextDefaults, opts);
  var _opts = opts,
      canvas = _opts.canvas,
      width = _opts.width,
      height = _opts.height,
      throwOnError = _opts.throwOnError,
      manageState = _opts.manageState,
      debug = _opts.debug; // Error reporting function, enables exceptions to be disabled

  function onError(message) {
    if (throwOnError) {
      throw new Error(message);
    } // log.log(0, message)();


    return null;
  }

  var gl;

  if (__WEBPACK_IMPORTED_MODULE_7__utils__["h" /* isBrowser */]) {
    // Get or create a canvas
    var targetCanvas = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__create_canvas__["a" /* getCanvas */])({
      canvas: canvas,
      width: width,
      height: height,
      onError: onError
    }); // Create a WebGL context in the canvas

    gl = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__create_browser_context__["a" /* createBrowserContext */])({
      canvas: targetCanvas,
      opts: opts
    });
  } else {
    // Create a headless-gl context under Node.js
    gl = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__create_headless_context__["a" /* createHeadlessContext */])({
      width: width,
      height: height,
      opts: opts,
      onError: onError
    });
  }

  if (!gl) {
    return null;
  } // Install context state tracking


  if (manageState) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__track_context_state__["c" /* default */])(gl, {
      copyState: false,
      log: function log() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return __WEBPACK_IMPORTED_MODULE_7__utils__["a" /* log */].log.apply(__WEBPACK_IMPORTED_MODULE_7__utils__["a" /* log */], [1].concat(args))();
      }
    });
  } // Add debug instrumentation to the context


  if (__WEBPACK_IMPORTED_MODULE_7__utils__["h" /* isBrowser */] && debug) {
    if (!__WEBPACK_IMPORTED_MODULE_8__utils_globals__["a" /* global */].makeDebugContext) {
      __WEBPACK_IMPORTED_MODULE_7__utils__["a" /* log */].warn('WebGL debug mode not activated. import "@luma.gl/debug" to enable.')();
    } else {
      gl = __WEBPACK_IMPORTED_MODULE_8__utils_globals__["a" /* global */].makeDebugContext(gl, {
        debug: debug
      }); // Debug forces log level to at least 1

      __WEBPACK_IMPORTED_MODULE_7__utils__["a" /* log */].priority = Math.max(__WEBPACK_IMPORTED_MODULE_7__utils__["a" /* log */].priority, 1);
    }
  } // Log some debug info about the newly created context


  logInfo(gl); // Add to seer integration

  return gl;
}
function destroyGLContext(gl) {
  // TODO - Remove from seer integration
  // TODO - Unregister any tracking/polyfills
  // There is no way to delete browser based context
  // Destroy headless gl context
  var ext = gl.getExtension('STACKGL_destroy_context');

  if (ext) {
    ext.destroy();
  }
}
/**
 * Resize the canvas' drawing buffer.
 *
 * Can match the canvas CSS size, and optionally also consider devicePixelRatio
 * Can be called every frame
 *
 * Regardless of size, the drawing buffer will always be scaled to the viewport, but
 * for best visual results, usually set to either:
 *  canvas CSS width x canvas CSS height
 *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio
 * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
 *
 * resizeGLContext(gl, {width, height, useDevicePixels})
 */

function resizeGLContext(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // Resize browser context
  if (gl.canvas) {
    /* global window */
    var devicePixelRatio = opts.useDevicePixels ? window.devicePixelRatio || 1 : 1;
    var width = "width" in opts ? opts.width : gl.canvas.clientWidth;
    var height = "height" in opts ? opts.height : gl.canvas.clientHeight;
    gl.canvas.width = width * devicePixelRatio;
    gl.canvas.height = height * devicePixelRatio;
    return;
  } // Resize headless gl context


  var ext = gl.getExtension('STACKGL_resize_drawingbuffer');

  if (ext && "width" in opts && "height" in opts) {
    ext.resize(opts.width, opts.height);
  }
} // POLLING FOR PENDING QUERIES
// Calling this function checks all pending queries for completion

function pollGLContext(gl) {
  __WEBPACK_IMPORTED_MODULE_6__webgl_utils_query_manager__["a" /* default */].poll(gl);
} // HELPER METHODS

function logInfo(gl) {
  var webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';
  var info = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__context_limits__["a" /* glGetDebugInfo */])(gl);
  var driver = info ? "(".concat(info.vendor, ",").concat(info.renderer, ")") : '';
  var debug = gl.debug ? ' debug' : '';

  __WEBPACK_IMPORTED_MODULE_7__utils__["a" /* log */].once(0, "".concat(webGL).concat(debug, " context ").concat(driver))();
}
//# sourceMappingURL=context.js.map

/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export clone */
/* unused harmony export deepEqual */
/* unused harmony export GL_STATE_SETTERS */
/* harmony export (immutable) */ __webpack_exports__["c"] = trackContextState;
/* harmony export (immutable) */ __webpack_exports__["a"] = pushContextState;
/* harmony export (immutable) */ __webpack_exports__["b"] = popContextState;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__set_parameters__ = __webpack_require__(134);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_assert__ = __webpack_require__(5);



// Support for listening to context state changes and intercepting state queries
//
// NOTE: this system does not handle buffer bindings


var clone = function clone(x) {
  return Array.isArray(x) || ArrayBuffer.isView(x) ? x.slice() : x;
};
var deepEqual = function deepEqual(x, y) {
  var isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);
  var isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);

  if (isArrayX && isArrayY && x.length === y.length) {
    for (var i = 0; i < x.length; ++i) {
      if (x[i] !== y[i]) {
        return false;
      }
    }

    return true;
  }

  return x === y;
}; // interceptors for WEBGL FUNCTIONS that set WebGLRenderingContext state
// These "setters" map functions to gl parameters

var GL_STATE_SETTERS = {
  // GENERIC SETTERS
  enable: function enable(update, cap) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, cap, true));
  },
  disable: function disable(update, cap) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, cap, false));
  },
  pixelStorei: function pixelStorei(update, pname, param) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, pname, param));
  },
  hint: function hint(update, pname, _hint) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, pname, _hint));
  },
  // SPECIFIC SETTERS
  bindFramebuffer: function bindFramebuffer(update, target, fb) {
    var _update5;

    switch (target) {
      case 36160:
        return update((_update5 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update5, 36006, fb), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update5, 36010, fb), _update5));

      case 36009:
        return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 36006, fb));

      case 36008:
        return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 36010, fb));

      default:
        return null;
    }
  },
  blendColor: function blendColor(update, r, g, b, a) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 32773, new Float32Array([r, g, b, a])));
  },
  blendEquation: function blendEquation(update, mode) {
    var _update9;

    return update((_update9 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update9, 32777, mode), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update9, 34877, mode), _update9));
  },
  blendEquationSeparate: function blendEquationSeparate(update, modeRGB, modeAlpha) {
    var _update10;

    return update((_update10 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update10, 32777, modeRGB), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update10, 34877, modeAlpha), _update10));
  },
  blendFunc: function blendFunc(update, src, dst) {
    var _update11;

    return update((_update11 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update11, 32969, src), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update11, 32968, dst), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update11, 32971, src), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update11, 32970, dst), _update11));
  },
  blendFuncSeparate: function blendFuncSeparate(update, srcRGB, dstRGB, srcAlpha, dstAlpha) {
    var _update12;

    return update((_update12 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update12, 32969, srcRGB), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update12, 32968, dstRGB), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update12, 32971, srcAlpha), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update12, 32970, dstAlpha), _update12));
  },
  clearColor: function clearColor(update, r, g, b, a) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 3106, new Float32Array([r, g, b, a])));
  },
  clearDepth: function clearDepth(update, depth) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 2931, depth));
  },
  clearStencil: function clearStencil(update, s) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 2961, s));
  },
  colorMask: function colorMask(update, r, g, b, a) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 3107, [r, g, b, a]));
  },
  cullFace: function cullFace(update, mode) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 2885, mode));
  },
  depthFunc: function depthFunc(update, func) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 2932, func));
  },
  depthRange: function depthRange(update, zNear, zFar) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 2928, new Float32Array([zNear, zFar])));
  },
  depthMask: function depthMask(update, mask) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 2930, mask));
  },
  frontFace: function frontFace(update, face) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 2886, face));
  },
  lineWidth: function lineWidth(update, width) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 2849, width));
  },
  polygonOffset: function polygonOffset(update, factor, units) {
    var _update23;

    return update((_update23 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update23, 32824, factor), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update23, 10752, units), _update23));
  },
  sampleCoverage: function sampleCoverage(update, value, invert) {
    var _update24;

    return update((_update24 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update24, 32938, value), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update24, 32939, invert), _update24));
  },
  scissor: function scissor(update, x, y, width, height) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 3088, new Int32Array([x, y, width, height])));
  },
  stencilMask: function stencilMask(update, mask) {
    var _update26;

    return update((_update26 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update26, 2968, mask), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update26, 36005, mask), _update26));
  },
  stencilMaskSeparate: function stencilMaskSeparate(update, face, mask) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, face === 1028 ? 2968 : 36005, mask));
  },
  stencilFunc: function stencilFunc(update, func, ref, mask) {
    var _update28;

    return update((_update28 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update28, 2962, func), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update28, 2967, ref), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update28, 2963, mask), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update28, 34816, func), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update28, 36003, ref), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update28, 36004, mask), _update28));
  },
  stencilFuncSeparate: function stencilFuncSeparate(update, face, func, ref, mask) {
    var _update29;

    return update((_update29 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update29, face === 1028 ? 2962 : 34816, func), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update29, face === 1028 ? 2967 : 36003, ref), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update29, face === 1028 ? 2963 : 36004, mask), _update29));
  },
  stencilOp: function stencilOp(update, fail, zfail, zpass) {
    var _update30;

    return update((_update30 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update30, 2964, fail), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update30, 2965, zfail), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update30, 2966, zpass), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update30, 34817, fail), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update30, 34818, zfail), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update30, 34819, zpass), _update30));
  },
  stencilOpSeparate: function stencilOpSeparate(update, face, fail, zfail, zpass) {
    var _update31;

    return update((_update31 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update31, face === 1028 ? 2964 : 34817, fail), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update31, face === 1028 ? 2965 : 34818, zfail), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_update31, face === 1028 ? 2966 : 34819, zpass), _update31));
  },
  viewport: function viewport(update, x, y, width, height) {
    return update(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 2978, new Int32Array([x, y, width, height])));
  }
}; // HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT
// Overrides a WebGLRenderingContext state "getter" function
// to return values directly from cache

function installGetterOverride(gl, functionName) {
  // Get the original function from the WebGLRenderingContext
  var originalGetterFunc = gl[functionName].bind(gl); // Wrap it with a spy so that we can update our state cache when it gets called

  gl[functionName] = function get() {
    var pname = arguments.length <= 0 ? undefined : arguments[0]; // WebGL limits are not prepopulated in the cache, we must
    // query first time. They are all primitive (single value)

    if (!(pname in gl.state.cache)) {
      gl.state.cache[pname] = originalGetterFunc.apply(void 0, arguments);
    } // Optionally call the original function to do a "hard" query from the WebGLRenderingContext


    return gl.state.enable ? // Call the getter the params so that it can e.g. serve from a cache
    gl.state.cache[pname] : // Optionally call the original function to do a "hard" query from the WebGLRenderingContext
    originalGetterFunc.apply(void 0, arguments);
  }; // Set the name of this anonymous function to help in debugging and profiling


  Object.defineProperty(gl[functionName], 'name', {
    value: "".concat(functionName, "-from-cache"),
    configurable: false
  });
} // Overrides a WebGLRenderingContext state "setter" function
// to call a setter spy before the actual setter. Allows us to keep a cache
// updated with a copy of the WebGL context state.


function installSetterSpy(gl, functionName, setter) {
  // Get the original function from the WebGLRenderingContext
  var originalSetterFunc = gl[functionName].bind(gl); // Wrap it with a spy so that we can update our state cache when it gets called

  gl[functionName] = function set() {
    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    // Update the value
    // Call the setter with the state cache and the params so that it can store the parameters
    var _setter = setter.apply(void 0, [gl.state._updateCache].concat(params)),
        valueChanged = _setter.valueChanged,
        oldValue = _setter.oldValue; // Call the original WebGLRenderingContext func to make sure the context actually gets updated


    if (valueChanged) {
      var _gl$state;

      (_gl$state = gl.state).log.apply(_gl$state, ["gl.".concat(functionName)].concat(params)); // eslint-disable-line


      originalSetterFunc.apply(void 0, params);
    } // Note: if the original function fails to set the value, our state cache will be bad
    // No solution for this at the moment, but assuming that this is unlikely to be a real problem
    // We could call the setter after the originalSetterFunc. Concern is that this would
    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions


    return oldValue;
  }; // Set the name of this anonymous function to help in debugging and profiling


  Object.defineProperty(gl[functionName], 'name', {
    value: "".concat(functionName, "-to-cache"),
    configurable: false
  });
} // HELPER CLASS - GLState

/* eslint-disable no-shadow */


var GLState =
/*#__PURE__*/
function () {
  function GLState(gl) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$copyState = _ref.copyState,
        copyState = _ref$copyState === void 0 ? false : _ref$copyState,
        _ref$log = _ref.log,
        log = _ref$log === void 0 ? function () {} : _ref$log;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, GLState);

    this.gl = gl;
    this.stateStack = [];
    this.enable = true;
    this.cache = copyState ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__set_parameters__["b" /* getParameters */])(gl) : Object.assign({}, __WEBPACK_IMPORTED_MODULE_3__set_parameters__["c" /* GL_PARAMETER_DEFAULTS */]);
    this.log = log;
    this._updateCache = this._updateCache.bind(this);
    Object.seal(this);
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(GLState, [{
    key: "push",
    value: function push() {
      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.stateStack.push({});
    }
  }, {
    key: "pop",
    value: function pop() {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(this.stateStack.length > 0); // Use the saved values in the state stack to restore parameters

      var oldValues = this.stateStack[this.stateStack.length - 1];
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__set_parameters__["a" /* setParameters */])(this.gl, oldValues, this.cache); // Don't pop until we have reset parameters (to make sure other "stack frames" are not affected)

      this.stateStack.pop();
    } // interceptor for context set functions - update our cache and our stack
    // values (Object) - the key values for this setter

  }, {
    key: "_updateCache",
    value: function _updateCache(values) {
      var valueChanged = false;
      var oldValue; // = undefined

      var oldValues = this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1];

      for (var key in values) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(key !== undefined); // Check that value hasn't already been shadowed

        if (!deepEqual(values[key], this.cache[key])) {
          valueChanged = true;
          oldValue = this.cache[key]; // First, save current value being shadowed
          // If a state stack frame is active, save the current parameter values for pop
          // but first check that value hasn't already been shadowed and saved

          if (oldValues && !(key in oldValues)) {
            oldValues[key] = this.cache[key];
          } // Save current value being shadowed


          this.cache[key] = values[key];
        }
      }

      return {
        valueChanged: valueChanged,
        oldValue: oldValue
      };
    }
  }]);

  return GLState;
}(); // PUBLIC API

/**
 * Initialize WebGL state caching on a context
 * can be called multiple times to enable/disable
 * @param {WebGLRenderingContext} - context
 */
// After calling this function, context state will be cached
// gl.state.push() and gl.state.pop() will be available for saving,
// temporarily modifying, and then restoring state.


function trackContextState(gl) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$enable = _ref2.enable,
      enable = _ref2$enable === void 0 ? true : _ref2$enable,
      copyState = _ref2.copyState;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(copyState !== undefined);

  if (!gl.state) {
    /* global window, global */
    var global_ = typeof global !== 'undefined' ? global : window;

    if (global_.polyfillContext) {
      global_.polyfillContext(gl);
    } // Create a state cache


    gl.state = new GLState(gl, {
      copyState: copyState,
      enable: enable
    }); // intercept all setter functions in the table

    for (var key in GL_STATE_SETTERS) {
      var setter = GL_STATE_SETTERS[key];
      installSetterSpy(gl, key, setter);
    } // intercept all getter functions in the table


    installGetterOverride(gl, 'getParameter');
    installGetterOverride(gl, 'isEnabled');
  }

  gl.state.enable = enable;
  return gl;
}
function pushContextState(gl) {
  if (!gl.state) {
    trackContextState(gl, {
      copyState: false
    });
  }

  gl.state.push();
}
function popContextState(gl) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(gl.state);
  gl.state.pop();
}
//# sourceMappingURL=track-context-state.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(28)))

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);


//
// Internal class that helps "asynchronous WebGL query objects" manage
// pending requests (e.g. for EXT_disjoint_timer_query and WebGL2 queries)
//
// Creates and manages promises for the queries.
// Tracks pending queries enabling polling.
// Tracks pending queries enabling invalidation.
// Provides some standard error messages.
//
// Remarks:
// - Maintains a minimal list of pending queries only to minimize GC impact
// - Exported as a singleton class instance.
var ERR_DELETED = 'Query was deleted before result was available';
var ERR_CANCEL = 'Query was canceled before result was available';

var noop = function noop(x) {
  return x;
};

var QueryManager =
/*#__PURE__*/
function () {
  function QueryManager() {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, QueryManager);

    this.pendingQueries = new Set();
    this.invalidQueryType = null;
    this.invalidErrorMessage = '';

    this.checkInvalid = function () {
      return false;
    };
  } // API THAT SHOULD BE EXPOSED TO APPLICATION
  // Checks invalidation callback and then all pending queries for completion
  // Should only be called once per tick


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(QueryManager, [{
    key: "poll",
    value: function poll(gl) {
      this.cancelInvalidQueries(gl); // Now check availability of results and resolve promises as appropriate

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.pendingQueries.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var query = _step.value;
          var resultAvailable = query.isResultAvailable();

          if (resultAvailable) {
            var result = query.getResult();
            this.resolveQuery(query, result);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } // API FOR MANAGED QUERY CLASSES
    // Registers query invalidation method - used to detect disjoint timer queries

  }, {
    key: "setInvalidator",
    value: function setInvalidator(_ref) {
      var queryType = _ref.queryType,
          errorMessage = _ref.errorMessage,
          checkInvalid = _ref.checkInvalid;
      this.invalidQueryType = queryType;
      this.invalidErrorMessage = errorMessage;
      this.checkInvalid = checkInvalid;
    } // Starts a query, sets up a new promise

  }, {
    key: "beginQuery",
    value: function beginQuery(query) {
      var onComplete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
      var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;
      // Make sure disjoint state is cleared, so that this query starts fresh
      // Cancel other queries if needed
      this.cancelInvalidQueries(query.gl); // Cancel current promise - noop if already resolved or rejected

      this.cancelQuery(query); // Create a new promise with attached resolve and reject methods

      var resolvers = {};
      query.promise = new Promise(function (resolve, reject) {
        resolvers.resolve = resolve;
        resolvers.reject = reject;
      });
      Object.assign(query.promise, resolvers); // Add this query to the pending queries

      this.pendingQueries.add(query); // Register the callbacks

      return query.promise.then(onComplete).catch(onError);
    } // Resolves a query with a result

  }, {
    key: "resolveQuery",
    value: function resolveQuery(query, result) {
      this.pendingQueries.delete(query);
      query.promise.resolve(result);
    } // Rejects the promise

  }, {
    key: "rejectQuery",
    value: function rejectQuery(query, errorMessage) {
      this.pendingQueries.delete(query);

      if (query.promise) {
        query.promise.reject(new Error(errorMessage));
      }
    } // Rejects promise with standard message for Query.delete()

  }, {
    key: "deleteQuery",
    value: function deleteQuery(query) {
      return this.rejectQuery(query, ERR_DELETED);
    } // Rejects promise with standard message for Query.cancel()

  }, {
    key: "cancelQuery",
    value: function cancelQuery(query) {
      return this.rejectQuery(query, ERR_CANCEL);
    } // Rejects promise with registered message for invalidation

  }, {
    key: "invalidateQuery",
    value: function invalidateQuery(query) {
      if (query instanceof this.invalidQueryType) {
        this.rejectQuery(query, this.invalidErrorMessage);
      }
    } // Checks all queries to see if need to be invalidated

  }, {
    key: "cancelInvalidQueries",
    value: function cancelInvalidQueries(gl) {
      // We assume that we can cancel queries for all context.
      // Should be OK since this is used to check for "disjoint" GPU state
      if (this.checkInvalid(gl)) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.pendingQueries.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var query = _step2.value;
            this.invalidateQuery(query);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  }]);

  return QueryManager;
}();

/* harmony default export */ __webpack_exports__["a"] = (new QueryManager());
//# sourceMappingURL=query-manager.js.map

/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = cloneTextureFrom;
/* harmony export (immutable) */ __webpack_exports__["a"] = toFramebuffer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_texture_2d__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_texture_cube__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_texture_3d__ = __webpack_require__(139);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_framebuffer__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_assert__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_assert__);





 // Clone a new texture object from a reference texture object.

function cloneTextureFrom(refTexture, overrides) {
  __WEBPACK_IMPORTED_MODULE_5_assert___default()(refTexture instanceof __WEBPACK_IMPORTED_MODULE_1__webgl_texture_2d__["a" /* default */] || refTexture instanceof __WEBPACK_IMPORTED_MODULE_2__webgl_texture_cube__["a" /* default */] || refTexture instanceof __WEBPACK_IMPORTED_MODULE_3__webgl_texture_3d__["a" /* default */]);
  var TextureType = refTexture.constructor;
  var gl = refTexture.gl,
      width = refTexture.width,
      height = refTexture.height,
      format = refTexture.format,
      type = refTexture.type,
      dataFormat = refTexture.dataFormat,
      border = refTexture.border,
      mipmaps = refTexture.mipmaps;
  var textureOptions = Object.assign({
    width: width,
    height: height,
    format: format,
    type: type,
    dataFormat: dataFormat,
    border: border,
    mipmaps: mipmaps
  }, overrides); // TODO: move this to `Texture` class as instance method and use this.constructor

  return new TextureType(gl, textureOptions);
} // Wraps a given texture into a framebuffer object, that can be further used
// to read data from the texture object.

function toFramebuffer(texture, opts) {
  var gl = texture.gl,
      width = texture.width,
      height = texture.height,
      id = texture.id;
  var framebuffer = new __WEBPACK_IMPORTED_MODULE_4__webgl_framebuffer__["a" /* default */](gl, Object.assign({}, opts, {
    id: "framebuffer-for-".concat(id),
    width: width,
    height: height,
    attachments: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 36064, texture)
  }));
  return framebuffer;
}
//# sourceMappingURL=texture-utils.js.map

/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {/* unused harmony export ERR_HEADLESSGL_LOAD */
/* unused harmony export headlessTypes */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return headlessGL; });
/* unused harmony export webGLTypesAvailable */
/* unused harmony export Image */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return WebGLRenderingContext; });
/* unused harmony export WebGLProgram */
/* unused harmony export WebGLShader */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return WebGLBuffer; });
/* unused harmony export WebGLFramebuffer */
/* unused harmony export WebGLRenderbuffer */
/* unused harmony export WebGLTexture */
/* unused harmony export WebGLUniformLocation */
/* unused harmony export WebGLActiveInfo */
/* unused harmony export WebGLShaderPrecisionFormat */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return WebGL2RenderingContext; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_globals__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_is_browser__ = __webpack_require__(59);

// WEBGL BUILT-IN TYPES
// 1) Exports all WebGL constants as {GL}
// 2) Enables app to "import" WebGL types
//    - Importing these types makes them known to eslint etc.
//    - Provides dummy types for WebGL2 when not available to streamline
//      library code.
//    - Exports types from headless gl when running under Node.js

/* eslint-disable quotes, no-console */


var ERR_HEADLESSGL_LOAD = "luma.gl: loaded under Node.js without headless gl installed, meaning that WebGL contexts can not be created. This may not be an error. For example, this is a typical configuration for isorender applications running on the server."; // Load headless gl dynamically, if available

var headlessTypes = null;
var headlessGL = function headlessGL() {
  throw new Error(ERR_HEADLESSGL_LOAD);
};

if (!__WEBPACK_IMPORTED_MODULE_2__utils_is_browser__["a" /* default */]) {
  try {
    headlessGL = module.require('gl');
    headlessTypes = module.require('gl/wrap');
  } catch (error) {// /* global console */
    // console.info(ERR_HEADLESSGL_LOAD);
  }
}

var DummyType = function DummyType() {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, DummyType);
};

var _ref = headlessTypes || __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */],
    _ref$WebGLRenderingCo = _ref.WebGLRenderingContext,
    WebGLRenderingContext = _ref$WebGLRenderingCo === void 0 ? DummyType : _ref$WebGLRenderingCo,
    _ref$WebGLProgram = _ref.WebGLProgram,
    WebGLProgram = _ref$WebGLProgram === void 0 ? DummyType : _ref$WebGLProgram,
    _ref$WebGLShader = _ref.WebGLShader,
    WebGLShader = _ref$WebGLShader === void 0 ? DummyType : _ref$WebGLShader,
    _ref$WebGLBuffer = _ref.WebGLBuffer,
    WebGLBuffer = _ref$WebGLBuffer === void 0 ? DummyType : _ref$WebGLBuffer,
    _ref$WebGLFramebuffer = _ref.WebGLFramebuffer,
    WebGLFramebuffer = _ref$WebGLFramebuffer === void 0 ? DummyType : _ref$WebGLFramebuffer,
    _ref$WebGLRenderbuffe = _ref.WebGLRenderbuffer,
    WebGLRenderbuffer = _ref$WebGLRenderbuffe === void 0 ? DummyType : _ref$WebGLRenderbuffe,
    _ref$WebGLTexture = _ref.WebGLTexture,
    WebGLTexture = _ref$WebGLTexture === void 0 ? DummyType : _ref$WebGLTexture,
    _ref$WebGLUniformLoca = _ref.WebGLUniformLocation,
    WebGLUniformLocation = _ref$WebGLUniformLoca === void 0 ? DummyType : _ref$WebGLUniformLoca,
    _ref$WebGLActiveInfo = _ref.WebGLActiveInfo,
    WebGLActiveInfo = _ref$WebGLActiveInfo === void 0 ? DummyType : _ref$WebGLActiveInfo,
    _ref$WebGLShaderPreci = _ref.WebGLShaderPrecisionFormat,
    WebGLShaderPrecisionFormat = _ref$WebGLShaderPreci === void 0 ? DummyType : _ref$WebGLShaderPreci;

var webGLTypesAvailable = WebGLRenderingContext !== DummyType && WebGLProgram !== DummyType && WebGLShader !== DummyType && WebGLBuffer !== DummyType && WebGLFramebuffer !== DummyType && WebGLRenderbuffer !== DummyType && WebGLTexture !== DummyType && WebGLUniformLocation !== DummyType && WebGLActiveInfo !== DummyType && WebGLShaderPrecisionFormat !== DummyType; // Ensures that WebGL2RenderingContext is defined in non-WebGL2 environments
// so that apps can test their gl contexts with instanceof
// E.g. if (gl instanceof WebGL2RenderingContext) { }

function getWebGL2RenderingContext() {
  var WebGL2RenderingContextNotSupported = function WebGL2RenderingContextNotSupported() {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, WebGL2RenderingContextNotSupported);
  };

  return __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].WebGL2RenderingContext || WebGL2RenderingContextNotSupported;
} // Ensure that Image is defined under Node.js


function getImage() {
  var ImageNotSupported = function ImageNotSupported() {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, ImageNotSupported);
  };

  return __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].Image || ImageNotSupported;
}

var WebGL2RenderingContext = getWebGL2RenderingContext();
var Image = getImage(); // Export the standard WebGL types


//# sourceMappingURL=webgl-types.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(151)(module)))

/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Program; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_get__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__resource__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__texture__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__framebuffer__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__uniforms__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__shader__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__program_configuration__ = __webpack_require__(278);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__webgl_context_context_state__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__webgl_uniforms__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__webgl_utils_attribute_utils__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__webgl_utils_constants_to_keys__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__utils_assert__ = __webpack_require__(5);








/* eslint-disable no-inline-comments */













var LOG_PROGRAM_PERF_PRIORITY = 4; // const GL_INTERLEAVED_ATTRIBS = 0x8C8C;

var GL_SEPARATE_ATTRIBS = 0x8c8d;

var Program =
/*#__PURE__*/
function (_Resource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_inherits__["a" /* default */])(Program, _Resource);

  function Program(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Program);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Program).call(this, gl, opts));

    _this.stubRemovedMethods('Program', 'v6.0', ['setVertexArray', 'setAttributes', 'setBuffers', 'unsetBuffers', 'use', 'getUniformCount', 'getUniformInfo', 'getUniformLocation', 'getUniformValue', 'getVarying', 'getFragDataLocation', 'getAttachedShaders', 'getAttributeCount', 'getAttributeLocation', 'getAttributeInfo']); // Experimental flag to avoid deleting Program object while it is cached


    _this._isCached = false;

    _this.initialize(opts);

    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));

    _this._setId(opts.id);

    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Program, [{
    key: "initialize",
    value: function initialize() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var vs = props.vs,
          fs = props.fs,
          varyings = props.varyings,
          _props$bufferMode = props.bufferMode,
          bufferMode = _props$bufferMode === void 0 ? GL_SEPARATE_ATTRIBS : _props$bufferMode; // Create shaders if needed

      this.vs = typeof vs === 'string' ? new __WEBPACK_IMPORTED_MODULE_11__shader__["a" /* VertexShader */](this.gl, {
        id: "".concat(props.id, "-vs"),
        source: vs
      }) : vs;
      this.fs = typeof fs === 'string' ? new __WEBPACK_IMPORTED_MODULE_11__shader__["b" /* FragmentShader */](this.gl, {
        id: "".concat(props.id, "-fs"),
        source: fs
      }) : fs;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_19__utils_assert__["a" /* default */])(this.vs instanceof __WEBPACK_IMPORTED_MODULE_11__shader__["a" /* VertexShader */]);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_19__utils_assert__["a" /* default */])(this.fs instanceof __WEBPACK_IMPORTED_MODULE_11__shader__["b" /* FragmentShader */]); // uniforms

      this.uniforms = {};
      this.samplers = {}; // Setup varyings if supplied

      if (varyings) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_15__webgl_utils__["c" /* assertWebGL2Context */])(this.gl);
        this.varyings = varyings;
        this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);
      }

      this._compileAndLink();

      this._readUniformLocationsFromLinkedProgram();

      this.configuration = new __WEBPACK_IMPORTED_MODULE_12__program_configuration__["a" /* default */](this);
      return this.setProps(props);
    }
  }, {
    key: "delete",
    value: function _delete() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this._isCached) {
        // This object is cached, do not delete
        return this;
      }

      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_get__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Program.prototype), "delete", this).call(this, opts);
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      if ('uniforms' in props) {
        this.setUniforms(props.uniforms, props.samplers);
      }

      return this;
    } // Another thing about the WebGL API is that there are so many ways to draw things.
    // This function unifies those ways into a single call using common parameters with sane defaults

  }, {
    key: "draw",
    value: function draw(_ref) {
      var _this2 = this;

      var logPriority = _ref.logPriority,
          _ref$drawMode = _ref.drawMode,
          drawMode = _ref$drawMode === void 0 ? 4 : _ref$drawMode,
          vertexCount = _ref.vertexCount,
          _ref$offset = _ref.offset,
          offset = _ref$offset === void 0 ? 0 : _ref$offset,
          start = _ref.start,
          end = _ref.end,
          _ref$isIndexed = _ref.isIndexed,
          isIndexed = _ref$isIndexed === void 0 ? false : _ref$isIndexed,
          _ref$indexType = _ref.indexType,
          indexType = _ref$indexType === void 0 ? 5123 : _ref$indexType,
          _ref$isInstanced = _ref.isInstanced,
          isInstanced = _ref$isInstanced === void 0 ? false : _ref$isInstanced,
          _ref$instanceCount = _ref.instanceCount,
          instanceCount = _ref$instanceCount === void 0 ? 0 : _ref$instanceCount,
          _ref$vertexArray = _ref.vertexArray,
          vertexArray = _ref$vertexArray === void 0 ? null : _ref$vertexArray,
          transformFeedback = _ref.transformFeedback,
          framebuffer = _ref.framebuffer,
          _ref$parameters = _ref.parameters,
          parameters = _ref$parameters === void 0 ? {} : _ref$parameters,
          _ref$uniforms = _ref.uniforms,
          uniforms = _ref$uniforms === void 0 ? {} : _ref$uniforms,
          _ref$samplers = _ref.samplers,
          samplers = _ref$samplers === void 0 ? {} : _ref$samplers;

      if (logPriority !== undefined) {
        var fb = framebuffer ? framebuffer.id : 'default';
        var message = "mode=".concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__webgl_utils_constants_to_keys__["b" /* getKey */])(this.gl, drawMode), " verts=").concat(vertexCount, " ") + "instances=".concat(instanceCount, " indexType=").concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_17__webgl_utils_constants_to_keys__["b" /* getKey */])(this.gl, indexType), " ") + "isInstanced=".concat(isInstanced, " isIndexed=").concat(isIndexed, " ") + "Framebuffer=".concat(fb);
        __WEBPACK_IMPORTED_MODULE_18__utils__["a" /* log */].log(logPriority, message)();
      }

      this.gl.useProgram(this.handle); // TODO - move vertex array binding and transform feedback binding to withParameters?

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_19__utils_assert__["a" /* default */])(vertexArray);
      vertexArray.bindForDraw(vertexCount, instanceCount, function () {
        if (uniforms) {
          __WEBPACK_IMPORTED_MODULE_18__utils__["a" /* log */].deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)');

          _this2.setUniforms(uniforms, samplers);
        }

        _this2._bindTextures();

        if (framebuffer !== undefined) {
          parameters = Object.assign({}, parameters, {
            framebuffer: framebuffer
          });
        }

        if (transformFeedback) {
          var primitiveMode = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_16__webgl_utils_attribute_utils__["a" /* getPrimitiveDrawMode */])(drawMode);
          transformFeedback.begin(primitiveMode);
        }

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_13__webgl_context_context_state__["b" /* withParameters */])(_this2.gl, parameters, function () {
          // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension
          if (isIndexed && isInstanced) {
            _this2.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);
          } else if (isIndexed && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_15__webgl_utils__["b" /* isWebGL2 */])(_this2.gl) && !isNaN(start) && !isNaN(end)) {
            _this2.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);
          } else if (isIndexed) {
            _this2.gl.drawElements(drawMode, vertexCount, indexType, offset);
          } else if (isInstanced) {
            _this2.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);
          } else {
            _this2.gl.drawArrays(drawMode, offset, vertexCount);
          }
        });

        if (transformFeedback) {
          transformFeedback.end();
        }
      });
      return this;
    }
  }, {
    key: "setSamplers",
    value: function setSamplers(samplers) {
      Object.assign(this.samplers, samplers);
    }
  }, {
    key: "setUniforms",
    value: function setUniforms() {
      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var samplers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _onChangeCallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

      // Simple change detection - if all uniforms are unchanged, do nothing
      // TODO - Disabled since it interferes with textures
      // we must still rebind texture units to current program's textures before drawing
      // If modifying, test with `picking` example on website
      var somethingChanged = false;
      var changedUniforms = {};

      for (var key in uniforms) {
        if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_14__webgl_uniforms__["a" /* areUniformsEqual */])(this.uniforms[key], uniforms[key])) {
          somethingChanged = true;
          changedUniforms[key] = uniforms[key];
          this.uniforms[key] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_14__webgl_uniforms__["b" /* getUniformCopy */])(uniforms[key]);
        }
      }

      if (somethingChanged) {
        _onChangeCallback();

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_14__webgl_uniforms__["c" /* checkUniformValues */])(changedUniforms, this.id, this._uniformSetters);
        Object.assign(this.samplers, samplers);

        this._setUniforms(changedUniforms);
      }

      return this;
    } // PRIVATE METHODS
    // This needs to be done before every draw call

  }, {
    key: "_bindTextures",
    value: function _bindTextures() {
      for (var uniformName in this.uniforms) {
        var uniformSetter = this._uniformSetters[uniformName];

        if (uniformSetter && uniformSetter.textureIndex !== undefined) {
          var uniform = this.uniforms[uniformName];
          var sampler = this.samplers[uniformName];

          if (uniform instanceof __WEBPACK_IMPORTED_MODULE_9__framebuffer__["a" /* default */]) {
            uniform = uniform.texture;
          }

          if (uniform instanceof __WEBPACK_IMPORTED_MODULE_8__texture__["a" /* default */]) {
            // Bind texture to index
            uniform.bind(uniformSetter.textureIndex);
          } // Bind a sampler (if supplied) to index


          if (sampler) {
            sampler.bind(uniformSetter.textureIndex);
          }
        }
      }
    } // Apply a set of uniform values to a program
    // Only uniforms actually present in the linked program will be updated.

    /* eslint-disable max-depth */

  }, {
    key: "_setUniforms",
    value: function _setUniforms(uniforms) {
      this.gl.useProgram(this.handle);

      for (var uniformName in uniforms) {
        var uniform = uniforms[uniformName];
        var uniformSetter = this._uniformSetters[uniformName];

        if (uniformSetter) {
          if (uniform instanceof __WEBPACK_IMPORTED_MODULE_9__framebuffer__["a" /* default */]) {
            uniform = uniform.texture;
          }

          if (uniform instanceof __WEBPACK_IMPORTED_MODULE_8__texture__["a" /* default */]) {
            if (uniformSetter.textureIndex === undefined) {
              uniformSetter.textureIndex = this._textureIndexCounter++;
            } // Bind texture to index


            var texture = uniform;
            var textureIndex = uniformSetter.textureIndex;
            texture.bind(textureIndex); // Set the uniform sampler to the texture index

            uniformSetter(textureIndex);
          } else {
            // Just set the value
            uniformSetter(uniform);
          }
        }
      }

      return this;
    } // RESOURCE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createProgram();
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteProgram(this.handle);
    } // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle

  }, {
    key: "_getOptionsFromHandle",
    value: function _getOptionsFromHandle(handle) {
      var shaderHandles = this.gl.getAttachedShaders(handle);
      var opts = {};
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = shaderHandles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var shaderHandle = _step.value;
          var type = this.gl.getShaderParameter(this.handle, 35663);

          switch (type) {
            case 35633:
              opts.vs = new __WEBPACK_IMPORTED_MODULE_11__shader__["a" /* VertexShader */]({
                handle: shaderHandle
              });
              break;

            case 35632:
              opts.fs = new __WEBPACK_IMPORTED_MODULE_11__shader__["b" /* FragmentShader */]({
                handle: shaderHandle
              });
              break;

            default:
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return opts;
    }
  }, {
    key: "_getParameter",
    value: function _getParameter(pname) {
      return this.gl.getProgramParameter(this.handle, pname);
    } // If program is not named, name it after shader names
    // TODO - this.id will already have been initialized

  }, {
    key: "_setId",
    value: function _setId(id) {
      if (!id) {
        var programName = this._getName();

        this.id = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_18__utils__["b" /* uid */])(programName);
      }
    } // Generate a default name for the program based on names of the shaders

  }, {
    key: "_getName",
    value: function _getName() {
      var programName = this.vs.getName() || this.fs.getName();
      programName = programName.replace(/shader/i, '');
      programName = programName ? "".concat(programName, "-program") : 'program';
      return programName;
    }
  }, {
    key: "_compileAndLink",
    value: function _compileAndLink() {
      var gl = this.gl;
      gl.attachShader(this.handle, this.vs.handle);
      gl.attachShader(this.handle, this.fs.handle);
      __WEBPACK_IMPORTED_MODULE_18__utils__["a" /* log */].time(LOG_PROGRAM_PERF_PRIORITY, "linkProgram for ".concat(this._getName()))();
      gl.linkProgram(this.handle);
      __WEBPACK_IMPORTED_MODULE_18__utils__["a" /* log */].timeEnd(LOG_PROGRAM_PERF_PRIORITY, "linkProgram for ".concat(this._getName()))(); // Avoid checking program linking error in production

      if (gl.debug || __WEBPACK_IMPORTED_MODULE_18__utils__["a" /* log */].priority > 0) {
        gl.validateProgram(this.handle);
        var linked = gl.getProgramParameter(this.handle, 35714);

        if (!linked) {
          throw new Error("Error linking: ".concat(gl.getProgramInfoLog(this.handle)));
        }
      }
    } // query uniform locations and build name to setter map.

  }, {
    key: "_readUniformLocationsFromLinkedProgram",
    value: function _readUniformLocationsFromLinkedProgram() {
      var gl = this.gl;
      this._uniformSetters = {};
      this._uniformCount = this._getParameter(35718);

      for (var i = 0; i < this._uniformCount; i++) {
        var info = this.gl.getActiveUniform(this.handle, i);

        var _parseUniformName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__uniforms__["d" /* parseUniformName */])(info.name),
            name = _parseUniformName.name,
            isArray = _parseUniformName.isArray;

        var location = gl.getUniformLocation(this.handle, name);
        this._uniformSetters[name] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__uniforms__["e" /* getUniformSetter */])(gl, location, info, isArray);
      }

      this._textureIndexCounter = 0;
    } // stub for shader chache, should reset uniforms to default valiues

  }, {
    key: "reset",
    value: function reset() {} // TO BE REMOVED in v7?
    // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)
    // https://
    // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms

  }, {
    key: "getActiveUniforms",
    value: function getActiveUniforms(uniformIndices, pname) {
      return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);
    } // Retrieves the index of a uniform block

  }, {
    key: "getUniformBlockIndex",
    value: function getUniformBlockIndex(blockName) {
      return this.gl.getUniformBlockIndex(this.handle, blockName);
    } // Retrieves information about an active uniform block (`blockIndex`)
    // https://
    // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter

  }, {
    key: "getActiveUniformBlockParameter",
    value: function getActiveUniformBlockParameter(blockIndex, pname) {
      return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);
    } // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)

  }, {
    key: "uniformBlockBinding",
    value: function uniformBlockBinding(blockIndex, blockBinding) {
      this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);
    }
  }]);

  return Program;
}(__WEBPACK_IMPORTED_MODULE_7__resource__["a" /* default */]);


//# sourceMappingURL=program.js.map

/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TextureCube; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__texture__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_assert__ = __webpack_require__(5);








var FACES = [34069, 34070, 34071, 34072, 34073, 34074];

var TextureCube =
/*#__PURE__*/
function (_Texture) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(TextureCube, _Texture);

  function TextureCube(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, TextureCube);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(TextureCube).call(this, gl, Object.assign({}, opts, {
      target: 34067
    })));

    _this.initialize(opts);

    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));
    return _this;
  }
  /* eslint-disable max-len, max-statements */


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(TextureCube, [{
    key: "initialize",
    value: function initialize() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _opts$format = opts.format,
          format = _opts$format === void 0 ? 6408 : _opts$format,
          _opts$mipmaps = opts.mipmaps,
          mipmaps = _opts$mipmaps === void 0 ? true : _opts$mipmaps;
      var _opts$width = opts.width,
          width = _opts$width === void 0 ? 1 : _opts$width,
          _opts$height = opts.height,
          height = _opts$height === void 0 ? 1 : _opts$height,
          _opts$type = opts.type,
          type = _opts$type === void 0 ? 5121 : _opts$type,
          dataFormat = opts.dataFormat; // Deduce width and height based on one of the faces

      var _this$_deduceParamete = this._deduceParameters({
        format: format,
        type: type,
        dataFormat: dataFormat
      });

      type = _this$_deduceParamete.type;
      dataFormat = _this$_deduceParamete.dataFormat;

      var _this$_deduceImageSiz = this._deduceImageSize({
        data: opts[34069],
        width: width,
        height: height
      });

      width = _this$_deduceImageSiz.width;
      height = _this$_deduceImageSiz.height;
      // Enforce cube
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_assert__["a" /* default */])(width === height); // Temporarily apply any pixel store paramaters and build textures
      // withParameters(this.gl, opts, () => {
      //   for (const face of CUBE_MAP_FACES) {
      //     this.setImageData({
      //       target: face,
      //       data: opts[face],
      //       width, height, format, type, dataFormat, border, mipmaps
      //     });
      //   }
      // });

      this.setCubeMapImageData(opts); // Called here so that GL.
      // TODO - should genMipmap() be called on the cubemap or on the faces?

      if (mipmaps) {
        this.generateMipmap(opts);
      } // Store opts for accessors


      this.opts = opts;
    }
  }, {
    key: "subImage",
    value: function subImage(_ref) {
      var face = _ref.face,
          data = _ref.data,
          _ref$x = _ref.x,
          x = _ref$x === void 0 ? 0 : _ref$x,
          _ref$y = _ref.y,
          y = _ref$y === void 0 ? 0 : _ref$y,
          _ref$mipmapLevel = _ref.mipmapLevel,
          mipmapLevel = _ref$mipmapLevel === void 0 ? 0 : _ref$mipmapLevel;
      return this._subImage({
        target: face,
        data: data,
        x: x,
        y: y,
        mipmapLevel: mipmapLevel
      });
    }
    /* eslint-disable max-statements, max-len */

  }, {
    key: "setCubeMapImageData",
    value: function setCubeMapImageData(_ref2) {
      var width = _ref2.width,
          height = _ref2.height,
          pixels = _ref2.pixels,
          data = _ref2.data,
          _ref2$border = _ref2.border,
          border = _ref2$border === void 0 ? 0 : _ref2$border,
          _ref2$format = _ref2.format,
          format = _ref2$format === void 0 ? 6408 : _ref2$format,
          _ref2$type = _ref2.type,
          type = _ref2$type === void 0 ? 5121 : _ref2$type,
          _ref2$generateMipmap = _ref2.generateMipmap,
          generateMipmap = _ref2$generateMipmap === void 0 ? false : _ref2$generateMipmap;
      var gl = this.gl;
      pixels = pixels || data;
      this.bind();

      if (this.width || this.height) {
        for (var _i = 0; _i < FACES.length; _i++) {
          var face = FACES[_i];
          gl.texImage2D(face, 0, format, width, height, border, format, type, pixels[face]);
        }
      } else {
        for (var _i2 = 0; _i2 < FACES.length; _i2++) {
          var _face = FACES[_i2];
          gl.texImage2D(_face, 0, format, format, type, pixels[_face]);
        }
      }
    }
  }, {
    key: "bind",
    value: function bind() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          index = _ref3.index;

      if (index !== undefined) {
        this.gl.activeTexture(33984 + index);
      }

      this.gl.bindTexture(34067, this.handle);
      return index;
    }
  }, {
    key: "unbind",
    value: function unbind() {
      this.gl.bindTexture(34067, null);
      return this;
    }
  }]);

  return TextureCube;
}(__WEBPACK_IMPORTED_MODULE_6__texture__["a" /* default */]);


TextureCube.FACES = FACES;
//# sourceMappingURL=texture-cube.js.map

/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TransformFeedback; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__resource__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__buffer__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils__ = __webpack_require__(6);









 // NOTE: The `bindOnUse` flag is a major workaround:
// See https://github.com/KhronosGroup/WebGL/issues/2346

var TransformFeedback =
/*#__PURE__*/
function (_Resource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(TransformFeedback, _Resource);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(TransformFeedback, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__webgl_utils__["b" /* isWebGL2 */])(gl);
    }
  }]);

  function TransformFeedback(gl) {
    var _this;

    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, TransformFeedback);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__webgl_utils__["c" /* assertWebGL2Context */])(gl);
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(TransformFeedback).call(this, gl, props));

    _this.initialize(props);

    _this.stubRemovedMethods('TransformFeedback', 'v6.0', ['pause', 'resume']);

    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));
    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(TransformFeedback, [{
    key: "initialize",
    value: function initialize() {
      var _this2 = this;

      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.buffers = {};
      this.unused = {};
      this.configuration = null;
      this.bindOnUse = true; // Unbind any currently bound buffers

      if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__utils__["e" /* isObjectEmpty */])(this.buffers)) {
        this.bind(function () {
          return _this2._unbindBuffers();
        });
      }

      this.setProps(props);
      return this;
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      if ('program' in props) {
        this.configuration = props.program && props.program.configuration;
      }

      if ('configuration' in props) {
        this.configuration = props.configuration;
      }

      if ('bindOnUse' in props) {
        props = props.bindOnUse;
      }

      if ('buffers' in props) {
        this.setBuffers(props.buffers);
      }
    }
  }, {
    key: "setBuffers",
    value: function setBuffers() {
      var _this3 = this;

      var buffers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.bind(function () {
        for (var bufferName in buffers) {
          _this3.setBuffer(bufferName, buffers[bufferName]);
        }
      });
      return this;
    }
  }, {
    key: "setBuffer",
    value: function setBuffer(locationOrName, bufferOrParams) {
      var _this4 = this;

      var location = this._getVaryingIndex(locationOrName);

      var _this$_getBufferParam = this._getBufferParams(bufferOrParams),
          buffer = _this$_getBufferParam.buffer,
          byteSize = _this$_getBufferParam.byteSize,
          byteOffset = _this$_getBufferParam.byteOffset;

      if (location < 0) {
        this.unused[locationOrName] = buffer;
        __WEBPACK_IMPORTED_MODULE_9__utils__["a" /* log */].warn(function () {
          return "".concat(_this4.id, " unused varying buffer ").concat(locationOrName);
        })();
        return this;
      }

      this.buffers[location] = bufferOrParams; // Need to avoid chrome bug where buffer that is already bound to a different target
      // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.

      if (!this.bindOnUse) {
        this._bindBuffer(location, buffer, byteOffset, byteSize);
      }

      return this;
    }
  }, {
    key: "begin",
    value: function begin() {
      var primitiveMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      this.gl.bindTransformFeedback(36386, this.handle);

      this._bindBuffers();

      this.gl.beginTransformFeedback(primitiveMode);
      return this;
    }
  }, {
    key: "end",
    value: function end() {
      this.gl.endTransformFeedback();

      this._unbindBuffers();

      this.gl.bindTransformFeedback(36386, null);
      return this;
    } // PRIVATE METHODS

  }, {
    key: "_getBufferParams",
    value: function _getBufferParams(bufferOrParams) {
      var byteOffset;
      var byteSize;
      var buffer;

      if (bufferOrParams instanceof __WEBPACK_IMPORTED_MODULE_7__buffer__["a" /* default */] === false) {
        buffer = bufferOrParams.buffer;
        byteSize = bufferOrParams.byteSize;
        byteOffset = bufferOrParams.byteOffset;
      } else {
        buffer = bufferOrParams;
      } // to use bindBufferRange, either offset or size must be specified, use default value for the other.


      if (byteOffset !== undefined || byteSize !== undefined) {
        byteOffset = byteOffset || 0;
        byteSize = byteSize || buffer.byteLength - byteOffset;
      }

      return {
        buffer: buffer,
        byteOffset: byteOffset,
        byteSize: byteSize
      };
    }
  }, {
    key: "_getVaryingInfo",
    value: function _getVaryingInfo(locationOrName) {
      return this.configuration && this.configuration.getVaryingInfo(locationOrName);
    }
  }, {
    key: "_getVaryingIndex",
    value: function _getVaryingIndex(locationOrName) {
      if (this.configuration) {
        return this.configuration.getVaryingInfo(locationOrName).location;
      }

      var location = Number(locationOrName);
      return Number.isFinite(location) ? location : -1;
    } // Need to avoid chrome bug where buffer that is already bound to a different target
    // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.

  }, {
    key: "_bindBuffers",
    value: function _bindBuffers() {
      if (this.bindOnUse) {
        for (var bufferIndex in this.buffers) {
          var _this$_getBufferParam2 = this._getBufferParams(this.buffers[bufferIndex]),
              buffer = _this$_getBufferParam2.buffer,
              byteSize = _this$_getBufferParam2.byteSize,
              byteOffset = _this$_getBufferParam2.byteOffset;

          this._bindBuffer(bufferIndex, buffer, byteOffset, byteSize);
        }
      }
    }
  }, {
    key: "_unbindBuffers",
    value: function _unbindBuffers() {
      if (this.bindOnUse) {
        for (var bufferIndex in this.buffers) {
          this._bindBuffer(bufferIndex, null);
        }
      }
    }
  }, {
    key: "_bindBuffer",
    value: function _bindBuffer(index, buffer) {
      var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var byteSize = arguments.length > 3 ? arguments[3] : undefined;
      var handle = buffer && buffer.handle;

      if (!handle || byteSize === undefined) {
        this.gl.bindBufferBase(35982, index, handle);
      } else {
        this.gl.bindBufferRange(35982, index, handle, byteOffset, byteSize);
      }

      return this;
    } // RESOURCE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createTransformFeedback();
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteTransformFeedback(this.handle);
    }
  }, {
    key: "_bindHandle",
    value: function _bindHandle(handle) {
      this.gl.bindTransformFeedback(36386, this.handle);
    }
  }]);

  return TransformFeedback;
}(__WEBPACK_IMPORTED_MODULE_6__resource__["a" /* default */]);


//# sourceMappingURL=transform-feedback.js.map

/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["d"] = parseUniformName;
/* harmony export (immutable) */ __webpack_exports__["e"] = getUniformSetter;
/* harmony export (immutable) */ __webpack_exports__["c"] = checkUniformValues;
/* harmony export (immutable) */ __webpack_exports__["a"] = areUniformsEqual;
/* harmony export (immutable) */ __webpack_exports__["b"] = getUniformCopy;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__framebuffer__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__renderbuffer__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__texture__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__sampler__ = __webpack_require__(138);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils__ = __webpack_require__(6);


var _UNIFORM_SETTERS;






var UNIFORM_SETTERS = (_UNIFORM_SETTERS = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 5126, function (gl, location, value) {
  return gl.uniform1fv(location, toFloatArray(value, 1));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35664, function (gl, location, value) {
  return gl.uniform2fv(location, toFloatArray(value, 2));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35665, function (gl, location, value) {
  return gl.uniform3fv(location, toFloatArray(value, 3));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35666, function (gl, location, value) {
  return gl.uniform4fv(location, toFloatArray(value, 4));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 5124, function (gl, location, value) {
  return gl.uniform1iv(location, toIntArray(value, 1));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35667, function (gl, location, value) {
  return gl.uniform2iv(location, toIntArray(value, 2));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35668, function (gl, location, value) {
  return gl.uniform3iv(location, toIntArray(value, 3));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35669, function (gl, location, value) {
  return gl.uniform4iv(location, toIntArray(value, 4));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35670, function (gl, location, value) {
  return gl.uniform1iv(location, toIntArray(value, 1));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35671, function (gl, location, value) {
  return gl.uniform2iv(location, toIntArray(value, 2));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35672, function (gl, location, value) {
  return gl.uniform3iv(location, toIntArray(value, 3));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35673, function (gl, location, value) {
  return gl.uniform4iv(location, toIntArray(value, 4));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35674, function (gl, location, value) {
  return gl.uniformMatrix2fv(location, false, toFloatArray(value, 4));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35675, function (gl, location, value) {
  return gl.uniformMatrix3fv(location, false, toFloatArray(value, 9));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35676, function (gl, location, value) {
  return gl.uniformMatrix4fv(location, false, toFloatArray(value, 16));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35678, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35680, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 5125, function (gl, location, value) {
  return gl.uniform1uiv(location, toUIntArray(value, 1));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36294, function (gl, location, value) {
  return gl.uniform2uiv(location, toUIntArray(value, 2));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36295, function (gl, location, value) {
  return gl.uniform3uiv(location, toUIntArray(value, 3));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36296, function (gl, location, value) {
  return gl.uniform4uiv(location, toUIntArray(value, 4));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35685, function (gl, location, value) {
  return gl.uniformMatrix2x3fv(location, false, toFloatArray(value, 6));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35686, function (gl, location, value) {
  return gl.uniformMatrix2x4fv(location, false, toFloatArray(value, 8));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35687, function (gl, location, value) {
  return gl.uniformMatrix3x2fv(location, false, toFloatArray(value, 6));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35688, function (gl, location, value) {
  return gl.uniformMatrix3x4fv(location, false, toFloatArray(value, 12));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35689, function (gl, location, value) {
  return gl.uniformMatrix4x2fv(location, false, toFloatArray(value, 8));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35690, function (gl, location, value) {
  return gl.uniformMatrix4x3fv(location, false, toFloatArray(value, 12));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35679, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 35682, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36289, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36292, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36293, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36298, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36299, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36300, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36303, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36306, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36307, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36308, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_UNIFORM_SETTERS, 36311, function (gl, location, value) {
  return gl.uniform1i(location, value);
}), _UNIFORM_SETTERS); // Pre-allocated typed arrays for temporary conversion

var FLOAT_ARRAY = {};
var INT_ARRAY = {};
var UINT_ARRAY = {};
var array1 = [0]; // Functions to ensure the type of uniform values
// TODO - Why is this necessary? The uniform*v funtions can consume Arrays

function toTypedArray(value, uniformLength, Type, cache) {
  // convert boolean uniforms to Number
  if (uniformLength === 1 && typeof value === 'boolean') {
    value = value ? 1 : 0;
  }

  if (Number.isFinite(value)) {
    array1[0] = value;
    value = array1;
  }

  var length = value.length;

  if (length % uniformLength) {
    __WEBPACK_IMPORTED_MODULE_5__utils__["a" /* log */].warn("Uniform size should be multiples of ".concat(uniformLength), value)();
  }

  if (value instanceof Type) {
    return value;
  }

  var result = cache[length];

  if (!result) {
    result = new Type(length);
    cache[length] = result;
  }

  for (var i = 0; i < length; i++) {
    result[i] = value[i];
  }

  return result;
}

function toFloatArray(value, uniformLength) {
  return toTypedArray(value, uniformLength, Float32Array, FLOAT_ARRAY);
}

function toIntArray(value, uniformLength) {
  return toTypedArray(value, uniformLength, Int32Array, INT_ARRAY);
}

function toUIntArray(value, uniformLength) {
  return toTypedArray(value, uniformLength, Uint32Array, UINT_ARRAY);
}

function parseUniformName(name) {
  // Shortcut to avoid redundant or bad matches
  if (name[name.length - 1] !== ']') {
    return {
      name: name,
      length: 1,
      isArray: false
    };
  } // if array name then clean the array brackets


  var UNIFORM_NAME_REGEXP = /([^\[]*)(\[[0-9]+\])?/;
  var matches = name.match(UNIFORM_NAME_REGEXP);

  if (!matches || matches.length < 2) {
    throw new Error("Failed to parse GLSL uniform name ".concat(name));
  }

  return {
    name: matches[1],
    length: matches[2] || 1,
    isArray: Boolean(matches[2])
  };
} // Returns a Magic Uniform Setter

/* eslint-disable complexity */

function getUniformSetter(gl, location, info) {
  var setter = UNIFORM_SETTERS[info.type];

  if (!setter) {
    throw new Error("Unknown GLSL uniform type ".concat(info.type));
  }

  return setter.bind(null, gl, location);
} // Basic checks of uniform values (with or without knowledge of program)
// To facilitate early detection of e.g. undefined values in JavaScript

function checkUniformValues(uniforms, source, uniformMap) {
  for (var uniformName in uniforms) {
    var value = uniforms[uniformName];
    var shouldCheck = !uniformMap || Boolean(uniformMap[uniformName]);

    if (shouldCheck && !checkUniformValue(value)) {
      // Add space to source
      source = source ? "".concat(source, " ") : ''; // Value could be unprintable so write the object on console

      console.error("".concat(source, " Bad uniform ").concat(uniformName), value); // eslint-disable-line

      /* eslint-enable no-console */

      throw new Error("".concat(source, " Bad uniform ").concat(uniformName));
    }
  }

  return true;
} // TODO use type information during validation

function checkUniformValue(value) {
  if (Array.isArray(value) || ArrayBuffer.isView(value)) {
    return checkUniformArray(value);
  } // Check if single value is a number


  if (isFinite(value)) {
    return true;
  } else if (value === true || value === false) {
    return true;
  } else if (value instanceof __WEBPACK_IMPORTED_MODULE_3__texture__["a" /* default */] || value instanceof __WEBPACK_IMPORTED_MODULE_4__sampler__["a" /* default */]) {
    return true;
  } else if (value instanceof __WEBPACK_IMPORTED_MODULE_2__renderbuffer__["a" /* default */]) {
    return true;
  } else if (value instanceof __WEBPACK_IMPORTED_MODULE_1__framebuffer__["a" /* default */]) {
    return Boolean(value.texture);
  }

  return false;
}

function checkUniformArray(value) {
  // Check that every element in array is a number, and at least 1 element
  if (value.length === 0) {
    return false;
  }

  var checkLength = Math.min(value.length, 16);

  for (var i = 0; i < checkLength; ++i) {
    if (!Number.isFinite(value[i])) {
      return false;
    }
  }

  return true;
}
/**
 * Given two values of a uniform, returns `true` if they are equal
 */


function areUniformsEqual(uniform1, uniform2) {
  if (Array.isArray(uniform1) || ArrayBuffer.isView(uniform1)) {
    if (!uniform2) {
      return false;
    }

    var len = uniform1.length;

    if (uniform2.length !== len) {
      return false;
    }

    for (var i = 0; i < len; i++) {
      if (uniform1[i] !== uniform2[i]) {
        return false;
      }
    }

    return true;
  }

  return uniform1 === uniform2;
}
/**
 * Creates a copy of the uniform
 */

function getUniformCopy(uniform) {
  if (Array.isArray(uniform) || ArrayBuffer.isView(uniform)) {
    return uniform.slice();
  }

  return uniform;
}
//# sourceMappingURL=uniforms.js.map

/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Vector; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__math_array__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common__ = __webpack_require__(13);








var assert = function assert(x, m) {
  if (!x) {
    throw new Error(m);
  }
};

var Vector = function (_MathArray) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Vector, _MathArray);

  function Vector() {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Vector);

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Vector).apply(this, arguments));
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Vector, [{
    key: "len",
    value: function len() {
      return Math.sqrt(this.lengthSquared());
    }
  }, {
    key: "magnitude",
    value: function magnitude() {
      return Math.sqrt(this.lengthSquared());
    }
  }, {
    key: "lengthSquared",
    value: function lengthSquared() {
      var length = 0;

      for (var i = 0; i < this.ELEMENTS; ++i) {
        length += this[i] * this[i];
      }

      return length;
    }
  }, {
    key: "distance",
    value: function distance(mathArray) {
      return Math.sqrt(this.distanceSquared(mathArray));
    }
  }, {
    key: "distanceSquared",
    value: function distanceSquared(mathArray) {
      var length = 0;

      for (var i = 0; i < this.ELEMENTS; ++i) {
        var dist = this[i] - mathArray[i];
        length += dist * dist;
      }

      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__common__["d" /* checkNumber */])(length);
    }
  }, {
    key: "dot",
    value: function dot(mathArray) {
      var product = 0;

      for (var i = 0; i < this.ELEMENTS; ++i) {
        product += this[i] * mathArray[i];
      }

      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__common__["d" /* checkNumber */])(product);
    }
  }, {
    key: "normalize",
    value: function normalize() {
      var length = this.magnitude();

      if (length !== 0) {
        for (var i = 0; i < this.ELEMENTS; ++i) {
          this[i] /= length;
        }
      }

      return this.check();
    }
  }, {
    key: "add",
    value: function add() {
      for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {
        vectors[_key] = arguments[_key];
      }

      for (var _i = 0; _i < vectors.length; _i++) {
        var vector = vectors[_i];

        for (var i = 0; i < this.ELEMENTS; ++i) {
          this[i] += vector[i];
        }
      }

      return this.check();
    }
  }, {
    key: "subtract",
    value: function subtract() {
      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        vectors[_key2] = arguments[_key2];
      }

      for (var _i2 = 0; _i2 < vectors.length; _i2++) {
        var vector = vectors[_i2];

        for (var i = 0; i < this.ELEMENTS; ++i) {
          this[i] -= vector[i];
        }
      }

      return this.check();
    }
  }, {
    key: "multiply",
    value: function multiply() {
      for (var _len3 = arguments.length, vectors = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        vectors[_key3] = arguments[_key3];
      }

      for (var _i3 = 0; _i3 < vectors.length; _i3++) {
        var vector = vectors[_i3];

        for (var i = 0; i < this.ELEMENTS; ++i) {
          this[i] *= vector[i];
        }
      }

      return this.check();
    }
  }, {
    key: "divide",
    value: function divide() {
      for (var _len4 = arguments.length, vectors = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        vectors[_key4] = arguments[_key4];
      }

      for (var _i4 = 0; _i4 < vectors.length; _i4++) {
        var vector = vectors[_i4];

        for (var i = 0; i < this.ELEMENTS; ++i) {
          this[i] /= vector[i];
        }
      }

      return this.check();
    }
  }, {
    key: "scale",
    value: function scale(_scale) {
      if (Array.isArray(_scale)) {
        return this.multiply(_scale);
      }

      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] *= _scale;
      }

      return this.check();
    }
  }, {
    key: "scaleAndAdd",
    value: function scaleAndAdd(vector, scale) {
      for (var i = 0; i < this.ELEMENTS; ++i) {
        this[i] = this[i] * scale + vector[i];
      }

      return this.check();
    }
  }, {
    key: "lengthSq",
    value: function lengthSq() {
      return this.lengthSquared();
    }
  }, {
    key: "distanceTo",
    value: function distanceTo(vector) {
      return this.distance(vector);
    }
  }, {
    key: "distanceToSquared",
    value: function distanceToSquared(vector) {
      return this.distanceSquared(vector);
    }
  }, {
    key: "getComponent",
    value: function getComponent(i) {
      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__common__["d" /* checkNumber */])(this[i]);
    }
  }, {
    key: "setComponent",
    value: function setComponent(i, value) {
      assert(i >= 0 && i < this.ELEMENTS, 'index is out of range');
      this[i] = value;
      return this.check();
    }
  }, {
    key: "addVectors",
    value: function addVectors(a, b) {
      return this.copy(a).add(b);
    }
  }, {
    key: "subVectors",
    value: function subVectors(a, b) {
      return this.copy(a).subtract(b);
    }
  }, {
    key: "multiplyVectors",
    value: function multiplyVectors(a, b) {
      return this.copy(a).multiply(b);
    }
  }, {
    key: "addScaledVector",
    value: function addScaledVector(a, b) {
      return this.add(new this.constructor(a).multiplyScalar(b));
    }
  }, {
    key: "x",
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "y",
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__common__["d" /* checkNumber */])(value);
    }
  }]);

  return Vector;
}(__WEBPACK_IMPORTED_MODULE_5__math_array__["a" /* default */]);


//# sourceMappingURL=vector.js.map

/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export validateMatrix4 */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Matrix4; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__lib_math_array__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__lib_common__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__vector2__ = __webpack_require__(144);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__vector3__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__vector4__ = __webpack_require__(145);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_mat4_determinant__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_mat4_determinant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_mat4_determinant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_mat4_fromQuat__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_mat4_fromQuat___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_mat4_fromQuat__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_mat4_frustum__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_mat4_frustum___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_gl_mat4_frustum__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_mat4_lookAt__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_mat4_lookAt___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_gl_mat4_lookAt__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_mat4_ortho__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_mat4_ortho___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_gl_mat4_ortho__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_mat4_perspective__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_mat4_perspective___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_gl_mat4_perspective__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_mat4_transpose__ = __webpack_require__(100);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_mat4_transpose___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_gl_mat4_transpose__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_mat4_invert__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_mat4_invert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_gl_mat4_invert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_mat4_multiply__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_mat4_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20_gl_mat4_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_mat4_rotate__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_mat4_rotate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21_gl_mat4_rotate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_gl_mat4_scale__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_gl_mat4_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_22_gl_mat4_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23_gl_mat4_translate__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23_gl_mat4_translate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_23_gl_mat4_translate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24_gl_vec2_transformMat4__ = __webpack_require__(229);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24_gl_vec2_transformMat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_24_gl_vec2_transformMat4__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25_gl_vec3_transformMat4__ = __webpack_require__(235);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25_gl_vec3_transformMat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_25_gl_vec3_transformMat4__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26_gl_vec4_transformMat4__ = __webpack_require__(244);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26_gl_vec4_transformMat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_26_gl_vec4_transformMat4__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27_gl_mat4_rotateX__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27_gl_mat4_rotateX___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_27_gl_mat4_rotateX__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28_gl_mat4_rotateY__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28_gl_mat4_rotateY___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_28_gl_mat4_rotateY__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29_gl_mat4_rotateZ__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29_gl_mat4_rotateZ___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_29_gl_mat4_rotateZ__);






























var IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
function validateMatrix4(m) {
  return m.length === 16 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]) && Number.isFinite(m[6]) && Number.isFinite(m[7]) && Number.isFinite(m[8]) && Number.isFinite(m[9]) && Number.isFinite(m[10]) && Number.isFinite(m[11]) && Number.isFinite(m[12]) && Number.isFinite(m[13]) && Number.isFinite(m[14]) && Number.isFinite(m[15]);
}

function validateVector(v, length) {
  if (v.length !== length) {
    return false;
  }

  return v.every(Number.isFinite);
}

var Matrix4 = function (_MathArray) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_inherits__["a" /* default */])(Matrix4, _MathArray);

  function Matrix4() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Matrix4);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Matrix4).call(this));

    if (Array.isArray(args[0]) && arguments.length === 1) {
      _this.copy(args[0]);
    } else {
      _this.identity();
    }

    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Matrix4, [{
    key: "setRowMajor",
    value: function setRowMajor() {
      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var m10 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
      var m12 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var m13 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var m20 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
      var m21 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
      var m23 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
      var m30 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
      var m31 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
      var m32 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m30;
      this[4] = m01;
      this[5] = m11;
      this[6] = m21;
      this[7] = m31;
      this[8] = m02;
      this[9] = m12;
      this[10] = m22;
      this[11] = m32;
      this[12] = m03;
      this[13] = m13;
      this[14] = m23;
      this[15] = m33;
      return this.check();
    }
  }, {
    key: "setColumnMajor",
    value: function setColumnMajor() {
      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var m10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var m20 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var m30 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var m01 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var m11 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
      var m21 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var m31 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var m02 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
      var m12 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
      var m22 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
      var m32 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
      var m03 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
      var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
      var m23 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
      var m33 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;
      this[0] = m00;
      this[1] = m10;
      this[2] = m20;
      this[3] = m30;
      this[4] = m01;
      this[5] = m11;
      this[6] = m21;
      this[7] = m31;
      this[8] = m02;
      this[9] = m12;
      this[10] = m22;
      this[11] = m32;
      this[12] = m03;
      this[13] = m13;
      this[14] = m23;
      this[15] = m33;
      return this.check();
    }
  }, {
    key: "copy",
    value: function copy(array) {
      return this.setColumnMajor.apply(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(array));
    }
  }, {
    key: "set",
    value: function set() {
      return this.setColumnMajor.apply(this, arguments);
    }
  }, {
    key: "getElement",
    value: function getElement(i, j) {
      var columnMajor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return columnMajor ? this[i][j] : this[j][i];
    }
  }, {
    key: "setElement",
    value: function setElement(i, j, value) {
      var columnMajor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if (columnMajor) {
        this[i][j] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__lib_common__["d" /* checkNumber */])(value);
      } else {
        this[j][i] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__lib_common__["d" /* checkNumber */])(value);
      }

      return this;
    }
  }, {
    key: "determinant",
    value: function determinant() {
      return __WEBPACK_IMPORTED_MODULE_12_gl_mat4_determinant___default()(this);
    }
  }, {
    key: "identity",
    value: function identity() {
      return this.copy(IDENTITY);
    }
  }, {
    key: "fromQuaternion",
    value: function fromQuaternion(q) {
      __WEBPACK_IMPORTED_MODULE_13_gl_mat4_fromQuat___default()(this, q);
      return this.check();
    }
  }, {
    key: "frustum",
    value: function frustum(_ref) {
      var left = _ref.left,
          right = _ref.right,
          bottom = _ref.bottom,
          top = _ref.top,
          near = _ref.near,
          far = _ref.far;
      __WEBPACK_IMPORTED_MODULE_14_gl_mat4_frustum___default()(this, left, right, bottom, top, near, far);
      return this.check();
    }
  }, {
    key: "lookAt",
    value: function lookAt(_ref2) {
      var eye = _ref2.eye,
          _ref2$center = _ref2.center,
          center = _ref2$center === void 0 ? [0, 0, 0] : _ref2$center,
          _ref2$up = _ref2.up,
          up = _ref2$up === void 0 ? [0, 1, 0] : _ref2$up;
      __WEBPACK_IMPORTED_MODULE_15_gl_mat4_lookAt___default()(this, eye, center, up);
      return this.check();
    }
  }, {
    key: "ortho",
    value: function ortho(_ref3) {
      var left = _ref3.left,
          right = _ref3.right,
          bottom = _ref3.bottom,
          top = _ref3.top,
          _ref3$near = _ref3.near,
          near = _ref3$near === void 0 ? 0.1 : _ref3$near,
          _ref3$far = _ref3.far,
          far = _ref3$far === void 0 ? 500 : _ref3$far;
      __WEBPACK_IMPORTED_MODULE_16_gl_mat4_ortho___default()(this, left, right, bottom, top, near, far);
      return this.check();
    }
  }, {
    key: "orthographic",
    value: function orthographic(_ref4) {
      var _ref4$fovy = _ref4.fovy,
          fovy = _ref4$fovy === void 0 ? 45 * Math.PI / 180 : _ref4$fovy,
          _ref4$aspect = _ref4.aspect,
          aspect = _ref4$aspect === void 0 ? 1 : _ref4$aspect,
          _ref4$focalDistance = _ref4.focalDistance,
          focalDistance = _ref4$focalDistance === void 0 ? 1 : _ref4$focalDistance,
          _ref4$near = _ref4.near,
          near = _ref4$near === void 0 ? 0.1 : _ref4$near,
          _ref4$far = _ref4.far,
          far = _ref4$far === void 0 ? 500 : _ref4$far;

      if (fovy > Math.PI * 2) {
        throw Error('radians');
      }

      var halfY = fovy / 2;
      var top = focalDistance * Math.tan(halfY);
      var right = top * aspect;
      return new Matrix4().ortho({
        left: -right,
        right: right,
        bottom: -top,
        top: top,
        near: near,
        far: far
      });
    }
  }, {
    key: "perspective",
    value: function perspective() {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          fovy = _ref5.fovy,
          _ref5$fov = _ref5.fov,
          fov = _ref5$fov === void 0 ? 45 * Math.PI / 180 : _ref5$fov,
          _ref5$aspect = _ref5.aspect,
          aspect = _ref5$aspect === void 0 ? 1 : _ref5$aspect,
          _ref5$near = _ref5.near,
          near = _ref5$near === void 0 ? 0.1 : _ref5$near,
          _ref5$far = _ref5.far,
          far = _ref5$far === void 0 ? 500 : _ref5$far;

      fovy = fovy || fov;

      if (fovy > Math.PI * 2) {
        throw Error('radians');
      }

      __WEBPACK_IMPORTED_MODULE_17_gl_mat4_perspective___default()(this, fovy, aspect, near, far);
      return this.check();
    }
  }, {
    key: "transpose",
    value: function transpose() {
      __WEBPACK_IMPORTED_MODULE_18_gl_mat4_transpose___default()(this, this);
      return this.check();
    }
  }, {
    key: "invert",
    value: function invert() {
      __WEBPACK_IMPORTED_MODULE_19_gl_mat4_invert___default()(this, this);
      return this.check();
    }
  }, {
    key: "multiplyLeft",
    value: function multiplyLeft(a) {
      __WEBPACK_IMPORTED_MODULE_20_gl_mat4_multiply___default()(this, a, this);
      return this.check();
    }
  }, {
    key: "multiplyRight",
    value: function multiplyRight(a) {
      __WEBPACK_IMPORTED_MODULE_20_gl_mat4_multiply___default()(this, this, a);
      return this.check();
    }
  }, {
    key: "rotateX",
    value: function rotateX(radians) {
      __WEBPACK_IMPORTED_MODULE_27_gl_mat4_rotateX___default()(this, this, radians);
      return this.check();
    }
  }, {
    key: "rotateY",
    value: function rotateY(radians) {
      __WEBPACK_IMPORTED_MODULE_28_gl_mat4_rotateY___default()(this, this, radians);
      return this.check();
    }
  }, {
    key: "rotateZ",
    value: function rotateZ(radians) {
      __WEBPACK_IMPORTED_MODULE_29_gl_mat4_rotateZ___default()(this, this, radians);
      return this.check();
    }
  }, {
    key: "rotateXYZ",
    value: function rotateXYZ(_ref6) {
      var _ref7 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(_ref6, 3),
          rx = _ref7[0],
          ry = _ref7[1],
          rz = _ref7[2];

      return this.rotateX(rx).rotateY(ry).rotateZ(rz);
    }
  }, {
    key: "rotateAxis",
    value: function rotateAxis(radians, axis) {
      __WEBPACK_IMPORTED_MODULE_21_gl_mat4_rotate___default()(this, this, radians, axis);
      return this.check();
    }
  }, {
    key: "scale",
    value: function scale(vec) {
      __WEBPACK_IMPORTED_MODULE_22_gl_mat4_scale___default()(this, this, vec);
      return this.check();
    }
  }, {
    key: "translate",
    value: function translate(vec) {
      __WEBPACK_IMPORTED_MODULE_23_gl_mat4_translate___default()(this, this, vec);
      return this.check();
    }
  }, {
    key: "transformVector2",
    value: function transformVector2(vector, out) {
      out = out || new __WEBPACK_IMPORTED_MODULE_9__vector2__["a" /* default */]();
      __WEBPACK_IMPORTED_MODULE_24_gl_vec2_transformMat4___default()(out, vector, this);
      validateVector(out, 2);
      return out;
    }
  }, {
    key: "transformVector3",
    value: function transformVector3(vector, out) {
      out = out || new __WEBPACK_IMPORTED_MODULE_10__vector3__["a" /* default */]();
      __WEBPACK_IMPORTED_MODULE_25_gl_vec3_transformMat4___default()(out, vector, this);
      validateVector(out, 3);
      return out;
    }
  }, {
    key: "transformVector4",
    value: function transformVector4(vector, out) {
      out = out || new __WEBPACK_IMPORTED_MODULE_11__vector4__["a" /* default */]();
      __WEBPACK_IMPORTED_MODULE_26_gl_vec4_transformMat4___default()(out, vector, this);
      validateVector(out, 4);
      return out.check();
    }
  }, {
    key: "transformVector",
    value: function transformVector(vector, out) {
      switch (vector.length) {
        case 2:
          return this.transformVector2(vector, out);

        case 3:
          return this.transformVector3(vector, out);

        case 4:
          return this.transformVector4(vector, out);

        default:
          throw new Error('Illegal vector');
      }
    }
  }, {
    key: "transformDirection",
    value: function transformDirection(vector, out) {
      return this._transformVector(vector, out, 0);
    }
  }, {
    key: "transformPoint",
    value: function transformPoint(vector, out) {
      return this._transformVector(vector, out, 1);
    }
  }, {
    key: "_transformVector",
    value: function _transformVector(vector, out, w) {
      switch (vector.length) {
        case 2:
          out = out || new __WEBPACK_IMPORTED_MODULE_9__vector2__["a" /* default */]();
          __WEBPACK_IMPORTED_MODULE_26_gl_vec4_transformMat4___default()(out, [vector[0], vector[1], 0, w], this);
          out.length = 2;
          validateVector(out, 2);
          break;

        case 3:
          out = out || new __WEBPACK_IMPORTED_MODULE_10__vector3__["a" /* default */]();
          __WEBPACK_IMPORTED_MODULE_26_gl_vec4_transformMat4___default()(out, [vector[0], vector[1], vector[2], w], this);
          out.length = 3;
          validateVector(out, 3);
          break;

        case 4:
          if (Boolean(w) !== Boolean(vector[3])) {
            throw new Error('math.gl: Matrix4.transformPoint - invalid vector');
          }

          out = out || new __WEBPACK_IMPORTED_MODULE_11__vector4__["a" /* default */]();
          __WEBPACK_IMPORTED_MODULE_26_gl_vec4_transformMat4___default()(out, vector, this);
          validateVector(out, 4);
          break;

        default:
          throw new Error('Illegal vector');
      }

      return out;
    }
  }, {
    key: "makeRotationX",
    value: function makeRotationX(radians) {
      return this.identity().rotateX(radians);
    }
  }, {
    key: "makeTranslation",
    value: function makeTranslation(x, y, z) {
      return this.identity().translate([x, y, z]);
    }
  }, {
    key: "ELEMENTS",
    get: function get() {
      return 16;
    }
  }]);

  return Matrix4;
}(__WEBPACK_IMPORTED_MODULE_7__lib_math_array__["a" /* default */]);


//# sourceMappingURL=matrix4.js.map

/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {/* unused harmony export self */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return window_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return global_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return document_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return process_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return console_; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__ = __webpack_require__(14);

var globals = {
  self: typeof self !== 'undefined' && self,
  window: typeof window !== 'undefined' && window,
  global: typeof global !== 'undefined' && global,
  document: typeof document !== 'undefined' && document,
  process: (typeof process === "undefined" ? "undefined" : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(process)) === 'object' && process
};
var self_ = globals.self || globals.window || globals.global;
var window_ = globals.window || globals.self || globals.global;
var global_ = globals.global || globals.self || globals.window;
var document_ = globals.document || {};
var process_ = globals.process || {};
var console_ = console;

//# sourceMappingURL=globals.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(28), __webpack_require__(33)))

/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (immutable) */ __webpack_exports__["a"] = isBrowser;
/* unused harmony export isBrowserMainThread */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__is_electron__ = __webpack_require__(73);


function isBrowser() {
  var isNode = (typeof process === "undefined" ? "undefined" : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(process)) === 'object' && String(process) === '[object process]' && !process.browser;
  return !isNode || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__is_electron__["a" /* default */])();
}
function isBrowserMainThread() {
  return isBrowser() && typeof document !== 'undefined';
}
//# sourceMappingURL=is-browser.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(33)))

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (immutable) */ __webpack_exports__["a"] = isElectron;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__ = __webpack_require__(14);

function isElectron(mockUserAgent) {
  if (typeof window !== 'undefined' && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(window.process) === 'object' && window.process.type === 'renderer') {
    return true;
  }

  if (typeof process !== 'undefined' && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(process.versions) === 'object' && Boolean(process.versions.electron)) {
    return true;
  }

  var realUserAgent = (typeof navigator === "undefined" ? "undefined" : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(navigator)) === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent;
  var userAgent = mockUserAgent || realUserAgent;

  if (userAgent && userAgent.indexOf('Electron') >= 0) {
    return true;
  }

  return false;
}
//# sourceMappingURL=is-electron.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(33)))

/***/ }),
/* 74 */
/***/ (function(module, exports) {

// GL constants, copied from Mozilla documentation
// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants

// Standard WebGL 1 constants
// These constants are defined on the WebGLRenderingContext interface.

/* eslint-disable key-spacing, max-len, no-inline-comments, camelcase */
// eslint-disable-next-line
module.exports = {
  // Clearing buffers
  // Constants passed to clear() to clear buffer masks.

  DEPTH_BUFFER_BIT: 0x00000100,
  STENCIL_BUFFER_BIT: 0x00000400,
  COLOR_BUFFER_BIT: 0x00004000,

  // Rendering primitives
  // Constants passed to drawElements() or drawArrays() to specify what kind of primitive to render.

  POINTS: 0x0000,
  LINES: 0x0001,
  LINE_LOOP: 0x0002,
  LINE_STRIP: 0x0003,
  TRIANGLES: 0x0004,
  TRIANGLE_STRIP: 0x0005,
  TRIANGLE_FAN: 0x0006,

  // Blending modes
  // Constants passed to blendFunc() or blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately).

  ZERO: 0,
  ONE: 1,
  SRC_COLOR: 0x0300,
  ONE_MINUS_SRC_COLOR: 0x0301,
  SRC_ALPHA: 0x0302,
  ONE_MINUS_SRC_ALPHA: 0x0303,
  DST_ALPHA: 0x0304,
  ONE_MINUS_DST_ALPHA: 0x0305,
  DST_COLOR: 0x0306,
  ONE_MINUS_DST_COLOR: 0x0307,
  SRC_ALPHA_SATURATE: 0x0308,
  CONSTANT_COLOR: 0x8001,
  ONE_MINUS_CONSTANT_COLOR: 0x8002,
  CONSTANT_ALPHA: 0x8003,
  ONE_MINUS_CONSTANT_ALPHA: 0x8004,

  // Blending equations
  // Constants passed to blendEquation() or blendEquationSeparate() to control
  // how the blending is calculated (for both, RBG and alpha, or separately).

  FUNC_ADD: 0x8006,
  FUNC_SUBTRACT: 0x800a,
  FUNC_REVERSE_SUBTRACT: 0x800b,

  // Getting GL parameter information
  // Constants passed to getParameter() to specify what information to return.

  BLEND_EQUATION: 0x8009,
  BLEND_EQUATION_RGB: 0x8009,
  BLEND_EQUATION_ALPHA: 0x883d,
  BLEND_DST_RGB: 0x80c8,
  BLEND_SRC_RGB: 0x80c9,
  BLEND_DST_ALPHA: 0x80ca,
  BLEND_SRC_ALPHA: 0x80cb,
  BLEND_COLOR: 0x8005,
  ARRAY_BUFFER_BINDING: 0x8894,
  ELEMENT_ARRAY_BUFFER_BINDING: 0x8895,
  LINE_WIDTH: 0x0b21,
  ALIASED_POINT_SIZE_RANGE: 0x846d,
  ALIASED_LINE_WIDTH_RANGE: 0x846e,
  CULL_FACE_MODE: 0x0b45,
  FRONT_FACE: 0x0b46,
  DEPTH_RANGE: 0x0b70,
  DEPTH_WRITEMASK: 0x0b72,
  DEPTH_CLEAR_VALUE: 0x0b73,
  DEPTH_FUNC: 0x0b74,
  STENCIL_CLEAR_VALUE: 0x0b91,
  STENCIL_FUNC: 0x0b92,
  STENCIL_FAIL: 0x0b94,
  STENCIL_PASS_DEPTH_FAIL: 0x0b95,
  STENCIL_PASS_DEPTH_PASS: 0x0b96,
  STENCIL_REF: 0x0b97,
  STENCIL_VALUE_MASK: 0x0b93,
  STENCIL_WRITEMASK: 0x0b98,
  STENCIL_BACK_FUNC: 0x8800,
  STENCIL_BACK_FAIL: 0x8801,
  STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802,
  STENCIL_BACK_PASS_DEPTH_PASS: 0x8803,
  STENCIL_BACK_REF: 0x8ca3,
  STENCIL_BACK_VALUE_MASK: 0x8ca4,
  STENCIL_BACK_WRITEMASK: 0x8ca5,
  VIEWPORT: 0x0ba2,
  SCISSOR_BOX: 0x0c10,
  COLOR_CLEAR_VALUE: 0x0c22,
  COLOR_WRITEMASK: 0x0c23,
  UNPACK_ALIGNMENT: 0x0cf5,
  PACK_ALIGNMENT: 0x0d05,
  MAX_TEXTURE_SIZE: 0x0d33,
  MAX_VIEWPORT_DIMS: 0x0d3a,
  SUBPIXEL_BITS: 0x0d50,
  RED_BITS: 0x0d52,
  GREEN_BITS: 0x0d53,
  BLUE_BITS: 0x0d54,
  ALPHA_BITS: 0x0d55,
  DEPTH_BITS: 0x0d56,
  STENCIL_BITS: 0x0d57,
  POLYGON_OFFSET_UNITS: 0x2a00,
  POLYGON_OFFSET_FACTOR: 0x8038,
  TEXTURE_BINDING_2D: 0x8069,
  SAMPLE_BUFFERS: 0x80a8,
  SAMPLES: 0x80a9,
  SAMPLE_COVERAGE_VALUE: 0x80aa,
  SAMPLE_COVERAGE_INVERT: 0x80ab,
  COMPRESSED_TEXTURE_FORMATS: 0x86a3,
  VENDOR: 0x1f00,
  RENDERER: 0x1f01,
  VERSION: 0x1f02,
  IMPLEMENTATION_COLOR_READ_TYPE: 0x8b9a,
  IMPLEMENTATION_COLOR_READ_FORMAT: 0x8b9b,
  BROWSER_DEFAULT_WEBGL: 0x9244,

  // Buffers
  // Constants passed to bufferData(), bufferSubData(), bindBuffer(), or
  // getBufferParameter().

  STATIC_DRAW: 0x88e4,
  STREAM_DRAW: 0x88e0,
  DYNAMIC_DRAW: 0x88e8,
  ARRAY_BUFFER: 0x8892,
  ELEMENT_ARRAY_BUFFER: 0x8893,
  BUFFER_SIZE: 0x8764,
  BUFFER_USAGE: 0x8765,

  // Vertex attributes
  // Constants passed to getVertexAttrib().

  CURRENT_VERTEX_ATTRIB: 0x8626,
  VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622,
  VERTEX_ATTRIB_ARRAY_SIZE: 0x8623,
  VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624,
  VERTEX_ATTRIB_ARRAY_TYPE: 0x8625,
  VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886a,
  VERTEX_ATTRIB_ARRAY_POINTER: 0x8645,
  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889f,

  // Culling
  // Constants passed to cullFace().

  CULL_FACE: 0x0b44,
  FRONT: 0x0404,
  BACK: 0x0405,
  FRONT_AND_BACK: 0x0408,

  // Enabling and disabling
  // Constants passed to enable() or disable().

  BLEND: 0x0be2,
  DEPTH_TEST: 0x0b71,
  DITHER: 0x0bd0,
  POLYGON_OFFSET_FILL: 0x8037,
  SAMPLE_ALPHA_TO_COVERAGE: 0x809e,
  SAMPLE_COVERAGE: 0x80a0,
  SCISSOR_TEST: 0x0c11,
  STENCIL_TEST: 0x0b90,

  // Errors
  // Constants returned from getError().

  NO_ERROR: 0,
  INVALID_ENUM: 0x0500,
  INVALID_VALUE: 0x0501,
  INVALID_OPERATION: 0x0502,
  OUT_OF_MEMORY: 0x0505,
  CONTEXT_LOST_WEBGL: 0x9242,

  // Front face directions
  // Constants passed to frontFace().

  CW: 0x0900,
  CCW: 0x0901,

  // Hints
  // Constants passed to hint()

  DONT_CARE: 0x1100,
  FASTEST: 0x1101,
  NICEST: 0x1102,
  GENERATE_MIPMAP_HINT: 0x8192,

  // Data types

  BYTE: 0x1400,
  UNSIGNED_BYTE: 0x1401,
  SHORT: 0x1402,
  UNSIGNED_SHORT: 0x1403,
  INT: 0x1404,
  UNSIGNED_INT: 0x1405,
  FLOAT: 0x1406,

  // Pixel formats

  DEPTH_COMPONENT: 0x1902,
  ALPHA: 0x1906,
  RGB: 0x1907,
  RGBA: 0x1908,
  LUMINANCE: 0x1909,
  LUMINANCE_ALPHA: 0x190a,

  // Pixel types

  // UNSIGNED_BYTE: 0x1401,
  UNSIGNED_SHORT_4_4_4_4: 0x8033,
  UNSIGNED_SHORT_5_5_5_1: 0x8034,
  UNSIGNED_SHORT_5_6_5: 0x8363,

  // Shaders
  // Constants passed to createShader() or getShaderParameter()

  FRAGMENT_SHADER: 0x8b30,
  VERTEX_SHADER: 0x8b31,
  COMPILE_STATUS: 0x8b81,
  DELETE_STATUS: 0x8b80,
  LINK_STATUS: 0x8b82,
  VALIDATE_STATUS: 0x8b83,
  ATTACHED_SHADERS: 0x8b85,
  ACTIVE_ATTRIBUTES: 0x8b89,
  ACTIVE_UNIFORMS: 0x8b86,
  MAX_VERTEX_ATTRIBS: 0x8869,
  MAX_VERTEX_UNIFORM_VECTORS: 0x8dfb,
  MAX_VARYING_VECTORS: 0x8dfc,
  MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8b4d,
  MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8b4c,
  MAX_TEXTURE_IMAGE_UNITS: 0x8872,
  MAX_FRAGMENT_UNIFORM_VECTORS: 0x8dfd,
  SHADER_TYPE: 0x8b4f,
  SHADING_LANGUAGE_VERSION: 0x8b8c,
  CURRENT_PROGRAM: 0x8b8d,

  // Depth or stencil tests
  // Constants passed to depthFunc() or stencilFunc().

  NEVER: 0x0200,
  ALWAYS: 0x0207,
  LESS: 0x0201,
  EQUAL: 0x0202,
  LEQUAL: 0x0203,
  GREATER: 0x0204,
  GEQUAL: 0x0206,
  NOTEQUAL: 0x0205,

  // Stencil actions
  // Constants passed to stencilOp().

  KEEP: 0x1e00,
  REPLACE: 0x1e01,
  INCR: 0x1e02,
  DECR: 0x1e03,
  INVERT: 0x150a,
  INCR_WRAP: 0x8507,
  DECR_WRAP: 0x8508,

  // Textures
  // Constants passed to texParameteri(),
  // texParameterf(), bindTexture(), texImage2D(), and others.

  NEAREST: 0x2600,
  LINEAR: 0x2601,
  NEAREST_MIPMAP_NEAREST: 0x2700,
  LINEAR_MIPMAP_NEAREST: 0x2701,
  NEAREST_MIPMAP_LINEAR: 0x2702,
  LINEAR_MIPMAP_LINEAR: 0x2703,
  TEXTURE_MAG_FILTER: 0x2800,
  TEXTURE_MIN_FILTER: 0x2801,
  TEXTURE_WRAP_S: 0x2802,
  TEXTURE_WRAP_T: 0x2803,
  TEXTURE_2D: 0x0de1,
  TEXTURE: 0x1702,
  TEXTURE_CUBE_MAP: 0x8513,
  TEXTURE_BINDING_CUBE_MAP: 0x8514,
  TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515,
  TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516,
  TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517,
  TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518,
  TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519,
  TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851a,
  MAX_CUBE_MAP_TEXTURE_SIZE: 0x851c,
  // TEXTURE0 - 31 0x84C0 - 0x84DF A texture unit.
  TEXTURE0: 0x84c0,
  ACTIVE_TEXTURE: 0x84e0,
  REPEAT: 0x2901,
  CLAMP_TO_EDGE: 0x812f,
  MIRRORED_REPEAT: 0x8370,

  // Emulation
  TEXTURE_WIDTH: 0x1000,
  TEXTURE_HEIGHT: 0x1001,

  // Uniform types

  FLOAT_VEC2: 0x8b50,
  FLOAT_VEC3: 0x8b51,
  FLOAT_VEC4: 0x8b52,
  INT_VEC2: 0x8b53,
  INT_VEC3: 0x8b54,
  INT_VEC4: 0x8b55,
  BOOL: 0x8b56,
  BOOL_VEC2: 0x8b57,
  BOOL_VEC3: 0x8b58,
  BOOL_VEC4: 0x8b59,
  FLOAT_MAT2: 0x8b5a,
  FLOAT_MAT3: 0x8b5b,
  FLOAT_MAT4: 0x8b5c,
  SAMPLER_2D: 0x8b5e,
  SAMPLER_CUBE: 0x8b60,

  // Shader precision-specified types

  LOW_FLOAT: 0x8df0,
  MEDIUM_FLOAT: 0x8df1,
  HIGH_FLOAT: 0x8df2,
  LOW_INT: 0x8df3,
  MEDIUM_INT: 0x8df4,
  HIGH_INT: 0x8df5,

  // Framebuffers and renderbuffers

  FRAMEBUFFER: 0x8d40,
  RENDERBUFFER: 0x8d41,
  RGBA4: 0x8056,
  RGB5_A1: 0x8057,
  RGB565: 0x8d62,
  DEPTH_COMPONENT16: 0x81a5,
  STENCIL_INDEX: 0x1901,
  STENCIL_INDEX8: 0x8d48,
  DEPTH_STENCIL: 0x84f9,
  RENDERBUFFER_WIDTH: 0x8d42,
  RENDERBUFFER_HEIGHT: 0x8d43,
  RENDERBUFFER_INTERNAL_FORMAT: 0x8d44,
  RENDERBUFFER_RED_SIZE: 0x8d50,
  RENDERBUFFER_GREEN_SIZE: 0x8d51,
  RENDERBUFFER_BLUE_SIZE: 0x8d52,
  RENDERBUFFER_ALPHA_SIZE: 0x8d53,
  RENDERBUFFER_DEPTH_SIZE: 0x8d54,
  RENDERBUFFER_STENCIL_SIZE: 0x8d55,
  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8cd0,
  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8cd1,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8cd2,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8cd3,
  COLOR_ATTACHMENT0: 0x8ce0,
  DEPTH_ATTACHMENT: 0x8d00,
  STENCIL_ATTACHMENT: 0x8d20,
  DEPTH_STENCIL_ATTACHMENT: 0x821a,
  NONE: 0,
  FRAMEBUFFER_COMPLETE: 0x8cd5,
  FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8cd6,
  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8cd7,
  FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8cd9,
  FRAMEBUFFER_UNSUPPORTED: 0x8cdd,
  FRAMEBUFFER_BINDING: 0x8ca6,
  RENDERBUFFER_BINDING: 0x8ca7,
  READ_FRAMEBUFFER: 0x8ca8,
  DRAW_FRAMEBUFFER: 0x8ca9,
  MAX_RENDERBUFFER_SIZE: 0x84e8,
  INVALID_FRAMEBUFFER_OPERATION: 0x0506,

  // Pixel storage modes
  // Constants passed to pixelStorei().

  UNPACK_FLIP_Y_WEBGL: 0x9240,
  UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241,
  UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243,

  // /////////////////////////////////////////////////////
  // Additional constants defined WebGL 2
  // These constants are defined on the WebGL2RenderingContext interface.
  // All WebGL 1 constants are also available in a WebGL 2 context.
  // /////////////////////////////////////////////////////

  // Getting GL parameter information
  // Constants passed to getParameter()
  // to specify what information to return.

  READ_BUFFER: 0x0c02,
  UNPACK_ROW_LENGTH: 0x0cf2,
  UNPACK_SKIP_ROWS: 0x0cf3,
  UNPACK_SKIP_PIXELS: 0x0cf4,
  PACK_ROW_LENGTH: 0x0d02,
  PACK_SKIP_ROWS: 0x0d03,
  PACK_SKIP_PIXELS: 0x0d04,
  TEXTURE_BINDING_3D: 0x806a,
  UNPACK_SKIP_IMAGES: 0x806d,
  UNPACK_IMAGE_HEIGHT: 0x806e,
  MAX_3D_TEXTURE_SIZE: 0x8073,
  MAX_ELEMENTS_VERTICES: 0x80e8,
  MAX_ELEMENTS_INDICES: 0x80e9,
  MAX_TEXTURE_LOD_BIAS: 0x84fd,
  MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8b49,
  MAX_VERTEX_UNIFORM_COMPONENTS: 0x8b4a,
  MAX_ARRAY_TEXTURE_LAYERS: 0x88ff,
  MIN_PROGRAM_TEXEL_OFFSET: 0x8904,
  MAX_PROGRAM_TEXEL_OFFSET: 0x8905,
  MAX_VARYING_COMPONENTS: 0x8b4b,
  FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8b8b,
  RASTERIZER_DISCARD: 0x8c89,
  VERTEX_ARRAY_BINDING: 0x85b5,
  MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122,
  MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125,
  MAX_SERVER_WAIT_TIMEOUT: 0x9111,
  MAX_ELEMENT_INDEX: 0x8d6b,

  // Textures
  // Constants passed to texParameteri(),
  // texParameterf(), bindTexture(), texImage2D(), and others.

  RED: 0x1903,
  RGB8: 0x8051,
  RGBA8: 0x8058,
  RGB10_A2: 0x8059,
  TEXTURE_3D: 0x806f,
  TEXTURE_WRAP_R: 0x8072,
  TEXTURE_MIN_LOD: 0x813a,
  TEXTURE_MAX_LOD: 0x813b,
  TEXTURE_BASE_LEVEL: 0x813c,
  TEXTURE_MAX_LEVEL: 0x813d,
  TEXTURE_COMPARE_MODE: 0x884c,
  TEXTURE_COMPARE_FUNC: 0x884d,
  SRGB: 0x8c40,
  SRGB8: 0x8c41,
  SRGB8_ALPHA8: 0x8c43,
  COMPARE_REF_TO_TEXTURE: 0x884e,
  RGBA32F: 0x8814,
  RGB32F: 0x8815,
  RGBA16F: 0x881a,
  RGB16F: 0x881b,
  TEXTURE_2D_ARRAY: 0x8c1a,
  TEXTURE_BINDING_2D_ARRAY: 0x8c1d,
  R11F_G11F_B10F: 0x8c3a,
  RGB9_E5: 0x8c3d,
  RGBA32UI: 0x8d70,
  RGB32UI: 0x8d71,
  RGBA16UI: 0x8d76,
  RGB16UI: 0x8d77,
  RGBA8UI: 0x8d7c,
  RGB8UI: 0x8d7d,
  RGBA32I: 0x8d82,
  RGB32I: 0x8d83,
  RGBA16I: 0x8d88,
  RGB16I: 0x8d89,
  RGBA8I: 0x8d8e,
  RGB8I: 0x8d8f,
  RED_INTEGER: 0x8d94,
  RGB_INTEGER: 0x8d98,
  RGBA_INTEGER: 0x8d99,
  R8: 0x8229,
  RG8: 0x822b,
  R16F: 0x822d,
  R32F: 0x822e,
  RG16F: 0x822f,
  RG32F: 0x8230,
  R8I: 0x8231,
  R8UI: 0x8232,
  R16I: 0x8233,
  R16UI: 0x8234,
  R32I: 0x8235,
  R32UI: 0x8236,
  RG8I: 0x8237,
  RG8UI: 0x8238,
  RG16I: 0x8239,
  RG16UI: 0x823a,
  RG32I: 0x823b,
  RG32UI: 0x823c,
  R8_SNORM: 0x8f94,
  RG8_SNORM: 0x8f95,
  RGB8_SNORM: 0x8f96,
  RGBA8_SNORM: 0x8f97,
  RGB10_A2UI: 0x906f,

  /* covered by extension
  COMPRESSED_R11_EAC : 0x9270,
  COMPRESSED_SIGNED_R11_EAC: 0x9271,
  COMPRESSED_RG11_EAC: 0x9272,
  COMPRESSED_SIGNED_RG11_EAC : 0x9273,
  COMPRESSED_RGB8_ETC2 : 0x9274,
  COMPRESSED_SRGB8_ETC2: 0x9275,
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 : 0x9276,
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC : 0x9277,
  COMPRESSED_RGBA8_ETC2_EAC: 0x9278,
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 0x9279,
  */
  TEXTURE_IMMUTABLE_FORMAT: 0x912f,
  TEXTURE_IMMUTABLE_LEVELS: 0x82df,

  // Pixel types

  UNSIGNED_INT_2_10_10_10_REV: 0x8368,
  UNSIGNED_INT_10F_11F_11F_REV: 0x8c3b,
  UNSIGNED_INT_5_9_9_9_REV: 0x8c3e,
  FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8dad,
  UNSIGNED_INT_24_8: 0x84fa,
  HALF_FLOAT: 0x140b,
  RG: 0x8227,
  RG_INTEGER: 0x8228,
  INT_2_10_10_10_REV: 0x8d9f,

  // Queries

  CURRENT_QUERY: 0x8865,
  QUERY_RESULT: 0x8866,
  QUERY_RESULT_AVAILABLE: 0x8867,
  ANY_SAMPLES_PASSED: 0x8c2f,
  ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8d6a,

  // Draw buffers

  MAX_DRAW_BUFFERS: 0x8824,
  DRAW_BUFFER0: 0x8825,
  DRAW_BUFFER1: 0x8826,
  DRAW_BUFFER2: 0x8827,
  DRAW_BUFFER3: 0x8828,
  DRAW_BUFFER4: 0x8829,
  DRAW_BUFFER5: 0x882a,
  DRAW_BUFFER6: 0x882b,
  DRAW_BUFFER7: 0x882c,
  DRAW_BUFFER8: 0x882d,
  DRAW_BUFFER9: 0x882e,
  DRAW_BUFFER10: 0x882f,
  DRAW_BUFFER11: 0x8830,
  DRAW_BUFFER12: 0x8831,
  DRAW_BUFFER13: 0x8832,
  DRAW_BUFFER14: 0x8833,
  DRAW_BUFFER15: 0x8834,
  MAX_COLOR_ATTACHMENTS: 0x8cdf,
  COLOR_ATTACHMENT1: 0x8ce1,
  COLOR_ATTACHMENT2: 0x8ce2,
  COLOR_ATTACHMENT3: 0x8ce3,
  COLOR_ATTACHMENT4: 0x8ce4,
  COLOR_ATTACHMENT5: 0x8ce5,
  COLOR_ATTACHMENT6: 0x8ce6,
  COLOR_ATTACHMENT7: 0x8ce7,
  COLOR_ATTACHMENT8: 0x8ce8,
  COLOR_ATTACHMENT9: 0x8ce9,
  COLOR_ATTACHMENT10: 0x8cea,
  COLOR_ATTACHMENT11: 0x8ceb,
  COLOR_ATTACHMENT12: 0x8cec,
  COLOR_ATTACHMENT13: 0x8ced,
  COLOR_ATTACHMENT14: 0x8cee,
  COLOR_ATTACHMENT15: 0x8cef,

  // Samplers

  SAMPLER_3D: 0x8b5f,
  SAMPLER_2D_SHADOW: 0x8b62,
  SAMPLER_2D_ARRAY: 0x8dc1,
  SAMPLER_2D_ARRAY_SHADOW: 0x8dc4,
  SAMPLER_CUBE_SHADOW: 0x8dc5,
  INT_SAMPLER_2D: 0x8dca,
  INT_SAMPLER_3D: 0x8dcb,
  INT_SAMPLER_CUBE: 0x8dcc,
  INT_SAMPLER_2D_ARRAY: 0x8dcf,
  UNSIGNED_INT_SAMPLER_2D: 0x8dd2,
  UNSIGNED_INT_SAMPLER_3D: 0x8dd3,
  UNSIGNED_INT_SAMPLER_CUBE: 0x8dd4,
  UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8dd7,
  MAX_SAMPLES: 0x8d57,
  SAMPLER_BINDING: 0x8919,

  // Buffers

  PIXEL_PACK_BUFFER: 0x88eb,
  PIXEL_UNPACK_BUFFER: 0x88ec,
  PIXEL_PACK_BUFFER_BINDING: 0x88ed,
  PIXEL_UNPACK_BUFFER_BINDING: 0x88ef,
  COPY_READ_BUFFER: 0x8f36,
  COPY_WRITE_BUFFER: 0x8f37,
  COPY_READ_BUFFER_BINDING: 0x8f36,
  COPY_WRITE_BUFFER_BINDING: 0x8f37,

  // Data types

  FLOAT_MAT2x3: 0x8b65,
  FLOAT_MAT2x4: 0x8b66,
  FLOAT_MAT3x2: 0x8b67,
  FLOAT_MAT3x4: 0x8b68,
  FLOAT_MAT4x2: 0x8b69,
  FLOAT_MAT4x3: 0x8b6a,
  UNSIGNED_INT_VEC2: 0x8dc6,
  UNSIGNED_INT_VEC3: 0x8dc7,
  UNSIGNED_INT_VEC4: 0x8dc8,
  UNSIGNED_NORMALIZED: 0x8c17,
  SIGNED_NORMALIZED: 0x8f9c,

  // Vertex attributes

  VERTEX_ATTRIB_ARRAY_INTEGER: 0x88fd,
  VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88fe,

  // Transform feedback

  TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8c7f,
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8c80,
  TRANSFORM_FEEDBACK_VARYINGS: 0x8c83,
  TRANSFORM_FEEDBACK_BUFFER_START: 0x8c84,
  TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8c85,
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8c88,
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8c8a,
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8c8b,
  INTERLEAVED_ATTRIBS: 0x8c8c,
  SEPARATE_ATTRIBS: 0x8c8d,
  TRANSFORM_FEEDBACK_BUFFER: 0x8c8e,
  TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8c8f,
  TRANSFORM_FEEDBACK: 0x8e22,
  TRANSFORM_FEEDBACK_PAUSED: 0x8e23,
  TRANSFORM_FEEDBACK_ACTIVE: 0x8e24,
  TRANSFORM_FEEDBACK_BINDING: 0x8e25,

  // Framebuffers and renderbuffers

  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210,
  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211,
  FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212,
  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213,
  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214,
  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215,
  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216,
  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217,
  FRAMEBUFFER_DEFAULT: 0x8218,
  // DEPTH_STENCIL_ATTACHMENT : 0x821A,
  // DEPTH_STENCIL: 0x84F9,
  DEPTH24_STENCIL8: 0x88f0,
  DRAW_FRAMEBUFFER_BINDING: 0x8ca6,
  READ_FRAMEBUFFER_BINDING: 0x8caa,
  RENDERBUFFER_SAMPLES: 0x8cab,
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8cd4,
  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8d56,

  // Uniforms

  UNIFORM_BUFFER: 0x8a11,
  UNIFORM_BUFFER_BINDING: 0x8a28,
  UNIFORM_BUFFER_START: 0x8a29,
  UNIFORM_BUFFER_SIZE: 0x8a2a,
  MAX_VERTEX_UNIFORM_BLOCKS: 0x8a2b,
  MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8a2d,
  MAX_COMBINED_UNIFORM_BLOCKS: 0x8a2e,
  MAX_UNIFORM_BUFFER_BINDINGS: 0x8a2f,
  MAX_UNIFORM_BLOCK_SIZE: 0x8a30,
  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8a31,
  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8a33,
  UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8a34,
  ACTIVE_UNIFORM_BLOCKS: 0x8a36,
  UNIFORM_TYPE: 0x8a37,
  UNIFORM_SIZE: 0x8a38,
  UNIFORM_BLOCK_INDEX: 0x8a3a,
  UNIFORM_OFFSET: 0x8a3b,
  UNIFORM_ARRAY_STRIDE: 0x8a3c,
  UNIFORM_MATRIX_STRIDE: 0x8a3d,
  UNIFORM_IS_ROW_MAJOR: 0x8a3e,
  UNIFORM_BLOCK_BINDING: 0x8a3f,
  UNIFORM_BLOCK_DATA_SIZE: 0x8a40,
  UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8a42,
  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8a43,
  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8a44,
  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8a46,

  // Sync objects

  OBJECT_TYPE: 0x9112,
  SYNC_CONDITION: 0x9113,
  SYNC_STATUS: 0x9114,
  SYNC_FLAGS: 0x9115,
  SYNC_FENCE: 0x9116,
  SYNC_GPU_COMMANDS_COMPLETE: 0x9117,
  UNSIGNALED: 0x9118,
  SIGNALED: 0x9119,
  ALREADY_SIGNALED: 0x911a,
  TIMEOUT_EXPIRED: 0x911b,
  CONDITION_SATISFIED: 0x911c,
  WAIT_FAILED: 0x911d,
  SYNC_FLUSH_COMMANDS_BIT: 0x00000001,

  // Miscellaneous constants

  COLOR: 0x1800,
  DEPTH: 0x1801,
  STENCIL: 0x1802,
  MIN: 0x8007,
  MAX: 0x8008,
  DEPTH_COMPONENT24: 0x81a6,
  STREAM_READ: 0x88e1,
  STREAM_COPY: 0x88e2,
  STATIC_READ: 0x88e5,
  STATIC_COPY: 0x88e6,
  DYNAMIC_READ: 0x88e9,
  DYNAMIC_COPY: 0x88ea,
  DEPTH_COMPONENT32F: 0x8cac,
  DEPTH32F_STENCIL8: 0x8cad,
  INVALID_INDEX: 0xffffffff,
  TIMEOUT_IGNORED: -1,
  MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247,

  // Constants defined in WebGL extensions

  // ANGLE_instanced_arrays

  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88fe,

  // WEBGL_debug_renderer_info

  UNMASKED_VENDOR_WEBGL: 0x9245,
  UNMASKED_RENDERER_WEBGL: 0x9246,

  // EXT_texture_filter_anisotropic

  MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84ff,
  TEXTURE_MAX_ANISOTROPY_EXT: 0x84fe,

  // WEBGL_compressed_texture_s3tc

  COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83f0,
  COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83f1,
  COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83f2,
  COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83f3,

  // WEBGL_compressed_texture_es3

  COMPRESSED_R11_EAC: 0x9270,
  COMPRESSED_SIGNED_R11_EAC: 0x9271,
  COMPRESSED_RG11_EAC: 0x9272,
  COMPRESSED_SIGNED_RG11_EAC: 0x9273,
  COMPRESSED_RGB8_ETC2: 0x9274,
  COMPRESSED_RGBA8_ETC2_EAC: 0x9275,
  COMPRESSED_SRGB8_ETC2: 0x9276,
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9277,
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9278,
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9279,

  // WEBGL_compressed_texture_pvrtc

  COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8c00,
  COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8c02,
  COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8c01,
  COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8c03,

  // WEBGL_compressed_texture_etc1

  COMPRESSED_RGB_ETC1_WEBGL: 0x8d64,

  // WEBGL_compressed_texture_atc

  COMPRESSED_RGB_ATC_WEBGL: 0x8c92,
  COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: 0x8c92,
  COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: 0x87ee,

  // WEBGL_depth_texture

  UNSIGNED_INT_24_8_WEBGL: 0x84fa,

  // OES_texture_half_float

  HALF_FLOAT_OES: 0x8d61,

  // WEBGL_color_buffer_float

  RGBA32F_EXT: 0x8814,
  RGB32F_EXT: 0x8815,
  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211,
  UNSIGNED_NORMALIZED_EXT: 0x8c17,

  // EXT_blend_minmax

  MIN_EXT: 0x8007,
  MAX_EXT: 0x8008,

  // EXT_sRGB

  SRGB_EXT: 0x8c40,
  SRGB_ALPHA_EXT: 0x8c42,
  SRGB8_ALPHA8_EXT: 0x8c43,
  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 0x8210,

  // OES_standard_derivatives

  FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8b8b,

  // WEBGL_draw_buffers

  COLOR_ATTACHMENT0_WEBGL: 0x8ce0,
  COLOR_ATTACHMENT1_WEBGL: 0x8ce1,
  COLOR_ATTACHMENT2_WEBGL: 0x8ce2,
  COLOR_ATTACHMENT3_WEBGL: 0x8ce3,
  COLOR_ATTACHMENT4_WEBGL: 0x8ce4,
  COLOR_ATTACHMENT5_WEBGL: 0x8ce5,
  COLOR_ATTACHMENT6_WEBGL: 0x8ce6,
  COLOR_ATTACHMENT7_WEBGL: 0x8ce7,
  COLOR_ATTACHMENT8_WEBGL: 0x8ce8,
  COLOR_ATTACHMENT9_WEBGL: 0x8ce9,
  COLOR_ATTACHMENT10_WEBGL: 0x8cea,
  COLOR_ATTACHMENT11_WEBGL: 0x8ceb,
  COLOR_ATTACHMENT12_WEBGL: 0x8cec,
  COLOR_ATTACHMENT13_WEBGL: 0x8ced,
  COLOR_ATTACHMENT14_WEBGL: 0x8cee,
  COLOR_ATTACHMENT15_WEBGL: 0x8cef,
  DRAW_BUFFER0_WEBGL: 0x8825,
  DRAW_BUFFER1_WEBGL: 0x8826,
  DRAW_BUFFER2_WEBGL: 0x8827,
  DRAW_BUFFER3_WEBGL: 0x8828,
  DRAW_BUFFER4_WEBGL: 0x8829,
  DRAW_BUFFER5_WEBGL: 0x882a,
  DRAW_BUFFER6_WEBGL: 0x882b,
  DRAW_BUFFER7_WEBGL: 0x882c,
  DRAW_BUFFER8_WEBGL: 0x882d,
  DRAW_BUFFER9_WEBGL: 0x882e,
  DRAW_BUFFER10_WEBGL: 0x882f,
  DRAW_BUFFER11_WEBGL: 0x8830,
  DRAW_BUFFER12_WEBGL: 0x8831,
  DRAW_BUFFER13_WEBGL: 0x8832,
  DRAW_BUFFER14_WEBGL: 0x8833,
  DRAW_BUFFER15_WEBGL: 0x8834,
  MAX_COLOR_ATTACHMENTS_WEBGL: 0x8cdf,
  MAX_DRAW_BUFFERS_WEBGL: 0x8824,

  // OES_vertex_array_object

  VERTEX_ARRAY_BINDING_OES: 0x85b5,

  // EXT_disjoint_timer_query

  QUERY_COUNTER_BITS_EXT: 0x8864,
  CURRENT_QUERY_EXT: 0x8865,
  QUERY_RESULT_EXT: 0x8866,
  QUERY_RESULT_AVAILABLE_EXT: 0x8867,
  TIME_ELAPSED_EXT: 0x88bf,
  TIMESTAMP_EXT: 0x8e28,
  GPU_DISJOINT_EXT: 0x8fbb // A Boolean indicating whether or not the GPU performed any disjoint operation.
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof global !== "undefined") {
    win = global;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

module.exports = win;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))

/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = getPgonMeshData;
/* harmony export (immutable) */ __webpack_exports__["a"] = euclideanSectionPoly;
/* harmony export (immutable) */ __webpack_exports__["b"] = euclideanSectionSolid;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_mesh_js__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__vec3_js__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shaders_js__ = __webpack_require__(159);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_luma_gl__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__layout_js__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_math_gl__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_mat4__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_mat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_mat4__);








const cos = Math.cos;
const sin = Math.sin;
const tan = Math.tan;
const sign = Math.sign;
const pi = Math.PI;
const pi2 = pi * 2;
const sqrt = Math.sqrt;
const atan2 = Math.atan2;
const abs = Math.abs;
const acos = Math.acos;
const asin = Math.asin;

function getPgonMeshData({orbifold, nSamplesPerSide, nLevels}) {
  const layoutType = orbifold[0];
  const {centroid, vertices: [p1, p2, p3, p4]} = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__layout_js__["a" /* getParams */])(
    layoutType,
    orbifold.slice(1)
  );
  let sides;
  if (p4) {
    sides = [[p1, p2], [p2, p3], [p3, p4], [p4, p1]];
  } else {
    sides = [[p1, p2], [p2, p3], [p3, p1]];
  }
  const expandedVertices = [];
  sides.forEach(([from, to], i) => {
    const intermediatePoints = [];
    const direction = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["a" /* vec3_unit */](__WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](to, __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](from, -1)));
    const dist = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["d" /* vec3_dist */](from, to);
    const delta = dist / (nSamplesPerSide - 1);
    for (let i = 0; i < nSamplesPerSide; i++) {
      let p = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](from, __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](direction, delta * i));
      intermediatePoints.push(p);
    }
    expandedVertices.push.apply(expandedVertices, intermediatePoints);
  });

  let levels = [];
  for (let l = 1; l < nLevels; l++) {
    let mappedVertices = expandedVertices.map(p => {
      const scale = (nLevels - l) / nLevels;
      let pScaled = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](
        __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](centroid,  1- scale),
        __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](p, scale)
      );
      return pScaled;
    });
    levels.push(mappedVertices);
  }
  levels.unshift(expandedVertices);
  levels.push([centroid]);
  levels.reverse();
  return levels;
};

function getUVs() {
  return [];
}

//Euclidean Geometry
function euclideanSectionPoly(gl, textures, config, state) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__base_mesh_js__["a" /* polygon */])(gl, textures, config, state, __WEBPACK_IMPORTED_MODULE_2__shaders_js__["a" /* vs */], __WEBPACK_IMPORTED_MODULE_2__shaders_js__["b" /* fs */], getPgonMeshData, getUVs);
}

function euclideanSectionSolid(gl, textures, config, state) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__base_mesh_js__["b" /* sectionSolid */])(gl, textures, config, state, __WEBPACK_IMPORTED_MODULE_2__shaders_js__["a" /* vs */], __WEBPACK_IMPORTED_MODULE_2__shaders_js__["b" /* fs */], __WEBPACK_IMPORTED_MODULE_4__layout_js__["a" /* getParams */]);
}



/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export hyperbolicTriangle */
/* harmony export (immutable) */ __webpack_exports__["e"] = getPgonMeshData;
/* harmony export (immutable) */ __webpack_exports__["a"] = polygonMesh;
/* harmony export (immutable) */ __webpack_exports__["c"] = sectionSolidMesh;
/* harmony export (immutable) */ __webpack_exports__["b"] = circleMesh;
/* harmony export (immutable) */ __webpack_exports__["d"] = quad;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_mesh_js__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shaders_js__ = __webpack_require__(162);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vec3_js__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shaders_quad_js__ = __webpack_require__(163);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_luma_gl__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_math_gl__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_mat4__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_mat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_mat4__);








const cos = Math.cos;
const sin = Math.sin;
const tan = Math.tan;
const sign = Math.sign;
const pi = Math.PI;
const pi2 = pi * 2;
const sqrt = Math.sqrt;
const atan2 = Math.atan2;
const abs = Math.abs;
const acos = Math.acos;
const asin = Math.asin;
const distSq = (p) => p.x * p.x + p.y * p.y;
const ln = Math.log;
const acosh = (x) => ln(x + sqrt(x * x - 1));
const asinh = (x) => ln(x + sqrt(x * x + 1));
const exp = Math.exp;
const cosh =  (x) => (exp(x) + exp(-x)) / 2;
const sinh =  (x) => (exp(x) - exp(-x)) / 2;
const tanh = (x) => sinh(x) / cosh(x);

function getPgonRadius({p, q}) {
  return sqrt(cos(pi / p + pi / q) * cos(pi / q) /
    (sin(pi2 / q) * sin(pi / p) + cos(pi / p + pi / q) * cos(pi / q)));
}
//                                 p  q  r
function hyperbolicTriangle(A, B, C) {
  const c = acosh((cos(C) + cos(A) * cos(B)) / (sin(A) * sin(B)));
  //const c = getPgonRadius({p: pi/A, q: pi/B });
  const b = asinh(sinh(c) * sin(B) / sin(C));
  const a = asinh(sinh(c) * sin(A) / sin(C));

  //const b = acosh((cos(B) + cos(C) * cos(A)) / sin(C) * sin(A));
  //const c = acosh((cos(C) + cos(A) * cos(B)) / sin(A) * sin(B));
  return [a, b, c];
}

function computeArcThroughTwoPoints(p1, p2) {
  let aDen = (p1.x * p2.y - p1.y * p2.x), bDen = aDen;
  let sq1 = distSq(p1);
  let sq2 = distSq(p2);
  // Fall back to a straight line
  if (aDen == 0)
    return {
      x: 0,
      y: 0,
      ratio: -1
    };

  let a = (p1.y * sq2 - p2.y * sq1 + p1.y - p2.y) / aDen;
  let b = (p2.x * sq1 - p1.x * sq2 + p2.x - p1.x) / bDen;
  let x = -a / 2;
  let y = -b / 2;
  let squaredRatio = (a * a + b * b) / 4 - 1;
  // Fall back to a straight line
  if (squaredRatio < 0)
    return {
      x: 0,
      y: 0,
      ratio: -1
    };
  let ratio = sqrt(squaredRatio);
  let out = {
    x: x,
    y: y,
    ratio: ratio > 1000? -1 : ratio,
    a: a,
    b: b
  };

  return out;
}

function getUVs() {
  return [];
}

function getHyperbolicParams(orbifold) {
  const [p, q, r=2, type='full' /* 'half', 'single' */] = orbifold;
  //  https://en.wikipedia.org/wiki/Hyperbolic_law_of_cosines
  const [ah, bh, ch] = hyperbolicTriangle(pi/p, pi/q, pi/r);
  //  https://en.wikipedia.org/wiki/Poincar%C3%A9_disk_model#Distance
  const [a, b, c] = [
    tanh(ah / 2),
    tanh(bh / 2),
    tanh(ch / 2)
  ];
  const pgonRadiusQ = getPgonRadius({p, q});
  const angle = pi2 / p;
  const vertices = [];
  let offset = (p % 2)? 0 : (pi2 / p / 2);
  if (type == 'half') {
    vertices.push([
      cos(pi / 2 - pi / p) * c,
      sin(pi / 2 - pi / p) * c,
      0
    ], [
      0,
      b,
      0
    ], [
      0, 0, 0
    ]);
  } else if (type == 'single') {
    vertices.push([
      cos(pi / 2 - pi / p) * c,
      sin(pi / 2 - pi / p) * c,
      0
    ], [
      0,
      b,
      0
    ], [
      cos(pi / 2 + pi / p) * c,
      sin(pi / 2 + pi / p) * c,
      0
    ], [
      0, 0, 0
    ]);
  } else {
    // type full
    for (let i = 0; i < p; i++) {
      let x = cos(angle * i + offset) * pgonRadiusQ;
      let y = sin(angle * i + offset) * pgonRadiusQ;
      vertices.push([x, y, 0]);
    }
  }
  let centroid = [0, 0, 0];
  return {centroid, vertices};
}

function getPgonMeshData({orbifold, nSamplesPerSide, nLevels}) {
  const {centroid, vertices} = getHyperbolicParams(orbifold);
  const expandedVertices = [];
  vertices.forEach((to, i) => {
    let from = vertices[(i === 0 ? vertices.length : i) -1];
    let centerOfCircle = computeArcThroughTwoPoints(
      { x: from[0], y: from[1] },
      { x: to[0],   y: to[1] }
    );
    if (centerOfCircle.a > 1000 || centerOfCircle.b > 1000
      || centerOfCircle.ratio < 0) {
      // is a straight line
      let intermediatePoints = [];
      let direction = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["a" /* vec3_unit */](__WEBPACK_IMPORTED_MODULE_2__vec3_js__["b" /* vec3_add */](to, __WEBPACK_IMPORTED_MODULE_2__vec3_js__["c" /* vec3_scale */](from, -1)));
      let dist = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["d" /* vec3_dist */](from, to);
      let delta = dist / (nSamplesPerSide - 1);
      for (let i = 0; i < nSamplesPerSide; i++) {
        let p = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["b" /* vec3_add */](from, __WEBPACK_IMPORTED_MODULE_2__vec3_js__["c" /* vec3_scale */](direction, delta * i));
        intermediatePoints.push(p);
      }
      expandedVertices.push.apply(expandedVertices, intermediatePoints);

      centroid[0] += (to[0] + from[0])/2;
      centroid[1] += (to[1] + from[1])/2;
    } else {
      let angleBegin = atan2(to[1] - centerOfCircle.y, to[0]
        - centerOfCircle.x);
      let angleEnd = atan2(from[1] - centerOfCircle.y, from[0]
        - centerOfCircle.x);
      if (angleBegin > angleEnd) {
        if (angleEnd < 0) {
          angleEnd += pi2;
        }
      }
      let c = [
        centerOfCircle.x + cos((angleBegin + angleEnd)/2) * centerOfCircle.ratio,
        centerOfCircle.y + sin((angleBegin + angleEnd)/2) * centerOfCircle.ratio
      ];
      centroid[0] += c[0];
      centroid[1] += c[1];
      let intermediatePoints = [];
      let dAngle = (angleEnd - angleBegin) / (nSamplesPerSide + 1);
      for (let angle = angleBegin + dAngle; angle < angleEnd; angle += dAngle) {
        intermediatePoints.push([
          centerOfCircle.x + cos(angle) * centerOfCircle.ratio,
          centerOfCircle.y + sin(angle) * centerOfCircle.ratio,
          0
        ]);
      }
      let dist1 = distSq({x: intermediatePoints[0][0] - from[0], y: intermediatePoints[0][1] - from[1]});
      let dist2 = distSq({x: intermediatePoints[0][0] - to[0], y: intermediatePoints[0][1] - to[1]});
      if (dist1 > dist2) {
        intermediatePoints.reverse();
      }
      expandedVertices.push(from);
      expandedVertices.push.apply(expandedVertices, intermediatePoints);
      expandedVertices.push(to);
    }
  });

  centroid[0] /= vertices.length;
  centroid[1] /= vertices.length;

  let levels = [];
  for (let l = 1; l < nLevels; l++) {
    let mappedVertices = expandedVertices.map(([x, y, z]) => {
      let dx = x - centroid[0];
      let dy = y - centroid[1];
      let angle = atan2(dy, dx);
      let r = sqrt(dx * dx + dy * dy);
      let newRadius = (nLevels - l) / nLevels * r;
      return [
        cos(angle) * newRadius + centroid[0],
        sin(angle) * newRadius + centroid[1],
        0
      ];
    });
    levels.push(mappedVertices);
  }
  levels.unshift(expandedVertices);
  levels.push([centroid]);
  levels.reverse();
  return levels;
};

function polygonMesh(gl, textures, config, state) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__base_mesh_js__["a" /* polygon */])(gl, textures, config, state, __WEBPACK_IMPORTED_MODULE_1__shaders_js__["a" /* vs */], __WEBPACK_IMPORTED_MODULE_1__shaders_js__["b" /* fs */], getPgonMeshData, getUVs);
}

function sectionSolidMesh(gl, textures, config, state) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__base_mesh_js__["b" /* sectionSolid */])(gl, textures, config, state, __WEBPACK_IMPORTED_MODULE_1__shaders_js__["a" /* vs */], __WEBPACK_IMPORTED_MODULE_1__shaders_js__["b" /* fs */]);
}

function circleMesh(gl, textures, config, state) {

  return new Promise((resolve, reject) => {
    const [p, q] = state.orbifold;
    state.p = p;
    state.q = q;

    const meshData = getPgonMeshData(Object.assign({}, state, config));
    const {radius, samplePoints} = config;

    const pos = [];

    for (let row = 0; row < meshData.length; row++) {
      let rowCurrent = meshData[row];

      rowCurrent.forEach((r, i) => {
          for (let i = 0; i < samplePoints; i++) {
            let next = (i + 1) % samplePoints;
            let angle = Math.PI * 2 * i / samplePoints;
            let angleNext = Math.PI * 2 * next / samplePoints;
            let [x, y] = [cos(angle) * radius + r[0], sin(angle) * radius + r[1]];
            let [xNext, yNext] = [cos(angleNext) * radius + r[0], sin(angleNext) * radius + r[1]];
            pos.push(r[0], r[1], 0,
              x,    y,    0,
              xNext,yNext,0);
          }
        });
      }

      let [row1, row2, row3] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__base_mesh_js__["c" /* getTransforms */])(state);
      const instanceCount = row1.length / 4;

      const ans = {
        model: new __WEBPACK_IMPORTED_MODULE_4_luma_gl__["f" /* Model */](gl, {
          vs: __WEBPACK_IMPORTED_MODULE_1__shaders_js__["a" /* vs */],
          fs: __WEBPACK_IMPORTED_MODULE_1__shaders_js__["b" /* fs */],
          isInstanced: 1,
          instanceCount,
          uniforms: {
            sDepth: textures[0],
            sColor: textures[1]
          },
          drawMode: gl.TRIANGLES,
          geometry: new __WEBPACK_IMPORTED_MODULE_4_luma_gl__["m" /* Geometry */]({
            attributes: {
              positions: {
                value: new Float32Array(pos)
              },
              row1: {
                value: new Float32Array(row1),
                instanced: 1,
                size: 4
              },
              row2: {
                value: new Float32Array(row2),
                instanced: 1,
                size: 4
              },
              row3: {
                value: new Float32Array(row3),
                instanced: 1,
                size: 4
              }
            }
          })
        }),
        transform: null //TODO(nico): tbd
      };

    resolve(ans);
  });
}

function quad(gl, textures, config, state) {

  return new Promise((resolve, reject) => {
    const [p, q, r=2, s=0] = state.orbifold;
    state.p = p;
    state.q = q;

    const pos = [
      -1, -1, 0,
       1, -1, 0,
       1,  1, 0,
      -1, -1, 0,
       1,  1, 0,
      -1,  1, 0
    ];

    const ans = {
      model: new __WEBPACK_IMPORTED_MODULE_4_luma_gl__["f" /* Model */](gl, {
        vs: __WEBPACK_IMPORTED_MODULE_3__shaders_quad_js__["a" /* vs */],
        fs: __WEBPACK_IMPORTED_MODULE_3__shaders_quad_js__["b" /* fs */],
        uniforms: {
          sDepth: textures[0],
          sColor: textures[1],
          orbifold: [p, q, r, ['half', 'single', 'full'].indexOf(s)]
        },
        drawMode: gl.TRIANGLES,
        geometry: new __WEBPACK_IMPORTED_MODULE_4_luma_gl__["m" /* Geometry */]({
          attributes: {
            positions: {
              value: new Float32Array(pos)
            }
          }
        })
      }),
      transform: null //TODO(nico): tbd
    };

    resolve(ans);
  });
}


/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _get;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__superPropBase__ = __webpack_require__(174);


function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__superPropBase__["a" /* default */])(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _setPrototypeOf;
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VERTEX_SHADER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return FRAGMENT_SHADER; });
var VERTEX_SHADER = 'vs';
var FRAGMENT_SHADER = 'fs';
//# sourceMappingURL=constants.js.map

/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = injectShader;
/* harmony export (immutable) */ __webpack_exports__["b"] = combineInjects;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__modules_module_injectors__ = __webpack_require__(193);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constants__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_assert__);


var _MODULE_INJECTORS;



 // TODO - experimental

var MODULE_INJECTORS = (_MODULE_INJECTORS = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_MODULE_INJECTORS, __WEBPACK_IMPORTED_MODULE_2__constants__["a" /* VERTEX_SHADER */], __WEBPACK_IMPORTED_MODULE_1__modules_module_injectors__["a" /* MODULE_INJECTORS_VS */]), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_MODULE_INJECTORS, __WEBPACK_IMPORTED_MODULE_2__constants__["b" /* FRAGMENT_SHADER */], __WEBPACK_IMPORTED_MODULE_1__modules_module_injectors__["b" /* MODULE_INJECTORS_FS */]), _MODULE_INJECTORS);
var REGEX_START_OF_MAIN = /void main\s*\([^\)]*\)\s*\{\n?/; // Beginning of main

var REGEX_END_OF_MAIN = /}\n?[^{}]*$/; // End of main, assumes main is last function
// A minimal shader injection/templating system.
// RFC: https://github.com/uber/luma.gl/blob/master/dev-docs/RFCs/v6.0/shader-injection-rfc.md

/* eslint-disable complexity */

function injectShader(source, type, inject, injectStandardStubs) {
  var isVertex = type === __WEBPACK_IMPORTED_MODULE_2__constants__["a" /* VERTEX_SHADER */];

  var _loop = function _loop(key) {
    var fragment = inject[key];

    switch (key) {
      // declarations are injected before the main function
      case 'vs:#decl':
        if (isVertex) {
          source = source.replace(REGEX_START_OF_MAIN, function (match) {
            return "".concat(fragment, "\n").concat(match);
          });
        }

        break;
      // main code is injected at the end of main function

      case 'vs:#main-start':
        if (isVertex) {
          source = source.replace(REGEX_START_OF_MAIN, function (match) {
            return match + fragment;
          });
        }

        break;

      case 'vs:#main-end':
        if (isVertex) {
          source = source.replace(REGEX_END_OF_MAIN, function (match) {
            return fragment + match;
          });
        }

        break;

      case 'fs:#decl':
        if (!isVertex) {
          source = source.replace(REGEX_START_OF_MAIN, function (match) {
            return "".concat(fragment, "\n").concat(match);
          });
        }

        break;

      case 'fs:#main-start':
        if (!isVertex) {
          source = source.replace(REGEX_START_OF_MAIN, function (match) {
            return match + fragment;
          });
        }

        break;

      case 'fs:#main-end':
        if (!isVertex) {
          source = source.replace(REGEX_END_OF_MAIN, function (match) {
            return fragment + match;
          });
        }

        break;

      default:
        // inject code after key, leaving key in place
        source = source.replace(key, function (match) {
          return match + fragment;
        });
    }
  };

  for (var key in inject) {
    _loop(key);
  } // Finally, if requested, insert an automatic module injector chunk


  if (injectStandardStubs) {
    source = source.replace('}s*$', function (match) {
      return match + MODULE_INJECTORS[type];
    });
  }

  return source;
}
/* eslint-enable complexity */
// Takes an array of inject objects and combines them into one

function combineInjects(injects) {
  var result = {};
  __WEBPACK_IMPORTED_MODULE_3_assert___default()(Array.isArray(injects) && injects.length > 1);
  injects.forEach(function (inject) {
    for (var key in inject) {
      result[key] = result[key] ? "".concat(result[key], "\n").concat(inject[key]) : inject[key];
    }
  });
  return result;
}
//# sourceMappingURL=inject-shader.js.map

/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export setDefaultShaderModules */
/* unused harmony export registerShaderModules */
/* harmony export (immutable) */ __webpack_exports__["a"] = resolveModules;
/* harmony export (immutable) */ __webpack_exports__["b"] = getShaderModule;
/* unused harmony export TEST_EXPORTS */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_module_registry__ = __webpack_require__(179);

var shaderModuleRegistry = new __WEBPACK_IMPORTED_MODULE_0__shader_module_registry__["a" /* default */]();
/**
 * Registers an array of default shader modules. These will be concatenated
 * automatically at the end of any shader module list passed to
 * `assembleShaders` (plus `resolveModules` and `getShaderDependencies`)
 * @param {Object[]} modules - Array of shader modules
 */

function setDefaultShaderModules(modules) {
  shaderModuleRegistry.setDefaultShaderModules(modules);
}
/**
 * Registers an array of shader modules
 * @param {Object[]} shaderModuleList - Array of shader modules
 */

function registerShaderModules(shaderModuleList) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$ignoreMultipleRe = _ref.ignoreMultipleRegistrations,
      ignoreMultipleRegistrations = _ref$ignoreMultipleRe === void 0 ? false : _ref$ignoreMultipleRe;

  shaderModuleRegistry.registerShaderModules(shaderModuleList, {
    ignoreMultipleRegistrations: ignoreMultipleRegistrations
  });
} // registers any supplied modules and returns a list of module names

function resolveModules(modules) {
  modules = modules.concat(shaderModuleRegistry.defaultShaderModules);
  modules = shaderModuleRegistry.resolveModules(modules);
  return getShaderDependencies(modules);
} // Looks up a moduleName among registered modules and returns definition.
// If "inline" module, returns it directly

function getShaderModule(moduleOrName) {
  return shaderModuleRegistry.getShaderModule(moduleOrName);
}
/**
 * Takes a list of shader module names and returns a new list of
 * shader module names that includes all dependencies, sorted so
 * that modules that are dependencies of other modules come first.
 *
 * If the shader glsl code from the returned modules is concatenated
 * in the reverse order, it is guaranteed that all functions be resolved and
 * that all function and variable definitions come before use.
 *
 * @param {String[]} modules - Array of modules (inline modules or module names)
 * @return {String[]} - Array of modules
 */

function getShaderDependencies(modules) {
  var moduleMap = {};
  var moduleDepth = {};
  getDependencyGraph({
    modules: modules,
    level: 0,
    moduleMap: moduleMap,
    moduleDepth: moduleDepth
  }); // Return a reverse sort so that dependencies come before the modules that use them

  return Object.keys(moduleDepth).sort(function (a, b) {
    return moduleDepth[b] - moduleDepth[a];
  }).map(function (name) {
    return moduleMap[name];
  });
}
/**
 * Recursively checks module dpendencies to calculate dependency
 * level of each module.
 *
 * @param {String[]} modules - Array of modules
 * @param {Number} level - Current level
 * @return {result} - Map of module name to its level
 */
// Adds another level of dependencies to the result map


function getDependencyGraph(_ref2) {
  var modules = _ref2.modules,
      level = _ref2.level,
      moduleMap = _ref2.moduleMap,
      moduleDepth = _ref2.moduleDepth;

  if (level >= 5) {
    throw new Error('Possible loop in shader dependency graph');
  } // Update level on all current modules


  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var module = _step.value;
      moduleMap[module.name] = module;

      if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {
        moduleDepth[module.name] = level;
      }
    } // Recurse

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _module = _step2.value;

      if (_module.dependencies) {
        getDependencyGraph({
          modules: _module.dependencies,
          level: level + 1,
          moduleMap: moduleMap,
          moduleDepth: moduleDepth
        });
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}

var TEST_EXPORTS = {
  getShaderDependencies: getShaderDependencies,
  getDependencyGraph: getDependencyGraph
};
//# sourceMappingURL=resolve-modules.js.map

/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math_gl__ = __webpack_require__(9);

var IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
var DEFAULT_MODULE_OPTIONS = {
  modelMatrix: IDENTITY_MATRIX,
  viewMatrix: IDENTITY_MATRIX,
  projectionMatrix: IDENTITY_MATRIX,
  cameraPositionWorld: [0, 0, 0]
};

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;
  var prevUniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // const viewProjectionInverse = viewProjection.invert();
  // viewInverseMatrix: view.invert(),
  // viewProjectionInverseMatrix: viewProjectionInverse
  var uniforms = {};

  if (opts.modelMatrix !== undefined) {
    uniforms.modelMatrix = opts.modelMatrix;
  }

  if (opts.viewMatrix !== undefined) {
    uniforms.viewMatrix = opts.viewMatrix;
  }

  if (opts.projectionMatrix !== undefined) {
    uniforms.projectionMatrix = opts.projectionMatrix;
  }

  if (opts.cameraPositionWorld !== undefined) {
    uniforms.cameraPositionWorld = opts.cameraPositionWorld;
  } // COMPOSITE UNIFORMS


  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {
    uniforms.viewProjectionMatrix = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */](opts.projectionMatrix).multiplyRight(opts.viewMatrix);
  }

  return uniforms;
}

var common = "varying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n";
var vs = "".concat(common, "\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n");
var fs = "\n".concat(common);
/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'project',
  getUniforms: getUniforms,
  vs: vs,
  fs: fs
});
//# sourceMappingURL=project.js.map

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// This product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).
// JavaScript specs as packaged in the D3 library (d3js.org). Please see license at http://colorbrewer.org/export/LICENSE.txt
!function() {

var colorbrewer = {schemeGroups: {
sequential: ["BuGn","BuPu","GnBu","OrRd","PuBu","PuBuGn","PuRd","RdPu","YlGn","YlGnBu","YlOrBr","YlOrRd"],
singlehue:["Blues","Greens","Greys","Oranges","Purples","Reds"],
diverging: ["BrBG","PiYG","PRGn","PuOr","RdBu","RdGy","RdYlBu","RdYlGn","Spectral"],
qualitative: ["Accent","Dark2","Paired","Pastel1","Pastel2","Set1","Set2","Set3"]
}, YlGn: {
3: ["#f7fcb9","#addd8e","#31a354"],
4: ["#ffffcc","#c2e699","#78c679","#238443"],
5: ["#ffffcc","#c2e699","#78c679","#31a354","#006837"],
6: ["#ffffcc","#d9f0a3","#addd8e","#78c679","#31a354","#006837"],
7: ["#ffffcc","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#005a32"],
8: ["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#005a32"],
9: ["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529"]
},YlGnBu: {
3: ["#edf8b1","#7fcdbb","#2c7fb8"],
4: ["#ffffcc","#a1dab4","#41b6c4","#225ea8"],
5: ["#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494"],
6: ["#ffffcc","#c7e9b4","#7fcdbb","#41b6c4","#2c7fb8","#253494"],
7: ["#ffffcc","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#0c2c84"],
8: ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#0c2c84"],
9: ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"]
},GnBu: {
3: ["#e0f3db","#a8ddb5","#43a2ca"],
4: ["#f0f9e8","#bae4bc","#7bccc4","#2b8cbe"],
5: ["#f0f9e8","#bae4bc","#7bccc4","#43a2ca","#0868ac"],
6: ["#f0f9e8","#ccebc5","#a8ddb5","#7bccc4","#43a2ca","#0868ac"],
7: ["#f0f9e8","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#08589e"],
8: ["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#08589e"],
9: ["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#0868ac","#084081"]
},BuGn: {
3: ["#e5f5f9","#99d8c9","#2ca25f"],
4: ["#edf8fb","#b2e2e2","#66c2a4","#238b45"],
5: ["#edf8fb","#b2e2e2","#66c2a4","#2ca25f","#006d2c"],
6: ["#edf8fb","#ccece6","#99d8c9","#66c2a4","#2ca25f","#006d2c"],
7: ["#edf8fb","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#005824"],
8: ["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#005824"],
9: ["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#006d2c","#00441b"]
},PuBuGn: {
3: ["#ece2f0","#a6bddb","#1c9099"],
4: ["#f6eff7","#bdc9e1","#67a9cf","#02818a"],
5: ["#f6eff7","#bdc9e1","#67a9cf","#1c9099","#016c59"],
6: ["#f6eff7","#d0d1e6","#a6bddb","#67a9cf","#1c9099","#016c59"],
7: ["#f6eff7","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016450"],
8: ["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016450"],
9: ["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016c59","#014636"]
},PuBu: {
3: ["#ece7f2","#a6bddb","#2b8cbe"],
4: ["#f1eef6","#bdc9e1","#74a9cf","#0570b0"],
5: ["#f1eef6","#bdc9e1","#74a9cf","#2b8cbe","#045a8d"],
6: ["#f1eef6","#d0d1e6","#a6bddb","#74a9cf","#2b8cbe","#045a8d"],
7: ["#f1eef6","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#034e7b"],
8: ["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#034e7b"],
9: ["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#045a8d","#023858"]
},BuPu: {
3: ["#e0ecf4","#9ebcda","#8856a7"],
4: ["#edf8fb","#b3cde3","#8c96c6","#88419d"],
5: ["#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"],
6: ["#edf8fb","#bfd3e6","#9ebcda","#8c96c6","#8856a7","#810f7c"],
7: ["#edf8fb","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#6e016b"],
8: ["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#6e016b"],
9: ["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#810f7c","#4d004b"]
},RdPu: {
3: ["#fde0dd","#fa9fb5","#c51b8a"],
4: ["#feebe2","#fbb4b9","#f768a1","#ae017e"],
5: ["#feebe2","#fbb4b9","#f768a1","#c51b8a","#7a0177"],
6: ["#feebe2","#fcc5c0","#fa9fb5","#f768a1","#c51b8a","#7a0177"],
7: ["#feebe2","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177"],
8: ["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177"],
9: ["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177","#49006a"]
},PuRd: {
3: ["#e7e1ef","#c994c7","#dd1c77"],
4: ["#f1eef6","#d7b5d8","#df65b0","#ce1256"],
5: ["#f1eef6","#d7b5d8","#df65b0","#dd1c77","#980043"],
6: ["#f1eef6","#d4b9da","#c994c7","#df65b0","#dd1c77","#980043"],
7: ["#f1eef6","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#91003f"],
8: ["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#91003f"],
9: ["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#980043","#67001f"]
},OrRd: {
3: ["#fee8c8","#fdbb84","#e34a33"],
4: ["#fef0d9","#fdcc8a","#fc8d59","#d7301f"],
5: ["#fef0d9","#fdcc8a","#fc8d59","#e34a33","#b30000"],
6: ["#fef0d9","#fdd49e","#fdbb84","#fc8d59","#e34a33","#b30000"],
7: ["#fef0d9","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#990000"],
8: ["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#990000"],
9: ["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#b30000","#7f0000"]
},YlOrRd: {
3: ["#ffeda0","#feb24c","#f03b20"],
4: ["#ffffb2","#fecc5c","#fd8d3c","#e31a1c"],
5: ["#ffffb2","#fecc5c","#fd8d3c","#f03b20","#bd0026"],
6: ["#ffffb2","#fed976","#feb24c","#fd8d3c","#f03b20","#bd0026"],
7: ["#ffffb2","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#b10026"],
8: ["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#b10026"],
9: ["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#bd0026","#800026"]
},YlOrBr: {
3: ["#fff7bc","#fec44f","#d95f0e"],
4: ["#ffffd4","#fed98e","#fe9929","#cc4c02"],
5: ["#ffffd4","#fed98e","#fe9929","#d95f0e","#993404"],
6: ["#ffffd4","#fee391","#fec44f","#fe9929","#d95f0e","#993404"],
7: ["#ffffd4","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#8c2d04"],
8: ["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#8c2d04"],
9: ["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#993404","#662506"]
},Purples: {
3: ["#efedf5","#bcbddc","#756bb1"],
4: ["#f2f0f7","#cbc9e2","#9e9ac8","#6a51a3"],
5: ["#f2f0f7","#cbc9e2","#9e9ac8","#756bb1","#54278f"],
6: ["#f2f0f7","#dadaeb","#bcbddc","#9e9ac8","#756bb1","#54278f"],
7: ["#f2f0f7","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#4a1486"],
8: ["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#4a1486"],
9: ["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#54278f","#3f007d"]
},Blues: {
3: ["#deebf7","#9ecae1","#3182bd"],
4: ["#eff3ff","#bdd7e7","#6baed6","#2171b5"],
5: ["#eff3ff","#bdd7e7","#6baed6","#3182bd","#08519c"],
6: ["#eff3ff","#c6dbef","#9ecae1","#6baed6","#3182bd","#08519c"],
7: ["#eff3ff","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#084594"],
8: ["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#084594"],
9: ["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]
},Greens: {
3: ["#e5f5e0","#a1d99b","#31a354"],
4: ["#edf8e9","#bae4b3","#74c476","#238b45"],
5: ["#edf8e9","#bae4b3","#74c476","#31a354","#006d2c"],
6: ["#edf8e9","#c7e9c0","#a1d99b","#74c476","#31a354","#006d2c"],
7: ["#edf8e9","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#005a32"],
8: ["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#005a32"],
9: ["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#006d2c","#00441b"]
},Oranges: {
3: ["#fee6ce","#fdae6b","#e6550d"],
4: ["#feedde","#fdbe85","#fd8d3c","#d94701"],
5: ["#feedde","#fdbe85","#fd8d3c","#e6550d","#a63603"],
6: ["#feedde","#fdd0a2","#fdae6b","#fd8d3c","#e6550d","#a63603"],
7: ["#feedde","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#8c2d04"],
8: ["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#8c2d04"],
9: ["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#a63603","#7f2704"]
},Reds: {
3: ["#fee0d2","#fc9272","#de2d26"],
4: ["#fee5d9","#fcae91","#fb6a4a","#cb181d"],
5: ["#fee5d9","#fcae91","#fb6a4a","#de2d26","#a50f15"],
6: ["#fee5d9","#fcbba1","#fc9272","#fb6a4a","#de2d26","#a50f15"],
7: ["#fee5d9","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#99000d"],
8: ["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#99000d"],
9: ["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#a50f15","#67000d"]
},Greys: {
3: ["#f0f0f0","#bdbdbd","#636363"],
4: ["#f7f7f7","#cccccc","#969696","#525252"],
5: ["#f7f7f7","#cccccc","#969696","#636363","#252525"],
6: ["#f7f7f7","#d9d9d9","#bdbdbd","#969696","#636363","#252525"],
7: ["#f7f7f7","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525"],
8: ["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525"],
9: ["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525","#000000"]
},PuOr: {
3: ["#f1a340","#f7f7f7","#998ec3"],
4: ["#e66101","#fdb863","#b2abd2","#5e3c99"],
5: ["#e66101","#fdb863","#f7f7f7","#b2abd2","#5e3c99"],
6: ["#b35806","#f1a340","#fee0b6","#d8daeb","#998ec3","#542788"],
7: ["#b35806","#f1a340","#fee0b6","#f7f7f7","#d8daeb","#998ec3","#542788"],
8: ["#b35806","#e08214","#fdb863","#fee0b6","#d8daeb","#b2abd2","#8073ac","#542788"],
9: ["#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788"],
10: ["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"],
11: ["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"]
},BrBG: {
3: ["#d8b365","#f5f5f5","#5ab4ac"],
4: ["#a6611a","#dfc27d","#80cdc1","#018571"],
5: ["#a6611a","#dfc27d","#f5f5f5","#80cdc1","#018571"],
6: ["#8c510a","#d8b365","#f6e8c3","#c7eae5","#5ab4ac","#01665e"],
7: ["#8c510a","#d8b365","#f6e8c3","#f5f5f5","#c7eae5","#5ab4ac","#01665e"],
8: ["#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e"],
9: ["#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e"],
10: ["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"],
11: ["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"]
},PRGn: {
3: ["#af8dc3","#f7f7f7","#7fbf7b"],
4: ["#7b3294","#c2a5cf","#a6dba0","#008837"],
5: ["#7b3294","#c2a5cf","#f7f7f7","#a6dba0","#008837"],
6: ["#762a83","#af8dc3","#e7d4e8","#d9f0d3","#7fbf7b","#1b7837"],
7: ["#762a83","#af8dc3","#e7d4e8","#f7f7f7","#d9f0d3","#7fbf7b","#1b7837"],
8: ["#762a83","#9970ab","#c2a5cf","#e7d4e8","#d9f0d3","#a6dba0","#5aae61","#1b7837"],
9: ["#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837"],
10: ["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"],
11: ["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"]
},PiYG: {
3: ["#e9a3c9","#f7f7f7","#a1d76a"],
4: ["#d01c8b","#f1b6da","#b8e186","#4dac26"],
5: ["#d01c8b","#f1b6da","#f7f7f7","#b8e186","#4dac26"],
6: ["#c51b7d","#e9a3c9","#fde0ef","#e6f5d0","#a1d76a","#4d9221"],
7: ["#c51b7d","#e9a3c9","#fde0ef","#f7f7f7","#e6f5d0","#a1d76a","#4d9221"],
8: ["#c51b7d","#de77ae","#f1b6da","#fde0ef","#e6f5d0","#b8e186","#7fbc41","#4d9221"],
9: ["#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221"],
10: ["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"],
11: ["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"]
},RdBu: {
3: ["#ef8a62","#f7f7f7","#67a9cf"],
4: ["#ca0020","#f4a582","#92c5de","#0571b0"],
5: ["#ca0020","#f4a582","#f7f7f7","#92c5de","#0571b0"],
6: ["#b2182b","#ef8a62","#fddbc7","#d1e5f0","#67a9cf","#2166ac"],
7: ["#b2182b","#ef8a62","#fddbc7","#f7f7f7","#d1e5f0","#67a9cf","#2166ac"],
8: ["#b2182b","#d6604d","#f4a582","#fddbc7","#d1e5f0","#92c5de","#4393c3","#2166ac"],
9: ["#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac"],
10: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"],
11: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"]
},RdGy: {
3: ["#ef8a62","#ffffff","#999999"],
4: ["#ca0020","#f4a582","#bababa","#404040"],
5: ["#ca0020","#f4a582","#ffffff","#bababa","#404040"],
6: ["#b2182b","#ef8a62","#fddbc7","#e0e0e0","#999999","#4d4d4d"],
7: ["#b2182b","#ef8a62","#fddbc7","#ffffff","#e0e0e0","#999999","#4d4d4d"],
8: ["#b2182b","#d6604d","#f4a582","#fddbc7","#e0e0e0","#bababa","#878787","#4d4d4d"],
9: ["#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d"],
10: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"],
11: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"]
},RdYlBu: {
3: ["#fc8d59","#ffffbf","#91bfdb"],
4: ["#d7191c","#fdae61","#abd9e9","#2c7bb6"],
5: ["#d7191c","#fdae61","#ffffbf","#abd9e9","#2c7bb6"],
6: ["#d73027","#fc8d59","#fee090","#e0f3f8","#91bfdb","#4575b4"],
7: ["#d73027","#fc8d59","#fee090","#ffffbf","#e0f3f8","#91bfdb","#4575b4"],
8: ["#d73027","#f46d43","#fdae61","#fee090","#e0f3f8","#abd9e9","#74add1","#4575b4"],
9: ["#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4"],
10: ["#a50026","#d73027","#f46d43","#fdae61","#fee090","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"],
11: ["#a50026","#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"]
},Spectral: {
3: ["#fc8d59","#ffffbf","#99d594"],
4: ["#d7191c","#fdae61","#abdda4","#2b83ba"],
5: ["#d7191c","#fdae61","#ffffbf","#abdda4","#2b83ba"],
6: ["#d53e4f","#fc8d59","#fee08b","#e6f598","#99d594","#3288bd"],
7: ["#d53e4f","#fc8d59","#fee08b","#ffffbf","#e6f598","#99d594","#3288bd"],
8: ["#d53e4f","#f46d43","#fdae61","#fee08b","#e6f598","#abdda4","#66c2a5","#3288bd"],
9: ["#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd"],
10: ["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"],
11: ["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"]
},RdYlGn: {
3: ["#fc8d59","#ffffbf","#91cf60"],
4: ["#d7191c","#fdae61","#a6d96a","#1a9641"],
5: ["#d7191c","#fdae61","#ffffbf","#a6d96a","#1a9641"],
6: ["#d73027","#fc8d59","#fee08b","#d9ef8b","#91cf60","#1a9850"],
7: ["#d73027","#fc8d59","#fee08b","#ffffbf","#d9ef8b","#91cf60","#1a9850"],
8: ["#d73027","#f46d43","#fdae61","#fee08b","#d9ef8b","#a6d96a","#66bd63","#1a9850"],
9: ["#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850"],
10: ["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"],
11: ["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"]
},Accent: {
3: ["#7fc97f","#beaed4","#fdc086"],
4: ["#7fc97f","#beaed4","#fdc086","#ffff99"],
5: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0"],
6: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f"],
7: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17"],
8: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17","#666666"]
},Dark2: {
3: ["#1b9e77","#d95f02","#7570b3"],
4: ["#1b9e77","#d95f02","#7570b3","#e7298a"],
5: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e"],
6: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02"],
7: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d"],
8: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"]
},Paired: {
3: ["#a6cee3","#1f78b4","#b2df8a"],
4: ["#a6cee3","#1f78b4","#b2df8a","#33a02c"],
5: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99"],
6: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c"],
7: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f"],
8: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00"],
9: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6"],
10: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a"],
11: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99"],
12: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928"]
},Pastel1: {
3: ["#fbb4ae","#b3cde3","#ccebc5"],
4: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4"],
5: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6"],
6: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc"],
7: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd"],
8: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec"],
9: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec","#f2f2f2"]
},Pastel2: {
3: ["#b3e2cd","#fdcdac","#cbd5e8"],
4: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4"],
5: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9"],
6: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae"],
7: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc"],
8: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc","#cccccc"]
},Set1: {
3: ["#e41a1c","#377eb8","#4daf4a"],
4: ["#e41a1c","#377eb8","#4daf4a","#984ea3"],
5: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00"],
6: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33"],
7: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628"],
8: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf"],
9: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf","#999999"]
},Set2: {
3: ["#66c2a5","#fc8d62","#8da0cb"],
4: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3"],
5: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854"],
6: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f"],
7: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494"],
8: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494","#b3b3b3"]
},Set3: {
3: ["#8dd3c7","#ffffb3","#bebada"],
4: ["#8dd3c7","#ffffb3","#bebada","#fb8072"],
5: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3"],
6: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462"],
7: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69"],
8: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5"],
9: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9"],
10: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd"],
11: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5"],
12: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5","#ffed6f"]
}};

if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (colorbrewer),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else if (typeof module === "object" && module.exports) {
    module.exports = colorbrewer;
} else {
    this.colorbrewer = colorbrewer;
}

}();


/***/ }),
/* 85 */
/***/ (function(module, exports) {

module.exports = determinant;

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/***/ }),
/* 86 */
/***/ (function(module, exports) {

module.exports = fromQuat;

/**
 * Creates a matrix from a quaternion rotation.
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @returns {mat4} out
 */
function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/***/ }),
/* 87 */
/***/ (function(module, exports) {

module.exports = frustum;

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/***/ }),
/* 88 */
/***/ (function(module, exports) {

module.exports = identity;

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/***/ }),
/* 89 */
/***/ (function(module, exports) {

module.exports = invert;

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(88);

module.exports = lookAt;

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < 0.000001 &&
        Math.abs(eyey - centery) < 0.000001 &&
        Math.abs(eyez - centerz) < 0.000001) {
        return identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/***/ }),
/* 91 */
/***/ (function(module, exports) {

module.exports = multiply;

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/***/ }),
/* 92 */
/***/ (function(module, exports) {

module.exports = ortho;

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function ortho(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/***/ }),
/* 93 */
/***/ (function(module, exports) {

module.exports = perspective;

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspective(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/***/ }),
/* 94 */
/***/ (function(module, exports) {

module.exports = rotate;

/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < 0.000001) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/***/ }),
/* 95 */
/***/ (function(module, exports) {

module.exports = rotateX;

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/***/ }),
/* 96 */
/***/ (function(module, exports) {

module.exports = rotateY;

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/***/ }),
/* 97 */
/***/ (function(module, exports) {

module.exports = rotateZ;

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/***/ }),
/* 98 */
/***/ (function(module, exports) {

module.exports = scale;

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/***/ }),
/* 99 */
/***/ (function(module, exports) {

module.exports = translate;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/***/ }),
/* 100 */
/***/ (function(module, exports) {

module.exports = transpose;

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(240)


/***/ }),
/* 102 */
/***/ (function(module, exports) {

module.exports = setAxisAngle

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
function setAxisAngle (out, axis, rad) {
  rad = rad * 0.5
  var s = Math.sin(rad)
  out[0] = s * axis[0]
  out[1] = s * axis[1]
  out[2] = s * axis[2]
  out[3] = Math.cos(rad)
  return out
}


/***/ }),
/* 103 */
/***/ (function(module, exports) {

module.exports = cross;

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2]

    out[0] = ay * bz - az * by
    out[1] = az * bx - ax * bz
    out[2] = ax * by - ay * bx
    return out
}

/***/ }),
/* 104 */
/***/ (function(module, exports) {

module.exports = dot;

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
}

/***/ }),
/* 105 */
/***/ (function(module, exports) {

module.exports = length;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
    var x = a[0],
        y = a[1],
        z = a[2]
    return Math.sqrt(x*x + y*y + z*z)
}

/***/ }),
/* 106 */
/***/ (function(module, exports) {

module.exports = normalize;

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
function normalize(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2]
    var len = x*x + y*y + z*z
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len)
        out[0] = a[0] * len
        out[1] = a[1] * len
        out[2] = a[2] * len
    }
    return out
}

/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_context__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_assert__ = __webpack_require__(5);




/* global window, Worker */





var AnimationLoopProxy =
/*#__PURE__*/
function () {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__["a" /* default */])(AnimationLoopProxy, null, [{
    key: "createWorker",
    // Create the script for the rendering worker.
    // @param opts {object} - options to construct an AnimationLoop instance
    value: function createWorker(animationLoop) {
      return function (self) {
        animationLoop.setProps({
          // Prevent the animation loop from trying to access DOM properties
          useDevicePixels: false,
          autoResizeDrawingBuffer: false
        });
        self.canvas = null;

        function initializeCanvas(canvas) {
          var eventHandlers = new Map();

          canvas.addEventListener = function (type, handler) {
            self.postMessage({
              command: 'addEventListener',
              type: type
            });

            if (!eventHandlers.has(type)) {
              eventHandlers.set(type, []);
            }

            eventHandlers.get(type).push(handler);
          };

          canvas.removeEventListener = function (type, handler) {
            self.postMessage({
              command: 'removeEventListener',
              type: type
            });
            var handlers = eventHandlers.get(type);

            if (handlers) {
              handlers.splice(handlers.indexOf(handler), 1);
            }
          };

          canvas.dispatchEvent = function (type, event) {
            var handlers = eventHandlers.get(type);

            if (handlers) {
              handlers.forEach(function (handler) {
                return handler(event);
              });
            }
          };

          self.canvas = canvas;
        }

        self.addEventListener('message', function (evt) {
          switch (evt.data.command) {
            case 'start':
              initializeCanvas(evt.data.opts.canvas);
              animationLoop.start(evt.data.opts);
              break;

            case 'stop':
              animationLoop.stop();
              break;

            case 'resize':
              self.canvas.width = evt.data.width;
              self.canvas.height = evt.data.height;
              break;

            case 'event':
              self.canvas.dispatchEvent(evt.data.type, evt.data.event);
              break;

            default:
          }
        });
      };
    }
    /*
     * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context
     */

  }]);

  function AnimationLoopProxy(worker) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, AnimationLoopProxy);

    var _opts$onInitialize = opts.onInitialize,
        onInitialize = _opts$onInitialize === void 0 ? function () {} : _opts$onInitialize,
        _opts$onFinalize = opts.onFinalize,
        onFinalize = _opts$onFinalize === void 0 ? function () {} : _opts$onFinalize,
        _opts$useDevicePixels = opts.useDevicePixels,
        useDevicePixels = _opts$useDevicePixels === void 0 ? true : _opts$useDevicePixels,
        _opts$autoResizeDrawi = opts.autoResizeDrawingBuffer,
        autoResizeDrawingBuffer = _opts$autoResizeDrawi === void 0 ? true : _opts$autoResizeDrawi;
    this.props = {
      onInitialize: onInitialize,
      onFinalize: onFinalize
    };
    this.setProps({
      autoResizeDrawingBuffer: autoResizeDrawingBuffer,
      useDevicePixels: useDevicePixels
    }); // state

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_assert__["a" /* default */])(worker instanceof Worker);
    this.worker = worker;
    this.canvas = null;
    this.width = null;
    this.height = null;
    this._stopped = true;
    this._animationFrameId = null;
    this._startPromise = null; // bind methods

    this._onMessage = this._onMessage.bind(this);
    this._onEvent = this._onEvent.bind(this);
    this._updateFrame = this._updateFrame.bind(this);
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__["a" /* default */])(AnimationLoopProxy, [{
    key: "setProps",
    value: function setProps(props) {
      if ('autoResizeDrawingBuffer' in props) {
        this.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;
      }

      if ('useDevicePixels' in props) {
        this.useDevicePixels = props.useDevicePixels;
      }

      return this;
    }
    /* Public methods */
    // Starts a render loop if not already running

  }, {
    key: "start",
    value: function start() {
      var _this = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this._stopped = false; // console.debug(`Starting ${this.constructor.name}`);

      if (!this._animationFrameId) {
        this.worker.onmessage = this._onMessage; // Wait for start promise before rendering frame

        this._startPromise = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_context__["b" /* getPageLoadPromise */])().then(function () {
          _this._createAndTransferCanvas(opts);

          return _this.props.onInitialize(_this);
        }).then(function () {
          if (!_this._stopped) {
            _this._animationFrameId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils__["m" /* requestAnimationFrame */])(_this._updateFrame);
          }
        });
      }

      return this;
    } // Stops a render loop if already running, finalizing

  }, {
    key: "stop",
    value: function stop() {
      if (this._animationFrameId) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils__["n" /* cancelAnimationFrame */])(this._animationFrameId);
        this._animationFrameId = null;
        this._stopped = true;
        this.props.onFinalize(this);
      }

      this.worker.postMessage({
        command: 'stop'
      });
      return this;
    } // PRIVATE METHODS

  }, {
    key: "_onMessage",
    value: function _onMessage(evt) {
      switch (evt.data.command) {
        case 'addEventListener':
          this.canvas.addEventListener(evt.data.type, this._onEvent);
          break;

        case 'removeEventListener':
          this.canvas.removeEventListener(evt.data.type, this._onEvent);
          break;

        default:
      }
    }
  }, {
    key: "_onEvent",
    value: function _onEvent(evt) {
      var devicePixelRatio = this.useDevicePixels ? window.devicePixelRatio || 1 : 1;
      var type = evt.type;
      var safeEvent = {};

      for (var key in evt) {
        var value = evt[key];

        var valueType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(value);

        if (key === 'offsetX' || key === 'offsetY') {
          value *= devicePixelRatio;
        }

        if (valueType === 'number' || valueType === 'boolean' || valueType === 'string') {
          safeEvent[key] = value;
        }
      }

      this.worker.postMessage({
        command: 'event',
        type: type,
        event: safeEvent
      });
    }
  }, {
    key: "_updateFrame",
    value: function _updateFrame() {
      this._resizeCanvasDrawingBuffer();

      this._animationFrameId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils__["m" /* requestAnimationFrame */])(this._updateFrame);
    }
  }, {
    key: "_createAndTransferCanvas",
    value: function _createAndTransferCanvas(opts) {
      // Create a canvas on the main thread
      var screenCanvas = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_context__["c" /* getCanvas */])(opts); // Create an offscreen canvas controlling the main canvas

      if (!screenCanvas.transferControlToOffscreen) {
        __WEBPACK_IMPORTED_MODULE_5__utils__["a" /* log */].error('OffscreenCanvas is not available in your browser.')(); // eslint-disable-line
      }

      var offscreenCanvas = screenCanvas.transferControlToOffscreen(); // Transfer the offscreen canvas to the worker

      this.worker.postMessage({
        command: 'start',
        opts: Object.assign({}, opts, {
          canvas: offscreenCanvas
        })
      }, [offscreenCanvas]); // store the main canvas on the local thread

      this.canvas = screenCanvas;
    }
  }, {
    key: "_resizeCanvasDrawingBuffer",
    value: function _resizeCanvasDrawingBuffer() {
      if (this.autoResizeDrawingBuffer) {
        var devicePixelRatio = this.useDevicePixels ? window.devicePixelRatio || 1 : 1;
        var width = this.canvas.clientWidth * devicePixelRatio;
        var height = this.canvas.clientHeight * devicePixelRatio;

        if (this.width !== width || this.height !== height) {
          this.width = width;
          this.height = height;
          this.worker.postMessage({
            command: 'resize',
            width: width,
            height: height
          });
        }
      }
    }
  }]);

  return AnimationLoopProxy;
}();


//# sourceMappingURL=animation-loop-proxy.js.map

/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AnimationLoop; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_context__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_assert__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__webgl__ = __webpack_require__(25);




/* global OffscreenCanvas */




 // TODO - remove dependency on webgl classes


var DEFAULT_GL_OPTIONS = {
  preserveDrawingBuffer: true
};

var AnimationLoop =
/*#__PURE__*/
function () {
  /*
   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context
   */
  function AnimationLoop() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, AnimationLoop);

    var _props$onCreateContex = props.onCreateContext,
        onCreateContext = _props$onCreateContex === void 0 ? function (opts) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_context__["d" /* createGLContext */])(opts);
    } : _props$onCreateContex,
        _props$onAddHTML = props.onAddHTML,
        onAddHTML = _props$onAddHTML === void 0 ? null : _props$onAddHTML,
        _props$onInitialize = props.onInitialize,
        onInitialize = _props$onInitialize === void 0 ? function () {} : _props$onInitialize,
        _props$onRender = props.onRender,
        onRender = _props$onRender === void 0 ? function () {} : _props$onRender,
        _props$onFinalize = props.onFinalize,
        onFinalize = _props$onFinalize === void 0 ? function () {} : _props$onFinalize,
        _props$gl = props.gl,
        gl = _props$gl === void 0 ? null : _props$gl,
        _props$glOptions = props.glOptions,
        glOptions = _props$glOptions === void 0 ? {} : _props$glOptions,
        _props$debug = props.debug,
        debug = _props$debug === void 0 ? false : _props$debug,
        _props$createFramebuf = props.createFramebuffer,
        createFramebuffer = _props$createFramebuf === void 0 ? false : _props$createFramebuf,
        _props$autoResizeView = props.autoResizeViewport,
        autoResizeViewport = _props$autoResizeView === void 0 ? true : _props$autoResizeView,
        _props$autoResizeDraw = props.autoResizeDrawingBuffer,
        autoResizeDrawingBuffer = _props$autoResizeDraw === void 0 ? true : _props$autoResizeDraw;
    var _props$useDevicePixel = props.useDevicePixels,
        useDevicePixels = _props$useDevicePixel === void 0 ? true : _props$useDevicePixel;

    if ('useDevicePixelRatio' in props) {
      __WEBPACK_IMPORTED_MODULE_5__utils__["a" /* log */].deprecated('useDevicePixelRatio', 'useDevicePixels')();
      useDevicePixels = props.useDevicePixelRatio;
    }

    this.props = {
      onCreateContext: onCreateContext,
      onAddHTML: onAddHTML,
      onInitialize: onInitialize,
      onRender: onRender,
      onFinalize: onFinalize,
      gl: gl,
      glOptions: glOptions,
      debug: debug,
      createFramebuffer: createFramebuffer
    }; // state

    this.gl = gl;
    this.needsRedraw = null;
    this.setProps({
      autoResizeViewport: autoResizeViewport,
      autoResizeDrawingBuffer: autoResizeDrawingBuffer,
      useDevicePixels: useDevicePixels
    }); // Bind methods

    this.start = this.start.bind(this);
    this.stop = this.stop.bind(this);
    this._renderFrame = this._renderFrame.bind(this);
    this._onMousemove = this._onMousemove.bind(this);
    this._onMouseleave = this._onMouseleave.bind(this);
    return this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__["a" /* default */])(AnimationLoop, [{
    key: "setNeedsRedraw",
    value: function setNeedsRedraw(reason) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_assert__["a" /* default */])(typeof reason === 'string');
      this.needsRedraw = this.needsRedraw || reason;
      return this;
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      if ('autoResizeViewport' in props) {
        this.autoResizeViewport = props.autoResizeViewport;
      }

      if ('autoResizeDrawingBuffer' in props) {
        this.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;
      }

      if ('useDevicePixels' in props) {
        this.useDevicePixels = props.useDevicePixels;
      }

      return this;
    } // Starts a render loop if not already running
    // @param {Object} context - contains frame specific info (E.g. tick, width, height, etc)

  }, {
    key: "start",
    value: function start() {
      var _this = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this._stopped = false; // console.debug(`Starting ${this.constructor.name}`);

      if (!this._animationFrameId) {
        // Wait for start promise before rendering frame
        this._startPromise = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_context__["b" /* getPageLoadPromise */])().then(function () {
          if (_this._stopped) {
            return null;
          } // Create the WebGL context


          _this._createWebGLContext(opts);

          _this._createFramebuffer();

          _this._startEventHandling(); // Initialize the callback data


          _this._initializeCallbackData();

          _this._updateCallbackData(); // Default viewport setup, in case onInitialize wants to render


          _this._resizeCanvasDrawingBuffer();

          _this._resizeViewport(); // Note: onIntialize can return a promise (in case it needs to load resources)


          return _this.onInitialize(_this.animationProps);
        }).then(function (appContext) {
          if (!_this._stopped) {
            _this._addCallbackData(appContext || {});

            if (appContext !== false && !_this._animationFrameId) {
              _this._animationFrameId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils__["m" /* requestAnimationFrame */])(_this._renderFrame);
            }
          }
        });
      }

      return this;
    } // Stops a render loop if already running, finalizing

  }, {
    key: "stop",
    value: function stop() {
      // console.debug(`Stopping ${this.constructor.name}`);
      if (this._animationFrameId) {
        this._finalizeCallbackData();

        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils__["n" /* cancelAnimationFrame */])(this._animationFrameId);
        this._animationFrameId = null;
        this._stopped = true;
      }

      return this;
    }
  }, {
    key: "onCreateContext",
    value: function onCreateContext() {
      var _this$props;

      return (_this$props = this.props).onCreateContext.apply(_this$props, arguments);
    }
  }, {
    key: "onInitialize",
    value: function onInitialize() {
      var _this$props2;

      return (_this$props2 = this.props).onInitialize.apply(_this$props2, arguments);
    }
  }, {
    key: "onRender",
    value: function onRender() {
      var _this$props3;

      return (_this$props3 = this.props).onRender.apply(_this$props3, arguments);
    }
  }, {
    key: "onFinalize",
    value: function onFinalize() {
      var _this$props4;

      return (_this$props4 = this.props).onFinalize.apply(_this$props4, arguments);
    } // DEPRECATED/REMOVED METHODS

  }, {
    key: "getHTMLControlValue",
    value: function getHTMLControlValue(id) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var element = document.getElementById(id);
      return element ? Number(element.value) : defaultValue;
    } // Update parameters

  }, {
    key: "setViewParameters",
    value: function setViewParameters() {
      __WEBPACK_IMPORTED_MODULE_5__utils__["a" /* log */].removed('AnimationLoop.setViewParameters', 'AnimationLoop.setProps')();
      return this;
    } // PRIVATE METHODS

  }, {
    key: "_clearNeedsRedraw",
    value: function _clearNeedsRedraw() {
      this.needsRedraw = null;
    }
  }, {
    key: "_setupFrame",
    value: function _setupFrame() {
      if (this._onSetupFrame) {
        // call callback
        this._onSetupFrame(this.animationProps); // end callback

      } else {
        this._resizeCanvasDrawingBuffer();

        this._resizeViewport();

        this._resizeFramebuffer();
      }
    }
    /**
     * @private
     * Handles a render loop frame - updates context and calls the application
     * callback
     */

  }, {
    key: "_renderFrame",
    value: function _renderFrame() {
      if (this._stopped) {
        return;
      }

      this._setupFrame();

      this._updateCallbackData(); // call callback


      this.onRender(this.animationProps); // end callback
      // clear needsRedraw flag

      this._clearNeedsRedraw();

      if (this.offScreen && this.gl.commit) {
        // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/commit
        // commit returns a Promise
        this.gl.commit().then(this._renderFrame);
      } else {
        // Either on-screen or gl.commit not supported (Chrome)
        // Request another render frame now
        this._animationFrameId = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils__["m" /* requestAnimationFrame */])(this._renderFrame);
      }
    } // Initialize the  object that will be passed to app callbacks

  }, {
    key: "_initializeCallbackData",
    value: function _initializeCallbackData() {
      this.animationProps = {
        gl: this.gl,
        stop: this.stop,
        canvas: this.gl.canvas,
        framebuffer: this.framebuffer,
        // Initial values
        useDevicePixels: this.useDevicePixels,
        needsRedraw: null,
        // Animation props
        startTime: Date.now(),
        time: 0,
        tick: 0,
        tock: 0,
        // canvas
        // Experimental
        _loop: this,
        _animationLoop: this,
        _mousePosition: null // Event props

      };
    } // Update the context object that will be passed to app callbacks

  }, {
    key: "_updateCallbackData",
    value: function _updateCallbackData() {
      var _this$_getSizeAndAspe = this._getSizeAndAspect(),
          width = _this$_getSizeAndAspe.width,
          height = _this$_getSizeAndAspe.height,
          aspect = _this$_getSizeAndAspe.aspect;

      if (width !== this.animationProps.width || height !== this.animationProps.height) {
        this.setNeedsRedraw('drawing buffer resized');
      }

      if (aspect !== this.animationProps.aspect) {
        this.setNeedsRedraw('drawing buffer aspect changed');
      }

      this.animationProps.width = width;
      this.animationProps.height = height;
      this.animationProps.aspect = aspect;
      this.animationProps.needsRedraw = this.needsRedraw; // Increment tick

      this.animationProps.time = Date.now() - this.animationProps.startTime;
      this.animationProps.tick = Math.floor(this.animationProps.time / 1000 * 60);
      this.animationProps.tock++; // experimental

      this.animationProps._offScreen = this.offScreen;
    }
  }, {
    key: "_finalizeCallbackData",
    value: function _finalizeCallbackData() {
      // call callback
      this.onFinalize(this.animationProps); // end callback
    } // Add application's data to the app context object

  }, {
    key: "_addCallbackData",
    value: function _addCallbackData(appContext) {
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(appContext) === 'object' && appContext !== null) {
        this.animationProps = Object.assign({}, this.animationProps, appContext);
      }
    } // Either uses supplied or existing context, or calls provided callback to create one

  }, {
    key: "_createWebGLContext",
    value: function _createWebGLContext(opts) {
      this.offScreen = opts.canvas && typeof OffscreenCanvas !== 'undefined' && opts.canvas instanceof OffscreenCanvas; // Create the WebGL context if necessary

      opts = Object.assign({}, opts, DEFAULT_GL_OPTIONS, this.props.glOptions);
      this.gl = this.props.gl || this.onCreateContext(opts);

      if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils__["q" /* isWebGL */])(this.gl)) {
        throw new Error('AnimationLoop.onCreateContext - illegal context returned');
      } // Reset the WebGL context.


      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_context__["e" /* resetParameters */])(this.gl);

      this._createInfoDiv();
    }
  }, {
    key: "_createInfoDiv",
    value: function _createInfoDiv() {
      if (this.gl.canvas && this.props.onAddHTML) {
        /* global document */
        var wrapperDiv = document.createElement('div');
        document.body.appendChild(wrapperDiv);
        wrapperDiv.style.position = 'relative';
        var div = document.createElement('div');
        div.style.position = 'absolute';
        div.style.left = '10px';
        div.style.bottom = '10px';
        div.style.width = '300px';
        div.style.background = 'white';
        wrapperDiv.appendChild(this.gl.canvas);
        wrapperDiv.appendChild(div);
        var html = this.props.onAddHTML(div);

        if (html) {
          div.innerHTML = html;
        }
      }
    }
  }, {
    key: "_getSizeAndAspect",
    value: function _getSizeAndAspect() {
      // https://webglfundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
      var width = this.gl.drawingBufferWidth;
      var height = this.gl.drawingBufferHeight; // https://webglfundamentals.org/webgl/lessons/webgl-anti-patterns.html

      var aspect = 1;
      var _this$gl$canvas = this.gl.canvas,
          clientWidth = _this$gl$canvas.clientWidth,
          clientHeight = _this$gl$canvas.clientHeight;

      if (clientWidth >= 0 && clientHeight >= 0) {
        aspect = height > 0 ? clientWidth / clientHeight : 1;
      } else if (width > 0 && height > 0) {
        aspect = width / height;
      }

      return {
        width: width,
        height: height,
        aspect: aspect
      };
    } // Default viewport setup

  }, {
    key: "_resizeViewport",
    value: function _resizeViewport() {
      if (this.autoResizeViewport) {
        this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
      }
    } // Resize the render buffer of the canvas to match canvas client size
    // Optionally multiplying with devicePixel ratio

  }, {
    key: "_resizeCanvasDrawingBuffer",
    value: function _resizeCanvasDrawingBuffer() {
      if (this.autoResizeDrawingBuffer) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_context__["f" /* resizeGLContext */])(this.gl, {
          useDevicePixels: this.useDevicePixels
        });
      }
    } // TBD - deprecated?

  }, {
    key: "_createFramebuffer",
    value: function _createFramebuffer() {
      // Setup default framebuffer
      if (this.props.createFramebuffer) {
        this.framebuffer = new __WEBPACK_IMPORTED_MODULE_7__webgl__["c" /* Framebuffer */](this.gl);
      }
    }
  }, {
    key: "_resizeFramebuffer",
    value: function _resizeFramebuffer() {
      if (this.framebuffer) {
        this.framebuffer.resize({
          width: this.gl.drawingBufferWidth,
          height: this.gl.drawingBufferHeight
        });
      }
    } // Event handling

  }, {
    key: "_startEventHandling",
    value: function _startEventHandling() {
      this.gl.canvas.addEventListener('mousemove', this._onMousemove);
      this.gl.canvas.addEventListener('mouseleave', this._onMouseleave);
    }
  }, {
    key: "_onMousemove",
    value: function _onMousemove(e) {
      this.animationProps._mousePosition = [e.offsetX, e.offsetY];
    }
  }, {
    key: "_onMouseleave",
    value: function _onMouseleave(e) {
      this.animationProps._mousePosition = null;
    }
  }]);

  return AnimationLoop;
}();


//# sourceMappingURL=animation-loop.js.map

/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Attribute; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_context_context_features__ = __webpack_require__(45);



/* eslint-disable complexity */




var Attribute =
/*#__PURE__*/
function () {
  function Attribute(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Attribute);

    var _opts$id = opts.id,
        id = _opts$id === void 0 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils__["b" /* uid */])('attribute') : _opts$id,
        type = opts.type,
        _opts$isIndexed = opts.isIndexed,
        isIndexed = _opts$isIndexed === void 0 ? false : _opts$isIndexed; // Options that cannot be changed later

    this.gl = gl;
    this.id = id;
    this.isIndexed = isIndexed;
    this.target = isIndexed ? 34963 : 34962;
    this.type = type;

    if (isIndexed && !type) {
      // If the attribute is indices, auto infer the correct type
      // WebGL2 and WebGL1 w/ uint32 index extension support accepts Uint32Array, otherwise Uint16Array
      this.type = gl && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_context_context_features__["b" /* hasFeature */])(gl, __WEBPACK_IMPORTED_MODULE_4__webgl_context_context_features__["c" /* FEATURES */].ELEMENT_INDEX_UINT32) ? 5125 : 5123;
    } // Initialize the attribute descriptor, with WebGL and metadata fields


    this.value = null;
    this.externalBuffer = null;
    this.buffer = null;
    this.userData = {}; // Reserved for application

    this.update(opts); // Sanity - no app fields on our attributes. Use userData instead.

    Object.seal(this); // Check all fields and generate helpful error messages

    this._validateAttributeDefinition();
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Attribute, [{
    key: "delete",
    value: function _delete() {
      if (this.buffer) {
        this.buffer.delete();
        this.buffer = null;
      }
    }
  }, {
    key: "update",
    value: function update(opts) {
      var value = opts.value,
          buffer = opts.buffer,
          _opts$constant = opts.constant,
          constant = _opts$constant === void 0 ? this.constant || false : _opts$constant;
      this.constant = constant;

      if (buffer) {
        this.externalBuffer = buffer;
        this.constant = false;
        this.type = buffer.accessor.type;

        if (buffer.accessor.divisor !== undefined) {
          this.divisor = buffer.accessor.divisor;
        }
      } else if (value) {
        this.externalBuffer = null;
        this.value = value;

        if (!constant && this.gl) {
          // Create buffer if needed
          this.buffer = this.buffer || new __WEBPACK_IMPORTED_MODULE_2__webgl__["f" /* Buffer */](this.gl, Object.assign({}, opts, {
            id: this.id,
            target: this.target,
            type: this.type
          }));
          this.buffer.setData({
            data: value
          });
          this.type = this.buffer.accessor.type;
        }
      }

      this._setAccessor(opts);
    }
  }, {
    key: "getBuffer",
    value: function getBuffer() {
      if (this.constant) {
        return null;
      }

      return this.externalBuffer || this.buffer;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      if (this.constant) {
        return this.value;
      }

      var buffer = this.externalBuffer || this.buffer;

      if (buffer) {
        return [buffer, this];
      }

      return null;
    } // Sets all accessor props except type
    // TODO - store on `this.accessor`

  }, {
    key: "_setAccessor",
    value: function _setAccessor(opts) {
      var _opts$size = opts.size,
          size = _opts$size === void 0 ? this.size : _opts$size,
          _opts$offset = opts.offset,
          offset = _opts$offset === void 0 ? this.offset || 0 : _opts$offset,
          _opts$stride = opts.stride,
          stride = _opts$stride === void 0 ? this.stride || 0 : _opts$stride,
          _opts$normalized = opts.normalized,
          normalized = _opts$normalized === void 0 ? this.normalized || false : _opts$normalized,
          _opts$integer = opts.integer,
          integer = _opts$integer === void 0 ? this.integer || false : _opts$integer,
          _opts$divisor = opts.divisor,
          divisor = _opts$divisor === void 0 ? this.divisor || 0 : _opts$divisor,
          instanced = opts.instanced,
          isInstanced = opts.isInstanced;
      this.size = size;
      this.offset = offset;
      this.stride = stride;
      this.normalized = normalized;
      this.integer = integer;
      this.divisor = divisor;

      if (isInstanced !== undefined) {
        __WEBPACK_IMPORTED_MODULE_3__utils__["a" /* log */].deprecated('Attribute.isInstanced');
        this.divisor = isInstanced ? 1 : 0;
      }

      if (instanced !== undefined) {
        __WEBPACK_IMPORTED_MODULE_3__utils__["a" /* log */].deprecated('Attribute.instanced');
        this.divisor = instanced ? 1 : 0;
      }
    }
  }, {
    key: "_validateAttributeDefinition",
    value: function _validateAttributeDefinition() {// Can be undefined for buffers (auto deduced from shaders)
      // or larger than 4 for uniform arrays
      // assert(
      //   this.size >= 1 && this.size <= 4,
      //   `Attribute definition for ${this.id} invalid size`
      // );
    }
  }]);

  return Attribute;
}();


//# sourceMappingURL=attribute.js.map

/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Group; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_toConsumableArray__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__object_3d__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_math_gl__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_assert__ = __webpack_require__(5);










var Group =
/*#__PURE__*/
function (_Object3D) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_inherits__["a" /* default */])(Group, _Object3D);

  function Group() {
    var _this;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Group);

    opts = Array.isArray(opts) ? {
      children: opts
    } : opts;
    var _opts = opts,
        _opts$children = _opts.children,
        children = _opts$children === void 0 ? [] : _opts$children;
    children.every(function (child) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_assert__["a" /* default */])(child instanceof __WEBPACK_IMPORTED_MODULE_6__object_3d__["a" /* default */]);
    });
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Group).call(this, opts));
    _this.children = children;
    return _this;
  } // Unpacks arrays and nested arrays of children


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__["a" /* default */])(Group, [{
    key: "add",
    value: function add() {
      for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {
        children[_key] = arguments[_key];
      }

      for (var _i = 0; _i < children.length; _i++) {
        var child = children[_i];

        if (Array.isArray(child)) {
          this.add.apply(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(child));
        } else {
          this.children.push(child);
        }
      }

      return this;
    }
  }, {
    key: "remove",
    value: function remove(child) {
      var children = this.children;
      var indexOf = children.indexOf(child);

      if (indexOf > -1) {
        children.splice(indexOf, 1);
      }

      return this;
    }
  }, {
    key: "removeAll",
    value: function removeAll() {
      this.children = [];
      return this;
    } // If visitor returns a truthy value, traversal will be aborted and that value
    // will be returned from `traverse`. Otherwise `traverse` will return null.

  }, {
    key: "traverse",
    value: function traverse(visitor) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$modelMatrix = _ref.modelMatrix,
          modelMatrix = _ref$modelMatrix === void 0 ? new __WEBPACK_IMPORTED_MODULE_7_math_gl__["a" /* Matrix4 */]() : _ref$modelMatrix;

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var child = _step.value;
          var matrix = child.matrix;
          modelMatrix = modelMatrix.multiplyRight(matrix);
          var result = void 0;

          if (child instanceof Group) {
            result = child.traverse(visitor, {
              modelMatrix: modelMatrix
            });
          } else {
            // child.setUniforms({modelMatrix});
            result = visitor(child, {});
          } // Abort if a result was returned


          if (result) {
            return result;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return null;
    } // If visitor returns a truthy value, traversal will be aborted and that value
    // will be returned from `traverseReverse`. Otherwise `traverseReverse` will return null.

  }, {
    key: "traverseReverse",
    value: function traverseReverse(visitor) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref2$modelMatrix = _ref2.modelMatrix,
          modelMatrix = _ref2$modelMatrix === void 0 ? new __WEBPACK_IMPORTED_MODULE_7_math_gl__["a" /* Matrix4 */]() : _ref2$modelMatrix;

      for (var i = this.children.length - 1; i >= 0; --i) {
        var child = this.children[i];
        var matrix = child.matrix;
        modelMatrix = modelMatrix.multiplyRight(matrix);
        var result = void 0;

        if (child instanceof Group) {
          result = child.traverseReverse(visitor, {
            modelMatrix: modelMatrix
          });
        } else {
          // child.setUniforms({modelMatrix});
          result = visitor(child, {});
        } // Abort if a result was returned


        if (result) {
          return result;
        }
      }

      return null;
    }
  }]);

  return Group;
}(__WEBPACK_IMPORTED_MODULE_6__object_3d__["a" /* default */]);


//# sourceMappingURL=group.js.map

/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = pickModels;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__group__ = __webpack_require__(110);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_assert__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_copy_and_blit__ = __webpack_require__(50);


/* global window */





function getDevicePixelRatio() {
  return typeof window !== 'undefined' ? window.devicePixelRatio : 1;
}

function pickModels(gl, props) {
  var models = props.models,
      position = props.position,
      _props$uniforms = props.uniforms,
      uniforms = _props$uniforms === void 0 ? {} : _props$uniforms,
      _props$parameters = props.parameters,
      parameters = _props$parameters === void 0 ? {} : _props$parameters,
      settings = props.settings,
      _props$useDevicePixel = props.useDevicePixels,
      useDevicePixels = _props$useDevicePixel === void 0 ? true : _props$useDevicePixel,
      framebuffer = props.framebuffer,
      context = props.context;
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl__["d" /* isWebGL */])(gl) && framebuffer && position);

  var _position = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(position, 2),
      x = _position[0],
      y = _position[1]; // Match our picking framebuffer with the size of the canvas drawing buffer


  framebuffer.resize({
    width: gl.canvas.width,
    height: gl.canvas.height
  }); // Compensate for devicePixelRatio
  // Note: this assumes the canvas framebuffer has been matched

  var dpr = useDevicePixels ? getDevicePixelRatio() : 1; // Reverse the y coordinate

  var deviceX = x * dpr;
  var deviceY = gl.canvas.height - y * dpr; // return withParameters(gl, {
  //   // framebuffer,
  //   // // We are only interested in one pixel, no need to render anything else
  //   // scissorTest: {x: deviceX, y: deviceY, w: 1, h: 1}
  // }, () => {

  var group = new __WEBPACK_IMPORTED_MODULE_2__group__["a" /* default */]({
    children: models
  });
  return group.traverseReverse(function (model) {
    if (model.pickable) {
      // Clear the frame buffer
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl__["e" /* clear */])(gl, {
        framebuffer: framebuffer,
        color: true,
        depth: true
      }); // Render picking colors

      /* eslint-disable camelcase */

      model.setUniforms({
        picking_uActive: 1
      });
      model.draw(Object.assign({}, props, {
        uniforms: uniforms,
        parameters: parameters,
        settings: settings,
        framebuffer: framebuffer,
        context: context
      }));
      model.setUniforms({
        picking_uActive: 0
      }); // Sample Read color in the central pixel, to be mapped as a picking color

      var color = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_copy_and_blit__["b" /* readPixelsToArray */])(framebuffer, {
        sourceX: deviceX,
        sourceY: deviceY,
        sourceWidth: 1,
        sourceHeight: 1,
        sourceFormat: 6408,
        sourceType: 5121
      });
      var isPicked = color[0] !== 0 || color[1] !== 0 || color[2] !== 0; // Add the information to the stack

      if (isPicked) {
        return {
          model: model,
          color: color,
          x: x,
          y: y,
          deviceX: deviceX,
          deviceY: deviceY
        };
      }
    }

    return null;
  }); // });
}
//# sourceMappingURL=pick-models.js.map

/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConeGeometry; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__truncated_cone_geometry__ = __webpack_require__(43);






var ConeGeometry =
/*#__PURE__*/
function (_TruncatedConeGeometr) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(ConeGeometry, _TruncatedConeGeometr);

  function ConeGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, ConeGeometry);

    var _opts$radius = opts.radius,
        radius = _opts$radius === void 0 ? 1 : _opts$radius,
        _opts$cap = opts.cap,
        cap = _opts$cap === void 0 ? true : _opts$cap;
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(ConeGeometry).call(this, Object.assign({}, opts, {
      topRadius: 0,
      topCap: Boolean(cap),
      bottomCap: Boolean(cap),
      bottomRadius: radius
    })));
  }

  return ConeGeometry;
}(__WEBPACK_IMPORTED_MODULE_4__truncated_cone_geometry__["a" /* default */]);


//# sourceMappingURL=cone-geometry.js.map

/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CubeGeometry; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geometry__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils__ = __webpack_require__(6);







var CubeGeometry =
/*#__PURE__*/
function (_Geometry) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(CubeGeometry, _Geometry);

  function CubeGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, CubeGeometry);

    var _opts$id = opts.id,
        id = _opts$id === void 0 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils__["b" /* uid */])('cube-geometry') : _opts$id;
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(CubeGeometry).call(this, Object.assign({}, opts, {
      id: id,
      attributes: getCubeAttributes()
    })));
  }

  return CubeGeometry;
}(__WEBPACK_IMPORTED_MODULE_4__geometry__["a" /* default */]);
/* eslint-disable no-multi-spaces, indent */



var CUBE_INDICES = new Uint16Array([0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23]);
var CUBE_POSITIONS = new Float32Array([-1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1]);
var CUBE_NORMALS = new Float32Array([// Front face
0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, // Back face
0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, // Top face
0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, // Bottom face
0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, // Right face
1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, // Left face
-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0]);
var CUBE_TEX_COORDS = new Float32Array([// Front face
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, // Back face
1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, // Top face
0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, // Bottom face
1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, // Right face
1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, // Left face
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0]);
/* eslint-enable no-multi-spaces, indent */

function getCubeAttributes() {
  return {
    indices: new Uint16Array(CUBE_INDICES),
    positions: new Float32Array(CUBE_POSITIONS),
    normals: new Float32Array(CUBE_NORMALS),
    texCoords: new Float32Array(CUBE_TEX_COORDS)
  };
}
//# sourceMappingURL=cube-geometry.js.map

/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CylinderGeometry; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__truncated_cone_geometry__ = __webpack_require__(43);






var CylinderGeometry =
/*#__PURE__*/
function (_TruncatedConeGeometr) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(CylinderGeometry, _TruncatedConeGeometr);

  function CylinderGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, CylinderGeometry);

    var _opts$radius = opts.radius,
        radius = _opts$radius === void 0 ? 1 : _opts$radius;
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(CylinderGeometry).call(this, Object.assign({}, opts, {
      bottomRadius: radius,
      topRadius: radius
    })));
  }

  return CylinderGeometry;
}(__WEBPACK_IMPORTED_MODULE_4__truncated_cone_geometry__["a" /* default */]);


//# sourceMappingURL=cylinder-geometry.js.map

/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IcoSphereGeometry; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geometry__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_math_gl__ = __webpack_require__(9);






/* eslint-disable comma-spacing, max-statements, complexity */

var ICO_POSITIONS = [-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0];
var ICO_INDICES = [3, 4, 5, 3, 5, 1, 3, 1, 0, 3, 0, 4, 4, 0, 2, 4, 2, 5, 2, 0, 1, 5, 2, 1];

var IcoSphereGeometry =
/*#__PURE__*/
function (_Geometry) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(IcoSphereGeometry, _Geometry);

  function IcoSphereGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, IcoSphereGeometry);

    var _opts$iterations = opts.iterations,
        iterations = _opts$iterations === void 0 ? 0 : _opts$iterations;
    var PI = Math.PI;
    var PI2 = PI * 2;
    var positions = ICO_POSITIONS.concat();
    var indices = ICO_INDICES.concat();
    positions.push();
    indices.push();

    var getMiddlePoint = function () {
      var pointMemo = {};
      return function (i1, i2) {
        i1 *= 3;
        i2 *= 3;
        var mini = i1 < i2 ? i1 : i2;
        var maxi = i1 > i2 ? i1 : i2;
        var key = "".concat(mini, "|").concat(maxi);

        if (key in pointMemo) {
          return pointMemo[key];
        }

        var x1 = positions[i1];
        var y1 = positions[i1 + 1];
        var z1 = positions[i1 + 2];
        var x2 = positions[i2];
        var y2 = positions[i2 + 1];
        var z2 = positions[i2 + 2];
        var xm = (x1 + x2) / 2;
        var ym = (y1 + y2) / 2;
        var zm = (z1 + z2) / 2;
        var len = Math.sqrt(xm * xm + ym * ym + zm * zm);
        xm /= len;
        ym /= len;
        zm /= len;
        positions.push(xm, ym, zm);
        return pointMemo[key] = positions.length / 3 - 1;
      };
    }();

    for (var i = 0; i < iterations; i++) {
      var indices2 = [];

      for (var j = 0; j < indices.length; j += 3) {
        var a = getMiddlePoint(indices[j + 0], indices[j + 1]);
        var b = getMiddlePoint(indices[j + 1], indices[j + 2]);
        var c = getMiddlePoint(indices[j + 2], indices[j + 0]);
        indices2.push(c, indices[j + 0], a, a, indices[j + 1], b, b, indices[j + 2], c, a, b, c);
      }

      indices = indices2;
    } // Calculate texCoords and normals


    var normals = new Array(indices.length * 3);
    var texCoords = new Array(indices.length * 2);
    var l = indices.length;

    for (var _i = l - 3; _i >= 0; _i -= 3) {
      var i1 = indices[_i + 0];
      var i2 = indices[_i + 1];
      var i3 = indices[_i + 2];
      var in1 = i1 * 3;
      var in2 = i2 * 3;
      var in3 = i3 * 3;
      var iu1 = i1 * 2;
      var iu2 = i2 * 2;
      var iu3 = i3 * 2;
      var x1 = positions[in1 + 0];
      var y1 = positions[in1 + 1];
      var z1 = positions[in1 + 2];
      var theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));
      var phi1 = Math.atan2(y1, x1) + PI;
      var v1 = theta1 / PI;
      var u1 = 1 - phi1 / PI2;
      var x2 = positions[in2 + 0];
      var y2 = positions[in2 + 1];
      var z2 = positions[in2 + 2];
      var theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));
      var phi2 = Math.atan2(y2, x2) + PI;
      var v2 = theta2 / PI;
      var u2 = 1 - phi2 / PI2;
      var x3 = positions[in3 + 0];
      var y3 = positions[in3 + 1];
      var z3 = positions[in3 + 2];
      var theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));
      var phi3 = Math.atan2(y3, x3) + PI;
      var v3 = theta3 / PI;
      var u3 = 1 - phi3 / PI2;
      var vec1 = [x3 - x2, y3 - y2, z3 - z2];
      var vec2 = [x1 - x2, y1 - y2, z1 - z2];
      var normal = new __WEBPACK_IMPORTED_MODULE_5_math_gl__["c" /* Vector3 */](vec1).cross(vec2).normalize();
      var newIndex = void 0;

      if ((u1 === 0 || u2 === 0 || u3 === 0) && (u1 === 0 || u1 > 0.5) && (u2 === 0 || u2 > 0.5) && (u3 === 0 || u3 > 0.5)) {
        positions.push(positions[in1 + 0], positions[in1 + 1], positions[in1 + 2]);
        newIndex = positions.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v1;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;
        positions.push(positions[in2 + 0], positions[in2 + 1], positions[in2 + 2]);
        newIndex = positions.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v2;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;
        positions.push(positions[in3 + 0], positions[in3 + 1], positions[in3 + 2]);
        newIndex = positions.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v3;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;
      }

      normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;
      normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;
      normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;
      texCoords[iu1 + 0] = u1;
      texCoords[iu1 + 1] = v1;
      texCoords[iu2 + 0] = u2;
      texCoords[iu2 + 1] = v2;
      texCoords[iu3 + 0] = u3;
      texCoords[iu3 + 1] = v3;
    }

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(IcoSphereGeometry).call(this, Object.assign({}, opts, {
      attributes: {
        positions: new Float32Array(positions),
        normals: new Float32Array(normals),
        texCoords: new Float32Array(texCoords),
        indices: new Uint16Array(indices)
      }
    })));
  }

  return IcoSphereGeometry;
}(__WEBPACK_IMPORTED_MODULE_4__geometry__["a" /* default */]);


//# sourceMappingURL=ico-sphere-geometry.js.map

/***/ }),
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PlaneGeometry; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geometry__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils__ = __webpack_require__(6);







var PlaneGeometry =
/*#__PURE__*/
function (_Geometry) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(PlaneGeometry, _Geometry);

  // Primitives inspired by TDL http://code.google.com/p/webglsamples/,
  // copyright 2011 Google Inc. new BSD License
  // (http://www.opensource.org/licenses/bsd-license.php).

  /* eslint-disable max-statements, complexity */

  /* eslint-disable complexity, max-statements */
  function PlaneGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, PlaneGeometry);

    var _opts$type = opts.type,
        type = _opts$type === void 0 ? 'x,y' : _opts$type,
        _opts$offset = opts.offset,
        offset = _opts$offset === void 0 ? 0 : _opts$offset,
        _opts$flipCull = opts.flipCull,
        flipCull = _opts$flipCull === void 0 ? false : _opts$flipCull,
        _opts$unpack = opts.unpack,
        unpack = _opts$unpack === void 0 ? false : _opts$unpack,
        _opts$id = opts.id,
        id = _opts$id === void 0 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils__["b" /* uid */])('plane-geometry') : _opts$id;
    var coords = type.split(','); // width, height

    var c1len = opts["".concat(coords[0], "len")];
    var c2len = opts["".concat(coords[1], "len")]; // subdivisionsWidth, subdivisionsDepth

    var subdivisions1 = opts["n".concat(coords[0])] || 1;
    var subdivisions2 = opts["n".concat(coords[1])] || 1;
    var numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);
    var positions = new Float32Array(numVertices * 3);
    var normals = new Float32Array(numVertices * 3);
    var texCoords = new Float32Array(numVertices * 2);

    if (flipCull) {
      c1len = -c1len;
    }

    var i2 = 0;
    var i3 = 0;

    for (var z = 0; z <= subdivisions2; z++) {
      for (var x = 0; x <= subdivisions1; x++) {
        var u = x / subdivisions1;
        var v = z / subdivisions2;
        texCoords[i2 + 0] = flipCull ? 1 - u : u;
        texCoords[i2 + 1] = v;

        switch (type) {
          case 'x,y':
            positions[i3 + 0] = c1len * u - c1len * 0.5;
            positions[i3 + 1] = c2len * v - c2len * 0.5;
            positions[i3 + 2] = offset;
            normals[i3 + 0] = 0;
            normals[i3 + 1] = 0;
            normals[i3 + 2] = flipCull ? 1 : -1;
            break;

          case 'x,z':
            positions[i3 + 0] = c1len * u - c1len * 0.5;
            positions[i3 + 1] = offset;
            positions[i3 + 2] = c2len * v - c2len * 0.5;
            normals[i3 + 0] = 0;
            normals[i3 + 1] = flipCull ? 1 : -1;
            normals[i3 + 2] = 0;
            break;

          case 'y,z':
            positions[i3 + 0] = offset;
            positions[i3 + 1] = c1len * u - c1len * 0.5;
            positions[i3 + 2] = c2len * v - c2len * 0.5;
            normals[i3 + 0] = flipCull ? 1 : -1;
            normals[i3 + 1] = 0;
            normals[i3 + 2] = 0;
            break;

          default:
            break;
        }

        i2 += 2;
        i3 += 3;
      }
    }

    var numVertsAcross = subdivisions1 + 1;
    var indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);

    for (var _z = 0; _z < subdivisions2; _z++) {
      for (var _x = 0; _x < subdivisions1; _x++) {
        var index = (_z * subdivisions1 + _x) * 6; // Make triangle 1 of quad.

        indices[index + 0] = (_z + 0) * numVertsAcross + _x;
        indices[index + 1] = (_z + 1) * numVertsAcross + _x;
        indices[index + 2] = (_z + 0) * numVertsAcross + _x + 1; // Make triangle 2 of quad.

        indices[index + 3] = (_z + 1) * numVertsAcross + _x;
        indices[index + 4] = (_z + 1) * numVertsAcross + _x + 1;
        indices[index + 5] = (_z + 0) * numVertsAcross + _x + 1;
      }
    } // Optionally, unpack indexed geometry


    if (unpack) {
      var positions2 = new Float32Array(indices.length * 3);
      var normals2 = new Float32Array(indices.length * 3);
      var texCoords2 = new Float32Array(indices.length * 2);

      for (var _x2 = 0; _x2 < indices.length; ++_x2) {
        var _index = indices[_x2];
        positions2[_x2 * 3 + 0] = positions[_index * 3 + 0];
        positions2[_x2 * 3 + 1] = positions[_index * 3 + 1];
        positions2[_x2 * 3 + 2] = positions[_index * 3 + 2];
        normals2[_x2 * 3 + 0] = normals[_index * 3 + 0];
        normals2[_x2 * 3 + 1] = normals[_index * 3 + 1];
        normals2[_x2 * 3 + 2] = normals[_index * 3 + 2];
        texCoords2[_x2 * 2 + 0] = texCoords[_index * 2 + 0];
        texCoords2[_x2 * 2 + 1] = texCoords[_index * 2 + 1];
      }

      positions = positions2;
      normals = normals2;
      texCoords = texCoords2;
      indices = undefined;
    }

    var attributes = {
      positions: positions,
      normals: normals,
      texCoords: texCoords
    };

    if (indices) {
      attributes.indices = indices;
    }

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(PlaneGeometry).call(this, Object.assign({}, opts, {
      attributes: attributes,
      id: id
    })));
  }

  return PlaneGeometry;
}(__WEBPACK_IMPORTED_MODULE_4__geometry__["a" /* default */]);


//# sourceMappingURL=plane-geometry.js.map

/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SphereGeometry; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geometry__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils__ = __webpack_require__(6);







var SphereGeometry =
/*#__PURE__*/
function (_Geometry) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(SphereGeometry, _Geometry);

  function SphereGeometry() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, SphereGeometry);

    var _opts$nlat = opts.nlat,
        nlat = _opts$nlat === void 0 ? 10 : _opts$nlat,
        _opts$nlong = opts.nlong,
        nlong = _opts$nlong === void 0 ? 10 : _opts$nlong,
        _opts$radius = opts.radius,
        radius = _opts$radius === void 0 ? 1 : _opts$radius,
        _opts$id = opts.id,
        id = _opts$id === void 0 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils__["b" /* uid */])('sphere-geometry') : _opts$id;
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(SphereGeometry).call(this, Object.assign({}, opts, {
      id: id,
      attributes: getSphereAttributes(nlat, nlong, radius)
    })));
  }

  return SphereGeometry;
}(__WEBPACK_IMPORTED_MODULE_4__geometry__["a" /* default */]); // Primitives inspired by TDL http://code.google.com/p/webglsamples/,
// copyright 2011 Google Inc. new BSD License
// (http://www.opensource.org/licenses/bsd-license.php).

/* eslint-disable max-statements, complexity */




function getSphereAttributes(nlat, nlong, radius) {
  var startLat = 0;
  var endLat = Math.PI;
  var latRange = endLat - startLat;
  var startLong = 0;
  var endLong = 2 * Math.PI;
  var longRange = endLong - startLong;
  var numVertices = (nlat + 1) * (nlong + 1);

  if (typeof radius === 'number') {
    var value = radius;

    radius = function radius(n1, n2, n3, u, v) {
      return value;
    };
  }

  var positions = new Float32Array(numVertices * 3);
  var normals = new Float32Array(numVertices * 3);
  var texCoords = new Float32Array(numVertices * 2);
  var indices = new Uint16Array(nlat * nlong * 6); // Create positions, normals and texCoords

  for (var y = 0; y <= nlat; y++) {
    for (var x = 0; x <= nlong; x++) {
      var u = x / nlong;
      var v = y / nlat;
      var index = x + y * (nlong + 1);
      var i2 = index * 2;
      var i3 = index * 3;
      var theta = longRange * u;
      var phi = latRange * v;
      var sinTheta = Math.sin(theta);
      var cosTheta = Math.cos(theta);
      var sinPhi = Math.sin(phi);
      var cosPhi = Math.cos(phi);
      var ux = cosTheta * sinPhi;
      var uy = cosPhi;
      var uz = sinTheta * sinPhi;
      var r = radius(ux, uy, uz, u, v);
      positions[i3 + 0] = r * ux;
      positions[i3 + 1] = r * uy;
      positions[i3 + 2] = r * uz;
      normals[i3 + 0] = ux;
      normals[i3 + 1] = uy;
      normals[i3 + 2] = uz;
      texCoords[i2 + 0] = u;
      texCoords[i2 + 1] = v;
    }
  } // Create indices


  var numVertsAround = nlat + 1;

  for (var _x = 0; _x < nlat; _x++) {
    for (var _y = 0; _y < nlong; _y++) {
      var _index = (_x * nlong + _y) * 6;

      indices[_index + 0] = _y * numVertsAround + _x;
      indices[_index + 1] = _y * numVertsAround + _x + 1;
      indices[_index + 2] = (_y + 1) * numVertsAround + _x;
      indices[_index + 3] = (_y + 1) * numVertsAround + _x;
      indices[_index + 4] = _y * numVertsAround + _x + 1;
      indices[_index + 5] = (_y + 1) * numVertsAround + _x + 1;
    }
  }

  return {
    positions: positions,
    indices: indices,
    normals: normals,
    texCoords: texCoords
  };
}
//# sourceMappingURL=sphere-geometry.js.map

/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_is_browser__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_globals__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_log__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl1__ = __webpack_require__(281);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "global", function() { return __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a"]; });


 // TODO - when webgl2 gets ubiquitous, remove default support for webgl1 by dropping next line

 // Version detection using babel plugin

/* global __VERSION__ */

var VERSION =  true ? "7.0.0-alpha.7" : 'untranspiled source';
var STARTUP_MESSAGE = 'set luma.log.priority=1 (or higher) to trace rendering'; // Assign luma.log.priority in console to control logging: \
// 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs
// luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;

if (__WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].luma && __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].luma.VERSION !== VERSION) {
  throw new Error("luma.gl - multiple VERSIONs detected: ".concat(__WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].luma.VERSION, " vs ").concat(VERSION));
}

if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].luma) {
  if (__WEBPACK_IMPORTED_MODULE_0__utils_is_browser__["a" /* default */]) {
    __WEBPACK_IMPORTED_MODULE_2__utils_log__["a" /* default */].log(0, "luma.gl ".concat(VERSION, " - ").concat(STARTUP_MESSAGE))();
  }

  __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].luma = __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].luma || {
    VERSION: VERSION,
    version: VERSION,
    log: __WEBPACK_IMPORTED_MODULE_2__utils_log__["a" /* default */],
    // A global stats object that various components can add information to
    // E.g. see webgl/resource.js
    stats: {},
    // Keep some luma globals in a sub-object
    // This allows us to dynamically detect if certain modules have been
    // included (such as IO and headless) and enable related functionality,
    // without unconditionally requiring and thus bundling big dependencies
    // into the app.
    globals: {
      modules: {},
      nodeIO: {}
    }
  };
}


/* harmony default export */ __webpack_exports__["default"] = (__WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].luma);
//# sourceMappingURL=init.js.map

/***/ }),
/* 119 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export setPathPrefix */
/* harmony export (immutable) */ __webpack_exports__["a"] = loadFile;
/* harmony export (immutable) */ __webpack_exports__["b"] = loadImage;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__browser_request_file__ = __webpack_require__(250);

var pathPrefix = '';
/*
 * Set a relative path prefix
 */

function setPathPrefix(prefix) {
  pathPrefix = prefix;
}
function loadFile(url, opts) {
  if (typeof url !== 'string' && !opts) {
    // TODO - warn for deprecated mode
    opts = url;
    url = opts.url;
  }

  opts.url = pathPrefix ? pathPrefix + url : url;
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__browser_request_file__["a" /* requestFile */])(opts);
}
/* global Image, Blob, URL, createImageBitmap, location */

/*
 * Loads images asynchronously
 * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'
 * returns a promise tracking the load
 */

function loadImage(url, opts) {
  url = pathPrefix ? pathPrefix + url : url;

  if (typeof Image === 'undefined') {
    // In a web worker
    // XMLHttpRequest throws invalid URL error if using relative path
    // resolve url relative to original base
    url = new URL(url, location.pathname).href;
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__browser_request_file__["a" /* requestFile */])({
      url: url,
      responseType: 'arraybuffer'
    }).then(function (arraybuffer) {
      var blob = new Blob([new Uint8Array(arraybuffer)]);
      return createImageBitmap(blob);
    });
  }

  return new Promise(function (resolve, reject) {
    try {
      var image = new Image();

      image.onload = function () {
        return resolve(image);
      };

      image.onerror = function () {
        return reject(new Error("Could not load image ".concat(url, ".")));
      };

      image.crossOrigin = opts && opts.crossOrigin || 'anonymous';
      image.src = url;
    } catch (error) {
      reject(error);
    }
  });
}
//# sourceMappingURL=browser-load.js.map

/***/ }),
/* 120 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export loadTexture */
/* unused harmony export loadFiles */
/* unused harmony export loadImages */
/* harmony export (immutable) */ __webpack_exports__["a"] = loadTextures;
/* unused harmony export loadProgram */
/* unused harmony export loadModel */
/* unused harmony export parseModel */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_assert__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__browser_load__ = __webpack_require__(119);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__geometry__ = __webpack_require__(16);


/* eslint-disable guard-for-in, complexity, no-try-catch */






function noop() {}

function loadTexture(gl, url) {
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var urls = opts.urls,
      _opts$onProgress = opts.onProgress,
      onProgress = _opts$onProgress === void 0 ? noop : _opts$onProgress;
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils_assert__["a" /* default */])(typeof url === 'string', 'loadTexture: url must be string');
  return loadImages(Object.assign({
    urls: urls,
    onProgress: onProgress
  }, opts)).then(function (images) {
    return images.map(function (img, i) {
      return new __WEBPACK_IMPORTED_MODULE_3__webgl__["a" /* Texture2D */](gl, Object.assign({
        id: urls[i]
      }, opts, {
        data: img
      }));
    });
  });
}
/*
 * Loads (Requests) multiple files asynchronously
 */

function loadFiles() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var urls = opts.urls,
      _opts$onProgress2 = opts.onProgress,
      onProgress = _opts$onProgress2 === void 0 ? noop : _opts$onProgress2;
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils_assert__["a" /* default */])(urls.every(function (url) {
    return typeof url === 'string';
  }), 'loadImages: {urls} must be array of strings');
  var count = 0;
  return Promise.all(urls.map(function (url) {
    var promise = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__browser_load__["a" /* loadFile */])(Object.assign({
      url: url
    }, opts));
    promise.then(function (file) {
      return onProgress({
        progress: ++count / urls.length,
        count: count,
        total: urls.length,
        url: url
      });
    });
    return promise;
  }));
}
/*
 * Loads (requests) multiple images asynchronously
 */

function loadImages() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var urls = opts.urls,
      _opts$onProgress3 = opts.onProgress,
      onProgress = _opts$onProgress3 === void 0 ? noop : _opts$onProgress3;
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils_assert__["a" /* default */])(urls.every(function (url) {
    return typeof url === 'string';
  }), 'loadImages: {urls} must be array of strings');
  var count = 0;
  return Promise.all(urls.map(function (url) {
    var promise = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__browser_load__["b" /* loadImage */])(url, opts);
    promise.then(function (file) {
      return onProgress({
        progress: ++count / urls.length,
        count: count,
        total: urls.length,
        url: url
      });
    });
    return promise;
  }));
}
function loadTextures(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var urls = opts.urls,
      _opts$onProgress4 = opts.onProgress,
      onProgress = _opts$onProgress4 === void 0 ? noop : _opts$onProgress4;
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils_assert__["a" /* default */])(urls.every(function (url) {
    return typeof url === 'string';
  }), 'loadTextures: {urls} must be array of strings');
  return loadImages(Object.assign({
    urls: urls,
    onProgress: onProgress
  }, opts)).then(function (images) {
    return images.map(function (img, i) {
      return new __WEBPACK_IMPORTED_MODULE_3__webgl__["a" /* Texture2D */](gl, Object.assign({
        id: urls[i]
      }, opts, {
        data: img
      }));
    });
  });
}
function loadProgram(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var vs = opts.vs,
      fs = opts.fs,
      _opts$onProgress5 = opts.onProgress,
      onProgress = _opts$onProgress5 === void 0 ? noop : _opts$onProgress5;
  return loadFiles(Object.assign({
    urls: [vs, fs],
    onProgress: onProgress
  }, opts)).then(function (_ref) {
    var _ref2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(_ref, 2),
        vsText = _ref2[0],
        fsText = _ref2[1];

    return new __WEBPACK_IMPORTED_MODULE_3__webgl__["b" /* Program */](gl, Object.assign({
      vs: vsText,
      fs: fsText
    }, opts));
  });
} // Loads a simple JSON format

function loadModel(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var url = opts.url,
      _opts$onProgress6 = opts.onProgress,
      onProgress = _opts$onProgress6 === void 0 ? noop : _opts$onProgress6;
  return loadFiles(Object.assign({
    urls: [url],
    onProgress: onProgress
  }, opts)).then(function (_ref3) {
    var _ref4 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(_ref3, 1),
        file = _ref4[0];

    return parseModel(gl, Object.assign({
      file: file
    }, opts));
  });
}
function parseModel(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var file = opts.file,
      _opts$program = opts.program,
      program = _opts$program === void 0 ? new __WEBPACK_IMPORTED_MODULE_3__webgl__["b" /* Program */](gl) : _opts$program;
  var json = typeof file === 'string' ? parseJSON(file) : file; // Remove any attributes so that we can create a geometry
  // TODO - change format to put these in geometry sub object?

  var attributes = {};
  var modelOptions = {};

  for (var key in json) {
    var value = json[key];

    if (Array.isArray(value)) {
      attributes[key] = key === 'indices' ? new Uint16Array(value) : new Float32Array(value);
    } else {
      modelOptions[key] = value;
    }
  }

  return new __WEBPACK_IMPORTED_MODULE_4__core__["a" /* Model */](gl, Object.assign({
    program: program,
    geometry: new __WEBPACK_IMPORTED_MODULE_5__geometry__["a" /* Geometry */]({
      attributes: attributes
    })
  }, modelOptions, opts));
}

function parseJSON(file) {
  try {
    return JSON.parse(file);
  } catch (error) {
    throw new Error("Failed to parse JSON: ".concat(error));
  }
}
//# sourceMappingURL=load-files.js.map

/***/ }),
/* 121 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geometry__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core__ = __webpack_require__(21);







var Cone =
/*#__PURE__*/
function (_Model) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(Cone, _Model);

  function Cone(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Cone);

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Cone).call(this, gl, Object.assign({}, opts, {
      geometry: new __WEBPACK_IMPORTED_MODULE_4__geometry__["h" /* ConeGeometry */](opts)
    })));
  }

  return Cone;
}(__WEBPACK_IMPORTED_MODULE_5__core__["a" /* Model */]);


//# sourceMappingURL=cone.js.map

/***/ }),
/* 122 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geometry__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(6);








var Cube =
/*#__PURE__*/
function (_Model) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(Cube, _Model);

  function Cube(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Cube);

    var _opts$id = opts.id,
        id = _opts$id === void 0 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils__["b" /* uid */])('cube') : _opts$id;
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Cube).call(this, gl, Object.assign({}, opts, {
      id: id,
      geometry: new __WEBPACK_IMPORTED_MODULE_4__geometry__["g" /* CubeGeometry */](opts)
    })));
  }

  return Cube;
}(__WEBPACK_IMPORTED_MODULE_5__core__["a" /* Model */]);


//# sourceMappingURL=cube.js.map

/***/ }),
/* 123 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geometry__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_model__ = __webpack_require__(36);







var Cylinder =
/*#__PURE__*/
function (_Model) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(Cylinder, _Model);

  function Cylinder(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Cylinder);

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Cylinder).call(this, gl, Object.assign({}, opts, {
      geometry: new __WEBPACK_IMPORTED_MODULE_4__geometry__["f" /* CylinderGeometry */](opts)
    })));
  }

  return Cylinder;
}(__WEBPACK_IMPORTED_MODULE_5__core_model__["a" /* default */]);


//# sourceMappingURL=cylinder.js.map

/***/ }),
/* 124 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__geometry__ = __webpack_require__(16);







var IcoSphere =
/*#__PURE__*/
function (_Model) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(IcoSphere, _Model);

  function IcoSphere(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, IcoSphere);

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(IcoSphere).call(this, gl, Object.assign({}, opts, {
      geometry: new __WEBPACK_IMPORTED_MODULE_5__geometry__["e" /* IcoSphereGeometry */](opts)
    })));
  }

  return IcoSphere;
}(__WEBPACK_IMPORTED_MODULE_4__core__["a" /* Model */]);


//# sourceMappingURL=ico-sphere.js.map

/***/ }),
/* 125 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__cone__ = __webpack_require__(121);
/* unused harmony reexport Cone */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__cube__ = __webpack_require__(122);
/* unused harmony reexport Cube */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cylinder__ = __webpack_require__(123);
/* unused harmony reexport Cylinder */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ico_sphere__ = __webpack_require__(124);
/* unused harmony reexport IcoSphere */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__plane__ = __webpack_require__(126);
/* unused harmony reexport Plane */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__sphere__ = __webpack_require__(127);
/* unused harmony reexport Sphere */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__truncated_cone__ = __webpack_require__(128);
/* unused harmony reexport TruncatedCone */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__clip_space__ = __webpack_require__(44);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_7__clip_space__["a"]; });
// Geometry primitive models






 // GPGPU models


//# sourceMappingURL=index.js.map

/***/ }),
/* 126 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geometry__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_model__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(6);








var Plane =
/*#__PURE__*/
function (_Model) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(Plane, _Model);

  function Plane(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Plane);

    var _opts$id = opts.id,
        id = _opts$id === void 0 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils__["b" /* uid */])('plane') : _opts$id;
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Plane).call(this, gl, Object.assign({}, opts, {
      id: id,
      geometry: new __WEBPACK_IMPORTED_MODULE_4__geometry__["d" /* PlaneGeometry */](opts)
    })));
  }

  return Plane;
}(__WEBPACK_IMPORTED_MODULE_5__core_model__["a" /* default */]);


//# sourceMappingURL=plane.js.map

/***/ }),
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__core__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__geometry__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils__ = __webpack_require__(6);








var Sphere =
/*#__PURE__*/
function (_Model) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(Sphere, _Model);

  function Sphere(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Sphere);

    var _opts$id = opts.id,
        id = _opts$id === void 0 ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils__["b" /* uid */])('sphere') : _opts$id;
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Sphere).call(this, gl, Object.assign({}, opts, {
      id: id,
      geometry: new __WEBPACK_IMPORTED_MODULE_5__geometry__["c" /* SphereGeometry */](opts)
    })));
  }

  return Sphere;
}(__WEBPACK_IMPORTED_MODULE_4__core__["a" /* Model */]);


//# sourceMappingURL=sphere.js.map

/***/ }),
/* 128 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__geometry__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core__ = __webpack_require__(21);







var TruncatedCone =
/*#__PURE__*/
function (_Model) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(TruncatedCone, _Model);

  function TruncatedCone(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, TruncatedCone);

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(TruncatedCone).call(this, gl, Object.assign({}, opts, {
      geometry: new __WEBPACK_IMPORTED_MODULE_4__geometry__["b" /* TruncatedConeGeometry */](opts)
    })));
  }

  return TruncatedCone;
}(__WEBPACK_IMPORTED_MODULE_5__core__["a" /* Model */]);


//# sourceMappingURL=truncated-cone.js.map

/***/ }),
/* 129 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RenderState; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl__ = __webpack_require__(25);


//
// Render state helper class for the multi pass system
//
// Attribution: This class and the multipass system were inspired by
// the THREE.js EffectComposer and *Pass classes


var RenderState =
/*#__PURE__*/
function () {
  function RenderState(gl) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, RenderState);

    this.gl = gl;
    this.framebuffer1 = new __WEBPACK_IMPORTED_MODULE_2__webgl__["c" /* Framebuffer */](gl, {
      id: 'multi-pass-1',
      stencil: true
    });
    this.framebuffer2 = new __WEBPACK_IMPORTED_MODULE_2__webgl__["c" /* Framebuffer */](gl, {
      id: 'multi-pass-2',
      stencil: true
    });
    this.reset();
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(RenderState, [{
    key: "reset",
    value: function reset() {
      this.framebuffer1.resize();
      this.framebuffer2.resize();
      this.writeBuffer = this.framebuffer1;
      this.readBuffer = this.framebuffer2;
      this.maskActive = false;
    }
  }, {
    key: "_swapFramebuffers",
    value: function _swapFramebuffers() {
      var tmp = this.readBuffer;
      this.readBuffer = this.writeBuffer;
      this.writeBuffer = tmp;
    }
  }]);

  return RenderState;
}();


//# sourceMappingURL=render-state.js.map

/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ShaderModulePass; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__pass__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__composite_pass__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__models_clip_space__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__luma_gl_shadertools__ = __webpack_require__(29);





//
// A pass that renders a given texture into screen space
//





var ShaderModuleSinglePass =
/*#__PURE__*/
function (_Pass) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(ShaderModuleSinglePass, _Pass);

  function ShaderModuleSinglePass(gl) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, ShaderModuleSinglePass);

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(ShaderModuleSinglePass).call(this, gl, Object.assign({
      swap: true
    }, props)));
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(ShaderModuleSinglePass, [{
    key: "_renderPass",
    value: function _renderPass(_ref) {
      var inputBuffer = _ref.inputBuffer,
          swapBuffers = _ref.swapBuffers;
      this.props.model.setUniforms(this.props); // swapBuffers();

      this.props.model.draw({
        uniforms: {
          texture: inputBuffer,
          texSize: [inputBuffer.width, inputBuffer.height]
        },
        parameters: {
          depthWrite: false,
          depthTest: false
        }
      });
    }
  }]);

  return ShaderModuleSinglePass;
}(__WEBPACK_IMPORTED_MODULE_5__pass__["a" /* default */]);

var ShaderModulePass =
/*#__PURE__*/
function (_CompositePass) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(ShaderModulePass, _CompositePass);

  function ShaderModulePass(gl, module) {
    var _this;

    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, ShaderModulePass);

    var id = "".concat(module.name, "-pass");
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__luma_gl_shadertools__["a" /* normalizeShaderModule */])(module);
    var passes = normalizePasses(gl, module, id, props);
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(ShaderModulePass).call(this, gl, Object.assign({
      id: id,
      passes: passes
    }, props)));
    _this.module = module;
    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(ShaderModulePass, [{
    key: "_renderPass",
    value: function _renderPass(_ref2) {
      var inputBuffer = _ref2.inputBuffer,
          swapBuffers = _ref2.swapBuffers;
      var first = true;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.module.passes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pass = _step.value;

          if (!first) {
            swapBuffers();
          }

          first = false;

          if (pass.uniforms) {
            pass.model.setUniforms(pass.uniforms);
          } // swapBuffers();


          pass.model.draw({
            uniforms: {
              texture: inputBuffer,
              texSize: [inputBuffer.width, inputBuffer.height]
            },
            parameters: {
              depthWrite: false,
              depthTest: false
            }
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }]);

  return ShaderModulePass;
}(__WEBPACK_IMPORTED_MODULE_6__composite_pass__["a" /* default */]);



function normalizePasses(gl, module, id, props) {
  if (module.filter || module.sampler) {
    var fs = getFragmentShaderForRenderPass(module);
    var pass = new ShaderModuleSinglePass(gl, {
      id: id,
      model: getModel(gl, module, fs, id, props),
      uniforms: null
    });
    return [pass];
  }

  var passes = module.passes || [];
  return passes.map(function (pass) {
    var fs = getFragmentShaderForRenderPass(module, pass);
    var idn = "".concat(id, "-").concat(passes.length + 1);
    return new ShaderModuleSinglePass(gl, Object.assign({
      id: idn,
      model: getModel(gl, module, fs, idn, props),
      uniforms: pass.uniforms
    }, props));
  });
}

function getModel(gl, module, fs, id, props) {
  var model = new __WEBPACK_IMPORTED_MODULE_7__models_clip_space__["a" /* default */](gl, {
    id: id,
    fs: fs,
    modules: [module]
  });
  var uniforms = Object.assign(module.getUniforms(), module.getUniforms(props));
  model.setUniforms(uniforms);
  return model;
}

var FILTER_FS_TEMPLATE = function FILTER_FS_TEMPLATE(func) {
  return "uniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = texture2D(texture, texCoord);\n  gl_FragColor = ".concat(func, "(gl_FragColor, texSize, texCoord);\n}\n");
};

var SAMPLER_FS_TEMPLATE = function SAMPLER_FS_TEMPLATE(func) {
  return "uniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = ".concat(func, "(texture, texSize, texCoord);\n}\n");
};

function getFragmentShaderForRenderPass(module) {
  var pass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : module;

  if (pass.filter) {
    var func = typeof pass.filter === 'string' ? pass.filter : "".concat(module.name, "_filterColor");
    return FILTER_FS_TEMPLATE(func);
  }

  if (pass.sampler) {
    var _func = typeof pass.sampler === 'string' ? pass.sampler : "".concat(module.name, "_sampleColor");

    return SAMPLER_FS_TEMPLATE(_func);
  } // console.error(`${module.name} no fragment shader generated`);


  return null;
}
//# sourceMappingURL=shader-module-pass.js.map

/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createBrowserContext;
/**
 * Create a WebGL context for a canvas
 * Note calling this multiple time on the same canvas does return the same context
 */
function createBrowserContext(_ref) {
  var canvas = _ref.canvas,
      _ref$opts = _ref.opts,
      opts = _ref$opts === void 0 ? {} : _ref$opts,
      _ref$onError = _ref.onError,
      onError = _ref$onError === void 0 ? function (message) {
    return null;
  } : _ref$onError;

  // Try to extract any extra information about why context creation failed
  function onContextCreationError(error) {
    onError("WebGL context: ".concat(error.statusMessage || 'Unknown error'));
  }

  canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
  var _opts$webgl = opts.webgl1,
      webgl1 = _opts$webgl === void 0 ? true : _opts$webgl,
      _opts$webgl2 = opts.webgl2,
      webgl2 = _opts$webgl2 === void 0 ? true : _opts$webgl2;
  var gl = null; // Prefer webgl2 over webgl1, prefer conformant over experimental

  if (webgl2) {
    gl = gl || canvas.getContext('webgl2', opts);
    gl = gl || canvas.getContext('experimental-webgl2', opts);
  }

  if (webgl1) {
    gl = gl || canvas.getContext('webgl', opts);
    gl = gl || canvas.getContext('experimental-webgl', opts);
  }

  canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);

  if (!gl) {
    return onError("Failed to create ".concat(webgl2 && !webgl1 ? 'WebGL2' : 'WebGL', " context"));
  }

  return gl;
}
//# sourceMappingURL=create-browser-context.js.map

/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = getPageLoadPromise;
/* unused harmony export createCanvas */
/* harmony export (immutable) */ __webpack_exports__["a"] = getCanvas;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(6);
// Resizing a webgl canvas

/* global window, document */

var isPage = __WEBPACK_IMPORTED_MODULE_0__utils__["h" /* isBrowser */] && typeof document !== 'undefined';
var isPageLoaded = isPage && document.readyState === 'complete';
var pageLoadPromise;
/**
 * Returns a promise that resolves when the page is loaded
 * at this point the DOM can be manipulated, and e.g. a new canvas can be inserted
 * @return {Promise} - resolves when the page is loaded
 */

function getPageLoadPromise() {
  if (!pageLoadPromise) {
    pageLoadPromise = isPage ? new Promise(function (resolve, reject) {
      if (isPage && document.readyState === 'complete') {
        isPageLoaded = true;
        resolve(document);
        return;
      }

      window.onload = function () {
        isPageLoaded = true;
        resolve(document);
      };
    }) : Promise.resolve({});
  }

  return pageLoadPromise;
}
/**
 * Create a canvas
 * @param {Number} width - set to 100%
 * @param {Number} height - set to 100%
 */

function createCanvas(_ref) {
  var _ref$width = _ref.width,
      width = _ref$width === void 0 ? 800 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 600 : _ref$height,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? 'gl-canvas' : _ref$id,
      _ref$insert = _ref.insert,
      insert = _ref$insert === void 0 ? true : _ref$insert;
  var canvas = document.createElement('canvas');
  canvas.id = id;
  canvas.style.width = Number.isFinite(width) ? "".concat(width, "px") : '100%';
  canvas.style.height = Number.isFinite(height) ? "".concat(height, "px") : '100%'; // add the canvas to the body element once the page has loaded

  if (insert) {
    var body = document.body;
    body.insertBefore(canvas, body.firstChild); // getPageLoadPromise().then(document => {});
  }

  return canvas;
}
function getCanvas(_ref2) {
  var canvas = _ref2.canvas,
      width = _ref2.width,
      height = _ref2.height,
      _ref2$onError = _ref2.onError,
      onError = _ref2$onError === void 0 ? function () {} : _ref2$onError;
  var targetCanvas;

  if (typeof canvas === 'string') {
    if (!isPageLoaded) {
      onError("createGLContext called on canvas '".concat(canvas, "' before page was loaded"));
    }

    targetCanvas = document.getElementById(canvas);
  } else if (canvas) {
    targetCanvas = canvas;
  } else {
    targetCanvas = createCanvas({
      id: 'lumagl-canvas',
      width: width,
      height: height,
      onError: onError
    });
  }

  return targetCanvas;
}
//# sourceMappingURL=create-canvas.js.map

/***/ }),
/* 133 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createHeadlessContext;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_utils_webgl_types__ = __webpack_require__(64);

var ERR_HEADLESSGL_NOT_AVAILABLE = 'Failed to create WebGL context in Node.js, headless gl not available';
var ERR_HEADLESSGL_FAILED = 'Failed to create WebGL context in Node.js, headless gl returned null'; // Create headless gl context (for running under Node.js)

function createHeadlessContext(_ref) {
  var width = _ref.width,
      height = _ref.height,
      opts = _ref.opts,
      onError = _ref.onError;
  var webgl1 = opts.webgl1,
      webgl2 = opts.webgl2;

  if (webgl2 && !webgl1) {
    return onError('headless-gl does not support WebGL2');
  }

  if (!__WEBPACK_IMPORTED_MODULE_0__webgl_utils_webgl_types__["d" /* headlessGL */]) {
    return onError(ERR_HEADLESSGL_NOT_AVAILABLE);
  }

  var gl = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__webgl_utils_webgl_types__["d" /* headlessGL */])(width, height, opts);

  if (!gl) {
    return onError(ERR_HEADLESSGL_FAILED);
  }

  return gl;
}
//# sourceMappingURL=create-headless-context.js.map

/***/ }),
/* 134 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return GL_PARAMETER_DEFAULTS; });
/* unused harmony export GL_PARAMETER_SETTERS */
/* unused harmony export GL_PARAMETER_GETTERS */
/* unused harmony export setParameter */
/* harmony export (immutable) */ __webpack_exports__["a"] = setParameters;
/* unused harmony export getParameter */
/* harmony export (immutable) */ __webpack_exports__["b"] = getParameters;
/* unused harmony export getDefaultParameters */
/* harmony export (immutable) */ __webpack_exports__["d"] = resetParameters;
/* unused harmony export getModifiedParameters */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_toConsumableArray__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_assert__ = __webpack_require__(5);



var _GL_PARAMETER_DEFAULT, _GL_PARAMETER_SETTERS, _GL_PARAMETER_GETTERS;

// Provides a unified API for getting and setting any WebGL parameter
// Also knows default values of all parameters, enabling fast cache initialization
// Provides base functionality for the state caching.

 // DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS

var GL_PARAMETER_DEFAULTS = (_GL_PARAMETER_DEFAULT = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3042, false), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32773, new Float32Array([0, 0, 0, 0])), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32777, 32774), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 34877, 32774), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32969, 1), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32968, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32971, 1), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32970, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3106, new Float32Array([0, 0, 0, 0])), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3107, [true, true, true, true]), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2884, false), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2885, 1029), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2929, false), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2931, 1), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2932, 513), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2928, new Float32Array([0, 1])), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2930, true), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3024, true), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 36006, null), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2886, 2305), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 33170, 4352), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2849, 1), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32823, false), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32824, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 10752, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32938, 1.0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32939, false), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3089, false), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3088, new Int32Array([0, 0, 1024, 1024])), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2960, false), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2961, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2968, 0xffffffff), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 36005, 0xffffffff), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2962, 519), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2967, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2963, 0xffffffff), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 34816, 519), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 36003, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 36004, 0xffffffff), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2964, 7680), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2965, 7680), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2966, 7680), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 34817, 7680), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 34818, 7680), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 34819, 7680), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 2978, new Int32Array([0, 0, 1024, 1024])), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3333, 4), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3317, 4), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 37440, false), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 37441, false), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 37443, 37444), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 35723, 4352), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 36010, null), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 35977, false), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3330, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3332, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3331, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3314, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32878, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3316, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 3315, 0), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_DEFAULT, 32877, 0), _GL_PARAMETER_DEFAULT); // SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API

var enable = function enable(gl, value, key) {
  return value ? gl.enable(key) : gl.disable(key);
};

var hint = function hint(gl, value, key) {
  return gl.hint(key, value);
};

var pixelStorei = function pixelStorei(gl, value, key) {
  return gl.pixelStorei(key, value);
};

var drawFramebuffer = function drawFramebuffer(gl, value) {
  var target = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_utils__["b" /* isWebGL2 */])(gl) ? 36009 : 36160;
  return gl.bindFramebuffer(target, value);
};

var readFramebuffer = function readFramebuffer(gl, value) {
  return gl.bindFramebuffer(36008, value);
}; // Map from WebGL parameter names to corresponding WebGL setter functions
// WegGL constants are read by parameter names, but set by function names
// NOTE: When value type is a string, it will be handled by 'COMPOSITE_GL_PARAMETER_SETTERS'


var GL_PARAMETER_SETTERS = (_GL_PARAMETER_SETTERS = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3042, enable), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32773, function (gl, value) {
  return gl.blendColor.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32777, 'blendEquation'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 34877, 'blendEquation'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32969, 'blendFunc'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32968, 'blendFunc'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32971, 'blendFunc'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32970, 'blendFunc'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3106, function (gl, value) {
  return gl.clearColor.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3107, function (gl, value) {
  return gl.colorMask.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2884, enable), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2885, function (gl, value) {
  return gl.cullFace(value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2929, enable), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2931, function (gl, value) {
  return gl.clearDepth(value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2932, function (gl, value) {
  return gl.depthFunc(value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2928, function (gl, value) {
  return gl.depthRange.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2930, function (gl, value) {
  return gl.depthMask(value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3024, enable), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 35723, hint), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 36006, drawFramebuffer), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2886, function (gl, value) {
  return gl.frontFace(value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 33170, hint), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2849, function (gl, value) {
  return gl.lineWidth(value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32823, enable), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32824, 'polygonOffset'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 10752, 'polygonOffset'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 35977, enable), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32938, 'sampleCoverage'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32939, 'sampleCoverage'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3089, enable), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3088, function (gl, value) {
  return gl.scissor.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2960, enable), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2961, function (gl, value) {
  return gl.clearStencil(value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2968, function (gl, value) {
  return gl.stencilMaskSeparate(1028, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 36005, function (gl, value) {
  return gl.stencilMaskSeparate(1029, value);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2962, 'stencilFuncFront'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2967, 'stencilFuncFront'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2963, 'stencilFuncFront'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 34816, 'stencilFuncBack'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 36003, 'stencilFuncBack'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 36004, 'stencilFuncBack'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2964, 'stencilOpFront'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2965, 'stencilOpFront'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2966, 'stencilOpFront'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 34817, 'stencilOpBack'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 34818, 'stencilOpBack'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 34819, 'stencilOpBack'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 2978, function (gl, value) {
  return gl.viewport.apply(gl, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(value));
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3333, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3317, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 37440, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 37441, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 37443, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3330, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3332, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3331, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 36010, readFramebuffer), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3314, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32878, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3316, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 3315, pixelStorei), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_SETTERS, 32877, pixelStorei), _GL_PARAMETER_SETTERS); // COMPOSITE_WEBGL_PARAMETER_

var COMPOSITE_GL_PARAMETER_SETTERS = {
  blendEquation: function blendEquation(gl, values) {
    return gl.blendEquationSeparate(values[32777], values[34877]);
  },
  blendFunc: function blendFunc(gl, values) {
    return gl.blendFuncSeparate(values[32969], values[32968], values[32971], values[32970]);
  },
  polygonOffset: function polygonOffset(gl, values) {
    return gl.polygonOffset(values[32824], values[10752]);
  },
  sampleCoverage: function sampleCoverage(gl, values) {
    return gl.sampleCoverage(values[32938], values[32939]);
  },
  stencilFuncFront: function stencilFuncFront(gl, values) {
    return gl.stencilFuncSeparate(1028, values[2962], values[2967], values[2963]);
  },
  stencilFuncBack: function stencilFuncBack(gl, values) {
    return gl.stencilFuncSeparate(1029, values[34816], values[36003], values[36004]);
  },
  stencilOpFront: function stencilOpFront(gl, values) {
    return gl.stencilOpSeparate(1028, values[2964], values[2965], values[2966]);
  },
  stencilOpBack: function stencilOpBack(gl, values) {
    return gl.stencilOpSeparate(1029, values[34817], values[34818], values[34819]);
  }
}; // GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT

var isEnabled = function isEnabled(gl, key) {
  return gl.isEnabled(key);
}; // Exceptions for any keys that cannot be queried by gl.getParameters


var GL_PARAMETER_GETTERS = (_GL_PARAMETER_GETTERS = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_GETTERS, 3042, isEnabled), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_GETTERS, 2884, isEnabled), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_GETTERS, 2929, isEnabled), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_GETTERS, 3024, isEnabled), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_GETTERS, 32823, isEnabled), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_GETTERS, 32926, isEnabled), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_GETTERS, 32928, isEnabled), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_GETTERS, 3089, isEnabled), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_GETTERS, 2960, isEnabled), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_GL_PARAMETER_GETTERS, 35977, isEnabled), _GL_PARAMETER_GETTERS); // HELPER METHODS

var deepArrayEqual = function deepArrayEqual(x, y) {
  if (x === y) {
    return true;
  }

  var isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);
  var isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);

  if (isArrayX && isArrayY && x.length === y.length) {
    for (var i = 0; i < x.length; ++i) {
      if (x[i] !== y[i]) {
        return false;
      }
    }

    return true;
  }

  return false;
}; // PUBLIC METHODS
// Sets any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)
// Returns the previous value
// Note: limited to parameter values


function setParameter(gl, key, value) {
  var getter = GL_PARAMETER_GETTERS[key];
  var prevValue = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));
  var setter = GL_PARAMETER_SETTERS[key];
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(typeof setter === 'function');
  setter(gl, value, Number(key));
  return prevValue;
} // Sets any GL parameter regardless of function (gl.blendMode, ...)
// Note: requires a `cache` object to be set on the context (gl.state.cache)
// This object is used to fill in any missing values for composite setter functions

function setParameters(gl, values) {
  var compositeSetters = {}; // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)

  for (var key in values) {
    var glConstant = Number(key);
    var setter = GL_PARAMETER_SETTERS[key];

    if (setter) {
      // Composite setters should only be called once, so save them
      if (typeof setter === 'string') {
        compositeSetters[setter] = true;
      } else {
        // if (gl[glConstant] !== undefined) {
        // TODO - added above check since this is being called on WebGL2 values in WebGL1...
        // TODO - deep equal on values? only call setter if value has changed?
        // NOTE - the setter will automatically update this.state
        setter(gl, values[key], glConstant);
      }
    }
  } // HANDLE COMPOSITE SETTERS
  // NOTE: any non-provided values needed by composite setters are filled in from state cache
  // The cache parameter is automatically retrieved from the context
  // This depends on `trackContextState`, which is technically a "circular" dependency.
  // But it is too inconvenient to always require a cache parameter here.
  // This is the ONLY external dependency in this module/


  var cache = gl.state && gl.state.cache;

  if (cache) {
    var mergedValues = Object.assign({}, cache, values);

    for (var _key in compositeSetters) {
      // TODO - avoid calling composite setters if values have not changed.
      var compositeSetter = COMPOSITE_GL_PARAMETER_SETTERS[_key]; // Note - if `trackContextState` has been called,
      // the setter will automatically update this.state.cache

      compositeSetter(gl, mergedValues);
    }
  } // Add a log for the else case?

} // Queries any single GL parameter regardless of function (gl.getParameter/gl.isEnabled...)

function getParameter(gl, key) {
  var getter = GL_PARAMETER_GETTERS[key];
  return getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));
} // Copies the state from a context (gl.getParameter should not be overriden)
// Reads the entire WebGL state from a context
// Caveat: This generates a huge amount of synchronous driver roundtrips and should be
// considered a very slow operation, to be used only if/when a context already manipulated
// by external code needs to be synchronized for the first time
// @return {Object} - a newly created map, with values keyed by GL parameters

function getParameters(gl, parameters) {
  // default to querying all parameters
  parameters = parameters || GL_PARAMETER_DEFAULTS; // support both arrays of parameters and objects (keys represent parameters)

  var parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);
  var state = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = parameterKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;
      state[key] = getParameter(gl, key);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return state;
}
function getDefaultParameters(gl) {
  // TODO - Query GL.VIEWPORT and GL.SCISSOR_BOX since these are dynamic
  return Object.assign({}, GL_PARAMETER_DEFAULTS, {// TODO: For viewport and scissor default values are set at the time of
    // context creation based on canvas size, we can query them here but it will
    // not match with what we have in GL_PARAMETER_DEFAULTS table, we should revisit.
    // [GL.VIEWPORT]: gl.constructor.prototype.getParameter.call(gl, GL.VIEWPORT),
    // [GL.SCISSOR_BOX]: gl.constructor.prototype.getParameter.call(gl, GL.SCISSOR_BOX)
  });
} // Reset all parameters to a pure context state

function resetParameters(gl) {
  setParameters(gl, getDefaultParameters(gl));
} // Get all parameters that have been modified from a pure context state

function getModifiedParameters(gl) {
  var values = getParameters(GL_PARAMETER_DEFAULTS);
  var modified = {};

  for (var key in GL_PARAMETER_DEFAULTS) {
    if (!deepArrayEqual(values[key], GL_PARAMETER_DEFAULTS[key])) {
      modified[key] = values[key];
    }
  }

  return modified;
}
//# sourceMappingURL=set-parameters.js.map

/***/ }),
/* 135 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getShaderName;
/* harmony export (immutable) */ __webpack_exports__["b"] = getShaderTypeName;
var GL_FRAGMENT_SHADER = 0x8b30;
var GL_VERTEX_SHADER = 0x8b31; // Supports GLSLIFY style naming of shaders
// #define SHADER_NAME ...

function getShaderName(shader) {
  var defaultName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unnamed';
  var SHADER_NAME_REGEXP = /#define[\s*]SHADER_NAME[\s*]([A-Za-z0-9_-]+)[\s*]/;
  var match = shader.match(SHADER_NAME_REGEXP);
  return match ? match[1] : defaultName;
}
function getShaderTypeName(type) {
  switch (type) {
    case GL_FRAGMENT_SHADER:
      return 'fragment';

    case GL_VERTEX_SHADER:
      return 'vertex';

    default:
      return 'unknown type';
  }
}
//# sourceMappingURL=get-shader-name.js.map

/***/ }),
/* 136 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ERR_CONTEXT */
/* unused harmony export ERR_WEBGL */
/* unused harmony export ERR_WEBGL2 */
/* harmony export (immutable) */ __webpack_exports__["d"] = isWebGL;
/* harmony export (immutable) */ __webpack_exports__["b"] = isWebGL2;
/* harmony export (immutable) */ __webpack_exports__["a"] = assertWebGLContext;
/* harmony export (immutable) */ __webpack_exports__["c"] = assertWebGL2Context;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__webgl_types__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_assert__ = __webpack_require__(5);

 // Heuristic testing of contexts (to indentify debug wrappers around gl contexts)

var GL_ARRAY_BUFFER = 0x8892;
var GL_TEXTURE_BINDING_3D = 0x806a;
var ERR_CONTEXT = 'Invalid WebGLRenderingContext';
var ERR_WEBGL = ERR_CONTEXT;
var ERR_WEBGL2 = 'Requires WebGL2';
function isWebGL(glAlias) {
  return Boolean(glAlias && (glAlias instanceof __WEBPACK_IMPORTED_MODULE_0__webgl_types__["a" /* WebGLRenderingContext */] || // `glAlias` name prevents gl constant inliner from making this always true
  glAlias.ARRAY_BUFFER === GL_ARRAY_BUFFER));
}
function isWebGL2(glAlias) {
  return Boolean(glAlias && (glAlias instanceof __WEBPACK_IMPORTED_MODULE_0__webgl_types__["b" /* WebGL2RenderingContext */] || // `glAlias` name prevents gl constant inliner from making this always true
  glAlias.TEXTURE_BINDING_3D === GL_TEXTURE_BINDING_3D));
}
function assertWebGLContext(gl) {
  // Need to handle debug context
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils_assert__["a" /* default */])(isWebGL(gl), ERR_CONTEXT);
}
function assertWebGL2Context(gl) {
  // Need to handle debug context
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils_assert__["a" /* default */])(isWebGL2(gl), ERR_WEBGL2);
}
//# sourceMappingURL=webgl-checks.js.map

/***/ }),
/* 137 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Query; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__resource__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__webgl_context_context_features__ = __webpack_require__(45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__webgl_utils_query_manager__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_assert__ = __webpack_require__(5);






// WebGL2 Query (also handles disjoint timer extensions)






var noop = function noop(x) {
  return x;
};

var ERR_GPU_DISJOINT = 'Disjoint GPU operation invalidated timer queries';
var ERR_TIMER_QUERY_NOT_SUPPORTED = 'Timer queries require "EXT_disjoint_timer_query" extension';
var GL_QUERY_COUNTER_BITS_EXT = 0x8864; // # bits in query result for the given target.

var GL_QUERY_RESULT = 0x8866; // Returns a GLuint containing the query result.

var GL_QUERY_RESULT_AVAILABLE = 0x8867; // whether query result is available.

var GL_TIME_ELAPSED_EXT = 0x88bf; // Elapsed time (in nanoseconds).

var GL_TIMESTAMP_EXT = 0x8e28; // The current time.

var GL_GPU_DISJOINT_EXT = 0x8fbb; // Whether GPU performed any disjoint operation.

var GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8c88; // #primitives written to feedback buffers

var GL_ANY_SAMPLES_PASSED = 0x8c2f; // Occlusion query (if drawing passed depth test)

var GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8d6a; // Occlusion query less accurate/faster version

var Query =
/*#__PURE__*/
function (_Resource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Query, _Resource);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Query, null, [{
    key: "isSupported",
    // Returns true if Query is supported by the WebGL implementation
    // Can also check whether timestamp queries are available.
    value: function isSupported(gl) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var webgl2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__webgl_utils__["b" /* isWebGL2 */])(gl); // Initial value

      var hasTimerQuery = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__webgl_context_context_features__["d" /* hasFeatures */])(gl, __WEBPACK_IMPORTED_MODULE_7__webgl_context_context_features__["c" /* FEATURES */].TIMER_QUERY);
      var supported = webgl2 || hasTimerQuery;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = opts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var key = _step.value;

          switch (key) {
            case 'queries':
              supported = supported && webgl2;
              break;

            case 'timers':
              supported = supported && hasTimerQuery;
              break;

            case 'timestamps':
              var queryCounterBits = hasTimerQuery ? gl.getQuery(GL_TIMESTAMP_EXT, GL_QUERY_COUNTER_BITS_EXT) : 0;
              supported = supported && queryCounterBits > 0;
              break;

            default:
              __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(false);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return supported;
    } // Create a query class

  }]);

  function Query(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Query);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Query).call(this, gl, opts));
    var _opts$onComplete = opts.onComplete,
        onComplete = _opts$onComplete === void 0 ? noop : _opts$onComplete,
        _opts$onError = opts.onError,
        onError = _opts$onError === void 0 ? noop : _opts$onError;
    _this.target = null;
    _this.onComplete = onComplete;
    _this.onError = onError; // query manager needs a promise field

    _this.promise = null;
    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));
    return _this;
  } // Shortcut for timer query (dependent on extension in both WebGL1 and 2)
  // Measures GPU time delta between this call and a matching `end` call in the
  // GPU instruction stream.


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Query, [{
    key: "beginTimeElapsedQuery",
    value: function beginTimeElapsedQuery() {
      return this.begin(GL_TIME_ELAPSED_EXT);
    } // Shortcut for occlusion queries

  }, {
    key: "beginOcclusionQuery",
    value: function beginOcclusionQuery() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$conservative = _ref.conservative,
          conservative = _ref$conservative === void 0 ? false : _ref$conservative;

      return this.begin(conservative ? GL_ANY_SAMPLES_PASSED_CONSERVATIVE : GL_ANY_SAMPLES_PASSED);
    } // Shortcut for transformFeedbackQuery

  }, {
    key: "beginTransformFeedbackQuery",
    value: function beginTransformFeedbackQuery() {
      return this.begin(GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);
    } // Generates a GPU time stamp when the GPU instruction stream reaches this instruction.
    // To measure time deltas, two timestamp queries are needed.
    // Note: timestamp() queries may not be available even when the timer query extension is.

  }, {
    key: "getTimestamp",
    value: function getTimestamp() {
      __WEBPACK_IMPORTED_MODULE_9__webgl_utils_query_manager__["a" /* default */].beginQuery(this, this.onComplete, this.onError);

      try {
        this.gl.queryCounter(this.handle, GL_TIMESTAMP_EXT);
      } catch (error) {
        __WEBPACK_IMPORTED_MODULE_9__webgl_utils_query_manager__["a" /* default */].rejectQuery(this, ERR_TIMER_QUERY_NOT_SUPPORTED);
      }

      return this;
    } // Due to OpenGL API limitations, after calling `begin()` on one Query
    // instance, `end()` must be called on that same instance before
    // calling `begin()` on another query. While there can be multiple
    // outstanding queries representing disjoint `begin()`/`end()` intervals.
    // It is not possible to interleave or overlap `begin` and `end` calls.

  }, {
    key: "begin",
    value: function begin(target) {
      // - Triggering a new query when a Query is already tracking an
      //   unresolved query causes that query to be cancelled.
      __WEBPACK_IMPORTED_MODULE_9__webgl_utils_query_manager__["a" /* default */].beginQuery(this, this.onComplete, this.onError);
      this.target = target;

      try {
        this.gl.beginQuery(this.target, this.handle);
      } catch (error) {
        __WEBPACK_IMPORTED_MODULE_9__webgl_utils_query_manager__["a" /* default */].rejectQuery(this, 'Query not supported');
      }

      return this;
    } // ends the current query

  }, {
    key: "end",
    value: function end() {
      // Note: calling end does not affect the pending promise
      if (this.target) {
        this.gl.endQuery(this.target);
        this.target = null;
      }

      return this;
    } // Cancels a pending query

  }, {
    key: "cancel",
    value: function cancel() {
      this.end();
      __WEBPACK_IMPORTED_MODULE_9__webgl_utils_query_manager__["a" /* default */].cancelQuery(this);
      return this;
    } // Returns true if the query result is available

  }, {
    key: "isResultAvailable",
    value: function isResultAvailable() {
      return this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT_AVAILABLE);
    } // Returns the query result, converted to milliseconds to match JavaScript conventions.
    // TODO - what about non-timer queries

  }, {
    key: "getResult",
    value: function getResult() {
      var result = this.gl.getQueryParameter(this.handle, GL_QUERY_RESULT);
      return Number.isFinite(result) ? result / 1e6 : 0;
    }
  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return Query.isSupported(this.gl) ? this.gl.createQuery() : null;
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      __WEBPACK_IMPORTED_MODULE_9__webgl_utils_query_manager__["a" /* default */].deleteQuery(this);
      this.gl.deleteQuery(this.handle);
    }
  }], [{
    key: "poll",
    value: function poll(gl) {
      __WEBPACK_IMPORTED_MODULE_9__webgl_utils_query_manager__["a" /* default */].poll(gl);
    }
  }]);

  return Query;
}(__WEBPACK_IMPORTED_MODULE_6__resource__["a" /* default */]); // NOTE: This call lets the queryManager know how to detect disjoint GPU state
// It will check dsjoint state on polls and before adding a new query
// and reject any outstanding TimerQueries with our supplied error message.



__WEBPACK_IMPORTED_MODULE_9__webgl_utils_query_manager__["a" /* default */].setInvalidator({
  queryType: Query,
  errorMessage: ERR_GPU_DISJOINT,
  // Note: Querying the disjoint state resets it
  checkInvalid: function checkInvalid(gl) {
    return gl.getParameter(GL_GPU_DISJOINT_EXT);
  }
});
//# sourceMappingURL=query.js.map

/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Sampler; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__resource__ = __webpack_require__(12);







/* eslint-disable no-inline-comments */



var Sampler =
/*#__PURE__*/
function (_Resource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Sampler, _Resource);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Sampler, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__webgl_utils__["b" /* isWebGL2 */])(gl);
    }
  }]);

  function Sampler(gl, opts) {
    var _this;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Sampler);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__webgl_utils__["c" /* assertWebGL2Context */])(gl);
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Sampler).call(this, gl, opts));
    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));
    return _this;
  } // Bind to the same texture unit as a texture to control sampling for that texture
  // @param {GLuint} unit - texture unit index


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Sampler, [{
    key: "bind",
    value: function bind(unit) {
      this.gl.bindSampler(unit, this.handle);
      return this;
    }
  }, {
    key: "unbind",
    value: function unbind(unit) {
      this.gl.bindSampler(unit, null);
      return this;
    } // RESOURCE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.createSampler();
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      this.gl.deleteSampler(this.handle);
    }
  }, {
    key: "_getParameter",
    value: function _getParameter(pname) {
      return this.gl.getSamplerParameter(this.handle, pname);
    }
  }, {
    key: "_setParameter",
    value: function _setParameter(pname, param) {
      // Apparently there are some conversion integer/float rules that made
      // the WebGL committe expose two parameter setting functions in JavaScript.
      // For now, pick the float version for parameters specified as GLfloat.
      switch (pname) {
        case 33082:
        case 33083:
          this.gl.samplerParameterf(this.handle, pname, param);
          break;

        default:
          this.gl.samplerParameteri(this.handle, pname, param);
          break;
      }

      return this;
    }
  }]);

  return Sampler;
}(__WEBPACK_IMPORTED_MODULE_7__resource__["a" /* default */]);


//# sourceMappingURL=sampler.js.map

/***/ }),
/* 139 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Texture3D; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__webgl_context_context_state__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_texture__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__buffer__ = __webpack_require__(15);











var Texture3D =
/*#__PURE__*/
function (_Texture) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Texture3D, _Texture);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Texture3D, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__webgl_utils__["b" /* isWebGL2 */])(gl);
    }
    /**
     * @classdesc
     * 3D WebGL Texture
     * Note: Constructor will initialize your texture.
     *
     * @class
     * @param {WebGLRenderingContext} gl - gl context
     * @param {Image|ArrayBuffer|null} opts= - named options
     * @param {Image|ArrayBuffer|null} opts.data= - buffer
     * @param {GLint} width - width of texture
     * @param {GLint} height - height of texture
     */

  }]);

  function Texture3D(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Texture3D);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__webgl_utils__["c" /* assertWebGL2Context */])(gl);
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Texture3D).call(this, gl, Object.assign({}, opts, {
      target: opts.target || 32879
    })));
    _this.width = null;
    _this.height = null;
    _this.depth = null;
    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));

    _this.setImageData(opts);

    if (opts.generateMipmap) {
      _this.generateMipmap();
    }

    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Texture3D, [{
    key: "initialize",
    value: function initialize() {
      var _this2 = this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.opts = Object.assign({}, this.opts, opts);
      var _this$opts = this.opts,
          pixels = _this$opts.pixels,
          settings = _this$opts.settings;

      if (settings) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__webgl_context_context_state__["b" /* withParameters */])(settings, function () {
          if (pixels) {
            _this2.setImage3D(_this2.opts);
          }
        });
        this.setParameters(opts);
      }
    } // WebGL2
    // Image 3D copies from Typed Array or WebGLBuffer

  }, {
    key: "setImage3D",
    value: function setImage3D(_ref) {
      var _ref$level = _ref.level,
          level = _ref$level === void 0 ? 0 : _ref$level,
          _ref$internalformat = _ref.internalformat,
          internalformat = _ref$internalformat === void 0 ? 6408 : _ref$internalformat,
          width = _ref.width,
          height = _ref.height,
          _ref$depth = _ref.depth,
          depth = _ref$depth === void 0 ? 1 : _ref$depth,
          _ref$border = _ref.border,
          border = _ref$border === void 0 ? 0 : _ref$border,
          format = _ref.format,
          _ref$type = _ref.type,
          type = _ref$type === void 0 ? 5121 : _ref$type,
          _ref$offset = _ref.offset,
          offset = _ref$offset === void 0 ? 0 : _ref$offset,
          pixels = _ref.pixels;

      if (ArrayBuffer.isView(pixels)) {
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, pixels);
        return;
      }

      if (pixels instanceof __WEBPACK_IMPORTED_MODULE_9__buffer__["a" /* default */]) {
        this.gl.bindBuffer(35052, pixels.handle);
        this.gl.texImage3D(this.target, level, internalformat, width, height, depth, border, format, type, offset);
        this.gl.bindBuffer(35052, pixels.handle);
      }
    }
  }]);

  return Texture3D;
}(__WEBPACK_IMPORTED_MODULE_8__webgl_texture__["a" /* default */]);


//# sourceMappingURL=texture-3d.js.map

/***/ }),
/* 140 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VertexArrayObject; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_get__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__resource__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__buffer__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_array_utils_flat__ = __webpack_require__(262);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_probe_gl__ = __webpack_require__(146);







// WebGL2 VertexArrayObject class






/* eslint-disable camelcase */

var OES_vertex_array_object = 'OES_vertex_array_object';
var ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';

var VertexArrayObject =
/*#__PURE__*/
function (_Resource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_inherits__["a" /* default */])(VertexArrayObject, _Resource);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_createClass__["a" /* default */])(VertexArrayObject, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // Attribute 0 can not be disable on most desktop OpenGL based browsers
      // and on iOS Safari browser.
      if (options.constantAttributeZero) {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["b" /* isWebGL2 */])(gl) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_12_probe_gl__["b" /* getBrowser */])() === 'Chrome';
      } // Whether additional objects can be created


      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["b" /* isWebGL2 */])(gl) || gl.getExtension(OES_vertex_array_object);
    } // Returns the global (null) vertex array object. Exists even when no extension available

  }, {
    key: "getDefaultArray",
    value: function getDefaultArray(gl) {
      gl.luma = gl.luma || {};

      if (!gl.luma.defaultVertexArray) {
        gl.luma.defaultVertexArray = new VertexArrayObject(gl, {
          handle: null
        });
      }

      return gl.luma.defaultVertexArray;
    }
  }, {
    key: "getMaxAttributes",
    value: function getMaxAttributes(gl) {
      // TODO - should be cached per context
      VertexArrayObject.MAX_ATTRIBUTES = VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(34921);
      return VertexArrayObject.MAX_ATTRIBUTES;
    } // Note: Constants are stored globally on the WebGL context, not the VAO
    // So they need to be updated before every render
    // TODO - use known type (in configuration or passed in) to allow non-typed arrays?
    // TODO - remember/cache values to avoid setting them unnecessarily?

  }, {
    key: "setConstant",
    value: function setConstant(gl, location, array) {
      switch (array.constructor) {
        case Float32Array:
          VertexArrayObject._setConstantFloatArray(gl, location, array);

          break;

        case Int32Array:
          VertexArrayObject._setConstantIntArray(gl, location, array);

          break;

        case Uint32Array:
          VertexArrayObject._setConstantUintArray(gl, location, array);

          break;

        default:
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils__["g" /* assert */])(false);
      }
    } // Create a VertexArray

  }]);

  function VertexArrayObject(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, VertexArrayObject);

    // Use program's id if program but no id is supplied
    var id = opts.id || opts.program && opts.program.id;
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(VertexArrayObject).call(this, gl, Object.assign({}, opts, {
      id: id
    })));
    _this.hasVertexArrays = VertexArrayObject.isSupported(gl);
    _this.buffer = null;
    _this.bufferValue = null;

    _this.initialize(opts);

    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));
    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_createClass__["a" /* default */])(VertexArrayObject, [{
    key: "delete",
    value: function _delete() {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_get__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(VertexArrayObject.prototype), "delete", this).call(this);

      if (this.buffer) {
        this.buffer.delete();
      }
    }
  }, {
    key: "initialize",
    value: function initialize() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.setProps(props);
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      // TODO: decide which props should be supported
      return this;
    } // Set (bind) an elements buffer, for indexed rendering.
    // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported

  }, {
    key: "setElementBuffer",
    value: function setElementBuffer() {
      var _this2 = this;

      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils__["g" /* assert */])(!elementBuffer || elementBuffer.target === 34963, ERR_ELEMENTS); // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...

      this.bind(function () {
        _this2.gl.bindBuffer(34963, elementBuffer ? elementBuffer.handle : null);
      });
      return this;
    } // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor

  }, {
    key: "setBuffer",
    value: function setBuffer(location, buffer, accessor) {
      // Check target
      if (buffer.target === 34963) {
        return this.setElementBuffer(buffer, accessor);
      }

      var size = accessor.size,
          type = accessor.type,
          stride = accessor.stride,
          offset = accessor.offset,
          normalized = accessor.normalized,
          integer = accessor.integer,
          divisor = accessor.divisor;
      var gl = this.gl;
      location = Number(location);
      this.bind(function () {
        // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target
        gl.bindBuffer(34962, buffer.handle); // WebGL2 supports *integer* data formats, i.e. GPU will see integer values

        if (integer) {
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils__["g" /* assert */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["b" /* isWebGL2 */])(gl));
          gl.vertexAttribIPointer(location, size, type, stride, offset);
        } else {
          // Attaches ARRAY_BUFFER with specified buffer format to location
          gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
        }

        gl.enableVertexAttribArray(location);
        gl.vertexAttribDivisor(location, divisor || 0); // NOTE We don't unbind buffer here, typically another buffer will be bound just after
      });
      return this;
    } // Enabling an attribute location makes it reference the currently bound buffer
    // Disabling an attribute location makes it reference the global constant value
    // TODO - handle single values for size 1 attributes?
    // TODO - convert classic arrays based on known type?

  }, {
    key: "enable",
    value: function enable(location) {
      var _this3 = this;

      var _enable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      // Attribute 0 cannot be disabled in most desktop OpenGL based browsers
      var disablingAttributeZero = !_enable && location === 0 && !VertexArrayObject.isSupported(this.gl, {
        constantAttributeZero: true
      });

      if (!disablingAttributeZero) {
        location = Number(location);
        this.bind(function () {
          return _enable ? _this3.gl.enableVertexAttribArray(location) : _this3.gl.disableVertexAttribArray(location);
        });
      }

      return this;
    } // Provide a means to create a buffer that is equivalent to a constant.
    // NOTE: Desktop OpenGL cannot disable attribute 0.
    // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-
    // this-has-significant-performance-penalt

  }, {
    key: "getConstantBuffer",
    value: function getConstantBuffer(elementCount, value, accessor) {
      // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)
      var constantValue = this._normalizeConstantArrayValue(value, accessor);

      var byteLength = constantValue.byteLength * elementCount;
      var length = constantValue.length * elementCount;
      var updateNeeded = !this.buffer;
      this.buffer = this.buffer || new __WEBPACK_IMPORTED_MODULE_8__buffer__["a" /* default */](this.gl, byteLength);
      updateNeeded = updateNeeded || this.buffer.setByteLength(byteLength); // Reallocate and update contents if needed

      updateNeeded = updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);

      if (updateNeeded) {
        // Create a typed array that is big enough, and fill it with the required data
        var typedArray = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_array_utils_flat__["a" /* getScratchArray */])(value.constructor, length);
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_array_utils_flat__["b" /* fillArray */])({
          target: typedArray,
          source: constantValue,
          start: 0,
          count: length
        });
        this.buffer.subData(typedArray);
        this.bufferValue = value;
      }

      return this.buffer;
    } // PRIVATE
    // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)
    // TODO - handle single values for size 1 attributes?

  }, {
    key: "_normalizeConstantArrayValue",
    value: function _normalizeConstantArrayValue(arrayValue, accessor) {
      if (Array.isArray(arrayValue)) {
        return new Float32Array(arrayValue);
      }

      return arrayValue;
    }
  }, {
    key: "_compareConstantArrayValues",
    value: function _compareConstantArrayValues(v1, v2) {
      if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {
        return false;
      }

      for (var i = 0; i < v1.length; ++i) {
        if (v1[i] !== v2[i]) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "_createHandle",
    // RESOURCE IMPLEMENTATION
    value: function _createHandle() {
      this.hasVertexArrays = VertexArrayObject.isSupported(this.gl);

      if (this.hasVertexArrays) {
        return this.gl.createVertexArray();
      }

      return null;
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle(handle) {
      if (this.hasVertexArrays) {
        this.gl.deleteVertexArray(handle);
      }

      return [this.elements]; // return [this.elements, ...this.buffers];
    }
  }, {
    key: "_bindHandle",
    value: function _bindHandle(handle) {
      if (this.hasVertexArrays) {
        this.gl.bindVertexArray(handle);
      }
    } // Generic getter for information about a vertex attribute at a given position

  }, {
    key: "_getParameter",
    value: function _getParameter(pname, _ref) {
      var _this4 = this;

      var location = _ref.location;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils__["g" /* assert */])(Number.isFinite(location));
      return this.bind(function () {
        switch (pname) {
          case 34373:
            return _this4.gl.getVertexAttribOffset(location, pname);

          default:
            return _this4.gl.getVertexAttrib(location, pname);
        }
      });
    } // DEPRECATED

    /*
    setDivisor(location, divisor) {
      location = Number(location);
      this.bind(() => this.gl.vertexAttribDivisor(location, divisor));
      return this;
    }
     // match assumed WebGL defaults
    static resetConstants(gl) {
      const MAX_ATTRIBUTES = VertexArrayObject.getMaxAttributes(gl);
      for (let i = 0; i < MAX_ATTRIBUTES; i++) {
        VertexArrayObject.setConstant(gl, i, [0, 0, 0, 1]);
      }
    }
     // Resets all attributes (to default valued constants)
    resetAttributes() {
      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`
      // But Chrome does not like buffers that are bound to several binding points.
      // So we just bind all the attributes to the dummy "attribute zero" buffer
      this.buffer = this.buffer || new Buffer(this.gl, {size: 4});
       for (const location in this.values) {
        if (this.values[location] instanceof Buffer) {
          this.gl.disableVertexAttribArray(location);
          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);
          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);
        }
      }
       this.setElementBuffer(null);
      return this;
    }
    */

  }, {
    key: "MAX_ATTRIBUTES",
    get: function get() {
      return VertexArrayObject.getMaxAttributes(this.gl);
    }
  }], [{
    key: "_setConstantFloatArray",
    value: function _setConstantFloatArray(gl, location, array) {
      switch (array.length) {
        case 1:
          gl.vertexAttrib1fv(location, array);
          break;

        case 2:
          gl.vertexAttrib2fv(location, array);
          break;

        case 3:
          gl.vertexAttrib3fv(location, array);
          break;

        case 4:
          gl.vertexAttrib4fv(location, array);
          break;

        default:
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils__["g" /* assert */])(false);
      }
    }
  }, {
    key: "_setConstantIntArray",
    value: function _setConstantIntArray(gl, location, array) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils__["g" /* assert */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["b" /* isWebGL2 */])(gl));

      switch (array.length) {
        case 1:
          gl.vertexAttribI1iv(location, array);
          break;

        case 2:
          gl.vertexAttribI2iv(location, array);
          break;

        case 3:
          gl.vertexAttribI3iv(location, array);
          break;

        case 4:
          gl.vertexAttribI4iv(location, array);
          break;

        default:
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils__["g" /* assert */])(false);
      }
    }
  }, {
    key: "_setConstantUintArray",
    value: function _setConstantUintArray(gl, location, array) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils__["g" /* assert */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["b" /* isWebGL2 */])(gl));

      switch (array.length) {
        case 1:
          gl.vertexAttribI1uiv(location, array);
          break;

        case 2:
          gl.vertexAttribI2uiv(location, array);
          break;

        case 3:
          gl.vertexAttribI3uiv(location, array);
          break;

        case 4:
          gl.vertexAttribI4uiv(location, array);
          break;

        default:
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils__["g" /* assert */])(false);
      }
    }
  }]);

  return VertexArrayObject;
}(__WEBPACK_IMPORTED_MODULE_7__resource__["a" /* default */]);


//# sourceMappingURL=vertex-array-object.js.map

/***/ }),
/* 141 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VertexArray; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__accessor__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__buffer__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__vertex_array_object__ = __webpack_require__(140);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils__ = __webpack_require__(6);


// VertexArray class





var ERR_ATTRIBUTE_TYPE = 'VertexArray: attributes must be Buffers or constants (i.e. typed array)';

var VertexArray =
/*#__PURE__*/
function () {
  function VertexArray(gl) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, VertexArray);

    // Use program's id if program is supplied but no id is supplied
    var id = opts.id || opts.program && opts.program.id; // super(gl, Object.assign({}, opts, {id}));

    this.id = id;
    this.gl = gl;
    this.configuration = null; // Extracted information

    this.elements = null;
    this.values = null;
    this.accessors = null;
    this.unused = null;
    this.drawParams = null;
    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers

    this.vertexArrayObject = __WEBPACK_IMPORTED_MODULE_4__vertex_array_object__["a" /* default */].isSupported(gl) ? new __WEBPACK_IMPORTED_MODULE_4__vertex_array_object__["a" /* default */](gl) : __WEBPACK_IMPORTED_MODULE_4__vertex_array_object__["a" /* default */].getDefaultArray(gl); // Issue errors when using removed methods

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils__["d" /* stubRemovedMethods */])(this, 'VertexArray', 'v6.0', ['setBuffers', 'setGeneric', 'clearBindings', 'setLocations', 'setGenericValues', 'setDivisor', 'enable', 'disable']);
    this.initialize(opts);
    Object.seal(this);
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(VertexArray, [{
    key: "delete",
    value: function _delete() {
      if (this.buffer) {
        this.buffer.delete();
      }
    }
  }, {
    key: "initialize",
    value: function initialize() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.reset();
      this.configuration = null;
      this.bindOnUse = false;
      return this.setProps(props);
    } // Resets all attributes (to default valued constants)

  }, {
    key: "reset",
    value: function reset() {
      // this.vertexArrayObject.reset();
      this.elements = null;
      var MAX_ATTRIBUTES = this.vertexArrayObject.MAX_ATTRIBUTES;
      this.values = new Array(MAX_ATTRIBUTES).fill(null);
      this.accessors = new Array(MAX_ATTRIBUTES).fill(null);
      this.unused = {}; // Auto detects draw params

      this.drawParams = null;
      return this;
    }
  }, {
    key: "setProps",
    value: function setProps(props) {
      if ('program' in props) {
        this.configuration = props.program && props.program.configuration;
      }

      if ('configuration' in props) {
        this.configuration = props.configuration;
      }

      if ('attributes' in props) {
        this.setAttributes(props.attributes);
      }

      if ('elements' in props) {
        this.setElementBuffer(props.elements);
      }

      if ('bindOnUse' in props) {
        props = props.bindOnUse;
      }

      return this;
    } // Automatically called if buffers changed through VertexArray API

  }, {
    key: "clearDrawParams",
    value: function clearDrawParams() {
      this.drawParams = null;
    }
  }, {
    key: "getDrawParams",
    value: function getDrawParams(appParameters) {
      // Auto deduced draw parameters
      this.drawParams = this.drawParams || this._updateDrawParams(); // Override with any application supplied draw parameters

      return Object.assign({}, this.drawParams, appParameters);
    } // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.
    // For names that are not present in `location`, the supplied buffers will be ignored.
    // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements
    //   Signatures:
    //     {attributeName: buffer}
    //     {attributeName: [buffer, accessor]}
    //     {attributeName: (typed) array} => constant

  }, {
    key: "setAttributes",
    value: function setAttributes(attributes) {
      var _this = this;

      this.vertexArrayObject.bind(function () {
        for (var locationOrName in attributes) {
          var value = attributes[locationOrName];

          if (value instanceof __WEBPACK_IMPORTED_MODULE_3__buffer__["a" /* default */]) {
            //  Signature: attributeName: buffer
            _this.setBuffer(locationOrName, value);
          } else if (Array.isArray(value) && value.length && value[0] instanceof __WEBPACK_IMPORTED_MODULE_3__buffer__["a" /* default */]) {
            // Signature: attributeName: [buffer, accessor]
            var buffer = value[0];
            var accessor = value[1];

            _this.setBuffer(locationOrName, buffer, accessor);
          } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {
            //  Signature: attributeName: (short) (typed) array => constant
            _this.setConstant(locationOrName, value);
          } else {
            throw new Error(ERR_ATTRIBUTE_TYPE);
          }
        } // Make sure we don't leave any bindings


        _this.gl.bindBuffer(34962, null);
      });
      return this;
    } // Set (bind) an elements buffer, for indexed rendering.
    // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported

  }, {
    key: "setElementBuffer",
    value: function setElementBuffer() {
      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.elements = elementBuffer; // Save value for debugging

      this.clearDrawParams(); // Update vertexArray immediately if we have our own array

      if (!this.vertexArrayObject.isDefaultArray) {
        this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);
      }

      return this;
    } // Set a location in vertex attributes array to a buffer

  }, {
    key: "setBuffer",
    value: function setBuffer(locationOrName, buffer) {
      var appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // Check target
      if (buffer.target === 34963) {
        return this.setElementBuffer(buffer);
      }

      var _this$_resolveLocatio = this._resolveLocationAndAccessor(locationOrName, buffer, buffer.accessor, appAccessor),
          location = _this$_resolveLocatio.location,
          accessor = _this$_resolveLocatio.accessor;

      if (location >= 0) {
        this.values[location] = buffer;
        this.accessors[location] = accessor;
        this.clearDrawParams(); // Update vertexArray immediately if we have our own array

        if (!this.vertexArrayObject.isDefaultArray) {
          this.vertexArrayObject.setBuffer(location, buffer, accessor);
        }
      }

      return this;
    } // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)

  }, {
    key: "setConstant",
    value: function setConstant(locationOrName, arrayValue) {
      var appAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var _this$_resolveLocatio2 = this._resolveLocationAndAccessor(locationOrName, arrayValue, appAccessor),
          location = _this$_resolveLocatio2.location,
          accessor = _this$_resolveLocatio2.accessor;

      if (location >= 0) {
        arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue, accessor);
        this.values[location] = arrayValue;
        this.accessors[location] = accessor;
        this.clearDrawParams(); // Update vertexArray immediately if we have our own array
        // NOTE: We set the actual constant value later on bind. We can't set the value now since
        // constants are global and affect all other VertexArrays that have disabled attributes
        // in the same location.
        // We do disable the attribute which makes it use the global constant value at that location

        if (!this.vertexArrayObject.isDefaultArray) {
          this.vertexArrayObject.enable(location, false);
        }
      }

      return this;
    } // Workaround for Chrome TransformFeedback binding issue
    // If required, unbind temporarily to avoid conflicting with TransformFeedback

  }, {
    key: "unbindBuffers",
    value: function unbindBuffers() {
      var _this2 = this;

      this.vertexArrayObject.bind(function () {
        if (_this2.elements) {
          _this2.setElementBuffer(null);
        } // Chrome does not like buffers that are bound to several binding points,
        // so we need to offer and unbind facility
        // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`
        // So we just bind all the attributes to the dummy "attribute zero" buffer


        _this2.buffer = _this2.buffer || new __WEBPACK_IMPORTED_MODULE_3__buffer__["a" /* default */](_this2.gl, {
          size: 4
        });

        for (var location = 0; location < _this2.vertexArrayObject.MAX_ATTRIBUTES; location++) {
          if (_this2.values[location] instanceof __WEBPACK_IMPORTED_MODULE_3__buffer__["a" /* default */]) {
            _this2.gl.disableVertexAttribArray(location);

            _this2.gl.bindBuffer(34962, _this2.buffer.handle);

            _this2.gl.vertexAttribPointer(location, 1, 5126, false, 0, 0);
          }
        }
      });
      return this;
    } // Workaround for Chrome TransformFeedback binding issue
    // If required, rebind rebind after temporary unbind

  }, {
    key: "bindBuffers",
    value: function bindBuffers() {
      var _this3 = this;

      this.vertexArrayObject.bind(function () {
        if (_this3.elements) {
          _this3.setElementBuffer(_this3.elements);
        }

        for (var location = 0; location < _this3.vertexArrayObject.MAX_ATTRIBUTES; location++) {
          var buffer = _this3.values[location];

          if (buffer instanceof __WEBPACK_IMPORTED_MODULE_3__buffer__["a" /* default */]) {
            _this3.setBuffer(location, buffer);
          }
        }
      });
      return this;
    } // Bind for use
    // When a vertex array is about to be used, we must:
    // - Set constant attributes (since these are stored on the context and reset on bind)
    // - Check if we need to initialize the buffer

  }, {
    key: "bindForDraw",
    value: function bindForDraw(vertexCount, instanceCount, func) {
      var _this4 = this;

      var value;
      this.vertexArrayObject.bind(function () {
        // Make sure that any constant attributes are updated (stored on the context, not the VAO)
        // Also handles attribute 0
        _this4._setConstantAttributes(vertexCount, instanceCount);

        if (!_this4.vertexArrayObject.hasVertexArrays) {
          _this4.bindBuffers();
        }

        value = func();

        if (!_this4.vertexArrayObject.hasVertexArrays) {
          _this4.unbindBuffers();
        }
      });
      return value;
    } // PRIVATE
    // Resolve locations and accessors

  }, {
    key: "_resolveLocationAndAccessor",
    value: function _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {
      var _this5 = this;

      var location = this._getAttributeIndex(locationOrName);

      if (!Number.isFinite(location) || location < 0) {
        this.unused[locationOrName] = value;
        __WEBPACK_IMPORTED_MODULE_5__utils__["a" /* log */].once(3, function () {
          return "unused value ".concat(locationOrName, " in ").concat(_this5.id);
        })();
        return this;
      }

      var accessInfo = this._getAttributeInfo(locationOrName); // Resolve the partial accessors into a final accessor


      var accessor = __WEBPACK_IMPORTED_MODULE_2__accessor__["a" /* default */].resolve(accessInfo.accessor, valueAccessor, appAccessor);
      var size = accessor.size,
          type = accessor.type;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils__["g" /* assert */])(Number.isFinite(size) && Number.isFinite(type));
      return {
        location: location,
        accessor: accessor
      };
    }
  }, {
    key: "_getAttributeInfo",
    value: function _getAttributeInfo(attributeName) {
      return this.configuration && this.configuration.getAttributeInfo(attributeName);
    }
  }, {
    key: "_getAttributeIndex",
    value: function _getAttributeIndex(locationOrName) {
      if (this.configuration) {
        return this.configuration.getAttributeLocation(locationOrName);
      }

      var location = Number(locationOrName);

      if (Number.isFinite(location)) {
        return location;
      }

      return -1;
    } // Updates all constant attribute values (constants are used when vertex attributes are disabled).
    // This needs to be done repeatedly since in contrast to buffer bindings,
    // constants are stored on the WebGL context, not the VAO

  }, {
    key: "_setConstantAttributes",
    value: function _setConstantAttributes(vertexCount, instanceCount) {
      // TODO - use accessor to determine what length to use
      var elementCount = Math.max(vertexCount | 0, instanceCount | 0);
      var constant = this.values[0];

      if (ArrayBuffer.isView(constant)) {
        this._setConstantAttributeZero(constant, elementCount);
      }

      for (var location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {
        constant = this.values[location];

        if (ArrayBuffer.isView(constant)) {
          this._setConstantAttribute(location, constant);
        }
      }
    }
  }, {
    key: "_setConstantAttributeZero",
    value: function _setConstantAttributeZero(constant, elementCount) {
      if (__WEBPACK_IMPORTED_MODULE_4__vertex_array_object__["a" /* default */].isSupported(this.gl, {
        constantAttributeZero: true
      })) {
        this._setConstantAttribute(0, constant);

        return;
      } // Get a dummy buffer populated with repeated constants


      var buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant); // Set the buffer on location 0

      this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);
    }
  }, {
    key: "_setConstantAttribute",
    value: function _setConstantAttribute(location, constant) {
      __WEBPACK_IMPORTED_MODULE_4__vertex_array_object__["a" /* default */].setConstant(this.gl, location, constant); // If we are using the global VertexArrayObject, we need to disable the attribute now

      if (this.vertexArrayObject.isDefault) {
        this.vertexArrayObject.enable(location, false);
      }
    } // Walks the buffers and updates draw parameters

  }, {
    key: "_updateDrawParams",
    value: function _updateDrawParams() {
      var drawParams = {
        isIndexed: false,
        isInstanced: false,
        indexCount: Infinity,
        vertexCount: Infinity,
        instanceCount: Infinity
      };

      for (var location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {
        this._updateDrawParamsForLocation(drawParams, location);
      }

      if (this.elements) {
        // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER
        // index type is saved for drawElement calls
        drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);
        drawParams.isIndexed = true;
        drawParams.indexType = this.elements.accessor.type;
      } // Post-calculation checks


      if (drawParams.indexCount === Infinity) {
        drawParams.indexCount = 0;
      }

      if (drawParams.vertexCount === Infinity) {
        drawParams.vertexCount = 0;
      }

      if (drawParams.instanceCount === Infinity) {
        drawParams.instanceCount = 0;
      }

      return drawParams;
    }
  }, {
    key: "_updateDrawParamsForLocation",
    value: function _updateDrawParamsForLocation(drawParams, location) {
      var value = this.values[location];
      var accessor = this.accessors[location];

      if (!value) {
        return;
      } // Check if instanced (whether buffer or constant)


      var divisor = accessor.divisor;
      var isInstanced = divisor > 0;
      drawParams.isInstanced = drawParams.isInstanced || isInstanced;

      if (value instanceof __WEBPACK_IMPORTED_MODULE_3__buffer__["a" /* default */]) {
        var buffer = value;

        if (isInstanced) {
          // instance attribute
          var instanceCount = buffer.getVertexCount(accessor);
          drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);
        } else {
          // normal attribute
          var vertexCount = buffer.getVertexCount(accessor);
          drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);
        }
      }
    } // DEPRECATED

  }, {
    key: "setElements",
    value: function setElements() {
      var elementBuffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var accessor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      __WEBPACK_IMPORTED_MODULE_5__utils__["a" /* log */].deprecated('setElements', 'setElementBuffer');
      return this.setElementBuffer(elementBuffer, accessor);
    }
  }]);

  return VertexArray;
}();


//# sourceMappingURL=vertex-array.js.map

/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Euler; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__lib_math_array__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__lib_common__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__matrix4__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__quaternion__ = __webpack_require__(143);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__vector3__ = __webpack_require__(39);










var ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';
var ALMOST_ONE = 0.99999;

function validateOrder(value) {
  return value >= 0 && value < 6;
}

function checkOrder(value) {
  if (value < 0 && value >= 6) {
    throw new Error(ERR_UNKNOWN_ORDER);
  }

  return value;
}

var Euler = function (_MathArray) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Euler, _MathArray);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Euler, [{
    key: "ELEMENTS",
    get: function get() {
      return 4;
    }
  }], [{
    key: "rotationOrder",
    value: function rotationOrder(order) {
      return Euler.RotationOrders[order];
    }
  }, {
    key: "ZYX",
    get: function get() {
      return 0;
    }
  }, {
    key: "YXZ",
    get: function get() {
      return 1;
    }
  }, {
    key: "XZY",
    get: function get() {
      return 2;
    }
  }, {
    key: "ZXY",
    get: function get() {
      return 3;
    }
  }, {
    key: "YZX",
    get: function get() {
      return 4;
    }
  }, {
    key: "XYZ",
    get: function get() {
      return 5;
    }
  }, {
    key: "RollPitchYaw",
    get: function get() {
      return 0;
    }
  }, {
    key: "DefaultOrder",
    get: function get() {
      return Euler.ZYX;
    }
  }, {
    key: "RotationOrders",
    get: function get() {
      return ['ZYX', 'YXZ', 'XZY', 'ZXY', 'YZX', 'XYZ'];
    }
  }]);

  function Euler() {
    var _this;

    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Euler.DefaultOrder;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Euler);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Euler).call(this));

    if (arguments.length > 0 && Array.isArray(arguments[0])) {
      var _this2;

      (_this2 = _this).fromVector3.apply(_this2, arguments);
    } else {
      _this.set(x, y, z, order);
    }

    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Euler, [{
    key: "copy",
    value: function copy(array) {
      for (var i = 0; i < 3; ++i) {
        this[i] = array[i];
      }

      this[3] = Number.isFinite(array[3]) || this.order;
      return this.check();
    }
  }, {
    key: "set",
    value: function set() {
      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var order = arguments.length > 3 ? arguments[3] : undefined;
      this[0] = x;
      this[1] = y;
      this[2] = z;
      this[3] = Number.isFinite(order) ? order : this[3];
      return this.check();
    }
  }, {
    key: "validate",
    value: function validate() {
      return validateOrder(this[3]) && Number.isFinite(this[0]) && Number.isFinite(this[1]) && Number.isFinite(this[2]);
    }
  }, {
    key: "toArray",
    value: function toArray() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      array[offset] = this[0];
      array[offset + 1] = this[1];
      array[offset + 2] = this[2];
      return array;
    }
  }, {
    key: "toArray4",
    value: function toArray4() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      array[offset] = this[0];
      array[offset + 1] = this[1];
      array[offset + 2] = this[2];
      array[offset + 3] = this[3];
      return array;
    }
  }, {
    key: "toVector3",
    value: function toVector3(optionalResult) {
      if (optionalResult) {
        return optionalResult.set(this[0], this[1], this[2]);
      }

      return new __WEBPACK_IMPORTED_MODULE_9__vector3__["a" /* default */](this[0], this[1], this[2]);
    }
  }, {
    key: "fromVector3",
    value: function fromVector3(v, order) {
      return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);
    }
  }, {
    key: "fromArray",
    value: function fromArray(array) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      this[0] = array[0 + offset];
      this[1] = array[1 + offset];
      this[2] = array[2 + offset];

      if (array[3] !== undefined) {
        this[3] = array[3];
      }

      return this.check();
    }
  }, {
    key: "fromRollPitchYaw",
    value: function fromRollPitchYaw(roll, pitch, yaw) {
      return this.set(roll, pitch, yaw, Euler.ZYX);
    }
  }, {
    key: "fromQuaternion",
    value: function fromQuaternion(q, order) {
      this._fromRotationMatrix(__WEBPACK_IMPORTED_MODULE_7__matrix4__["a" /* default */].fromQuaternion(q), order);

      return this.check();
    }
  }, {
    key: "fromRotationMatrix",
    value: function fromRotationMatrix(m) {
      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;

      this._fromRotationMatrix(m, order);

      return this.check();
    }
  }, {
    key: "getRotationMatrix",
    value: function getRotationMatrix() {
      var m = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new __WEBPACK_IMPORTED_MODULE_7__matrix4__["a" /* default */]();

      this._getRotationMatrix(m);

      return m;
    }
  }, {
    key: "getQuaternion",
    value: function getQuaternion() {
      var q = new __WEBPACK_IMPORTED_MODULE_8__quaternion__["a" /* default */]();

      switch (this[4]) {
        case Euler.XYZ:
          return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);

        case Euler.YXZ:
          return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);

        case Euler.ZXY:
          return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);

        case Euler.ZYX:
          return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);

        case Euler.YZX:
          return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);

        case Euler.XZY:
          return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);

        default:
          throw new Error(ERR_UNKNOWN_ORDER);
      }
    }
  }, {
    key: "_fromRotationMatrix",
    value: function _fromRotationMatrix(m) {
      var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Euler.DefaultOrder;
      var te = m.elements;
      var m11 = te[0],
          m12 = te[4],
          m13 = te[8];
      var m21 = te[1],
          m22 = te[5],
          m23 = te[9];
      var m31 = te[2],
          m32 = te[6],
          m33 = te[10];
      order = order || this[3];

      switch (order) {
        case Euler.XYZ:
          this[1] = Math.asin(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["c" /* clamp */])(m13, -1, 1));

          if (Math.abs(m13) < ALMOST_ONE) {
            this[0] = Math.atan2(-m23, m33);
            this[2] = Math.atan2(-m12, m11);
          } else {
            this[0] = Math.atan2(m32, m22);
            this[2] = 0;
          }

          break;

        case Euler.YXZ:
          this[0] = Math.asin(-__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["c" /* clamp */])(m23, -1, 1));

          if (Math.abs(m23) < ALMOST_ONE) {
            this[1] = Math.atan2(m13, m33);
            this[2] = Math.atan2(m21, m22);
          } else {
            this[1] = Math.atan2(-m31, m11);
            this[2] = 0;
          }

          break;

        case Euler.ZXY:
          this[0] = Math.asin(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["c" /* clamp */])(m32, -1, 1));

          if (Math.abs(m32) < ALMOST_ONE) {
            this[1] = Math.atan2(-m31, m33);
            this[2] = Math.atan2(-m12, m22);
          } else {
            this[1] = 0;
            this[2] = Math.atan2(m21, m11);
          }

          break;

        case Euler.ZYX:
          this[1] = Math.asin(-__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["c" /* clamp */])(m31, -1, 1));

          if (Math.abs(m31) < ALMOST_ONE) {
            this[0] = Math.atan2(m32, m33);
            this[2] = Math.atan2(m21, m11);
          } else {
            this[0] = 0;
            this[2] = Math.atan2(-m12, m22);
          }

          break;

        case Euler.YZX:
          this[2] = Math.asin(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["c" /* clamp */])(m21, -1, 1));

          if (Math.abs(m21) < ALMOST_ONE) {
            this[0] = Math.atan2(-m23, m22);
            this[1] = Math.atan2(-m31, m11);
          } else {
            this[0] = 0;
            this[1] = Math.atan2(m13, m33);
          }

          break;

        case Euler.XZY:
          this[2] = Math.asin(-__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["c" /* clamp */])(m12, -1, 1));

          if (Math.abs(m12) < ALMOST_ONE) {
            this[0] = Math.atan2(m32, m22);
            this[1] = Math.atan2(m13, m11);
          } else {
            this[0] = Math.atan2(-m23, m33);
            this[1] = 0;
          }

          break;

        default:
          throw new Error(ERR_UNKNOWN_ORDER);
      }

      this[3] = order;
      return this;
    }
  }, {
    key: "_getRotationMatrix",
    value: function _getRotationMatrix() {
      var te = new __WEBPACK_IMPORTED_MODULE_7__matrix4__["a" /* default */]();
      var x = this.x,
          y = this.y,
          z = this.z;
      var a = Math.cos(x);
      var c = Math.cos(y);
      var e = Math.cos(z);
      var b = Math.sin(x);
      var d = Math.sin(y);
      var f = Math.sin(z);

      switch (this[3]) {
        case Euler.XYZ:
          {
            var ae = a * e,
                af = a * f,
                be = b * e,
                bf = b * f;
            te[0] = c * e;
            te[4] = -c * f;
            te[8] = d;
            te[1] = af + be * d;
            te[5] = ae - bf * d;
            te[9] = -b * c;
            te[2] = bf - ae * d;
            te[6] = be + af * d;
            te[10] = a * c;
            break;
          }

        case Euler.YXZ:
          {
            var ce = c * e,
                cf = c * f,
                de = d * e,
                df = d * f;
            te[0] = ce + df * b;
            te[4] = de * b - cf;
            te[8] = a * d;
            te[1] = a * f;
            te[5] = a * e;
            te[9] = -b;
            te[2] = cf * b - de;
            te[6] = df + ce * b;
            te[10] = a * c;
            break;
          }

        case Euler.ZXY:
          {
            var _ce = c * e,
                _cf = c * f,
                _de = d * e,
                _df = d * f;

            te[0] = _ce - _df * b;
            te[4] = -a * f;
            te[8] = _de + _cf * b;
            te[1] = _cf + _de * b;
            te[5] = a * e;
            te[9] = _df - _ce * b;
            te[2] = -a * d;
            te[6] = b;
            te[10] = a * c;
            break;
          }

        case Euler.ZYX:
          {
            var _ae = a * e,
                _af = a * f,
                _be = b * e,
                _bf = b * f;

            te[0] = c * e;
            te[4] = _be * d - _af;
            te[8] = _ae * d + _bf;
            te[1] = c * f;
            te[5] = _bf * d + _ae;
            te[9] = _af * d - _be;
            te[2] = -d;
            te[6] = b * c;
            te[10] = a * c;
            break;
          }

        case Euler.YZX:
          {
            var ac = a * c,
                ad = a * d,
                bc = b * c,
                bd = b * d;
            te[0] = c * e;
            te[4] = bd - ac * f;
            te[8] = bc * f + ad;
            te[1] = f;
            te[5] = a * e;
            te[9] = -b * e;
            te[2] = -d * e;
            te[6] = ad * f + bc;
            te[10] = ac - bd * f;
            break;
          }

        case Euler.XZY:
          {
            var _ac = a * c,
                _ad = a * d,
                _bc = b * c,
                _bd = b * d;

            te[0] = c * e;
            te[4] = -f;
            te[8] = d * e;
            te[1] = _ac * f + _bd;
            te[5] = a * e;
            te[9] = _ad * f - _bc;
            te[2] = _bc * f - _ad;
            te[6] = b * e;
            te[10] = _bd * f + _ac;
            break;
          }

        default:
          throw new Error(ERR_UNKNOWN_ORDER);
      }

      te[3] = 0;
      te[7] = 0;
      te[11] = 0;
      te[12] = 0;
      te[13] = 0;
      te[14] = 0;
      te[15] = 1;
      return this;
    }
  }, {
    key: "x",
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "y",
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "z",
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "alpha",
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "beta",
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "gamma",
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "phi",
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "theta",
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "psi",
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "roll",
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "pitch",
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "yaw",
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "order",
    get: function get() {
      return this[3];
    },
    set: function set(value) {
      return this[3] = checkOrder(value);
    }
  }]);

  return Euler;
}(__WEBPACK_IMPORTED_MODULE_5__lib_math_array__["a" /* default */]);


//# sourceMappingURL=euler.js.map

/***/ }),
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export validateQuaternion */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Quaternion; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__lib_math_array__ = __webpack_require__(53);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__lib_common__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_quat_fromMat3__ = __webpack_require__(214);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_quat_fromMat3___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_quat_fromMat3__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_quat_identity__ = __webpack_require__(215);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_gl_quat_identity___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_gl_quat_identity__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_quat_length__ = __webpack_require__(217);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_gl_quat_length___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_gl_quat_length__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_quat_squaredLength__ = __webpack_require__(227);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_gl_quat_squaredLength___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_gl_quat_squaredLength__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_quat_dot__ = __webpack_require__(213);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_gl_quat_dot___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_gl_quat_dot__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_quat_rotationTo__ = __webpack_require__(223);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_gl_quat_rotationTo___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_gl_quat_rotationTo__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_quat_add__ = __webpack_require__(210);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_gl_quat_add___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_gl_quat_add__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_quat_calculateW__ = __webpack_require__(211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_gl_quat_calculateW___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_gl_quat_calculateW__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_quat_conjugate__ = __webpack_require__(212);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_gl_quat_conjugate___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_gl_quat_conjugate__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_quat_invert__ = __webpack_require__(216);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_gl_quat_invert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16_gl_quat_invert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_quat_lerp__ = __webpack_require__(218);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17_gl_quat_lerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17_gl_quat_lerp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_quat_multiply__ = __webpack_require__(219);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_gl_quat_multiply___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18_gl_quat_multiply__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_quat_normalize__ = __webpack_require__(101);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19_gl_quat_normalize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19_gl_quat_normalize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_quat_rotateX__ = __webpack_require__(220);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20_gl_quat_rotateX___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20_gl_quat_rotateX__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_quat_rotateY__ = __webpack_require__(221);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21_gl_quat_rotateY___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_21_gl_quat_rotateY__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_gl_quat_rotateZ__ = __webpack_require__(222);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22_gl_quat_rotateZ___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_22_gl_quat_rotateZ__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23_gl_quat_scale__ = __webpack_require__(224);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23_gl_quat_scale___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_23_gl_quat_scale__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24_gl_quat_set__ = __webpack_require__(225);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24_gl_quat_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_24_gl_quat_set__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25_gl_quat_setAxisAngle__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25_gl_quat_setAxisAngle___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_25_gl_quat_setAxisAngle__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26_gl_quat_slerp__ = __webpack_require__(226);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26_gl_quat_slerp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_26_gl_quat_slerp__);



























var IDENTITY_QUATERNION = [0, 0, 0, 1];
function validateQuaternion(q) {
  return q.length === 4 && Number.isFinite(q[0]) && Number.isFinite(q[1]) && Number.isFinite(q[2]) && Number.isFinite(q[3]);
}

var Quaternion = function (_MathArray) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Quaternion, _MathArray);

  function Quaternion() {
    var _this;

    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Quaternion);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Quaternion).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y, z, w);
    }

    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Quaternion, [{
    key: "fromMatrix3",
    value: function fromMatrix3(m) {
      __WEBPACK_IMPORTED_MODULE_7_gl_quat_fromMat3___default()(this, m);
      return this.check();
    }
  }, {
    key: "fromValues",
    value: function fromValues(x, y, z, w) {
      return this.set(x, y, z, w);
    }
  }, {
    key: "identity",
    value: function identity() {
      __WEBPACK_IMPORTED_MODULE_8_gl_quat_identity___default()(this);
      return this.check();
    }
  }, {
    key: "length",
    value: function length() {
      return __WEBPACK_IMPORTED_MODULE_9_gl_quat_length___default()(this);
    }
  }, {
    key: "squaredLength",
    value: function squaredLength(a) {
      return __WEBPACK_IMPORTED_MODULE_10_gl_quat_squaredLength___default()(this);
    }
  }, {
    key: "dot",
    value: function dot(a, b) {
      if (b !== undefined) {
        throw new Error('Quaternion.dot only takes one argument');
      }

      return __WEBPACK_IMPORTED_MODULE_11_gl_quat_dot___default()(this, a);
    }
  }, {
    key: "rotationTo",
    value: function rotationTo(vectorA, vectorB) {
      __WEBPACK_IMPORTED_MODULE_12_gl_quat_rotationTo___default()(this, vectorA, vectorB);
      return this.check();
    }
  }, {
    key: "add",
    value: function add(a, b) {
      if (b !== undefined) {
        throw new Error('Quaternion.add only takes one argument');
      }

      __WEBPACK_IMPORTED_MODULE_13_gl_quat_add___default()(this, a);
      return this.check();
    }
  }, {
    key: "calculateW",
    value: function calculateW() {
      __WEBPACK_IMPORTED_MODULE_14_gl_quat_calculateW___default()(this, this);
      return this.check();
    }
  }, {
    key: "conjugate",
    value: function conjugate() {
      __WEBPACK_IMPORTED_MODULE_15_gl_quat_conjugate___default()(this, this);
      return this.check();
    }
  }, {
    key: "invert",
    value: function invert() {
      __WEBPACK_IMPORTED_MODULE_16_gl_quat_invert___default()(this, this);
      return this.check();
    }
  }, {
    key: "lerp",
    value: function lerp(a, b, t) {
      __WEBPACK_IMPORTED_MODULE_17_gl_quat_lerp___default()(this, a, b, t);
      return this.check();
    }
  }, {
    key: "multiply",
    value: function multiply(a, b) {
      if (b !== undefined) {
        throw new Error('Quaternion.multiply only takes one argument');
      }

      __WEBPACK_IMPORTED_MODULE_18_gl_quat_multiply___default()(this, this, b);
      return this.check();
    }
  }, {
    key: "normalize",
    value: function normalize() {
      __WEBPACK_IMPORTED_MODULE_19_gl_quat_normalize___default()(this, this);
      return this.check();
    }
  }, {
    key: "rotateX",
    value: function rotateX(rad) {
      __WEBPACK_IMPORTED_MODULE_20_gl_quat_rotateX___default()(this, this, rad);
      return this.check();
    }
  }, {
    key: "rotateY",
    value: function rotateY(rad) {
      __WEBPACK_IMPORTED_MODULE_21_gl_quat_rotateY___default()(this, this, rad);
      return this.check();
    }
  }, {
    key: "rotateZ",
    value: function rotateZ(rad) {
      __WEBPACK_IMPORTED_MODULE_22_gl_quat_rotateZ___default()(this, this, rad);
      return this.check();
    }
  }, {
    key: "scale",
    value: function scale(b) {
      __WEBPACK_IMPORTED_MODULE_23_gl_quat_scale___default()(this, this, b);
      return this.check();
    }
  }, {
    key: "set",
    value: function set(i, j, k, l) {
      __WEBPACK_IMPORTED_MODULE_24_gl_quat_set___default()(this, i, j, k, l);
      return this.check();
    }
  }, {
    key: "setAxisAngle",
    value: function setAxisAngle(axis, rad) {
      __WEBPACK_IMPORTED_MODULE_25_gl_quat_setAxisAngle___default()(this, axis, rad);
      return this.check();
    }
  }, {
    key: "slerp",
    value: function slerp(_ref) {
      var _ref$start = _ref.start,
          start = _ref$start === void 0 ? IDENTITY_QUATERNION : _ref$start,
          target = _ref.target,
          ratio = _ref.ratio;
      __WEBPACK_IMPORTED_MODULE_26_gl_quat_slerp___default()(this, start, target, ratio);
      return this.check();
    }
  }, {
    key: "ELEMENTS",
    get: function get() {
      return 4;
    }
  }, {
    key: "x",
    get: function get() {
      return this[0];
    },
    set: function set(value) {
      return this[0] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "y",
    get: function get() {
      return this[1];
    },
    set: function set(value) {
      return this[1] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "z",
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "w",
    get: function get() {
      return this[3];
    },
    set: function set(value) {
      return this[3] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }]);

  return Quaternion;
}(__WEBPACK_IMPORTED_MODULE_5__lib_math_array__["a" /* default */]);


//# sourceMappingURL=quaternion.js.map

/***/ }),
/* 144 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Vector2; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__lib_vector__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec2_cross__ = __webpack_require__(228);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_gl_vec2_cross___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_gl_vec2_cross__);








var Vector2 = function (_Vector) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Vector2, _Vector);

  function Vector2() {
    var _this;

    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Vector2);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Vector2).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y);
    }

    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Vector2, [{
    key: "cross",
    value: function cross(vector) {
      __WEBPACK_IMPORTED_MODULE_6_gl_vec2_cross___default()(this, this, vector);
      return this.check();
    }
  }, {
    key: "horizontalAngle",
    value: function horizontalAngle() {
      return Math.atan2(this.y, this.x);
    }
  }, {
    key: "verticalAngle",
    value: function verticalAngle() {
      return Math.atan2(this.x, this.y);
    }
  }, {
    key: "operation",
    value: function operation(_operation) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      _operation.apply(void 0, [this, this].concat(args));

      return this.check();
    }
  }, {
    key: "ELEMENTS",
    get: function get() {
      return 2;
    }
  }]);

  return Vector2;
}(__WEBPACK_IMPORTED_MODULE_5__lib_vector__["a" /* default */]);


//# sourceMappingURL=vector2.js.map

/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Vector4; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__lib_vector__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__lib_common__ = __webpack_require__(13);








var Vector4 = function (_Vector) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Vector4, _Vector);

  function Vector4() {
    var _this;

    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Vector4);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Vector4).call(this));

    if (Array.isArray(x) && arguments.length === 1) {
      _this.copy(x);
    } else {
      _this.set(x, y, z, w);
    }

    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Vector4, [{
    key: "applyMatrix4",
    value: function applyMatrix4(m) {
      m.transformVector(this, this);
      return this;
    }
  }, {
    key: "ELEMENTS",
    get: function get() {
      return 4;
    }
  }, {
    key: "z",
    get: function get() {
      return this[2];
    },
    set: function set(value) {
      return this[2] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }, {
    key: "w",
    get: function get() {
      return this[3];
    },
    set: function set(value) {
      return this[3] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__lib_common__["d" /* checkNumber */])(value);
    }
  }]);

  return Vector4;
}(__WEBPACK_IMPORTED_MODULE_5__lib_vector__["a" /* default */]);


//# sourceMappingURL=vector4.js.map

/***/ }),
/* 146 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__init__ = __webpack_require__(289);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_utils_globals__ = __webpack_require__(27);
/* unused harmony reexport VERSION */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__env_globals__ = __webpack_require__(71);
/* unused harmony reexport self */
/* unused harmony reexport window */
/* unused harmony reexport global */
/* unused harmony reexport document */
/* unused harmony reexport process */
/* unused harmony reexport console */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__env_is_browser__ = __webpack_require__(72);
/* unused harmony reexport isBrowser */
/* unused harmony reexport isBrowserMainThread */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__env_get_browser__ = __webpack_require__(288);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_4__env_get_browser__["a"]; });
/* unused harmony reexport isMobile */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__env_is_electron__ = __webpack_require__(73);
/* unused harmony reexport isElectron */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__env_assert__ = __webpack_require__(287);
/* unused harmony reexport assert */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__lib_stats__ = __webpack_require__(290);
/* unused harmony reexport Stats */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__lib_log__ = __webpack_require__(147);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_8__lib_log__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__lib_utils_color__ = __webpack_require__(148);
/* unused harmony reexport COLOR */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__lib_utils_log_to_dom__ = __webpack_require__(294);
/* unused harmony reexport _enableDOMLogging */











/* unused harmony default export */ var _unused_webpack_default_export = (new __WEBPACK_IMPORTED_MODULE_8__lib_log__["a" /* default */]({
  id: 'probe.gl'
}));

//# sourceMappingURL=index.js.map

/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Log; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_globals__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_local_storage__ = __webpack_require__(293);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_timestamp__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__utils_formatters__ = __webpack_require__(149);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_color__ = __webpack_require__(148);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_autobind__ = __webpack_require__(292);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__lib_utils_assert__ = __webpack_require__(291);












var originalConsole = {
  debug: __WEBPACK_IMPORTED_MODULE_4__utils_globals__["d" /* isBrowser */] ? console.debug || console.log : console.log,
  log: console.log,
  info: console.info,
  warn: console.warn,
  error: console.error
};
var DEFAULT_SETTINGS = {
  enabled: false,
  priority: 0
};

function noop() {}

var cache = {};

function getTableHeader(table) {
  for (var key in table) {
    for (var title in table[key]) {
      return title || 'untitled';
    }
  }

  return 'empty';
}

var Log = function () {
  function Log() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        id = _ref.id;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Log);

    this.id = id;
    this.VERSION = __WEBPACK_IMPORTED_MODULE_4__utils_globals__["e" /* VERSION */];
    this._startTs = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_timestamp__["a" /* getTimestamp */])();
    this._deltaTs = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_timestamp__["a" /* getTimestamp */])();
    this.LOG_THROTTLE_TIMEOUT = 0;
    this._storage = new __WEBPACK_IMPORTED_MODULE_5__utils_local_storage__["a" /* default */]("__probe-".concat(this.id, "__"), DEFAULT_SETTINGS);
    this.userData = {};
    this.timeStamp("".concat(this.id, " started"));
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__utils_autobind__["a" /* autobind */])(this);
    Object.seal(this);
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Log, [{
    key: "isEnabled",
    value: function isEnabled() {
      return this._storage.config.enabled;
    }
  }, {
    key: "getPriority",
    value: function getPriority() {
      return this._storage.config.priority;
    }
  }, {
    key: "getLevel",
    value: function getLevel() {
      return this._storage.config.priority;
    }
  }, {
    key: "getTotal",
    value: function getTotal() {
      return Number((__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_timestamp__["a" /* getTimestamp */])() - this._startTs).toPrecision(10));
    }
  }, {
    key: "getDelta",
    value: function getDelta() {
      return Number((__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_timestamp__["a" /* getTimestamp */])() - this._deltaTs).toPrecision(10));
    }
  }, {
    key: "enable",
    value: function enable() {
      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      this._storage.updateConfiguration({
        enabled: enabled
      });

      return this;
    }
  }, {
    key: "setLevel",
    value: function setLevel(level) {
      this._storage.updateConfiguration({
        priority: level
      });

      return this;
    }
  }, {
    key: "warn",
    value: function warn(message) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return this._getLogFunction({
        message: message,
        args: args,
        method: originalConsole.warn,
        once: true
      });
    }
  }, {
    key: "error",
    value: function error(message) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return this._getLogFunction({
        message: message,
        args: args,
        method: originalConsole.error
      });
    }
  }, {
    key: "deprecated",
    value: function deprecated(oldUsage, newUsage) {
      return this.warn("`".concat(oldUsage, "` is deprecated and will be removed in a later version. Use `").concat(newUsage, "` instead"));
    }
  }, {
    key: "removed",
    value: function removed(oldUsage, newUsage) {
      return this.error("`".concat(oldUsage, "` has been removed. Use `").concat(newUsage, "` instead"));
    }
  }, {
    key: "probe",
    value: function probe(priority, message) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        args[_key3 - 2] = arguments[_key3];
      }

      return this._getLogFunction({
        priority: priority,
        message: message,
        args: args,
        method: originalConsole.log,
        time: true,
        once: true
      });
    }
  }, {
    key: "log",
    value: function log(priority, message) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
        args[_key4 - 2] = arguments[_key4];
      }

      return this._getLogFunction({
        priority: priority,
        message: message,
        args: args,
        method: originalConsole.debug
      });
    }
  }, {
    key: "info",
    value: function info(priority, message) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
        args[_key5 - 2] = arguments[_key5];
      }

      return this._getLogFunction({
        priority: priority,
        message: message,
        args: args,
        method: console.info
      });
    }
  }, {
    key: "once",
    value: function once(priority, message) {
      for (var _len6 = arguments.length, args = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
        args[_key6 - 2] = arguments[_key6];
      }

      return this._getLogFunction({
        priority: priority,
        message: message,
        args: args,
        method: originalConsole.debug || originalConsole.info,
        once: true
      });
    }
  }, {
    key: "table",
    value: function table(priority, _table, columns) {
      if (_table) {
        var tag = getTableHeader(_table);
        return this._getLogFunction({
          priority: priority,
          message: _table,
          args: columns && [columns],
          tag: tag,
          method: console.table || noop
        });
      }

      return noop;
    }
  }, {
    key: "image",
    value: function image(_ref2) {
      var priority = _ref2.priority,
          _image = _ref2.image,
          _ref2$message = _ref2.message,
          message = _ref2$message === void 0 ? '' : _ref2$message,
          _ref2$scale = _ref2.scale,
          scale = _ref2$scale === void 0 ? 1 : _ref2$scale;

      if (priority > this.getPriority()) {
        return noop;
      }

      return __WEBPACK_IMPORTED_MODULE_4__utils_globals__["d" /* isBrowser */] ? this._logImageInBrowser({
        image: _image,
        message: message,
        scale: scale
      }) : this._logImageInNode({
        image: _image,
        message: message,
        scale: scale
      });
    }
  }, {
    key: "_logImageInNode",
    value: function _logImageInNode(_ref3) {
      var image = _ref3.image,
          _ref3$message = _ref3.message,
          message = _ref3$message === void 0 ? '' : _ref3$message,
          _ref3$scale = _ref3.scale,
          scale = _ref3$scale === void 0 ? 1 : _ref3$scale;
      var asciify = null;

      try {
        asciify = module.require('asciify-image');
      } catch (error) {}

      if (asciify) {
        return function () {
          return asciify(image, {
            fit: 'box',
            width: "".concat(Math.round(80 * scale), "%")
          }).then(function (data) {
            return console.log(data);
          });
        };
      }

      return noop;
    }
  }, {
    key: "_logImageInBrowser",
    value: function _logImageInBrowser(_ref4) {
      var image = _ref4.image,
          _ref4$message = _ref4.message,
          message = _ref4$message === void 0 ? '' : _ref4$message,
          _ref4$scale = _ref4.scale,
          scale = _ref4$scale === void 0 ? 1 : _ref4$scale;

      if (typeof image === 'string') {
        var img = new Image();

        img.onload = function () {
          var _console;

          var args = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_formatters__["a" /* formatImage */])(img, message, scale);

          (_console = console).log.apply(_console, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(args));
        };

        img.src = image;
        return noop;
      }

      var element = image.nodeName || '';

      if (element.toLowerCase() === 'img') {
        var _console2;

        (_console2 = console).log.apply(_console2, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_formatters__["a" /* formatImage */])(image, message, scale)));

        return noop;
      }

      if (element.toLowerCase() === 'canvas') {
        var _img = new Image();

        _img.onload = function () {
          var _console3;

          return (_console3 = console).log.apply(_console3, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_formatters__["a" /* formatImage */])(_img, message, scale)));
        };

        _img.src = image.toDataURL();
        return noop;
      }

      return noop;
    }
  }, {
    key: "time",
    value: function time(priority, message) {
      return this._getLogFunction({
        priority: priority,
        message: message,
        method: console.time ? console.time : console.info
      });
    }
  }, {
    key: "timeEnd",
    value: function timeEnd(priority, message) {
      return this._getLogFunction({
        priority: priority,
        message: message,
        method: console.timeEnd ? console.timeEnd : console.info
      });
    }
  }, {
    key: "timeStamp",
    value: function timeStamp(priority, message) {
      return this._getLogFunction({
        priority: priority,
        message: message,
        method: console.timeStamp || noop
      });
    }
  }, {
    key: "group",
    value: function group(priority, message) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
        collapsed: false
      };
      opts = this._normalizeArguments({
        priority: priority,
        message: message,
        opts: opts
      });
      var _opts = opts,
          collapsed = _opts.collapsed;
      return this._getLogFunction({
        priority: priority,
        message: message,
        opts: opts,
        method: (collapsed ? console.groupCollapsed : console.group) || console.info
      });
    }
  }, {
    key: "groupCollapsed",
    value: function groupCollapsed(priority, message) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.group(priority, message, Object.assign({}, opts, {
        collapsed: true
      }));
    }
  }, {
    key: "groupEnd",
    value: function groupEnd(priority) {
      return this._getLogFunction({
        priority: priority,
        message: '',
        method: console.groupEnd || noop
      });
    }
  }, {
    key: "withGroup",
    value: function withGroup(priority, message, func) {
      var opts = this._normalizeArguments({
        priority: priority,
        message: message
      });

      this.group(opts);

      try {
        func();
      } finally {
        this.groupEnd(opts.message);
      }
    }
  }, {
    key: "trace",
    value: function trace() {
      if (console.trace) {
        console.trace();
      }
    }
  }, {
    key: "_shouldLog",
    value: function _shouldLog(priority) {
      priority = this._normalizePriority(priority);
      return priority === 0 || this.isEnabled() && this.getPriority() >= priority;
    }
  }, {
    key: "_getElapsedTime",
    value: function _getElapsedTime() {
      var total = this.getTotal();
      var delta = this.getDelta();
      this._deltaTs = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_timestamp__["a" /* getTimestamp */])();
      return {
        total: total,
        delta: delta
      };
    }
  }, {
    key: "_getLogFunction",
    value: function _getLogFunction(opts) {
      if (this._shouldLog(opts.priority)) {
        var _opts2 = opts,
            method = _opts2.method;
        opts = this._parseArguments(opts);
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__lib_utils_assert__["a" /* default */])(method);
        var _opts3 = opts,
            message = _opts3.message;
        var tag = opts.tag || opts.message;

        if (opts.once) {
          if (!cache[tag]) {
            cache[tag] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__utils_timestamp__["a" /* getTimestamp */])();
          } else {
            return noop;
          }
        }

        message = this._decorateMessage(message, opts);
        return method.bind.apply(method, [console, message].concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(opts.args)));
      }

      return noop;
    }
  }, {
    key: "_parseArguments",
    value: function _parseArguments(options) {
      var normOpts = this._normalizeArguments(options);

      var _this$_getElapsedTime = this._getElapsedTime(),
          delta = _this$_getElapsedTime.delta,
          total = _this$_getElapsedTime.total;

      return Object.assign(options, normOpts, {
        delta: delta,
        total: total
      });
    }
  }, {
    key: "_normalizePriority",
    value: function _normalizePriority(priority) {
      var resolvedPriority;

      switch (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(priority)) {
        case 'number':
          resolvedPriority = priority;
          break;

        case 'object':
          resolvedPriority = priority.priority || 0;
          break;

        default:
          resolvedPriority = 0;
      }

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__lib_utils_assert__["a" /* default */])(Number.isFinite(resolvedPriority) && resolvedPriority >= 0);
      return resolvedPriority;
    }
  }, {
    key: "_normalizeArguments",
    value: function _normalizeArguments(_ref5) {
      var priority = _ref5.priority,
          message = _ref5.message,
          _ref5$args = _ref5.args,
          args = _ref5$args === void 0 ? [] : _ref5$args,
          opts = _ref5.opts;
      var newOpts = {
        priority: this._normalizePriority(priority),
        message: message,
        args: args
      };

      switch (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(priority)) {
        case 'string':
        case 'function':
          if (message !== undefined) {
            args.unshift(message);
          }

          Object.assign(newOpts, {
            message: priority
          });
          break;

        case 'object':
          Object.assign(newOpts, priority);
          break;

        default:
      }

      if (typeof newOpts.message === 'function') {
        newOpts.message = this._shouldLog(newOpts.priority) ? newOpts.message() : '';
      }

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__lib_utils_assert__["a" /* default */])(typeof newOpts.message === 'string' || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(newOpts.message) === 'object');
      return Object.assign(newOpts, opts);
    }
  }, {
    key: "_decorateMessage",
    value: function _decorateMessage(message, opts) {
      if (typeof message === 'string') {
        var time = '';

        if (opts.time) {
          var _this$_getElapsedTime2 = this._getElapsedTime(),
              total = _this$_getElapsedTime2.total;

          time = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_formatters__["b" /* leftPad */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__utils_formatters__["c" /* formatTime */])(total));
        }

        message = opts.time ? "".concat(this.id, ": ").concat(time, "  ").concat(message) : "".concat(this.id, ": ").concat(message);
        message = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__utils_color__["a" /* addColor */])(message, opts.color, opts.background);
      }

      return message;
    }
  }, {
    key: "priority",
    set: function set(newPriority) {
      this._storage.updateConfiguration({
        priority: newPriority
      });

      return this;
    },
    get: function get() {
      return this._storage.config.priority;
    }
  }]);

  return Log;
}();


Log.VERSION = __WEBPACK_IMPORTED_MODULE_4__utils_globals__["e" /* VERSION */];
//# sourceMappingURL=log.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(151)(module)))

/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export COLOR */
/* harmony export (immutable) */ __webpack_exports__["a"] = addColor;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__globals__ = __webpack_require__(27);

var COLOR = {
  BLACK: 30,
  RED: 31,
  GREEN: 32,
  YELLOW: 33,
  BLUE: 34,
  MAGENTA: 35,
  CYAN: 36,
  WHITE: 37,
  BRIGHT_BLACK: 90,
  BRIGHT_RED: 91,
  BRIGHT_GREEN: 92,
  BRIGHT_YELLOW: 93,
  BRIGHT_BLUE: 94,
  BRIGHT_MAGENTA: 95,
  BRIGHT_CYAN: 96,
  BRIGHT_WHITE: 97
};

function getColor(color) {
  return typeof color === 'string' ? COLOR[color.toUpperCase()] || COLOR.WHITE : color;
}

function addColor(string, color, background) {
  if (!__WEBPACK_IMPORTED_MODULE_0__globals__["d" /* isBrowser */] && typeof string === 'string') {
    if (color) {
      color = getColor(color);
      string = "\x1B[".concat(color, "m").concat(string, "\x1B[39m");
    }

    if (background) {
      color = getColor(background);
      string = "\x1B[".concat(background + 10, "m").concat(string, "\x1B[49m");
    }
  }

  return string;
}
//# sourceMappingURL=color.js.map

/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = formatTime;
/* harmony export (immutable) */ __webpack_exports__["b"] = leftPad;
/* unused harmony export rightPad */
/* unused harmony export getSISuffix */
/* unused harmony export formatSI */
/* unused harmony export formatValue */
/* harmony export (immutable) */ __webpack_exports__["a"] = formatImage;
function formatTime(ms) {
  var formatted;

  if (ms < 10) {
    formatted = "".concat(ms.toFixed(2), "ms");
  } else if (ms < 100) {
    formatted = "".concat(ms.toFixed(1), "ms");
  } else if (ms < 1000) {
    formatted = "".concat(ms.toFixed(0), "ms");
  } else {
    formatted = "".concat((ms / 1000).toFixed(2), "s");
  }

  return formatted;
}
function leftPad(string) {
  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
  var padLength = Math.max(length - string.length, 0);
  return "".concat(' '.repeat(padLength)).concat(string);
}
function rightPad(string) {
  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;
  var padLength = Math.max(length - string.length, 0);
  return "".concat(string).concat(' '.repeat(padLength));
}

function splitIntoBaseAndExponent(number) {
  var base = number;
  var exponent = 0;

  if (number !== 0) {
    while (base >= 10 || base <= -10) {
      base /= 10;
      exponent++;
    }

    while (base < 1 && base > -1) {
      base *= 10;
      exponent--;
    }
  }

  return {
    base: base,
    exponent: exponent
  };
}

function getSISuffix(multipleOf3) {
  var SI_SUFFIXES = {
    0: '',
    1: 'K',
    2: 'M',
    3: 'G',
    '-1': 'm',
    '-2': 'µ',
    '-3': 'n'
  };
  var key = String(multipleOf3);
  return key in SI_SUFFIXES ? SI_SUFFIXES[key] : "e".concat(multipleOf3 * 3);
}
function formatSI(number) {
  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

  var _splitIntoBaseAndExpo = splitIntoBaseAndExponent(number),
      base = _splitIntoBaseAndExpo.base,
      exponent = _splitIntoBaseAndExpo.exponent;

  var multipleOf3 = Math.floor(exponent / 3);
  var remaining = exponent - multipleOf3 * 3;
  var digits = base * Math.pow(10, remaining);
  return "".concat(digits.toPrecision(precision)).concat(getSISuffix(multipleOf3));
}
function formatValue(v) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var EPSILON = 1e-16;
  var _opts$isInteger = opts.isInteger,
      isInteger = _opts$isInteger === void 0 ? false : _opts$isInteger;

  if (Array.isArray(v) || ArrayBuffer.isView(v)) {
    return formatArrayValue(v, opts);
  }

  if (!Number.isFinite(v)) {
    return String(v);
  }

  if (Math.abs(v) < EPSILON) {
    return isInteger ? '0' : '0.';
  }

  if (isInteger) {
    return v.toFixed(0);
  }

  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {
    return v.toFixed(0);
  }

  var string = v.toPrecision(2);
  var decimal = string.indexOf('.0');
  return decimal === string.length - 2 ? string.slice(0, -1) : string;
}

function formatArrayValue(v, opts) {
  var _opts$maxElts = opts.maxElts,
      maxElts = _opts$maxElts === void 0 ? 16 : _opts$maxElts,
      _opts$size = opts.size,
      size = _opts$size === void 0 ? 1 : _opts$size;
  var string = '[';

  for (var i = 0; i < v.length && i < maxElts; ++i) {
    if (i > 0) {
      string += ",".concat(i % size === 0 ? ' ' : '');
    }

    string += formatValue(v[i], opts);
  }

  var terminator = v.length > maxElts ? '...' : ']';
  return "".concat(string).concat(terminator);
}

function formatImage(image, message, scale) {
  var maxWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 600;
  var imageUrl = image.src.replace(/\(/g, '%28').replace(/\)/g, '%29');

  if (image.width > maxWidth) {
    scale = Math.min(scale, maxWidth / image.width);
  }

  var width = image.width * scale;
  var height = image.height * scale;
  var style = ['font-size:1px;', "padding:".concat(Math.floor(height / 2), "px ").concat(Math.floor(width / 2), "px;"), "line-height:".concat(height, "px;"), "background:url(".concat(imageUrl, ");"), "background-size:".concat(width, "px ").concat(height, "px;"), 'color:transparent;'].join('');
  return ["".concat(message, " %c+"), style];
}
//# sourceMappingURL=formatters.js.map

/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getTimestamp;
/* unused harmony export startTimestamp */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__globals__ = __webpack_require__(27);

function getTimestamp() {
  if (!__WEBPACK_IMPORTED_MODULE_0__globals__["d" /* isBrowser */]) {
    var secondsAndNanoseconds = __WEBPACK_IMPORTED_MODULE_0__globals__["f" /* process */].hrtime();
    return secondsAndNanoseconds[0] + secondsAndNanoseconds[1] / 1e6;
  }

  if (__WEBPACK_IMPORTED_MODULE_0__globals__["g" /* window */].performance) {
    return __WEBPACK_IMPORTED_MODULE_0__globals__["g" /* window */].performance.now();
  }

  return Date.now();
}
var startTimestamp = getTimestamp();
//# sourceMappingURL=timestamp.js.map

/***/ }),
/* 151 */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if(!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true,
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = JSONReadCell;
/* unused harmony export JSONWriteCell */
/* unused harmony export JSON2OBJ */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__quad_edge_js__ = __webpack_require__(300);
// obj.cc - read Wavefront "obj" file format for 3-D models
// This understands only a subset of the file format, namely
//	# comment
//	v <X> <Y> <Z>
//	f <V1> <V2> ... <VN>
//
// Paul Heckbert	10 Feb 1999



// ---------------------------- some data structures used by objReadCell only

class Tface {			// a (temporary) face
  constructor() {
    this.vlist = [];
    this.no = 0;
    this.face = 0;
  }
}

class Tsector {

  constructor(p, f, q) {
    this.p = p; // first ccw vertex
    this.f = f; // intervening face
    this.q = q; // second ccw vertex
  }

};
// in counterclockwise order
// (a linked list of pointers to other vertex)

// (a linked list of pointers to Arcs)
// when done, this (linear) list contains
// the ccw cycle of edges about a vertex

// For example, for vertex v below,
//
//       c------ b------i
//      / \     /      /
//     /   \   /      /
//    /     \ /      /
//   d------ v -----a--h
//    \     / \        |
//     \   /   \       |
//      \ /     \      |
//       e-------f-----g
//
// some valid Arcs are the lists (a,b), (a,b,c), (b,c), (c,d),
// (f,a), (e,f,a,b), etc. because those are the other endpoints of
// edges emanating from v, in counterclockwise (ccw) order.
// An arc always consists of at least two vertices.
// A valid Arclist is any set of disjoint arcs, in arbitrary order.
// When done, the Arclist for this vertex would be a single Arc.
// It would be a cyclic permutation of (a,b,c,d,e,f).
/*
struct Tvert {			// a (temporary) vertex
    int no;			// ??for debugging
    int done;			// is topology fully set & arclist complete?
    Vec3 p;			// position
    Arclist arclist;		// info about the vertices adjacent to this one
    Vertex *vertex;             // final vertex in cell, null if not id. yet
    int instantiated;           // true if identified and instantiated
};
*/

function merge_arc(v, p, q, f) {
  // Merge the arc (p,q) into the list of arcs around vertex v.
  // Cases:
  //  1. ( bef &&  aft) it connects two existing arcs
  //  2. ( bef && !aft) it goes on the end of an existing arc
  //  3. (!bef &&  aft) it goes on the beginning of an existing arc
  //  4. (!bef && !aft) it does not connect with an existing arc
  //List_item<Arc> *a, *aft_item;
  let bef = 0;
  let aft = 0;
  let sector = new Tsector(p, f, q);
  let aft_item;
  v.arclist.forEach(a => {
    // a->obj is an Arc
    const first = a[0];
    const last = a[a.length - 1];
    if (last.q === p) {
      bef = a;
    }
    if (first.p === q) {
      aft = a;
      aft_item = a;
    }
  });
  // now concatenate the three arcs bef, (p,q), and aft
  // where bef and aft might be null
  if (bef) {
    if (aft) { // 1. ( bef &&  aft) it connects two existing arcs
      bef.push(sector); // insert new sector
      if (bef === aft) {
        // done with vertex! connecting these would make arc circular
        v.done = 1;
        return;
      }
      // now we'll merge two arcs in the arclist
      v.arclist.splice(v.arclist.indexOf(aft_item), 1);	// remove following arc
      bef.push.apply(bef, aft);			// and concat it into previous
    } else { // 2. ( bef && !aft) it goes on the end of existing arc
      bef.push(sector);
    }
  } else {
    if (aft) { // 3. (!bef &&  aft) it goes on beg. of existing arc
      aft.unshift(sector);
    } else {		// 4. (!bef && !aft) it doesn't connect w. existing arc
      let arc = [];
      arc.push(sector);
      v.arclist.push(arc);
    }
  }
}

function add_arcs(vlist, f) {
  // vlist is not a circular list, but we need to step through all
  // consecutive triples as if it were circular
  let i = 0;
  let u = vlist[vlist.length -1];
  let v = vlist[i];
  i++;
  let w = vlist[i];

  while (w) {
	  merge_arc(v, w, u, f);
    i++;
    u = v;
    v = w;
    w = vlist[i];
  }

  merge_arc(v, vlist[0], u, f);  // one more that we missed
}

/*
 * identified   <=> Tvert has been associated with a particular Vertex
 * instantiated <=> Tface has been associated with a particular Face AND
 *                  all vertices of the face have been identified
 * instantiated <=> Tvert has been identified AND
 *                  all adjacent Tfaces have been instantiated
 */

/*
 * Return true if a given pair of vertices is connected directly by an edge
 * along a given left face.
 * vertex1, vertex2 -> the vertices to check;
 *                     must be nonnull
 * left             -> the left face to check for;
 *                     must be nonnull
 * <- true if there is an edge from _vertex1_ to _vertex2_ with left face
 *    _left_
 */
function isConnected(vertex1, vertex2, leftFace) {
  // check the orbit of vertex1 for an edge to vertex2
  let ans = 0;
  vertex1.eachEdge(edge => {
    if (edge.Dest() === vertex2 && edge.Left() === leftFace) {
      ans = 1;
    }
  });
  return ans;
}

/*
 * Return the face to the right of a given face around a given vertex.
 * vertex -> the vertex to look for the face around;
 *           must be nonnull
 * left   -> the left face to return the right face of;
 *           must be nonnull
 * <- the face to the right of _left_ around _vertex_;
 *    null if none
 */
function RightFace(vertex, leftFace) {
  // check the left face of each edge in the orbit of the vertex

  let start = vertex.getEdge();
  let scan  = start;

  do {
    if (scan.Left() === leftFace) {
      return scan.Right();
    }

    scan = scan.Onext();
  } while (scan !== start);
}

/*
 * Return true if a given vertex is adjacent to a given face.
 * face   -> the face to look for the vertex in;
 *           must be nonnull
 * vertex -> the vertex to look for;
 *           must be nonnull
 * <- true if _vertex_ is on _face_
 */
function hasVertex(face, vertex) {
  // check the origin vertex of each edge on the face
  let ans = 0;
  face.eachEdge(e => {
    if (e.Org() === vertex) {
      ans = 1;
    }
  });
  return ans;
}

/*
 * Return true if a given face includes all the identified vertices on a given
 * Tvert list.
 * face  -> the face to check;
 *          must be nonnull
 * vlist -> the vertex list to check against;
 *          must be nonnull
 * <- true if _face_ is adjacent to all the vertices on _vlist_
 */
function hasVertices(face, vlist) {
  // check each vertex on the list
  let hasVertexCurr = (Tvert) => (Tvert.vertex == 0 || hasVertex(face, Tvert.vertex));
  return vlist.every(hasVertexCurr);
}

/*
 * Return a face that can be used to instantiate a given Tface.
 * cell -> the cell to get the face from;
 *         must be nonnull
 * f    -> Tface to get the face for;
 *         must be nonnull
 * <- a face that can be used to instantiate _f_;
 *    null if none are available
 */
function getFace(cell, f) {
  // locate all the unused faces in the cell
  let faces = [];
  let count = 0;

  cell.eachFace(face => {
    if (!face.data && hasVertices(face, f.vlist)) {
      faces.push(face);
    }
  });

  if (faces.length) {
    return faces[0];
  }

  return 0;
}

/*
 * Instantiate a given Tface in a given cell by identifying its vertices.
 * cell -> the cell to instantiate the face in;
 *         must be nonnull
 * f    -> the Tface to instantiate;
 *         must be nonnull
 */
function makeFace(cell, f) {
  // get the face to use for the Tface
  let face = getFace(cell, f);

  f.vlist.forEach((vi, i) => {
    let vertex1 = vi.vertex;
    let vertex2;

    if (vertex1) {
      let vj;
      while (true) {
        i++;
        vj = f.vlist[i];
        if (!vj) {
          i = 0;
          vj = f.vlist[i];
        }
        vertex2 = vj.vertex;

        if (vertex2) {
          break;
        }
      }

      if (!isConnected(vertex1, vertex2, face)) {
        if (vertex1 === vertex2) {
          //debugger;
          console.log('make face edge', vertex1.id, vertex2.id);
          //return;
        }
        let temp = cell.makeFaceEdge(face, vertex1, vertex2);
        if (temp) {
          temp.Right();
        } else {
          debugger;
        }
      }
    }
  });

  // find the first identified vertex

  let vi0 = f.vlist[0];
  let i = 0;

  while (vi0.vertex == 0) {
    i++;
    vi0 = f.vlist[i];
  }

  // identify all the following and preceding vertices

  let vi = vi0;
  let vertex = vi0.vertex;

  while (true) {
    i++
    vi = f.vlist[i];

    if (!vi) {
      i = 0;
      vi = f.vlist[0];
    }

    if (vi == vi0) {
      break;
    }

    let v = vi;

    if (!v.vertex) {
      let right = RightFace(vertex, face);

      v.vertex = cell.makeVertexEdge(vertex, face, right).Dest();
      v.vertex.pos = v.p.slice();
      v.vertex.setId(v.no);
    }

    vertex = v.vertex;
  }

  f.face = face;
  face.setId(f.no);
  face.data = f;
}

/*
 * Instantiate a given identified Tvert in a given cell by instantiating its
 * adjacent faces.
 * cell -> the cell to instantiate the Tvert in;
 *         must be nonnull
 * v    -> the Tvert to instantiate;
 *         must be nonnull
 */

function makeVertex(cell, v) {
  // find the first sector with an identified p vertex
  let i = 0;
  let wi0 = v.arclist[0][i];

  while (!wi0.p.vertex && !wi0.q.vertex) {
    i++;
    wi0 = v.arclist[0][i];
  }

  // instantiate all following sectors of the vertex in counterclockwise order
  let wi = wi0;

  do {
    if (wi.p.vertex || wi.q.vertex) {
      let f = wi.f;
      if (f.face == 0) {
        makeFace(cell, f);
      }
    }
    i++;
    wi = v.arclist[0][i];

    if (!wi) {
      i = 0;
      wi = v.arclist[0][i];
    }

  } while (wi !== wi0);

  v.instantiated = 1;
}


function print_quadedge(verts, faces) {
  // print vertices around each face and vertex currently
  console.log('VERTICES OF EACH FACE:');
  faces.forEach(f => {
    console.log('face', f);
    f.vlist.forEach(vi => {
      console.log(vi, vi.no);
    });
  });

  console.log('VERTICES AROUND EACH VERTEX:');
  verts.forEach(v => {
    console.log('vertex', v.no, v.done, v.arclist);
  });
}

function build_quadedge(verts, faces) {
  let cell = __WEBPACK_IMPORTED_MODULE_0__quad_edge_js__["a" /* Cell */].make();
  let vertex1;

  cell.eachVertex(v => {
    vertex1 = v;
  });

  let v = verts[0];
  v.vertex = vertex1;
  v.vertex.pos = v.p.slice();
  v.vertex.setId(v.no);

  makeFace(cell, v.arclist[0][0].f);

  while (true) {
    let instantiated = 1;
    verts.forEach(v => {
      if (v.vertex != 0 && !v.instantiated) {
        makeVertex(cell, v);
      }
      instantiated = v.instantiated && instantiated;
    });
    if (instantiated) {
      break;
    }
  }

  cell.eachFace(f => f.data = 0);

  return cell;
}

function JSONReadCell(json) {
  let verts = json.v.map((v, i) => {
    return {
      p: v,
      no: i,
      done: 0,
      vertex: 0,
      instantiated: 0,
      arclist: []
    };
  });
  let faces = json.f.map((face, i) => {
    let f = new Tface();
    f.face = 0;
    f.no = i;
    face.forEach(index => f.vlist.push(verts[index -1]));
    add_arcs(f.vlist, f);
    return f;
  });

  return build_quadedge(verts, faces);
}

// TODO(nico): build a function that retruns float arrays and normals.
function JSONWriteCell(cell, pos='pos', flatten=false) {
  let ans = { v: [], f: [], n: [] };

  let i = 1;
  cell.eachVertex(v => {
    v.setId(i++);
    if (flatten) {
      ans.v.push.apply(ans.v, v[pos]);
    } else {
      ans.v.push(v.pos);
    }
  });
  cell.eachFace(f => {
    let indices = [];
    f.eachEdge(e => indices.push(e.Org().id + (flatten ? -1 : 0)));
    if (flatten) {
      ans.f.push.apply(ans.f, indices);
    } else {
      ans.f.push(indices);
    }
  });
  return ans;
}

function precisionRound(number, precision) {
  var factor = Math.pow(10, precision);
  return Math.round(number * factor) / factor;
}

function JSON2OBJ(json) {
  let aux3 = [];
  let aux2 = [];
  let vertArray = [];
  json.v.forEach((v, i) => {
    if (!(i % 3) && aux3.length) {
      vertArray.push(aux3.join(' '));
      aux3 = [];
    }
    aux3.push(v);
  });
  if (aux3.length) {
    vertArray.push(aux3.join(' '));
  }
  aux3 = [];
  //const faceArray = json.f.map(f => f.join(' '));
  let faceArray = [];
  let normalArray = [];
  let uvArray = [];

  if (json.f) {
    faceArray = json.f.map(f => f.join(' '));
  } else {
    for (let i = 0; i < vertArray.length; i += 3) {
      faceArray.push(`${i+1}/${i+1}/${i+1} ${i+2}/${i+2}/${i+2} ${i+3}/${i+3}/${i+3}`);
    }
  }

  if (json.n) {
    json.n.forEach((v, i) => {
      if (!(i % 3) && aux3.length) {
        normalArray.push(aux3.join(' '));
        aux3 = [];
      }
      aux3.push(v);
    });
    if (aux3.length) {
      normalArray.push(aux3.join(' '));
    }
    aux3 = [];
  }

  if (json.uvs) {
    json.uvs.forEach((v, i) => {
      if (!(i % 2) && aux2.length) {
        uvArray.push(aux2.join(' '));
        aux2 = [];
      }
      aux2.push(v);
    });
    if (aux2.length) {
      uvArray.push(aux2.join(' '));
    }
    aux2 = [];
  }

  const verts = 'v ' + vertArray.join('\nv ') + '\n';
  const faces = 'f ' + faceArray.join('\nf ');

  let normals = '';
  if (normalArray.length) {
    normals = 'vn ' + normalArray.join('\nvn ') + '\n';
  }

  let uvs = '';
  if (uvArray.length) {
    uvs = 'vt ' + uvArray.join('\nvt ') + '\n';
  }
  return verts + normals + uvs + faces;
}


/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = getSphericalParams;
/* harmony export (immutable) */ __webpack_exports__["e"] = getSphericalPgonMeshData;
/* unused harmony export sphericalTriangle */
/* harmony export (immutable) */ __webpack_exports__["a"] = layout;
/* harmony export (immutable) */ __webpack_exports__["b"] = getLayoutType;
/* harmony export (immutable) */ __webpack_exports__["d"] = getLayoutParams;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math_gl__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__vec3_js__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_mat4__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_mat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__);




const cos = Math.cos;
const sin = Math.sin;
const pi = Math.PI;
const pi2 = pi * 2;
const sqrt = Math.sqrt;
const atan2 = Math.atan2;
const distSq = (p) => p.x * p.x + p.y * p.y;
const asin = Math.asin;
const acos = Math.acos;

function getSphericalParams(layoutType, N) {
  let p1 = 0;
  let p2 = 0;
  let p3 = 0;
  let p4;
  let angle1, angle2, angle3, angle4;
  let m, a, b, c;

  switch (layoutType) {
    case '*NN':
    case 'NN':
      p1 = [0, 1, 0];
      p2 = [0, 0, 1];
      p3 = [sin(pi2/N), 0, cos(pi2/N)];
      p4 = [0, -1, 0];
    break;
    case '*22N':
    case '22N':
    case 'N*':
    case '2*N':
    case 'Nx':
      p1 = [0, 1, 0];
      p2 = [0, 0, 1];
      p3 = [sin(pi2/N), 0, cos(pi2/N)];
    break;

    case '*432':
      p1 = [0, 1, 0];
      [a, b, c] = sphericalTriangle(pi/4, pi/3, pi/2);
      angle1 = b;
      p2 = [0, cos(angle1), sin(angle1)];
      angle2 = c;
      p3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([0, cos(angle2), sin(angle2), 1]);
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi/4, [0, 1, 0]);
      m.transformVector(p3, p3);
      p3 = [p3[0], p3[1], p3[2]];
    break;

    case '432':
      p1 = [0, 1, 0];
      [a, b, c] = sphericalTriangle(pi/4, pi/3, pi/2);
      angle1 = c;
      p2 = [0, cos(angle1), sin(angle1)];
      angle2 = c;
      p3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([0, cos(angle2), sin(angle2), 1]);
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, 2*pi/4, [0, 1, 0]);
      m.transformVector(p3, p3);
      p3 = [p3[0], p3[1], p3[2]];
    break;

    case '*532':
      p1 = [0, 1, 0];
      [a, b, c] = sphericalTriangle(pi/5, pi/3, pi/2);
      angle1 = b;
      p2 = [0, cos(angle1), sin(angle1)];
      angle2 = c;
      p3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([0, cos(angle2), sin(angle2), 1]);
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi/5, [0, 1, 0]);
      m.transformVector(p3, p3);
      p3 = [p3[0], p3[1], p3[2]];
    break;

    case '532':
      p1 = [0, 1, 0];
      [a, b, c] = sphericalTriangle(pi/5, pi/3, pi/2);
      angle1 = c;
      p2 = [0, cos(angle1), sin(angle1)];
      angle2 = c;
      p3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([0, cos(angle2), sin(angle2), 1]);
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, 2*pi/5, [0, 1, 0]);
      m.transformVector(p3, p3);
      p3 = [p3[0], p3[1], p3[2]];
    break;


    case '*332':
      p1 = [0, 1, 0];
      [a, b, c] = sphericalTriangle(pi/3, pi/3, pi/2);
      angle1 = b;
      p2 = [0, cos(angle1), sin(angle1)];
      angle2 = c;
      p3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([0, cos(angle2), sin(angle2), 1]);
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi/3, [0, 1, 0]);
      m.transformVector(p3, p3);
      p3 = [p3[0], p3[1], p3[2]];
    break;

    case '332':
      p1 = [0, 1, 0];
      [a, b, c] = sphericalTriangle(pi/3, pi/3, pi/2);
      angle1 = c;
      p2 = [0, cos(angle1), sin(angle1)];
      angle2 = c;
      p3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([0, cos(angle2), sin(angle2), 1]);
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, 2*pi/3, [0, 1, 0]);
      m.transformVector(p3, p3);
      p3 = [p3[0], p3[1], p3[2]];
    break;

    case '3*2':
      p1 = [0, 1, 0];
      [a, b, c] = sphericalTriangle(pi/4, pi/3, pi/2);
      angle4 = c;
      p4 = [0, cos(angle4), sin(angle4)];
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi/4, [0, 1, 0]);
      m.transformVector(p4, p4);
      // cosine rule to get length of c:
      let aux = acos(cos(pi/4) * cos(pi/4) + sin(pi/4) * sin(pi/4) * cos(pi/2));
      p1 = [0, 1, 0];
      [a, b, c] = [aux, pi/4, pi/4];
      angle1 = c;
      p2 = [0, cos(angle1), sin(angle1)];
      angle2 = c;
      p3 = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([0, cos(angle2), sin(angle2), 1]);
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi/2, [0, 1, 0]);
      m.transformVector(p3, p3);
      p3 = [p3[0], p3[1], p3[2]];

      [p1, p2, p3, p4] = [p2, p1, p4, p3];
    break;

    default:
    break;
  }

  return {
    p1, p2, p3, p4
  }
}



function getSphericalPgonMeshData({orbifold, nSamplesPerSide, nLevels}) {
  const expandedVertices = [];
  const layoutType = getLayoutType(orbifold);
  const {p1, p2, p3, p4} = getSphericalParams(
    layoutType,
    getLayoutParams(layoutType, orbifold)
  );
  let centroid;
  let sides;
  if (p4 !== undefined) {
    centroid = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](p1, __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](p2, __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](p3, p4)));
    centroid = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](centroid, 1/4);
    sides = [[p1, p2], [p2, p4], [p4, p3], [p3, p1]];
  } else {
    centroid = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](p1, __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](p2, p3));
    centroid = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](centroid, 1/3);
    sides = [[p1, p2], [p2, p3], [p3, p1]];
  }

  sides.forEach(([from, to], i) => {
    const intermediatePoints = [];
    const direction = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["a" /* vec3_unit */](__WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](to, __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](from, -1)));
    const dist = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["d" /* vec3_dist */](from, to);
    const delta = dist / (nSamplesPerSide - 1);
    for (let i = 0; i < nSamplesPerSide; i++) {
      let p = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](from, __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](direction, delta * i));
      intermediatePoints.push(p);
    }
    //expandedVertices.push(from);
    expandedVertices.push.apply(expandedVertices, intermediatePoints);
    //expandedVertices.push(to);
  });

  let levels = [];
  for (let l = 1; l < nLevels; l++) {
    let mappedVertices = expandedVertices.map(p => {
      const scale = (nLevels - l) / nLevels;
      let pScaled = __WEBPACK_IMPORTED_MODULE_1__vec3_js__["b" /* vec3_add */](
        __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](centroid,  1- scale),
        __WEBPACK_IMPORTED_MODULE_1__vec3_js__["c" /* vec3_scale */](p, scale)
      );
      return pScaled;
    });
    levels.push(mappedVertices);
  }
  levels.unshift(expandedVertices);
  levels.push([centroid]);
  levels.reverse();
  return levels;
};

function sphericalTriangle(A, B, C) {
  const S = (A + B + C) / 2;
  const a = 2 * asin(sqrt(-cos(S)*cos(S-A) / (sin(B)*sin(C))));
  const b = 2 * asin(sqrt(-cos(S)*cos(S-B) / (sin(C)*sin(A))));
  const c = 2 * asin(sqrt(-cos(S)*cos(S-C) / (sin(A)*sin(B))));
  return [a, b, c];
}


const fixedLayouts = [
  'id',
  '332',
  '432',
  '532',
  '*432',
  '*532',
  '*332',
  '3*2'
];

const paramLayouts = [
  [/\*22\d/, '*22N'],
  [/22\d/, '22N'],
  [/\*\d\d/, '*NN'],
  [/2\*\d/, '2*N'],
  [/\d\*/, 'N*'],
  [/\d\d/, 'NN'],
  [/\dx/, 'Nx']
];

const layouts = {
  '332': layout332,
  '432': layout432,
  '532': layout532,
  '*432': layoutStar432,
  '*532': layoutStar532,
  '*332': layoutStar332,
  '3*2': layout3Star2,
  '*NN': layoutStarNN,
  '*22N': layoutStar22N,
  '22N': layout22N,
  '2*N': layout2StarN,
  'NN': layoutNN,
  'Nx': layoutNx,
  'N*': layoutNStar,
  'id': layoutId
};

function getReflectionMatrix(a, b, c) {
  return new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(
    1 - 2 * a * a, -2 * a * b   , -2 * a * c,    0,
    -2 * a * b   , 1 - 2 * b * b, -2 * b * c,    0,
    -2 * a * c   , -2 * b * c   , 1 - 2 * c * c, 0,
    0            , 0            , 0            , 1
  );
}

function layout(orbifold, callback) {
  // we have  14 cases for layouts, maybe we can handle them case by case.
  const type = getLayoutType(orbifold);
  return layouts[type].apply(null, [callback].concat(getLayoutParams(type, orbifold)));
}

function getLayoutType(orbifold) {
  return orbifold[0];
}

function getLayoutParams(layoutType, orbifold) {
  return orbifold.slice(1);
}

function layoutNN(callback, N) {
  //Just going to rotate by 2pi/N N-1 times...
  let m;
  for (let i = 0; i < N; i++) {
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    if (i > 0) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, i * pi2/N, [0, 1, 0]);
    }
    callback(m);
  }
}

function layoutId(callback) {
  callback(new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity());
}

function layout22N(callback, N) {
  //Just going to rotate by 2pi/N N-1 times...
  let m;
  for (let i = 0; i < N; i++) {
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    if (i > 0) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, i * pi2/N, [0, 1, 0]);
    }
    callback(m);
  }
  // bottom face
  for (let i = 0; i < N; i++) {
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi, [1, 0, 0]);
    if (i > 0) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, i * pi2/N, [0, 1, 0]);
    }
    callback(m);
  }
}

function layoutStarNN(callback, N) {
  let m, index;
  for (let i = 0; i < N; i++) {
    index = i;
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    if ((i % 2) == 1) {
      m = getReflectionMatrix(0, 0, 1);
      index = i-1;
    }
    if (i > 1) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, index * pi2/N, [0, 1, 0]);
    }
    callback(m);
  }
}

function layoutStar22N(callback, N) {
  let m, index;
  for (let i = 0; i < N; i++) {
    index = i;
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    if ((i % 2) == 1) {
      m = getReflectionMatrix(0, 0, 1);
      index = i-1;
    }
    if (i > 1) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, index * pi2/N, [0, 1, 0]);
    }
    callback(m);
  }

  //bottom face
  for (let i = 0; i < N; i++) {
    index = i;
    m = getReflectionMatrix(0, 1, 0);
    if ((i % 2) == 1) {
      m = m.multiplyLeft(getReflectionMatrix(0, 0, 1));
      index = i-1;
    }
    if (i > 1) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, index * pi2/N, [0, 1, 0]);
    }
    callback(m);
  }
}

function layoutNStar(callback, N) {
  let m, index;
  for (let i = 0; i < N; i++) {
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    if (i > 0) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, i * pi2/N, [0, 1, 0]);
    }
    callback(m);
  }

  //bottom face
  for (let i = 0; i < N; i++) {
    index = i;
    m = getReflectionMatrix(0, 1, 0);
    if (i > 0) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, index * pi2/N, [0, 1, 0]);
    }
    callback(m);
  }
}

function layout2StarN(callback, N) {
  let m, index;
  for (let i = 0; i < N; i++) {
    index = i;
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    if ((i % 2) == 1) {
      m = getReflectionMatrix(0, 0, 1);
      index = i-1;
    }
    if (i > 1) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, index * pi2/N, [0, 1, 0]);
    }
    callback(m);
  }

  //bottom face
  for (let i = 0; i < N; i++) {
    index = i - 1;
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi, [1, 0, 0]);
    if ((i % 2) == 1) {
      m = m.multiplyLeft(getReflectionMatrix(0, 0, 1));
      index = i-2;
    }
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, index * pi2/N, [0, 1, 0]);
    callback(m);
  }
}

function layoutNx(callback, N) {
  let m, index;
  for (let i = 0; i < N; i++) {
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    if (i > 0) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, i * pi2/N, [0, 1, 0]);
    }
    callback(m);
  }

  //bottom face
  for (let i = 0; i < N; i++) {
    index = i;
    m = getReflectionMatrix(0, 1, 0);
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, i * pi2/N - pi2/N/2, [0, 1, 0]);
    callback(m);
  }
}

function layoutStar432(callback) {
  let rot = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  [
    [1, 0, 0],
    [1, 0, 0],
    [0, 0, 1],
    [1, 0, 0],
    [1, 0, 0],
    [1, 0, 0]
  ].forEach((vector, j) => {
    let m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    let v = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([1, 0, 0, 1]);
    for (let i = 0; i < 8; i++) {
      let r = getReflectionMatrix(v[0], v[1], v[2]);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi2/8, [0, 1, 0]);
      m.transformVector(v, v);
      let rotClone = rot.clone();
      if ((i % 2) === 0) {
        callback(rot.multiplyRight(r));
      } else {
        callback(rot.multiplyRight(m));
      }
      rot = rotClone;
    }
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(rot, rot, pi/2, vector);
  });
}

function layout432(callback) {
  let [a, b, c] = sphericalTriangle(pi/4, pi/3, pi/2);
  let rot = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  let m;
  let iter = 5;
  let j = 0;
  let flag = 0;
  let global = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  // top face
  while(iter--) {
    let vector = [0, 1, 0];
    let initVector = [1, 0, 0];
    let v = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([...initVector, 1]);
    for (let i = 0; i < 4; i++) {
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, i * pi2/4 - flag * pi/4, [0, 1, 0]);
      let rotClone = rot.clone();
      callback(m.multiplyLeft(rot).multiplyLeft(global));
      rot = rotClone;
    }

    let mr = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(mr, mr, pi2/2 + pi2/4*j - pi/4, vector);
    mr.transformVector(initVector, initVector);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(rot, new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity(), 2*b, initVector);
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi2/4, [0, 1, 0]);
    m.transformVector(initVector);
    j++;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(global, global, pi, [1, 0, 0]);
  let vector = [0, 1, 0];
  let initVector = [1, 0, 0];
  let v = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([...initVector, 1]);
  for (let i = 0; i < 4; i++) {
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, i * pi2/4 - flag * pi/4, [0, 1, 0]);
    callback(m.multiplyLeft(global));
  }
}

function layoutStar532(callback) {
  let [a, b, c] = sphericalTriangle(pi/5, pi/3, pi/2);
  let rot = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  let m;
  let iter = 6;
  let j = 0;
  let global = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  // top face
  while(iter--) {
    let vector = [0, 1, 0];
    let initVector = [1, 0, 0];
    let v = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([...initVector, 1]);
    for (let i = 0; i < 10; i++) {
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, Math.floor(i / 2) * pi2/5, [0, 1, 0]);
      let r = getReflectionMatrix(v[0], v[1], v[2]);
      let rotClone = rot.clone();
      if ((i % 2) === 1) {
        callback(r.multiplyLeft(m).multiplyLeft(rot).multiplyLeft(global));
      } else {
        callback(m.multiplyLeft(rot).multiplyLeft(global));
      }
      rot = rotClone;
    }
    let mr = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(mr, mr, j * 2* pi/5, vector);
    mr.transformVector(initVector, initVector);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(rot, new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity(), 2 * b /*-3*pi/5*/, initVector);
    rot.transformVector(vector, vector);
    rot.multiplyLeft(getReflectionMatrix(vector[0], vector[1], vector[2]));
    j++;
  }
  // bottom face
  iter = 6;
  j = 0;
  rot = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(global, global, pi, [1, 0, 0]);


  while(iter--) {
    let vector = [0, 1, 0];
    let initVector = [1, 0, 0];
    let v = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([...initVector, 1]);
    for (let i = 0; i < 10; i++) {
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, Math.floor(i / 2) * pi2/5, [0, 1, 0]);
      let r = getReflectionMatrix(v[0], v[1], v[2]);
      let rotClone = rot.clone();
      if ((i % 2) === 1) {
        callback(r.multiplyLeft(m).multiplyLeft(rot).multiplyLeft(global));
      } else {
        callback(m.multiplyLeft(rot).multiplyLeft(global));
      }
      rot = rotClone;
    }
    let mr = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(mr, mr, j * 2* pi/5, vector);
    mr.transformVector(initVector, initVector);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(rot, new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity(), 2 * b, initVector);
    rot.transformVector(vector, vector);
    rot.multiplyLeft(getReflectionMatrix(vector[0], vector[1], vector[2]));
    j++;
  }
}

function layout532(callback) {
  let [a, b, c] = sphericalTriangle(pi/5, pi/3, pi/2);
  let rot = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  let m;
  let iter = 6;
  let j = 0;
  let flag = 0;
  let global = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  // top face
  while(iter--) {
    let vector = [0, 1, 0];
    let initVector = [1, 0, 0];
    let v = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([...initVector, 1]);
    for (let i = 0; i < 5; i++) {
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, i * pi2/5 - flag * pi/5, [0, 1, 0]);
      let rotClone = rot.clone();
      callback(m.multiplyLeft(rot).multiplyLeft(global));
      rot = rotClone;
    }
    let mr = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(mr, mr, j * 2* pi/5 - pi/5, vector);
    mr.transformVector(initVector, initVector);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(rot, new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity(), 2 * b, initVector);
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi2/5, [0, 1, 0]);
    m.transformVector(initVector);
    flag = 1;
    j++;
  }
  // bottom face
  iter = 6;
  flag = 0;
  j = 0;
  rot = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(global, global, pi, [1, 0, 0]);

  while(iter--) {
    let vector = [0, 1, 0];
    let initVector = [1, 0, 0];
    let v = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([...initVector, 1]);
    for (let i = 0; i < 5; i++) {
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, i * pi2/5 - flag * pi/5, [0, 1, 0]);
      let rotClone = rot.clone();
      callback(m.multiplyLeft(rot).multiplyLeft(global));
      rot = rotClone;
    }
    let mr = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(mr, mr, j * 2* pi/5 - pi/5, vector);
    mr.transformVector(initVector, initVector);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(rot, new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity(), 2 * b, initVector);
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi2/5, [0, 1, 0]);
    m.transformVector(initVector);
    flag = 1;
    j++;
  }
}


function layoutStar332(callback) {
  let [a, b, c] = sphericalTriangle(pi/3, pi/3, pi/2);
  let rot = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  let m;
  let iter = 4;
  let j = 0;
  let global = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  // top face
  while(iter--) {
    let vector = [0, 1, 0];
    let initVector = [1, 0, 0];
    let v = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([...initVector, 1]);
    for (let i = 0; i < 6; i++) {
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, Math.floor(i / 2) * pi2/3, [0, 1, 0]);
      let r = getReflectionMatrix(v[0], v[1], v[2]);
      let rotClone = rot.clone();
      if ((i % 2) === 1) {
        callback(r.multiplyLeft(m).multiplyLeft(rot).multiplyLeft(global));
      } else {
        callback(m.multiplyLeft(rot).multiplyLeft(global));
      }
      rot = rotClone;
    }
    let mr = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(mr, mr, pi2/2 + pi2/3*j, vector);
    mr.transformVector(initVector, initVector);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(rot, new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity(), c, initVector);
    rot.transformVector(vector, vector);
    rot.multiplyLeft(getReflectionMatrix(vector[0], vector[1], vector[2]));
    j++;
  }
}

function layout332(callback) {
  let [a, b, c] = sphericalTriangle(pi/3, pi/3, pi/2);
  let rot = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  let m;
  let iter = 4;
  let j = 0;
  let flag = 0;
  let global = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  // top face
  while(iter--) {
    let vector = [0, 1, 0];
    let initVector = [1, 0, 0];
    let v = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([...initVector, 1]);
    for (let i = 0; i < 3; i++) {
      m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, i * pi2/3 - flag * pi/3, [0, 1, 0]);
      let rotClone = rot.clone();
      callback(m.multiplyLeft(rot).multiplyLeft(global));
      rot = rotClone;
    }

    let mr = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(mr, mr, pi2/2 + pi2/3*j - pi2/3, vector);
    mr.transformVector(initVector, initVector);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(rot, new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity(), 2*b, initVector);
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi2/3, [0, 1, 0]);
    m.transformVector(initVector);
    flag = 1;
    j++;
  }
}

function layout3Star2(callback) {
  let aux = acos(cos(pi/4) * cos(pi/4) + sin(pi/4) * sin(pi/4) * cos(pi/2));
  let [a, b, c] = [aux, pi/4, pi/4];
  let [ap, bp, cp] = sphericalTriangle(pi/4, pi/3, pi/2);
  let rot = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
  let raux;
  let m;
  let iter = 1;
  let j = 0;
  let flag = 0;
  let global = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();

  // top face
  while(j<2) {
    let global = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    if (j > 0) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(global, global, pi, [1, 0, 0]);
    }
    let vector = [0, 1, 0];
    let initVector = [1, 0, 0];
    let v = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([...initVector, 1]);
    let r = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, -pi/2, [0, 1, 0]);
    for (let i = 0; i < 4; i++) {
      if (i > 0) {
        m.transformVector(v, v);
      }
      //callback(rot);
      raux = r.clone();
      callback(r.multiplyLeft(rot).multiplyLeft(global));
      r = raux;
      r.multiplyLeft(getReflectionMatrix(v[0], v[1], v[2]));
    }

    let corners = [];
    [a, b, c] = sphericalTriangle(pi/4, pi/3, pi/2);
    let p = [0, cos(c), sin(c)];
    let paux = p.slice();
    let corner = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi/4, [0, 1, 0]);
    m.transformVector(p, p);
    corners.push([p, corner.clone()]);

    p = paux.slice();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi/2, [0, 1, 0]);
    m.transformVector(p, p);
    corner.multiplyLeft(getReflectionMatrix(0, 0, 1));
    corners.push([p, corner.clone()]);

    p = paux.slice();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi/2, [0, 1, 0]);
    m.transformVector(p, p);
    corner.multiplyLeft(getReflectionMatrix(1, 0, 0));
    corners.push([p, corner.clone()]);

    p = paux.slice();
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi/2, [0, 1, 0]);
    m.transformVector(p, p);
    corner.multiplyLeft(getReflectionMatrix(0, 0, 1));
    corners.push([p, corner.clone()]);

    corners.forEach(([c, r], i) => {
      let vector = c;
      let initVector = [1, 0, 0];
      let v = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["d" /* Vector4 */]([...initVector, 1]);
      let raux;
      let m = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
      for (let i = 0; i < 3; i++) {
        raux = r.clone();
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_gl_mat4__["rotate"])(m, m, pi2/3, vector);
        callback(r.multiplyLeft(m).multiplyLeft(global));
        r = raux;
      }
    });
    j++;
  }
}


/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return examples; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__polyhedra_js__ = __webpack_require__(54);


let polyN = __WEBPACK_IMPORTED_MODULE_0__polyhedra_js__["a" /* polyhedraNames */][Math.floor(Math.random() * __WEBPACK_IMPORTED_MODULE_0__polyhedra_js__["a" /* polyhedraNames */].length)][0];

// example euclidean groups
const wallpaperGroups = [
    ['o'],
    ['2222'],
    ['**'],
    ['xx'],
    ['*x'],
    ['*2222'],
    ['22*'],
    ['22x'],

  ['2*22'],

  ['442'],

  ['*442'],
    ['4*2'],
    ['333'],
    ['*333'],
    ['3*3'],

  ['632'],

  ['*632']
];

// example spherical groups
const sphericalGroups = [
  ['id'],
  ['332'],
  ['432'],
  ['532'],
  ['*432'],
  ['*532'],
  ['*332'],
  ['3*2'],
  ['*NN', 4],
  ['*22N', 8],
  ['22N', 8],
  ['2*N', 4],
  ['NN', 4],
  ['Nx', 4],
  ['N*', 4]
];

// example hyperbolic groups
const hyperbolicGroups = [
  [3, 8],
  [4, 6],
  [5, 5],
  [6, 4]
];

// Presets
const hyperbolic1 = hyperbolicGroups.map(h => {
  return {
    type: 'hyperbolic',
    orbifold: h,
    iterations: 5,//h[0] == 3 ? 4 : 3,
    motif: {
      color: {
        type: 'brewer',//'url'
        name: 'YlGnBu',
        number: undefined,
        url: 'img/tile21.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          return 'rgb(0.5, 0.5, 0.5)';
        }
      },
      depth: {
        type: 'edge-radial',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 4) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'polygon',
        nSamplesPerSide: 8,
        nLevels: 2
      }
      //mesh: {
        //type: 'sectionSolid',
        //solid: 'icosahedron',
        //flat: 1,
        //nSamplesPerSide: 10,
        //nLevels: 5,
        //stellated: false,
        //optimalMap: false,
        //onIter: (level, sample, face, n) => {
          //return level >= 3;
        //}
      //}
    }
  };
});

const hyperbolic2 = hyperbolicGroups.map(h => {
  return {
    type: 'hyperbolic',
    orbifold: h,
    iterations: h[0] == 3 ? 4 : 3,
    motif: {
      color: {
        type: 'brewer',
        name: undefined,
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          return 'rgb(0.5, 0.5, 0.5)';
        }
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'circle',
        samplePoints: 10,
        nSamplesPerSide: 10,
        radius: 0.02
      }
    }
  };
});

const hyperbolic3 = hyperbolicGroups.map((h, n) => {
  return {
    type: 'hyperbolic',
    orbifold: h,
    iterations: h[0] == 3 ? 4 : 3,
    motif: {
      color: {
        type: 'movie',
        name: 'movie' + (n + 1),
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {}
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'polygon',
        nSamplesPerSide: 10,
        nLevels: 5
      }
    }
  };
});

const hyperbolic4 = Array(4).fill(0)
  .map((n, i) => {
    const l = Math.round(Math.random() * 5) + 6;
  //console.log([i + 3, (i + Math.round(Math.random() * 5) + 2), (i + Math.round(Math.random() * 5) + 2), ((Math.random() > 0.5)) ? 'half' : 'single']);
  return {
    type: 'hyperbolic',
    orbifold: [i + 3, l, l, ((Math.random() > 0.5)) ? 'half' : 'single'],//(i + Math.round(Math.random() * 5) + 2), (i + Math.round(Math.random() * 5) + 2), ((Math.random() > 0.5)) ? 'half' : 'single'],
    motif: {
      color: {
        //type: 'brewer',
        type: 'movie',
        name: 'moviea3',
        //name: 'Spectral', //'Set1', 'Spectral'
        number: l,
        nSamplesPerSide: 10,
        nLevels: l,
        concentric: Math.random() > 0.5,
        pgonSize: 2048,
        steps: 10,
        onStep: (step) => {}
      },
      depth: {
        type: 'radial-gradient',
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'quad'
      }
    }
  };
});

const spherical1 = sphericalGroups.slice(1).map((h, n) => {
  return   {
    type: 'spherical',
    orbifold: h,
    motif: {
      color: {
        type: 'radial-gradient',
        name: 'movie1',
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          return 'rgb(200, 150, 150)';
        }
      },
      depth: {
        type: 'movie',
        name: 'movie8',
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          //const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          //return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'sphericalIter',
        flat: 0,
        iter: 5,
        onIter: (iter) => {
          const bound = [0, 6];
          if (iter >= bound[0] && iter <= bound[1]) {
            //return Math.round(Math.random() * 3);
            return 0;
            //return false;
          }
          return false;
        }
      }
    }
  };
});

const spherical2 = sphericalGroups.slice(1).map((h, n) => {
  return   {
    type: 'spherical',
    orbifold: h,
    motif: {
      color: {
        type: 'radial-gradient',
        name: 'movie1',
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          return 'rgb(200, 150, 150)';
        }
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024*4,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'sphericalPoly',
        flat: 0,
        nSamplesPerSide: 50,
        nLevels: 20,
        onIter: (level, sample) => {
          //return true;
          const nSamplesPerSide = 50;
          const levelOffset = 10;
          const sampleSize = 20;
          const sampleStart = (level * levelOffset) % nSamplesPerSide;
          //const sampleStart = (Math.sin(level / 100 * Math.PI * 2) + 1) / 2 * nSamplesPerSide;
          const sampleEnd = ((sampleStart + sampleSize) % nSamplesPerSide);
          if (sampleEnd < sampleStart) {
            return sample < sampleEnd || sample > sampleStart;
          }
          return sample > sampleStart && sample < sampleEnd;
          if (level === 0) {
            return false;
          }
          return !!(level % 10 <= 1) || !!(sample % 20 <= 1);
          return true;
        }
      }
    }
  };
});

const spherical3 = sphericalGroups.slice(1).map((h, n) => {
  return   {
    type: 'spherical',
    orbifold: h,
    motif: {
      color: {
        type: 'movie',
        name: 'movie8',// + ((n + 1) % 10 + 1),
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {}
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024*4,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'sphericalPoly',
        flat: 1,
        nSamplesPerSide: 30,
        nLevels: 10,
        onIter: (level, sample) => {
          return true;
        }
      }
    }
  };
});

//const polyName = polyhedraNames[Math.floor(Math.random() * polyhedraNames.length)][0];
const polyName = 'tetrahedron';
const solid1 = sphericalGroups.map((h, n) => {
  return   {
    type: 'spherical',
    orbifold: h,
    motif: {
      color: {
        type: 'radial-gradient',
        name: 'movie1',
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          //return 'rgb(200, 150, 150)';
          return 'rgb(250,255,255)';
        }
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'sphericalSolid',
        solid: polyName,
        flat: 1,
        nSamplesPerSide: 20,
        nLevels: 10,
        stellated: false,
        optimalMap: false,
        onIter: (level, sample, face, n) => {
          return level >= 9;
        }
      }
    }
  };
});

const solid2 = [
  // *'tetrahedron',
  // *'cube',
  'octahedron',
  'dodecahedron',
  'icosahedron',

  // *'truncated tetrahedron',
  'cuboctahedron',
  // *'truncated cube',
  //'truncated octahedron',
  //'small rhombicuboctahedron',
  //'great rhombicuboctahedron',
  //'snub cube',
  //'icosidodecahedron',
  //'truncated dodecahedron',
  //'truncated icosahedron',
  //'small rhombicosidodecahedron',
  //'great rhombicosidodecahedron',
  //'snub dodecahedron'

].map(polyName => {
  return   {
    type: 'spherical',
    orbifold: ['id'],
    motif: {
      color: {
        type: 'movie',//'radial-gradient',
        name: 'moviea3',
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          return 'rgb(200, 150, 150)';
          //return 'rgb(180,180,180)';
        }
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'sphericalSolid',
        solid: polyName,
        flat: 1,
        nSamplesPerSide: 50,
        nLevels: 20,
        stellated: true,
        optimalMap: false,
        onIter: (level, sample, face, n) => {
          const nSamplesPerSide = 50;
          const levelOffset = 1;
          const sampleSize = 20;
          //return true;
          //for stellated solids
          const l = 4;
          if (face.elevation) {
            if (sample < nSamplesPerSide) {
              return false;
            }
            if (sample >= nSamplesPerSide * 2 && sample <= nSamplesPerSide * 3) {
              return false;
            }
            if ((sample % nSamplesPerSide) <= (nSamplesPerSide / 10)) {
              return level <= l;
            }
            if (((sample % nSamplesPerSide) <= (nSamplesPerSide / 3))) {
              return true;
            }
            return level <= l;
          } else {
            return level <= l || ((sample % nSamplesPerSide) > 1.9 * nSamplesPerSide / 3  && (sample % nSamplesPerSide) < (8.5*nSamplesPerSide / 10));
          }
          //end
          return false;
        }
      }
    }
  };
});

const euclidean1 = wallpaperGroups.map((w, i) => {
  return   {
    type: 'euclidean',
    orbifold: w,
    iterations: 4,
    motif: {
      color: {
        //type: 'radial-gradient',
        //name: undefined,
        //number: undefined,
        type: 'brewer',
        name: 'Spectral',
        //number: undefined,
        //type: 'url',//'movie',
        //name: 'movie8',
        url: 'img/wave1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const [r, g, b] = [158, 202, 225];
          return 'rgb(' + [r, g, b] + ')';
        }
      },
      depth: {
        type: 'edge-radial',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 2) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      //mesh: {
        //type: 'euclideanSolid',
        //solid: 'tetrahedron',
        //flat: 1,
        //nSamplesPerSide: 5,
        //nLevels: 10,
        //stellated: false,
        //optimalMap: false,
        //onIter: (level, sample, face, n) => {
          //return level > 8;
          //return true;//level % 2;
        //}
      //}
      mesh: {
        type: 'euclideanPoly',
        flat: 1,
        nSamplesPerSide: 3,
        nLevels: 5,
        onIter: (level, sample) => {
          return true;
        }
      }
    }
  };
});

// instances to be rendered (used for testing so far)
let test1 = [
  {
    type: 'euclidean',
    orbifold: ['o'],
    iterations: 8,
    motif: {
      color: {
        type: 'brewer',
        name: undefined,
        number: 4,
        //type: 'movie',
        //name: 'movie3',
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const [r, g, b] = [158, 202, 225];
          return 'rgb(' + [r, g, b] + ')';
        }
      },
      depth: {
        type: 'edge-radial',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 2) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'euclideanPoly',
        flat: 1,
        nSamplesPerSide: 50,
        nLevels: 10,
        onIter: (level, sample) => {
          return level >= 0;
        }
      }
    }
  },
  {
    type: 'spherical',
    orbifold: ['332'],
    motif: {
      color: {
        type: 'movie',
        name: 'movie1',
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {}
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'sphericalIter',
        flat: 1,
        iter: 5,
        onIter: (iter) => {
          const bound = [3, 5];
          if (iter >= bound[0] && iter <= bound[1]) {
            //return Math.round(Math.random() * 3);
            return 1;
            //return false;
          }
          return false;
        }
      }
    }
  },
  {
    type: 'spherical',
    orbifold: ['*332'],
    motif: {
      color: {
        type: 'movie',
        name: 'movie2',
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {}
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'sphericalPoly',
        flat: 1,
        nSamplesPerSide: 50,
        nLevels: 10,
        onIter: (level, sample) => {
          return true;
        }
      }
    }
  },
  {
    type: 'spherical',
    orbifold: ['id'],
    motif: {
      color: {
        type: 'radial-gradient',
        name: 'movie2',
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          return 'rgb(250, 250, 250)';
        }
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'sphericalSolid',
        solid: 'icosahedron',
        flat: 1,
        nSamplesPerSide: 50,
        nLevels: 20,
        stellated: false,
        optimalMap: false,
        onIter: (level, sample, face, n) => {
          return level >= 19;
        }
      }
    }
  },
  {
    type: 'spherical',
    orbifold: ['id'],
    motif: {
      color: {
        type: 'radial-gradient',
        name: 'movie2',
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          return 'rgb(25, 250, 150)';
        }
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'sphericalSolid',
        solid: 'octahedron',
        flat: 1,
        nSamplesPerSide: 50,
        nLevels: 20,
        stellated: true,
        optimalMap: false,
        onIter: (level, sample, face, n) => {
          const nSamplesPerSide = 50;
          const levelOffset = 1;
          const sampleSize = 20;

          //for stellated solids
          const l = 4;
          if (face.elevation) {
            if (sample < nSamplesPerSide) {
              return false;
            }
            if (sample >= nSamplesPerSide * 2 && sample <= nSamplesPerSide * 3) {
              return false;
            }
            if ((sample % nSamplesPerSide) <= (nSamplesPerSide / 10)) {
              return level <= l;
            }
            if (((sample % nSamplesPerSide) <= (nSamplesPerSide / 3))) {
              return true;
            }
            return level <= l;
          } else {
            return level <= l || ((sample % nSamplesPerSide) > 1.9 * nSamplesPerSide / 3  && (sample % nSamplesPerSide) < (8.5*nSamplesPerSide / 10));
          }
          //end
          return false;
        }
      }
    }
  },
  {
    type: 'hyperbolic',
    orbifold: [6, 4, 2, 'full'],
    iterations: 3,
    motif: {
      color: {
        type: 'brewer',
        name: undefined,
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: true,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          return 'rgb(0.5, 0.5, 0.5)';
        }
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'polygon',
        nSamplesPerSide: 10,
        nLevels: 5
      }
    }
  },
  {
    type: 'hyperbolic',
    orbifold: [6, 4],
    iterations: 3,
    motif: {
      color: {
        type: 'brewer',
        name: undefined,
        number: undefined,
        url: 'img/earth1.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          return 'rgb(0.5, 0.5, 0.5)';
        }
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'circle',
        samplePoints: 10,
        nSamplesPerSide: 10,
        radius: 0.01
      }
    }
  }, {
    type: 'hyperbolic',
    orbifold: [4, 8, 4, 'half'],
    iterations: 3,
    motif: {
      color: {
        type: 'brewer',
        name: undefined,
        number: 5,
        nSamplesPerSide: 10,
        nLevels: 10,
        concentric: true,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {}
      },
      depth: {
        type: 'radial-gradient',
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'quad'
      }
    }
  }

];

let test2 = [
  {
    type: 'euclidean',
    orbifold: ['333'],
    iterations: 2,
    motif: {
      color: {
        type: 'url',
        //name: undefined,
        //number: 4,
        //type: 'movie',
        //name: 'movie3',
        //url: 'img/noise1.png',
        url: 'img/dcfc.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const [r, g, b] = [158, 202, 225];
          return 'rgb(' + [r, g, b] + ')';
        }
      },
      depth: {
        type: 'edge-radial',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 2) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'euclideanPoly',
        flat: 1,
        nSamplesPerSide: 10,
        nLevels: 5,
        onIter: (level, sample) => {
          return level % 2;
        }
      }
    }
  },
  {
    type: 'spherical',
    orbifold: ['*332'],
    motif: {
      color: {
        type: 'url',
        name: 'movie2',
        number: undefined,
        //url: 'img/noise1.png',
        url: 'img/dcfc.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {}
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'sphericalPoly',
        flat: 1,
        nSamplesPerSide: 10,
        nLevels: 5,
        onIter: (level, sample) => {
          return level % 2;
        }
      }
    }
  },
  {
    type: 'hyperbolic',
    orbifold: [6, 4],
    iterations: 3,
    motif: {
      color: {
        type: 'url',
        name: undefined,
        number: undefined,
        //url: 'img/noise1.png',
        url: 'img/dcfc.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          return 'rgb(0.5, 0.5, 0.5)';
        }
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'polygon',
        nSamplesPerSide: 10,
        nLevels: 5,
        onIter: (level, sample) => {
          return level % 2;
        }
      }
    }
  },
  {
    type: 'euclidean',
    orbifold: ['*632'],
    iterations: 2,
    motif: {
      color: {
        type: 'url',
        //name: undefined,
        //number: 4,
        //type: 'movie',
        //name: 'movie3',
        //url: 'img/noise1.png',
        url: 'img/dcfc.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const [r, g, b] = [158, 202, 225];
          return 'rgb(' + [r, g, b] + ')';
        }
      },
      depth: {
        type: 'edge-radial',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 2) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'euclideanPoly',
        flat: 1,
        nSamplesPerSide: 10,
        nLevels: 5,
        onIter: (level, sample) => {
          return level % 2;
        }
      }
    }
  },
  {
    type: 'spherical',
    orbifold: ['*532'],
    motif: {
      color: {
        type: 'url',
        name: 'movie2',
        number: undefined,
        //url: 'img/noise1.png',
        url: 'img/dcfc.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {}
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'sphericalPoly',
        flat: 1,
        nSamplesPerSide: 10,
        nLevels: 5,
        onIter: (level, sample) => {
          return level % 2;
        }
      }
    }
  },
  {
    type: 'hyperbolic',
    orbifold: [3, 8],
    iterations: 3,
    motif: {
      color: {
        type: 'url',
        name: undefined,
        number: undefined,
        //url: 'img/noise1.png',
        url: 'img/dcfc.jpg',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        concentric: false,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          return 'rgb(0.5, 0.5, 0.5)';
        }
      },
      depth: {
        type: 'radial-gradient',
        name: undefined,
        number: undefined,
        url: 'img/black.png',
        movie: null,
        nSamplesPerSide: 10,
        nLevels: 5,
        pgonSize: 1024,
        steps: 10,
        onStep: (step) => {
          const c = Math.ceil(Math.pow((1 - step), 8) * 255/1.5);
          return 'rgb('+ [c, c, c] +')';
        }
      },
      mesh: {
        type: 'polygon',
        nSamplesPerSide: 10,
        nLevels: 5,
        onIter: (level, sample) => {
          return level % 2;
        }
      }
    }
  }
];


//export let examples = euclidean1.slice(11);
//export let examples = hyperbolic1.slice(0, 2);
//export let examples = hyperbolic2;
//export let examples = hyperbolic3;
//export let examples = hyperbolic4;
//export let examples = spherical1;
//export let examples = spherical2;
//export let examples = spherical3;
let examples = solid1.slice(0, 12);
//export let examples = solid2;
//export let examples = euclidean1;
//export let examples = test1;
//export let examples = test2;


/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = downloadSvg;
/* unused harmony export downloadObj */
// construct SVG
const factor = 50;
const delta = factor * 0.08;
// rowNumber / instanceNumber
const svgCommands = [];

const styles = [
  // 0
  {
    'fill': 'white',
    'stroke': 'white',
    'stroke-width': '0.01mm'
  },
  {
    'fill': 'white',
    'stroke': 'white',
    'stroke-width': '0.01mm'
  },
  {
    'fill': 'white',
    'stroke': 'blue',
    'stroke-width': '0.01mm'
  },
  {
    'fill': 'white',
    'stroke': 'red',
    'stroke-width': '0.01mm'
  },
  {
    'fill': 'white',
    'stroke': 'white',
    'stroke-width': '0.01mm'
  },
  {
    'fill': 'white',
    'stroke': 'red',
    'stroke-width': '0.01mm'
  },
  {
    'fill': 'white',
    'stroke': 'red',
    'stroke-width': '0.01mm'
  },
  {
    'fill': 'white',
    'stroke': 'red',
    'stroke-width': '0.01mm'
  },
  {
    'fill': 'white',
    'stroke': 'red',
    'stroke-width': '0.01mm'
  },
  {
    'fill': 'black',
    'stroke': 'red',
    'stroke-width': '0.01mm'
  }
];

//const styles = [
  //// 0
  //{
    //'fill': 'white',
    //'stroke': 'blue',
    //'stroke-width': '0.01mm'
  //},
  //{
    //'fill': 'white',
    //'stroke': 'red',
    //'stroke-width': '0.01mm'
  //},
  //{
    //'fill': 'black',
    //'stroke': 'red',
    //'stroke-width': '0.01mm'
  //},
  //{
    //'fill': 'white',
    //'stroke': 'red',
    //'stroke-width': '0.01mm'
  //},
  //{
    //'fill': 'white',
    //'stroke': 'red',
    //'stroke-width': '0.01mm'
  //},
  //{
    //'fill': 'white',
    //'stroke': 'red',
    //'stroke-width': '0.01mm'
  //},
  //{
    //'fill': 'white',
    //'stroke': 'red',
    //'stroke-width': '0.01mm'
  //},
  //{
    //'fill': 'white',
    //'stroke': 'red',
    //'stroke-width': '0.01mm'
  //},
  //{
    //'fill': 'white',
    //'stroke': 'red',
    //'stroke-width': '0.01mm'
  //},
  //{
    //'fill': 'black',
    //'stroke': 'red',
    //'stroke-width': '0.01mm'
  //}
//];


function downloadSvg(positions, colors) {
  const bbox = {xmin: Infinity, xmax:-Infinity, ymin:Infinity, ymax:-Infinity};
  const updateBBox = (x, y, bbox) => {
    bbox.xmin = bbox.xmin > x ? x : bbox.xmin;
    bbox.ymin = bbox.ymin > y ? y : bbox.ymin;
    bbox.xmax = bbox.xmax < x ? x : bbox.xmax;
    bbox.ymax = bbox.ymax < y ? y : bbox.ymax;
  };

  for (let i = 0; i + 3 < positions.length; i+=3) {
    const [x1, y1] = [positions[i], positions[i+1]];
    const [rowNumber1, instanceNumber1, b1] = [colors[i] -1, colors[i+1], colors[i+2]];

    updateBBox(x1, y1, bbox);

    const [x2, y2] = [positions[i+3], positions[i+4]];
    const [rowNumber2, instanceNumber2, b2] = [colors[i+3] -1, colors[i+4], colors[i+5]];

    updateBBox(x2, y2, bbox);

    if (rowNumber1 == rowNumber2 && instanceNumber1 == instanceNumber2) {
      if (!svgCommands[rowNumber1]) {
        svgCommands[rowNumber1] = [];
      }
      if (!svgCommands[rowNumber1][instanceNumber1]) {
        svgCommands[rowNumber1][instanceNumber1] = [];
      }
      svgCommands[rowNumber1][instanceNumber1].push({x1, y1, x2, y2});
    }
  }

  const clip = 10;
  const abs = Math.abs;
  svgCommands.forEach((rows, rowNumber) => {
    rows.forEach((rowInstance, instanceNumber) => {
      let flag = false;
      let commands = rowInstance.map(({x1, y1, x2, y2}, i) => {
        if (abs(x1) > clip || abs(x2) > clip || abs(y1) > clip || abs(y2) > clip) {
          flag = true;
        }
        let ans = '';
        if (i === 0) {
          ans += `M ${x1*factor} ${y1*factor}`;
        }
        if (rowNumber !== 3 || i < rowInstance.length * 6 / 9 / 2) {
          ans += ` L ${x2*factor} ${y2*factor}`;
        }
        return ans;
      }).join('');
      if (rowNumber !== 3) {
        commands += ' Z';
      }
      const style = Object.entries(styles[rowNumber])
        .map(a => `${a[0]}="${a[1]}"`).join(' ');
      rows[instanceNumber] = flag ? '' : `<path d="${commands}" ${style} />`;
    });
    svgCommands[rowNumber] = rowNumber < 2 ? '' : rows.join('\n');
  });
  svgCommands.reverse();

  // download file
  bbox.x = bbox.xmin * factor - delta;
  bbox.y = bbox.ymin * factor - delta;
  bbox.width = (bbox.xmax - bbox.xmin) * factor + delta * 2;
  bbox.height = (bbox.ymax - bbox.ymin) * factor + delta * 2;

  const blob = new Blob([
    `<svg viewBox="${bbox.x} ${bbox.y} ${bbox.width} ${bbox.height}" xmlns="http://www.w3.org/2000/svg">` +
    //`<rect x="${bbox.x+1}" y="${bbox.y+1}" width="${bbox.width-1}" height="${bbox.height-1}" fill="black" stroke="blue"/>` +
    `<rect x="${-clip*factor+1}" y="${-clip*factor+1}" width="${clip*2*factor-1}" height="${clip*2*factor-1}" fill="black"/>` +
    //`<rect x="${-factor-delta+1}" y="${-factor-delta+1}" width="${(factor+delta)*2-1}" height="${(factor+delta)*2-1}" fill="black" stroke="blue"/>` +
    //`<circle cx="0" cy="0" r="${(factor)}" fill="black" stroke="blue"/>` +
    svgCommands.join('') +
    `</svg>`
  ], {type : 'text/svg'});

  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  const name = 'model.svg';
  link.download = name;
  link.click();
}


//export function downloadSvg(positions, colors) {
  //const bbox = {xmin: Infinity, xmax:-Infinity, ymin:Infinity, ymax:-Infinity};
  //const updateBBox = (x, y, bbox) => {
    //bbox.xmin = bbox.xmin > x ? x : bbox.xmin;
    //bbox.ymin = bbox.ymin > y ? y : bbox.ymin;
    //bbox.xmax = bbox.xmax < x ? x : bbox.xmax;
    //bbox.ymax = bbox.ymax < y ? y : bbox.ymax;
  //};

  //for (let i = 0; i + 3 < positions.length; i+=3) {
    //const [x1, y1] = [positions[i], positions[i+1]];
    //const [rowNumber1, instanceNumber1, b1] = [colors[i] -1, colors[i+1], colors[i+2]];

    //updateBBox(x1, y1, bbox);

    //const [x2, y2] = [positions[i+3], positions[i+4]];
    //const [rowNumber2, instanceNumber2, b2] = [colors[i+3] -1, colors[i+4], colors[i+5]];

    //updateBBox(x2, y2, bbox);

    //if (rowNumber1 == rowNumber2 && instanceNumber1 == instanceNumber2) {
      //if (!svgCommands[rowNumber1]) {
        //svgCommands[rowNumber1] = [];
      //}
      //if (!svgCommands[rowNumber1][instanceNumber1]) {
        //svgCommands[rowNumber1][instanceNumber1] = [];
      //}
      //svgCommands[rowNumber1][instanceNumber1].push({x1, y1, x2, y2});
    //}
  //}
  //svgCommands.forEach((rows, rowNumber) => {
    //rows.forEach((rowInstance, instanceNumber) => {
      //let commands = rowInstance.map(({x1, y1, x2, y2}, i) => {
        //let ans = '';
        //if (i === 0) {
          //ans += `M ${x1*factor} ${y1*factor}`;
        //}
        //ans += ` L ${x2*factor} ${y2*factor}`;
        //return ans;
      //}).join('');
      //commands += ' Z';
      //const style = Object.entries(styles[rowNumber])
        //.map(a => `${a[0]}="${a[1]}"`).join(' ');
      //rows[instanceNumber] = `<path d="${commands}" ${style} />`
    //});
    //svgCommands[rowNumber] = rows.join('\n');
  //});
  //svgCommands.reverse();
  
  //// download file
  //bbox.x = bbox.xmin * factor - delta;
  //bbox.y = bbox.ymin * factor - delta;
  //bbox.width = (bbox.xmax - bbox.xmin) * factor + delta * 2;
  //bbox.height = (bbox.ymax - bbox.ymin) * factor + delta * 2;

  //const blob = new Blob([
    //`<svg viewBox="${bbox.x} ${bbox.y} ${bbox.width} ${bbox.height}" xmlns="http://www.w3.org/2000/svg">` +
    //`<rect x="${bbox.x+1}" y="${bbox.y+1}" width="${bbox.width-1}" height="${bbox.height-1}" fill="black" stroke="blue"/>` +
    ////`<rect x="${-factor-delta+1}" y="${-factor-delta+1}" width="${(factor+delta)*2-1}" height="${(factor+delta)*2-1}" fill="black" stroke="blue"/>` +
    ////`<circle cx="0" cy="0" r="${(factor)}" fill="black" stroke="blue"/>` +
    //svgCommands.join('') +
    //`</svg>`
  //], {type : 'text/svg'});

  //const url = URL.createObjectURL(blob);
  //const link = document.createElement('a');
  //link.href = url;
  //const name = 'model.svg';
  //link.download = name;
  //link.click();
//}

function downloadObj(positions, normals) {
  // construct OBJ from string
  const verticesObj = [];
  const normalsObj = [];
  const facesObj = [];
  const format = (n) => (n*factor).toFixed(3);
  for (let i = 0, j = 0; i < positions.length; i+=9, j+=3) {
    if (isNaN(positions[i]) || isNaN(positions[i+1]) || isNaN(positions[i+2]) ||
      isNaN(positions[i+3]) || isNaN(positions[i+4]) || isNaN(positions[i+5]) ||
      isNaN(positions[i+6]) || isNaN(positions[i+7]) || isNaN(positions[i+8]) ) {
      j-=3;
      continue;
    }
    const a = `v ${format(positions[i])} ${format(positions[i+1])} ${format(positions[i+2])}`;
    const b = `v ${format(positions[i+3])} ${format(positions[i+4])} ${format(positions[i+5])}`;
    const c = `v ${format(positions[i+6])} ${format(positions[i+7])} ${format(positions[i+8])}`;
    if (a == b || b == c || c == a) {
      j-=3;
      continue;
    }

    verticesObj.push(a);
    verticesObj.push(b);
    verticesObj.push(c);

    normalsObj.push(`vn ${normals[i]} ${normals[i+1]} ${normals[i+2]}`);
    normalsObj.push(`vn ${normals[i+3]} ${normals[i+4]} ${normals[i+5]}`);
    normalsObj.push(`vn ${normals[i+6]} ${normals[i+7]} ${normals[i+8]}`);

    facesObj.push(`f ${j+1} ${j+2} ${j+3}`);
  }
  // download file
  const blob = new Blob([
    verticesObj.join('\n') + '\n' +
    //normalsObj.join('\n') + '\n' +
    facesObj.join('\n')
  ], {type : 'text/plain'});

  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  const name = 'model.obj';
  link.download = name;
  link.click();
}


/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_global_window__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_global_window___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_global_window__);
//Timer based animation


const Fx = function(options) {
    this.opt = Object.assign({
      delay: 0,
      duration: 1000,
      transition: function(x) { return x; },
      onCompute: function(){},
      onComplete: function(){}
    }, options || {});
};
/* unused harmony export Fx */


let Queue = Fx.Queue = [];

Fx.prototype = {
  time:null,

  start: function(options) {
    this.opt = Object.assign(this.opt, options || {});
    this.time = Date.now();
    this.animating = true;
    Queue.push(this);
  },

  //perform a step in the animation
  step: function() {
    //if not animating, then return
    if (!this.animating) return;
    let currentTime = Date.now(),
        time = this.time,
        opt = this.opt,
        delay = opt.delay,
        duration = opt.duration,
        delta = 0;
    //hold animation for the delay
    if (currentTime < time + delay) {
      opt.onCompute.call(this, delta);
      return;
    }
    //if in our time window, then execute animation
    if (currentTime < time + delay + duration) {
      delta = opt.transition((currentTime - time - delay) / duration);
      opt.onCompute.call(this, delta);
    } else {
      this.animating = false;
      opt.onCompute.call(this, 1);
      opt.onComplete.call(this);
    }
  }
};

Fx.compute = function(from, to, delta) {
  return from + (to - from) * delta;
};

//Easing equations
Fx.Transition = {
  linear: function(p){
    return p;
  }
};

let Trans = Fx.Transition;

(function(){

  let makeTrans = function(transition, params){
    params = (params && params.length) ? params : [params];
    return Object.assign(transition, {
      easeIn: function(pos){
        return transition(pos, params);
      },
      easeOut: function(pos){
        return 1 - transition(1 - pos, params);
      },
      easeInOut: function(pos){
        return (pos <= 0.5)? transition(2 * pos, params) / 2 : (2 - transition(
            2 * (1 - pos), params)) / 2;
      }
    });
  };

  let transitions = {

    Pow: function(p, x){
      return Math.pow(p, x[0] || 6);
    },

    Expo: function(p){
      return Math.pow(2, 8 * (p - 1));
    },

    Circ: function(p){
      return 1 - Math.sin(Math.acos(p));
    },

    Sine: function(p){
      return 1 - Math.sin((1 - p) * Math.PI / 2);
    },

    Back: function(p, x){
      x = x[0] || 1.618;
      return Math.pow(p, 2) * ((x + 1) * p - x);
    },

    Bounce: function(p){
      let value;
      for ( let a = 0, b = 1; 1; a += b, b /= 2) {
        if (p >= (7 - 4 * a) / 11) {
          value = b * b - Math.pow((11 - 6 * a - 11 * p) / 4, 2);
          break;
        }
      }
      return value;
    },

    Elastic: function(p, x){
      return Math.pow(2, 10 * --p) * Math.cos(20 * p * Math.PI * (x[0] || 1) / 3);
    }

  };

  for (let t in transitions) {
    Trans[t] = makeTrans(transitions[t]);
  }

  ['Quad', 'Cubic', 'Quart', 'Quint'].forEach(function(elem, i){
    Trans[elem] = makeTrans(function(p){
      return Math.pow(p, [
        i + 2
      ]);
    });
  });

})();

//animationTime - function branching
let global = __WEBPACK_IMPORTED_MODULE_0_global_window___default.a,
    checkFxQueue = function() {
      let oldQueue = Queue;
      Queue = [];
      if (oldQueue.length) {
        for (let i = 0, l = oldQueue.length, fx; i < l; i++) {
          fx = oldQueue[i];
          fx.step();
          if (fx.animating) {
            Queue.push(fx);
          }
        }
        Fx.Queue = Queue;
      }
    };

if (global) {
  let found = false;
  ['webkitAnimationTime', 'mozAnimationTime', 'animationTime',
   'webkitAnimationStartTime', 'mozAnimationStartTime', 'animationStartTime'].forEach(function(impl) {
    if (impl in global) {
      Fx.animationTime = function() {
        return global[impl];
      };
      found = true;
    }
  });
  if (!found) {
    Fx.animationTime = Date.now;
  }
}

Fx.update = checkFxQueue;


/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = createSymmetries;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__euclidean_texture_js__ = __webpack_require__(160);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__hyperbolic_texture_js__ = __webpack_require__(164);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__spherical_texture_js__ = __webpack_require__(303);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_luma_gl__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__models_js__ = __webpack_require__(166);







function createSymmetries(gl, state) {
  const {symmetries} = state;
  return new Promise((resolve, reject) => {
    Promise.all(
      symmetries.map(s => createSymmetry(gl, s))
    ).then((res) => {
      resolve({symmetries: res});
    });
  });
}

function createSymmetry(gl, descriptor) {
  const {motif, iterations, type, orbifold} = descriptor;
  const {color, depth, mesh} = motif;
  return new Promise((resolve, reject) => {
    Promise.all(
      [depth, color].map((config) => {
        return textureFactory[type][config.type](gl, config, descriptor);
      })
    ).then((textures) => {
      meshFactory[mesh.type](gl, textures, mesh, descriptor)
        .then(({model, transform}) => {
          resolve({
            model,
            transform,
            textures,
            descriptor
          });
        });
    });
  });
}

const textureFactory = {
  euclidean: __WEBPACK_IMPORTED_MODULE_0__euclidean_texture_js__["a" /* default */],
  hyperbolic: __WEBPACK_IMPORTED_MODULE_1__hyperbolic_texture_js__["a" /* default */],
  spherical: __WEBPACK_IMPORTED_MODULE_2__spherical_texture_js__["a" /* default */]
};

const meshFactory = {
  polygon: __WEBPACK_IMPORTED_MODULE_4__models_js__["a" /* polygonMesh */],
  circle: __WEBPACK_IMPORTED_MODULE_4__models_js__["b" /* circleMesh */],
  sectionSolid: __WEBPACK_IMPORTED_MODULE_4__models_js__["c" /* sectionSolidMesh */],
  quad: __WEBPACK_IMPORTED_MODULE_4__models_js__["d" /* quad */],
  sphericalIter: __WEBPACK_IMPORTED_MODULE_4__models_js__["e" /* sphericalSectionIter */],
  sphericalPoly: __WEBPACK_IMPORTED_MODULE_4__models_js__["f" /* sphericalSectionPoly */],
  sphericalSolid: __WEBPACK_IMPORTED_MODULE_4__models_js__["g" /* sphericalSectionSolid */],
  euclideanPoly: __WEBPACK_IMPORTED_MODULE_4__models_js__["h" /* euclideanSectionPoly */],
  euclideanSolid: __WEBPACK_IMPORTED_MODULE_4__models_js__["i" /* euclideanSectionSolid */]
};




/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_global_window__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_global_window___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_global_window__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_luma_gl__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__luma_gl_constants__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__luma_gl_constants___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__luma_gl_constants__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_math_gl__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__fx_js__ = __webpack_require__(156);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_mat4__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_mat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_gl_mat4__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__config_js__ = __webpack_require__(154);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__motif_js__ = __webpack_require__(157);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__download_js__ = __webpack_require__(155);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__polyhedra_js__ = __webpack_require__(54);
//global window
/* eslint-disable no-console */




















//import Project from 'worker-loader!./project.js';

const state = {
  symmetries: __WEBPACK_IMPORTED_MODULE_6__config_js__["a" /* examples */],
  t: 0,
  factor: 0.95,
  elevation: 0,
  spiral: 0,
  mappings: [0, 0, 0, 0],
  moebius: {
    x: 0,
    y: 0
  },
  center: [0, 0, 0],
  eye: [0, 0, 2.45],
  view: new __WEBPACK_IMPORTED_MODULE_3_math_gl__["a" /* Matrix4 */]().lookAt({
    center: [0, 0, 0],
    eye: [0, 0, 2.45],
    up: [1, 0, 0]
  }),
  model: new __WEBPACK_IMPORTED_MODULE_3_math_gl__["a" /* Matrix4 */](),
  modelSeed: new __WEBPACK_IMPORTED_MODULE_3_math_gl__["a" /* Matrix4 */](),
  projection: null,
  // lighting
  ambient: [0.5, 0.5, 0.5],
  pointLocation: [0, 0, 4],
  pointColor: [0.5, 0.5, 0.5],
  // events
  onDragStart: function(e) {
    let pos = state.pos || {};
    state.pos = pos;
    pos.x = e.screenX;
    pos.y = e.screenY;
    pos.started = true;

    if (!state.moebiusPrev) {
      state.moebiusPrev = {x: 0, y: 0};
    }

    //if (state.shift) {
      // we're going to be rotating the seed that makes up the model
      state.modelSeedClone = state.modelSeed.clone();
    //} else {
      state.modelClone = state.model.clone();
    //}
    return false;
  },
  onDragMove: function(e) {
    let pos = state.pos;
    let phi = state.phi;
    let theta = state.theta;
    let y = -(e.screenY - pos.y) / 200;
    let x = (e.screenX - pos.x) / 200;

    if (state.shift) {
      //if (state.hyperbolic) {
        state.moebius.y = x / 3 / Math.max(1, state.moebius.y) + state.moebiusPrev.y;
        state.moebius.x = -y / 3 / Math.max(1, state.moebius.x) + state.moebiusPrev.x;
        //pos.x = e.screenX;
        //pos.y = e.screenY;
      //} else if (state.spherical) {
        rotateXY(y, x, 'modelSeedClone', 'modelSeed');
      //}
    } else {
      rotateXY(y, x, 'modelClone', 'model');
    }

    return false;
  },
  onDragEnd: function(e) {
    let pos = state.pos;
    let y = (e.screenY - pos.y) / 200;
    let x = (e.screenX - pos.x) / 200;
    state.moebiusPrev.x = state.moebius.x;
    state.moebiusPrev.y = state.moebius.y;
    pos.started = false;

    return false;
  },
  onMouseWheel: function(e) {
    let pos = state.eye;
    let py = pos[1];
    const scale = 0.01;

    pos[2] += e.deltaY * scale;
    state.view = new __WEBPACK_IMPORTED_MODULE_3_math_gl__["a" /* Matrix4 */]().lookAt({
      center: state.center,
      eye: pos,
      up: [1, 0, 0]
    });
  }
};

function rotateXY(phi, theta, clone, model) {
    let earth = state[clone];
    let xVec = [0, 1, 0];
    let zVec =[0, 0, 1];

  state[clone] = earth.clone();

  var m1 = new __WEBPACK_IMPORTED_MODULE_3_math_gl__["a" /* Matrix4 */]();

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_gl_mat4__["rotate"])(m1, m1, phi, xVec);
  m1.multiplyRight(earth);

  var m3 = new __WEBPACK_IMPORTED_MODULE_3_math_gl__["a" /* Matrix4 */]();
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_gl_mat4__["rotate"])(m3, m3, theta, zVec);

  m1.multiplyRight(m3);
  state[model] = m1;
}

const animationLoop = new __WEBPACK_IMPORTED_MODULE_1_luma_gl__["a" /* AnimationLoop */]({
  //glOptions: {
    //webgl2: true
  //debug: true
  //},
  //createFramebuffer: true,
  onInitialize({gl, aspect}) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_luma_gl__["b" /* setParameters */])(gl, {
      clearColor: [0, 0, 0, 0],
      clearDepth: 1,
      depthTest: true,
      depthFunc: __WEBPACK_IMPORTED_MODULE_2__luma_gl_constants___default.a.LEQUAL
    });
    //gl.enable(gl.BLEND);
    //gl.blendFunc(gl.ONE, gl.ONE);
    //gl.blendEquation(GL.FUNC_ADD, GL.FUNC_ADD);

    state.perspective = new __WEBPACK_IMPORTED_MODULE_3_math_gl__["a" /* Matrix4 */]().perspective({
      fov: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_math_gl__["b" /* radians */])(45),
      aspect: __WEBPACK_IMPORTED_MODULE_0_global_window___default.a.innerWidth / __WEBPACK_IMPORTED_MODULE_0_global_window___default.a.innerHeight,
      near: 0.01,
      far: 100
    });

    let canvas = gl.canvas;
    let down = false;
    canvas.addEventListener('mousedown', (e) =>  {
      e.stopPropagation();
      e.preventDefault();
      down = true;
      state.onDragStart(e);
    });
    canvas.addEventListener('mouseup', (e) =>  {
      e.stopPropagation();
      e.preventDefault();
      down = false;
      state.onDragEnd(e);
    });
    canvas.addEventListener('mousemove', (e) =>  {
      e.stopPropagation();
      e.preventDefault();
      if (down) {
        state.onDragMove(e);
      }
    });
    canvas.addEventListener('mousewheel', (e) =>  {
      e.stopPropagation();
      e.preventDefault();
      state.onMouseWheel(e);
    });
    document.body.addEventListener('keyup', (e) => {
      state.shift = false;
    });
    document.body.addEventListener('keydown',(e) => {
      if (e.key == 'Shift') {
        state.shift = true;
      }
      if (e.key == 'c') {

      }
      if (e.key == 'f') {

      }
      if (e.key == 'd') {
        //download
        state.download = true;
      }
      if (e.key == 's') {

      }
      if (e.key == 'u') {
        document.body.classList.toggle('fullscreen');
      }
    });

    document.body.addEventListener('dblclick', (e) => {
      state.moebius = {x:0, y:0};
    });
    document.querySelector('#mapping0').oninput = function () {
      state.mappings[0] = +this.value;
    };
    document.querySelector('#mapping1').oninput = function () {
      state.mappings[1] = +this.value;
    };
    document.querySelector('#mapping2').oninput = function () {
      state.mappings[2] = +this.value;
    };
    document.querySelector('#mapping3').oninput = function () {
      state.mappings[3] = +this.value;
    };
    document.querySelector('#elevation').oninput = function () {
      state.elevation = +this.value;
    };
    document.querySelector('#spiral').oninput = function () {
      state.spiral = +this.value;
    };
    document.querySelector('#margin').oninput = function () {
      state.factor = +this.value;
    };
    document.querySelector('#flat').oninput = function () {
      state.flat = +this.value;
    };

    //return createMotif(gl, state);
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__motif_js__["a" /* createSymmetries */])(gl, state);
  },
  onRender(motif) {
    let {gl, symmetries} = motif;
    //state.symmetries = symmetries;
    gl.clear(__WEBPACK_IMPORTED_MODULE_2__luma_gl_constants___default.a.COLOR_BUFFER_BIT | __WEBPACK_IMPORTED_MODULE_2__luma_gl_constants___default.a.DEPTH_BUFFER_BIT);
    symmetries.forEach(({model, transform, textures, descriptor}, i) => {
      ['depth', 'color'].forEach((prop, j) => {
        const desc = descriptor.motif[prop]
        if (desc.type == 'movie') {
          let t = textures[j];
          let canvas = descriptor.motif.canvas;
          if (!canvas) {
            canvas = descriptor.motif.canvas = document.createElement('canvas');
          }
          canvas.width = desc.movie.videoWidth;
          canvas.height = desc.movie.videoHeight;
          let ctx = canvas.getContext('2d');
          ctx.drawImage(desc.movie, 0, 0);
          t.setImageData({
            data: canvas,
            width: canvas.width,
            height: canvas.height
          });
        }
      });

      //state.modelClone = state.model.clone();
      //state.t += 0.01;
      //state.moebius.x = Math.cos(state.t) * 0.5;
      //state.moebius.y = Math.sin(state.t) * 0.8;
      //state.x = state.x || 0.0001;
      //state.y = state.y || 0.0001;
      //rotateXY(state.y, state.x, 'modelClone', 'model');
      //rotateXY(state.y, state.x, 'modelSeed', 'modelSeed');
      //state.flat = (Math.sin(state.t) + 1) / 2;
      //state.elevation = 1 - (Math.sin(state.t * 2*Math.PI) + 1 + 20) / 22;
      //state.factor = 1;//(Math.sin(state.t * 4*Math.PI) + 1) / 2;

      const size = symmetries.length;
      const wDevicePixelRatio = __WEBPACK_IMPORTED_MODULE_0_global_window___default.a.devicePixelRatio;
      const width = __WEBPACK_IMPORTED_MODULE_0_global_window___default.a.innerWidth * wDevicePixelRatio;
      const height = __WEBPACK_IMPORTED_MODULE_0_global_window___default.a.innerHeight * wDevicePixelRatio;
      const cols = Math.ceil(Math.sqrt(size));
      const rows = Math.ceil(size / cols);
      const x = width/cols;
      const y = height/rows;

      state.perspective = new __WEBPACK_IMPORTED_MODULE_3_math_gl__["a" /* Matrix4 */]().perspective({
        fov: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_math_gl__["b" /* radians */])(45),
        aspect: x/y,
        near: 0.01,
        far: 100
      });

      const uniforms = {
        // Basic projection matrix
        uProjection: state.perspective,
        // Move the eye around the plane
        uView: state.view,
        // Rotate model
        uModel: state.model,
        modelSeed: state.modelSeed,
        factor: state.factor,
        moebius: [state.moebius.x, state.moebius.y],
        elevation: state.elevation,
        spiral: state.spiral,
        mappings: state.mappings,
        flatFace: (state.flat !== undefined) ? state.flat : 1,
        // lighting
        uAmbientColor: state.ambient,
        uPointLightingLocation: state.pointLocation,
        uPointLightingColor: state.pointColor,
      };

      model.setUniforms({
        center: model.props.uniforms.center
      });
      model.setUniforms(uniforms);
      gl.viewport(x * (i % cols), y * (rows - Math.floor(i/cols) - 1), x, y);
      model.needsUpdate = true;
      model.render(uniforms);

      if (state.download) {
        state.download = false;
        if (model.props.uniforms.center) {
          uniforms.center = model.props.uniforms.center;
        }

        transform.run({
          uniforms
        });
        // get positions
        const positionsBuffer = transform.getBuffer('vPosition');
        const positions = new Float32Array(positionsBuffer.byteLength / 4);
        positionsBuffer.bind();
        gl.getBufferSubData(
          gl.ARRAY_BUFFER,
          0, //srcBytesOffset
          positions
        );
        // get normals
        const normalsBuffer = transform.getBuffer('vNormal');
        const normals = new Float32Array(normalsBuffer.byteLength / 4);
        normalsBuffer.bind();
        gl.getBufferSubData(
          gl.ARRAY_BUFFER,
          0, //srcBytesOffset
          normals
        );
        // get colors
        const colorsBuffer = transform.getBuffer('vColor');
        const colors = new Float32Array(colorsBuffer.byteLength / 4);
        colorsBuffer.bind();
        gl.getBufferSubData(
          gl.ARRAY_BUFFER,
          0, //srcBytesOffset
          colors
        );
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__download_js__["a" /* downloadSvg */])(positions, colors);
        //downloadObj(positions, normals);
      }
    });
  }

});

animationLoop.getInfo = () => {
  return `
      <p>
      Symmetry.
      <p>
      Studying Euclidean, Spherical and Hyperbolic symmetry.
    `;
};

/*
 *
 *
 * APPLICATION START
 *
 *
 */

animationLoop.start({canvas: 'lumagl-canvas'});
//img load
// expose on Window for standalone example



/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const {vs, fs} = {
    vs: `\
#define DELTA 0.05
#define EPSILON 0.000001
#define PI 3.1415926535

attribute vec3 positions;
attribute vec3 positions2;
attribute vec3 positions3;

attribute vec2 coords;
attribute vec2 coords2;
attribute vec2 coords3;

attribute vec3 depth;
attribute vec3 cols;
attribute float instanceNumber;

attribute vec4 row1;
attribute vec4 row2;
attribute vec4 row3;

uniform mat4 modelSeed;
uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;
uniform float factor;
uniform float spiral;
uniform vec3 center;
uniform float flatFace;
uniform vec4 texCoords;

uniform sampler2D sDepth;
uniform vec2 moebius;
uniform float elevation;

//0 0 stereo 0
uniform vec4 mappings;

uniform vec3 uPointLightingLocation;
uniform vec3 uPointLightingColor;

varying vec3 color;
varying vec3 vColor;
varying vec2 vUvs1;
varying vec2 vUvs2;
varying vec2 vUvs3;
varying float vDist;
varying vec3 vNormal;
varying vec3 vPosition;

vec3 stereographic(vec3 pos) {
  return vec3(
    pos.z / (1. - pos.y),
    pos.x / (1. - pos.y),
    0
  ) * 0.5;
}

vec3 rotateAxis(vec3 axis, float angle, vec3 position, vec3 centroid) {
  vec3 pos = position - centroid;
  mat3 uxu = mat3(axis.x * axis.x, axis.x * axis.y, axis.x * axis.z,
                  axis.x * axis.y, axis.y * axis.y, axis.y * axis.z,
                  axis.x * axis.z, axis.y * axis.z, axis.z * axis.z);
  mat3 ux = mat3(0, -axis.z, axis.y,
                 axis.z, 0, -axis.x,
                 -axis.y, axis.x, 0);
  mat3 id = mat3(1, 0, 0, 0, 1, 0, 0, 0, 1);
  mat3 transform = cos(angle) * id + sin(angle) * ux + (1. - cos(angle)) * uxu;
  pos = transform * pos;
  pos += centroid;
  return pos;
}

float getZ(vec2 pos, vec3 position) {
  return length(texture2D(sDepth, pos)) * elevation;
}

//TODO(nico):
vec3 spiralize(vec3 pos, vec3 normal, vec3 centroid, float dist, float val) {
  float angle = PI * 2. * (0.1 - clamp(distance(pos, centroid), 0., 0.1)) * 10. * val;
  //float angle = PI * 2. * val * (distance - length(pos));
  //float angle = PI * 2. * val * distance;
  vec3 ans = rotateAxis(normal, angle, pos, centroid);
  return ans;
}

void main(void) {

  mat4 instanceMatrix = mat4(row1,
                             row2,
                             row3,
                             0, 0, 0, 1);

  vec3 trans =  vec3(row1.w, row2.w, row3.w);
  float delta = exp(-(distance(trans.xy, -moebius * 50.))/2. ) * 5.;
  //float delta = clamp(pow(distance(vec2(0, trans.y), -vec2(0, moebius.y) * 50.) / 20., 2.), 0., 1.);
  vDist = 1. - delta;
  //TODO(nico): bottom three are for solids, but the top three are for poly section
  vec3 tpos = (positions - center) * factor + center;
  vec3 tpos2 = (positions2 - center) * factor + center;
  vec3 tpos3 = (positions3 - center) * factor + center;
  //float ft = pow(((1. - vDist) * .1 + .85), .2);
  //vec3 tpos = (positions - center) * ft + center;
  //vec3 tpos2 = (positions2 - center) * ft + center;
  //vec3 tpos3 = (positions3 - center) * ft + center;

  //vec3 tpos = (positions) * factor + center;
  //vec3 tpos2 = (positions2) * factor + center;
  //vec3 tpos3 = (positions3) * factor + center;

  vec3 position = (instanceMatrix * vec4(tpos, 1)).xyz;
  vec3 position2 = (instanceMatrix * vec4(tpos2, 1)).xyz;
  vec3 position3 = (instanceMatrix * vec4(tpos3, 1)).xyz;
  position += trans;
  position2 += trans;
  position3 += trans;
  // one texture per element
  vUvs1 = ((positions.xy - center.xy) / 2.) + 0.5;
  vUvs1.y = 1. - vUvs1.y;
  // one texture across all elements
  float videoScale = 20.;
  vUvs2 = (position.yx + videoScale) / (2. * videoScale);
  vUvs2.x = 1. - vUvs2.x;
  // center point sample texture
  vUvs3 = (center.yx + trans.yx + videoScale) / (2. * videoScale);
  vUvs3.x = 1. - vUvs3.x;

  //position.z += getZ(vUvs1, position) + delta;
  //position2.z += getZ(vUvs1, position2) + delta;
  //position3.z += getZ(vUvs1, position3) + delta;

  //vUvs = coords;

  vec3 diff1 = positions2 - positions;
  vec3 diff2 = positions3 - positions;
  vec3 normalColor = cross(diff1, diff2);
  //compute normal
  diff1 = position2 - position;
  diff2 = position3 - position;
  vec3 normal = normalize(cross(diff1, diff2));
  //float angle = acos(dot(normal, position) / length(normal) / length(position));
  //if (angle < 0.) {
    //angle += PI * 2.;
  //}
  //if ((angle > PI / 2. && angle < 3. * PI / 2.) || normal.z < 0.) {
    //normal = -normal;
  //}

  position = mix(position, stereographic(position), mappings.w);
  position2 = mix(position2, stereographic(position2), mappings.w);
  position3 = mix(position3, stereographic(position3), mappings.w);
  normal = mix(normal, vec3(0, 0, 1), mappings.w);

  vNormal = vec3(0, 0, 1);//normal;
  vColor = (normalize(normalColor) + 1.) / 2.;//vec3(cols.r, instanceNumber, 0);
  vPosition = position;
  color = vec3((min(pow(length(position), 2.), 1.)));
  gl_Position = uProjection * uView * (uModel * vec4(position, 1));
}
`,
    fs: `\
#ifdef GL_ES
precision highp float;
#endif

uniform sampler2D sColor;
uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;

uniform vec3 uPointLightingLocation;
uniform vec3 uPointLightingColor;

varying vec3 color;
varying vec2 vUvs1;
varying vec2 vUvs2;
varying vec2 vUvs3;
varying float vDist;
varying vec3 vNormal;
varying vec3 vPosition;
varying vec3 vColor;

void main(void) {
  vec4 mPosition = uModel * vec4(vPosition, 1.0);
  vec3 lightDirection = normalize(uPointLightingLocation - mPosition.xyz);
  vec4 transformedNormal = uModel * vec4(normalize(vNormal), 0.0);
  float pointLightWeighting = max(dot(transformedNormal.xyz, lightDirection), 0.0);

  vec3 eyeDirection = normalize(-vPosition.xyz);
  vec3 reflectionDirection = reflect(-lightDirection, normalize(vNormal));
  float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), clamp(20., 1., 32.));
  vec3 specularLight = specularLightWeighting * uPointLightingColor;

  vec3 vLightWeighting = uAmbientColor + uPointLightingColor * pointLightWeighting + specularLight;

  vec4 c1 = texture2D(sColor, vUvs1);
  vec4 c2 = texture2D(sColor, vUvs2);
  vec4 c3 = texture2D(sColor, vUvs3);
  vec4 c = c1;//mix(c2, c3, clamp(0., 1., 1.-vDist));
  gl_FragColor = vec4(c.rgb * vLightWeighting * mix(1., .5, 1.-vDist), 1.);
  gl_FragColor = vec4(c.rgb * vLightWeighting, 1.);
  //gl_FragColor = vec4(vColor * vLightWeighting, 1.);
}
`
};
/* harmony export (immutable) */ __webpack_exports__["a"] = vs;

/* harmony export (immutable) */ __webpack_exports__["b"] = fs;





/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_texture_js__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mesh_js__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__layout_js__ = __webpack_require__(57);






function edgeRadialTexture(gl, config, descriptor) {
  return __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["d" /* edgeRadialTexture */](gl, config, descriptor, ({nSamplesPerSide, nLevels}) => {
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__mesh_js__["c" /* getPgonMeshData */])({orbifold: descriptor.orbifold, nSamplesPerSide, nLevels});
  });
}

function edgeTexture(gl, config, descriptor) {
  return __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["e" /* edgeTexture */](gl, config, descriptor, ({nSamplesPerSide, nLevels}) => {
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__mesh_js__["c" /* getPgonMeshData */])({orbifold: descriptor.orbifold, nSamplesPerSide, nLevels});
  });
}

function brewerTexture(gl, config, state) {
  const {centroid, vertices} = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__layout_js__["a" /* getParams */])(state.orbifold[0], state.orbifold.slice(1));
  config.number = (config.number || vertices.length) * 2;
  return __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["f" /* brewerTexture */](gl, config, state, ({nSamplesPerSide, nLevels}) => {
    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__mesh_js__["c" /* getPgonMeshData */])({orbifold: state.orbifold, nSamplesPerSide, nLevels});
  }, {centroid, vertices});
}

/* harmony default export */ __webpack_exports__["a"] = ({
  brewer: brewerTexture,
  movie: __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["a" /* movieTexture */],
  url: __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["b" /* urlTexture */],
  edge: edgeTexture,
  'edge-radial': edgeRadialTexture,
  'radial-gradient': __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["c" /* radialGradientTexture */]
});


/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = layout;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math_gl__ = __webpack_require__(9);


const colorbrewer = __webpack_require__(84);

const cos = Math.cos;
const sin = Math.sin;
const pi = Math.PI;
const pi2 = pi * 2;
const sqrt = Math.sqrt;
const atan2 = Math.atan2;
const distSq = (p) => p.x * p.x + p.y * p.y;

const Edge = Symbol('Edge');
const Vertex = Symbol('Vertex');


function computeMatrices(data) {
  const p = data.p;
  const q = data.q;

  const coshb = cos(pi / q) / sin(pi / p);
  const cosh2b = 2 * coshb * coshb - 1;
  const sinh2b = sqrt(cosh2b * cosh2b - 1);

  const reflectEdgeBisector = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(1, 0, 0, 0,
    0,-1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1);
  const reflectPgonEdge =     new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(-cosh2b, 0,  sinh2b, 0,
    0,       1,  0,      0,
    -sinh2b, 0,  cosh2b, 0,
    0,       0,  0,      1);
  const reflectHypotenuse =   new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().set(cos(pi2/p),  sin(pi2/p), 0, 0,
    sin(pi2/p), -cos(pi2/p), 0, 0,
    0,        0,         1, 0,
    0,        0,         0, 1);

  const rotateP = reflectEdgeBisector.clone().multiplyRight(reflectHypotenuse);
  const rotateQ = reflectHypotenuse.clone().multiplyRight(reflectPgonEdge);
  const rotateEdge = reflectPgonEdge.clone().multiplyRight(reflectEdgeBisector);

  return {
    reflectEdgeBisector,
    reflectPgonEdge,
    reflectHypotenuse,
    rotateP,
    rotateQ,
    rotateEdge
  };
}

function layout([p, q], layerDiff, callback) {
  const {
    reflectEdgeBisector,
    reflectPgonEdge,
    reflectHypotenuse,
    rotateP,
    rotateQ,
    rotateEdge
  } = computeMatrices({p, q});

  drawPattern(layerDiff, callback);

  function drawPattern(layerDiff, callback) {
    let rotateCenter = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["a" /* Matrix4 */]().identity();
    let rotateVertex, T, i, exposedEdges, j, pgonsPerVertex;
    callback(rotateCenter);
    for (let i = 0; i < p; i++) {
      let rot = rotateCenter.clone().multiplyRight(rotateEdge);
      replicatePattern(callback, rot, layerDiff -1, Edge);
      rotateCenter = rotateP.clone().multiplyRight(rotateCenter);
      rotateVertex = rotateQ.clone().multiplyRight(rotateP);
      for (let j = 0; j < q - 3; j++) {
        replicatePattern(callback, rotateVertex.clone().multiplyLeft(rot), layerDiff -1, Vertex);
        rotateVertex = rotateVertex.clone().multiplyLeft(rotateQ);
      }
    }
  }

  function replicatePattern(callback, initialTransform, layerDiff, adjacency) {
    let rotateCenter, rotateVertex, T, i, exposedEdges, j, pgonsPerVertex;
    callback(initialTransform);
    if (layerDiff > 0) {
      if (adjacency === Edge) {
        exposedEdges = p - 3;
      } else {
        exposedEdges = p - 2;
      }
      if (adjacency == Edge) {
        rotateCenter = initialTransform.clone().multiplyRight(rotateP).multiplyRight(rotateP);
      } else {
        rotateCenter = initialTransform.clone();
      }

      for (i = 0; i < exposedEdges; i++) {
        let rot = rotateCenter.clone().multiplyRight(rotateEdge);
        replicatePattern(callback, rot, layerDiff -1, Edge);
        rotateCenter = rotateP.clone().multiplyLeft(rotateCenter);
        if (i < exposedEdges -1) {
          pgonsPerVertex = q - 3;
        } else {
          pgonsPerVertex = q - 4;
        }
        rotateVertex = rotateQ.clone().multiplyRight(rotateP);
        for (j = 0; j < pgonsPerVertex; j++) {
          replicatePattern(callback, rotateVertex.clone().multiplyLeft(rot), layerDiff -1, Vertex);
          rotateVertex = rotateVertex.clone().multiplyLeft(rotateQ);
        }
      }
    }
  }
}


/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const {vs, fs} = {
    vs: `\
#define DELTA 0.05
#define EPSILON 0.0001
#define Ke 1.854
#define PI 3.1415926535

attribute vec3 positions;
attribute vec3 cols;
attribute float instanceNumber;
attribute vec4 row1;
attribute vec4 row2;
attribute vec4 row3;

uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;
uniform float factor;
uniform float spiral;
uniform sampler2D sDepth;
uniform vec2 moebius;
uniform float elevation;
//x=Schwarz-Christoffel, y=?
uniform vec4 mappings;

uniform vec3 uPointLightingLocation;
uniform vec3 uPointLightingColor;

varying vec3 color;
varying vec3 vColor;
varying vec2 vUvs;
varying vec3 vNormal;
varying vec3 vPosition;

// https://en.wikipedia.org/wiki/Complex_number#Multiplication

vec2 prod(vec2 c1, vec2 c2) {
  return vec2(c1.x * c2.x - c1.y * c2.y, c1.y * c2.x + c1.x * c2.y);
}

vec2 inverse(vec2 z) {
  float d = dot(z, z);
  return vec2(z.x, -z.y) / d;
}

// https://en.wikipedia.org/wiki/Complex_logarithm#Definition_of_principal_value

vec2 ln(vec2 c) {
  float theta = atan(c.y, c.x);
  float r = 0.1;
  if (sqrt(dot(c, c)) > EPSILON) {
    r = log(sqrt(dot(c, c)));
  }
  return vec2(r, theta);
}

// https://en.wikipedia.org/wiki/Complex_number#Square_root

vec2 sqrtz(vec2 c) {
  float val = sqrt(dot(c, c));
  float gamma = sqrt((c.x + val) / 2.);
  float delta = sign(c.y) * sqrt(max((-c.x + val), 0.) / 2.);
  return vec2(gamma, delta);
}

// https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Logarithmic_forms

vec2 arccos(vec2 c) {
  return prod(vec2(0, -1), ln(c + sqrtz(prod(c, c) + vec2(-1, 0))));
}

// https://en.wikipedia.org/wiki/Hyperbolic_function

float cosh(float x) {
  return (exp(x) + exp(-x)) / 2.;
}

float sinh(float x) {
  return (exp(x) - exp(-x)) / 2.;
}

// https://en.wikipedia.org/wiki/Trigonometric_functions#Relationship_to_exponential_function_and_complex_numbers

vec2 sinz(vec2 z) {
  float x = z.x;
  float y = z.y;
  return vec2(
    sin(x) * cosh(y),
    cos(x) * sinh(y)
  );
}

vec2 cosz(vec2 z) {
  float x = z.x;
  float y = z.y;
  return vec2(
    cos(x) * cosh(y),
   -sin(x) * sinh(y)
  );
}

// https://en.wikipedia.org/wiki/Carlson_symmetric_form#Numerical_evaluation
// https://hal.inria.fr/hal-01817952/document

vec2 R_f(vec2 x, vec2 y, vec2 z) {
  vec2 xn = x;
  vec2 yn = y;
  vec2 zn = z;

  for (int i = 0; i < 10; i++) {
    vec2 sxn = sqrtz(xn);
    vec2 syn = sqrtz(yn);
    vec2 szn = sqrtz(zn);
    vec2 lambda = prod(sxn, syn) + prod(syn, szn) + prod(szn, sxn);
    xn = (xn + lambda) / 4.;
    yn = (yn + lambda) / 4.;
    zn = (zn + lambda) / 4.;
  }
  xn = inverse(sqrtz(xn));
  return xn;
}

// https://en.wikipedia.org/wiki/Carlson_symmetric_form#Relation_to_the_Legendre_forms

vec2 F(vec2 phi, vec2 k) {
  return prod(
    sinz(phi),
    R_f(
      prod(cosz(phi), cosz(phi)),
      vec2(1, 0) - prod(prod(prod(k, k), sinz(phi)), sinz(phi)),
      vec2(1, 0)
    )
  );
}

// http://archive.bridgesmathart.org/2016/bridges2016-179.pdf
// k => needs to be fixed to be 1/sqrt(2) + i*1/sqrt(2)
// Need to remove the translation args in the end (return)

vec2 schwarz_christoffel(vec2 c) {
  vec2 z = prod(vec2(1./sqrt(2.)), c);
  vec2 acosz = arccos(z);
  acosz.x -= PI / 2.;
  float angle = 3.*PI/2.;
  vec2 F_res = F(acosz, vec2(cos(angle), sin(angle)));
  vec2 ans = prod(-1. / Ke * vec2(1, -1), F_res);
  return ans;// + vec2(1, -1);
}

// upper half plane
vec2 upper_half_plane(vec2 z) {
  vec2 den = inverse(prod(vec2(0, 1), z) + vec2(1, 0));
  vec2 num = z + vec2(0, 1);
  return prod(prod(num, den), vec2(0, 1));
}

vec2 band(vec2 z) {
  vec2 zi = z;
  return prod(ln(vec2(1, 0) - prod(vec2(0, 1), zi)) - ln(vec2(1, 0) + prod(vec2(0, 1), zi)), vec2(0, 1));
}

vec2 klein_beltrami(vec2 z) {
  vec2 zi = z;
  float x = zi.x;
  float y = zi.y;
  float d = dot(zi, zi);
  float k = 2./(d + 1.);
  return vec2(
    k * x,
    k * y
  );
}

vec2 joukowsky(vec2 z) {
  vec2 zi = z;
  float x = zi.x;
  float y = zi.y;
  float d = dot(zi, zi);
  if (d == 0.) {
    return zi;
  }
  return vec2(
    x * (d + 1.) / d,
    y * (d - 1.) / d
  );
}

vec2 spiralize(vec3 pos, float val) {
  float angle = PI * 2. * val * (pos.z - length(pos.xy));
  mat2 rotate = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
  return rotate * pos.xy;
}

float getZ(vec3 pos, vec3 position) {
  float L1 = max(abs(position.x), abs(position.y));
  float L2 = length(position.xy);
  float L3 = abs(position.x);
  float d = mix(L2, L1, mappings.x);
  d = mix(d, L3, mappings.y);
  d = mix(d, L3, mappings.z);
  float factor = (1. - pow(d, 2.));
  factor = mix(factor, d, mappings.y);
  factor = clamp(factor, 0., 1.);
  float base = sin(PI/2. - d * PI / 2.) / 2.;
  //return -length(texture2D(sDepth, vec2((pos.x + 1.) / 2., (pos.y + 1.) / 2.))) * elevation * factor + base;
  return length(texture2D(sDepth, vec2((pos.x + 1.) / 2., (pos.y + 1.) / 2.))) * elevation * factor;
}

//float getZ(vec3 pos, vec3 position) {
  //float L1 = max(abs(position.x), abs(position.y));
  //float L2 = length(position.xy);
  //float d = mix(L2, L1, mappings.x);
  //float factor = (1. - pow(d, 2.));
  //float angle = PI/12.;
  //float height = pow(abs(mod(atan(pos.y, pos.x), angle) - angle/2.) / (angle/2.), .5) * 0.5 + 0.5;
  //float len = length(texture2D(sDepth, vec2((pos.x + 1.) / 2., (pos.y + 1.) / 2.)));
  //if (pos.x == 0. && pos.y == 0.) {
    //height = 1.;
  //}
  //float base = 1. - pow(d, 4.);
  ////return -length(texture2D(sDepth, vec2((pos.x + 1.) / 2., (pos.y + 1.) / 2.))) * elevation * factor + base;
  //return height * len * elevation * factor;
//}


void main(void) {
  float scale = 1.;
  vec3 displacedPositions = vec3(spiralize(positions, spiral), positions.z) * scale;

  mat4 instanceMatrix = mat4(row1,
                             row2,
                             row3,
                             0, 0, 0, 1);

  float sumSquare = dot(displacedPositions, displacedPositions);
  vec4 intermediatePos = vec4(2. * displacedPositions.x / (1. - sumSquare) * factor,
                              2. * displacedPositions.y / (1. - sumSquare) * factor,
                              (1. + sumSquare) / (1. - sumSquare),
                              1);
  intermediatePos = instanceMatrix * intermediatePos;

  float len = length(vec2(intermediatePos.x / (1. + intermediatePos.z), intermediatePos.y / (1. + intermediatePos.z)));

  vec3 position = vec3(
    intermediatePos.x / (1. + intermediatePos.z),
    intermediatePos.y / (1. + intermediatePos.z),
    displacedPositions.z / (1. + log((1. + len) / (1. - len)))
  );

  vec2 num = position.xy + moebius;
  vec2 den = vec2(moebius.x, -moebius.y);
  den = vec2(den.x * position.x - den.y * position.y,
             position.y * den.x + position.x * den.y);
  den.x += 1.;
  float squaredNorm = length(den);
  squaredNorm = squaredNorm * squaredNorm;

  position.x = (num.x * den.x + num.y * den.y) / squaredNorm;
  position.y = (num.y * den.x - num.x * den.y) / squaredNorm;

  vec2 schwarz_christoffel_ans = schwarz_christoffel(position.xy) * 1.5;
  vec2 upper_half_plane_ans = upper_half_plane(position.xy);
  vec2 band_ans = band(position.xy) * .65;
  vec2 joukowsky_ans = joukowsky(position.xy);
  vec2 klein_beltrami_ans = klein_beltrami(position.xy);

  position.xy = mix(schwarz_christoffel_ans, position.xy, 1. - mappings.x);
  position.xy = mix(upper_half_plane_ans, position.xy, 1. - mappings.y);
  position.xy = mix(band_ans, position.xy, 1. - mappings.z);
  //position.xy = mix(joukowsky_ans, position.xy, 1. - mappings.w);
  position.xy = mix(klein_beltrami_ans, position.xy, 1. - mappings.w);

  //TODO(nico): fixme
  position.z = getZ(positions, position);
  //TODO(nico): for wrapping bulatov band
  //position.z = mix(position.z, cos(position.y), mappings.z);
  //position.y = mix(position.y, sin(position.y), mappings.z);

  vec3 right = vec3(positions.x + DELTA, positions.y, 0);
  right.z = getZ(right, position);

  vec3 top = vec3(positions.x, positions.y + DELTA, 0);
  top.z = getZ(top, position);

  right = right - vec3(positions.xy, position.z);
  top = top - vec3(positions.xy, position.z);

  vec3 normal = normalize(cross(right, top));
  if (normal.z < 0.) {
    normal = normal * -1.;
  }

  vPosition = position;
  vColor = vec3(cols.r, instanceNumber, 0);
  vNormal = normal;
  //float pDist = positions.z;
  //float theta = atan(positions.y, positions.x);
  //vUvs = positions.xy / pDist;
  //if (abs(positions.x) < 0.001 && abs(positions.y) < 0.001) {
    //vUvs = vec2(0);
  //}
  //vUvs = (vUvs + 1.) / 2.;
  //TODO(nico): Texture offset should be configurable.
  vUvs = (positions.xy + 1.) / 2.;
  vUvs.y = 1. - vUvs.y;
  //vUvs = (positions.yx * 3. + 1.) / 2.;
  float degree = pow(dot(1. - length(positions), 1. - length(positions)), 1.);
  color = vec3(abs(position.x) * degree, abs(position.y) * degree, degree);
  gl_Position = uProjection * uView * (uModel * vec4(position, 1));
}
`,
    fs: `\
#ifdef GL_ES
precision highp float;
#endif

#define PI 3.1415926535

uniform sampler2D sColor;
uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;

uniform vec3 uPointLightingLocation;
uniform vec3 uPointLightingColor;

varying vec3 color;
varying vec2 vUvs;
varying vec3 vNormal;
varying vec3 vPosition;
varying vec3 vColor;

void main(void) {
  vec4 mPosition = uModel * vec4(vPosition, 1.0);
  vec3 lightDirection = normalize(uPointLightingLocation - mPosition.xyz);
  vec4 transformedNormal = uModel * vec4(normalize(vNormal), 0.0);
  float pointLightWeighting = max(dot(transformedNormal.xyz, lightDirection), 0.0);

  vec3 eyeDirection = normalize(-vPosition.xyz);
  vec3 reflectionDirection = reflect(-lightDirection, normalize(vNormal));
  float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), clamp(20., 1., 32.));
  vec3 specularLight = specularLightWeighting * uPointLightingColor;

  vec3 vLightWeighting = uAmbientColor + uPointLightingColor * pointLightWeighting + specularLight;

  vec4 c = texture2D(sColor, vUvs);
  gl_FragColor = vec4(c.rgb * vLightWeighting, 1.);
  float angle = atan(vUvs.y - .5, vUvs.x - .5);
  if (angle < 0.) {
    angle += PI * 2.;
  }
  //gl_FragColor = mix(vec4(0), vec4(1), sign(mod(angle / (PI / 3.), 2.) - 0.5));
  //gl_FragColor = vec4(1);
}
`
};
/* harmony export (immutable) */ __webpack_exports__["a"] = vs;

/* harmony export (immutable) */ __webpack_exports__["b"] = fs;



/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const {vs, fs} = {
    vs: `\
attribute vec3 positions;

uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;
uniform float factor;
uniform sampler2D sDepth;
varying vec3 vPosition;

void main(void) {
  vPosition = positions;
  gl_Position = uProjection * uView * (uModel * vec4(positions, 1));
  //vPosition = gl_Position.xyz;
}
`,
    fs: `\
#ifdef GL_ES
precision highp float;
#endif

#define DELTA 0.001
#define EPSILON 0.000001
#define Ke 1.854
#define PI 3.1415926535

uniform sampler2D sColor;
uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;

uniform float factor;
uniform vec2 moebius;
uniform float elevation;
//x=Schwarz-Christoffel, y=?
uniform vec4 mappings;
//p, q, r, symmetry type
uniform vec4 orbifold;

uniform vec3 uPointLightingLocation;
uniform vec3 uPointLightingColor;

varying vec3 vPosition;

// https://en.wikipedia.org/wiki/Complex_number#Multiplication

vec2 prod(vec2 c1, vec2 c2) {
  return vec2(c1.x * c2.x - c1.y * c2.y, c1.y * c2.x + c1.x * c2.y);
}

vec2 inverse(vec2 z) {
  float d = dot(z, z);
  return vec2(z.x, -z.y) / d;
}

// https://en.wikipedia.org/wiki/Complex_logarithm#Definition_of_principal_value

vec2 ln(vec2 c) {
  float theta = atan(c.y, c.x);
  float r = 0.;
  if (sqrt(dot(c, c)) > EPSILON) {
    r = log(sqrt(dot(c, c)));
  }
  return vec2(r, theta);
}

// https://en.wikipedia.org/wiki/Complex_number#Square_root

vec2 sqrtz(vec2 c) {
  float val = sqrt(dot(c, c));
  float gamma = sqrt((c.x + val) / 2.);
  float delta = sign(c.y) * sqrt(max((-c.x + val), 0.) / 2.);
  return vec2(gamma, delta);
}

// https://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Logarithmic_forms

vec2 arccos(vec2 c) {
  return prod(vec2(0, -1), ln(c + sqrtz(prod(c, c) + vec2(-1, 0))));
}

// https://en.wikipedia.org/wiki/Hyperbolic_function

float cosh(float x) {
  return (exp(x) + exp(-x)) / 2.;
}

float sinh(float x) {
  return (exp(x) - exp(-x)) / 2.;
}

// https://en.wikipedia.org/wiki/Trigonometric_functions#Relationship_to_exponential_function_and_complex_numbers

vec2 sinz(vec2 z) {
  float x = z.x;
  float y = z.y;
  return vec2(
    sin(x) * cosh(y),
    cos(x) * sinh(y)
  );
}

vec2 cosz(vec2 z) {
  float x = z.x;
  float y = z.y;
  return vec2(
    cos(x) * cosh(y),
   -sin(x) * sinh(y)
  );
}

// https://en.wikipedia.org/wiki/Carlson_symmetric_form#Numerical_evaluation
// https://hal.inria.fr/hal-01817952/document

vec2 R_f(vec2 x, vec2 y, vec2 z) {
  vec2 xn = x;
  vec2 yn = y;
  vec2 zn = z;

  for (int i = 0; i < 10; i++) {
    vec2 sxn = sqrtz(xn);
    vec2 syn = sqrtz(yn);
    vec2 szn = sqrtz(zn);
    vec2 lambda = prod(sxn, syn) + prod(syn, szn) + prod(szn, sxn);
    xn = (xn + lambda) / 4.;
    yn = (yn + lambda) / 4.;
    zn = (zn + lambda) / 4.;
  }
  xn = inverse(sqrtz(xn));
  return xn;
}

// https://en.wikipedia.org/wiki/Carlson_symmetric_form#Relation_to_the_Legendre_forms

vec2 F(vec2 phi, vec2 k) {
  return prod(
    sinz(phi),
    R_f(
      prod(cosz(phi), cosz(phi)),
      vec2(1, 0) - prod(prod(prod(k, k), sinz(phi)), sinz(phi)),
      vec2(1, 0)
    )
  );
}

// http://archive.bridgesmathart.org/2016/bridges2016-179.pdf
// k => needs to be fixed to be 1/sqrt(2) + i*1/sqrt(2)
// Need to remove the translation args in the end (return)

vec2 schwarz_christoffel(vec2 c) {
  vec2 z = prod(vec2(1./sqrt(2.)), c);
  vec2 acosz = arccos(z);
  acosz.x -= PI / 2.;
  float angle = 3.*PI/2.;
  vec2 F_res = F(acosz, vec2(cos(angle), sin(angle)));
  vec2 ans = prod(-1. / Ke * vec2(1, -1), F_res);
  return ans;// + vec2(1, -1);
}

// upper half plane
vec2 upper_half_plane(vec2 z) {
  vec2 den = inverse(prod(vec2(0, 1), z) + vec2(1, 0));
  vec2 num = z + vec2(0, 1);
  return prod(prod(num, den), vec2(1, 0));
}

vec2 band(vec2 z) {
  vec2 zi = z;
  return prod(ln(vec2(1, 0) - prod(vec2(0, 1), zi)) - ln(vec2(1, 0) + prod(vec2(0, 1), zi)), vec2(0, 1));
}

vec2 klein_beltrami(vec2 z) {
  vec2 zi = z;
  float x = zi.x;
  float y = zi.y;
  float d = dot(zi, zi);
  float k = 2./(d + 1.);
  return vec2(
    k * x,
    k * y
  );
}

vec2 joukowsky(vec2 z) {
  vec2 zi = z;
  float x = zi.x;
  float y = zi.y;
  float d = dot(zi, zi);
  if (d == 0.) {
    return zi;
  }
  return vec2(
    x * (d + 1.) / d,
    y * (d - 1.) / d
  );
}

vec3 fold(vec3 p, in vec3 dir, inout int n) {
    float dt = dot(p,dir);
    if (dt < 0.) {
        n = n + 1;
        return p-2. * dt * dir * vec3(1,1,-1);
    }
    return p;
}

void main(void) {
/* /// TODO(nico): adjust for moebius and other conformal mappings ///

  vec2 num = position.xy + moebius;
  vec2 den = vec2(moebius.x, -moebius.y);
  den = vec2(den.x * position.x - den.y * position.y,
             position.y * den.x + position.x * den.y);
  den.x += 1.;
  float squaredNorm = length(den);
  squaredNorm = squaredNorm * squaredNorm;

  position.x = (num.x * den.x + num.y * den.y) / squaredNorm;
  position.y = (num.y * den.x - num.x * den.y) / squaredNorm;

  vec2 schwarz_christoffel_ans = schwarz_christoffel(position.xy) * 1.5;
  vec2 upper_half_plane_ans = upper_half_plane(position.xy);
  vec2 band_ans = band(position.xy) * .65;
  vec2 joukowsky_ans = joukowsky(position.xy);
  vec2 klein_beltrami_ans = klein_beltrami(position.xy);

  position.xy = mix(schwarz_christoffel_ans, position.xy, 1. - mappings.x);
  position.xy = mix(upper_half_plane_ans, position.xy, 1. - mappings.y);
  position.xy = mix(band_ans, position.xy, 1. - mappings.z);
  //position.xy = mix(joukowsky_ans, position.xy, 1. - mappings.w);
  position.xy = mix(klein_beltrami_ans, position.xy, 1. - mappings.w);

*/

  if (length(vPosition.xy) > .985) {
    discard;
    return;
  }
  vec3 vNormal = vec3(0, 0, 1);
  vec4 mPosition = uModel * vec4(vPosition, 1.0);
  vec3 lightDirection = normalize(uPointLightingLocation - mPosition.xyz);
  vec4 transformedNormal = uModel * vec4(normalize(vNormal), 0.0);
  float pointLightWeighting = max(dot(transformedNormal.xyz, lightDirection), 0.0);

  vec3 eyeDirection = normalize(-vPosition.xyz);
  vec3 reflectionDirection = reflect(-lightDirection, normalize(vNormal));
  float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), clamp(20., 1., 32.));
  vec3 specularLight = specularLightWeighting * uPointLightingColor;

  vec3 vLightWeighting = uAmbientColor + uPointLightingColor * pointLightWeighting + specularLight;

// Based on: http://roy.red/generating-spherical-and-hyperbolic-tilings-in-glsl-.html#generating-spherical-and-hyperbolic-tilings-in-glsl

  float p = orbifold.x;
  float q = orbifold.y;
  float r = orbifold.z;
  float space = -1.;
  vec2 z = vPosition.xy;

  vec2 num = z + moebius;
  vec2 den = vec2(moebius.x, -moebius.y);
  den = vec2(den.x * z.x - den.y * z.y,
             z.y * den.x + z.x * den.y);
  den.x += 1.;
  float squaredNorm = length(den);
  squaredNorm = squaredNorm * squaredNorm;

  if (length(moebius) < 1.) {
    z.x = (num.x * den.x + num.y * den.y) / squaredNorm;
    z.y = (num.y * den.x - num.x * den.y) / squaredNorm;
  }

  vec2 schwarz_christoffel_ans = schwarz_christoffel(z) * 1.5;
  vec2 upper_half_plane_ans = upper_half_plane(z);
  vec2 band_ans = band(z) * .65;
  vec2 joukowsky_ans = joukowsky(z);
  vec2 klein_beltrami_ans = klein_beltrami(z);

  z = mix(schwarz_christoffel_ans, z, 1. - mappings.x);
  z = mix(upper_half_plane_ans, z, 1. - mappings.y);
  z = mix(band_ans, z, 1. - mappings.z);
  //z = mix(joukowsky_ans, z, 1. - mappings.w);
  z = mix(klein_beltrami_ans, z, 1. - mappings.w);

  //vec3 w=vec3(2.*z,1.-space*dot(z,z))*1./(1.+space*dot(z,z));
  vec3 w = vec3(2. * z, 1. + dot(z,z)) * 1./(1. - dot(z,z));

  // Calculate cutting planes
  float ab = -cos(PI/p);
  float bc = -cos(PI/q);
  float ac = -cos(PI/r);
  vec3 a = vec3(1, 0, 0);
  vec3 b = vec3(ab, sin(PI/p), 0);
  float c0 = ac;
  float c1 = (bc - b[0] * c0) / b[1];
  vec3 c = vec3(c0, c1, sqrt(abs(1. - c0*c0 - c1*c1)));

  // Fold across the planes a few times
  int n = 0; int m = 0; int k = 0; int flips = 0;
  for (int i=0;i<20;i++){
      w = fold(w,a,k);
      w = fold(w,b,m);
      w = fold(w,c,n);
  }
  flips = n + m + k;
  vec2 v = (vec2(w.x / (1. + w.z), w.y / (1. + w.z)) + 1.) / 2.;
  if (orbifold.w == 1. && mod(float(flips), 2.) != 0.) {
    v.x = 1.-v.x;
    //v.x = -v.x;
  }
  v.y = 1. - v.y;

  // to sample
  vec2 v1 = v + vec2(DELTA, 0);
  vec2 v2 = v + vec2(-DELTA, 0);
  vec2 v3 = v + vec2(0, DELTA);
  vec2 v4 = v + vec2(0, -DELTA);
  vec2 v5 = v + vec2(-DELTA, -DELTA);
  vec2 v6 = v + vec2(DELTA, DELTA);

  //TODO(nico): multiplier of 'v' is the texture zoom. Keep it at 1. for brewer based tex
  vec4 color = texture2D(sColor, v*1.7);// + (texture2D(sColor, v1) + texture2D(sColor, v2) + texture2D(sColor, v3) + texture2D(sColor, v4) + texture2D(sColor, v5) + texture2D(sColor, v6)) / 6.) / 1.5;
  //vec4 color = (texture2D(sColor, v) + (texture2D(sColor, v1) + texture2D(sColor, v2) + texture2D(sColor, v3) + texture2D(sColor, v4) + texture2D(sColor, v5) + texture2D(sColor, v6)) / 6.) / 1.5;
  gl_FragColor = mix(vec4(mix(pow(vec3(1. - dot(w,a)), vec3(2.)), color.rgb * vLightWeighting, .95), length(color.rgb)), vec4(0), 0.*float(k + m + n));
  //gl_FragColor = mix(vec4(1), vec4(0), float(mod(float(flips), 2.) != 0.));
}
`
};
/* harmony export (immutable) */ __webpack_exports__["a"] = vs;

/* harmony export (immutable) */ __webpack_exports__["b"] = fs;




/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_texture_js__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mesh_js__ = __webpack_require__(77);




function edgeRadialTexture(gl, config, descriptor) {
  return __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["d" /* edgeRadialTexture */](gl, config, descriptor, __WEBPACK_IMPORTED_MODULE_1__mesh_js__["e" /* getPgonMeshData */]);
}

function edgeTexture(gl, config, descriptor) {
  return __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["e" /* edgeTexture */](gl, config, descriptor, __WEBPACK_IMPORTED_MODULE_1__mesh_js__["e" /* getPgonMeshData */]);
}

function brewerTexture(gl, config, state) {
  const p = state.orbifold[0];
  config.number = config.number || 3;//(Math.random() > 0.5 ? p * 2 : p);
  return __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["f" /* brewerTexture */](gl, config, state, __WEBPACK_IMPORTED_MODULE_1__mesh_js__["e" /* getPgonMeshData */]);
}

/* harmony default export */ __webpack_exports__["a"] = ({
  brewer: brewerTexture,
  movie: __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["a" /* movieTexture */],
  url: __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["b" /* urlTexture */],
  edge: edgeTexture,
  'edge-radial': edgeRadialTexture,
  'radial-gradient': __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["c" /* radialGradientTexture */]
});


/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export distance */
/* unused harmony export add */
/* unused harmony export prod */
/* harmony export (immutable) */ __webpack_exports__["b"] = sub;
/* harmony export (immutable) */ __webpack_exports__["c"] = cross;
/* unused harmony export dot */
/* unused harmony export norm */
/* harmony export (immutable) */ __webpack_exports__["a"] = normalize;
/* unused harmony export rotate */
/* unused harmony export angleBetweenVectors */
const abs = Math.abs;
const sin = Math.sin;
const cos = Math.cos;
const atan2 = Math.atan2;
const acos = Math.acos;
const min = Math.min;
const twoPI = Math.PI * 2;
const pow = Math.pow;

function distance(a, b) {
  const v1 = sub(a, b);
  const v2 = dot(v1, v1);
  return Math.sqrt(v2);
}

function add(a, b) {
  return [
    a[0] + b[0],
    a[1] + b[1],
    a[2] + b[2]
  ];
}

function prod(a, k) {
  return [
    a[0] * k,
    a[1] * k,
    a[2] * k
  ];
}

function sub(a, b) {
  return [
    a[0] - b[0],
    a[1] - b[1],
    a[2] - b[2]
  ];
}

function cross(a, b) {
  return [
    a[1] * b[2] - a[2] * b[1],
    a[2] * b[0] - a[0] * b[2],
    a[0] * b[1] - a[1] * b[0]
  ];
}

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

function norm(a) {
  return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
}

function normalize(a) {
  const len = norm(a);
  return a.map(_ => _ / len);
}

function rotate([v1, v2, v3], [u1, u2, u3], theta) {
  const costheta = cos(theta);
  const sintheta = sin(theta);
  return [
    v1 * (costheta + u1 * u1 * (1 - costheta)) + v2 * (u1 * u2 * (1 - costheta) - u3 * sintheta) + v3 * (u1 * u3 * (1 - costheta) + u2 * sintheta),
    v1 * (u2 * u1 * (1 - costheta) + u3 * sintheta) + v2 * (costheta + u2 * u2 * (1 - costheta)) + v3 * (u2 * u3 * (1 - costheta) - u1 * sintheta),
    v1 * (u3 * u1 * (1 - costheta) - u2 * sintheta) + v2 * (u3 * u2 * (1 - costheta) + u1 * sintheta) + v3 * (costheta + u3 * u3 * (1 - costheta))
  ];
}

function angleBetweenVectors(a, b) {
  const s = norm(cross(a,b))
  const c = dot(a,b)
  return atan2(s, c)
}


/***/ }),
/* 166 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__hyperbolic_mesh_js__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__euclidean_mesh_js__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__spherical_mesh_js__ = __webpack_require__(301);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__hyperbolic_mesh_js__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_0__hyperbolic_mesh_js__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_0__hyperbolic_mesh_js__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__hyperbolic_mesh_js__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_1__euclidean_mesh_js__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_2__spherical_mesh_js__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_2__spherical_mesh_js__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_2__spherical_mesh_js__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_1__euclidean_mesh_js__["b"]; });







/***/ }),
/* 167 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _arrayWithHoles;
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _arrayWithoutHoles;
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _construct;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__setPrototypeOf__ = __webpack_require__(79);


function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__setPrototypeOf__["a" /* default */])(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _iterableToArray;
function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _iterableToArrayLimit;
function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _nonIterableRest;
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _nonIterableSpread;
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _superPropBase;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__getPrototypeOf__ = __webpack_require__(2);

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__getPrototypeOf__["a" /* default */])(object);
    if (object === null) break;
  }

  return object;
}

/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = assembleShaders;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__resolve_modules__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__platform_defines__ = __webpack_require__(178);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__inject_shader__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__utils_assert__ = __webpack_require__(40);


var _SHADER_TYPE;






var SHADER_TYPE = (_SHADER_TYPE = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_SHADER_TYPE, __WEBPACK_IMPORTED_MODULE_1__constants__["a" /* VERTEX_SHADER */], 'vertex'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_SHADER_TYPE, __WEBPACK_IMPORTED_MODULE_1__constants__["b" /* FRAGMENT_SHADER */], 'fragment'), _SHADER_TYPE); // Precision prologue to inject before functions are injected in shader
// TODO - extract any existing prologue in the fragment source and move it up...

var FRAGMENT_SHADER_PROLOGUE = "precision highp float;\n\n"; // Inject a list of modules

function assembleShaders(gl) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var vs = opts.vs,
      fs = opts.fs;
  var modules = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__resolve_modules__["a" /* resolveModules */])(opts.modules || []);
  return {
    gl: gl,
    vs: assembleShader(gl, Object.assign({}, opts, {
      source: vs,
      type: __WEBPACK_IMPORTED_MODULE_1__constants__["a" /* VERTEX_SHADER */],
      modules: modules
    })),
    fs: assembleShader(gl, Object.assign({}, opts, {
      source: fs,
      type: __WEBPACK_IMPORTED_MODULE_1__constants__["b" /* FRAGMENT_SHADER */],
      modules: modules
    })),
    getUniforms: assembleGetUniforms(modules),
    modules: assembleModuleMap(modules)
  };
} // Pulls together complete source code for either a vertex or a fragment shader
// adding prologues, requested module chunks, and any final injections.

function assembleShader(gl, _ref) {
  var id = _ref.id,
      source = _ref.source,
      type = _ref.type,
      _ref$modules = _ref.modules,
      modules = _ref$modules === void 0 ? [] : _ref$modules,
      _ref$defines = _ref.defines,
      defines = _ref$defines === void 0 ? {} : _ref$defines,
      _ref$inject = _ref.inject,
      inject = _ref$inject === void 0 ? {} : _ref$inject,
      _ref$prologue = _ref.prologue,
      prologue = _ref$prologue === void 0 ? true : _ref$prologue,
      log = _ref.log;
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__utils_assert__["a" /* default */])(typeof source === 'string', 'shader source must be a string');
  var isVertex = type === __WEBPACK_IMPORTED_MODULE_1__constants__["a" /* VERTEX_SHADER */];
  var sourceLines = source.split('\n');
  var glslVersion = 100;
  var versionLine = '';
  var coreSource = source; // Extract any version directive string from source.
  // TODO : keep all pre-processor statements at the begining of the shader.

  if (sourceLines[0].indexOf('#version ') === 0) {
    glslVersion = 300; // TODO - regexp that matches atual version number

    versionLine = sourceLines[0];
    coreSource = sourceLines.slice(1).join('\n');
  } // Add platform defines (use these to work around platform-specific bugs and limitations)
  // Add common defines (GLSL version compatibility, feature detection)
  // Add precision declaration for fragment shaders


  var assembledSource = prologue ? "".concat(versionLine, "\n").concat(getShaderName({
    id: id,
    source: source,
    type: type
  }), "\n").concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__platform_defines__["a" /* getPlatformShaderDefines */])(gl), "\n").concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__platform_defines__["b" /* getVersionDefines */])(gl, glslVersion, !isVertex), "\n").concat(getApplicationDefines(defines), "\n").concat(isVertex ? '' : FRAGMENT_SHADER_PROLOGUE, "\n") : "".concat(versionLine, "\n"); // Add source of dependent modules in resolved order

  var injectStandardStubs = false;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var module = _step.value;

      switch (module.name) {
        case 'inject':
          injectStandardStubs = true;
          break;

        default:
          module.checkDeprecations(coreSource, log);
          var moduleSource = module.getModuleSource(type, glslVersion); // Add the module source, and a #define that declares it presence

          assembledSource += moduleSource;
      }
    } // Add the version directive and actual source of this shader

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  assembledSource += coreSource; // Apply any requested shader injections

  assembledSource = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__inject_shader__["a" /* default */])(assembledSource, type, inject, injectStandardStubs);
  return assembledSource;
} // Returns a combined `getUniforms` covering the options for all the modules,
// the created function will pass on options to the inidividual `getUniforms`
// function of each shader module and combine the results into one object that
// can be passed to setUniforms.


function assembleGetUniforms(modules) {
  return function getUniforms(opts) {
    var uniforms = {};
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var module = _step2.value;
        // `modules` is already sorted by dependency level. This guarantees that
        // modules have access to the uniforms that are generated by their dependencies.
        var moduleUniforms = module.getUniforms(opts, uniforms);
        Object.assign(uniforms, moduleUniforms);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return uniforms;
  };
} // Returns a map with module names as keys, resolving to their module definitions
// The presence of a key indicates that the module is available in this program,
// whether directly included, or through a dependency of some other module


function assembleModuleMap(modules) {
  var result = {};
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = modules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var moduleName = _step3.value;
      var shaderModule = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__resolve_modules__["b" /* getShaderModule */])(moduleName);
      result[moduleName] = shaderModule;
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return result;
} // Generate "glslify-compatible" SHADER_NAME defines
// These are understood by the GLSL error parsing function
// If id is provided and no SHADER_NAME constant is present in source, create one


function getShaderName(_ref2) {
  var id = _ref2.id,
      source = _ref2.source,
      type = _ref2.type;
  var injectShaderName = id && typeof id === 'string' && source.indexOf('SHADER_NAME') === -1;
  return injectShaderName ? "\n#define SHADER_NAME ".concat(id, "_").concat(SHADER_TYPE[type], "\n\n") : '';
} // Generates application defines from an object


function getApplicationDefines() {
  var defines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var count = 0;
  var sourceText = '';

  for (var define in defines) {
    if (count === 0) {
      sourceText += '\n// APPLICATION DEFINES\n';
    }

    count++;
    var value = defines[define];

    if (value || Number.isFinite(value)) {
      sourceText += "#define ".concat(define.toUpperCase(), " ").concat(defines[define], "\n");
    }
  }

  if (count === 0) {
    sourceText += '\n';
  }

  return sourceText;
}
//# sourceMappingURL=assemble-shaders.js.map

/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = normalizeShaderModule;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__prop_types__ = __webpack_require__(177);


function defaultGetUniforms(module, props) {
  var uniforms = {};

  if (props === undefined) {
    for (var key in module.uniforms) {
      uniforms[key] = module.uniforms[key].value;
    }

    return uniforms;
  }

  for (var _key in props) {
    // TODO validate, clamp etc
    uniforms[_key] = props[_key];
  }

  return uniforms;
} // Note: modifies and returns the same module


function normalizeShaderModule(module) {
  if (!module.normalized) {
    module.normalized = true; // Normalize uniforms

    if (module.uniforms) {
      var _parsePropTypes = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__prop_types__["a" /* parsePropTypes */])(module.uniforms),
          propTypes = _parsePropTypes.propTypes;

      module.uniforms = propTypes;
    } // Build a getUniforms from the uniforms array


    if (module.uniforms && !module.getUniforms) {
      module.getUniforms = defaultGetUniforms.bind(null, module);
    }
  }

  return module;
}
//# sourceMappingURL=normalize-module.js.map

/***/ }),
/* 177 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = parsePropTypes;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(11);


// // import assert from 'assert'; // TODO
var TYPE_DEFINITIONS = {
  boolean: {
    validate: function validate(value, propType) {
      return true;
    }
  },
  number: {
    validateType: function validateType(value, propType) {
      return 'value' in propType && (!('max' in propType) || Number.isFinite(propType.max)) && (!('min' in propType) || Number.isFinite(propType.min));
    },
    validate: function validate(value, propType) {
      return Number.isFinite(value) && (!('max' in propType) || value <= propType.max) && (!('min' in propType) || value >= propType.min);
    }
  }
};
function parsePropTypes(propDefs) {
  var propTypes = {};
  var defaultProps = {};

  var _arr = Object.entries(propDefs);

  for (var _i = 0; _i < _arr.length; _i++) {
    var _arr$_i = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(_arr[_i], 2),
        propName = _arr$_i[0],
        propDef = _arr$_i[1];

    var propType = parsePropType(propName, propDef);
    propTypes[propName] = propType;
    defaultProps[propName] = propType.value;
  }

  return {
    propTypes: propTypes,
    defaultProps: defaultProps
  };
} // Parses one property definition entry. Either contains:
// * a valid prop type object ({type, ...})
// * or just a default value, in which case type and name inference is used

function parsePropType(name, propDef) {
  switch (getTypeOf(propDef)) {
    case 'object':
      propDef = normalizePropType(name, propDef);
      return parsePropDefinition(propDef);

    case 'array':
      return guessArrayType(name, propDef);

    case 'boolean':
      return {
        name: name,
        type: 'boolean',
        value: propDef
      };

    case 'number':
      return guessNumberType(name, propDef);

    case 'function':
      return {
        name: name,
        type: 'function',
        value: propDef
      };
    // return guessFunctionType(name, propDef);

    default:
      return {
        name: name,
        type: 'unknown',
        value: propDef
      };
  }
}

function guessArrayType(name, array) {
  if (/color/i.test(name) && (array.length === 3 || array.length === 4)) {
    return {
      name: name,
      type: 'color',
      value: array
    };
  }

  return {
    name: name,
    type: 'array',
    value: array
  };
}

function normalizePropType(name, propDef) {
  if (!('type' in propDef)) {
    if (!('value' in propDef)) {
      // If no type and value this object is likely the value
      return {
        name: name,
        type: 'object',
        value: propDef
      };
    }

    return Object.assign({
      name: name,
      type: getTypeOf(propDef.value)
    }, propDef);
  }

  return Object.assign({
    name: name
  }, propDef);
}

function parsePropDefinition(propDef) {
  var type = propDef.type;
  var typeDefinition = TYPE_DEFINITIONS[type] || {};
  var typeValidator = typeDefinition.typeValidator;

  if (typeValidator) {// assert(typeValidator(propDef), 'Illegal prop type');
  }

  return propDef;
}

function guessNumberType(name, value) {
  var isKnownProp = /radius|scale|width|height|pixel|size|miter/i.test(name) && /^((?!scale).)*$/.test(name);
  var max = isKnownProp ? 100 : 1;
  var min = 0;
  return {
    name: name,
    type: 'number',
    max: Math.max(value, max),
    min: Math.min(value, min),
    value: value
  };
} // improved version of javascript typeof that can distinguish arrays and null values


function getTypeOf(value) {
  if (Array.isArray(value) || ArrayBuffer.isView(value)) {
    return 'array';
  }

  if (value === null) {
    return 'null';
  }

  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(value);
}
//# sourceMappingURL=prop-types.js.map

/***/ }),
/* 178 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getPlatformShaderDefines;
/* harmony export (immutable) */ __webpack_exports__["b"] = getVersionDefines;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__ = __webpack_require__(202);

function getPlatformShaderDefines(gl) {
  var debugInfo = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["a" /* getContextInfo */])(gl);

  switch (debugInfo.gpuVendor.toLowerCase()) {
    case 'nvidia':
      return "#define NVIDIA_GPU\n// Nvidia optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n";

    case 'intel':
      return "#define INTEL_GPU\n// Intel optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n";

    case 'amd':
      // AMD Does not eliminate fp64 code
      return "#define AMD_GPU\n";

    default:
      // We don't know what GPU it is, could be that the GPU driver or
      // browser is not implementing UNMASKED_RENDERER constant and not
      // reporting a correct name
      return "#define DEFAULT_GPU\n// Prevent driver from optimizing away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n";
  }
}
function getVersionDefines(gl, glslVersion, isFragment) {
  // Add shadertools defines to let shaders portably v1/v3 check for features
  var versionDefines = "#if (__VERSION__ > 120)\n\n# define FRAG_DEPTH\n# define DERIVATIVES\n# define DRAW_BUFFERS\n# define TEXTURE_LOD\n\n#endif // __VERSION\n";

  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["b" /* hasFeatures */])(gl, __WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["c" /* FEATURES */].GLSL_FRAG_DEPTH)) {
    versionDefines += "// FRAG_DEPTH => gl_FragDepth is available\n#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n# define FRAG_DEPTH\n# define gl_FragDepth gl_FragDepthEXT\n#endif\n";
  }

  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["b" /* hasFeatures */])(gl, __WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["c" /* FEATURES */].GLSL_DERIVATIVES) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["d" /* canCompileGLGSExtension */])(gl, __WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["c" /* FEATURES */].GLSL_DERIVATIVES)) {
    versionDefines += "// DERIVATIVES => dxdF, dxdY and fwidth are available\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n# define DERIVATIVES\n#endif\n";
  }

  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["b" /* hasFeatures */])(gl, __WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["c" /* FEATURES */].GLSL_FRAG_DATA) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["d" /* canCompileGLGSExtension */])(gl, __WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["c" /* FEATURES */].GLSL_FRAG_DATA, {
    behavior: 'require'
  })) {
    versionDefines += "// DRAW_BUFFERS => gl_FragData[] is available\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers : require\n#define DRAW_BUFFERS\n#endif\n";
  }

  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["b" /* hasFeatures */])(gl, __WEBPACK_IMPORTED_MODULE_0__utils_webgl_info__["c" /* FEATURES */].GLSL_TEXTURE_LOD)) {
    versionDefines += "// TEXTURE_LOD => texture2DLod etc are available\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n# define TEXTURE_LOD\n#define texture2DLod texture2DLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define textureCubeLod textureCubeLodEXT\n#define texture2DGrad texture2DGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define textureCubeGrad textureCubeGradEXT\n#endif\n";
  }

  return versionDefines;
}
//# sourceMappingURL=platform-defines.js.map

/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ShaderModuleRegistry; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shader_module__ = __webpack_require__(180);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_assert__ = __webpack_require__(40);





var ShaderModuleRegistry =
/*#__PURE__*/
function () {
  function ShaderModuleRegistry() {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, ShaderModuleRegistry);

    this.shaderModules = {};
    this.defaultShaderModules = [];
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(ShaderModuleRegistry, [{
    key: "setDefaultShaderModules",
    value: function setDefaultShaderModules(modules) {
      this.defaultShaderModules = this.resolveModules(modules);
    }
  }, {
    key: "registerShaderModules",
    value: function registerShaderModules(shaderModuleList) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$ignoreMultipleRe = _ref.ignoreMultipleRegistrations,
          ignoreMultipleRegistrations = _ref$ignoreMultipleRe === void 0 ? false : _ref$ignoreMultipleRe;

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = shaderModuleList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var shaderModule = _step.value;

          this._registerShaderModule(shaderModule, ignoreMultipleRegistrations);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "getShaderModule",
    value: function getShaderModule(moduleOrName) {
      // Check if "inline" module, return it
      if (moduleOrName instanceof __WEBPACK_IMPORTED_MODULE_2__shader_module__["a" /* default */]) {
        return moduleOrName;
      } // Check if module descriptor


      if (typeof moduleOrName !== 'string') {
        return this._registerShaderModule(moduleOrName, true);
      } // Module name - Look up module


      var module = this.shaderModules[moduleOrName];

      if (!module) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(false, "Unknown shader module ".concat(moduleOrName));
      }

      return module;
    } // registers any supplied modules, resolves any names into modules
    // returns a list of modules

  }, {
    key: "resolveModules",
    value: function resolveModules(modules) {
      var _this = this;

      return modules.map(function (moduleOrName) {
        return _this.getShaderModule(moduleOrName);
      });
    } // PRIVATE API

  }, {
    key: "_registerShaderModule",
    value: function _registerShaderModule(module) {
      var ignoreMultipleRegistrations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      // Check if "inline" module, return it
      if (module instanceof __WEBPACK_IMPORTED_MODULE_2__shader_module__["a" /* default */]) {
        return module;
      }

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(module.name, 'shader module has no name');

      if (!this.shaderModules[module.name] || ignoreMultipleRegistrations) {
        // if ignoreMultipleRegistrations = true, we allow module to be re-registered
        module = new __WEBPACK_IMPORTED_MODULE_2__shader_module__["a" /* default */](module);
        module.dependencies = this.resolveModules(module.dependencies);
        this.shaderModules[module.name] = module;
      } else {
        // TODO - instead verify that definition is not changing...
        throw new Error("shader module ".concat(module.name, " already registered"));
      }

      return this.shaderModules[module.name];
    }
  }]);

  return ShaderModuleRegistry;
}();


//# sourceMappingURL=shader-module-registry.js.map

/***/ }),
/* 180 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ShaderModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transpile_shader__ = __webpack_require__(181);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_assert__ = __webpack_require__(40);




var VERTEX_SHADER = 'vs';
var FRAGMENT_SHADER = 'fs';

var ShaderModule =
/*#__PURE__*/
function () {
  function ShaderModule(_ref) {
    var name = _ref.name,
        vs = _ref.vs,
        fs = _ref.fs,
        _ref$dependencies = _ref.dependencies,
        dependencies = _ref$dependencies === void 0 ? [] : _ref$dependencies,
        _ref$getUniforms = _ref.getUniforms,
        getUniforms = _ref$getUniforms === void 0 ? function () {
      return {};
    } : _ref$getUniforms,
        _ref$deprecations = _ref.deprecations,
        deprecations = _ref$deprecations === void 0 ? [] : _ref$deprecations,
        vertexShader = _ref.vertexShader,
        fragmentShader = _ref.fragmentShader;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, ShaderModule);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(typeof name === 'string');
    this.name = name;
    this.vs = vs || vertexShader;
    this.fs = fs || fragmentShader;
    this.getModuleUniforms = getUniforms;
    this.dependencies = dependencies;
    this.deprecations = this._parseDeprecationDefinitions(deprecations);
  } // Extracts the source code chunk for the specified shader type from the named shader module


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(ShaderModule, [{
    key: "getModuleSource",
    value: function getModuleSource(type, targetGLSLVersion) {
      var moduleSource;

      switch (type) {
        case VERTEX_SHADER:
          moduleSource = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__transpile_shader__["a" /* default */])(this.vs || '', targetGLSLVersion, true);
          break;

        case FRAGMENT_SHADER:
          moduleSource = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__transpile_shader__["a" /* default */])(this.fs || '', targetGLSLVersion, false);
          break;

        default:
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_assert__["a" /* default */])(false);
      }

      if (typeof moduleSource !== 'string') {
        return '';
      }

      return "#define MODULE_".concat(this.name.toUpperCase(), "\n").concat(moduleSource, "// END MODULE_").concat(this.name, "\n\n");
    }
  }, {
    key: "getUniforms",
    value: function getUniforms(opts, uniforms) {
      return this.getModuleUniforms(opts, uniforms);
    } // Warn about deprecated uniforms or functions

  }, {
    key: "checkDeprecations",
    value: function checkDeprecations(shaderSource, log) {
      this.deprecations.forEach(function (def) {
        if (def.regex.test(shaderSource)) {
          if (def.deprecated && log) {
            log.deprecated(def.old, def.new)();
          } else if (log) {
            log.removed(def.old, def.new)();
          }
        }
      });
    }
  }, {
    key: "_parseDeprecationDefinitions",
    value: function _parseDeprecationDefinitions() {
      var deprecations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      deprecations.forEach(function (def) {
        switch (def.type) {
          case 'function':
            def.regex = new RegExp("\\b".concat(def.old, "\\("));
            break;

          default:
            def.regex = new RegExp("".concat(def.type, " ").concat(def.old, ";"));
        }
      });
      return deprecations;
    }
  }]);

  return ShaderModule;
}();


//# sourceMappingURL=shader-module.js.map

/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = transpileShader;
// Transpiles shader source code to target GLSL version
// Note: We always run transpiler even if same version e.g. 3.00 => 3.00
// RFC: https://github.com/uber/luma.gl/blob/master/dev-docs/RFCs/v6.0/portable-glsl-300-rfc.md
function transpileShader(source, targetGLSLVersion, isVertex) {
  switch (targetGLSLVersion) {
    case 300:
      return isVertex ? convertVertexShaderTo300(source) : convertFragmentShaderTo300(source);

    case 100:
      return isVertex ? convertVertexShaderTo100(source) : convertFragmentShaderTo100(source);

    default:
      throw new Error("unknown GLSL version ".concat(targetGLSLVersion));
  }
}

function convertVertexShaderTo300(source) {
  return source.replace(/attribute\s+/g, 'in ').replace(/varying\s+/g, 'out ').replace(/texture2D\(/g, 'texture(').replace(/textureCube\(+/g, 'texture('); // Deal with fragColor
  // .replace(/gl_fragColor/g, 'fragColor ');
}

function convertFragmentShaderTo300(source) {
  return source.replace(/varying\s+/g, 'in ').replace(/texture2D\(/g, 'texture(').replace(/textureCube\(/g, 'texture('); // Deal with fragColor
  // .replace(/gl_fragColor/g, 'fragColor ');
}

function convertVertexShaderTo100(source) {
  // /gm - treats each line as a string, so that ^ matches after newlines
  return source.replace(/^in\s+/gm, 'attribute ').replace(/^out\s+/gm, 'varying ').replace(/texture\(/g, 'texture2D(');
}

function convertFragmentShaderTo100(source) {
  // /gm - treats each line as a string, so that ^ matches after newlines
  return source.replace(/^in\s+/gm, 'varying ').replace(/texture\(/g, 'texture2D('); // Deal with fragColor
  // .replace(/^out\s+/g, 'varying ')
}
//# sourceMappingURL=transpile-shader.js.map

/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Minimal texture (diffuse map) support

/* eslint-disable camelcase */
var DEFAULT_MODULE_OPTIONS = {
  diffuseTexture: null,
  diffuseColor: [0.5, 0.5, 0.5, 1]
};

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;
  var uniforms = {};

  if (opts.diffuseTexture !== undefined) {
    uniforms.diffuse_uHasTexture = Boolean(opts.diffuseTexture);
    uniforms.diffuse_uTexture = opts.diffuseTexture;
  }

  if (opts.diffuseColor !== undefined) {
    uniforms.diffuse_uColor = opts.diffuseColor;
  }

  return uniforms;
}

var vs = "out vec2 diffuse_vTexCoord;\nvoid diffuse_setTextureCoordinate(vec2 uv) {\n  diffuse_vTexCoord = uv;\n}\n";
var fs = "uniform vec4 diffuse_uColor;\nuniform bool diffuse_uHasTexture;\nuniform sampler2D diffuse_uTexture;\n\nin vec2 diffuse_vTexCoord;\n\n\n\nvec4 diffuse_getColor() {\n  vec2 texCoord = diffuse_vTexCoord;\n  return diffuse_uHasTexture ?\n    texture2D(diffuse_uTexture, vec2(texCoord.s, texCoord.t)) :\n    diffuse_uColor;\n}\n\nvec4 diffuse_filterColor(vec4 color) {\n  return diffuse_getColor();\n}\n";
/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'diffuse',
  getUniforms: getUniforms,
  vs: vs,
  fs: fs
});
//# sourceMappingURL=diffuse.js.map

/***/ }),
/* 183 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__project_project__ = __webpack_require__(83);
// Cheap lighting - single directional light, single dot product, one uniform

/* eslint-disable camelcase */

var DEFAULT_LIGHT_DIRECTION = new Float32Array([1, 1, 2]);
var DEFAULT_MODULE_OPTIONS = {
  lightDirection: DEFAULT_LIGHT_DIRECTION
};

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;
  var uniforms = {};

  if (opts.lightDirection) {
    uniforms.dirlight_uLightDirection = opts.lightDirection;
  }

  return uniforms;
} // TODO - reuse normal from geometry module


var vs = null;
var fs = "uniform vec3 dirlight_uLightDirection;\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n";
/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'dirlight',
  vs: vs,
  fs: fs,
  getUniforms: getUniforms,
  dependencies: [__WEBPACK_IMPORTED_MODULE_0__project_project__["a" /* default */]]
});
//# sourceMappingURL=dirlight.js.map

/***/ }),
/* 184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var fp32shader = "#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND\nconst float TWO_PI = 6.2831854820251465;\nconst float PI_2 = 1.5707963705062866;\nconst float PI_16 = 0.1963495463132858;\n\nconst float SIN_TABLE_0 = 0.19509032368659973;\nconst float SIN_TABLE_1 = 0.3826834261417389;\nconst float SIN_TABLE_2 = 0.5555702447891235;\nconst float SIN_TABLE_3 = 0.7071067690849304;\n\nconst float COS_TABLE_0 = 0.9807852506637573;\nconst float COS_TABLE_1 = 0.9238795042037964;\nconst float COS_TABLE_2 = 0.8314695954322815;\nconst float COS_TABLE_3 = 0.7071067690849304;\n\nconst float INVERSE_FACTORIAL_3 = 1.666666716337204e-01;\nconst float INVERSE_FACTORIAL_5 = 8.333333767950535e-03;\nconst float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04;\nconst float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06;\n\nfloat sin_taylor_fp32(float a) {\n  float r, s, t, x;\n\n  if (a == 0.0) {\n    return 0.0;\n  }\n\n  x = -a * a;\n  s = a;\n  r = a;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_3;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_5;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_7;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_9;\n  s = s + t;\n\n  return s;\n}\n\nvoid sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {\n  if (a == 0.0) {\n    sin_t = 0.0;\n    cos_t = 1.0;\n  }\n  sin_t = sin_taylor_fp32(a);\n  cos_t = sqrt(1.0 - sin_t * sin_t);\n}\n\nfloat tan_taylor_fp32(float a) {\n    float sin_a;\n    float cos_a;\n\n    if (a == 0.0) {\n        return 0.0;\n    }\n    float z = floor(a / TWO_PI);\n    float r = a - TWO_PI * z;\n\n    float t;\n    float q = floor(r / PI_2 + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return 0.0 / 0.0;\n    }\n\n    t = r - PI_2 * q;\n\n    q = floor(t / PI_16 + 0.5);\n    int k = int(q);\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return 0.0 / 0.0;\n    } else {\n        t = t - PI_16 * q;\n    }\n\n    float u = 0.0;\n    float v = 0.0;\n\n    float sin_t, cos_t;\n    float s, c;\n    sincos_taylor_fp32(t, sin_t, cos_t);\n\n    if (k == 0) {\n        s = sin_t;\n        c = cos_t;\n    } else {\n        if (abs(float(abs_k) - 1.0) < 0.5) {\n            u = COS_TABLE_0;\n            v = SIN_TABLE_0;\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\n            u = COS_TABLE_1;\n            v = SIN_TABLE_1;\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\n            u = COS_TABLE_2;\n            v = SIN_TABLE_2;\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\n            u = COS_TABLE_3;\n            v = SIN_TABLE_3;\n        }\n        if (k > 0) {\n            s = u * sin_t + v * cos_t;\n            c = u * cos_t - v * sin_t;\n        } else {\n            s = u * sin_t - v * cos_t;\n            c = u * cos_t + v * sin_t;\n        }\n    }\n\n    if (j == 0) {\n        sin_a = s;\n        cos_a = c;\n    } else if (j == 1) {\n        sin_a = c;\n        cos_a = -s;\n    } else if (j == -1) {\n        sin_a = -c;\n        cos_a = s;\n    } else {\n        sin_a = -s;\n        cos_a = -c;\n    }\n    return sin_a / cos_a;\n}\n#endif\n\nfloat tan_fp32(float a) {\n#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND\n  return tan_taylor_fp32(a);\n#else\n  return tan(a);\n#endif\n}\n";
/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'fp32',
  vs: fp32shader,
  fs: null
});
//# sourceMappingURL=fp32.js.map

/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ __webpack_exports__["a"] = ("uniform float ONE;\nvec2 split(float a) {\n  const float SPLIT = 4097.0;\n  float t = a * SPLIT;\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float a_hi = t * ONE - (t - a);\n  float a_lo = a * ONE - a_hi;\n#else\n  float a_hi = t - (t - a);\n  float a_lo = a - a_hi;\n#endif\n  return vec2(a_hi, a_lo);\n}\nvec2 split2(vec2 a) {\n  vec2 b = split(a.x);\n  b.y += a.y;\n  return b;\n}\nvec2 quickTwoSum(float a, float b) {\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float sum = (a + b) * ONE;\n  float err = b - (sum - a) * ONE;\n#else\n  float sum = a + b;\n  float err = b - (sum - a);\n#endif\n  return vec2(sum, err);\n}\nvec2 twoSum(float a, float b) {\n  float s = (a + b);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float v = (s * ONE - a) * ONE;\n  float err = (a - (s - v) * ONE) * ONE * ONE * ONE + (b - v);\n#else\n  float v = s - a;\n  float err = (a - (s - v)) + (b - v);\n#endif\n  return vec2(s, err);\n}\n\nvec2 twoSub(float a, float b) {\n  float s = (a - b);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float v = (s * ONE - a) * ONE;\n  float err = (a - (s - v) * ONE) * ONE * ONE * ONE - (b + v);\n#else\n  float v = s - a;\n  float err = (a - (s - v)) - (b + v);\n#endif\n  return vec2(s, err);\n}\n\nvec2 twoSqr(float a) {\n  float prod = a * a;\n  vec2 a_fp64 = split(a);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float err = ((a_fp64.x * a_fp64.x - prod) * ONE + 2.0 * a_fp64.x *\n    a_fp64.y * ONE * ONE) + a_fp64.y * a_fp64.y * ONE * ONE * ONE;\n#else\n  float err = ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;\n#endif\n  return vec2(prod, err);\n}\n\nvec2 twoProd(float a, float b) {\n  float prod = a * b;\n  vec2 a_fp64 = split(a);\n  vec2 b_fp64 = split(b);\n  float err = ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +\n    a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;\n  return vec2(prod, err);\n}\n\nvec2 sum_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s = twoSum(a.x, b.x);\n  t = twoSum(a.y, b.y);\n  s.y += t.x;\n  s = quickTwoSum(s.x, s.y);\n  s.y += t.y;\n  s = quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 sub_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s = twoSub(a.x, b.x);\n  t = twoSub(a.y, b.y);\n  s.y += t.x;\n  s = quickTwoSum(s.x, s.y);\n  s.y += t.y;\n  s = quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 mul_fp64(vec2 a, vec2 b) {\n  vec2 prod = twoProd(a.x, b.x);\n  prod.y += a.x * b.y;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  prod = split2(prod);\n#endif\n  prod = quickTwoSum(prod.x, prod.y);\n  prod.y += a.y * b.x;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  prod = split2(prod);\n#endif\n  prod = quickTwoSum(prod.x, prod.y);\n  return prod;\n}\n\nvec2 div_fp64(vec2 a, vec2 b) {\n  float xn = 1.0 / b.x;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  vec2 yn = mul_fp64(a, vec2(xn, 0));\n#else\n  vec2 yn = a * xn;\n#endif\n  float diff = (sub_fp64(a, mul_fp64(b, yn))).x;\n  vec2 prod = twoProd(xn, diff);\n  return sum_fp64(yn, prod);\n}\n\nvec2 sqrt_fp64(vec2 a) {\n  if (a.x == 0.0 && a.y == 0.0) return vec2(0.0, 0.0);\n  if (a.x < 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);\n\n  float x = 1.0 / sqrt(a.x);\n  float yn = a.x * x;\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  vec2 yn_sqr = twoSqr(yn) * ONE;\n#else\n  vec2 yn_sqr = twoSqr(yn);\n#endif\n  float diff = sub_fp64(a, yn_sqr).x;\n  vec2 prod = twoProd(x * 0.5, diff);\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  return sum_fp64(split(yn), prod);\n#else\n  return sum_fp64(vec2(yn, 0.0), prod);\n#endif\n}\n");
//# sourceMappingURL=fp64-arithmetic.glsl.js.map

/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/* harmony default export */ __webpack_exports__["a"] = ("const vec2 E_FP64 = vec2(2.7182817459106445e+00, 8.254840366817007e-08);\nconst vec2 LOG2_FP64 = vec2(0.6931471824645996e+00, -1.9046542121259336e-09);\nconst vec2 PI_FP64 = vec2(3.1415927410125732, -8.742278012618954e-8);\nconst vec2 TWO_PI_FP64 = vec2(6.2831854820251465, -1.7484556025237907e-7);\nconst vec2 PI_2_FP64 = vec2(1.5707963705062866, -4.371139006309477e-8);\nconst vec2 PI_4_FP64 = vec2(0.7853981852531433, -2.1855695031547384e-8);\nconst vec2 PI_16_FP64 = vec2(0.19634954631328583, -5.463923757886846e-9);\nconst vec2 PI_16_2_FP64 = vec2(0.39269909262657166, -1.0927847515773692e-8);\nconst vec2 PI_16_3_FP64 = vec2(0.5890486240386963, -1.4906100798128818e-9);\nconst vec2 PI_180_FP64 = vec2(0.01745329238474369, 1.3519960498364902e-10);\n\nconst vec2 SIN_TABLE_0_FP64 = vec2(0.19509032368659973, -1.6704714833615242e-9);\nconst vec2 SIN_TABLE_1_FP64 = vec2(0.3826834261417389, 6.22335089017767e-9);\nconst vec2 SIN_TABLE_2_FP64 = vec2(0.5555702447891235, -1.1769521357507529e-8);\nconst vec2 SIN_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617041793133e-8);\n\nconst vec2 COS_TABLE_0_FP64 = vec2(0.9807852506637573, 2.9739473106360492e-8);\nconst vec2 COS_TABLE_1_FP64 = vec2(0.9238795042037964, 2.8307490351764386e-8);\nconst vec2 COS_TABLE_2_FP64 = vec2(0.8314695954322815, 1.6870263741530778e-8);\nconst vec2 COS_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617152815436e-8);\n\nconst vec2 INVERSE_FACTORIAL_3_FP64 = vec2(1.666666716337204e-01, -4.967053879312289e-09);\nconst vec2 INVERSE_FACTORIAL_4_FP64 = vec2(4.16666679084301e-02, -1.2417634698280722e-09);\nconst vec2 INVERSE_FACTORIAL_5_FP64 = vec2(8.333333767950535e-03, -4.34617203337595e-10);\nconst vec2 INVERSE_FACTORIAL_6_FP64 = vec2(1.3888889225199819e-03, -3.3631094437103215e-11);\nconst vec2 INVERSE_FACTORIAL_7_FP64 = vec2(1.9841270113829523e-04,  -2.725596874933456e-12);\nconst vec2 INVERSE_FACTORIAL_8_FP64 = vec2(2.4801587642286904e-05, -3.406996025904184e-13);\nconst vec2 INVERSE_FACTORIAL_9_FP64 = vec2(2.75573188446287533e-06, 3.7935713937038186e-14);\nconst vec2 INVERSE_FACTORIAL_10_FP64 = vec2(2.755731998149713e-07, -7.575112367869873e-15);\n\nfloat nint(float d) {\n    if (d == floor(d)) return d;\n    return floor(d + 0.5);\n}\n\nvec2 nint_fp64(vec2 a) {\n    float hi = nint(a.x);\n    float lo;\n    vec2 tmp;\n    if (hi == a.x) {\n        lo = nint(a.y);\n        tmp = quickTwoSum(hi, lo);\n    } else {\n        lo = 0.0;\n        if (abs(hi - a.x) == 0.5 && a.y < 0.0) {\n            hi -= 1.0;\n        }\n        tmp = vec2(hi, lo);\n    }\n    return tmp;\n}\n\nvec2 exp_fp64(vec2 a) {\n\n  const int k_power = 4;\n  const float k = 16.0;\n\n  const float inv_k = 1.0 / k;\n\n  if (a.x <= -88.0) return vec2(0.0, 0.0);\n  if (a.x >= 88.0) return vec2(1.0 / 0.0, 1.0 / 0.0);\n  if (a.x == 0.0 && a.y == 0.0) return vec2(1.0, 0.0);\n  if (a.x == 1.0 && a.y == 0.0) return E_FP64;\n\n  float m = floor(a.x / LOG2_FP64.x + 0.5);\n  vec2 r = sub_fp64(a, mul_fp64(LOG2_FP64, vec2(m, 0.0))) * inv_k;\n  vec2 s, t, p;\n\n  p = mul_fp64(r, r);\n  s = sum_fp64(r, p * 0.5);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_3_FP64);\n\n  s = sum_fp64(s, t);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_4_FP64);\n\n  s = sum_fp64(s, t);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_5_FP64);\n\n\n\n\n\n\n  s = sum_fp64(s, t);\n  for (int i = 0; i < k_power; i++) {\n    s = sum_fp64(s * 2.0, mul_fp64(s, s));\n  }\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  s = sum_fp64(s, vec2(ONE, 0.0));\n#else\n  s = sum_fp64(s, vec2(1.0, 0.0));\n#endif\n\n  return s * pow(2.0, m);\n}\n\nvec2 log_fp64(vec2 a)\n{\n  if (a.x == 1.0 && a.y == 0.0) return vec2(0.0, 0.0);\n  if (a.x <= 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);\n  vec2 x = vec2(log(a.x), 0.0);\n  vec2 s;\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  s = vec2(ONE, 0.0);\n#else\n  s = vec2(1.0, 0.0);\n#endif\n\n  x = sub_fp64(sum_fp64(x, mul_fp64(a, exp_fp64(-x))), s);\n  return x;\n}\n\nvec2 sin_taylor_fp64(vec2 a) {\n  vec2 r, s, t, x;\n\n  if (a.x == 0.0 && a.y == 0.0) {\n    return vec2(0.0, 0.0);\n  }\n\n  x = -mul_fp64(a, a);\n  s = a;\n  r = a;\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_3_FP64);\n  s = sum_fp64(s, t);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_5_FP64);\n  s = sum_fp64(s, t);\n\n\n\n\n\n\n  return s;\n}\n\nvec2 cos_taylor_fp64(vec2 a) {\n  vec2 r, s, t, x;\n\n  if (a.x == 0.0 && a.y == 0.0) {\n    return vec2(1.0, 0.0);\n  }\n\n  x = -mul_fp64(a, a);\n  r = x;\n  s = sum_fp64(vec2(1.0, 0.0), r * 0.5);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_4_FP64);\n  s = sum_fp64(s, t);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_6_FP64);\n  s = sum_fp64(s, t);\n\n\n\n\n\n\n  return s;\n}\n\nvoid sincos_taylor_fp64(vec2 a, out vec2 sin_t, out vec2 cos_t) {\n  if (a.x == 0.0 && a.y == 0.0) {\n    sin_t = vec2(0.0, 0.0);\n    cos_t = vec2(1.0, 0.0);\n  }\n\n  sin_t = sin_taylor_fp64(a);\n  cos_t = sqrt_fp64(sub_fp64(vec2(1.0, 0.0), mul_fp64(sin_t, sin_t)));\n}\n\nvec2 sin_fp64(vec2 a) {\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(0.0, 0.0);\n    }\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n\n    if (k == 0) {\n        if (j == 0) {\n            return sin_taylor_fp64(t);\n        } else if (j == 1) {\n            return cos_taylor_fp64(t);\n        } else if (j == -1) {\n            return -cos_taylor_fp64(t);\n        } else {\n            return -sin_taylor_fp64(t);\n        }\n    }\n\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n    if (abs(float(abs_k) - 1.0) < 0.5) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs(float(abs_k) - 2.0) < 0.5) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs(float(abs_k) - 3.0) < 0.5) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs(float(abs_k) - 4.0) < 0.5) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#else\n    if (abs_k == 1) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs_k == 2) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs_k == 3) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs_k == 4) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#endif\n\n    vec2 sin_t, cos_t;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n\n\n    vec2 result = vec2(0.0, 0.0);\n    if (j == 0) {\n        if (k > 0) {\n            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        }\n    } else if (j == 1) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    } else if (j == -1) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        } else {\n            result = -sum_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        }\n    } else {\n        if (k > 0) {\n            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));\n        }\n    }\n\n    return result;\n}\n\nvec2 cos_fp64(vec2 a) {\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(1.0, 0.0);\n    }\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n\n    if (k == 0) {\n        if (j == 0) {\n            return cos_taylor_fp64(t);\n        } else if (j == 1) {\n            return -sin_taylor_fp64(t);\n        } else if (j == -1) {\n            return sin_taylor_fp64(t);\n        } else {\n            return -cos_taylor_fp64(t);\n        }\n    }\n\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n    if (abs(float(abs_k) - 1.0) < 0.5) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs(float(abs_k) - 2.0) < 0.5) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs(float(abs_k) - 3.0) < 0.5) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs(float(abs_k) - 4.0) < 0.5) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#else\n    if (abs_k == 1) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs_k == 2) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs_k == 3) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs_k == 4) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#endif\n\n    vec2 sin_t, cos_t;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n    vec2 result = vec2(0.0, 0.0);\n    if (j == 0) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    } else if (j == 1) {\n        if (k > 0) {\n            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));\n        }\n    } else if (j == -1) {\n        if (k > 0) {\n            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        }\n    } else {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        } else {\n            result = -sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    }\n\n    return result;\n}\n\nvec2 tan_fp64(vec2 a) {\n    vec2 sin_a;\n    vec2 cos_a;\n\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(0.0, 0.0);\n    }\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n    vec2 sin_t, cos_t;\n    vec2 s, c;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n    if (k == 0) {\n        s = sin_t;\n        c = cos_t;\n    } else {\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n        if (abs(float(abs_k) - 1.0) < 0.5) {\n            u = COS_TABLE_0_FP64;\n            v = SIN_TABLE_0_FP64;\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\n            u = COS_TABLE_1_FP64;\n            v = SIN_TABLE_1_FP64;\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\n            u = COS_TABLE_2_FP64;\n            v = SIN_TABLE_2_FP64;\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\n            u = COS_TABLE_3_FP64;\n            v = SIN_TABLE_3_FP64;\n        }\n#else\n        if (abs_k == 1) {\n            u = COS_TABLE_0_FP64;\n            v = SIN_TABLE_0_FP64;\n        } else if (abs_k == 2) {\n            u = COS_TABLE_1_FP64;\n            v = SIN_TABLE_1_FP64;\n        } else if (abs_k == 3) {\n            u = COS_TABLE_2_FP64;\n            v = SIN_TABLE_2_FP64;\n        } else if (abs_k == 4) {\n            u = COS_TABLE_3_FP64;\n            v = SIN_TABLE_3_FP64;\n        }\n#endif\n        if (k > 0) {\n            s = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n            c = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            s = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n            c = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    }\n\n    if (j == 0) {\n        sin_a = s;\n        cos_a = c;\n    } else if (j == 1) {\n        sin_a = c;\n        cos_a = -s;\n    } else if (j == -1) {\n        sin_a = -c;\n        cos_a = s;\n    } else {\n        sin_a = -s;\n        cos_a = -c;\n    }\n    return div_fp64(sin_a, cos_a);\n}\n\nvec2 radians_fp64(vec2 degree) {\n  return mul_fp64(degree, PI_180_FP64);\n}\n\nvec2 mix_fp64(vec2 a, vec2 b, float x) {\n  vec2 range = sub_fp64(b, a);\n  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));\n}\n\nvoid vec2_sum_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = sum_fp64(a[0], b[0]);\n    out_val[1] = sum_fp64(a[1], b[1]);\n}\n\nvoid vec2_sub_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = sub_fp64(a[0], b[0]);\n    out_val[1] = sub_fp64(a[1], b[1]);\n}\n\nvoid vec2_mul_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = mul_fp64(a[0], b[0]);\n    out_val[1] = mul_fp64(a[1], b[1]);\n}\n\nvoid vec2_div_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = div_fp64(a[0], b[0]);\n    out_val[1] = div_fp64(a[1], b[1]);\n}\n\nvoid vec2_mix_fp64(vec2 x[2], vec2 y[2], float a, out vec2 out_val[2]) {\n  vec2 range[2];\n  vec2_sub_fp64(y, x, range);\n  vec2 portion[2];\n  portion[0] = range[0] * a;\n  portion[1] = range[1] * a;\n  vec2_sum_fp64(x, portion, out_val);\n}\n\nvec2 vec2_length_fp64(vec2 x[2]) {\n  return sqrt_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])));\n}\n\nvoid vec2_normalize_fp64(vec2 x[2], out vec2 out_val[2]) {\n  vec2 length = vec2_length_fp64(x);\n  vec2 length_vec2[2];\n  length_vec2[0] = length;\n  length_vec2[1] = length;\n\n  vec2_div_fp64(x, length_vec2, out_val);\n}\n\nvec2 vec2_distance_fp64(vec2 x[2], vec2 y[2]) {\n  vec2 diff[2];\n  vec2_sub_fp64(x, y, diff);\n  return vec2_length_fp64(diff);\n}\n\nvec2 vec2_dot_fp64(vec2 a[2], vec2 b[2]) {\n  vec2 v[2];\n\n  v[0] = mul_fp64(a[0], b[0]);\n  v[1] = mul_fp64(a[1], b[1]);\n\n  return sum_fp64(v[0], v[1]);\n}\nvoid vec3_sub_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {\n  for (int i = 0; i < 3; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvoid vec3_sum_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {\n  for (int i = 0; i < 3; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvec2 vec3_length_fp64(vec2 x[3]) {\n  return sqrt_fp64(sum_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])),\n    mul_fp64(x[2], x[2])));\n}\n\nvec2 vec3_distance_fp64(vec2 x[3], vec2 y[3]) {\n  vec2 diff[3];\n  vec3_sub_fp64(x, y, diff);\n  return vec3_length_fp64(diff);\n}\nvoid vec4_fp64(vec4 a, out vec2 out_val[4]) {\n  out_val[0].x = a[0];\n  out_val[0].y = 0.0;\n\n  out_val[1].x = a[1];\n  out_val[1].y = 0.0;\n\n  out_val[2].x = a[2];\n  out_val[2].y = 0.0;\n\n  out_val[3].x = a[3];\n  out_val[3].y = 0.0;\n}\n\nvoid vec4_scalar_mul_fp64(vec2 a[4], vec2 b, out vec2 out_val[4]) {\n  out_val[0] = mul_fp64(a[0], b);\n  out_val[1] = mul_fp64(a[1], b);\n  out_val[2] = mul_fp64(a[2], b);\n  out_val[3] = mul_fp64(a[3], b);\n}\n\nvoid vec4_sum_fp64(vec2 a[4], vec2 b[4], out vec2 out_val[4]) {\n  for (int i = 0; i < 4; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvoid vec4_dot_fp64(vec2 a[4], vec2 b[4], out vec2 out_val) {\n  vec2 v[4];\n\n  v[0] = mul_fp64(a[0], b[0]);\n  v[1] = mul_fp64(a[1], b[1]);\n  v[2] = mul_fp64(a[2], b[2]);\n  v[3] = mul_fp64(a[3], b[3]);\n\n  out_val = sum_fp64(sum_fp64(v[0], v[1]), sum_fp64(v[2], v[3]));\n}\n\nvoid mat4_vec4_mul_fp64(vec2 b[16], vec2 a[4], out vec2 out_val[4]) {\n  vec2 tmp[4];\n\n  for (int i = 0; i < 4; i++)\n  {\n    for (int j = 0; j < 4; j++)\n    {\n      tmp[j] = b[j + i * 4];\n    }\n    vec4_dot_fp64(a, tmp, out_val[i]);\n  }\n}\n");
//# sourceMappingURL=fp64-functions.glsl.js.map

/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fp64ify;
/* harmony export (immutable) */ __webpack_exports__["b"] = fp64LowPart;
/* harmony export (immutable) */ __webpack_exports__["c"] = fp64ifyMatrix4;
/**
 * Calculate WebGL 64 bit float
 * @param a {number} - the input float number
 * @param out {array, optional} - the output array. If not supplied, a new array is created.
 * @param startIndex {integer, optional} - the index in the output array to fill from. Default 0.
 * @returns {array} - the fp64 representation of the input number
 */
function fp64ify(a) {
  var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var startIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var hiPart = Math.fround(a);
  var loPart = a - hiPart;
  out[startIndex] = hiPart;
  out[startIndex + 1] = loPart;
  return out;
}
/**
 * Calculate the low part of a WebGL 64 bit float
 * @param a {number} - the input float number
 * @returns {number} - the lower 32 bit of the number
 */

function fp64LowPart(a) {
  return a - Math.fround(a);
}
/**
 * Calculate WebGL 64 bit matrix (transposed "Float64Array")
 * @param matrix {Matrix4} - the input matrix
 * @returns {array} - the fp64 representation of the input matrix
 */

function fp64ifyMatrix4(matrix) {
  // Transpose the projection matrix to column major for GLSL.
  var matrixFP64 = new Float32Array(32);

  for (var i = 0; i < 4; ++i) {
    for (var j = 0; j < 4; ++j) {
      var index = i * 4 + j;
      fp64ify(matrix[j * 4 + i], matrixFP64, index * 2);
    }
  }

  return matrixFP64;
}
//# sourceMappingURL=fp64-utils.js.map

/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export fp64arithmetic */
/* unused harmony export fp64fs */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__fp64_utils__ = __webpack_require__(187);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__fp64_arithmetic_glsl__ = __webpack_require__(185);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fp64_functions_glsl__ = __webpack_require__(186);
/* unused harmony reexport fp64ify */
/* unused harmony reexport fp64LowPart */
/* unused harmony reexport fp64ifyMatrix4 */
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



var fp64shader = "".concat(__WEBPACK_IMPORTED_MODULE_1__fp64_arithmetic_glsl__["a" /* default */], "\n").concat(__WEBPACK_IMPORTED_MODULE_2__fp64_functions_glsl__["a" /* default */]);
var CONST_UNIFORMS = {
  // Used in LUMA_FP64_CODE_ELIMINATION_WORKAROUND
  ONE: 1.0
};


function getUniforms() {
  return Object.assign({}, CONST_UNIFORMS);
}

/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'fp64',
  vs: fp64shader,
  fs: null,
  fp64ify: __WEBPACK_IMPORTED_MODULE_0__fp64_utils__["a" /* fp64ify */],
  fp64LowPart: __WEBPACK_IMPORTED_MODULE_0__fp64_utils__["b" /* fp64LowPart */],
  fp64ifyMatrix4: __WEBPACK_IMPORTED_MODULE_0__fp64_utils__["c" /* fp64ifyMatrix4 */],
  getUniforms: getUniforms
}); // Arithmetic only

var fp64arithmetic = {
  name: 'fp64-arithmetic',
  vs: "".concat(__WEBPACK_IMPORTED_MODULE_1__fp64_arithmetic_glsl__["a" /* default */]),
  fs: null
}; // Fragment shader fp64

var fp64fs = {
  name: 'fp64-fs',
  vs: null,
  fs: fp64shader
};
//# sourceMappingURL=fp64.js.map

/***/ }),
/* 189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("\n");
//# sourceMappingURL=lighting-common.glsl.js.map

/***/ }),
/* 190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("precision highp float;\n\n#define LIGHT_MAX 4\n\nvarying vec3 lighting_vLightWeighting;\n\nvec4 lighting_apply(vec4 color) {\n  return vec4(color.rgb * lighting_vLightWeighting, color.a);\n}\n\nuniform mat4 viewMatrix;\n\n\nvarying vec4 lighting_vColor;\nvarying vec4 lighting_vTransformedNormal;\nvarying vec4 lighting_vPosition;\n\nuniform float shininess;\nuniform bool enableSpecularMap;\nuniform bool enableLights;\n\nuniform vec3 ambientColor;\nuniform vec3 directionalColor;\nuniform vec3 lightingDirection;\n\nuniform vec3 lighting_uPointLocation[LIGHT_MAX];\nuniform vec3 lighting_uPointColor[LIGHT_MAX];\nuniform float lighting_uPointSpecularEnable[LIGHT_MAX];\nuniform vec3 lighting_uPointSpecularColor[LIGHT_MAX];\nuniform int numberPoints;\n\n\nvec3 lighting__calculate_light_weighting() {\n\treturn lighting__calculate_light_weighting(shininess);\n}\n\nvec3 lighting__calculate_light_weighting(shininess) {\n  vec3 normal = vTransformedNormal.xyz;\n  vec3 eyeDirection = normalize(-vPosition.xyz);\n\n  vec3 specularLight = vec3(0., 0., 0.);\n  vec3 diffuseLight = vec3(0., 0., 0.);\n\n  for (int i = 0; i < LIGHT_MAX; i++) {\n    if (i < numberPoints) {\n      vec3 transformedPointLocation = (viewMatrix * vec4(lighting_uPointLocation[i], 1.0)).xyz;\n      vec3 lightDirection = normalize(transformedPointLocation - vPosition.xyz);\n\n      if (lighting_uPointSpecularEnable > 0.) {\n        vec3 reflectionDirection = reflect(-lightDirection, normal);\n        float specularLightWeighting =\n          pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininessVal);\n        specularLight += specularLightWeighting * lighting_uPointSpecularColor[i];\n      }\n\n      float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);\n      diffuseLight += diffuseLightWeighting * lighting_uPointColor[i];\n    } else {\n      break;\n    }\n  }\n\n  return ambientColor + diffuseLight + specularLight;\n}\n\nvoid lighting_filterColor(fragmentColor) {\n  if (!lighting_enable) {\n  \treturn fragmentColor;\n  } else {\n  \tvec3 lightWeighting = lighting__calculate_light_weighting();\n  \treturn vec4(fragmentColor.rgb * lightWeighting, fragmentColor.a);\n  }\n}\n\nuniform vec3 material_uAmbientColor;\nuniform vec3 material_uDiffuseColor;\nuniform vec3 material_uSpecularColor;\nuniform vec3 material_uEmissiveColor;\n\nuniform bool hasTexture1;\nuniform sampler2D sampler1;\n\nuniform mat4 viewMatrix;\n\nvoid apply_lighting(color) {\n  vec3 ambientLightWeighting = ambientColor;\n\n  vec3 normal = vTransformedNormal.xyz;\n  vec3 eyeDirection = normalize(-vPosition.xyz);\n\n  vec3 specularLight = vec3(0.0, 0.0, 0.0);\n  vec3 diffuseLight = vec3(0.0, 0.0, 0.0);\n\n  for (int i = 0; i < LIGHT_MAX; i++) {\n    if (i < numberPoints) {\n      vec3 transformedPointLocation = (viewMatrix * vec4(pointLocation[i], 1.0)).xyz;\n      vec3 lightDirection = normalize(transformedPointLocation - vPosition.xyz);\n\n      if (enableSpecularHighlights) {\n        vec3 reflectionDirection = reflect(-lightDirection, normal);\n        float specularLightWeighting =\n          pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininess);\n        specularLight += specularLightWeighting * pointSpecularColor[i];\n      }\n\n      float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);\n      diffuseLight += diffuseLightWeighting * pointColor[i];\n    } else {\n        break;\n    }\n  }\n\n  vec3 matAmbientColor = material_uAmbientColor * color.rgb;\n  vec3 matDiffuseColor = material_uDiffuseColor * color.rgb;\n  vec3 matSpecularColor = material_uSpecularColor * color.rgb;\n  vec3 matEmissiveColor = material_uEmissiveColor * color.rgb;\n  gl_FragColor = vec4(\n    matAmbientColor * ambientLightWeighting\n    + matDiffuseColor * diffuseLightWeighting\n    + matSpecularColor * specularLightWeighting\n    + matEmissiveColor,\n    color.a\n  );\n}\n\n  vec3 lightWeighting;\n  if (!enableLights) {\n    lightWeighting = vec3(1.0, 1.0, 1.0);\n  } else {\n    vec3 lightDirection;\n    float specularLightWeighting = 0.0;\n    float diffuseLightWeighting = 0.0;\n    vec3  specularLight = vec3(0.0, 0.0, 0.0);\n    vec3  diffuseLight = vec3(0.0, 0.0, 0.0);\n\n    vec3 transformedPointLocation;\n    vec3 normal = vTransformedNormal.xyz;\n\n    vec3 eyeDirection = normalize(-vPosition.xyz);\n    vec3 reflectionDirection;\n\n    vec3 pointWeight = vec3(0.0, 0.0, 0.0);\n\n    for (int i = 0; i < LIGHT_MAX; i++) {\n      if (i < numberPoints) {\n        transformedPointLocation = (viewMatrix * vec4(pointLocation[i], 1.0)).xyz;\n        lightDirection = normalize(transformedPointLocation - vPosition.xyz);\n\n        if (enableSpecular[i] > 0.0) {\n          reflectionDirection = reflect(-lightDirection, normal);\n          specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininess);\n          specularLight += specularLightWeighting * pointSpecularColor[i];\n        }\n\n        diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);\n        diffuseLight += diffuseLightWeighting * pointColor[i];\n      } else {\n        break;\n      }\n    }\n\n    lightWeighting = ambientColor + diffuseLight + specularLight;\n  }\nuniform float reflection;\nuniform float refraction;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
//# sourceMappingURL=lighting-fragment.glsl.js.map

/***/ }),
/* 191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define LIGHT_MAX 4\n\nuniform bool lighting_uEnableLights;\nuniform vec3 lighting_uAmbientColor;\nuniform vec3 lighting_uDirection;\nuniform vec3 lighting_uDirectionalColor;\nuniform int  lighting_uPointCount;\nuniform vec3 lighting_uPointLocation[LIGHT_MAX];\nuniform vec3 lighting_uPointColor[LIGHT_MAX];\nuniform bool lighting_uEnableReflections;\nvarying vec4 lighting_vPosition;\nvarying vec4 lighting_vNormal;\nvarying vec3 lighting_vColor;\nvarying vec3 lighting_vLightWeighting;\nvarying vec3 lighting_vReflection;\n\nvoid lighting_setPositionAndNormal(vec3 position, vec3 normal) {\n  lighting_vPosition = worldMatrix * vec4(position, 1.);\n  lighting_vNormal = worldInverseTransposeMatrix * vec4(normal, 1.);;\n}\n\nvoid lighting__getLightWeigting() {\n  float directionalLightWeighting = max(dot(lighting_vNormal.xyz, lighting_uDirection), 0.);\n  vec3 pointWeight = vec3(0., 0., 0.);\n  for (int i = 0; i < LIGHT_MAX; i++) {\n    if (i < numberPoints) {\n      vec4 mvLightPosition = viewMatrix * vec4(lighting_uPointLocation[i], 1.);\n      vec3 pointLightDirection = normalize(mvLightPosition.xyz - lighting_vPosition.xyz);\n      pointWeight += max(dot(lighting_vNormal.xyz, pointLightDirection), 0.) * pointColor[i];\n     } else {\n       break;\n     }\n   }\n   return ambientColor + (directionalColor * directionalLightWeighting) + pointWeight;\n}\n\nvoid lighting_apply(vec3 position, vec3 normal) {\n  lighting_setPositionAndNormal(position, normal);\n  if(!lighting_uEnableLights) {\n    lighting_vLightWeighting = vec3(1., 1., 1.);\n  } else {\n    lighting_vLightWeighting = lighting__getLightWeighting();\n  }\n}\n\nvoid lighting_set_reflection(vec3 position) {\n  if (lighting_uEnableReflections) {\n    lighting_vReflection = (viewInverseMatrix[3] - (worldMatrix * vec4(position, 1.))).xyz;\n  } else {\n    lighting_vReflection = vec3(1., 1., 1.);\n  }\n}\n");
//# sourceMappingURL=lighting-vertex.glsl.js.map

/***/ }),
/* 192 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export vertexShader */
/* unused harmony export fragmentShader */
/* unused harmony export name */
/* unused harmony export config */
/* unused harmony export getUniforms */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math_gl__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lighting_common_glsl__ = __webpack_require__(189);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lighting_vertex_glsl__ = __webpack_require__(191);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lighting_fragment_glsl__ = __webpack_require__(190);




var vertexShader = "".concat(__WEBPACK_IMPORTED_MODULE_1__lighting_common_glsl__["a" /* default */], "\n").concat(__WEBPACK_IMPORTED_MODULE_2__lighting_vertex_glsl__["a" /* default */], "\n");
var fragmentShader = "".concat(__WEBPACK_IMPORTED_MODULE_1__lighting_common_glsl__["a" /* default */], "\n").concat(__WEBPACK_IMPORTED_MODULE_3__lighting_fragment_glsl__["a" /* default */], "\n");
var name = 'lighting';
var config = {
  MAX_POINT_LIGHTS: 4
}; // Setup the lighting system: ambient, directional, point lights.

function getUniforms(_ref) {
  var _ref$lightingEnable = _ref.lightingEnable,
      lightingEnable = _ref$lightingEnable === void 0 ? false : _ref$lightingEnable,
      _ref$lightingAmbientC = _ref.lightingAmbientColor,
      lightingAmbientColor = _ref$lightingAmbientC === void 0 ? [0.2, 0.2, 0.2] : _ref$lightingAmbientC,
      _ref$lightingDirectio = _ref.lightingDirection,
      lightingDirection = _ref$lightingDirectio === void 0 ? [1, 1, 1] : _ref$lightingDirectio,
      _ref$lightingDirectio2 = _ref.lightingDirectionalColor,
      lightingDirectionalColor = _ref$lightingDirectio2 === void 0 ? [0, 0, 0] : _ref$lightingDirectio2,
      _ref$lightingPointLig = _ref.lightingPointLights,
      lightingPointLights = _ref$lightingPointLig === void 0 ? [] : _ref$lightingPointLig;
  // Set light uniforms. Ambient, directional and point lights.
  return Object.assign({
    lightingEnable: lightingEnable,
    // Ambient
    lightingAmbientColor: lightingAmbientColor
  }, getDirectionalUniforms(lightingDirection), getPointUniforms(lightingPointLights));
}

function getDirectionalUniforms(_ref2) {
  var color = _ref2.color,
      direction = _ref2.direction;
  // Normalize lighting direction vector
  var dir = new __WEBPACK_IMPORTED_MODULE_0_math_gl__["c" /* Vector3 */](direction.x, direction.y, direction.z).normalize().scale(-1, -1, -1);
  return {
    directionalColor: [color.r, color.g, color.b],
    lightingDirection: [dir.x, dir.y, dir.z]
  };
}

function getPointUniforms(points) {
  points = points instanceof Array ? points : [points];
  var numberPoints = points.length;
  var pointLocations = [];
  var pointColors = [];
  var enableSpecular = [];
  var pointSpecularColors = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = points[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var point = _step.value;
      var position = point.position,
          color = point.color,
          diffuse = point.diffuse,
          specular = point.specular;
      var pointColor = color || diffuse;
      pointLocations.push(position.x, position.y, position.z);
      pointColors.push(pointColor.r, pointColor.g, pointColor.b); // Add specular color

      enableSpecular.push(Number(Boolean(specular)));

      if (specular) {
        pointSpecularColors.push(specular.r, specular.g, specular.b);
      } else {
        pointSpecularColors.push(0, 0, 0);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return {
    numberPoints: numberPoints,
    pointLocation: pointLocations,
    pointColor: pointColors,
    enableSpecular: enableSpecular,
    pointSpecularColor: pointSpecularColors
  };
}

/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: name,
  vs: vertexShader,
  fs: fragmentShader,
  getUniforms: getUniforms
});
//# sourceMappingURL=lighting.js.map

/***/ }),
/* 193 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MODULE_INJECTORS_VS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return MODULE_INJECTORS_FS; });
var MODULE_INJECTORS_VS = "#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n";
var MODULE_INJECTORS_FS = "#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth();\n#endif\n";
//# sourceMappingURL=module-injectors.js.map

/***/ }),
/* 194 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define MAX_LIGHTS 5\n\nstruct AmbientLight {\n vec3 color;\n float intensity;\n};\n\nstruct PointLight {\n vec3 color;\n float intensity;\n vec3 position;\n};\n\nstruct DirectionalLight {\n  vec3 color;\n  float intensity;\n  vec3 direction;\n};\n \nuniform AmbientLight lighting_uAmbientLight;\nuniform PointLight lighting_uPointLight[MAX_LIGHTS];\nuniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];\nuniform int lighting_uPointLightCount;\nuniform int lighting_uDirectionalLightCount;\n\nuniform float lighting_uAmbient;\nuniform float lighting_uDiffuse;\nuniform float lighting_uShininess;\nuniform vec3  lighting_uSpecularColor;\n\nuniform bool lighting_uEnabled;\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, float intensity) {\n    vec3 halfway_direction = normalize(light_direction + view_direction);\n    float lambertian = dot(light_direction, normal_worldspace);\n    float specular = 0.0;\n    if (lambertian > 0.0) {\n      float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\n      specular = pow(specular_angle, lighting_uShininess);\n    }\n    lambertian = max(lambertian, 0.0);\n    return (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * intensity;\n}\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = surfaceColor;\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n    lightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.intensity;\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.intensity);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.intensity);\n    }\n  }\n  return lightColor;\n}\n\nvec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = vec3(0, 0, 0);\n  vec3 surfaceColor = vec3(0, 0, 0);\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.intensity);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.intensity);\n    }\n  }\n  return lightColor;\n}\n");
//# sourceMappingURL=phong-lighting.glsl.js.map

/***/ }),
/* 195 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__phong_lighting_glsl__ = __webpack_require__(194);

/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'lighting',
  vs: __WEBPACK_IMPORTED_MODULE_0__phong_lighting_glsl__["a" /* default */],
  getUniforms: getUniforms
});
var INITIAL_MODULE_OPTIONS = {};

function getLightSourceUniforms(_ref) {
  var ambientLight = _ref.ambientLight,
      pointLights = _ref.pointLights,
      directionalLights = _ref.directionalLights;
  var lightSourceUniforms = {};

  if (ambientLight) {
    lightSourceUniforms['lighting_uAmbientLight.color'] = ambientLight.color;
    lightSourceUniforms['lighting_uAmbientLight.intensity'] = ambientLight.intensity;
  } else {
    lightSourceUniforms['lighting_uAmbientLight.color'] = [0, 0, 0];
    lightSourceUniforms['lighting_uAmbientLight.intensity'] = 0.0;
  }

  var index = 0;

  for (var i in pointLights) {
    var pointLight = pointLights[i];
    lightSourceUniforms["lighting_uPointLight[".concat(index, "].color")] = pointLight.color;
    lightSourceUniforms["lighting_uPointLight[".concat(index, "].intensity")] = pointLight.intensity;
    lightSourceUniforms["lighting_uPointLight[".concat(index, "].position")] = pointLight.position;
    index++;
  }

  lightSourceUniforms.lighting_uPointLightCount = pointLights.length;
  index = 0;

  for (var _i in directionalLights) {
    var directionalLight = directionalLights[_i];
    lightSourceUniforms["lighting_uDirectionalLight[".concat(index, "].color")] = directionalLight.color;
    lightSourceUniforms["lighting_uDirectionalLight[".concat(index, "].intensity")] = directionalLight.intensity;
    lightSourceUniforms["lighting_uDirectionalLight[".concat(index, "].direction")] = directionalLight.direction;
    index++;
  }

  lightSourceUniforms.lighting_uDirectionalLightCount = directionalLights.length;
  return lightSourceUniforms;
}

function getMaterialUniforms(material) {
  var materialUniforms = {};
  materialUniforms.lighting_uAmbient = material.ambient;
  materialUniforms.lighting_uDiffuse = material.diffuse;
  materialUniforms.lighting_uShininess = material.shininess;
  materialUniforms.lighting_uSpecularColor = material.specularColor;
  return materialUniforms;
}

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_MODULE_OPTIONS;

  if (!('ambientLight' in opts || 'pointLights' in opts || 'directionalLights' in opts || 'material' in opts)) {
    return {};
  }

  var ambientLight = opts.ambientLight,
      pointLights = opts.pointLights,
      directionalLights = opts.directionalLights,
      material = opts.material;
  var hasLights = ambientLight || pointLights && pointLights.length > 0 || directionalLights && directionalLights.length > 0;

  if (!hasLights || !material) {
    return {
      lighting_uEnabled: false
    };
  }

  var lightUniforms = Object.assign({}, getLightSourceUniforms({
    ambientLight: ambientLight,
    pointLights: pointLights,
    directionalLights: directionalLights
  }), getMaterialUniforms(material), {
    lighting_uEnabled: true
  });
  return lightUniforms;
}
//# sourceMappingURL=phong-lighting.js.map

/***/ }),
/* 196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 255, 255, 255]);
var DEFAULT_MODULE_OPTIONS = {
  pickingSelectedColor: null,
  //  Set to a picking color to visually highlight that item
  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR,
  // Color of visual highlight of "selected" item
  pickingThreshold: 1.0,
  pickingActive: false // Set to true when rendering to off-screen "picking" buffer

};
/* eslint-disable camelcase */

function getUniforms() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;
  var uniforms = {};

  if (opts.pickingSelectedColor !== undefined) {
    if (opts.pickingSelectedColor === null) {
      uniforms.picking_uSelectedColorValid = 0;
    } else {
      var selectedColor = [opts.pickingSelectedColor[0], opts.pickingSelectedColor[1], opts.pickingSelectedColor[2]];
      uniforms.picking_uSelectedColorValid = 1;
      uniforms.picking_uSelectedColor = selectedColor;
    }
  }

  if (opts.pickingHighlightColor !== undefined) {
    uniforms.picking_uHighlightColor = opts.pickingHighlightColor;
  } // TODO - major hack - decide on normalization and remove


  if (opts.pickingThreshold !== undefined) {
    uniforms.picking_uThreshold = opts.pickingThreshold;
  }

  if (opts.pickingActive !== undefined) {
    uniforms.picking_uActive = opts.pickingActive ? 1 : 0;
  }

  return uniforms;
}

var vs = "uniform vec3 picking_uSelectedColor;\nuniform float picking_uThreshold;\nuniform bool picking_uSelectedColorValid;\n\nout vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 255.;\n\nbool isVertexPicked(vec3 vertexColor) {\n  return\n    picking_uSelectedColorValid &&\n    abs(vertexColor.r - picking_uSelectedColor.r) < picking_uThreshold &&\n    abs(vertexColor.g - picking_uSelectedColor.g) < picking_uThreshold &&\n    abs(vertexColor.b - picking_uSelectedColor.b) < picking_uThreshold;\n}\n\nvoid picking_setPickingColor(vec3 pickingColor) {\n  picking_vRGBcolor_Aselected.a =\n    float(isVertexPicked(pickingColor));\n  picking_vRGBcolor_Aselected.rgb = pickingColor * COLOR_SCALE;\n}\n";
var fs = "uniform bool picking_uActive;\nuniform vec3 picking_uSelectedColor;\nuniform vec4 picking_uHighlightColor;\n\nin vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 255.;\nvec4 picking_filterHighlightColor(vec4 color) {\n  bool selected = bool(picking_vRGBcolor_Aselected.a);\n\n  if (selected) {\n    vec4 highLightColor = picking_uHighlightColor * COLOR_SCALE;\n\n    float highLightAlpha = highLightColor.a;\n    float highLightRatio = highLightAlpha / (highLightAlpha + color.a * (1.0 - highLightAlpha));\n\n    vec3 resultRGB = mix(color.rgb, highLightColor.rgb, highLightRatio);\n    return vec4(resultRGB, color.a);\n  } else {\n    return color;\n  }\n}\nvec4 picking_filterPickingColor(vec4 color) {\n  vec3 pickingColor = picking_vRGBcolor_Aselected.rgb;\n  if (picking_uActive && length(pickingColor) < 0.001) {\n    discard;\n  }\n  return picking_uActive ? vec4(pickingColor, 1.0) : color;\n}\nvec4 picking_filterColor(vec4 color) {\n  vec4 highightColor = picking_filterHighlightColor(color);\n  return picking_filterPickingColor(highightColor);\n}\n\n";
/* unused harmony default export */ var _unused_webpack_default_export = ({
  name: 'picking',
  vs: vs,
  fs: fs,
  getUniforms: getUniforms
});
//# sourceMappingURL=picking.js.map

/***/ }),
/* 197 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// Private shader module used by `Transform`
var vs = "attribute float transform_elementID;\nvec2 transform_getPixelSizeHalf(vec2 size) {\n  return vec2(1.) / (2. * size);\n}\n\nvec2 transform_getPixelIndices(vec2 texSize, vec2 pixelSizeHalf) {\n  float yIndex = floor((transform_elementID / texSize[0]) + pixelSizeHalf[1]);\n  float xIndex = transform_elementID - (yIndex * texSize[0]);\n  return vec2(xIndex, yIndex);\n}\nvec2 transform_getTexCoord(vec2 size) {\n  vec2 pixelSizeHalf = transform_getPixelSizeHalf(size);\n  vec2 indices = transform_getPixelIndices(size, pixelSizeHalf);\n  vec2 coord = indices / size + pixelSizeHalf;\n  return coord;\n}\nvec2 transform_getPos(vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  vec2 pos = (texCoord * (2.0, 2.0)) - (1., 1.);\n  return pos;\n}\nvec4 transform_getInput(sampler2D texSampler, vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  vec4 textureColor = texture2D(texSampler, texCoord);\n  return textureColor;\n}\n";
/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'transform',
  vs: vs,
  fs: null
});
//# sourceMappingURL=transform.js.map

/***/ }),
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define SHADER_NAME luma-modular-fragment\n\nprecision highp float;\n\n// varyings\nvarying vec4 vColor;\n\nvoid main(){\n  gl_FragColor = vec4(1., 0., 1., 1.);\n\n#ifdef MODULE_DIFFUSE\n  gl_FragColor = diffuse_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth(gl_Position);\n#endif\n}\n");
//# sourceMappingURL=modular-fragment.glsl.js.map

/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ("#define SHADER_NAME luma_modular_vertex\n\n// object attributes\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec4 colors;\nattribute vec2 texCoords;\nattribute vec3 pickingColors;\n\nvoid main(void) {\n\n  // Set up position\n#ifdef MODULE_GEOMETRY\n  geometry_setPosition(positions);\n  geometry_setNormal(normals);\n#endif\n\n#ifdef MODULE_PROJECT\n  project_setPositionAndNormal_Model(positions, normals);\n  gl_Position = project_model_to_clipspace(positions);\n#endif\n\n  // Set up depth\n#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n\n#ifdef MODULE_DIFFUSE\n  diffuse_setTextureCoordinate(texCoords);\n#endif\n\n  // Set up color calculations\n#ifdef MODULE_MATERIAL\n  material_setDiffuseColor(colors);\n  material_setDiffuseTextureCoordinates(texCoords);\n#endif\n\n#ifdef MODULE_LIGHTING\n  lighting_setPositionAndNormal(positions, normals);\n  lighting_apply_light(positions);\n  lighting_apply_reflection(positions);\n#endif\n\n#ifdef MODULE_PICKING\n  picking_setPickingColor(pickingColors);\n#endif\n\n}\n");
//# sourceMappingURL=modular-vertex.glsl.js.map

/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isOldIE;
/* global window */
// opts allows user agent to be overridden for testing
function isOldIE() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var navigator = typeof window !== 'undefined' ? window.navigator || {} : {};
  var userAgent = opts.userAgent || navigator.userAgent || ''; // We only care about older versions of IE (IE 11 and below). Newer versions of IE (Edge)
  // have much better web standards support.

  var isMSIE = userAgent.indexOf('MSIE ') !== -1;
  var isTrident = userAgent.indexOf('Trident/') !== -1;
  return isMSIE || isTrident;
}
//# sourceMappingURL=is-old-ie.js.map

/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getQualifierDetails;
/* harmony export (immutable) */ __webpack_exports__["b"] = getPassthroughFS;
/* harmony export (immutable) */ __webpack_exports__["c"] = typeToChannelSuffix;
/* harmony export (immutable) */ __webpack_exports__["d"] = typeToChannelCount;
/* unused harmony export convertToVec4 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_assert__);


var FS100 = 'void main() {}';
var FS300 = "#version 300 es\n".concat(FS100); // Prase given glsl line and return qualifier details or null

function getQualifierDetails(line, qualifiers) {
  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];
  var words = line.replace(/^\s+/, '').split(/\s+/); // TODO add support for precession qualifiers (highp, mediump and lowp)

  var _words = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(words, 3),
      qualifier = _words[0],
      type = _words[1],
      definition = _words[2];

  if (!qualifiers.includes(qualifier) || !type || !definition) {
    return null;
  }

  var name = definition.split(';')[0];
  return {
    qualifier: qualifier,
    type: type,
    name: name
  };
} // Given the shader version, input and output variable names,
// builds and return a pass through fragment shader.

function getPassthroughFS() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$version = _ref.version,
      version = _ref$version === void 0 ? 100 : _ref$version,
      input = _ref.input,
      inputType = _ref.inputType,
      output = _ref.output;

  if (!input) {
    return version === 300 ? FS300 : FS100;
  }

  var outputValue = convertToVec4(input, inputType);

  if (version === 300) {
    return "#version 300 es\nin ".concat(inputType, " ").concat(input, ";\nout vec4 ").concat(output, ";\nvoid main() {\n  ").concat(output, " = ").concat(outputValue, ";\n}");
  } // version 100


  return "varying ".concat(inputType, " ").concat(input, ";\nvoid main() {\n  gl_FragColor = ").concat(outputValue, ";\n}");
} // convert glsl type to suffix

function typeToChannelSuffix(type) {
  switch (type) {
    case 'float':
      return 'x';

    case 'vec2':
      return 'xy';

    case 'vec3':
      return 'xyz';

    case 'vec4':
      return 'xyzw';

    default:
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(false);
      return null;
  }
} // convert glsl type to channel count

function typeToChannelCount(type) {
  switch (type) {
    case 'float':
      return 1;

    case 'vec2':
      return 2;

    case 'vec3':
      return 3;

    case 'vec4':
      return 4;

    default:
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(false);
      return null;
  }
} // Returns glsl instruction for converting to vec4

function convertToVec4(variable, type) {
  switch (type) {
    case 'float':
      return "vec4(".concat(variable, ", 0.0, 0.0, 1.0)");

    case 'vec2':
      return "vec4(".concat(variable, ", 0.0, 1.0)");

    case 'vec3':
      return "vec4(".concat(variable, ", 1.0)");

    case 'vec4':
      return variable;

    default:
      __WEBPACK_IMPORTED_MODULE_1_assert___default()(false);
      return null;
  }
}
//# sourceMappingURL=shader-utils.js.map

/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return FEATURES; });
/* harmony export (immutable) */ __webpack_exports__["a"] = getContextInfo;
/* harmony export (immutable) */ __webpack_exports__["d"] = canCompileGLGSExtension;
/* harmony export (immutable) */ __webpack_exports__["b"] = hasFeatures;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__is_old_ie__ = __webpack_require__(200);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__assert__ = __webpack_require__(40);
// Feature detection for WebGL
//
// Provides a function that enables simple checking of which WebGL features are
// available in an WebGL1 or WebGL2 environment.

/* eslint-disable no-inline-comments, max-len */

/* global WebGL2RenderingContext */


var GL_TEXTURE_BINDING_3D = 0x806a;
var GL_VENDOR = 0x1f00;
var GL_RENDERER = 0x1f01;
var GL_VERSION = 0x1f02;
var GL_SHADING_LANGUAGE_VERSION = 0x8b8c; // Defines luma.gl "feature" names and semantics

var WEBGL_FEATURES = {
  // GLSL extensions
  GLSL_FRAG_DATA: ['WEBGL_draw_buffers', true],
  // TODO - name makes no sense in GLSL 3.00
  GLSL_FRAG_DEPTH: ['EXT_frag_depth', true],
  GLSL_DERIVATIVES: ['OES_standard_derivatives', true],
  GLSL_TEXTURE_LOD: ['EXT_shader_texture_lod', true]
}; // Create a key-mirrored FEATURES array

var FEATURES = {};
Object.keys(WEBGL_FEATURES).forEach(function (key) {
  FEATURES[key] = key;
});


function isWebGL2(gl) {
  return Boolean(gl && (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || 32874 === GL_TEXTURE_BINDING_3D));
}

function getContextInfo(gl) {
  var info = gl.getExtension('WEBGL_debug_renderer_info');
  var vendor = gl.getParameter(info && info.UNMASKED_VENDOR_WEBGL || GL_VENDOR);
  var renderer = gl.getParameter(info && info.UNMASKED_RENDERER_WEBGL || GL_RENDERER);
  var gpuVendor = identifyGPUVendor(vendor, renderer);
  var gpuInfo = {
    gpuVendor: gpuVendor,
    vendor: vendor,
    renderer: renderer,
    version: gl.getParameter(GL_VERSION),
    shadingLanguageVersion: gl.getParameter(GL_SHADING_LANGUAGE_VERSION)
  };
  return gpuInfo;
}

function identifyGPUVendor(vendor, renderer) {
  if (vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i)) {
    return 'NVIDIA';
  }

  if (vendor.match(/INTEL/i) || renderer.match(/INTEL/i)) {
    return 'INTEL';
  }

  if (vendor.match(/AMD/i) || renderer.match(/AMD/i) || vendor.match(/ATI/i) || renderer.match(/ATI/i)) {
    return 'AMD';
  }

  return 'UNKNOWN GPU';
}

var compiledGlslExtensions = {}; // Enables feature detection in IE11 due to a bug where gl.getExtension may return true
// but fail to compile when the extension is enabled in the shader. Specifically,
// the OES_standard_derivatives and WEBGL_draw_buffers extensions fails to compile in IE11 even though its included
// in the list of supported extensions.
// opts allows user agent to be overridden for testing

/*
* Inputs :
*  gl : WebGL context
*  cap : Key of WEBGL_FEATURES object identifying the extension
*  opts :
*   behavior : behavor of extension to be tested, by defualt `enable` is used
* Returns : true, if shader is compiled successfully, false otherwise
*/

function canCompileGLGSExtension(gl, cap) {
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var feature = WEBGL_FEATURES[cap];
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__assert__["a" /* default */])(feature, cap);

  if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__is_old_ie__["a" /* default */])(opts)) {
    return true;
  }

  if (cap in compiledGlslExtensions) {
    return compiledGlslExtensions[cap];
  }

  var extensionName = feature[0];
  var behavior = opts.behavior || 'enable';
  var source = "#extension GL_".concat(extensionName, " : ").concat(behavior, "\nvoid main(void) {}");
  var shader = gl.createShader(35633);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  var canCompile = gl.getShaderParameter(shader, 35713);
  gl.deleteShader(shader);
  compiledGlslExtensions[cap] = canCompile;
  return canCompile;
} // TODO - cache the value

function getFeature(gl, cap) {
  var feature = WEBGL_FEATURES[cap];
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__assert__["a" /* default */])(feature, cap); // Get extension name from table

  var extensionName = isWebGL2(gl) ? feature[1] || feature[0] : feature[0]; // Check if the value is dependent on checking an extension

  var value = typeof extensionName === 'string' ? Boolean(gl.getExtension(extensionName)) : extensionName;
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__assert__["a" /* default */])(value === false || value === true);
  return value;
}

function hasFeatures(gl, features) {
  features = Array.isArray(features) ? features : [features];
  return features.every(function (feature) {
    return getFeature(gl, feature);
  });
}
//# sourceMappingURL=webgl-info.js.map

/***/ }),
/* 203 */
/***/ (function(module, exports) {

module.exports = adjoint;

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/***/ }),
/* 204 */
/***/ (function(module, exports) {

module.exports = clone;

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
function clone(a) {
    var out = new Float32Array(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/***/ }),
/* 205 */
/***/ (function(module, exports) {

module.exports = copy;

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/***/ }),
/* 206 */
/***/ (function(module, exports) {

module.exports = create;

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
function create() {
    var out = new Float32Array(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/***/ }),
/* 207 */
/***/ (function(module, exports) {

module.exports = fromRotationTranslation;

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromRotationTranslation(out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};

/***/ }),
/* 208 */
/***/ (function(module, exports) {

module.exports = perspectiveFromFieldOfView;

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);

    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
}



/***/ }),
/* 209 */
/***/ (function(module, exports) {

module.exports = str;

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(236)


/***/ }),
/* 211 */
/***/ (function(module, exports) {

module.exports = calculateW

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
function calculateW (out, a) {
  var x = a[0], y = a[1], z = a[2]

  out[0] = x
  out[1] = y
  out[2] = z
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z))
  return out
}


/***/ }),
/* 212 */
/***/ (function(module, exports) {

module.exports = conjugate

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
function conjugate (out, a) {
  out[0] = -a[0]
  out[1] = -a[1]
  out[2] = -a[2]
  out[3] = a[3]
  return out
}


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
module.exports = __webpack_require__(237)


/***/ }),
/* 214 */
/***/ (function(module, exports) {

module.exports = fromMat3

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
function fromMat3 (out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8]
  var fRoot

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0)  // 2w
    out[3] = 0.5 * fRoot
    fRoot = 0.5 / fRoot  // 1/(4w)
    out[0] = (m[5] - m[7]) * fRoot
    out[1] = (m[6] - m[2]) * fRoot
    out[2] = (m[1] - m[3]) * fRoot
  } else {
    // |w| <= 1/2
    var i = 0
    if (m[4] > m[0]) {
      i = 1
    }
    if (m[8] > m[i * 3 + i]) {
      i = 2
    }
    var j = (i + 1) % 3
    var k = (i + 2) % 3

    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0)
    out[i] = 0.5 * fRoot
    fRoot = 0.5 / fRoot
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot
  }

  return out
}


/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports = identity

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
function identity (out) {
  out[0] = 0
  out[1] = 0
  out[2] = 0
  out[3] = 1
  return out
}


/***/ }),
/* 216 */
/***/ (function(module, exports) {

module.exports = invert

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
function invert (out, a) {
  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
    dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,
    invDot = dot ? 1.0 / dot : 0

  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot
  out[1] = -a1 * invDot
  out[2] = -a2 * invDot
  out[3] = a3 * invDot
  return out
}


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */
module.exports = __webpack_require__(238)


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(239)


/***/ }),
/* 219 */
/***/ (function(module, exports) {

module.exports = multiply

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
function multiply (out, a, b) {
  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bx = b[0], by = b[1], bz = b[2], bw = b[3]

  out[0] = ax * bw + aw * bx + ay * bz - az * by
  out[1] = ay * bw + aw * by + az * bx - ax * bz
  out[2] = az * bw + aw * bz + ax * by - ay * bx
  out[3] = aw * bw - ax * bx - ay * by - az * bz
  return out
}


/***/ }),
/* 220 */
/***/ (function(module, exports) {

module.exports = rotateX

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateX (out, a, rad) {
  rad *= 0.5

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bx = Math.sin(rad), bw = Math.cos(rad)

  out[0] = ax * bw + aw * bx
  out[1] = ay * bw + az * bx
  out[2] = az * bw - ay * bx
  out[3] = aw * bw - ax * bx
  return out
}


/***/ }),
/* 221 */
/***/ (function(module, exports) {

module.exports = rotateY

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateY (out, a, rad) {
  rad *= 0.5

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    by = Math.sin(rad), bw = Math.cos(rad)

  out[0] = ax * bw - az * by
  out[1] = ay * bw + aw * by
  out[2] = az * bw + ax * by
  out[3] = aw * bw - ay * by
  return out
}


/***/ }),
/* 222 */
/***/ (function(module, exports) {

module.exports = rotateZ

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateZ (out, a, rad) {
  rad *= 0.5

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bz = Math.sin(rad), bw = Math.cos(rad)

  out[0] = ax * bw + ay * bz
  out[1] = ay * bw - ax * bz
  out[2] = az * bw + aw * bz
  out[3] = aw * bw - az * bz
  return out
}


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

var vecDot = __webpack_require__(104)
var vecCross = __webpack_require__(103)
var vecLength = __webpack_require__(105)
var vecNormalize = __webpack_require__(106)

var quatNormalize = __webpack_require__(101)
var quatAxisAngle = __webpack_require__(102)

module.exports = rotationTo

var tmpvec3 = [0, 0, 0]
var xUnitVec3 = [1, 0, 0]
var yUnitVec3 = [0, 1, 0]

/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
function rotationTo (out, a, b) {
  var dot = vecDot(a, b)
  if (dot < -0.999999) {
    vecCross(tmpvec3, xUnitVec3, a)
    if (vecLength(tmpvec3) < 0.000001) {
      vecCross(tmpvec3, yUnitVec3, a)
    }
    vecNormalize(tmpvec3, tmpvec3)
    quatAxisAngle(out, tmpvec3, Math.PI)
    return out
  } else if (dot > 0.999999) {
    out[0] = 0
    out[1] = 0
    out[2] = 0
    out[3] = 1
    return out
  } else {
    vecCross(tmpvec3, a, b)
    out[0] = tmpvec3[0]
    out[1] = tmpvec3[1]
    out[2] = tmpvec3[2]
    out[3] = 1 + dot
    return quatNormalize(out, out)
  }
}


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(241)


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
module.exports = __webpack_require__(242)


/***/ }),
/* 226 */
/***/ (function(module, exports) {

module.exports = slerp

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
function slerp (out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations

  var ax = a[0], ay = a[1], az = a[2], aw = a[3],
    bx = b[0], by = b[1], bz = b[2], bw = b[3]

  var omega, cosom, sinom, scale0, scale1

  // calc cosine
  cosom = ax * bx + ay * by + az * bz + aw * bw
  // adjust signs (if necessary)
  if (cosom < 0.0) {
    cosom = -cosom
    bx = -bx
    by = -by
    bz = -bz
    bw = -bw
  }
  // calculate coefficients
  if ((1.0 - cosom) > 0.000001) {
    // standard case (slerp)
    omega = Math.acos(cosom)
    sinom = Math.sin(omega)
    scale0 = Math.sin((1.0 - t) * omega) / sinom
    scale1 = Math.sin(t * omega) / sinom
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t
    scale1 = t
  }
  // calculate final values
  out[0] = scale0 * ax + scale1 * bx
  out[1] = scale0 * ay + scale1 * by
  out[2] = scale0 * az + scale1 * bz
  out[3] = scale0 * aw + scale1 * bw

  return out
}


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
module.exports = __webpack_require__(243)


/***/ }),
/* 228 */
/***/ (function(module, exports) {

module.exports = cross

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0]
    out[0] = out[1] = 0
    out[2] = z
    return out
}

/***/ }),
/* 229 */
/***/ (function(module, exports) {

module.exports = transformMat4

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat4(out, a, m) {
    var x = a[0], 
        y = a[1]
    out[0] = m[0] * x + m[4] * y + m[12]
    out[1] = m[1] * x + m[5] * y + m[13]
    return out
}

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = angle

var fromValues = __webpack_require__(231)
var normalize = __webpack_require__(106)
var dot = __webpack_require__(104)

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
function angle(a, b) {
    var tempA = fromValues(a[0], a[1], a[2])
    var tempB = fromValues(b[0], b[1], b[2])
 
    normalize(tempA, tempA)
    normalize(tempB, tempB)
 
    var cosine = dot(tempA, tempB)

    if(cosine > 1.0){
        return 0
    } else {
        return Math.acos(cosine)
    }     
}


/***/ }),
/* 231 */
/***/ (function(module, exports) {

module.exports = fromValues;

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
function fromValues(x, y, z) {
    var out = new Float32Array(3)
    out[0] = x
    out[1] = y
    out[2] = z
    return out
}

/***/ }),
/* 232 */
/***/ (function(module, exports) {

module.exports = rotateX;

/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateX(out, a, b, c){
    var p = [], r=[]
    //Translate point to the origin
    p[0] = a[0] - b[0]
    p[1] = a[1] - b[1]
    p[2] = a[2] - b[2]

    //perform rotation
    r[0] = p[0]
    r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c)
    r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c)

    //translate to correct position
    out[0] = r[0] + b[0]
    out[1] = r[1] + b[1]
    out[2] = r[2] + b[2]

    return out
}

/***/ }),
/* 233 */
/***/ (function(module, exports) {

module.exports = rotateY;

/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateY(out, a, b, c){
    var p = [], r=[]
    //Translate point to the origin
    p[0] = a[0] - b[0]
    p[1] = a[1] - b[1]
    p[2] = a[2] - b[2]
  
    //perform rotation
    r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c)
    r[1] = p[1]
    r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c)
  
    //translate to correct position
    out[0] = r[0] + b[0]
    out[1] = r[1] + b[1]
    out[2] = r[2] + b[2]
  
    return out
}

/***/ }),
/* 234 */
/***/ (function(module, exports) {

module.exports = rotateZ;

/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateZ(out, a, b, c){
    var p = [], r=[]
    //Translate point to the origin
    p[0] = a[0] - b[0]
    p[1] = a[1] - b[1]
    p[2] = a[2] - b[2]
  
    //perform rotation
    r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c)
    r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c)
    r[2] = p[2]
  
    //translate to correct position
    out[0] = r[0] + b[0]
    out[1] = r[1] + b[1]
    out[2] = r[2] + b[2]
  
    return out
}

/***/ }),
/* 235 */
/***/ (function(module, exports) {

module.exports = transformMat4;

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2],
        w = m[3] * x + m[7] * y + m[11] * z + m[15]
    w = w || 1.0
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w
    return out
}

/***/ }),
/* 236 */
/***/ (function(module, exports) {

module.exports = add

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function add (out, a, b) {
  out[0] = a[0] + b[0]
  out[1] = a[1] + b[1]
  out[2] = a[2] + b[2]
  out[3] = a[3] + b[3]
  return out
}


/***/ }),
/* 237 */
/***/ (function(module, exports) {

module.exports = dot

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot (a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3]
}


/***/ }),
/* 238 */
/***/ (function(module, exports) {

module.exports = length

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
function length (a) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3]
  return Math.sqrt(x * x + y * y + z * z + w * w)
}


/***/ }),
/* 239 */
/***/ (function(module, exports) {

module.exports = lerp

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
function lerp (out, a, b, t) {
  var ax = a[0],
    ay = a[1],
    az = a[2],
    aw = a[3]
  out[0] = ax + t * (b[0] - ax)
  out[1] = ay + t * (b[1] - ay)
  out[2] = az + t * (b[2] - az)
  out[3] = aw + t * (b[3] - aw)
  return out
}


/***/ }),
/* 240 */
/***/ (function(module, exports) {

module.exports = normalize

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
function normalize (out, a) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3]
  var len = x * x + y * y + z * z + w * w
  if (len > 0) {
    len = 1 / Math.sqrt(len)
    out[0] = x * len
    out[1] = y * len
    out[2] = z * len
    out[3] = w * len
  }
  return out
}


/***/ }),
/* 241 */
/***/ (function(module, exports) {

module.exports = scale

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
function scale (out, a, b) {
  out[0] = a[0] * b
  out[1] = a[1] * b
  out[2] = a[2] * b
  out[3] = a[3] * b
  return out
}


/***/ }),
/* 242 */
/***/ (function(module, exports) {

module.exports = set

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
function set (out, x, y, z, w) {
  out[0] = x
  out[1] = y
  out[2] = z
  out[3] = w
  return out
}


/***/ }),
/* 243 */
/***/ (function(module, exports) {

module.exports = squaredLength

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength (a) {
  var x = a[0],
    y = a[1],
    z = a[2],
    w = a[3]
  return x * x + y * y + z * z + w * w
}


/***/ }),
/* 244 */
/***/ (function(module, exports) {

module.exports = transformMat4

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
function transformMat4 (out, a, m) {
  var x = a[0], y = a[1], z = a[2], w = a[3]
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w
  return out
}


/***/ }),
/* 245 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export encodePickingColor */
/* unused harmony export decodePickingColor */
/* unused harmony export getNullPickingColor */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(11);

var NULL_PICKING_COLOR = new Uint8Array([0, 0, 0]); // Encodes an index as a Uint8Array([r, g, b]) format picking color

function encodePickingColor(i) {
  return [i + 1 & 255, i + 1 >> 8 & 255, i + 1 >> 16 & 255];
} // Decodes a picking color in [r, g, b] format to an index

function decodePickingColor(color) {
  // assert(color instanceof Uint8Array);
  var _color = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(color, 3),
      i1 = _color[0],
      i2 = _color[1],
      i3 = _color[2]; // 1 was added to seperate from no selection


  var index = i1 + i2 * 256 + i3 * 65536 - 1;
  return index;
} // Return picking color representing no item at that pixel

function getNullPickingColor() {
  return NULL_PICKING_COLOR;
}
//# sourceMappingURL=picking-colors.js.map

/***/ }),
/* 246 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_shader__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_program__ = __webpack_require__(65);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_assert__ = __webpack_require__(5);






var ShaderCache =
/*#__PURE__*/
function () {
  /**
   * A cache of compiled shaders, keyed by shader source strings.
   * Compilation of long shaders can be time consuming.
   * By using this class, the application can ensure that each shader
   * is only compiled once.
   */
  function ShaderCache() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        gl = _ref.gl,
        _ref$_cachePrograms = _ref._cachePrograms,
        _cachePrograms = _ref$_cachePrograms === void 0 ? false : _ref$_cachePrograms;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, ShaderCache);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(gl);
    this.gl = gl;
    this.vertexShaders = {};
    this.fragmentShaders = {};
    this.programs = {};
    this._cachePrograms = _cachePrograms;
  }
  /**
   * Deletes shader references
   * @return {ShaderCache} - returns this for chaining
   */


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(ShaderCache, [{
    key: "delete",
    value: function _delete() {
      // TODO - requires reference counting to avoid deleting shaders in use
      return this;
    }
    /**
     * Returns a compiled `VertexShader` object corresponding to the supplied
     * GLSL source code string, if possible from cache.
     *
     * @param {WebGLRenderingContext} gl - gl context
     * @param {String} source - Source code for shader
     * @return {VertexShader} - a compiled vertex shader
     */

  }, {
    key: "getVertexShader",
    value: function getVertexShader(gl, source) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(typeof source === 'string');
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(this._compareContexts(gl, this.gl));
      var shader = this.vertexShaders[source];

      if (!shader) {
        shader = new __WEBPACK_IMPORTED_MODULE_2__webgl_shader__["a" /* VertexShader */](gl, source);
        this.vertexShaders[source] = shader;
      }

      return shader;
    }
    /**
     * Returns a compiled `VertexShader` object corresponding to the supplied
     * GLSL source code string, if possible from cache.
     * @param {WebGLRenderingContext} gl - gl context
     * @param {String} source - Source code for shader
     * @return {FragmentShader} - a compiled fragment shader, possibly from chache
     */

  }, {
    key: "getFragmentShader",
    value: function getFragmentShader(gl, source) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(typeof source === 'string');
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(this._compareContexts(gl, this.gl));
      var shader = this.fragmentShaders[source];

      if (!shader) {
        shader = new __WEBPACK_IMPORTED_MODULE_2__webgl_shader__["b" /* FragmentShader */](gl, source);
        this.fragmentShaders[source] = shader;
      }

      return shader;
    } // Retrive Shaders from cache if exists, otherwise create new instance.

  }, {
    key: "getProgram",
    value: function getProgram(gl, opts) {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(this._compareContexts(gl, this.gl));
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(typeof opts.vs === 'string');
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(typeof opts.fs === 'string');
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(typeof opts.id === 'string');

      var cacheKey = this._getProgramKey(opts);

      var program = this.programs[cacheKey];

      if (program) {
        this._resetProgram(program);

        return program;
      }

      program = this._createNewProgram(gl, opts); // Check if program can be cached
      // Program caching is experimental and expects
      // each Model to have a unique-id (wich is used in key generation)

      if (this._cachePrograms && this._checkProgramProp(program)) {
        program._isCached = true;
        this.programs[cacheKey] = program;
      }

      return program;
    }
  }, {
    key: "_getProgramKey",
    value: function _getProgramKey(opts) {
      return "".concat(opts.id, "-").concat(opts.vs, "-").concat(opts.fs);
    }
  }, {
    key: "_checkProgramProp",
    value: function _checkProgramProp(program) {
      // Check for transform feedback props (varyings, etc), we can't key such programs for now
      return !program.varyings;
    }
  }, {
    key: "_createNewProgram",
    value: function _createNewProgram(gl, opts) {
      var vs = opts.vs,
          fs = opts.fs;
      var vertexShader = this.getVertexShader(gl, vs);
      var fragmentShader = this.getFragmentShader(gl, fs);
      return new __WEBPACK_IMPORTED_MODULE_3__webgl_program__["a" /* default */](this.gl, Object.assign({}, opts, {
        vs: vertexShader,
        fs: fragmentShader
      }));
    }
  }, {
    key: "_resetProgram",
    value: function _resetProgram(program, opts) {
      program.reset();
    } // Handle debug contexts

  }, {
    key: "_compareContexts",
    value: function _compareContexts(gl1, gl2) {
      return (gl1.gl || gl1) === (gl2.gl || gl2);
    }
  }]);

  return ShaderCache;
}();


//# sourceMappingURL=shader-cache.js.map

/***/ }),
/* 247 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["b"] = updateForTextures;
/* harmony export (immutable) */ __webpack_exports__["a"] = getSizeUniforms;
/* unused harmony export getVaryingType */
/* unused harmony export processAttributeDefinition */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_assert___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_assert__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__luma_gl_shadertools__ = __webpack_require__(29);


var SAMPLER_UNIFORM_PREFIX = 'transform_uSampler_';
var SIZE_UNIFORM_PREFIX = 'transform_uSize_';
var VS_POS_VARIABLE = 'transform_position'; // Scan provided vertex shader
// for each texture attribute, inject sampler instructions and build uniforms for sampler
// for texture target, get varying type and inject position instruction

function updateForTextures(_ref) {
  var vs = _ref.vs,
      sourceTextureMap = _ref.sourceTextureMap,
      targetTextureVarying = _ref.targetTextureVarying,
      targetTexture = _ref.targetTexture;
  var texAttributeNames = Object.keys(sourceTextureMap);
  var sourceCount = texAttributeNames.length;
  var targetTextureType = null;
  var samplerTextureMap = {};
  var updatedVs = vs;
  var finalInject = {};

  if (sourceCount > 0 || targetTextureVarying) {
    var vsLines = updatedVs.split('\n');
    var updateVsLines = vsLines.slice();
    vsLines.forEach(function (line, index, lines) {
      // TODO add early exit
      if (sourceCount > 0) {
        var updated = processAttributeDefinition(line, sourceTextureMap);

        if (updated) {
          var updatedLine = updated.updatedLine,
              inject = updated.inject;
          updateVsLines[index] = updatedLine; // sampleInstructions.push(sampleInstruction);

          finalInject = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__luma_gl_shadertools__["c" /* combineInjects */])([finalInject, inject]);
          Object.assign(samplerTextureMap, updated.samplerTextureMap);
          sourceCount--;
        }
      }

      if (targetTextureVarying && !targetTextureType) {
        targetTextureType = getVaryingType(line, targetTextureVarying);
      }
    });

    if (targetTextureVarying) {
      __WEBPACK_IMPORTED_MODULE_0_assert___default()(targetTexture);
      var sizeName = "".concat(SIZE_UNIFORM_PREFIX).concat(targetTextureVarying);
      var uniformDeclaration = "uniform vec2 ".concat(sizeName, ";\n");
      var posInstructions = "     vec2 ".concat(VS_POS_VARIABLE, " = transform_getPos(").concat(sizeName, ");\n     gl_Position = vec4(").concat(VS_POS_VARIABLE, ", 0, 1.);\n");
      var inject = {
        'vs:#decl': uniformDeclaration,
        'vs:#main-start': posInstructions
      };
      finalInject = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__luma_gl_shadertools__["c" /* combineInjects */])([finalInject, inject]);
    }

    updatedVs = updateVsLines.join('\n');
  }

  return {
    // updated vertex shader (commented texture attribute definition)
    vs: updatedVs,
    // type (float, vec2, vec3 of vec4) target texture varying
    targetTextureType: targetTextureType,
    // required vertex and fragment shader injects
    inject: finalInject,
    // map of sampler name to texture name, can be used to set attributes
    // usefull when swapping textures, as source and destination texture change when swap is called.
    samplerTextureMap: samplerTextureMap
  };
} // builds and returns an object contaning size uniform for each texture

function getSizeUniforms(_ref2) {
  var sourceTextureMap = _ref2.sourceTextureMap,
      targetTextureVarying = _ref2.targetTextureVarying,
      targetTexture = _ref2.targetTexture;
  var uniforms = {};
  var width;
  var height;

  if (targetTextureVarying) {
    width = targetTexture.width;
    height = targetTexture.height;
    uniforms["".concat(SIZE_UNIFORM_PREFIX).concat(targetTextureVarying)] = [width, height];
  }

  for (var textureName in sourceTextureMap) {
    var _sourceTextureMap$tex = sourceTextureMap[textureName];
    width = _sourceTextureMap$tex.width;
    height = _sourceTextureMap$tex.height;
    uniforms["".concat(SIZE_UNIFORM_PREFIX).concat(textureName)] = [width, height];
  }

  return uniforms;
} // Checks if provided line is defining an attribute, if so returns details otherwise null

function getAttributeDefinition(line) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__luma_gl_shadertools__["f" /* getQualifierDetails */])(line, ['attribute', 'in']);
}

function getSamplerDeclerations(textureName) {
  var samplerName = "".concat(SAMPLER_UNIFORM_PREFIX).concat(textureName);
  var sizeName = "".concat(SIZE_UNIFORM_PREFIX).concat(textureName);
  var uniformDeclerations = "  uniform sampler2D ".concat(samplerName, ";\n  uniform vec2 ").concat(sizeName, ";");
  return {
    samplerName: samplerName,
    sizeName: sizeName,
    uniformDeclerations: uniformDeclerations
  };
} // Return size (float, vec2 etc) of a given varying, null if doens't exist.


function getVaryingType(line, varying) {
  var qualaiferDetails = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__luma_gl_shadertools__["f" /* getQualifierDetails */])(line, ['varying', 'out']);

  if (!qualaiferDetails) {
    return null;
  }

  return qualaiferDetails.name === varying ? qualaiferDetails.type : null;
} // build required definitions, sample instructions for each texture attribute

function processAttributeDefinition(line, textureMap) {
  var samplerTextureMap = {};
  var attributeData = getAttributeDefinition(line);

  if (!attributeData) {
    return null;
  }

  var type = attributeData.type,
      name = attributeData.name;

  if (name && textureMap[name]) {
    var updatedLine = "// ".concat(line, " => Replaced by Transform with a sampler");

    var _getSamplerDecleratio = getSamplerDeclerations(name),
        samplerName = _getSamplerDecleratio.samplerName,
        sizeName = _getSamplerDecleratio.sizeName,
        uniformDeclerations = _getSamplerDecleratio.uniformDeclerations;

    var channels = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__luma_gl_shadertools__["g" /* typeToChannelSuffix */])(type);
    var sampleInstruction = "  ".concat(type, " ").concat(name, " = transform_getInput(").concat(samplerName, ", ").concat(sizeName, ").").concat(channels, ";\n");
    samplerTextureMap[samplerName] = name;
    var inject = {
      'vs:#decl': uniformDeclerations,
      'vs:#main-start': sampleInstruction
    }; // samplerNameMap

    return {
      // update vertex shader line.
      updatedLine: updatedLine,
      // inject object with sampler instructions.
      inject: inject,
      // sampler name to texture name map
      samplerTextureMap: samplerTextureMap
    };
  }

  return null;
}
//# sourceMappingURL=transform-shader-utils.js.map

/***/ }),
/* 248 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Transform; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_buffer__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__webgl_framebuffer__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__webgl_texture_2d__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__webgl_transform_feedback__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__luma_gl_shadertools__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__utils_assert__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__transform_shader_utils__ = __webpack_require__(247);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__webgl_copy_and_blit__ = __webpack_require__(50);




var _SRC_TEX_PARAMETER_OV;












 // Texture parameters needed so sample can precisely pick pixel for given element id.

var SRC_TEX_PARAMETER_OVERRIDES = (_SRC_TEX_PARAMETER_OV = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_SRC_TEX_PARAMETER_OV, 10241, 9728), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_SRC_TEX_PARAMETER_OV, 10240, 9728), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_SRC_TEX_PARAMETER_OV, 10242, 33071), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_SRC_TEX_PARAMETER_OV, 10243, 33071), _SRC_TEX_PARAMETER_OV);
var FS_OUTPUT_VARIABLE = 'transform_output';

var Transform =
/*#__PURE__*/
function () {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Transform, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      // For now WebGL2 only
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["b" /* isWebGL2 */])(gl);
    }
  }]);

  function Transform(gl) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Transform);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["c" /* assertWebGL2Context */])(gl);
    this.gl = gl;
    this.model = null;
    this.elementCount = 0;
    this.currentIndex = 0; // Source and destination resources are stored in two element Arrays for easier swapping when
    // 'feedbackMap' is provided. If not only the first array elment is used.
    // Each array element is an object with attribute name as Key and Buffer object as value.

    this.sourceBuffers = new Array(2); // Each array element is an object with attribute name as Key and Texture object as value.

    this.sourceTextures = new Array(2); // Each array element is an object with varying name as Key and Buffer object as value.

    this.feedbackBuffers = new Array(2); // Each array element is a Texture object used as color attachment for framebuffer.

    this.targetTextures = new Array(2); // Each array element is a TransformFeedback object.

    this.transformFeedbacks = new Array(2); // Each array element is a Framebuffer object.

    this.framebuffers = new Array(2);
    this._createdBuffers = {};
    this.elementIDBuffer = null; // reference source texture name for target texture

    this._targetRefTexName = null;

    this._initialize(props);

    Object.seal(this);
  } // Delete owned resources.


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Transform, [{
    key: "delete",
    value: function _delete() {
      for (var name in this._createdBuffers) {
        this._createdBuffers[name].delete();
      }

      this.model.delete();
    } // Return Buffer object for given varying name.

  }, {
    key: "getBuffer",
    value: function getBuffer() {
      var varyingName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var bufferOrParams = varyingName ? this.feedbackBuffers[this.currentIndex][varyingName] : null;

      if (!bufferOrParams) {
        return null;
      }

      return bufferOrParams instanceof __WEBPACK_IMPORTED_MODULE_4__webgl_buffer__["a" /* default */] ? bufferOrParams : bufferOrParams.buffer;
    } // Returns the color attachment textuer from current framebuffer target

  }, {
    key: "_getTargetTexture",
    value: function _getTargetTexture() {
      if (this.framebuffers[this.currentIndex]) {
        return this.framebuffers[this.currentIndex].attachments[36064];
      }

      return null;
    } // Return data either from Buffer or from Texture

  }, {
    key: "getData",
    value: function getData() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$varyingName = _ref.varyingName,
          varyingName = _ref$varyingName === void 0 ? null : _ref$varyingName,
          _ref$packed = _ref.packed,
          packed = _ref$packed === void 0 ? false : _ref$packed;

      // Either there should be specified feedbackBuffer or we should be rendering to a texture
      var buffer = this.getBuffer(varyingName);

      if (buffer) {
        return buffer.getData();
      } // When varyingName is not provided return data from framebuffer object.


      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(!varyingName || varyingName === this.targetTextureVarying);
      var pixels = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_13__webgl_copy_and_blit__["b" /* readPixelsToArray */])(this.framebuffers[this.currentIndex]);

      if (!packed) {
        return pixels;
      } // readPixels returns 4 elements for each pixel, pack the elements when requested


      var ArrayType = pixels.constructor;
      var channelCount = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__luma_gl_shadertools__["b" /* typeToChannelCount */])(this.targetTextureType);
      var packedPixels = new ArrayType(pixels.length * channelCount / 4);
      var packCount = 0;

      for (var i = 0; i < pixels.length; i += 4) {
        for (var j = 0; j < channelCount; j++) {
          packedPixels[packCount++] = pixels[i + j];
        }
      }

      return packedPixels;
    } // returns current framebuffer object that is being used.

  }, {
    key: "getFramebuffer",
    value: function getFramebuffer() {
      return this.framebuffers[this.currentIndex];
    }
  }, {
    key: "_getInputs",
    value: function _getInputs() {
      var uniforms = {};
      var current = this.currentIndex; // Buffer inputs

      var attributes = Object.assign({}, this.sourceBuffers[current]); // Texture inputs

      if (this.hasSourceTextures || this.targetTextureVarying) {
        // TODO: add option not generate position using element id.
        attributes.transform_elementID = this.elementIDBuffer;

        for (var sampler in this.samplerTextureMap) {
          var textureName = this.samplerTextureMap[sampler];
          uniforms[sampler] = this.sourceTextures[current][textureName];
        } // Also update size uniforms , add samplerSizeMap


        this._setSourceTextureParameters(); // get texture size uniforms


        var sizeUniforms = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_12__transform_shader_utils__["a" /* getSizeUniforms */])({
          sourceTextureMap: this.sourceTextures[current],
          targetTextureVarying: this.targetTextureVarying,
          targetTexture: this.targetTextures[current]
        });
        Object.assign(uniforms, sizeUniforms);
      }

      return {
        attributes: attributes,
        uniforms: uniforms
      };
    } // Run one transform feedback loop.

  }, {
    key: "run",
    value: function run() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _this$_getInputs = this._getInputs(),
          attributes = _this$_getInputs.attributes,
          uniforms = _this$_getInputs.uniforms;

      Object.assign(uniforms, opts.uniforms);
      var parameters = Object.assign({}, opts.parameters);
      var _opts$clearRenderTarg = opts.clearRenderTarget,
          clearRenderTarget = _opts$clearRenderTarg === void 0 ? true : _opts$clearRenderTarg;
      var framebuffer = null;
      var discard = true;

      if (this.renderingToTexture) {
        discard = false;
        framebuffer = this.framebuffers[this.currentIndex];
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(framebuffer);
        parameters.viewport = [0, 0, framebuffer.width, framebuffer.height];

        if (clearRenderTarget) {
          this.gl.clear(this.gl.COLOR_BUFFER_BIT);
        }
      }

      this.model.setAttributes(attributes);
      this.model.transform(Object.assign({}, opts, {
        transformFeedback: this.transformFeedbacks[this.currentIndex],
        uniforms: uniforms,
        discard: discard,
        framebuffer: framebuffer,
        parameters: parameters
      }));
    } // Swap source and destination buffers and textures.

  }, {
    key: "swapBuffers",
    value: function swapBuffers() {
      __WEBPACK_IMPORTED_MODULE_11__utils__["a" /* log */].deprecated('swapBuffers()', 'swap()');
      this.swap();
    } // Swap source and destination buffers and textures.

  }, {
    key: "swap",
    value: function swap() {
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(this.feedbackMap || this._swapTexture);
      this.currentIndex = (this.currentIndex + 1) % 2;
    } // Update some or all buffer bindings.

  }, {
    key: "update",
    value: function update() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (opts.elementCount) {
        this._setElementCount(opts.elementCount);
      }

      var _opts$sourceBuffers = opts.sourceBuffers,
          sourceBuffers = _opts$sourceBuffers === void 0 ? null : _opts$sourceBuffers,
          _opts$feedbackBuffers = opts.feedbackBuffers,
          feedbackBuffers = _opts$feedbackBuffers === void 0 ? null : _opts$feedbackBuffers;
      var currentIndex = this.currentIndex;

      if (sourceBuffers || feedbackBuffers) {
        for (var bufferName in feedbackBuffers) {
          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(feedbackBuffers[bufferName] instanceof __WEBPACK_IMPORTED_MODULE_4__webgl_buffer__["a" /* default */] || feedbackBuffers[bufferName].buffer instanceof __WEBPACK_IMPORTED_MODULE_4__webgl_buffer__["a" /* default */]);
        }

        Object.assign(this.sourceBuffers[currentIndex], sourceBuffers);
        Object.assign(this.feedbackBuffers[currentIndex], feedbackBuffers);

        this._createFeedbackBuffers({
          feedbackBuffers: feedbackBuffers
        });

        if (this.transformFeedbacks[currentIndex]) {
          this.transformFeedbacks[currentIndex].setBuffers(this.feedbackBuffers[currentIndex]);
        } // Buffers have changed, need to re-setup swap buffers.


        this._setupSwapBuffers();
      }

      var _sourceTextures = opts._sourceTextures,
          _targetTexture = opts._targetTexture;

      if (_sourceTextures || _targetTexture) {
        Object.assign(this.sourceTextures[currentIndex], _sourceTextures); // if _targetTexture specified use it, other wise rebuild traget texture using
        // '_targetRefTexName' as coresponding source texture may have been update.

        this._updateTargetTexture(_targetTexture || this._targetRefTexName, currentIndex); // textures have changed, need to re-setup swap textures.


        this._setupSwapTextures();
      }
    } // set texture filtering parameters on source textures.

  }, {
    key: "_setSourceTextureParameters",
    value: function _setSourceTextureParameters() {
      var index = this.currentIndex;

      for (var name in this.sourceTextures[index]) {
        this.sourceTextures[index][name].setParameters(SRC_TEX_PARAMETER_OVERRIDES);
      }
    } // set element count and updated elementID buffer if needed.

  }, {
    key: "_setElementCount",
    value: function _setElementCount(elementCount) {
      if (this.elementCount === elementCount) {
        return;
      }

      if (this.elementCount < elementCount) {
        this._updateElementIDBuffer(elementCount);
      }

      this.model.setVertexCount(elementCount);
      this.elementCount = elementCount;
    } // sets target texture for rendering by updating framebuffer

  }, {
    key: "_updateTargetTexture",
    value: function _updateTargetTexture(texture, index) {
      var targetTexture = this._buildTargetTexture(texture);

      if (targetTexture) {
        this.targetTextures[index] = targetTexture;

        if (this.framebuffers[index]) {
          // First update texture without re-sizing attachments
          this.framebuffers[index].update({
            attachments: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 36064, this.targetTextures[index]),
            resizeAttachments: false
          }); // Resize to new taget texture size

          this.framebuffers[index].resize({
            width: targetTexture.width,
            height: targetTexture.height
          });
        }
      }
    } // Private

  }, {
    key: "_initialize",
    value: function _initialize() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _this$_validateProps = this._validateProps(props),
          feedbackBuffers = _this$_validateProps.feedbackBuffers,
          feedbackMap = _this$_validateProps.feedbackMap;

      var sourceBuffers = props.sourceBuffers,
          varyings = props.varyings,
          _targetTexture = props._targetTexture,
          _targetTextureVarying = props._targetTextureVarying,
          _swapTexture = props._swapTexture;
      var varyingsArray = varyings;

      if (feedbackMap && !Array.isArray(varyings)) {
        varyingsArray = Object.values(feedbackMap);
      }

      this.varyingsArray = varyingsArray;
      this.feedbackMap = feedbackMap;
      this._swapTexture = _swapTexture;

      if (_targetTexture) {
        this.targetTextureVarying = _targetTextureVarying;
        this.renderingToTexture = true;
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(this.targetTextureVarying);
      }

      this._setupBuffers({
        sourceBuffers: sourceBuffers,
        feedbackBuffers: feedbackBuffers
      });

      this._setupTextures(props);

      this._setupSwapBuffers();

      this._setupSwapTextures();

      this._buildModel(Object.assign({}, props, {
        id: props.id || 'transform-model',
        drawMode: props.drawMode || 0,
        varyings: varyingsArray
      }));
    } // assert on required parameters

    /* eslint-disable complexity */

  }, {
    key: "_validateProps",
    value: function _validateProps(props) {
      var feedbackBuffers = props.feedbackBuffers,
          feedbackMap = props.feedbackMap; // backward compitability

      var destinationBuffers = props.destinationBuffers,
          sourceDestinationMap = props.sourceDestinationMap;

      if (destinationBuffers) {
        __WEBPACK_IMPORTED_MODULE_11__utils__["a" /* log */].deprecated('destinationBuffers', 'feedbackBuffers')();
        feedbackBuffers = feedbackBuffers || destinationBuffers;
      }

      if (sourceDestinationMap) {
        __WEBPACK_IMPORTED_MODULE_11__utils__["a" /* log */].deprecated('sourceDestinationMap', 'feedbackMap')();
        feedbackMap = feedbackMap || sourceDestinationMap;
      } // assert on required parameters


      var vs = props.vs,
          elementCount = props.elementCount,
          varyings = props.varyings;
      var _sourceTextures = props._sourceTextures,
          _targetTexture = props._targetTexture,
          _targetTextureVarying = props._targetTextureVarying,
          _swapTexture = props._swapTexture;
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(vs && ( // destinations are provided
      varyings || feedbackMap || _targetTexture) && // when only writting to textures auto-duduce from texture dimenstions
      elementCount);

      for (var bufferName in feedbackBuffers || {}) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(feedbackBuffers[bufferName] instanceof __WEBPACK_IMPORTED_MODULE_4__webgl_buffer__["a" /* default */] || feedbackBuffers[bufferName].buffer instanceof __WEBPACK_IMPORTED_MODULE_4__webgl_buffer__["a" /* default */]);
      }

      for (var textureName in _sourceTextures || {}) {
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(_sourceTextures[textureName] instanceof __WEBPACK_IMPORTED_MODULE_6__webgl_texture_2d__["a" /* default */]);
      } // If rendering to texture , varying is provided


      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(!_targetTexture || _targetTextureVarying); // swap texture must be a valid source texture

      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(!_swapTexture || _sourceTextures[_swapTexture]);
      return {
        feedbackBuffers: feedbackBuffers,
        feedbackMap: feedbackMap
      };
    }
    /* eslint-enable complexity */
    // setup source and destination buffers

  }, {
    key: "_setupBuffers",
    value: function _setupBuffers(_ref2) {
      var _ref2$sourceBuffers = _ref2.sourceBuffers,
          sourceBuffers = _ref2$sourceBuffers === void 0 ? null : _ref2$sourceBuffers,
          _ref2$feedbackBuffers = _ref2.feedbackBuffers,
          feedbackBuffers = _ref2$feedbackBuffers === void 0 ? null : _ref2$feedbackBuffers;
      this.sourceBuffers[0] = Object.assign({}, sourceBuffers);
      this.feedbackBuffers[0] = Object.assign({}, feedbackBuffers);

      this._createFeedbackBuffers({
        feedbackBuffers: feedbackBuffers
      });

      this.sourceBuffers[1] = {};
      this.feedbackBuffers[1] = {};
    } // setup source and destination textures

  }, {
    key: "_setupTextures",
    value: function _setupTextures() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _sourceTextures = props._sourceTextures,
          _targetTexture = props._targetTexture; // Setup source texture

      this.sourceTextures[0] = Object.assign({}, _sourceTextures);
      this.sourceTextures[1] = {};
      this.hasSourceTextures = Object.keys(this.sourceTextures[0]).length > 0;

      if (this.targetTextureVarying) {
        var texture = this._buildTargetTexture(_targetTexture); // Either a texture or refAttribute must be provided


        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(texture);
        this.targetTextures[0] = texture;
        this.targetTextures[1] = null;
      }
    } // Builds target texture using source reference or provided texture object.

  }, {
    key: "_buildTargetTexture",
    value: function _buildTargetTexture(textureOrAttribute) {
      var _parameters;

      if (textureOrAttribute instanceof __WEBPACK_IMPORTED_MODULE_6__webgl_texture_2d__["a" /* default */]) {
        return textureOrAttribute;
      }

      var refTexture = this.sourceTextures[0][textureOrAttribute];

      if (!refTexture) {
        return null;
      } // save reference texture name, when corresponding source texture is updated
      // we also update target texture.


      this._targetRefTexName = textureOrAttribute;
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["o" /* cloneTextureFrom */])(refTexture, {
        parameters: (_parameters = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_parameters, 10241, 9728), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_parameters, 10240, 9728), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_parameters, 10242, 33071), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_parameters, 10243, 33071), _parameters),
        pixelStore: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 37440, false)
      });
    } // auto create any feedback buffers

  }, {
    key: "_createFeedbackBuffers",
    value: function _createFeedbackBuffers(_ref3) {
      var feedbackBuffers = _ref3.feedbackBuffers;

      if (!this.feedbackMap) {
        // feedbackMap required to auto create buffers.
        return;
      }

      var current = this.currentIndex;

      for (var sourceBufferName in this.feedbackMap) {
        var feedbackBufferName = this.feedbackMap[sourceBufferName];

        if (feedbackBufferName !== this.targetTextureVarying && (!feedbackBuffers || !feedbackBuffers[feedbackBufferName])) {
          // Create new buffer with same layout and settings as source buffer
          var sourceBuffer = this.sourceBuffers[current][sourceBufferName];
          var bytes = sourceBuffer.bytes,
              type = sourceBuffer.type,
              usage = sourceBuffer.usage,
              accessor = sourceBuffer.accessor;
          var buffer = new __WEBPACK_IMPORTED_MODULE_4__webgl_buffer__["a" /* default */](this.gl, {
            bytes: bytes,
            type: type,
            usage: usage,
            accessor: accessor
          });

          if (this._createdBuffers[feedbackBufferName]) {
            this._createdBuffers[feedbackBufferName].delete();
          }

          this._createdBuffers[feedbackBufferName] = buffer;
          this.feedbackBuffers[current][feedbackBufferName] = buffer;
        }
      }
    } // Create a buffer and add to list of buffers to be deleted.

  }, {
    key: "_createNewBuffer",
    value: function _createNewBuffer(name, opts) {
      var buffer = new __WEBPACK_IMPORTED_MODULE_4__webgl_buffer__["a" /* default */](this.gl, opts);

      if (this._createdBuffers[name]) {
        this._createdBuffers[name].delete();

        this._createdBuffers[name] = buffer;
      }

      return buffer;
    } // setup buffers for swapping.
    // Second set of source and feedback objects are setup to point
    // to corresponding feedback and source buffers.

  }, {
    key: "_setupSwapBuffers",
    value: function _setupSwapBuffers() {
      if (!this.feedbackMap) {
        // feedbackMap required set up swap buffers.
        return;
      }

      var current = this.currentIndex;
      var next = (current + 1) % 2; // Copy all buffers/textures so un-mapped sources will remain same

      Object.assign(this.sourceBuffers[next], this.sourceBuffers[current]);
      Object.assign(this.feedbackBuffers[next], this.feedbackBuffers[current]);

      for (var srcName in this.feedbackMap) {
        var dstName = this.feedbackMap[srcName]; // TODO: add textureMap and remove this if loop

        if (dstName !== this.targetTextureVarying) {
          this.sourceBuffers[next][srcName] = this.feedbackBuffers[current][dstName];
          this.feedbackBuffers[next][dstName] = this.sourceBuffers[current][srcName]; // make sure the new destination buffer is a Buffer object

          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_10__utils_assert__["a" /* default */])(this.feedbackBuffers[next][dstName] instanceof __WEBPACK_IMPORTED_MODULE_4__webgl_buffer__["a" /* default */]);
        }
      } // When triggered by `update()` TranformFeedback objects are already set up,
      // if so update buffers


      if (this.transformFeedbacks[next]) {
        this.transformFeedbacks[next].setBuffers(this.feedbackBuffers[next]);
      } // TODO: add swap support for targetTexture and framebuffers

    } // setup textures for swapping.

  }, {
    key: "_setupSwapTextures",
    value: function _setupSwapTextures() {
      if (!this._swapTexture || !this.targetTextureVarying) {
        // Must be rendering to a texture and _swapTexture is provided
        return;
      }

      var current = this.currentIndex;
      var next = (current + 1) % 2;
      Object.assign(this.sourceTextures[next], this.sourceTextures[current]);
      this.sourceTextures[next][this._swapTexture] = this.targetTextures[current];

      this._updateTargetTexture(this.sourceTextures[current][this._swapTexture], next);
    } // build Model and TransformFeedback objects

  }, {
    key: "_buildModel",
    value: function _buildModel() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _this$_getShaders = this._getShaders(props),
          vs = _this$_getShaders.vs,
          fs = _this$_getShaders.fs,
          modules = _this$_getShaders.modules,
          uniforms = _this$_getShaders.uniforms,
          inject = _this$_getShaders.inject,
          samplerTextureMap = _this$_getShaders.samplerTextureMap;

      this.model = new __WEBPACK_IMPORTED_MODULE_3__model__["a" /* default */](this.gl, Object.assign({}, props, {
        vs: vs,
        fs: fs,
        vertexCount: props.elementCount,
        modules: modules,
        uniforms: uniforms,
        inject: inject
      }));
      this.samplerTextureMap = samplerTextureMap; // setup TF to capture varyings.

      this._setupTransformFeedback(); // setup Framebuffer object for rendering to Texture.


      this._setupFramebuffers(); // create buffer to access source texture pixesl.


      this._setElementCount(props.elementCount);
    } // setup TransformFeedback objects to capture the results

  }, {
    key: "_setupTransformFeedback",
    value: function _setupTransformFeedback() {
      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_11__utils__["e" /* isObjectEmpty */])(this.feedbackBuffers[0])) {
        return;
      }

      this.transformFeedbacks[0] = new __WEBPACK_IMPORTED_MODULE_7__webgl_transform_feedback__["a" /* default */](this.gl, {
        program: this.model.program,
        buffers: this.feedbackBuffers[0]
      }); // If buffers are swappable setup second transform feedback object.

      if (this.feedbackMap) {
        this.transformFeedbacks[1] = new __WEBPACK_IMPORTED_MODULE_7__webgl_transform_feedback__["a" /* default */](this.gl, {
          program: this.model.program,
          buffers: this.feedbackBuffers[1]
        });
      }
    } // setup framebuffers with texture attachments, to which results are rendered

  }, {
    key: "_setupFramebuffers",
    value: function _setupFramebuffers() {
      if (!this.renderingToTexture) {
        return;
      }

      var _this$targetTextures$ = this.targetTextures[0],
          width = _this$targetTextures$.width,
          height = _this$targetTextures$.height;
      this.framebuffers[0] = new __WEBPACK_IMPORTED_MODULE_5__webgl_framebuffer__["a" /* default */](this.gl, {
        id: "".concat(this.id || 'transform', "-framebuffer-0"),
        width: width,
        height: height,
        attachments: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 36064, this.targetTextures[0])
      });

      if (this._swapTexture) {
        var _this$targetTextures$2 = this.targetTextures[1];
        width = _this$targetTextures$2.width;
        height = _this$targetTextures$2.height;
        this.framebuffers[1] = new __WEBPACK_IMPORTED_MODULE_5__webgl_framebuffer__["a" /* default */](this.gl, {
          id: "".concat(this.id || 'transform', "-framebuffer-1"),
          width: width,
          height: height,
          attachments: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, 36064, this.targetTextures[1])
        });
      }
    } // create/update buffer to access source texture's individual pixels.

  }, {
    key: "_updateElementIDBuffer",
    value: function _updateElementIDBuffer(elementCount) {
      if (!this.hasSourceTextures && !this.targetTextureVarying) {
        return;
      } // NOTE: using float so this will work with GLSL 1.0 shaders.


      var elementIds = new Float32Array(elementCount);
      elementIds.forEach(function (_, index, array) {
        array[index] = index;
      });

      if (!this.elementIDBuffer) {
        this.elementIDBuffer = new __WEBPACK_IMPORTED_MODULE_4__webgl_buffer__["a" /* default */](this.gl, {
          data: elementIds,
          size: 1
        });
      } else {
        this.elementIDBuffer.setData({
          data: elementIds
        });
      }
    } // build and return shader releated parameters

  }, {
    key: "_getShaders",
    value: function _getShaders() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _this$_processVertexS = this._processVertexShader(props.vs),
          vs = _this$_processVertexS.vs,
          uniforms = _this$_processVertexS.uniforms,
          targetTextureType = _this$_processVertexS.targetTextureType,
          inject = _this$_processVertexS.inject,
          samplerTextureMap = _this$_processVertexS.samplerTextureMap;

      var combinedInject = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__luma_gl_shadertools__["c" /* combineInjects */])([props.inject || {}, inject]);
      this.targetTextureType = targetTextureType;
      var fs = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_8__luma_gl_shadertools__["d" /* getPassthroughFS */])({
        version: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_9__webgl_utils__["p" /* getShaderVersion */])(vs),
        input: this.targetTextureVarying,
        inputType: targetTextureType,
        output: FS_OUTPUT_VARIABLE
      });
      var modules = this.hasSourceTextures || this.targetTextureVarying ? [__WEBPACK_IMPORTED_MODULE_8__luma_gl_shadertools__["e" /* _transform */]].concat(props.modules || []) : props.modules;
      return {
        vs: vs,
        fs: fs,
        modules: modules,
        uniforms: uniforms,
        inject: combinedInject,
        samplerTextureMap: samplerTextureMap
      };
    } // scan and update vertex shader for texture atrributes.

  }, {
    key: "_processVertexShader",
    value: function _processVertexShader(vs) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_12__transform_shader_utils__["b" /* updateForTextures */])({
        vs: vs,
        sourceTextureMap: this.sourceTextures[this.currentIndex],
        targetTextureVarying: this.targetTextureVarying,
        targetTexture: this.targetTextures[this.currentIndex]
      });
    }
  }]);

  return Transform;
}();


//# sourceMappingURL=transform.js.map

/***/ }),
/* 249 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return addModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return logModel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return removeModel; });
/* unused harmony export setOverride */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getOverrides; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_seer__ = __webpack_require__(295);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_seer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_seer__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_globals__ = __webpack_require__(22);


var models = {};
/**
 * Add a model to our cache indexed by id
 */

var addModel = function addModel(model) {
  if (models[model.id]) {
    return;
  }

  models[model.id] = model;
  __WEBPACK_IMPORTED_MODULE_0_seer___default.a.listItem('luma.gl', model.id);
};
/**
 * Log a model uniforms and attributes.
 */

var logModel = function logModel(model, uniforms) {
  if (!__WEBPACK_IMPORTED_MODULE_0_seer___default.a.isReady() || __WEBPACK_IMPORTED_MODULE_0_seer___default.a.throttle("luma.gl:".concat(model.id), 1e3)) {
    return;
  }

  var attributesObject = model.geometry ? Object.assign({}, model.geometry.attributes, model.attributes) : model.attributes;
  var uniformsObject = Object.assign({}, model.uniforms, uniforms);
  __WEBPACK_IMPORTED_MODULE_0_seer___default.a.multiUpdate('luma.gl', model.id, [{
    path: 'objects.uniforms',
    data: uniformsObject
  }, {
    path: 'objects.attributes',
    data: attributesObject
  }]);
};
/**
 * Remove a previously set model from the cache
 */

var removeModel = function removeModel(id) {
  delete models[id];
  __WEBPACK_IMPORTED_MODULE_0_seer___default.a.deleteItem('luma.gl', id);
};
/**
 * Recursively traverse an object given a path of properties and set the given value
 */

var recursiveSet = function recursiveSet(obj, path, value) {
  if (!obj) {
    return;
  }

  if (path.length > 1) {
    recursiveSet(obj[path[0]], path.slice(1), value);
  } else {
    obj[path[0]] = value;
  }
};

var overrides = new Map();
/**
 * Create an override on the specify layer, indexed by a valuePath array.
 * Do nothing in case Seer as not been initialized to prevent any preformance drawback.
 */

var setOverride = function setOverride(id, valuePath, value) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* window */].__SEER_INITIALIZED__) {
    return;
  }

  if (!overrides.has(id)) {
    overrides.set(id, new Map());
  }

  var uniforms = overrides.get(id);
  uniforms.set(valuePath, value);
};
/**
 * Apply overrides to a specific model's uniforms
 */

var getOverrides = function getOverrides(id, uniforms) {
  if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["b" /* window */].__SEER_INITIALIZED__ || !id) {
    return;
  }

  var overs = overrides.get(id);

  if (!overs) {
    return;
  }

  overs.forEach(function (value, valuePath) {
    recursiveSet(uniforms, valuePath, value);
  });
};
/**
 * Listen for luma.gl edit events
 */

__WEBPACK_IMPORTED_MODULE_0_seer___default.a.listenFor('luma.gl', function (payload) {
  var model = models[payload.itemKey];

  if (!model || payload.type !== 'edit' || payload.valuePath[0] !== 'uniforms') {
    return;
  }

  var valuePath = payload.valuePath.slice(1);
  setOverride(payload.itemKey, valuePath, payload.value);
  var uniforms = model.getUniforms();
  recursiveSet(uniforms, valuePath, payload.value);
  model.setUniforms(uniforms);
});
//# sourceMappingURL=seer-integration.js.map

/***/ }),
/* 250 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = requestFile;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);



// Supports loading (requesting) assets with XHR (XmlHttpRequest)

/* eslint-disable guard-for-in, complexity, no-try-catch */

/* global XMLHttpRequest */
function noop() {}

var XHR_STATES = {
  UNINITIALIZED: 0,
  LOADING: 1,
  LOADED: 2,
  INTERACTIVE: 3,
  COMPLETED: 4
};

var XHR =
/*#__PURE__*/
function () {
  function XHR(_ref) {
    var url = _ref.url,
        _ref$path = _ref.path,
        path = _ref$path === void 0 ? null : _ref$path,
        _ref$method = _ref.method,
        method = _ref$method === void 0 ? 'GET' : _ref$method,
        _ref$asynchronous = _ref.asynchronous,
        asynchronous = _ref$asynchronous === void 0 ? true : _ref$asynchronous,
        _ref$noCache = _ref.noCache,
        noCache = _ref$noCache === void 0 ? false : _ref$noCache,
        _ref$sendAsBinary = _ref.sendAsBinary,
        sendAsBinary = _ref$sendAsBinary === void 0 ? false : _ref$sendAsBinary,
        _ref$responseType = _ref.responseType,
        responseType = _ref$responseType === void 0 ? false : _ref$responseType,
        _ref$onProgress = _ref.onProgress,
        onProgress = _ref$onProgress === void 0 ? noop : _ref$onProgress,
        _ref$onError = _ref.onError,
        onError = _ref$onError === void 0 ? noop : _ref$onError,
        _ref$onAbort = _ref.onAbort,
        onAbort = _ref$onAbort === void 0 ? noop : _ref$onAbort,
        _ref$onComplete = _ref.onComplete,
        onComplete = _ref$onComplete === void 0 ? noop : _ref$onComplete;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, XHR);

    this.url = path ? path.join(path, url) : url;
    this.method = method;
    this.async = asynchronous;
    this.noCache = noCache;
    this.sendAsBinary = sendAsBinary;
    this.responseType = responseType;
    this.req = new XMLHttpRequest();

    this.req.onload = function (e) {
      return onComplete(e);
    };

    this.req.onerror = function (e) {
      return onError(e);
    };

    this.req.onabort = function (e) {
      return onAbort(e);
    };

    this.req.onprogress = function (e) {
      if (e.lengthComputable) {
        onProgress(e, Math.round(e.loaded / e.total * 100));
      } else {
        onProgress(e, -1);
      }
    };
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(XHR, [{
    key: "setRequestHeader",
    value: function setRequestHeader(header, value) {
      this.req.setRequestHeader(header, value);
      return this;
    } // /* eslint-disable max-statements */

  }, {
    key: "sendAsync",
    value: function sendAsync() {
      var _this = this;

      var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.body || null;
      return new Promise(function (resolve, reject) {
        try {
          var req = _this.req,
              method = _this.method,
              noCache = _this.noCache,
              sendAsBinary = _this.sendAsBinary,
              responseType = _this.responseType;
          var url = noCache ? _this.url + (_this.url.indexOf('?') >= 0 ? '&' : '?') + Date.now() : _this.url;
          req.open(method, url, _this.async);

          if (responseType) {
            req.responseType = responseType;
          }

          if (_this.async) {
            req.onreadystatechange = function (e) {
              if (req.readyState === XHR_STATES.COMPLETED) {
                if (req.status === 200) {
                  resolve(req.responseType ? req.response : req.responseText);
                } else {
                  reject(new Error("".concat(req.status, ": ").concat(url)));
                }
              }
            };
          }

          if (sendAsBinary) {
            req.sendAsBinary(body);
          } else {
            req.send(body);
          }

          if (!_this.async) {
            if (req.status === 200) {
              resolve(req.responseType ? req.response : req.responseText);
            } else {
              reject(new Error("".concat(req.status, ": ").concat(url)));
            }
          }
        } catch (error) {
          reject(error);
        }
      });
    }
    /* eslint-enable max-statements */

  }]);

  return XHR;
}();

function requestFile(opts) {
  var xhr = new XHR(opts);
  return xhr.sendAsync();
}
//# sourceMappingURL=browser-request-file.js.map

/***/ }),
/* 251 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__browser_load__ = __webpack_require__(119);
/* unused harmony reexport setPathPrefix */
/* unused harmony reexport loadFile */
/* unused harmony reexport loadImage */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__load_files__ = __webpack_require__(120);
/* unused harmony reexport loadFiles */
/* unused harmony reexport loadImages */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__load_files__["a"]; });
/* unused harmony reexport loadProgram */
/* unused harmony reexport loadModel */
/* unused harmony reexport parseModel */
// Call a require based helper to select platform to export



//# sourceMappingURL=index.js.map

/***/ }),
/* 252 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export DirectionalLight */
/* unused harmony export AmbientLight */
/* unused harmony export PointLight */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_math_gl__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__core_object_3d__ = __webpack_require__(42);





 // default light source parameters

var DEFAULT_LIGHT_POSITION = [0.0, 0.0, 1.0];
var DEFAULT_LIGHT_DIRECTION = [0.0, 0.0, -1.0];
var DEFAULT_LIGHT_INTENSITY = 1.0;
var DEFAULT_LIGHT_COLOR = [255, 255, 255];

var LightSource =
/*#__PURE__*/
function (_Object3D) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(LightSource, _Object3D);

  function LightSource(props) {
    var _this;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, LightSource);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(LightSource).call(this, props));
    var _props$color = props.color,
        color = _props$color === void 0 ? DEFAULT_LIGHT_COLOR : _props$color,
        _props$intensity = props.intensity,
        intensity = _props$intensity === void 0 ? DEFAULT_LIGHT_INTENSITY : _props$intensity;
    _this.color = color;
    _this.intensity = intensity;
    return _this;
  }

  return LightSource;
}(__WEBPACK_IMPORTED_MODULE_5__core_object_3d__["a" /* default */]);

var DirectionalLight =
/*#__PURE__*/
function (_LightSource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(DirectionalLight, _LightSource);

  function DirectionalLight(props) {
    var _this2;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, DirectionalLight);

    _this2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(DirectionalLight).call(this, props));
    var _props$direction = props.direction,
        direction = _props$direction === void 0 ? DEFAULT_LIGHT_DIRECTION : _props$direction;
    _this2.direction = new __WEBPACK_IMPORTED_MODULE_4_math_gl__["c" /* Vector3 */](direction).normalize().toArray();
    return _this2;
  }

  return DirectionalLight;
}(LightSource);
var AmbientLight =
/*#__PURE__*/
function (_LightSource2) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(AmbientLight, _LightSource2);

  function AmbientLight() {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, AmbientLight);

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(AmbientLight).apply(this, arguments));
  }

  return AmbientLight;
}(LightSource);
var PointLight =
/*#__PURE__*/
function (_LightSource3) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(PointLight, _LightSource3);

  function PointLight(props) {
    var _this3;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, PointLight);

    _this3 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(PointLight).call(this, props));
    var _props$position = props.position,
        position = _props$position === void 0 ? DEFAULT_LIGHT_POSITION : _props$position;
    _this3.position = position;
    return _this3;
  }

  return PointLight;
}(LightSource);
//# sourceMappingURL=light-source.js.map

/***/ }),
/* 253 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Material; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);


var Material = function Material() {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Material);
};


//# sourceMappingURL=material.js.map

/***/ }),
/* 254 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__material__ = __webpack_require__(253);






var defaultProps = {
  ambient: 0.4,
  diffuse: 0.6,
  shininess: 32,
  specularColor: [255, 255, 255]
};

var PhongMaterial =
/*#__PURE__*/
function (_Material) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_inherits__["a" /* default */])(PhongMaterial, _Material);

  function PhongMaterial(props) {
    var _this;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, PhongMaterial);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(PhongMaterial).call(this, props));
    props = Object.assign({}, defaultProps, props);
    Object.assign(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), props);
    return _this;
  }

  return PhongMaterial;
}(__WEBPACK_IMPORTED_MODULE_5__material__["a" /* default */]);


//# sourceMappingURL=phong-material.js.map

/***/ }),
/* 255 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_luma_gl__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shader_module_pass__ = __webpack_require__(130);




/* global document */

var DEFAULT_VS = "attribute vec2 vertex;\nattribute vec2 _texCoord;\nvarying vec2 texCoord;\nvoid main() {\n  texCoord = _texCoord;\n  gl_Position = vec4(vertex * 2.0 - 1.0, 0.0, 1.0);\n}\n";

var Canvas =
/*#__PURE__*/
function () {
  function Canvas() {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Canvas);

    this.canvas = document.createElement('canvas');
    this.width = this.canvas.clientWidth;
    this.height = this.canvas.clientHeight;
    this.gl = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_luma_gl__["g" /* createGLContext */])({
      canvas: this.canvas,
      opts: {
        premultipliedAlpha: false
      }
    });

    if (!this.gl) {
      throw new Error('This browser does not support WebGL');
    }

    this.texture = null;
    this.spareTexture = null;
    this.flippedModel = null;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Canvas, [{
    key: "installFiltersAsMethods",
    value: function installFiltersAsMethods(filters) {
      var _this = this;

      var _loop = function _loop(key) {
        if (key !== 'canvas') {
          _this[key] = function (props) {
            return _this.filter(filters[key], props).bind(_this);
          };
        }
      };

      // // Filter methods
      for (var key in filters) {
        _loop(key);
      }
    }
  }, {
    key: "setTexture",
    value: function setTexture(element) {
      this.texture = new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["h" /* Texture2D */](this.gl, {
        pixels: element
      });
      this.resize(this.gl, this.texture.width, this.texture.height);
      return this;
    }
  }, {
    key: "resize",
    value: function resize(gl, width, height) {
      var realToCSSPixels = 1; // window.devicePixelRatio || 1;
      // Check if the canvas is not the same size.

      if (gl.canvas.width !== width || gl.canvas.height !== height) {
        // Make the canvas the same size
        gl.canvas.width = width;
        gl.canvas.height = height; // Lookup the size the browser is displaying the canvas in CSS pixels
        // and compute a size needed to make our drawingbuffer match it in
        // device pixels.

        var displayWidth = Math.floor(width / realToCSSPixels);
        var displayHeight = Math.floor(height / realToCSSPixels);
        gl.canvas.style.width = "".concat(displayWidth, "px");
        gl.canvas.style.height = "".concat(displayHeight, "px");
        gl.viewport(0, 0, width, height);
        this.width = displayWidth;
        this.height = displayHeight;
      }
    }
  }, {
    key: "replace",
    value: function replace(node) {
      node.parentNode.insertBefore(this.canvas, node);
      node.parentNode.removeChild(node);
      return this;
    } // Draw a texture to the canvas, with an optional width and height to scale to.
    // If no width and height are given then the original texture width and height
    // are used.

  }, {
    key: "draw",
    value: function draw() {
      this.multiPassRenderer = new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["i" /* _MultiPassRenderer */](this.gl, [new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["j" /* _ClearPass */](this.gl), new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["k" /* _TexturePass */](this.gl, {
        texture: this.texture
      }), new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["l" /* _CopyPass */](this.gl, {
        screen: true
      })]);
      this.multiPassRenderer.render();
      return this;
    }
  }, {
    key: "update",
    value: function update() {
      this.multiPassRenderer.render({});
      return this;
    }
  }, {
    key: "filter",
    value: function filter(shaderModule, props) {
      this.multiPassRenderer = new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["i" /* _MultiPassRenderer */](this.gl, [new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["j" /* _ClearPass */](this.gl), new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["k" /* _TexturePass */](this.gl, {
        texture: this.texture
      }), new __WEBPACK_IMPORTED_MODULE_3__shader_module_pass__["a" /* default */](this.gl, shaderModule, props), new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["l" /* _CopyPass */](this.gl, {
        screen: true
      })]);
      this.multiPassRenderer.render();
      return this;
    }
    /*
    contents() {
      // const gl = this.gl;
      // const texture = new Texture2D(this.gl, {
      //   width: this.texture.width,
      //   height: this.texture.height,
      //   format: gl.RGBA,
      //   type: gl.UNSIGNED_BYTE
      // });
      // this.texture.use();
      // texture.drawTo(() => this.getDefaultModel(this.gl).drawRect());
      // return wrapTexture(texture);
    }
    */
    // Get a Uint8 array of pixel values: [r, g, b, a, r, g, b, a, ...]
    // Length of the array will be width * height * 4.

  }, {
    key: "getPixelArray",
    value: function getPixelArray() {
      var gl = this.gl;
      var w = this.texture.width;
      var h = this.texture.height;
      var array = new Uint8Array(w * h * 4);
      this.texture.drawTo(function () {
        return gl.readPixels(0, 0, w, h, 6408, 5121, array);
      });
      return array;
    }
  }, {
    key: "_initialize",
    value: function _initialize(width, height) {
      var gl = this.gl;
      var type = 5121; // Go for floating point buffer textures if we can, it'll make the bokeh
      // filter look a lot better. Note that on Windows, ANGLE does not let you
      // render to a floating-point texture when linear filtering is enabled.
      // See http://crbug.com/172278 for more information.

      if (this.gl.getExtension('OES_texture_float') && gl.getExtension('OES_texture_float_linear')) {
        var testTexture = new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["h" /* Texture2D */](this.gl, {
          width: 100,
          height: 100,
          format: 6408,
          type: 5126
        });

        try {
          // Only use gl.FLOAT if we can render to it
          testTexture.drawTo(function () {
            type = 5126;
          });
        } catch (error) {// ignore
        }

        testTexture.destroy();
      }

      if (this.spareTexture) {
        this.spareTexture.destroy();
      }

      this.width = width;
      this.height = height;
      this.texture = new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["h" /* Texture2D */](this.gl, {
        width: width,
        height: height,
        format: 6408,
        type: type
      });
      this.spareTexture = new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["h" /* Texture2D */](this.gl, {
        width: width,
        height: height,
        format: 6408,
        type: type
      });
      this.extraTexture = this.extraTexture || new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["h" /* Texture2D */](this.gl, {
        width: 0,
        height: 0,
        format: 6408,
        type: type
      });
      this.flippedModel = this.flippedModel || new __WEBPACK_IMPORTED_MODULE_2_luma_gl__["f" /* Model */](this.gl, {
        vs: DEFAULT_VS,
        fs: "uniform sampler2D texture;\nvarying vec2 texCoord;\nvoid main() {\n  gl_FragColor = texture2D(texture, vec2(texCoord.x, 1.0 - texCoord.y));\n}\n"
      });
      this.isInitialized = true;
    }
  }]);

  return Canvas;
}();


//# sourceMappingURL=canvas.js.map

/***/ }),
/* 256 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ClearPass; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__pass__ = __webpack_require__(19);





//
// A pass that clears the input buffer or the screen.
//
// Attribution: This class and the multipass system were inspired by
// the THREE.js EffectComposer and *Pass classes


var ClearPass =
/*#__PURE__*/
function (_Pass) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(ClearPass, _Pass);

  function ClearPass(gl) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, ClearPass);

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(ClearPass).call(this, gl, Object.assign({
      id: 'clear-pass'
    }, props)));
  } // TODO - add support for colors, align with model.clear and framebuffer.clear
  // TODO - integrate with luma.gl clear, make sure right buffer is cleared


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(ClearPass, [{
    key: "_renderPass",
    value: function _renderPass(_ref) {
      var gl = _ref.gl;
      var _this$props$clearBits = this.props.clearBits,
          clearBits = _this$props$clearBits === void 0 ? 16384 | 256 : _this$props$clearBits;
      gl.clear(clearBits);
    }
  }]);

  return ClearPass;
}(__WEBPACK_IMPORTED_MODULE_5__pass__["a" /* default */]);


//# sourceMappingURL=clear-pass.js.map

/***/ }),
/* 257 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CopyPass; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__models__ = __webpack_require__(125);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__pass__ = __webpack_require__(19);





//
// A pass that disables stencil test.
//
// Attribution: This class and the multipass system were inspired by
// the THREE.js EffectComposer and *Pass classes


var fs = "uniform sampler2D uDiffuseSampler;\nuniform float uOpacity;\n\nvarying vec2 uv;\n\nvoid main() {\n  vec4 texel = texture2D(uDiffuseSampler, uv);\n  gl_FragColor = uOpacity * texel;\n}\n";

var CopyPass =
/*#__PURE__*/
function (_Pass) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(CopyPass, _Pass);

  function CopyPass(gl) {
    var _this;

    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, CopyPass);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(CopyPass).call(this, gl, Object.assign({
      id: 'copy-pass',
      swap: true
    }, props)));
    _this.clipspace = new __WEBPACK_IMPORTED_MODULE_5__models__["a" /* ClipSpace */](gl, {
      id: 'copy-pass',
      fs: fs
    });
    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(CopyPass, [{
    key: "_renderPass",
    value: function _renderPass(_ref) {
      var inputBuffer = _ref.inputBuffer;
      var _this$props$opacity = this.props.opacity,
          opacity = _this$props$opacity === void 0 ? 1.0 : _this$props$opacity;
      this.clipspace.draw({
        uniforms: {
          uDiffuseSampler: inputBuffer,
          uOpacity: opacity
        },
        parameters: {
          depthWrite: false,
          depthTest: false
        }
      });
    }
  }]);

  return CopyPass;
}(__WEBPACK_IMPORTED_MODULE_6__pass__["a" /* default */]);


//# sourceMappingURL=copy-pass.js.map

/***/ }),
/* 258 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MultiPassRenderer; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__composite_pass__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__render_state__ = __webpack_require__(129);





//
// A top-level composite render pass, that manages render state
//
// Attribution: This class and the multipass system were inspired by
// the THREE.js EffectComposer and *Pass classes



var MultiPassRenderer =
/*#__PURE__*/
function (_CompositePass) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(MultiPassRenderer, _CompositePass);

  function MultiPassRenderer(gl, props) {
    var _this;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, MultiPassRenderer);

    props = Array.isArray(props) ? {
      passes: props
    } : props;
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(MultiPassRenderer).call(this, gl, Object.assign({
      id: 'multi-pass'
    }, props)));
    _this.renderState = new __WEBPACK_IMPORTED_MODULE_6__render_state__["a" /* default */](gl, props);
    return _this;
  } // Override render() to just forward the call


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(MultiPassRenderer, [{
    key: "render",
    value: function render(animationProps) {
      this.renderState.reset();
      var _this$props$passes = this.props.passes,
          passes = _this$props$passes === void 0 ? [] : _this$props$passes;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = passes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pass = _step.value;
          pass.render(this.renderState, animationProps);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this;
    }
  }]);

  return MultiPassRenderer;
}(__WEBPACK_IMPORTED_MODULE_5__composite_pass__["a" /* default */]);


//# sourceMappingURL=multi-pass-renderer.js.map

/***/ }),
/* 259 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__pass__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__core_pick_models__ = __webpack_require__(111);





//
// A pass that renders a given scene directly on screen or into the read buffer
// for further processing.
//
// Attribution: This class and the multipass system were inspired by
// the THREE.js EffectComposer and *Pass classes



var PickingPass =
/*#__PURE__*/
function (_Pass) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(PickingPass, _Pass);

  function PickingPass(gl) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, PickingPass);

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(PickingPass).call(this, gl, Object.assign({
      id: 'picking-pass'
    }, props)));
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(PickingPass, [{
    key: "_renderPass",
    value: function _renderPass(_ref) {
      var gl = _ref.gl,
          inputBuffer = _ref.inputBuffer,
          animationProps = _ref.animationProps;
      var props = this.props;
      var pickPosition = animationProps ? animationProps._mousePosition : props.mousePosition;
      var useDevicePixels = animationProps ? animationProps.useDevicePixels : props.useDevicePixels; // Clear picking position if not available

      if (!pickPosition) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.props.models[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var model = _step.value;
            model.updateModuleSettings({
              pickingSelectedColor: null
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return;
      }

      var pickInfo = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__core_pick_models__["a" /* default */])(gl, {
        models: this.props.models,
        position: pickPosition,
        useDevicePixels: useDevicePixels,
        framebuffer: inputBuffer // Use as temporary frame buffer

      }); // Highlight it

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.props.models[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _model = _step2.value;

          if (pickInfo && pickInfo.model === _model) {
            var pickingSelectedColor = pickInfo && pickInfo.color || null;

            _model.updateModuleSettings({
              pickingSelectedColor: pickingSelectedColor
            });
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }]);

  return PickingPass;
}(__WEBPACK_IMPORTED_MODULE_5__pass__["a" /* default */]);


//# sourceMappingURL=picking-pass.js.map

/***/ }),
/* 260 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__pass__ = __webpack_require__(19);





//
// A pass that renders a given scene directly on screen or into the read buffer
// for further processing.
//
// Attribution: This class and the multipass system were inspired by
// the THREE.js EffectComposer and *Pass classes


var RenderPass =
/*#__PURE__*/
function (_Pass) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(RenderPass, _Pass);

  function RenderPass(gl) {
    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, RenderPass);

    return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(RenderPass).call(this, gl, Object.assign({
      id: 'render-pass'
    }, props)));
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(RenderPass, [{
    key: "_renderPass",
    value: function _renderPass(_ref) {
      var animationProps = _ref.animationProps;
      var _this$props = this.props,
          _this$props$models = _this$props.models,
          models = _this$props$models === void 0 ? [] : _this$props$models,
          drawParams = _this$props.drawParams;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = models[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var model = _step.value;
          model.draw(Object.assign({}, drawParams, {
            animationProps: animationProps
          }));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }]);

  return RenderPass;
}(__WEBPACK_IMPORTED_MODULE_5__pass__["a" /* default */]);


//# sourceMappingURL=render-pass.js.map

/***/ }),
/* 261 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TexturePass; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__models__ = __webpack_require__(125);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__pass__ = __webpack_require__(19);





//
// A pass that renders a given texture into screen space
//
// Attribution: This class and the multipass system were inspired by
// the THREE.js EffectComposer and *Pass classes


var fs = "uniform sampler2D uDiffuseSampler;\nuniform float uOpacity;\nvarying vec2 uv;\n\nvoid main() {\n  vec4 texel = texture2D(uDiffuseSampler, uv);\n  gl_FragColor = uOpacity * texel;\n}\n";

var TexturePass =
/*#__PURE__*/
function (_Pass) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(TexturePass, _Pass);

  function TexturePass(gl) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, TexturePass);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(TexturePass).call(this, gl, Object.assign({
      id: 'texture-pass'
    }, options)));
    var texture = options.texture,
        _options$opacity = options.opacity,
        opacity = _options$opacity === void 0 ? 1.0 : _options$opacity;
    _this.clipspace = new __WEBPACK_IMPORTED_MODULE_5__models__["a" /* ClipSpace */](gl, {
      id: 'texture-pass',
      fs: fs,
      uniforms: {
        uDiffuseSampler: texture,
        uOpacity: opacity
      }
    });
    return _this;
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(TexturePass, [{
    key: "_renderPass",
    value: function _renderPass() {
      this.clipspace.draw({
        parameters: {
          depthWrite: false,
          depthTest: false
        }
      });
    }
  }]);

  return TexturePass;
}(__WEBPACK_IMPORTED_MODULE_6__pass__["a" /* default */]);


//# sourceMappingURL=texture-pass.js.map

/***/ }),
/* 262 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getScratchArrayBuffer */
/* harmony export (immutable) */ __webpack_exports__["a"] = getScratchArray;
/* harmony export (immutable) */ __webpack_exports__["b"] = fillArray;
var arrayBuffer = null;
function getScratchArrayBuffer(byteLength) {
  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {
    arrayBuffer = new ArrayBuffer(byteLength);
  }

  return arrayBuffer;
}
function getScratchArray(Type, length) {
  var scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);
  return new Type(scratchArrayBuffer, 0, length); // arrayBuffer, byteOffset, length (in elements)
} // Uses copyWithin to significantly speed up typed array value filling

function fillArray(_ref) {
  var target = _ref.target,
      source = _ref.source,
      _ref$start = _ref.start,
      start = _ref$start === void 0 ? 0 : _ref$start,
      _ref$count = _ref.count,
      count = _ref$count === void 0 ? 1 : _ref$count;
  var length = source.length;
  var total = count * length;
  var copied = 0;

  for (var i = start; copied < length; copied++) {
    target[i++] = source[copied];
  }

  while (copied < total) {
    // If we have copied less than half, copy everything we got
    // else copy remaining in one operation
    if (copied < total - copied) {
      target.copyWithin(start + copied, start, start + copied);
      copied *= 2;
    } else {
      target.copyWithin(start + copied, start, start + total - copied);
      copied = total;
    }
  }

  return target;
}
/*

// Creates a new Uint8Array based on two different ArrayBuffers
// @private
// @param {ArrayBuffers} buffer1 The first buffer.
// @param {ArrayBuffers} buffer2 The second buffer.
// @return {ArrayBuffers} The new ArrayBuffer created out of the two.
//
export function copyArrayBuffer(
  targetBuffer, sourceBuffer, byteOffset, byteLength = sourceBuffer.byteLength
) {
  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);
  const sourceArray = new Uint8Array(sourceBuffer);
  targetArray.set(sourceArray);
  return targetBuffer;
}

*/
//# sourceMappingURL=array-utils-flat.js.map

/***/ }),
/* 263 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = formatValue;
// TODO / DEPRECATED - delete when confident that probe.gl logging implements all opts

/* eslint-disable no-console */
function formatArrayValue(v, opts) {
  var _opts$maxElts = opts.maxElts,
      maxElts = _opts$maxElts === void 0 ? 16 : _opts$maxElts,
      _opts$size = opts.size,
      size = _opts$size === void 0 ? 1 : _opts$size;
  var string = '[';

  for (var i = 0; i < v.length && i < maxElts; ++i) {
    if (i > 0) {
      string += ",".concat(i % size === 0 ? ' ' : '');
    }

    string += formatValue(v[i], opts);
  }

  var terminator = v.length > maxElts ? '...' : ']';
  return "".concat(string).concat(terminator);
}

function formatValue(v) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var EPSILON = 1e-16;
  var _opts$isInteger = opts.isInteger,
      isInteger = _opts$isInteger === void 0 ? false : _opts$isInteger;

  if (Array.isArray(v) || ArrayBuffer.isView(v)) {
    return formatArrayValue(v, opts);
  }

  if (!Number.isFinite(v)) {
    return String(v);
  }

  if (Math.abs(v) < EPSILON) {
    return isInteger ? '0' : '0.';
  }

  if (isInteger) {
    return v.toFixed(0);
  }

  if (Math.abs(v) > 100 && Math.abs(v) < 10000) {
    return v.toFixed(0);
  }

  var string = v.toPrecision(2);
  var decimal = string.indexOf('.0');
  return decimal === string.length - 2 ? string.slice(0, -1) : string;
}
//# sourceMappingURL=format-value.js.map

/***/ }),
/* 264 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__ = __webpack_require__(14);


// based on https://github.com/cheton/is-electron
// https://github.com/electron/electron/issues/2288

/* global window, process, navigator */
function isElectron() {
  // Renderer process
  if (typeof window !== 'undefined' && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(window.process) === 'object' && window.process.type === 'renderer') {
    return true;
  } // Main process


  if (typeof process !== 'undefined' && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(process.versions) === 'object' && Boolean(process.versions.electron)) {
    return true;
  } // Detect the user agent when the `nodeIntegration` option is set to true


  if ((typeof navigator === "undefined" ? "undefined" : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_typeof__["a" /* default */])(navigator)) === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {
    return true;
  }

  return false;
}

/* harmony default export */ __webpack_exports__["a"] = (isElectron());
//# sourceMappingURL=is-electron.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(33)))

/***/ }),
/* 265 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isOldIE;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__globals__ = __webpack_require__(22);
 // opts allows user agent to be overridden for testing

function isOldIE() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var navigator = __WEBPACK_IMPORTED_MODULE_0__globals__["b" /* window */].navigator || {};
  var userAgent = opts.userAgent || navigator.userAgent || ''; // We only care about older versions of IE (IE 11 and below). Newer versions of IE (Edge)
  // have much better web standards support.

  var isMSIE = userAgent.indexOf('MSIE ') !== -1;
  var isTrident = userAgent.indexOf('Trident/') !== -1;
  return isMSIE || isTrident;
}
//# sourceMappingURL=is-old-ie.js.map

/***/ }),
/* 266 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export promisify */
/**
 * Converts a function that accepts a node style (err, result) callback
 * as the last argument into a function that takes the same arguments
 * and returns a promise that resolves or rejects with the values provided
 * by the original callback
 * @param {Function} func - function to wrap
 * @return {Function} promisified function
 */

/* eslint-disable no-try-catch */
function promisify(func) {
  return function promisifiedFunction() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new Promise(function (resolve, reject) {
      function callback(error, data) {
        try {
          if (error) {
            reject(error);
          } else {
            resolve(data);
          }
        } catch (e) {
          reject(e);
        }
      }

      func.apply(void 0, args.concat([callback]));
    });
  };
}
/* eslint-enable no-try-catch */
//# sourceMappingURL=promise-utils.js.map

/***/ }),
/* 267 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = stubRemovedMethods;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__log__ = __webpack_require__(30);
 // Install stubs for removed methods

function stubRemovedMethods(instance, className, version, methodNames) {
  var upgradeMessage = "See luma.gl ".concat(version, " Upgrade Guide at http://uber.github.io/luma.gl/#/documentation/overview/upgrade-guide");
  var prototype = Object.getPrototypeOf(instance);
  methodNames.forEach(function (methodName) {
    if (prototype.methodName) {
      return;
    }

    prototype[methodName] = function () {
      __WEBPACK_IMPORTED_MODULE_0__log__["a" /* default */].removed("Calling removed method ".concat(className, ".").concat(methodName, ": "), upgradeMessage);
      throw new Error(methodName);
    };
  });
}
//# sourceMappingURL=stub-methods.js.map

/***/ }),
/* 268 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = uid;
/* harmony export (immutable) */ __webpack_exports__["b"] = isPowerOfTwo;
/* harmony export (immutable) */ __webpack_exports__["c"] = isObjectEmpty;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assert__ = __webpack_require__(5);

var uidCounters = {};
/**
 * Returns a UID.
 * @param {String} id= - Identifier base name
 * @return {number} uid
 **/

function uid() {
  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';
  uidCounters[id] = uidCounters[id] || 1;
  var count = uidCounters[id]++;
  return "".concat(id, "-").concat(count);
}
/**
 * Verifies if a given number is power of two or not.
 * @param {object} n - The number to check.
 * @return {Array} Returns true if the given number is power of 2, false otherwise.
 **/

function isPowerOfTwo(n) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__assert__["a" /* default */])(typeof n === 'number', 'Input must be a number');
  return n && (n & n - 1) === 0;
} // Returns true if given object is empty, false otherwise.

function isObjectEmpty(obj) {
  var isEmpty = true;
  /* eslint-disable no-unused-vars  */

  for (var key in obj) {
    isEmpty = false;
    break;
  }
  /* eslint-enable no-unused-vars  */


  return isEmpty;
}
//# sourceMappingURL=utils.js.map

/***/ }),
/* 269 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export enableDebug */
/* unused harmony export makeDebugContext */
/* unused harmony export getRealContext */
/* unused harmony export getDebugContext */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_globals__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(6);

// Depends on Khronos Debug support module being imported via "luma.gl/debug"

 // Helper to get shared context data

function getContextData(gl) {
  gl.luma = gl.luma || {};
  return gl.luma;
} // Enable or disable debug checks in debug contexts
// Non-debug contexts do not have checks (to ensure performance)
// Turning off debug for debug contexts removes most of the performance penalty


function enableDebug(debug) {
  __WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].debug = debug;
} // Returns (a potentially new) context with debug instrumentation turned off or on.
// Note that this actually returns a new context

function makeDebugContext(gl) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$debug = _ref.debug,
      debug = _ref$debug === void 0 ? true : _ref$debug;

  if (gl === null) {
    // Return to ensure we don't create a context in this case.
    return null;
  }

  return debug ? getDebugContext(gl) : getRealContext(gl);
} // Returns the real context from either of the real/debug contexts

function getRealContext(gl) {
  if (gl === null) {
    // Return to ensure we don't create a context in this case.
    return null;
  }

  var data = getContextData(gl); // If the context has a realContext member, it is a debug context so return the realContext

  return data.realContext ? data.realContext : gl;
} // Returns the debug context from either of the real/debug contexts

function getDebugContext(gl) {
  if (gl === null) {
    // Return to ensure we don't create a context in this case.
    return null;
  }

  if (!__WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].WebGLDebug) {
    __WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].warn('WebGL debug mode not activated. import "luma.gl/debug" to enable.')();
    return gl;
  }

  var data = getContextData(gl); // If this *is* a debug context, return itself

  if (data.realContext) {
    return gl;
  } // If this already has a debug context, return it.


  if (data.debugContext) {
    return data.debugContext;
  } // Create a new debug context


  var WebGLDebugContext = function WebGLDebugContext() {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, WebGLDebugContext);
  };

  var debugContext = __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].WebGLDebug ? __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].WebGLDebug.makeDebugContext(gl, onGLError, onValidateGLFunc) : gl;
  Object.assign(WebGLDebugContext.prototype, debugContext); // Store the debug context

  data.debugContext = debugContext;
  debugContext.debug = true;
  debugContext.gl = gl;
  __WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].info('debug context actived.'); // Return it

  return debugContext;
} // DEBUG TRACING

function getFunctionString(functionName, functionArgs) {
  var args = __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].WebGLDebug.glFunctionArgsToString(functionName, functionArgs);
  args = "".concat(args.slice(0, 100)).concat(args.length > 100 ? '...' : '');
  return "gl.".concat(functionName, "(").concat(args, ")");
}

function onGLError(err, functionName, args) {
  var errorMessage = __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].WebGLDebug.glEnumToString(err);
  var functionArgs = __WEBPACK_IMPORTED_MODULE_1__utils_globals__["a" /* global */].WebGLDebug.glFunctionArgsToString(functionName, args);
  var message = "".concat(errorMessage, " in gl.").concat(functionName, "(").concat(functionArgs, ")");

  if (__WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].throw) {
    throw new Error(message);
  } else {
    __WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].error(message)();
    debugger; // eslint-disable-line
  }
} // Don't generate function string until it is needed


function onValidateGLFunc(functionName, functionArgs) {
  var functionString;

  if (__WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].priority >= 4) {
    functionString = getFunctionString(functionName, functionArgs);
    __WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].log(4, functionString)();
  }

  if (__WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].break) {
    functionString = functionString || getFunctionString(functionName, functionArgs);
    var isBreakpoint = __WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].break && __WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].break.every(function (breakOn) {
      return functionString.indexOf(breakOn) !== -1;
    });

    if (isBreakpoint) {
      debugger; // eslint-disable-line
    }
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = functionArgs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var arg = _step.value;

      if (arg === undefined) {
        functionString = functionString || getFunctionString(functionName, functionArgs);

        if (__WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].throw) {
          throw new Error("Undefined argument: ".concat(functionString));
        } else {
          __WEBPACK_IMPORTED_MODULE_2__utils__["a" /* log */].error("Undefined argument: ".concat(functionString));
          debugger; // eslint-disable-line
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}
//# sourceMappingURL=debug-context.js.map

/***/ }),
/* 270 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getDebugTableForProgramConfiguration;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_utils_attribute_utils__ = __webpack_require__(37);


function getDebugTableForProgramConfiguration(config) {
  var table = {};
  var header = "Accessors for ".concat(config.id);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = config.attributeInfos[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var attributeInfo = _step.value;

      if (attributeInfo) {
        var glslDeclaration = getGLSLDeclaration(attributeInfo);
        table["in ".concat(glslDeclaration)] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, header, JSON.stringify(attributeInfo.accessor));
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = config.varyingInfos[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var varyingInfo = _step2.value;

      if (varyingInfo) {
        var _glslDeclaration = getGLSLDeclaration(varyingInfo);

        table["out ".concat(_glslDeclaration)] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({}, header, JSON.stringify(varyingInfo.accessor));
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return table;
}

function getGLSLDeclaration(attributeInfo) {
  var _attributeInfo$access = attributeInfo.accessor,
      type = _attributeInfo$access.type,
      size = _attributeInfo$access.size;
  var typeAndName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__webgl_utils_attribute_utils__["c" /* getCompositeGLType */])(type, size);

  if (typeAndName) {
    return "".concat(typeAndName.name, " ").concat(attributeInfo.name);
  }

  return attributeInfo.name;
}
//# sourceMappingURL=debug-program-configuration.js.map

/***/ }),
/* 271 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getDebugTableForUniforms;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_assert__ = __webpack_require__(5);


 // Prepares a table suitable for console.table

/* eslint-disable max-statements, complexity */

function getDebugTableForUniforms() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$header = _ref.header,
      header = _ref$header === void 0 ? 'Uniforms' : _ref$header,
      program = _ref.program,
      uniforms = _ref.uniforms,
      _ref$undefinedOnly = _ref.undefinedOnly,
      undefinedOnly = _ref$undefinedOnly === void 0 ? false : _ref$undefinedOnly;

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_assert__["a" /* default */])(program);
  var SHADER_MODULE_UNIFORM_REGEXP = '.*_.*';
  var PROJECT_MODULE_UNIFORM_REGEXP = '.*Matrix'; // TODO - Use explicit list

  var uniformLocations = program._uniformSetters;
  var table = {}; // {[header]: {}};
  // Add program's provided uniforms (in alphabetical order)

  var uniformNames = Object.keys(uniformLocations).sort();
  var count = 0; // First add non-underscored uniforms (assumed not coming from shader modules)

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = uniformNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _uniformName = _step.value;

      if (!_uniformName.match(SHADER_MODULE_UNIFORM_REGEXP) && !_uniformName.match(PROJECT_MODULE_UNIFORM_REGEXP)) {
        if (addUniformToTable({
          table: table,
          header: header,
          uniforms: uniforms,
          uniformName: _uniformName,
          undefinedOnly: undefinedOnly
        })) {
          count++;
        }
      }
    } // add underscored uniforms (assumed from shader modules)

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = uniformNames[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _uniformName2 = _step2.value;

      if (_uniformName2.match(PROJECT_MODULE_UNIFORM_REGEXP)) {
        if (addUniformToTable({
          table: table,
          header: header,
          uniforms: uniforms,
          uniformName: _uniformName2,
          undefinedOnly: undefinedOnly
        })) {
          count++;
        }
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = uniformNames[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var _uniformName3 = _step3.value;

      if (!table[_uniformName3]) {
        if (addUniformToTable({
          table: table,
          header: header,
          uniforms: uniforms,
          uniformName: _uniformName3,
          undefinedOnly: undefinedOnly
        })) {
          count++;
        }
      }
    } // Create a table of unused uniforms

  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  var unusedCount = 0;
  var unusedTable = {};

  if (!undefinedOnly) {
    for (var uniformName in uniforms) {
      var uniform = uniforms[uniformName];

      if (!table[uniformName]) {
        unusedCount++;
        unusedTable[uniformName] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])({
          Type: "NOT USED: ".concat(uniform)
        }, header, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["i" /* formatValue */])(uniform));
      }
    }
  }

  return {
    table: table,
    count: count,
    unusedTable: unusedTable,
    unusedCount: unusedCount
  };
} // Helper

function addUniformToTable(_ref2) {
  var table = _ref2.table,
      header = _ref2.header,
      uniforms = _ref2.uniforms,
      uniformName = _ref2.uniformName,
      undefinedOnly = _ref2.undefinedOnly;
  var value = uniforms[uniformName];
  var isDefined = isUniformDefined(value);

  if (!undefinedOnly || !isDefined) {
    var _table$uniformName;

    table[uniformName] = (_table$uniformName = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_table$uniformName, header, isDefined ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__utils__["i" /* formatValue */])(value) : 'N/A'), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_table$uniformName, 'Uniform Type', isDefined ? value : 'NOT PROVIDED'), _table$uniformName);
    return true;
  }

  return false;
}

function isUniformDefined(value) {
  return value !== undefined && value !== null;
}
//# sourceMappingURL=debug-uniforms.js.map

/***/ }),
/* 272 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getDebugTableForVertexArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__webgl_buffer__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__webgl_utils_constants_to_keys__ = __webpack_require__(32);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_utils_attribute_utils__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(6);




 // Creates object suitable as input for console.table

function getDebugTableForVertexArray() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      vertexArray = _ref.vertexArray,
      _ref$header = _ref.header,
      header = _ref$header === void 0 ? 'Attributes' : _ref$header;

  if (!vertexArray.configuration) {
    return {};
  }

  var table = {}; // {[header]: {}};
  // Add index (elements) if available

  if (vertexArray.elements) {
    // const elements = Object.assign({size: 1}, vertexArray.elements);
    table.ELEMENT_ARRAY_BUFFER = getDebugTableRow(vertexArray, vertexArray.elements, null, header);
  } // Add used attributes


  var attributes = vertexArray.values;

  for (var attributeLocation in attributes) {
    var info = vertexArray._getAttributeInfo(attributeLocation);

    if (info) {
      var rowHeader = "".concat(attributeLocation, ": ").concat(info.name);
      var accessor = vertexArray.accessors[info.location];

      if (accessor) {
        rowHeader = "".concat(attributeLocation, ": ").concat(getGLSLDeclaration(info.name, accessor));
      }

      table[rowHeader] = getDebugTableRow(vertexArray, attributes[attributeLocation], accessor, header);
    }
  }

  return table;
}
/* eslint-disable max-statements */

function getDebugTableRow(vertexArray, attribute, accessor, header) {
  var _ref3;

  // const round = xnum => Math.round(num * 10) / 10;
  var gl = vertexArray.gl;
  var type = 'NOT PROVIDED';
  var size = 'N/A';
  var verts = 'N/A';
  var bytes = 'N/A';
  var isInteger;
  var marker;
  var value;

  if (accessor) {
    type = accessor.type;
    size = accessor.size; // Generate a type name by dropping Array from Float32Array etc.

    type = String(type).replace('Array', ''); // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array

    isInteger = type.indexOf('nt') !== -1;
  }

  if (attribute instanceof __WEBPACK_IMPORTED_MODULE_1__webgl_buffer__["a" /* default */]) {
    var _ref2;

    var buffer = attribute;

    var _buffer$getDebugData = buffer.getDebugData(),
        data = _buffer$getDebugData.data,
        modified = _buffer$getDebugData.modified;

    marker = modified ? '*' : '';
    value = data;
    bytes = buffer.byteLength;
    verts = bytes / data.BYTES_PER_ELEMENT / size;
    var format;

    if (accessor) {
      var instanced = accessor.divisor > 0;
      format = "".concat(instanced ? 'I ' : 'P ', " ").concat(verts, " (x").concat(size, "=").concat(bytes, " bytes ").concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__webgl_utils_constants_to_keys__["c" /* glKey */])(gl, type), ")");
    } else {
      // element buffer
      isInteger = true;
      format = "".concat(bytes, " bytes");
    }

    return _ref2 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_ref2, header, "".concat(marker).concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["i" /* formatValue */])(value, {
      size: size,
      isInteger: isInteger
    }))), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_ref2, 'Format ', format), _ref2;
  } // CONSTANT VALUE


  value = attribute;
  size = attribute.length; // Generate a type name by dropping Array from Float32Array etc.

  type = String(attribute.constructor.name).replace('Array', ''); // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array

  isInteger = type.indexOf('nt') !== -1;
  return _ref3 = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_ref3, header, "".concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils__["i" /* formatValue */])(value, {
    size: size,
    isInteger: isInteger
  }), " (constant)")), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_ref3, 'Format ', "".concat(size, "x").concat(type, " (constant)")), _ref3;
}
/* eslint-ensable max-statements */


function getGLSLDeclaration(name, accessor) {
  var type = accessor.type,
      size = accessor.size;
  var typeAndName = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils_attribute_utils__["c" /* getCompositeGLType */])(type, size);

  if (typeAndName) {
    return "".concat(name, " (").concat(typeAndName.name, ")");
  }

  return name;
}
//# sourceMappingURL=debug-vertex-array.js.map

/***/ }),
/* 273 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = parseGLSLCompilerError;
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__get_shader_name__ = __webpack_require__(135);
// TODO - formatGLSLCompilerError should not depend on this

/**
 * Parse a GLSL compiler error log into a string showing the source code around each error.
 * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)
 */

/* eslint-disable no-continue, max-statements */

function parseGLSLCompilerError(errLog, src, shaderType, shaderName) {
  var errorStrings = errLog.split(/\r?\n/);
  var errors = {};
  var warnings = {}; // Patch the shader name

  var name = shaderName || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__get_shader_name__["a" /* default */])(src) || '(unnamed)';
  var shaderDescription = "".concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__get_shader_name__["b" /* getShaderTypeName */])(shaderType), " shader ").concat(name); // Parse the error - note: browser and driver dependent

  for (var i = 0; i < errorStrings.length; i++) {
    var errorString = errorStrings[i];

    if (errorString.length <= 1) {
      continue;
    }

    var segments = errorString.split(':');
    var type = segments[0];
    var line = parseInt(segments[2], 10);

    if (isNaN(line)) {
      throw new Error("GLSL compilation error in ".concat(shaderDescription, ": ").concat(errLog));
    }

    if (type !== 'WARNING') {
      errors[line] = errorString;
    } else {
      warnings[line] = errorString;
    }
  } // Format the error inline with the code


  var lines = addLineNumbers(src);
  return {
    shaderName: shaderDescription,
    errors: formatErrors(errors, lines),
    warnings: formatErrors(warnings, lines)
  };
} // Formats GLSL compiler error log into single string

function formatGLSLCompilerError(errLog, src, shaderType) {
  var _parseGLSLCompilerErr = parseGLSLCompilerError(errLog, src, shaderType),
      shaderName = _parseGLSLCompilerErr.shaderName,
      errors = _parseGLSLCompilerErr.errors,
      warnings = _parseGLSLCompilerErr.warnings;

  return "GLSL compilation error in ".concat(shaderName, "\n\n").concat(errors, "\n").concat(warnings);
} // helper function, outputs annotated errors or warnings

function formatErrors(errors, lines) {
  var message = '';

  for (var i = 0; i < lines.length; i++) {
    var line = lines[i];

    if (!errors[i + 3] && !errors[i + 2] && !errors[i + 1]) {
      continue;
    }

    message += "".concat(line, "\n");

    if (errors[i + 1]) {
      var error = errors[i + 1];
      var segments = error.split(':', 3);
      var type = segments[0];
      var column = parseInt(segments[1], 10) || 0;
      var err = error.substring(segments.join(':').length + 1).trim();
      message += padLeft("^^^ ".concat(type, ": ").concat(err, "\n\n"), column);
    }
  }

  return message;
}
/**
 * Prepends line numbers to each line of a string.
 * The line numbers will be left-padded with spaces to ensure an
 * aligned layout when rendered using monospace fonts.
 * @param {String} string - multi-line string to add line numbers to
 * @param {Number} start=1 - number of spaces to add
 * @param {String} delim =': ' - injected between line number and original line
 * @return {String[]} strings - array of string, one per line, with line numbers added
 */


function addLineNumbers(string) {
  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var delim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ': ';
  var lines = string.split(/\r?\n/);
  var maxDigits = String(lines.length + start - 1).length;
  return lines.map(function (line, i) {
    var lineNumber = i + start;
    var digits = String(lineNumber).length;
    var prefix = padLeft(lineNumber, maxDigits - digits);
    return prefix + delim + line;
  });
}
/**
 * Pads a string with a number of spaces (space characters) to the left
 * @param {String} string - string to pad
 * @param {Number} digits - number of spaces to add
 * @return {String} string - The padded string
 */


function padLeft(string, digits) {
  var result = '';

  for (var i = 0; i < digits; ++i) {
    result += ' ';
  }

  return "".concat(result).concat(string);
}
//# sourceMappingURL=format-glsl-error.js.map

/***/ }),
/* 274 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = glFormatToComponents;
/* harmony export (immutable) */ __webpack_exports__["b"] = glTypeToBytes;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_assert__ = __webpack_require__(5);

// Returns number of components in a specific readPixels WebGL format
function glFormatToComponents(format) {
  switch (format) {
    case 6406:
    case 33326:
    case 6403:
      return 1;

    case 33328:
    case 33319:
      return 2;

    case 6407:
    case 34837:
      return 3;

    case 6408:
    case 34836:
      return 4;
    // TODO: Add support for additional WebGL2 formats

    default:
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_assert__["a" /* default */])(false);
      return 0;
  }
} // Return byte count for given readPixels WebGL type

function glTypeToBytes(type) {
  switch (type) {
    case 5121:
      return 1;

    case 33635:
    case 32819:
    case 32820:
      return 2;

    case 5126:
      return 4;
    // TODO: Add support for additional WebGL2 types

    default:
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils_assert__["a" /* default */])(false);
      return 0;
  }
}
//# sourceMappingURL=format-utils.js.map

/***/ }),
/* 275 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = requestAnimationFrame;
/* harmony export (immutable) */ __webpack_exports__["b"] = cancelAnimationFrame;
// Node.js polyfills for requestAnimationFrame and cancelAnimationFrame

/* global window, setTimeout, clearTimeout */
function requestAnimationFrame(callback) {
  return typeof window !== 'undefined' && window.requestAnimationFrame ? window.requestAnimationFrame(callback) : setTimeout(callback, 1000 / 60);
}
function cancelAnimationFrame(timerId) {
  return typeof window !== 'undefined' && window.cancelAnimationFrame ? window.cancelAnimationFrame(timerId) : clearTimeout(timerId);
}
//# sourceMappingURL=request-animation-frame.js.map

/***/ }),
/* 276 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getShaderVersion;
// returns GLSL shader version of given shader string
function getShaderVersion(source) {
  var version = 100;
  var words = source.match(/[^\s]+/g);

  if (words.length >= 2 && words[0] === '#version') {
    var v = parseInt(words[1], 10);

    if (Number.isFinite(v)) {
      version = v;
    }
  }

  return version;
}
//# sourceMappingURL=shader-utils.js.map

/***/ }),
/* 277 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__resource__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__webgl_utils_query_manager__ = __webpack_require__(62);










var FenceSync =
/*#__PURE__*/
function (_Resource) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(FenceSync, _Resource);

  /*
   * @class
   * @param {WebGL2RenderingContext} gl
   */
  function FenceSync(gl, opts) {
    var _this;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, FenceSync);

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__webgl_utils__["c" /* assertWebGL2Context */])(gl);
    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(FenceSync).call(this, gl, opts)); // query manager needs a promise field

    _this.promise = null;
    Object.seal(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));
    return _this;
  }
  /**
   * The method is a no-op in the absence of the possibility of
   * synchronizing between multiple GL contexts.
   * Prevent commands from being added to GPU command queue.
   * Note: commands can still be buffered in driver.
   *
   * @param {GLbitfield} flags
   * @param {GLint64} timeout
   * @return {Sync} status
   */


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(FenceSync, [{
    key: "wait",
    value: function wait() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$flags = _ref.flags,
          flags = _ref$flags === void 0 ? 0 : _ref$flags,
          _ref$timeout = _ref.timeout,
          timeout = _ref$timeout === void 0 ? -1 : _ref$timeout;

      this.gl.waitSync(this.handle, flags, timeout);
      return this;
    }
    /**
     * Block all CPU operations until fence is signalled
     * @param {GLbitfield} flags
     * @param {GLint64} timeout
     * @return {GLenum} result
     */

  }, {
    key: "clientWait",
    value: function clientWait(_ref2) {
      var _ref2$flags = _ref2.flags,
          flags = _ref2$flags === void 0 ? 1 : _ref2$flags,
          timeout = _ref2.timeout;
      var result = this.gl.clientWaitSync(this.handle, flags, timeout); // TODO - map to boolean?

      switch (result) {
        case 37146:
          // Indicates that sync object was signaled when this method was called.
          break;

        case 37147:
          // Indicates that timeout time passed, sync object did not become signaled
          break;

        case 37148:
          // Indicates that sync object was signaled before timeout expired.
          break;

        case 37149:
          // Indicates that an error occurred during execution.
          break;

        default:
      }

      return result;
    }
  }, {
    key: "cancel",
    value: function cancel() {
      __WEBPACK_IMPORTED_MODULE_8__webgl_utils_query_manager__["a" /* default */].cancelQuery(this);
    }
  }, {
    key: "isSignaled",
    value: function isSignaled() {
      return this.getParameter(37140) === 37145;
    } // TODO - Query manager needs these?

  }, {
    key: "isResultAvailable",
    value: function isResultAvailable() {
      return this.isSignaled();
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.isSignaled();
    }
  }, {
    key: "getParameter",
    value: function getParameter(pname) {
      return this.gl.getSyncParameter(this.handle, pname);
    } // PRIVATE METHODS

  }, {
    key: "_createHandle",
    value: function _createHandle() {
      return this.gl.fenceSync(37143, 0);
    }
  }, {
    key: "_deleteHandle",
    value: function _deleteHandle() {
      __WEBPACK_IMPORTED_MODULE_8__webgl_utils_query_manager__["a" /* default */].deleteQuery(this);
      this.gl.deleteSync(this.handle);
    }
  }]);

  return FenceSync;
}(__WEBPACK_IMPORTED_MODULE_6__resource__["a" /* default */]);


//# sourceMappingURL=fence-sync.js.map

/***/ }),
/* 278 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ProgramConfiguration; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__accessor__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_utils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__webgl_utils_attribute_utils__ = __webpack_require__(37);


// Contains metadata describing attribute configurations for a program's shaders
// Much of this is automatically extracted from shaders after program linking




var ProgramConfiguration =
/*#__PURE__*/
function () {
  function ProgramConfiguration(program) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, ProgramConfiguration);

    this.id = program.id;
    this.attributeInfos = [];
    this.attributeInfosByName = {};
    this.varyingInfos = [];
    this.varyingInfosByName = {};
    Object.seal(this);

    this._readAttributesFromProgram(program);

    this._readVaryingsFromProgram(program);
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(ProgramConfiguration, [{
    key: "getAttributeInfo",
    value: function getAttributeInfo(locationOrName) {
      var location = Number(locationOrName);

      if (Number.isFinite(location)) {
        return this.attributeInfos[location];
      }

      return this.attributeInfosByName[locationOrName] || null;
    } // Resolves an attribute name or index to an index

  }, {
    key: "getAttributeLocation",
    value: function getAttributeLocation(locationOrName) {
      var attributeInfo = this.getAttributeInfo(locationOrName);
      return attributeInfo ? attributeInfo.location : -1;
    }
  }, {
    key: "getAttributeAccessor",
    value: function getAttributeAccessor(locationOrName) {
      var attributeInfo = this.getAttributeInfo(locationOrName);
      return attributeInfo ? attributeInfo.accessor : null;
    }
  }, {
    key: "getVaryingInfo",
    value: function getVaryingInfo(locationOrName) {
      var location = Number(locationOrName);

      if (Number.isFinite(location)) {
        return this.varyingInfos[location];
      }

      return this.varyingInfosByName[locationOrName] || null;
    }
  }, {
    key: "getVaryingIndex",
    value: function getVaryingIndex(locationOrName) {
      var varying = this.getVaryingInfo();
      return varying ? varying.location : -1;
    }
  }, {
    key: "getVaryingAccessor",
    value: function getVaryingAccessor(locationOrName) {
      var varying = this.getVaryingInfo();
      return varying ? varying.accessor : null;
    } // PRIVATE METHODS
    // linkProgram needs to have been called, although linking does not need to have been successful

  }, {
    key: "_readAttributesFromProgram",
    value: function _readAttributesFromProgram(program) {
      var gl = program.gl;
      var count = gl.getProgramParameter(program.handle, 35721);

      for (var index = 0; index < count; index++) {
        var _gl$getActiveAttrib = gl.getActiveAttrib(program.handle, index),
            name = _gl$getActiveAttrib.name,
            type = _gl$getActiveAttrib.type,
            size = _gl$getActiveAttrib.size;

        var location = gl.getAttribLocation(program.handle, name); // Add only user provided attributes, for built-in attributes like
        // `gl_InstanceID` locaiton will be < 0

        if (location >= 0) {
          this._addAttribute(location, name, type, size);
        }
      }

      this.attributeInfos.sort(function (a, b) {
        return a.location - b.location;
      });
    } // linkProgram needs to have been called, although linking does not need to have been successful

  }, {
    key: "_readVaryingsFromProgram",
    value: function _readVaryingsFromProgram(program) {
      var gl = program.gl;

      if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils__["b" /* isWebGL2 */])(gl)) {
        return;
      }

      var count = gl.getProgramParameter(program.handle, 35971);

      for (var location = 0; location < count; location++) {
        var _gl$getTransformFeedb = gl.getTransformFeedbackVarying(program.handle, location),
            name = _gl$getTransformFeedb.name,
            type = _gl$getTransformFeedb.type,
            size = _gl$getTransformFeedb.size;

        this._addVarying(location, name, type, size);
      }

      this.varyingInfos.sort(function (a, b) {
        return a.location - b.location;
      });
    }
  }, {
    key: "_addAttribute",
    value: function _addAttribute(location, name, compositeType, size) {
      var _decomposeCompositeGL = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils_attribute_utils__["b" /* decomposeCompositeGLType */])(compositeType),
          type = _decomposeCompositeGL.type,
          components = _decomposeCompositeGL.components;

      var accessor = {
        type: type,
        size: size * components
      };

      this._inferProperties(location, name, accessor);

      var attributeInfo = {
        location: location,
        name: name,
        accessor: new __WEBPACK_IMPORTED_MODULE_2__accessor__["a" /* default */](accessor)
      }; // Base values

      this.attributeInfos.push(attributeInfo);
      this.attributeInfosByName[attributeInfo.name] = attributeInfo; // For quick name based lookup
    } // Extract additional attribute metadata from shader names (based on attribute naming conventions)

  }, {
    key: "_inferProperties",
    value: function _inferProperties(location, name, accessor) {
      if (/instance/i.test(name)) {
        // Any attribute containing the word "instance" will be assumed to be instanced
        accessor.divisor = 1;
      }
    }
  }, {
    key: "_addVarying",
    value: function _addVarying(location, name, compositeType, size) {
      var _decomposeCompositeGL2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__webgl_utils_attribute_utils__["b" /* decomposeCompositeGLType */])(compositeType),
          type = _decomposeCompositeGL2.type,
          components = _decomposeCompositeGL2.components;

      var accessor = new __WEBPACK_IMPORTED_MODULE_2__accessor__["a" /* default */]({
        type: type,
        size: size * components
      });
      var varying = {
        location: location,
        name: name,
        accessor: accessor
      }; // Base values

      this.varyingInfos.push(varying);
      this.varyingInfosByName[varying.name] = varying; // For quick name based lookup
    }
  }]);

  return ProgramConfiguration;
}();


//# sourceMappingURL=program-configuration.js.map

/***/ }),
/* 279 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__webgl_texture__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__webgl_utils__ = __webpack_require__(7);








var Texture2DArray =
/*#__PURE__*/
function (_Texture) {
  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_inherits__["a" /* default */])(Texture2DArray, _Texture);

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_createClass__["a" /* default */])(Texture2DArray, null, [{
    key: "isSupported",
    value: function isSupported(gl) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__webgl_utils__["b" /* isWebGL2 */])(gl);
    }
  }]);

  function Texture2DArray(gl) {
    var _this;

    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Texture2DArray);

    _this = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(Texture2DArray).call(this, gl, opts));
    throw new Error('Texture2DArray not yet implemented');
    return _this;
  }

  return Texture2DArray;
}(__WEBPACK_IMPORTED_MODULE_5__webgl_texture__["a" /* default */]);


//# sourceMappingURL=texture-2d-array.js.map

/***/ }),
/* 280 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__webgl_utils_attribute_utils__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_assert__ = __webpack_require__(5);




/* eslint-disable camelcase */


var ERR_ARGUMENT = 'UniformBufferLayout illegal argument'; // Local constants - these will "collapse" during minification

var GL_FLOAT = 0x1406;
var GL_INT = 0x1404;
var GL_UNSIGNED_INT = 0x1405; // Std140 layout for uniforms

var UniformBufferLayout =
/*#__PURE__*/
function () {
  function UniformBufferLayout(layout) {
    var _this$typedArray;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, UniformBufferLayout);

    this.layout = {};
    this.size = 0; // Add layout (type, size and offset) definitions for each uniform in the layout

    for (var key in layout) {
      this._addUniform(key, layout[key]);
    } // Allocate three typed arrays pointing at same memory


    var data = new Float32Array(this.size);
    this.typedArray = (_this$typedArray = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_this$typedArray, GL_FLOAT, data), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_this$typedArray, GL_INT, new Int32Array(data.buffer)), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_this$typedArray, GL_UNSIGNED_INT, new Uint32Array(data.buffer)), _this$typedArray);
  } // Get number of bytes needed for buffer allocation


  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__["a" /* default */])(UniformBufferLayout, [{
    key: "getBytes",
    value: function getBytes() {
      return this.size * 4;
    } // Get the current data as Float32Array, for bufferSubData

  }, {
    key: "getData",
    value: function getData() {
      return this.typedArray[GL_FLOAT];
    } // Get offset and data for one object (for bufferSubData)

  }, {
    key: "getSubData",
    value: function getSubData(index) {
      var data;
      var offset;

      if (index === undefined) {
        data = this.data;
        offset = 0;
      } else {
        var begin = this.offsets[index];
        var end = begin + this.sizes[index];
        data = this.data.subarray(begin, end);
        offset = begin * 4;
      }

      return {
        data: data,
        offset: offset
      };
    } // Set a map of values

  }, {
    key: "setUniforms",
    value: function setUniforms(values) {
      for (var key in values) {
        this._setValue(key, values[key]);
      }

      return this;
    }
  }, {
    key: "_setValue",
    value: function _setValue(key, value) {
      var layout = this.layout[key];
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(layout, 'UniformLayoutStd140 illegal argument');
      var typedArray = this.typedArray[layout.type];

      if (layout.size === 1) {
        // single value -> just set it
        typedArray[layout.offset] = value;
      } else {
        // vector/matrix -> copy the supplied (typed) array, starting from offset
        typedArray.set(value, layout.offset);
      }
    }
  }, {
    key: "_addUniform",
    value: function _addUniform(key, uniformType) {
      var typeAndComponents = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__webgl_utils_attribute_utils__["b" /* decomposeCompositeGLType */])(uniformType);
      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__utils_assert__["a" /* default */])(typeAndComponents, ERR_ARGUMENT);
      var type = typeAndComponents.type,
          count = typeAndComponents.components; // First, align (bump) current offset to an even multiple of current object (1, 2, 4)

      this.size = this._alignTo(this.size, count); // Use the aligned size as the offset of the current uniform.

      var offset = this.size; // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset

      this.size += count;
      this.layout[key] = {
        type: type,
        size: count,
        offset: offset
      };
    } // Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes)

  }, {
    key: "_alignTo",
    value: function _alignTo(size, count) {
      switch (count) {
        case 1:
          return size;
        // Pad upwards to even multiple of 2

        case 2:
          return size + size % 2;
        // Pad upwards to even multiple of 2

        default:
          return size + (4 - size % 4) % 4;
        // Pad upwards to even multiple of 4
      }
    }
  }]);

  return UniformBufferLayout;
}();


//# sourceMappingURL=uniform-buffer-layout.js.map

/***/ }),
/* 281 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__polyfill_context__ = __webpack_require__(282);
/* unused harmony reexport polyfillContext */
// Optional polyfills to support WebGL1
// Normally not imported directly
// The files in this directory should be self contained and not include any other files

//# sourceMappingURL=index.js.map

/***/ }),
/* 282 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__polyfill_get_parameter__ = __webpack_require__(283);


var _WEBGL_CONTEXT_POLYFI;

// WebGL1/WebGL2 extension polyfill support
//
// Provides a function that creates polyfills for WebGL2 functions based
// on available extensions and installs them on a supplied target (could be
// the WebGLContext or its prototype, or a separate object).
//
// This is intended to be a stand-alone file with minimal dependencies,
// easy to reuse or repurpose in other projects.

/* eslint-disable camelcase, brace-style */
 // import polyfillVertexArrayObject from './polyfill-vertex-array-object';
// import {WebGLRenderingContext} from './webgl-rendering-context';

function assert(condition, message) {
  if (!condition) {
    throw new Error(message || 'luma.gl: assertion failed.');
  }
}

var OES_vertex_array_object = 'OES_vertex_array_object';
var ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';
var WEBGL_draw_buffers = 'WEBGL_draw_buffers';
var EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';
var EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';
var EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';
var ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension'; // Return true if WebGL2 context

function isWebGL2(gl) {
  return gl && 32874 === 32874;
} // Return object with webgl2 flag and an extension


function getExtensionData(gl, extension) {
  return {
    webgl2: isWebGL2(gl),
    ext: gl.getExtension(extension)
  };
} // function mapExtensionConstant(gl, constant) {
//   switch (constant) {
//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;
//   }
// }


var WEBGL_CONTEXT_POLYFILLS = (_WEBGL_CONTEXT_POLYFI = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_CONTEXT_POLYFI, OES_vertex_array_object, {
  meta: {
    suffix: 'OES'
  },
  // NEW METHODS
  createVertexArray: function createVertexArray() {
    assert(false, ERR_VAO_NOT_SUPPORTED);
  },
  deleteVertexArray: function deleteVertexArray() {},
  bindVertexArray: function bindVertexArray() {},
  isVertexArray: function isVertexArray() {
    return false;
  }
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_CONTEXT_POLYFI, ANGLE_instanced_arrays, {
  meta: {
    suffix: 'ANGLE' // constants: {
    //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'
    // }

  },
  vertexAttribDivisor: function vertexAttribDivisor(location, divisor) {
    // Accept divisor 0 even if instancing is not supported (0 = no instancing)
    assert(divisor === 0, 'WebGL instanced rendering not supported');
  },
  drawElementsInstanced: function drawElementsInstanced() {},
  drawArraysInstanced: function drawArraysInstanced() {}
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_CONTEXT_POLYFI, WEBGL_draw_buffers, {
  meta: {
    suffix: 'WEBGL'
  },
  drawBuffers: function drawBuffers() {
    assert(false);
  }
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_CONTEXT_POLYFI, EXT_disjoint_timer_query, {
  meta: {
    suffix: 'EXT'
  },
  // WebGL1: Polyfills the WebGL2 Query API
  createQuery: function createQuery() {
    assert(false);
  },
  deleteQuery: function deleteQuery() {
    assert(false);
  },
  beginQuery: function beginQuery() {
    assert(false);
  },
  endQuery: function endQuery() {},
  getQuery: function getQuery(handle, pname) {
    return this.getQueryObject(handle, pname);
  },
  // The WebGL1 extension uses getQueryObject rather then getQueryParameter
  getQueryParameter: function getQueryParameter(handle, pname) {
    return this.getQueryObject(handle, pname);
  },
  // plus the additional `queryCounter` method
  queryCounter: function queryCounter() {},
  getQueryObject: function getQueryObject() {}
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_CONTEXT_POLYFI, EXT_disjoint_timer_query_webgl2, {
  meta: {
    suffix: 'EXT'
  },
  // install `queryCounter`
  // `null` avoids overwriting WebGL1 `queryCounter` if the WebGL2 extension is not available
  queryCounter: null
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_CONTEXT_POLYFI, "OVERRIDES", {
  // Ensure readBuffer is a no-op
  readBuffer: function readBuffer(gl, originalFunc, attachment) {
    if (isWebGL2(gl)) {
      originalFunc(attachment);
    } else {// assert(attachment !== GL_COLOR_ATTACHMENT0 && attachment !== GL_FRONT);
    }
  },
  // Override for getVertexAttrib that returns sane values for non-WebGL1 constants
  getVertexAttrib: function getVertexAttrib(gl, originalFunc, location, pname) {
    // const gl = this; // eslint-disable-line
    var _getExtensionData = getExtensionData(gl, ANGLE_instanced_arrays),
        webgl2 = _getExtensionData.webgl2,
        ext = _getExtensionData.ext;

    var result;

    switch (pname) {
      // WebGL1 attributes will never be integer
      case 35069:
        result = !webgl2 ? false : undefined;
        break;
      // if instancing is not available, return 0 meaning divisor has not been set

      case 35070:
        result = !webgl2 && !ext ? 0 : undefined;
        break;

      default:
    }

    return result !== undefined ? result : originalFunc(location, pname);
  },
  // Handle transform feedback and uniform block queries in WebGL1
  getProgramParameter: function getProgramParameter(gl, originalFunc, program, pname) {
    if (!isWebGL2(gl)) {
      switch (pname) {
        case 35967:
          return 35981;

        case 35971:
          return 0;

        case 35382:
          return 0;

        default:
      }
    }

    return originalFunc(program, pname);
  },
  getInternalformatParameter: function getInternalformatParameter(gl, originalFunc, target, format, pname) {
    if (!isWebGL2(gl)) {
      switch (pname) {
        case 32937:
          return new Int32Array([0]);

        default:
      }
    }

    return gl.getInternalformatParameter(target, format, pname);
  },
  getTexParameter: function getTexParameter(gl, originalFunc, target, pname) {
    switch (pname) {
      case 34046:
        var extensions = gl.luma.extensions;
        var ext = extensions[EXT_texture_filter_anisotropic];
        pname = ext && ext.TEXTURE_MAX_ANISOTROPY_EXT || 34046;
        break;

      default:
    }

    return originalFunc(target, pname);
  },
  getParameter: __WEBPACK_IMPORTED_MODULE_1__polyfill_get_parameter__["a" /* getParameterPolyfill */],
  hint: function hint(gl, originalFunc, pname, value) {
    // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:
    // switch (pname) {
    // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:
    // }
    return originalFunc(pname, value);
  }
}), _WEBGL_CONTEXT_POLYFI);

function initializeExtensions(gl) {
  gl.luma.extensions = {}; // `getSupportedExtensions` can return null when context is lost.

  var EXTENSIONS = gl.getSupportedExtensions() || [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = EXTENSIONS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var extension = _step.value;
      gl.luma[extension] = gl.getExtension(extension);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
} // Polyfills a single WebGL extension into the `target` object


function polyfillExtension(gl, _ref) {
  var extension = _ref.extension,
      target = _ref.target,
      target2 = _ref.target2;
  var defaults = WEBGL_CONTEXT_POLYFILLS[extension];
  assert(defaults);
  var _defaults$meta = defaults.meta,
      meta = _defaults$meta === void 0 ? {} : _defaults$meta;
  var _meta$suffix = meta.suffix,
      suffix = _meta$suffix === void 0 ? '' : _meta$suffix;
  var ext = gl.getExtension(extension);
  Object.keys(defaults).forEach(function (key) {
    var extKey = "".concat(key).concat(suffix);
    var polyfill = null;

    if (key === 'meta') {// ignore
    } else if (typeof gl[key] === 'function') {// WebGL2 implementation is already
    } else if (ext && typeof ext[extKey] === 'function') {
      // pick extension implemenentation,if available
      polyfill = function polyfill() {
        return ext[extKey].apply(ext, arguments);
      };
    } else if (typeof defaults[key] === 'function') {
      // pick the mock implementation, if no implementation was detected
      polyfill = defaults[key].bind(target);
    }

    if (polyfill) {
      target[key] = polyfill;
      target2[key] = polyfill;
    }
  });
} // Install simple overrides (mostly get* functions)


function installOverrides(gl, _ref2) {
  var target = _ref2.target,
      target2 = _ref2.target2;
  var OVERRIDES = WEBGL_CONTEXT_POLYFILLS.OVERRIDES;
  Object.keys(OVERRIDES).forEach(function (key) {
    if (typeof OVERRIDES[key] === 'function') {
      // install an override, if no implementation was detected
      var originalFunc = gl[key] ? gl[key].bind(gl) : function () {};
      var polyfill = OVERRIDES[key].bind(null, gl, originalFunc);
      target[key] = polyfill;
      target2[key] = polyfill;
    }
  });
} // Registers polyfill or mock functions for all known extensions


function polyfillContext(gl) {
  // polyfillVertexArrayObject(WebGLRenderingContext, gl);
  gl.luma = gl.luma || {};
  initializeExtensions(gl);

  if (!gl.luma.polyfilled) {
    for (var extension in WEBGL_CONTEXT_POLYFILLS) {
      if (extension !== 'overrides') {
        polyfillExtension(gl, {
          extension: extension,
          target: gl.luma,
          target2: gl
        });
      }
    }

    installOverrides(gl, {
      target: gl.luma,
      target2: gl
    });
    gl.luma.polyfilled = true;
  }

  return gl;
}
/* global window, global */

var global_ = typeof global !== 'undefined' ? global : window;
global_.polyfillContext = polyfillContext;
//# sourceMappingURL=polyfill-context.js.map
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(28)))

/***/ }),
/* 283 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getParameterPolyfill;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(8);


var _WEBGL_PARAMETERS;

/* eslint-disable no-inline-comments, max-len, camelcase */
var OES_element_index = 'OES_element_index';
var WEBGL_draw_buffers = 'WEBGL_draw_buffers';
var EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';
var EXT_disjoint_timer_query_webgl2 = 'EXT_disjoint_timer_query_webgl2';
var EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';
var WEBGL_debug_renderer_info = 'WEBGL_debug_renderer_info';
var GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8b8b;
var GL_DONT_CARE = 0x1100;
var GL_GPU_DISJOINT_EXT = 0x8fbb;
var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84ff;
var GL_UNMASKED_VENDOR_WEBGL = 0x9245; // vendor string of the graphics driver.

var GL_UNMASKED_RENDERER_WEBGL = 0x9246; // renderer string of the graphics driver.

var getWebGL2ValueOrZero = function getWebGL2ValueOrZero(gl) {
  return !isWebGL2(gl) ? 0 : undefined;
}; // if a function returns undefined in this table,
// the original getParameter will be called, defeating the override


var WEBGL_PARAMETERS = (_WEBGL_PARAMETERS = {}, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 3074, function (gl) {
  return !isWebGL2(gl) ? 36064 : undefined;
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, GL_FRAGMENT_SHADER_DERIVATIVE_HINT, function (gl) {
  return !isWebGL2(gl) ? GL_DONT_CARE : undefined;
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35977, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 32937, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, GL_GPU_DISJOINT_EXT, function (gl, getParameter) {
  var ext = isWebGL2(gl) ? gl.getExtension(EXT_disjoint_timer_query_webgl2) : gl.getExtension(EXT_disjoint_timer_query);
  return ext && ext.GPU_DISJOINT_EXT ? getParameter(ext.GPU_DISJOINT_EXT) : 0;
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, GL_UNMASKED_VENDOR_WEBGL, function (gl, getParameter) {
  var ext = gl.getExtension(WEBGL_debug_renderer_info);
  return getParameter(ext && ext.UNMASKED_VENDOR_WEBGL || 7936);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, GL_UNMASKED_RENDERER_WEBGL, function (gl, getParameter) {
  var ext = gl.getExtension(WEBGL_debug_renderer_info);
  return getParameter(ext && ext.UNMASKED_RENDERER_WEBGL || 7937);
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, function (gl, getParameter) {
  var ext = gl.luma.extensions[EXT_texture_filter_anisotropic];
  return ext ? getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 1.0;
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 32883, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35071, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 37447, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 36063, function (gl, getParameter) {
  if (!isWebGL2(gl)) {
    var ext = gl.getExtension(WEBGL_draw_buffers);
    return ext ? getParameter(ext.MAX_COLOR_ATTACHMENTS_WEBGL) : 0;
  }

  return undefined;
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35379, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35374, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35377, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 34852, function (gl) {
  if (!isWebGL2(gl)) {
    var ext = gl.getExtension(WEBGL_draw_buffers);
    return ext ? ext.MAX_DRAW_BUFFERS_WEBGL : 0;
  }

  return undefined;
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 36203, // Guess: per webglstats.com 99.6% of webgl2 supports 2147483647
function (gl) {
  return gl.getExtension(OES_element_index) ? 2147483647 : 65535;
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 33001, // Guess: "Reasonably safe" per webglstats.com - could be higher/lower (on some mobile devices)
function (gl) {
  return gl.getExtension(OES_element_index) ? 16777216 : 65535;
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 33000, // Guess: "Reasonably safe" per webglstats.com - could be higher/lower (on some mobile devices)
function (gl) {
  return 16777216;
}), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 37157, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35373, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35657, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 36183, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 37137, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 34045, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35978, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35979, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35968, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35376, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35375, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35659, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 37154, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35371, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35658, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35076, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35077, getWebGL2ValueOrZero), __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_WEBGL_PARAMETERS, 35380, getWebGL2ValueOrZero), _WEBGL_PARAMETERS); // Return true if WebGL2 context

function isWebGL2(gl) {
  var GL_TEXTURE_BINDING_3D = 0x806a;
  return gl && 32874 === GL_TEXTURE_BINDING_3D;
} // A "replacement" gl.getParameter that accepts "enums" from extensions and WebGL2
// and returns reasonably safe defaults


function getParameterPolyfill(gl, originalGetParameter, pname) {
  // Return mock limits (usually 0) for WebGL2 constants to ensure these
  // can be queries without error
  var limit = WEBGL_PARAMETERS[pname];
  var value = typeof limit === 'function' ? limit(gl, originalGetParameter, pname) : limit;
  var result = value !== undefined ? value : originalGetParameter(pname);
  return result;
}
//# sourceMappingURL=polyfill-get-parameter.js.map

/***/ }),
/* 284 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lib_common__ = __webpack_require__(13);




var Polygon = function () {
  function Polygon(points) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Polygon);

    this.points = points;
    this.isClosed = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lib_common__["b" /* equals */])(this.points[this.points.length - 1], this.points[0]);
    Object.freeze(this);
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Polygon, [{
    key: "getSignedArea",
    value: function getSignedArea() {
      var area = 0;
      this.forEachSegment(function (p1, p2) {
        area += (p1[0] + p2[0]) * (p1[1] - p2[1]);
      });
      return area / 2;
    }
  }, {
    key: "getArea",
    value: function getArea() {
      return Math.abs(this.getSignedArea());
    }
  }, {
    key: "getWindingDirection",
    value: function getWindingDirection() {
      return Math.sign(this.getSignedArea());
    }
  }, {
    key: "forEachSegment",
    value: function forEachSegment(visitor) {
      var length = this.points.length;

      for (var i = 0; i < length - 1; i++) {
        visitor(this.points[i], this.points[i + 1], i, i + 1);
      }

      if (this.isPolygon && !this.isClosed()) {
        visitor(this.points[length - 1], this.points[0], length - 1, 0);
      }
    }
  }]);

  return Polygon;
}();


//# sourceMappingURL=polygon.js.map

/***/ }),
/* 285 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__matrix4__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__vector3__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__euler__ = __webpack_require__(142);






var Pose = function () {
  function Pose(_ref) {
    var _ref$x = _ref.x,
        x = _ref$x === void 0 ? 0 : _ref$x,
        _ref$y = _ref.y,
        y = _ref$y === void 0 ? 0 : _ref$y,
        _ref$z = _ref.z,
        z = _ref$z === void 0 ? 0 : _ref$z,
        _ref$roll = _ref.roll,
        roll = _ref$roll === void 0 ? 0 : _ref$roll,
        _ref$pitch = _ref.pitch,
        pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,
        _ref$yaw = _ref.yaw,
        yaw = _ref$yaw === void 0 ? 0 : _ref$yaw,
        position = _ref.position,
        orientation = _ref.orientation;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Pose);

    if (Array.isArray(position) && position.length === 3) {
      this.position = new __WEBPACK_IMPORTED_MODULE_3__vector3__["a" /* default */](position);
    } else {
      this.position = new __WEBPACK_IMPORTED_MODULE_3__vector3__["a" /* default */](x, y, z);
    }

    if (Array.isArray(orientation) && orientation.length === 4) {
      this.orientation = new __WEBPACK_IMPORTED_MODULE_4__euler__["a" /* default */](orientation, orientation[3]);
    } else {
      this.orientation = new __WEBPACK_IMPORTED_MODULE_4__euler__["a" /* default */](roll, pitch, yaw, __WEBPACK_IMPORTED_MODULE_4__euler__["a" /* default */].RollPitchYaw);
    }
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Pose, [{
    key: "getPosition",
    value: function getPosition() {
      return this.position;
    }
  }, {
    key: "getOrientation",
    value: function getOrientation() {
      return this.orientation;
    }
  }, {
    key: "equals",
    value: function equals(pose) {
      if (!pose) {
        return false;
      }

      return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);
    }
  }, {
    key: "exactEquals",
    value: function exactEquals(pose) {
      if (!pose) {
        return false;
      }

      return this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation);
    }
  }, {
    key: "getTransformationMatrix",
    value: function getTransformationMatrix() {
      var sr = Math.sin(this.roll);
      var sp = Math.sin(this.pitch);
      var sw = Math.sin(this.yaw);
      var cr = Math.cos(this.roll);
      var cp = Math.cos(this.pitch);
      var cw = Math.cos(this.yaw);
      var matrix = new __WEBPACK_IMPORTED_MODULE_2__matrix4__["a" /* default */]().setRowMajor(cw * cp, -sw * cr + cw * sp * sr, sw * sr + cw * sp * cr, this.x, sw * cp, cw * cr + sw * sp * sr, -cw * sr + sw * sp * cr, this.y, -sp, cp * sr, cp * cr, this.z, 0, 0, 0, 1);
      return matrix;
    }
  }, {
    key: "getTransformationMatrixFromPose",
    value: function getTransformationMatrixFromPose(pose) {
      return new __WEBPACK_IMPORTED_MODULE_2__matrix4__["a" /* default */]().multiplyRight(this.getTransformationMatrix()).multiplyRight(pose.getTransformationMatrix().invert());
    }
  }, {
    key: "getTransformationMatrixToPose",
    value: function getTransformationMatrixToPose(pose) {
      return new __WEBPACK_IMPORTED_MODULE_2__matrix4__["a" /* default */]().multiplyRight(pose.getTransformationMatrix()).multiplyRight(this.getTransformationMatrix().invert());
    }
  }, {
    key: "x",
    get: function get() {
      return this.position.x;
    },
    set: function set(value) {
      return this.position.x = value;
    }
  }, {
    key: "y",
    get: function get() {
      return this.position.y;
    },
    set: function set(value) {
      return this.position.y = value;
    }
  }, {
    key: "z",
    get: function get() {
      return this.position.z;
    },
    set: function set(value) {
      return this.position.z = value;
    }
  }, {
    key: "roll",
    get: function get() {
      return this.orientation.roll;
    },
    set: function set(value) {
      return this.orientation.roll = value;
    }
  }, {
    key: "pitch",
    get: function get() {
      return this.orientation.pitch;
    },
    set: function set(value) {
      return this.orientation.pitch = value;
    }
  }, {
    key: "yaw",
    get: function get() {
      return this.orientation.yaw;
    },
    set: function set(value) {
      return this.orientation.yaw = value;
    }
  }]);

  return Pose;
}();


//# sourceMappingURL=pose.js.map

/***/ }),
/* 286 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lib_common__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__vector3__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec3_length__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_gl_vec3_length___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_gl_vec3_length__);







var EPSILON = 0.000001;
var EARTH_RADIUS_METERS = 6.371e6;

var SphericalCoordinates = function () {
  function SphericalCoordinates() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        phi = _ref.phi,
        theta = _ref.theta,
        radius = _ref.radius,
        bearing = _ref.bearing,
        pitch = _ref.pitch,
        altitude = _ref.altitude,
        _ref$radiusScale = _ref.radiusScale,
        radiusScale = _ref$radiusScale === void 0 ? EARTH_RADIUS_METERS : _ref$radiusScale;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, SphericalCoordinates);

    if (arguments.length === 0) {
      this.phi = 0;
      this.theta = 0;
      this.radius = 1;
    } else if (Number.isFinite(phi) || Number.isFinite(theta)) {
      this.phi = phi || 0;
      this.theta = theta || 0;
    } else if (Number.isFinite(bearing) || Number.isFinite(pitch)) {
      this.bearing = bearing || 0;
      this.pitch = pitch || 0;
    }

    this.radius = radius || 1;
    this.radiusScale = radiusScale || 1;
    this.check();
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_createClass__["a" /* default */])(SphericalCoordinates, [{
    key: "toString",
    value: function toString() {
      return this.formatString(__WEBPACK_IMPORTED_MODULE_3__lib_common__["e" /* config */]);
    }
  }, {
    key: "formatString",
    value: function formatString(_ref2) {
      var printTypes = _ref2.printTypes,
          printDegrees = _ref2.printDegrees;
      var f = __WEBPACK_IMPORTED_MODULE_3__lib_common__["f" /* formatValue */];
      return "".concat(printTypes ? 'Spherical' : '', "[rho:").concat(f(this.radius), ",theta:").concat(f(this.theta), ",phi:").concat(f(this.phi), "]");
    }
  }, {
    key: "equals",
    value: function equals(other) {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["b" /* equals */])(this.radius, other.radius) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["b" /* equals */])(this.theta, other.theta) && __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["b" /* equals */])(this.phi, other.phi);
    }
  }, {
    key: "exactEquals",
    value: function exactEquals(other) {
      return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;
    }
  }, {
    key: "set",
    value: function set(radius, phi, theta) {
      this.radius = radius;
      this.phi = phi;
      this.theta = theta;
      return this.check();
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor().copy(this);
    }
  }, {
    key: "copy",
    value: function copy(other) {
      this.radius = other.radius;
      this.phi = other.phi;
      this.theta = other.theta;
      return this.check();
    }
  }, {
    key: "fromLngLatZ",
    value: function fromLngLatZ(_ref3) {
      var _ref4 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(_ref3, 3),
          lng = _ref4[0],
          lat = _ref4[1],
          z = _ref4[2];

      this.radius = 1 + z / this.radiusScale;
      this.phi = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["a" /* radians */])(lat);
      this.theta = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["a" /* radians */])(lng);
    }
  }, {
    key: "fromVector3",
    value: function fromVector3(v) {
      this.radius = __WEBPACK_IMPORTED_MODULE_5_gl_vec3_length___default()(v);

      if (this.radius === 0) {
        this.theta = 0;
        this.phi = 0;
      } else {
        this.theta = Math.atan2(v[0], v[1]);
        this.phi = Math.acos(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["c" /* clamp */])(v[2] / this.radius, -1, 1));
      }

      return this.check();
    }
  }, {
    key: "toVector3",
    value: function toVector3() {
      return new __WEBPACK_IMPORTED_MODULE_4__vector3__["a" /* default */](0, 0, this.radius).rotateX({
        radians: this.theta
      }).rotateZ({
        radians: this.phi
      });
    }
  }, {
    key: "makeSafe",
    value: function makeSafe() {
      this.phi = Math.max(EPSILON, Math.min(Math.PI - EPSILON, this.phi));
    }
  }, {
    key: "check",
    value: function check() {
      if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {
        throw new Error('SphericalCoordinates: some fields set to invalid numbers');
      }

      return this;
    }
  }, {
    key: "bearing",
    get: function get() {
      return 180 - __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["g" /* degrees */])(this.phi);
    },
    set: function set(v) {
      this.phi = Math.PI - __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["a" /* radians */])(v);
    }
  }, {
    key: "pitch",
    get: function get() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["g" /* degrees */])(this.theta);
    },
    set: function set(v) {
      this.theta = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["a" /* radians */])(v);
    }
  }, {
    key: "longitude",
    get: function get() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["g" /* degrees */])(this.phi);
    }
  }, {
    key: "latitude",
    get: function get() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["g" /* degrees */])(this.theta);
    }
  }, {
    key: "lng",
    get: function get() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["g" /* degrees */])(this.phi);
    }
  }, {
    key: "lat",
    get: function get() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lib_common__["g" /* degrees */])(this.theta);
    }
  }, {
    key: "z",
    get: function get() {
      return (this.radius - 1) * this.radiusScale;
    }
  }]);

  return SphericalCoordinates;
}();


//# sourceMappingURL=spherical-coordinates.js.map

/***/ }),
/* 287 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
function assert(condition, message) {
  if (!condition) {
    throw new Error("Assertion failed. ".concat(message));
  }
}
//# sourceMappingURL=assert.js.map

/***/ }),
/* 288 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export isMobile */
/* harmony export (immutable) */ __webpack_exports__["a"] = getBrowser;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__globals__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__is_browser__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__is_electron__ = __webpack_require__(73);



function isMobile() {
  return typeof __WEBPACK_IMPORTED_MODULE_0__globals__["d" /* window */].orientation !== 'undefined';
}
function getBrowser(mockUserAgent) {
  if (!mockUserAgent && !__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__is_browser__["a" /* default */])()) {
    return 'Node';
  }

  if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__is_electron__["a" /* default */])(mockUserAgent)) {
    return 'Electron';
  }

  var navigator_ = typeof navigator !== 'undefined' ? navigator : {};
  var userAgent = mockUserAgent || navigator_.userAgent || '';

  if (userAgent.indexOf('Edge') > -1) {
    return 'Edge';
  }

  var isMSIE = userAgent.indexOf('MSIE ') !== -1;
  var isTrident = userAgent.indexOf('Trident/') !== -1;

  if (isMSIE || isTrident) {
    return 'IE';
  }

  if (__WEBPACK_IMPORTED_MODULE_0__globals__["d" /* window */].chrome) {
    return 'Chrome';
  }

  if (__WEBPACK_IMPORTED_MODULE_0__globals__["d" /* window */].safari) {
    return 'Safari';
  }

  if (__WEBPACK_IMPORTED_MODULE_0__globals__["d" /* window */].mozInnerScreenX) {
    return 'Firefox';
  }

  return 'Unknown';
}
//# sourceMappingURL=get-browser.js.map

/***/ }),
/* 289 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_utils_globals__ = __webpack_require__(27);

__WEBPACK_IMPORTED_MODULE_0__lib_utils_globals__["b" /* global */].probe = {};
//# sourceMappingURL=init.js.map

/***/ }),
/* 290 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_timestamp__ = __webpack_require__(150);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_formatters__ = __webpack_require__(149);





var Stats = function () {
  function Stats(_ref) {
    var id = _ref.id;

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Stats);

    this.id = id;
    this.time = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_timestamp__["a" /* getTimestamp */])();
    this.counters = {};
    Object.seal(this);
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(Stats, [{
    key: "addCounter",
    value: function addCounter(name) {
      this._getCounter(name);

      return this;
    }
  }, {
    key: "bump",
    value: function bump(name) {
      var counter = this._getCounter(name);

      counter.call++;
      counter.count++;
      return this;
    }
  }, {
    key: "increment",
    value: function increment(name, count) {
      var counter = this._getCounter(name);

      counter.call++;
      counter.count += count;
      return this;
    }
  }, {
    key: "addTimer",
    value: function addTimer(name) {
      var timer = this._getCounter(name);

      timer.time = 0;
      return this;
    }
  }, {
    key: "addTime",
    value: function addTime(name, time) {
      var timer = this._getCounter(name);

      timer.time += time;
      timer.count++;
      return this;
    }
  }, {
    key: "timeStart",
    value: function timeStart(name, subname) {
      var timer = this._getCounter(name);

      timer._startTime = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_timestamp__["a" /* getTimestamp */])();
    }
  }, {
    key: "timeEnd",
    value: function timeEnd(name, subname) {
      var timer = this._getCounter(name);

      this.addTime(name, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_timestamp__["a" /* getTimestamp */])() - timer._startTime);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.time = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_timestamp__["a" /* getTimestamp */])();

      for (var key in this.counters) {
        var counter = this.counters[key];
        counter.count = 0;
        counter.time = 0;
      }

      return this;
    }
  }, {
    key: "hasTimeElapsed",
    value: function hasTimeElapsed() {
      var deltaTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_timestamp__["a" /* getTimestamp */])() - this.time > 1000;
    }
  }, {
    key: "getStats",
    value: function getStats() {
      var deltaTime = (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_timestamp__["a" /* getTimestamp */])() - this.time) / 1000;
      var stats = {};

      for (var key in this.counters) {
        var counter = this.counters[key];
        stats[counter.title] = {
          total: counter.count,
          fps: Math.round(counter.count / deltaTime)
        };

        if (counter.time) {
          stats[counter.title].totalTime = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_formatters__["c" /* formatTime */])(counter.time);
          stats[counter.title].avgTime = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_formatters__["c" /* formatTime */])(counter.time / counter.count);
        }
      }

      return stats;
    }
  }, {
    key: "getStatsTable",
    value: function getStatsTable() {
      var stats = this.getStats();

      for (var key in stats) {
        if (stats[key].total === 0) {
          delete stats[key];
        }
      }

      return stats;
    }
  }, {
    key: "getStatNames",
    value: function getStatNames() {
      return Object.keys(this.counters);
    }
  }, {
    key: "get",
    value: function get(name) {
      var counter = this._getCounter(name);

      return counter.count;
    }
  }, {
    key: "getCount",
    value: function getCount(name) {
      var counter = this._getCounter(name);

      return counter.count;
    }
  }, {
    key: "getFPS",
    value: function getFPS(name) {
      var counter = this._getCounter(name);

      var deltaTime = (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_timestamp__["a" /* getTimestamp */])() - this.time) / 1000;
      return Math.round(counter.count / deltaTime);
    }
  }, {
    key: "getTimeString",
    value: function getTimeString() {
      return "".concat(this.id, ":").concat(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__utils_formatters__["c" /* formatTime */])(this.time), "(").concat(this.count, ")");
    }
  }, {
    key: "oneSecondPassed",
    value: function oneSecondPassed() {
      var deltaTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;
      return this.hasTimeElapsed(deltaTime);
    }
  }, {
    key: "_getCounter",
    value: function _getCounter(name) {
      var counter = this.counters[name];

      if (!counter) {
        counter = {
          title: name,
          unit: '',
          timer: false,
          count: 0,
          time: 0,
          totalTime: 0,
          averageTime: 0
        };
        this.counters[name] = counter;
      }

      return counter;
    }
  }, {
    key: "_incrementTimer",
    value: function _incrementTimer(counter, time, count) {
      counter.count += count;
      counter.totalTime += time;
      counter.averageTime = counter.totalTime / count;
    }
  }]);

  return Stats;
}();


//# sourceMappingURL=stats.js.map

/***/ }),
/* 291 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = assert;
function assert(condition, message) {
  if (!condition) {
    throw new Error("Assertion failed. ".concat(message));
  }
}
//# sourceMappingURL=assert.js.map

/***/ }),
/* 292 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = autobind;
function autobind(obj) {
  var predefined = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['constructor'];
  var proto = Object.getPrototypeOf(obj);
  var propNames = Object.getOwnPropertyNames(proto);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var key = _step.value;

      if (typeof obj[key] === 'function') {
        if (!predefined.find(function (name) {
          return key === name;
        })) {
          obj[key] = obj[key].bind(obj);
        }
      }
    };

    for (var _iterator = propNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}
//# sourceMappingURL=autobind.js.map

/***/ }),
/* 293 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LocalStorage; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__ = __webpack_require__(1);



function getStorage(type) {
  try {
    var storage = window[type];
    var x = '__storage_test__';
    storage.setItem(x, x);
    storage.removeItem(x);
    return storage;
  } catch (e) {
    return null;
  }
}

var LocalStorage = function () {
  function LocalStorage(id, defaultSettings) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'sessionStorage';

    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, LocalStorage);

    this.storage = getStorage(type);
    this.id = id;
    this.config = {};
    Object.assign(this.config, defaultSettings);

    this._loadConfiguration();
  }

  __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_createClass__["a" /* default */])(LocalStorage, [{
    key: "getConfiguration",
    value: function getConfiguration() {
      return this.config;
    }
  }, {
    key: "setConfiguration",
    value: function setConfiguration(configuration) {
      this.config = {};
      return this.updateConfiguration(configuration);
    }
  }, {
    key: "updateConfiguration",
    value: function updateConfiguration(configuration) {
      Object.assign(this.config, configuration);

      if (this.storage) {
        var serialized = JSON.stringify(this.config);
        this.storage.setItem(this.id, serialized);
      }

      return this;
    }
  }, {
    key: "_loadConfiguration",
    value: function _loadConfiguration() {
      var configuration = {};

      if (this.storage) {
        var serializedConfiguration = this.storage.getItem(this.id);
        configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};
      }

      Object.assign(this.config, configuration);
      return this;
    }
  }]);

  return LocalStorage;
}();


//# sourceMappingURL=local-storage.js.map

/***/ }),
/* 294 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export enableDOMLogging */
/* unused harmony export logLineToDOM */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__globals__ = __webpack_require__(27);

var old = null;
function enableDOMLogging() {
  var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  if (enable && !old) {
    old = __WEBPACK_IMPORTED_MODULE_0__globals__["a" /* console */].log.bind(__WEBPACK_IMPORTED_MODULE_0__globals__["a" /* console */]);

    __WEBPACK_IMPORTED_MODULE_0__globals__["a" /* console */].log = function () {
      logLineToDOM.apply(void 0, arguments);
      old.apply(void 0, arguments);
    };
  }

  if (!enable && old) {
    __WEBPACK_IMPORTED_MODULE_0__globals__["a" /* console */].log = old;
    old = null;
  }
}
var logDiv = null;
function logLineToDOM(message) {
  if (!logDiv) {
    var markdown = __WEBPACK_IMPORTED_MODULE_0__globals__["b" /* global */].probe.markdown;
    logDiv = __WEBPACK_IMPORTED_MODULE_0__globals__["c" /* document */].createElement(markdown ? 'pre' : 'div');
  }

  var childNodes = __WEBPACK_IMPORTED_MODULE_0__globals__["c" /* document */].body.childNodes;
  __WEBPACK_IMPORTED_MODULE_0__globals__["c" /* document */].body.insertBefore(logDiv, childNodes && childNodes[0]);

  if (typeof message === 'string') {
    logDiv.innerHTML += "".concat(message, "<br />");
  }
}
/* unused harmony default export */ var _unused_webpack_default_export = (enableDOMLogging);
//# sourceMappingURL=log-to-dom.js.map

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

var isBrowser = typeof window !== 'undefined' && window.addEventListener;

var timers = new Map();

/**
 * Ready check for Seer initialization
 *
 * @returns {Boolean}
 */
var isReady = function isReady() {
  return isBrowser && window.__SEER_INITIALIZED__;
};

/**
 * Utility method allowing to throttle a user action based on a key and a minimun delay.
 *
 * @param key {String} A unique key
 * @param delay {Number} The minimal delay to throttle
 * @returns {Boolean}
 */
var throttle = function throttle(key, delay) {
  var time = timers.get(key);
  var now = Date.now();
  if (time && now - time < delay) {
    return true;
  }
  timers.set(key, now);
  return false;
};

var replacer = function replacer(seen) {
  return function (key, value) {
    if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && seen.has(value)) {
      return;
    }
    seen.add(value);
    var isArray = Object.prototype.toString.call(value).slice(8, -1).includes('Array');
    if (isArray) {
      return Array.prototype.slice.call(value, 0, 20);
    }
    return value;
  };
};

/**
 * Low-level api leveraging window.postMessage
 *
 * @param type {String} The action type
 * @param payload {Any} The action payload
 */
var send = function send(type) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!isBrowser || !isReady()) {
    return;
  }

  var seen = new Set();
  var payload = JSON.stringify(data, replacer(seen));

  try {
    window.postMessage({ type: type, payload: payload, source: 'seer-agent' }, '*');
  } catch (e) {
    if (throttle('seer-log', 2E3)) {
      return;
    }
    console.log(e); // eslint-disable-line
  }
};

var listeners = new Map();

var listener = function listener(message) {
  if (!message || !message.data || message.data.source !== 'seer-core') {
    return;
  }
  var _message$data = message.data,
      type = _message$data.type,
      payload = _message$data.payload;


  var typeListeners = listeners.get(type);
  if (typeListeners) {
    typeListeners.forEach(function (cb) {
      return cb(payload);
    });
  }
};

/**
 * Initilize window listener. There will be only one for the whole process
 * to prevent too many registrations.
 *
 * This method will be called automatically if you use the `listenFor` method.
 */
var init = function init() {
  if (!isBrowser || window.__SEER_LISTENER__) {
    return;
  }
  window.addEventListener('message', listener);
  window.__SEER_LISTENER__ = true;
};

/**
 * Clean listener. Can be useful in case you want to unregister upcoming events
 * or liberate memory.
 */
var clean = function clean() {
  if (!isBrowser || !window.__SEER_LISTENER__) {
    return;
  }
  window.removeEventListener('message', listener);
  delete window.__SEER_LISTENER__;
};

/**
 * Create a listener that will be called upon events of the given key.
 *
 * @param key {String} The unique tab key
 * @param cb {Function} A callback that will receive the message payload
 */
var listenFor = function listenFor(type, cb) {
  if (!isBrowser) {
    return;
  }
  if (!type || !cb) {
    throw new Error('Please provide a type and callback');
  }
  if (!listeners.has(type)) {
    listeners.set(type, []);
  }
  if (!window.__SEER_LISTENER__) {
    init();
  }
  listeners.get(type).push(cb);
};

/**
 * Remove an identity listener
 *
 * @param cb {Function} The callback to remove
 */
var removeListener = function removeListener(cb) {
  listeners.forEach(function (typeListeners, key) {
    listeners.set(key, typeListeners.filter(function (l) {
      return l !== cb;
    }));
  });
};

/**
 * Creates a new indexed list.
 * It works by index to get O(1) accessing and performance.
 *
 * @param key {String} The key of the tab
 * @param data {Object} The indexed object
 */
var list = function list(key, data) {
  return send('LIST', { key: key, data: data });
};

/**
 * Creates an element in the indexed list, based on the itemKey.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param data {Any} The value of the item
 */
var listItem = function listItem(key, itemKey) {
  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  return send('LIST_ITEM', { key: key, itemKey: itemKey, data: data });
};

/**
 * Update an item property, can be deeply nested.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param path {String} The path of the variable you want to update
 * @param data {Object} The new value
 */
var updateItem = function updateItem(key, itemKey, path, data) {
  return send('UPDATE_ITEM', { key: key, itemKey: itemKey, path: path, data: data });
};

/**
 * Similar to updateItem, but allows to pass an array with {path,data} pairs for
 * multiple update of the same item without having to send multiple messages.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param array {Array} The array of updates
 * @param array.path {String} The path for this update
 * @param array.data {Object} The value of this update
 */
var multiUpdate = function multiUpdate(key, itemKey, array) {
  return send('MULTI_UPDATE_ITEM', { key: key, itemKey: itemKey, array: array });
};

/**
 * Remove a specific item in a specific tab.
 *
 * @param key {String} They key of the tab
 * @param itemKey {String} The key of the item
 */
var deleteItem = function deleteItem(key, itemKey) {
  return send('DELETE_ITEM', { key: key, itemKey: itemKey });
};

/**
 * Will create a log message to an item, that will be displayde with the current time.
 *
 * @param key {String} The key of the tab
 * @param itemKey {String} The key of the item
 * @param msg {String} The message to display
 */
var addLog = function addLog(key, itemKey, msg) {
  return send('ADD_LOG', { key: key, itemKey: itemKey, msg: msg });
};

exports.default = {

  send: send,
  throttle: throttle,
  isReady: isReady,

  list: list,
  listItem: listItem,
  updateItem: updateItem,
  multiUpdate: multiUpdate,
  deleteItem: deleteItem,
  addLog: addLog,

  listeners: listeners,
  listenFor: listenFor,
  removeListener: removeListener,
  init: init,
  clean: clean

};


/***/ }),
/* 296 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 297 */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(297);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(296);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28), __webpack_require__(33)))

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = function() {
  return new Worker(__webpack_require__.p + "5a2d114fae3a8620b4d4.worker.js");
};

/***/ }),
/* 300 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_js__ = __webpack_require__(165);


class QuadEdge {
  constructor() {
    const edges = [new Edge(),
                   new Edge(),
                   new Edge(),
                   new Edge()];

    // assign the quadedge parent since we cannot use memory addresses
    // to point to next edges (which is also pretty hacky TBH)
    edges.forEach((e) => e.quadEdge = this);

    edges[0].index = 0;
    edges[1].index = 1;
    edges[2].index = 2;
    edges[3].index = 3;

    edges[0].next = edges[0];
    edges[1].next = edges[3];
    edges[2].next = edges[2];
    edges[3].next = edges[1];

    const id = Edge.nextId;

    edges[0].id = id+0;
    edges[1].id = id+1;
    edges[2].id = id+2;
    edges[3].id = id+3;

    Edge.nextId = id+4;

    this.edges = edges;
  }

}
/* unused harmony export QuadEdge */


class Edge {
  constructor() {
    this.data = 0;
    this.vertex = 0;
    this.face = 0;
    this.index = 0;
    this.id = 0;
    this.quadEdge = 0;
  }

  static make() {
    return new QuadEdge().edges[0];
  }

  static kill(edge) {
    Edge.splice(edge, edge.Oprev());
    Edge.splice(edge.Sym(), edge.Sym().Oprev());

    // free the quad edge that the edge belongs to
    //delete (QuadEdge*)(edge-edge->index);
  }

  static splice(a, b) {
    const alpha = a.Onext().Rot();
    const beta  = b.Onext().Rot();

    const t1 = b.Onext();
    const t2 = a.Onext();
    const t3 = beta.Onext();
    const t4 = alpha.Onext();

    a.next     = t1;
    b.next     = t2;
    alpha.next = t3;
    beta.next  = t4;
  }

  getId() {
    return id;
  }

  Rot() {
    return this.index<3 ?
      this.quadEdge.edges[this.index+1]
      : this.quadEdge.edges[this.index-3];
  }

  InvRot() {
    return this.index>0 ?
      this.quadEdge.edges[this.index-1]
      : this.quadEdge.edges[this.index+3];
  }

  Sym() {
    return this.index<2 ?
      this.quadEdge.edges[this.index+2]
      : this.quadEdge.edges[this.index-2];
  }

  Onext() {
    return this.next;
  }

  Oprev() {
    return this.Rot().Onext().Rot();
  }

  Dnext() {
    return this.Sym().Onext().Sym();
  }

  Dprev() {
    return this.InvRot().Onext().InvRot();
  }

  Lnext() {
    return this.InvRot().Onext().Rot();
  }

  Lprev() {
    return this.Onext().Sym();
  }

  Rnext() {
    return this.Rot().Onext().InvRot();
  }

  Rprev() {
    return this.Sym().Onext();
  }

  Org() {
    return this.vertex;
  }

  Dest() {
  return this.Sym().vertex;
  }

  Left() {
    return this.Rot().face;
  }

  Right() {
    return this.InvRot().face;
  }

  setId(id) {
    this.id = id;
  }

  setOrg(org) {
    this.vertex = org;
    org.addEdge(this);
  }

  setDest(dest) {
    this.Sym().vertex = dest;
    dest.addEdge(this.Sym());
  }

  setLeft(left) {
    this.Rot().face = left;
    left.addEdge(this);
  }

  setRight(right) {
    this.InvRot().face = right;
    right.addEdge(this.Sym());
  }
}
/* unused harmony export Edge */


Edge.nextId = 0;

class Vertex {

  static make(cell) {
    return new Vertex(cell);
  }

  static kill() {
    this.cell.removeVertex(this);
  }

  constructor(cell) {
    this.pos = [0, 0, 0];
    this.cell = cell;
    this.id = cell.makeVertexId();
    this.data = 0;
    this.edge = 0;

    cell.addVertex(this);
  }

  setId(id) {
    this.id = id;
  }

  addEdge(edge) {
    this.edge = edge;
  }

  removeEdge(edge) {
    const next = edge.Onext();
    this.edge = next != edge ? next : 0;
  }

  getCell() {
    return this.cell;
  }

  getId() {
    return this.id;
  }

  getEdge() {
    return this.edge;
  }

  eachEdge(f) {
    let start = this.edge;
    let current = start;
    do {
      f(current);
      current = current.Onext();
    } while(current && current !== start);
  }
}
/* unused harmony export Vertex */


class Face {

  static make(cell) {
    return new Face(cell);
  }

  constructor(cell) {
    this.cell = cell;
    this.id = cell.makeFaceId();
    this.data = 0;
    this.edge = 0;

    cell.addFace(this);
  }

  getCell() {
    return this.cell;
  }

  getID() {
    return this.id;
  }

  getEdge() {
    return this.edge;
  }

  setId(id) {
    this.id = id;
  }

  addEdge(edge) {
    this.edge = edge;
  }

  removeEdge(edge) {
    const next = edge.Onext();
    this.edge = next != edge ? next : 0;
  }

  eachEdge(f) {
    let start = this.getEdge();
    let edge = start;
    let current = edge;

    do {
      f(current);
      current = current.Lnext();
    } while (current && current !== start);
  }

  edges() {
    let acum = 0;
    this.eachEdge(e => acum++);
    return acum;
  }

  getNormal(pos='pos') {
    const centroid = this.getCentroid(pos);
    const edge = this.getEdge();
    const org = edge.Org()[pos];
    const dest = edge.Dest()[pos];
    const u1 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["a" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["b" /* sub */])(org, centroid));
    const u2 = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["a" /* normalize */])(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["b" /* sub */])(dest, centroid));
    const ans = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__math_js__["c" /* cross */])(u1, u2);
    return ans;
  }

  getCentroid(pos='pos') {
    let count = 0;
    const centroid = [0, 0, 0];
    this.eachEdge(e => {
      const ePos = e.Org()[pos];
      centroid[0] += ePos[0];
      centroid[1] += ePos[1];
      centroid[2] += ePos[2];
      count++;
    });
    centroid.forEach((p, i) => {
      centroid[i] = p / count;
    });
    return centroid;
  }
}
/* unused harmony export Face */


class Cell {
  static make() {
    // create a looping edge that connects to itself at a single vertex
    // the edge delimits two faces
    // this is the smallest cell that is consistent with our invariants
    const cell = new Cell();
    const vertex = Vertex.make(cell);
    const leftFace = Face.make(cell);
    const rightFace = Face.make(cell);
    //TODO(nico): assuming the first edge is taken
    const edge = Edge.make().InvRot();

    edge.setOrg(vertex);
    edge.setDest(vertex);
    edge.setLeft(leftFace);
    edge.setRight(rightFace);

    return cell;
  }

  static makeTetrahedron() {
    // use the Euler operators to construct a tetrahedron
    const cell = Cell.make();

    // grab the initial vertex

    let vertex1;

    cell.eachVertex((v) => vertex1 = v);

    // grab the initial edge and the initial faces

    const edge1 = vertex1.getEdge();
    const leftFace  = edge1.Left();
    const rightFace = edge1.Right();

    // drop in four vertices along the initial edge

    const vertex2 = cell.makeVertexEdge(vertex1, leftFace, rightFace).Dest();
    const vertex3 = cell.makeVertexEdge(vertex2, leftFace, rightFace).Dest();
    const vertex4 = cell.makeVertexEdge(vertex3, leftFace, rightFace).Dest();

    // cut each of the faces in half from complementary vertices

    cell.makeFaceEdge(leftFace, vertex2, vertex4).Right();
    cell.makeFaceEdge(rightFace, vertex1, vertex3).Right();

    return cell;
  }

  constructor() {
    this.vertices = [];
    this.vertexId = 1;
    this.faces    = [];
    this.faceId   = 1;
  }

  eachVertex(f) {
    this.vertices.forEach(f);
  }

  getFace() {
    return this.faces[0];
  }

  eachFace(f) {
    this.faces.forEach(f);
  }

  /* -- (Euler operators) ---------------------------- */

  makeVertexEdge(vertex, leftFace, rightFace) {

    // locate the edges to the right of each of the faces in the orbit of the
    // vertex

    const edge  = vertex.getEdge();
    const edge1 = this.getOrbitLeft(edge, rightFace);
    const edge2 = this.getOrbitLeft(edge, leftFace);

    if (edge1==0) {
      console.error(edge1);
      return;
    }

    if (edge2==0) {
      console.error(edge2);
      return;
    }

    // create a new vertex and copy the position of the vertex of origin

    const vertexNew = Vertex.make(this);

    vertexNew.pos = vertex.pos.slice();

    // create a new edge and rotate it to make a clockwise loop

    const edgeNew = Edge.make().Rot();

    // connect the origin (and destination) of the new edge to _vertex_ so that
    // the left face of the edge is _left_
    // this makes a loop on the inside of _left_

    Edge.splice(edge2, edgeNew);

    // split the origin and destination of the loop so that the right face of the
    // edge is now _right_
    // this results in a non-loop edge dividing _left_ from _right_

    Edge.splice(edge1, edgeNew.Sym());

    // initialize the secondary attributes of the new edge

    edgeNew.setOrg(edge1.Org());
    edgeNew.setLeft(edge2.Left());
    edgeNew.setRight(edge1.Left());

    // all edges leaving the destination orbit of the new edge now have the new
    // vertex as their vertex of origin

    this.setOrbitOrg(edgeNew.Sym(), vertexNew);

    return edgeNew;
  }

  killVertexEdge(edge) {
    // locate _edge1_ and _edge2_ as in _makeVertexEdge_

    let edge1 = edge.Oprev();
    let edge2 = edge.Lnext();

    // use _edge1_ for _edge2_ if the destination vertex is isolated

    if (edge2 === edge.Sym())
      edge2 = edge1;

    // inverse of _makeVertexEdge_

    Edge.splice(edge1, edge.Sym());
    Edge.splice(edge2, edge);

    // all edges leaving the destination orbit of the deleted edge now have its
    // origin vertex as their vertex of origin

    this.setOrbitOrg(edge2, edge1.Org());

    // don't use the deleted edge as a reference edge any more

    edge1.Org().addEdge(edge1);
    edge1.Left().addEdge(edge1);
    edge2.Left().addEdge(edge2);

    // reclaim the vertex and the edge

    Vertex.kill(edge.Dest());
    Edge.kill(edge);
  }

  makeFaceEdge(face, org, dest) {
    // locate the edges leaving each of the vertices in the orbit of the face

    let edge  = face.getEdge();
    let edge1 = this.getOrbitOrg(edge, org);
    let edge2 = this.getOrbitOrg(edge, dest);

    if (edge1==0) {
      console.error(edge1);
      return;
    }

    if (edge2==0) {
      console.error(edge2);
      return;
    }

    // create a new face

    let faceNew = Face.make(this);

    // create a new (non-loop) edge

    let edgeNew = Edge.make();

    // connect the destination of the new edge to the origin of _edge2_
    // both faces of the edge are now _face_

    Edge.splice(edge2, edgeNew.Sym());

    // connect the origin of the new edge to _edge1_
    // _face_ is split in half along the new edge, with the new face introduced
    // on the right

    Edge.splice(edge1, edgeNew);

    // initialize the secondary attributes of the new edge

    edgeNew.setOrg(edge1.Org());
    edgeNew.setDest(edge2.Org());
    edgeNew.setLeft(edge2.Left());

    // all edges in the right orbit of the new edge (i.e. the left orbit of its
    // Sym) now have the new face as their left face

    this.setOrbitLeft(edgeNew.Sym(), faceNew);

    return edgeNew;
  }

  killFaceEdge(edge) {

    // locate _edge1_ and _edge2_ as in _makeFaceEdge_

    let edge1 = edge.Oprev();
    let edge2 = edge.Lnext();

    // use _edge2_ for _edge1_ if the right face is inside a loop

    if (edge1 === edge.Sym())
      edge1 = edge2;

    // inverse of _makeFaceEdge_

    Edge.splice(edge2, edge.Sym());
    Edge.splice(edge1, edge);

    // all edges in the right orbit of the deleted edge now have its left face
    // as their left face

    this.setOrbitLeft(edge1, edge2.Left());

    // don't use the deleted edge as a reference edge any more

    edge1.Org().addEdge(edge1);
    edge2.Org().addEdge(edge2);
    edge2.Left().addEdge(edge2);

    // reclaim the face and the edge

    Face.kill(edge.Right());
    Edge.kill(edge);
  }

  addVertex(vertex) {
    // add the vertex to the end of the array
    this.vertices.push(vertex);
  }

  removeVertex(vertex) {
    this.vertices = this.vertices.splice(this.vertices.indexOf(vertex), 1);
  }

  addFace(face) {
    this.faces.push(face);
  }

  removeFace(face) {
     this.faces = this.vertices.splice(this.vertices.indexOf(face), 1);
  }

  getOrbitOrg(edge, org) {
    // traverse the Lnext orbit of _edge_ looking for an edge whose origin is
    // _org_

    let scan = edge;

    do {
      if (scan.Org() === org) {
        return scan;
      }

      scan = scan.Lnext();
    } while (scan !== edge);

    return 0;
  }

  setOrbitOrg(edge, org) {
    // traverse the Onext orbit of _edge_, setting the origin of each edge to
    // _org_

    let scan = edge;

    do {
      scan.setOrg(org);

      scan = scan.Onext();
    } while (scan !== edge);
  }

  getOrbitLeft(edge, left) {
    // traverse the Onext orbit of _edge_ looking for an edge whose left face is
    // _left

    let scan = edge;

    do {
      if (scan.Left() === left)
        return scan;

      scan = scan.Onext();
    } while (scan !== edge);

    return 0;
  }

  setOrbitLeft(edge, left) {
    // traverse the Lnext orbit of _edge_, setting the left face of each edge to
    // _left_

    let scan = edge;

    do {
      scan.setLeft(left);

      scan = scan.Lnext();
    } while (scan !== edge);
  }

  makeVertexId() {
    return this.vertexId++;
  }

  makeFaceId() {
    return this.faceId++;
  }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Cell;



/***/ }),
/* 301 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = sphericalSectionPoly;
/* harmony export (immutable) */ __webpack_exports__["b"] = sphericalSectionIter;
/* harmony export (immutable) */ __webpack_exports__["c"] = sphericalSectionSolid;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_mesh_js__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shaders_js__ = __webpack_require__(302);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vec3_js__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_luma_gl__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__obj_js__ = __webpack_require__(152);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__layout_js__ = __webpack_require__(153);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_math_gl__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_mat4__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_gl_mat4___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_gl_mat4__);









const cos = Math.cos;
const sin = Math.sin;
const tan = Math.tan;
const sign = Math.sign;
const pi = Math.PI;
const pi2 = pi * 2;
const sqrt = Math.sqrt;
const atan2 = Math.atan2;
const abs = Math.abs;
const acos = Math.acos;
const asin = Math.asin;

function subdividePoints([p1, p2, p3], iter, onIter) {
  const p12 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["g" /* vec3_mid */](p1, p2);
  const p23 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["g" /* vec3_mid */](p2, p3);
  const p13 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["g" /* vec3_mid */](p1, p3);
  const ans = [
    [p12, p23, p13],
    [p1, p12, p13],
    [p2, p12, p23],
    [p3, p13, p23]
  ];
  if (onIter) {
    const iterAns = onIter(iter);
    if (iterAns !== false && iterAns < 4) {
      ans.splice(iterAns, 1);
    }
  }
  return ans;
}

function subdivideIter([p1, p2, p3]) {
  let p12 = (p1 + p2) / 2 * 0.99;
  let p23 = (p2 + p3) / 2 * 0.99;
  let p13 = (p1 + p3) / 2 * 0.99;

  return [
    [p12, p23, p13],
    [p1, p12, p13],
    [p2, p12, p23],
    [p3, p13, p23]
  ];
}


function subdivideTextures([p1, p2, p3]) {
  const p12 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["g" /* vec3_mid */](p1, p2);
  const p23 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["g" /* vec3_mid */](p2, p3);
  const p13 = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["g" /* vec3_mid */](p1, p3);
  return [
    [p12, p23, p13],
    [p1, p12, p13],
    [p2, p12, p23],
    [p3, p13, p23]
  ];
}

function getThetaPhiBBox(ps) {
  let thetaMin = Infinity;
  let thetaMax = -Infinity;
  let phiMin = Infinity;
  let phiMax = -Infinity;

  ps.forEach(([x, y, z]) => {
    const theta = acos(z);
    const phi = Math.atan2(y, x) + Math.PI;
    thetaMin = theta < thetaMin ? theta : thetaMin;
    thetaMax = theta > thetaMax ? theta : thetaMax;
    phiMin = phi < phiMin ? phi : phiMin;
    phiMax = phi > phiMax ? phi : phiMax;
  });

  return [thetaMin, thetaMax, phiMin, phiMax];
}

function getUVs(state) {
  const layoutType = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__layout_js__["b" /* getLayoutType */])(state.orbifold);
  const {p1, p2, p3, p4} = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__layout_js__["c" /* getSphericalParams */])(
    layoutType,
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__layout_js__["d" /* getLayoutParams */])(layoutType, state.orbifold)
  );
  let texCoords;
  if (p4 !== undefined) {
    texCoords = getThetaPhiBBox([p1, p2, p3, p4]);
  } else {
    texCoords = getThetaPhiBBox([p1, p2, p3]);
  }
  return texCoords;
}

// Spherical Geometry
function sphericalSectionPoly(gl, textures, config, state) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__base_mesh_js__["a" /* polygon */])(gl, textures, config, state, __WEBPACK_IMPORTED_MODULE_1__shaders_js__["a" /* vs */], __WEBPACK_IMPORTED_MODULE_1__shaders_js__["b" /* fs */], __WEBPACK_IMPORTED_MODULE_5__layout_js__["e" /* getSphericalPgonMeshData */], getUVs);
}

function sphericalSectionIter(gl, textures, config, state) {
  return sphericalSectionIterAux(gl, textures, config, {
      orbifold: state.orbifold,
      hyperbolic: state.type == 'hyperbolic',
      spherical: state.type == 'spherical'
    });
}

function sphericalSectionIterAux(gl, textures, config, state) {
  let {radius = 1, iter = 6, onIter} = config;
  const {orbifold} = state;
  const type = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__layout_js__["b" /* getLayoutType */])(orbifold);
  const params = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__layout_js__["d" /* getLayoutParams */])(type, orbifold);
  const {p1, p2, p3, p4} = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__layout_js__["c" /* getSphericalParams */])(type, params);
  let a, b, c, iterCounter = 0;

  let triangleData = null;
  let center, centerAux;
  if (p4) {
    triangleData = [
      [[p1, p2, p3], [p4, p2, p3]],
      getThetaPhiBBox([p1, p2, p3, p4]),
      [[1, 1, 1], [1, 1, 1]]
    ];
    a = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["b" /* vec3_add */](__WEBPACK_IMPORTED_MODULE_2__vec3_js__["c" /* vec3_scale */](p1, 1/4), __WEBPACK_IMPORTED_MODULE_2__vec3_js__["c" /* vec3_scale */](p2, 1/4));
    b = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["c" /* vec3_scale */](p3, 1/4);
    c = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["c" /* vec3_scale */](p4, 1/4);
    center = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["b" /* vec3_add */](__WEBPACK_IMPORTED_MODULE_2__vec3_js__["b" /* vec3_add */](a, b), c);
  } else {
    triangleData = [
      [[p1, p2, p3]],
      getThetaPhiBBox([p1, p2, p3]),
      [[1, 1, 1]]
    ];
    a = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["b" /* vec3_add */](__WEBPACK_IMPORTED_MODULE_2__vec3_js__["c" /* vec3_scale */](p1, 1/3), __WEBPACK_IMPORTED_MODULE_2__vec3_js__["c" /* vec3_scale */](p2, 1/3));
    b = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["c" /* vec3_scale */](p3, 1/3);
    center = __WEBPACK_IMPORTED_MODULE_2__vec3_js__["b" /* vec3_add */](a, b);
  }

  let triangles = triangleData[0];
  let texCoords = triangleData[1];
  let iters = triangleData[2];

  while(iter--) {
    let newTriangles = [];
    let newIters = [];
    triangles.forEach((triangle, i) => {
      newTriangles.push(...subdividePoints(triangle, iterCounter, onIter));
      newIters.push(...subdivideIter(iters[i]));
    });
    triangles = newTriangles;
    iters = newIters;
    iterCounter++;
  }

  let acum = triangles.length * 3;
  const positions = new Float32Array(acum * 3);
  const positions2 = new Float32Array(acum * 3);
  const positions3 = new Float32Array(acum * 3);
  const depthBuffer = new Float32Array(acum * 3);
  acum = 0;
  triangles.forEach((t, i) => {
    const triangleIndex = i * 3 * 3;
    const depthIndex = i * 3 * 3;
    t.forEach((p, j) => {
      let next = (j + 1) % 3;
      let nextNext = (next + 1) % 3;

      positions[triangleIndex + j * 3 + 0] = p[0];
      positions[triangleIndex + j * 3 + 1] = p[1];
      positions[triangleIndex + j * 3 + 2] = p[2];

      positions2[triangleIndex + next * 3 + 0] = p[0];
      positions2[triangleIndex + next * 3 + 1] = p[1];
      positions2[triangleIndex + next * 3 + 2] = p[2];

      positions3[triangleIndex + nextNext * 3 + 0] = p[0];
      positions3[triangleIndex + nextNext * 3 + 1] = p[1];
      positions3[triangleIndex + nextNext * 3 + 2] = p[2];

      depthBuffer[depthIndex + j] = iters[i][j];
      depthBuffer[depthIndex + next] = iters[i][next];
      depthBuffer[depthIndex + nextNext] = iters[i][nextNext];
    });
  });

  const [row1, row2, row3, indices] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__base_mesh_js__["c" /* getTransforms */])(state);
  const instanceCount = row1.length / 4;

  return new Promise((resolve, reject) => {
    const sourceBuffers = {
      positions: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(positions)}),
      positions2: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(positions2)}),
        size: 3
      }),
      positions3: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(positions3)}),
        size: 3
      }),
      depth: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(depthBuffer)}),
        size: 3
      }),
      row1: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(row1) }),
        instanced: 1,
        size: 4
      }),
      row2: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(row2) }),
        instanced: 1,
        size: 4
      }),
      row3: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(row3) }),
        instanced: 1,
        size: 4
      }),
      instanceNumber: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["e" /* _Attribute */](gl, {
        buffer: new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["d" /* Buffer */](gl, { data: new Float32Array(indices) }),
        instanced: 1,
        size: 1
      })
    };

    const feedbackBuffers = {
      'vPosition': new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(positions.length * instanceCount)}),
      'vNormal': new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(positions.length * instanceCount)}),
      'vColor': new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["d" /* Buffer */](gl, {data: new Float32Array(positions.length * instanceCount)})
    };

    const model = new __WEBPACK_IMPORTED_MODULE_3_luma_gl__["f" /* Model */](gl, {
      vs: __WEBPACK_IMPORTED_MODULE_1__shaders_js__["a" /* vs */],
      fs: __WEBPACK_IMPORTED_MODULE_1__shaders_js__["b" /* fs */],
      isInstanced: 1,
      instanceCount,
      isIndexed: false,
      vertexCount: positions.length / 3,
      uniforms: {
        sDepth: textures[0],
        sColor: textures[1],
        center,
        texCoords
      },
      drawMode: gl.TRIANGLES,
      attributes: sourceBuffers
    });

    resolve({
      model,
      transform: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__base_mesh_js__["d" /* getTransformInstance */])(gl, {
        vs: __WEBPACK_IMPORTED_MODULE_1__shaders_js__["a" /* vs */],
        instanceCount,
        isInstanced: 1,
        elementCount: positions.length / 3,
        sourceBuffers,
        feedbackBuffers,
        varyings: ['vPosition', 'vNormal', 'vColor']
      })
    });
  });
}

function sphericalSectionSolid(gl, textures, config, state) {
  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__base_mesh_js__["b" /* sectionSolid */])(gl, textures, config, state, __WEBPACK_IMPORTED_MODULE_1__shaders_js__["a" /* vs */], __WEBPACK_IMPORTED_MODULE_1__shaders_js__["b" /* fs */]);
}


/***/ }),
/* 302 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const {vs, fs} = {
    vs: `\
#define DELTA 0.05
#define EPSILON 0.000001
#define PI 3.1415926535

attribute vec3 positions;
attribute vec3 positions2;
attribute vec3 positions3;

attribute vec2 coords;
attribute vec2 coords2;
attribute vec2 coords3;

attribute vec3 depth;
attribute float instanceNumber;

attribute vec4 row1;
attribute vec4 row2;
attribute vec4 row3;

uniform mat4 modelSeed;
uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;
uniform float factor;
uniform float spiral;
uniform vec3 center;
uniform float flatFace;
uniform vec4 texCoords;

uniform sampler2D sDepth;
uniform vec2 moebius;
uniform float elevation;

//0 0 stereo 0
uniform vec4 mappings;

uniform vec3 uPointLightingLocation;
uniform vec3 uPointLightingColor;

varying vec3 color;
varying vec3 vColor;
varying vec2 vUvs;
varying vec3 vNormal;
varying vec3 vPosition;

vec2 getPhiTheta(vec3 pos) {
  float thetaMin = texCoords.x;
  float thetaMax = texCoords.y;
  float phiMin = texCoords.z;
  float phiMax = texCoords.w;

  float theta = acos(pos.z);
  float phi = (atan(pos.y, pos.x) + PI);

  theta = (theta - thetaMin) / (thetaMax - thetaMin);
  phi = (phi - phiMin) / (phiMax - phiMin);

  return vec2(phi, theta);
}

vec3 stereographic(vec3 pos) {
  return vec3(
    pos.z / (1. - pos.y),
    pos.x / (1. - pos.y),
    0
  ) * 0.5;
}

vec3 rotateAxis(vec3 axis, float angle, vec3 position, vec3 centroid) {
  vec3 pos = position - centroid;
  mat3 uxu = mat3(axis.x * axis.x, axis.x * axis.y, axis.x * axis.z,
                  axis.x * axis.y, axis.y * axis.y, axis.y * axis.z,
                  axis.x * axis.z, axis.y * axis.z, axis.z * axis.z);
  mat3 ux = mat3(0, -axis.z, axis.y,
                 axis.z, 0, -axis.x,
                 -axis.y, axis.x, 0);
  mat3 id = mat3(1, 0, 0, 0, 1, 0, 0, 0, 1);
  mat3 transform = cos(angle) * id + sin(angle) * ux + (1. - cos(angle)) * uxu;
  pos = transform * pos;
  pos += centroid;
  return pos;
}

//TODO(nico):
vec3 spiralize(vec3 pos, vec3 normal, vec3 centroid, float dist, float val) {
  float angle = PI * 2. * (0.1 - clamp(distance(pos, centroid), 0., 0.1)) * 10. * val;
  //float angle = PI * 2. * val * (distance - length(pos));
  //float angle = PI * 2. * val * distance;
  vec3 ans = rotateAxis(normal, angle, pos, centroid);
  return ans;
}

void main(void) {

  mat4 instanceMatrix = mat4(row1,
                             row2,
                             row3,
                             0, 0, 0, 1);

  float solid = float(abs(center.x) > 10.);

  vec3 centerPoint = mix(center, depth, solid);
 
  vec3 sPositions = (modelSeed * vec4(positions, 1)).xyz;
  vec3 sPositions2 = (modelSeed * vec4(positions2, 1)).xyz;
  vec3 sPositions3 = (modelSeed * vec4(positions3, 1)).xyz;

  vec3 compCenter = mix(center, centerPoint, solid);

  float factorSphere = clamp((1. - factor), 0.00001, 1.);
  vec3 nCenter = mix(compCenter, normalize(compCenter), 1. - flatFace);
  vec3 sPos = mix(sPositions, normalize(sPositions), 1. - flatFace);
  vec3 sPos2 = mix(sPositions2, normalize(sPositions2), 1. - flatFace);
  vec3 sPos3 = mix(sPositions3, normalize(sPositions3), 1. - flatFace);

  vec3 diff = sPos - nCenter;
  vec3 tpos = nCenter + diff / (1. + factorSphere);

  diff = sPos2 - nCenter;
  vec3 tpos2 = nCenter + diff / (1. + factorSphere);

  diff = sPos3 - nCenter;
  vec3 tpos3 = nCenter + diff / (1. + factorSphere);

  vec3 position = (instanceMatrix * vec4(tpos, 1)).xyz;
  vec3 position2 = (instanceMatrix * vec4(tpos2, 1)).xyz;
  vec3 position3 = (instanceMatrix * vec4(tpos3, 1)).xyz;
  position += vec3(row1.w, row2.w, row3.w);
  position2 += vec3(row1.w, row2.w, row3.w);
  position3 += vec3(row1.w, row2.w, row3.w);

  //compute texCoords

  vec2 d1 = mix(vec2(distance(normalize(sPositions), normalize(compCenter))  + 0.5), coords, 0.);
  vec2 d2 = mix(vec2(distance(normalize(sPositions2), normalize(compCenter)) + 0.5), coords2, 0.);
  vec2 d3 = mix(vec2(distance(normalize(sPositions3), normalize(compCenter)) + 0.5), coords3, 0.);

  float depth1 = texture2D(sDepth, d1).x;
  float depth2 = texture2D(sDepth, d2).x;
  float depth3 = texture2D(sDepth, d3).x;

  //uncomment for attribute-based depth
  //float depth1 = depth.x;
  //float depth2 = depth.y;
  //float depth3 = depth.z;

  position =  mix(position, depth1 * position, elevation);
  position2 = mix(position2, depth2 * position2, elevation);
  position3 = mix(position3, depth3 * position3, elevation);

  vUvs = coords;
  if (solid == 0.) {
    vUvs = getPhiTheta(positions);
  }

  //compute normal
  vec3 diff1 = position2 - position;
  vec3 diff2 = position3 - position;
  vec3 normal = cross(diff1, diff2);
  float angle = acos(dot(normal, position) / length(normal) / length(position));
  if (angle < 0.) {
    angle += PI * 2.;
  }
  if (angle > PI / 2. && angle < 3. * PI / 2.) {
    normal = -normal;
  }

  position = spiralize(position, normalize(normal), (instanceMatrix * vec4(compCenter, 1)).xyz, depth.x, spiral);

  position = mix(position, stereographic(position), mappings.w);
  position2 = mix(position2, stereographic(position2), mappings.w);
  position3 = mix(position3, stereographic(position3), mappings.w);
  normal = mix(normal, vec3(0, 0, 1), mappings.w);

  vec3 r = normalize(position);
  vec2 sphUv = vec2(
    (atan(r.x, r.y)) / (2.*PI),
    acos(r.z) / PI
  );


  //vUvs = texCoords;
  //vUvs = sphUv;
  //vUvs = d1;
  //vUvs = positions.xy/2.;
  vNormal = normal;
  vColor =  vec3((min(pow(length(position), 2.), 1.)));
  vPosition = position;



  color = vColor;
  gl_Position = uProjection * uView * (uModel * vec4(position, 1));
}
`,
    fs: `\
#ifdef GL_ES
precision highp float;
#endif

uniform sampler2D sColor;
uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;
uniform vec3 uAmbientColor;

uniform vec3 uPointLightingLocation;
uniform vec3 uPointLightingColor;

varying vec3 color;
varying vec2 vUvs;
varying vec3 vNormal;
varying vec3 vPosition;
varying vec3 vColor;

void main(void) {
  vec4 mPosition = uModel * vec4(vPosition, 1.0);
  vec3 lightDirection = normalize(uPointLightingLocation - mPosition.xyz);
  vec4 transformedNormal = uModel * vec4(normalize(vNormal), 0.0);
  float pointLightWeighting = max(dot(transformedNormal.xyz, lightDirection), 0.0);

  vec3 eyeDirection = normalize(-mPosition.xyz);
  vec3 reflectionDirection = reflect(lightDirection, transformedNormal.xyz);
  float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), clamp(20., 1., 32.));
  vec3 specularLight = specularLightWeighting * uPointLightingColor;

  vec3 vLightWeighting = uAmbientColor + uPointLightingColor * pointLightWeighting + specularLight;

  vec4 c = texture2D(sColor, vUvs);
  //gl_FragColor = vec4(c.rgb * color * vLightWeighting * vColor.x, 1);
  gl_FragColor = vec4(c.rgb * vLightWeighting * vColor.x, 1);
  //gl_FragColor = vec4(vColor * vLightWeighting, 1);
  //gl_FragColor = vec4(vec3(0.6, 0.6, 0.6) * vLightWeighting, 1.);
  //gl_FragColor = vec4(vec3(0.6, 0.6, 0.6), 1.);
}
`
};
/* harmony export (immutable) */ __webpack_exports__["a"] = vs;

/* harmony export (immutable) */ __webpack_exports__["b"] = fs;




/***/ }),
/* 303 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_texture_js__ = __webpack_require__(56);


function edgeRadialTexture(gl, config, descriptor) {
  throw new Error('Not Implemented');
}

function edgeTexture(gl, config, descriptor) {
  throw new Error('Not Implemented');
}

function brewerTexture(gl, config, state) {
  throw new Error('Not Implemented');
}

/* harmony default export */ __webpack_exports__["a"] = ({
  brewer: brewerTexture,
  movie: __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["a" /* movieTexture */],
  url: __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["b" /* urlTexture */],
  edge: edgeTexture,
  'edge-radial': edgeRadialTexture,
  'radial-gradient': __WEBPACK_IMPORTED_MODULE_0__base_texture_js__["c" /* radialGradientTexture */]
});



/***/ })
/******/ ]);
//# sourceMappingURL=bundle.js.map